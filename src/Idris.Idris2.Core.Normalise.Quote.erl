-module('Idris.Idris2.Core.Normalise.Quote').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7348-8568--in--un--toHolesOnly'/13,
  'nested--7348-8208--in--un--isRef'/12,
  'nested--7234-7554--in--un--findName'/12,
  'nested--7234-7406--in--un--addLater'/13,
  'dn--un--quote_Quote_Term'/5,
  'dn--un--quote_Quote_NF'/5,
  'dn--un--quote_Quote_Closure'/5,
  'dn--un--quoteOpts_Quote_Term'/6,
  'dn--un--quoteOpts_Quote_NF'/6,
  'dn--un--quoteOpts_Quote_Closure'/6,
  'dn--un--quoteLHS_Quote_Term'/5,
  'dn--un--quoteLHS_Quote_NF'/5,
  'dn--un--quoteLHS_Quote_Closure'/5,
  'dn--un--quoteGen_Quote_Term'/8,
  'dn--un--quoteGen_Quote_NF'/7,
  'dn--un--quoteGen_Quote_Closure'/7,
  'dn--un--__Impl_Quote_Term'/0,
  'dn--un--__Impl_Quote_NF'/0,
  'dn--un--__Impl_Quote_Closure'/0,
  'un--quoteWithPiGen'/9,
  'un--quoteWithPi'/5,
  'un--quotePi'/9,
  'un--quoteOpts'/6,
  'un--quoteLHS'/6,
  'un--quoteHead'/10,
  'un--quoteGenNF'/9,
  'un--quoteGen'/6,
  'un--quoteBinder'/9,
  'un--quoteArgsWithFC'/9,
  'un--quoteArgs'/9,
  'un--quoteArgWithFC'/9,
  'un--quoteArg'/9,
  'un--quote'/6,
  'un--genName'/2
]).
'nested--7348-8568--in--un--toHolesOnly'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Core.Value.MkClosure', V13, V14, V15, V16, V17} -> {'Core.Value.MkClosure', V13, case V14 of {'Core.Value.MkEvalOpts', V18, V19, V20, V21, V22, V23, V24, V25} -> {'Core.Value.MkEvalOpts', 1, 1, V20, V21, V22, V23, V24, V25} end, V15, V16, V17}; _ -> V12 end.
'nested--7348-8208--in--un--isRef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Core.Value.NRef', V12, V13} -> 1; _ -> 0 end.
'nested--7234-7554--in--un--findName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Core.TT.Bounds.None'} -> {'Prelude.Types.Nothing'}; {'Core.TT.Bounds.Add', V12, V13, V14} -> case V13 of {'Core.Name.MN', V15, V16} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V16)) of 1 -> {'Prelude.Types.Just', 0}; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7234-7554--in--un--findName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14)), fun (V17) -> begin (V18 = V17), {'Prelude.Types.Just', (V18 + 1)} end end)) end; _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7234-7554--in--un--findName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14)), fun (V19) -> begin (V20 = V19), {'Prelude.Types.Just', (V20 + 1)} end end)) end end.
'nested--7234-7406--in--un--addLater'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> V11; [E0 | E1] -> (fun (V13, V14) -> begin (V15 = ('nested--7234-7406--in--un--addLater'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14))), (V15 + 1) end end(E0, E1)) end.
'dn--un--quote_Quote_Term'(V0, V1, V2, V3, V4) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V5 = 0), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> ('dn--un--quoteGen_Quote_Term'(V0, V1, V10, {'Core.Normalise.Quote.MkQuoteOpts', 1, 0, {'Prelude.Types.Nothing'}}, V2, V3, V4, V11)) end), V12 end(V7)) end end end end.
'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V4) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V5 = 0), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('dn--un--quoteGen_Quote_NF'(V0, V1, V10, {'Core.Normalise.Quote.MkQuoteOpts', 1, 0, {'Prelude.Types.Nothing'}}, V2, V3, V4))), V11 end(V7)) end end end end.
'dn--un--quote_Quote_Closure'(V0, V1, V2, V3, V4) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V5 = 0), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('dn--un--quoteGen_Quote_Closure'(V0, V1, V10, {'Core.Normalise.Quote.MkQuoteOpts', 1, 0, {'Prelude.Types.Nothing'}}, V2, V3, V4))), V11 end(V7)) end end end end.
'dn--un--quoteOpts_Quote_Term'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V6 = 0), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> ('dn--un--quoteGen_Quote_Term'(V0, V1, V11, V2, V3, V4, V5, V12)) end), V13 end(V8)) end end end end.
'dn--un--quoteOpts_Quote_NF'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V6 = 0), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('dn--un--quoteGen_Quote_NF'(V0, V1, V11, V2, V3, V4, V5))), V12 end(V8)) end end end end.
'dn--un--quoteOpts_Quote_Closure'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V6 = 0), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('dn--un--quoteGen_Quote_Closure'(V0, V1, V11, V2, V3, V4, V5))), V12 end(V8)) end end end end.
'dn--un--quoteLHS_Quote_Term'(V0, V1, V2, V3, V4) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V5 = 0), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> ('dn--un--quoteGen_Quote_Term'(V0, V1, V10, {'Core.Normalise.Quote.MkQuoteOpts', 1, 1, {'Prelude.Types.Nothing'}}, V2, V3, V4, V11)) end), V12 end(V7)) end end end end.
'dn--un--quoteLHS_Quote_NF'(V0, V1, V2, V3, V4) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V5 = 0), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('dn--un--quoteGen_Quote_NF'(V0, V1, V10, {'Core.Normalise.Quote.MkQuoteOpts', 1, 1, {'Prelude.Types.Nothing'}}, V2, V3, V4))), V11 end(V7)) end end end end.
'dn--un--quoteLHS_Quote_Closure'(V0, V1, V2, V3, V4) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V5 = 0), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('dn--un--quoteGen_Quote_Closure'(V0, V1, V10, {'Core.Normalise.Quote.MkQuoteOpts', 1, 1, {'Prelude.Types.Nothing'}}, V2, V3, V4))), V11 end(V7)) end end end end.
'dn--un--quoteGen_Quote_Term'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Prelude.Types.Right', V6}.
'dn--un--quoteGen_Quote_NF'(V0, V1, V2, V3, V4, V5, V6) -> ('un--quoteGenNF'(V0, [], V1, V2, V3, V4, {'Core.TT.Bounds.None'}, V5, V6)).
'dn--un--quoteGen_Quote_Closure'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V4, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('dn--un--quoteGen_Quote_NF'(V0, V1, V2, V3, V4, V5, V11))), V12 end(V8)) end end end end.
'dn--un--__Impl_Quote_Term'() -> {'Core.Normalise.Quote.dn--un--__mkQuote', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--quote_Quote_Term'(V0, V1, V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--quoteLHS_Quote_Term'(V5, V6, V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--quoteOpts_Quote_Term'(V10, V11, V12, V13, V14, V15)) end end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('dn--un--quoteGen_Quote_Term'(V16, V17, V18, V19, V20, V21, V22, V23)) end end end end end end end end}.
'dn--un--__Impl_Quote_NF'() -> {'Core.Normalise.Quote.dn--un--__mkQuote', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--quote_Quote_NF'(V0, V1, V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--quoteLHS_Quote_NF'(V5, V6, V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--quoteOpts_Quote_NF'(V10, V11, V12, V13, V14, V15)) end end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--quoteGen_Quote_NF'(V16, V17, V18, V19, V20, V21, V22)) end end end end end end end}.
'dn--un--__Impl_Quote_Closure'() -> {'Core.Normalise.Quote.dn--un--__mkQuote', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--quote_Quote_Closure'(V0, V1, V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--quoteLHS_Quote_Closure'(V5, V6, V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--quoteOpts_Quote_Closure'(V10, V11, V12, V13, V14, V15)) end end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--quoteGen_Quote_Closure'(V16, V17, V18, V19, V20, V21, V22)) end end end end end end end}.
'un--quoteWithPiGen'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.Value.NBind', V9, V10, V11, V12} -> case V11 of {'Core.TT.Pi', V13, V14, V15, V16} -> begin (V17 = ('un--genName'(V3, <<"qv"/utf8>>))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V60 = begin (V23 = fun (V22) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V22)) end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V59 = begin (V34 = begin (V28 = ((V12(V5))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V7, {'Core.TT.Ref', V9, {'Core.TT.Bound'}, V21}))))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V33 = ('un--quoteWithPiGen'(V0, [V10 | V1], V2, V3, V4, V5, {'Core.TT.Bounds.Add', V10, V21, V6}, V7, V32))), V33 end(V29)) end end end end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V58 = begin (V45 = begin (V39 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V27, V16))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V44 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V27, V6, V7, V43))), V44 end(V40)) end end end end), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V57 = begin (V50 = ('un--quotePi'(V0, V1, V2, V3, V4, V27, V6, V7, V15))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V56 = fun (V55) -> {'Prelude.Types.Right', {'Core.TT.Bind', V9, V10, {'Core.TT.Pi', V13, V14, V54, V49}, V38}} end), V56 end(V51)) end end end end), V57 end(V46)) end end end end), V58 end(V35)) end end end end), V59 end(V24)) end end end end), V60 end(V18)) end end end end; _ -> begin (V62 = fun (V61) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V61)) end), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V67 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V66, V6, V7, V8))), V67 end(V63)) end end end end end; {'Core.Value.NErased', V68, V69} -> begin (V82 = ('Idris.Idris2.Core.TT':'dn--un--traverse_Traversable_WhyErased'({'Prelude.Interfaces.MkApplicative', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Core.Functor':'dn--un--map_Functor_CORECore'(V72, V73)) end end end end, fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Core.Applicative':'dn--un--pure_Applicative_CORECore'(V75, V76)) end end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Core.Applicative':'dn--un--<*>_Applicative_CORECore'(V79, V80)) end end end end}, fun (V81) -> ('un--quoteWithPiGen'(V0, V1, V2, V3, V4, V5, V6, V7, V81)) end, V69))), ((begin (V98 = fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V95, V96, V97)) end end end end end), fun (V99) -> fun (V100) -> ((((V98('erased'))('erased'))(V99))(V100)) end end end((begin (V90 = fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> {'Prelude.Types.Right', (V86(V89))} end end end end end), fun (V91) -> fun (V92) -> ((((V90('erased'))('erased'))(V91))(V92)) end end end(fun (V83) -> {'Core.TT.Erased', V68, V83} end))))(V82)) end; _ -> begin (V102 = fun (V101) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V101)) end), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V107 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V106, V6, V7, V8))), V107 end(V103)) end end end end end.
'un--quoteWithPi'(V0, V1, V2, V3, V4) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V5 = 0), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('un--quoteWithPiGen'(V0, [], V1, V10, {'Core.Normalise.Quote.MkQuoteOpts', 1, 0, {'Prelude.Types.Nothing'}}, V2, {'Core.TT.Bounds.None'}, V3, V4))), V11 end(V7)) end end end end.
'un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.TT.Explicit'} -> fun (V9) -> {'Prelude.Types.Right', {'Core.TT.Explicit'}} end; {'Core.TT.Implicit'} -> fun (V10) -> {'Prelude.Types.Right', {'Core.TT.Implicit'}} end; {'Core.TT.AutoImplicit'} -> fun (V11) -> {'Prelude.Types.Right', {'Core.TT.AutoImplicit'}} end; {'Core.TT.DefImplicit', V12} -> begin (V19 = begin (V13 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V12))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V18 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V17))), V18 end(V14)) end end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', {'Core.TT.DefImplicit', V23}} end), V25 end(V20)) end end end end end.
'un--quoteOpts'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Core.Normalise.Quote.dn--un--__mkQuote', V6, V7, V8, V9} -> fun (V10) -> ((((((V8(V1))(V2))(V3))(V4))(V5))(V10)) end end.
'un--quoteLHS'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Core.Normalise.Quote.dn--un--__mkQuote', V6, V7, V8, V9} -> (((((V7(V1))(V2))(V3))(V4))(V5)) end.
'un--quoteHead'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Value.NLocal', V10, V11} -> begin (V12 = ('nested--7234-7406--in--un--addLater'(V2, V11, V10, V8, V1, V7, V6, V5, V4, V3, V0, V11, V1))), fun (V13) -> {'Prelude.Types.Right', {'Core.TT.Local', V6, V10, V12}} end end; {'Core.Value.NRef', V14, V15} -> fun (V16) -> case V14 of {'Core.TT.Bound'} -> case V15 of {'Core.Name.MN', V17, V18} -> {'Prelude.Types.Right', case ('nested--7234-7554--in--un--findName'(V1, V2, V18, V17, V8, V7, V6, V5, V4, V3, V0, V7)) of {'Prelude.Types.Just', V19} -> begin (V20 = V19), {'Core.TT.Local', V6, {'Prelude.Types.Nothing'}, V20} end; {'Prelude.Types.Nothing'} -> {'Core.TT.Ref', V6, {'Core.TT.Bound'}, {'Core.Name.MN', V17, V18}} end}; _ -> {'Prelude.Types.Right', {'Core.TT.Ref', V6, V14, V15}} end; _ -> {'Prelude.Types.Right', {'Core.TT.Ref', V6, V14, V15}} end end; {'Core.Value.NMeta', V21, V22, V23} -> begin (V24 = ('un--quoteArgs'(V0, V1, V2, V3, V4, V5, V7, V8, V23))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', {'Core.TT.Meta', V6, V21, V22, V28}} end), V30 end(V25)) end end end end end.
'un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.Value.NBind', V9, V10, V11, V12} -> begin (V13 = ('un--genName'(V3, <<"qv"/utf8>>))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V37 = begin (V24 = begin (V18 = ((V12(V5))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V7, {'Core.TT.Ref', V9, {'Core.TT.Bound'}, V17}))))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V23 = ('un--quoteGenNF'(V0, [V10 | V1], V2, V3, V4, V5, {'Core.TT.Bounds.Add', V10, V17, V6}, V7, V22))), V23 end(V19)) end end end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V36 = begin (V29 = ('un--quoteBinder'(V0, V1, V2, V3, V4, V5, V6, V7, V11))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V35 = fun (V34) -> {'Prelude.Types.Right', {'Core.TT.Bind', V9, V10, V33, V28}} end), V35 end(V30)) end end end end), V36 end(V25)) end end end end), V37 end(V14)) end end end end; {'Core.Value.NApp', V38, V39, V40} -> begin (V41 = ('un--quoteHead'(V0, V1, V2, V3, V4, V5, V38, V6, V7, V39))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V86 = begin (V57 = case V4 of {'Core.Normalise.Quote.MkQuoteOpts', V46, V47, V48} -> case V48 of {'Prelude.Types.Nothing'} -> fun (V49) -> {'Prelude.Types.Right', V4} end; {'Prelude.Types.Just', V50} -> case V50 of 0 -> fun (V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Size limit exceeded"/utf8>>}, V51)) end; _ -> begin (V52 = (V50 - 1)), fun (V53) -> {'Prelude.Types.Right', case V4 of {'Core.Normalise.Quote.MkQuoteOpts', V54, V55, V56} -> {'Core.Normalise.Quote.MkQuoteOpts', V54, V55, {'Prelude.Types.Just', V52}} end} end end end end end), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V85 = begin (V78 = case case case V4 of {'Core.Normalise.Quote.MkQuoteOpts', V62, V63, V64} -> V63 end of 1 -> case case V4 of {'Core.Normalise.Quote.MkQuoteOpts', V65, V66, V67} -> V65 end of 1 -> 0; 0 -> ('nested--7348-8208--in--un--isRef'(V1, V2, V40, V39, V38, V7, V6, V5, V4, V3, V0, V39)) end; 0 -> 0 end of 1 -> begin (V69 = fun (V68) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V68)) end), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V74 = ('un--quoteArgsWithFC'(V0, V1, V2, V3, V61, V73, V6, V7, V40))), V74 end(V70)) end end end end; 0 -> ('un--quoteArgsWithFC'(V0, V1, V2, V3, case V61 of {'Core.Normalise.Quote.MkQuoteOpts', V75, V76, V77} -> {'Core.Normalise.Quote.MkQuoteOpts', 0, V76, V77} end, V5, V6, V7, V40)) end), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V84 = fun (V83) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V45, V82))} end), V84 end(V79)) end end end end), V85 end(V58)) end end end end), V86 end(V42)) end end end end; {'Core.Value.NDCon', V87, V88, V89, V90, V91} -> begin (V92 = ('un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V91))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V98 = fun (V97) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Core.TT.Ref', V87, {'Core.TT.DataCon', V89, V90}, V88}, V96))} end), V98 end(V93)) end end end end; {'Core.Value.NTCon', V99, V100, V101, V102, V103} -> begin (V104 = ('un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V103))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V110 = fun (V109) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Core.TT.Ref', V99, {'Core.TT.TyCon', V101, V102}, V100}, V108))} end), V110 end(V105)) end end end end; {'Core.Value.NAs', V111, V112, V113, V114} -> begin (V115 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V113))), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V127 = begin (V120 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V114))), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V126 = fun (V125) -> {'Prelude.Types.Right', {'Core.TT.As', V111, V112, V119, V124}} end), V126 end(V121)) end end end end), V127 end(V116)) end end end end; {'Core.Value.NDelayed', V128, V129, V130} -> begin (V131 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V130))), fun (V132) -> begin (V133 = (V131(V132))), case V133 of {'Prelude.Types.Left', V134} -> {'Prelude.Types.Left', V134}; {'Prelude.Types.Right', V135} -> (begin (V137 = fun (V136) -> {'Prelude.Types.Right', {'Core.TT.TDelayed', V128, V129, V135}} end), V137 end(V132)) end end end end; {'Core.Value.NDelay', V138, V139, V140, V141} -> begin (V142 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, ('nested--7348-8568--in--un--toHolesOnly'(V1, V2, V141, V140, V139, V138, V7, V6, V5, V4, V3, V0, V141))))), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V166 = begin (V147 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V146))), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V165 = begin (V152 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, ('nested--7348-8568--in--un--toHolesOnly'(V1, V2, V141, V140, V139, V138, V7, V6, V5, V4, V3, V0, V140))))), fun (V153) -> begin (V154 = (V152(V153))), case V154 of {'Prelude.Types.Left', V155} -> {'Prelude.Types.Left', V155}; {'Prelude.Types.Right', V156} -> (begin (V164 = begin (V157 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V156))), fun (V158) -> begin (V159 = (V157(V158))), case V159 of {'Prelude.Types.Left', V160} -> {'Prelude.Types.Left', V160}; {'Prelude.Types.Right', V161} -> (begin (V163 = fun (V162) -> {'Prelude.Types.Right', {'Core.TT.TDelay', V138, V139, V161, V151}} end), V163 end(V158)) end end end end), V164 end(V153)) end end end end), V165 end(V148)) end end end end), V166 end(V143)) end end end end; {'Core.Value.NForce', V167, V168, V169, V170} -> begin (V171 = ('un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V170))), fun (V172) -> begin (V173 = (V171(V172))), case V173 of {'Prelude.Types.Left', V174} -> {'Prelude.Types.Left', V174}; {'Prelude.Types.Right', V175} -> (begin (V200 = case V169 of {'Core.Value.NDelay', V176, V177, V178, V179} -> begin (V180 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V179))), fun (V181) -> begin (V182 = (V180(V181))), case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> (begin (V192 = begin (V185 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V184))), fun (V186) -> begin (V187 = (V185(V186))), case V187 of {'Prelude.Types.Left', V188} -> {'Prelude.Types.Left', V188}; {'Prelude.Types.Right', V189} -> (begin (V191 = fun (V190) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V189, V175))} end), V191 end(V186)) end end end end), V192 end(V181)) end end end end; _ -> begin (V193 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V169))), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V199 = fun (V198) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Core.TT.TForce', V167, V168, V197}, V175))} end), V199 end(V194)) end end end end end), V200 end(V172)) end end end end; {'Core.Value.NPrimVal', V201, V202} -> fun (V203) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V201, V202}} end; {'Core.Value.NErased', V204, V205} -> begin (V218 = ('Idris.Idris2.Core.TT':'dn--un--traverse_Traversable_WhyErased'({'Prelude.Interfaces.MkApplicative', fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> ('Idris.Idris2.Core.Core.Functor':'dn--un--map_Functor_CORECore'(V208, V209)) end end end end, fun (V210) -> fun (V211) -> fun (V212) -> ('Idris.Idris2.Core.Core.Applicative':'dn--un--pure_Applicative_CORECore'(V211, V212)) end end end, fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> ('Idris.Idris2.Core.Core.Applicative':'dn--un--<*>_Applicative_CORECore'(V215, V216)) end end end end}, fun (V217) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V217)) end, V205))), ((begin (V234 = fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V231, V232, V233)) end end end end end), fun (V235) -> fun (V236) -> ((((V234('erased'))('erased'))(V235))(V236)) end end end((begin (V226 = fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> case V223 of {'Prelude.Types.Left', V224} -> {'Prelude.Types.Left', V224}; {'Prelude.Types.Right', V225} -> {'Prelude.Types.Right', (V222(V225))} end end end end end), fun (V227) -> fun (V228) -> ((((V226('erased'))('erased'))(V227))(V228)) end end end(fun (V219) -> {'Core.TT.Erased', V204, V219} end))))(V218)) end; {'Core.Value.NType', V237, V238} -> fun (V239) -> {'Prelude.Types.Right', {'Core.TT.TType', V237, V238}} end end.
'un--quoteGen'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Core.Normalise.Quote.dn--un--__mkQuote', V6, V7, V8, V9} -> fun (V10) -> fun (V11) -> (((((((V9(V1))(V2))(V3))(V4))(V5))(V10))(V11)) end end end.
'un--quoteBinder'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.TT.Lam', V9, V10, V11, V12} -> begin (V19 = begin (V13 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V12))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V18 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V17))), V18 end(V14)) end end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V31 = begin (V24 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V11))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', {'Core.TT.Lam', V9, V10, V28, V23}} end), V30 end(V25)) end end end end), V31 end(V20)) end end end end; {'Core.TT.Let', V32, V33, V34, V35} -> begin (V42 = begin (V36 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V34))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V41 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V40))), V41 end(V37)) end end end end), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V60 = begin (V53 = begin (V47 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V35))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V52 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V51))), V52 end(V48)) end end end end), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V59 = fun (V58) -> {'Prelude.Types.Right', {'Core.TT.Let', V32, V33, V46, V57}} end), V59 end(V54)) end end end end), V60 end(V43)) end end end end; {'Core.TT.Pi', V61, V62, V63, V64} -> begin (V71 = begin (V65 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V64))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V70 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V69))), V70 end(V66)) end end end end), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V83 = begin (V76 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V63))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V82 = fun (V81) -> {'Prelude.Types.Right', {'Core.TT.Pi', V61, V62, V80, V75}} end), V82 end(V77)) end end end end), V83 end(V72)) end end end end; {'Core.TT.PVar', V84, V85, V86, V87} -> begin (V94 = begin (V88 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V87))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V93 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V92))), V93 end(V89)) end end end end), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V106 = begin (V99 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V86))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V105 = fun (V104) -> {'Prelude.Types.Right', {'Core.TT.PVar', V84, V85, V103, V98}} end), V105 end(V100)) end end end end), V106 end(V95)) end end end end; {'Core.TT.PLet', V107, V108, V109, V110} -> begin (V117 = begin (V111 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V109))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V116 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V115))), V116 end(V112)) end end end end), fun (V118) -> begin (V119 = (V117(V118))), case V119 of {'Prelude.Types.Left', V120} -> {'Prelude.Types.Left', V120}; {'Prelude.Types.Right', V121} -> (begin (V135 = begin (V128 = begin (V122 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V110))), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V127 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V126))), V127 end(V123)) end end end end), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V134 = fun (V133) -> {'Prelude.Types.Right', {'Core.TT.PLet', V107, V108, V121, V132}} end), V134 end(V129)) end end end end), V135 end(V118)) end end end end; {'Core.TT.PVTy', V136, V137, V138} -> begin (V145 = begin (V139 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V138))), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V144 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V143))), V144 end(V140)) end end end end), fun (V146) -> begin (V147 = (V145(V146))), case V147 of {'Prelude.Types.Left', V148} -> {'Prelude.Types.Left', V148}; {'Prelude.Types.Right', V149} -> (begin (V151 = fun (V150) -> {'Prelude.Types.Right', {'Core.TT.PVTy', V136, V137, V149}} end), V151 end(V146)) end end end end end.
'un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> ('un--quoteArgWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V9)) end, V8, [])).
'un--quoteArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> ('un--quoteArg'(V0, V1, V2, V3, V4, V5, V6, V7, V9)) end, V8, [])).
'un--quoteArgWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V9) -> ('un--quoteArg'(V0, V1, V2, V3, V4, V5, V6, V7, V9)) end, V8)).
'un--quoteArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V14 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V13))), V14 end(V10)) end end end end.
'un--quote'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Core.Normalise.Quote.dn--un--__mkQuote', V6, V7, V8, V9} -> (((((V6(V1))(V2))(V3))(V4))(V5)) end.
'un--genName'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V25 = begin (V18 = begin (V12 = V0), fun (V13) -> begin (V17 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, begin (V16 = (V11 + 1)), case ((V16 band 9223372036854775808) =/= 0) of 'true' -> (V16 bor -9223372036854775808); _ -> (V16 band 9223372036854775807) end end)) end end(V13))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', {'Core.Name.MN', V1, V11}} end), V24 end(V19)) end end end end), V25 end(V8)) end end end end.
