-module('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Render.Terminal').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--4345-5087--in--un--writeOutput'/3,
  'nested--4345-5084--in--un--push'/3,
  'nested--4345-5086--in--un--pop'/2,
  'nested--4345-5085--in--un--peek'/2,
  'nested--4345-5088--in--un--go'/4,
  'un--underline'/0,
  'un--strike'/0,
  'un--renderString'/1,
  'un--renderIO'/2,
  'un--putDoc'/2,
  'un--italic'/0,
  'un--color'/1,
  'un--bold'/0,
  'un--bgColor'/1,
  'un--AnsiStyle'/0
]).
'nested--4345-5087--in--un--writeOutput'(V0, V1, V2) -> ('Idris.Idris2.Control.Monad.ST':'un--modifySTRef'(V1, fun (V3) -> ((begin (V6 = fun (V4) -> fun (V5) -> <<V4/binary, V5/binary>> end end), fun (V7) -> fun (V8) -> ((V6(V7))(V8)) end end end(V3))(V2)) end)).
'nested--4345-5084--in--un--push'(V0, V1, V2) -> ('Idris.Idris2.Control.Monad.ST':'un--modifySTRef'(V1, fun (V3) -> [V2 | V3] end)).
'nested--4345-5086--in--un--pop'(V0, V1) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(begin (V2 = V1), begin (V3 = V2), fun (V4) -> ('erlang':'get'(V3)) end end end, fun (V5) -> case V5 of [E0 | E1] -> (fun (V6, V7) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(begin (V8 = V1), begin (V9 = V8), fun (V10) -> ('erlang':'put'(V9, V7)) end end end, fun (V11) -> fun (V12) -> {'Prelude.Types.Just', V6} end end)) end(E0, E1)); [] -> fun (V13) -> {'Prelude.Types.Nothing'} end end end)).
'nested--4345-5085--in--un--peek'(V0, V1) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(begin (V2 = V1), begin (V3 = V2), fun (V4) -> ('erlang':'get'(V3)) end end end, fun (V5) -> fun (V6) -> case V5 of [E0 | E1] -> (fun (V7, V8) -> {'Prelude.Types.Just', V7} end(E0, E1)); [] -> {'Prelude.Types.Nothing'} end end end)).
'nested--4345-5088--in--un--go'(V0, V1, V2, V3) -> case V3 of {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.SEmpty'} -> fun (V4) -> {'Builtin.MkUnit'} end; {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.SChar', V5, V6} -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(('nested--4345-5087--in--un--writeOutput'(V0, V2, ('Idris.Idris2.Data.String':'un--singleton'(V5)))), fun (V7) -> ('nested--4345-5088--in--un--go'(V0, V1, V2, (V6()))) end)); {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.SText', V8, V9, V10} -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(('nested--4345-5087--in--un--writeOutput'(V0, V2, V9)), fun (V11) -> ('nested--4345-5088--in--un--go'(V0, V1, V2, (V10()))) end)); {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.SLine', V12, V13} -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(('nested--4345-5087--in--un--writeOutput'(V0, V2, ((begin (V16 = fun (V14) -> fun (V15) -> <<V14/binary, V15/binary>> end end), fun (V17) -> fun (V18) -> ((V16(V17))(V18)) end end end(('Idris.Idris2.Data.String':'un--singleton'($\x{a}))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--textSpaces'(V12)))))), fun (V19) -> ('nested--4345-5088--in--un--go'(V0, V1, V2, V13)) end)); {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.SAnnPush', V20, V21} -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(('nested--4345-5085--in--un--peek'(V0, V1)), fun (V22) -> case V22 of {'Prelude.Types.Just', V23} -> begin (V29 = ((begin (V26 = fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V24, V25)) end end), fun (V27) -> fun (V28) -> ((V26(V27))(V28)) end end end(V20))(V23))), ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(('nested--4345-5084--in--un--push'(V0, V1, V29)), fun (V30) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(('nested--4345-5087--in--un--writeOutput'(V0, V2, ('Idris.Idris2.Libraries.Control.ANSI.SGR':'un--escapeSGR'(V29)))), fun (V31) -> ('nested--4345-5088--in--un--go'(V0, V1, V2, V21)) end)) end)) end; {'Prelude.Types.Nothing'} -> begin (V32 = V1), begin (V33 = V32), fun (V34) -> ('erlang':'put'(V33, [])) end end end end end)); {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.SAnnPop', V35} -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(('nested--4345-5086--in--un--pop'(V0, V1)), fun (V36) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(('nested--4345-5085--in--un--peek'(V0, V1)), fun (V37) -> case V37 of {'Prelude.Types.Just', V38} -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(('nested--4345-5087--in--un--writeOutput'(V0, V2, ('Idris.Idris2.Libraries.Control.ANSI.SGR':'un--escapeSGR'([{'Libraries.Control.ANSI.SGR.Reset'} | V38])))), fun (V39) -> ('nested--4345-5088--in--un--go'(V0, V1, V2, V35)) end)); {'Prelude.Types.Nothing'} -> begin (V40 = V1), begin (V41 = V40), fun (V42) -> ('erlang':'put'(V41, [])) end end end end end)) end)) end.
'un--underline'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'({'Libraries.Control.ANSI.SGR.SetStyle', 4})).
'un--strike'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'({'Libraries.Control.ANSI.SGR.SetStyle', 7})).
'un--renderString'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<"<internal pretty printing error>"/utf8>> end, ('Idris.Idris2.Control.Monad.ST':'un--runST'(fun (V1) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(fun (V2) -> ('Idris.Idris2.Control.Monad.ST':'un--newSTRef'([[] | []], V2)) end, fun (V3) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(fun (V4) -> ('Idris.Idris2.Control.Monad.ST':'un--newSTRef'(<<""/utf8>>, V4)) end, fun (V5) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(('nested--4345-5088--in--un--go'(V0, V3, V5, V0)), fun (V6) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'(begin (V7 = V3), begin (V8 = V7), fun (V9) -> ('erlang':'get'(V8)) end end end, fun (V10) -> case V10 of [] -> fun (V11) -> {'Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V12, V13) -> case V13 of [] -> ((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'(V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V17) -> {'Prelude.Types.Just', V17} end))(begin (V14 = V5), begin (V15 = V14), fun (V16) -> ('erlang':'get'(V15)) end end end)); _ -> fun (V25) -> {'Prelude.Types.Nothing'} end end end(E0, E1)); _ -> fun (V26) -> {'Prelude.Types.Nothing'} end end end)) end)) end)) end)) end)))).
'un--renderIO'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('un--renderString'(V0))/binary, <<"\x{a}"/utf8>>/binary>>, V1)).
'un--putDoc'(V0, V1) -> ('un--renderIO'((('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--layoutPretty'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--defaultLayoutOptions'())))(V0)), V1)).
'un--italic'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'({'Libraries.Control.ANSI.SGR.SetStyle', 3})).
'un--color'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'({'Libraries.Control.ANSI.SGR.SetForeground', V0})).
'un--bold'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'({'Libraries.Control.ANSI.SGR.SetStyle', 0})).
'un--bgColor'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'({'Libraries.Control.ANSI.SGR.SetBackground', V0})).
'un--AnsiStyle'() -> {'Prelude.Basics.List', {'Libraries.Control.ANSI.SGR.SGR'}}.
