-module('Idris.Idris2.TTImp.TTImp').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--weakenNs-5158'/3,
  'nested--7452-5192--in--un--wknName'/2,
  'nested--11885-9428--in--un--updateNs'/11,
  'nested--12957-10570--in--un--toRF'/14,
  'nested--11861-9353--in--un--setAs'/8,
  'nested--11885-9430--in--un--impAs'/12,
  'nested--12944-10333--in--un--getName'/3,
  'nested--12944-10334--in--un--getFieldName'/3,
  'nested--12957-10571--in--un--fnsUN'/13,
  'nested--12957-10572--in--un--fnsRF'/13,
  'nested--12957-10569--in--un--fldns\x{27}'/13,
  'nested--11885-9429--in--un--findImps'/13,
  'nested--12944-10335--in--un--expandNS'/4,
  'nested--12944-10336--in--un--defName'/4,
  'nested--14025-11382--in--un--app'/6,
  'nested--12957-10573--in--un--all'/13,
  'dn--un--weaken_Weaken_NestedNames'/1,
  'dn--un--weakenNs_Weaken_NestedNames'/2,
  'dn--un--show_Show_(RawImp\x{27} $nm)'/2,
  'dn--un--show_Show_(ImpTy\x{27} $nm)'/2,
  'dn--un--show_Show_(ImpRecord\x{27} $nm)'/2,
  'dn--un--show_Show_(ImpDecl\x{27} $nm)'/2,
  'dn--un--show_Show_(ImpData\x{27} $nm)'/2,
  'dn--un--show_Show_(ImpClause\x{27} $nm)'/2,
  'dn--un--show_Show_(IFieldUpdate\x{27} $nm)'/2,
  'dn--un--show_Show_(IField\x{27} $nm)'/2,
  'dn--un--show_Show_(FnOpt\x{27} $nm)'/2,
  'dn--un--show_Show_(Arg\x{27} $nm)'/2,
  'dn--un--showPrec_Show_(RawImp\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(ImpTy\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(ImpRecord\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(ImpData\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(IFieldUpdate\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(IField\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(FnOpt\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(Arg\x{27} $nm)'/3,
  'dn--un--__Impl_Weaken_NestedNames'/0,
  'dn--un--__Impl_Show_(RawImp\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(ImpTy\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(ImpRecord\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(ImpDecl\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(ImpData\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(ImpClause\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(IFieldUpdate\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(IField\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(FnOpt\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(Arg\x{27} $nm)'/1,
  'dn--un--__Impl_Eq_WithFlag'/0,
  'dn--un--__Impl_Eq_FnOpt'/0,
  'dn--un--__Impl_Eq_DataOpt'/0,
  'dn--un--==_Eq_WithFlag'/2,
  'dn--un--==_Eq_FnOpt'/2,
  'dn--un--==_Eq_DataOpt'/2,
  'dn--un--/=_Eq_WithFlag'/2,
  'dn--un--/=_Eq_FnOpt'/2,
  'dn--un--/=_Eq_DataOpt'/2,
  'un--unIArg'/1,
  'un--mkWithClause'/5,
  'un--mapFieldUpdateTerm'/2,
  'un--mapAltType'/2,
  'un--logRaw'/5,
  'un--lhsInCurrentNS'/3,
  'un--isTotalityReq'/1,
  'un--isIVar'/1,
  'un--isIPrimVal'/1,
  'un--isIBindVar'/1,
  'un--isExplicit'/1,
  'un--implicitsAs'/5,
  'un--getFnArgs'/2,
  'un--getFn'/1,
  'un--getFieldUpdateTerm'/1,
  'un--getFieldUpdatePath'/1,
  'un--getFC'/1,
  'un--gapply'/2,
  'un--findImplicits'/1,
  'un--findIBinds'/1,
  'un--definedInBlock'/2,
  'un--apply'/2,
  'un--RawImp'/0,
  'un--ImpTy'/0,
  'un--ImpRecord'/0,
  'un--ImpParameter\x{27}'/1,
  'un--ImpParameter'/0,
  'un--ImpDecl'/0,
  'un--ImpData'/0,
  'un--ImpClause'/0,
  'un--IRawImp'/0,
  'un--IImpClause'/0,
  'un--IFieldUpdate'/0,
  'un--IField'/0,
  'un--IArg'/0,
  'un--FnOpt'/0,
  'un--Arg'/0,
  'un--AltType'/0
]).
'case--weakenNs-5158'(V0, V1, V2) -> begin (V3 = V1), case V3 of 0 -> case V2 of {'Core.TT.SizedView.Z'} -> V0; _ -> case V2 of {'Core.TT.SizedView.S', V4} -> ('dn--un--weaken_Weaken_NestedNames'(('dn--un--weakenNs_Weaken_NestedNames'(V4, V0)))) end end; _ -> case V2 of {'Core.TT.SizedView.S', V5} -> ('dn--un--weaken_Weaken_NestedNames'(('dn--un--weakenNs_Weaken_NestedNames'(V5, V0)))) end end end.
'nested--7452-5192--in--un--wknName'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> {'Builtin.MkPair', V2, {'Builtin.MkPair', V4, {'Builtin.MkPair', ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V8)) end))(V6)), fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(((V7(V16))(V17)))) end end}}} end end end.
'nested--11885-9428--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [E0 | E1] -> (fun (V11, V12) -> case V11 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Just', V12}; _ -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V15, V16)) end end}, {'Prelude.Types.Just', V9}, V11)) of 1 -> {'Prelude.Types.Just', V12}; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--11885-9428--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12)), fun (V17) -> {'Prelude.Types.Just', [V11 | V17]} end)) end end end(E0, E1)); [] -> {'Prelude.Types.Nothing'} end.
'nested--12957-10570--in--un--toRF'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Core.Name.UN', V14} -> case V14 of {'Core.Name.Basic', V15} -> {'Core.Name.UN', {'Core.Name.Field', V15}}; _ -> V13 end; _ -> V13 end.
'nested--11861-9353--in--un--setAs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'TTImp.TTImp.IApp', V8, V9, V10} -> begin (V11 = ('nested--11861-9353--in--un--setAs'(V0, V1, V2, V3, V4, V5, [{'Prelude.Types.Nothing'} | V6], V9))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V8, V15, V10}} end), V17 end(V12)) end end end end; {'TTImp.TTImp.IAutoApp', V18, V19, V20} -> begin (V21 = ('nested--11861-9353--in--un--setAs'(V0, V1, V2, V3, V4, [{'Prelude.Types.Nothing'} | V5], V6, V19))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAutoApp', V18, V25, V20}} end), V27 end(V22)) end end end end; {'TTImp.TTImp.INamedApp', V28, V29, V30, V31} -> begin (V32 = ('nested--11861-9353--in--un--setAs'(V0, V1, V2, V3, V4, [{'Prelude.Types.Just', V30} | V5], [{'Prelude.Types.Just', V30} | V6], V29))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V38 = fun (V37) -> {'Prelude.Types.Right', {'TTImp.TTImp.INamedApp', V28, V36, V30, V31}} end), V38 end(V33)) end end end end; {'TTImp.TTImp.IWithApp', V39, V40, V41} -> begin (V42 = ('nested--11861-9353--in--un--setAs'(V0, V1, V2, V3, V4, V5, V6, V40))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V48 = fun (V47) -> {'Prelude.Types.Right', {'TTImp.TTImp.IWithApp', V39, V46, V41}} end), V48 end(V43)) end end end end; {'TTImp.TTImp.IVar', V49, V50} -> begin (V83 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Core.Name.Resolved', V3}, case V2 of {'Core.Context.MkDefs', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82} -> V51 end))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V187 = case V87 of {'Prelude.Types.Nothing'} -> begin (V94 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, (begin (V89 = fun (V88) -> V88 end), fun (V90) -> (V89(V90)) end end(<<"declare.def.lhs.implicits"/utf8>>)), 30, fun () -> <<(begin (V92 = fun (V91) -> V91 end), fun (V93) -> (V92(V93)) end end(<<"Could not find variable "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3))/binary>> end))), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V100 = fun (V99) -> {'Prelude.Types.Right', {'TTImp.TTImp.IVar', V49, V50}} end), V100 end(V95)) end end end end; {'Prelude.Types.Just', V101} -> begin (V102 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V4, [], V2, {'Core.Env.Nil'}, V101))), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V186 = begin (V107 = ('nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V50, V49, V6, V5, V5, V6, V1, V106))), fun (V108) -> begin (V109 = (V107(V108))), case V109 of {'Prelude.Types.Left', V110} -> {'Prelude.Types.Left', V110}; {'Prelude.Types.Right', V111} -> (begin (V185 = begin (V178 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, (begin (V113 = fun (V112) -> V112 end), fun (V114) -> (V113(V114)) end end(<<"declare.def.lhs.implicits"/utf8>>)), 30, fun () -> <<(begin (V116 = fun (V115) -> V115 end), fun (V117) -> (V116(V117)) end end(<<"\x{a}  In the type of "/utf8>>))/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3))/binary, <<<<": "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V101))/binary, <<(begin (V119 = fun (V118) -> V118 end), fun (V120) -> (V119(V120)) end end(<<"\x{a}  Using locals: "/utf8>>))/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V121) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V121)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V122, V123)) end end}, V1))/binary, <<(begin (V125 = fun (V124) -> V124 end), fun (V126) -> (V125(V126)) end end(<<"\x{a}  Found implicits: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V127) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V128) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V128)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V129, V130)) end end}, {'Prelude.Show.MkShow', fun (V131) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V132) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V133) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V133)) end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V134, V135)) end end}, V132)) end, fun (V136) -> fun (V137) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V138) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V138)) end, fun (V139) -> fun (V140) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V139, V140)) end end}, V136, V137)) end end}, V131)) end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V143) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V144) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V144)) end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V145, V146)) end end}, V143)) end, fun (V147) -> fun (V148) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V149) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V149)) end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V150, V151)) end end}, V147, V148)) end end}, V141, V142)) end end}}, V127)) end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V154) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V154)) end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V155, V156)) end end}, {'Prelude.Show.MkShow', fun (V157) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V158) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V159) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V159)) end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V160, V161)) end end}, V158)) end, fun (V162) -> fun (V163) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V164) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V164)) end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V165, V166)) end end}, V162, V163)) end end}, V157)) end, fun (V167) -> fun (V168) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V169) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V170) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V170)) end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V171, V172)) end end}, V169)) end, fun (V173) -> fun (V174) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V175) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V175)) end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V176, V177)) end end}, V173, V174)) end end}, V167, V168)) end end}}, V152, V153)) end end}, V111))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end))), fun (V179) -> begin (V180 = (V178(V179))), case V180 of {'Prelude.Types.Left', V181} -> {'Prelude.Types.Left', V181}; {'Prelude.Types.Right', V182} -> (begin (V184 = fun (V183) -> {'Prelude.Types.Right', ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V50, V49, V6, V5, ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V49)), V111, {'TTImp.TTImp.IVar', V49, V50}))} end), V184 end(V179)) end end end end), V185 end(V108)) end end end end), V186 end(V103)) end end end end end), V187 end(V84)) end end end end; _ -> fun (V188) -> {'Prelude.Types.Right', V7} end end.
'nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Builtin.MkPair', V14, V15} -> case V14 of {'Core.Name.UN', V16} -> case V16 of {'Core.Name.Basic', V17} -> case V15 of {'Core.TT.AutoImplicit'} -> ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'TTImp.TTImp.INamedApp', V9, V11, V14, {'TTImp.TTImp.IBindVar', V9, V17}})); _ -> case V15 of {'Core.TT.Implicit'} -> ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'TTImp.TTImp.INamedApp', V9, V11, V14, {'TTImp.TTImp.IAs', V9, {'Core.FC.EmptyFC'}, 0, V14, {'TTImp.TTImp.Implicit', V9, 1}}})); {'Core.TT.DefImplicit', V18} -> ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'TTImp.TTImp.INamedApp', V9, V11, V14, {'TTImp.TTImp.IAs', V9, {'Core.FC.EmptyFC'}, 0, V14, {'TTImp.TTImp.Implicit', V9, 1}}})); _ -> ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11)) end end; _ -> case V15 of {'Core.TT.Implicit'} -> ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'TTImp.TTImp.INamedApp', V9, V11, V14, {'TTImp.TTImp.IAs', V9, {'Core.FC.EmptyFC'}, 0, V14, {'TTImp.TTImp.Implicit', V9, 1}}})); {'Core.TT.DefImplicit', V19} -> ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'TTImp.TTImp.INamedApp', V9, V11, V14, {'TTImp.TTImp.IAs', V9, {'Core.FC.EmptyFC'}, 0, V14, {'TTImp.TTImp.Implicit', V9, 1}}})); _ -> ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11)) end end; _ -> case V15 of {'Core.TT.Implicit'} -> ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'TTImp.TTImp.INamedApp', V9, V11, V14, {'TTImp.TTImp.IAs', V9, {'Core.FC.EmptyFC'}, 0, V14, {'TTImp.TTImp.Implicit', V9, 1}}})); {'Core.TT.DefImplicit', V20} -> ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'TTImp.TTImp.INamedApp', V9, V11, V14, {'TTImp.TTImp.IAs', V9, {'Core.FC.EmptyFC'}, 0, V14, {'TTImp.TTImp.Implicit', V9, 1}}})); _ -> ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11)) end end; _ -> ('nested--11885-9430--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11)) end end(E0, E1)) end.
'nested--12944-10333--in--un--getName'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.MkImpTy', V3, V4, V5, V6} -> V5 end.
'nested--12944-10334--in--un--getFieldName'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.MkIField', V3, V4, V5, V6, V7} -> V6 end.
'nested--12957-10571--in--un--fnsUN'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('nested--12944-10334--in--un--getFieldName'(V0, V1, V13)) end))(V7)).
'nested--12957-10572--in--un--fnsRF'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('nested--12957-10570--in--un--toRF'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)) end))(('nested--12957-10571--in--un--fnsUN'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)))).
'nested--12957-10569--in--un--fldns\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V12 end, fun () -> fun (V13) -> ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V12, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V13)))) end end, V11)).
'nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of [E0 | E1] -> (fun (V13, V14) -> case V12 of {'Core.Value.NBind', V15, V16, V17, V18} -> case V17 of {'Core.TT.Pi', V19, V20, V21, V22} -> case V21 of {'Core.TT.Explicit'} -> begin (V23 = ((V18(V2))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V15, {'Core.TT.Placeholder'}}))))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V28 = ('nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V27))), V28 end(V24)) end end end end; _ -> begin (V32 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, 50, fun () -> <<<<"Giving up with the following locals left: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V29)) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V30, V31)) end end}, V11))/binary>> end))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V38 = fun (V37) -> {'Prelude.Types.Right', []} end), V38 end(V33)) end end end end end; _ -> begin (V42 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, 50, fun () -> <<<<"Giving up with the following locals left: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V39)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V40, V41)) end end}, V11))/binary>> end))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V48 = fun (V47) -> {'Prelude.Types.Right', []} end), V48 end(V43)) end end end end end; _ -> begin (V52 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, 50, fun () -> <<<<"Giving up with the following locals left: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V50, V51)) end end}, V11))/binary>> end))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V58 = fun (V57) -> {'Prelude.Types.Right', []} end), V58 end(V53)) end end end end end end(E0, E1)); [] -> case V12 of {'Core.Value.NBind', V59, V60, V61, V62} -> case V61 of {'Core.TT.Pi', V63, V64, V65, V66} -> case V65 of {'Core.TT.Explicit'} -> begin (V67 = ((V62(V2))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V59, {'Core.TT.Placeholder'}}))))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V84 = case V10 of [E2 | E3] -> (fun (V72, V73) -> case V72 of {'Prelude.Types.Just', V74} -> case V74 of {'Core.Name.UN', V75} -> case V75 of {'Core.Name.Underscore'} -> ('nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [], V71)); _ -> case ('nested--11885-9428--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V60, V10)) of {'Prelude.Types.Nothing'} -> fun (V76) -> {'Prelude.Types.Right', []} end; {'Prelude.Types.Just', V77} -> ('nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V77, [], V71)) end end; _ -> case ('nested--11885-9428--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V60, V10)) of {'Prelude.Types.Nothing'} -> fun (V78) -> {'Prelude.Types.Right', []} end; {'Prelude.Types.Just', V79} -> ('nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V79, [], V71)) end end; _ -> case ('nested--11885-9428--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V60, V10)) of {'Prelude.Types.Nothing'} -> fun (V80) -> {'Prelude.Types.Right', []} end; {'Prelude.Types.Just', V81} -> ('nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V81, [], V71)) end end end(E2, E3)); _ -> case ('nested--11885-9428--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V60, V10)) of {'Prelude.Types.Nothing'} -> fun (V82) -> {'Prelude.Types.Right', []} end; {'Prelude.Types.Just', V83} -> ('nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V83, [], V71)) end end), V84 end(V68)) end end end end; {'Core.TT.AutoImplicit'} -> begin (V85 = ((V62(V2))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V59, {'Core.TT.Placeholder'}}))))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V98 = case ('nested--11885-9428--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V60, V9)) of {'Prelude.Types.Nothing'} -> begin (V90 = ('nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [], V89))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V96 = fun (V95) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V60, {'Core.TT.AutoImplicit'}} | V94]} end), V96 end(V91)) end end end end; {'Prelude.Types.Just', V97} -> ('nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V97, V10, [], V89)) end), V98 end(V86)) end end end end; _ -> begin (V99 = ((V62(V2))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V59, {'Core.TT.Placeholder'}}))))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V149 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V106, V107, V108)) end end end end end, fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V111, V112, V113)) end end end end end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V115)) end end, fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V119, V120, V121, V122)) end end end end end end end, fun (V123) -> fun (V124) -> V124 end end, fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V127, V128, V129)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V132, V133)) end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V134, V135)) end end}, V130, V131)) end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V138, V139)) end end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V140, V141)) end end}, V136, V137)) end end}, {'Prelude.Types.Just', V60}, V9)) of 1 -> ('nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [], V103)); 0 -> begin (V142 = ('nested--11885-9429--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [], V103))), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V148 = fun (V147) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V60, ('Idris.Idris2.Core.TT':'un--forgetDef'(V65))} | V146]} end), V148 end(V143)) end end end end end), V149 end(V100)) end end end end end; _ -> begin (V153 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, 50, fun () -> <<<<"Giving up with the following locals left: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V150) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V150)) end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V151, V152)) end end}, V11))/binary>> end))), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V159 = fun (V158) -> {'Prelude.Types.Right', []} end), V159 end(V154)) end end end end end; _ -> begin (V163 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, 50, fun () -> <<<<"Giving up with the following locals left: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V160) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V160)) end, fun (V161) -> fun (V162) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V161, V162)) end end}, V11))/binary>> end))), fun (V164) -> begin (V165 = (V163(V164))), case V165 of {'Prelude.Types.Left', V166} -> {'Prelude.Types.Left', V166}; {'Prelude.Types.Right', V167} -> (begin (V169 = fun (V168) -> {'Prelude.Types.Right', []} end), V169 end(V164)) end end end end end; _ -> begin (V173 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, 50, fun () -> <<<<"Giving up with the following locals left: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V170) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V170)) end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V171, V172)) end end}, V11))/binary>> end))), fun (V174) -> begin (V175 = (V173(V174))), case V175 of {'Prelude.Types.Left', V176} -> {'Prelude.Types.Left', V176}; {'Prelude.Types.Right', V177} -> (begin (V179 = fun (V178) -> {'Prelude.Types.Right', []} end), V179 end(V174)) end end end end end.
'nested--12944-10335--in--un--expandNS'(V0, V1, V2, V3) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V2, ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()))) of 1 -> V3; 0 -> case V3 of {'Core.Name.UN', V4} -> {'Core.Name.NS', V2, V3}; {'Core.Name.MN', V5, V6} -> {'Core.Name.NS', V2, V3}; {'Core.Name.DN', V7, V8} -> {'Core.Name.NS', V2, V3}; _ -> V3 end end.
'nested--12944-10336--in--un--defName'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.IClaim', V4, V5, V6, V7, V8} -> [('nested--12944-10335--in--un--expandNS'(V0, V1, V2, ('nested--12944-10333--in--un--getName'(V0, V1, V8)))) | []]; {'TTImp.TTImp.IData', V9, V10, V11, V12} -> case V12 of {'TTImp.TTImp.MkImpData', V13, V14, V15, V16, V17} -> [('nested--12944-10335--in--un--expandNS'(V0, V1, V2, V14)) | ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V26) -> ('nested--12944-10335--in--un--expandNS'(V0, V1, V2, V26)) end))(((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('nested--12944-10333--in--un--getName'(V0, V1, V18)) end))(V17))))]; {'TTImp.TTImp.MkImpLater', V34, V35, V36} -> [('nested--12944-10335--in--un--expandNS'(V0, V1, V2, V35)) | []]; _ -> [] end; {'TTImp.TTImp.IParameters', V37, V38, V39} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V40, V41)) end end, []}, fun (V42) -> ('nested--12944-10336--in--un--defName'(V0, V1, V2, V42)) end, V39)); {'TTImp.TTImp.IFail', V43, V44, V45} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V46, V47)) end end, []}, fun (V48) -> ('nested--12944-10336--in--un--defName'(V0, V1, V2, V48)) end, V45)); {'TTImp.TTImp.INamespace', V49, V50, V51} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V52, V53)) end end, []}, fun (V54) -> ('nested--12944-10336--in--un--defName'(V0, V1, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V2, V50)), V54)) end, V51)); {'TTImp.TTImp.IRecord', V55, V56, V57, V58, V59} -> case V59 of {'TTImp.TTImp.MkImpRecord', V60, V61, V62, V63, V64, V65} -> [('nested--12944-10335--in--un--expandNS'(V0, V1, V2, V64)) | ('nested--12957-10573--in--un--all'(V0, V1, V55, V57, V58, V60, V62, V65, V64, V63, V61, V56, V2))]; _ -> [] end; {'TTImp.TTImp.IPragma', V66, V67, V68} -> ((begin (V74 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V72, V73)) end end end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V69) -> ('nested--12944-10335--in--un--expandNS'(V0, V1, V2, V69)) end))(V67)); _ -> [] end.
'nested--14025-11382--in--un--app'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Prelude.Types.Nothing'} -> {'TTImp.TTImp.IApp', ('un--getFC'(V3)), V3, V5}; {'Prelude.Types.Just', V6} -> {'TTImp.TTImp.INamedApp', ('un--getFC'(V3)), V3, V6, V5} end.
'nested--12957-10573--in--un--all'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> [('nested--12944-10335--in--un--expandNS'(V0, V1, V12, V10)) | ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('nested--12944-10335--in--un--expandNS'(V0, V1, ('nested--12957-10569--in--un--fldns\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)), V13)) end))(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--12957-10572--in--un--fnsRF'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)), ('nested--12957-10571--in--un--fnsUN'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12))))))].
'dn--un--weaken_Weaken_NestedNames'(V0) -> begin (V1 = V0), ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('nested--7452-5192--in--un--wknName'(V1, V2)) end))(V1)) end.
'dn--un--weakenNs_Weaken_NestedNames'(V0, V1) -> ('case--weakenNs-5158'(V1, V0, ('Idris.Idris2.Core.TT':'un--sizedView'(V0)))).
'dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V1) -> case V1 of {'TTImp.TTImp.IVar', V2, V3} -> case V0 of {'Prelude.Show.MkShow', V4, V5} -> (V4(V3)) end; {'TTImp.TTImp.IPi', V6, V7, V8, V9, V10, V11} -> <<<<"(%pi "/utf8>>/binary, <<('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V7))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V12) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V12)) end, fun (V13) -> fun (V14) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V13, V14)) end end}, V8))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V16, V17)) end end}, {'Prelude.Show.App'}, V9))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V10))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V11))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.ILam', V18, V19, V20, V21, V22, V23} -> <<<<"(%lam "/utf8>>/binary, <<('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V19))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V24) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V24)) end, fun (V25) -> fun (V26) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V25, V26)) end end}, V20))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V28, V29)) end end}, {'Prelude.Show.App'}, V21))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V22))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V23))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.ILet', V30, V31, V32, V33, V34, V35, V36} -> <<<<"(%let "/utf8>>/binary, <<('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V32))/binary, <<<<" "/utf8>>/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V33))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V34))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V35))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V36))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.ICase', V37, V38, V39, V40} -> <<<<"(%case ("/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V38))/binary, <<<<" : "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V39))/binary, <<<<") "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V41) -> ('dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V41)) end, fun (V42) -> fun (V43) -> ('dn--un--showPrec_Show_(ImpClause\x{27} $nm)'(V0, V42, V43)) end end}, V40))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.ILocal', V44, V45, V46} -> <<<<"(%local ("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V47) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V47)) end, fun (V48) -> fun (V49) -> ('dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'(V0, V48, V49)) end end}, V45))/binary, <<<<") "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V46))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.ICaseLocal', V50, V51, V52, V53, V54} -> <<<<"(%caselocal ("/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V51))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V52))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V55)) end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V56, V57)) end end}, V53))/binary, <<<<") "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V54))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.IUpdate', V58, V59, V60} -> <<<<"(%record "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V66 = fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V64, V65)) end end end end), fun (V67) -> fun (V68) -> ((((V66('erased'))('erased'))(V67))(V68)) end end end(fun (V61) -> ('dn--un--show_Show_(IFieldUpdate\x{27} $nm)'(V0, V61)) end))(V59))))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V60))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.IApp', V69, V70, V71} -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V70))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V71))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.INamedApp', V72, V73, V74, V75} -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V73))/binary, <<<<" ["/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V74))/binary, <<<<" = "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V75))/binary, <<"])"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.IAutoApp', V76, V77, V78} -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V77))/binary, <<<<" ["/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V78))/binary, <<"])"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.IWithApp', V79, V80, V81} -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V80))/binary, <<<<" | "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V81))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.ISearch', V82, V83} -> <<"%search"/utf8>>; {'TTImp.TTImp.IAlternative', V84, V85, V86} -> <<<<"(|"/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<","/utf8>>, ((begin (V92 = fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V90, V91)) end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end(fun (V87) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V87)) end))(V86))))/binary, <<"|)"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IRewrite', V95, V96, V97} -> <<<<"(%rewrite ("/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V96))/binary, <<<<") ("/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V97))/binary, <<"))"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.ICoerced', V98, V99} -> <<<<"(%coerced "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V99))/binary, <<")"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IBindHere', V100, V101, V102} -> <<<<"(%bindhere "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V102))/binary, <<")"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IBindVar', V103, V104} -> <<<<"$"/utf8>>/binary, V104/binary>>; {'TTImp.TTImp.IAs', V105, V106, V107, V108, V109} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V108))/binary, <<<<"@("/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V109))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.IMustUnify', V110, V111, V112} -> <<<<".("/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V112))/binary, <<")"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IDelayed', V113, V114, V115} -> <<<<"(%delayed "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V115))/binary, <<")"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IDelay', V116, V117} -> <<<<"(%delay "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V117))/binary, <<")"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IForce', V118, V119} -> <<<<"(%force "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V119))/binary, <<")"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IQuote', V120, V121} -> <<<<"(%quote "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V121))/binary, <<")"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IQuoteName', V122, V123} -> <<<<"(%quotename "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V123))/binary, <<")"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IQuoteDecl', V124, V125} -> <<<<"(%quotedecl "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V126) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V126)) end, fun (V127) -> fun (V128) -> ('dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'(V0, V127, V128)) end end}, V125))/binary, <<")"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IUnquote', V129, V130} -> <<<<"(%unquote "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V130))/binary, <<")"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IRunElab', V131, V132} -> <<<<"(%runelab "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V132))/binary, <<")"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.IPrimVal', V133, V134} -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V134)); {'TTImp.TTImp.IHole', V135, V136} -> <<<<"?"/utf8>>/binary, V136/binary>>; {'TTImp.TTImp.IUnifyLog', V137, V138, V139} -> <<<<"(%logging "/utf8>>/binary, <<('Idris.Idris2.Core.Options.Log':'dn--un--show_Show_LogLevel'(V138))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V139))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.IType', V140} -> <<"%type"/utf8>>; {'TTImp.TTImp.Implicit', V141, V142} -> case V142 of 1 -> <<"_"/utf8>>; 0 -> <<"?"/utf8>> end; {'TTImp.TTImp.IWithUnambigNames', V143, V144, V145} -> <<<<"(%with "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V146) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V147) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V147)) end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V148, V149)) end end}, {'Prelude.Show.MkShow', fun (V150) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V150)) end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V151, V152)) end end}}, V146)) end, fun (V153) -> fun (V154) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V155) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V155)) end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V156, V157)) end end}, {'Prelude.Show.MkShow', fun (V158) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V158)) end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V159, V160)) end end}}, V153, V154)) end end}, V144))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V145))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end.
'dn--un--show_Show_(ImpTy\x{27} $nm)'(V0, V1) -> case V1 of {'TTImp.TTImp.MkImpTy', V2, V3, V4, V5} -> <<<<"(%claim "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V5))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end.
'dn--un--show_Show_(ImpRecord\x{27} $nm)'(V0, V1) -> case V1 of {'TTImp.TTImp.MkImpRecord', V2, V3, V4, V5, V6, V7} -> <<<<"record "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V10, V11)) end end}, {'Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V14, V15)) end end}, {'Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V17) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V18) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V18)) end, fun (V19) -> fun (V20) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V19, V20)) end end}, V17)) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V23) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V23)) end, fun (V24) -> fun (V25) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V24, V25)) end end}, V21, V22)) end end}, {'Prelude.Show.MkShow', fun (V26) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V26)) end, fun (V27) -> fun (V28) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V27, V28)) end end}}, V16)) end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V31) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V32) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V32)) end, fun (V33) -> fun (V34) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V33, V34)) end end}, V31)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V37) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V37)) end, fun (V38) -> fun (V39) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V38, V39)) end end}, V35, V36)) end end}, {'Prelude.Show.MkShow', fun (V40) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V40)) end, fun (V41) -> fun (V42) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V41, V42)) end end}}, V29, V30)) end end}}, V12)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V46, V47)) end end}, {'Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V50) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V50)) end, fun (V51) -> fun (V52) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V51, V52)) end end}, V49)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V55) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V55)) end, fun (V56) -> fun (V57) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V56, V57)) end end}, V53, V54)) end end}, {'Prelude.Show.MkShow', fun (V58) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V58)) end, fun (V59) -> fun (V60) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V59, V60)) end end}}, V48)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V64) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V64)) end, fun (V65) -> fun (V66) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V65, V66)) end end}, V63)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V69) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V69)) end, fun (V70) -> fun (V71) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V70, V71)) end end}, V67, V68)) end end}, {'Prelude.Show.MkShow', fun (V72) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V72)) end, fun (V73) -> fun (V74) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V73, V74)) end end}}, V61, V62)) end end}}, V43, V44)) end end}}, V8)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V77) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V78, V79)) end end}, {'Prelude.Show.MkShow', fun (V80) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V81) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V81)) end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V82, V83)) end end}, {'Prelude.Show.MkShow', fun (V84) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V85) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V86) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V86)) end, fun (V87) -> fun (V88) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V87, V88)) end end}, V85)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V91) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V91)) end, fun (V92) -> fun (V93) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V92, V93)) end end}, V89, V90)) end end}, {'Prelude.Show.MkShow', fun (V94) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V94)) end, fun (V95) -> fun (V96) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V95, V96)) end end}}, V84)) end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V99) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V100) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V100)) end, fun (V101) -> fun (V102) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V101, V102)) end end}, V99)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V105) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V105)) end, fun (V106) -> fun (V107) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V106, V107)) end end}, V103, V104)) end end}, {'Prelude.Show.MkShow', fun (V108) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V108)) end, fun (V109) -> fun (V110) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V109, V110)) end end}}, V97, V98)) end end}}, V80)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V113) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V114, V115)) end end}, {'Prelude.Show.MkShow', fun (V116) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V117) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V118) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V118)) end, fun (V119) -> fun (V120) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V119, V120)) end end}, V117)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V123) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V123)) end, fun (V124) -> fun (V125) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V124, V125)) end end}, V121, V122)) end end}, {'Prelude.Show.MkShow', fun (V126) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V126)) end, fun (V127) -> fun (V128) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V127, V128)) end end}}, V116)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V131) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V132) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V132)) end, fun (V133) -> fun (V134) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V133, V134)) end end}, V131)) end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V137) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V137)) end, fun (V138) -> fun (V139) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V138, V139)) end end}, V135, V136)) end end}, {'Prelude.Show.MkShow', fun (V140) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V140)) end, fun (V141) -> fun (V142) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V141, V142)) end end}}, V129, V130)) end end}}, V111, V112)) end end}}, V75, V76)) end end}, V4))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<"\x{a}\x{9}"/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}\x{9}"/utf8>>, ((begin (V148 = fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V146, V147)) end end end end), fun (V149) -> fun (V150) -> ((((V148('erased'))('erased'))(V149))(V150)) end end end(fun (V143) -> ('dn--un--show_Show_(IField\x{27} $nm)'(V0, V143)) end))(V7))))/binary, <<"\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end.
'dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V1) -> case V1 of {'TTImp.TTImp.IClaim', V2, V3, V4, V5, V6} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V7) -> ('dn--un--show_Show_(FnOpt\x{27} $nm)'(V0, V7)) end, fun (V8) -> fun (V9) -> ('dn--un--showPrec_Show_(FnOpt\x{27} $nm)'(V0, V8, V9)) end end}, V5))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V3))/binary, <<<<" "/utf8>>/binary, ('dn--un--show_Show_(ImpTy\x{27} $nm)'(V0, V6))/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.IData', V10, V11, V12, V13} -> ('dn--un--show_Show_(ImpData\x{27} $nm)'(V0, V13)); {'TTImp.TTImp.IDef', V14, V15, V16} -> <<<<"(%def "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V17) -> ('dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V17)) end, fun (V18) -> fun (V19) -> ('dn--un--showPrec_Show_(ImpClause\x{27} $nm)'(V0, V18, V19)) end end}, V16))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.IParameters', V20, V21, V22} -> <<<<"parameters "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V24)) end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V25, V26)) end end}, {'Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V28)) end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V29, V30)) end end}, {'Prelude.Show.MkShow', fun (V31) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V32) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V33) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V33)) end, fun (V34) -> fun (V35) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V34, V35)) end end}, V32)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V38) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V38)) end, fun (V39) -> fun (V40) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V39, V40)) end end}, V36, V37)) end end}, {'Prelude.Show.MkShow', fun (V41) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V41)) end, fun (V42) -> fun (V43) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V42, V43)) end end}}, V31)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V46) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V47) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V47)) end, fun (V48) -> fun (V49) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V48, V49)) end end}, V46)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V52) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V52)) end, fun (V53) -> fun (V54) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V53, V54)) end end}, V50, V51)) end end}, {'Prelude.Show.MkShow', fun (V55) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V55)) end, fun (V56) -> fun (V57) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V56, V57)) end end}}, V44, V45)) end end}}, V27)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V60) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V60)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V61, V62)) end end}, {'Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V65) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V65)) end, fun (V66) -> fun (V67) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V66, V67)) end end}, V64)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V70) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V70)) end, fun (V71) -> fun (V72) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V71, V72)) end end}, V68, V69)) end end}, {'Prelude.Show.MkShow', fun (V73) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V73)) end, fun (V74) -> fun (V75) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V74, V75)) end end}}, V63)) end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V78) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V79) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V79)) end, fun (V80) -> fun (V81) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V80, V81)) end end}, V78)) end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V84) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V84)) end, fun (V85) -> fun (V86) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V85, V86)) end end}, V82, V83)) end end}, {'Prelude.Show.MkShow', fun (V87) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V87)) end, fun (V88) -> fun (V89) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V88, V89)) end end}}, V76, V77)) end end}}, V58, V59)) end end}}, V23)) end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V92)) end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V93, V94)) end end}, {'Prelude.Show.MkShow', fun (V95) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V96) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V96)) end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V97, V98)) end end}, {'Prelude.Show.MkShow', fun (V99) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V100) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V101) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V101)) end, fun (V102) -> fun (V103) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V102, V103)) end end}, V100)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V106) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V106)) end, fun (V107) -> fun (V108) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V107, V108)) end end}, V104, V105)) end end}, {'Prelude.Show.MkShow', fun (V109) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V109)) end, fun (V110) -> fun (V111) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V110, V111)) end end}}, V99)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V114) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V115) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V115)) end, fun (V116) -> fun (V117) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V116, V117)) end end}, V114)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V120) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V120)) end, fun (V121) -> fun (V122) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V121, V122)) end end}, V118, V119)) end end}, {'Prelude.Show.MkShow', fun (V123) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V123)) end, fun (V124) -> fun (V125) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V124, V125)) end end}}, V112, V113)) end end}}, V95)) end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V128) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V128)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V129, V130)) end end}, {'Prelude.Show.MkShow', fun (V131) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V132) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V133) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V133)) end, fun (V134) -> fun (V135) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V134, V135)) end end}, V132)) end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V138) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V138)) end, fun (V139) -> fun (V140) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V139, V140)) end end}, V136, V137)) end end}, {'Prelude.Show.MkShow', fun (V141) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V141)) end, fun (V142) -> fun (V143) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V142, V143)) end end}}, V131)) end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V146) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V147) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V147)) end, fun (V148) -> fun (V149) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V148, V149)) end end}, V146)) end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V152) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V152)) end, fun (V153) -> fun (V154) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V153, V154)) end end}, V150, V151)) end end}, {'Prelude.Show.MkShow', fun (V155) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V155)) end, fun (V156) -> fun (V157) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V156, V157)) end end}}, V144, V145)) end end}}, V126, V127)) end end}}, V90, V91)) end end}, V21))/binary, <<<<"\x{a}\x{9}"/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}\x{9}"/utf8>>, ((begin (V163 = fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V161, V162)) end end end end), fun (V164) -> fun (V165) -> ((((V163('erased'))('erased'))(V164))(V165)) end end end(fun (V158) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V158)) end))(V22))))/binary>>/binary>>/binary>>; {'TTImp.TTImp.IRecord', V166, V167, V168, V169, V170} -> ('dn--un--show_Show_(ImpRecord\x{27} $nm)'(V0, V170)); {'TTImp.TTImp.IFail', V171, V172, V173} -> <<<<"fail"/utf8>>/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V174) -> <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V174))/binary>> end end, V172))/binary, <<<<"\x{a}"/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ((begin (V180 = fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V178, V179)) end end end end), fun (V181) -> fun (V182) -> ((((V180('erased'))('erased'))(V181))(V182)) end end end(fun (V175) -> <<<<"  "/utf8>>/binary, ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V175))/binary>> end))(V173))))/binary>>/binary>>/binary>>; {'TTImp.TTImp.INamespace', V183, V184, V185} -> <<<<"namespace "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V184))/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ((begin (V191 = fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V189, V190)) end end end end), fun (V192) -> fun (V193) -> ((((V191('erased'))('erased'))(V192))(V193)) end end end(fun (V186) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V186)) end))(V185))))/binary>>/binary>>; {'TTImp.TTImp.ITransform', V194, V195, V196, V197} -> <<<<"%transform "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V195))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V196))/binary, <<<<" ==> "/utf8>>/binary, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V197))/binary>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.IRunElabDecl', V198, V199} -> <<<<"%runElab "/utf8>>/binary, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V199))/binary>>; {'TTImp.TTImp.IPragma', V200, V201, V202} -> <<"[externally defined pragma]"/utf8>>; {'TTImp.TTImp.ILog', V203} -> case V203 of {'Prelude.Types.Nothing'} -> <<"%logging off"/utf8>>; {'Prelude.Types.Just', V204} -> case V204 of {'Builtin.MkPair', V205, V206} -> <<<<"%logging "/utf8>>/binary, case V205 of [] -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V206)); _ -> <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V207) -> fun (V208) -> <<V207/binary, V208/binary>> end end, <<""/utf8>>}, fun (V209) -> V209 end, ('Idris.Idris2.Data.List':'un--intersperse'(<<"."/utf8>>, V205))))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V206))/binary>>/binary>> end/binary>> end end; {'TTImp.TTImp.IBuiltin', V210, V211, V212} -> <<<<"%builtin "/utf8>>/binary, <<('Idris.Idris2.Core.Context':'dn--un--show_Show_BuiltinType'(V211))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V212))/binary>>/binary>>/binary>> end.
'dn--un--show_Show_(ImpData\x{27} $nm)'(V0, V1) -> case V1 of {'TTImp.TTImp.MkImpData', V2, V3, V4, V5, V6} -> <<<<"(%data "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V4))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V7) -> ('dn--un--show_Show_(ImpTy\x{27} $nm)'(V0, V7)) end, fun (V8) -> fun (V9) -> ('dn--un--showPrec_Show_(ImpTy\x{27} $nm)'(V0, V8, V9)) end end}, V6))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.MkImpLater', V10, V11, V12} -> <<<<"(%datadecl "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V12))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end.
'dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V1) -> case V1 of {'TTImp.TTImp.PatClause', V2, V3, V4} -> <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V3))/binary, <<<<" = "/utf8>>/binary, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V4))/binary>>/binary>>; {'TTImp.TTImp.WithClause', V5, V6, V7, V8, V9, V10, V11} -> <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V6))/binary, <<<<" with ("/utf8>>/binary, <<('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V7))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V8))/binary, <<<<")"/utf8>>/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V12) -> <<<<" proof "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12))/binary>> end end, V9))/binary, <<<<"\x{a}\x{9}"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V13) -> ('dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V13)) end, fun (V14) -> fun (V15) -> ('dn--un--showPrec_Show_(ImpClause\x{27} $nm)'(V0, V14, V15)) end end}, V11))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.TTImp.ImpossibleClause', V16, V17} -> <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V17))/binary, <<" impossible"/utf8>>/binary>> end.
'dn--un--show_Show_(IFieldUpdate\x{27} $nm)'(V0, V1) -> case V1 of {'TTImp.TTImp.ISetField', V2, V3} -> <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"->"/utf8>>, V2))/binary, <<<<" = "/utf8>>/binary, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V3))/binary>>/binary>>; {'TTImp.TTImp.ISetFieldApp', V4, V5} -> <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"->"/utf8>>, V4))/binary, <<<<" $= "/utf8>>/binary, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V5))/binary>>/binary>> end.
'dn--un--show_Show_(IField\x{27} $nm)'(V0, V1) -> case V1 of {'TTImp.TTImp.MkIField', V2, V3, V4, V5, V6} -> case V4 of {'Core.TT.Explicit'} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary, <<<<" : "/utf8>>/binary, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V6))/binary>>/binary>>; _ -> <<<<"{"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary, <<<<" : "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V6))/binary, <<"}"/utf8>>/binary>>/binary>>/binary>>/binary>> end end.
'dn--un--show_Show_(FnOpt\x{27} $nm)'(V0, V1) -> case V1 of {'TTImp.TTImp.Inline'} -> <<"%inline"/utf8>>; {'TTImp.TTImp.NoInline'} -> <<"%noinline"/utf8>>; {'TTImp.TTImp.Deprecate'} -> <<"%deprecate"/utf8>>; {'TTImp.TTImp.TCInline'} -> <<"%tcinline"/utf8>>; {'TTImp.TTImp.Hint', V2} -> <<<<"%hint "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V2))/binary>>; {'TTImp.TTImp.GlobalHint', V3} -> <<<<"%globalhint "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V3))/binary>>; {'TTImp.TTImp.ExternFn'} -> <<"%extern"/utf8>>; {'TTImp.TTImp.ForeignFn', V4} -> <<<<"%foreign "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V5)) end))(V4))))/binary>>; {'TTImp.TTImp.ForeignExport', V13} -> <<<<"%export "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V14)) end))(V13))))/binary>>; {'TTImp.TTImp.Invertible'} -> <<"%invertible"/utf8>>; {'TTImp.TTImp.Totality', V22} -> case V22 of 0 -> <<"total"/utf8>>; 1 -> <<"covering"/utf8>>; 2 -> <<"partial"/utf8>> end; {'TTImp.TTImp.Macro'} -> <<"%macro"/utf8>>; {'TTImp.TTImp.SpecArgs', V23} -> <<<<"%spec "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V24)) end))(V23))))/binary>> end.
'dn--un--show_Show_(Arg\x{27} $nm)'(V0, V1) -> case V1 of {'TTImp.TTImp.Explicit', V2, V3} -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V3)); {'TTImp.TTImp.Auto', V4, V5} -> <<<<"@{"/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V5))/binary, <<"}"/utf8>>/binary>>/binary>>; {'TTImp.TTImp.Named', V6, V7, V8} -> <<<<"{"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7))/binary, <<<<" = "/utf8>>/binary, <<('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V8))/binary, <<"}"/utf8>>/binary>>/binary>>/binary>>/binary>> end.
'dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(ImpTy\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(ImpTy\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(ImpRecord\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(ImpRecord\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(ImpData\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(ImpData\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(IFieldUpdate\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(IFieldUpdate\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(IField\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(IField\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(FnOpt\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(FnOpt\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(Arg\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(Arg\x{27} $nm)'(V0, V2)).
'dn--un--__Impl_Weaken_NestedNames'() -> {'Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_NestedNames'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_NestedNames'(V5, V6)) end end end end}.
'dn--un--__Impl_Show_(RawImp\x{27} $nm)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(ImpTy\x{27} $nm)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(ImpTy\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(ImpTy\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(ImpRecord\x{27} $nm)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(ImpRecord\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(ImpRecord\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(ImpDecl\x{27} $nm)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(ImpData\x{27} $nm)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(ImpData\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(ImpData\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(ImpClause\x{27} $nm)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(ImpClause\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(IFieldUpdate\x{27} $nm)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(IFieldUpdate\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(IFieldUpdate\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(IField\x{27} $nm)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(IField\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(IField\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(FnOpt\x{27} $nm)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(FnOpt\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(FnOpt\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(Arg\x{27} $nm)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(Arg\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(Arg\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Eq_WithFlag'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_WithFlag'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_WithFlag'(V2, V3)) end end}.
'dn--un--__Impl_Eq_FnOpt'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_FnOpt'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_FnOpt'(V2, V3)) end end}.
'dn--un--__Impl_Eq_DataOpt'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DataOpt'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DataOpt'(V2, V3)) end end}.
'dn--un--==_Eq_WithFlag'(V0, V1) -> 1.
'dn--un--==_Eq_FnOpt'(V0, V1) -> case V0 of {'TTImp.TTImp.Inline'} -> case V1 of {'TTImp.TTImp.Inline'} -> 1; _ -> 0 end; {'TTImp.TTImp.NoInline'} -> case V1 of {'TTImp.TTImp.NoInline'} -> 1; _ -> 0 end; {'TTImp.TTImp.Deprecate'} -> case V1 of {'TTImp.TTImp.Deprecate'} -> 1; _ -> 0 end; {'TTImp.TTImp.TCInline'} -> case V1 of {'TTImp.TTImp.TCInline'} -> 1; _ -> 0 end; {'TTImp.TTImp.Hint', V2} -> case V1 of {'TTImp.TTImp.Hint', V3} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V2, V3)); _ -> 0 end; {'TTImp.TTImp.GlobalHint', V4} -> case V1 of {'TTImp.TTImp.GlobalHint', V5} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V4, V5)); _ -> 0 end; {'TTImp.TTImp.ExternFn'} -> case V1 of {'TTImp.TTImp.ExternFn'} -> 1; _ -> 0 end; {'TTImp.TTImp.ForeignFn', V6} -> case V1 of {'TTImp.TTImp.ForeignFn', V7} -> 1; _ -> 0 end; {'TTImp.TTImp.ForeignExport', V8} -> case V1 of {'TTImp.TTImp.ForeignExport', V9} -> 1; _ -> 0 end; {'TTImp.TTImp.Invertible'} -> case V1 of {'TTImp.TTImp.Invertible'} -> 1; _ -> 0 end; {'TTImp.TTImp.Totality', V10} -> case V1 of {'TTImp.TTImp.Totality', V11} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_TotalReq'(V10, V11)); _ -> 0 end; {'TTImp.TTImp.Macro'} -> case V1 of {'TTImp.TTImp.Macro'} -> 1; _ -> 0 end; {'TTImp.TTImp.SpecArgs', V12} -> case V1 of {'TTImp.TTImp.SpecArgs', V13} -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V16, V17)) end end}, V12, V13)); _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_DataOpt'(V0, V1) -> case V0 of {'TTImp.TTImp.SearchBy', V2} -> case V1 of {'TTImp.TTImp.SearchBy', V3} -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V7)) end end}, V2, V3)); _ -> 0 end; {'TTImp.TTImp.NoHints'} -> case V1 of {'TTImp.TTImp.NoHints'} -> 1; _ -> 0 end; {'TTImp.TTImp.UniqueSearch'} -> case V1 of {'TTImp.TTImp.UniqueSearch'} -> 1; _ -> 0 end; {'TTImp.TTImp.External'} -> case V1 of {'TTImp.TTImp.External'} -> 1; _ -> 0 end; {'TTImp.TTImp.NoNewtype'} -> case V1 of {'TTImp.TTImp.NoNewtype'} -> 1; _ -> 0 end; {'TTImp.TTImp.NoEnum'} -> case V1 of {'TTImp.TTImp.NoEnum'} -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_WithFlag'(V0, V1) -> case ('dn--un--==_Eq_WithFlag'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_FnOpt'(V0, V1) -> case ('dn--un--==_Eq_FnOpt'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_DataOpt'(V0, V1) -> case ('dn--un--==_Eq_DataOpt'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--unIArg'(V0) -> case V0 of {'TTImp.TTImp.Explicit', V1, V2} -> V2; {'TTImp.TTImp.Auto', V3, V4} -> V4; {'TTImp.TTImp.Named', V5, V6, V7} -> V7 end.
'un--mkWithClause'(V0, V1, V2, V3, V4) -> case V2 of {'Data.List1.:::', V5, V6} -> case V5 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V6 of [] -> {'TTImp.TTImp.WithClause', V0, V1, V7, V9, V10, V3, V4}; [E0 | E1] -> (fun (V11, V12) -> begin (V13 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V0))), {'TTImp.TTImp.WithClause', V0, V1, V7, V9, V10, V3, [('un--mkWithClause'(V0, {'TTImp.TTImp.IApp', V13, V1, {'TTImp.TTImp.IBindVar', V13, <<"arg"/utf8>>}}, {'Data.List1.:::', V11, V12}, V3, V4)) | []]} end end(E0, E1)) end end end end.
'un--mapFieldUpdateTerm'(V0, V1) -> case V1 of {'TTImp.TTImp.ISetField', V2, V3} -> {'TTImp.TTImp.ISetField', V2, (V0(V3))}; {'TTImp.TTImp.ISetFieldApp', V4, V5} -> {'TTImp.TTImp.ISetFieldApp', V4, (V0(V5))} end.
'un--mapAltType'(V0, V1) -> case V1 of {'TTImp.TTImp.UniqueDefault', V2} -> {'TTImp.TTImp.UniqueDefault', (V0(V2))}; _ -> V1 end.
'un--logRaw'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V0, V1, V2))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V19 = fun (V10) -> case V9 of 1 -> case V1 of <<""/utf8>> -> begin (V14 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<(V3())/binary, <<<<": "/utf8>>/binary, ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11)) end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V12, V13)) end end}, V4))/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V10))), {'Prelude.Types.Right', V14} end; _ -> begin (V18 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V1/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<(V3())/binary, <<<<": "/utf8>>/binary, ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V16, V17)) end end}, V4))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V10))), {'Prelude.Types.Right', V18} end end; 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V19 end(V6)) end end end end.
'un--lhsInCurrentNS'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.IApp', V3, V4, V5} -> begin (V6 = ('un--lhsInCurrentNS'(V0, V1, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V3, V10, V5}} end), V12 end(V7)) end end end end; {'TTImp.TTImp.IAutoApp', V13, V14, V15} -> begin (V16 = ('un--lhsInCurrentNS'(V0, V1, V14))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAutoApp', V13, V20, V15}} end), V22 end(V17)) end end end end; {'TTImp.TTImp.INamedApp', V23, V24, V25, V26} -> begin (V27 = ('un--lhsInCurrentNS'(V0, V1, V24))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = fun (V32) -> {'Prelude.Types.Right', {'TTImp.TTImp.INamedApp', V23, V31, V25, V26}} end), V33 end(V28)) end end end end; {'TTImp.TTImp.IWithApp', V34, V35, V36} -> begin (V37 = ('un--lhsInCurrentNS'(V0, V1, V35))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V43 = fun (V42) -> {'Prelude.Types.Right', {'TTImp.TTImp.IWithApp', V34, V41, V36}} end), V43 end(V38)) end end end end; {'TTImp.TTImp.IVar', V44, V45} -> case V45 of {'Core.Name.NS', V46, V47} -> fun (V48) -> {'Prelude.Types.Right', V2} end; _ -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V51, V52)) end end}, V45, begin (V53 = V1), V53 end)) of {'Prelude.Types.Nothing'} -> begin (V54 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, V45))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V60 = fun (V59) -> {'Prelude.Types.Right', {'TTImp.TTImp.IVar', V44, V58}} end), V60 end(V55)) end end end end; {'Prelude.Types.Just', V61} -> fun (V62) -> {'Prelude.Types.Right', {'TTImp.TTImp.IVar', V44, V45}} end end end; _ -> fun (V63) -> {'Prelude.Types.Right', V2} end end.
'un--isTotalityReq'(V0) -> case V0 of {'TTImp.TTImp.Totality', V1} -> 1; _ -> 0 end.
'un--isIVar'(V0) -> case V0 of {'TTImp.TTImp.IVar', V1, V2} -> {'Prelude.Types.Just', {'Builtin.MkPair', V1, V2}}; _ -> {'Prelude.Types.Nothing'} end.
'un--isIPrimVal'(V0) -> case V0 of {'TTImp.TTImp.IPrimVal', V1, V2} -> {'Prelude.Types.Just', V2}; _ -> {'Prelude.Types.Nothing'} end.
'un--isIBindVar'(V0) -> case V0 of {'TTImp.TTImp.IBindVar', V1, V2} -> {'Prelude.Types.Just', {'Builtin.MkPair', V1, V2}}; _ -> {'Prelude.Types.Nothing'} end.
'un--isExplicit'(V0) -> case V0 of {'TTImp.TTImp.Explicit', V1, V2} -> {'Prelude.Types.Just', {'Builtin.MkPair', V1, V2}}; _ -> {'Prelude.Types.Nothing'} end.
'un--implicitsAs'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--findIBinds'(V4))), begin (V9 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"declare.def.lhs.implicits"/utf8>>, 30, fun () -> <<<<"Found implicits: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V7, V8)) end end}, V5))/binary>> end))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V30 = ('nested--11861-9353--in--un--setAs'(V4, V3, V2, V1, V0, ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> {'Prelude.Types.Just', V22} end))(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> {'Core.Name.UN', {'Core.Name.Basic', V14}} end))(V5)))))), [], V4))), V30 end(V10)) end end end end end.
'un--getFnArgs'(V0, V1) -> case V0 of {'TTImp.TTImp.IApp', V2, V3, V4} -> ('un--getFnArgs'(V3, [{'TTImp.TTImp.Explicit', V2, V4} | V1])); {'TTImp.TTImp.INamedApp', V5, V6, V7, V8} -> ('un--getFnArgs'(V6, [{'TTImp.TTImp.Named', V5, V7, V8} | V1])); {'TTImp.TTImp.IAutoApp', V9, V10, V11} -> ('un--getFnArgs'(V10, [{'TTImp.TTImp.Auto', V9, V11} | V1])); _ -> {'Builtin.MkPair', V0, V1} end.
'un--getFn'(V0) -> case V0 of {'TTImp.TTImp.IApp', V1, V2, V3} -> ('un--getFn'(V2)); {'TTImp.TTImp.IWithApp', V4, V5, V6} -> ('un--getFn'(V5)); {'TTImp.TTImp.INamedApp', V7, V8, V9, V10} -> ('un--getFn'(V8)); {'TTImp.TTImp.IAutoApp', V11, V12, V13} -> ('un--getFn'(V12)); {'TTImp.TTImp.IAs', V14, V15, V16, V17, V18} -> ('un--getFn'(V18)); {'TTImp.TTImp.IMustUnify', V19, V20, V21} -> ('un--getFn'(V21)); _ -> V0 end.
'un--getFieldUpdateTerm'(V0) -> case V0 of {'TTImp.TTImp.ISetField', V1, V2} -> V2; {'TTImp.TTImp.ISetFieldApp', V3, V4} -> V4 end.
'un--getFieldUpdatePath'(V0) -> case V0 of {'TTImp.TTImp.ISetField', V1, V2} -> V1; {'TTImp.TTImp.ISetFieldApp', V3, V4} -> V3 end.
'un--getFC'(V0) -> case V0 of {'TTImp.TTImp.IVar', V1, V2} -> V1; {'TTImp.TTImp.IPi', V3, V4, V5, V6, V7, V8} -> V3; {'TTImp.TTImp.ILam', V9, V10, V11, V12, V13, V14} -> V9; {'TTImp.TTImp.ILet', V15, V16, V17, V18, V19, V20, V21} -> V15; {'TTImp.TTImp.ICase', V22, V23, V24, V25} -> V22; {'TTImp.TTImp.ILocal', V26, V27, V28} -> V26; {'TTImp.TTImp.ICaseLocal', V29, V30, V31, V32, V33} -> V29; {'TTImp.TTImp.IUpdate', V34, V35, V36} -> V34; {'TTImp.TTImp.IApp', V37, V38, V39} -> V37; {'TTImp.TTImp.INamedApp', V40, V41, V42, V43} -> V40; {'TTImp.TTImp.IAutoApp', V44, V45, V46} -> V44; {'TTImp.TTImp.IWithApp', V47, V48, V49} -> V47; {'TTImp.TTImp.ISearch', V50, V51} -> V50; {'TTImp.TTImp.IAlternative', V52, V53, V54} -> V52; {'TTImp.TTImp.IRewrite', V55, V56, V57} -> V55; {'TTImp.TTImp.ICoerced', V58, V59} -> V58; {'TTImp.TTImp.IPrimVal', V60, V61} -> V60; {'TTImp.TTImp.IHole', V62, V63} -> V62; {'TTImp.TTImp.IUnifyLog', V64, V65, V66} -> V64; {'TTImp.TTImp.IType', V67} -> V67; {'TTImp.TTImp.IBindVar', V68, V69} -> V68; {'TTImp.TTImp.IBindHere', V70, V71, V72} -> V70; {'TTImp.TTImp.IMustUnify', V73, V74, V75} -> V73; {'TTImp.TTImp.IDelayed', V76, V77, V78} -> V76; {'TTImp.TTImp.IDelay', V79, V80} -> V79; {'TTImp.TTImp.IForce', V81, V82} -> V81; {'TTImp.TTImp.IQuote', V83, V84} -> V83; {'TTImp.TTImp.IQuoteName', V85, V86} -> V85; {'TTImp.TTImp.IQuoteDecl', V87, V88} -> V87; {'TTImp.TTImp.IUnquote', V89, V90} -> V89; {'TTImp.TTImp.IRunElab', V91, V92} -> V91; {'TTImp.TTImp.IAs', V93, V94, V95, V96, V97} -> V93; {'TTImp.TTImp.Implicit', V98, V99} -> V98; {'TTImp.TTImp.IWithUnambigNames', V100, V101, V102} -> V100 end.
'un--gapply'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> ('un--gapply'(('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V4) -> fun (V5) -> ('nested--14025-11382--in--un--app'(V2, V3, V0, V0, V4, V5)) end end, V2)), V3)) end(E0, E1)) end.
'un--findImplicits'(V0) -> case V0 of {'TTImp.TTImp.IPi', V1, V2, V3, V4, V5, V6} -> case V4 of {'Prelude.Types.Just', V7} -> case V7 of {'Core.Name.UN', V8} -> case V8 of {'Core.Name.Basic', V9} -> [V9 | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V5)), ('un--findImplicits'(V6))))]; _ -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V5)), ('un--findImplicits'(V6)))) end; _ -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V5)), ('un--findImplicits'(V6)))) end; _ -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V5)), ('un--findImplicits'(V6)))) end; {'TTImp.TTImp.ILam', V10, V11, V12, V13, V14, V15} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V14)), ('un--findImplicits'(V15)))); {'TTImp.TTImp.IApp', V16, V17, V18} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V17)), ('un--findImplicits'(V18)))); {'TTImp.TTImp.IAutoApp', V19, V20, V21} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V20)), ('un--findImplicits'(V21)))); {'TTImp.TTImp.INamedApp', V22, V23, V24, V25} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V23)), ('un--findImplicits'(V25)))); {'TTImp.TTImp.IWithApp', V26, V27, V28} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V27)), ('un--findImplicits'(V28)))); {'TTImp.TTImp.IAs', V29, V30, V31, V32, V33} -> ('un--findImplicits'(V33)); {'TTImp.TTImp.IMustUnify', V34, V35, V36} -> ('un--findImplicits'(V36)); {'TTImp.TTImp.IAlternative', V37, V38, V39} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V40, V41)) end end, []}, fun (V42) -> ('un--findImplicits'(V42)) end, V39)); {'TTImp.TTImp.IDelayed', V43, V44, V45} -> ('un--findImplicits'(V45)); {'TTImp.TTImp.IDelay', V46, V47} -> ('un--findImplicits'(V47)); {'TTImp.TTImp.IForce', V48, V49} -> ('un--findImplicits'(V49)); {'TTImp.TTImp.IQuote', V50, V51} -> ('un--findImplicits'(V51)); {'TTImp.TTImp.IUnquote', V52, V53} -> ('un--findImplicits'(V53)); {'TTImp.TTImp.IRunElab', V54, V55} -> ('un--findImplicits'(V55)); {'TTImp.TTImp.IBindVar', V56, V57} -> [V57 | []]; {'TTImp.TTImp.IUpdate', V58, V59, V60} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V60)), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V61, V62)) end end, []}, fun (V63) -> ('un--findImplicits'(('un--getFieldUpdateTerm'(V63)))) end, V59)))); _ -> [] end.
'un--findIBinds'(V0) -> case V0 of {'TTImp.TTImp.IPi', V1, V2, V3, V4, V5, V6} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V5)), ('un--findIBinds'(V6)))); {'TTImp.TTImp.ILam', V7, V8, V9, V10, V11, V12} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V11)), ('un--findIBinds'(V12)))); {'TTImp.TTImp.IApp', V13, V14, V15} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V14)), ('un--findIBinds'(V15)))); {'TTImp.TTImp.IAutoApp', V16, V17, V18} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V17)), ('un--findIBinds'(V18)))); {'TTImp.TTImp.INamedApp', V19, V20, V21, V22} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V20)), ('un--findIBinds'(V22)))); {'TTImp.TTImp.IWithApp', V23, V24, V25} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V24)), ('un--findIBinds'(V25)))); {'TTImp.TTImp.IAs', V26, V27, V28, V29, V30} -> case V29 of {'Core.Name.UN', V31} -> case V31 of {'Core.Name.Basic', V32} -> [V32 | ('un--findIBinds'(V30))]; _ -> ('un--findIBinds'(V30)) end; _ -> ('un--findIBinds'(V30)) end; {'TTImp.TTImp.IMustUnify', V33, V34, V35} -> ('un--findIBinds'(V35)); {'TTImp.TTImp.IAlternative', V36, V37, V38} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V39, V40)) end end, []}, fun (V41) -> ('un--findIBinds'(V41)) end, V38)); {'TTImp.TTImp.IDelayed', V42, V43, V44} -> ('un--findIBinds'(V44)); {'TTImp.TTImp.IDelay', V45, V46} -> ('un--findIBinds'(V46)); {'TTImp.TTImp.IForce', V47, V48} -> ('un--findIBinds'(V48)); {'TTImp.TTImp.IQuote', V49, V50} -> ('un--findIBinds'(V50)); {'TTImp.TTImp.IUnquote', V51, V52} -> ('un--findIBinds'(V52)); {'TTImp.TTImp.IRunElab', V53, V54} -> ('un--findIBinds'(V54)); {'TTImp.TTImp.IBindHere', V55, V56, V57} -> ('un--findIBinds'(V57)); {'TTImp.TTImp.IBindVar', V58, V59} -> [V59 | []]; {'TTImp.TTImp.IUpdate', V60, V61, V62} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V62)), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V63, V64)) end end, []}, fun (V65) -> ('un--findIBinds'(('un--getFieldUpdateTerm'(V65)))) end, V61)))); _ -> [] end.
'un--definedInBlock'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V2, V3)) end end, []}, fun (V4) -> ('nested--12944-10336--in--un--defName'(V1, V0, V0, V4)) end, V1)).
'un--apply'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> begin (V4 = ('un--getFC'(V0))), ('un--apply'({'TTImp.TTImp.IApp', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V4 end, ('Idris.Idris2.Core.FC':'un--mergeFC'(V4, ('un--getFC'(V2)))))), V0, V2}, V3)) end end(E0, E1)) end.
'un--RawImp'() -> {'TTImp.TTImp.RawImp\x{27}', {'Core.Name.Name'}}.
'un--ImpTy'() -> {'TTImp.TTImp.ImpTy\x{27}', {'Core.Name.Name'}}.
'un--ImpRecord'() -> {'TTImp.TTImp.ImpRecord\x{27}', {'Core.Name.Name'}}.
'un--ImpParameter\x{27}'(V0) -> {'Builtin.Pair', {'Core.Name.Name'}, {'Builtin.Pair', {'Algebra.ZeroOneOmega.ZeroOneOmega'}, {'Builtin.Pair', {'Core.TT.PiInfo', {'TTImp.TTImp.RawImp\x{27}', V0}}, {'TTImp.TTImp.RawImp\x{27}', V0}}}}.
'un--ImpParameter'() -> ('un--ImpParameter\x{27}'({'Core.Name.Name'})).
'un--ImpDecl'() -> {'TTImp.TTImp.ImpDecl\x{27}', {'Core.Name.Name'}}.
'un--ImpData'() -> {'TTImp.TTImp.ImpData\x{27}', {'Core.Name.Name'}}.
'un--ImpClause'() -> {'TTImp.TTImp.ImpClause\x{27}', {'Core.Name.Name'}}.
'un--IRawImp'() -> {'TTImp.TTImp.RawImp\x{27}', {'Core.TT.KindedName'}}.
'un--IImpClause'() -> {'TTImp.TTImp.ImpClause\x{27}', {'Core.TT.KindedName'}}.
'un--IFieldUpdate'() -> {'TTImp.TTImp.IFieldUpdate\x{27}', {'Core.Name.Name'}}.
'un--IField'() -> {'TTImp.TTImp.IField\x{27}', {'Core.Name.Name'}}.
'un--IArg'() -> {'TTImp.TTImp.Arg\x{27}', {'Core.TT.KindedName'}}.
'un--FnOpt'() -> {'TTImp.TTImp.FnOpt\x{27}', {'Core.Name.Name'}}.
'un--Arg'() -> {'TTImp.TTImp.Arg\x{27}', {'Core.Name.Name'}}.
'un--AltType'() -> {'TTImp.TTImp.AltType\x{27}', {'Core.Name.Name'}}.
