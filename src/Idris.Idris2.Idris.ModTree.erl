-module('Idris.Idris2.Idris.ModTree').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--filterUsedByMods-10283'/4,
  'case--buildMod-9463'/12,
  'nested--16446-10193--in--un--getMods'/7,
  'nested--16446-10194--in--un--dropLater'/5,
  'dn--un--show_Show_BuildMod'/1,
  'dn--un--showPrec_Show_BuildMod'/2,
  'dn--un--__Impl_Show_BuildMod'/0,
  'un--needsBuildingTime'/4,
  'un--needsBuildingHash'/4,
  'un--needsBuildingDepHash'/2,
  'un--needsBuilding'/5,
  'un--mkModTree'/7,
  'un--mkBuildMods'/3,
  'un--loadModules'/7,
  'un--getBuildMods'/5,
  'un--getAllBuildMods'/4,
  'un--filterUsedByMods'/2,
  'un--checkTotalReq'/4,
  'un--buildMods'/7,
  'un--buildMod'/7,
  'un--buildDeps'/6,
  'un--buildAll'/4
]).
'case--filterUsedByMods-10283'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, ('un--filterUsedByMods'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V6) -> case V6 of {'Idris.ModTree.MkBuildMod', V7, V8, V9} -> V8 end end))(V4)))), V5)))) end.
'case--buildMod-9463'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> begin (V22 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"import"/utf8>>, 20, fun () -> ('Idris.Idris2.Data.String':'un--unwords'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([<<"Checking whether to rebuild "/utf8>> | [V7 | [<<<<"("/utf8>>/binary, <<V9/binary, <<")"/utf8>>/binary>>/binary>> | [<<"with dependencies:"/utf8>> | []]]]], ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> ('Idris.Idris2.Core.Binary':'un--filenameFromModuleLocation'(V14)) end))(V13)))))) end))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V125 = begin (V35 = ('un--needsBuilding'(V6, V4, V7, V9, ((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V27) -> ('Idris.Idris2.Core.Binary':'un--filenameFromModuleLocation'(V27)) end))(V13))))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V124 = begin (V40 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'())))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V123 = begin (V45 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Core.FC.PhysicalIdrSrc', V8}))))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V122 = begin (V55 = begin (V50 = V5), fun (V51) -> begin (V54 = (begin (V52 = V50), fun (V53) -> ('erlang':'put'(V52, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'()))) end end(V51))), {'Prelude.Types.Right', V54} end end end), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V121 = begin (V108 = case V39 of 1 -> (begin (V60 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((('Idris.Idris2.Prelude.Types.String':'un--length'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V1)))) - ('Idris.Idris2.Prelude.Types.String':'un--length'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)))))))), begin (V90 = ((begin (V87 = fun (V85) -> fun (V86) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V85, V86)) end end), fun (V88) -> fun (V89) -> ((V87(V88))(V89)) end end end(((begin (V82 = fun (V80) -> fun (V81) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V80, V81)) end end), fun (V83) -> fun (V84) -> ((V82(V83))(V84)) end end end(((begin (V77 = fun (V75) -> fun (V76) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V75, V76)) end end), fun (V78) -> fun (V79) -> ((V77(V78))(V79)) end end end(((begin (V72 = fun (V70) -> fun (V71) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V70, V71)) end end), fun (V73) -> fun (V74) -> ((V72(V73))(V74)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V67) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V68, V69)) end end}, ('Idris.Idris2.Data.String':'un--replicate'(V60, $ ))))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V65, V66)) end end}, V2))))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--slash'())))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V61) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V61)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V62, V63)) end end}, V1))))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'())))), begin (V100 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V91) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_Void_ModuleIdent'(V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--prettyPrec_Pretty_Void_ModuleIdent'(V92, V93)) end end}, case V0 of {'Idris.ModTree.MkBuildMod', V94, V95, V96} -> V95 end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V97) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V97)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V98, V99)) end end}, V7))))))), fun () -> begin (V101 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"import.file"/utf8>>, 10, fun () -> <<<<"Processing "/utf8>>/binary, V7/binary>> end))), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V106 = ('Idris.Idris2.Idris.ProcessIdr':'un--process'(V6, V49, V44, V5, V4, V90, V100, V7, V8))), V106 end(V102)) end end end end end end end end()); 0 -> fun (V107) -> {'Prelude.Types.Right', []} end end), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V120 = begin (V113 = ('Idris.Idris2.Idris.REPL.Common':'un--emitWarningsAndErrors'(V6, V4, V5, case ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V112)) of 1 -> V12; 0 -> V112 end))), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V119 = fun (V118) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V117, case ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V112)) of 1 -> V12; 0 -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V12, V112)) end))} end), V119 end(V114)) end end end end), V120 end(V109)) end end end end), V121 end(V56)) end end end end), V122 end(V46)) end end end end), V123 end(V41)) end end end end), V124 end(V36)) end end end end), V125 end(V23)) end end end end end.
'nested--16446-10193--in--un--getMods'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', V5} end; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = ('un--getBuildMods'(V3, V1, V4, V5, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V15 = ('nested--16446-10193--in--un--getMods'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, V5)), V9))), V15 end(V11)) end end end end end(E0, E1)) end.
'nested--16446-10194--in--un--dropLater'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> [V5 | ('nested--16446-10194--in--un--dropLater'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(case V7 of {'Idris.ModTree.MkBuildMod', V8, V9, V10} -> V8 end, case V5 of {'Idris.ModTree.MkBuildMod', V11, V12, V13} -> V11 end)) end, V6))))] end(E0, E1)) end.
'dn--un--show_Show_BuildMod'(V0) -> <<case V0 of {'Idris.ModTree.MkBuildMod', V1, V2, V3} -> V1 end/binary, <<<<" ["/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V7)) end))(case V0 of {'Idris.ModTree.MkBuildMod', V4, V5, V6} -> V6 end))))/binary, <<"]"/utf8>>/binary>>/binary>>/binary>>.
'dn--un--showPrec_Show_BuildMod'(V0, V1) -> ('dn--un--show_Show_BuildMod'(V1)).
'dn--un--__Impl_Show_BuildMod'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_BuildMod'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_BuildMod'(V1, V2)) end end}.
'un--needsBuildingTime'(V0, V1, V2, V3) -> ('Idris.Idris2.Idris.ProcessIdr':'un--isTTCOutdated'(V0, V2, [V1 | V3])).
'un--needsBuildingHash'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V92 = begin (V56 = ('Idris.Idris2.Idris.ProcessIdr':'un--unchangedHash'(case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> case V18 of {'Core.Options.MkOptions', V46, V47, V48, V49, V50, V51, V52, V53, V54, V55} -> V55 end end, V2, V1))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V91 = begin (V84 = begin (V62 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V61) -> ('un--needsBuildingDepHash'(V0, V61)) end, V3, []))), ((begin (V81 = fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V78, V79, V80)) end end end end end), fun (V82) -> fun (V83) -> ((((V81('erased'))('erased'))(V82))(V83)) end end end((begin (V73 = fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> {'Prelude.Types.Right', (V69(V72))} end end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end(fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V64, V65)) end end, 0}, fun (V66) -> V66 end, V63)) end))))(V62)) end), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V90 = fun (V89) -> {'Prelude.Types.Right', case V60 of 1 -> V88; 0 -> 1 end} end), V90 end(V85)) end end end end), V91 end(V57)) end end end end), V92 end(V10)) end end end end.
'un--needsBuildingDepHash'(V0, V1) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V79 = begin (V12 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V1, <<"ttc"/utf8>>))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V78 = begin (V59 = ('Idris.Idris2.Idris.ProcessIdr':'un--unchangedHash'(case V11 of {'Core.Context.MkDefs', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} -> case V21 of {'Core.Options.MkOptions', V49, V50, V51, V52, V53, V54, V55, V56, V57, V58} -> V58 end end, V16, V1))), ((begin (V75 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V72, V73, V74)) end end end end end), fun (V76) -> fun (V77) -> ((((V75('erased'))('erased'))(V76))(V77)) end end end((begin (V67 = fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> {'Prelude.Types.Right', (V63(V66))} end end end end end), fun (V68) -> fun (V69) -> ((((V67('erased'))('erased'))(V68))(V69)) end end end(fun (V60) -> case V60 of 1 -> 0; 0 -> 1 end end))))(V59)) end), V78 end(V13)) end end end end), V79 end(V8)) end end end end, fun (V80) -> fun (V81) -> {'Prelude.Types.Right', 0} end end)).
'un--needsBuilding'(V0, V1, V2, V3, V4) -> begin (V34 = fun (V5) -> begin (V33 = (('Idris.Idris2.Erlang.System.File':'un--exists'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V3))(V5))), {'Prelude.Types.Right', V33} end end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V293 = case V38 of 1 -> begin (V84 = begin (V39 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), ((begin (V81 = fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V78, V79, V80)) end end end end end), fun (V82) -> fun (V83) -> ((((V81('erased'))('erased'))(V82))(V83)) end end end((begin (V73 = fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> {'Prelude.Types.Right', (V69(V72))} end end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end(fun (V40) -> case V40 of {'Core.Options.MkSessionOpts', V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} -> V63 end end))))(V39)) end), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V291 = begin (V89 = case V88 of 1 -> ('un--needsBuildingHash'(V0, V2, V3, V4)); 0 -> ('un--needsBuildingTime'(V0, V2, V3, V4)) end), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V290 = case V93 of 0 -> begin (V109 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, 20, fun () -> <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V94) -> fun (V95) -> <<V94/binary, V95/binary>> end end, <<""/utf8>>}, fun (V96) -> V96 end, [(begin (V104 = fun (V103) -> V103 end), fun (V105) -> (V104(V105)) end end(case V88 of 1 -> (begin (V98 = fun (V97) -> V97 end), fun (V99) -> (V98(V99)) end end(<<"Hashes"/utf8>>)); 0 -> (begin (V101 = fun (V100) -> V100 end), fun (V102) -> (V101(V102)) end end(<<"Mod Times"/utf8>>)) end)) | [(begin (V107 = fun (V106) -> V106 end), fun (V108) -> (V107(V108)) end end(<<" still valid for "/utf8>>)) | []]]))/binary, V2/binary>> end))), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V288 = begin (V114 = ('Idris.Idris2.Idris.ProcessIdr':'un--missingIncremental'(V0, V3))), fun (V115) -> begin (V116 = (V114(V115))), case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> (begin (V287 = case V118 of 0 -> begin (V160 = begin (V124 = begin (V119 = V1), fun (V120) -> begin (V123 = (begin (V121 = V119), fun (V122) -> ('erlang':'get'(V121)) end end(V120))), {'Prelude.Types.Right', V123} end end end), ((begin (V157 = fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V154, V155, V156)) end end end end end), fun (V158) -> fun (V159) -> ((((V157('erased'))('erased'))(V158))(V159)) end end end((begin (V149 = fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> case V146 of {'Prelude.Types.Left', V147} -> {'Prelude.Types.Left', V147}; {'Prelude.Types.Right', V148} -> {'Prelude.Types.Right', (V145(V148))} end end end end end), fun (V150) -> fun (V151) -> ((((V149('erased'))('erased'))(V150))(V151)) end end end(fun (V125) -> case V125 of {'Idris.REPL.Opts.MkREPLOpts', V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142} -> V129 end end))))(V124)) end), fun (V161) -> begin (V162 = (V160(V161))), case V162 of {'Prelude.Types.Left', V163} -> {'Prelude.Types.Left', V163}; {'Prelude.Types.Right', V164} -> (begin (V285 = case V164 of {'Prelude.Types.Just', V165} -> begin (V181 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V167 = fun (V166) -> V166 end), fun (V168) -> (V167(V168)) end end(<<"totality.requirement"/utf8>>)), 10, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V169) -> fun (V170) -> <<V169/binary, V170/binary>> end end, <<""/utf8>>}, fun (V171) -> V171 end, [(begin (V173 = fun (V172) -> V172 end), fun (V174) -> (V173(V174)) end end(<<"Checking totality requirement of "/utf8>>)) | [V2 | [(begin (V176 = fun (V175) -> V175 end), fun (V177) -> (V176(V177)) end end(<<" (main file is "/utf8>>)) | [V165 | [(begin (V179 = fun (V178) -> V178 end), fun (V180) -> (V179(V180)) end end(<<")"/utf8>>)) | []]]]]])) end))), fun (V182) -> begin (V183 = (V181(V182))), case V183 of {'Prelude.Types.Left', V184} -> {'Prelude.Types.Left', V184}; {'Prelude.Types.Right', V185} -> (begin (V283 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V165)) of 1 -> begin (V237 = begin (V231 = begin (V186 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), ((begin (V228 = fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V225, V226, V227)) end end end end end), fun (V229) -> fun (V230) -> ((((V228('erased'))('erased'))(V229))(V230)) end end end((begin (V220 = fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> case V217 of {'Prelude.Types.Left', V218} -> {'Prelude.Types.Left', V218}; {'Prelude.Types.Right', V219} -> {'Prelude.Types.Right', (V216(V219))} end end end end end), fun (V221) -> fun (V222) -> ((((V220('erased'))('erased'))(V221))(V222)) end end end(fun (V187) -> case V187 of {'Core.Options.MkSessionOpts', V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213} -> V189 end end))))(V186)) end), fun (V232) -> begin (V233 = (V231(V232))), case V233 of {'Prelude.Types.Left', V234} -> {'Prelude.Types.Left', V234}; {'Prelude.Types.Right', V235} -> (begin (V236 = ('un--checkTotalReq'(V0, V2, V3, V235))), V236 end(V232)) end end end end), fun (V238) -> begin (V239 = (V237(V238))), case V239 of {'Prelude.Types.Left', V240} -> {'Prelude.Types.Left', V240}; {'Prelude.Types.Right', V241} -> (begin (V281 = case V241 of 1 -> begin (V271 = fun (V242) -> begin (V270 = (('Idris.Idris2.Erlang.System.File':'un--removeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V243) -> fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V245, V246, V247)) end end end end end, fun (V248) -> fun (V249) -> fun (V250) -> V249 end end end, fun (V251) -> fun (V252) -> fun (V253) -> fun (V254) -> fun (V255) -> begin (V256 = (V253(V255))), begin (V257 = (V254(V255))), (V256(V257)) end end end end end end end}, fun (V258) -> fun (V259) -> fun (V260) -> fun (V261) -> fun (V262) -> begin (V263 = (V260(V262))), ((V261(V263))(V262)) end end end end end end, fun (V264) -> fun (V265) -> fun (V266) -> begin (V267 = (V265(V266))), (V267(V266)) end end end end}, fun (V268) -> fun (V269) -> V269 end end}, V3))(V242))), {'Prelude.Types.Right', V270} end end), fun (V272) -> begin (V273 = (V271(V272))), case V273 of {'Prelude.Types.Left', V274} -> {'Prelude.Types.Left', V274}; {'Prelude.Types.Right', V275} -> (begin (V279 = fun (V276) -> case V275 of {'Prelude.Types.Right', V277} -> {'Prelude.Types.Right', 1}; {'Prelude.Types.Left', V278} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V3, V278}, V276)) end end), V279 end(V272)) end end end end; 0 -> fun (V280) -> {'Prelude.Types.Right', 0} end end), V281 end(V238)) end end end end; 0 -> fun (V282) -> {'Prelude.Types.Right', 0} end end), V283 end(V182)) end end end end; {'Prelude.Types.Nothing'} -> fun (V284) -> {'Prelude.Types.Right', 0} end end), V285 end(V161)) end end end end; 1 -> fun (V286) -> {'Prelude.Types.Right', 1} end end), V287 end(V115)) end end end end), V288 end(V110)) end end end end; 1 -> fun (V289) -> {'Prelude.Types.Right', 1} end end), V290 end(V90)) end end end end), V291 end(V85)) end end end end; 0 -> fun (V292) -> {'Prelude.Types.Right', 1} end end), V293 end(V35)) end end end end.
'un--mkModTree'(V0, V1, V2, V3, V4, V5, V6) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> V27 end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V35, V36)) end end}, V6, V4)) of 1 -> fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CyclicImports', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, [V6 | []]))}, V37)) end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V43 = begin (V38 = V2), fun (V39) -> begin (V42 = (begin (V40 = V38), fun (V41) -> ('erlang':'get'(V40)) end end(V39))), {'Prelude.Types.Right', V42} end end end), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V148 = case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V50, V51)) end end}, V6, V47)) of {'Prelude.Types.Nothing'} -> begin (V54 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Core.Directory':'un--nsToSource'(V0, V3, V6)) end, fun () -> fun (V52) -> fun (V53) -> {'Prelude.Types.Right', V52} end end end, V5))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V145 = begin (V59 = ('Idris.Idris2.Idris.ProcessIdr':'un--readHeader'(V0, V1, V58, V6))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V144 = begin (V81 = ((begin (V78 = fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V76, V77)) end end end end), fun (V79) -> fun (V80) -> ((((V78('erased'))('erased'))(V79))(V80)) end end end(fun (V69) -> case V69 of {'Idris.Syntax.MkImport', V70, V71, V72, V73} -> V72 end end))(case V63 of {'Idris.Syntax.MkModule', V64, V65, V66, V67, V68} -> V66 end))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V84, V85, V86)) end end end end end, fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V89, V90, V91)) end end end end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V93)) end end, fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V97, V98, V99, V100)) end end end end end end end, fun (V101) -> fun (V102) -> V102 end end, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V105, V106, V107)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V108, V109)) end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V110, V111)) end end}, V6, V81)) of 1 -> fun (V112) -> ('Idris.Idris2.Core.Core':'un--coreFail'({'Core.Core.CyclicImports', [V6 | [V6 | []]]}, V112)) end; 0 -> begin (V114 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V113) -> ('un--mkModTree'(V0, V1, V2, V3, [V6 | V4], {'Prelude.Types.Nothing'}, V113)) end, V81, []))), fun (V115) -> begin (V116 = (V114(V115))), case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> (begin (V143 = begin (V119 = {'Idris.ModTree.MkModTree', V6, {'Prelude.Types.Just', V58}, V118}), begin (V136 = begin (V125 = begin (V120 = V2), fun (V121) -> begin (V124 = (begin (V122 = V120), fun (V123) -> ('erlang':'get'(V122)) end end(V121))), {'Prelude.Types.Right', V124} end end end), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V135 = begin (V130 = V2), fun (V131) -> begin (V134 = (begin (V132 = V130), fun (V133) -> ('erlang':'put'(V132, [{'Builtin.MkPair', V6, V119} | V129])) end end(V131))), {'Prelude.Types.Right', V134} end end end), V135 end(V126)) end end end end), fun (V137) -> begin (V138 = (V136(V137))), case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> (begin (V142 = fun (V141) -> {'Prelude.Types.Right', V119} end), V142 end(V137)) end end end end end), V143 end(V115)) end end end end end end), V144 end(V60)) end end end end), V145 end(V55)) end end end end; {'Prelude.Types.Just', V146} -> fun (V147) -> {'Prelude.Types.Right', V146} end end), V148 end(V44)) end end end end, fun (V149) -> fun (V150) -> case V149 of {'Core.Core.CyclicImports', V151} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V149, V150)); {'Core.Core.ParseFail', V152} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V149, V150)); {'Core.Core.LexFail', V153, V154} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V149, V150)); {'Core.Core.LitFail', V155} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V149, V150)); _ -> {'Prelude.Types.Right', {'Idris.ModTree.MkModTree', V6, {'Prelude.Types.Nothing'}, []}} end end end)) end.
'un--mkBuildMods'(V0, V1, V2) -> case V2 of {'Idris.ModTree.MkModTree', V3, V4, V5} -> case V4 of {'Prelude.Types.Just', V6} -> begin (V12 = begin (V7 = V0), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V84 = case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V6, V16)) of {'Prelude.Types.Just', V17} -> fun (V18) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Prelude.Types.Nothing'} -> begin (V23 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V19) -> ('un--mkBuildMods'(V0, V1, V19)) end, case V2 of {'Idris.ModTree.MkModTree', V20, V21, V22} -> V22 end))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V83 = begin (V61 = begin (V33 = begin (V28 = V1), fun (V29) -> begin (V32 = (begin (V30 = V28), fun (V31) -> ('erlang':'get'(V30)) end end(V29))), {'Prelude.Types.Right', V32} end end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V60 = begin (V38 = V1), fun (V39) -> begin (V59 = (begin (V40 = V38), fun (V41) -> ('erlang':'put'(V40, [{'Idris.ModTree.MkBuildMod', V6, case V2 of {'Idris.ModTree.MkModTree', V42, V43, V44} -> V42 end, ((begin (V56 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V54, V55)) end end end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end(fun (V48) -> case V48 of {'Idris.ModTree.MkModTree', V49, V50, V51} -> V49 end end))(case V2 of {'Idris.ModTree.MkModTree', V45, V46, V47} -> V47 end))} | V37])) end end(V39))), {'Prelude.Types.Right', V59} end end end), V60 end(V34)) end end end end), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V82 = begin (V71 = begin (V66 = V0), fun (V67) -> begin (V70 = (begin (V68 = V66), fun (V69) -> ('erlang':'get'(V68)) end end(V67))), {'Prelude.Types.Right', V70} end end end), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V81 = begin (V76 = V0), fun (V77) -> begin (V80 = (begin (V78 = V76), fun (V79) -> ('erlang':'put'(V78, ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V6, {'Builtin.MkUnit'}, V75)))) end end(V77))), {'Prelude.Types.Right', V80} end end end), V81 end(V72)) end end end end), V82 end(V62)) end end end end), V83 end(V24)) end end end end end), V84 end(V13)) end end end end; {'Prelude.Types.Nothing'} -> fun (V85) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end.
'un--loadModules'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V30 = begin (V12 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V29 = begin (V22 = begin (V17 = V2), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'put'(V19, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Core.FC.PhysicalPkgSrc', V5})))) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V28 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V27) -> ('Idris.Idris2.Idris.ProcessIdr':'un--readModule'(V0, V3, V1, 1, ('Idris.Idris2.Core.FC':'un--emptyFC'()), 1, V27, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V27)))) end, V6))), V28 end(V23)) end end end end), V29 end(V13)) end end end end), V30 end(V8)) end end end end.
'un--getBuildMods'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.ModTree.AllMods'}, []))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V94 = begin (V10 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V4))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V93 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V30, V31, V32, V33)) end end end end end end end, fun (V34) -> fun (V35) -> V35 end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V38, V39, V40)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V43, V44)) end end}, V14, ((begin (V53 = fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V51, V52)) end end end end), fun (V54) -> fun (V55) -> ((((V53('erased'))('erased'))(V54))(V55)) end end end(fun (V45) -> case V45 of {'Idris.ModTree.MkBuildMod', V46, V47, V48} -> V47 end end))(V3)))) of 1 -> fun (V56) -> {'Prelude.Types.Right', []} end; 0 -> begin (V57 = ('un--mkModTree'(V0, V1, V9, V2, [], {'Prelude.Types.Just', V4}, V14))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V92 = begin (V62 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.ModTree.DoneMod'}, ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'())))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V91 = begin (V67 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.ModTree.BuildOrder'}, []))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V90 = begin (V72 = ('un--mkBuildMods'(V66, V71, V61))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V89 = begin (V82 = begin (V77 = V71), fun (V78) -> begin (V81 = (begin (V79 = V77), fun (V80) -> ('erlang':'get'(V79)) end end(V78))), {'Prelude.Types.Right', V81} end end end), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V88 = fun (V87) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V86))} end), V88 end(V83)) end end end end), V89 end(V73)) end end end end), V90 end(V68)) end end end end), V91 end(V63)) end end end end), V92 end(V58)) end end end end end), V93 end(V11)) end end end end), V94 end(V6)) end end end end.
'un--getAllBuildMods'(V0, V1, V2, V3) -> begin (V4 = ('nested--16446-10193--in--un--getMods'(V3, V2, V1, V0, {'Core.FC.EmptyFC'}, [], V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V10 = fun (V9) -> {'Prelude.Types.Right', ('nested--16446-10194--in--un--dropLater'(V3, V2, V1, V0, V8))} end), V10 end(V5)) end end end end.
'un--filterUsedByMods'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> ('case--filterUsedByMods-10283'(V2, V3, V1, ('Idris.Idris2.Data.List':'un--partition'(fun (V4) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V20, V21, V22, V23)) end end end end end end end, fun (V24) -> fun (V25) -> V25 end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V28, V29, V30)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V33, V34)) end end}, V2, case V4 of {'Idris.ModTree.MkBuildMod', V35, V36, V37} -> V37 end)) end, V1)))) end(E0, E1)) end.
'un--checkTotalReq'(V0, V1, V2, V3) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V4 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.requirement"/utf8>>, 20, fun () -> <<<<"Reading totalReq from "/utf8>>/binary, V2/binary>> end))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V36 = begin (V9 = ('Idris.Idris2.Core.Binary':'un--readTotalReq'(V2))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V35 = case V13 of {'Prelude.Types.Just', V14} -> begin (V27 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V16 = fun (V15) -> V15 end), fun (V17) -> (V16(V17)) end end(<<"totality.requirement"/utf8>>)), 20, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Got"/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V14)) | [(begin (V19 = fun (V18) -> V18 end), fun (V20) -> (V19(V20)) end end(<<"and expected"/utf8>>)) | [<<('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V3))/binary, <<":"/utf8>>/binary>> | [<<"we"/utf8>> | [case ('Idris.Idris2.Core.TT':'dn--un--<_Ord_TotalReq'(V14, V3)) of 1 -> (begin (V22 = fun (V21) -> V21 end), fun (V23) -> (V22(V23)) end end(<<"should"/utf8>>)); 0 -> (begin (V25 = fun (V24) -> V24 end), fun (V26) -> (V25(V26)) end end(<<"shouldn\x{27}t"/utf8>>)) end | [<<"rebuild"/utf8>> | []]]]]]]])) end))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = fun (V32) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--<_Ord_TotalReq'(V14, V3))} end), V33 end(V28)) end end end end; {'Prelude.Types.Nothing'} -> fun (V34) -> {'Prelude.Types.Right', 0} end end), V35 end(V10)) end end end end), V36 end(V5)) end end end end, fun (V37) -> fun (V38) -> {'Prelude.Types.Right', 0} end end)).
'un--buildMods'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = ('un--buildMod'(V0, V1, V2, V3, V4, V5, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = case V14 of [] -> ('un--buildMods'(V0, V1, V2, V3, (V4 + 1), V5, V9)); _ -> fun (V15) -> {'Prelude.Types.Right', V14} end end), V16 end(V11)) end end end end end(E0, E1)) end.
'un--buildMod'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V54 = begin (V12 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V53 = begin (V17 = ('Idris.Idris2.Core.Context':'un--lazyActive'(V0, 1))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V52 = begin (V22 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V0, 1))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V51 = begin (V30 = case V6 of {'Idris.ModTree.MkBuildMod', V27, V28, V29} -> V27 end), begin (V34 = case V6 of {'Idris.ModTree.MkBuildMod', V31, V32, V33} -> V32 end), begin (V35 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V30, <<"ttc"/utf8>>))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V50 = begin (V44 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V40) -> ('Idris.Idris2.Core.Directory':'un--nsToPath'(V0, V3, V40)) end, case V6 of {'Idris.ModTree.MkBuildMod', V41, V42, V43} -> V43 end, []))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V49 = ('case--buildMod-9463'(V6, V5, V4, V3, V2, V1, V0, V30, V34, V39, V48, ('Idris.Idris2.Data.Either':'un--partitionEithers'(V48))))), V49 end(V45)) end end end end), V50 end(V36)) end end end end end end), V51 end(V23)) end end end end), V52 end(V18)) end end end end), V53 end(V13)) end end end end), V54 end(V8)) end end end end.
'un--buildDeps'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--getBuildMods'(V0, V4, {'Core.FC.EmptyFC'}, [], V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V99 = begin (V14 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, 20, fun () -> <<<<"Needs to rebuild: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V11) -> ('dn--un--show_Show_BuildMod'(V11)) end, fun (V12) -> fun (V13) -> ('dn--un--showPrec_Show_BuildMod'(V12, V13)) end end}, V10))/binary>> end))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V98 = begin (V19 = ('un--buildMods'(V0, V1, V4, {'Core.FC.EmptyFC'}, 1, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V10)), V10))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V97 = case V23 of [] -> begin (V24 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V95 = begin (V29 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V94 = begin (V34 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V5))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V93 = begin (V44 = begin (V39 = V2), fun (V40) -> begin (V43 = (begin (V41 = V39), fun (V42) -> ('erlang':'put'(V41, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Core.FC.PhysicalIdrSrc', V38})))) end end(V40))), {'Prelude.Types.Right', V43} end end end), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V92 = begin (V49 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V5, <<"ttc"/utf8>>))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V91 = begin (V57 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, 10, fun () -> <<(begin (V55 = fun (V54) -> V54 end), fun (V56) -> (V55(V56)) end end(<<"Reloading "/utf8>>))/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V53))/binary, <<<<" from "/utf8>>/binary, V5/binary>>/binary>>/binary>> end))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V90 = begin (V62 = ('Idris.Idris2.Idris.ProcessIdr':'un--readAsMain'(V0, V3, V1, V53))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V89 = begin (V67 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V5, <<"ttm"/utf8>>))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V88 = begin (V75 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, 10, fun () -> <<(begin (V73 = fun (V72) -> V72 end), fun (V74) -> (V73(V74)) end end(<<"Reloading "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V71))/binary>> end))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V87 = begin (V80 = ('Idris.Idris2.Core.Metadata':'un--readFromTTM'(V2, V71))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V86 = fun (V85) -> {'Prelude.Types.Right', []} end), V86 end(V81)) end end end end), V87 end(V76)) end end end end), V88 end(V68)) end end end end), V89 end(V63)) end end end end), V90 end(V58)) end end end end), V91 end(V50)) end end end end), V92 end(V45)) end end end end), V93 end(V35)) end end end end), V94 end(V30)) end end end end), V95 end(V25)) end end end end; _ -> fun (V96) -> {'Prelude.Types.Right', V23} end end), V97 end(V20)) end end end end), V98 end(V15)) end end end end), V99 end(V7)) end end end end.
'un--buildAll'(V0, V1, V2, V3) -> ('un--buildMods'(V0, V1, V2, {'Core.FC.EmptyFC'}, 1, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V3)), V3)).
