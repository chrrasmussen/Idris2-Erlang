-module('Idris.Idris2.Core.Termination').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in checkTotal-14942'/9,
  'case--checkTotal-14883'/5,
  'case--checkPositive-14790'/6,
  'case--checkTerminating-13155'/5,
  'case--asserted-10128'/3,
  'case--smallerArg-10039'/6,
  'case--case block in case block in findSC-9497'/12,
  'case--findSC-9428'/8,
  'case--case block in totRefs-7691'/8,
  'nested--10945-10322--in--un--urhs'/11,
  'nested--9445-10301--in--un--updateRHS'/10,
  'nested--9445-10302--in--un--updatePat'/10,
  'nested--12481-11734--in--un--updateArg'/9,
  'nested--14350-13546--in--un--splitParams'/12,
  'nested--12481-11735--in--un--mkArgs'/8,
  'nested--9445-10303--in--un--matchArgs'/7,
  'nested--10945-10323--in--un--lookupTm'/12,
  'nested--9337-9178--in--un--handleCase'/9,
  'nested--8241-7873--in--un--guardedNF'/7,
  'nested--8241-7875--in--un--guarded'/6,
  'nested--12481-11737--in--un--getWorst'/9,
  'nested--12481-11733--in--un--getPos'/9,
  'nested--9337-9064--in--un--findSCbinder'/11,
  'nested--12481-11738--in--un--continue'/9,
  'nested--9337-9179--in--un--conIfGuarded'/8,
  'nested--8241-7874--in--un--checkNotFn'/5,
  'nested--12481-11732--in--un--checkDesc'/9,
  'nested--12481-11736--in--un--checkCall'/9,
  'nested--8241-7876--in--un--allGuarded'/4,
  'nested--13603-12750--in--un--addCases\x{27}'/6,
  'nested--13603-12751--in--un--addCases'/5,
  'un--totRefsIn'/3,
  'un--totRefs'/3,
  'un--smallerArg'/5,
  'un--smaller'/5,
  'un--scEq'/2,
  'un--posArgs'/4,
  'un--posArg'/4,
  'un--nextArg'/1,
  'un--nameIn'/4,
  'un--mkChange'/4,
  'un--initArgs'/2,
  'un--getSC'/3,
  'un--getCasePats'/6,
  'un--firstArg'/0,
  'un--findSCcall'/10,
  'un--findSC'/7,
  'un--findInCase'/4,
  'un--findCalls'/3,
  'un--expandToArity'/2,
  'un--delazy'/2,
  'un--checkTotal'/3,
  'un--checkTerminating'/3,
  'un--checkSC'/7,
  'un--checkPositive'/3,
  'un--checkPosArgs'/4,
  'un--checkIfGuarded'/3,
  'un--checkData'/4,
  'un--checkCon'/4,
  'un--caseFn'/1,
  'un--calculateSizeChange'/3,
  'un--calcTerminating'/3,
  'un--calcPositive'/3,
  'un--assertedSmaller'/2,
  'un--asserted'/2
]).
'case--case block in checkTotal-14942'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.TT.Unchecked'} -> begin (V41 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V7 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V181 = case ((begin (V73 = fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V71, V72)) end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end(fun (V46) -> case V46 of {'Core.Context.Context.MkGlobalDef', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68} -> V64 end end))(V45)) of {'Prelude.Types.Just', V76} -> case V76 of {'Core.Context.Context.TCon', V77, V78, V79, V80, V81, V82, V83, V84} -> ('un--checkPositive'(V2, V1, V5)); _ -> begin (V127 = case ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V85, V86)) end end, fun (V87) -> case V87 of {'Core.Context.Context.MkGlobalDef', V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109} -> V100 end end, V45)) of {'Prelude.Types.Just', V110} -> begin (V117 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V111) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V112, V113)) end end, fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V114, V115, V116)) end end end}, V111)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V110)), []))), fun (V118) -> begin (V119 = (V117(V118))), case V119 of {'Prelude.Types.Left', V120} -> {'Prelude.Types.Left', V120}; {'Prelude.Types.Right', V121} -> (begin (V125 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"totality"/utf8>>, 5, fun () -> <<<<"  Mutually defined with:"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V122) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V122)) end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V123, V124)) end end}, V121))/binary>> end))), V125 end(V118)) end end end end; {'Prelude.Types.Nothing'} -> fun (V126) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V128) -> begin (V129 = (V127(V128))), case V129 of {'Prelude.Types.Left', V130} -> {'Prelude.Types.Left', V130}; {'Prelude.Types.Right', V131} -> (begin (V132 = ('un--checkTerminating'(V2, V1, V5))), V132 end(V128)) end end end end end; _ -> begin (V175 = case ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V133, V134)) end end, fun (V135) -> case V135 of {'Core.Context.Context.MkGlobalDef', V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157} -> V148 end end, V45)) of {'Prelude.Types.Just', V158} -> begin (V165 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V159) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V160, V161)) end end, fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V162, V163, V164)) end end end}, V159)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V158)), []))), fun (V166) -> begin (V167 = (V165(V166))), case V167 of {'Prelude.Types.Left', V168} -> {'Prelude.Types.Left', V168}; {'Prelude.Types.Right', V169} -> (begin (V173 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"totality"/utf8>>, 5, fun () -> <<<<"  Mutually defined with:"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V170) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V170)) end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V171, V172)) end end}, V169))/binary>> end))), V173 end(V166)) end end end end; {'Prelude.Types.Nothing'} -> fun (V174) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V176) -> begin (V177 = (V175(V176))), case V177 of {'Prelude.Types.Left', V178} -> {'Prelude.Types.Left', V178}; {'Prelude.Types.Right', V179} -> (begin (V180 = ('un--checkTerminating'(V2, V1, V5))), V180 end(V176)) end end end end end), V181 end(V42)) end end end end; _ -> fun (V182) -> {'Prelude.Types.Right', V8} end end.
'case--checkTotal-14883'(V0, V1, V2, V3, V4) -> case V4 of {'Prelude.Types.Just', V5} -> begin (V6 = {'Core.Name.Resolved', V5}), begin (V7 = ('Idris.Idris2.Core.Context':'un--getTotality'(V2, V1, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V42 = begin (V23 = begin (V17 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V14, V15, V16)) end end end}, V6))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V22 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"totality"/utf8>>, 5, fun () -> <<<<"Checking totality: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21))/binary>> end))), V22 end(V18)) end end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V41 = begin (V33 = begin (V28 = V2), fun (V29) -> begin (V32 = (begin (V30 = V28), fun (V31) -> ('erlang':'get'(V30)) end end(V29))), {'Prelude.Types.Right', V32} end end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V40 = ('case--case block in checkTotal-14942'(V0, V1, V2, V3, V5, V6, V11, V37, case V11 of {'Core.TT.MkTotality', V38, V39} -> V38 end))), V40 end(V34)) end end end end), V41 end(V24)) end end end end), V42 end(V8)) end end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V2, V1, V0)) end.
'case--checkPositive-14790'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.TT.Unchecked'} -> begin (V6 = ('un--calcPositive'(V2, V1, V3))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V27 = case V10 of {'Builtin.MkPair', V11, V12} -> begin (V13 = ('Idris.Idris2.Core.Context':'un--setTerminating'(V2, V1, V3, V11))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V26 = begin (V19 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V18) -> ('Idris.Idris2.Core.Context':'un--setTerminating'(V2, V1, V18, V11)) end, V12))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', V11} end), V25 end(V20)) end end end end), V26 end(V14)) end end end end end), V27 end(V7)) end end end end; _ -> fun (V28) -> {'Prelude.Types.Right', V5} end end.
'case--checkTerminating-13155'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Unchecked'} -> begin (V5 = ('un--calcTerminating'(V2, V1, V0))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V17 = begin (V10 = ('Idris.Idris2.Core.Context':'un--setTerminating'(V2, V1, V0, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', V9} end), V16 end(V11)) end end end end), V17 end(V6)) end end end end; _ -> fun (V18) -> {'Prelude.Types.Right', V4} end end.
'case--asserted-10128'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case V3 of {'Core.TT.Ref', V5, V6, V7} -> case V4 of [E0 | E1] -> (fun (V8, V9) -> case V9 of [E2 | E3] -> (fun (V10, V11) -> case V11 of [E4 | E5] -> (fun (V12, V13) -> case V13 of [E6 | E7] -> (fun (V14, V15) -> case V15 of [] -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V1)) of 1 -> {'Prelude.Types.Just', V12}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E6, E7)); _ -> {'Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'case--smallerArg-10039'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Builtin.MkPair', V6, V7} -> case V6 of {'Core.TT.Ref', V8, V9, V10} -> case V9 of {'Core.TT.DataCon', V11, V12} -> fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V13, V14)) end end, 0}, fun (V15) -> ('un--smaller'(1, V3, V2, V1, V15)) end, V7)) end; _ -> case V1 of {'Core.TT.App', V16, V17, V18} -> fun () -> ('un--smaller'(V4, V3, V2, V17, V0)) end; _ -> fun () -> 0 end end end; _ -> case V1 of {'Core.TT.App', V19, V20, V21} -> fun () -> ('un--smaller'(V4, V3, V2, V20, V0)) end; _ -> fun () -> 0 end end end; _ -> case V1 of {'Core.TT.App', V22, V23, V24} -> fun () -> ('un--smaller'(V4, V3, V2, V23, V0)) end; _ -> fun () -> 0 end end end.
'case--case block in case block in findSC-9497'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> case V12 of 3 -> case V13 of {'Builtin.MkPair', V14, V15} -> case V14 of {'Core.TT.Ref', V16, V17, V18} -> case V17 of {'Core.TT.DataCon', V19, V20} -> begin (V22 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V21) -> ('un--findSC'(V0, V6, V5, V4, 3, V2, V21)) end, V15, []))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V31 = fun (V27) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V28, V29)) end end, []}, fun (V30) -> V30 end, V26))} end), V31 end(V23)) end end end end; _ -> begin (V33 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V32) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V32)) end, V15, []))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V42 = fun (V38) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V39, V40)) end end, []}, fun (V41) -> V41 end, V37))} end), V42 end(V34)) end end end end end; _ -> begin (V44 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V43) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V43)) end, V15, []))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V53 = fun (V49) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V50, V51)) end end, []}, fun (V52) -> V52 end, V48))} end), V53 end(V45)) end end end end end; _ -> case V13 of {'Builtin.MkPair', V54, V55} -> case V54 of {'Core.TT.Ref', V56, V57, V58} -> case V57 of {'Core.TT.Func'} -> begin (V71 = begin (V64 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V59, V60)) end end, fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V61, V62, V63)) end end end}, V58))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V70 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V6, <<"totality"/utf8>>, 50, fun (V69) -> {'Prelude.Types.Right', <<<<"Looking up type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V68))/binary>>} end))), V70 end(V65)) end end end end), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V130 = begin (V108 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V58, case V5 of {'Core.Context.MkDefs', V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107} -> V76 end))), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V129 = case V112 of {'Prelude.Types.Just', V113} -> begin (V114 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Core.Env.Nil'}, V113))), fun (V115) -> begin (V116 = (V114(V115))), case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> (begin (V119 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V56, V58, V118, V55))), V119 end(V115)) end end end end; {'Prelude.Types.Nothing'} -> begin (V123 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"totality"/utf8>>, 50, fun () -> (begin (V121 = fun (V120) -> V120 end), fun (V122) -> (V121(V122)) end end(<<"Lookup failed"/utf8>>)) end))), fun (V124) -> begin (V125 = (V123(V124))), case V125 of {'Prelude.Types.Left', V126} -> {'Prelude.Types.Left', V126}; {'Prelude.Types.Right', V127} -> (begin (V128 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V56, V58, 0, V55))), V128 end(V124)) end end end end end), V129 end(V109)) end end end end), V130 end(V72)) end end end end; _ -> begin (V132 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V131) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V131)) end, V55, []))), fun (V133) -> begin (V134 = (V132(V133))), case V134 of {'Prelude.Types.Left', V135} -> {'Prelude.Types.Left', V135}; {'Prelude.Types.Right', V136} -> (begin (V141 = fun (V137) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V138, V139)) end end, []}, fun (V140) -> V140 end, V136))} end), V141 end(V133)) end end end end end; _ -> begin (V143 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V142) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V142)) end, V55, []))), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V152 = fun (V148) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V149, V150)) end end, []}, fun (V151) -> V151 end, V147))} end), V152 end(V144)) end end end end end end end; 2 -> case V13 of {'Builtin.MkPair', V153, V154} -> case V153 of {'Core.TT.Ref', V155, V156, V157} -> case V156 of {'Core.TT.DataCon', V158, V159} -> begin (V161 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V160) -> ('un--findSC'(V0, V6, V5, V4, 2, V2, V160)) end, V154, []))), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V170 = fun (V166) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V167, V168)) end end, []}, fun (V169) -> V169 end, V165))} end), V170 end(V162)) end end end end; _ -> case V13 of {'Builtin.MkPair', V171, V172} -> case V171 of {'Core.TT.Ref', V173, V174, V175} -> case V174 of {'Core.TT.Func'} -> begin (V188 = begin (V181 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V176, V177)) end end, fun (V178) -> fun (V179) -> fun (V180) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V178, V179, V180)) end end end}, V175))), fun (V182) -> begin (V183 = (V181(V182))), case V183 of {'Prelude.Types.Left', V184} -> {'Prelude.Types.Left', V184}; {'Prelude.Types.Right', V185} -> (begin (V187 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V6, <<"totality"/utf8>>, 50, fun (V186) -> {'Prelude.Types.Right', <<<<"Looking up type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V185))/binary>>} end))), V187 end(V182)) end end end end), fun (V189) -> begin (V190 = (V188(V189))), case V190 of {'Prelude.Types.Left', V191} -> {'Prelude.Types.Left', V191}; {'Prelude.Types.Right', V192} -> (begin (V247 = begin (V225 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V175, case V5 of {'Core.Context.MkDefs', V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224} -> V193 end))), fun (V226) -> begin (V227 = (V225(V226))), case V227 of {'Prelude.Types.Left', V228} -> {'Prelude.Types.Left', V228}; {'Prelude.Types.Right', V229} -> (begin (V246 = case V229 of {'Prelude.Types.Just', V230} -> begin (V231 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Core.Env.Nil'}, V230))), fun (V232) -> begin (V233 = (V231(V232))), case V233 of {'Prelude.Types.Left', V234} -> {'Prelude.Types.Left', V234}; {'Prelude.Types.Right', V235} -> (begin (V236 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V173, V175, V235, V172))), V236 end(V232)) end end end end; {'Prelude.Types.Nothing'} -> begin (V240 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"totality"/utf8>>, 50, fun () -> (begin (V238 = fun (V237) -> V237 end), fun (V239) -> (V238(V239)) end end(<<"Lookup failed"/utf8>>)) end))), fun (V241) -> begin (V242 = (V240(V241))), case V242 of {'Prelude.Types.Left', V243} -> {'Prelude.Types.Left', V243}; {'Prelude.Types.Right', V244} -> (begin (V245 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V173, V175, 0, V172))), V245 end(V241)) end end end end end), V246 end(V226)) end end end end), V247 end(V189)) end end end end; _ -> begin (V249 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V248) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V248)) end, V172, []))), fun (V250) -> begin (V251 = (V249(V250))), case V251 of {'Prelude.Types.Left', V252} -> {'Prelude.Types.Left', V252}; {'Prelude.Types.Right', V253} -> (begin (V258 = fun (V254) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V255) -> fun (V256) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V255, V256)) end end, []}, fun (V257) -> V257 end, V253))} end), V258 end(V250)) end end end end end; _ -> begin (V260 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V259) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V259)) end, V172, []))), fun (V261) -> begin (V262 = (V260(V261))), case V262 of {'Prelude.Types.Left', V263} -> {'Prelude.Types.Left', V263}; {'Prelude.Types.Right', V264} -> (begin (V269 = fun (V265) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V266) -> fun (V267) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V266, V267)) end end, []}, fun (V268) -> V268 end, V264))} end), V269 end(V261)) end end end end end end end; _ -> case V13 of {'Builtin.MkPair', V270, V271} -> case V270 of {'Core.TT.Ref', V272, V273, V274} -> case V273 of {'Core.TT.Func'} -> begin (V287 = begin (V280 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V275) -> fun (V276) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V275, V276)) end end, fun (V277) -> fun (V278) -> fun (V279) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V277, V278, V279)) end end end}, V274))), fun (V281) -> begin (V282 = (V280(V281))), case V282 of {'Prelude.Types.Left', V283} -> {'Prelude.Types.Left', V283}; {'Prelude.Types.Right', V284} -> (begin (V286 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V6, <<"totality"/utf8>>, 50, fun (V285) -> {'Prelude.Types.Right', <<<<"Looking up type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V284))/binary>>} end))), V286 end(V281)) end end end end), fun (V288) -> begin (V289 = (V287(V288))), case V289 of {'Prelude.Types.Left', V290} -> {'Prelude.Types.Left', V290}; {'Prelude.Types.Right', V291} -> (begin (V346 = begin (V324 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V274, case V5 of {'Core.Context.MkDefs', V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323} -> V292 end))), fun (V325) -> begin (V326 = (V324(V325))), case V326 of {'Prelude.Types.Left', V327} -> {'Prelude.Types.Left', V327}; {'Prelude.Types.Right', V328} -> (begin (V345 = case V328 of {'Prelude.Types.Just', V329} -> begin (V330 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Core.Env.Nil'}, V329))), fun (V331) -> begin (V332 = (V330(V331))), case V332 of {'Prelude.Types.Left', V333} -> {'Prelude.Types.Left', V333}; {'Prelude.Types.Right', V334} -> (begin (V335 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V272, V274, V334, V271))), V335 end(V331)) end end end end; {'Prelude.Types.Nothing'} -> begin (V339 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"totality"/utf8>>, 50, fun () -> (begin (V337 = fun (V336) -> V336 end), fun (V338) -> (V337(V338)) end end(<<"Lookup failed"/utf8>>)) end))), fun (V340) -> begin (V341 = (V339(V340))), case V341 of {'Prelude.Types.Left', V342} -> {'Prelude.Types.Left', V342}; {'Prelude.Types.Right', V343} -> (begin (V344 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V272, V274, 0, V271))), V344 end(V340)) end end end end end), V345 end(V325)) end end end end), V346 end(V288)) end end end end; _ -> begin (V348 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V347) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V347)) end, V271, []))), fun (V349) -> begin (V350 = (V348(V349))), case V350 of {'Prelude.Types.Left', V351} -> {'Prelude.Types.Left', V351}; {'Prelude.Types.Right', V352} -> (begin (V357 = fun (V353) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V354) -> fun (V355) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V354, V355)) end end, []}, fun (V356) -> V356 end, V352))} end), V357 end(V349)) end end end end end; _ -> begin (V359 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V358) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V358)) end, V271, []))), fun (V360) -> begin (V361 = (V359(V360))), case V361 of {'Prelude.Types.Left', V362} -> {'Prelude.Types.Left', V362}; {'Prelude.Types.Right', V363} -> (begin (V368 = fun (V364) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V365) -> fun (V366) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V365, V366)) end end, []}, fun (V367) -> V367 end, V363))} end), V368 end(V360)) end end end end end end end; _ -> case V13 of {'Builtin.MkPair', V369, V370} -> case V369 of {'Core.TT.Ref', V371, V372, V373} -> case V372 of {'Core.TT.Func'} -> begin (V386 = begin (V379 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V374) -> fun (V375) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V374, V375)) end end, fun (V376) -> fun (V377) -> fun (V378) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V376, V377, V378)) end end end}, V373))), fun (V380) -> begin (V381 = (V379(V380))), case V381 of {'Prelude.Types.Left', V382} -> {'Prelude.Types.Left', V382}; {'Prelude.Types.Right', V383} -> (begin (V385 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V6, <<"totality"/utf8>>, 50, fun (V384) -> {'Prelude.Types.Right', <<<<"Looking up type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V383))/binary>>} end))), V385 end(V380)) end end end end), fun (V387) -> begin (V388 = (V386(V387))), case V388 of {'Prelude.Types.Left', V389} -> {'Prelude.Types.Left', V389}; {'Prelude.Types.Right', V390} -> (begin (V445 = begin (V423 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V373, case V5 of {'Core.Context.MkDefs', V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422} -> V391 end))), fun (V424) -> begin (V425 = (V423(V424))), case V425 of {'Prelude.Types.Left', V426} -> {'Prelude.Types.Left', V426}; {'Prelude.Types.Right', V427} -> (begin (V444 = case V427 of {'Prelude.Types.Just', V428} -> begin (V429 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Core.Env.Nil'}, V428))), fun (V430) -> begin (V431 = (V429(V430))), case V431 of {'Prelude.Types.Left', V432} -> {'Prelude.Types.Left', V432}; {'Prelude.Types.Right', V433} -> (begin (V434 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V371, V373, V433, V370))), V434 end(V430)) end end end end; {'Prelude.Types.Nothing'} -> begin (V438 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"totality"/utf8>>, 50, fun () -> (begin (V436 = fun (V435) -> V435 end), fun (V437) -> (V436(V437)) end end(<<"Lookup failed"/utf8>>)) end))), fun (V439) -> begin (V440 = (V438(V439))), case V440 of {'Prelude.Types.Left', V441} -> {'Prelude.Types.Left', V441}; {'Prelude.Types.Right', V442} -> (begin (V443 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V371, V373, 0, V370))), V443 end(V439)) end end end end end), V444 end(V424)) end end end end), V445 end(V387)) end end end end; _ -> begin (V447 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V446) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V446)) end, V370, []))), fun (V448) -> begin (V449 = (V447(V448))), case V449 of {'Prelude.Types.Left', V450} -> {'Prelude.Types.Left', V450}; {'Prelude.Types.Right', V451} -> (begin (V456 = fun (V452) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V453) -> fun (V454) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V453, V454)) end end, []}, fun (V455) -> V455 end, V451))} end), V456 end(V448)) end end end end end; _ -> begin (V458 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V457) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V457)) end, V370, []))), fun (V459) -> begin (V460 = (V458(V459))), case V460 of {'Prelude.Types.Left', V461} -> {'Prelude.Types.Left', V461}; {'Prelude.Types.Right', V462} -> (begin (V467 = fun (V463) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V464) -> fun (V465) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V464, V465)) end end, []}, fun (V466) -> V466 end, V462))} end), V467 end(V459)) end end end end end end end; 0 -> case V13 of {'Builtin.MkPair', V468, V469} -> case V468 of {'Core.TT.Ref', V470, V471, V472} -> case V471 of {'Core.TT.DataCon', V473, V474} -> begin (V476 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V475) -> ('un--findSC'(V0, V6, V5, V4, 2, V2, V475)) end, V469, []))), fun (V477) -> begin (V478 = (V476(V477))), case V478 of {'Prelude.Types.Left', V479} -> {'Prelude.Types.Left', V479}; {'Prelude.Types.Right', V480} -> (begin (V485 = fun (V481) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V482) -> fun (V483) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V482, V483)) end end, []}, fun (V484) -> V484 end, V480))} end), V485 end(V477)) end end end end; _ -> case V13 of {'Builtin.MkPair', V486, V487} -> case V486 of {'Core.TT.Ref', V488, V489, V490} -> case V489 of {'Core.TT.Func'} -> begin (V503 = begin (V496 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V491) -> fun (V492) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V491, V492)) end end, fun (V493) -> fun (V494) -> fun (V495) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V493, V494, V495)) end end end}, V490))), fun (V497) -> begin (V498 = (V496(V497))), case V498 of {'Prelude.Types.Left', V499} -> {'Prelude.Types.Left', V499}; {'Prelude.Types.Right', V500} -> (begin (V502 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V6, <<"totality"/utf8>>, 50, fun (V501) -> {'Prelude.Types.Right', <<<<"Looking up type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V500))/binary>>} end))), V502 end(V497)) end end end end), fun (V504) -> begin (V505 = (V503(V504))), case V505 of {'Prelude.Types.Left', V506} -> {'Prelude.Types.Left', V506}; {'Prelude.Types.Right', V507} -> (begin (V562 = begin (V540 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V490, case V5 of {'Core.Context.MkDefs', V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531, V532, V533, V534, V535, V536, V537, V538, V539} -> V508 end))), fun (V541) -> begin (V542 = (V540(V541))), case V542 of {'Prelude.Types.Left', V543} -> {'Prelude.Types.Left', V543}; {'Prelude.Types.Right', V544} -> (begin (V561 = case V544 of {'Prelude.Types.Just', V545} -> begin (V546 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Core.Env.Nil'}, V545))), fun (V547) -> begin (V548 = (V546(V547))), case V548 of {'Prelude.Types.Left', V549} -> {'Prelude.Types.Left', V549}; {'Prelude.Types.Right', V550} -> (begin (V551 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V488, V490, V550, V487))), V551 end(V547)) end end end end; {'Prelude.Types.Nothing'} -> begin (V555 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"totality"/utf8>>, 50, fun () -> (begin (V553 = fun (V552) -> V552 end), fun (V554) -> (V553(V554)) end end(<<"Lookup failed"/utf8>>)) end))), fun (V556) -> begin (V557 = (V555(V556))), case V557 of {'Prelude.Types.Left', V558} -> {'Prelude.Types.Left', V558}; {'Prelude.Types.Right', V559} -> (begin (V560 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V488, V490, 0, V487))), V560 end(V556)) end end end end end), V561 end(V541)) end end end end), V562 end(V504)) end end end end; _ -> begin (V564 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V563) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V563)) end, V487, []))), fun (V565) -> begin (V566 = (V564(V565))), case V566 of {'Prelude.Types.Left', V567} -> {'Prelude.Types.Left', V567}; {'Prelude.Types.Right', V568} -> (begin (V573 = fun (V569) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V570) -> fun (V571) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V570, V571)) end end, []}, fun (V572) -> V572 end, V568))} end), V573 end(V565)) end end end end end; _ -> begin (V575 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V574) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V574)) end, V487, []))), fun (V576) -> begin (V577 = (V575(V576))), case V577 of {'Prelude.Types.Left', V578} -> {'Prelude.Types.Left', V578}; {'Prelude.Types.Right', V579} -> (begin (V584 = fun (V580) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V581) -> fun (V582) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V581, V582)) end end, []}, fun (V583) -> V583 end, V579))} end), V584 end(V576)) end end end end end end end; _ -> case V13 of {'Builtin.MkPair', V585, V586} -> case V585 of {'Core.TT.Ref', V587, V588, V589} -> case V588 of {'Core.TT.Func'} -> begin (V602 = begin (V595 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V590) -> fun (V591) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V590, V591)) end end, fun (V592) -> fun (V593) -> fun (V594) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V592, V593, V594)) end end end}, V589))), fun (V596) -> begin (V597 = (V595(V596))), case V597 of {'Prelude.Types.Left', V598} -> {'Prelude.Types.Left', V598}; {'Prelude.Types.Right', V599} -> (begin (V601 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V6, <<"totality"/utf8>>, 50, fun (V600) -> {'Prelude.Types.Right', <<<<"Looking up type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V599))/binary>>} end))), V601 end(V596)) end end end end), fun (V603) -> begin (V604 = (V602(V603))), case V604 of {'Prelude.Types.Left', V605} -> {'Prelude.Types.Left', V605}; {'Prelude.Types.Right', V606} -> (begin (V661 = begin (V639 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V589, case V5 of {'Core.Context.MkDefs', V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, V638} -> V607 end))), fun (V640) -> begin (V641 = (V639(V640))), case V641 of {'Prelude.Types.Left', V642} -> {'Prelude.Types.Left', V642}; {'Prelude.Types.Right', V643} -> (begin (V660 = case V643 of {'Prelude.Types.Just', V644} -> begin (V645 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Core.Env.Nil'}, V644))), fun (V646) -> begin (V647 = (V645(V646))), case V647 of {'Prelude.Types.Left', V648} -> {'Prelude.Types.Left', V648}; {'Prelude.Types.Right', V649} -> (begin (V650 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V587, V589, V649, V586))), V650 end(V646)) end end end end; {'Prelude.Types.Nothing'} -> begin (V654 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"totality"/utf8>>, 50, fun () -> (begin (V652 = fun (V651) -> V651 end), fun (V653) -> (V652(V653)) end end(<<"Lookup failed"/utf8>>)) end))), fun (V655) -> begin (V656 = (V654(V655))), case V656 of {'Prelude.Types.Left', V657} -> {'Prelude.Types.Left', V657}; {'Prelude.Types.Right', V658} -> (begin (V659 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V587, V589, 0, V586))), V659 end(V655)) end end end end end), V660 end(V640)) end end end end), V661 end(V603)) end end end end; _ -> begin (V663 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V662) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V662)) end, V586, []))), fun (V664) -> begin (V665 = (V663(V664))), case V665 of {'Prelude.Types.Left', V666} -> {'Prelude.Types.Left', V666}; {'Prelude.Types.Right', V667} -> (begin (V672 = fun (V668) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V669) -> fun (V670) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V669, V670)) end end, []}, fun (V671) -> V671 end, V667))} end), V672 end(V664)) end end end end end; _ -> begin (V674 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V673) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V673)) end, V586, []))), fun (V675) -> begin (V676 = (V674(V675))), case V676 of {'Prelude.Types.Left', V677} -> {'Prelude.Types.Left', V677}; {'Prelude.Types.Right', V678} -> (begin (V683 = fun (V679) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V680) -> fun (V681) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V680, V681)) end end, []}, fun (V682) -> V682 end, V678))} end), V683 end(V675)) end end end end end end end; _ -> case V13 of {'Builtin.MkPair', V684, V685} -> case V684 of {'Core.TT.Ref', V686, V687, V688} -> case V687 of {'Core.TT.Func'} -> begin (V701 = begin (V694 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V689) -> fun (V690) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V689, V690)) end end, fun (V691) -> fun (V692) -> fun (V693) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V691, V692, V693)) end end end}, V688))), fun (V695) -> begin (V696 = (V694(V695))), case V696 of {'Prelude.Types.Left', V697} -> {'Prelude.Types.Left', V697}; {'Prelude.Types.Right', V698} -> (begin (V700 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V6, <<"totality"/utf8>>, 50, fun (V699) -> {'Prelude.Types.Right', <<<<"Looking up type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V698))/binary>>} end))), V700 end(V695)) end end end end), fun (V702) -> begin (V703 = (V701(V702))), case V703 of {'Prelude.Types.Left', V704} -> {'Prelude.Types.Left', V704}; {'Prelude.Types.Right', V705} -> (begin (V760 = begin (V738 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V688, case V5 of {'Core.Context.MkDefs', V706, V707, V708, V709, V710, V711, V712, V713, V714, V715, V716, V717, V718, V719, V720, V721, V722, V723, V724, V725, V726, V727, V728, V729, V730, V731, V732, V733, V734, V735, V736, V737} -> V706 end))), fun (V739) -> begin (V740 = (V738(V739))), case V740 of {'Prelude.Types.Left', V741} -> {'Prelude.Types.Left', V741}; {'Prelude.Types.Right', V742} -> (begin (V759 = case V742 of {'Prelude.Types.Just', V743} -> begin (V744 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Core.Env.Nil'}, V743))), fun (V745) -> begin (V746 = (V744(V745))), case V746 of {'Prelude.Types.Left', V747} -> {'Prelude.Types.Left', V747}; {'Prelude.Types.Right', V748} -> (begin (V749 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V686, V688, V748, V685))), V749 end(V745)) end end end end; {'Prelude.Types.Nothing'} -> begin (V753 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"totality"/utf8>>, 50, fun () -> (begin (V751 = fun (V750) -> V750 end), fun (V752) -> (V751(V752)) end end(<<"Lookup failed"/utf8>>)) end))), fun (V754) -> begin (V755 = (V753(V754))), case V755 of {'Prelude.Types.Left', V756} -> {'Prelude.Types.Left', V756}; {'Prelude.Types.Right', V757} -> (begin (V758 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V686, V688, 0, V685))), V758 end(V754)) end end end end end), V759 end(V739)) end end end end), V760 end(V702)) end end end end; _ -> begin (V762 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V761) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V761)) end, V685, []))), fun (V763) -> begin (V764 = (V762(V763))), case V764 of {'Prelude.Types.Left', V765} -> {'Prelude.Types.Left', V765}; {'Prelude.Types.Right', V766} -> (begin (V771 = fun (V767) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V768) -> fun (V769) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V768, V769)) end end, []}, fun (V770) -> V770 end, V766))} end), V771 end(V763)) end end end end end; _ -> begin (V773 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V772) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V772)) end, V685, []))), fun (V774) -> begin (V775 = (V773(V774))), case V775 of {'Prelude.Types.Left', V776} -> {'Prelude.Types.Left', V776}; {'Prelude.Types.Right', V777} -> (begin (V782 = fun (V778) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V779) -> fun (V780) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V779, V780)) end end, []}, fun (V781) -> V781 end, V777))} end), V782 end(V774)) end end end end end end end; _ -> case V13 of {'Builtin.MkPair', V783, V784} -> case V783 of {'Core.TT.Ref', V785, V786, V787} -> case V786 of {'Core.TT.Func'} -> begin (V800 = begin (V793 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V788) -> fun (V789) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V788, V789)) end end, fun (V790) -> fun (V791) -> fun (V792) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V790, V791, V792)) end end end}, V787))), fun (V794) -> begin (V795 = (V793(V794))), case V795 of {'Prelude.Types.Left', V796} -> {'Prelude.Types.Left', V796}; {'Prelude.Types.Right', V797} -> (begin (V799 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V6, <<"totality"/utf8>>, 50, fun (V798) -> {'Prelude.Types.Right', <<<<"Looking up type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V797))/binary>>} end))), V799 end(V794)) end end end end), fun (V801) -> begin (V802 = (V800(V801))), case V802 of {'Prelude.Types.Left', V803} -> {'Prelude.Types.Left', V803}; {'Prelude.Types.Right', V804} -> (begin (V859 = begin (V837 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V787, case V5 of {'Core.Context.MkDefs', V805, V806, V807, V808, V809, V810, V811, V812, V813, V814, V815, V816, V817, V818, V819, V820, V821, V822, V823, V824, V825, V826, V827, V828, V829, V830, V831, V832, V833, V834, V835, V836} -> V805 end))), fun (V838) -> begin (V839 = (V837(V838))), case V839 of {'Prelude.Types.Left', V840} -> {'Prelude.Types.Left', V840}; {'Prelude.Types.Right', V841} -> (begin (V858 = case V841 of {'Prelude.Types.Just', V842} -> begin (V843 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Core.Env.Nil'}, V842))), fun (V844) -> begin (V845 = (V843(V844))), case V845 of {'Prelude.Types.Left', V846} -> {'Prelude.Types.Left', V846}; {'Prelude.Types.Right', V847} -> (begin (V848 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V785, V787, V847, V784))), V848 end(V844)) end end end end; {'Prelude.Types.Nothing'} -> begin (V852 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"totality"/utf8>>, 50, fun () -> (begin (V850 = fun (V849) -> V849 end), fun (V851) -> (V850(V851)) end end(<<"Lookup failed"/utf8>>)) end))), fun (V853) -> begin (V854 = (V852(V853))), case V854 of {'Prelude.Types.Left', V855} -> {'Prelude.Types.Left', V855}; {'Prelude.Types.Right', V856} -> (begin (V857 = ('un--findSCcall'(V0, V6, V5, V4, 1, V2, V785, V787, 0, V784))), V857 end(V853)) end end end end end), V858 end(V838)) end end end end), V859 end(V801)) end end end end; _ -> begin (V861 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V860) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V860)) end, V784, []))), fun (V862) -> begin (V863 = (V861(V862))), case V863 of {'Prelude.Types.Left', V864} -> {'Prelude.Types.Left', V864}; {'Prelude.Types.Right', V865} -> (begin (V870 = fun (V866) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V867) -> fun (V868) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V867, V868)) end end, []}, fun (V869) -> V869 end, V865))} end), V870 end(V862)) end end end end end; _ -> begin (V872 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V871) -> ('un--findSC'(V0, V6, V5, V4, 1, V2, V871)) end, V784, []))), fun (V873) -> begin (V874 = (V872(V873))), case V874 of {'Prelude.Types.Left', V875} -> {'Prelude.Types.Left', V875}; {'Prelude.Types.Right', V876} -> (begin (V881 = fun (V877) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V878) -> fun (V879) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V878, V879)) end end, []}, fun (V880) -> V880 end, V876))} end), V881 end(V873)) end end end end end end end end.
'case--findSC-9428'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> begin (V10 = ('nested--9337-9178--in--un--handleCase'(V0, V1, V2, V3, V4, V5, V6, V8, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V24 = case V14 of {'Prelude.Types.Nothing'} -> begin (V15 = ('nested--9337-9179--in--un--conIfGuarded'(V0, V1, V2, V3, V4, V5, V6, V8))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = begin (V20 = {'Prelude.Types.Nothing'}), ('case--case block in case block in findSC-9497'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V20, V19, {'Builtin.MkPair', V3, {'Builtin.MkPair', V19, V9}})) end), V21 end(V16)) end end end end; {'Prelude.Types.Just', V22} -> fun (V23) -> {'Prelude.Types.Right', V22} end end), V24 end(V11)) end end end end end.
'case--case block in totRefs-7691'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.TT.IsTerminating'} -> fun (V8) -> {'Prelude.Types.Right', V4} end; {'Core.TT.Unchecked'} -> begin (V20 = begin (V14 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Core.Context.dn--un--__mkHasNames', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V11, V12, V13)) end end end}, V0))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V19 = ('Idris.Idris2.Core.Context.Log':'un--log'(V3, <<"totality"/utf8>>, 20, fun () -> <<<<"Totality unchecked for "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18))/binary>> end))), V19 end(V15)) end end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V26 = fun (V25) -> {'Prelude.Types.Right', V4} end), V26 end(V21)) end end end end; _ -> case V4 of {'Core.TT.NotTerminating', V27} -> case V27 of {'Core.TT.BadCall', V28} -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Core.Context.dn--un--__mkHasNames', fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Terminating'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Terminating'(V31, V32)) end end}, {'Core.TT.NotTerminating', {'Core.TT.BadCall', [V0 | V28]}})); _ -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Core.Context.dn--un--__mkHasNames', fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Terminating'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Terminating'(V35, V36)) end end}, {'Core.TT.NotTerminating', {'Core.TT.BadCall', [V0 | []]}})) end; _ -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Core.Context.dn--un--__mkHasNames', fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Terminating'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Terminating'(V39, V40)) end end}, {'Core.TT.NotTerminating', {'Core.TT.BadCall', [V0 | []]}})) end end.
'nested--10945-10322--in--un--urhs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Core.TT.Local', V11, V12, V13} -> {'Core.TT.Erased', V11, {'Core.TT.Placeholder'}}; {'Core.TT.Ref', V14, V15, V16} -> {'Core.TT.Ref', V14, V15, V16}; {'Core.TT.Meta', V17, V18, V19, V20} -> {'Core.TT.Meta', V17, V18, V19, ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V21)) end))(V20))}; {'Core.TT.App', V29, V30, V31} -> {'Core.TT.App', V29, ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V30)), ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V31))}; {'Core.TT.As', V32, V33, V34, V35} -> {'Core.TT.As', V32, V33, ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V34)), ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V35))}; {'Core.TT.TDelayed', V36, V37, V38} -> {'Core.TT.TDelayed', V36, V37, ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V38))}; {'Core.TT.TDelay', V39, V40, V41, V42} -> {'Core.TT.TDelay', V39, V40, ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V41)), ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V42))}; {'Core.TT.TForce', V43, V44, V45} -> {'Core.TT.TForce', V43, V44, ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V45))}; {'Core.TT.Bind', V46, V47, V48, V49} -> {'Core.TT.Bind', V46, V47, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V50) -> ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V50)) end, V48)), ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, [V47 | V6], [V47 | V8], ((begin (V56 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V54, V55)) end end end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end(fun (V51) -> {'Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(('Idris.Idris2.Builtin':'un--fst'(V51)))), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(('Idris.Idris2.Builtin':'un--snd'(V51))))} end))(V9)), V49))}; {'Core.TT.PrimVal', V59, V60} -> {'Core.TT.PrimVal', V59, V60}; {'Core.TT.Erased', V61, V62} -> case V62 of {'Core.TT.Impossible'} -> {'Core.TT.Erased', V61, {'Core.TT.Impossible'}}; {'Core.TT.Placeholder'} -> {'Core.TT.Erased', V61, {'Core.TT.Placeholder'}}; {'Core.TT.Dotted', V63} -> {'Core.TT.Erased', V61, {'Core.TT.Dotted', ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V63))}} end; {'Core.TT.TType', V64, V65} -> {'Core.TT.TType', V64, V65} end.
'nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case ('nested--10945-10323--in--un--lookupTm'(V0, V1, V2, V3, V4, V5, V6, V9, V7, V8, V9, V8)) of {'Prelude.Types.Nothing'} -> ('nested--10945-10322--in--un--urhs'(V0, V1, V2, V3, V4, V5, V6, V9, V7, V8, V9)); {'Prelude.Types.Just', V10} -> V10 end.
'nested--9445-10302--in--un--updatePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> {'Builtin.MkPair', V10, ('nested--9445-10301--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11))} end.
'nested--12481-11734--in--un--updateArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of 2 -> V8; _ -> case V7 of 2 -> case V8 of {'Prelude.Types.Just', V12} -> case V12 of {'Builtin.MkPair', V13, V14} -> {'Prelude.Types.Just', {'Builtin.MkPair', V13, 2}}; _ -> case V8 of {'Prelude.Types.Just', V15} -> case V15 of {'Builtin.MkPair', V16, V17} -> case V17 of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V16, V7}}; _ -> V8 end; _ -> V8 end; _ -> V8 end end; _ -> case V8 of {'Prelude.Types.Just', V18} -> case V18 of {'Builtin.MkPair', V19, V20} -> case V20 of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V19, V7}}; _ -> V8 end; _ -> V8 end; _ -> V8 end end; _ -> case V8 of {'Prelude.Types.Just', V21} -> case V21 of {'Builtin.MkPair', V22, V23} -> case V23 of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V22, V7}}; _ -> V8 end; _ -> V8 end; _ -> V8 end end end; _ -> case V7 of 2 -> case V8 of {'Prelude.Types.Just', V24} -> case V24 of {'Builtin.MkPair', V25, V26} -> {'Prelude.Types.Just', {'Builtin.MkPair', V25, 2}}; _ -> case V8 of {'Prelude.Types.Just', V27} -> case V27 of {'Builtin.MkPair', V28, V29} -> case V29 of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V28, V7}}; _ -> V8 end; _ -> V8 end; _ -> V8 end end; _ -> case V8 of {'Prelude.Types.Just', V30} -> case V30 of {'Builtin.MkPair', V31, V32} -> case V32 of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V31, V7}}; _ -> V8 end; _ -> V8 end; _ -> V8 end end; _ -> case V8 of {'Prelude.Types.Just', V33} -> case V33 of {'Builtin.MkPair', V34, V35} -> case V35 of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V34, V7}}; _ -> V8 end; _ -> V8 end; _ -> V8 end end end; _ -> case V7 of 2 -> case V8 of {'Prelude.Types.Just', V36} -> case V36 of {'Builtin.MkPair', V37, V38} -> {'Prelude.Types.Just', {'Builtin.MkPair', V37, 2}}; _ -> case V8 of {'Prelude.Types.Just', V39} -> case V39 of {'Builtin.MkPair', V40, V41} -> case V41 of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V40, V7}}; _ -> V8 end; _ -> V8 end; _ -> V8 end end; _ -> case V8 of {'Prelude.Types.Just', V42} -> case V42 of {'Builtin.MkPair', V43, V44} -> case V44 of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V43, V7}}; _ -> V8 end; _ -> V8 end; _ -> V8 end end; _ -> case V8 of {'Prelude.Types.Just', V45} -> case V45 of {'Builtin.MkPair', V46, V47} -> case V47 of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V46, V7}}; _ -> V8 end; _ -> V8 end; _ -> V8 end end end.
'nested--14350-13546--in--un--splitParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> {'Builtin.MkPair', [], []}; [E0 | E1] -> (fun (V12, V13) -> begin (V14 = {'Core.Value.NTCon', V4, V3, V0, V1, V2}), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V30, V31, V32, V33)) end end end end end end end, fun (V34) -> fun (V35) -> V35 end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V38, V39, V40)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V41) -> fun (V42) -> case (V41 =:= V42) of 'false' -> 0; _ -> 1 end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V43, V44)) end end}, V9, V10)) of 1 -> case ('nested--14350-13546--in--un--splitParams'(V0, V1, V2, V3, V4, V14, V6, V7, V8, (V9 + 1), V10, V13)) of {'Builtin.MkPair', V45, V46} -> {'Builtin.MkPair', [V12 | V45], V46} end; 0 -> case ('nested--14350-13546--in--un--splitParams'(V0, V1, V2, V3, V4, V14, V6, V7, V8, (V9 + 1), V10, V13)) of {'Builtin.MkPair', V47, V48} -> {'Builtin.MkPair', V47, [V12 | V48]} end end end end(E0, E1)) end.
'nested--12481-11735--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> []; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Prelude.Types.Nothing'} -> [{'Prelude.Types.Nothing'} | ('nested--12481-11735--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V9))]; {'Prelude.Types.Just', V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> case ('nested--12481-11733--in--un--getPos'(V0, V1, V2, V3, V4, V5, V6, V1, V11)) of {'Prelude.Types.Nothing'} -> [{'Prelude.Types.Nothing'} | ('nested--12481-11735--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V9))]; {'Prelude.Types.Just', V13} -> [('nested--12481-11734--in--un--updateArg'(V0, V1, V2, V3, V4, V5, V6, V12, V13)) | ('nested--12481-11735--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V9))] end end end end(E0, E1)) end.
'nested--9445-10303--in--un--matchArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.DPair.MkDPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> begin (V13 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V1, ('Idris.Idris2.Core.TT':'un--getArgs'(V11))))))), {'Builtin.DPair.MkDPair', V7, {'Builtin.MkPair', V9, {'Builtin.MkPair', ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> ('nested--9445-10302--in--un--updatePat'(V0, V1, V2, V3, V4, V5, V0, V7, V13, V14)) end))(V2)), V12}}} end end end end.
'nested--10945-10323--in--un--lookupTm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> {'Prelude.Types.Nothing'}; _ -> case V10 of {'Core.TT.As', V12, V13, V14, V15} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--10945-10323--in--un--lookupTm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V15, V11)), fun (V16) -> {'Prelude.Types.Just', {'Core.TT.As', V12, V13, V16, ('nested--10945-10322--in--un--urhs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V15))}} end)); _ -> case V11 of [E0 | E1] -> (fun (V17, V18) -> case V17 of {'Builtin.MkPair', V19, V20} -> case V19 of {'Core.TT.As', V21, V22, V23, V24} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'(V10, V23)) of 1 -> {'Prelude.Types.Just', V20}; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--10945-10323--in--un--lookupTm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [{'Builtin.MkPair', V24, V20} | V18])), fun (V25) -> {'Prelude.Types.Just', {'Core.TT.As', V21, V22, ('nested--10945-10322--in--un--urhs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V23)), V25}} end)) end; _ -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'(V10, V19)) of 1 -> {'Prelude.Types.Just', V20}; 0 -> ('nested--10945-10323--in--un--lookupTm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V18)) end end end end(E0, E1)) end end end.
'nested--9337-9178--in--un--handleCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Core.TT.Ref', V9, V10, V11} -> begin (V17 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V14, V15, V16)) end end end}, V11))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V42 = case ('un--caseFn'(V21)) of 1 -> begin (V22 = ('un--findSCcall'(V0, V6, V5, V4, V3, V2, V9, V11, 4, V8))), ((begin (V38 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end((begin (V30 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> {'Prelude.Types.Right', (V26(V29))} end end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V23) -> {'Prelude.Types.Just', V23} end))))(V22)) end; 0 -> fun (V41) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V42 end(V18)) end end end end; _ -> fun (V43) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'nested--8241-7873--in--un--guardedNF'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.Value.NDCon', V7, V8, V9, V10, V11} -> fun (V12) -> {'Prelude.Types.Right', 1} end; {'Core.Value.NApp', V13, V14, V15} -> case V14 of {'Core.Value.NRef', V16, V17} -> begin (V50 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V17, case V4 of {'Core.Context.MkDefs', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} -> V18 end))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V109 = fun (V55) -> case V54 of {'Prelude.Types.Just', V56} -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V68)) end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V72, V73, V74, V75)) end end end end end end end, fun (V76) -> fun (V77) -> V77 end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V80, V81, V82)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V85, V86)) end end}, {'Core.Context.Context.AllGuarded'}, case V56 of {'Core.Context.Context.MkGlobalDef', V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108} -> V98 end))}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', 0} end end), V109 end(V51)) end end end end; _ -> fun (V110) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V111) -> {'Prelude.Types.Right', 0} end end.
'nested--8241-7875--in--un--guarded'(V0, V1, V2, V3, V4, V5) -> begin (V11 = begin (V6 = V2), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V77 = begin (V17 = fun (V16) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V15, V16)) end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V76 = begin (V22 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V2, V3, V21, V4, V5))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V75 = begin (V27 = ('nested--8241-7873--in--un--guardedNF'(V0, V1, V2, V3, V15, V4, V26))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V74 = case V31 of 1 -> begin (V64 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V0, case V15 of {'Core.Context.MkDefs', V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63} -> V32 end))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V72 = case V68 of {'Prelude.Types.Just', V69} -> ('Idris.Idris2.Core.Core':'un--allM'(fun (V70) -> ('nested--8241-7874--in--un--checkNotFn'(V0, V1, V2, V15, V70)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.Context.Context':'un--refersTo'(V69)))))); {'Prelude.Types.Nothing'} -> fun (V71) -> {'Prelude.Types.Right', 0} end end), V72 end(V65)) end end end end; 0 -> fun (V73) -> {'Prelude.Types.Right', 0} end end), V74 end(V28)) end end end end), V75 end(V23)) end end end end), V76 end(V18)) end end end end), V77 end(V12)) end end end end.
'nested--12481-11737--in--un--getWorst'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> V7; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Core.TT.IsTerminating'} -> ('nested--12481-11737--in--un--getWorst'(V0, V1, V2, V3, V4, V5, V6, V7, V10)); {'Core.TT.Unchecked'} -> ('nested--12481-11737--in--un--getWorst'(V0, V1, V2, V3, V4, V5, V6, {'Core.TT.Unchecked'}, V10)); _ -> V9 end end(E0, E1)) end.
'nested--12481-11733--in--un--getPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V9, V10) -> case V8 of 0 -> {'Prelude.Types.Just', V9}; _ -> begin (V11 = (V8 - 1)), ('nested--12481-11733--in--un--getPos'(V0, V1, V2, V3, V4, V5, V6, V10, V11)) end end end(E0, E1)) end.
'nested--9337-9064--in--un--findSCbinder'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Core.TT.Let', V11, V12, V13, V14} -> ('un--findSC'(V1, V9, V8, V7, V6, V5, V13)); _ -> fun (V15) -> {'Prelude.Types.Right', []} end end.
'nested--12481-11738--in--un--continue'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> ('nested--12481-11736--in--un--checkCall'(V0, V1, V2, V3, V4, V5, V6, V8, V9)) end, V7, []))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', ('nested--12481-11737--in--un--getWorst'(V0, V1, V2, V3, V4, V5, V6, {'Core.TT.IsTerminating'}, V14))} end), V16 end(V11)) end end end end.
'nested--9337-9179--in--un--conIfGuarded'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.TT.Ref', V8, V9, V10} -> case V9 of {'Core.TT.Func'} -> begin (V16 = begin (V11 = V6), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V113 = begin (V53 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V10, case V20 of {'Core.Context.MkDefs', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} -> V21 end))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V112 = fun (V58) -> case V57 of {'Prelude.Types.Just', V59} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V62, V63, V64)) end end end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V67, V68, V69)) end end end end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V71)) end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V75, V76, V77, V78)) end end end end end end end, fun (V79) -> fun (V80) -> V80 end end, fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V83, V84, V85)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V88, V89)) end end}, {'Core.Context.Context.AllGuarded'}, case V59 of {'Core.Context.Context.MkGlobalDef', V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111} -> V101 end)) of 1 -> {'Prelude.Types.Right', {'Core.TT.Ref', V8, {'Core.TT.DataCon', 0, 0}, V10}}; 0 -> {'Prelude.Types.Right', {'Core.TT.Ref', V8, {'Core.TT.Func'}, V10}} end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Core.TT.Ref', V8, {'Core.TT.Func'}, V10}} end end), V112 end(V54)) end end end end), V113 end(V17)) end end end end; _ -> fun (V114) -> {'Prelude.Types.Right', V7} end end; _ -> fun (V115) -> {'Prelude.Types.Right', V7} end end.
'nested--8241-7874--in--un--checkNotFn'(V0, V1, V2, V3, V4) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V3 of {'Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} -> V5 end))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V148 = case V41 of {'Prelude.Types.Just', V42} -> fun (V43) -> case V42 of {'Core.Context.Context.MkGlobalDef', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} -> case V61 of {'Core.Context.Context.DCon', V66, V67, V68} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(case V42 of {'Core.Context.Context.MkGlobalDef', V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90} -> V76 end, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V91) -> fun (V92) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V91, V92)) end end, 0, fun (V93) -> fun (V94) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V93, V94)) end end, 1})))) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V97, V98, V99)) end end end end end, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V102, V103, V104)) end end end end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V106)) end end, fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V110, V111, V112, V113)) end end end end end end end, fun (V114) -> fun (V115) -> V115 end end, fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V118, V119, V120)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V121, V122)) end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V123, V124)) end end}, {'Core.Context.Context.AllGuarded'}, case V42 of {'Core.Context.Context.MkGlobalDef', V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146} -> V136 end)) end} end end end; {'Prelude.Types.Nothing'} -> fun (V147) -> {'Prelude.Types.Right', 0} end end), V148 end(V38)) end end end end.
'nested--12481-11732--in--un--checkDesc'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> {'Core.TT.NotTerminating', {'Core.TT.RecPath', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> ('Idris.Idris2.Builtin':'un--fst'(V9)) end))(V8))))}}; [E0 | E1] -> (fun (V17, V18) -> case V17 of 0 -> {'Core.TT.IsTerminating'}; _ -> ('nested--12481-11732--in--un--checkDesc'(V0, V1, V2, V3, V4, V5, V6, V18, V8)) end end(E0, E1)) end.
'nested--12481-11736--in--un--checkCall'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V43 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(case V8 of {'Core.Context.Context.MkSCCall', V9, V10} -> V9 end, case V3 of {'Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> V11 end))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V272 = case V47 of {'Prelude.Types.Just', V48} -> case V48 of {'Core.Context.Context.MkGlobalDef', V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70} -> case V59 of {'Core.TT.MkTotality', V71, V72} -> case V71 of {'Core.TT.Unchecked'} -> begin (V86 = begin (V80 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V5, {'Core.Context.dn--un--__mkHasNames', fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V73, V74)) end end, fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V75, V76, V77)) end end end}, case V8 of {'Core.Context.Context.MkSCCall', V78, V79} -> V78 end))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V85 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"totality.termination.sizechange.checkCall"/utf8>>, 8, fun () -> <<<<"CheckCall Size Change Graph: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V84))/binary>> end))), V85 end(V81)) end end end end), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V266 = begin (V95 = ('un--checkSC'(V6, V5, V4, V3, case V8 of {'Core.Context.Context.MkSCCall', V91, V92} -> V91 end, ('nested--12481-11735--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, case V8 of {'Core.Context.Context.MkSCCall', V93, V94} -> V94 end)), V7))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V265 = begin (V140 = ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V102, V103, V104)) end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V107, V108, V109)) end end end end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V111)) end end, fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V115, V116, V117, V118)) end end end end end end end, fun (V119) -> fun (V120) -> V120 end end, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V123, V124, V125)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V128, V129)) end end}, case V8 of {'Core.Context.Context.MkSCCall', V130, V131} -> V130 end, ((begin (V137 = fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V135, V136)) end end end end), fun (V138) -> fun (V139) -> ((((V137('erased'))('erased'))(V138))(V139)) end end end(fun (V132) -> ('Idris.Idris2.Builtin':'un--fst'(V132)) end))(V7))))), case V140 of 1 -> begin (V154 = begin (V148 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V5, {'Core.Context.dn--un--__mkHasNames', fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V141, V142)) end end, fun (V143) -> fun (V144) -> fun (V145) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V143, V144, V145)) end end end}, case V8 of {'Core.Context.Context.MkSCCall', V146, V147} -> V146 end))), fun (V149) -> begin (V150 = (V148(V149))), case V150 of {'Prelude.Types.Left', V151} -> {'Prelude.Types.Left', V151}; {'Prelude.Types.Right', V152} -> (begin (V153 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"totality.termination.sizechange.checkCall.inPath"/utf8>>, 9, fun () -> <<<<"Have Result: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V152))/binary>> end))), V153 end(V149)) end end end end), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V160 = fun (V159) -> {'Prelude.Types.Right', V99} end), V160 end(V155)) end end end end; 0 -> case V99 of {'Core.TT.NotTerminating', V161} -> case V161 of {'Core.TT.RecPath', V162} -> begin (V182 = begin (V170 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V5, {'Core.Context.dn--un--__mkHasNames', fun (V163) -> fun (V164) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V163, V164)) end end, fun (V165) -> fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V165, V166, V167)) end end end}, case V8 of {'Core.Context.Context.MkSCCall', V168, V169} -> V168 end))), fun (V171) -> begin (V172 = (V170(V171))), case V172 of {'Prelude.Types.Left', V173} -> {'Prelude.Types.Left', V173}; {'Prelude.Types.Right', V174} -> (begin (V181 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, (begin (V176 = fun (V175) -> V175 end), fun (V177) -> (V176(V177)) end end(<<"totality.termination.sizechange.checkCall.inPathNot.restart"/utf8>>)), 9, fun () -> <<(begin (V179 = fun (V178) -> V178 end), fun (V180) -> (V179(V180)) end end(<<"ReChecking Size Change Graph: "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V174))/binary>> end))), V181 end(V171)) end end end end), fun (V183) -> begin (V184 = (V182(V183))), case V184 of {'Prelude.Types.Left', V185} -> {'Prelude.Types.Left', V185}; {'Prelude.Types.Right', V186} -> (begin (V212 = begin (V189 = ('un--initArgs'(V6, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(case V8 of {'Core.Context.Context.MkSCCall', V187, V188} -> V188 end))))), fun (V190) -> begin (V191 = (V189(V190))), case V191 of {'Prelude.Types.Left', V192} -> {'Prelude.Types.Left', V192}; {'Prelude.Types.Right', V193} -> (begin (V211 = begin (V196 = ('un--checkSC'(V6, V5, V4, V3, case V8 of {'Core.Context.Context.MkSCCall', V194, V195} -> V194 end, V193, V7))), fun (V197) -> begin (V198 = (V196(V197))), case V198 of {'Prelude.Types.Left', V199} -> {'Prelude.Types.Left', V199}; {'Prelude.Types.Right', V200} -> (begin (V210 = begin (V203 = ('Idris.Idris2.Core.Context':'un--setTerminating'(V5, ('Idris.Idris2.Core.FC':'un--emptyFC'()), case V8 of {'Core.Context.Context.MkSCCall', V201, V202} -> V201 end, V200))), fun (V204) -> begin (V205 = (V203(V204))), case V205 of {'Prelude.Types.Left', V206} -> {'Prelude.Types.Left', V206}; {'Prelude.Types.Right', V207} -> (begin (V209 = fun (V208) -> {'Prelude.Types.Right', V200} end), V209 end(V204)) end end end end), V210 end(V197)) end end end end), V211 end(V190)) end end end end), V212 end(V183)) end end end end; _ -> begin (V232 = begin (V220 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V5, {'Core.Context.dn--un--__mkHasNames', fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V213, V214)) end end, fun (V215) -> fun (V216) -> fun (V217) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V215, V216, V217)) end end end}, case V8 of {'Core.Context.Context.MkSCCall', V218, V219} -> V218 end))), fun (V221) -> begin (V222 = (V220(V221))), case V222 of {'Prelude.Types.Left', V223} -> {'Prelude.Types.Left', V223}; {'Prelude.Types.Right', V224} -> (begin (V231 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, (begin (V226 = fun (V225) -> V225 end), fun (V227) -> (V226(V227)) end end(<<"totality.termination.sizechange.checkCall.inPathNot.return"/utf8>>)), 9, fun () -> <<(begin (V229 = fun (V228) -> V228 end), fun (V230) -> (V229(V230)) end end(<<"Have result: "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V224))/binary>> end))), V231 end(V221)) end end end end), fun (V233) -> begin (V234 = (V232(V233))), case V234 of {'Prelude.Types.Left', V235} -> {'Prelude.Types.Left', V235}; {'Prelude.Types.Right', V236} -> (begin (V238 = fun (V237) -> {'Prelude.Types.Right', V99} end), V238 end(V233)) end end end end end; _ -> begin (V258 = begin (V246 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V5, {'Core.Context.dn--un--__mkHasNames', fun (V239) -> fun (V240) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V239, V240)) end end, fun (V241) -> fun (V242) -> fun (V243) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V241, V242, V243)) end end end}, case V8 of {'Core.Context.Context.MkSCCall', V244, V245} -> V244 end))), fun (V247) -> begin (V248 = (V246(V247))), case V248 of {'Prelude.Types.Left', V249} -> {'Prelude.Types.Left', V249}; {'Prelude.Types.Right', V250} -> (begin (V257 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, (begin (V252 = fun (V251) -> V251 end), fun (V253) -> (V252(V253)) end end(<<"totality.termination.sizechange.checkCall.inPathNot.return"/utf8>>)), 9, fun () -> <<(begin (V255 = fun (V254) -> V254 end), fun (V256) -> (V255(V256)) end end(<<"Have result: "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V250))/binary>> end))), V257 end(V247)) end end end end), fun (V259) -> begin (V260 = (V258(V259))), case V260 of {'Prelude.Types.Left', V261} -> {'Prelude.Types.Left', V261}; {'Prelude.Types.Right', V262} -> (begin (V264 = fun (V263) -> {'Prelude.Types.Right', V99} end), V264 end(V259)) end end end end end end end), V265 end(V96)) end end end end), V266 end(V87)) end end end end; {'Core.TT.IsTerminating'} -> fun (V267) -> {'Prelude.Types.Right', {'Core.TT.IsTerminating'}} end; _ -> fun (V268) -> {'Prelude.Types.Right', {'Core.TT.NotTerminating', {'Core.TT.BadCall', [case V8 of {'Core.Context.Context.MkSCCall', V269, V270} -> V269 end | []]}}} end end end end; {'Prelude.Types.Nothing'} -> fun (V271) -> {'Prelude.Types.Right', {'Core.TT.IsTerminating'}} end end), V272 end(V44)) end end end end.
'nested--8241-7876--in--un--allGuarded'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Builtin.DPair.MkDPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> begin (V13 = ('nested--8241-7875--in--un--guarded'(V0, V1, V2, V7, V9, V12))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = case V17 of 1 -> ('nested--8241-7876--in--un--allGuarded'(V0, V1, V2, V6)); 0 -> fun (V18) -> {'Prelude.Types.Right', 0} end end), V19 end(V14)) end end end end end end end end(E0, E1)) end.
'nested--13603-12750--in--un--addCases\x{27}'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V4))} end; [E0 | E1] -> (fun (V7, V8) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V7, V4)) of {'Prelude.Types.Just', V9} -> ('nested--13603-12750--in--un--addCases\x{27}'(V0, V1, V2, V3, V4, V8)); {'Prelude.Types.Nothing'} -> begin (V10 = ('Idris.Idris2.Core.Context':'un--getFullName'(V2, V7))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V54 = case ('un--caseFn'(V14)) of 1 -> begin (V47 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V7, case V3 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> V15 end))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V53 = case V51 of {'Prelude.Types.Just', V52} -> ('nested--13603-12750--in--un--addCases\x{27}'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V7, {'Builtin.MkUnit'}, V4)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.Context.Context':'un--refersTo'(V52)))), V8)))); {'Prelude.Types.Nothing'} -> ('nested--13603-12750--in--un--addCases\x{27}'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V7, {'Builtin.MkUnit'}, V4)), V8)) end), V53 end(V48)) end end end end; 0 -> ('nested--13603-12750--in--un--addCases\x{27}'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V7, {'Builtin.MkUnit'}, V4)), V8)) end), V54 end(V11)) end end end end end end(E0, E1)) end.
'nested--13603-12751--in--un--addCases'(V0, V1, V2, V3, V4) -> ('nested--13603-12750--in--un--addCases\x{27}'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V4)).
'un--totRefsIn'(V0, V1, V2) -> ('un--totRefs'(V0, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getRefs'({'Core.Name.Resolved', -1}, V2)))))).
'un--totRefs'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Prelude.Types.Right', {'Core.TT.IsTerminating'}} end; [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ('un--totRefs'(V0, V1, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V76 = begin (V43 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V1 of {'Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> V11 end))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V75 = case V47 of {'Prelude.Types.Just', V48} -> begin (V49 = {'Prelude.Types.Just', V48}), ('case--case block in totRefs-7691'(V4, V5, V1, V0, V10, V48, V49, case V48 of {'Core.Context.Context.MkGlobalDef', V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71} -> case V60 of {'Core.TT.MkTotality', V72, V73} -> V72 end end)) end; {'Prelude.Types.Nothing'} -> fun (V74) -> {'Prelude.Types.Right', V10} end end), V75 end(V44)) end end end end), V76 end(V7)) end end end end end(E0, E1)) end.
'un--smallerArg'(V0, V1, V2, V3, V4) -> case V3 of {'Core.TT.As', V5, V6, V7, V8} -> ('un--smallerArg'(V0, V1, V2, V8, V4)); _ -> case ('un--assertedSmaller'(V2, V4)) of 1 -> 1; 0 -> (('case--smallerArg-10039'(V4, V3, V2, V1, V0, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V4))))()) end end.
'un--smaller'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Erased', V5, V6} -> 0; {'Core.TT.As', V7, V8, V9, V10} -> case ('un--smaller'(V0, V1, V2, V3, V9)) of 1 -> 1; 0 -> ('un--smaller'(V0, V1, V2, V3, V10)) end; _ -> case V0 of 1 -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'(V3, V4)) of 1 -> 1; 0 -> ('un--smallerArg'(1, V1, V2, V3, V4)) end; _ -> ('un--smallerArg'(V0, V1, V2, V3, V4)) end end.
'un--scEq'(V0, V1) -> case V0 of {'Core.TT.Local', V2, V3, V4} -> case V1 of {'Core.TT.Local', V5, V6, V7} -> case (V4 =:= V7) of 'false' -> 0; _ -> 1 end; _ -> case V1 of {'Core.TT.Meta', V8, V9, V10, V11} -> 1; _ -> case V0 of {'Core.TT.Bind', V12, V13, V14, V15} -> case V1 of {'Core.TT.Bind', V16, V17, V18, V19} -> 0; _ -> case V1 of {'Core.TT.As', V20, V21, V22, V23} -> ('un--scEq'(V0, V23)); _ -> case V0 of {'Core.TT.TDelayed', V24, V25, V26} -> case V1 of {'Core.TT.TDelayed', V27, V28, V29} -> ('un--scEq'(V26, V29)); _ -> 0 end; {'Core.TT.TDelay', V30, V31, V32, V33} -> case V1 of {'Core.TT.TDelay', V34, V35, V36, V37} -> case ('un--scEq'(V32, V36)) of 1 -> ('un--scEq'(V33, V37)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TForce', V38, V39, V40} -> case V1 of {'Core.TT.TForce', V41, V42, V43} -> ('un--scEq'(V40, V43)); _ -> 0 end; {'Core.TT.PrimVal', V44, V45} -> case V1 of {'Core.TT.PrimVal', V46, V47} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V45, V47)); _ -> 0 end; {'Core.TT.Erased', V48, V49} -> case V1 of {'Core.TT.Erased', V50, V51} -> 1; _ -> 0 end; {'Core.TT.TType', V52, V53} -> case V1 of {'Core.TT.TType', V54, V55} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.App', V56, V57, V58} -> case V1 of {'Core.TT.App', V59, V60, V61} -> case ('un--scEq'(V57, V60)) of 1 -> ('un--scEq'(V58, V61)); 0 -> 0 end; _ -> case V1 of {'Core.TT.As', V62, V63, V64, V65} -> ('un--scEq'(V0, V65)); _ -> case V0 of {'Core.TT.TDelayed', V66, V67, V68} -> case V1 of {'Core.TT.TDelayed', V69, V70, V71} -> ('un--scEq'(V68, V71)); _ -> 0 end; {'Core.TT.TDelay', V72, V73, V74, V75} -> case V1 of {'Core.TT.TDelay', V76, V77, V78, V79} -> case ('un--scEq'(V74, V78)) of 1 -> ('un--scEq'(V75, V79)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TForce', V80, V81, V82} -> case V1 of {'Core.TT.TForce', V83, V84, V85} -> ('un--scEq'(V82, V85)); _ -> 0 end; {'Core.TT.PrimVal', V86, V87} -> case V1 of {'Core.TT.PrimVal', V88, V89} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V87, V89)); _ -> 0 end; {'Core.TT.Erased', V90, V91} -> case V1 of {'Core.TT.Erased', V92, V93} -> 1; _ -> 0 end; {'Core.TT.TType', V94, V95} -> case V1 of {'Core.TT.TType', V96, V97} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.As', V98, V99, V100, V101} -> ('un--scEq'(V101, V1)); _ -> case V1 of {'Core.TT.As', V102, V103, V104, V105} -> ('un--scEq'(V0, V105)); _ -> case V0 of {'Core.TT.TDelayed', V106, V107, V108} -> case V1 of {'Core.TT.TDelayed', V109, V110, V111} -> ('un--scEq'(V108, V111)); _ -> 0 end; {'Core.TT.TDelay', V112, V113, V114, V115} -> case V1 of {'Core.TT.TDelay', V116, V117, V118, V119} -> case ('un--scEq'(V114, V118)) of 1 -> ('un--scEq'(V115, V119)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TForce', V120, V121, V122} -> case V1 of {'Core.TT.TForce', V123, V124, V125} -> ('un--scEq'(V122, V125)); _ -> 0 end; {'Core.TT.PrimVal', V126, V127} -> case V1 of {'Core.TT.PrimVal', V128, V129} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V127, V129)); _ -> 0 end; {'Core.TT.Erased', V130, V131} -> case V1 of {'Core.TT.Erased', V132, V133} -> 1; _ -> 0 end; {'Core.TT.TType', V134, V135} -> case V1 of {'Core.TT.TType', V136, V137} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.Ref', V138, V139, V140} -> case V1 of {'Core.TT.Ref', V141, V142, V143} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V140, V143)); _ -> case V1 of {'Core.TT.Meta', V144, V145, V146, V147} -> 1; _ -> case V0 of {'Core.TT.Bind', V148, V149, V150, V151} -> case V1 of {'Core.TT.Bind', V152, V153, V154, V155} -> 0; _ -> case V1 of {'Core.TT.As', V156, V157, V158, V159} -> ('un--scEq'(V0, V159)); _ -> case V0 of {'Core.TT.TDelayed', V160, V161, V162} -> case V1 of {'Core.TT.TDelayed', V163, V164, V165} -> ('un--scEq'(V162, V165)); _ -> 0 end; {'Core.TT.TDelay', V166, V167, V168, V169} -> case V1 of {'Core.TT.TDelay', V170, V171, V172, V173} -> case ('un--scEq'(V168, V172)) of 1 -> ('un--scEq'(V169, V173)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TForce', V174, V175, V176} -> case V1 of {'Core.TT.TForce', V177, V178, V179} -> ('un--scEq'(V176, V179)); _ -> 0 end; {'Core.TT.PrimVal', V180, V181} -> case V1 of {'Core.TT.PrimVal', V182, V183} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V181, V183)); _ -> 0 end; {'Core.TT.Erased', V184, V185} -> case V1 of {'Core.TT.Erased', V186, V187} -> 1; _ -> 0 end; {'Core.TT.TType', V188, V189} -> case V1 of {'Core.TT.TType', V190, V191} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.App', V192, V193, V194} -> case V1 of {'Core.TT.App', V195, V196, V197} -> case ('un--scEq'(V193, V196)) of 1 -> ('un--scEq'(V194, V197)); 0 -> 0 end; _ -> case V1 of {'Core.TT.As', V198, V199, V200, V201} -> ('un--scEq'(V0, V201)); _ -> case V0 of {'Core.TT.TDelayed', V202, V203, V204} -> case V1 of {'Core.TT.TDelayed', V205, V206, V207} -> ('un--scEq'(V204, V207)); _ -> 0 end; {'Core.TT.TDelay', V208, V209, V210, V211} -> case V1 of {'Core.TT.TDelay', V212, V213, V214, V215} -> case ('un--scEq'(V210, V214)) of 1 -> ('un--scEq'(V211, V215)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TForce', V216, V217, V218} -> case V1 of {'Core.TT.TForce', V219, V220, V221} -> ('un--scEq'(V218, V221)); _ -> 0 end; {'Core.TT.PrimVal', V222, V223} -> case V1 of {'Core.TT.PrimVal', V224, V225} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V223, V225)); _ -> 0 end; {'Core.TT.Erased', V226, V227} -> case V1 of {'Core.TT.Erased', V228, V229} -> 1; _ -> 0 end; {'Core.TT.TType', V230, V231} -> case V1 of {'Core.TT.TType', V232, V233} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.As', V234, V235, V236, V237} -> ('un--scEq'(V237, V1)); _ -> case V1 of {'Core.TT.As', V238, V239, V240, V241} -> ('un--scEq'(V0, V241)); _ -> case V0 of {'Core.TT.TDelayed', V242, V243, V244} -> case V1 of {'Core.TT.TDelayed', V245, V246, V247} -> ('un--scEq'(V244, V247)); _ -> 0 end; {'Core.TT.TDelay', V248, V249, V250, V251} -> case V1 of {'Core.TT.TDelay', V252, V253, V254, V255} -> case ('un--scEq'(V250, V254)) of 1 -> ('un--scEq'(V251, V255)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TForce', V256, V257, V258} -> case V1 of {'Core.TT.TForce', V259, V260, V261} -> ('un--scEq'(V258, V261)); _ -> 0 end; {'Core.TT.PrimVal', V262, V263} -> case V1 of {'Core.TT.PrimVal', V264, V265} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V263, V265)); _ -> 0 end; {'Core.TT.Erased', V266, V267} -> case V1 of {'Core.TT.Erased', V268, V269} -> 1; _ -> 0 end; {'Core.TT.TType', V270, V271} -> case V1 of {'Core.TT.TType', V272, V273} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.Meta', V274, V275, V276, V277} -> 1; _ -> case V1 of {'Core.TT.Meta', V278, V279, V280, V281} -> 1; _ -> case V0 of {'Core.TT.Bind', V282, V283, V284, V285} -> case V1 of {'Core.TT.Bind', V286, V287, V288, V289} -> 0; _ -> case V1 of {'Core.TT.As', V290, V291, V292, V293} -> ('un--scEq'(V0, V293)); _ -> case V0 of {'Core.TT.TDelayed', V294, V295, V296} -> case V1 of {'Core.TT.TDelayed', V297, V298, V299} -> ('un--scEq'(V296, V299)); _ -> 0 end; {'Core.TT.TDelay', V300, V301, V302, V303} -> case V1 of {'Core.TT.TDelay', V304, V305, V306, V307} -> case ('un--scEq'(V302, V306)) of 1 -> ('un--scEq'(V303, V307)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TForce', V308, V309, V310} -> case V1 of {'Core.TT.TForce', V311, V312, V313} -> ('un--scEq'(V310, V313)); _ -> 0 end; {'Core.TT.PrimVal', V314, V315} -> case V1 of {'Core.TT.PrimVal', V316, V317} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V315, V317)); _ -> 0 end; {'Core.TT.Erased', V318, V319} -> case V1 of {'Core.TT.Erased', V320, V321} -> 1; _ -> 0 end; {'Core.TT.TType', V322, V323} -> case V1 of {'Core.TT.TType', V324, V325} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.App', V326, V327, V328} -> case V1 of {'Core.TT.App', V329, V330, V331} -> case ('un--scEq'(V327, V330)) of 1 -> ('un--scEq'(V328, V331)); 0 -> 0 end; _ -> case V1 of {'Core.TT.As', V332, V333, V334, V335} -> ('un--scEq'(V0, V335)); _ -> case V0 of {'Core.TT.TDelayed', V336, V337, V338} -> case V1 of {'Core.TT.TDelayed', V339, V340, V341} -> ('un--scEq'(V338, V341)); _ -> 0 end; {'Core.TT.TDelay', V342, V343, V344, V345} -> case V1 of {'Core.TT.TDelay', V346, V347, V348, V349} -> case ('un--scEq'(V344, V348)) of 1 -> ('un--scEq'(V345, V349)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TForce', V350, V351, V352} -> case V1 of {'Core.TT.TForce', V353, V354, V355} -> ('un--scEq'(V352, V355)); _ -> 0 end; {'Core.TT.PrimVal', V356, V357} -> case V1 of {'Core.TT.PrimVal', V358, V359} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V357, V359)); _ -> 0 end; {'Core.TT.Erased', V360, V361} -> case V1 of {'Core.TT.Erased', V362, V363} -> 1; _ -> 0 end; {'Core.TT.TType', V364, V365} -> case V1 of {'Core.TT.TType', V366, V367} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.As', V368, V369, V370, V371} -> ('un--scEq'(V371, V1)); _ -> case V1 of {'Core.TT.As', V372, V373, V374, V375} -> ('un--scEq'(V0, V375)); _ -> case V0 of {'Core.TT.TDelayed', V376, V377, V378} -> case V1 of {'Core.TT.TDelayed', V379, V380, V381} -> ('un--scEq'(V378, V381)); _ -> 0 end; {'Core.TT.TDelay', V382, V383, V384, V385} -> case V1 of {'Core.TT.TDelay', V386, V387, V388, V389} -> case ('un--scEq'(V384, V388)) of 1 -> ('un--scEq'(V385, V389)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TForce', V390, V391, V392} -> case V1 of {'Core.TT.TForce', V393, V394, V395} -> ('un--scEq'(V392, V395)); _ -> 0 end; {'Core.TT.PrimVal', V396, V397} -> case V1 of {'Core.TT.PrimVal', V398, V399} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V397, V399)); _ -> 0 end; {'Core.TT.Erased', V400, V401} -> case V1 of {'Core.TT.Erased', V402, V403} -> 1; _ -> 0 end; {'Core.TT.TType', V404, V405} -> case V1 of {'Core.TT.TType', V406, V407} -> 1; _ -> 0 end; _ -> 0 end end end end end.
'un--posArgs'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Prelude.Types.Right', {'Core.TT.IsTerminating'}} end; [E0 | E1] -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, V5))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V25 = begin (V12 = ('Idris.Idris2.Core.Normalise':'un--logNF'([], V0, <<"totality.positivity"/utf8>>, 50, fun () -> <<"Checking parameter for positivity"/utf8>> end, {'Core.Env.Nil'}, V11))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V24 = begin (V17 = ('un--posArg'(V0, V1, V2, V11))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V23 = case V21 of {'Core.TT.IsTerminating'} -> ('un--posArgs'(V0, V1, V2, V6)); _ -> fun (V22) -> {'Prelude.Types.Right', V21} end end), V23 end(V18)) end end end end), V24 end(V13)) end end end end), V25 end(V8)) end end end end end(E0, E1)) end.
'un--posArg'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NTCon', V4, V5, V6, V7, V8} -> begin (V15 = ('Idris.Idris2.Core.Normalise':'un--logNF'([], V0, (begin (V10 = fun (V9) -> V9 end), fun (V11) -> (V10(V11)) end end(<<"totality.positivity"/utf8>>)), 50, fun () -> (begin (V13 = fun (V12) -> V12 end), fun (V14) -> (V13(V14)) end end(<<"Found a type constructor"/utf8>>)) end, {'Core.Env.Nil'}, V3))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V114 = begin (V91 = begin (V52 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V5, case V1 of {'Core.Context.MkDefs', V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51} -> V20 end))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V90 = begin (V57 = {'Core.Value.NTCon', V4, V5, V6, V7, V8}), case V56 of {'Prelude.Types.Just', V58} -> case V58 of {'Core.Context.Context.TCon', V59, V60, V61, V62, V63, V64, V65, V66} -> begin (V73 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V68 = fun (V67) -> V67 end), fun (V69) -> (V68(V69)) end end(<<"totality.positivity"/utf8>>)), 50, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) | [<<"has"/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V61)))) | [(begin (V71 = fun (V70) -> V70 end), fun (V72) -> (V71(V72)) end end(<<"parameters"/utf8>>)) | []]]]])) end))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V87 = fun (V78) -> {'Prelude.Types.Right', ('nested--14350-13546--in--un--splitParams'(V6, V7, V8, V5, V4, V57, V2, V1, V0, 0, V61, ((begin (V84 = fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V82, V83)) end end end end), fun (V85) -> fun (V86) -> ((((V84('erased'))('erased'))(V85))(V86)) end end end(fun (V79) -> ('Idris.Idris2.Builtin':'un--snd'(V79)) end))(V8))))} end), V87 end(V74)) end end end end; _ -> fun (V88) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V4, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary, <<" not a data type"/utf8>>/binary>>}, V88)) end end; _ -> fun (V89) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V4, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary, <<" not a data type"/utf8>>/binary>>}, V89)) end end end), V90 end(V53)) end end end end), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V113 = case V95 of {'Builtin.MkPair', V96, V97} -> begin (V106 = begin (V99 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V98) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, V98)) end, V97, []))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V105 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V104) -> ('un--nameIn'(V0, V1, V2, V104)) end, V103))), V105 end(V100)) end end end end), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V112 = case V110 of 0 -> ('un--posArgs'(V0, V1, V2, V96)); 1 -> fun (V111) -> {'Prelude.Types.Right', {'Core.TT.NotTerminating', {'Core.TT.NotStrictlyPositive'}}} end end), V112 end(V107)) end end end end end), V113 end(V92)) end end end end), V114 end(V16)) end end end end; {'Core.Value.NBind', V115, V116, V117, V118} -> case V117 of {'Core.TT.Pi', V119, V120, V121, V122} -> begin (V129 = ('Idris.Idris2.Core.Normalise':'un--logNF'([], V0, (begin (V124 = fun (V123) -> V123 end), fun (V125) -> (V124(V125)) end end(<<"totality.positivity"/utf8>>)), 50, fun () -> (begin (V127 = fun (V126) -> V126 end), fun (V128) -> (V127(V128)) end end(<<"Found a Pi-type"/utf8>>)) end, {'Core.Env.Nil'}, V3))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V155 = begin (V134 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, V122))), fun (V135) -> begin (V136 = (V134(V135))), case V136 of {'Prelude.Types.Left', V137} -> {'Prelude.Types.Left', V137}; {'Prelude.Types.Right', V138} -> (begin (V154 = begin (V139 = ('un--nameIn'(V0, V1, V2, V138))), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V153 = case V143 of 1 -> fun (V144) -> {'Prelude.Types.Right', {'Core.TT.NotTerminating', {'Core.TT.NotStrictlyPositive'}}} end; 0 -> begin (V145 = {'Core.TT.Ref', V115, {'Core.TT.Bound'}, {'Core.Name.MN', <<<<"POSCHECK_"/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V116))/binary>>, 1}}), begin (V146 = ('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, V145))), begin (V147 = ((V118(V1))(V146))), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V152 = ('un--posArg'(V0, V1, V2, V151))), V152 end(V148)) end end end end end end end), V153 end(V140)) end end end end), V154 end(V135)) end end end end), V155 end(V130)) end end end end; _ -> begin (V156 = ('Idris.Idris2.Core.Normalise':'un--logNF'([], V0, <<"totality.positivity"/utf8>>, 50, fun () -> <<"Reached the catchall"/utf8>> end, {'Core.Env.Nil'}, V3))), fun (V157) -> begin (V158 = (V156(V157))), case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> (begin (V162 = fun (V161) -> {'Prelude.Types.Right', {'Core.TT.IsTerminating'}} end), V162 end(V157)) end end end end end; {'Core.Value.NApp', V163, V164, V165} -> begin (V172 = ('Idris.Idris2.Core.Normalise':'un--logNF'([], V0, (begin (V167 = fun (V166) -> V166 end), fun (V168) -> (V167(V168)) end end(<<"totality.positivity"/utf8>>)), 50, fun () -> (begin (V170 = fun (V169) -> V169 end), fun (V171) -> (V170(V171)) end end(<<"Found an application"/utf8>>)) end, {'Core.Env.Nil'}, V3))), fun (V173) -> begin (V174 = (V172(V173))), case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> (begin (V192 = begin (V178 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V177) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V177)))) end, V165, []))), fun (V179) -> begin (V180 = (V178(V179))), case V180 of {'Prelude.Types.Left', V181} -> {'Prelude.Types.Left', V181}; {'Prelude.Types.Right', V182} -> (begin (V191 = begin (V184 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V183) -> ('un--nameIn'(V0, V1, V2, V183)) end, V182))), fun (V185) -> begin (V186 = (V184(V185))), case V186 of {'Prelude.Types.Left', V187} -> {'Prelude.Types.Left', V187}; {'Prelude.Types.Right', V188} -> (begin (V190 = fun (V189) -> {'Prelude.Types.Right', case V188 of 1 -> {'Core.TT.NotTerminating', {'Core.TT.NotStrictlyPositive'}}; 0 -> {'Core.TT.IsTerminating'} end} end), V190 end(V185)) end end end end), V191 end(V179)) end end end end), V192 end(V173)) end end end end; _ -> begin (V193 = ('Idris.Idris2.Core.Normalise':'un--logNF'([], V0, <<"totality.positivity"/utf8>>, 50, fun () -> <<"Reached the catchall"/utf8>> end, {'Core.Env.Nil'}, V3))), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V199 = fun (V198) -> {'Prelude.Types.Right', {'Core.TT.IsTerminating'}} end), V199 end(V194)) end end end end end.
'un--nextArg'(V0) -> begin (V1 = (V0 + 1)), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end.
'un--nameIn'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NBind', V4, V5, V6, V7} -> begin (V8 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, ('Idris.Idris2.Core.TT':'un--binderType'(V6))))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V28 = begin (V13 = ('un--nameIn'(V0, V1, V2, V12))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V27 = case V17 of 1 -> fun (V18) -> {'Prelude.Types.Right', 1} end; 0 -> begin (V19 = {'Core.TT.Ref', V4, {'Core.TT.Bound'}, {'Core.Name.MN', <<<<"NAMEIN_"/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary>>, 0}}), begin (V20 = ('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, V19))), begin (V21 = ((V7(V1))(V20))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V26 = ('un--nameIn'(V0, V1, V2, V25))), V26 end(V22)) end end end end end end end), V27 end(V14)) end end end end), V28 end(V9)) end end end end; {'Core.Value.NApp', V29, V30, V31} -> begin (V33 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V32) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V32)))) end, V31, []))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V38) -> ('un--nameIn'(V0, V1, V2, V38)) end, V37))), V39 end(V34)) end end end end; {'Core.Value.NTCon', V40, V41, V42, V43, V44} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V56)) end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V60, V61, V62, V63)) end end end end end end end, fun (V64) -> fun (V65) -> V65 end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V68, V69, V70)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V73, V74)) end end}, V41, V2)) of 1 -> fun (V75) -> {'Prelude.Types.Right', 1} end; 0 -> begin (V77 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V76) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V76)))) end, V44, []))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V83 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V82) -> ('un--nameIn'(V0, V1, V2, V82)) end, V81))), V83 end(V78)) end end end end end; {'Core.Value.NDCon', V84, V85, V86, V87, V88} -> begin (V90 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V89) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V89)))) end, V88, []))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V96 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V95) -> ('un--nameIn'(V0, V1, V2, V95)) end, V94))), V96 end(V91)) end end end end; _ -> fun (V97) -> {'Prelude.Types.Right', 0} end end.
'un--mkChange'(V0, V1, V2, V3) -> case V2 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Core.TT.As', V8, V9, V10, V11} -> ('un--mkChange'(V0, V1, [{'Builtin.MkPair', V6, V10} | [{'Builtin.MkPair', V6, V11} | V5]], V3)); _ -> ('Idris.Idris2.Core.Core':'un--cond'([{'Builtin.MkPair', fun () -> ('un--scEq'(V3, V7)) end, fun () -> {'Prelude.Types.Just', {'Builtin.MkPair', V6, 1}} end} | [{'Builtin.MkPair', fun () -> ('un--smaller'(0, V0, ('un--asserted'(V1, V3)), V3, V7)) end, fun () -> {'Prelude.Types.Just', {'Builtin.MkPair', V6, 0}} end} | []]], ('un--mkChange'(V0, V1, V5, V3)))) end end end(E0, E1)) end.
'un--initArgs'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Prelude.Types.Right', []} end; _ -> begin (V3 = (V1 - 1)), begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V32 = begin (V19 = begin (V14 = V0), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'put'(V16, ('un--nextArg'(V13)))) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V31 = begin (V24 = ('un--initArgs'(V0, V3))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', [{'Prelude.Types.Just', {'Builtin.MkPair', V13, 1}} | V28]} end), V30 end(V25)) end end end end), V31 end(V20)) end end end end), V32 end(V10)) end end end end end end.
'un--getSC'(V0, V1, V2) -> case V2 of {'Core.Context.Context.PMDef', V3, V4, V5, V6, V7} -> begin (V9 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V8) -> ('un--findCalls'(V0, V1, V8)) end, V7, []))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V22 = fun (V14) -> {'Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_SCCall'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_SCCall'(V17, V18)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V19, V20)) end end, []}, fun (V21) -> V21 end, V13))))} end), V22 end(V10)) end end end end; _ -> fun (V23) -> {'Prelude.Types.Right', []} end end.
'un--getCasePats'(V0, V1, V2, V3, V4, V5) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V3, case V2 of {'Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} -> V6 end))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V153 = case V42 of {'Prelude.Types.Just', V43} -> case V43 of {'Core.Context.Context.PMDef', V44, V45, V46, V47, V48} -> begin (V52 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality"/utf8>>, 20, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([(begin (V50 = fun (V49) -> V49 end), fun (V51) -> (V50(V51)) end end(<<"Looking at the"/utf8>>)) | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V48)))) | [<<"cases of"/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)) | []]]]])) end))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V150 = begin (V65 = ((begin (V62 = fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V60, V61)) end end end end), fun (V63) -> fun (V64) -> ((((V62('erased'))('erased'))(V63))(V64)) end end end(fun (V57) -> ('nested--9445-10303--in--un--matchArgs'(V1, V5, V4, V3, V2, V0, V57)) end))(V48))), begin (V143 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, <<"totality"/utf8>>, 20, begin (V96 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V66, V67, [])) end end, V48, fun (V68) -> case V68 of {'Builtin.DPair.MkDPair', V69, V70} -> case V70 of {'Builtin.MkPair', V71, V72} -> case V72 of {'Builtin.MkPair', V73, V74} -> begin (V79 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V75, V76)) end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V77, V78)) end end}, V73))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V95 = begin (V88 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V86, V87)) end end}, V74))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V94 = fun (V93) -> {'Prelude.Types.Right', <<<<"    "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V69, V83))/binary, <<<<" => "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V69, V92))/binary>>/binary>>/binary>>} end), V94 end(V89)) end end end end), V95 end(V80)) end end end end end end end end))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V142 = begin (V135 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V101, V102, [])) end end, V65, fun (V103) -> case V103 of {'Builtin.DPair.MkDPair', V104, V105} -> case V105 of {'Builtin.MkPair', V106, V107} -> case V107 of {'Builtin.MkPair', V108, V109} -> begin (V115 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V110) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V111, V112)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V113, V114)) end end}, ('Idris.Idris2.Builtin':'un--snd'(V110)))) end, V108, []))), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V134 = begin (V124 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V120, V121)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V122, V123)) end end}, V109))), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V133 = fun (V129) -> {'Prelude.Types.Right', <<<<"    "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V130) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V104, V130)) end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V104, V131, V132)) end end}, V119))/binary, <<<<" => "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V104, V128))/binary>>/binary>>/binary>>} end), V133 end(V125)) end end end end), V134 end(V116)) end end end end end end end end))), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V141 = fun (V140) -> {'Prelude.Types.Right', ('Idris.Idris2.Data.String':'un--fastUnlines'([<<"Updated"/utf8>> | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V100, [<<"  to:"/utf8>> | V139]))]))} end), V141 end(V136)) end end end end), V142 end(V97)) end end end end))), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V149 = fun (V148) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V65}} end), V149 end(V144)) end end end end end), V150 end(V53)) end end end end; _ -> fun (V151) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V152) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V153 end(V39)) end end end end.
'un--firstArg'() -> 0.
'un--findSCcall'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V42 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V7, case V2 of {'Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V10 end))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V183 = case V46 of {'Prelude.Types.Just', V47} -> begin (V70 = case V47 of {'Core.Context.Context.MkGlobalDef', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69} -> V49 end), begin (V88 = begin (V76 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V71, V72)) end end, fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V73, V74, V75)) end end end}, V70))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V87 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V82 = fun (V81) -> V81 end), fun (V83) -> (V82(V83)) end end(<<"totality.termination.sizechange"/utf8>>)), 10, fun () -> <<(begin (V85 = fun (V84) -> V84 end), fun (V86) -> (V85(V86)) end end(<<"Looking under "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V80))/binary>> end))), V87 end(V77)) end end end end), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V182 = begin (V129 = fun (V93) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125} -> V94 end, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Core.Name.UN', {'Core.Name.Basic', (begin (V127 = fun (V126) -> V126 end), fun (V128) -> (V127(V128)) end end(<<"assert_smaller"/utf8>>))}}}, V93)) end), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V181 = ('Idris.Idris2.Core.Core':'un--cond'([{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V70, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Core.Name.UN', {'Core.Name.Basic', (begin (V135 = fun (V134) -> V134 end), fun (V136) -> (V135(V136)) end end(<<"assert_total"/utf8>>))}}})) end, fun () -> fun (V137) -> {'Prelude.Types.Right', []} end end} | [{'Builtin.MkPair', fun () -> ('un--caseFn'(V70)) end, fun () -> begin (V139 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V138) -> ('un--findSC'(V0, V1, V2, V3, V4, V5, V138)) end, V9, []))), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V161 = begin (V144 = ('un--getCasePats'(V1, V0, V2, V70, V5, V9))), fun (V145) -> begin (V146 = (V144(V145))), case V146 of {'Prelude.Types.Left', V147} -> {'Prelude.Types.Left', V147}; {'Prelude.Types.Right', V148} -> (begin (V160 = begin (V150 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V149) -> ('un--findInCase'(V1, V2, V4, V149)) end, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, V148)), []))), fun (V151) -> begin (V152 = (V150(V151))), case V152 of {'Prelude.Types.Left', V153} -> {'Prelude.Types.Left', V153}; {'Prelude.Types.Right', V154} -> (begin (V159 = fun (V155) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V156, V157)) end end, []}, fun (V158) -> V158 end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V143, V154))))} end), V159 end(V151)) end end end end), V160 end(V145)) end end end end), V161 end(V140)) end end end end end} | []]], begin (V163 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V162) -> ('un--findSC'(V0, V1, V2, V3, V4, V5, V162)) end, V9, []))), fun (V164) -> begin (V165 = (V163(V164))), case V165 of {'Prelude.Types.Left', V166} -> {'Prelude.Types.Left', V166}; {'Prelude.Types.Right', V167} -> (begin (V180 = fun (V168) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Core.Context.Context.MkSCCall', V70, ('un--expandToArity'(V8, ((begin (V174 = fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V172, V173)) end end end end), fun (V175) -> fun (V176) -> ((((V174('erased'))('erased'))(V175))(V176)) end end end(fun (V169) -> ('un--mkChange'(V2, V133, V5, V169)) end))(V9))))} | []], ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V177) -> fun (V178) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V177, V178)) end end, []}, fun (V179) -> V179 end, V167))))} end), V180 end(V164)) end end end end))), V181 end(V130)) end end end end), V182 end(V89)) end end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V6, V7)) end), V183 end(V43)) end end end end.
'un--findSC'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.TT.Bind', V7, V8, V9, V10} -> begin (V11 = ('nested--9337-9064--in--un--findSCbinder'(V8, V0, V10, V9, V7, V5, V4, V3, V2, V1, V9))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V33 = begin (V26 = ('un--findSC'([V8 | V0], V1, V2, {'Core.Env.::', V9, V3}, V4, ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V16) -> case V16 of {'Builtin.MkPair', V17, V18} -> {'Builtin.MkPair', V17, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V18))} end end))(V5)), V10))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V15, V30))} end), V32 end(V27)) end end end end), V33 end(V12)) end end end end; _ -> case V4 of 2 -> case V6 of {'Core.TT.TDelay', V34, V35, V36, V37} -> ('un--findSC'(V0, V1, V2, V3, 3, V5, V37)); _ -> case V6 of {'Core.TT.TDelay', V38, V39, V40, V41} -> ('un--findSC'(V0, V1, V2, V3, V4, V5, V41)); _ -> ('case--findSC-9428'(V0, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V6)))) end end; _ -> case V6 of {'Core.TT.TDelay', V42, V43, V44, V45} -> ('un--findSC'(V0, V1, V2, V3, V4, V5, V45)); _ -> ('case--findSC-9428'(V0, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V6)))) end end end.
'un--findInCase'(V0, V1, V2, V3) -> case V3 of {'Builtin.DPair.MkDPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> begin (V33 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, <<"totality"/utf8>>, 10, begin (V23 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V13, V14)) end end}, V10)) end, ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> ('Idris.Idris2.Builtin':'un--snd'(V15)) end))(V8)), []))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V32 = fun (V28) -> {'Prelude.Types.Right', <<<<"Looking in case args "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V29) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V4, V29)) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V4, V30, V31)) end end}, V27))/binary>>} end), V32 end(V24)) end end end end))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V50 = begin (V38 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V4, V0, <<"totality"/utf8>>, 10, fun () -> <<"        ="/utf8>> end, V6, V9))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V49 = begin (V43 = ('Idris.Idris2.Core.Normalise':'un--normaliseOpts'(V0, V4, ('Idris.Idris2.Core.Value':'un--tcOnly'()), V1, V6, V9))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V48 = ('un--findSC'(V4, V0, V1, V6, V2, V8, ('un--delazy'(V1, V47))))), V48 end(V44)) end end end end), V49 end(V39)) end end end end), V50 end(V34)) end end end end end end end.
'un--findCalls'(V0, V1, V2) -> case V2 of {'Builtin.DPair.MkDPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> begin (V9 = ('Idris.Idris2.Core.TT':'un--getArgs'(('un--delazy'(V1, V7))))), begin (V10 = ('Idris.Idris2.Core.Normalise':'un--normaliseOpts'(V0, V3, ('Idris.Idris2.Core.Value':'un--tcOnly'()), V1, V5, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V15 = ('un--findSC'(V3, V0, V1, V5, 0, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(('Idris.Idris2.Prelude.Types':'un--take'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V9)), ('Idris.Idris2.Prelude.Types':'dn--un--rangeFrom_Range_Nat'(0)))), V9)), ('un--delazy'(V1, V14))))), V15 end(V11)) end end end end end end end end.
'un--expandToArity'(V0, V1) -> case V0 of 0 -> V1; _ -> begin (V2 = (V0 - 1)), case V1 of [E0 | E1] -> (fun (V3, V4) -> [V3 | ('un--expandToArity'(V2, V4))] end(E0, E1)); [] -> [{'Prelude.Types.Nothing'} | ('un--expandToArity'(V2, []))] end end end.
'un--delazy'(V0, V1) -> case V1 of {'Core.TT.TDelayed', V2, V3, V4} -> begin (V5 = ('un--delazy'(V0, V4))), case V3 of 0 -> {'Core.TT.TDelayed', V2, V3, V5}; _ -> V5 end end; {'Core.TT.TDelay', V6, V7, V8, V9} -> begin (V10 = ('un--delazy'(V0, V8))), begin (V11 = ('un--delazy'(V0, V9))), case V7 of 0 -> {'Core.TT.TDelay', V6, V7, V10, V11}; _ -> V11 end end end; {'Core.TT.TForce', V12, V13, V14} -> case V13 of 0 -> {'Core.TT.TForce', V12, V13, ('un--delazy'(V0, V14))}; _ -> ('un--delazy'(V0, V14)) end; {'Core.TT.Meta', V15, V16, V17, V18} -> {'Core.TT.Meta', V15, V16, V17, ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> ('un--delazy'(V0, V19)) end))(V18))}; {'Core.TT.Bind', V27, V28, V29, V30} -> {'Core.TT.Bind', V27, V28, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V31) -> ('un--delazy'(V0, V31)) end, V29)), ('un--delazy'(V0, V30))}; {'Core.TT.App', V32, V33, V34} -> {'Core.TT.App', V32, ('un--delazy'(V0, V33)), ('un--delazy'(V0, V34))}; {'Core.TT.As', V35, V36, V37, V38} -> {'Core.TT.As', V35, V36, ('un--delazy'(V0, V37)), ('un--delazy'(V0, V38))}; _ -> V1 end.
'un--checkTotal'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V45 = ('case--checkTotal-14883'(V2, V1, V0, V12, ('Idris.Idris2.Core.Context':'un--getNameID'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))))), V45 end(V9)) end end end end.
'un--checkTerminating'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getTotality'(V0, V1, V2))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V27 = begin (V19 = begin (V13 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V2))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V18 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.termination"/utf8>>, 6, fun () -> <<<<"Checking termination: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17))/binary>> end))), V18 end(V14)) end end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V26 = ('case--checkTerminating-13155'(V2, V1, V0, V7, case V7 of {'Core.TT.MkTotality', V24, V25} -> V24 end))), V26 end(V20)) end end end end), V27 end(V4)) end end end end.
'un--checkSC'(V0, V1, V2, V3, V4, V5, V6) -> begin (V12 = begin (V7 = V2), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V301 = begin (V28 = begin (V22 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V19, V20, V21)) end end end}, V4))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V27 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"totality.termination.sizechange"/utf8>>, 7, fun () -> <<<<"Checking Size Change Graph: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26))/binary>> end))), V27 end(V23)) end end end end), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V300 = begin (V48 = {'Builtin.MkPair', V4, ((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end((begin (V38 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V36, V37)) end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V33) -> ('Idris.Idris2.Builtin':'un--fst'(V33)) end))))(V5))}), case ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V48, V16)) of {'Prelude.Types.Just', V49} -> fun (V50) -> {'Prelude.Types.Right', V49} end; {'Prelude.Types.Nothing'} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V53, V54, V55)) end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V62)) end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V66, V67, V68, V69)) end end end end end end end, fun (V70) -> fun (V71) -> V71 end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V74, V75, V76)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V79, V80)) end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V81, V82)) end end}, {'Prelude.EqOrd.MkEq', fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V87, V88)) end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V89, V90)) end end}, V85, V86)) end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V93, V94)) end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V95, V96)) end end}, V91, V92)) end end}, V83, V84)) end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V103, V104)) end end}, V99, V100)) end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V107, V108)) end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V109, V110)) end end}, V105, V106)) end end}, V97, V98)) end end}, V77, V78)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V113, V114)) end end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V115, V116)) end end}, {'Prelude.EqOrd.MkEq', fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V121, V122)) end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V123, V124)) end end}, V119, V120)) end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V127) -> fun (V128) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V127, V128)) end end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V129, V130)) end end}, V125, V126)) end end}, V117, V118)) end end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V135, V136)) end end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V137, V138)) end end}, V133, V134)) end end, fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V141, V142)) end end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V143, V144)) end end}, V139, V140)) end end}, V131, V132)) end end}, V111, V112)) end end}, V48, V6)) of 1 -> begin (V156 = begin (V150 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V145, V146)) end end, fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V147, V148, V149)) end end end}, V4))), fun (V151) -> begin (V152 = (V150(V151))), case V152 of {'Prelude.Types.Left', V153} -> {'Prelude.Types.Left', V153}; {'Prelude.Types.Right', V154} -> (begin (V155 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"totality.termination.sizechange.inPath"/utf8>>, 8, fun () -> <<<<"Checking arguments: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V154))/binary>> end))), V155 end(V151)) end end end end), fun (V157) -> begin (V158 = (V156(V157))), case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> (begin (V191 = begin (V173 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V161) -> fun (V162) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Terminating'(V161, V162)) end end, fun (V163) -> fun (V164) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Terminating'(V163, V164)) end end}, ('nested--12481-11732--in--un--checkDesc'(V6, V5, V4, V3, V2, V1, V0, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, (begin (V170 = fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V168, V169)) end end end end), fun (V171) -> fun (V172) -> ((((V170('erased'))('erased'))(V171))(V172)) end end end(fun (V165) -> ('Idris.Idris2.Builtin':'un--snd'(V165)) end)), V5)), V6))))), fun (V174) -> begin (V175 = (V173(V174))), case V175 of {'Prelude.Types.Left', V176} -> {'Prelude.Types.Left', V176}; {'Prelude.Types.Right', V177} -> (begin (V190 = begin (V183 = begin (V178 = V2), fun (V179) -> begin (V182 = (begin (V180 = V178), fun (V181) -> ('erlang':'put'(V180, ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V48, V177, V16)))) end end(V179))), {'Prelude.Types.Right', V182} end end end), fun (V184) -> begin (V185 = (V183(V184))), case V185 of {'Prelude.Types.Left', V186} -> {'Prelude.Types.Left', V186}; {'Prelude.Types.Right', V187} -> (begin (V189 = fun (V188) -> {'Prelude.Types.Right', V177} end), V189 end(V184)) end end end end), V190 end(V174)) end end end end), V191 end(V157)) end end end end; 0 -> begin (V224 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V3 of {'Core.Context.MkDefs', V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223} -> V192 end))), fun (V225) -> begin (V226 = (V224(V225))), case V226 of {'Prelude.Types.Left', V227} -> {'Prelude.Types.Left', V227}; {'Prelude.Types.Right', V228} -> (begin (V299 = case V228 of {'Prelude.Types.Nothing'} -> begin (V246 = begin (V234 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V229, V230)) end end, fun (V231) -> fun (V232) -> fun (V233) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V231, V232, V233)) end end end}, V4))), fun (V235) -> begin (V236 = (V234(V235))), case V236 of {'Prelude.Types.Left', V237} -> {'Prelude.Types.Left', V237}; {'Prelude.Types.Right', V238} -> (begin (V245 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V240 = fun (V239) -> V239 end), fun (V241) -> (V240(V241)) end end(<<"totality.termination.sizechange.isTerminating"/utf8>>)), 8, fun () -> <<(begin (V243 = fun (V242) -> V242 end), fun (V244) -> (V243(V244)) end end(<<"Size Change Graph is Terminating for: "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V238))/binary>> end))), V245 end(V235)) end end end end), fun (V247) -> begin (V248 = (V246(V247))), case V248 of {'Prelude.Types.Left', V249} -> {'Prelude.Types.Left', V249}; {'Prelude.Types.Right', V250} -> (begin (V252 = fun (V251) -> {'Prelude.Types.Right', {'Core.TT.IsTerminating'}} end), V252 end(V247)) end end end end; {'Prelude.Types.Just', V253} -> begin (V271 = begin (V259 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V254) -> fun (V255) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V254, V255)) end end, fun (V256) -> fun (V257) -> fun (V258) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V256, V257, V258)) end end end}, V4))), fun (V260) -> begin (V261 = (V259(V260))), case V261 of {'Prelude.Types.Left', V262} -> {'Prelude.Types.Left', V262}; {'Prelude.Types.Right', V263} -> (begin (V270 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V265 = fun (V264) -> V264 end), fun (V266) -> (V265(V266)) end end(<<"totality.termination.sizechange.needsChecking"/utf8>>)), 8, fun () -> <<(begin (V268 = fun (V267) -> V267 end), fun (V269) -> (V268(V269)) end end(<<"Size Change Graph needs traversing: "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V263))/binary>> end))), V270 end(V260)) end end end end), fun (V272) -> begin (V273 = (V271(V272))), case V273 of {'Prelude.Types.Left', V274} -> {'Prelude.Types.Left', V274}; {'Prelude.Types.Right', V275} -> (begin (V298 = ('nested--12481-11738--in--un--continue'(V6, V5, V4, V3, V2, V1, V0, case V253 of {'Core.Context.Context.MkGlobalDef', V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297} -> V296 end, [V48 | V6]))), V298 end(V272)) end end end end end), V299 end(V225)) end end end end end end end), V300 end(V29)) end end end end), V301 end(V13)) end end end end.
'un--checkPositive'(V0, V1, V2) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V3, V4)) end end, fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V5, V6, V7)) end end end}, V2))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V38 = begin (V13 = ('Idris.Idris2.Core.Context':'un--getTotality'(V0, V1, V12))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V37 = begin (V29 = begin (V23 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V20, V21, V22)) end end end}, V12))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V28 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.positivity"/utf8>>, 6, fun () -> <<<<"Checking positivity: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27))/binary>> end))), V28 end(V24)) end end end end), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V36 = ('case--checkPositive-14790'(V2, V1, V0, V12, V17, case V17 of {'Core.TT.MkTotality', V34, V35} -> V34 end))), V36 end(V30)) end end end end), V37 end(V14)) end end end end), V38 end(V9)) end end end end.
'un--checkPosArgs'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NBind', V4, V5, V6, V7} -> case V6 of {'Core.TT.Pi', V8, V9, V10, V11} -> begin (V12 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, V11))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V32 = begin (V17 = ('un--posArg'(V0, V1, V2, V16))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V31 = case V21 of {'Core.TT.IsTerminating'} -> begin (V22 = {'Core.TT.Ref', V4, {'Core.TT.Bound'}, {'Core.Name.MN', <<<<"POSCHECK_"/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary>>, 0}}), begin (V23 = ('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, V22))), begin (V24 = ((V7(V1))(V23))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V29 = ('un--checkPosArgs'(V0, V1, V2, V28))), V29 end(V25)) end end end end end end; _ -> fun (V30) -> {'Prelude.Types.Right', V21} end end), V31 end(V18)) end end end end), V32 end(V13)) end end end end; _ -> begin (V33 = ('Idris.Idris2.Core.Normalise':'un--logNF'([], V0, <<"totality.positivity"/utf8>>, 50, fun () -> <<"Giving up on non-Pi type"/utf8>> end, {'Core.Env.Nil'}, V3))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', {'Core.TT.IsTerminating'}} end), V39 end(V34)) end end end end end; _ -> begin (V40 = ('Idris.Idris2.Core.Normalise':'un--logNF'([], V0, <<"totality.positivity"/utf8>>, 50, fun () -> <<"Giving up on non-Pi type"/utf8>> end, {'Core.Env.Nil'}, V3))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V46 = fun (V45) -> {'Prelude.Types.Right', {'Core.TT.IsTerminating'}} end), V46 end(V41)) end end end end end.
'un--checkIfGuarded'(V0, V1, V2) -> begin (V14 = begin (V8 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V3, V4)) end end, fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V5, V6, V7)) end end end}, V2))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V13 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.termination.guarded"/utf8>>, 6, fun () -> <<<<"Check if Guarded: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12))/binary>> end))), V13 end(V9)) end end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V83 = begin (V24 = begin (V19 = V0), fun (V20) -> begin (V23 = (begin (V21 = V19), fun (V22) -> ('erlang':'get'(V21)) end end(V20))), {'Prelude.Types.Right', V23} end end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V82 = begin (V61 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V2, case V28 of {'Core.Context.MkDefs', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60} -> V29 end))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V81 = case V65 of {'Prelude.Types.Just', V66} -> case V66 of {'Core.Context.Context.PMDef', V67, V68, V69, V70, V71} -> begin (V72 = ('nested--8241-7876--in--un--allGuarded'(V2, V1, V0, V71))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V78 = case V76 of 1 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V2, {'Core.Context.Context.AllGuarded'})); 0 -> fun (V77) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V78 end(V73)) end end end end; _ -> fun (V79) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; _ -> fun (V80) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V81 end(V62)) end end end end), V82 end(V25)) end end end end), V83 end(V15)) end end end end.
'un--checkData'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Prelude.Types.Right', {'Core.TT.IsTerminating'}} end; [E0 | E1] -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.positivity"/utf8>>, 40, fun () -> <<<<"Checking positivity of constructor "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary>> end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V19 = begin (V12 = ('un--checkCon'(V0, V1, V2, V5))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = case V16 of {'Core.TT.IsTerminating'} -> ('un--checkData'(V0, V1, V2, V6)); _ -> fun (V17) -> {'Prelude.Types.Right', V16} end end), V18 end(V13)) end end end end), V19 end(V8)) end end end end end(E0, E1)) end.
'un--checkCon'(V0, V1, V2, V3) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V3, case V1 of {'Core.Context.MkDefs', V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} -> V4 end))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V80 = case V40 of {'Prelude.Types.Nothing'} -> begin (V47 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V42 = fun (V41) -> V41 end), fun (V43) -> (V42(V43)) end end(<<"totality.positivity"/utf8>>)), 20, fun () -> <<(begin (V45 = fun (V44) -> V44 end), fun (V46) -> (V45(V46)) end end(<<"Couldn\x{27}t find constructor "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>> end))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V53 = fun (V52) -> {'Prelude.Types.Right', {'Core.TT.Unchecked'}} end), V53 end(V48)) end end end end; {'Prelude.Types.Just', V54} -> begin (V55 = ('un--totRefsIn'(V0, V1, V54))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V79 = case V59 of {'Core.TT.IsTerminating'} -> begin (V60 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V1, {'Core.Env.Nil'}, V54))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V77 = begin (V71 = ('Idris.Idris2.Core.Normalise':'un--logNF'([], V0, (begin (V66 = fun (V65) -> V65 end), fun (V67) -> (V66(V67)) end end(<<"totality.positivity"/utf8>>)), 20, fun () -> (begin (V69 = fun (V68) -> V68 end), fun (V70) -> (V69(V70)) end end(<<"Checking the type "/utf8>>)) end, {'Core.Env.Nil'}, V64))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V76 = ('un--checkPosArgs'(V0, V1, V2, V64))), V76 end(V72)) end end end end), V77 end(V61)) end end end end; _ -> fun (V78) -> {'Prelude.Types.Right', V59} end end), V79 end(V56)) end end end end end), V80 end(V37)) end end end end.
'un--caseFn'(V0) -> case V0 of {'Core.Name.CaseBlock', V1, V2} -> 1; {'Core.Name.DN', V3, V4} -> ('un--caseFn'(V4)); {'Core.Name.NS', V5, V6} -> ('un--caseFn'(V6)); _ -> 0 end.
'un--calculateSizeChange'(V0, V1, V2) -> begin (V14 = begin (V8 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V3, V4)) end end, fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V5, V6, V7)) end end end}, V2))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V13 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.termination.sizechange"/utf8>>, 5, fun () -> <<<<"Calculating Size Change: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12))/binary>> end))), V13 end(V9)) end end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V91 = begin (V24 = begin (V19 = V0), fun (V20) -> begin (V23 = (begin (V21 = V19), fun (V22) -> ('erlang':'get'(V21)) end end(V20))), {'Prelude.Types.Right', V23} end end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V90 = begin (V61 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V28 of {'Core.Context.MkDefs', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60} -> V29 end))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V89 = case V65 of {'Prelude.Types.Just', V66} -> ('un--getSC'(V0, V28, case V66 of {'Core.Context.Context.MkGlobalDef', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88} -> V84 end)); {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V2)) end), V89 end(V62)) end end end end), V90 end(V25)) end end end end), V91 end(V15)) end end end end.
'un--calcTerminating'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V8083 = begin (V24 = begin (V18 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V15, V16, V17)) end end end}, V2))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V23 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.termination.calc"/utf8>>, 7, fun () -> <<<<"Calculating termination: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22))/binary>> end))), V23 end(V19)) end end end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V8082 = begin (V61 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V12 of {'Core.Context.MkDefs', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60} -> V29 end))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V8081 = case V65 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V2)); {'Prelude.Types.Just', V66} -> begin (V67 = ('nested--13603-12751--in--un--addCases'(V2, V1, V0, V12, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.Context.Context':'un--refersTo'(V66))))))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V8080 = begin (V76 = ('un--totRefs'(V0, V12, ('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V74, V75)) end end}, V71))))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V8079 = case V80 of {'Core.TT.IsTerminating'} -> begin (V103 = case V66 of {'Core.Context.Context.MkGlobalDef', V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} -> V83 end), begin (V104 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Termination.APos'}, ('un--firstArg'())))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V8077 = begin (V115 = begin (V109 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V0, [], V12, {'Core.Env.Nil'}, V103))), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V114 = ('un--initArgs'(V108, V113))), V114 end(V110)) end end end end), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V8076 = begin (V8070 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Termination.Explored'}, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V122, V123)) end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V124, V125)) end end}, {'Prelude.EqOrd.MkEq', fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V130, V131)) end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V132, V133)) end end}, V128, V129)) end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V136, V137)) end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V138, V139)) end end}, V134, V135)) end end}, V126, V127)) end end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V144, V145)) end end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V146, V147)) end end}, V142, V143)) end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V150) -> fun (V151) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V150, V151)) end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V152, V153)) end end}, V148, V149)) end end}, V140, V141)) end end}, V120, V121)) end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V156, V157)) end end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V158, V159)) end end}, {'Prelude.EqOrd.MkEq', fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V164) -> fun (V165) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V164, V165)) end end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V166, V167)) end end}, V162, V163)) end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V170, V171)) end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V172, V173)) end end}, V168, V169)) end end}, V160, V161)) end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V176) -> fun (V177) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V178, V179)) end end, fun (V180) -> fun (V181) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V180, V181)) end end}, V176, V177)) end end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V184, V185)) end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V186, V187)) end end}, V182, V183)) end end}, V174, V175)) end end}, V154, V155)) end end}, fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V190) -> fun (V191) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V190, V191)) end end, fun (V192) -> fun (V193) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V192, V193)) end end}, fun (V194) -> fun (V195) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V194, V195)) end end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V196, V197)) end end, fun (V198) -> fun (V199) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V198, V199)) end end, fun (V200) -> fun (V201) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V200, V201)) end end, fun (V202) -> fun (V203) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V202, V203)) end end, fun (V204) -> fun (V205) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V204, V205)) end end, fun (V206) -> fun (V207) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V206, V207)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V208) -> fun (V209) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V210) -> fun (V211) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V212) -> fun (V213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V212, V213)) end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V214, V215)) end end}, V210, V211)) end end, fun (V216) -> fun (V217) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V218, V219)) end end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V220, V221)) end end}, V216, V217)) end end}, V208, V209)) end end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V224) -> fun (V225) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V226, V227)) end end, fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V228, V229)) end end}, V224, V225)) end end, fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V232, V233)) end end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V234, V235)) end end}, V230, V231)) end end}, V222, V223)) end end}, fun (V236) -> fun (V237) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V238) -> fun (V239) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V240) -> fun (V241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V240, V241)) end end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V242, V243)) end end}, V238, V239)) end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V246, V247)) end end, fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V248, V249)) end end}, V244, V245)) end end}, fun (V250) -> fun (V251) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V252) -> fun (V253) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V252, V253)) end end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V254, V255)) end end}, fun (V256) -> fun (V257) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V256, V257)) end end, fun (V258) -> fun (V259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V258, V259)) end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V260, V261)) end end, fun (V262) -> fun (V263) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V262, V263)) end end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V264, V265)) end end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V266, V267)) end end, fun (V268) -> fun (V269) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V268, V269)) end end}, V250, V251)) end end, fun (V270) -> fun (V271) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V272) -> fun (V273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V272, V273)) end end, fun (V274) -> fun (V275) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V274, V275)) end end}, fun (V276) -> fun (V277) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V276, V277)) end end, fun (V278) -> fun (V279) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V278, V279)) end end, fun (V280) -> fun (V281) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V280, V281)) end end, fun (V282) -> fun (V283) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V282, V283)) end end, fun (V284) -> fun (V285) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V284, V285)) end end, fun (V286) -> fun (V287) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V286, V287)) end end, fun (V288) -> fun (V289) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V288, V289)) end end}, V270, V271)) end end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V292) -> fun (V293) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V292, V293)) end end, fun (V294) -> fun (V295) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V294, V295)) end end}, fun (V296) -> fun (V297) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V296, V297)) end end, fun (V298) -> fun (V299) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V298, V299)) end end, fun (V300) -> fun (V301) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V300, V301)) end end, fun (V302) -> fun (V303) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V302, V303)) end end, fun (V304) -> fun (V305) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V304, V305)) end end, fun (V306) -> fun (V307) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V306, V307)) end end, fun (V308) -> fun (V309) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V308, V309)) end end}, V290, V291)) end end, fun (V310) -> fun (V311) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V312) -> fun (V313) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V312, V313)) end end, fun (V314) -> fun (V315) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V314, V315)) end end}, fun (V316) -> fun (V317) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V316, V317)) end end, fun (V318) -> fun (V319) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V318, V319)) end end, fun (V320) -> fun (V321) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V320, V321)) end end, fun (V322) -> fun (V323) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V322, V323)) end end, fun (V324) -> fun (V325) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V324, V325)) end end, fun (V326) -> fun (V327) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V326, V327)) end end, fun (V328) -> fun (V329) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V328, V329)) end end}, V310, V311)) end end, fun (V330) -> fun (V331) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V332) -> fun (V333) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V332, V333)) end end, fun (V334) -> fun (V335) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V334, V335)) end end}, fun (V336) -> fun (V337) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V336, V337)) end end, fun (V338) -> fun (V339) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V338, V339)) end end, fun (V340) -> fun (V341) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V340, V341)) end end, fun (V342) -> fun (V343) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V342, V343)) end end, fun (V344) -> fun (V345) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V344, V345)) end end, fun (V346) -> fun (V347) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V346, V347)) end end, fun (V348) -> fun (V349) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V348, V349)) end end}, V330, V331)) end end, fun (V350) -> fun (V351) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V352) -> fun (V353) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V352, V353)) end end, fun (V354) -> fun (V355) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V354, V355)) end end}, fun (V356) -> fun (V357) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V356, V357)) end end, fun (V358) -> fun (V359) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V358, V359)) end end, fun (V360) -> fun (V361) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V360, V361)) end end, fun (V362) -> fun (V363) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V362, V363)) end end, fun (V364) -> fun (V365) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V364, V365)) end end, fun (V366) -> fun (V367) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V366, V367)) end end, fun (V368) -> fun (V369) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V368, V369)) end end}, V350, V351)) end end, fun (V370) -> fun (V371) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V372) -> fun (V373) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V372, V373)) end end, fun (V374) -> fun (V375) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V374, V375)) end end}, fun (V376) -> fun (V377) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V376, V377)) end end, fun (V378) -> fun (V379) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V378, V379)) end end, fun (V380) -> fun (V381) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V380, V381)) end end, fun (V382) -> fun (V383) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V382, V383)) end end, fun (V384) -> fun (V385) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V384, V385)) end end, fun (V386) -> fun (V387) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V386, V387)) end end, fun (V388) -> fun (V389) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V388, V389)) end end}, V370, V371)) end end}, V236, V237)) end end, fun (V390) -> fun (V391) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V392) -> fun (V393) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V394) -> fun (V395) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V394, V395)) end end, fun (V396) -> fun (V397) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V396, V397)) end end}, V392, V393)) end end, fun (V398) -> fun (V399) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V400) -> fun (V401) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V400, V401)) end end, fun (V402) -> fun (V403) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V402, V403)) end end}, V398, V399)) end end}, fun (V404) -> fun (V405) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V406) -> fun (V407) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V406, V407)) end end, fun (V408) -> fun (V409) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V408, V409)) end end}, fun (V410) -> fun (V411) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V410, V411)) end end, fun (V412) -> fun (V413) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V412, V413)) end end, fun (V414) -> fun (V415) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V414, V415)) end end, fun (V416) -> fun (V417) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V416, V417)) end end, fun (V418) -> fun (V419) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V418, V419)) end end, fun (V420) -> fun (V421) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V420, V421)) end end, fun (V422) -> fun (V423) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V422, V423)) end end}, V404, V405)) end end, fun (V424) -> fun (V425) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V426) -> fun (V427) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V426, V427)) end end, fun (V428) -> fun (V429) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V428, V429)) end end}, fun (V430) -> fun (V431) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V430, V431)) end end, fun (V432) -> fun (V433) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V432, V433)) end end, fun (V434) -> fun (V435) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V434, V435)) end end, fun (V436) -> fun (V437) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V436, V437)) end end, fun (V438) -> fun (V439) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V438, V439)) end end, fun (V440) -> fun (V441) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V440, V441)) end end, fun (V442) -> fun (V443) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V442, V443)) end end}, V424, V425)) end end, fun (V444) -> fun (V445) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V446) -> fun (V447) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V446, V447)) end end, fun (V448) -> fun (V449) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V448, V449)) end end}, fun (V450) -> fun (V451) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V450, V451)) end end, fun (V452) -> fun (V453) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V452, V453)) end end, fun (V454) -> fun (V455) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V454, V455)) end end, fun (V456) -> fun (V457) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V456, V457)) end end, fun (V458) -> fun (V459) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V458, V459)) end end, fun (V460) -> fun (V461) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V460, V461)) end end, fun (V462) -> fun (V463) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V462, V463)) end end}, V444, V445)) end end, fun (V464) -> fun (V465) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V466) -> fun (V467) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V466, V467)) end end, fun (V468) -> fun (V469) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V468, V469)) end end}, fun (V470) -> fun (V471) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V470, V471)) end end, fun (V472) -> fun (V473) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V472, V473)) end end, fun (V474) -> fun (V475) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V474, V475)) end end, fun (V476) -> fun (V477) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V476, V477)) end end, fun (V478) -> fun (V479) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V478, V479)) end end, fun (V480) -> fun (V481) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V480, V481)) end end, fun (V482) -> fun (V483) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V482, V483)) end end}, V464, V465)) end end, fun (V484) -> fun (V485) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V486) -> fun (V487) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V486, V487)) end end, fun (V488) -> fun (V489) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V488, V489)) end end}, fun (V490) -> fun (V491) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V490, V491)) end end, fun (V492) -> fun (V493) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V492, V493)) end end, fun (V494) -> fun (V495) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V494, V495)) end end, fun (V496) -> fun (V497) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V496, V497)) end end, fun (V498) -> fun (V499) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V498, V499)) end end, fun (V500) -> fun (V501) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V500, V501)) end end, fun (V502) -> fun (V503) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V502, V503)) end end}, V484, V485)) end end, fun (V504) -> fun (V505) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V506) -> fun (V507) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V506, V507)) end end, fun (V508) -> fun (V509) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V508, V509)) end end}, fun (V510) -> fun (V511) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V510, V511)) end end, fun (V512) -> fun (V513) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V512, V513)) end end, fun (V514) -> fun (V515) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V514, V515)) end end, fun (V516) -> fun (V517) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V516, V517)) end end, fun (V518) -> fun (V519) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V518, V519)) end end, fun (V520) -> fun (V521) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V520, V521)) end end, fun (V522) -> fun (V523) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V522, V523)) end end}, V504, V505)) end end, fun (V524) -> fun (V525) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V526) -> fun (V527) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V526, V527)) end end, fun (V528) -> fun (V529) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V528, V529)) end end}, fun (V530) -> fun (V531) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V530, V531)) end end, fun (V532) -> fun (V533) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V532, V533)) end end, fun (V534) -> fun (V535) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V534, V535)) end end, fun (V536) -> fun (V537) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V536, V537)) end end, fun (V538) -> fun (V539) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V538, V539)) end end, fun (V540) -> fun (V541) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V540, V541)) end end, fun (V542) -> fun (V543) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V542, V543)) end end}, V524, V525)) end end}, V390, V391)) end end, fun (V544) -> fun (V545) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V546) -> fun (V547) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V548) -> fun (V549) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V548, V549)) end end, fun (V550) -> fun (V551) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V550, V551)) end end}, V546, V547)) end end, fun (V552) -> fun (V553) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V554) -> fun (V555) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V554, V555)) end end, fun (V556) -> fun (V557) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V556, V557)) end end}, V552, V553)) end end}, fun (V558) -> fun (V559) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V560) -> fun (V561) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V560, V561)) end end, fun (V562) -> fun (V563) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V562, V563)) end end}, fun (V564) -> fun (V565) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V564, V565)) end end, fun (V566) -> fun (V567) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V566, V567)) end end, fun (V568) -> fun (V569) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V568, V569)) end end, fun (V570) -> fun (V571) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V570, V571)) end end, fun (V572) -> fun (V573) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V572, V573)) end end, fun (V574) -> fun (V575) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V574, V575)) end end, fun (V576) -> fun (V577) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V576, V577)) end end}, V558, V559)) end end, fun (V578) -> fun (V579) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V580) -> fun (V581) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V580, V581)) end end, fun (V582) -> fun (V583) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V582, V583)) end end}, fun (V584) -> fun (V585) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V584, V585)) end end, fun (V586) -> fun (V587) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V586, V587)) end end, fun (V588) -> fun (V589) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V588, V589)) end end, fun (V590) -> fun (V591) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V590, V591)) end end, fun (V592) -> fun (V593) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V592, V593)) end end, fun (V594) -> fun (V595) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V594, V595)) end end, fun (V596) -> fun (V597) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V596, V597)) end end}, V578, V579)) end end, fun (V598) -> fun (V599) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V600) -> fun (V601) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V600, V601)) end end, fun (V602) -> fun (V603) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V602, V603)) end end}, fun (V604) -> fun (V605) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V604, V605)) end end, fun (V606) -> fun (V607) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V606, V607)) end end, fun (V608) -> fun (V609) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V608, V609)) end end, fun (V610) -> fun (V611) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V610, V611)) end end, fun (V612) -> fun (V613) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V612, V613)) end end, fun (V614) -> fun (V615) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V614, V615)) end end, fun (V616) -> fun (V617) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V616, V617)) end end}, V598, V599)) end end, fun (V618) -> fun (V619) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V620) -> fun (V621) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V620, V621)) end end, fun (V622) -> fun (V623) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V622, V623)) end end}, fun (V624) -> fun (V625) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V624, V625)) end end, fun (V626) -> fun (V627) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V626, V627)) end end, fun (V628) -> fun (V629) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V628, V629)) end end, fun (V630) -> fun (V631) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V630, V631)) end end, fun (V632) -> fun (V633) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V632, V633)) end end, fun (V634) -> fun (V635) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V634, V635)) end end, fun (V636) -> fun (V637) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V636, V637)) end end}, V618, V619)) end end, fun (V638) -> fun (V639) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V640) -> fun (V641) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V640, V641)) end end, fun (V642) -> fun (V643) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V642, V643)) end end}, fun (V644) -> fun (V645) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V644, V645)) end end, fun (V646) -> fun (V647) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V646, V647)) end end, fun (V648) -> fun (V649) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V648, V649)) end end, fun (V650) -> fun (V651) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V650, V651)) end end, fun (V652) -> fun (V653) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V652, V653)) end end, fun (V654) -> fun (V655) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V654, V655)) end end, fun (V656) -> fun (V657) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V656, V657)) end end}, V638, V639)) end end, fun (V658) -> fun (V659) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V660) -> fun (V661) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V660, V661)) end end, fun (V662) -> fun (V663) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V662, V663)) end end}, fun (V664) -> fun (V665) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V664, V665)) end end, fun (V666) -> fun (V667) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V666, V667)) end end, fun (V668) -> fun (V669) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V668, V669)) end end, fun (V670) -> fun (V671) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V670, V671)) end end, fun (V672) -> fun (V673) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V672, V673)) end end, fun (V674) -> fun (V675) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V674, V675)) end end, fun (V676) -> fun (V677) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V676, V677)) end end}, V658, V659)) end end, fun (V678) -> fun (V679) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V680) -> fun (V681) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V680, V681)) end end, fun (V682) -> fun (V683) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V682, V683)) end end}, fun (V684) -> fun (V685) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V684, V685)) end end, fun (V686) -> fun (V687) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V686, V687)) end end, fun (V688) -> fun (V689) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V688, V689)) end end, fun (V690) -> fun (V691) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V690, V691)) end end, fun (V692) -> fun (V693) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V692, V693)) end end, fun (V694) -> fun (V695) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V694, V695)) end end, fun (V696) -> fun (V697) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V696, V697)) end end}, V678, V679)) end end}, V544, V545)) end end, fun (V698) -> fun (V699) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V700) -> fun (V701) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V702) -> fun (V703) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V702, V703)) end end, fun (V704) -> fun (V705) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V704, V705)) end end}, V700, V701)) end end, fun (V706) -> fun (V707) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V708) -> fun (V709) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V708, V709)) end end, fun (V710) -> fun (V711) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V710, V711)) end end}, V706, V707)) end end}, fun (V712) -> fun (V713) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V714) -> fun (V715) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V714, V715)) end end, fun (V716) -> fun (V717) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V716, V717)) end end}, fun (V718) -> fun (V719) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V718, V719)) end end, fun (V720) -> fun (V721) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V720, V721)) end end, fun (V722) -> fun (V723) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V722, V723)) end end, fun (V724) -> fun (V725) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V724, V725)) end end, fun (V726) -> fun (V727) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V726, V727)) end end, fun (V728) -> fun (V729) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V728, V729)) end end, fun (V730) -> fun (V731) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V730, V731)) end end}, V712, V713)) end end, fun (V732) -> fun (V733) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V734) -> fun (V735) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V734, V735)) end end, fun (V736) -> fun (V737) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V736, V737)) end end}, fun (V738) -> fun (V739) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V738, V739)) end end, fun (V740) -> fun (V741) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V740, V741)) end end, fun (V742) -> fun (V743) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V742, V743)) end end, fun (V744) -> fun (V745) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V744, V745)) end end, fun (V746) -> fun (V747) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V746, V747)) end end, fun (V748) -> fun (V749) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V748, V749)) end end, fun (V750) -> fun (V751) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V750, V751)) end end}, V732, V733)) end end, fun (V752) -> fun (V753) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V754) -> fun (V755) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V754, V755)) end end, fun (V756) -> fun (V757) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V756, V757)) end end}, fun (V758) -> fun (V759) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V758, V759)) end end, fun (V760) -> fun (V761) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V760, V761)) end end, fun (V762) -> fun (V763) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V762, V763)) end end, fun (V764) -> fun (V765) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V764, V765)) end end, fun (V766) -> fun (V767) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V766, V767)) end end, fun (V768) -> fun (V769) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V768, V769)) end end, fun (V770) -> fun (V771) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V770, V771)) end end}, V752, V753)) end end, fun (V772) -> fun (V773) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V774) -> fun (V775) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V774, V775)) end end, fun (V776) -> fun (V777) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V776, V777)) end end}, fun (V778) -> fun (V779) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V778, V779)) end end, fun (V780) -> fun (V781) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V780, V781)) end end, fun (V782) -> fun (V783) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V782, V783)) end end, fun (V784) -> fun (V785) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V784, V785)) end end, fun (V786) -> fun (V787) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V786, V787)) end end, fun (V788) -> fun (V789) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V788, V789)) end end, fun (V790) -> fun (V791) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V790, V791)) end end}, V772, V773)) end end, fun (V792) -> fun (V793) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V794) -> fun (V795) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V794, V795)) end end, fun (V796) -> fun (V797) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V796, V797)) end end}, fun (V798) -> fun (V799) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V798, V799)) end end, fun (V800) -> fun (V801) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V800, V801)) end end, fun (V802) -> fun (V803) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V802, V803)) end end, fun (V804) -> fun (V805) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V804, V805)) end end, fun (V806) -> fun (V807) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V806, V807)) end end, fun (V808) -> fun (V809) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V808, V809)) end end, fun (V810) -> fun (V811) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V810, V811)) end end}, V792, V793)) end end, fun (V812) -> fun (V813) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V814) -> fun (V815) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V814, V815)) end end, fun (V816) -> fun (V817) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V816, V817)) end end}, fun (V818) -> fun (V819) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V818, V819)) end end, fun (V820) -> fun (V821) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V820, V821)) end end, fun (V822) -> fun (V823) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V822, V823)) end end, fun (V824) -> fun (V825) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V824, V825)) end end, fun (V826) -> fun (V827) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V826, V827)) end end, fun (V828) -> fun (V829) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V828, V829)) end end, fun (V830) -> fun (V831) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V830, V831)) end end}, V812, V813)) end end, fun (V832) -> fun (V833) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V834) -> fun (V835) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V834, V835)) end end, fun (V836) -> fun (V837) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V836, V837)) end end}, fun (V838) -> fun (V839) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V838, V839)) end end, fun (V840) -> fun (V841) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V840, V841)) end end, fun (V842) -> fun (V843) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V842, V843)) end end, fun (V844) -> fun (V845) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V844, V845)) end end, fun (V846) -> fun (V847) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V846, V847)) end end, fun (V848) -> fun (V849) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V848, V849)) end end, fun (V850) -> fun (V851) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V850, V851)) end end}, V832, V833)) end end}, V698, V699)) end end, fun (V852) -> fun (V853) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V854) -> fun (V855) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V856) -> fun (V857) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V856, V857)) end end, fun (V858) -> fun (V859) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V858, V859)) end end}, V854, V855)) end end, fun (V860) -> fun (V861) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V862) -> fun (V863) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V862, V863)) end end, fun (V864) -> fun (V865) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V864, V865)) end end}, V860, V861)) end end}, fun (V866) -> fun (V867) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V868) -> fun (V869) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V868, V869)) end end, fun (V870) -> fun (V871) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V870, V871)) end end}, fun (V872) -> fun (V873) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V872, V873)) end end, fun (V874) -> fun (V875) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V874, V875)) end end, fun (V876) -> fun (V877) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V876, V877)) end end, fun (V878) -> fun (V879) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V878, V879)) end end, fun (V880) -> fun (V881) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V880, V881)) end end, fun (V882) -> fun (V883) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V882, V883)) end end, fun (V884) -> fun (V885) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V884, V885)) end end}, V866, V867)) end end, fun (V886) -> fun (V887) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V888) -> fun (V889) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V888, V889)) end end, fun (V890) -> fun (V891) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V890, V891)) end end}, fun (V892) -> fun (V893) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V892, V893)) end end, fun (V894) -> fun (V895) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V894, V895)) end end, fun (V896) -> fun (V897) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V896, V897)) end end, fun (V898) -> fun (V899) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V898, V899)) end end, fun (V900) -> fun (V901) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V900, V901)) end end, fun (V902) -> fun (V903) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V902, V903)) end end, fun (V904) -> fun (V905) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V904, V905)) end end}, V886, V887)) end end, fun (V906) -> fun (V907) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V908) -> fun (V909) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V908, V909)) end end, fun (V910) -> fun (V911) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V910, V911)) end end}, fun (V912) -> fun (V913) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V912, V913)) end end, fun (V914) -> fun (V915) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V914, V915)) end end, fun (V916) -> fun (V917) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V916, V917)) end end, fun (V918) -> fun (V919) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V918, V919)) end end, fun (V920) -> fun (V921) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V920, V921)) end end, fun (V922) -> fun (V923) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V922, V923)) end end, fun (V924) -> fun (V925) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V924, V925)) end end}, V906, V907)) end end, fun (V926) -> fun (V927) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V928) -> fun (V929) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V928, V929)) end end, fun (V930) -> fun (V931) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V930, V931)) end end}, fun (V932) -> fun (V933) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V932, V933)) end end, fun (V934) -> fun (V935) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V934, V935)) end end, fun (V936) -> fun (V937) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V936, V937)) end end, fun (V938) -> fun (V939) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V938, V939)) end end, fun (V940) -> fun (V941) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V940, V941)) end end, fun (V942) -> fun (V943) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V942, V943)) end end, fun (V944) -> fun (V945) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V944, V945)) end end}, V926, V927)) end end, fun (V946) -> fun (V947) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V948) -> fun (V949) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V948, V949)) end end, fun (V950) -> fun (V951) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V950, V951)) end end}, fun (V952) -> fun (V953) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V952, V953)) end end, fun (V954) -> fun (V955) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V954, V955)) end end, fun (V956) -> fun (V957) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V956, V957)) end end, fun (V958) -> fun (V959) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V958, V959)) end end, fun (V960) -> fun (V961) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V960, V961)) end end, fun (V962) -> fun (V963) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V962, V963)) end end, fun (V964) -> fun (V965) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V964, V965)) end end}, V946, V947)) end end, fun (V966) -> fun (V967) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V968) -> fun (V969) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V968, V969)) end end, fun (V970) -> fun (V971) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V970, V971)) end end}, fun (V972) -> fun (V973) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V972, V973)) end end, fun (V974) -> fun (V975) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V974, V975)) end end, fun (V976) -> fun (V977) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V976, V977)) end end, fun (V978) -> fun (V979) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V978, V979)) end end, fun (V980) -> fun (V981) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V980, V981)) end end, fun (V982) -> fun (V983) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V982, V983)) end end, fun (V984) -> fun (V985) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V984, V985)) end end}, V966, V967)) end end, fun (V986) -> fun (V987) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V988) -> fun (V989) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V988, V989)) end end, fun (V990) -> fun (V991) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V990, V991)) end end}, fun (V992) -> fun (V993) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V992, V993)) end end, fun (V994) -> fun (V995) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V994, V995)) end end, fun (V996) -> fun (V997) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V996, V997)) end end, fun (V998) -> fun (V999) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V998, V999)) end end, fun (V1000) -> fun (V1001) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1000, V1001)) end end, fun (V1002) -> fun (V1003) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1002, V1003)) end end, fun (V1004) -> fun (V1005) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1004, V1005)) end end}, V986, V987)) end end}, V852, V853)) end end, fun (V1006) -> fun (V1007) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1008) -> fun (V1009) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1010) -> fun (V1011) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1010, V1011)) end end, fun (V1012) -> fun (V1013) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1012, V1013)) end end}, V1008, V1009)) end end, fun (V1014) -> fun (V1015) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1016) -> fun (V1017) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1016, V1017)) end end, fun (V1018) -> fun (V1019) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1018, V1019)) end end}, V1014, V1015)) end end}, fun (V1020) -> fun (V1021) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1022) -> fun (V1023) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1022, V1023)) end end, fun (V1024) -> fun (V1025) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1024, V1025)) end end}, fun (V1026) -> fun (V1027) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1026, V1027)) end end, fun (V1028) -> fun (V1029) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1028, V1029)) end end, fun (V1030) -> fun (V1031) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1030, V1031)) end end, fun (V1032) -> fun (V1033) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1032, V1033)) end end, fun (V1034) -> fun (V1035) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1034, V1035)) end end, fun (V1036) -> fun (V1037) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1036, V1037)) end end, fun (V1038) -> fun (V1039) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1038, V1039)) end end}, V1020, V1021)) end end, fun (V1040) -> fun (V1041) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1042) -> fun (V1043) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1042, V1043)) end end, fun (V1044) -> fun (V1045) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1044, V1045)) end end}, fun (V1046) -> fun (V1047) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1046, V1047)) end end, fun (V1048) -> fun (V1049) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1048, V1049)) end end, fun (V1050) -> fun (V1051) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1050, V1051)) end end, fun (V1052) -> fun (V1053) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1052, V1053)) end end, fun (V1054) -> fun (V1055) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1054, V1055)) end end, fun (V1056) -> fun (V1057) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1056, V1057)) end end, fun (V1058) -> fun (V1059) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1058, V1059)) end end}, V1040, V1041)) end end, fun (V1060) -> fun (V1061) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1062) -> fun (V1063) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1062, V1063)) end end, fun (V1064) -> fun (V1065) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1064, V1065)) end end}, fun (V1066) -> fun (V1067) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1066, V1067)) end end, fun (V1068) -> fun (V1069) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1068, V1069)) end end, fun (V1070) -> fun (V1071) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1070, V1071)) end end, fun (V1072) -> fun (V1073) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1072, V1073)) end end, fun (V1074) -> fun (V1075) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1074, V1075)) end end, fun (V1076) -> fun (V1077) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1076, V1077)) end end, fun (V1078) -> fun (V1079) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1078, V1079)) end end}, V1060, V1061)) end end, fun (V1080) -> fun (V1081) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1082) -> fun (V1083) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1082, V1083)) end end, fun (V1084) -> fun (V1085) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1084, V1085)) end end}, fun (V1086) -> fun (V1087) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1086, V1087)) end end, fun (V1088) -> fun (V1089) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1088, V1089)) end end, fun (V1090) -> fun (V1091) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1090, V1091)) end end, fun (V1092) -> fun (V1093) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1092, V1093)) end end, fun (V1094) -> fun (V1095) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1094, V1095)) end end, fun (V1096) -> fun (V1097) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1096, V1097)) end end, fun (V1098) -> fun (V1099) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1098, V1099)) end end}, V1080, V1081)) end end, fun (V1100) -> fun (V1101) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1102) -> fun (V1103) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1102, V1103)) end end, fun (V1104) -> fun (V1105) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1104, V1105)) end end}, fun (V1106) -> fun (V1107) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1106, V1107)) end end, fun (V1108) -> fun (V1109) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1108, V1109)) end end, fun (V1110) -> fun (V1111) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1110, V1111)) end end, fun (V1112) -> fun (V1113) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1112, V1113)) end end, fun (V1114) -> fun (V1115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1114, V1115)) end end, fun (V1116) -> fun (V1117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1116, V1117)) end end, fun (V1118) -> fun (V1119) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1118, V1119)) end end}, V1100, V1101)) end end, fun (V1120) -> fun (V1121) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1122) -> fun (V1123) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1122, V1123)) end end, fun (V1124) -> fun (V1125) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1124, V1125)) end end}, fun (V1126) -> fun (V1127) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1126, V1127)) end end, fun (V1128) -> fun (V1129) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1128, V1129)) end end, fun (V1130) -> fun (V1131) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1130, V1131)) end end, fun (V1132) -> fun (V1133) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1132, V1133)) end end, fun (V1134) -> fun (V1135) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1134, V1135)) end end, fun (V1136) -> fun (V1137) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1136, V1137)) end end, fun (V1138) -> fun (V1139) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1138, V1139)) end end}, V1120, V1121)) end end, fun (V1140) -> fun (V1141) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1142) -> fun (V1143) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1142, V1143)) end end, fun (V1144) -> fun (V1145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1144, V1145)) end end}, fun (V1146) -> fun (V1147) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1146, V1147)) end end, fun (V1148) -> fun (V1149) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1148, V1149)) end end, fun (V1150) -> fun (V1151) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1150, V1151)) end end, fun (V1152) -> fun (V1153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1152, V1153)) end end, fun (V1154) -> fun (V1155) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1154, V1155)) end end, fun (V1156) -> fun (V1157) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1156, V1157)) end end, fun (V1158) -> fun (V1159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1158, V1159)) end end}, V1140, V1141)) end end}, V1006, V1007)) end end, fun (V1160) -> fun (V1161) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1162) -> fun (V1163) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1164) -> fun (V1165) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1164, V1165)) end end, fun (V1166) -> fun (V1167) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1166, V1167)) end end}, V1162, V1163)) end end, fun (V1168) -> fun (V1169) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1170) -> fun (V1171) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1170, V1171)) end end, fun (V1172) -> fun (V1173) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1172, V1173)) end end}, V1168, V1169)) end end}, fun (V1174) -> fun (V1175) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1176) -> fun (V1177) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1176, V1177)) end end, fun (V1178) -> fun (V1179) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1178, V1179)) end end}, fun (V1180) -> fun (V1181) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1180, V1181)) end end, fun (V1182) -> fun (V1183) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1182, V1183)) end end, fun (V1184) -> fun (V1185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1184, V1185)) end end, fun (V1186) -> fun (V1187) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1186, V1187)) end end, fun (V1188) -> fun (V1189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1188, V1189)) end end, fun (V1190) -> fun (V1191) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1190, V1191)) end end, fun (V1192) -> fun (V1193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1192, V1193)) end end}, V1174, V1175)) end end, fun (V1194) -> fun (V1195) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1196) -> fun (V1197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1196, V1197)) end end, fun (V1198) -> fun (V1199) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1198, V1199)) end end}, fun (V1200) -> fun (V1201) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1200, V1201)) end end, fun (V1202) -> fun (V1203) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1202, V1203)) end end, fun (V1204) -> fun (V1205) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1204, V1205)) end end, fun (V1206) -> fun (V1207) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1206, V1207)) end end, fun (V1208) -> fun (V1209) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1208, V1209)) end end, fun (V1210) -> fun (V1211) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1210, V1211)) end end, fun (V1212) -> fun (V1213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1212, V1213)) end end}, V1194, V1195)) end end, fun (V1214) -> fun (V1215) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1216) -> fun (V1217) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1216, V1217)) end end, fun (V1218) -> fun (V1219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1218, V1219)) end end}, fun (V1220) -> fun (V1221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1220, V1221)) end end, fun (V1222) -> fun (V1223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1222, V1223)) end end, fun (V1224) -> fun (V1225) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1224, V1225)) end end, fun (V1226) -> fun (V1227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1226, V1227)) end end, fun (V1228) -> fun (V1229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1228, V1229)) end end, fun (V1230) -> fun (V1231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1230, V1231)) end end, fun (V1232) -> fun (V1233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1232, V1233)) end end}, V1214, V1215)) end end, fun (V1234) -> fun (V1235) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1236) -> fun (V1237) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1236, V1237)) end end, fun (V1238) -> fun (V1239) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1238, V1239)) end end}, fun (V1240) -> fun (V1241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1240, V1241)) end end, fun (V1242) -> fun (V1243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1242, V1243)) end end, fun (V1244) -> fun (V1245) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1244, V1245)) end end, fun (V1246) -> fun (V1247) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1246, V1247)) end end, fun (V1248) -> fun (V1249) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1248, V1249)) end end, fun (V1250) -> fun (V1251) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1250, V1251)) end end, fun (V1252) -> fun (V1253) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1252, V1253)) end end}, V1234, V1235)) end end, fun (V1254) -> fun (V1255) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1256) -> fun (V1257) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1256, V1257)) end end, fun (V1258) -> fun (V1259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1258, V1259)) end end}, fun (V1260) -> fun (V1261) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1260, V1261)) end end, fun (V1262) -> fun (V1263) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1262, V1263)) end end, fun (V1264) -> fun (V1265) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1264, V1265)) end end, fun (V1266) -> fun (V1267) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1266, V1267)) end end, fun (V1268) -> fun (V1269) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1268, V1269)) end end, fun (V1270) -> fun (V1271) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1270, V1271)) end end, fun (V1272) -> fun (V1273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1272, V1273)) end end}, V1254, V1255)) end end, fun (V1274) -> fun (V1275) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1276) -> fun (V1277) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1276, V1277)) end end, fun (V1278) -> fun (V1279) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1278, V1279)) end end}, fun (V1280) -> fun (V1281) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1280, V1281)) end end, fun (V1282) -> fun (V1283) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1282, V1283)) end end, fun (V1284) -> fun (V1285) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1284, V1285)) end end, fun (V1286) -> fun (V1287) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1286, V1287)) end end, fun (V1288) -> fun (V1289) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1288, V1289)) end end, fun (V1290) -> fun (V1291) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1290, V1291)) end end, fun (V1292) -> fun (V1293) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1292, V1293)) end end}, V1274, V1275)) end end, fun (V1294) -> fun (V1295) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1296) -> fun (V1297) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1296, V1297)) end end, fun (V1298) -> fun (V1299) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1298, V1299)) end end}, fun (V1300) -> fun (V1301) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1300, V1301)) end end, fun (V1302) -> fun (V1303) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1302, V1303)) end end, fun (V1304) -> fun (V1305) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1304, V1305)) end end, fun (V1306) -> fun (V1307) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1306, V1307)) end end, fun (V1308) -> fun (V1309) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1308, V1309)) end end, fun (V1310) -> fun (V1311) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1310, V1311)) end end, fun (V1312) -> fun (V1313) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1312, V1313)) end end}, V1294, V1295)) end end}, V1160, V1161)) end end}, V188, V189)) end end, fun (V1314) -> fun (V1315) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1316) -> fun (V1317) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1316, V1317)) end end, fun (V1318) -> fun (V1319) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V1318, V1319)) end end}, fun (V1320) -> fun (V1321) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V1320, V1321)) end end, fun (V1322) -> fun (V1323) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V1322, V1323)) end end, fun (V1324) -> fun (V1325) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V1324, V1325)) end end, fun (V1326) -> fun (V1327) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V1326, V1327)) end end, fun (V1328) -> fun (V1329) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V1328, V1329)) end end, fun (V1330) -> fun (V1331) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V1330, V1331)) end end, fun (V1332) -> fun (V1333) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V1332, V1333)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1334) -> fun (V1335) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V1336) -> fun (V1337) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1338) -> fun (V1339) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1338, V1339)) end end, fun (V1340) -> fun (V1341) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1340, V1341)) end end}, V1336, V1337)) end end, fun (V1342) -> fun (V1343) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1344) -> fun (V1345) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1344, V1345)) end end, fun (V1346) -> fun (V1347) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1346, V1347)) end end}, V1342, V1343)) end end}, V1334, V1335)) end end, fun (V1348) -> fun (V1349) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V1350) -> fun (V1351) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1352) -> fun (V1353) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1352, V1353)) end end, fun (V1354) -> fun (V1355) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1354, V1355)) end end}, V1350, V1351)) end end, fun (V1356) -> fun (V1357) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1358) -> fun (V1359) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1358, V1359)) end end, fun (V1360) -> fun (V1361) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1360, V1361)) end end}, V1356, V1357)) end end}, V1348, V1349)) end end}, fun (V1362) -> fun (V1363) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1364) -> fun (V1365) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1366) -> fun (V1367) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1366, V1367)) end end, fun (V1368) -> fun (V1369) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1368, V1369)) end end}, V1364, V1365)) end end, fun (V1370) -> fun (V1371) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1372) -> fun (V1373) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1372, V1373)) end end, fun (V1374) -> fun (V1375) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1374, V1375)) end end}, V1370, V1371)) end end}, fun (V1376) -> fun (V1377) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1378) -> fun (V1379) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1378, V1379)) end end, fun (V1380) -> fun (V1381) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1380, V1381)) end end}, fun (V1382) -> fun (V1383) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1382, V1383)) end end, fun (V1384) -> fun (V1385) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1384, V1385)) end end, fun (V1386) -> fun (V1387) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1386, V1387)) end end, fun (V1388) -> fun (V1389) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1388, V1389)) end end, fun (V1390) -> fun (V1391) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1390, V1391)) end end, fun (V1392) -> fun (V1393) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1392, V1393)) end end, fun (V1394) -> fun (V1395) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1394, V1395)) end end}, V1376, V1377)) end end, fun (V1396) -> fun (V1397) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1398) -> fun (V1399) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1398, V1399)) end end, fun (V1400) -> fun (V1401) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1400, V1401)) end end}, fun (V1402) -> fun (V1403) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1402, V1403)) end end, fun (V1404) -> fun (V1405) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1404, V1405)) end end, fun (V1406) -> fun (V1407) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1406, V1407)) end end, fun (V1408) -> fun (V1409) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1408, V1409)) end end, fun (V1410) -> fun (V1411) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1410, V1411)) end end, fun (V1412) -> fun (V1413) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1412, V1413)) end end, fun (V1414) -> fun (V1415) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1414, V1415)) end end}, V1396, V1397)) end end, fun (V1416) -> fun (V1417) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1418) -> fun (V1419) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1418, V1419)) end end, fun (V1420) -> fun (V1421) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1420, V1421)) end end}, fun (V1422) -> fun (V1423) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1422, V1423)) end end, fun (V1424) -> fun (V1425) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1424, V1425)) end end, fun (V1426) -> fun (V1427) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1426, V1427)) end end, fun (V1428) -> fun (V1429) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1428, V1429)) end end, fun (V1430) -> fun (V1431) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1430, V1431)) end end, fun (V1432) -> fun (V1433) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1432, V1433)) end end, fun (V1434) -> fun (V1435) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1434, V1435)) end end}, V1416, V1417)) end end, fun (V1436) -> fun (V1437) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1438) -> fun (V1439) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1438, V1439)) end end, fun (V1440) -> fun (V1441) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1440, V1441)) end end}, fun (V1442) -> fun (V1443) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1442, V1443)) end end, fun (V1444) -> fun (V1445) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1444, V1445)) end end, fun (V1446) -> fun (V1447) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1446, V1447)) end end, fun (V1448) -> fun (V1449) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1448, V1449)) end end, fun (V1450) -> fun (V1451) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1450, V1451)) end end, fun (V1452) -> fun (V1453) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1452, V1453)) end end, fun (V1454) -> fun (V1455) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1454, V1455)) end end}, V1436, V1437)) end end, fun (V1456) -> fun (V1457) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1458) -> fun (V1459) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1458, V1459)) end end, fun (V1460) -> fun (V1461) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1460, V1461)) end end}, fun (V1462) -> fun (V1463) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1462, V1463)) end end, fun (V1464) -> fun (V1465) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1464, V1465)) end end, fun (V1466) -> fun (V1467) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1466, V1467)) end end, fun (V1468) -> fun (V1469) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1468, V1469)) end end, fun (V1470) -> fun (V1471) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1470, V1471)) end end, fun (V1472) -> fun (V1473) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1472, V1473)) end end, fun (V1474) -> fun (V1475) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1474, V1475)) end end}, V1456, V1457)) end end, fun (V1476) -> fun (V1477) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1478) -> fun (V1479) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1478, V1479)) end end, fun (V1480) -> fun (V1481) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1480, V1481)) end end}, fun (V1482) -> fun (V1483) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1482, V1483)) end end, fun (V1484) -> fun (V1485) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1484, V1485)) end end, fun (V1486) -> fun (V1487) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1486, V1487)) end end, fun (V1488) -> fun (V1489) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1488, V1489)) end end, fun (V1490) -> fun (V1491) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1490, V1491)) end end, fun (V1492) -> fun (V1493) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1492, V1493)) end end, fun (V1494) -> fun (V1495) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1494, V1495)) end end}, V1476, V1477)) end end, fun (V1496) -> fun (V1497) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1498) -> fun (V1499) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1498, V1499)) end end, fun (V1500) -> fun (V1501) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1500, V1501)) end end}, fun (V1502) -> fun (V1503) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1502, V1503)) end end, fun (V1504) -> fun (V1505) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1504, V1505)) end end, fun (V1506) -> fun (V1507) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1506, V1507)) end end, fun (V1508) -> fun (V1509) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1508, V1509)) end end, fun (V1510) -> fun (V1511) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1510, V1511)) end end, fun (V1512) -> fun (V1513) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1512, V1513)) end end, fun (V1514) -> fun (V1515) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1514, V1515)) end end}, V1496, V1497)) end end}, V1362, V1363)) end end, fun (V1516) -> fun (V1517) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1518) -> fun (V1519) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1520) -> fun (V1521) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1520, V1521)) end end, fun (V1522) -> fun (V1523) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1522, V1523)) end end}, V1518, V1519)) end end, fun (V1524) -> fun (V1525) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1526) -> fun (V1527) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1526, V1527)) end end, fun (V1528) -> fun (V1529) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1528, V1529)) end end}, V1524, V1525)) end end}, fun (V1530) -> fun (V1531) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1532) -> fun (V1533) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1532, V1533)) end end, fun (V1534) -> fun (V1535) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1534, V1535)) end end}, fun (V1536) -> fun (V1537) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1536, V1537)) end end, fun (V1538) -> fun (V1539) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1538, V1539)) end end, fun (V1540) -> fun (V1541) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1540, V1541)) end end, fun (V1542) -> fun (V1543) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1542, V1543)) end end, fun (V1544) -> fun (V1545) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1544, V1545)) end end, fun (V1546) -> fun (V1547) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1546, V1547)) end end, fun (V1548) -> fun (V1549) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1548, V1549)) end end}, V1530, V1531)) end end, fun (V1550) -> fun (V1551) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1552) -> fun (V1553) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1552, V1553)) end end, fun (V1554) -> fun (V1555) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1554, V1555)) end end}, fun (V1556) -> fun (V1557) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1556, V1557)) end end, fun (V1558) -> fun (V1559) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1558, V1559)) end end, fun (V1560) -> fun (V1561) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1560, V1561)) end end, fun (V1562) -> fun (V1563) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1562, V1563)) end end, fun (V1564) -> fun (V1565) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1564, V1565)) end end, fun (V1566) -> fun (V1567) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1566, V1567)) end end, fun (V1568) -> fun (V1569) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1568, V1569)) end end}, V1550, V1551)) end end, fun (V1570) -> fun (V1571) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1572) -> fun (V1573) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1572, V1573)) end end, fun (V1574) -> fun (V1575) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1574, V1575)) end end}, fun (V1576) -> fun (V1577) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1576, V1577)) end end, fun (V1578) -> fun (V1579) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1578, V1579)) end end, fun (V1580) -> fun (V1581) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1580, V1581)) end end, fun (V1582) -> fun (V1583) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1582, V1583)) end end, fun (V1584) -> fun (V1585) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1584, V1585)) end end, fun (V1586) -> fun (V1587) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1586, V1587)) end end, fun (V1588) -> fun (V1589) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1588, V1589)) end end}, V1570, V1571)) end end, fun (V1590) -> fun (V1591) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1592) -> fun (V1593) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1592, V1593)) end end, fun (V1594) -> fun (V1595) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1594, V1595)) end end}, fun (V1596) -> fun (V1597) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1596, V1597)) end end, fun (V1598) -> fun (V1599) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1598, V1599)) end end, fun (V1600) -> fun (V1601) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1600, V1601)) end end, fun (V1602) -> fun (V1603) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1602, V1603)) end end, fun (V1604) -> fun (V1605) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1604, V1605)) end end, fun (V1606) -> fun (V1607) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1606, V1607)) end end, fun (V1608) -> fun (V1609) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1608, V1609)) end end}, V1590, V1591)) end end, fun (V1610) -> fun (V1611) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1612) -> fun (V1613) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1612, V1613)) end end, fun (V1614) -> fun (V1615) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1614, V1615)) end end}, fun (V1616) -> fun (V1617) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1616, V1617)) end end, fun (V1618) -> fun (V1619) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1618, V1619)) end end, fun (V1620) -> fun (V1621) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1620, V1621)) end end, fun (V1622) -> fun (V1623) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1622, V1623)) end end, fun (V1624) -> fun (V1625) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1624, V1625)) end end, fun (V1626) -> fun (V1627) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1626, V1627)) end end, fun (V1628) -> fun (V1629) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1628, V1629)) end end}, V1610, V1611)) end end, fun (V1630) -> fun (V1631) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1632) -> fun (V1633) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1632, V1633)) end end, fun (V1634) -> fun (V1635) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1634, V1635)) end end}, fun (V1636) -> fun (V1637) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1636, V1637)) end end, fun (V1638) -> fun (V1639) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1638, V1639)) end end, fun (V1640) -> fun (V1641) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1640, V1641)) end end, fun (V1642) -> fun (V1643) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1642, V1643)) end end, fun (V1644) -> fun (V1645) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1644, V1645)) end end, fun (V1646) -> fun (V1647) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1646, V1647)) end end, fun (V1648) -> fun (V1649) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1648, V1649)) end end}, V1630, V1631)) end end, fun (V1650) -> fun (V1651) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1652) -> fun (V1653) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1652, V1653)) end end, fun (V1654) -> fun (V1655) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1654, V1655)) end end}, fun (V1656) -> fun (V1657) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1656, V1657)) end end, fun (V1658) -> fun (V1659) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1658, V1659)) end end, fun (V1660) -> fun (V1661) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1660, V1661)) end end, fun (V1662) -> fun (V1663) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1662, V1663)) end end, fun (V1664) -> fun (V1665) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1664, V1665)) end end, fun (V1666) -> fun (V1667) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1666, V1667)) end end, fun (V1668) -> fun (V1669) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1668, V1669)) end end}, V1650, V1651)) end end}, V1516, V1517)) end end, fun (V1670) -> fun (V1671) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1672) -> fun (V1673) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1674) -> fun (V1675) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1674, V1675)) end end, fun (V1676) -> fun (V1677) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1676, V1677)) end end}, V1672, V1673)) end end, fun (V1678) -> fun (V1679) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1680) -> fun (V1681) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1680, V1681)) end end, fun (V1682) -> fun (V1683) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1682, V1683)) end end}, V1678, V1679)) end end}, fun (V1684) -> fun (V1685) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1686) -> fun (V1687) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1686, V1687)) end end, fun (V1688) -> fun (V1689) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1688, V1689)) end end}, fun (V1690) -> fun (V1691) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1690, V1691)) end end, fun (V1692) -> fun (V1693) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1692, V1693)) end end, fun (V1694) -> fun (V1695) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1694, V1695)) end end, fun (V1696) -> fun (V1697) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1696, V1697)) end end, fun (V1698) -> fun (V1699) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1698, V1699)) end end, fun (V1700) -> fun (V1701) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1700, V1701)) end end, fun (V1702) -> fun (V1703) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1702, V1703)) end end}, V1684, V1685)) end end, fun (V1704) -> fun (V1705) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1706) -> fun (V1707) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1706, V1707)) end end, fun (V1708) -> fun (V1709) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1708, V1709)) end end}, fun (V1710) -> fun (V1711) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1710, V1711)) end end, fun (V1712) -> fun (V1713) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1712, V1713)) end end, fun (V1714) -> fun (V1715) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1714, V1715)) end end, fun (V1716) -> fun (V1717) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1716, V1717)) end end, fun (V1718) -> fun (V1719) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1718, V1719)) end end, fun (V1720) -> fun (V1721) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1720, V1721)) end end, fun (V1722) -> fun (V1723) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1722, V1723)) end end}, V1704, V1705)) end end, fun (V1724) -> fun (V1725) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1726) -> fun (V1727) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1726, V1727)) end end, fun (V1728) -> fun (V1729) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1728, V1729)) end end}, fun (V1730) -> fun (V1731) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1730, V1731)) end end, fun (V1732) -> fun (V1733) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1732, V1733)) end end, fun (V1734) -> fun (V1735) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1734, V1735)) end end, fun (V1736) -> fun (V1737) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1736, V1737)) end end, fun (V1738) -> fun (V1739) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1738, V1739)) end end, fun (V1740) -> fun (V1741) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1740, V1741)) end end, fun (V1742) -> fun (V1743) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1742, V1743)) end end}, V1724, V1725)) end end, fun (V1744) -> fun (V1745) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1746) -> fun (V1747) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1746, V1747)) end end, fun (V1748) -> fun (V1749) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1748, V1749)) end end}, fun (V1750) -> fun (V1751) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1750, V1751)) end end, fun (V1752) -> fun (V1753) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1752, V1753)) end end, fun (V1754) -> fun (V1755) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1754, V1755)) end end, fun (V1756) -> fun (V1757) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1756, V1757)) end end, fun (V1758) -> fun (V1759) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1758, V1759)) end end, fun (V1760) -> fun (V1761) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1760, V1761)) end end, fun (V1762) -> fun (V1763) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1762, V1763)) end end}, V1744, V1745)) end end, fun (V1764) -> fun (V1765) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1766) -> fun (V1767) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1766, V1767)) end end, fun (V1768) -> fun (V1769) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1768, V1769)) end end}, fun (V1770) -> fun (V1771) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1770, V1771)) end end, fun (V1772) -> fun (V1773) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1772, V1773)) end end, fun (V1774) -> fun (V1775) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1774, V1775)) end end, fun (V1776) -> fun (V1777) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1776, V1777)) end end, fun (V1778) -> fun (V1779) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1778, V1779)) end end, fun (V1780) -> fun (V1781) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1780, V1781)) end end, fun (V1782) -> fun (V1783) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1782, V1783)) end end}, V1764, V1765)) end end, fun (V1784) -> fun (V1785) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1786) -> fun (V1787) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1786, V1787)) end end, fun (V1788) -> fun (V1789) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1788, V1789)) end end}, fun (V1790) -> fun (V1791) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1790, V1791)) end end, fun (V1792) -> fun (V1793) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1792, V1793)) end end, fun (V1794) -> fun (V1795) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1794, V1795)) end end, fun (V1796) -> fun (V1797) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1796, V1797)) end end, fun (V1798) -> fun (V1799) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1798, V1799)) end end, fun (V1800) -> fun (V1801) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1800, V1801)) end end, fun (V1802) -> fun (V1803) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1802, V1803)) end end}, V1784, V1785)) end end, fun (V1804) -> fun (V1805) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1806) -> fun (V1807) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1806, V1807)) end end, fun (V1808) -> fun (V1809) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1808, V1809)) end end}, fun (V1810) -> fun (V1811) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1810, V1811)) end end, fun (V1812) -> fun (V1813) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1812, V1813)) end end, fun (V1814) -> fun (V1815) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1814, V1815)) end end, fun (V1816) -> fun (V1817) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1816, V1817)) end end, fun (V1818) -> fun (V1819) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1818, V1819)) end end, fun (V1820) -> fun (V1821) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1820, V1821)) end end, fun (V1822) -> fun (V1823) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1822, V1823)) end end}, V1804, V1805)) end end}, V1670, V1671)) end end, fun (V1824) -> fun (V1825) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1826) -> fun (V1827) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1828) -> fun (V1829) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1828, V1829)) end end, fun (V1830) -> fun (V1831) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1830, V1831)) end end}, V1826, V1827)) end end, fun (V1832) -> fun (V1833) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1834) -> fun (V1835) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1834, V1835)) end end, fun (V1836) -> fun (V1837) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1836, V1837)) end end}, V1832, V1833)) end end}, fun (V1838) -> fun (V1839) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1840) -> fun (V1841) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1840, V1841)) end end, fun (V1842) -> fun (V1843) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1842, V1843)) end end}, fun (V1844) -> fun (V1845) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1844, V1845)) end end, fun (V1846) -> fun (V1847) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1846, V1847)) end end, fun (V1848) -> fun (V1849) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1848, V1849)) end end, fun (V1850) -> fun (V1851) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1850, V1851)) end end, fun (V1852) -> fun (V1853) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1852, V1853)) end end, fun (V1854) -> fun (V1855) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1854, V1855)) end end, fun (V1856) -> fun (V1857) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1856, V1857)) end end}, V1838, V1839)) end end, fun (V1858) -> fun (V1859) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1860) -> fun (V1861) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1860, V1861)) end end, fun (V1862) -> fun (V1863) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1862, V1863)) end end}, fun (V1864) -> fun (V1865) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1864, V1865)) end end, fun (V1866) -> fun (V1867) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1866, V1867)) end end, fun (V1868) -> fun (V1869) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1868, V1869)) end end, fun (V1870) -> fun (V1871) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1870, V1871)) end end, fun (V1872) -> fun (V1873) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1872, V1873)) end end, fun (V1874) -> fun (V1875) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1874, V1875)) end end, fun (V1876) -> fun (V1877) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1876, V1877)) end end}, V1858, V1859)) end end, fun (V1878) -> fun (V1879) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1880) -> fun (V1881) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1880, V1881)) end end, fun (V1882) -> fun (V1883) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1882, V1883)) end end}, fun (V1884) -> fun (V1885) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1884, V1885)) end end, fun (V1886) -> fun (V1887) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1886, V1887)) end end, fun (V1888) -> fun (V1889) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1888, V1889)) end end, fun (V1890) -> fun (V1891) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1890, V1891)) end end, fun (V1892) -> fun (V1893) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1892, V1893)) end end, fun (V1894) -> fun (V1895) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1894, V1895)) end end, fun (V1896) -> fun (V1897) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1896, V1897)) end end}, V1878, V1879)) end end, fun (V1898) -> fun (V1899) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1900) -> fun (V1901) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1900, V1901)) end end, fun (V1902) -> fun (V1903) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1902, V1903)) end end}, fun (V1904) -> fun (V1905) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1904, V1905)) end end, fun (V1906) -> fun (V1907) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1906, V1907)) end end, fun (V1908) -> fun (V1909) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1908, V1909)) end end, fun (V1910) -> fun (V1911) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1910, V1911)) end end, fun (V1912) -> fun (V1913) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1912, V1913)) end end, fun (V1914) -> fun (V1915) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1914, V1915)) end end, fun (V1916) -> fun (V1917) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1916, V1917)) end end}, V1898, V1899)) end end, fun (V1918) -> fun (V1919) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1920) -> fun (V1921) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1920, V1921)) end end, fun (V1922) -> fun (V1923) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1922, V1923)) end end}, fun (V1924) -> fun (V1925) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1924, V1925)) end end, fun (V1926) -> fun (V1927) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1926, V1927)) end end, fun (V1928) -> fun (V1929) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1928, V1929)) end end, fun (V1930) -> fun (V1931) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1930, V1931)) end end, fun (V1932) -> fun (V1933) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1932, V1933)) end end, fun (V1934) -> fun (V1935) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1934, V1935)) end end, fun (V1936) -> fun (V1937) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1936, V1937)) end end}, V1918, V1919)) end end, fun (V1938) -> fun (V1939) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1940) -> fun (V1941) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1940, V1941)) end end, fun (V1942) -> fun (V1943) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1942, V1943)) end end}, fun (V1944) -> fun (V1945) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1944, V1945)) end end, fun (V1946) -> fun (V1947) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1946, V1947)) end end, fun (V1948) -> fun (V1949) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1948, V1949)) end end, fun (V1950) -> fun (V1951) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1950, V1951)) end end, fun (V1952) -> fun (V1953) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1952, V1953)) end end, fun (V1954) -> fun (V1955) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1954, V1955)) end end, fun (V1956) -> fun (V1957) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1956, V1957)) end end}, V1938, V1939)) end end, fun (V1958) -> fun (V1959) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1960) -> fun (V1961) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1960, V1961)) end end, fun (V1962) -> fun (V1963) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1962, V1963)) end end}, fun (V1964) -> fun (V1965) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1964, V1965)) end end, fun (V1966) -> fun (V1967) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1966, V1967)) end end, fun (V1968) -> fun (V1969) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V1968, V1969)) end end, fun (V1970) -> fun (V1971) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1970, V1971)) end end, fun (V1972) -> fun (V1973) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1972, V1973)) end end, fun (V1974) -> fun (V1975) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V1974, V1975)) end end, fun (V1976) -> fun (V1977) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V1976, V1977)) end end}, V1958, V1959)) end end}, V1824, V1825)) end end, fun (V1978) -> fun (V1979) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1980) -> fun (V1981) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1982) -> fun (V1983) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1982, V1983)) end end, fun (V1984) -> fun (V1985) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1984, V1985)) end end}, V1980, V1981)) end end, fun (V1986) -> fun (V1987) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V1988) -> fun (V1989) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1988, V1989)) end end, fun (V1990) -> fun (V1991) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1990, V1991)) end end}, V1986, V1987)) end end}, fun (V1992) -> fun (V1993) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1994) -> fun (V1995) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1994, V1995)) end end, fun (V1996) -> fun (V1997) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1996, V1997)) end end}, fun (V1998) -> fun (V1999) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V1998, V1999)) end end, fun (V2000) -> fun (V2001) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2000, V2001)) end end, fun (V2002) -> fun (V2003) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2002, V2003)) end end, fun (V2004) -> fun (V2005) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2004, V2005)) end end, fun (V2006) -> fun (V2007) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2006, V2007)) end end, fun (V2008) -> fun (V2009) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2008, V2009)) end end, fun (V2010) -> fun (V2011) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2010, V2011)) end end}, V1992, V1993)) end end, fun (V2012) -> fun (V2013) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2014) -> fun (V2015) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2014, V2015)) end end, fun (V2016) -> fun (V2017) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2016, V2017)) end end}, fun (V2018) -> fun (V2019) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2018, V2019)) end end, fun (V2020) -> fun (V2021) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2020, V2021)) end end, fun (V2022) -> fun (V2023) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2022, V2023)) end end, fun (V2024) -> fun (V2025) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2024, V2025)) end end, fun (V2026) -> fun (V2027) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2026, V2027)) end end, fun (V2028) -> fun (V2029) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2028, V2029)) end end, fun (V2030) -> fun (V2031) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2030, V2031)) end end}, V2012, V2013)) end end, fun (V2032) -> fun (V2033) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2034) -> fun (V2035) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2034, V2035)) end end, fun (V2036) -> fun (V2037) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2036, V2037)) end end}, fun (V2038) -> fun (V2039) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2038, V2039)) end end, fun (V2040) -> fun (V2041) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2040, V2041)) end end, fun (V2042) -> fun (V2043) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2042, V2043)) end end, fun (V2044) -> fun (V2045) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2044, V2045)) end end, fun (V2046) -> fun (V2047) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2046, V2047)) end end, fun (V2048) -> fun (V2049) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2048, V2049)) end end, fun (V2050) -> fun (V2051) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2050, V2051)) end end}, V2032, V2033)) end end, fun (V2052) -> fun (V2053) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2054) -> fun (V2055) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2054, V2055)) end end, fun (V2056) -> fun (V2057) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2056, V2057)) end end}, fun (V2058) -> fun (V2059) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2058, V2059)) end end, fun (V2060) -> fun (V2061) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2060, V2061)) end end, fun (V2062) -> fun (V2063) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2062, V2063)) end end, fun (V2064) -> fun (V2065) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2064, V2065)) end end, fun (V2066) -> fun (V2067) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2066, V2067)) end end, fun (V2068) -> fun (V2069) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2068, V2069)) end end, fun (V2070) -> fun (V2071) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2070, V2071)) end end}, V2052, V2053)) end end, fun (V2072) -> fun (V2073) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2074) -> fun (V2075) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2074, V2075)) end end, fun (V2076) -> fun (V2077) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2076, V2077)) end end}, fun (V2078) -> fun (V2079) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2078, V2079)) end end, fun (V2080) -> fun (V2081) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2080, V2081)) end end, fun (V2082) -> fun (V2083) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2082, V2083)) end end, fun (V2084) -> fun (V2085) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2084, V2085)) end end, fun (V2086) -> fun (V2087) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2086, V2087)) end end, fun (V2088) -> fun (V2089) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2088, V2089)) end end, fun (V2090) -> fun (V2091) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2090, V2091)) end end}, V2072, V2073)) end end, fun (V2092) -> fun (V2093) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2094) -> fun (V2095) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2094, V2095)) end end, fun (V2096) -> fun (V2097) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2096, V2097)) end end}, fun (V2098) -> fun (V2099) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2098, V2099)) end end, fun (V2100) -> fun (V2101) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2100, V2101)) end end, fun (V2102) -> fun (V2103) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2102, V2103)) end end, fun (V2104) -> fun (V2105) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2104, V2105)) end end, fun (V2106) -> fun (V2107) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2106, V2107)) end end, fun (V2108) -> fun (V2109) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2108, V2109)) end end, fun (V2110) -> fun (V2111) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2110, V2111)) end end}, V2092, V2093)) end end, fun (V2112) -> fun (V2113) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2114) -> fun (V2115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2114, V2115)) end end, fun (V2116) -> fun (V2117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2116, V2117)) end end}, fun (V2118) -> fun (V2119) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2118, V2119)) end end, fun (V2120) -> fun (V2121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2120, V2121)) end end, fun (V2122) -> fun (V2123) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2122, V2123)) end end, fun (V2124) -> fun (V2125) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2124, V2125)) end end, fun (V2126) -> fun (V2127) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2126, V2127)) end end, fun (V2128) -> fun (V2129) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2128, V2129)) end end, fun (V2130) -> fun (V2131) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2130, V2131)) end end}, V2112, V2113)) end end}, V1978, V1979)) end end, fun (V2132) -> fun (V2133) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2134) -> fun (V2135) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2136) -> fun (V2137) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2136, V2137)) end end, fun (V2138) -> fun (V2139) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2138, V2139)) end end}, V2134, V2135)) end end, fun (V2140) -> fun (V2141) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2142) -> fun (V2143) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2142, V2143)) end end, fun (V2144) -> fun (V2145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2144, V2145)) end end}, V2140, V2141)) end end}, fun (V2146) -> fun (V2147) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2148) -> fun (V2149) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2148, V2149)) end end, fun (V2150) -> fun (V2151) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2150, V2151)) end end}, fun (V2152) -> fun (V2153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2152, V2153)) end end, fun (V2154) -> fun (V2155) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2154, V2155)) end end, fun (V2156) -> fun (V2157) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2156, V2157)) end end, fun (V2158) -> fun (V2159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2158, V2159)) end end, fun (V2160) -> fun (V2161) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2160, V2161)) end end, fun (V2162) -> fun (V2163) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2162, V2163)) end end, fun (V2164) -> fun (V2165) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2164, V2165)) end end}, V2146, V2147)) end end, fun (V2166) -> fun (V2167) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2168) -> fun (V2169) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2168, V2169)) end end, fun (V2170) -> fun (V2171) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2170, V2171)) end end}, fun (V2172) -> fun (V2173) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2172, V2173)) end end, fun (V2174) -> fun (V2175) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2174, V2175)) end end, fun (V2176) -> fun (V2177) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2176, V2177)) end end, fun (V2178) -> fun (V2179) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2178, V2179)) end end, fun (V2180) -> fun (V2181) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2180, V2181)) end end, fun (V2182) -> fun (V2183) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2182, V2183)) end end, fun (V2184) -> fun (V2185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2184, V2185)) end end}, V2166, V2167)) end end, fun (V2186) -> fun (V2187) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2188) -> fun (V2189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2188, V2189)) end end, fun (V2190) -> fun (V2191) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2190, V2191)) end end}, fun (V2192) -> fun (V2193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2192, V2193)) end end, fun (V2194) -> fun (V2195) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2194, V2195)) end end, fun (V2196) -> fun (V2197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2196, V2197)) end end, fun (V2198) -> fun (V2199) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2198, V2199)) end end, fun (V2200) -> fun (V2201) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2200, V2201)) end end, fun (V2202) -> fun (V2203) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2202, V2203)) end end, fun (V2204) -> fun (V2205) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2204, V2205)) end end}, V2186, V2187)) end end, fun (V2206) -> fun (V2207) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2208) -> fun (V2209) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2208, V2209)) end end, fun (V2210) -> fun (V2211) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2210, V2211)) end end}, fun (V2212) -> fun (V2213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2212, V2213)) end end, fun (V2214) -> fun (V2215) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2214, V2215)) end end, fun (V2216) -> fun (V2217) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2216, V2217)) end end, fun (V2218) -> fun (V2219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2218, V2219)) end end, fun (V2220) -> fun (V2221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2220, V2221)) end end, fun (V2222) -> fun (V2223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2222, V2223)) end end, fun (V2224) -> fun (V2225) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2224, V2225)) end end}, V2206, V2207)) end end, fun (V2226) -> fun (V2227) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2228) -> fun (V2229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2228, V2229)) end end, fun (V2230) -> fun (V2231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2230, V2231)) end end}, fun (V2232) -> fun (V2233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2232, V2233)) end end, fun (V2234) -> fun (V2235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2234, V2235)) end end, fun (V2236) -> fun (V2237) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2236, V2237)) end end, fun (V2238) -> fun (V2239) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2238, V2239)) end end, fun (V2240) -> fun (V2241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2240, V2241)) end end, fun (V2242) -> fun (V2243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2242, V2243)) end end, fun (V2244) -> fun (V2245) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2244, V2245)) end end}, V2226, V2227)) end end, fun (V2246) -> fun (V2247) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2248) -> fun (V2249) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2248, V2249)) end end, fun (V2250) -> fun (V2251) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2250, V2251)) end end}, fun (V2252) -> fun (V2253) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2252, V2253)) end end, fun (V2254) -> fun (V2255) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2254, V2255)) end end, fun (V2256) -> fun (V2257) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2256, V2257)) end end, fun (V2258) -> fun (V2259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2258, V2259)) end end, fun (V2260) -> fun (V2261) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2260, V2261)) end end, fun (V2262) -> fun (V2263) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2262, V2263)) end end, fun (V2264) -> fun (V2265) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2264, V2265)) end end}, V2246, V2247)) end end, fun (V2266) -> fun (V2267) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2268) -> fun (V2269) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2268, V2269)) end end, fun (V2270) -> fun (V2271) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2270, V2271)) end end}, fun (V2272) -> fun (V2273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2272, V2273)) end end, fun (V2274) -> fun (V2275) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2274, V2275)) end end, fun (V2276) -> fun (V2277) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2276, V2277)) end end, fun (V2278) -> fun (V2279) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2278, V2279)) end end, fun (V2280) -> fun (V2281) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2280, V2281)) end end, fun (V2282) -> fun (V2283) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2282, V2283)) end end, fun (V2284) -> fun (V2285) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2284, V2285)) end end}, V2266, V2267)) end end}, V2132, V2133)) end end, fun (V2286) -> fun (V2287) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2288) -> fun (V2289) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2290) -> fun (V2291) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2290, V2291)) end end, fun (V2292) -> fun (V2293) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2292, V2293)) end end}, V2288, V2289)) end end, fun (V2294) -> fun (V2295) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2296) -> fun (V2297) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2296, V2297)) end end, fun (V2298) -> fun (V2299) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2298, V2299)) end end}, V2294, V2295)) end end}, fun (V2300) -> fun (V2301) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2302) -> fun (V2303) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2302, V2303)) end end, fun (V2304) -> fun (V2305) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2304, V2305)) end end}, fun (V2306) -> fun (V2307) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2306, V2307)) end end, fun (V2308) -> fun (V2309) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2308, V2309)) end end, fun (V2310) -> fun (V2311) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2310, V2311)) end end, fun (V2312) -> fun (V2313) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2312, V2313)) end end, fun (V2314) -> fun (V2315) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2314, V2315)) end end, fun (V2316) -> fun (V2317) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2316, V2317)) end end, fun (V2318) -> fun (V2319) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2318, V2319)) end end}, V2300, V2301)) end end, fun (V2320) -> fun (V2321) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2322) -> fun (V2323) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2322, V2323)) end end, fun (V2324) -> fun (V2325) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2324, V2325)) end end}, fun (V2326) -> fun (V2327) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2326, V2327)) end end, fun (V2328) -> fun (V2329) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2328, V2329)) end end, fun (V2330) -> fun (V2331) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2330, V2331)) end end, fun (V2332) -> fun (V2333) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2332, V2333)) end end, fun (V2334) -> fun (V2335) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2334, V2335)) end end, fun (V2336) -> fun (V2337) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2336, V2337)) end end, fun (V2338) -> fun (V2339) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2338, V2339)) end end}, V2320, V2321)) end end, fun (V2340) -> fun (V2341) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2342) -> fun (V2343) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2342, V2343)) end end, fun (V2344) -> fun (V2345) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2344, V2345)) end end}, fun (V2346) -> fun (V2347) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2346, V2347)) end end, fun (V2348) -> fun (V2349) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2348, V2349)) end end, fun (V2350) -> fun (V2351) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2350, V2351)) end end, fun (V2352) -> fun (V2353) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2352, V2353)) end end, fun (V2354) -> fun (V2355) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2354, V2355)) end end, fun (V2356) -> fun (V2357) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2356, V2357)) end end, fun (V2358) -> fun (V2359) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2358, V2359)) end end}, V2340, V2341)) end end, fun (V2360) -> fun (V2361) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2362) -> fun (V2363) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2362, V2363)) end end, fun (V2364) -> fun (V2365) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2364, V2365)) end end}, fun (V2366) -> fun (V2367) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2366, V2367)) end end, fun (V2368) -> fun (V2369) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2368, V2369)) end end, fun (V2370) -> fun (V2371) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2370, V2371)) end end, fun (V2372) -> fun (V2373) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2372, V2373)) end end, fun (V2374) -> fun (V2375) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2374, V2375)) end end, fun (V2376) -> fun (V2377) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2376, V2377)) end end, fun (V2378) -> fun (V2379) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2378, V2379)) end end}, V2360, V2361)) end end, fun (V2380) -> fun (V2381) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2382) -> fun (V2383) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2382, V2383)) end end, fun (V2384) -> fun (V2385) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2384, V2385)) end end}, fun (V2386) -> fun (V2387) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2386, V2387)) end end, fun (V2388) -> fun (V2389) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2388, V2389)) end end, fun (V2390) -> fun (V2391) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2390, V2391)) end end, fun (V2392) -> fun (V2393) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2392, V2393)) end end, fun (V2394) -> fun (V2395) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2394, V2395)) end end, fun (V2396) -> fun (V2397) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2396, V2397)) end end, fun (V2398) -> fun (V2399) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2398, V2399)) end end}, V2380, V2381)) end end, fun (V2400) -> fun (V2401) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2402) -> fun (V2403) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2402, V2403)) end end, fun (V2404) -> fun (V2405) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2404, V2405)) end end}, fun (V2406) -> fun (V2407) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2406, V2407)) end end, fun (V2408) -> fun (V2409) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2408, V2409)) end end, fun (V2410) -> fun (V2411) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2410, V2411)) end end, fun (V2412) -> fun (V2413) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2412, V2413)) end end, fun (V2414) -> fun (V2415) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2414, V2415)) end end, fun (V2416) -> fun (V2417) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2416, V2417)) end end, fun (V2418) -> fun (V2419) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2418, V2419)) end end}, V2400, V2401)) end end, fun (V2420) -> fun (V2421) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2422) -> fun (V2423) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2422, V2423)) end end, fun (V2424) -> fun (V2425) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2424, V2425)) end end}, fun (V2426) -> fun (V2427) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2426, V2427)) end end, fun (V2428) -> fun (V2429) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2428, V2429)) end end, fun (V2430) -> fun (V2431) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2430, V2431)) end end, fun (V2432) -> fun (V2433) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2432, V2433)) end end, fun (V2434) -> fun (V2435) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2434, V2435)) end end, fun (V2436) -> fun (V2437) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2436, V2437)) end end, fun (V2438) -> fun (V2439) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2438, V2439)) end end}, V2420, V2421)) end end}, V2286, V2287)) end end}, V1314, V1315)) end end, fun (V2440) -> fun (V2441) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2442) -> fun (V2443) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2442, V2443)) end end, fun (V2444) -> fun (V2445) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V2444, V2445)) end end}, fun (V2446) -> fun (V2447) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V2446, V2447)) end end, fun (V2448) -> fun (V2449) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V2448, V2449)) end end, fun (V2450) -> fun (V2451) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V2450, V2451)) end end, fun (V2452) -> fun (V2453) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V2452, V2453)) end end, fun (V2454) -> fun (V2455) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V2454, V2455)) end end, fun (V2456) -> fun (V2457) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V2456, V2457)) end end, fun (V2458) -> fun (V2459) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V2458, V2459)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2460) -> fun (V2461) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V2462) -> fun (V2463) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2464) -> fun (V2465) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2464, V2465)) end end, fun (V2466) -> fun (V2467) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2466, V2467)) end end}, V2462, V2463)) end end, fun (V2468) -> fun (V2469) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2470) -> fun (V2471) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2470, V2471)) end end, fun (V2472) -> fun (V2473) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2472, V2473)) end end}, V2468, V2469)) end end}, V2460, V2461)) end end, fun (V2474) -> fun (V2475) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V2476) -> fun (V2477) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2478) -> fun (V2479) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2478, V2479)) end end, fun (V2480) -> fun (V2481) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2480, V2481)) end end}, V2476, V2477)) end end, fun (V2482) -> fun (V2483) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2484) -> fun (V2485) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2484, V2485)) end end, fun (V2486) -> fun (V2487) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2486, V2487)) end end}, V2482, V2483)) end end}, V2474, V2475)) end end}, fun (V2488) -> fun (V2489) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2490) -> fun (V2491) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2492) -> fun (V2493) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2492, V2493)) end end, fun (V2494) -> fun (V2495) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2494, V2495)) end end}, V2490, V2491)) end end, fun (V2496) -> fun (V2497) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2498) -> fun (V2499) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2498, V2499)) end end, fun (V2500) -> fun (V2501) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2500, V2501)) end end}, V2496, V2497)) end end}, fun (V2502) -> fun (V2503) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2504) -> fun (V2505) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2504, V2505)) end end, fun (V2506) -> fun (V2507) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2506, V2507)) end end}, fun (V2508) -> fun (V2509) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2508, V2509)) end end, fun (V2510) -> fun (V2511) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2510, V2511)) end end, fun (V2512) -> fun (V2513) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2512, V2513)) end end, fun (V2514) -> fun (V2515) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2514, V2515)) end end, fun (V2516) -> fun (V2517) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2516, V2517)) end end, fun (V2518) -> fun (V2519) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2518, V2519)) end end, fun (V2520) -> fun (V2521) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2520, V2521)) end end}, V2502, V2503)) end end, fun (V2522) -> fun (V2523) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2524) -> fun (V2525) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2524, V2525)) end end, fun (V2526) -> fun (V2527) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2526, V2527)) end end}, fun (V2528) -> fun (V2529) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2528, V2529)) end end, fun (V2530) -> fun (V2531) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2530, V2531)) end end, fun (V2532) -> fun (V2533) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2532, V2533)) end end, fun (V2534) -> fun (V2535) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2534, V2535)) end end, fun (V2536) -> fun (V2537) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2536, V2537)) end end, fun (V2538) -> fun (V2539) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2538, V2539)) end end, fun (V2540) -> fun (V2541) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2540, V2541)) end end}, V2522, V2523)) end end, fun (V2542) -> fun (V2543) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2544) -> fun (V2545) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2544, V2545)) end end, fun (V2546) -> fun (V2547) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2546, V2547)) end end}, fun (V2548) -> fun (V2549) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2548, V2549)) end end, fun (V2550) -> fun (V2551) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2550, V2551)) end end, fun (V2552) -> fun (V2553) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2552, V2553)) end end, fun (V2554) -> fun (V2555) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2554, V2555)) end end, fun (V2556) -> fun (V2557) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2556, V2557)) end end, fun (V2558) -> fun (V2559) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2558, V2559)) end end, fun (V2560) -> fun (V2561) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2560, V2561)) end end}, V2542, V2543)) end end, fun (V2562) -> fun (V2563) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2564) -> fun (V2565) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2564, V2565)) end end, fun (V2566) -> fun (V2567) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2566, V2567)) end end}, fun (V2568) -> fun (V2569) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2568, V2569)) end end, fun (V2570) -> fun (V2571) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2570, V2571)) end end, fun (V2572) -> fun (V2573) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2572, V2573)) end end, fun (V2574) -> fun (V2575) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2574, V2575)) end end, fun (V2576) -> fun (V2577) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2576, V2577)) end end, fun (V2578) -> fun (V2579) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2578, V2579)) end end, fun (V2580) -> fun (V2581) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2580, V2581)) end end}, V2562, V2563)) end end, fun (V2582) -> fun (V2583) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2584) -> fun (V2585) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2584, V2585)) end end, fun (V2586) -> fun (V2587) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2586, V2587)) end end}, fun (V2588) -> fun (V2589) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2588, V2589)) end end, fun (V2590) -> fun (V2591) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2590, V2591)) end end, fun (V2592) -> fun (V2593) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2592, V2593)) end end, fun (V2594) -> fun (V2595) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2594, V2595)) end end, fun (V2596) -> fun (V2597) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2596, V2597)) end end, fun (V2598) -> fun (V2599) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2598, V2599)) end end, fun (V2600) -> fun (V2601) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2600, V2601)) end end}, V2582, V2583)) end end, fun (V2602) -> fun (V2603) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2604) -> fun (V2605) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2604, V2605)) end end, fun (V2606) -> fun (V2607) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2606, V2607)) end end}, fun (V2608) -> fun (V2609) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2608, V2609)) end end, fun (V2610) -> fun (V2611) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2610, V2611)) end end, fun (V2612) -> fun (V2613) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2612, V2613)) end end, fun (V2614) -> fun (V2615) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2614, V2615)) end end, fun (V2616) -> fun (V2617) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2616, V2617)) end end, fun (V2618) -> fun (V2619) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2618, V2619)) end end, fun (V2620) -> fun (V2621) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2620, V2621)) end end}, V2602, V2603)) end end, fun (V2622) -> fun (V2623) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2624) -> fun (V2625) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2624, V2625)) end end, fun (V2626) -> fun (V2627) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2626, V2627)) end end}, fun (V2628) -> fun (V2629) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2628, V2629)) end end, fun (V2630) -> fun (V2631) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2630, V2631)) end end, fun (V2632) -> fun (V2633) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2632, V2633)) end end, fun (V2634) -> fun (V2635) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2634, V2635)) end end, fun (V2636) -> fun (V2637) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2636, V2637)) end end, fun (V2638) -> fun (V2639) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2638, V2639)) end end, fun (V2640) -> fun (V2641) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2640, V2641)) end end}, V2622, V2623)) end end}, V2488, V2489)) end end, fun (V2642) -> fun (V2643) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2644) -> fun (V2645) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2646) -> fun (V2647) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2646, V2647)) end end, fun (V2648) -> fun (V2649) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2648, V2649)) end end}, V2644, V2645)) end end, fun (V2650) -> fun (V2651) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2652) -> fun (V2653) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2652, V2653)) end end, fun (V2654) -> fun (V2655) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2654, V2655)) end end}, V2650, V2651)) end end}, fun (V2656) -> fun (V2657) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2658) -> fun (V2659) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2658, V2659)) end end, fun (V2660) -> fun (V2661) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2660, V2661)) end end}, fun (V2662) -> fun (V2663) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2662, V2663)) end end, fun (V2664) -> fun (V2665) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2664, V2665)) end end, fun (V2666) -> fun (V2667) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2666, V2667)) end end, fun (V2668) -> fun (V2669) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2668, V2669)) end end, fun (V2670) -> fun (V2671) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2670, V2671)) end end, fun (V2672) -> fun (V2673) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2672, V2673)) end end, fun (V2674) -> fun (V2675) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2674, V2675)) end end}, V2656, V2657)) end end, fun (V2676) -> fun (V2677) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2678) -> fun (V2679) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2678, V2679)) end end, fun (V2680) -> fun (V2681) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2680, V2681)) end end}, fun (V2682) -> fun (V2683) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2682, V2683)) end end, fun (V2684) -> fun (V2685) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2684, V2685)) end end, fun (V2686) -> fun (V2687) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2686, V2687)) end end, fun (V2688) -> fun (V2689) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2688, V2689)) end end, fun (V2690) -> fun (V2691) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2690, V2691)) end end, fun (V2692) -> fun (V2693) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2692, V2693)) end end, fun (V2694) -> fun (V2695) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2694, V2695)) end end}, V2676, V2677)) end end, fun (V2696) -> fun (V2697) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2698) -> fun (V2699) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2698, V2699)) end end, fun (V2700) -> fun (V2701) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2700, V2701)) end end}, fun (V2702) -> fun (V2703) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2702, V2703)) end end, fun (V2704) -> fun (V2705) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2704, V2705)) end end, fun (V2706) -> fun (V2707) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2706, V2707)) end end, fun (V2708) -> fun (V2709) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2708, V2709)) end end, fun (V2710) -> fun (V2711) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2710, V2711)) end end, fun (V2712) -> fun (V2713) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2712, V2713)) end end, fun (V2714) -> fun (V2715) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2714, V2715)) end end}, V2696, V2697)) end end, fun (V2716) -> fun (V2717) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2718) -> fun (V2719) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2718, V2719)) end end, fun (V2720) -> fun (V2721) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2720, V2721)) end end}, fun (V2722) -> fun (V2723) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2722, V2723)) end end, fun (V2724) -> fun (V2725) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2724, V2725)) end end, fun (V2726) -> fun (V2727) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2726, V2727)) end end, fun (V2728) -> fun (V2729) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2728, V2729)) end end, fun (V2730) -> fun (V2731) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2730, V2731)) end end, fun (V2732) -> fun (V2733) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2732, V2733)) end end, fun (V2734) -> fun (V2735) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2734, V2735)) end end}, V2716, V2717)) end end, fun (V2736) -> fun (V2737) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2738) -> fun (V2739) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2738, V2739)) end end, fun (V2740) -> fun (V2741) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2740, V2741)) end end}, fun (V2742) -> fun (V2743) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2742, V2743)) end end, fun (V2744) -> fun (V2745) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2744, V2745)) end end, fun (V2746) -> fun (V2747) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2746, V2747)) end end, fun (V2748) -> fun (V2749) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2748, V2749)) end end, fun (V2750) -> fun (V2751) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2750, V2751)) end end, fun (V2752) -> fun (V2753) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2752, V2753)) end end, fun (V2754) -> fun (V2755) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2754, V2755)) end end}, V2736, V2737)) end end, fun (V2756) -> fun (V2757) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2758) -> fun (V2759) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2758, V2759)) end end, fun (V2760) -> fun (V2761) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2760, V2761)) end end}, fun (V2762) -> fun (V2763) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2762, V2763)) end end, fun (V2764) -> fun (V2765) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2764, V2765)) end end, fun (V2766) -> fun (V2767) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2766, V2767)) end end, fun (V2768) -> fun (V2769) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2768, V2769)) end end, fun (V2770) -> fun (V2771) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2770, V2771)) end end, fun (V2772) -> fun (V2773) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2772, V2773)) end end, fun (V2774) -> fun (V2775) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2774, V2775)) end end}, V2756, V2757)) end end, fun (V2776) -> fun (V2777) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2778) -> fun (V2779) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2778, V2779)) end end, fun (V2780) -> fun (V2781) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2780, V2781)) end end}, fun (V2782) -> fun (V2783) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2782, V2783)) end end, fun (V2784) -> fun (V2785) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2784, V2785)) end end, fun (V2786) -> fun (V2787) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2786, V2787)) end end, fun (V2788) -> fun (V2789) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2788, V2789)) end end, fun (V2790) -> fun (V2791) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2790, V2791)) end end, fun (V2792) -> fun (V2793) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2792, V2793)) end end, fun (V2794) -> fun (V2795) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2794, V2795)) end end}, V2776, V2777)) end end}, V2642, V2643)) end end, fun (V2796) -> fun (V2797) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2798) -> fun (V2799) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2800) -> fun (V2801) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2800, V2801)) end end, fun (V2802) -> fun (V2803) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2802, V2803)) end end}, V2798, V2799)) end end, fun (V2804) -> fun (V2805) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2806) -> fun (V2807) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2806, V2807)) end end, fun (V2808) -> fun (V2809) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2808, V2809)) end end}, V2804, V2805)) end end}, fun (V2810) -> fun (V2811) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2812) -> fun (V2813) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2812, V2813)) end end, fun (V2814) -> fun (V2815) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2814, V2815)) end end}, fun (V2816) -> fun (V2817) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2816, V2817)) end end, fun (V2818) -> fun (V2819) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2818, V2819)) end end, fun (V2820) -> fun (V2821) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2820, V2821)) end end, fun (V2822) -> fun (V2823) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2822, V2823)) end end, fun (V2824) -> fun (V2825) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2824, V2825)) end end, fun (V2826) -> fun (V2827) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2826, V2827)) end end, fun (V2828) -> fun (V2829) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2828, V2829)) end end}, V2810, V2811)) end end, fun (V2830) -> fun (V2831) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2832) -> fun (V2833) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2832, V2833)) end end, fun (V2834) -> fun (V2835) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2834, V2835)) end end}, fun (V2836) -> fun (V2837) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2836, V2837)) end end, fun (V2838) -> fun (V2839) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2838, V2839)) end end, fun (V2840) -> fun (V2841) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2840, V2841)) end end, fun (V2842) -> fun (V2843) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2842, V2843)) end end, fun (V2844) -> fun (V2845) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2844, V2845)) end end, fun (V2846) -> fun (V2847) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2846, V2847)) end end, fun (V2848) -> fun (V2849) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2848, V2849)) end end}, V2830, V2831)) end end, fun (V2850) -> fun (V2851) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2852) -> fun (V2853) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2852, V2853)) end end, fun (V2854) -> fun (V2855) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2854, V2855)) end end}, fun (V2856) -> fun (V2857) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2856, V2857)) end end, fun (V2858) -> fun (V2859) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2858, V2859)) end end, fun (V2860) -> fun (V2861) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2860, V2861)) end end, fun (V2862) -> fun (V2863) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2862, V2863)) end end, fun (V2864) -> fun (V2865) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2864, V2865)) end end, fun (V2866) -> fun (V2867) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2866, V2867)) end end, fun (V2868) -> fun (V2869) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2868, V2869)) end end}, V2850, V2851)) end end, fun (V2870) -> fun (V2871) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2872) -> fun (V2873) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2872, V2873)) end end, fun (V2874) -> fun (V2875) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2874, V2875)) end end}, fun (V2876) -> fun (V2877) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2876, V2877)) end end, fun (V2878) -> fun (V2879) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2878, V2879)) end end, fun (V2880) -> fun (V2881) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2880, V2881)) end end, fun (V2882) -> fun (V2883) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2882, V2883)) end end, fun (V2884) -> fun (V2885) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2884, V2885)) end end, fun (V2886) -> fun (V2887) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2886, V2887)) end end, fun (V2888) -> fun (V2889) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2888, V2889)) end end}, V2870, V2871)) end end, fun (V2890) -> fun (V2891) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2892) -> fun (V2893) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2892, V2893)) end end, fun (V2894) -> fun (V2895) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2894, V2895)) end end}, fun (V2896) -> fun (V2897) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2896, V2897)) end end, fun (V2898) -> fun (V2899) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2898, V2899)) end end, fun (V2900) -> fun (V2901) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2900, V2901)) end end, fun (V2902) -> fun (V2903) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2902, V2903)) end end, fun (V2904) -> fun (V2905) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2904, V2905)) end end, fun (V2906) -> fun (V2907) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2906, V2907)) end end, fun (V2908) -> fun (V2909) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2908, V2909)) end end}, V2890, V2891)) end end, fun (V2910) -> fun (V2911) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2912) -> fun (V2913) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2912, V2913)) end end, fun (V2914) -> fun (V2915) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2914, V2915)) end end}, fun (V2916) -> fun (V2917) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2916, V2917)) end end, fun (V2918) -> fun (V2919) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2918, V2919)) end end, fun (V2920) -> fun (V2921) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2920, V2921)) end end, fun (V2922) -> fun (V2923) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2922, V2923)) end end, fun (V2924) -> fun (V2925) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2924, V2925)) end end, fun (V2926) -> fun (V2927) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2926, V2927)) end end, fun (V2928) -> fun (V2929) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2928, V2929)) end end}, V2910, V2911)) end end, fun (V2930) -> fun (V2931) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2932) -> fun (V2933) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2932, V2933)) end end, fun (V2934) -> fun (V2935) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2934, V2935)) end end}, fun (V2936) -> fun (V2937) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2936, V2937)) end end, fun (V2938) -> fun (V2939) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2938, V2939)) end end, fun (V2940) -> fun (V2941) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2940, V2941)) end end, fun (V2942) -> fun (V2943) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2942, V2943)) end end, fun (V2944) -> fun (V2945) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2944, V2945)) end end, fun (V2946) -> fun (V2947) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2946, V2947)) end end, fun (V2948) -> fun (V2949) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2948, V2949)) end end}, V2930, V2931)) end end}, V2796, V2797)) end end, fun (V2950) -> fun (V2951) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2952) -> fun (V2953) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2954) -> fun (V2955) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2954, V2955)) end end, fun (V2956) -> fun (V2957) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2956, V2957)) end end}, V2952, V2953)) end end, fun (V2958) -> fun (V2959) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V2960) -> fun (V2961) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2960, V2961)) end end, fun (V2962) -> fun (V2963) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2962, V2963)) end end}, V2958, V2959)) end end}, fun (V2964) -> fun (V2965) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2966) -> fun (V2967) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2966, V2967)) end end, fun (V2968) -> fun (V2969) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2968, V2969)) end end}, fun (V2970) -> fun (V2971) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2970, V2971)) end end, fun (V2972) -> fun (V2973) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2972, V2973)) end end, fun (V2974) -> fun (V2975) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2974, V2975)) end end, fun (V2976) -> fun (V2977) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2976, V2977)) end end, fun (V2978) -> fun (V2979) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2978, V2979)) end end, fun (V2980) -> fun (V2981) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V2980, V2981)) end end, fun (V2982) -> fun (V2983) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V2982, V2983)) end end}, V2964, V2965)) end end, fun (V2984) -> fun (V2985) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2986) -> fun (V2987) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2986, V2987)) end end, fun (V2988) -> fun (V2989) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V2988, V2989)) end end}, fun (V2990) -> fun (V2991) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2990, V2991)) end end, fun (V2992) -> fun (V2993) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2992, V2993)) end end, fun (V2994) -> fun (V2995) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2994, V2995)) end end, fun (V2996) -> fun (V2997) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2996, V2997)) end end, fun (V2998) -> fun (V2999) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2998, V2999)) end end, fun (V3000) -> fun (V3001) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3000, V3001)) end end, fun (V3002) -> fun (V3003) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3002, V3003)) end end}, V2984, V2985)) end end, fun (V3004) -> fun (V3005) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3006) -> fun (V3007) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3006, V3007)) end end, fun (V3008) -> fun (V3009) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3008, V3009)) end end}, fun (V3010) -> fun (V3011) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3010, V3011)) end end, fun (V3012) -> fun (V3013) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3012, V3013)) end end, fun (V3014) -> fun (V3015) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3014, V3015)) end end, fun (V3016) -> fun (V3017) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3016, V3017)) end end, fun (V3018) -> fun (V3019) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3018, V3019)) end end, fun (V3020) -> fun (V3021) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3020, V3021)) end end, fun (V3022) -> fun (V3023) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3022, V3023)) end end}, V3004, V3005)) end end, fun (V3024) -> fun (V3025) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3026) -> fun (V3027) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3026, V3027)) end end, fun (V3028) -> fun (V3029) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3028, V3029)) end end}, fun (V3030) -> fun (V3031) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3030, V3031)) end end, fun (V3032) -> fun (V3033) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3032, V3033)) end end, fun (V3034) -> fun (V3035) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3034, V3035)) end end, fun (V3036) -> fun (V3037) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3036, V3037)) end end, fun (V3038) -> fun (V3039) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3038, V3039)) end end, fun (V3040) -> fun (V3041) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3040, V3041)) end end, fun (V3042) -> fun (V3043) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3042, V3043)) end end}, V3024, V3025)) end end, fun (V3044) -> fun (V3045) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3046) -> fun (V3047) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3046, V3047)) end end, fun (V3048) -> fun (V3049) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3048, V3049)) end end}, fun (V3050) -> fun (V3051) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3050, V3051)) end end, fun (V3052) -> fun (V3053) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3052, V3053)) end end, fun (V3054) -> fun (V3055) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3054, V3055)) end end, fun (V3056) -> fun (V3057) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3056, V3057)) end end, fun (V3058) -> fun (V3059) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3058, V3059)) end end, fun (V3060) -> fun (V3061) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3060, V3061)) end end, fun (V3062) -> fun (V3063) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3062, V3063)) end end}, V3044, V3045)) end end, fun (V3064) -> fun (V3065) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3066) -> fun (V3067) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3066, V3067)) end end, fun (V3068) -> fun (V3069) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3068, V3069)) end end}, fun (V3070) -> fun (V3071) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3070, V3071)) end end, fun (V3072) -> fun (V3073) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3072, V3073)) end end, fun (V3074) -> fun (V3075) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3074, V3075)) end end, fun (V3076) -> fun (V3077) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3076, V3077)) end end, fun (V3078) -> fun (V3079) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3078, V3079)) end end, fun (V3080) -> fun (V3081) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3080, V3081)) end end, fun (V3082) -> fun (V3083) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3082, V3083)) end end}, V3064, V3065)) end end, fun (V3084) -> fun (V3085) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3086) -> fun (V3087) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3086, V3087)) end end, fun (V3088) -> fun (V3089) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3088, V3089)) end end}, fun (V3090) -> fun (V3091) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3090, V3091)) end end, fun (V3092) -> fun (V3093) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3092, V3093)) end end, fun (V3094) -> fun (V3095) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3094, V3095)) end end, fun (V3096) -> fun (V3097) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3096, V3097)) end end, fun (V3098) -> fun (V3099) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3098, V3099)) end end, fun (V3100) -> fun (V3101) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3100, V3101)) end end, fun (V3102) -> fun (V3103) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3102, V3103)) end end}, V3084, V3085)) end end}, V2950, V2951)) end end, fun (V3104) -> fun (V3105) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3106) -> fun (V3107) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3108) -> fun (V3109) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3108, V3109)) end end, fun (V3110) -> fun (V3111) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3110, V3111)) end end}, V3106, V3107)) end end, fun (V3112) -> fun (V3113) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3114) -> fun (V3115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3114, V3115)) end end, fun (V3116) -> fun (V3117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3116, V3117)) end end}, V3112, V3113)) end end}, fun (V3118) -> fun (V3119) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3120) -> fun (V3121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3120, V3121)) end end, fun (V3122) -> fun (V3123) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3122, V3123)) end end}, fun (V3124) -> fun (V3125) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3124, V3125)) end end, fun (V3126) -> fun (V3127) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3126, V3127)) end end, fun (V3128) -> fun (V3129) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3128, V3129)) end end, fun (V3130) -> fun (V3131) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3130, V3131)) end end, fun (V3132) -> fun (V3133) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3132, V3133)) end end, fun (V3134) -> fun (V3135) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3134, V3135)) end end, fun (V3136) -> fun (V3137) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3136, V3137)) end end}, V3118, V3119)) end end, fun (V3138) -> fun (V3139) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3140) -> fun (V3141) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3140, V3141)) end end, fun (V3142) -> fun (V3143) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3142, V3143)) end end}, fun (V3144) -> fun (V3145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3144, V3145)) end end, fun (V3146) -> fun (V3147) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3146, V3147)) end end, fun (V3148) -> fun (V3149) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3148, V3149)) end end, fun (V3150) -> fun (V3151) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3150, V3151)) end end, fun (V3152) -> fun (V3153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3152, V3153)) end end, fun (V3154) -> fun (V3155) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3154, V3155)) end end, fun (V3156) -> fun (V3157) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3156, V3157)) end end}, V3138, V3139)) end end, fun (V3158) -> fun (V3159) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3160) -> fun (V3161) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3160, V3161)) end end, fun (V3162) -> fun (V3163) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3162, V3163)) end end}, fun (V3164) -> fun (V3165) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3164, V3165)) end end, fun (V3166) -> fun (V3167) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3166, V3167)) end end, fun (V3168) -> fun (V3169) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3168, V3169)) end end, fun (V3170) -> fun (V3171) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3170, V3171)) end end, fun (V3172) -> fun (V3173) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3172, V3173)) end end, fun (V3174) -> fun (V3175) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3174, V3175)) end end, fun (V3176) -> fun (V3177) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3176, V3177)) end end}, V3158, V3159)) end end, fun (V3178) -> fun (V3179) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3180) -> fun (V3181) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3180, V3181)) end end, fun (V3182) -> fun (V3183) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3182, V3183)) end end}, fun (V3184) -> fun (V3185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3184, V3185)) end end, fun (V3186) -> fun (V3187) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3186, V3187)) end end, fun (V3188) -> fun (V3189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3188, V3189)) end end, fun (V3190) -> fun (V3191) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3190, V3191)) end end, fun (V3192) -> fun (V3193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3192, V3193)) end end, fun (V3194) -> fun (V3195) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3194, V3195)) end end, fun (V3196) -> fun (V3197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3196, V3197)) end end}, V3178, V3179)) end end, fun (V3198) -> fun (V3199) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3200) -> fun (V3201) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3200, V3201)) end end, fun (V3202) -> fun (V3203) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3202, V3203)) end end}, fun (V3204) -> fun (V3205) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3204, V3205)) end end, fun (V3206) -> fun (V3207) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3206, V3207)) end end, fun (V3208) -> fun (V3209) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3208, V3209)) end end, fun (V3210) -> fun (V3211) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3210, V3211)) end end, fun (V3212) -> fun (V3213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3212, V3213)) end end, fun (V3214) -> fun (V3215) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3214, V3215)) end end, fun (V3216) -> fun (V3217) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3216, V3217)) end end}, V3198, V3199)) end end, fun (V3218) -> fun (V3219) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3220) -> fun (V3221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3220, V3221)) end end, fun (V3222) -> fun (V3223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3222, V3223)) end end}, fun (V3224) -> fun (V3225) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3224, V3225)) end end, fun (V3226) -> fun (V3227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3226, V3227)) end end, fun (V3228) -> fun (V3229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3228, V3229)) end end, fun (V3230) -> fun (V3231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3230, V3231)) end end, fun (V3232) -> fun (V3233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3232, V3233)) end end, fun (V3234) -> fun (V3235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3234, V3235)) end end, fun (V3236) -> fun (V3237) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3236, V3237)) end end}, V3218, V3219)) end end, fun (V3238) -> fun (V3239) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3240) -> fun (V3241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3240, V3241)) end end, fun (V3242) -> fun (V3243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3242, V3243)) end end}, fun (V3244) -> fun (V3245) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3244, V3245)) end end, fun (V3246) -> fun (V3247) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3246, V3247)) end end, fun (V3248) -> fun (V3249) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3248, V3249)) end end, fun (V3250) -> fun (V3251) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3250, V3251)) end end, fun (V3252) -> fun (V3253) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3252, V3253)) end end, fun (V3254) -> fun (V3255) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3254, V3255)) end end, fun (V3256) -> fun (V3257) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3256, V3257)) end end}, V3238, V3239)) end end}, V3104, V3105)) end end, fun (V3258) -> fun (V3259) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3260) -> fun (V3261) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3262) -> fun (V3263) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3262, V3263)) end end, fun (V3264) -> fun (V3265) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3264, V3265)) end end}, V3260, V3261)) end end, fun (V3266) -> fun (V3267) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3268) -> fun (V3269) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3268, V3269)) end end, fun (V3270) -> fun (V3271) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3270, V3271)) end end}, V3266, V3267)) end end}, fun (V3272) -> fun (V3273) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3274) -> fun (V3275) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3274, V3275)) end end, fun (V3276) -> fun (V3277) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3276, V3277)) end end}, fun (V3278) -> fun (V3279) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3278, V3279)) end end, fun (V3280) -> fun (V3281) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3280, V3281)) end end, fun (V3282) -> fun (V3283) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3282, V3283)) end end, fun (V3284) -> fun (V3285) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3284, V3285)) end end, fun (V3286) -> fun (V3287) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3286, V3287)) end end, fun (V3288) -> fun (V3289) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3288, V3289)) end end, fun (V3290) -> fun (V3291) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3290, V3291)) end end}, V3272, V3273)) end end, fun (V3292) -> fun (V3293) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3294) -> fun (V3295) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3294, V3295)) end end, fun (V3296) -> fun (V3297) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3296, V3297)) end end}, fun (V3298) -> fun (V3299) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3298, V3299)) end end, fun (V3300) -> fun (V3301) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3300, V3301)) end end, fun (V3302) -> fun (V3303) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3302, V3303)) end end, fun (V3304) -> fun (V3305) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3304, V3305)) end end, fun (V3306) -> fun (V3307) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3306, V3307)) end end, fun (V3308) -> fun (V3309) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3308, V3309)) end end, fun (V3310) -> fun (V3311) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3310, V3311)) end end}, V3292, V3293)) end end, fun (V3312) -> fun (V3313) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3314) -> fun (V3315) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3314, V3315)) end end, fun (V3316) -> fun (V3317) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3316, V3317)) end end}, fun (V3318) -> fun (V3319) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3318, V3319)) end end, fun (V3320) -> fun (V3321) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3320, V3321)) end end, fun (V3322) -> fun (V3323) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3322, V3323)) end end, fun (V3324) -> fun (V3325) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3324, V3325)) end end, fun (V3326) -> fun (V3327) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3326, V3327)) end end, fun (V3328) -> fun (V3329) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3328, V3329)) end end, fun (V3330) -> fun (V3331) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3330, V3331)) end end}, V3312, V3313)) end end, fun (V3332) -> fun (V3333) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3334) -> fun (V3335) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3334, V3335)) end end, fun (V3336) -> fun (V3337) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3336, V3337)) end end}, fun (V3338) -> fun (V3339) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3338, V3339)) end end, fun (V3340) -> fun (V3341) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3340, V3341)) end end, fun (V3342) -> fun (V3343) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3342, V3343)) end end, fun (V3344) -> fun (V3345) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3344, V3345)) end end, fun (V3346) -> fun (V3347) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3346, V3347)) end end, fun (V3348) -> fun (V3349) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3348, V3349)) end end, fun (V3350) -> fun (V3351) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3350, V3351)) end end}, V3332, V3333)) end end, fun (V3352) -> fun (V3353) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3354) -> fun (V3355) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3354, V3355)) end end, fun (V3356) -> fun (V3357) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3356, V3357)) end end}, fun (V3358) -> fun (V3359) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3358, V3359)) end end, fun (V3360) -> fun (V3361) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3360, V3361)) end end, fun (V3362) -> fun (V3363) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3362, V3363)) end end, fun (V3364) -> fun (V3365) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3364, V3365)) end end, fun (V3366) -> fun (V3367) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3366, V3367)) end end, fun (V3368) -> fun (V3369) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3368, V3369)) end end, fun (V3370) -> fun (V3371) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3370, V3371)) end end}, V3352, V3353)) end end, fun (V3372) -> fun (V3373) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3374) -> fun (V3375) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3374, V3375)) end end, fun (V3376) -> fun (V3377) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3376, V3377)) end end}, fun (V3378) -> fun (V3379) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3378, V3379)) end end, fun (V3380) -> fun (V3381) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3380, V3381)) end end, fun (V3382) -> fun (V3383) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3382, V3383)) end end, fun (V3384) -> fun (V3385) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3384, V3385)) end end, fun (V3386) -> fun (V3387) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3386, V3387)) end end, fun (V3388) -> fun (V3389) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3388, V3389)) end end, fun (V3390) -> fun (V3391) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3390, V3391)) end end}, V3372, V3373)) end end, fun (V3392) -> fun (V3393) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3394) -> fun (V3395) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3394, V3395)) end end, fun (V3396) -> fun (V3397) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3396, V3397)) end end}, fun (V3398) -> fun (V3399) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3398, V3399)) end end, fun (V3400) -> fun (V3401) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3400, V3401)) end end, fun (V3402) -> fun (V3403) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3402, V3403)) end end, fun (V3404) -> fun (V3405) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3404, V3405)) end end, fun (V3406) -> fun (V3407) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3406, V3407)) end end, fun (V3408) -> fun (V3409) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3408, V3409)) end end, fun (V3410) -> fun (V3411) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3410, V3411)) end end}, V3392, V3393)) end end}, V3258, V3259)) end end, fun (V3412) -> fun (V3413) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3414) -> fun (V3415) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3416) -> fun (V3417) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3416, V3417)) end end, fun (V3418) -> fun (V3419) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3418, V3419)) end end}, V3414, V3415)) end end, fun (V3420) -> fun (V3421) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3422) -> fun (V3423) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3422, V3423)) end end, fun (V3424) -> fun (V3425) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3424, V3425)) end end}, V3420, V3421)) end end}, fun (V3426) -> fun (V3427) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3428) -> fun (V3429) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3428, V3429)) end end, fun (V3430) -> fun (V3431) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3430, V3431)) end end}, fun (V3432) -> fun (V3433) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3432, V3433)) end end, fun (V3434) -> fun (V3435) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3434, V3435)) end end, fun (V3436) -> fun (V3437) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3436, V3437)) end end, fun (V3438) -> fun (V3439) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3438, V3439)) end end, fun (V3440) -> fun (V3441) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3440, V3441)) end end, fun (V3442) -> fun (V3443) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3442, V3443)) end end, fun (V3444) -> fun (V3445) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3444, V3445)) end end}, V3426, V3427)) end end, fun (V3446) -> fun (V3447) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3448) -> fun (V3449) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3448, V3449)) end end, fun (V3450) -> fun (V3451) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3450, V3451)) end end}, fun (V3452) -> fun (V3453) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3452, V3453)) end end, fun (V3454) -> fun (V3455) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3454, V3455)) end end, fun (V3456) -> fun (V3457) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3456, V3457)) end end, fun (V3458) -> fun (V3459) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3458, V3459)) end end, fun (V3460) -> fun (V3461) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3460, V3461)) end end, fun (V3462) -> fun (V3463) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3462, V3463)) end end, fun (V3464) -> fun (V3465) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3464, V3465)) end end}, V3446, V3447)) end end, fun (V3466) -> fun (V3467) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3468) -> fun (V3469) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3468, V3469)) end end, fun (V3470) -> fun (V3471) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3470, V3471)) end end}, fun (V3472) -> fun (V3473) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3472, V3473)) end end, fun (V3474) -> fun (V3475) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3474, V3475)) end end, fun (V3476) -> fun (V3477) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3476, V3477)) end end, fun (V3478) -> fun (V3479) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3478, V3479)) end end, fun (V3480) -> fun (V3481) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3480, V3481)) end end, fun (V3482) -> fun (V3483) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3482, V3483)) end end, fun (V3484) -> fun (V3485) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3484, V3485)) end end}, V3466, V3467)) end end, fun (V3486) -> fun (V3487) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3488) -> fun (V3489) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3488, V3489)) end end, fun (V3490) -> fun (V3491) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3490, V3491)) end end}, fun (V3492) -> fun (V3493) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3492, V3493)) end end, fun (V3494) -> fun (V3495) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3494, V3495)) end end, fun (V3496) -> fun (V3497) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3496, V3497)) end end, fun (V3498) -> fun (V3499) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3498, V3499)) end end, fun (V3500) -> fun (V3501) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3500, V3501)) end end, fun (V3502) -> fun (V3503) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3502, V3503)) end end, fun (V3504) -> fun (V3505) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3504, V3505)) end end}, V3486, V3487)) end end, fun (V3506) -> fun (V3507) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3508) -> fun (V3509) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3508, V3509)) end end, fun (V3510) -> fun (V3511) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3510, V3511)) end end}, fun (V3512) -> fun (V3513) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3512, V3513)) end end, fun (V3514) -> fun (V3515) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3514, V3515)) end end, fun (V3516) -> fun (V3517) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3516, V3517)) end end, fun (V3518) -> fun (V3519) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3518, V3519)) end end, fun (V3520) -> fun (V3521) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3520, V3521)) end end, fun (V3522) -> fun (V3523) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3522, V3523)) end end, fun (V3524) -> fun (V3525) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3524, V3525)) end end}, V3506, V3507)) end end, fun (V3526) -> fun (V3527) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3528) -> fun (V3529) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3528, V3529)) end end, fun (V3530) -> fun (V3531) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3530, V3531)) end end}, fun (V3532) -> fun (V3533) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3532, V3533)) end end, fun (V3534) -> fun (V3535) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3534, V3535)) end end, fun (V3536) -> fun (V3537) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3536, V3537)) end end, fun (V3538) -> fun (V3539) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3538, V3539)) end end, fun (V3540) -> fun (V3541) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3540, V3541)) end end, fun (V3542) -> fun (V3543) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3542, V3543)) end end, fun (V3544) -> fun (V3545) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3544, V3545)) end end}, V3526, V3527)) end end, fun (V3546) -> fun (V3547) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3548) -> fun (V3549) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3548, V3549)) end end, fun (V3550) -> fun (V3551) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3550, V3551)) end end}, fun (V3552) -> fun (V3553) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3552, V3553)) end end, fun (V3554) -> fun (V3555) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3554, V3555)) end end, fun (V3556) -> fun (V3557) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3556, V3557)) end end, fun (V3558) -> fun (V3559) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3558, V3559)) end end, fun (V3560) -> fun (V3561) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3560, V3561)) end end, fun (V3562) -> fun (V3563) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3562, V3563)) end end, fun (V3564) -> fun (V3565) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3564, V3565)) end end}, V3546, V3547)) end end}, V3412, V3413)) end end}, V2440, V2441)) end end, fun (V3566) -> fun (V3567) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3568) -> fun (V3569) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V3568, V3569)) end end, fun (V3570) -> fun (V3571) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V3570, V3571)) end end}, fun (V3572) -> fun (V3573) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V3572, V3573)) end end, fun (V3574) -> fun (V3575) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V3574, V3575)) end end, fun (V3576) -> fun (V3577) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V3576, V3577)) end end, fun (V3578) -> fun (V3579) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V3578, V3579)) end end, fun (V3580) -> fun (V3581) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V3580, V3581)) end end, fun (V3582) -> fun (V3583) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V3582, V3583)) end end, fun (V3584) -> fun (V3585) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V3584, V3585)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3586) -> fun (V3587) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V3588) -> fun (V3589) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3590) -> fun (V3591) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3590, V3591)) end end, fun (V3592) -> fun (V3593) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3592, V3593)) end end}, V3588, V3589)) end end, fun (V3594) -> fun (V3595) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3596) -> fun (V3597) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3596, V3597)) end end, fun (V3598) -> fun (V3599) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3598, V3599)) end end}, V3594, V3595)) end end}, V3586, V3587)) end end, fun (V3600) -> fun (V3601) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V3602) -> fun (V3603) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3604) -> fun (V3605) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3604, V3605)) end end, fun (V3606) -> fun (V3607) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3606, V3607)) end end}, V3602, V3603)) end end, fun (V3608) -> fun (V3609) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3610) -> fun (V3611) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3610, V3611)) end end, fun (V3612) -> fun (V3613) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3612, V3613)) end end}, V3608, V3609)) end end}, V3600, V3601)) end end}, fun (V3614) -> fun (V3615) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3616) -> fun (V3617) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3618) -> fun (V3619) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3618, V3619)) end end, fun (V3620) -> fun (V3621) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3620, V3621)) end end}, V3616, V3617)) end end, fun (V3622) -> fun (V3623) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3624) -> fun (V3625) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3624, V3625)) end end, fun (V3626) -> fun (V3627) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3626, V3627)) end end}, V3622, V3623)) end end}, fun (V3628) -> fun (V3629) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3630) -> fun (V3631) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3630, V3631)) end end, fun (V3632) -> fun (V3633) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3632, V3633)) end end}, fun (V3634) -> fun (V3635) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3634, V3635)) end end, fun (V3636) -> fun (V3637) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3636, V3637)) end end, fun (V3638) -> fun (V3639) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3638, V3639)) end end, fun (V3640) -> fun (V3641) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3640, V3641)) end end, fun (V3642) -> fun (V3643) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3642, V3643)) end end, fun (V3644) -> fun (V3645) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3644, V3645)) end end, fun (V3646) -> fun (V3647) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3646, V3647)) end end}, V3628, V3629)) end end, fun (V3648) -> fun (V3649) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3650) -> fun (V3651) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3650, V3651)) end end, fun (V3652) -> fun (V3653) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3652, V3653)) end end}, fun (V3654) -> fun (V3655) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3654, V3655)) end end, fun (V3656) -> fun (V3657) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3656, V3657)) end end, fun (V3658) -> fun (V3659) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3658, V3659)) end end, fun (V3660) -> fun (V3661) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3660, V3661)) end end, fun (V3662) -> fun (V3663) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3662, V3663)) end end, fun (V3664) -> fun (V3665) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3664, V3665)) end end, fun (V3666) -> fun (V3667) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3666, V3667)) end end}, V3648, V3649)) end end, fun (V3668) -> fun (V3669) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3670) -> fun (V3671) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3670, V3671)) end end, fun (V3672) -> fun (V3673) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3672, V3673)) end end}, fun (V3674) -> fun (V3675) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3674, V3675)) end end, fun (V3676) -> fun (V3677) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3676, V3677)) end end, fun (V3678) -> fun (V3679) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3678, V3679)) end end, fun (V3680) -> fun (V3681) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3680, V3681)) end end, fun (V3682) -> fun (V3683) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3682, V3683)) end end, fun (V3684) -> fun (V3685) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3684, V3685)) end end, fun (V3686) -> fun (V3687) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3686, V3687)) end end}, V3668, V3669)) end end, fun (V3688) -> fun (V3689) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3690) -> fun (V3691) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3690, V3691)) end end, fun (V3692) -> fun (V3693) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3692, V3693)) end end}, fun (V3694) -> fun (V3695) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3694, V3695)) end end, fun (V3696) -> fun (V3697) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3696, V3697)) end end, fun (V3698) -> fun (V3699) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3698, V3699)) end end, fun (V3700) -> fun (V3701) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3700, V3701)) end end, fun (V3702) -> fun (V3703) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3702, V3703)) end end, fun (V3704) -> fun (V3705) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3704, V3705)) end end, fun (V3706) -> fun (V3707) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3706, V3707)) end end}, V3688, V3689)) end end, fun (V3708) -> fun (V3709) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3710) -> fun (V3711) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3710, V3711)) end end, fun (V3712) -> fun (V3713) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3712, V3713)) end end}, fun (V3714) -> fun (V3715) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3714, V3715)) end end, fun (V3716) -> fun (V3717) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3716, V3717)) end end, fun (V3718) -> fun (V3719) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3718, V3719)) end end, fun (V3720) -> fun (V3721) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3720, V3721)) end end, fun (V3722) -> fun (V3723) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3722, V3723)) end end, fun (V3724) -> fun (V3725) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3724, V3725)) end end, fun (V3726) -> fun (V3727) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3726, V3727)) end end}, V3708, V3709)) end end, fun (V3728) -> fun (V3729) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3730) -> fun (V3731) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3730, V3731)) end end, fun (V3732) -> fun (V3733) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3732, V3733)) end end}, fun (V3734) -> fun (V3735) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3734, V3735)) end end, fun (V3736) -> fun (V3737) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3736, V3737)) end end, fun (V3738) -> fun (V3739) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3738, V3739)) end end, fun (V3740) -> fun (V3741) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3740, V3741)) end end, fun (V3742) -> fun (V3743) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3742, V3743)) end end, fun (V3744) -> fun (V3745) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3744, V3745)) end end, fun (V3746) -> fun (V3747) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3746, V3747)) end end}, V3728, V3729)) end end, fun (V3748) -> fun (V3749) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3750) -> fun (V3751) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3750, V3751)) end end, fun (V3752) -> fun (V3753) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3752, V3753)) end end}, fun (V3754) -> fun (V3755) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3754, V3755)) end end, fun (V3756) -> fun (V3757) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3756, V3757)) end end, fun (V3758) -> fun (V3759) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3758, V3759)) end end, fun (V3760) -> fun (V3761) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3760, V3761)) end end, fun (V3762) -> fun (V3763) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3762, V3763)) end end, fun (V3764) -> fun (V3765) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3764, V3765)) end end, fun (V3766) -> fun (V3767) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3766, V3767)) end end}, V3748, V3749)) end end}, V3614, V3615)) end end, fun (V3768) -> fun (V3769) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3770) -> fun (V3771) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3772) -> fun (V3773) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3772, V3773)) end end, fun (V3774) -> fun (V3775) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3774, V3775)) end end}, V3770, V3771)) end end, fun (V3776) -> fun (V3777) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3778) -> fun (V3779) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3778, V3779)) end end, fun (V3780) -> fun (V3781) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3780, V3781)) end end}, V3776, V3777)) end end}, fun (V3782) -> fun (V3783) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3784) -> fun (V3785) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3784, V3785)) end end, fun (V3786) -> fun (V3787) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3786, V3787)) end end}, fun (V3788) -> fun (V3789) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3788, V3789)) end end, fun (V3790) -> fun (V3791) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3790, V3791)) end end, fun (V3792) -> fun (V3793) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3792, V3793)) end end, fun (V3794) -> fun (V3795) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3794, V3795)) end end, fun (V3796) -> fun (V3797) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3796, V3797)) end end, fun (V3798) -> fun (V3799) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3798, V3799)) end end, fun (V3800) -> fun (V3801) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3800, V3801)) end end}, V3782, V3783)) end end, fun (V3802) -> fun (V3803) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3804) -> fun (V3805) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3804, V3805)) end end, fun (V3806) -> fun (V3807) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3806, V3807)) end end}, fun (V3808) -> fun (V3809) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3808, V3809)) end end, fun (V3810) -> fun (V3811) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3810, V3811)) end end, fun (V3812) -> fun (V3813) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3812, V3813)) end end, fun (V3814) -> fun (V3815) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3814, V3815)) end end, fun (V3816) -> fun (V3817) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3816, V3817)) end end, fun (V3818) -> fun (V3819) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3818, V3819)) end end, fun (V3820) -> fun (V3821) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3820, V3821)) end end}, V3802, V3803)) end end, fun (V3822) -> fun (V3823) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3824) -> fun (V3825) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3824, V3825)) end end, fun (V3826) -> fun (V3827) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3826, V3827)) end end}, fun (V3828) -> fun (V3829) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3828, V3829)) end end, fun (V3830) -> fun (V3831) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3830, V3831)) end end, fun (V3832) -> fun (V3833) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3832, V3833)) end end, fun (V3834) -> fun (V3835) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3834, V3835)) end end, fun (V3836) -> fun (V3837) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3836, V3837)) end end, fun (V3838) -> fun (V3839) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3838, V3839)) end end, fun (V3840) -> fun (V3841) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3840, V3841)) end end}, V3822, V3823)) end end, fun (V3842) -> fun (V3843) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3844) -> fun (V3845) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3844, V3845)) end end, fun (V3846) -> fun (V3847) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3846, V3847)) end end}, fun (V3848) -> fun (V3849) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3848, V3849)) end end, fun (V3850) -> fun (V3851) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3850, V3851)) end end, fun (V3852) -> fun (V3853) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3852, V3853)) end end, fun (V3854) -> fun (V3855) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3854, V3855)) end end, fun (V3856) -> fun (V3857) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3856, V3857)) end end, fun (V3858) -> fun (V3859) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3858, V3859)) end end, fun (V3860) -> fun (V3861) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3860, V3861)) end end}, V3842, V3843)) end end, fun (V3862) -> fun (V3863) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3864) -> fun (V3865) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3864, V3865)) end end, fun (V3866) -> fun (V3867) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3866, V3867)) end end}, fun (V3868) -> fun (V3869) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3868, V3869)) end end, fun (V3870) -> fun (V3871) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3870, V3871)) end end, fun (V3872) -> fun (V3873) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3872, V3873)) end end, fun (V3874) -> fun (V3875) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3874, V3875)) end end, fun (V3876) -> fun (V3877) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3876, V3877)) end end, fun (V3878) -> fun (V3879) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3878, V3879)) end end, fun (V3880) -> fun (V3881) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3880, V3881)) end end}, V3862, V3863)) end end, fun (V3882) -> fun (V3883) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3884) -> fun (V3885) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3884, V3885)) end end, fun (V3886) -> fun (V3887) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3886, V3887)) end end}, fun (V3888) -> fun (V3889) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3888, V3889)) end end, fun (V3890) -> fun (V3891) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3890, V3891)) end end, fun (V3892) -> fun (V3893) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3892, V3893)) end end, fun (V3894) -> fun (V3895) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3894, V3895)) end end, fun (V3896) -> fun (V3897) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3896, V3897)) end end, fun (V3898) -> fun (V3899) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3898, V3899)) end end, fun (V3900) -> fun (V3901) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3900, V3901)) end end}, V3882, V3883)) end end, fun (V3902) -> fun (V3903) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3904) -> fun (V3905) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3904, V3905)) end end, fun (V3906) -> fun (V3907) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3906, V3907)) end end}, fun (V3908) -> fun (V3909) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3908, V3909)) end end, fun (V3910) -> fun (V3911) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3910, V3911)) end end, fun (V3912) -> fun (V3913) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3912, V3913)) end end, fun (V3914) -> fun (V3915) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3914, V3915)) end end, fun (V3916) -> fun (V3917) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3916, V3917)) end end, fun (V3918) -> fun (V3919) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3918, V3919)) end end, fun (V3920) -> fun (V3921) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3920, V3921)) end end}, V3902, V3903)) end end}, V3768, V3769)) end end, fun (V3922) -> fun (V3923) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3924) -> fun (V3925) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3926) -> fun (V3927) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3926, V3927)) end end, fun (V3928) -> fun (V3929) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3928, V3929)) end end}, V3924, V3925)) end end, fun (V3930) -> fun (V3931) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V3932) -> fun (V3933) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3932, V3933)) end end, fun (V3934) -> fun (V3935) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3934, V3935)) end end}, V3930, V3931)) end end}, fun (V3936) -> fun (V3937) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3938) -> fun (V3939) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3938, V3939)) end end, fun (V3940) -> fun (V3941) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3940, V3941)) end end}, fun (V3942) -> fun (V3943) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3942, V3943)) end end, fun (V3944) -> fun (V3945) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3944, V3945)) end end, fun (V3946) -> fun (V3947) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3946, V3947)) end end, fun (V3948) -> fun (V3949) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3948, V3949)) end end, fun (V3950) -> fun (V3951) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3950, V3951)) end end, fun (V3952) -> fun (V3953) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3952, V3953)) end end, fun (V3954) -> fun (V3955) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3954, V3955)) end end}, V3936, V3937)) end end, fun (V3956) -> fun (V3957) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3958) -> fun (V3959) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3958, V3959)) end end, fun (V3960) -> fun (V3961) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3960, V3961)) end end}, fun (V3962) -> fun (V3963) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3962, V3963)) end end, fun (V3964) -> fun (V3965) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3964, V3965)) end end, fun (V3966) -> fun (V3967) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3966, V3967)) end end, fun (V3968) -> fun (V3969) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3968, V3969)) end end, fun (V3970) -> fun (V3971) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3970, V3971)) end end, fun (V3972) -> fun (V3973) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3972, V3973)) end end, fun (V3974) -> fun (V3975) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3974, V3975)) end end}, V3956, V3957)) end end, fun (V3976) -> fun (V3977) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3978) -> fun (V3979) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3978, V3979)) end end, fun (V3980) -> fun (V3981) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3980, V3981)) end end}, fun (V3982) -> fun (V3983) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V3982, V3983)) end end, fun (V3984) -> fun (V3985) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3984, V3985)) end end, fun (V3986) -> fun (V3987) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V3986, V3987)) end end, fun (V3988) -> fun (V3989) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V3988, V3989)) end end, fun (V3990) -> fun (V3991) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3990, V3991)) end end, fun (V3992) -> fun (V3993) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V3992, V3993)) end end, fun (V3994) -> fun (V3995) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V3994, V3995)) end end}, V3976, V3977)) end end, fun (V3996) -> fun (V3997) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V3998) -> fun (V3999) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3998, V3999)) end end, fun (V4000) -> fun (V4001) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4000, V4001)) end end}, fun (V4002) -> fun (V4003) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4002, V4003)) end end, fun (V4004) -> fun (V4005) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4004, V4005)) end end, fun (V4006) -> fun (V4007) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4006, V4007)) end end, fun (V4008) -> fun (V4009) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4008, V4009)) end end, fun (V4010) -> fun (V4011) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4010, V4011)) end end, fun (V4012) -> fun (V4013) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4012, V4013)) end end, fun (V4014) -> fun (V4015) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4014, V4015)) end end}, V3996, V3997)) end end, fun (V4016) -> fun (V4017) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4018) -> fun (V4019) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4018, V4019)) end end, fun (V4020) -> fun (V4021) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4020, V4021)) end end}, fun (V4022) -> fun (V4023) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4022, V4023)) end end, fun (V4024) -> fun (V4025) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4024, V4025)) end end, fun (V4026) -> fun (V4027) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4026, V4027)) end end, fun (V4028) -> fun (V4029) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4028, V4029)) end end, fun (V4030) -> fun (V4031) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4030, V4031)) end end, fun (V4032) -> fun (V4033) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4032, V4033)) end end, fun (V4034) -> fun (V4035) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4034, V4035)) end end}, V4016, V4017)) end end, fun (V4036) -> fun (V4037) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4038) -> fun (V4039) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4038, V4039)) end end, fun (V4040) -> fun (V4041) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4040, V4041)) end end}, fun (V4042) -> fun (V4043) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4042, V4043)) end end, fun (V4044) -> fun (V4045) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4044, V4045)) end end, fun (V4046) -> fun (V4047) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4046, V4047)) end end, fun (V4048) -> fun (V4049) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4048, V4049)) end end, fun (V4050) -> fun (V4051) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4050, V4051)) end end, fun (V4052) -> fun (V4053) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4052, V4053)) end end, fun (V4054) -> fun (V4055) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4054, V4055)) end end}, V4036, V4037)) end end, fun (V4056) -> fun (V4057) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4058) -> fun (V4059) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4058, V4059)) end end, fun (V4060) -> fun (V4061) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4060, V4061)) end end}, fun (V4062) -> fun (V4063) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4062, V4063)) end end, fun (V4064) -> fun (V4065) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4064, V4065)) end end, fun (V4066) -> fun (V4067) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4066, V4067)) end end, fun (V4068) -> fun (V4069) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4068, V4069)) end end, fun (V4070) -> fun (V4071) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4070, V4071)) end end, fun (V4072) -> fun (V4073) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4072, V4073)) end end, fun (V4074) -> fun (V4075) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4074, V4075)) end end}, V4056, V4057)) end end}, V3922, V3923)) end end, fun (V4076) -> fun (V4077) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4078) -> fun (V4079) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4080) -> fun (V4081) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4080, V4081)) end end, fun (V4082) -> fun (V4083) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4082, V4083)) end end}, V4078, V4079)) end end, fun (V4084) -> fun (V4085) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4086) -> fun (V4087) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4086, V4087)) end end, fun (V4088) -> fun (V4089) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4088, V4089)) end end}, V4084, V4085)) end end}, fun (V4090) -> fun (V4091) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4092) -> fun (V4093) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4092, V4093)) end end, fun (V4094) -> fun (V4095) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4094, V4095)) end end}, fun (V4096) -> fun (V4097) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4096, V4097)) end end, fun (V4098) -> fun (V4099) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4098, V4099)) end end, fun (V4100) -> fun (V4101) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4100, V4101)) end end, fun (V4102) -> fun (V4103) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4102, V4103)) end end, fun (V4104) -> fun (V4105) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4104, V4105)) end end, fun (V4106) -> fun (V4107) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4106, V4107)) end end, fun (V4108) -> fun (V4109) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4108, V4109)) end end}, V4090, V4091)) end end, fun (V4110) -> fun (V4111) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4112) -> fun (V4113) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4112, V4113)) end end, fun (V4114) -> fun (V4115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4114, V4115)) end end}, fun (V4116) -> fun (V4117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4116, V4117)) end end, fun (V4118) -> fun (V4119) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4118, V4119)) end end, fun (V4120) -> fun (V4121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4120, V4121)) end end, fun (V4122) -> fun (V4123) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4122, V4123)) end end, fun (V4124) -> fun (V4125) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4124, V4125)) end end, fun (V4126) -> fun (V4127) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4126, V4127)) end end, fun (V4128) -> fun (V4129) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4128, V4129)) end end}, V4110, V4111)) end end, fun (V4130) -> fun (V4131) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4132) -> fun (V4133) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4132, V4133)) end end, fun (V4134) -> fun (V4135) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4134, V4135)) end end}, fun (V4136) -> fun (V4137) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4136, V4137)) end end, fun (V4138) -> fun (V4139) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4138, V4139)) end end, fun (V4140) -> fun (V4141) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4140, V4141)) end end, fun (V4142) -> fun (V4143) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4142, V4143)) end end, fun (V4144) -> fun (V4145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4144, V4145)) end end, fun (V4146) -> fun (V4147) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4146, V4147)) end end, fun (V4148) -> fun (V4149) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4148, V4149)) end end}, V4130, V4131)) end end, fun (V4150) -> fun (V4151) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4152) -> fun (V4153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4152, V4153)) end end, fun (V4154) -> fun (V4155) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4154, V4155)) end end}, fun (V4156) -> fun (V4157) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4156, V4157)) end end, fun (V4158) -> fun (V4159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4158, V4159)) end end, fun (V4160) -> fun (V4161) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4160, V4161)) end end, fun (V4162) -> fun (V4163) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4162, V4163)) end end, fun (V4164) -> fun (V4165) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4164, V4165)) end end, fun (V4166) -> fun (V4167) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4166, V4167)) end end, fun (V4168) -> fun (V4169) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4168, V4169)) end end}, V4150, V4151)) end end, fun (V4170) -> fun (V4171) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4172) -> fun (V4173) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4172, V4173)) end end, fun (V4174) -> fun (V4175) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4174, V4175)) end end}, fun (V4176) -> fun (V4177) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4176, V4177)) end end, fun (V4178) -> fun (V4179) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4178, V4179)) end end, fun (V4180) -> fun (V4181) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4180, V4181)) end end, fun (V4182) -> fun (V4183) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4182, V4183)) end end, fun (V4184) -> fun (V4185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4184, V4185)) end end, fun (V4186) -> fun (V4187) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4186, V4187)) end end, fun (V4188) -> fun (V4189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4188, V4189)) end end}, V4170, V4171)) end end, fun (V4190) -> fun (V4191) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4192) -> fun (V4193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4192, V4193)) end end, fun (V4194) -> fun (V4195) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4194, V4195)) end end}, fun (V4196) -> fun (V4197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4196, V4197)) end end, fun (V4198) -> fun (V4199) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4198, V4199)) end end, fun (V4200) -> fun (V4201) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4200, V4201)) end end, fun (V4202) -> fun (V4203) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4202, V4203)) end end, fun (V4204) -> fun (V4205) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4204, V4205)) end end, fun (V4206) -> fun (V4207) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4206, V4207)) end end, fun (V4208) -> fun (V4209) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4208, V4209)) end end}, V4190, V4191)) end end, fun (V4210) -> fun (V4211) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4212) -> fun (V4213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4212, V4213)) end end, fun (V4214) -> fun (V4215) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4214, V4215)) end end}, fun (V4216) -> fun (V4217) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4216, V4217)) end end, fun (V4218) -> fun (V4219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4218, V4219)) end end, fun (V4220) -> fun (V4221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4220, V4221)) end end, fun (V4222) -> fun (V4223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4222, V4223)) end end, fun (V4224) -> fun (V4225) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4224, V4225)) end end, fun (V4226) -> fun (V4227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4226, V4227)) end end, fun (V4228) -> fun (V4229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4228, V4229)) end end}, V4210, V4211)) end end}, V4076, V4077)) end end, fun (V4230) -> fun (V4231) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4232) -> fun (V4233) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4234) -> fun (V4235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4234, V4235)) end end, fun (V4236) -> fun (V4237) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4236, V4237)) end end}, V4232, V4233)) end end, fun (V4238) -> fun (V4239) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4240) -> fun (V4241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4240, V4241)) end end, fun (V4242) -> fun (V4243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4242, V4243)) end end}, V4238, V4239)) end end}, fun (V4244) -> fun (V4245) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4246) -> fun (V4247) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4246, V4247)) end end, fun (V4248) -> fun (V4249) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4248, V4249)) end end}, fun (V4250) -> fun (V4251) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4250, V4251)) end end, fun (V4252) -> fun (V4253) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4252, V4253)) end end, fun (V4254) -> fun (V4255) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4254, V4255)) end end, fun (V4256) -> fun (V4257) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4256, V4257)) end end, fun (V4258) -> fun (V4259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4258, V4259)) end end, fun (V4260) -> fun (V4261) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4260, V4261)) end end, fun (V4262) -> fun (V4263) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4262, V4263)) end end}, V4244, V4245)) end end, fun (V4264) -> fun (V4265) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4266) -> fun (V4267) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4266, V4267)) end end, fun (V4268) -> fun (V4269) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4268, V4269)) end end}, fun (V4270) -> fun (V4271) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4270, V4271)) end end, fun (V4272) -> fun (V4273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4272, V4273)) end end, fun (V4274) -> fun (V4275) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4274, V4275)) end end, fun (V4276) -> fun (V4277) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4276, V4277)) end end, fun (V4278) -> fun (V4279) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4278, V4279)) end end, fun (V4280) -> fun (V4281) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4280, V4281)) end end, fun (V4282) -> fun (V4283) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4282, V4283)) end end}, V4264, V4265)) end end, fun (V4284) -> fun (V4285) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4286) -> fun (V4287) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4286, V4287)) end end, fun (V4288) -> fun (V4289) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4288, V4289)) end end}, fun (V4290) -> fun (V4291) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4290, V4291)) end end, fun (V4292) -> fun (V4293) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4292, V4293)) end end, fun (V4294) -> fun (V4295) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4294, V4295)) end end, fun (V4296) -> fun (V4297) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4296, V4297)) end end, fun (V4298) -> fun (V4299) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4298, V4299)) end end, fun (V4300) -> fun (V4301) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4300, V4301)) end end, fun (V4302) -> fun (V4303) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4302, V4303)) end end}, V4284, V4285)) end end, fun (V4304) -> fun (V4305) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4306) -> fun (V4307) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4306, V4307)) end end, fun (V4308) -> fun (V4309) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4308, V4309)) end end}, fun (V4310) -> fun (V4311) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4310, V4311)) end end, fun (V4312) -> fun (V4313) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4312, V4313)) end end, fun (V4314) -> fun (V4315) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4314, V4315)) end end, fun (V4316) -> fun (V4317) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4316, V4317)) end end, fun (V4318) -> fun (V4319) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4318, V4319)) end end, fun (V4320) -> fun (V4321) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4320, V4321)) end end, fun (V4322) -> fun (V4323) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4322, V4323)) end end}, V4304, V4305)) end end, fun (V4324) -> fun (V4325) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4326) -> fun (V4327) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4326, V4327)) end end, fun (V4328) -> fun (V4329) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4328, V4329)) end end}, fun (V4330) -> fun (V4331) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4330, V4331)) end end, fun (V4332) -> fun (V4333) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4332, V4333)) end end, fun (V4334) -> fun (V4335) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4334, V4335)) end end, fun (V4336) -> fun (V4337) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4336, V4337)) end end, fun (V4338) -> fun (V4339) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4338, V4339)) end end, fun (V4340) -> fun (V4341) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4340, V4341)) end end, fun (V4342) -> fun (V4343) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4342, V4343)) end end}, V4324, V4325)) end end, fun (V4344) -> fun (V4345) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4346) -> fun (V4347) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4346, V4347)) end end, fun (V4348) -> fun (V4349) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4348, V4349)) end end}, fun (V4350) -> fun (V4351) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4350, V4351)) end end, fun (V4352) -> fun (V4353) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4352, V4353)) end end, fun (V4354) -> fun (V4355) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4354, V4355)) end end, fun (V4356) -> fun (V4357) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4356, V4357)) end end, fun (V4358) -> fun (V4359) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4358, V4359)) end end, fun (V4360) -> fun (V4361) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4360, V4361)) end end, fun (V4362) -> fun (V4363) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4362, V4363)) end end}, V4344, V4345)) end end, fun (V4364) -> fun (V4365) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4366) -> fun (V4367) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4366, V4367)) end end, fun (V4368) -> fun (V4369) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4368, V4369)) end end}, fun (V4370) -> fun (V4371) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4370, V4371)) end end, fun (V4372) -> fun (V4373) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4372, V4373)) end end, fun (V4374) -> fun (V4375) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4374, V4375)) end end, fun (V4376) -> fun (V4377) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4376, V4377)) end end, fun (V4378) -> fun (V4379) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4378, V4379)) end end, fun (V4380) -> fun (V4381) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4380, V4381)) end end, fun (V4382) -> fun (V4383) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4382, V4383)) end end}, V4364, V4365)) end end}, V4230, V4231)) end end, fun (V4384) -> fun (V4385) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4386) -> fun (V4387) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4388) -> fun (V4389) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4388, V4389)) end end, fun (V4390) -> fun (V4391) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4390, V4391)) end end}, V4386, V4387)) end end, fun (V4392) -> fun (V4393) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4394) -> fun (V4395) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4394, V4395)) end end, fun (V4396) -> fun (V4397) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4396, V4397)) end end}, V4392, V4393)) end end}, fun (V4398) -> fun (V4399) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4400) -> fun (V4401) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4400, V4401)) end end, fun (V4402) -> fun (V4403) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4402, V4403)) end end}, fun (V4404) -> fun (V4405) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4404, V4405)) end end, fun (V4406) -> fun (V4407) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4406, V4407)) end end, fun (V4408) -> fun (V4409) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4408, V4409)) end end, fun (V4410) -> fun (V4411) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4410, V4411)) end end, fun (V4412) -> fun (V4413) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4412, V4413)) end end, fun (V4414) -> fun (V4415) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4414, V4415)) end end, fun (V4416) -> fun (V4417) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4416, V4417)) end end}, V4398, V4399)) end end, fun (V4418) -> fun (V4419) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4420) -> fun (V4421) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4420, V4421)) end end, fun (V4422) -> fun (V4423) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4422, V4423)) end end}, fun (V4424) -> fun (V4425) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4424, V4425)) end end, fun (V4426) -> fun (V4427) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4426, V4427)) end end, fun (V4428) -> fun (V4429) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4428, V4429)) end end, fun (V4430) -> fun (V4431) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4430, V4431)) end end, fun (V4432) -> fun (V4433) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4432, V4433)) end end, fun (V4434) -> fun (V4435) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4434, V4435)) end end, fun (V4436) -> fun (V4437) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4436, V4437)) end end}, V4418, V4419)) end end, fun (V4438) -> fun (V4439) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4440) -> fun (V4441) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4440, V4441)) end end, fun (V4442) -> fun (V4443) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4442, V4443)) end end}, fun (V4444) -> fun (V4445) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4444, V4445)) end end, fun (V4446) -> fun (V4447) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4446, V4447)) end end, fun (V4448) -> fun (V4449) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4448, V4449)) end end, fun (V4450) -> fun (V4451) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4450, V4451)) end end, fun (V4452) -> fun (V4453) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4452, V4453)) end end, fun (V4454) -> fun (V4455) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4454, V4455)) end end, fun (V4456) -> fun (V4457) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4456, V4457)) end end}, V4438, V4439)) end end, fun (V4458) -> fun (V4459) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4460) -> fun (V4461) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4460, V4461)) end end, fun (V4462) -> fun (V4463) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4462, V4463)) end end}, fun (V4464) -> fun (V4465) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4464, V4465)) end end, fun (V4466) -> fun (V4467) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4466, V4467)) end end, fun (V4468) -> fun (V4469) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4468, V4469)) end end, fun (V4470) -> fun (V4471) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4470, V4471)) end end, fun (V4472) -> fun (V4473) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4472, V4473)) end end, fun (V4474) -> fun (V4475) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4474, V4475)) end end, fun (V4476) -> fun (V4477) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4476, V4477)) end end}, V4458, V4459)) end end, fun (V4478) -> fun (V4479) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4480) -> fun (V4481) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4480, V4481)) end end, fun (V4482) -> fun (V4483) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4482, V4483)) end end}, fun (V4484) -> fun (V4485) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4484, V4485)) end end, fun (V4486) -> fun (V4487) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4486, V4487)) end end, fun (V4488) -> fun (V4489) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4488, V4489)) end end, fun (V4490) -> fun (V4491) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4490, V4491)) end end, fun (V4492) -> fun (V4493) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4492, V4493)) end end, fun (V4494) -> fun (V4495) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4494, V4495)) end end, fun (V4496) -> fun (V4497) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4496, V4497)) end end}, V4478, V4479)) end end, fun (V4498) -> fun (V4499) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4500) -> fun (V4501) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4500, V4501)) end end, fun (V4502) -> fun (V4503) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4502, V4503)) end end}, fun (V4504) -> fun (V4505) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4504, V4505)) end end, fun (V4506) -> fun (V4507) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4506, V4507)) end end, fun (V4508) -> fun (V4509) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4508, V4509)) end end, fun (V4510) -> fun (V4511) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4510, V4511)) end end, fun (V4512) -> fun (V4513) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4512, V4513)) end end, fun (V4514) -> fun (V4515) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4514, V4515)) end end, fun (V4516) -> fun (V4517) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4516, V4517)) end end}, V4498, V4499)) end end, fun (V4518) -> fun (V4519) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4520) -> fun (V4521) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4520, V4521)) end end, fun (V4522) -> fun (V4523) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4522, V4523)) end end}, fun (V4524) -> fun (V4525) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4524, V4525)) end end, fun (V4526) -> fun (V4527) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4526, V4527)) end end, fun (V4528) -> fun (V4529) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4528, V4529)) end end, fun (V4530) -> fun (V4531) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4530, V4531)) end end, fun (V4532) -> fun (V4533) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4532, V4533)) end end, fun (V4534) -> fun (V4535) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4534, V4535)) end end, fun (V4536) -> fun (V4537) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4536, V4537)) end end}, V4518, V4519)) end end}, V4384, V4385)) end end, fun (V4538) -> fun (V4539) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4540) -> fun (V4541) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4542) -> fun (V4543) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4542, V4543)) end end, fun (V4544) -> fun (V4545) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4544, V4545)) end end}, V4540, V4541)) end end, fun (V4546) -> fun (V4547) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4548) -> fun (V4549) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4548, V4549)) end end, fun (V4550) -> fun (V4551) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4550, V4551)) end end}, V4546, V4547)) end end}, fun (V4552) -> fun (V4553) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4554) -> fun (V4555) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4554, V4555)) end end, fun (V4556) -> fun (V4557) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4556, V4557)) end end}, fun (V4558) -> fun (V4559) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4558, V4559)) end end, fun (V4560) -> fun (V4561) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4560, V4561)) end end, fun (V4562) -> fun (V4563) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4562, V4563)) end end, fun (V4564) -> fun (V4565) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4564, V4565)) end end, fun (V4566) -> fun (V4567) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4566, V4567)) end end, fun (V4568) -> fun (V4569) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4568, V4569)) end end, fun (V4570) -> fun (V4571) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4570, V4571)) end end}, V4552, V4553)) end end, fun (V4572) -> fun (V4573) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4574) -> fun (V4575) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4574, V4575)) end end, fun (V4576) -> fun (V4577) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4576, V4577)) end end}, fun (V4578) -> fun (V4579) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4578, V4579)) end end, fun (V4580) -> fun (V4581) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4580, V4581)) end end, fun (V4582) -> fun (V4583) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4582, V4583)) end end, fun (V4584) -> fun (V4585) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4584, V4585)) end end, fun (V4586) -> fun (V4587) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4586, V4587)) end end, fun (V4588) -> fun (V4589) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4588, V4589)) end end, fun (V4590) -> fun (V4591) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4590, V4591)) end end}, V4572, V4573)) end end, fun (V4592) -> fun (V4593) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4594) -> fun (V4595) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4594, V4595)) end end, fun (V4596) -> fun (V4597) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4596, V4597)) end end}, fun (V4598) -> fun (V4599) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4598, V4599)) end end, fun (V4600) -> fun (V4601) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4600, V4601)) end end, fun (V4602) -> fun (V4603) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4602, V4603)) end end, fun (V4604) -> fun (V4605) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4604, V4605)) end end, fun (V4606) -> fun (V4607) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4606, V4607)) end end, fun (V4608) -> fun (V4609) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4608, V4609)) end end, fun (V4610) -> fun (V4611) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4610, V4611)) end end}, V4592, V4593)) end end, fun (V4612) -> fun (V4613) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4614) -> fun (V4615) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4614, V4615)) end end, fun (V4616) -> fun (V4617) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4616, V4617)) end end}, fun (V4618) -> fun (V4619) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4618, V4619)) end end, fun (V4620) -> fun (V4621) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4620, V4621)) end end, fun (V4622) -> fun (V4623) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4622, V4623)) end end, fun (V4624) -> fun (V4625) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4624, V4625)) end end, fun (V4626) -> fun (V4627) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4626, V4627)) end end, fun (V4628) -> fun (V4629) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4628, V4629)) end end, fun (V4630) -> fun (V4631) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4630, V4631)) end end}, V4612, V4613)) end end, fun (V4632) -> fun (V4633) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4634) -> fun (V4635) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4634, V4635)) end end, fun (V4636) -> fun (V4637) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4636, V4637)) end end}, fun (V4638) -> fun (V4639) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4638, V4639)) end end, fun (V4640) -> fun (V4641) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4640, V4641)) end end, fun (V4642) -> fun (V4643) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4642, V4643)) end end, fun (V4644) -> fun (V4645) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4644, V4645)) end end, fun (V4646) -> fun (V4647) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4646, V4647)) end end, fun (V4648) -> fun (V4649) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4648, V4649)) end end, fun (V4650) -> fun (V4651) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4650, V4651)) end end}, V4632, V4633)) end end, fun (V4652) -> fun (V4653) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4654) -> fun (V4655) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4654, V4655)) end end, fun (V4656) -> fun (V4657) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4656, V4657)) end end}, fun (V4658) -> fun (V4659) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4658, V4659)) end end, fun (V4660) -> fun (V4661) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4660, V4661)) end end, fun (V4662) -> fun (V4663) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4662, V4663)) end end, fun (V4664) -> fun (V4665) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4664, V4665)) end end, fun (V4666) -> fun (V4667) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4666, V4667)) end end, fun (V4668) -> fun (V4669) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4668, V4669)) end end, fun (V4670) -> fun (V4671) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4670, V4671)) end end}, V4652, V4653)) end end, fun (V4672) -> fun (V4673) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4674) -> fun (V4675) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4674, V4675)) end end, fun (V4676) -> fun (V4677) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4676, V4677)) end end}, fun (V4678) -> fun (V4679) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4678, V4679)) end end, fun (V4680) -> fun (V4681) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4680, V4681)) end end, fun (V4682) -> fun (V4683) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4682, V4683)) end end, fun (V4684) -> fun (V4685) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4684, V4685)) end end, fun (V4686) -> fun (V4687) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4686, V4687)) end end, fun (V4688) -> fun (V4689) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4688, V4689)) end end, fun (V4690) -> fun (V4691) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4690, V4691)) end end}, V4672, V4673)) end end}, V4538, V4539)) end end}, V3566, V3567)) end end, fun (V4692) -> fun (V4693) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4694) -> fun (V4695) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4694, V4695)) end end, fun (V4696) -> fun (V4697) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V4696, V4697)) end end}, fun (V4698) -> fun (V4699) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V4698, V4699)) end end, fun (V4700) -> fun (V4701) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V4700, V4701)) end end, fun (V4702) -> fun (V4703) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V4702, V4703)) end end, fun (V4704) -> fun (V4705) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V4704, V4705)) end end, fun (V4706) -> fun (V4707) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V4706, V4707)) end end, fun (V4708) -> fun (V4709) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V4708, V4709)) end end, fun (V4710) -> fun (V4711) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V4710, V4711)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4712) -> fun (V4713) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V4714) -> fun (V4715) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4716) -> fun (V4717) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4716, V4717)) end end, fun (V4718) -> fun (V4719) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4718, V4719)) end end}, V4714, V4715)) end end, fun (V4720) -> fun (V4721) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4722) -> fun (V4723) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4722, V4723)) end end, fun (V4724) -> fun (V4725) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4724, V4725)) end end}, V4720, V4721)) end end}, V4712, V4713)) end end, fun (V4726) -> fun (V4727) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V4728) -> fun (V4729) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4730) -> fun (V4731) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4730, V4731)) end end, fun (V4732) -> fun (V4733) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4732, V4733)) end end}, V4728, V4729)) end end, fun (V4734) -> fun (V4735) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4736) -> fun (V4737) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4736, V4737)) end end, fun (V4738) -> fun (V4739) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4738, V4739)) end end}, V4734, V4735)) end end}, V4726, V4727)) end end}, fun (V4740) -> fun (V4741) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4742) -> fun (V4743) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4744) -> fun (V4745) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4744, V4745)) end end, fun (V4746) -> fun (V4747) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4746, V4747)) end end}, V4742, V4743)) end end, fun (V4748) -> fun (V4749) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4750) -> fun (V4751) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4750, V4751)) end end, fun (V4752) -> fun (V4753) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4752, V4753)) end end}, V4748, V4749)) end end}, fun (V4754) -> fun (V4755) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4756) -> fun (V4757) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4756, V4757)) end end, fun (V4758) -> fun (V4759) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4758, V4759)) end end}, fun (V4760) -> fun (V4761) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4760, V4761)) end end, fun (V4762) -> fun (V4763) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4762, V4763)) end end, fun (V4764) -> fun (V4765) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4764, V4765)) end end, fun (V4766) -> fun (V4767) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4766, V4767)) end end, fun (V4768) -> fun (V4769) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4768, V4769)) end end, fun (V4770) -> fun (V4771) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4770, V4771)) end end, fun (V4772) -> fun (V4773) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4772, V4773)) end end}, V4754, V4755)) end end, fun (V4774) -> fun (V4775) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4776) -> fun (V4777) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4776, V4777)) end end, fun (V4778) -> fun (V4779) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4778, V4779)) end end}, fun (V4780) -> fun (V4781) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4780, V4781)) end end, fun (V4782) -> fun (V4783) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4782, V4783)) end end, fun (V4784) -> fun (V4785) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4784, V4785)) end end, fun (V4786) -> fun (V4787) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4786, V4787)) end end, fun (V4788) -> fun (V4789) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4788, V4789)) end end, fun (V4790) -> fun (V4791) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4790, V4791)) end end, fun (V4792) -> fun (V4793) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4792, V4793)) end end}, V4774, V4775)) end end, fun (V4794) -> fun (V4795) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4796) -> fun (V4797) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4796, V4797)) end end, fun (V4798) -> fun (V4799) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4798, V4799)) end end}, fun (V4800) -> fun (V4801) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4800, V4801)) end end, fun (V4802) -> fun (V4803) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4802, V4803)) end end, fun (V4804) -> fun (V4805) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4804, V4805)) end end, fun (V4806) -> fun (V4807) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4806, V4807)) end end, fun (V4808) -> fun (V4809) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4808, V4809)) end end, fun (V4810) -> fun (V4811) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4810, V4811)) end end, fun (V4812) -> fun (V4813) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4812, V4813)) end end}, V4794, V4795)) end end, fun (V4814) -> fun (V4815) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4816) -> fun (V4817) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4816, V4817)) end end, fun (V4818) -> fun (V4819) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4818, V4819)) end end}, fun (V4820) -> fun (V4821) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4820, V4821)) end end, fun (V4822) -> fun (V4823) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4822, V4823)) end end, fun (V4824) -> fun (V4825) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4824, V4825)) end end, fun (V4826) -> fun (V4827) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4826, V4827)) end end, fun (V4828) -> fun (V4829) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4828, V4829)) end end, fun (V4830) -> fun (V4831) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4830, V4831)) end end, fun (V4832) -> fun (V4833) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4832, V4833)) end end}, V4814, V4815)) end end, fun (V4834) -> fun (V4835) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4836) -> fun (V4837) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4836, V4837)) end end, fun (V4838) -> fun (V4839) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4838, V4839)) end end}, fun (V4840) -> fun (V4841) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4840, V4841)) end end, fun (V4842) -> fun (V4843) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4842, V4843)) end end, fun (V4844) -> fun (V4845) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4844, V4845)) end end, fun (V4846) -> fun (V4847) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4846, V4847)) end end, fun (V4848) -> fun (V4849) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4848, V4849)) end end, fun (V4850) -> fun (V4851) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4850, V4851)) end end, fun (V4852) -> fun (V4853) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4852, V4853)) end end}, V4834, V4835)) end end, fun (V4854) -> fun (V4855) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4856) -> fun (V4857) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4856, V4857)) end end, fun (V4858) -> fun (V4859) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4858, V4859)) end end}, fun (V4860) -> fun (V4861) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4860, V4861)) end end, fun (V4862) -> fun (V4863) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4862, V4863)) end end, fun (V4864) -> fun (V4865) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4864, V4865)) end end, fun (V4866) -> fun (V4867) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4866, V4867)) end end, fun (V4868) -> fun (V4869) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4868, V4869)) end end, fun (V4870) -> fun (V4871) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4870, V4871)) end end, fun (V4872) -> fun (V4873) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4872, V4873)) end end}, V4854, V4855)) end end, fun (V4874) -> fun (V4875) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4876) -> fun (V4877) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4876, V4877)) end end, fun (V4878) -> fun (V4879) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4878, V4879)) end end}, fun (V4880) -> fun (V4881) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4880, V4881)) end end, fun (V4882) -> fun (V4883) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4882, V4883)) end end, fun (V4884) -> fun (V4885) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4884, V4885)) end end, fun (V4886) -> fun (V4887) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4886, V4887)) end end, fun (V4888) -> fun (V4889) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4888, V4889)) end end, fun (V4890) -> fun (V4891) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4890, V4891)) end end, fun (V4892) -> fun (V4893) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4892, V4893)) end end}, V4874, V4875)) end end}, V4740, V4741)) end end, fun (V4894) -> fun (V4895) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4896) -> fun (V4897) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4898) -> fun (V4899) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4898, V4899)) end end, fun (V4900) -> fun (V4901) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4900, V4901)) end end}, V4896, V4897)) end end, fun (V4902) -> fun (V4903) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V4904) -> fun (V4905) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4904, V4905)) end end, fun (V4906) -> fun (V4907) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4906, V4907)) end end}, V4902, V4903)) end end}, fun (V4908) -> fun (V4909) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4910) -> fun (V4911) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4910, V4911)) end end, fun (V4912) -> fun (V4913) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4912, V4913)) end end}, fun (V4914) -> fun (V4915) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4914, V4915)) end end, fun (V4916) -> fun (V4917) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4916, V4917)) end end, fun (V4918) -> fun (V4919) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4918, V4919)) end end, fun (V4920) -> fun (V4921) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4920, V4921)) end end, fun (V4922) -> fun (V4923) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4922, V4923)) end end, fun (V4924) -> fun (V4925) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4924, V4925)) end end, fun (V4926) -> fun (V4927) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4926, V4927)) end end}, V4908, V4909)) end end, fun (V4928) -> fun (V4929) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4930) -> fun (V4931) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4930, V4931)) end end, fun (V4932) -> fun (V4933) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4932, V4933)) end end}, fun (V4934) -> fun (V4935) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4934, V4935)) end end, fun (V4936) -> fun (V4937) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4936, V4937)) end end, fun (V4938) -> fun (V4939) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4938, V4939)) end end, fun (V4940) -> fun (V4941) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4940, V4941)) end end, fun (V4942) -> fun (V4943) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4942, V4943)) end end, fun (V4944) -> fun (V4945) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4944, V4945)) end end, fun (V4946) -> fun (V4947) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4946, V4947)) end end}, V4928, V4929)) end end, fun (V4948) -> fun (V4949) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4950) -> fun (V4951) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4950, V4951)) end end, fun (V4952) -> fun (V4953) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4952, V4953)) end end}, fun (V4954) -> fun (V4955) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4954, V4955)) end end, fun (V4956) -> fun (V4957) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4956, V4957)) end end, fun (V4958) -> fun (V4959) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4958, V4959)) end end, fun (V4960) -> fun (V4961) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4960, V4961)) end end, fun (V4962) -> fun (V4963) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4962, V4963)) end end, fun (V4964) -> fun (V4965) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4964, V4965)) end end, fun (V4966) -> fun (V4967) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4966, V4967)) end end}, V4948, V4949)) end end, fun (V4968) -> fun (V4969) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4970) -> fun (V4971) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4970, V4971)) end end, fun (V4972) -> fun (V4973) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4972, V4973)) end end}, fun (V4974) -> fun (V4975) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4974, V4975)) end end, fun (V4976) -> fun (V4977) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4976, V4977)) end end, fun (V4978) -> fun (V4979) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4978, V4979)) end end, fun (V4980) -> fun (V4981) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V4980, V4981)) end end, fun (V4982) -> fun (V4983) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4982, V4983)) end end, fun (V4984) -> fun (V4985) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V4984, V4985)) end end, fun (V4986) -> fun (V4987) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V4986, V4987)) end end}, V4968, V4969)) end end, fun (V4988) -> fun (V4989) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4990) -> fun (V4991) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4990, V4991)) end end, fun (V4992) -> fun (V4993) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4992, V4993)) end end}, fun (V4994) -> fun (V4995) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V4994, V4995)) end end, fun (V4996) -> fun (V4997) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4996, V4997)) end end, fun (V4998) -> fun (V4999) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V4998, V4999)) end end, fun (V5000) -> fun (V5001) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5000, V5001)) end end, fun (V5002) -> fun (V5003) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5002, V5003)) end end, fun (V5004) -> fun (V5005) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5004, V5005)) end end, fun (V5006) -> fun (V5007) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5006, V5007)) end end}, V4988, V4989)) end end, fun (V5008) -> fun (V5009) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5010) -> fun (V5011) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5010, V5011)) end end, fun (V5012) -> fun (V5013) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5012, V5013)) end end}, fun (V5014) -> fun (V5015) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5014, V5015)) end end, fun (V5016) -> fun (V5017) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5016, V5017)) end end, fun (V5018) -> fun (V5019) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5018, V5019)) end end, fun (V5020) -> fun (V5021) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5020, V5021)) end end, fun (V5022) -> fun (V5023) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5022, V5023)) end end, fun (V5024) -> fun (V5025) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5024, V5025)) end end, fun (V5026) -> fun (V5027) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5026, V5027)) end end}, V5008, V5009)) end end, fun (V5028) -> fun (V5029) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5030) -> fun (V5031) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5030, V5031)) end end, fun (V5032) -> fun (V5033) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5032, V5033)) end end}, fun (V5034) -> fun (V5035) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5034, V5035)) end end, fun (V5036) -> fun (V5037) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5036, V5037)) end end, fun (V5038) -> fun (V5039) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5038, V5039)) end end, fun (V5040) -> fun (V5041) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5040, V5041)) end end, fun (V5042) -> fun (V5043) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5042, V5043)) end end, fun (V5044) -> fun (V5045) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5044, V5045)) end end, fun (V5046) -> fun (V5047) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5046, V5047)) end end}, V5028, V5029)) end end}, V4894, V4895)) end end, fun (V5048) -> fun (V5049) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5050) -> fun (V5051) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5052) -> fun (V5053) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5052, V5053)) end end, fun (V5054) -> fun (V5055) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5054, V5055)) end end}, V5050, V5051)) end end, fun (V5056) -> fun (V5057) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5058) -> fun (V5059) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5058, V5059)) end end, fun (V5060) -> fun (V5061) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5060, V5061)) end end}, V5056, V5057)) end end}, fun (V5062) -> fun (V5063) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5064) -> fun (V5065) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5064, V5065)) end end, fun (V5066) -> fun (V5067) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5066, V5067)) end end}, fun (V5068) -> fun (V5069) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5068, V5069)) end end, fun (V5070) -> fun (V5071) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5070, V5071)) end end, fun (V5072) -> fun (V5073) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5072, V5073)) end end, fun (V5074) -> fun (V5075) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5074, V5075)) end end, fun (V5076) -> fun (V5077) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5076, V5077)) end end, fun (V5078) -> fun (V5079) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5078, V5079)) end end, fun (V5080) -> fun (V5081) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5080, V5081)) end end}, V5062, V5063)) end end, fun (V5082) -> fun (V5083) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5084) -> fun (V5085) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5084, V5085)) end end, fun (V5086) -> fun (V5087) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5086, V5087)) end end}, fun (V5088) -> fun (V5089) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5088, V5089)) end end, fun (V5090) -> fun (V5091) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5090, V5091)) end end, fun (V5092) -> fun (V5093) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5092, V5093)) end end, fun (V5094) -> fun (V5095) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5094, V5095)) end end, fun (V5096) -> fun (V5097) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5096, V5097)) end end, fun (V5098) -> fun (V5099) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5098, V5099)) end end, fun (V5100) -> fun (V5101) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5100, V5101)) end end}, V5082, V5083)) end end, fun (V5102) -> fun (V5103) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5104) -> fun (V5105) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5104, V5105)) end end, fun (V5106) -> fun (V5107) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5106, V5107)) end end}, fun (V5108) -> fun (V5109) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5108, V5109)) end end, fun (V5110) -> fun (V5111) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5110, V5111)) end end, fun (V5112) -> fun (V5113) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5112, V5113)) end end, fun (V5114) -> fun (V5115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5114, V5115)) end end, fun (V5116) -> fun (V5117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5116, V5117)) end end, fun (V5118) -> fun (V5119) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5118, V5119)) end end, fun (V5120) -> fun (V5121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5120, V5121)) end end}, V5102, V5103)) end end, fun (V5122) -> fun (V5123) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5124) -> fun (V5125) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5124, V5125)) end end, fun (V5126) -> fun (V5127) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5126, V5127)) end end}, fun (V5128) -> fun (V5129) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5128, V5129)) end end, fun (V5130) -> fun (V5131) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5130, V5131)) end end, fun (V5132) -> fun (V5133) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5132, V5133)) end end, fun (V5134) -> fun (V5135) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5134, V5135)) end end, fun (V5136) -> fun (V5137) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5136, V5137)) end end, fun (V5138) -> fun (V5139) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5138, V5139)) end end, fun (V5140) -> fun (V5141) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5140, V5141)) end end}, V5122, V5123)) end end, fun (V5142) -> fun (V5143) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5144) -> fun (V5145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5144, V5145)) end end, fun (V5146) -> fun (V5147) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5146, V5147)) end end}, fun (V5148) -> fun (V5149) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5148, V5149)) end end, fun (V5150) -> fun (V5151) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5150, V5151)) end end, fun (V5152) -> fun (V5153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5152, V5153)) end end, fun (V5154) -> fun (V5155) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5154, V5155)) end end, fun (V5156) -> fun (V5157) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5156, V5157)) end end, fun (V5158) -> fun (V5159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5158, V5159)) end end, fun (V5160) -> fun (V5161) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5160, V5161)) end end}, V5142, V5143)) end end, fun (V5162) -> fun (V5163) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5164) -> fun (V5165) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5164, V5165)) end end, fun (V5166) -> fun (V5167) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5166, V5167)) end end}, fun (V5168) -> fun (V5169) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5168, V5169)) end end, fun (V5170) -> fun (V5171) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5170, V5171)) end end, fun (V5172) -> fun (V5173) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5172, V5173)) end end, fun (V5174) -> fun (V5175) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5174, V5175)) end end, fun (V5176) -> fun (V5177) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5176, V5177)) end end, fun (V5178) -> fun (V5179) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5178, V5179)) end end, fun (V5180) -> fun (V5181) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5180, V5181)) end end}, V5162, V5163)) end end, fun (V5182) -> fun (V5183) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5184) -> fun (V5185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5184, V5185)) end end, fun (V5186) -> fun (V5187) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5186, V5187)) end end}, fun (V5188) -> fun (V5189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5188, V5189)) end end, fun (V5190) -> fun (V5191) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5190, V5191)) end end, fun (V5192) -> fun (V5193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5192, V5193)) end end, fun (V5194) -> fun (V5195) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5194, V5195)) end end, fun (V5196) -> fun (V5197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5196, V5197)) end end, fun (V5198) -> fun (V5199) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5198, V5199)) end end, fun (V5200) -> fun (V5201) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5200, V5201)) end end}, V5182, V5183)) end end}, V5048, V5049)) end end, fun (V5202) -> fun (V5203) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5204) -> fun (V5205) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5206) -> fun (V5207) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5206, V5207)) end end, fun (V5208) -> fun (V5209) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5208, V5209)) end end}, V5204, V5205)) end end, fun (V5210) -> fun (V5211) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5212) -> fun (V5213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5212, V5213)) end end, fun (V5214) -> fun (V5215) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5214, V5215)) end end}, V5210, V5211)) end end}, fun (V5216) -> fun (V5217) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5218) -> fun (V5219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5218, V5219)) end end, fun (V5220) -> fun (V5221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5220, V5221)) end end}, fun (V5222) -> fun (V5223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5222, V5223)) end end, fun (V5224) -> fun (V5225) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5224, V5225)) end end, fun (V5226) -> fun (V5227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5226, V5227)) end end, fun (V5228) -> fun (V5229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5228, V5229)) end end, fun (V5230) -> fun (V5231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5230, V5231)) end end, fun (V5232) -> fun (V5233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5232, V5233)) end end, fun (V5234) -> fun (V5235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5234, V5235)) end end}, V5216, V5217)) end end, fun (V5236) -> fun (V5237) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5238) -> fun (V5239) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5238, V5239)) end end, fun (V5240) -> fun (V5241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5240, V5241)) end end}, fun (V5242) -> fun (V5243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5242, V5243)) end end, fun (V5244) -> fun (V5245) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5244, V5245)) end end, fun (V5246) -> fun (V5247) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5246, V5247)) end end, fun (V5248) -> fun (V5249) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5248, V5249)) end end, fun (V5250) -> fun (V5251) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5250, V5251)) end end, fun (V5252) -> fun (V5253) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5252, V5253)) end end, fun (V5254) -> fun (V5255) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5254, V5255)) end end}, V5236, V5237)) end end, fun (V5256) -> fun (V5257) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5258) -> fun (V5259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5258, V5259)) end end, fun (V5260) -> fun (V5261) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5260, V5261)) end end}, fun (V5262) -> fun (V5263) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5262, V5263)) end end, fun (V5264) -> fun (V5265) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5264, V5265)) end end, fun (V5266) -> fun (V5267) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5266, V5267)) end end, fun (V5268) -> fun (V5269) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5268, V5269)) end end, fun (V5270) -> fun (V5271) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5270, V5271)) end end, fun (V5272) -> fun (V5273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5272, V5273)) end end, fun (V5274) -> fun (V5275) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5274, V5275)) end end}, V5256, V5257)) end end, fun (V5276) -> fun (V5277) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5278) -> fun (V5279) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5278, V5279)) end end, fun (V5280) -> fun (V5281) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5280, V5281)) end end}, fun (V5282) -> fun (V5283) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5282, V5283)) end end, fun (V5284) -> fun (V5285) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5284, V5285)) end end, fun (V5286) -> fun (V5287) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5286, V5287)) end end, fun (V5288) -> fun (V5289) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5288, V5289)) end end, fun (V5290) -> fun (V5291) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5290, V5291)) end end, fun (V5292) -> fun (V5293) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5292, V5293)) end end, fun (V5294) -> fun (V5295) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5294, V5295)) end end}, V5276, V5277)) end end, fun (V5296) -> fun (V5297) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5298) -> fun (V5299) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5298, V5299)) end end, fun (V5300) -> fun (V5301) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5300, V5301)) end end}, fun (V5302) -> fun (V5303) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5302, V5303)) end end, fun (V5304) -> fun (V5305) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5304, V5305)) end end, fun (V5306) -> fun (V5307) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5306, V5307)) end end, fun (V5308) -> fun (V5309) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5308, V5309)) end end, fun (V5310) -> fun (V5311) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5310, V5311)) end end, fun (V5312) -> fun (V5313) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5312, V5313)) end end, fun (V5314) -> fun (V5315) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5314, V5315)) end end}, V5296, V5297)) end end, fun (V5316) -> fun (V5317) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5318) -> fun (V5319) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5318, V5319)) end end, fun (V5320) -> fun (V5321) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5320, V5321)) end end}, fun (V5322) -> fun (V5323) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5322, V5323)) end end, fun (V5324) -> fun (V5325) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5324, V5325)) end end, fun (V5326) -> fun (V5327) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5326, V5327)) end end, fun (V5328) -> fun (V5329) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5328, V5329)) end end, fun (V5330) -> fun (V5331) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5330, V5331)) end end, fun (V5332) -> fun (V5333) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5332, V5333)) end end, fun (V5334) -> fun (V5335) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5334, V5335)) end end}, V5316, V5317)) end end, fun (V5336) -> fun (V5337) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5338) -> fun (V5339) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5338, V5339)) end end, fun (V5340) -> fun (V5341) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5340, V5341)) end end}, fun (V5342) -> fun (V5343) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5342, V5343)) end end, fun (V5344) -> fun (V5345) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5344, V5345)) end end, fun (V5346) -> fun (V5347) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5346, V5347)) end end, fun (V5348) -> fun (V5349) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5348, V5349)) end end, fun (V5350) -> fun (V5351) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5350, V5351)) end end, fun (V5352) -> fun (V5353) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5352, V5353)) end end, fun (V5354) -> fun (V5355) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5354, V5355)) end end}, V5336, V5337)) end end}, V5202, V5203)) end end, fun (V5356) -> fun (V5357) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5358) -> fun (V5359) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5360) -> fun (V5361) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5360, V5361)) end end, fun (V5362) -> fun (V5363) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5362, V5363)) end end}, V5358, V5359)) end end, fun (V5364) -> fun (V5365) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5366) -> fun (V5367) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5366, V5367)) end end, fun (V5368) -> fun (V5369) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5368, V5369)) end end}, V5364, V5365)) end end}, fun (V5370) -> fun (V5371) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5372) -> fun (V5373) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5372, V5373)) end end, fun (V5374) -> fun (V5375) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5374, V5375)) end end}, fun (V5376) -> fun (V5377) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5376, V5377)) end end, fun (V5378) -> fun (V5379) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5378, V5379)) end end, fun (V5380) -> fun (V5381) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5380, V5381)) end end, fun (V5382) -> fun (V5383) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5382, V5383)) end end, fun (V5384) -> fun (V5385) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5384, V5385)) end end, fun (V5386) -> fun (V5387) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5386, V5387)) end end, fun (V5388) -> fun (V5389) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5388, V5389)) end end}, V5370, V5371)) end end, fun (V5390) -> fun (V5391) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5392) -> fun (V5393) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5392, V5393)) end end, fun (V5394) -> fun (V5395) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5394, V5395)) end end}, fun (V5396) -> fun (V5397) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5396, V5397)) end end, fun (V5398) -> fun (V5399) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5398, V5399)) end end, fun (V5400) -> fun (V5401) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5400, V5401)) end end, fun (V5402) -> fun (V5403) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5402, V5403)) end end, fun (V5404) -> fun (V5405) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5404, V5405)) end end, fun (V5406) -> fun (V5407) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5406, V5407)) end end, fun (V5408) -> fun (V5409) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5408, V5409)) end end}, V5390, V5391)) end end, fun (V5410) -> fun (V5411) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5412) -> fun (V5413) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5412, V5413)) end end, fun (V5414) -> fun (V5415) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5414, V5415)) end end}, fun (V5416) -> fun (V5417) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5416, V5417)) end end, fun (V5418) -> fun (V5419) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5418, V5419)) end end, fun (V5420) -> fun (V5421) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5420, V5421)) end end, fun (V5422) -> fun (V5423) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5422, V5423)) end end, fun (V5424) -> fun (V5425) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5424, V5425)) end end, fun (V5426) -> fun (V5427) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5426, V5427)) end end, fun (V5428) -> fun (V5429) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5428, V5429)) end end}, V5410, V5411)) end end, fun (V5430) -> fun (V5431) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5432) -> fun (V5433) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5432, V5433)) end end, fun (V5434) -> fun (V5435) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5434, V5435)) end end}, fun (V5436) -> fun (V5437) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5436, V5437)) end end, fun (V5438) -> fun (V5439) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5438, V5439)) end end, fun (V5440) -> fun (V5441) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5440, V5441)) end end, fun (V5442) -> fun (V5443) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5442, V5443)) end end, fun (V5444) -> fun (V5445) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5444, V5445)) end end, fun (V5446) -> fun (V5447) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5446, V5447)) end end, fun (V5448) -> fun (V5449) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5448, V5449)) end end}, V5430, V5431)) end end, fun (V5450) -> fun (V5451) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5452) -> fun (V5453) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5452, V5453)) end end, fun (V5454) -> fun (V5455) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5454, V5455)) end end}, fun (V5456) -> fun (V5457) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5456, V5457)) end end, fun (V5458) -> fun (V5459) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5458, V5459)) end end, fun (V5460) -> fun (V5461) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5460, V5461)) end end, fun (V5462) -> fun (V5463) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5462, V5463)) end end, fun (V5464) -> fun (V5465) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5464, V5465)) end end, fun (V5466) -> fun (V5467) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5466, V5467)) end end, fun (V5468) -> fun (V5469) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5468, V5469)) end end}, V5450, V5451)) end end, fun (V5470) -> fun (V5471) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5472) -> fun (V5473) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5472, V5473)) end end, fun (V5474) -> fun (V5475) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5474, V5475)) end end}, fun (V5476) -> fun (V5477) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5476, V5477)) end end, fun (V5478) -> fun (V5479) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5478, V5479)) end end, fun (V5480) -> fun (V5481) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5480, V5481)) end end, fun (V5482) -> fun (V5483) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5482, V5483)) end end, fun (V5484) -> fun (V5485) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5484, V5485)) end end, fun (V5486) -> fun (V5487) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5486, V5487)) end end, fun (V5488) -> fun (V5489) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5488, V5489)) end end}, V5470, V5471)) end end, fun (V5490) -> fun (V5491) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5492) -> fun (V5493) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5492, V5493)) end end, fun (V5494) -> fun (V5495) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5494, V5495)) end end}, fun (V5496) -> fun (V5497) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5496, V5497)) end end, fun (V5498) -> fun (V5499) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5498, V5499)) end end, fun (V5500) -> fun (V5501) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5500, V5501)) end end, fun (V5502) -> fun (V5503) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5502, V5503)) end end, fun (V5504) -> fun (V5505) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5504, V5505)) end end, fun (V5506) -> fun (V5507) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5506, V5507)) end end, fun (V5508) -> fun (V5509) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5508, V5509)) end end}, V5490, V5491)) end end}, V5356, V5357)) end end, fun (V5510) -> fun (V5511) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5512) -> fun (V5513) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5514) -> fun (V5515) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5514, V5515)) end end, fun (V5516) -> fun (V5517) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5516, V5517)) end end}, V5512, V5513)) end end, fun (V5518) -> fun (V5519) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5520) -> fun (V5521) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5520, V5521)) end end, fun (V5522) -> fun (V5523) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5522, V5523)) end end}, V5518, V5519)) end end}, fun (V5524) -> fun (V5525) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5526) -> fun (V5527) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5526, V5527)) end end, fun (V5528) -> fun (V5529) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5528, V5529)) end end}, fun (V5530) -> fun (V5531) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5530, V5531)) end end, fun (V5532) -> fun (V5533) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5532, V5533)) end end, fun (V5534) -> fun (V5535) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5534, V5535)) end end, fun (V5536) -> fun (V5537) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5536, V5537)) end end, fun (V5538) -> fun (V5539) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5538, V5539)) end end, fun (V5540) -> fun (V5541) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5540, V5541)) end end, fun (V5542) -> fun (V5543) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5542, V5543)) end end}, V5524, V5525)) end end, fun (V5544) -> fun (V5545) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5546) -> fun (V5547) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5546, V5547)) end end, fun (V5548) -> fun (V5549) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5548, V5549)) end end}, fun (V5550) -> fun (V5551) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5550, V5551)) end end, fun (V5552) -> fun (V5553) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5552, V5553)) end end, fun (V5554) -> fun (V5555) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5554, V5555)) end end, fun (V5556) -> fun (V5557) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5556, V5557)) end end, fun (V5558) -> fun (V5559) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5558, V5559)) end end, fun (V5560) -> fun (V5561) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5560, V5561)) end end, fun (V5562) -> fun (V5563) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5562, V5563)) end end}, V5544, V5545)) end end, fun (V5564) -> fun (V5565) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5566) -> fun (V5567) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5566, V5567)) end end, fun (V5568) -> fun (V5569) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5568, V5569)) end end}, fun (V5570) -> fun (V5571) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5570, V5571)) end end, fun (V5572) -> fun (V5573) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5572, V5573)) end end, fun (V5574) -> fun (V5575) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5574, V5575)) end end, fun (V5576) -> fun (V5577) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5576, V5577)) end end, fun (V5578) -> fun (V5579) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5578, V5579)) end end, fun (V5580) -> fun (V5581) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5580, V5581)) end end, fun (V5582) -> fun (V5583) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5582, V5583)) end end}, V5564, V5565)) end end, fun (V5584) -> fun (V5585) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5586) -> fun (V5587) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5586, V5587)) end end, fun (V5588) -> fun (V5589) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5588, V5589)) end end}, fun (V5590) -> fun (V5591) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5590, V5591)) end end, fun (V5592) -> fun (V5593) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5592, V5593)) end end, fun (V5594) -> fun (V5595) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5594, V5595)) end end, fun (V5596) -> fun (V5597) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5596, V5597)) end end, fun (V5598) -> fun (V5599) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5598, V5599)) end end, fun (V5600) -> fun (V5601) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5600, V5601)) end end, fun (V5602) -> fun (V5603) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5602, V5603)) end end}, V5584, V5585)) end end, fun (V5604) -> fun (V5605) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5606) -> fun (V5607) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5606, V5607)) end end, fun (V5608) -> fun (V5609) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5608, V5609)) end end}, fun (V5610) -> fun (V5611) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5610, V5611)) end end, fun (V5612) -> fun (V5613) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5612, V5613)) end end, fun (V5614) -> fun (V5615) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5614, V5615)) end end, fun (V5616) -> fun (V5617) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5616, V5617)) end end, fun (V5618) -> fun (V5619) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5618, V5619)) end end, fun (V5620) -> fun (V5621) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5620, V5621)) end end, fun (V5622) -> fun (V5623) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5622, V5623)) end end}, V5604, V5605)) end end, fun (V5624) -> fun (V5625) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5626) -> fun (V5627) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5626, V5627)) end end, fun (V5628) -> fun (V5629) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5628, V5629)) end end}, fun (V5630) -> fun (V5631) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5630, V5631)) end end, fun (V5632) -> fun (V5633) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5632, V5633)) end end, fun (V5634) -> fun (V5635) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5634, V5635)) end end, fun (V5636) -> fun (V5637) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5636, V5637)) end end, fun (V5638) -> fun (V5639) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5638, V5639)) end end, fun (V5640) -> fun (V5641) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5640, V5641)) end end, fun (V5642) -> fun (V5643) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5642, V5643)) end end}, V5624, V5625)) end end, fun (V5644) -> fun (V5645) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5646) -> fun (V5647) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5646, V5647)) end end, fun (V5648) -> fun (V5649) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5648, V5649)) end end}, fun (V5650) -> fun (V5651) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5650, V5651)) end end, fun (V5652) -> fun (V5653) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5652, V5653)) end end, fun (V5654) -> fun (V5655) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5654, V5655)) end end, fun (V5656) -> fun (V5657) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5656, V5657)) end end, fun (V5658) -> fun (V5659) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5658, V5659)) end end, fun (V5660) -> fun (V5661) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5660, V5661)) end end, fun (V5662) -> fun (V5663) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5662, V5663)) end end}, V5644, V5645)) end end}, V5510, V5511)) end end, fun (V5664) -> fun (V5665) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5666) -> fun (V5667) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5668) -> fun (V5669) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5668, V5669)) end end, fun (V5670) -> fun (V5671) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5670, V5671)) end end}, V5666, V5667)) end end, fun (V5672) -> fun (V5673) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5674) -> fun (V5675) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5674, V5675)) end end, fun (V5676) -> fun (V5677) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5676, V5677)) end end}, V5672, V5673)) end end}, fun (V5678) -> fun (V5679) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5680) -> fun (V5681) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5680, V5681)) end end, fun (V5682) -> fun (V5683) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5682, V5683)) end end}, fun (V5684) -> fun (V5685) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5684, V5685)) end end, fun (V5686) -> fun (V5687) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5686, V5687)) end end, fun (V5688) -> fun (V5689) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5688, V5689)) end end, fun (V5690) -> fun (V5691) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5690, V5691)) end end, fun (V5692) -> fun (V5693) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5692, V5693)) end end, fun (V5694) -> fun (V5695) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5694, V5695)) end end, fun (V5696) -> fun (V5697) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5696, V5697)) end end}, V5678, V5679)) end end, fun (V5698) -> fun (V5699) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5700) -> fun (V5701) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5700, V5701)) end end, fun (V5702) -> fun (V5703) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5702, V5703)) end end}, fun (V5704) -> fun (V5705) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5704, V5705)) end end, fun (V5706) -> fun (V5707) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5706, V5707)) end end, fun (V5708) -> fun (V5709) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5708, V5709)) end end, fun (V5710) -> fun (V5711) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5710, V5711)) end end, fun (V5712) -> fun (V5713) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5712, V5713)) end end, fun (V5714) -> fun (V5715) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5714, V5715)) end end, fun (V5716) -> fun (V5717) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5716, V5717)) end end}, V5698, V5699)) end end, fun (V5718) -> fun (V5719) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5720) -> fun (V5721) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5720, V5721)) end end, fun (V5722) -> fun (V5723) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5722, V5723)) end end}, fun (V5724) -> fun (V5725) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5724, V5725)) end end, fun (V5726) -> fun (V5727) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5726, V5727)) end end, fun (V5728) -> fun (V5729) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5728, V5729)) end end, fun (V5730) -> fun (V5731) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5730, V5731)) end end, fun (V5732) -> fun (V5733) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5732, V5733)) end end, fun (V5734) -> fun (V5735) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5734, V5735)) end end, fun (V5736) -> fun (V5737) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5736, V5737)) end end}, V5718, V5719)) end end, fun (V5738) -> fun (V5739) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5740) -> fun (V5741) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5740, V5741)) end end, fun (V5742) -> fun (V5743) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5742, V5743)) end end}, fun (V5744) -> fun (V5745) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5744, V5745)) end end, fun (V5746) -> fun (V5747) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5746, V5747)) end end, fun (V5748) -> fun (V5749) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5748, V5749)) end end, fun (V5750) -> fun (V5751) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5750, V5751)) end end, fun (V5752) -> fun (V5753) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5752, V5753)) end end, fun (V5754) -> fun (V5755) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5754, V5755)) end end, fun (V5756) -> fun (V5757) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5756, V5757)) end end}, V5738, V5739)) end end, fun (V5758) -> fun (V5759) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5760) -> fun (V5761) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5760, V5761)) end end, fun (V5762) -> fun (V5763) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5762, V5763)) end end}, fun (V5764) -> fun (V5765) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5764, V5765)) end end, fun (V5766) -> fun (V5767) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5766, V5767)) end end, fun (V5768) -> fun (V5769) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5768, V5769)) end end, fun (V5770) -> fun (V5771) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5770, V5771)) end end, fun (V5772) -> fun (V5773) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5772, V5773)) end end, fun (V5774) -> fun (V5775) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5774, V5775)) end end, fun (V5776) -> fun (V5777) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5776, V5777)) end end}, V5758, V5759)) end end, fun (V5778) -> fun (V5779) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5780) -> fun (V5781) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5780, V5781)) end end, fun (V5782) -> fun (V5783) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5782, V5783)) end end}, fun (V5784) -> fun (V5785) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5784, V5785)) end end, fun (V5786) -> fun (V5787) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5786, V5787)) end end, fun (V5788) -> fun (V5789) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5788, V5789)) end end, fun (V5790) -> fun (V5791) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5790, V5791)) end end, fun (V5792) -> fun (V5793) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5792, V5793)) end end, fun (V5794) -> fun (V5795) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5794, V5795)) end end, fun (V5796) -> fun (V5797) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5796, V5797)) end end}, V5778, V5779)) end end, fun (V5798) -> fun (V5799) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5800) -> fun (V5801) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5800, V5801)) end end, fun (V5802) -> fun (V5803) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5802, V5803)) end end}, fun (V5804) -> fun (V5805) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5804, V5805)) end end, fun (V5806) -> fun (V5807) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5806, V5807)) end end, fun (V5808) -> fun (V5809) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5808, V5809)) end end, fun (V5810) -> fun (V5811) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5810, V5811)) end end, fun (V5812) -> fun (V5813) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5812, V5813)) end end, fun (V5814) -> fun (V5815) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5814, V5815)) end end, fun (V5816) -> fun (V5817) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5816, V5817)) end end}, V5798, V5799)) end end}, V5664, V5665)) end end}, V4692, V4693)) end end, fun (V5818) -> fun (V5819) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5820) -> fun (V5821) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5820, V5821)) end end, fun (V5822) -> fun (V5823) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V5822, V5823)) end end}, fun (V5824) -> fun (V5825) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V5824, V5825)) end end, fun (V5826) -> fun (V5827) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V5826, V5827)) end end, fun (V5828) -> fun (V5829) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V5828, V5829)) end end, fun (V5830) -> fun (V5831) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V5830, V5831)) end end, fun (V5832) -> fun (V5833) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V5832, V5833)) end end, fun (V5834) -> fun (V5835) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V5834, V5835)) end end, fun (V5836) -> fun (V5837) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V5836, V5837)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5838) -> fun (V5839) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V5840) -> fun (V5841) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5842) -> fun (V5843) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5842, V5843)) end end, fun (V5844) -> fun (V5845) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5844, V5845)) end end}, V5840, V5841)) end end, fun (V5846) -> fun (V5847) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5848) -> fun (V5849) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5848, V5849)) end end, fun (V5850) -> fun (V5851) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5850, V5851)) end end}, V5846, V5847)) end end}, V5838, V5839)) end end, fun (V5852) -> fun (V5853) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V5854) -> fun (V5855) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5856) -> fun (V5857) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5856, V5857)) end end, fun (V5858) -> fun (V5859) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5858, V5859)) end end}, V5854, V5855)) end end, fun (V5860) -> fun (V5861) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5862) -> fun (V5863) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5862, V5863)) end end, fun (V5864) -> fun (V5865) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5864, V5865)) end end}, V5860, V5861)) end end}, V5852, V5853)) end end}, fun (V5866) -> fun (V5867) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5868) -> fun (V5869) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5870) -> fun (V5871) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5870, V5871)) end end, fun (V5872) -> fun (V5873) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5872, V5873)) end end}, V5868, V5869)) end end, fun (V5874) -> fun (V5875) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V5876) -> fun (V5877) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5876, V5877)) end end, fun (V5878) -> fun (V5879) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5878, V5879)) end end}, V5874, V5875)) end end}, fun (V5880) -> fun (V5881) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5882) -> fun (V5883) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5882, V5883)) end end, fun (V5884) -> fun (V5885) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5884, V5885)) end end}, fun (V5886) -> fun (V5887) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5886, V5887)) end end, fun (V5888) -> fun (V5889) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5888, V5889)) end end, fun (V5890) -> fun (V5891) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5890, V5891)) end end, fun (V5892) -> fun (V5893) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5892, V5893)) end end, fun (V5894) -> fun (V5895) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5894, V5895)) end end, fun (V5896) -> fun (V5897) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5896, V5897)) end end, fun (V5898) -> fun (V5899) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5898, V5899)) end end}, V5880, V5881)) end end, fun (V5900) -> fun (V5901) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5902) -> fun (V5903) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5902, V5903)) end end, fun (V5904) -> fun (V5905) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5904, V5905)) end end}, fun (V5906) -> fun (V5907) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5906, V5907)) end end, fun (V5908) -> fun (V5909) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5908, V5909)) end end, fun (V5910) -> fun (V5911) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5910, V5911)) end end, fun (V5912) -> fun (V5913) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5912, V5913)) end end, fun (V5914) -> fun (V5915) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5914, V5915)) end end, fun (V5916) -> fun (V5917) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5916, V5917)) end end, fun (V5918) -> fun (V5919) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5918, V5919)) end end}, V5900, V5901)) end end, fun (V5920) -> fun (V5921) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5922) -> fun (V5923) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5922, V5923)) end end, fun (V5924) -> fun (V5925) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5924, V5925)) end end}, fun (V5926) -> fun (V5927) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5926, V5927)) end end, fun (V5928) -> fun (V5929) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5928, V5929)) end end, fun (V5930) -> fun (V5931) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5930, V5931)) end end, fun (V5932) -> fun (V5933) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5932, V5933)) end end, fun (V5934) -> fun (V5935) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5934, V5935)) end end, fun (V5936) -> fun (V5937) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5936, V5937)) end end, fun (V5938) -> fun (V5939) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5938, V5939)) end end}, V5920, V5921)) end end, fun (V5940) -> fun (V5941) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5942) -> fun (V5943) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5942, V5943)) end end, fun (V5944) -> fun (V5945) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5944, V5945)) end end}, fun (V5946) -> fun (V5947) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5946, V5947)) end end, fun (V5948) -> fun (V5949) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5948, V5949)) end end, fun (V5950) -> fun (V5951) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5950, V5951)) end end, fun (V5952) -> fun (V5953) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5952, V5953)) end end, fun (V5954) -> fun (V5955) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5954, V5955)) end end, fun (V5956) -> fun (V5957) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5956, V5957)) end end, fun (V5958) -> fun (V5959) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5958, V5959)) end end}, V5940, V5941)) end end, fun (V5960) -> fun (V5961) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5962) -> fun (V5963) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5962, V5963)) end end, fun (V5964) -> fun (V5965) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5964, V5965)) end end}, fun (V5966) -> fun (V5967) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5966, V5967)) end end, fun (V5968) -> fun (V5969) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5968, V5969)) end end, fun (V5970) -> fun (V5971) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5970, V5971)) end end, fun (V5972) -> fun (V5973) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5972, V5973)) end end, fun (V5974) -> fun (V5975) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5974, V5975)) end end, fun (V5976) -> fun (V5977) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5976, V5977)) end end, fun (V5978) -> fun (V5979) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5978, V5979)) end end}, V5960, V5961)) end end, fun (V5980) -> fun (V5981) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5982) -> fun (V5983) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5982, V5983)) end end, fun (V5984) -> fun (V5985) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V5984, V5985)) end end}, fun (V5986) -> fun (V5987) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5986, V5987)) end end, fun (V5988) -> fun (V5989) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5988, V5989)) end end, fun (V5990) -> fun (V5991) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V5990, V5991)) end end, fun (V5992) -> fun (V5993) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V5992, V5993)) end end, fun (V5994) -> fun (V5995) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V5994, V5995)) end end, fun (V5996) -> fun (V5997) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V5996, V5997)) end end, fun (V5998) -> fun (V5999) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V5998, V5999)) end end}, V5980, V5981)) end end, fun (V6000) -> fun (V6001) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6002) -> fun (V6003) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6002, V6003)) end end, fun (V6004) -> fun (V6005) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6004, V6005)) end end}, fun (V6006) -> fun (V6007) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6006, V6007)) end end, fun (V6008) -> fun (V6009) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6008, V6009)) end end, fun (V6010) -> fun (V6011) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6010, V6011)) end end, fun (V6012) -> fun (V6013) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6012, V6013)) end end, fun (V6014) -> fun (V6015) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6014, V6015)) end end, fun (V6016) -> fun (V6017) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6016, V6017)) end end, fun (V6018) -> fun (V6019) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6018, V6019)) end end}, V6000, V6001)) end end}, V5866, V5867)) end end, fun (V6020) -> fun (V6021) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6022) -> fun (V6023) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6024) -> fun (V6025) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6024, V6025)) end end, fun (V6026) -> fun (V6027) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6026, V6027)) end end}, V6022, V6023)) end end, fun (V6028) -> fun (V6029) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6030) -> fun (V6031) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6030, V6031)) end end, fun (V6032) -> fun (V6033) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6032, V6033)) end end}, V6028, V6029)) end end}, fun (V6034) -> fun (V6035) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6036) -> fun (V6037) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6036, V6037)) end end, fun (V6038) -> fun (V6039) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6038, V6039)) end end}, fun (V6040) -> fun (V6041) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6040, V6041)) end end, fun (V6042) -> fun (V6043) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6042, V6043)) end end, fun (V6044) -> fun (V6045) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6044, V6045)) end end, fun (V6046) -> fun (V6047) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6046, V6047)) end end, fun (V6048) -> fun (V6049) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6048, V6049)) end end, fun (V6050) -> fun (V6051) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6050, V6051)) end end, fun (V6052) -> fun (V6053) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6052, V6053)) end end}, V6034, V6035)) end end, fun (V6054) -> fun (V6055) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6056) -> fun (V6057) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6056, V6057)) end end, fun (V6058) -> fun (V6059) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6058, V6059)) end end}, fun (V6060) -> fun (V6061) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6060, V6061)) end end, fun (V6062) -> fun (V6063) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6062, V6063)) end end, fun (V6064) -> fun (V6065) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6064, V6065)) end end, fun (V6066) -> fun (V6067) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6066, V6067)) end end, fun (V6068) -> fun (V6069) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6068, V6069)) end end, fun (V6070) -> fun (V6071) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6070, V6071)) end end, fun (V6072) -> fun (V6073) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6072, V6073)) end end}, V6054, V6055)) end end, fun (V6074) -> fun (V6075) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6076) -> fun (V6077) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6076, V6077)) end end, fun (V6078) -> fun (V6079) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6078, V6079)) end end}, fun (V6080) -> fun (V6081) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6080, V6081)) end end, fun (V6082) -> fun (V6083) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6082, V6083)) end end, fun (V6084) -> fun (V6085) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6084, V6085)) end end, fun (V6086) -> fun (V6087) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6086, V6087)) end end, fun (V6088) -> fun (V6089) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6088, V6089)) end end, fun (V6090) -> fun (V6091) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6090, V6091)) end end, fun (V6092) -> fun (V6093) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6092, V6093)) end end}, V6074, V6075)) end end, fun (V6094) -> fun (V6095) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6096) -> fun (V6097) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6096, V6097)) end end, fun (V6098) -> fun (V6099) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6098, V6099)) end end}, fun (V6100) -> fun (V6101) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6100, V6101)) end end, fun (V6102) -> fun (V6103) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6102, V6103)) end end, fun (V6104) -> fun (V6105) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6104, V6105)) end end, fun (V6106) -> fun (V6107) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6106, V6107)) end end, fun (V6108) -> fun (V6109) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6108, V6109)) end end, fun (V6110) -> fun (V6111) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6110, V6111)) end end, fun (V6112) -> fun (V6113) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6112, V6113)) end end}, V6094, V6095)) end end, fun (V6114) -> fun (V6115) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6116) -> fun (V6117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6116, V6117)) end end, fun (V6118) -> fun (V6119) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6118, V6119)) end end}, fun (V6120) -> fun (V6121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6120, V6121)) end end, fun (V6122) -> fun (V6123) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6122, V6123)) end end, fun (V6124) -> fun (V6125) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6124, V6125)) end end, fun (V6126) -> fun (V6127) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6126, V6127)) end end, fun (V6128) -> fun (V6129) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6128, V6129)) end end, fun (V6130) -> fun (V6131) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6130, V6131)) end end, fun (V6132) -> fun (V6133) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6132, V6133)) end end}, V6114, V6115)) end end, fun (V6134) -> fun (V6135) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6136) -> fun (V6137) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6136, V6137)) end end, fun (V6138) -> fun (V6139) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6138, V6139)) end end}, fun (V6140) -> fun (V6141) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6140, V6141)) end end, fun (V6142) -> fun (V6143) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6142, V6143)) end end, fun (V6144) -> fun (V6145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6144, V6145)) end end, fun (V6146) -> fun (V6147) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6146, V6147)) end end, fun (V6148) -> fun (V6149) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6148, V6149)) end end, fun (V6150) -> fun (V6151) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6150, V6151)) end end, fun (V6152) -> fun (V6153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6152, V6153)) end end}, V6134, V6135)) end end, fun (V6154) -> fun (V6155) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6156) -> fun (V6157) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6156, V6157)) end end, fun (V6158) -> fun (V6159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6158, V6159)) end end}, fun (V6160) -> fun (V6161) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6160, V6161)) end end, fun (V6162) -> fun (V6163) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6162, V6163)) end end, fun (V6164) -> fun (V6165) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6164, V6165)) end end, fun (V6166) -> fun (V6167) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6166, V6167)) end end, fun (V6168) -> fun (V6169) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6168, V6169)) end end, fun (V6170) -> fun (V6171) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6170, V6171)) end end, fun (V6172) -> fun (V6173) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6172, V6173)) end end}, V6154, V6155)) end end}, V6020, V6021)) end end, fun (V6174) -> fun (V6175) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6176) -> fun (V6177) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6178) -> fun (V6179) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6178, V6179)) end end, fun (V6180) -> fun (V6181) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6180, V6181)) end end}, V6176, V6177)) end end, fun (V6182) -> fun (V6183) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6184) -> fun (V6185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6184, V6185)) end end, fun (V6186) -> fun (V6187) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6186, V6187)) end end}, V6182, V6183)) end end}, fun (V6188) -> fun (V6189) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6190) -> fun (V6191) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6190, V6191)) end end, fun (V6192) -> fun (V6193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6192, V6193)) end end}, fun (V6194) -> fun (V6195) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6194, V6195)) end end, fun (V6196) -> fun (V6197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6196, V6197)) end end, fun (V6198) -> fun (V6199) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6198, V6199)) end end, fun (V6200) -> fun (V6201) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6200, V6201)) end end, fun (V6202) -> fun (V6203) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6202, V6203)) end end, fun (V6204) -> fun (V6205) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6204, V6205)) end end, fun (V6206) -> fun (V6207) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6206, V6207)) end end}, V6188, V6189)) end end, fun (V6208) -> fun (V6209) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6210) -> fun (V6211) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6210, V6211)) end end, fun (V6212) -> fun (V6213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6212, V6213)) end end}, fun (V6214) -> fun (V6215) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6214, V6215)) end end, fun (V6216) -> fun (V6217) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6216, V6217)) end end, fun (V6218) -> fun (V6219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6218, V6219)) end end, fun (V6220) -> fun (V6221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6220, V6221)) end end, fun (V6222) -> fun (V6223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6222, V6223)) end end, fun (V6224) -> fun (V6225) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6224, V6225)) end end, fun (V6226) -> fun (V6227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6226, V6227)) end end}, V6208, V6209)) end end, fun (V6228) -> fun (V6229) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6230) -> fun (V6231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6230, V6231)) end end, fun (V6232) -> fun (V6233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6232, V6233)) end end}, fun (V6234) -> fun (V6235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6234, V6235)) end end, fun (V6236) -> fun (V6237) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6236, V6237)) end end, fun (V6238) -> fun (V6239) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6238, V6239)) end end, fun (V6240) -> fun (V6241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6240, V6241)) end end, fun (V6242) -> fun (V6243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6242, V6243)) end end, fun (V6244) -> fun (V6245) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6244, V6245)) end end, fun (V6246) -> fun (V6247) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6246, V6247)) end end}, V6228, V6229)) end end, fun (V6248) -> fun (V6249) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6250) -> fun (V6251) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6250, V6251)) end end, fun (V6252) -> fun (V6253) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6252, V6253)) end end}, fun (V6254) -> fun (V6255) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6254, V6255)) end end, fun (V6256) -> fun (V6257) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6256, V6257)) end end, fun (V6258) -> fun (V6259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6258, V6259)) end end, fun (V6260) -> fun (V6261) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6260, V6261)) end end, fun (V6262) -> fun (V6263) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6262, V6263)) end end, fun (V6264) -> fun (V6265) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6264, V6265)) end end, fun (V6266) -> fun (V6267) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6266, V6267)) end end}, V6248, V6249)) end end, fun (V6268) -> fun (V6269) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6270) -> fun (V6271) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6270, V6271)) end end, fun (V6272) -> fun (V6273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6272, V6273)) end end}, fun (V6274) -> fun (V6275) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6274, V6275)) end end, fun (V6276) -> fun (V6277) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6276, V6277)) end end, fun (V6278) -> fun (V6279) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6278, V6279)) end end, fun (V6280) -> fun (V6281) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6280, V6281)) end end, fun (V6282) -> fun (V6283) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6282, V6283)) end end, fun (V6284) -> fun (V6285) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6284, V6285)) end end, fun (V6286) -> fun (V6287) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6286, V6287)) end end}, V6268, V6269)) end end, fun (V6288) -> fun (V6289) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6290) -> fun (V6291) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6290, V6291)) end end, fun (V6292) -> fun (V6293) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6292, V6293)) end end}, fun (V6294) -> fun (V6295) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6294, V6295)) end end, fun (V6296) -> fun (V6297) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6296, V6297)) end end, fun (V6298) -> fun (V6299) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6298, V6299)) end end, fun (V6300) -> fun (V6301) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6300, V6301)) end end, fun (V6302) -> fun (V6303) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6302, V6303)) end end, fun (V6304) -> fun (V6305) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6304, V6305)) end end, fun (V6306) -> fun (V6307) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6306, V6307)) end end}, V6288, V6289)) end end, fun (V6308) -> fun (V6309) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6310) -> fun (V6311) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6310, V6311)) end end, fun (V6312) -> fun (V6313) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6312, V6313)) end end}, fun (V6314) -> fun (V6315) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6314, V6315)) end end, fun (V6316) -> fun (V6317) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6316, V6317)) end end, fun (V6318) -> fun (V6319) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6318, V6319)) end end, fun (V6320) -> fun (V6321) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6320, V6321)) end end, fun (V6322) -> fun (V6323) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6322, V6323)) end end, fun (V6324) -> fun (V6325) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6324, V6325)) end end, fun (V6326) -> fun (V6327) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6326, V6327)) end end}, V6308, V6309)) end end}, V6174, V6175)) end end, fun (V6328) -> fun (V6329) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6330) -> fun (V6331) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6332) -> fun (V6333) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6332, V6333)) end end, fun (V6334) -> fun (V6335) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6334, V6335)) end end}, V6330, V6331)) end end, fun (V6336) -> fun (V6337) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6338) -> fun (V6339) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6338, V6339)) end end, fun (V6340) -> fun (V6341) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6340, V6341)) end end}, V6336, V6337)) end end}, fun (V6342) -> fun (V6343) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6344) -> fun (V6345) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6344, V6345)) end end, fun (V6346) -> fun (V6347) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6346, V6347)) end end}, fun (V6348) -> fun (V6349) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6348, V6349)) end end, fun (V6350) -> fun (V6351) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6350, V6351)) end end, fun (V6352) -> fun (V6353) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6352, V6353)) end end, fun (V6354) -> fun (V6355) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6354, V6355)) end end, fun (V6356) -> fun (V6357) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6356, V6357)) end end, fun (V6358) -> fun (V6359) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6358, V6359)) end end, fun (V6360) -> fun (V6361) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6360, V6361)) end end}, V6342, V6343)) end end, fun (V6362) -> fun (V6363) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6364) -> fun (V6365) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6364, V6365)) end end, fun (V6366) -> fun (V6367) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6366, V6367)) end end}, fun (V6368) -> fun (V6369) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6368, V6369)) end end, fun (V6370) -> fun (V6371) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6370, V6371)) end end, fun (V6372) -> fun (V6373) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6372, V6373)) end end, fun (V6374) -> fun (V6375) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6374, V6375)) end end, fun (V6376) -> fun (V6377) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6376, V6377)) end end, fun (V6378) -> fun (V6379) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6378, V6379)) end end, fun (V6380) -> fun (V6381) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6380, V6381)) end end}, V6362, V6363)) end end, fun (V6382) -> fun (V6383) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6384) -> fun (V6385) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6384, V6385)) end end, fun (V6386) -> fun (V6387) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6386, V6387)) end end}, fun (V6388) -> fun (V6389) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6388, V6389)) end end, fun (V6390) -> fun (V6391) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6390, V6391)) end end, fun (V6392) -> fun (V6393) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6392, V6393)) end end, fun (V6394) -> fun (V6395) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6394, V6395)) end end, fun (V6396) -> fun (V6397) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6396, V6397)) end end, fun (V6398) -> fun (V6399) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6398, V6399)) end end, fun (V6400) -> fun (V6401) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6400, V6401)) end end}, V6382, V6383)) end end, fun (V6402) -> fun (V6403) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6404) -> fun (V6405) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6404, V6405)) end end, fun (V6406) -> fun (V6407) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6406, V6407)) end end}, fun (V6408) -> fun (V6409) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6408, V6409)) end end, fun (V6410) -> fun (V6411) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6410, V6411)) end end, fun (V6412) -> fun (V6413) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6412, V6413)) end end, fun (V6414) -> fun (V6415) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6414, V6415)) end end, fun (V6416) -> fun (V6417) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6416, V6417)) end end, fun (V6418) -> fun (V6419) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6418, V6419)) end end, fun (V6420) -> fun (V6421) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6420, V6421)) end end}, V6402, V6403)) end end, fun (V6422) -> fun (V6423) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6424) -> fun (V6425) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6424, V6425)) end end, fun (V6426) -> fun (V6427) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6426, V6427)) end end}, fun (V6428) -> fun (V6429) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6428, V6429)) end end, fun (V6430) -> fun (V6431) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6430, V6431)) end end, fun (V6432) -> fun (V6433) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6432, V6433)) end end, fun (V6434) -> fun (V6435) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6434, V6435)) end end, fun (V6436) -> fun (V6437) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6436, V6437)) end end, fun (V6438) -> fun (V6439) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6438, V6439)) end end, fun (V6440) -> fun (V6441) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6440, V6441)) end end}, V6422, V6423)) end end, fun (V6442) -> fun (V6443) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6444) -> fun (V6445) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6444, V6445)) end end, fun (V6446) -> fun (V6447) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6446, V6447)) end end}, fun (V6448) -> fun (V6449) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6448, V6449)) end end, fun (V6450) -> fun (V6451) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6450, V6451)) end end, fun (V6452) -> fun (V6453) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6452, V6453)) end end, fun (V6454) -> fun (V6455) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6454, V6455)) end end, fun (V6456) -> fun (V6457) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6456, V6457)) end end, fun (V6458) -> fun (V6459) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6458, V6459)) end end, fun (V6460) -> fun (V6461) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6460, V6461)) end end}, V6442, V6443)) end end, fun (V6462) -> fun (V6463) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6464) -> fun (V6465) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6464, V6465)) end end, fun (V6466) -> fun (V6467) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6466, V6467)) end end}, fun (V6468) -> fun (V6469) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6468, V6469)) end end, fun (V6470) -> fun (V6471) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6470, V6471)) end end, fun (V6472) -> fun (V6473) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6472, V6473)) end end, fun (V6474) -> fun (V6475) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6474, V6475)) end end, fun (V6476) -> fun (V6477) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6476, V6477)) end end, fun (V6478) -> fun (V6479) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6478, V6479)) end end, fun (V6480) -> fun (V6481) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6480, V6481)) end end}, V6462, V6463)) end end}, V6328, V6329)) end end, fun (V6482) -> fun (V6483) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6484) -> fun (V6485) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6486) -> fun (V6487) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6486, V6487)) end end, fun (V6488) -> fun (V6489) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6488, V6489)) end end}, V6484, V6485)) end end, fun (V6490) -> fun (V6491) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6492) -> fun (V6493) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6492, V6493)) end end, fun (V6494) -> fun (V6495) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6494, V6495)) end end}, V6490, V6491)) end end}, fun (V6496) -> fun (V6497) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6498) -> fun (V6499) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6498, V6499)) end end, fun (V6500) -> fun (V6501) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6500, V6501)) end end}, fun (V6502) -> fun (V6503) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6502, V6503)) end end, fun (V6504) -> fun (V6505) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6504, V6505)) end end, fun (V6506) -> fun (V6507) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6506, V6507)) end end, fun (V6508) -> fun (V6509) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6508, V6509)) end end, fun (V6510) -> fun (V6511) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6510, V6511)) end end, fun (V6512) -> fun (V6513) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6512, V6513)) end end, fun (V6514) -> fun (V6515) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6514, V6515)) end end}, V6496, V6497)) end end, fun (V6516) -> fun (V6517) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6518) -> fun (V6519) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6518, V6519)) end end, fun (V6520) -> fun (V6521) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6520, V6521)) end end}, fun (V6522) -> fun (V6523) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6522, V6523)) end end, fun (V6524) -> fun (V6525) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6524, V6525)) end end, fun (V6526) -> fun (V6527) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6526, V6527)) end end, fun (V6528) -> fun (V6529) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6528, V6529)) end end, fun (V6530) -> fun (V6531) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6530, V6531)) end end, fun (V6532) -> fun (V6533) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6532, V6533)) end end, fun (V6534) -> fun (V6535) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6534, V6535)) end end}, V6516, V6517)) end end, fun (V6536) -> fun (V6537) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6538) -> fun (V6539) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6538, V6539)) end end, fun (V6540) -> fun (V6541) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6540, V6541)) end end}, fun (V6542) -> fun (V6543) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6542, V6543)) end end, fun (V6544) -> fun (V6545) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6544, V6545)) end end, fun (V6546) -> fun (V6547) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6546, V6547)) end end, fun (V6548) -> fun (V6549) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6548, V6549)) end end, fun (V6550) -> fun (V6551) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6550, V6551)) end end, fun (V6552) -> fun (V6553) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6552, V6553)) end end, fun (V6554) -> fun (V6555) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6554, V6555)) end end}, V6536, V6537)) end end, fun (V6556) -> fun (V6557) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6558) -> fun (V6559) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6558, V6559)) end end, fun (V6560) -> fun (V6561) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6560, V6561)) end end}, fun (V6562) -> fun (V6563) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6562, V6563)) end end, fun (V6564) -> fun (V6565) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6564, V6565)) end end, fun (V6566) -> fun (V6567) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6566, V6567)) end end, fun (V6568) -> fun (V6569) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6568, V6569)) end end, fun (V6570) -> fun (V6571) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6570, V6571)) end end, fun (V6572) -> fun (V6573) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6572, V6573)) end end, fun (V6574) -> fun (V6575) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6574, V6575)) end end}, V6556, V6557)) end end, fun (V6576) -> fun (V6577) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6578) -> fun (V6579) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6578, V6579)) end end, fun (V6580) -> fun (V6581) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6580, V6581)) end end}, fun (V6582) -> fun (V6583) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6582, V6583)) end end, fun (V6584) -> fun (V6585) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6584, V6585)) end end, fun (V6586) -> fun (V6587) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6586, V6587)) end end, fun (V6588) -> fun (V6589) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6588, V6589)) end end, fun (V6590) -> fun (V6591) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6590, V6591)) end end, fun (V6592) -> fun (V6593) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6592, V6593)) end end, fun (V6594) -> fun (V6595) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6594, V6595)) end end}, V6576, V6577)) end end, fun (V6596) -> fun (V6597) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6598) -> fun (V6599) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6598, V6599)) end end, fun (V6600) -> fun (V6601) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6600, V6601)) end end}, fun (V6602) -> fun (V6603) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6602, V6603)) end end, fun (V6604) -> fun (V6605) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6604, V6605)) end end, fun (V6606) -> fun (V6607) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6606, V6607)) end end, fun (V6608) -> fun (V6609) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6608, V6609)) end end, fun (V6610) -> fun (V6611) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6610, V6611)) end end, fun (V6612) -> fun (V6613) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6612, V6613)) end end, fun (V6614) -> fun (V6615) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6614, V6615)) end end}, V6596, V6597)) end end, fun (V6616) -> fun (V6617) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6618) -> fun (V6619) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6618, V6619)) end end, fun (V6620) -> fun (V6621) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6620, V6621)) end end}, fun (V6622) -> fun (V6623) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6622, V6623)) end end, fun (V6624) -> fun (V6625) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6624, V6625)) end end, fun (V6626) -> fun (V6627) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6626, V6627)) end end, fun (V6628) -> fun (V6629) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6628, V6629)) end end, fun (V6630) -> fun (V6631) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6630, V6631)) end end, fun (V6632) -> fun (V6633) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6632, V6633)) end end, fun (V6634) -> fun (V6635) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6634, V6635)) end end}, V6616, V6617)) end end}, V6482, V6483)) end end, fun (V6636) -> fun (V6637) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6638) -> fun (V6639) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6640) -> fun (V6641) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6640, V6641)) end end, fun (V6642) -> fun (V6643) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6642, V6643)) end end}, V6638, V6639)) end end, fun (V6644) -> fun (V6645) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6646) -> fun (V6647) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6646, V6647)) end end, fun (V6648) -> fun (V6649) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6648, V6649)) end end}, V6644, V6645)) end end}, fun (V6650) -> fun (V6651) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6652) -> fun (V6653) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6652, V6653)) end end, fun (V6654) -> fun (V6655) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6654, V6655)) end end}, fun (V6656) -> fun (V6657) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6656, V6657)) end end, fun (V6658) -> fun (V6659) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6658, V6659)) end end, fun (V6660) -> fun (V6661) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6660, V6661)) end end, fun (V6662) -> fun (V6663) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6662, V6663)) end end, fun (V6664) -> fun (V6665) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6664, V6665)) end end, fun (V6666) -> fun (V6667) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6666, V6667)) end end, fun (V6668) -> fun (V6669) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6668, V6669)) end end}, V6650, V6651)) end end, fun (V6670) -> fun (V6671) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6672) -> fun (V6673) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6672, V6673)) end end, fun (V6674) -> fun (V6675) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6674, V6675)) end end}, fun (V6676) -> fun (V6677) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6676, V6677)) end end, fun (V6678) -> fun (V6679) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6678, V6679)) end end, fun (V6680) -> fun (V6681) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6680, V6681)) end end, fun (V6682) -> fun (V6683) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6682, V6683)) end end, fun (V6684) -> fun (V6685) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6684, V6685)) end end, fun (V6686) -> fun (V6687) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6686, V6687)) end end, fun (V6688) -> fun (V6689) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6688, V6689)) end end}, V6670, V6671)) end end, fun (V6690) -> fun (V6691) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6692) -> fun (V6693) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6692, V6693)) end end, fun (V6694) -> fun (V6695) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6694, V6695)) end end}, fun (V6696) -> fun (V6697) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6696, V6697)) end end, fun (V6698) -> fun (V6699) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6698, V6699)) end end, fun (V6700) -> fun (V6701) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6700, V6701)) end end, fun (V6702) -> fun (V6703) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6702, V6703)) end end, fun (V6704) -> fun (V6705) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6704, V6705)) end end, fun (V6706) -> fun (V6707) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6706, V6707)) end end, fun (V6708) -> fun (V6709) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6708, V6709)) end end}, V6690, V6691)) end end, fun (V6710) -> fun (V6711) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6712) -> fun (V6713) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6712, V6713)) end end, fun (V6714) -> fun (V6715) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6714, V6715)) end end}, fun (V6716) -> fun (V6717) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6716, V6717)) end end, fun (V6718) -> fun (V6719) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6718, V6719)) end end, fun (V6720) -> fun (V6721) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6720, V6721)) end end, fun (V6722) -> fun (V6723) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6722, V6723)) end end, fun (V6724) -> fun (V6725) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6724, V6725)) end end, fun (V6726) -> fun (V6727) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6726, V6727)) end end, fun (V6728) -> fun (V6729) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6728, V6729)) end end}, V6710, V6711)) end end, fun (V6730) -> fun (V6731) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6732) -> fun (V6733) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6732, V6733)) end end, fun (V6734) -> fun (V6735) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6734, V6735)) end end}, fun (V6736) -> fun (V6737) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6736, V6737)) end end, fun (V6738) -> fun (V6739) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6738, V6739)) end end, fun (V6740) -> fun (V6741) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6740, V6741)) end end, fun (V6742) -> fun (V6743) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6742, V6743)) end end, fun (V6744) -> fun (V6745) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6744, V6745)) end end, fun (V6746) -> fun (V6747) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6746, V6747)) end end, fun (V6748) -> fun (V6749) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6748, V6749)) end end}, V6730, V6731)) end end, fun (V6750) -> fun (V6751) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6752) -> fun (V6753) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6752, V6753)) end end, fun (V6754) -> fun (V6755) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6754, V6755)) end end}, fun (V6756) -> fun (V6757) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6756, V6757)) end end, fun (V6758) -> fun (V6759) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6758, V6759)) end end, fun (V6760) -> fun (V6761) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6760, V6761)) end end, fun (V6762) -> fun (V6763) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6762, V6763)) end end, fun (V6764) -> fun (V6765) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6764, V6765)) end end, fun (V6766) -> fun (V6767) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6766, V6767)) end end, fun (V6768) -> fun (V6769) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6768, V6769)) end end}, V6750, V6751)) end end, fun (V6770) -> fun (V6771) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6772) -> fun (V6773) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6772, V6773)) end end, fun (V6774) -> fun (V6775) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6774, V6775)) end end}, fun (V6776) -> fun (V6777) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6776, V6777)) end end, fun (V6778) -> fun (V6779) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6778, V6779)) end end, fun (V6780) -> fun (V6781) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6780, V6781)) end end, fun (V6782) -> fun (V6783) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6782, V6783)) end end, fun (V6784) -> fun (V6785) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6784, V6785)) end end, fun (V6786) -> fun (V6787) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6786, V6787)) end end, fun (V6788) -> fun (V6789) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6788, V6789)) end end}, V6770, V6771)) end end}, V6636, V6637)) end end, fun (V6790) -> fun (V6791) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6792) -> fun (V6793) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6794) -> fun (V6795) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6794, V6795)) end end, fun (V6796) -> fun (V6797) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6796, V6797)) end end}, V6792, V6793)) end end, fun (V6798) -> fun (V6799) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6800) -> fun (V6801) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6800, V6801)) end end, fun (V6802) -> fun (V6803) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6802, V6803)) end end}, V6798, V6799)) end end}, fun (V6804) -> fun (V6805) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6806) -> fun (V6807) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6806, V6807)) end end, fun (V6808) -> fun (V6809) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6808, V6809)) end end}, fun (V6810) -> fun (V6811) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6810, V6811)) end end, fun (V6812) -> fun (V6813) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6812, V6813)) end end, fun (V6814) -> fun (V6815) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6814, V6815)) end end, fun (V6816) -> fun (V6817) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6816, V6817)) end end, fun (V6818) -> fun (V6819) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6818, V6819)) end end, fun (V6820) -> fun (V6821) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6820, V6821)) end end, fun (V6822) -> fun (V6823) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6822, V6823)) end end}, V6804, V6805)) end end, fun (V6824) -> fun (V6825) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6826) -> fun (V6827) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6826, V6827)) end end, fun (V6828) -> fun (V6829) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6828, V6829)) end end}, fun (V6830) -> fun (V6831) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6830, V6831)) end end, fun (V6832) -> fun (V6833) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6832, V6833)) end end, fun (V6834) -> fun (V6835) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6834, V6835)) end end, fun (V6836) -> fun (V6837) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6836, V6837)) end end, fun (V6838) -> fun (V6839) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6838, V6839)) end end, fun (V6840) -> fun (V6841) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6840, V6841)) end end, fun (V6842) -> fun (V6843) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6842, V6843)) end end}, V6824, V6825)) end end, fun (V6844) -> fun (V6845) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6846) -> fun (V6847) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6846, V6847)) end end, fun (V6848) -> fun (V6849) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6848, V6849)) end end}, fun (V6850) -> fun (V6851) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6850, V6851)) end end, fun (V6852) -> fun (V6853) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6852, V6853)) end end, fun (V6854) -> fun (V6855) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6854, V6855)) end end, fun (V6856) -> fun (V6857) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6856, V6857)) end end, fun (V6858) -> fun (V6859) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6858, V6859)) end end, fun (V6860) -> fun (V6861) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6860, V6861)) end end, fun (V6862) -> fun (V6863) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6862, V6863)) end end}, V6844, V6845)) end end, fun (V6864) -> fun (V6865) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6866) -> fun (V6867) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6866, V6867)) end end, fun (V6868) -> fun (V6869) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6868, V6869)) end end}, fun (V6870) -> fun (V6871) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6870, V6871)) end end, fun (V6872) -> fun (V6873) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6872, V6873)) end end, fun (V6874) -> fun (V6875) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6874, V6875)) end end, fun (V6876) -> fun (V6877) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6876, V6877)) end end, fun (V6878) -> fun (V6879) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6878, V6879)) end end, fun (V6880) -> fun (V6881) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6880, V6881)) end end, fun (V6882) -> fun (V6883) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6882, V6883)) end end}, V6864, V6865)) end end, fun (V6884) -> fun (V6885) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6886) -> fun (V6887) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6886, V6887)) end end, fun (V6888) -> fun (V6889) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6888, V6889)) end end}, fun (V6890) -> fun (V6891) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6890, V6891)) end end, fun (V6892) -> fun (V6893) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6892, V6893)) end end, fun (V6894) -> fun (V6895) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6894, V6895)) end end, fun (V6896) -> fun (V6897) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6896, V6897)) end end, fun (V6898) -> fun (V6899) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6898, V6899)) end end, fun (V6900) -> fun (V6901) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6900, V6901)) end end, fun (V6902) -> fun (V6903) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6902, V6903)) end end}, V6884, V6885)) end end, fun (V6904) -> fun (V6905) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6906) -> fun (V6907) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6906, V6907)) end end, fun (V6908) -> fun (V6909) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6908, V6909)) end end}, fun (V6910) -> fun (V6911) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6910, V6911)) end end, fun (V6912) -> fun (V6913) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6912, V6913)) end end, fun (V6914) -> fun (V6915) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6914, V6915)) end end, fun (V6916) -> fun (V6917) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6916, V6917)) end end, fun (V6918) -> fun (V6919) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6918, V6919)) end end, fun (V6920) -> fun (V6921) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6920, V6921)) end end, fun (V6922) -> fun (V6923) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6922, V6923)) end end}, V6904, V6905)) end end, fun (V6924) -> fun (V6925) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6926) -> fun (V6927) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6926, V6927)) end end, fun (V6928) -> fun (V6929) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6928, V6929)) end end}, fun (V6930) -> fun (V6931) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V6930, V6931)) end end, fun (V6932) -> fun (V6933) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V6932, V6933)) end end, fun (V6934) -> fun (V6935) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V6934, V6935)) end end, fun (V6936) -> fun (V6937) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V6936, V6937)) end end, fun (V6938) -> fun (V6939) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V6938, V6939)) end end, fun (V6940) -> fun (V6941) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V6940, V6941)) end end, fun (V6942) -> fun (V6943) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V6942, V6943)) end end}, V6924, V6925)) end end}, V6790, V6791)) end end}, V5818, V5819)) end end, fun (V6944) -> fun (V6945) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6946) -> fun (V6947) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6946, V6947)) end end, fun (V6948) -> fun (V6949) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6948, V6949)) end end}, fun (V6950) -> fun (V6951) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V6950, V6951)) end end, fun (V6952) -> fun (V6953) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V6952, V6953)) end end, fun (V6954) -> fun (V6955) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V6954, V6955)) end end, fun (V6956) -> fun (V6957) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V6956, V6957)) end end, fun (V6958) -> fun (V6959) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V6958, V6959)) end end, fun (V6960) -> fun (V6961) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V6960, V6961)) end end, fun (V6962) -> fun (V6963) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V6962, V6963)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6964) -> fun (V6965) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V6966) -> fun (V6967) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6968) -> fun (V6969) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6968, V6969)) end end, fun (V6970) -> fun (V6971) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6970, V6971)) end end}, V6966, V6967)) end end, fun (V6972) -> fun (V6973) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6974) -> fun (V6975) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6974, V6975)) end end, fun (V6976) -> fun (V6977) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6976, V6977)) end end}, V6972, V6973)) end end}, V6964, V6965)) end end, fun (V6978) -> fun (V6979) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V6980) -> fun (V6981) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6982) -> fun (V6983) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6982, V6983)) end end, fun (V6984) -> fun (V6985) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6984, V6985)) end end}, V6980, V6981)) end end, fun (V6986) -> fun (V6987) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6988) -> fun (V6989) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6988, V6989)) end end, fun (V6990) -> fun (V6991) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6990, V6991)) end end}, V6986, V6987)) end end}, V6978, V6979)) end end}, fun (V6992) -> fun (V6993) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6994) -> fun (V6995) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V6996) -> fun (V6997) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6996, V6997)) end end, fun (V6998) -> fun (V6999) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V6998, V6999)) end end}, V6994, V6995)) end end, fun (V7000) -> fun (V7001) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7002) -> fun (V7003) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7002, V7003)) end end, fun (V7004) -> fun (V7005) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7004, V7005)) end end}, V7000, V7001)) end end}, fun (V7006) -> fun (V7007) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7008) -> fun (V7009) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7008, V7009)) end end, fun (V7010) -> fun (V7011) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7010, V7011)) end end}, fun (V7012) -> fun (V7013) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7012, V7013)) end end, fun (V7014) -> fun (V7015) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7014, V7015)) end end, fun (V7016) -> fun (V7017) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7016, V7017)) end end, fun (V7018) -> fun (V7019) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7018, V7019)) end end, fun (V7020) -> fun (V7021) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7020, V7021)) end end, fun (V7022) -> fun (V7023) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7022, V7023)) end end, fun (V7024) -> fun (V7025) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7024, V7025)) end end}, V7006, V7007)) end end, fun (V7026) -> fun (V7027) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7028) -> fun (V7029) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7028, V7029)) end end, fun (V7030) -> fun (V7031) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7030, V7031)) end end}, fun (V7032) -> fun (V7033) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7032, V7033)) end end, fun (V7034) -> fun (V7035) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7034, V7035)) end end, fun (V7036) -> fun (V7037) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7036, V7037)) end end, fun (V7038) -> fun (V7039) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7038, V7039)) end end, fun (V7040) -> fun (V7041) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7040, V7041)) end end, fun (V7042) -> fun (V7043) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7042, V7043)) end end, fun (V7044) -> fun (V7045) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7044, V7045)) end end}, V7026, V7027)) end end, fun (V7046) -> fun (V7047) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7048) -> fun (V7049) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7048, V7049)) end end, fun (V7050) -> fun (V7051) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7050, V7051)) end end}, fun (V7052) -> fun (V7053) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7052, V7053)) end end, fun (V7054) -> fun (V7055) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7054, V7055)) end end, fun (V7056) -> fun (V7057) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7056, V7057)) end end, fun (V7058) -> fun (V7059) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7058, V7059)) end end, fun (V7060) -> fun (V7061) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7060, V7061)) end end, fun (V7062) -> fun (V7063) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7062, V7063)) end end, fun (V7064) -> fun (V7065) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7064, V7065)) end end}, V7046, V7047)) end end, fun (V7066) -> fun (V7067) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7068) -> fun (V7069) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7068, V7069)) end end, fun (V7070) -> fun (V7071) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7070, V7071)) end end}, fun (V7072) -> fun (V7073) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7072, V7073)) end end, fun (V7074) -> fun (V7075) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7074, V7075)) end end, fun (V7076) -> fun (V7077) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7076, V7077)) end end, fun (V7078) -> fun (V7079) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7078, V7079)) end end, fun (V7080) -> fun (V7081) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7080, V7081)) end end, fun (V7082) -> fun (V7083) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7082, V7083)) end end, fun (V7084) -> fun (V7085) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7084, V7085)) end end}, V7066, V7067)) end end, fun (V7086) -> fun (V7087) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7088) -> fun (V7089) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7088, V7089)) end end, fun (V7090) -> fun (V7091) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7090, V7091)) end end}, fun (V7092) -> fun (V7093) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7092, V7093)) end end, fun (V7094) -> fun (V7095) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7094, V7095)) end end, fun (V7096) -> fun (V7097) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7096, V7097)) end end, fun (V7098) -> fun (V7099) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7098, V7099)) end end, fun (V7100) -> fun (V7101) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7100, V7101)) end end, fun (V7102) -> fun (V7103) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7102, V7103)) end end, fun (V7104) -> fun (V7105) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7104, V7105)) end end}, V7086, V7087)) end end, fun (V7106) -> fun (V7107) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7108) -> fun (V7109) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7108, V7109)) end end, fun (V7110) -> fun (V7111) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7110, V7111)) end end}, fun (V7112) -> fun (V7113) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7112, V7113)) end end, fun (V7114) -> fun (V7115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7114, V7115)) end end, fun (V7116) -> fun (V7117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7116, V7117)) end end, fun (V7118) -> fun (V7119) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7118, V7119)) end end, fun (V7120) -> fun (V7121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7120, V7121)) end end, fun (V7122) -> fun (V7123) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7122, V7123)) end end, fun (V7124) -> fun (V7125) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7124, V7125)) end end}, V7106, V7107)) end end, fun (V7126) -> fun (V7127) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7128) -> fun (V7129) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7128, V7129)) end end, fun (V7130) -> fun (V7131) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7130, V7131)) end end}, fun (V7132) -> fun (V7133) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7132, V7133)) end end, fun (V7134) -> fun (V7135) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7134, V7135)) end end, fun (V7136) -> fun (V7137) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7136, V7137)) end end, fun (V7138) -> fun (V7139) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7138, V7139)) end end, fun (V7140) -> fun (V7141) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7140, V7141)) end end, fun (V7142) -> fun (V7143) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7142, V7143)) end end, fun (V7144) -> fun (V7145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7144, V7145)) end end}, V7126, V7127)) end end}, V6992, V6993)) end end, fun (V7146) -> fun (V7147) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7148) -> fun (V7149) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7150) -> fun (V7151) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7150, V7151)) end end, fun (V7152) -> fun (V7153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7152, V7153)) end end}, V7148, V7149)) end end, fun (V7154) -> fun (V7155) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7156) -> fun (V7157) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7156, V7157)) end end, fun (V7158) -> fun (V7159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7158, V7159)) end end}, V7154, V7155)) end end}, fun (V7160) -> fun (V7161) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7162) -> fun (V7163) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7162, V7163)) end end, fun (V7164) -> fun (V7165) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7164, V7165)) end end}, fun (V7166) -> fun (V7167) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7166, V7167)) end end, fun (V7168) -> fun (V7169) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7168, V7169)) end end, fun (V7170) -> fun (V7171) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7170, V7171)) end end, fun (V7172) -> fun (V7173) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7172, V7173)) end end, fun (V7174) -> fun (V7175) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7174, V7175)) end end, fun (V7176) -> fun (V7177) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7176, V7177)) end end, fun (V7178) -> fun (V7179) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7178, V7179)) end end}, V7160, V7161)) end end, fun (V7180) -> fun (V7181) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7182) -> fun (V7183) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7182, V7183)) end end, fun (V7184) -> fun (V7185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7184, V7185)) end end}, fun (V7186) -> fun (V7187) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7186, V7187)) end end, fun (V7188) -> fun (V7189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7188, V7189)) end end, fun (V7190) -> fun (V7191) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7190, V7191)) end end, fun (V7192) -> fun (V7193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7192, V7193)) end end, fun (V7194) -> fun (V7195) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7194, V7195)) end end, fun (V7196) -> fun (V7197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7196, V7197)) end end, fun (V7198) -> fun (V7199) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7198, V7199)) end end}, V7180, V7181)) end end, fun (V7200) -> fun (V7201) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7202) -> fun (V7203) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7202, V7203)) end end, fun (V7204) -> fun (V7205) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7204, V7205)) end end}, fun (V7206) -> fun (V7207) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7206, V7207)) end end, fun (V7208) -> fun (V7209) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7208, V7209)) end end, fun (V7210) -> fun (V7211) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7210, V7211)) end end, fun (V7212) -> fun (V7213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7212, V7213)) end end, fun (V7214) -> fun (V7215) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7214, V7215)) end end, fun (V7216) -> fun (V7217) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7216, V7217)) end end, fun (V7218) -> fun (V7219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7218, V7219)) end end}, V7200, V7201)) end end, fun (V7220) -> fun (V7221) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7222) -> fun (V7223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7222, V7223)) end end, fun (V7224) -> fun (V7225) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7224, V7225)) end end}, fun (V7226) -> fun (V7227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7226, V7227)) end end, fun (V7228) -> fun (V7229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7228, V7229)) end end, fun (V7230) -> fun (V7231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7230, V7231)) end end, fun (V7232) -> fun (V7233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7232, V7233)) end end, fun (V7234) -> fun (V7235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7234, V7235)) end end, fun (V7236) -> fun (V7237) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7236, V7237)) end end, fun (V7238) -> fun (V7239) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7238, V7239)) end end}, V7220, V7221)) end end, fun (V7240) -> fun (V7241) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7242) -> fun (V7243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7242, V7243)) end end, fun (V7244) -> fun (V7245) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7244, V7245)) end end}, fun (V7246) -> fun (V7247) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7246, V7247)) end end, fun (V7248) -> fun (V7249) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7248, V7249)) end end, fun (V7250) -> fun (V7251) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7250, V7251)) end end, fun (V7252) -> fun (V7253) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7252, V7253)) end end, fun (V7254) -> fun (V7255) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7254, V7255)) end end, fun (V7256) -> fun (V7257) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7256, V7257)) end end, fun (V7258) -> fun (V7259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7258, V7259)) end end}, V7240, V7241)) end end, fun (V7260) -> fun (V7261) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7262) -> fun (V7263) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7262, V7263)) end end, fun (V7264) -> fun (V7265) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7264, V7265)) end end}, fun (V7266) -> fun (V7267) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7266, V7267)) end end, fun (V7268) -> fun (V7269) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7268, V7269)) end end, fun (V7270) -> fun (V7271) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7270, V7271)) end end, fun (V7272) -> fun (V7273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7272, V7273)) end end, fun (V7274) -> fun (V7275) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7274, V7275)) end end, fun (V7276) -> fun (V7277) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7276, V7277)) end end, fun (V7278) -> fun (V7279) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7278, V7279)) end end}, V7260, V7261)) end end, fun (V7280) -> fun (V7281) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7282) -> fun (V7283) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7282, V7283)) end end, fun (V7284) -> fun (V7285) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7284, V7285)) end end}, fun (V7286) -> fun (V7287) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7286, V7287)) end end, fun (V7288) -> fun (V7289) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7288, V7289)) end end, fun (V7290) -> fun (V7291) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7290, V7291)) end end, fun (V7292) -> fun (V7293) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7292, V7293)) end end, fun (V7294) -> fun (V7295) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7294, V7295)) end end, fun (V7296) -> fun (V7297) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7296, V7297)) end end, fun (V7298) -> fun (V7299) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7298, V7299)) end end}, V7280, V7281)) end end}, V7146, V7147)) end end, fun (V7300) -> fun (V7301) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7302) -> fun (V7303) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7304) -> fun (V7305) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7304, V7305)) end end, fun (V7306) -> fun (V7307) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7306, V7307)) end end}, V7302, V7303)) end end, fun (V7308) -> fun (V7309) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7310) -> fun (V7311) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7310, V7311)) end end, fun (V7312) -> fun (V7313) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7312, V7313)) end end}, V7308, V7309)) end end}, fun (V7314) -> fun (V7315) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7316) -> fun (V7317) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7316, V7317)) end end, fun (V7318) -> fun (V7319) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7318, V7319)) end end}, fun (V7320) -> fun (V7321) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7320, V7321)) end end, fun (V7322) -> fun (V7323) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7322, V7323)) end end, fun (V7324) -> fun (V7325) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7324, V7325)) end end, fun (V7326) -> fun (V7327) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7326, V7327)) end end, fun (V7328) -> fun (V7329) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7328, V7329)) end end, fun (V7330) -> fun (V7331) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7330, V7331)) end end, fun (V7332) -> fun (V7333) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7332, V7333)) end end}, V7314, V7315)) end end, fun (V7334) -> fun (V7335) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7336) -> fun (V7337) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7336, V7337)) end end, fun (V7338) -> fun (V7339) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7338, V7339)) end end}, fun (V7340) -> fun (V7341) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7340, V7341)) end end, fun (V7342) -> fun (V7343) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7342, V7343)) end end, fun (V7344) -> fun (V7345) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7344, V7345)) end end, fun (V7346) -> fun (V7347) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7346, V7347)) end end, fun (V7348) -> fun (V7349) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7348, V7349)) end end, fun (V7350) -> fun (V7351) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7350, V7351)) end end, fun (V7352) -> fun (V7353) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7352, V7353)) end end}, V7334, V7335)) end end, fun (V7354) -> fun (V7355) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7356) -> fun (V7357) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7356, V7357)) end end, fun (V7358) -> fun (V7359) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7358, V7359)) end end}, fun (V7360) -> fun (V7361) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7360, V7361)) end end, fun (V7362) -> fun (V7363) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7362, V7363)) end end, fun (V7364) -> fun (V7365) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7364, V7365)) end end, fun (V7366) -> fun (V7367) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7366, V7367)) end end, fun (V7368) -> fun (V7369) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7368, V7369)) end end, fun (V7370) -> fun (V7371) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7370, V7371)) end end, fun (V7372) -> fun (V7373) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7372, V7373)) end end}, V7354, V7355)) end end, fun (V7374) -> fun (V7375) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7376) -> fun (V7377) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7376, V7377)) end end, fun (V7378) -> fun (V7379) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7378, V7379)) end end}, fun (V7380) -> fun (V7381) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7380, V7381)) end end, fun (V7382) -> fun (V7383) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7382, V7383)) end end, fun (V7384) -> fun (V7385) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7384, V7385)) end end, fun (V7386) -> fun (V7387) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7386, V7387)) end end, fun (V7388) -> fun (V7389) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7388, V7389)) end end, fun (V7390) -> fun (V7391) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7390, V7391)) end end, fun (V7392) -> fun (V7393) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7392, V7393)) end end}, V7374, V7375)) end end, fun (V7394) -> fun (V7395) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7396) -> fun (V7397) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7396, V7397)) end end, fun (V7398) -> fun (V7399) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7398, V7399)) end end}, fun (V7400) -> fun (V7401) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7400, V7401)) end end, fun (V7402) -> fun (V7403) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7402, V7403)) end end, fun (V7404) -> fun (V7405) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7404, V7405)) end end, fun (V7406) -> fun (V7407) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7406, V7407)) end end, fun (V7408) -> fun (V7409) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7408, V7409)) end end, fun (V7410) -> fun (V7411) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7410, V7411)) end end, fun (V7412) -> fun (V7413) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7412, V7413)) end end}, V7394, V7395)) end end, fun (V7414) -> fun (V7415) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7416) -> fun (V7417) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7416, V7417)) end end, fun (V7418) -> fun (V7419) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7418, V7419)) end end}, fun (V7420) -> fun (V7421) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7420, V7421)) end end, fun (V7422) -> fun (V7423) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7422, V7423)) end end, fun (V7424) -> fun (V7425) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7424, V7425)) end end, fun (V7426) -> fun (V7427) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7426, V7427)) end end, fun (V7428) -> fun (V7429) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7428, V7429)) end end, fun (V7430) -> fun (V7431) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7430, V7431)) end end, fun (V7432) -> fun (V7433) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7432, V7433)) end end}, V7414, V7415)) end end, fun (V7434) -> fun (V7435) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7436) -> fun (V7437) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7436, V7437)) end end, fun (V7438) -> fun (V7439) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7438, V7439)) end end}, fun (V7440) -> fun (V7441) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7440, V7441)) end end, fun (V7442) -> fun (V7443) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7442, V7443)) end end, fun (V7444) -> fun (V7445) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7444, V7445)) end end, fun (V7446) -> fun (V7447) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7446, V7447)) end end, fun (V7448) -> fun (V7449) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7448, V7449)) end end, fun (V7450) -> fun (V7451) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7450, V7451)) end end, fun (V7452) -> fun (V7453) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7452, V7453)) end end}, V7434, V7435)) end end}, V7300, V7301)) end end, fun (V7454) -> fun (V7455) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7456) -> fun (V7457) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7458) -> fun (V7459) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7458, V7459)) end end, fun (V7460) -> fun (V7461) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7460, V7461)) end end}, V7456, V7457)) end end, fun (V7462) -> fun (V7463) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7464) -> fun (V7465) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7464, V7465)) end end, fun (V7466) -> fun (V7467) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7466, V7467)) end end}, V7462, V7463)) end end}, fun (V7468) -> fun (V7469) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7470) -> fun (V7471) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7470, V7471)) end end, fun (V7472) -> fun (V7473) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7472, V7473)) end end}, fun (V7474) -> fun (V7475) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7474, V7475)) end end, fun (V7476) -> fun (V7477) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7476, V7477)) end end, fun (V7478) -> fun (V7479) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7478, V7479)) end end, fun (V7480) -> fun (V7481) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7480, V7481)) end end, fun (V7482) -> fun (V7483) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7482, V7483)) end end, fun (V7484) -> fun (V7485) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7484, V7485)) end end, fun (V7486) -> fun (V7487) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7486, V7487)) end end}, V7468, V7469)) end end, fun (V7488) -> fun (V7489) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7490) -> fun (V7491) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7490, V7491)) end end, fun (V7492) -> fun (V7493) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7492, V7493)) end end}, fun (V7494) -> fun (V7495) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7494, V7495)) end end, fun (V7496) -> fun (V7497) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7496, V7497)) end end, fun (V7498) -> fun (V7499) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7498, V7499)) end end, fun (V7500) -> fun (V7501) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7500, V7501)) end end, fun (V7502) -> fun (V7503) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7502, V7503)) end end, fun (V7504) -> fun (V7505) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7504, V7505)) end end, fun (V7506) -> fun (V7507) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7506, V7507)) end end}, V7488, V7489)) end end, fun (V7508) -> fun (V7509) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7510) -> fun (V7511) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7510, V7511)) end end, fun (V7512) -> fun (V7513) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7512, V7513)) end end}, fun (V7514) -> fun (V7515) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7514, V7515)) end end, fun (V7516) -> fun (V7517) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7516, V7517)) end end, fun (V7518) -> fun (V7519) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7518, V7519)) end end, fun (V7520) -> fun (V7521) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7520, V7521)) end end, fun (V7522) -> fun (V7523) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7522, V7523)) end end, fun (V7524) -> fun (V7525) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7524, V7525)) end end, fun (V7526) -> fun (V7527) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7526, V7527)) end end}, V7508, V7509)) end end, fun (V7528) -> fun (V7529) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7530) -> fun (V7531) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7530, V7531)) end end, fun (V7532) -> fun (V7533) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7532, V7533)) end end}, fun (V7534) -> fun (V7535) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7534, V7535)) end end, fun (V7536) -> fun (V7537) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7536, V7537)) end end, fun (V7538) -> fun (V7539) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7538, V7539)) end end, fun (V7540) -> fun (V7541) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7540, V7541)) end end, fun (V7542) -> fun (V7543) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7542, V7543)) end end, fun (V7544) -> fun (V7545) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7544, V7545)) end end, fun (V7546) -> fun (V7547) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7546, V7547)) end end}, V7528, V7529)) end end, fun (V7548) -> fun (V7549) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7550) -> fun (V7551) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7550, V7551)) end end, fun (V7552) -> fun (V7553) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7552, V7553)) end end}, fun (V7554) -> fun (V7555) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7554, V7555)) end end, fun (V7556) -> fun (V7557) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7556, V7557)) end end, fun (V7558) -> fun (V7559) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7558, V7559)) end end, fun (V7560) -> fun (V7561) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7560, V7561)) end end, fun (V7562) -> fun (V7563) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7562, V7563)) end end, fun (V7564) -> fun (V7565) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7564, V7565)) end end, fun (V7566) -> fun (V7567) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7566, V7567)) end end}, V7548, V7549)) end end, fun (V7568) -> fun (V7569) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7570) -> fun (V7571) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7570, V7571)) end end, fun (V7572) -> fun (V7573) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7572, V7573)) end end}, fun (V7574) -> fun (V7575) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7574, V7575)) end end, fun (V7576) -> fun (V7577) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7576, V7577)) end end, fun (V7578) -> fun (V7579) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7578, V7579)) end end, fun (V7580) -> fun (V7581) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7580, V7581)) end end, fun (V7582) -> fun (V7583) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7582, V7583)) end end, fun (V7584) -> fun (V7585) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7584, V7585)) end end, fun (V7586) -> fun (V7587) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7586, V7587)) end end}, V7568, V7569)) end end, fun (V7588) -> fun (V7589) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7590) -> fun (V7591) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7590, V7591)) end end, fun (V7592) -> fun (V7593) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7592, V7593)) end end}, fun (V7594) -> fun (V7595) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7594, V7595)) end end, fun (V7596) -> fun (V7597) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7596, V7597)) end end, fun (V7598) -> fun (V7599) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7598, V7599)) end end, fun (V7600) -> fun (V7601) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7600, V7601)) end end, fun (V7602) -> fun (V7603) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7602, V7603)) end end, fun (V7604) -> fun (V7605) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7604, V7605)) end end, fun (V7606) -> fun (V7607) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7606, V7607)) end end}, V7588, V7589)) end end}, V7454, V7455)) end end, fun (V7608) -> fun (V7609) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7610) -> fun (V7611) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7612) -> fun (V7613) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7612, V7613)) end end, fun (V7614) -> fun (V7615) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7614, V7615)) end end}, V7610, V7611)) end end, fun (V7616) -> fun (V7617) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7618) -> fun (V7619) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7618, V7619)) end end, fun (V7620) -> fun (V7621) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7620, V7621)) end end}, V7616, V7617)) end end}, fun (V7622) -> fun (V7623) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7624) -> fun (V7625) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7624, V7625)) end end, fun (V7626) -> fun (V7627) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7626, V7627)) end end}, fun (V7628) -> fun (V7629) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7628, V7629)) end end, fun (V7630) -> fun (V7631) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7630, V7631)) end end, fun (V7632) -> fun (V7633) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7632, V7633)) end end, fun (V7634) -> fun (V7635) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7634, V7635)) end end, fun (V7636) -> fun (V7637) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7636, V7637)) end end, fun (V7638) -> fun (V7639) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7638, V7639)) end end, fun (V7640) -> fun (V7641) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7640, V7641)) end end}, V7622, V7623)) end end, fun (V7642) -> fun (V7643) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7644) -> fun (V7645) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7644, V7645)) end end, fun (V7646) -> fun (V7647) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7646, V7647)) end end}, fun (V7648) -> fun (V7649) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7648, V7649)) end end, fun (V7650) -> fun (V7651) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7650, V7651)) end end, fun (V7652) -> fun (V7653) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7652, V7653)) end end, fun (V7654) -> fun (V7655) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7654, V7655)) end end, fun (V7656) -> fun (V7657) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7656, V7657)) end end, fun (V7658) -> fun (V7659) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7658, V7659)) end end, fun (V7660) -> fun (V7661) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7660, V7661)) end end}, V7642, V7643)) end end, fun (V7662) -> fun (V7663) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7664) -> fun (V7665) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7664, V7665)) end end, fun (V7666) -> fun (V7667) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7666, V7667)) end end}, fun (V7668) -> fun (V7669) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7668, V7669)) end end, fun (V7670) -> fun (V7671) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7670, V7671)) end end, fun (V7672) -> fun (V7673) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7672, V7673)) end end, fun (V7674) -> fun (V7675) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7674, V7675)) end end, fun (V7676) -> fun (V7677) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7676, V7677)) end end, fun (V7678) -> fun (V7679) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7678, V7679)) end end, fun (V7680) -> fun (V7681) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7680, V7681)) end end}, V7662, V7663)) end end, fun (V7682) -> fun (V7683) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7684) -> fun (V7685) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7684, V7685)) end end, fun (V7686) -> fun (V7687) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7686, V7687)) end end}, fun (V7688) -> fun (V7689) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7688, V7689)) end end, fun (V7690) -> fun (V7691) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7690, V7691)) end end, fun (V7692) -> fun (V7693) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7692, V7693)) end end, fun (V7694) -> fun (V7695) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7694, V7695)) end end, fun (V7696) -> fun (V7697) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7696, V7697)) end end, fun (V7698) -> fun (V7699) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7698, V7699)) end end, fun (V7700) -> fun (V7701) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7700, V7701)) end end}, V7682, V7683)) end end, fun (V7702) -> fun (V7703) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7704) -> fun (V7705) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7704, V7705)) end end, fun (V7706) -> fun (V7707) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7706, V7707)) end end}, fun (V7708) -> fun (V7709) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7708, V7709)) end end, fun (V7710) -> fun (V7711) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7710, V7711)) end end, fun (V7712) -> fun (V7713) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7712, V7713)) end end, fun (V7714) -> fun (V7715) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7714, V7715)) end end, fun (V7716) -> fun (V7717) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7716, V7717)) end end, fun (V7718) -> fun (V7719) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7718, V7719)) end end, fun (V7720) -> fun (V7721) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7720, V7721)) end end}, V7702, V7703)) end end, fun (V7722) -> fun (V7723) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7724) -> fun (V7725) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7724, V7725)) end end, fun (V7726) -> fun (V7727) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7726, V7727)) end end}, fun (V7728) -> fun (V7729) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7728, V7729)) end end, fun (V7730) -> fun (V7731) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7730, V7731)) end end, fun (V7732) -> fun (V7733) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7732, V7733)) end end, fun (V7734) -> fun (V7735) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7734, V7735)) end end, fun (V7736) -> fun (V7737) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7736, V7737)) end end, fun (V7738) -> fun (V7739) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7738, V7739)) end end, fun (V7740) -> fun (V7741) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7740, V7741)) end end}, V7722, V7723)) end end, fun (V7742) -> fun (V7743) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7744) -> fun (V7745) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7744, V7745)) end end, fun (V7746) -> fun (V7747) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7746, V7747)) end end}, fun (V7748) -> fun (V7749) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7748, V7749)) end end, fun (V7750) -> fun (V7751) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7750, V7751)) end end, fun (V7752) -> fun (V7753) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7752, V7753)) end end, fun (V7754) -> fun (V7755) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7754, V7755)) end end, fun (V7756) -> fun (V7757) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7756, V7757)) end end, fun (V7758) -> fun (V7759) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7758, V7759)) end end, fun (V7760) -> fun (V7761) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7760, V7761)) end end}, V7742, V7743)) end end}, V7608, V7609)) end end, fun (V7762) -> fun (V7763) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7764) -> fun (V7765) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7766) -> fun (V7767) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7766, V7767)) end end, fun (V7768) -> fun (V7769) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7768, V7769)) end end}, V7764, V7765)) end end, fun (V7770) -> fun (V7771) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7772) -> fun (V7773) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7772, V7773)) end end, fun (V7774) -> fun (V7775) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7774, V7775)) end end}, V7770, V7771)) end end}, fun (V7776) -> fun (V7777) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7778) -> fun (V7779) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7778, V7779)) end end, fun (V7780) -> fun (V7781) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7780, V7781)) end end}, fun (V7782) -> fun (V7783) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7782, V7783)) end end, fun (V7784) -> fun (V7785) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7784, V7785)) end end, fun (V7786) -> fun (V7787) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7786, V7787)) end end, fun (V7788) -> fun (V7789) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7788, V7789)) end end, fun (V7790) -> fun (V7791) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7790, V7791)) end end, fun (V7792) -> fun (V7793) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7792, V7793)) end end, fun (V7794) -> fun (V7795) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7794, V7795)) end end}, V7776, V7777)) end end, fun (V7796) -> fun (V7797) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7798) -> fun (V7799) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7798, V7799)) end end, fun (V7800) -> fun (V7801) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7800, V7801)) end end}, fun (V7802) -> fun (V7803) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7802, V7803)) end end, fun (V7804) -> fun (V7805) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7804, V7805)) end end, fun (V7806) -> fun (V7807) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7806, V7807)) end end, fun (V7808) -> fun (V7809) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7808, V7809)) end end, fun (V7810) -> fun (V7811) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7810, V7811)) end end, fun (V7812) -> fun (V7813) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7812, V7813)) end end, fun (V7814) -> fun (V7815) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7814, V7815)) end end}, V7796, V7797)) end end, fun (V7816) -> fun (V7817) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7818) -> fun (V7819) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7818, V7819)) end end, fun (V7820) -> fun (V7821) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7820, V7821)) end end}, fun (V7822) -> fun (V7823) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7822, V7823)) end end, fun (V7824) -> fun (V7825) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7824, V7825)) end end, fun (V7826) -> fun (V7827) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7826, V7827)) end end, fun (V7828) -> fun (V7829) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7828, V7829)) end end, fun (V7830) -> fun (V7831) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7830, V7831)) end end, fun (V7832) -> fun (V7833) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7832, V7833)) end end, fun (V7834) -> fun (V7835) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7834, V7835)) end end}, V7816, V7817)) end end, fun (V7836) -> fun (V7837) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7838) -> fun (V7839) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7838, V7839)) end end, fun (V7840) -> fun (V7841) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7840, V7841)) end end}, fun (V7842) -> fun (V7843) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7842, V7843)) end end, fun (V7844) -> fun (V7845) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7844, V7845)) end end, fun (V7846) -> fun (V7847) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7846, V7847)) end end, fun (V7848) -> fun (V7849) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7848, V7849)) end end, fun (V7850) -> fun (V7851) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7850, V7851)) end end, fun (V7852) -> fun (V7853) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7852, V7853)) end end, fun (V7854) -> fun (V7855) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7854, V7855)) end end}, V7836, V7837)) end end, fun (V7856) -> fun (V7857) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7858) -> fun (V7859) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7858, V7859)) end end, fun (V7860) -> fun (V7861) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7860, V7861)) end end}, fun (V7862) -> fun (V7863) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7862, V7863)) end end, fun (V7864) -> fun (V7865) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7864, V7865)) end end, fun (V7866) -> fun (V7867) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7866, V7867)) end end, fun (V7868) -> fun (V7869) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7868, V7869)) end end, fun (V7870) -> fun (V7871) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7870, V7871)) end end, fun (V7872) -> fun (V7873) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7872, V7873)) end end, fun (V7874) -> fun (V7875) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7874, V7875)) end end}, V7856, V7857)) end end, fun (V7876) -> fun (V7877) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7878) -> fun (V7879) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7878, V7879)) end end, fun (V7880) -> fun (V7881) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7880, V7881)) end end}, fun (V7882) -> fun (V7883) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7882, V7883)) end end, fun (V7884) -> fun (V7885) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7884, V7885)) end end, fun (V7886) -> fun (V7887) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7886, V7887)) end end, fun (V7888) -> fun (V7889) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7888, V7889)) end end, fun (V7890) -> fun (V7891) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7890, V7891)) end end, fun (V7892) -> fun (V7893) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7892, V7893)) end end, fun (V7894) -> fun (V7895) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7894, V7895)) end end}, V7876, V7877)) end end, fun (V7896) -> fun (V7897) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7898) -> fun (V7899) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7898, V7899)) end end, fun (V7900) -> fun (V7901) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7900, V7901)) end end}, fun (V7902) -> fun (V7903) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7902, V7903)) end end, fun (V7904) -> fun (V7905) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7904, V7905)) end end, fun (V7906) -> fun (V7907) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7906, V7907)) end end, fun (V7908) -> fun (V7909) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7908, V7909)) end end, fun (V7910) -> fun (V7911) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7910, V7911)) end end, fun (V7912) -> fun (V7913) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7912, V7913)) end end, fun (V7914) -> fun (V7915) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7914, V7915)) end end}, V7896, V7897)) end end}, V7762, V7763)) end end, fun (V7916) -> fun (V7917) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7918) -> fun (V7919) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7920) -> fun (V7921) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7920, V7921)) end end, fun (V7922) -> fun (V7923) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7922, V7923)) end end}, V7918, V7919)) end end, fun (V7924) -> fun (V7925) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V7926) -> fun (V7927) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7926, V7927)) end end, fun (V7928) -> fun (V7929) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7928, V7929)) end end}, V7924, V7925)) end end}, fun (V7930) -> fun (V7931) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7932) -> fun (V7933) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7932, V7933)) end end, fun (V7934) -> fun (V7935) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7934, V7935)) end end}, fun (V7936) -> fun (V7937) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7936, V7937)) end end, fun (V7938) -> fun (V7939) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7938, V7939)) end end, fun (V7940) -> fun (V7941) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7940, V7941)) end end, fun (V7942) -> fun (V7943) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7942, V7943)) end end, fun (V7944) -> fun (V7945) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7944, V7945)) end end, fun (V7946) -> fun (V7947) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7946, V7947)) end end, fun (V7948) -> fun (V7949) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7948, V7949)) end end}, V7930, V7931)) end end, fun (V7950) -> fun (V7951) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7952) -> fun (V7953) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7952, V7953)) end end, fun (V7954) -> fun (V7955) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7954, V7955)) end end}, fun (V7956) -> fun (V7957) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7956, V7957)) end end, fun (V7958) -> fun (V7959) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7958, V7959)) end end, fun (V7960) -> fun (V7961) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7960, V7961)) end end, fun (V7962) -> fun (V7963) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7962, V7963)) end end, fun (V7964) -> fun (V7965) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7964, V7965)) end end, fun (V7966) -> fun (V7967) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7966, V7967)) end end, fun (V7968) -> fun (V7969) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7968, V7969)) end end}, V7950, V7951)) end end, fun (V7970) -> fun (V7971) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7972) -> fun (V7973) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7972, V7973)) end end, fun (V7974) -> fun (V7975) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7974, V7975)) end end}, fun (V7976) -> fun (V7977) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7976, V7977)) end end, fun (V7978) -> fun (V7979) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7978, V7979)) end end, fun (V7980) -> fun (V7981) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7980, V7981)) end end, fun (V7982) -> fun (V7983) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V7982, V7983)) end end, fun (V7984) -> fun (V7985) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7984, V7985)) end end, fun (V7986) -> fun (V7987) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7986, V7987)) end end, fun (V7988) -> fun (V7989) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V7988, V7989)) end end}, V7970, V7971)) end end, fun (V7990) -> fun (V7991) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V7992) -> fun (V7993) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7992, V7993)) end end, fun (V7994) -> fun (V7995) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7994, V7995)) end end}, fun (V7996) -> fun (V7997) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V7996, V7997)) end end, fun (V7998) -> fun (V7999) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7998, V7999)) end end, fun (V8000) -> fun (V8001) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V8000, V8001)) end end, fun (V8002) -> fun (V8003) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V8002, V8003)) end end, fun (V8004) -> fun (V8005) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V8004, V8005)) end end, fun (V8006) -> fun (V8007) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V8006, V8007)) end end, fun (V8008) -> fun (V8009) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V8008, V8009)) end end}, V7990, V7991)) end end, fun (V8010) -> fun (V8011) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V8012) -> fun (V8013) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V8012, V8013)) end end, fun (V8014) -> fun (V8015) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V8014, V8015)) end end}, fun (V8016) -> fun (V8017) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V8016, V8017)) end end, fun (V8018) -> fun (V8019) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V8018, V8019)) end end, fun (V8020) -> fun (V8021) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V8020, V8021)) end end, fun (V8022) -> fun (V8023) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V8022, V8023)) end end, fun (V8024) -> fun (V8025) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V8024, V8025)) end end, fun (V8026) -> fun (V8027) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V8026, V8027)) end end, fun (V8028) -> fun (V8029) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V8028, V8029)) end end}, V8010, V8011)) end end, fun (V8030) -> fun (V8031) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V8032) -> fun (V8033) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V8032, V8033)) end end, fun (V8034) -> fun (V8035) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V8034, V8035)) end end}, fun (V8036) -> fun (V8037) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V8036, V8037)) end end, fun (V8038) -> fun (V8039) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V8038, V8039)) end end, fun (V8040) -> fun (V8041) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V8040, V8041)) end end, fun (V8042) -> fun (V8043) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V8042, V8043)) end end, fun (V8044) -> fun (V8045) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V8044, V8045)) end end, fun (V8046) -> fun (V8047) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V8046, V8047)) end end, fun (V8048) -> fun (V8049) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V8048, V8049)) end end}, V8030, V8031)) end end, fun (V8050) -> fun (V8051) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V8052) -> fun (V8053) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V8052, V8053)) end end, fun (V8054) -> fun (V8055) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V8054, V8055)) end end}, fun (V8056) -> fun (V8057) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V8056, V8057)) end end, fun (V8058) -> fun (V8059) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V8058, V8059)) end end, fun (V8060) -> fun (V8061) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V8060, V8061)) end end, fun (V8062) -> fun (V8063) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V8062, V8063)) end end, fun (V8064) -> fun (V8065) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V8064, V8065)) end end, fun (V8066) -> fun (V8067) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V8066, V8067)) end end, fun (V8068) -> fun (V8069) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V8068, V8069)) end end}, V8050, V8051)) end end}, V7916, V7917)) end end}, V6944, V6945)) end end}))))), fun (V8071) -> begin (V8072 = (V8070(V8071))), case V8072 of {'Prelude.Types.Left', V8073} -> {'Prelude.Types.Left', V8073}; {'Prelude.Types.Right', V8074} -> (begin (V8075 = ('un--checkSC'(V108, V0, V8074, V12, V2, V119, []))), V8075 end(V8071)) end end end end), V8076 end(V116)) end end end end), V8077 end(V105)) end end end end end; _ -> fun (V8078) -> {'Prelude.Types.Right', V80} end end), V8079 end(V77)) end end end end), V8080 end(V68)) end end end end end), V8081 end(V62)) end end end end), V8082 end(V25)) end end end end), V8083 end(V9)) end end end end.
'un--calcPositive'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V124 = begin (V24 = begin (V18 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V15, V16, V17)) end end end}, V2))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V23 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.positivity"/utf8>>, 6, fun () -> <<<<"Calculating positivity: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22))/binary>> end))), V23 end(V19)) end end end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V123 = begin (V61 = ('Idris.Idris2.Core.Context':'un--lookupDefTyExact'(V2, case V12 of {'Core.Context.MkDefs', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60} -> V29 end))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V122 = case V65 of {'Prelude.Types.Just', V66} -> case V66 of {'Builtin.MkPair', V67, V68} -> case V67 of {'Core.Context.Context.TCon', V69, V70, V71, V72, V73, V74, V75, V76} -> begin (V77 = ('un--totRefsIn'(V0, V12, V68))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V113 = case V81 of {'Core.TT.IsTerminating'} -> begin (V99 = begin (V87 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V82, V83)) end end, fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V84, V85, V86)) end end end}, V2))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V98 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V93 = fun (V92) -> V92 end), fun (V94) -> (V93(V94)) end end(<<"totality.positivity"/utf8>>)), 30, fun () -> <<(begin (V96 = fun (V95) -> V95 end), fun (V97) -> (V96(V97)) end end(<<"Now checking constructors of "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V91))/binary>> end))), V98 end(V88)) end end end end), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V111 = begin (V104 = ('un--checkData'(V0, V12, [V2 | V74], V75))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V110 = fun (V109) -> {'Prelude.Types.Right', {'Builtin.MkPair', V108, V75}} end), V110 end(V105)) end end end end), V111 end(V100)) end end end end; _ -> fun (V112) -> {'Prelude.Types.Right', {'Builtin.MkPair', V81, V75}} end end), V113 end(V78)) end end end end; _ -> fun (V114) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary, (begin (V116 = fun (V115) -> V115 end), fun (V117) -> (V116(V117)) end end(<<" not a data type"/utf8>>))/binary>>}, V114)) end end; _ -> fun (V118) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary, (begin (V120 = fun (V119) -> V119 end), fun (V121) -> (V120(V121)) end end(<<" not a data type"/utf8>>))/binary>>}, V118)) end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V2)) end), V122 end(V62)) end end end end), V123 end(V25)) end end end end), V124 end(V9)) end end end end.
'un--assertedSmaller'(V0, V1) -> case V0 of {'Prelude.Types.Just', V2} -> ('un--scEq'(V2, V1)); _ -> 0 end.
'un--asserted'(V0, V1) -> ('case--asserted-10128'(V1, V0, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V1)))).
