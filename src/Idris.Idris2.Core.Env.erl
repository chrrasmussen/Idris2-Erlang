-module('Idris.Idris2.Core.Env').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in uniqifyEnv,uenv-4503'/8,
  'case--case block in uniqifyEnv,uenv-4426'/9,
  'nested--6180-4287--in--un--uniqueLocal'/4,
  'nested--6180-4288--in--un--uenv'/5,
  'nested--6180-4286--in--un--next'/3,
  'nested--5452-3718--in--un--findUsedArgs'/10,
  'nested--5452-3638--in--un--eqNat'/8,
  'nested--5452-3743--in--un--dropS'/8,
  'un--uniqifyEnv'/2,
  'un--toVar'/2,
  'un--shrinkEnv'/2,
  'un--namesNoLet'/2,
  'un--mkShrinkSub'/3,
  'un--mkShrink'/2,
  'un--mkEnvOnto'/3,
  'un--mkEnv'/2,
  'un--letToLam'/1,
  'un--lengthNoLet'/1,
  'un--lengthExplicitPi'/1,
  'un--length'/1,
  'un--isUsed'/2,
  'un--getBinderUnder'/5,
  'un--getBinderLoc'/3,
  'un--getBinder'/4,
  'un--findUsedLocs'/3,
  'un--findUsedInBinder'/4,
  'un--findUsed'/4,
  'un--findSubEnv'/3,
  'un--extend'/3,
  'un--defined'/3,
  'un--bindEnv'/4,
  'un--allVarsNoLet'/2,
  'un--allVars'/2,
  'un--abstractFullEnvType'/4,
  'un--abstractEnvType'/4,
  'un--abstractEnv'/4,
  'un--++'/3
]).
'case--case block in uniqifyEnv,uenv-4503'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.DPair.MkDPair', V8, V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> begin (V13 = ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V12) -> ('Idris.Idris2.Core.TT':'un--renameVars'(V11, V12)) end, V5))), {'Builtin.DPair.MkDPair', [V2 | V8], {'Builtin.MkPair', {'Core.Env.::', V13, V10}, (V11 + 1)}} end end end.
'case--case block in uniqifyEnv,uenv-4426'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Builtin.DPair.MkDPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> begin (V14 = ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V13) -> ('Idris.Idris2.Core.TT':'un--renameVars'(V12, V13)) end, V5))), {'Builtin.DPair.MkDPair', [V7 | V9], {'Builtin.MkPair', {'Core.Env.::', V14, V11}, (V12 + 1)}} end end end.
'nested--6180-4287--in--un--uniqueLocal'(V0, V1, V2, V3) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> V24 end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V27, V28, V29)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V32, V33)) end end}, V3, V2)) of 1 -> ('nested--6180-4287--in--un--uniqueLocal'(V0, V1, V2, ('nested--6180-4286--in--un--next'(V0, V1, V3)))); 0 -> V3 end.
'nested--6180-4288--in--un--uenv'(V0, V1, V2, V3, V4) -> case V2 of [] -> case V4 of {'Core.Env.Nil'} -> {'Builtin.DPair.MkDPair', [], {'Builtin.MkPair', {'Core.Env.Nil'}, 0}} end; [E0 | E1] -> (fun (V5, V6) -> case V4 of {'Core.Env.::', V7, V8} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V24, V25, V26, V27)) end end end end end end end, fun (V28) -> fun (V29) -> V29 end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V32, V33, V34)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V37, V38)) end end}, V5, V3)) of 1 -> begin (V39 = ('nested--6180-4287--in--un--uniqueLocal'(V0, V1, V3, V5))), ('case--case block in uniqifyEnv,uenv-4426'(V0, V1, V5, V6, V8, V7, V3, V39, ('nested--6180-4288--in--un--uenv'(V0, V1, V6, [V39 | V3], V8)))) end; 0 -> ('case--case block in uniqifyEnv,uenv-4503'(V0, V1, V5, V6, V8, V7, V3, ('nested--6180-4288--in--un--uenv'(V0, V1, V6, [V5 | V3], V8)))) end end end(E0, E1)) end.
'nested--6180-4286--in--un--next'(V0, V1, V2) -> case V2 of {'Core.Name.MN', V3, V4} -> {'Core.Name.MN', V3, begin (V5 = (V4 + 1)), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end}; {'Core.Name.UN', V6} -> {'Core.Name.MN', ('Idris.Idris2.Core.Name':'un--displayUserName'(V6)), 0}; {'Core.Name.NS', V7, V8} -> {'Core.Name.NS', V7, ('nested--6180-4286--in--un--next'(V0, V1, V8))}; _ -> {'Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), 0} end.
'nested--5452-3718--in--un--findUsedArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> V8; [E0 | E1] -> (fun (V10, V11) -> ('nested--5452-3718--in--un--findUsedArgs'(V0, V1, V2, V3, V4, V5, V6, V7, ('un--findUsed'(V0, V7, V8, V10)), V11)) end(E0, E1)) end.
'nested--5452-3638--in--un--eqNat'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V6, V7)).
'nested--5452-3743--in--un--dropS'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> []; [E0 | E1] -> (fun (V8, V9) -> case V8 of 0 -> ('nested--5452-3743--in--un--dropS'(V0, V1, V2, V3, V4, V5, V6, V9)); _ -> begin (V10 = (V8 - 1)), [V10 | ('nested--5452-3743--in--un--dropS'(V0, V1, V2, V3, V4, V5, V6, V9))] end end end(E0, E1)) end.
'un--uniqifyEnv'(V0, V1) -> ('nested--6180-4288--in--un--uenv'(V0, V1, V0, [], V1)).
'un--toVar'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> case V1 of 0 -> {'Prelude.Types.Just', 0}; _ -> begin (V4 = (V1 - 1)), ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--toVar'(V3, V4)), fun (V5) -> begin (V6 = V5), {'Prelude.Types.Just', (V6 + 1)} end end)) end end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end.
'un--shrinkEnv'(V0, V1) -> case V1 of {'Core.TT.SubRefl'} -> {'Prelude.Types.Just', V0}; _ -> case V0 of {'Core.Env.::', V2, V3} -> case V1 of {'Core.TT.DropCons', V4} -> ('un--shrinkEnv'(V3, V4)); {'Core.TT.KeepCons', V5} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkEnv'(V3, V5)), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Core.TT':'un--shrinkBinder'(V2, V5)), fun (V7) -> {'Prelude.Types.Just', {'Core.Env.::', V7, V6}} end)) end)) end end end.
'un--namesNoLet'(V0, V1) -> case V0 of [] -> case V1 of {'Core.Env.Nil'} -> [] end; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Core.Env.::', V4, V5} -> case V4 of {'Core.TT.Let', V6, V7, V8, V9} -> ('un--namesNoLet'(V3, V5)); _ -> [V2 | ('un--namesNoLet'(V3, V5))] end end end(E0, E1)) end.
'un--mkShrinkSub'(V0, V1, V2) -> case V1 of [] -> case ('un--isUsed'(0, V2)) of 1 -> {'Builtin.DPair.MkDPair', [V0 | []], {'Core.TT.KeepCons', {'Core.TT.SubRefl'}}}; 0 -> {'Builtin.DPair.MkDPair', [], {'Core.TT.DropCons', {'Core.TT.SubRefl'}}} end; [E0 | E1] -> (fun (V3, V4) -> case ('un--mkShrinkSub'(V3, V4, ('Idris.Idris2.Core.TT':'un--dropFirst'(V2)))) of {'Builtin.DPair.MkDPair', V5, V6} -> case ('un--isUsed'(0, V2)) of 1 -> {'Builtin.DPair.MkDPair', [V0 | V5], {'Core.TT.KeepCons', V6}}; 0 -> {'Builtin.DPair.MkDPair', V5, {'Core.TT.DropCons', V6}} end end end(E0, E1)) end.
'un--mkShrink'(V0, V1) -> case V0 of [] -> {'Builtin.DPair.MkDPair', [], {'Core.TT.SubRefl'}}; [E0 | E1] -> (fun (V2, V3) -> ('un--mkShrinkSub'(V2, V3, V1)) end(E0, E1)) end.
'un--mkEnvOnto'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> {'Core.Env.::', {'Core.TT.PVar', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Core.TT.Erased', V0, {'Core.TT.Placeholder'}}}, ('un--mkEnvOnto'(V0, V4, V2))} end(E0, E1)) end.
'un--mkEnv'(V0, V1) -> case V1 of [] -> {'Core.Env.Nil'}; [E0 | E1] -> (fun (V2, V3) -> {'Core.Env.::', {'Core.TT.PVar', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Core.TT.Erased', V0, {'Core.TT.Placeholder'}}}, ('un--mkEnv'(V0, V3))} end(E0, E1)) end.
'un--letToLam'(V0) -> case V0 of {'Core.Env.Nil'} -> {'Core.Env.Nil'}; {'Core.Env.::', V1, V2} -> case V1 of {'Core.TT.Let', V3, V4, V5, V6} -> {'Core.Env.::', {'Core.TT.Lam', V3, V4, {'Core.TT.Explicit'}, V6}, ('un--letToLam'(V2))}; _ -> {'Core.Env.::', V1, ('un--letToLam'(V2))} end end.
'un--lengthNoLet'(V0) -> case V0 of {'Core.Env.Nil'} -> 0; {'Core.Env.::', V1, V2} -> case V1 of {'Core.TT.Let', V3, V4, V5, V6} -> ('un--lengthNoLet'(V2)); _ -> (('un--lengthNoLet'(V2)) + 1) end end.
'un--lengthExplicitPi'(V0) -> case V0 of {'Core.Env.Nil'} -> 0; {'Core.Env.::', V1, V2} -> case V1 of {'Core.TT.Pi', V3, V4, V5, V6} -> case V5 of {'Core.TT.Explicit'} -> (('un--lengthExplicitPi'(V2)) + 1); _ -> ('un--lengthExplicitPi'(V2)) end; _ -> ('un--lengthExplicitPi'(V2)) end end.
'un--length'(V0) -> case V0 of {'Core.Env.Nil'} -> 0; {'Core.Env.::', V1, V2} -> (('un--length'(V2)) + 1) end.
'un--isUsed'(V0, V1) -> case V1 of [] -> 0; [E0 | E1] -> (fun (V2, V3) -> case case (V0 =:= ('Idris.Idris2.Core.TT':'un--varIdx'(V2))) of 'false' -> 0; _ -> 1 end of 1 -> 1; 0 -> ('un--isUsed'(V0, V3)) end end(E0, E1)) end.
'un--getBinderUnder'(V0, V1, V2, V3, V4) -> case V1 of [E0 | E1] -> (fun (V5, V6) -> case V2 of 0 -> case V4 of {'Core.Env.::', V7, V8} -> ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V9) -> case V0 of {'Core.TT.dn--un--__mkWeaken', V10, V11} -> ((((V11('erased'))('erased'))(('Idris.Idris2.Core.TT.SizeOf':'un--reverse'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V5 | V3]))))))(V9)) end end))(V7)) end; _ -> begin (V19 = (V2 - 1)), case V4 of {'Core.Env.::', V20, V21} -> ('un--getBinderUnder'(V0, V6, V19, [V5 | V3], V21)) end end end end(E0, E1)) end.
'un--getBinderLoc'(V0, V1, V2) -> case V0 of [E0 | E1] -> (fun (V3, V4) -> case V1 of 0 -> case V2 of {'Core.Env.::', V5, V6} -> ('Idris.Idris2.Core.TT':'un--binderLoc'(V5)) end; _ -> begin (V7 = (V1 - 1)), case V2 of {'Core.Env.::', V8, V9} -> ('un--getBinderLoc'(V4, V7, V9)) end end end end(E0, E1)) end.
'un--getBinder'(V0, V1, V2, V3) -> ('un--getBinderUnder'(V0, V1, V2, [], V3)).
'un--findUsedLocs'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V3) -> ('un--toVar'(V0, V3)) end, ('un--findUsed'(V0, V1, [], V2)))).
'un--findUsedInBinder'(V0, V1, V2, V3) -> case V3 of {'Core.TT.Let', V4, V5, V6, V7} -> ('un--findUsed'(V0, V1, ('un--findUsed'(V0, V1, V2, V6)), V7)); {'Core.TT.PLet', V8, V9, V10, V11} -> ('un--findUsed'(V0, V1, ('un--findUsed'(V0, V1, V2, V10)), V11)); _ -> ('un--findUsed'(V0, V1, V2, ('Idris.Idris2.Core.TT':'un--binderType'(V3)))) end.
'un--findUsed'(V0, V1, V2, V3) -> case V3 of {'Core.TT.Local', V4, V5, V6} -> case ('Idris.Idris2.Prelude.Types':'un--elemBy'({'Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> V27 end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, fun (V33) -> fun (V34) -> ('nested--5452-3638--in--un--eqNat'(V0, V6, V5, V4, V2, V1, V33, V34)) end end, V6, V2)) of 1 -> V2; 0 -> ('un--findUsedInBinder'(V0, V1, [V6 | V2], ('un--getBinder'({'Core.TT.dn--un--__mkWeaken', fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V37)) end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V40, V41)) end end end end}, V0, V6, V1)))) end; {'Core.TT.Meta', V42, V43, V44, V45} -> ('nested--5452-3718--in--un--findUsedArgs'(V0, V42, V43, V44, V45, V2, V1, V1, V2, V45)); {'Core.TT.Bind', V46, V47, V48, V49} -> ('nested--5452-3743--in--un--dropS'(V0, V47, V49, V48, V46, V2, V1, ('un--findUsed'([V47 | V0], {'Core.Env.::', V48, V1}, ((begin (V55 = fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V53, V54)) end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end(fun (V50) -> (V50 + 1) end))(('un--findUsedInBinder'(V0, V1, V2, V48)))), V49)))); {'Core.TT.App', V58, V59, V60} -> ('un--findUsed'(V0, V1, ('un--findUsed'(V0, V1, V2, V59)), V60)); {'Core.TT.As', V61, V62, V63, V64} -> ('un--findUsed'(V0, V1, ('un--findUsed'(V0, V1, V2, V63)), V64)); {'Core.TT.TDelayed', V65, V66, V67} -> ('un--findUsed'(V0, V1, V2, V67)); {'Core.TT.TDelay', V68, V69, V70, V71} -> ('un--findUsed'(V0, V1, ('un--findUsed'(V0, V1, V2, V70)), V71)); {'Core.TT.TForce', V72, V73, V74} -> ('un--findUsed'(V0, V1, V2, V74)); _ -> V2 end.
'un--findSubEnv'(V0, V1, V2) -> ('un--mkShrink'(V0, ('un--findUsedLocs'(V0, V1, V2)))).
'un--extend'(V0, V1, V2) -> {'Core.Env.::', V1, V2}.
'un--defined'(V0, V1, V2) -> case V0 of [] -> case V2 of {'Core.Env.Nil'} -> {'Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V3, V4) -> case V2 of {'Core.Env.::', V5, V6} -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V1, V3)) of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--defined'(V4, V1, V6)), fun (V7) -> case V7 of {'Core.Env.MkIsDefined', V8, V9} -> {'Prelude.Types.Just', {'Core.Env.MkIsDefined', (V8 + 1), V9}} end end)); {'Prelude.Types.Just', V10} -> {'Prelude.Types.Just', {'Core.Env.MkIsDefined', 0, ('Idris.Idris2.Core.TT':'un--multiplicity'(V5))}} end end end(E0, E1)) end.
'un--bindEnv'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Core.Env.Nil'} -> V3 end; [E0 | E1] -> (fun (V4, V5) -> case V2 of {'Core.Env.::', V6, V7} -> ('un--bindEnv'(V5, V1, V7, {'Core.TT.Bind', V1, V4, {'Core.TT.PVar', ('Idris.Idris2.Core.TT':'un--binderLoc'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V6))}, V3})) end end(E0, E1)) end.
'un--allVarsNoLet'(V0, V1) -> case V0 of [] -> case V1 of {'Core.Env.Nil'} -> [] end; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Core.Env.::', V4, V5} -> case V4 of {'Core.TT.Let', V6, V7, V8, V9} -> ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V10)) end))(('un--allVars'(V3, V5)))); _ -> [0 | ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V18)) end))(('un--allVars'(V3, V5))))] end end end(E0, E1)) end.
'un--allVars'(V0, V1) -> case V0 of [] -> case V1 of {'Core.Env.Nil'} -> [] end; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Core.Env.::', V4, V5} -> [0 | ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V6)) end))(('un--allVars'(V3, V5))))] end end(E0, E1)) end.
'un--abstractFullEnvType'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Core.Env.Nil'} -> V3 end; [E0 | E1] -> (fun (V4, V5) -> case V2 of {'Core.Env.::', V6, V7} -> case V6 of {'Core.TT.Pi', V8, V9, V10, V11} -> ('un--abstractFullEnvType'(V5, V1, V7, {'Core.TT.Bind', V1, V4, {'Core.TT.Pi', V8, V9, V10, V11}, V3})); _ -> begin (V12 = {'Core.TT.Pi', V1, ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V6))}), ('un--abstractFullEnvType'(V5, V1, V7, {'Core.TT.Bind', V1, V4, V12, V3})) end end end end(E0, E1)) end.
'un--abstractEnvType'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Core.Env.Nil'} -> V3 end; [E0 | E1] -> (fun (V4, V5) -> case V2 of {'Core.Env.::', V6, V7} -> case V6 of {'Core.TT.Let', V8, V9, V10, V11} -> ('un--abstractEnvType'(V5, V1, V7, {'Core.TT.Bind', V1, V4, {'Core.TT.Let', V8, V9, V10, V11}, V3})); {'Core.TT.Pi', V12, V13, V14, V15} -> ('un--abstractEnvType'(V5, V1, V7, {'Core.TT.Bind', V1, V4, {'Core.TT.Pi', V12, V13, V14, V15}, V3})); _ -> begin (V16 = {'Core.TT.Pi', ('Idris.Idris2.Core.TT':'un--binderLoc'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V6))}), ('un--abstractEnvType'(V5, V1, V7, {'Core.TT.Bind', V1, V4, V16, V3})) end end end end(E0, E1)) end.
'un--abstractEnv'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Core.Env.Nil'} -> V3 end; [E0 | E1] -> (fun (V4, V5) -> case V2 of {'Core.Env.::', V6, V7} -> case V6 of {'Core.TT.Let', V8, V9, V10, V11} -> ('un--abstractEnv'(V5, V1, V7, {'Core.TT.Bind', V1, V4, {'Core.TT.Let', V8, V9, V10, V11}, V3})); _ -> begin (V12 = {'Core.TT.Lam', ('Idris.Idris2.Core.TT':'un--binderLoc'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V6))}), ('un--abstractEnv'(V5, V1, V7, {'Core.TT.Bind', V1, V4, V12, V3})) end end end end(E0, E1)) end.
'un--++'(V0, V1, V2) -> case V0 of [E0 | E1] -> (fun (V3, V4) -> case V1 of {'Core.Env.::', V5, V6} -> ('un--extend'(V3, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('Idris.Idris2.Core.TT':'un--embed'(V7)) end))(V5)), ('un--++'(V4, V6, V2)))) end end(E0, E1)); [] -> case V1 of {'Core.Env.Nil'} -> V2 end end.
