-module('Idris.Idris2.TTImp.Interactive.GenerateDef').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--propBindableUsed-3257'/2,
  'case--case block in case block in expandClause-1463'/17,
  'nested--12366-1864--in--un--valid'/11,
  'nested--11748-1323--in--un--updateRHS'/11,
  'nested--12366-1866--in--un--updateLHS'/12,
  'nested--11682-1237--in--un--mkUniqueName'/6,
  'nested--13871-3162--in--un--getProp'/2,
  'nested--12366-1865--in--un--fixNames'/11,
  'nested--11748-1324--in--un--dropLams'/11,
  'un--uniqueRHS'/3,
  'un--trySplit'/10,
  'un--tryAllSplits'/9,
  'un--splittableNames'/1,
  'un--propBindableUsed'/1,
  'un--mostUsed'/2,
  'un--mkSplits'/9,
  'un--makeDefSort'/9,
  'un--makeDefN'/8,
  'un--makeDefFromType'/10,
  'un--makeDef'/7,
  'un--generateSplits'/9,
  'un--fnName'/2,
  'un--expandClause'/9,
  'un--collectClauses'/3,
  'un--bindableUsed'/1
]).
'case--propBindableUsed-3257'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case case (V2 =:= 0) of 'false' -> 0; _ -> 1 end of 1 -> 1.0; 0 -> (('erlang':'float'(V3)) / ('erlang':'float'(V2))) end end.
'case--case block in case block in expandClause-1463'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Core.TT.Meta', V17, V18, V19, V20} -> begin (V26 = begin (V21 = V0), fun (V22) -> begin (V25 = (begin (V23 = V21), fun (V24) -> ('erlang':'get'(V23)) end end(V22))), {'Prelude.Types.Right', V25} end end end), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V128 = begin (V63 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'({'Core.Name.Resolved', V19}, case V30 of {'Core.Context.MkDefs', V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62} -> V31 end))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V127 = case V67 of {'Prelude.Types.Just', V68} -> case V68 of {'Core.Context.Context.Hole', V69, V70} -> begin (V83 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V72 = fun (V71) -> V71 end), fun (V73) -> (V72(V73)) end end(<<"interaction.generate"/utf8>>)), 10, fun () -> <<(begin (V75 = fun (V74) -> V74 end), fun (V76) -> (V75(V76)) end end(<<"Expression search for "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V77) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V78, V79)) end end}, {'Prelude.Show.MkShow', fun (V80) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V81, V82)) end end}}, {'Builtin.MkPair', V18, V19}))/binary>> end))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V124 = begin (V88 = ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--exprSearchOpts'(V0, V8, V7, V6, V5, V3, V4, {'Core.Name.Resolved', V19}, []))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V123 = ('Idris.Idris2.Core.Core.Search':'un--traverse'(fun (V93) -> begin (V94 = ('nested--11748-1324--in--un--dropLams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V69, V93))), begin (V101 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V11, V0, (begin (V96 = fun (V95) -> V95 end), fun (V97) -> (V96(V97)) end end(<<"interaction.generate"/utf8>>)), 5, fun () -> (begin (V99 = fun (V98) -> V98 end), fun (V100) -> (V99(V100)) end end(<<"Got clause"/utf8>>)) end, V14, V13))), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V122 = begin (V115 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V107 = fun (V106) -> V106 end), fun (V108) -> (V107(V108)) end end(<<"interaction.generate"/utf8>>)), 5, fun () -> <<(begin (V110 = fun (V109) -> V109 end), fun (V111) -> (V110(V111)) end end(<<"        = "/utf8>>))/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V112) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V113, V114)) end end}, V94))/binary>> end))), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V121 = fun (V120) -> {'Prelude.Types.Right', [('nested--11748-1323--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V94)) | []]} end), V121 end(V116)) end end end end), V122 end(V102)) end end end end end end, V92))), V123 end(V89)) end end end end), V124 end(V84)) end end end end; _ -> fun (V125) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V4, <<"No searchable hole on RHS"/utf8>>}, V125)) end end; _ -> fun (V126) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V4, <<"No searchable hole on RHS"/utf8>>}, V126)) end end), V127 end(V64)) end end end end), V128 end(V27)) end end end end; _ -> fun (V129) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V4, <<"No searchable hole on RHS"/utf8>>}, V129)) end end.
'nested--12366-1864--in--un--valid'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'TTImp.Interactive.CaseSplit.Valid', V11, V12} -> {'Prelude.Types.Just', V12}; _ -> {'Prelude.Types.Nothing'} end.
'nested--11748-1323--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'TTImp.TTImp.PatClause', V11, V12, V13} -> {'TTImp.TTImp.PatClause', V11, V12, V10}; {'TTImp.TTImp.WithClause', V14, V15, V16, V17, V18, V19, V20} -> {'TTImp.TTImp.WithClause', V14, V15, V16, V17, V18, V19, V20}; {'TTImp.TTImp.ImpossibleClause', V21, V22} -> {'TTImp.TTImp.ImpossibleClause', V21, V22} end.
'nested--12366-1866--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'TTImp.TTImp.IVar', V12, V13} -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V16, V17)) end end}, V13, V10)) of {'Prelude.Types.Nothing'} -> {'TTImp.TTImp.IVar', V12, V13}; {'Prelude.Types.Just', V18} -> ('nested--12366-1865--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V18)) end; {'TTImp.TTImp.IBindVar', V19, V20} -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V23, V24)) end end}, {'Core.Name.UN', {'Core.Name.Basic', V20}}, V10)) of {'Prelude.Types.Nothing'} -> {'TTImp.TTImp.IBindVar', V19, V20}; {'Prelude.Types.Just', V25} -> ('nested--12366-1865--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V25)) end; {'TTImp.TTImp.IApp', V26, V27, V28} -> {'TTImp.TTImp.IApp', V26, ('nested--12366-1866--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V27)), ('nested--12366-1866--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V28))}; {'TTImp.TTImp.IAutoApp', V29, V30, V31} -> {'TTImp.TTImp.IAutoApp', V29, ('nested--12366-1866--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V30)), ('nested--12366-1866--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V31))}; {'TTImp.TTImp.INamedApp', V32, V33, V34, V35} -> {'TTImp.TTImp.INamedApp', V32, ('nested--12366-1866--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V33)), V34, ('nested--12366-1866--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V35))}; _ -> V11 end.
'nested--11682-1237--in--un--mkUniqueName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'TTImp.TTImp.IHole', V6, V7} -> begin (V13 = begin (V8 = V4), fun (V9) -> begin (V12 = (begin (V10 = V8), fun (V11) -> ('erlang':'get'(V10)) end end(V9))), {'Prelude.Types.Right', V12} end end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V25 = begin (V18 = ('Idris.Idris2.TTImp.Utils':'un--uniqueHoleName'(V3, V17, [], V7))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', {'TTImp.TTImp.IHole', V6, V22}} end), V24 end(V19)) end end end end), V25 end(V14)) end end end end; _ -> fun (V26) -> {'Prelude.Types.Right', V5} end end.
'nested--13871-3162--in--un--getProp'(V0, V1) -> case V1 of [] -> {'Builtin.MkPair', 0, 0}; [E0 | E1] -> (fun (V2, V3) -> case ('nested--13871-3162--in--un--getProp'(V0, V3)) of {'Builtin.MkPair', V4, V5} -> case ('un--bindableUsed'(V2)) of {'Prelude.Types.Nothing'} -> {'Builtin.MkPair', V4, V5}; {'Prelude.Types.Just', V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> {'Builtin.MkPair', (V4 + ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V11, V12)) end end}, V7))))), (V5 + ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V15, V16)) end end}, V8)))))} end end end end(E0, E1)) end.
'nested--12366-1865--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'TTImp.TTImp.IVar', V11, V12} -> case V12 of {'Core.Name.UN', V13} -> case V13 of {'Core.Name.Basic', V14} -> {'TTImp.TTImp.IBindVar', V11, V14}; _ -> V10 end; {'Core.Name.MN', V15, V16} -> {'TTImp.TTImp.Implicit', V11, 1}; _ -> V10 end; {'TTImp.TTImp.IApp', V17, V18, V19} -> {'TTImp.TTImp.IApp', V17, ('nested--12366-1865--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V18)), ('nested--12366-1865--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V19))}; {'TTImp.TTImp.IAutoApp', V20, V21, V22} -> {'TTImp.TTImp.IAutoApp', V20, ('nested--12366-1865--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V21)), ('nested--12366-1865--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V22))}; {'TTImp.TTImp.INamedApp', V23, V24, V25, V26} -> {'TTImp.TTImp.INamedApp', V23, ('nested--12366-1865--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V24)), V25, ('nested--12366-1865--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V26))}; _ -> V10 end.
'nested--11748-1324--in--un--dropLams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of 0 -> V10; _ -> begin (V11 = (V9 - 1)), case V10 of {'TTImp.TTImp.ILam', V12, V13, V14, V15, V16, V17} -> ('nested--11748-1324--in--un--dropLams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V17)); _ -> V10 end end end.
'un--uniqueRHS'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.PatClause', V3, V4, V5} -> begin (V6 = ('nested--11682-1237--in--un--mkUniqueName'(V5, V4, V3, V1, V0, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> {'Prelude.Types.Right', {'TTImp.TTImp.PatClause', V3, V4, V10}} end), V12 end(V7)) end end end end; _ -> fun (V13) -> {'Prelude.Types.Right', V2} end end.
'un--trySplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = ('Idris.Idris2.TTImp.Interactive.CaseSplit':'un--getSplitsLHS'(V0, V1, V2, V3, V4, V5, 0, V7, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V26 = fun (V15) -> case V14 of {'TTImp.Interactive.CaseSplit.OK', V16} -> {'Prelude.Types.Right', {'Builtin.MkPair', V9, ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> {'TTImp.TTImp.PatClause', V5, ('nested--12366-1866--in--un--updateLHS'(V9, V8, V7, V6, V5, V4, V3, V2, V1, V0, V18, V6)), V8} end))(('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V17) -> ('nested--12366-1864--in--un--valid'(V9, V8, V7, V6, V5, V4, V3, V2, V1, V0, V17)) end, V16))))}}; _ -> {'Prelude.Types.Right', {'Builtin.MkPair', V9, []}} end end), V26 end(V11)) end end end end.
'un--tryAllSplits'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> fun (V9) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--noResult'(V9)) end; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Builtin.MkPair', V12, V13} -> case V13 of [] -> ('un--tryAllSplits'(V0, V1, V2, V3, V4, V5, V6, V7, V11)); _ -> begin (V14 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.generate"/utf8>>, 5, fun () -> <<<<"Splitting on "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12))/binary>> end))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V26 = ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--trySearch'(V0, V2, begin (V20 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V19) -> ('un--mkSplits'(V0, V1, V2, V3, V4, V5, V6, V7, V19)) end, V13, []))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V25 = ('un--collectClauses'(V0, V2, V24))), V25 end(V21)) end end end end, ('un--tryAllSplits'(V0, V1, V2, V3, V4, V5, V6, V7, V11))))), V26 end(V15)) end end end end end end end(E0, E1)) end.
'un--splittableNames'(V0) -> case V0 of {'TTImp.TTImp.IApp', V1, V2, V3} -> case V3 of {'TTImp.TTImp.IBindVar', V4, V5} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--splittableNames'(V2)), [{'Core.Name.UN', {'Core.Name.Basic', V5}} | []])); _ -> ('un--splittableNames'(V2)) end; {'TTImp.TTImp.IAutoApp', V6, V7, V8} -> ('un--splittableNames'(V7)); {'TTImp.TTImp.INamedApp', V9, V10, V11, V12} -> ('un--splittableNames'(V10)); _ -> [] end.
'un--propBindableUsed'(V0) -> ('case--propBindableUsed-3257'(V0, ('nested--13871-3162--in--un--getProp'(V0, V0)))).
'un--mostUsed'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Double'(('un--propBindableUsed'(V1)), ('un--propBindableUsed'(V0)))).
'un--mkSplits'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--trySearch'(V0, V2, case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18} -> V16 end of 1 -> fun (V19) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--noResult'(V19)) end; 0 -> ('un--expandClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8)) end, begin (V20 = ('un--generateSplits'(V1, V0, V2, V3, V4, V5, V6, V7, V8))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V92 = begin (V76 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.generate"/utf8>>, 5, fun () -> <<<<"Splits: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V25) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V27, V28)) end end}, {'Prelude.Show.MkShow', fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V32, V33)) end end}, V30)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V36)) end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V37, V38)) end end}, V34, V35)) end end}, V29)) end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V43, V44)) end end}, V41)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V48, V49)) end end}, V45, V46)) end end}, V39, V40)) end end}}, V25)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V53, V54)) end end}, {'Prelude.Show.MkShow', fun (V55) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V56) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V57)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V58, V59)) end end}, V56)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V62) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V62)) end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V63, V64)) end end}, V60, V61)) end end}, V55)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V67) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V68) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V69, V70)) end end}, V67)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V73) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V73)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V74, V75)) end end}, V71, V72)) end end}, V65, V66)) end end}}, V50, V51)) end end}, V24))/binary>> end))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V91 = ('un--tryAllSplits'(V0, V1, V2, V3, V4, V5, case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V81, V82, V83, V84, V85, V86, V87, V88, V89, V90} -> {'TTImp.Interactive.ExprSearch.MkSearchOpts', V81, V82, V83, V84, V85, V86, V87, 0, 1, V90} end, V7, V24))), V91 end(V77)) end end end end), V92 end(V21)) end end end end)).
'un--makeDefSort'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--searchSort'(V0, V2, V6, ('un--makeDef'(V0, V1, V2, V3, V4, V5, V8)), fun (V9) -> fun (V10) -> ((V7(('Idris.Idris2.Builtin':'un--snd'(V9))))(('Idris.Idris2.Builtin':'un--snd'(V10)))) end end)).
'un--makeDefN'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--searchN'(V0, V2, V6, ('un--makeDef'(V0, V1, V2, V3, V4, V5, V7))))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V16 = fun (V13) -> case V12 of {'Builtin.MkPair', V14, V15} -> {'Prelude.Types.Right', V14} end end), V16 end(V9)) end end end end.
'un--makeDefFromType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('Idris.Idris2.Core.UnifyState':'un--tryUnify'(V0, V2, begin (V10 = ('Idris.Idris2.Core.Context':'un--branch'(V0))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V146 = begin (V20 = begin (V15 = V1), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V145 = begin (V30 = begin (V25 = V2), fun (V26) -> begin (V29 = (begin (V27 = V25), fun (V28) -> ('erlang':'get'(V27)) end end(V26))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V144 = begin (V41 = begin (V35 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V14, {'Core.Env.Nil'}, V9))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V40 = ('Idris.Idris2.TTImp.Interactive.CaseSplit':'un--getEnvArgNames'(V0, V14, V8, V39))), V40 end(V36)) end end end end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V143 = begin (V46 = ('Idris.Idris2.Data.List':'un--replicateTR'([], V8, {'TTImp.TTImp.Implicit', V5, 1}))), begin (V47 = ('Idris.Idris2.TTImp.Utils':'un--uniqueHoleName'(V3, V14, [], <<('un--fnName'(0, V7))/binary, <<"_rhs"/utf8>>/binary>>))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V142 = begin (V60 = {'TTImp.TTImp.PatClause', V5, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V5, V7}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V46, ((begin (V57 = fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V55, V56)) end end end end), fun (V58) -> fun (V59) -> ((((V57('erased'))('erased'))(V58))(V59)) end end end(fun (V52) -> {'TTImp.TTImp.IBindVar', V5, V52} end))(V45)))))), {'TTImp.TTImp.IHole', V5, V51}}), case ('Idris.Idris2.Core.Context':'un--getNameID'(V7, case V14 of {'Core.Context.MkDefs', V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92} -> V61 end)) of {'Prelude.Types.Just', V93} -> begin (V94 = ('un--mkSplits'(V0, V1, V2, V3, V4, V5, V6, V93, V60))), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V141 = begin (V104 = begin (V99 = V0), fun (V100) -> begin (V103 = (begin (V101 = V99), fun (V102) -> ('erlang':'put'(V101, V14)) end end(V100))), {'Prelude.Types.Right', V103} end end end), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V140 = begin (V114 = begin (V109 = V1), fun (V110) -> begin (V113 = (begin (V111 = V109), fun (V112) -> ('erlang':'put'(V111, V24)) end end(V110))), {'Prelude.Types.Right', V113} end end end), fun (V115) -> begin (V116 = (V114(V115))), case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> (begin (V139 = begin (V124 = begin (V119 = V2), fun (V120) -> begin (V123 = (begin (V121 = V119), fun (V122) -> ('erlang':'put'(V121, V34)) end end(V120))), {'Prelude.Types.Right', V123} end end end), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V138 = fun (V129) -> {'Prelude.Types.Right', ((begin (V135 = fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Core.Search':'un--functor'(V131, V132, V133, V134)) end end end end), fun (V136) -> fun (V137) -> ((((V135('erased'))('erased'))(V136))(V137)) end end end(fun (V130) -> {'Builtin.MkPair', V5, V130} end))(V98))} end), V138 end(V125)) end end end end), V139 end(V115)) end end end end), V140 end(V105)) end end end end), V141 end(V95)) end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V5, V7)) end end), V142 end(V48)) end end end end end), V143 end(V42)) end end end end), V144 end(V31)) end end end end), V145 end(V21)) end end end end), V146 end(V11)) end end end end, fun (V147) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--noResult'(V147)) end)).
'un--makeDef'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Metadata':'un--findTyDeclAt'(V1, V5))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V53 = case V11 of {'Prelude.Types.Just', V12} -> case V12 of {'Builtin.MkPair', V13, V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> begin (V19 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V15))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V51 = begin (V30 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, (begin (V25 = fun (V24) -> V24 end), fun (V26) -> (V25(V26)) end end(<<"interaction.generate"/utf8>>)), 5, fun () -> <<(begin (V28 = fun (V27) -> V27 end), fun (V29) -> (V28(V29)) end end(<<"Searching for "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V23))/binary>> end, V18))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V50 = begin (V49 = case ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--initSearchOpts'(1, 5)) of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> {'TTImp.Interactive.ExprSearch.MkSearchOpts', V35, V36, V37, V38, V39, V40, V41, V42, V43, {'Prelude.Types.Just', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('un--makeDefFromType'(V0, V1, V2, V3, V4, ('Idris.Idris2.Core.FC':'un--justFC'(V13)), V45, V46, V47, V48)) end end end end}} end), ('un--makeDefFromType'(V0, V1, V2, V3, V4, ('Idris.Idris2.Core.FC':'un--justFC'(V13)), V49, V23, V17, V18)) end), V50 end(V31)) end end end end), V51 end(V20)) end end end end end end end; {'Prelude.Types.Nothing'} -> fun (V52) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--noResult'(V52)) end end), V53 end(V8)) end end end end.
'un--generateSplits'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'TTImp.TTImp.ImpossibleClause', V9, V10} -> fun (V11) -> {'Prelude.Types.Right', []} end; {'TTImp.TTImp.WithClause', V12, V13, V14, V15, V16, V17, V18} -> fun (V19) -> {'Prelude.Types.Right', []} end; {'TTImp.TTImp.PatClause', V20, V21, V22} -> begin (V27 = ('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V1, V0, V2, V3, V4, V7, {'TTImp.Elab.Check.InLHS', ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V23, V24)) end end, 0, fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V25, V26)) end end, 1}))}, [], [], {'Core.Env.Nil'}, {'TTImp.TTImp.IBindHere', V5, {'TTImp.TTImp.PATTERN'}, V21}, {'Prelude.Types.Nothing'}))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V46 = case V31 of {'Builtin.MkPair', V32, V33} -> begin (V44 = case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V40 end of 1 -> ('un--splittableNames'(V21)); 0 -> ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--splittableNames'(V21)))) end), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V45) -> ('un--trySplit'(V0, V1, V2, V3, V4, V20, V21, V32, V22, V45)) end, V44, [])) end end), V46 end(V28)) end end end end end.
'un--fnName'(V0, V1) -> case V1 of {'Core.Name.UN', V2} -> case V2 of {'Core.Name.Basic', V3} -> case ('Idris.Idris2.Parser.Lexer.Common':'un--isIdentNormal'(V3)) of 1 -> V3; 0 -> case V0 of 1 -> <<<<"("/utf8>>/binary, <<V3/binary, <<")"/utf8>>/binary>>/binary>>; 0 -> <<"op"/utf8>> end end; _ -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V1)) end; {'Core.Name.NS', V4, V5} -> ('un--fnName'(V0, V5)); {'Core.Name.DN', V6, V7} -> V6; _ -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V1)) end.
'un--expandClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('un--uniqueRHS'(V0, V3, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V33 = begin (V18 = ('Idris.Idris2.TTImp.ProcessDef':'un--checkClause'([], V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V14, V15)) end end, 0, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V16, V17)) end end, 1})), 0, 2, 0, V7, [], [], {'Core.Env.Nil'}, V13))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V32 = case V22 of {'Prelude.Types.Right', V23} -> begin (V24 = {'Prelude.Types.Right', V23}), case V23 of {'Core.Context.Context.MkClause', V25, V26, V27, V28} -> begin (V29 = {'Core.Context.Context.MkClause', V25, V26, V27, V28}), ('case--case block in case block in expandClause-1463'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V13, V24, V25, V28, V27, V26, V29, ('Idris.Idris2.Core.TT':'un--getFn'(V28)))) end end end; {'Prelude.Types.Left', V30} -> fun (V31) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--noResult'(V31)) end end), V32 end(V19)) end end end end), V33 end(V10)) end end end end.
'un--collectClauses'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--one'([], V3)) end; [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ('un--collectClauses'(V0, V1, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V14 = fun (V11) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--combine'(V0, V1, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V12, V13)) end end, V4, V10, V11)) end), V14 end(V7)) end end end end end(E0, E1)) end.
'un--bindableUsed'(V0) -> case V0 of {'TTImp.TTImp.PatClause', V1, V2, V3} -> begin (V4 = ('Idris.Idris2.TTImp.Utils':'un--findIBindVars'(V2))), begin (V5 = ('Idris.Idris2.TTImp.Utils':'un--findAllNames'([], V3))), {'Prelude.Types.Just', {'Builtin.MkPair', V4, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V6) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> V27 end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V35, V36)) end end}, V6, V4)) end, V5))}} end end; _ -> {'Prelude.Types.Nothing'} end.
