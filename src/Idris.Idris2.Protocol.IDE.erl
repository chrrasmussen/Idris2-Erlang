-module('Idris.Idris2.Protocol.IDE').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--toSExp_SExpable_Request'/1,
  'dn--un--toSExp_SExpable_ReplyPayload'/1,
  'dn--un--toSExp_SExpable_Reply'/1,
  'dn--un--toSExp_SExpable_(Span $a)'/2,
  'dn--un--fromSExp_FromSExpable_Request'/1,
  'dn--un--fromSExp_FromSExpable_ReplyPayload'/1,
  'dn--un--fromSExp_FromSExpable_Reply'/1,
  'dn--un--fromSExp_FromSExpable_(Span $a)'/2,
  'dn--un--__Impl_SExpable_Request'/1,
  'dn--un--__Impl_SExpable_ReplyPayload'/1,
  'dn--un--__Impl_SExpable_Reply'/1,
  'dn--un--__Impl_SExpable_(Span $a)'/2,
  'dn--un--__Impl_FromSExpable_Request'/1,
  'dn--un--__Impl_FromSExpable_ReplyPayload'/1,
  'dn--un--__Impl_FromSExpable_Reply'/1,
  'dn--un--__Impl_FromSExpable_(Span $a)'/2,
  'un--Highlighting'/0
]).
'dn--un--toSExp_SExpable_Request'(V0) -> begin (V1 = V0), ('Idris.Idris2.Protocol.IDE.Command':'dn--un--toSExp_SExpable_IDECommand'(V1)) end.
'dn--un--toSExp_SExpable_ReplyPayload'(V0) -> case V0 of {'Protocol.IDE.OK', V1, V2} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"ok"/utf8>>} | [('Idris.Idris2.Protocol.IDE.Result':'dn--un--toSExp_SExpable_Result'(V1)) | case V2 of [] -> []; _ -> [{'Protocol.SExp.SExpList', ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(begin (V5 = fun (V3) -> ('dn--un--toSExp_SExpable_(Span $a)'(fun (V4) -> ('Idris.Idris2.Protocol.IDE.Formatting':'dn--un--toSExp_SExpable_Properties'(V4)) end, V3)) end), fun (V6) -> (V5(V6)) end end))(V2))} | []] end]]}; {'Protocol.IDE.HighlightSource', V14} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"ok"/utf8>>} | [{'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"highlight-source"/utf8>>} | [(begin (V17 = fun (V15) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(List $a)'(fun (V16) -> ('Idris.Idris2.Protocol.IDE.Highlight':'dn--un--toSExp_SExpable_SourceHighlight'(V16)) end, V15)) end), fun (V18) -> (V17(V18)) end end(V14)) | []]]} | []]]}; {'Protocol.IDE.Error', V19, V20} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"error"/utf8>>} | [('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_String'(V19)) | case V20 of [] -> []; _ -> [{'Protocol.SExp.SExpList', ((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(begin (V23 = fun (V21) -> ('dn--un--toSExp_SExpable_(Span $a)'(fun (V22) -> ('Idris.Idris2.Protocol.IDE.Formatting':'dn--un--toSExp_SExpable_Properties'(V22)) end, V21)) end), fun (V24) -> (V23(V24)) end end))(V20))} | []] end]]} end.
'dn--un--toSExp_SExpable_Reply'(V0) -> case V0 of {'Protocol.IDE.ProtocolVersion', V1, V2} -> (begin (V8 = fun (V3) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V4) -> V4 end, fun (V5) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V6) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Int'(V6)) end, fun (V7) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Int'(V7)) end}, V5)) end}, V3)) end), fun (V9) -> (V8(V9)) end end({'Builtin.MkPair', {'Protocol.SExp.SymbolAtom', <<"protocol-version"/utf8>>}, {'Builtin.MkPair', V1, V2}})); {'Protocol.IDE.Immediate', V10, V11} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"return"/utf8>>} | [('dn--un--toSExp_SExpable_ReplyPayload'(V10)) | [('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Integer'(V11)) | []]]]}; {'Protocol.IDE.Intermediate', V12, V13} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"output"/utf8>>} | [('dn--un--toSExp_SExpable_ReplyPayload'(V12)) | [('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Integer'(V13)) | []]]]}; {'Protocol.IDE.WriteString', V14, V15} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"write-string"/utf8>>} | [('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_String'(V14)) | [('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Integer'(V15)) | []]]]}; {'Protocol.IDE.SetPrompt', V16, V17} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"set-prompt"/utf8>>} | [('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_String'(V16)) | [('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Integer'(V17)) | []]]]}; {'Protocol.IDE.Warning', V18, V19, V20, V21} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"warning"/utf8>>} | [{'Protocol.SExp.SExpList', [('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_String'(case V18 of {'Protocol.IDE.FileContext.MkFileContext', V22, V23} -> V22 end)) | [(begin (V39 = fun (V36) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V37) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Int'(V37)) end, fun (V38) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Int'(V38)) end}, V36)) end), fun (V40) -> (V39(V40)) end end({'Builtin.MkPair', case V18 of {'Protocol.IDE.FileContext.MkFileContext', V24, V25} -> case V25 of {'Libraries.Text.Bounded.MkBounds', V26, V27, V28, V29} -> V26 end end, case V18 of {'Protocol.IDE.FileContext.MkFileContext', V30, V31} -> case V31 of {'Libraries.Text.Bounded.MkBounds', V32, V33, V34, V35} -> V33 end end})) | [(begin (V56 = fun (V53) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V54) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Int'(V54)) end, fun (V55) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Int'(V55)) end}, V53)) end), fun (V57) -> (V56(V57)) end end({'Builtin.MkPair', case V18 of {'Protocol.IDE.FileContext.MkFileContext', V41, V42} -> case V42 of {'Libraries.Text.Bounded.MkBounds', V43, V44, V45, V46} -> V45 end end, case V18 of {'Protocol.IDE.FileContext.MkFileContext', V47, V48} -> case V48 of {'Libraries.Text.Bounded.MkBounds', V49, V50, V51, V52} -> V52 end end})) | [('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_String'(V19)) | case V20 of [] -> []; _ -> [{'Protocol.SExp.SExpList', ((begin (V66 = fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V64, V65)) end end end end), fun (V67) -> fun (V68) -> ((((V66('erased'))('erased'))(V67))(V68)) end end end(begin (V60 = fun (V58) -> ('dn--un--toSExp_SExpable_(Span $a)'(fun (V59) -> ('Idris.Idris2.Protocol.IDE.Formatting':'dn--un--toSExp_SExpable_Properties'(V59)) end, V58)) end), fun (V61) -> (V60(V61)) end end))(V20))} | []] end]]]]} | [('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Integer'(V21)) | []]]]} end.
'dn--un--toSExp_SExpable_(Span $a)'(V0, V1) -> case V1 of {'Libraries.Data.Span.MkSpan', V2, V3, V4} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.IntegerAtom', V2} | [{'Protocol.SExp.IntegerAtom', V3} | [(begin (V5 = V0), fun (V6) -> (V5(V6)) end end(V4)) | []]]]} end.
'dn--un--fromSExp_FromSExpable_Request'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.IDE.Command':'dn--un--fromSExp_FromSExpable_IDECommand'(V0)), fun (V1) -> {'Prelude.Types.Just', V1} end)).
'dn--un--fromSExp_FromSExpable_ReplyPayload'(V0) -> case V0 of {'Protocol.SExp.SExpList', V1} -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Protocol.SExp.SymbolAtom', V4} -> case V4 of <<"ok"/utf8>> -> case V3 of [E2 | E3] -> (fun (V5, V6) -> case V6 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.IDE.Result':'dn--un--fromSExp_FromSExpable_Result'(V5)), fun (V7) -> {'Prelude.Types.Just', {'Protocol.IDE.OK', V7, []}} end)); [E8 | E9] -> (fun (V8, V9) -> case V9 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.IDE.Result':'dn--un--fromSExp_FromSExpable_Result'(V5)), fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'((begin (V14 = fun (V11) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V12) -> ('dn--un--fromSExp_FromSExpable_(Span $a)'(fun (V13) -> ('Idris.Idris2.Protocol.IDE.Formatting':'dn--un--fromSExp_FromSExpable_Properties'(V13)) end, V12)) end, V11)) end), fun (V15) -> (V14(V15)) end end(V8)), fun (V16) -> {'Prelude.Types.Just', {'Protocol.IDE.OK', V10, V16}} end)) end)); _ -> case V5 of {'Protocol.SExp.SExpList', V17} -> case V17 of [E10 | E11] -> (fun (V18, V19) -> case V18 of {'Protocol.SExp.SymbolAtom', V20} -> case V20 of <<"highlight-source"/utf8>> -> case V19 of [E12 | E13] -> (fun (V21, V22) -> case V22 of [] -> case V6 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'((begin (V25 = fun (V23) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V24) -> ('Idris.Idris2.Protocol.IDE.Highlight':'dn--un--fromSExp_FromSExpable_SourceHighlight'(V24)) end, V23)) end), fun (V26) -> (V25(V26)) end end(V21)), fun (V27) -> {'Prelude.Types.Just', {'Protocol.IDE.HighlightSource', V27}} end)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E12, E13)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end end(E8, E9)); _ -> case V5 of {'Protocol.SExp.SExpList', V28} -> case V28 of [E4 | E5] -> (fun (V29, V30) -> case V29 of {'Protocol.SExp.SymbolAtom', V31} -> case V31 of <<"highlight-source"/utf8>> -> case V30 of [E6 | E7] -> (fun (V32, V33) -> case V33 of [] -> case V6 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'((begin (V36 = fun (V34) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V35) -> ('Idris.Idris2.Protocol.IDE.Highlight':'dn--un--fromSExp_FromSExpable_SourceHighlight'(V35)) end, V34)) end), fun (V37) -> (V36(V37)) end end(V32)), fun (V38) -> {'Prelude.Types.Just', {'Protocol.IDE.HighlightSource', V38}} end)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E6, E7)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end; <<"error"/utf8>> -> case V3 of [E14 | E15] -> (fun (V39, V40) -> case V40 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V39)), fun (V41) -> {'Prelude.Types.Just', {'Protocol.IDE.Error', V41, []}} end)); [E16 | E17] -> (fun (V42, V43) -> case V43 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V39)), fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'((begin (V48 = fun (V45) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V46) -> ('dn--un--fromSExp_FromSExpable_(Span $a)'(fun (V47) -> ('Idris.Idris2.Protocol.IDE.Formatting':'dn--un--fromSExp_FromSExpable_Properties'(V47)) end, V46)) end, V45)) end), fun (V49) -> (V48(V49)) end end(V42)), fun (V50) -> {'Prelude.Types.Just', {'Protocol.IDE.Error', V44, V50}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E16, E17)); _ -> {'Prelude.Types.Nothing'} end end(E14, E15)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'dn--un--fromSExp_FromSExpable_Reply'(V0) -> case V0 of {'Protocol.SExp.SExpList', V1} -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Protocol.SExp.SymbolAtom', V4} -> case V4 of <<"protocol-version"/utf8>> -> case V3 of [E2 | E3] -> (fun (V5, V6) -> case V6 of [E4 | E5] -> (fun (V7, V8) -> case V8 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Int'(V5)), fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Int'(V7)), fun (V10) -> {'Prelude.Types.Just', {'Protocol.IDE.ProtocolVersion', V9, V10}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end; <<"return"/utf8>> -> case V3 of [E6 | E7] -> (fun (V11, V12) -> case V12 of [E8 | E9] -> (fun (V13, V14) -> case V14 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('dn--un--fromSExp_FromSExpable_ReplyPayload'(V11)), fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Integer'(V13)), fun (V16) -> {'Prelude.Types.Just', {'Protocol.IDE.Immediate', V15, V16}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E8, E9)); _ -> {'Prelude.Types.Nothing'} end end(E6, E7)); _ -> {'Prelude.Types.Nothing'} end; <<"output"/utf8>> -> case V3 of [E10 | E11] -> (fun (V17, V18) -> case V18 of [E12 | E13] -> (fun (V19, V20) -> case V20 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('dn--un--fromSExp_FromSExpable_ReplyPayload'(V17)), fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Integer'(V19)), fun (V22) -> {'Prelude.Types.Just', {'Protocol.IDE.Intermediate', V21, V22}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E12, E13)); _ -> {'Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Prelude.Types.Nothing'} end; <<"write-string"/utf8>> -> case V3 of [E14 | E15] -> (fun (V23, V24) -> case V24 of [E16 | E17] -> (fun (V25, V26) -> case V26 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V23)), fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Integer'(V25)), fun (V28) -> {'Prelude.Types.Just', {'Protocol.IDE.WriteString', V27, V28}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E16, E17)); _ -> {'Prelude.Types.Nothing'} end end(E14, E15)); _ -> {'Prelude.Types.Nothing'} end; <<"set-prompt"/utf8>> -> case V3 of [E18 | E19] -> (fun (V29, V30) -> case V30 of [E20 | E21] -> (fun (V31, V32) -> case V32 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V29)), fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Integer'(V31)), fun (V34) -> {'Prelude.Types.Just', {'Protocol.IDE.SetPrompt', V33, V34}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E20, E21)); _ -> {'Prelude.Types.Nothing'} end end(E18, E19)); _ -> {'Prelude.Types.Nothing'} end; <<"warning"/utf8>> -> case V3 of [E22 | E23] -> (fun (V35, V36) -> case V35 of {'Protocol.SExp.SExpList', V37} -> case V37 of [E24 | E25] -> (fun (V38, V39) -> case V39 of [E26 | E27] -> (fun (V40, V41) -> case V40 of {'Protocol.SExp.SExpList', V42} -> case V42 of [E28 | E29] -> (fun (V43, V44) -> case V44 of [E30 | E31] -> (fun (V45, V46) -> case V46 of [] -> case V41 of [E32 | E33] -> (fun (V47, V48) -> case V47 of {'Protocol.SExp.SExpList', V49} -> case V49 of [E34 | E35] -> (fun (V50, V51) -> case V51 of [E36 | E37] -> (fun (V52, V53) -> case V53 of [] -> case V48 of [E38 | E39] -> (fun (V54, V55) -> case V55 of [] -> case V36 of [E40 | E41] -> (fun (V56, V57) -> case V57 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V38)), fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Int'(V43)), fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Int'(V45)), fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Int'(V50)), fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Int'(V52)), fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V54)), fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Integer'(V56)), fun (V64) -> {'Prelude.Types.Just', {'Protocol.IDE.Warning', {'Protocol.IDE.FileContext.MkFileContext', V58, {'Libraries.Text.Bounded.MkBounds', V59, V60, V61, V62}}, V63, [], V64}} end)) end)) end)) end)) end)) end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E40, E41)); _ -> {'Prelude.Types.Nothing'} end; [E42 | E43] -> (fun (V65, V66) -> case V66 of [] -> case V36 of [E44 | E45] -> (fun (V67, V68) -> case V68 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V38)), fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Int'(V43)), fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Int'(V45)), fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Int'(V50)), fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Int'(V52)), fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V54)), fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'((begin (V78 = fun (V75) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V76) -> ('dn--un--fromSExp_FromSExpable_(Span $a)'(fun (V77) -> ('Idris.Idris2.Protocol.IDE.Formatting':'dn--un--fromSExp_FromSExpable_Properties'(V77)) end, V76)) end, V75)) end), fun (V79) -> (V78(V79)) end end(V65)), fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Integer'(V67)), fun (V81) -> {'Prelude.Types.Just', {'Protocol.IDE.Warning', {'Protocol.IDE.FileContext.MkFileContext', V69, {'Libraries.Text.Bounded.MkBounds', V70, V71, V72, V73}}, V74, V80, V81}} end)) end)) end)) end)) end)) end)) end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E44, E45)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E42, E43)); _ -> {'Prelude.Types.Nothing'} end end(E38, E39)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E36, E37)); _ -> {'Prelude.Types.Nothing'} end end(E34, E35)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E32, E33)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E30, E31)); _ -> {'Prelude.Types.Nothing'} end end(E28, E29)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E26, E27)); _ -> {'Prelude.Types.Nothing'} end end(E24, E25)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E22, E23)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'dn--un--fromSExp_FromSExpable_(Span $a)'(V0, V1) -> case V1 of {'Protocol.SExp.SExpList', V2} -> case V2 of [E0 | E1] -> (fun (V3, V4) -> case V4 of [E2 | E3] -> (fun (V5, V6) -> case V6 of [E4 | E5] -> (fun (V7, V8) -> case V8 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Nat'(V3)), fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Nat'(V5)), fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'((begin (V11 = V0), fun (V12) -> (V11(V12)) end end(V7)), fun (V13) -> {'Prelude.Types.Just', {'Libraries.Data.Span.MkSpan', V9, V10, V13}} end)) end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'dn--un--__Impl_SExpable_Request'(V0) -> ('dn--un--toSExp_SExpable_Request'(V0)).
'dn--un--__Impl_SExpable_ReplyPayload'(V0) -> ('dn--un--toSExp_SExpable_ReplyPayload'(V0)).
'dn--un--__Impl_SExpable_Reply'(V0) -> ('dn--un--toSExp_SExpable_Reply'(V0)).
'dn--un--__Impl_SExpable_(Span $a)'(V0, V1) -> ('dn--un--toSExp_SExpable_(Span $a)'(V0, V1)).
'dn--un--__Impl_FromSExpable_Request'(V0) -> ('dn--un--fromSExp_FromSExpable_Request'(V0)).
'dn--un--__Impl_FromSExpable_ReplyPayload'(V0) -> ('dn--un--fromSExp_FromSExpable_ReplyPayload'(V0)).
'dn--un--__Impl_FromSExpable_Reply'(V0) -> ('dn--un--fromSExp_FromSExpable_Reply'(V0)).
'dn--un--__Impl_FromSExpable_(Span $a)'(V0, V1) -> ('dn--un--fromSExp_FromSExpable_(Span $a)'(V0, V1)).
'un--Highlighting'() -> {'Prelude.Basics.List', {'Libraries.Data.Span.Span', {'Protocol.IDE.Formatting.Properties'}}}.
