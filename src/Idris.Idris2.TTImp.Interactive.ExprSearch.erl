-module('Idris.Idris2.TTImp.Interactive.ExprSearch').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--searchType-8419'/13,
  'case--case block in case block in searchIfHole-2426'/17,
  'nested--14228-4139--in--un--visible'/16,
  'nested--13169-3216--in--un--usableName'/14,
  'nested--11948-2100--in--un--usableName'/7,
  'nested--16697-6370--in--un--toApp'/14,
  'nested--14603-4474--in--un--structDiffTm'/14,
  'nested--14603-4473--in--un--structDiff'/14,
  'nested--11289-1464--in--un--returnBatch'/7,
  'nested--17519-7086--in--un--matchable'/16,
  'nested--21072-10183--in--un--lookupHoleName'/11,
  'nested--11912-9436--in--un--lookupHoleName'/11,
  'nested--18086-7586--in--un--isSingleCon'/14,
  'nested--20762-9867--in--un--getLHS'/5,
  'nested--15563-5354--in--un--findPos'/20,
  'nested--15563-5353--in--un--findDirect'/20,
  'nested--11095-1273--in--un--count'/6,
  'nested--12688-2729--in--un--continue'/7,
  'nested--14603-4471--in--un--argDiff'/14,
  'nested--14603-4472--in--un--appsDiff'/16,
  'nested--17519-7087--in--un--applyLocal'/18,
  'un--usableLocal'/3,
  'un--trySearch'/4,
  'un--tryRecursive'/12,
  'un--tryIntermediateWith'/12,
  'un--tryIntermediateRec'/12,
  'un--tryIntermediate'/11,
  'un--searchType'/12,
  'un--searchSort'/5,
  'un--searchNames'/12,
  'un--searchName'/12,
  'un--searchN'/4,
  'un--searchLocalWith'/13,
  'un--searchLocal'/11,
  'un--searchIfHole'/10,
  'un--searchHole'/12,
  'un--search'/9,
  'un--one'/2,
  'un--noResult'/1,
  'un--nextResult'/3,
  'un--mkCandidates'/7,
  'un--makeHelper'/11,
  'un--initSearchOpts'/2,
  'un--getSuccessful'/12,
  'un--getLHSData'/3,
  'un--getAllEnv'/4,
  'un--firstSuccess'/3,
  'un--firstLinearOK'/7,
  'un--exprSearchOpts'/9,
  'un--exprSearchN'/9,
  'un--exprSearch\x{27}'/8,
  'un--exprSearch'/8,
  'un--explicit'/1,
  'un--combine'/6
]).
'case--searchType-8419'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Builtin.MkPair', V13, V14} -> case V13 of {'Core.TT.Ref', V15, V16, V17} -> case V16 of {'Core.TT.TyCon', V18, V19} -> begin (V25 = begin (V20 = V11), fun (V21) -> begin (V24 = (begin (V22 = V20), fun (V23) -> ('erlang':'get'(V22)) end end(V21))), {'Prelude.Types.Right', V24} end end end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V116 = case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V14)) =:= V19) of 'false' -> 0; _ -> 1 end of 1 -> begin (V30 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V11, V8, 0, V17))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V114 = begin (V48 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V35, V36)) end end, []}, fun (V37) -> V37 end, ((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V40) -> ('Idris.Idris2.Builtin':'un--snd'(V40)) end))(case V34 of {'Core.Context.MkSearchData', V38, V39} -> V39 end)))), V5))), begin (V52 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"interaction.search"/utf8>>, 10, fun () -> <<<<"Hints found for "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V50, V51)) end end}, V48))/binary>>/binary>>/binary>> end))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V113 = begin (V57 = [('un--searchLocal'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | [('un--searchNames'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3, V48)) | []]]), begin (V69 = case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> case V60 of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V68} -> [('un--tryRecursive'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3, V68)) | []] end end), begin (V90 = case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V70, V71, V72, V73, V74, V75, V76, V77, V78, V79} -> V78 end of 1 -> [('un--tryIntermediateRec'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3, case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V80, V81, V82, V83, V84, V85, V86, V87, V88, V89} -> V82 end)) | []]; 0 -> [] end), begin (V101 = case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V91, V92, V93, V94, V95, V96, V97, V98, V99, V100} -> V96 end of 1 -> []; 0 -> [('un--tryIntermediate'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []] end), begin (V112 = case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V102, V103, V104, V105, V106, V107, V108, V109, V110, V111} -> V106 end of 1 -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V69, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V101, V57)))); 0 -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V101, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V57, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V69, V90)))))) end), ('un--getSuccessful'(V0, V11, V10, V9, V8, V7, V6, 1, V4, V2, V3, V112)) end end end end end), V113 end(V53)) end end end end end), V114 end(V31)) end end end end; 0 -> fun (V115) -> ('un--noResult'(V115)) end end), V116 end(V26)) end end end end; _ -> begin (V117 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V11, <<"interaction.search"/utf8>>, 10, fun () -> <<"Searching locals only at"/utf8>> end, V2))), fun (V118) -> begin (V119 = (V117(V118))), case V119 of {'Prelude.Types.Left', V120} -> {'Prelude.Types.Left', V120}; {'Prelude.Types.Right', V121} -> (begin (V175 = begin (V132 = case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V122, V123, V124, V125, V126, V127, V128, V129, V130, V131} -> V127 end of 1 -> []; 0 -> [('un--tryIntermediate'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []] end), begin (V163 = case case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V133, V134, V135, V136, V137, V138, V139, V140, V141, V142} -> V137 end of 1 -> 1; 0 -> case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V143, V144, V145, V146, V147, V148, V149, V150, V151, V152} -> V151 end of 1 -> 0; 0 -> 1 end end of 1 -> []; 0 -> [('un--tryIntermediateRec'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3, case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V153, V154, V155, V156, V157, V158, V159, V160, V161, V162} -> V155 end)) | []] end), ('un--getSuccessful'(V0, V11, V10, V9, V8, V7, V6, 1, V4, V2, V3, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V132, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([('un--searchLocal'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V164, V165, V166, V167, V168, V169, V170, V171, V172, V173} -> case V166 of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V174} -> [('un--tryRecursive'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3, V174)) | []] end end, V163)))))))) end end), V175 end(V118)) end end end end end; _ -> begin (V176 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V11, <<"interaction.search"/utf8>>, 10, fun () -> <<"Searching locals only at"/utf8>> end, V2))), fun (V177) -> begin (V178 = (V176(V177))), case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> (begin (V234 = begin (V191 = case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V181, V182, V183, V184, V185, V186, V187, V188, V189, V190} -> V186 end of 1 -> []; 0 -> [('un--tryIntermediate'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []] end), begin (V222 = case case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V192, V193, V194, V195, V196, V197, V198, V199, V200, V201} -> V196 end of 1 -> 1; 0 -> case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V202, V203, V204, V205, V206, V207, V208, V209, V210, V211} -> V210 end of 1 -> 0; 0 -> 1 end end of 1 -> []; 0 -> [('un--tryIntermediateRec'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3, case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V212, V213, V214, V215, V216, V217, V218, V219, V220, V221} -> V214 end)) | []] end), ('un--getSuccessful'(V0, V11, V10, V9, V8, V7, V6, 1, V4, V2, V3, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V191, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([('un--searchLocal'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V223, V224, V225, V226, V227, V228, V229, V230, V231, V232} -> case V225 of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V233} -> [('un--tryRecursive'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3, V233)) | []] end end, V222)))))))) end end), V234 end(V177)) end end end end end; _ -> begin (V235 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V11, <<"interaction.search"/utf8>>, 10, fun () -> <<"Searching locals only at"/utf8>> end, V2))), fun (V236) -> begin (V237 = (V235(V236))), case V237 of {'Prelude.Types.Left', V238} -> {'Prelude.Types.Left', V238}; {'Prelude.Types.Right', V239} -> (begin (V293 = begin (V250 = case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V240, V241, V242, V243, V244, V245, V246, V247, V248, V249} -> V245 end of 1 -> []; 0 -> [('un--tryIntermediate'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []] end), begin (V281 = case case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V251, V252, V253, V254, V255, V256, V257, V258, V259, V260} -> V255 end of 1 -> 1; 0 -> case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V261, V262, V263, V264, V265, V266, V267, V268, V269, V270} -> V269 end of 1 -> 0; 0 -> 1 end end of 1 -> []; 0 -> [('un--tryIntermediateRec'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3, case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V271, V272, V273, V274, V275, V276, V277, V278, V279, V280} -> V273 end)) | []] end), ('un--getSuccessful'(V0, V11, V10, V9, V8, V7, V6, 1, V4, V2, V3, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V250, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([('un--searchLocal'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V282, V283, V284, V285, V286, V287, V288, V289, V290, V291} -> case V284 of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V292} -> [('un--tryRecursive'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, V3, V292)) | []] end end, V281)))))))) end end), V293 end(V236)) end end end end end.
'case--case block in case block in searchIfHole-2426'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Core.Context.Context.Hole', V17, V18} -> begin (V29 = ('un--search'(V9, V8, V7, V6, V12, case V5 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} -> {'TTImp.Interactive.ExprSearch.MkSearchOpts', V19, V20, V21, V10, 1, V24, V25, V26, V27, V28} end, V4, V3, {'Core.Name.Resolved', V11}))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V44 = ('Idris.Idris2.Core.Core.Search':'un--traverse'(fun (V34) -> case V34 of {'Builtin.MkPair', V35, V36} -> begin (V37 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V9, V0, V13, V2, ('Idris.Idris2.Core.UnifyState':'un--applyTo'(V0, V6, ('Idris.Idris2.Core.TT':'un--embed'(V35)), V2))))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V43 = fun (V42) -> {'Prelude.Types.Right', {'Builtin.MkPair', V41, V36}} end), V43 end(V38)) end end end end end end, V33))), V44 end(V30)) end end end end; _ -> begin (V50 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V9, V0, V13, V2, case V1 of {'Core.AutoSearch.MkArgInfo', V45, V46, V47, V48, V49} -> V48 end))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V56 = fun (V55) -> ('un--one'({'Builtin.MkPair', V54, []}, V55)) end), V56 end(V51)) end end end end end.
'nested--14228-4139--in--un--visible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V15, V13))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V45 = fun (V21) -> case V20 of {'Prelude.Types.Just', V22} -> case ('Idris.Idris2.Core.Context':'un--visibleInAny'(V14, V15, case V22 of {'Core.Context.Context.MkGlobalDef', V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V32 end)) of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V15, V22}}}; 0 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V45 end(V17)) end end end end.
'nested--13169-3216--in--un--usableName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Core.Name.UN', V14} -> 1; {'Core.Name.NS', V15, V16} -> ('nested--13169-3216--in--un--usableName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16)); {'Core.Name.Nested', V17, V18} -> ('nested--13169-3216--in--un--usableName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V18)); _ -> 0 end.
'nested--11948-2100--in--un--usableName'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.Name.UN', V7} -> 1; _ -> 0 end.
'nested--16697-6370--in--un--toApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Core.TT.Meta', V14, V15, V16, V17} -> ('Idris.Idris2.Core.TT':'un--apply'(V14, {'Core.TT.Ref', V14, {'Core.TT.Func'}, {'Core.Name.Resolved', V16}}, V17)); _ -> V13 end.
'nested--14603-4474--in--un--structDiffTm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Builtin.MkPair', V14, V15} -> ('nested--14603-4473--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V14)) end.
'nested--14603-4473--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V12)) of {'Builtin.MkPair', V14, V15} -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V13)) of {'Builtin.MkPair', V16, V17} -> ('nested--14603-4472--in--un--appsDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14, V16, V15, V17)) end end.
'nested--11289-1464--in--un--returnBatch'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> ('un--searchSort'(V4, V3, V2, V6, V0)); [E0 | E1] -> (fun (V7, V8) -> fun (V9) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.::', V7, ('nested--11289-1464--in--un--returnBatch'(V0, V1, V2, V3, V4, V8, V6))}} end end(E0, E1)) end.
'nested--17519-7086--in--un--matchable'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Core.Value.NBind', V16, V17, V18, V19} -> case V18 of {'Core.TT.Pi', V20, V21, V22, V23} -> begin (V24 = ((V19(V14))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V6, {'Core.TT.Erased', V16, {'Core.TT.Placeholder'}}))))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V29 = ('nested--17519-7086--in--un--matchable'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V28))), V29 end(V25)) end end end end; _ -> fun (V30) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NTCon', V31, V32, V33, V34, V35} -> fun (V36) -> {'Prelude.Types.Right', 1} end; _ -> fun (V37) -> {'Prelude.Types.Right', 0} end end.
'nested--21072-10183--in--un--lookupHoleName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V43 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExactI'(V9, case V10 of {'Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> V11 end))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V93 = case V47 of {'Prelude.Types.Just', V48} -> fun (V49) -> case V48 of {'Builtin.MkPair', V50, V51} -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V9, {'Builtin.MkPair', V50, V51}}}} end end; {'Prelude.Types.Nothing'} -> begin (V84 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V9, case V10 of {'Core.Context.MkDefs', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> V52 end))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V92 = fun (V89) -> case V88 of [E0 | E1] -> (fun (V90, V91) -> case V91 of [] -> {'Prelude.Types.Right', {'Prelude.Types.Just', V90}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end(E0, E1)); _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V92 end(V85)) end end end end end), V93 end(V44)) end end end end.
'nested--11912-9436--in--un--lookupHoleName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExactI'(V9, V10))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V29 = case V15 of {'Prelude.Types.Just', V16} -> fun (V17) -> case V16 of {'Builtin.MkPair', V18, V19} -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V9, {'Builtin.MkPair', V18, V19}}}} end end; {'Prelude.Types.Nothing'} -> begin (V20 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V9, V10))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V28 = fun (V25) -> case V24 of [E0 | E1] -> (fun (V26, V27) -> case V27 of [] -> {'Prelude.Types.Right', {'Prelude.Types.Just', V26}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end(E0, E1)); _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V28 end(V21)) end end end end end), V29 end(V12)) end end end end.
'nested--18086-7586--in--un--isSingleCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Core.Value.NBind', V14, V15, V16, V17} -> case V16 of {'Core.TT.Pi', V18, V19, V20, V21} -> begin (V22 = ((V17(V12))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V14, {'Core.TT.Placeholder'}}))))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V27 = ('nested--18086-7586--in--un--isSingleCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V26))), V27 end(V23)) end end end end; _ -> fun (V28) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NTCon', V29, V30, V31, V32, V33} -> begin (V66 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V30, case V12 of {'Core.Context.MkDefs', V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} -> V34 end))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V85 = case V70 of {'Prelude.Types.Just', V71} -> case V71 of {'Core.Context.Context.TCon', V72, V73, V74, V75, V76, V77, V78, V79} -> fun (V80) -> case V78 of [E0 | E1] -> (fun (V81, V82) -> case V82 of [] -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end(E0, E1)); _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V83) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V84) -> {'Prelude.Types.Right', 0} end end), V85 end(V67)) end end end end; _ -> fun (V86) -> {'Prelude.Types.Right', 0} end end.
'nested--20762-9867--in--un--getLHS'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Bind', V5, V6, V7, V8} -> case V7 of {'Core.TT.PVar', V9, V10, V11, V12} -> ('nested--20762-9867--in--un--getLHS'(V0, V1, V2, [V6 | V3], V8)); {'Core.TT.PLet', V13, V14, V15, V16} -> ('nested--20762-9867--in--un--getLHS'(V0, V1, V2, [V6 | V3], V8)); _ -> case ('Idris.Idris2.Core.TT':'un--getFn'(V4)) of {'Core.TT.Ref', V17, V18, V19} -> {'Prelude.Types.Just', {'TTImp.Interactive.ExprSearch.MkRecData', V3, V19, V4}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> case ('Idris.Idris2.Core.TT':'un--getFn'(V4)) of {'Core.TT.Ref', V20, V21, V22} -> {'Prelude.Types.Just', {'TTImp.Interactive.ExprSearch.MkRecData', V3, V22, V4}}; _ -> {'Prelude.Types.Nothing'} end end.
'nested--15563-5354--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V18 of {'Core.Value.NTCon', V20, V21, V22, V23, V24} -> case V24 of [E0 | E1] -> (fun (V25, V26) -> case V25 of {'Builtin.MkPair', V27, V28} -> case V26 of [E2 | E3] -> (fun (V29, V30) -> case V29 of {'Builtin.MkPair', V31, V32} -> case V30 of [] -> ('un--getSuccessful'(V0, V14, V13, V12, V11, V9, V8, 0, V6, V5, V4, [('nested--15563-5353--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)) | [begin (V42 = begin (V33 = ('Idris.Idris2.Core.Context':'un--fstName'(V14))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V41 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V38) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"No fst"/utf8>>}, V38)) end end, fun () -> fun (V39) -> fun (V40) -> {'Prelude.Types.Right', V39} end end end, V37))), V41 end(V34)) end end end end), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V102 = begin (V56 = begin (V47 = ('Idris.Idris2.Core.Context':'un--sndName'(V14))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V55 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"No snd"/utf8>>}, V52)) end end, fun () -> fun (V53) -> fun (V54) -> {'Prelude.Types.Right', V53} end end end, V51))), V55 end(V48)) end end end end), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V101 = begin (V61 = ('Idris.Idris2.Core.Context':'un--isPairType'(V14, V21))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V100 = case V65 of 1 -> begin (V67 = fun (V66) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V15, V66)) end), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V98 = begin (V72 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V14, V0, V71, V6, V28))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V97 = begin (V77 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V14, V0, V71, V6, V32))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V96 = ('un--getSuccessful'(V0, V14, V13, V12, V11, V9, V8, 0, V6, V5, V4, [begin (V82 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V14, V0, V15, V28))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V88 = ('nested--15563-5354--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V87) -> ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Core.TT.Ref', V11, {'Core.TT.Func'}, V46}, [{'Builtin.MkPair', V27, V76} | [{'Builtin.MkPair', V31, V81} | [{'Builtin.MkPair', V11, (V17(V87))} | []]]])) end, V86, V19))), V88 end(V83)) end end end end | [begin (V89 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V14, V0, V15, V32))), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V95 = ('nested--15563-5354--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V94) -> ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Core.TT.Ref', V11, {'Core.TT.Func'}, V60}, [{'Builtin.MkPair', V27, V76} | [{'Builtin.MkPair', V31, V81} | [{'Builtin.MkPair', V11, (V17(V94))} | []]]])) end, V93, V19))), V95 end(V90)) end end end end | []]]))), V96 end(V78)) end end end end), V97 end(V73)) end end end end), V98 end(V68)) end end end end; 0 -> fun (V99) -> ('un--noResult'(V99)) end end), V100 end(V62)) end end end end), V101 end(V57)) end end end end), V102 end(V43)) end end end end | []]])); _ -> ('nested--15563-5353--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)) end; _ -> ('nested--15563-5353--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)) end end(E2, E3)); _ -> ('nested--15563-5353--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)) end; _ -> ('nested--15563-5353--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)) end end(E0, E1)); _ -> ('nested--15563-5353--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)) end; _ -> ('nested--15563-5353--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)) end.
'nested--15563-5353--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> begin (V20 = ('Idris.Idris2.Core.AutoSearch':'un--mkArgs'(V0, V14, V12, V11, V9, V6, V18))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V96 = case V24 of {'Builtin.MkPair', V25, V26} -> case ('un--usableLocal'(V11, V6, V18)) of 1 -> ('Idris.Idris2.Core.UnifyState':'un--tryUnify'(V14, V12, begin (V28 = fun (V27) -> case case ('Idris.Idris2.Data.List':'un--isNil'(V25)) of 1 -> 0; 0 -> V10 end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Must apply function"/utf8>>}, V27)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V60 = begin (V49 = ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V33, V34, V35, V36, V37, V38, V39, V40)) end end end end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V41, V42, V43, V44, V45, V46, V47, V48)) end end end end end end end end}, V0, V14, V12, ('Idris.Idris2.Core.Unify':'un--inTerm'()), V11, V6))(V19))(V18))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V59 = case V53 of {'Core.Unify.MkUnifyResult', V54, V55, V56, V57} -> case V54 of [] -> ('un--mkCandidates'(V0, V14, V12, V11, (V17(V16)), [], [])); _ -> fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Can\x{27}t use directly"/utf8>>}, V58)) end end end), V59 end(V50)) end end end end), V60 end(V29)) end end end end, begin (V77 = ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V61, V62, V63, V64, V65, V66, V67, V68)) end end end end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V69, V70, V71, V72, V73, V74, V75, V76)) end end end end end end end end}, V0, V14, V12, ('Idris.Idris2.Core.Unify':'un--inTerm'()), V11, V6))(V19))(V26))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V94 = case V81 of {'Core.Unify.MkUnifyResult', V82, V83, V84, V85} -> case V82 of [] -> begin (V87 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V86) -> ('un--searchIfHole'(V0, V14, V13, V12, V11, V8, V7, V4, V6, V86)) end, V25, []))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V92 = ('un--mkCandidates'(V0, V14, V12, V11, (V17(V16)), [], V91))), V92 end(V88)) end end end end; _ -> fun (V93) -> ('un--noResult'(V93)) end end end), V94 end(V78)) end end end end)); 0 -> fun (V95) -> ('un--noResult'(V95)) end end end), V96 end(V21)) end end end end.
'nested--11095-1273--in--un--count'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Libraries.Data.Tap.Nil'} -> fun (V6) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], fun (V7) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.Nil'}} end}} end; _ -> case V4 of 0 -> fun (V8) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], fun (V9) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.Nil'}} end}} end; _ -> begin (V10 = (V4 - 1)), case V10 of 0 -> case V5 of {'Libraries.Data.Tap.::', V11, V12} -> fun (V13) -> {'Prelude.Types.Right', {'Builtin.MkPair', [V11 | []], V12}} end; _ -> case V5 of {'Libraries.Data.Tap.::', V14, V15} -> begin (V22 = begin (V16 = V15), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V21 = ('nested--11095-1273--in--un--count'(V0, V1, V2, V3, V10, V20))), V21 end(V17)) end end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V30 = fun (V27) -> case V26 of {'Builtin.MkPair', V28, V29} -> {'Prelude.Types.Right', {'Builtin.MkPair', [V14 | V28], V29}} end end), V30 end(V23)) end end end end end end; _ -> case V5 of {'Libraries.Data.Tap.::', V31, V32} -> begin (V39 = begin (V33 = V32), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V38 = ('nested--11095-1273--in--un--count'(V0, V1, V2, V3, V10, V37))), V38 end(V34)) end end end end), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V47 = fun (V44) -> case V43 of {'Builtin.MkPair', V45, V46} -> {'Prelude.Types.Right', {'Builtin.MkPair', [V31 | V45], V46}} end end), V47 end(V40)) end end end end end end end end end.
'nested--12688-2729--in--un--continue'(V0, V1, V2, V3, V4, V5, V6) -> begin (V12 = begin (V7 = V2), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'put'(V9, V4)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V28 = begin (V22 = begin (V17 = V3), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'put'(V19, V5)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V27 = ('un--firstSuccess'(V3, V2, V6))), V27 end(V23)) end end end end), V28 end(V13)) end end end end.
'nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Core.TT.Local', V14, V15, V16} -> 0; {'Core.TT.Ref', V17, V18, V19} -> case V13 of {'Core.TT.Ref', V20, V21, V22} -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V19, V22)); _ -> case V13 of {'Core.TT.Bind', V23, V24, V25, V26} -> 0; _ -> case V12 of {'Core.TT.App', V27, V28, V29} -> case V13 of {'Core.TT.App', V30, V31, V32} -> case ('nested--14603-4473--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V28, V31)) of 1 -> 1; 0 -> ('nested--14603-4473--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V29, V32)) end; _ -> case V13 of {'Core.TT.Erased', V33, V34} -> 0; _ -> case V12 of {'Core.TT.TType', V35, V36} -> case V13 of {'Core.TT.TType', V37, V38} -> 0; _ -> case V13 of {'Core.TT.As', V39, V40, V41, V42} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V42)); _ -> 1 end end; {'Core.TT.As', V43, V44, V45, V46} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V46, V13)); _ -> case V13 of {'Core.TT.As', V47, V48, V49, V50} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V50)); _ -> 1 end end end end; {'Core.TT.PrimVal', V51, V52} -> case V13 of {'Core.TT.PrimVal', V53, V54} -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V52, V54)); _ -> case V13 of {'Core.TT.Erased', V55, V56} -> 0; _ -> case V12 of {'Core.TT.TType', V57, V58} -> case V13 of {'Core.TT.TType', V59, V60} -> 0; _ -> case V13 of {'Core.TT.As', V61, V62, V63, V64} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V64)); _ -> 1 end end; {'Core.TT.As', V65, V66, V67, V68} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V68, V13)); _ -> case V13 of {'Core.TT.As', V69, V70, V71, V72} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V72)); _ -> 1 end end end end; {'Core.TT.Erased', V73, V74} -> 0; _ -> case V13 of {'Core.TT.Erased', V75, V76} -> 0; _ -> case V12 of {'Core.TT.TType', V77, V78} -> case V13 of {'Core.TT.TType', V79, V80} -> 0; _ -> case V13 of {'Core.TT.As', V81, V82, V83, V84} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V84)); _ -> 1 end end; {'Core.TT.As', V85, V86, V87, V88} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V88, V13)); _ -> case V13 of {'Core.TT.As', V89, V90, V91, V92} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V92)); _ -> 1 end end end end end end; {'Core.TT.Bind', V93, V94, V95, V96} -> 0; _ -> case V13 of {'Core.TT.Bind', V97, V98, V99, V100} -> 0; _ -> case V12 of {'Core.TT.App', V101, V102, V103} -> case V13 of {'Core.TT.App', V104, V105, V106} -> case ('nested--14603-4473--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V102, V105)) of 1 -> 1; 0 -> ('nested--14603-4473--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V103, V106)) end; _ -> case V13 of {'Core.TT.Erased', V107, V108} -> 0; _ -> case V12 of {'Core.TT.TType', V109, V110} -> case V13 of {'Core.TT.TType', V111, V112} -> 0; _ -> case V13 of {'Core.TT.As', V113, V114, V115, V116} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V116)); _ -> 1 end end; {'Core.TT.As', V117, V118, V119, V120} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V120, V13)); _ -> case V13 of {'Core.TT.As', V121, V122, V123, V124} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V124)); _ -> 1 end end end end; {'Core.TT.PrimVal', V125, V126} -> case V13 of {'Core.TT.PrimVal', V127, V128} -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V126, V128)); _ -> case V13 of {'Core.TT.Erased', V129, V130} -> 0; _ -> case V12 of {'Core.TT.TType', V131, V132} -> case V13 of {'Core.TT.TType', V133, V134} -> 0; _ -> case V13 of {'Core.TT.As', V135, V136, V137, V138} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V138)); _ -> 1 end end; {'Core.TT.As', V139, V140, V141, V142} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V142, V13)); _ -> case V13 of {'Core.TT.As', V143, V144, V145, V146} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V146)); _ -> 1 end end end end; {'Core.TT.Erased', V147, V148} -> 0; _ -> case V13 of {'Core.TT.Erased', V149, V150} -> 0; _ -> case V12 of {'Core.TT.TType', V151, V152} -> case V13 of {'Core.TT.TType', V153, V154} -> 0; _ -> case V13 of {'Core.TT.As', V155, V156, V157, V158} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V158)); _ -> 1 end end; {'Core.TT.As', V159, V160, V161, V162} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V162, V13)); _ -> case V13 of {'Core.TT.As', V163, V164, V165, V166} -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V166)); _ -> 1 end end end end end end.
'nested--14603-4472--in--un--appsDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V12 of {'Core.TT.Ref', V16, V17, V18} -> case V17 of {'Core.TT.DataCon', V19, V20} -> case V13 of {'Core.TT.Ref', V21, V22, V23} -> case V22 of {'Core.TT.DataCon', V24, V25} -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V18, V23)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V26, V27)) end end, 0}, fun (V28) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V29) -> fun (V30) -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V29, V30)) end end, V28)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V14, V15)))) end; _ -> case V13 of {'Core.TT.Ref', V31, V32, V33} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V33)) of 1 -> case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V14)) =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V15))) of 'false' -> 0; _ -> 1 end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V34, V35)) end end, 0}, fun (V36) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V37) -> fun (V38) -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V37, V38)) end end, V36)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V14, V15)))); 0 -> 0 end; 0 -> 0 end; _ -> case V17 of {'Core.TT.DataCon', V39, V40} -> case V13 of {'Core.TT.Local', V41, V42, V43} -> 1; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end end end; _ -> case V13 of {'Core.TT.Ref', V44, V45, V46} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V46)) of 1 -> case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V14)) =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V15))) of 'false' -> 0; _ -> 1 end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V47, V48)) end end, 0}, fun (V49) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V50) -> fun (V51) -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V50, V51)) end end, V49)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V14, V15)))); 0 -> 0 end; 0 -> 0 end; _ -> case V17 of {'Core.TT.DataCon', V52, V53} -> case V13 of {'Core.TT.Local', V54, V55, V56} -> 1; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end end end; {'Core.TT.TyCon', V57, V58} -> case V13 of {'Core.TT.Ref', V59, V60, V61} -> case V60 of {'Core.TT.TyCon', V62, V63} -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V18, V61)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V64, V65)) end end, 0}, fun (V66) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V67) -> fun (V68) -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V67, V68)) end end, V66)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V14, V15)))) end; _ -> case V13 of {'Core.TT.Ref', V69, V70, V71} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V71)) of 1 -> case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V14)) =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V15))) of 'false' -> 0; _ -> 1 end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V72, V73)) end end, 0}, fun (V74) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V75) -> fun (V76) -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V75, V76)) end end, V74)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V14, V15)))); 0 -> 0 end; 0 -> 0 end; _ -> case V17 of {'Core.TT.DataCon', V77, V78} -> case V13 of {'Core.TT.Local', V79, V80, V81} -> 1; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end end end; _ -> case V13 of {'Core.TT.Ref', V82, V83, V84} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V84)) of 1 -> case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V14)) =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V15))) of 'false' -> 0; _ -> 1 end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V85, V86)) end end, 0}, fun (V87) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V88) -> fun (V89) -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V88, V89)) end end, V87)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V14, V15)))); 0 -> 0 end; 0 -> 0 end; _ -> case V17 of {'Core.TT.DataCon', V90, V91} -> case V13 of {'Core.TT.Local', V92, V93, V94} -> 1; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end end end; _ -> case V13 of {'Core.TT.Ref', V95, V96, V97} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V97)) of 1 -> case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V14)) =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V15))) of 'false' -> 0; _ -> 1 end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V98, V99)) end end, 0}, fun (V100) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V101) -> fun (V102) -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V101, V102)) end end, V100)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V14, V15)))); 0 -> 0 end; 0 -> 0 end; _ -> case V17 of {'Core.TT.DataCon', V103, V104} -> case V13 of {'Core.TT.Local', V105, V106, V107} -> 1; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end end end; {'Core.TT.Local', V108, V109, V110} -> case V13 of {'Core.TT.Ref', V111, V112, V113} -> case V112 of {'Core.TT.DataCon', V114, V115} -> 1; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end; _ -> case V14 of [] -> case V15 of [] -> ('nested--14603-4471--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)); _ -> 0 end; _ -> 0 end end.
'nested--17519-7087--in--un--applyLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V16 of {'Core.Value.NBind', V18, V19, V20, V21} -> case V20 of {'Core.TT.Pi', V22, V23, V24, V25} -> begin (V32 = begin (V26 = ((V21(V14))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V6, {'Core.TT.Erased', V10, {'Core.TT.Placeholder'}}))))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V31 = ('nested--17519-7086--in--un--matchable'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V30))), V31 end(V27)) end end end end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V77 = case V36 of 1 -> begin (V37 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V13, V11, <<"cty"/utf8>>))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V75 = begin (V42 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V13, V11, V10))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V74 = begin (V51 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V13, V11, V22, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V47) -> fun (V48) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V47, V48)) end end, 0, fun (V49) -> fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V49, V50)) end end, 1})), V6, V41, {'Core.TT.TType', V10, V46}))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V73 = begin (V66 = case V8 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} -> {'TTImp.Interactive.ExprSearch.MkSearchOpts', V56, V57, V58, V59, V60, 1, V62, V63, V64, V65} end), begin (V67 = ('un--searchLocalWith'(V0, V13, V12, V11, V10, 1, V9, V66, V7, V6, [{'Builtin.MkPair', V1, V2} | []], V55, V4))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V72 = ('un--makeHelper'(V0, V13, V12, V11, V10, V9, V8, V6, V55, V17, V71))), V72 end(V68)) end end end end end), V73 end(V52)) end end end end), V74 end(V43)) end end end end), V75 end(V38)) end end end end; 0 -> fun (V76) -> ('un--noResult'(V76)) end end), V77 end(V33)) end end end end; _ -> fun (V78) -> ('un--noResult'(V78)) end end; _ -> fun (V79) -> ('un--noResult'(V79)) end end.
'un--usableLocal'(V0, V1, V2) -> case V2 of {'Core.Value.NApp', V3, V4, V5} -> case V4 of {'Core.Value.NMeta', V6, V7, V8} -> 0; _ -> 1 end; _ -> 1 end.
'un--trySearch'(V0, V1, V2, V3) -> ('un--firstSuccess'(V0, V1, [V2 | [V3 | []]])).
'un--tryRecursive'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V17 = begin (V12 = V1), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V114 = begin (V57 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(case V11 of {'TTImp.Interactive.ExprSearch.MkRecData', V22, V23, V24} -> V23 end, case V21 of {'Core.Context.MkDefs', V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56} -> V25 end))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V113 = case V61 of {'Prelude.Types.Nothing'} -> fun (V62) -> ('un--noResult'(V62)) end; {'Prelude.Types.Just', V63} -> begin (V83 = begin (V64 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V21, V8, V9))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V82 = ('un--searchName'(V0, V1, V2, V3, V4, V5, case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V69, V70, V71, V72, V73, V74, V75, V76, V77, V78} -> {'TTImp.Interactive.ExprSearch.MkSearchOpts', V69, V70, {'Prelude.Types.Nothing'}, V72, V73, V74, V75, V76, V77, V78} end, V7, V8, V68, V10, {'Builtin.MkPair', case V11 of {'TTImp.Interactive.ExprSearch.MkRecData', V79, V80, V81} -> V80 end, V63}))), V82 end(V65)) end end end end), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V112 = begin (V102 = ('Idris.Idris2.Core.Core.Search':'un--traverse'(fun (V88) -> case V88 of {'Builtin.MkPair', V89, V90} -> begin (V95 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V91, V92)) end end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V93, V94)) end end}, V89))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V101 = fun (V100) -> {'Prelude.Types.Right', {'Builtin.MkPair', V99, V90}} end), V101 end(V96)) end end end end end end, V87))), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V111 = ('Idris.Idris2.Core.Core.Search':'un--filter'(fun (V107) -> ('nested--14603-4474--in--un--structDiffTm'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V11 of {'TTImp.Interactive.ExprSearch.MkRecData', V108, V109, V110} -> V110 end, V107)) end, V106))), V111 end(V103)) end end end end), V112 end(V84)) end end end end end), V113 end(V58)) end end end end), V114 end(V18)) end end end end.
'un--tryIntermediateWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of [] -> fun (V12) -> ('un--noResult'(V12)) end; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Builtin.MkPair', V15, V16} -> begin (V22 = begin (V17 = V1), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'get'(V19)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V33 = begin (V27 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V26, V8, V16))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V32 = ('un--getSuccessful'(V0, V1, V2, V3, V4, V5, V6, 0, V8, V10, V11, [('nested--17519-7087--in--un--applyLocal'(V0, V15, V16, V14, V11, V10, V8, V7, V6, V5, V4, V3, V2, V1, V26, V15, V31, V10)) | [('un--tryIntermediateWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14, V10, V11)) | []]]))), V32 end(V28)) end end end end), V33 end(V23)) end end end end end end(E0, E1)) end.
'un--tryIntermediateRec'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Prelude.Types.Nothing'} -> fun (V12) -> ('un--noResult'(V12)) end; {'Prelude.Types.Just', V13} -> begin (V19 = begin (V14 = V1), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V182 = begin (V59 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(case V13 of {'TTImp.Interactive.ExprSearch.MkRecData', V24, V25, V26} -> V25 end, case V23 of {'Core.Context.MkDefs', V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58} -> V27 end))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V181 = case V63 of {'Prelude.Types.Just', V64} -> begin (V71 = begin (V65 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, [], V23, {'Core.Env.Nil'}, V64))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V70 = ('nested--18086-7586--in--un--isSingleCon'(V0, V13, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V23, V69))), V70 end(V66)) end end end end), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V179 = case V75 of 1 -> begin (V76 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"cty"/utf8>>))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V177 = begin (V81 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V4))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V176 = begin (V90 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V86) -> fun (V87) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V86, V87)) end end, 0, fun (V88) -> fun (V89) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V88, V89)) end end, 1})), V8, V80, {'Core.TT.TType', V4, V85}))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V175 = begin (V105 = case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V95, V96, V97, V98, V99, V100, V101, V102, V103, V104} -> {'TTImp.Interactive.ExprSearch.MkSearchOpts', V95, V96, {'Prelude.Types.Nothing'}, V98, V99, 1, V101, V102, V103, V104} end), begin (V112 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, (begin (V107 = fun (V106) -> V106 end), fun (V108) -> (V107(V108)) end end(<<"interaction.search"/utf8>>)), 10, fun () -> (begin (V110 = fun (V109) -> V109 end), fun (V111) -> (V110(V111)) end end(<<"Trying recursive search for"/utf8>>)) end, V9))), fun (V113) -> begin (V114 = (V112(V113))), case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> (begin (V174 = begin (V134 = begin (V125 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V117, V118)) end end, fun (V119) -> fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V119, V120, V121)) end end end}, case V13 of {'TTImp.Interactive.ExprSearch.MkRecData', V122, V123, V124} -> V123 end))), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V133 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V131 = fun (V130) -> V130 end), fun (V132) -> (V131(V132)) end end(<<"interaction.search"/utf8>>)), 10, fun () -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V129)) end))), V133 end(V126)) end end end end), fun (V135) -> begin (V136 = (V134(V135))), case V136 of {'Prelude.Types.Left', V137} -> {'Prelude.Types.Left', V137}; {'Prelude.Types.Right', V138} -> (begin (V173 = begin (V161 = begin (V146 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V139) -> fun (V140) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V139, V140)) end end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V141, V142)) end end}, case V13 of {'TTImp.Interactive.ExprSearch.MkRecData', V143, V144, V145} -> V145 end))), fun (V147) -> begin (V148 = (V146(V147))), case V148 of {'Prelude.Types.Left', V149} -> {'Prelude.Types.Left', V149}; {'Prelude.Types.Right', V150} -> (begin (V160 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(case V13 of {'TTImp.Interactive.ExprSearch.MkRecData', V151, V152, V153} -> V151 end, V1, (begin (V155 = fun (V154) -> V154 end), fun (V156) -> (V155(V156)) end end(<<"interaction.search"/utf8>>)), 10, fun () -> (begin (V158 = fun (V157) -> V157 end), fun (V159) -> (V158(V159)) end end(<<"LHS"/utf8>>)) end, V150))), V160 end(V147)) end end end end), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V172 = begin (V166 = ('un--tryRecursive'(V0, V1, V2, V3, V4, V5, V105, V7, V8, V94, V10, V13))), fun (V167) -> begin (V168 = (V166(V167))), case V168 of {'Prelude.Types.Left', V169} -> {'Prelude.Types.Left', V169}; {'Prelude.Types.Right', V170} -> (begin (V171 = ('un--makeHelper'(V0, V1, V2, V3, V4, V5, V105, V8, V94, V9, V170))), V171 end(V167)) end end end end), V172 end(V162)) end end end end), V173 end(V135)) end end end end), V174 end(V113)) end end end end end), V175 end(V91)) end end end end), V176 end(V82)) end end end end), V177 end(V77)) end end end end; _ -> fun (V178) -> ('un--noResult'(V178)) end end), V179 end(V72)) end end end end; {'Prelude.Types.Nothing'} -> fun (V180) -> ('un--noResult'(V180)) end end), V181 end(V60)) end end end end), V182 end(V20)) end end end end end.
'un--tryIntermediate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('un--tryIntermediateWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--getAllEnv'(V0, V4, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V8)))), V9, V10)).
'un--searchType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of 0 -> case V11 of {'Core.TT.Bind', V12, V13, V14, V15} -> case V14 of {'Core.TT.Pi', V16, V17, V18, V19} -> ('un--getSuccessful'(V0, V1, V2, V3, V4, V5, V6, 0, V8, V19, V9, [('un--searchLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, {'Core.TT.Bind', V12, V13, V14, V15}, V9)) | [begin (V25 = begin (V20 = V1), fun (V21) -> begin (V24 = (begin (V22 = V20), fun (V23) -> ('erlang':'get'(V22)) end end(V21))), {'Prelude.Types.Right', V24} end end end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V74 = begin (V30 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V29, V8, V19))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V73 = begin (V35 = ('Idris.Idris2.TTImp.Utils':'un--getArgName'(V0, V1, V29, V13, [], V0, V34))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V72 = begin (V40 = {'Core.Name.UN', {'Core.Name.Basic', V39}}), begin (V41 = {'Core.Env.::', V14, V8}), begin (V42 = ('Idris.Idris2.Core.TT':'un--renameTop'(V40, V15))), begin (V49 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V44 = fun (V43) -> V43 end), fun (V45) -> (V44(V45)) end end(<<"interaction.search"/utf8>>)), 10, fun () -> <<(begin (V47 = fun (V46) -> V46 end), fun (V48) -> (V47(V48)) end end(<<"Introduced lambda, search for "/utf8>>))/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([V40 | V0], V42))/binary>> end))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V71 = begin (V54 = ('un--searchType'([V40 | V0], V1, V2, V3, V4, V5, V6, V7, V41, V9, 0, V42))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V70 = fun (V59) -> {'Prelude.Types.Right', ((begin (V67 = fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Core.Search':'un--functor'(V63, V64, V65, V66)) end end end end), fun (V68) -> fun (V69) -> ((((V67('erased'))('erased'))(V68))(V69)) end end end(fun (V60) -> case V60 of {'Builtin.MkPair', V61, V62} -> {'Builtin.MkPair', {'Core.TT.Bind', V12, V40, {'Core.TT.Lam', V16, V17, V18, V19}, V61}, V62} end end))(V58))} end), V70 end(V55)) end end end end), V71 end(V50)) end end end end end end end), V72 end(V36)) end end end end), V73 end(V31)) end end end end), V74 end(V26)) end end end end | []]])); _ -> ('case--searchType-8419'(V0, V10, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V11)))) end; _ -> ('case--searchType-8419'(V0, V10, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V11)))) end; _ -> begin (V75 = (V10 - 1)), case V11 of {'Core.TT.Bind', V76, V77, V78, V79} -> case V78 of {'Core.TT.Pi', V80, V81, V82, V83} -> begin (V84 = {'Core.Env.::', V78, V8}), begin (V91 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V86 = fun (V85) -> V85 end), fun (V87) -> (V86(V87)) end end(<<"interaction.search"/utf8>>)), 10, fun () -> <<(begin (V89 = fun (V88) -> V88 end), fun (V90) -> (V89(V90)) end end(<<"Introduced lambda, search for "/utf8>>))/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([V77 | V0], V79))/binary>> end))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V113 = begin (V96 = ('un--searchType'([V77 | V0], V1, V2, V3, V4, V5, V6, V7, V84, V9, V75, V79))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V112 = fun (V101) -> {'Prelude.Types.Right', ((begin (V109 = fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Core.Search':'un--functor'(V105, V106, V107, V108)) end end end end), fun (V110) -> fun (V111) -> ((((V109('erased'))('erased'))(V110))(V111)) end end end(fun (V102) -> case V102 of {'Builtin.MkPair', V103, V104} -> {'Builtin.MkPair', {'Core.TT.Bind', V76, V77, {'Core.TT.Lam', V80, V81, V82, V83}, V103}, V104} end end))(V100))} end), V112 end(V97)) end end end end), V113 end(V92)) end end end end end; _ -> ('case--searchType-8419'(V0, V10, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V11)))) end; _ -> ('case--searchType-8419'(V0, V10, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V11)))) end end end.
'un--searchSort'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--searchN'(V0, V1, V2, V3))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V13 = case V9 of {'Builtin.MkPair', V10, V11} -> case ('Idris.Idris2.Data.List':'un--isNil'(V10)) of 1 -> fun (V12) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.Nil'}} end; 0 -> ('nested--11289-1464--in--un--returnBatch'(V4, V3, V2, V1, V0, ('Idris.Idris2.Data.List':'un--sortBy'(V4, V10)), V11)) end end), V13 end(V6)) end end end end.
'un--searchNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> fun (V12) -> ('un--noResult'(V12)) end; [E0 | E1] -> (fun (V13, V14) -> begin (V20 = begin (V15 = V1), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V167 = begin (V25 = ('Idris.Idris2.Core.Context':'un--checkTimer'(V1))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V166 = begin (V127 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V30) -> ('nested--14228-4139--in--un--visible'(V0, V13, V14, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V24 of {'Core.Context.MkDefs', V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62} -> V31 end, [case V24 of {'Core.Context.MkDefs', V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94} -> V65 end | case V24 of {'Core.Context.MkDefs', V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126} -> V98 end], V30)) end, [V13 | V14], []))), fun (V128) -> begin (V129 = (V127(V128))), case V129 of {'Prelude.Types.Left', V130} -> {'Prelude.Types.Left', V130}; {'Prelude.Types.Right', V131} -> (begin (V165 = begin (V133 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V132) -> V132 end, V131))), begin (V134 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V24, V8, V9))), fun (V135) -> begin (V136 = (V134(V135))), case V136 of {'Prelude.Types.Left', V137} -> {'Prelude.Types.Left', V137}; {'Prelude.Types.Right', V138} -> (begin (V164 = begin (V150 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"interaction.search"/utf8>>, 10, fun () -> <<<<"Searching "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V139) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V139)) end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V140, V141)) end end}, ((begin (V147 = fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V145, V146)) end end end end), fun (V148) -> fun (V149) -> ((((V147('erased'))('erased'))(V148))(V149)) end end end(fun (V142) -> ('Idris.Idris2.Builtin':'un--fst'(V142)) end))(V133))))/binary, <<" for "/utf8>>/binary>>/binary>> end, V9))), fun (V151) -> begin (V152 = (V150(V151))), case V152 of {'Prelude.Types.Left', V153} -> {'Prelude.Types.Left', V153}; {'Prelude.Types.Right', V154} -> (begin (V163 = ('un--getSuccessful'(V0, V1, V2, V3, V4, V5, V6, 0, V8, V9, V10, ((begin (V160 = fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V158, V159)) end end end end), fun (V161) -> fun (V162) -> ((((V160('erased'))('erased'))(V161))(V162)) end end end(fun (V155) -> ('un--searchName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V138, V10, V155)) end))(V133))))), V163 end(V151)) end end end end), V164 end(V135)) end end end end end), V165 end(V128)) end end end end), V166 end(V26)) end end end end), V167 end(V21)) end end end end end(E0, E1)) end.
'un--searchName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> begin (V19 = begin (V14 = V1), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V275 = begin (V24 = ('Idris.Idris2.Core.Context':'un--checkTimer'(V1))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V274 = begin (V29 = ('Idris.Idris2.Core.Context':'un--getNS'(V1))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V273 = begin (V34 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V1))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V272 = case ('Idris.Idris2.Core.Context':'un--visibleInAny'([V33 | V38], case V13 of {'Core.Context.Context.MkGlobalDef', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60} -> V40 end, case V13 of {'Core.Context.Context.MkGlobalDef', V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82} -> V70 end)) of 1 -> begin (V105 = case V13 of {'Core.Context.Context.MkGlobalDef', V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104} -> V85 end), case ('nested--13169-3216--in--un--usableName'(V0, V12, V13, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V13 of {'Core.Context.Context.MkGlobalDef', V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127} -> V107 end)) of 1 -> begin (V161 = case V13 of {'Core.Context.Context.MkGlobalDef', V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149} -> case V145 of {'Core.Context.Context.DCon', V150, V151, V152} -> {'Core.TT.DataCon', V150, V151}; {'Core.Context.Context.TCon', V153, V154, V155, V156, V157, V158, V159, V160} -> {'Core.TT.TyCon', V153, V154}; _ -> {'Core.TT.Func'} end end), begin (V184 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.search"/utf8>>, 5, fun () -> <<<<"Trying "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V13 of {'Core.Context.Context.MkGlobalDef', V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183} -> V163 end))/binary>> end))), fun (V185) -> begin (V186 = (V184(V185))), case V186 of {'Prelude.Types.Left', V187} -> {'Prelude.Types.Left', V187}; {'Prelude.Types.Right', V188} -> (begin (V269 = begin (V189 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V23, V8, ('Idris.Idris2.Core.TT':'un--embed'(V105))))), fun (V190) -> begin (V191 = (V189(V190))), case V191 of {'Prelude.Types.Left', V192} -> {'Prelude.Types.Left', V192}; {'Prelude.Types.Right', V193} -> (begin (V268 = begin (V194 = ('Idris.Idris2.Core.AutoSearch':'un--mkArgs'(V0, V1, V3, V4, V5, V8, V193))), fun (V195) -> begin (V196 = (V194(V195))), case V196 of {'Prelude.Types.Left', V197} -> {'Prelude.Types.Left', V197}; {'Prelude.Types.Right', V198} -> (begin (V267 = case V198 of {'Builtin.MkPair', V199, V200} -> begin (V207 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, (begin (V202 = fun (V201) -> V201 end), fun (V203) -> (V202(V203)) end end(<<"interaction.search"/utf8>>)), 5, fun () -> (begin (V205 = fun (V204) -> V204 end), fun (V206) -> (V205(V206)) end end(<<"Target"/utf8>>)) end, V8, V9))), fun (V208) -> begin (V209 = (V207(V208))), case V209 of {'Prelude.Types.Left', V210} -> {'Prelude.Types.Left', V210}; {'Prelude.Types.Right', V211} -> (begin (V266 = begin (V218 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, (begin (V213 = fun (V212) -> V212 end), fun (V214) -> (V213(V214)) end end(<<"interaction.search"/utf8>>)), 10, fun () -> (begin (V216 = fun (V215) -> V215 end), fun (V217) -> (V216(V217)) end end(<<"App type"/utf8>>)) end, V8, V200))), fun (V219) -> begin (V220 = (V218(V219))), case V220 of {'Prelude.Types.Left', V221} -> {'Prelude.Types.Left', V221}; {'Prelude.Types.Right', V222} -> (begin (V265 = begin (V239 = ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V223, V224, V225, V226, V227, V228, V229, V230)) end end end end end end end end, fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V231, V232, V233, V234, V235, V236, V237, V238)) end end end end end end end end}, V0, V1, V3, ('Idris.Idris2.Core.Unify':'un--inSearch'()), V4, V8))(V9))(V200))), fun (V240) -> begin (V241 = (V239(V240))), case V241 of {'Prelude.Types.Left', V242} -> {'Prelude.Types.Left', V242}; {'Prelude.Types.Right', V243} -> (begin (V264 = case V243 of {'Core.Unify.MkUnifyResult', V244, V245, V246, V247} -> case V244 of [] -> begin (V250 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V248) -> ('un--searchIfHole'(V0, V1, V2, V3, V4, V6, V7, V10, V8, V248)) end, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V249) -> ('un--explicit'(V249)) end, V199))))), fun (V251) -> begin (V252 = (V250(V251))), case V252 of {'Prelude.Types.Left', V253} -> {'Prelude.Types.Left', V253}; {'Prelude.Types.Right', V254} -> (begin (V262 = begin (V256 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V255) -> ('un--searchIfHole'(V0, V1, V2, V3, V4, V6, V7, V10, V8, V255)) end, V199, []))), fun (V257) -> begin (V258 = (V256(V257))), case V258 of {'Prelude.Types.Left', V259} -> {'Prelude.Types.Left', V259}; {'Prelude.Types.Right', V260} -> (begin (V261 = ('un--mkCandidates'(V0, V1, V3, V4, {'Core.TT.Ref', V4, V161, V12}, [], V260))), V261 end(V257)) end end end end), V262 end(V251)) end end end end; _ -> fun (V263) -> ('un--noResult'(V263)) end end end), V264 end(V240)) end end end end), V265 end(V219)) end end end end), V266 end(V208)) end end end end end), V267 end(V195)) end end end end), V268 end(V190)) end end end end), V269 end(V185)) end end end end end; _ -> fun (V270) -> ('un--noResult'(V270)) end end end; _ -> fun (V271) -> ('un--noResult'(V271)) end end), V272 end(V35)) end end end end), V273 end(V30)) end end end end), V274 end(V25)) end end end end), V275 end(V20)) end end end end end.
'un--searchN'(V0, V1, V2, V3) -> begin (V36 = begin (V4 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V35 = ('Idris.Idris2.Core.Context':'un--startTimer'(V0, case V8 of {'Core.Options.MkSessionOpts', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} -> V17 end, <<"expression search"/utf8>>))), V35 end(V5)) end end end end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V68 = ('Idris.Idris2.Core.UnifyState':'un--tryUnify'(V0, V1, begin (V41 = V3), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V59 = begin (V46 = ('nested--11095-1273--in--un--count'(V3, V2, V1, V0, V2, V45))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V58 = begin (V51 = ('Idris.Idris2.Core.Context':'un--clearTimer'(V0))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V57 = fun (V56) -> {'Prelude.Types.Right', V50} end), V57 end(V52)) end end end end), V58 end(V47)) end end end end), V59 end(V42)) end end end end, begin (V60 = ('Idris.Idris2.Core.Context':'un--clearTimer'(V0))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V67 = fun (V65) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], fun (V66) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.Nil'}} end}} end), V67 end(V61)) end end end end))), V68 end(V37)) end end end end.
'un--searchLocalWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V10 of [] -> fun (V13) -> ('un--noResult'(V13)) end; [E0 | E1] -> (fun (V14, V15) -> case V14 of {'Builtin.MkPair', V16, V17} -> begin (V23 = begin (V18 = V1), fun (V19) -> begin (V22 = (begin (V20 = V18), fun (V21) -> ('erlang':'get'(V20)) end end(V19))), {'Prelude.Types.Right', V22} end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V47 = begin (V28 = ('Idris.Idris2.Core.Context':'un--checkTimer'(V1))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V46 = begin (V33 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V27, V9, V11))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V45 = begin (V38 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V27, V9, V17))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V44 = ('un--getSuccessful'(V0, V1, V2, V3, V4, V6, V7, 0, V9, V11, V12, [('nested--15563-5354--in--un--findPos'(V0, V16, V17, V15, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V27, V16, fun (V43) -> V43 end, V42, V37)) | [('un--searchLocalWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V15, V11, V12)) | []]]))), V44 end(V39)) end end end end), V45 end(V34)) end end end end), V46 end(V29)) end end end end), V47 end(V24)) end end end end end end(E0, E1)) end.
'un--searchLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('un--searchLocalWith'(V0, V1, V2, V3, V4, 0, V5, V6, V7, V8, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--getAllEnv'(V0, V4, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V8)))), V9, V10)).
'un--searchIfHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case case V5 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19} -> V13 end of 0 -> fun (V20) -> ('un--noResult'(V20)) end; _ -> begin (V31 = (case V5 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} -> V24 end - 1)), begin (V37 = case V9 of {'Core.AutoSearch.MkArgInfo', V32, V33, V34, V35, V36} -> V32 end), begin (V43 = case V9 of {'Core.AutoSearch.MkArgInfo', V38, V39, V40, V41, V42} -> V39 end), begin (V49 = begin (V44 = V1), fun (V45) -> begin (V48 = (begin (V46 = V44), fun (V47) -> ('erlang':'get'(V46)) end end(V45))), {'Prelude.Types.Right', V48} end end end), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V117 = begin (V86 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', V37}, case V53 of {'Core.Context.MkDefs', V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85} -> V54 end))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V116 = case V90 of {'Prelude.Types.Just', V91} -> begin (V92 = {'Prelude.Types.Just', V91}), ('case--case block in case block in searchIfHole-2426'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, V31, V37, V43, V53, V91, V92, case V91 of {'Core.Context.Context.MkGlobalDef', V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114} -> V110 end)) end; {'Prelude.Types.Nothing'} -> fun (V115) -> ('un--noResult'(V115)) end end), V116 end(V87)) end end end end), V117 end(V50)) end end end end end end end end.
'un--searchHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V0, [], V10, {'Core.Env.Nil'}, case V11 of {'Core.Context.Context.MkGlobalDef', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V14 end))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V51 = begin (V39 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"interaction.search"/utf8>>, 10, fun () -> <<"Normalised type"/utf8>> end, V38))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V50 = begin (V44 = ('Idris.Idris2.Core.Context':'un--checkTimer'(V0))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V49 = ('un--searchType'([], V0, V1, V2, V3, V4, V5, V6, {'Core.Env.Nil'}, V9, V8, V38))), V49 end(V45)) end end end end), V50 end(V40)) end end end end), V51 end(V35)) end end end end.
'un--search'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V14 = begin (V9 = V0), fun (V10) -> begin (V13 = (begin (V11 = V9), fun (V12) -> ('erlang':'get'(V11)) end end(V10))), {'Prelude.Types.Right', V13} end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V166 = begin (V51 = ('nested--11912-9436--in--un--lookupHoleName'(V8, V7, V6, V5, V4, V3, V2, V1, V0, V8, case V18 of {'Core.Context.MkDefs', V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> V19 end))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V165 = case V55 of {'Prelude.Types.Just', V56} -> case V56 of {'Builtin.MkPair', V57, V58} -> case V58 of {'Builtin.MkPair', V59, V60} -> case V60 of {'Core.Context.Context.MkGlobalDef', V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82} -> case V78 of {'Core.Context.Context.Hole', V83, V84} -> ('un--searchHole'(V0, V1, V2, V3, V4, V5, V6, V57, V83, V7, V18, V60)); {'Core.Context.Context.BySearch', V85, V86, V87} -> begin (V110 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V0, [], V18, {'Core.Env.Nil'}, case V60 of {'Core.Context.Context.MkGlobalDef', V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109} -> V90 end))), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V115 = ('un--searchHole'(V0, V1, V2, V3, V4, V5, V6, V57, V114, V7, V18, V60))), V115 end(V111)) end end end end; _ -> begin (V116 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.search"/utf8>>, 10, fun () -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))/binary, <<" not a hole"/utf8>>/binary>> end))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V146 = fun (V121) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Not a hole: "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V57))/binary, <<<<" in "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V122) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V122)) end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V123, V124)) end end}, ((begin (V143 = fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V141, V142)) end end end end), fun (V144) -> fun (V145) -> ((((V143('erased'))('erased'))(V144))(V145)) end end end(fun (V135) -> case V135 of {'TTImp.Interactive.ExprSearch.MkRecData', V136, V137, V138} -> V137 end end))(case V5 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V125, V126, V127, V128, V129, V130, V131, V132, V133, V134} -> V127 end))))/binary>>/binary>>/binary>>}, V121)) end), V146 end(V117)) end end end end end end; _ -> begin (V147 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.search"/utf8>>, 10, fun () -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))/binary, <<" not found"/utf8>>/binary>> end))), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V152 = ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V3, V8))), V152 end(V148)) end end end end end; _ -> begin (V153 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.search"/utf8>>, 10, fun () -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))/binary, <<" not found"/utf8>>/binary>> end))), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V158 = ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V3, V8))), V158 end(V154)) end end end end end; _ -> begin (V159 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.search"/utf8>>, 10, fun () -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))/binary, <<" not found"/utf8>>/binary>> end))), fun (V160) -> begin (V161 = (V159(V160))), case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> (begin (V164 = ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V3, V8))), V164 end(V160)) end end end end end), V165 end(V52)) end end end end), V166 end(V15)) end end end end.
'un--one'(V0, V1) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.::', V0, fun (V2) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.Nil'}} end}}.
'un--noResult'(V0) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.Nil'}}.
'un--nextResult'(V0, V1, V2) -> ('Idris.Idris2.Core.UnifyState':'un--tryUnify'(V0, V1, begin (V3 = V2), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V11 = fun (V8) -> case V7 of {'Libraries.Data.Tap.Nil'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}}; {'Libraries.Data.Tap.::', V9, V10} -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V9, V10}}} end end), V11 end(V4)) end end end end, fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end)).
'un--mkCandidates'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> ('un--one'({'Builtin.MkPair', V4, V5}, V7)) end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Libraries.Data.Tap.Nil'} -> fun (V10) -> ('un--noResult'(V10)) end; {'Libraries.Data.Tap.::', V11, V12} -> case V11 of {'Builtin.MkPair', V13, V14} -> ('un--firstSuccess'(V1, V2, [('un--mkCandidates'(V0, V1, V2, V3, {'Core.TT.App', V3, V4, V13}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V14)), V9)) | [begin (V15 = V12), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V20 = ('un--mkCandidates'(V0, V1, V2, V3, V4, V5, [V19 | V9]))), V20 end(V16)) end end end end | []]])) end end end(E0, E1)) end.
'un--makeHelper'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Libraries.Data.Tap.Nil'} -> fun (V11) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.Nil'}} end; {'Libraries.Data.Tap.::', V12, V13} -> case V12 of {'Builtin.MkPair', V14, V15} -> case case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25} -> V19 end of 0 -> fun (V26) -> ('un--noResult'(V26)) end; _ -> begin (V37 = (case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} -> V30 end - 1)), begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"interaction.search"/utf8>>, 10, fun () -> <<"Local app"/utf8>> end, V14))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V215 = case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} -> case V52 of {'Prelude.Types.Just', V53} -> begin (V54 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"cval"/utf8>>))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V213 = begin (V59 = ('Idris.Idris2.Core.UnifyState':'un--genCaseName'(V1, V3, <<"search"/utf8>>))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V212 = begin (V64 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V63))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V211 = begin (V69 = {'Core.Env.::', {'Core.TT.Lam', V4, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V8}, V7}), begin (V70 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'([V58 | V0], V1, V3, V4, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V69, V68, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V9))))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V210 = begin (V75 = ('nested--16697-6370--in--un--toApp'(V0, V14, V15, V13, V9, V8, V7, V6, V5, V4, V3, V2, V1, V74))), begin (V77 = ('Idris.Idris2.Core.Context':'un--updateDef'(V1, V68, fun (V76) -> {'Prelude.Types.Just', {'Core.Context.Context.None'}} end))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V209 = begin (V82 = {'Core.TT.App', V4, {'Core.TT.Bind', V4, V58, {'Core.TT.Lam', V4, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V8}, V75}, V14}), begin (V83 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"interaction.search"/utf8>>, 10, fun () -> <<"Binding def"/utf8>> end, V7, V82))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V208 = begin (V93 = begin (V88 = V1), fun (V89) -> begin (V92 = (begin (V90 = V88), fun (V91) -> ('erlang':'get'(V90)) end end(V89))), {'Prelude.Types.Right', V92} end end end), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V207 = begin (V130 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V68, case V97 of {'Core.Context.MkDefs', V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129} -> V98 end))), fun (V131) -> begin (V132 = (V130(V131))), case V132 of {'Prelude.Types.Left', V133} -> {'Prelude.Types.Left', V133}; {'Prelude.Types.Right', V134} -> (begin (V206 = case V134 of {'Prelude.Types.Just', V135} -> begin (V142 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, (begin (V137 = fun (V136) -> V136 end), fun (V138) -> (V137(V138)) end end(<<"interaction.search"/utf8>>)), 10, fun () -> (begin (V140 = fun (V139) -> V139 end), fun (V141) -> (V140(V141)) end end(<<"Type of scope name"/utf8>>)) end, {'Core.Env.Nil'}, V135))), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V201 = begin (V157 = ('un--searchN'(V1, V3, 1, ((((V53(case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V147, V148, V149, V150, V151, V152, V153, V154, V155, V156} -> {'TTImp.Interactive.ExprSearch.MkSearchOpts', V147, 0, V149, V37, V151, 1, 0, 1, V155, V156} end))(V68))(0))(V135))))), fun (V158) -> begin (V159 = (V157(V158))), case V159 of {'Prelude.Types.Left', V160} -> {'Prelude.Types.Left', V160}; {'Prelude.Types.Right', V161} -> (begin (V200 = case V161 of {'Builtin.MkPair', V162, V163} -> case V162 of [E0 | E1] -> (fun (V164, V165) -> begin (V166 = {'TTImp.TTImp.IDef', V4, V68, ('Idris.Idris2.Builtin':'un--snd'(V164))}), begin (V173 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V168 = fun (V167) -> V167 end), fun (V169) -> (V168(V169)) end end(<<"interaction.search"/utf8>>)), 10, fun () -> <<<<"Def: "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpDecl\x{27} $nm)'({'Prelude.Show.MkShow', fun (V170) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V170)) end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V171, V172)) end end}, V166))/binary>> end))), fun (V174) -> begin (V175 = (V173(V174))), case V175 of {'Prelude.Types.Left', V176} -> {'Prelude.Types.Left', V176}; {'Prelude.Types.Right', V177} -> (begin (V185 = fun (V178) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.::', {'Builtin.MkPair', V82, [V166 | V15]}, begin (V179 = V13), fun (V180) -> begin (V181 = (V179(V180))), case V181 of {'Prelude.Types.Left', V182} -> {'Prelude.Types.Left', V182}; {'Prelude.Types.Right', V183} -> (begin (V184 = ('un--makeHelper'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V183))), V184 end(V180)) end end end end}} end), V185 end(V174)) end end end end end end(E0, E1)); _ -> begin (V186 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.search"/utf8>>, 10, fun () -> <<"No results"/utf8>> end))), fun (V187) -> begin (V188 = (V186(V187))), case V188 of {'Prelude.Types.Left', V189} -> {'Prelude.Types.Left', V189}; {'Prelude.Types.Right', V190} -> (begin (V192 = fun (V191) -> ('un--noResult'(V191)) end), V192 end(V187)) end end end end end; _ -> begin (V193 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.search"/utf8>>, 10, fun () -> <<"No results"/utf8>> end))), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V199 = fun (V198) -> ('un--noResult'(V198)) end), V199 end(V194)) end end end end end), V200 end(V158)) end end end end), V201 end(V143)) end end end end; {'Prelude.Types.Nothing'} -> fun (V202) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V204 = fun (V203) -> V203 end), fun (V205) -> (V204(V205)) end end(<<"Can\x{27}t happen"/utf8>>))}, V202)) end end), V206 end(V131)) end end end end), V207 end(V94)) end end end end), V208 end(V84)) end end end end end), V209 end(V78)) end end end end end), V210 end(V71)) end end end end end), V211 end(V65)) end end end end), V212 end(V60)) end end end end), V213 end(V55)) end end end end; {'Prelude.Types.Nothing'} -> fun (V214) -> ('un--noResult'(V214)) end end end), V215 end(V39)) end end end end end end end end.
'un--initSearchOpts'(V0, V1) -> {'TTImp.Interactive.ExprSearch.MkSearchOpts', 0, V0, {'Prelude.Types.Nothing'}, V1, 0, 0, 1, 0, 0, {'Prelude.Types.Nothing'}}.
'un--getSuccessful'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V12 = ('un--firstSuccess'(V1, V3, V11))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V78 = case V16 of {'Libraries.Data.Tap.Nil'} -> case case V7 of 1 -> case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> V17 end; 0 -> 0 end of 1 -> begin (V32 = begin (V27 = V1), fun (V28) -> begin (V31 = (begin (V29 = V27), fun (V30) -> ('erlang':'get'(V29)) end end(V28))), {'Prelude.Types.Right', V31} end end end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V75 = begin (V51 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<"arg"/utf8>> end, fun () -> fun (V37) -> <<('Idris.Idris2.Core.Name':'un--nameRoot'(case V37 of {'TTImp.Interactive.ExprSearch.MkRecData', V38, V39, V40} -> V39 end))/binary, <<"_rhs"/utf8>>/binary>> end end, case V6 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> V43 end))), begin (V60 = ('Idris.Idris2.TTImp.Utils':'un--uniqueBasicName'(V36, ((begin (V57 = fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V55, V56)) end end end end), fun (V58) -> fun (V59) -> ((((V57('erased'))('erased'))(V58))(V59)) end end end(fun (V52) -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V52)) end))(V0)), V51))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V74 = begin (V65 = ('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V3, V4, V5, V8, {'Core.Name.UN', {'Core.Name.Basic', V64}}, V9, {'Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V8)), ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0))}, 0))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V73 = fun (V70) -> case V69 of {'Builtin.MkPair', V71, V72} -> ('un--one'({'Builtin.MkPair', V72, []}, V70)) end end), V73 end(V66)) end end end end), V74 end(V61)) end end end end end), V75 end(V33)) end end end end; 0 -> fun (V76) -> ('un--noResult'(V76)) end end; _ -> fun (V77) -> {'Prelude.Types.Right', V16} end end), V78 end(V13)) end end end end.
'un--getLHSData'(V0, V1, V2) -> case V2 of {'Prelude.Types.Nothing'} -> fun (V3) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V4} -> begin (V5 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V1, {'Core.Env.Nil'}, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V21 = begin (V14 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V12, V13)) end end}, V9))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', ('nested--20762-9867--in--un--getLHS'(V4, V1, V0, [], V18))} end), V20 end(V15)) end end end end), V21 end(V6)) end end end end end.
'un--getAllEnv'(V0, V1, V2, V3) -> case V0 of [] -> case V3 of {'Core.Env.Nil'} -> [] end; [E0 | E1] -> (fun (V4, V5) -> case V3 of {'Core.Env.::', V6, V7} -> begin (V8 = ('un--getAllEnv'(V5, V1, ('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V2)), V7))), begin (V9 = ('Idris.Idris2.Core.TT':'un--weakenVar'(V2, 0))), begin (V10 = ('nested--11948-2100--in--un--usableName'(V4, V5, V7, V6, V2, V1, V4))), case V10 of 1 -> [{'Builtin.MkPair', {'Core.TT.Local', V1, {'Prelude.Types.Nothing'}, V9}, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V2)), ('Idris.Idris2.Core.TT':'un--binderType'(V6))))} | V8]; 0 -> V8 end end end end end end(E0, E1)) end.
'un--firstSuccess'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> ('un--noResult'(V3)) end; [E0 | E1] -> (fun (V4, V5) -> begin (V11 = begin (V6 = V1), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V39 = begin (V21 = begin (V16 = V0), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'get'(V18)) end end(V17))), {'Prelude.Types.Right', V20} end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V38 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V26 = V4), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V34 = case V30 of {'Libraries.Data.Tap.::', V31, V32} -> fun (V33) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.::', V31, ('nested--12688-2729--in--un--continue'(V4, V5, V1, V0, V15, V25, [V32 | V5]))}} end; {'Libraries.Data.Tap.Nil'} -> ('nested--12688-2729--in--un--continue'(V4, V5, V1, V0, V15, V25, V5)) end), V34 end(V27)) end end end end, fun (V35) -> case V35 of {'Core.Core.Timeout', V36} -> fun (V37) -> ('un--noResult'(V37)) end; _ -> ('nested--12688-2729--in--un--continue'(V4, V5, V1, V0, V15, V25, V5)) end end))), V38 end(V22)) end end end end), V39 end(V12)) end end end end end(E0, E1)) end.
'un--firstLinearOK'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Libraries.Data.Tap.Nil'} -> fun (V7) -> ('un--noResult'(V7)) end; {'Libraries.Data.Tap.::', V8, V9} -> case V8 of {'Builtin.MkPair', V10, V11} -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V0, V2, begin (V14 = case ('Idris.Idris2.Data.List':'un--isNil'(V11)) of 1 -> fun (V12) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V13) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'([], V0, V1, V2, V3, V4, [1 | []], [], {'Core.Env.Nil'}, V13)) end, V11)) end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V92 = begin (V42 = begin (V23 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'([], V0, V2, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V19, V20)) end end, 0, fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V21, V22)) end end, 1})), 0, {'Core.Env.Nil'}, V10))), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V24) -> {'Builtin.MkUnit'} end))))(V23)) end), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V91 = begin (V52 = begin (V47 = V0), fun (V48) -> begin (V51 = (begin (V49 = V47), fun (V50) -> ('erlang':'get'(V49)) end end(V48))), {'Prelude.Types.Right', V51} end end end), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V90 = begin (V57 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V56, {'Core.Env.Nil'}, V10))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V89 = begin (V72 = begin (V66 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V64, V65)) end end}, V61))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V71 = ('Idris.Idris2.TTImp.Unelab':'un--unelab'([], V0, {'Core.Env.Nil'}, V70))), V71 end(V67)) end end end end), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V88 = begin (V77 = V9), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V87 = fun (V82) -> {'Prelude.Types.Right', {'Libraries.Data.Tap.::', ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V83) -> case V83 of {'Core.TT.MkKindedName', V84, V85, V86} -> V86 end end, V76)), ('un--firstLinearOK'(V0, V1, V2, V3, V4, V5, V81))}} end), V87 end(V78)) end end end end), V88 end(V73)) end end end end), V89 end(V58)) end end end end), V90 end(V53)) end end end end), V91 end(V43)) end end end end), V92 end(V15)) end end end end, fun (V93) -> begin (V94 = V9), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V99 = ('un--firstLinearOK'(V0, V1, V2, V3, V4, V5, V98))), V99 end(V95)) end end end end end)) end end.
'un--exprSearchOpts'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V14 = begin (V9 = V0), fun (V10) -> begin (V13 = (begin (V11 = V9), fun (V12) -> ('erlang':'get'(V11)) end end(V10))), {'Prelude.Types.Right', V13} end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V294 = begin (V19 = ('nested--21072-10183--in--un--lookupHoleName'(V8, V7, V6, V5, V4, V3, V2, V1, V0, V7, V18))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V293 = case V23 of {'Prelude.Types.Just', V24} -> case V24 of {'Builtin.MkPair', V25, V26} -> case V26 of {'Builtin.MkPair', V27, V28} -> case V28 of {'Core.Context.Context.MkGlobalDef', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> case V46 of {'Core.Context.Context.Hole', V51, V52} -> begin (V59 = begin (V53 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, {'Core.Name.Resolved', V27}))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V58 = ('Idris.Idris2.Core.Metadata':'un--findHoleLHS'(V1, V57))), V58 end(V54)) end end end end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V255 = begin (V76 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.search"/utf8>>, 10, fun () -> <<<<"LHS hole data "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V65, V66)) end end}, {'Prelude.Show.MkShow', fun (V67) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V68) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'([], V69, V70)) end end}, V67)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V73) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V73)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'([], V74, V75)) end end}, V71, V72)) end end}}, {'Builtin.MkPair', V25, V63}))/binary>> end))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V254 = begin (V109 = case case V5 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V81, V82, V83, V84, V85, V86, V87, V88, V89, V90} -> V82 end of 1 -> begin (V91 = ('un--getLHSData'(V0, V18, V63))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V107 = fun (V96) -> {'Prelude.Types.Right', case V5 of {'TTImp.Interactive.ExprSearch.MkSearchOpts', V97, V98, V99, V100, V101, V102, V103, V104, V105, V106} -> {'TTImp.Interactive.ExprSearch.MkSearchOpts', V97, V98, V95, V100, V101, V102, V103, V104, V105, V106} end} end), V107 end(V92)) end end end end; 0 -> fun (V108) -> {'Prelude.Types.Right', V5} end end), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V253 = begin (V197 = begin (V175 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V114, V115, [])) end end, V8, fun (V116) -> begin (V122 = begin (V117 = V0), fun (V118) -> begin (V121 = (begin (V119 = V117), fun (V120) -> ('erlang':'get'(V119)) end end(V118))), {'Prelude.Types.Right', V121} end end end), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V174 = begin (V159 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V116, case V126 of {'Core.Context.MkDefs', V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158} -> V127 end))), fun (V160) -> begin (V161 = (V159(V160))), case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> (begin (V173 = fun (V164) -> {'Prelude.Types.Right', ((begin (V170 = fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V168, V169)) end end end end), fun (V171) -> fun (V172) -> ((((V170('erased'))('erased'))(V171))(V172)) end end end(fun (V165) -> {'Core.Name.Resolved', ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V165))))} end))(V163))} end), V173 end(V160)) end end end end), V174 end(V123)) end end end end end))), ((begin (V194 = fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V191, V192, V193)) end end end end end), fun (V195) -> fun (V196) -> ((((V194('erased'))('erased'))(V195))(V196)) end end end((begin (V186 = fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> case V183 of {'Prelude.Types.Left', V184} -> {'Prelude.Types.Left', V184}; {'Prelude.Types.Right', V185} -> {'Prelude.Types.Right', (V182(V185))} end end end end end), fun (V187) -> fun (V188) -> ((((V186('erased'))('erased'))(V187))(V188)) end end end(fun (V176) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V177) -> fun (V178) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V177, V178)) end end, []}, fun (V179) -> V179 end, V176)) end))))(V175)) end), fun (V198) -> begin (V199 = (V197(V198))), case V199 of {'Prelude.Types.Left', V200} -> {'Prelude.Types.Left', V200}; {'Prelude.Types.Right', V201} -> (begin (V252 = begin (V246 = ('un--search'(V0, V1, V2, V6, case V28 of {'Core.Context.Context.MkGlobalDef', V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223} -> V209 end, V113, V201, case V28 of {'Core.Context.Context.MkGlobalDef', V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245} -> V226 end, V25))), fun (V247) -> begin (V248 = (V246(V247))), case V248 of {'Prelude.Types.Left', V249} -> {'Prelude.Types.Left', V249}; {'Prelude.Types.Right', V250} -> (begin (V251 = ('un--firstLinearOK'(V0, V1, V2, V3, V4, V6, V250))), V251 end(V247)) end end end end), V252 end(V198)) end end end end), V253 end(V110)) end end end end), V254 end(V77)) end end end end), V255 end(V60)) end end end end; {'Core.Context.Context.PMDef', V256, V257, V258, V259, V260} -> case V257 of [] -> case V258 of {'Core.Case.CaseTree.STerm', V261, V262} -> begin (V279 = begin (V263 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V18, {'Core.Env.Nil'}, V262))), fun (V264) -> begin (V265 = (V263(V264))), case V265 of {'Prelude.Types.Left', V266} -> {'Prelude.Types.Left', V266}; {'Prelude.Types.Right', V267} -> (begin (V278 = begin (V272 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V268) -> fun (V269) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V268, V269)) end end, fun (V270) -> fun (V271) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V270, V271)) end end}, V267))), fun (V273) -> begin (V274 = (V272(V273))), case V274 of {'Prelude.Types.Left', V275} -> {'Prelude.Types.Left', V275}; {'Prelude.Types.Right', V276} -> (begin (V277 = ('Idris.Idris2.TTImp.Unelab':'un--unelab'([], V0, {'Core.Env.Nil'}, V276))), V277 end(V273)) end end end end), V278 end(V264)) end end end end), fun (V280) -> begin (V281 = (V279(V280))), case V281 of {'Prelude.Types.Left', V282} -> {'Prelude.Types.Left', V282}; {'Prelude.Types.Right', V283} -> (begin (V289 = fun (V284) -> ('un--one'(('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V285) -> case V285 of {'Core.TT.MkKindedName', V286, V287, V288} -> V288 end end, V283)), V284)) end), V289 end(V280)) end end end end; _ -> fun (V290) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V6, <<"Name is already defined"/utf8>>}, V290)) end end; _ -> fun (V291) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V6, <<"Name is already defined"/utf8>>}, V291)) end end; _ -> fun (V292) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V6, <<"Name is already defined"/utf8>>}, V292)) end end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V6, V7)) end), V293 end(V20)) end end end end), V294 end(V15)) end end end end.
'un--exprSearchN'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('un--searchN'(V0, V2, V6, ('un--exprSearch'(V0, V1, V2, V3, V4, V5, V7, V8))))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V17 = fun (V14) -> case V13 of {'Builtin.MkPair', V15, V16} -> {'Prelude.Types.Right', V15} end end), V17 end(V10)) end end end end.
'un--exprSearch\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('un--exprSearchOpts'(V0, V1, V2, V3, V4, ('un--initSearchOpts'(1, 5)), V5, V6, V7)).
'un--exprSearch'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V40 = begin (V8 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V39 = ('Idris.Idris2.Core.Context':'un--startTimer'(V0, case V12 of {'Core.Options.MkSessionOpts', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} -> V21 end, <<"expression search"/utf8>>))), V39 end(V9)) end end end end), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V58 = begin (V45 = ('un--exprSearch\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V57 = begin (V50 = ('Idris.Idris2.Core.Context':'un--clearTimer'(V0))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V56 = fun (V55) -> {'Prelude.Types.Right', V49} end), V56 end(V51)) end end end end), V57 end(V46)) end end end end), V58 end(V41)) end end end end.
'un--explicit'(V0) -> case V0 of {'Core.AutoSearch.MkArgInfo', V1, V2, V3, V4, V5} -> case V3 of {'Core.TT.Explicit'} -> 1; _ -> 0 end end.
'un--combine'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Libraries.Data.Tap.Nil'} -> {'Prelude.Types.Right', {'Libraries.Data.Tap.Nil'}}; {'Libraries.Data.Tap.::', V6, V7} -> case V4 of {'Libraries.Data.Tap.Nil'} -> {'Prelude.Types.Right', {'Libraries.Data.Tap.Nil'}}; {'Libraries.Data.Tap.::', V8, V9} -> {'Prelude.Types.Right', {'Libraries.Data.Tap.::', ((V2(V6))(V8)), ('un--trySearch'(V0, V1, begin (V10 = V9), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V23 = begin (V16 = fun (V15) -> ('un--one'(V6, V15)) end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> ('un--combine'(V0, V1, V2, V20, V14, V21)) end), V22 end(V17)) end end end end), V23 end(V11)) end end end end, ('un--trySearch'(V0, V1, begin (V24 = V7), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V37 = begin (V30 = fun (V29) -> ('un--one'(V8, V29)) end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V36 = fun (V35) -> ('un--combine'(V0, V1, V2, V28, V34, V35)) end), V36 end(V31)) end end end end), V37 end(V25)) end end end end, begin (V38 = V7), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V50 = begin (V43 = V9), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V49 = fun (V48) -> ('un--combine'(V0, V1, V2, V42, V47, V48)) end), V49 end(V44)) end end end end), V50 end(V39)) end end end end))))}} end end.
