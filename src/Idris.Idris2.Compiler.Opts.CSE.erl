-module('Idris.Idris2.Compiler.Opts.CSE').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in analyze-7289'/6,
  'nested--11926-9592--in--un--toDef'/2,
  'dn--un--show_Show_Count'/1,
  'un--toReplaceMap'/1,
  'un--store'/3,
  'un--replaceRef'/5,
  'un--replaceExp'/4,
  'un--replaceDef'/3,
  'un--replaceConstAlt'/4,
  'un--replaceConAlt'/4,
  'un--newToplevelDefs'/1,
  'un--dropVar'/2,
  'un--dropEnv'/2,
  'un--dropConstAlt'/2,
  'un--dropConAlt'/2,
  'un--cse'/3,
  'un--analyzeVect'/2,
  'un--analyzeSubExp'/2,
  'un--analyzeName'/3,
  'un--analyzeMaybe'/2,
  'un--analyzeList'/2,
  'un--analyzeDef'/2,
  'un--analyzeConstAlt'/2,
  'un--analyzeConAlt'/2,
  'un--analyze'/2,
  'un--UsageMap'/0,
  'un--ReplaceMap'/0
]).
'case--case block in analyze-7289'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Prelude.Types.Just', V6} -> begin (V7 = ('un--store'(V0, V2, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V14 = fun (V12) -> case V11 of {'Prelude.Types.Just', V13} -> {'Prelude.Types.Right', {'Builtin.MkPair', V2, {'Core.CompileExpr.CRef', {'Core.FC.EmptyFC'}, V13}}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Builtin.MkPair', V2, V3}} end end), V14 end(V8)) end end end end; {'Prelude.Types.Nothing'} -> fun (V15) -> {'Prelude.Types.Right', {'Builtin.MkPair', V2, V3}} end end.
'nested--11926-9592--in--un--toDef'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Compiler.Opts.CSE.Many'} -> {'Prelude.Types.Just', {'Builtin.MkPair', V2, {'Builtin.MkPair', {'Core.FC.EmptyFC'}, {'Core.CompileExpr.MkFun', [], V4}}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'dn--un--show_Show_Count'(V0) -> case V0 of {'Compiler.Opts.CSE.Once'} -> <<"Once"/utf8>>; {'Compiler.Opts.CSE.Many'} -> <<"Many"/utf8>>; {'Compiler.Opts.CSE.C', V1} -> <<<<"C "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V1))/binary>> end.
'un--toReplaceMap'(V0) -> ('Idris.Idris2.Libraries.Data.SortedMap':'un--fromList'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V3, V4)) end end}, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V17, V18)) end end}, ((begin (V30 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V28, V29)) end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V19) -> case V19 of {'Builtin.MkPair', V20, V21} -> case V20 of {'Builtin.MkPair', V22, V23} -> case V21 of {'Builtin.MkPair', V24, V25} -> {'Builtin.MkPair', V24, {'Builtin.MkPair', V23, {'Compiler.Opts.CSE.C', V25}}} end end end end))(('Idris.Idris2.Libraries.Data.SortedMap':'un--toList'(V0)))))).
'un--store'(V0, V1, V2) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V1, 5)) of 1 -> fun (V3) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; 0 -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V43 = case V13 of {'Compiler.Opts.CSE.MkSt', V14, V15} -> begin (V21 = fun (V16) -> case ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'({'Builtin.MkPair', V1, V2}, V14)) of {'Prelude.Types.Just', V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> {'Prelude.Types.Right', {'Builtin.MkPair', V18, {'Builtin.MkPair', (V19 + 1), V15}}} end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.Name.MN', <<"csegen"/utf8>>, V15}, {'Builtin.MkPair', 1, begin (V20 = (V15 + 1)), case ((V20 band 9223372036854775808) =/= 0) of 'true' -> (V20 bor -9223372036854775808); _ -> (V20 band 9223372036854775807) end end}}} end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V42 = case V25 of {'Builtin.MkPair', V26, V27} -> case V27 of {'Builtin.MkPair', V28, V29} -> begin (V35 = begin (V30 = V0), fun (V31) -> begin (V34 = (begin (V32 = V30), fun (V33) -> ('erlang':'put'(V32, {'Compiler.Opts.CSE.MkSt', ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'({'Builtin.MkPair', V1, V2}, {'Builtin.MkPair', V26, V28}, V14)), V29})) end end(V31))), {'Prelude.Types.Right', V34} end end end), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V41 = fun (V40) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V26}} end), V41 end(V36)) end end end end end end), V42 end(V22)) end end end end end), V43 end(V10)) end end end end end.
'un--replaceRef'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"compiler.cse"/utf8>>, 10, fun () -> <<<<"Trying to replace "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary, <<": "/utf8>>/binary>>/binary>> end))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V162 = begin (V34 = begin (V15 = begin (V10 = V0), fun (V11) -> begin (V14 = (begin (V12 = V10), fun (V13) -> ('erlang':'get'(V12)) end end(V11))), {'Prelude.Types.Right', V14} end end end), ((begin (V31 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V28, V29, V30)) end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end((begin (V23 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> {'Prelude.Types.Right', (V19(V22))} end end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V16) -> ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V4, V16)) end))))(V15)) end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V161 = case V38 of {'Prelude.Types.Nothing'} -> begin (V45 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V40 = fun (V39) -> V39 end), fun (V41) -> (V40(V41)) end end(<<"compiler.cse"/utf8>>)), 10, fun () -> (begin (V43 = fun (V42) -> V42 end), fun (V44) -> (V43(V44)) end end(<<"  not a name generated during CSE"/utf8>>)) end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V51 = fun (V50) -> {'Prelude.Types.Right', {'Core.CompileExpr.CRef', V3, V4}} end), V51 end(V46)) end end end end; {'Prelude.Types.Just', V52} -> case V52 of {'Builtin.MkPair', V53, V54} -> case V54 of {'Compiler.Opts.CSE.Many'} -> begin (V61 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V56 = fun (V55) -> V55 end), fun (V57) -> (V56(V57)) end end(<<"compiler.cse"/utf8>>)), 10, fun () -> (begin (V59 = fun (V58) -> V58 end), fun (V60) -> (V59(V60)) end end(<<"  already replaced: Occurs many times"/utf8>>)) end))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V67 = fun (V66) -> {'Prelude.Types.Right', {'Core.CompileExpr.CApp', {'Core.FC.EmptyFC'}, {'Core.CompileExpr.CRef', V3, V4}, []}} end), V67 end(V62)) end end end end; {'Compiler.Opts.CSE.Once'} -> begin (V74 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V69 = fun (V68) -> V68 end), fun (V70) -> (V69(V70)) end end(<<"compiler.cse"/utf8>>)), 10, fun () -> (begin (V72 = fun (V71) -> V71 end), fun (V73) -> (V72(V73)) end end(<<"  already replaced: Occurs once"/utf8>>)) end))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V80 = fun (V79) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.CompileExpr':'un--embed'(V53))} end), V80 end(V75)) end end end end; {'Compiler.Opts.CSE.C', V81} -> begin (V91 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V83 = fun (V82) -> V82 end), fun (V84) -> (V83(V84)) end end(<<"compiler.cse"/utf8>>)), 10, fun () -> <<(begin (V86 = fun (V85) -> V85 end), fun (V87) -> (V86(V87)) end end(<<"  expression of unknown quantity ("/utf8>>))/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V81))/binary, (begin (V89 = fun (V88) -> V88 end), fun (V90) -> (V89(V90)) end end(<<" occurences)"/utf8>>))/binary>>/binary>> end))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V160 = begin (V96 = ('un--replaceExp'(V0, V1, V81, V53))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V159 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V81, V2)) of 1 -> begin (V101 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"compiler.cse"/utf8>>, 10, fun () -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary, <<" assigned quantity \x{22}Many\x{22}"/utf8>>/binary>> end))), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V129 = begin (V122 = begin (V111 = begin (V106 = V0), fun (V107) -> begin (V110 = (begin (V108 = V106), fun (V109) -> ('erlang':'get'(V108)) end end(V107))), {'Prelude.Types.Right', V110} end end end), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V121 = begin (V116 = V0), fun (V117) -> begin (V120 = (begin (V118 = V116), fun (V119) -> ('erlang':'put'(V118, ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V4, {'Builtin.MkPair', V100, {'Compiler.Opts.CSE.Many'}}, V115)))) end end(V117))), {'Prelude.Types.Right', V120} end end end), V121 end(V112)) end end end end), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V128 = fun (V127) -> {'Prelude.Types.Right', {'Core.CompileExpr.CApp', {'Core.FC.EmptyFC'}, {'Core.CompileExpr.CRef', V3, V4}, []}} end), V128 end(V123)) end end end end), V129 end(V102)) end end end end; 0 -> begin (V130 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"compiler.cse"/utf8>>, 10, fun () -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary, <<" assigned quantity \x{22}Once\x{22}"/utf8>>/binary>> end))), fun (V131) -> begin (V132 = (V130(V131))), case V132 of {'Prelude.Types.Left', V133} -> {'Prelude.Types.Left', V133}; {'Prelude.Types.Right', V134} -> (begin (V158 = begin (V151 = begin (V140 = begin (V135 = V0), fun (V136) -> begin (V139 = (begin (V137 = V135), fun (V138) -> ('erlang':'get'(V137)) end end(V136))), {'Prelude.Types.Right', V139} end end end), fun (V141) -> begin (V142 = (V140(V141))), case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> (begin (V150 = begin (V145 = V0), fun (V146) -> begin (V149 = (begin (V147 = V145), fun (V148) -> ('erlang':'put'(V147, ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V4, {'Builtin.MkPair', V100, {'Compiler.Opts.CSE.Once'}}, V144)))) end end(V146))), {'Prelude.Types.Right', V149} end end end), V150 end(V141)) end end end end), fun (V152) -> begin (V153 = (V151(V152))), case V153 of {'Prelude.Types.Left', V154} -> {'Prelude.Types.Left', V154}; {'Prelude.Types.Right', V155} -> (begin (V157 = fun (V156) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.CompileExpr':'un--embed'(V100))} end), V157 end(V152)) end end end end), V158 end(V131)) end end end end end), V159 end(V97)) end end end end), V160 end(V92)) end end end end end end end), V161 end(V35)) end end end end), V162 end(V6)) end end end end.
'un--replaceExp'(V0, V1, V2, V3) -> case V3 of {'Core.CompileExpr.CLocal', V4, V5} -> fun (V6) -> {'Prelude.Types.Right', V3} end; {'Core.CompileExpr.CRef', V7, V8} -> ('un--replaceRef'(V0, V1, V2, V7, V8)); {'Core.CompileExpr.CLam', V9, V10, V11} -> begin (V12 = ('un--replaceExp'(V0, V1, V2, V11))), ((begin (V28 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V25, V26, V27)) end end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end((begin (V20 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> {'Prelude.Types.Right', (V16(V19))} end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V13) -> {'Core.CompileExpr.CLam', V9, V10, V13} end))))(V12)) end; {'Core.CompileExpr.CLet', V31, V32, V33, V34, V35} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V36 = ('un--replaceExp'(V0, V1, V2, V34))), ((begin (V53 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V50, V51, V52)) end end end end end), fun (V54) -> fun (V55) -> ((((V53('erased'))('erased'))(V54))(V55)) end end end((begin (V45 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> {'Prelude.Types.Right', (V41(V44))} end end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V37) -> fun (V38) -> {'Core.CompileExpr.CLet', V31, V32, V33, V37, V38} end end))))(V36)) end, ('un--replaceExp'(V0, V1, V2, V35)))); {'Core.CompileExpr.CApp', V56, V57, V58} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V59 = ('un--replaceExp'(V0, V1, V2, V57))), ((begin (V76 = fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V73, V74, V75)) end end end end end), fun (V77) -> fun (V78) -> ((((V76('erased'))('erased'))(V77))(V78)) end end end((begin (V68 = fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> {'Prelude.Types.Right', (V64(V67))} end end end end end), fun (V69) -> fun (V70) -> ((((V68('erased'))('erased'))(V69))(V70)) end end end(fun (V60) -> fun (V61) -> {'Core.CompileExpr.CApp', V56, V60, V61} end end))))(V59)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V79) -> ('un--replaceExp'(V0, V1, V2, V79)) end, V58, [])))); {'Core.CompileExpr.CCon', V80, V81, V82, V83, V84} -> begin (V86 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V85) -> ('un--replaceExp'(V0, V1, V2, V85)) end, V84, []))), ((begin (V102 = fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V99, V100, V101)) end end end end end), fun (V103) -> fun (V104) -> ((((V102('erased'))('erased'))(V103))(V104)) end end end((begin (V94 = fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> {'Prelude.Types.Right', (V90(V93))} end end end end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end(fun (V87) -> {'Core.CompileExpr.CCon', V80, V81, V82, V83, V87} end))))(V86)) end; {'Core.CompileExpr.COp', V105, V106, V107, V108} -> begin (V110 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V109) -> ('un--replaceExp'(V0, V1, V2, V109)) end, V108))), ((begin (V126 = fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V123, V124, V125)) end end end end end), fun (V127) -> fun (V128) -> ((((V126('erased'))('erased'))(V127))(V128)) end end end((begin (V118 = fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> {'Prelude.Types.Right', (V114(V117))} end end end end end), fun (V119) -> fun (V120) -> ((((V118('erased'))('erased'))(V119))(V120)) end end end(fun (V111) -> {'Core.CompileExpr.COp', V105, V106, V107, V111} end))))(V110)) end; {'Core.CompileExpr.CExtPrim', V129, V130, V131} -> begin (V133 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V132) -> ('un--replaceExp'(V0, V1, V2, V132)) end, V131, []))), ((begin (V149 = fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V146, V147, V148)) end end end end end), fun (V150) -> fun (V151) -> ((((V149('erased'))('erased'))(V150))(V151)) end end end((begin (V141 = fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> {'Prelude.Types.Right', (V137(V140))} end end end end end), fun (V142) -> fun (V143) -> ((((V141('erased'))('erased'))(V142))(V143)) end end end(fun (V134) -> {'Core.CompileExpr.CExtPrim', V129, V130, V134} end))))(V133)) end; {'Core.CompileExpr.CForce', V152, V153, V154} -> begin (V155 = ('un--replaceExp'(V0, V1, V2, V154))), ((begin (V171 = fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V168, V169, V170)) end end end end end), fun (V172) -> fun (V173) -> ((((V171('erased'))('erased'))(V172))(V173)) end end end((begin (V163 = fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> case V160 of {'Prelude.Types.Left', V161} -> {'Prelude.Types.Left', V161}; {'Prelude.Types.Right', V162} -> {'Prelude.Types.Right', (V159(V162))} end end end end end), fun (V164) -> fun (V165) -> ((((V163('erased'))('erased'))(V164))(V165)) end end end(fun (V156) -> {'Core.CompileExpr.CForce', V152, V153, V156} end))))(V155)) end; {'Core.CompileExpr.CDelay', V174, V175, V176} -> begin (V177 = ('un--replaceExp'(V0, V1, V2, V176))), ((begin (V193 = fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V190, V191, V192)) end end end end end), fun (V194) -> fun (V195) -> ((((V193('erased'))('erased'))(V194))(V195)) end end end((begin (V185 = fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> {'Prelude.Types.Right', (V181(V184))} end end end end end), fun (V186) -> fun (V187) -> ((((V185('erased'))('erased'))(V186))(V187)) end end end(fun (V178) -> {'Core.CompileExpr.CDelay', V174, V175, V178} end))))(V177)) end; {'Core.CompileExpr.CConCase', V196, V197, V198, V199} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V200 = ('un--replaceExp'(V0, V1, V2, V197))), ((begin (V218 = fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V215, V216, V217)) end end end end end), fun (V219) -> fun (V220) -> ((((V218('erased'))('erased'))(V219))(V220)) end end end((begin (V210 = fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> case V207 of {'Prelude.Types.Left', V208} -> {'Prelude.Types.Left', V208}; {'Prelude.Types.Right', V209} -> {'Prelude.Types.Right', (V206(V209))} end end end end end), fun (V211) -> fun (V212) -> ((((V210('erased'))('erased'))(V211))(V212)) end end end(fun (V201) -> fun (V202) -> fun (V203) -> {'Core.CompileExpr.CConCase', V196, V201, V202, V203} end end end))))(V200)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V221) -> ('un--replaceConAlt'(V0, V1, V2, V221)) end, V198, [])))), case V199 of {'Prelude.Types.Nothing'} -> fun (V222) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V223} -> begin (V224 = ('un--replaceExp'(V0, V1, V2, V223))), ((begin (V240 = fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V237, V238, V239)) end end end end end), fun (V241) -> fun (V242) -> ((((V240('erased'))('erased'))(V241))(V242)) end end end((begin (V232 = fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> case V229 of {'Prelude.Types.Left', V230} -> {'Prelude.Types.Left', V230}; {'Prelude.Types.Right', V231} -> {'Prelude.Types.Right', (V228(V231))} end end end end end), fun (V233) -> fun (V234) -> ((((V232('erased'))('erased'))(V233))(V234)) end end end(fun (V225) -> {'Prelude.Types.Just', V225} end))))(V224)) end end)); {'Core.CompileExpr.CConstCase', V243, V244, V245, V246} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V247 = ('un--replaceExp'(V0, V1, V2, V244))), ((begin (V265 = fun (V260) -> fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V262, V263, V264)) end end end end end), fun (V266) -> fun (V267) -> ((((V265('erased'))('erased'))(V266))(V267)) end end end((begin (V257 = fun (V251) -> fun (V252) -> fun (V253) -> fun (V254) -> case V254 of {'Prelude.Types.Left', V255} -> {'Prelude.Types.Left', V255}; {'Prelude.Types.Right', V256} -> {'Prelude.Types.Right', (V253(V256))} end end end end end), fun (V258) -> fun (V259) -> ((((V257('erased'))('erased'))(V258))(V259)) end end end(fun (V248) -> fun (V249) -> fun (V250) -> {'Core.CompileExpr.CConstCase', V243, V248, V249, V250} end end end))))(V247)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V268) -> ('un--replaceConstAlt'(V0, V1, V2, V268)) end, V245, [])))), case V246 of {'Prelude.Types.Nothing'} -> fun (V269) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V270} -> begin (V271 = ('un--replaceExp'(V0, V1, V2, V270))), ((begin (V287 = fun (V282) -> fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V284, V285, V286)) end end end end end), fun (V288) -> fun (V289) -> ((((V287('erased'))('erased'))(V288))(V289)) end end end((begin (V279 = fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> case V276 of {'Prelude.Types.Left', V277} -> {'Prelude.Types.Left', V277}; {'Prelude.Types.Right', V278} -> {'Prelude.Types.Right', (V275(V278))} end end end end end), fun (V280) -> fun (V281) -> ((((V279('erased'))('erased'))(V280))(V281)) end end end(fun (V272) -> {'Prelude.Types.Just', V272} end))))(V271)) end end)); {'Core.CompileExpr.CPrimVal', V290, V291} -> fun (V292) -> {'Prelude.Types.Right', V3} end; {'Core.CompileExpr.CErased', V293} -> fun (V294) -> {'Prelude.Types.Right', V3} end; {'Core.CompileExpr.CCrash', V295, V296} -> fun (V297) -> {'Prelude.Types.Right', V3} end end.
'un--replaceDef'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Core.CompileExpr.MkFun', V7, V8} -> begin (V9 = ('un--replaceExp'(V0, V1, 1, V8))), ((begin (V25 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V22, V23, V24)) end end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end((begin (V17 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> {'Prelude.Types.Right', (V13(V16))} end end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V10) -> {'Builtin.MkPair', V3, {'Builtin.MkPair', V5, {'Core.CompileExpr.MkFun', V7, V10}}} end))))(V9)) end; {'Core.CompileExpr.MkCon', V28, V29, V30} -> fun (V31) -> {'Prelude.Types.Right', {'Builtin.MkPair', V3, {'Builtin.MkPair', V5, V6}}} end; {'Core.CompileExpr.MkForeign', V32, V33, V34} -> fun (V35) -> {'Prelude.Types.Right', {'Builtin.MkPair', V3, {'Builtin.MkPair', V5, V6}}} end; {'Core.CompileExpr.MkError', V36} -> fun (V37) -> {'Prelude.Types.Right', {'Builtin.MkPair', V3, {'Builtin.MkPair', V5, V6}}} end end end end.
'un--replaceConstAlt'(V0, V1, V2, V3) -> case V3 of {'Core.CompileExpr.MkConstAlt', V4, V5} -> begin (V6 = ('un--replaceExp'(V0, V1, V2, V5))), ((begin (V22 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V19, V20, V21)) end end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end((begin (V14 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> {'Prelude.Types.Right', (V10(V13))} end end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V7) -> {'Core.CompileExpr.MkConstAlt', V4, V7} end))))(V6)) end end.
'un--replaceConAlt'(V0, V1, V2, V3) -> case V3 of {'Core.CompileExpr.MkConAlt', V4, V5, V6, V7, V8} -> begin (V9 = ('un--replaceExp'(V0, V1, V2, V8))), ((begin (V25 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V22, V23, V24)) end end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end((begin (V17 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> {'Prelude.Types.Right', (V13(V16))} end end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V10) -> {'Core.CompileExpr.MkConAlt', V4, V5, V6, V7, V10} end))))(V9)) end end.
'un--newToplevelDefs'(V0) -> ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V1) -> ('nested--11926-9592--in--un--toDef'(V0, V1)) end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--toList'(V0)))).
'un--dropVar'(V0, V1) -> case V0 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> case V1 of 0 -> {'Prelude.Types.Just', 0}; _ -> begin (V4 = (V1 - 1)), case ('un--dropVar'(V3, V4)) of {'Prelude.Types.Just', V5} -> {'Prelude.Types.Just', (V5 + 1)}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'} end end end end(E0, E1)) end.
'un--dropEnv'(V0, V1) -> case V1 of {'Core.CompileExpr.CLocal', V2, V3} -> ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> {'Core.CompileExpr.CLocal', V2, V3} end))(('un--dropVar'(V0, V2)))); {'Core.CompileExpr.CRef', V12, V13} -> {'Prelude.Types.Just', {'Core.CompileExpr.CRef', V12, V13}}; {'Core.CompileExpr.CLam', V14, V15, V16} -> ((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V17) -> {'Core.CompileExpr.CLam', V14, V15, V17} end))(('un--dropEnv'([V15 | V0], V16)))); {'Core.CompileExpr.CLet', V25, V26, V27, V28, V29} -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(((begin (V36 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V34, V35)) end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end(fun (V30) -> fun (V31) -> {'Core.CompileExpr.CLet', V25, V26, V27, V30, V31} end end))(('un--dropEnv'(V0, V28)))), ('un--dropEnv'([V26 | V0], V29)))); {'Core.CompileExpr.CApp', V39, V40, V41} -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(((begin (V48 = fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V46, V47)) end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end(fun (V42) -> fun (V43) -> {'Core.CompileExpr.CApp', V39, V42, V43} end end))(('un--dropEnv'(V0, V40)))), ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V53, V54)) end end end end, fun (V55) -> fun (V56) -> {'Prelude.Types.Just', V56} end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V59, V60)) end end end end}, fun (V61) -> ('un--dropEnv'(V0, V61)) end, V41)))); {'Core.CompileExpr.CCon', V62, V63, V64, V65, V66} -> ((begin (V83 = fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V81, V82)) end end end end), fun (V84) -> fun (V85) -> ((((V83('erased'))('erased'))(V84))(V85)) end end end(fun (V78) -> {'Core.CompileExpr.CCon', V62, V63, V64, V65, V78} end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V69, V70)) end end end end, fun (V71) -> fun (V72) -> {'Prelude.Types.Just', V72} end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V75, V76)) end end end end}, fun (V77) -> ('un--dropEnv'(V0, V77)) end, V66)))); {'Core.CompileExpr.COp', V86, V87, V88, V89} -> ((begin (V106 = fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V104, V105)) end end end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V101) -> {'Core.CompileExpr.COp', V86, V87, V88, V101} end))(('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Prelude.Interfaces.MkApplicative', fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V92, V93)) end end end end, fun (V94) -> fun (V95) -> {'Prelude.Types.Just', V95} end end, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V98, V99)) end end end end}, fun (V100) -> ('un--dropEnv'(V0, V100)) end, V89)))); {'Core.CompileExpr.CExtPrim', V109, V110, V111} -> ((begin (V128 = fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V126, V127)) end end end end), fun (V129) -> fun (V130) -> ((((V128('erased'))('erased'))(V129))(V130)) end end end(fun (V123) -> {'Core.CompileExpr.CExtPrim', V109, V110, V123} end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V114, V115)) end end end end, fun (V116) -> fun (V117) -> {'Prelude.Types.Just', V117} end end, fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V120, V121)) end end end end}, fun (V122) -> ('un--dropEnv'(V0, V122)) end, V111)))); {'Core.CompileExpr.CForce', V131, V132, V133} -> ((begin (V139 = fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V137, V138)) end end end end), fun (V140) -> fun (V141) -> ((((V139('erased'))('erased'))(V140))(V141)) end end end(fun (V134) -> {'Core.CompileExpr.CForce', V131, V132, V134} end))(('un--dropEnv'(V0, V133)))); {'Core.CompileExpr.CDelay', V142, V143, V144} -> ((begin (V150 = fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V148, V149)) end end end end), fun (V151) -> fun (V152) -> ((((V150('erased'))('erased'))(V151))(V152)) end end end(fun (V145) -> {'Core.CompileExpr.CDelay', V142, V143, V145} end))(('un--dropEnv'(V0, V144)))); {'Core.CompileExpr.CConCase', V153, V154, V155, V156} -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(((begin (V164 = fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V162, V163)) end end end end), fun (V165) -> fun (V166) -> ((((V164('erased'))('erased'))(V165))(V166)) end end end(fun (V157) -> fun (V158) -> fun (V159) -> {'Core.CompileExpr.CConCase', V153, V157, V158, V159} end end end))(('un--dropEnv'(V0, V154)))), ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V169, V170)) end end end end, fun (V171) -> fun (V172) -> {'Prelude.Types.Just', V172} end end, fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V175, V176)) end end end end}, fun (V177) -> ('un--dropConAlt'(V0, V177)) end, V155)))), ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_Maybe'({'Prelude.Interfaces.MkApplicative', fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V180, V181)) end end end end, fun (V182) -> fun (V183) -> {'Prelude.Types.Just', V183} end end, fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V186, V187)) end end end end}, fun (V188) -> ('un--dropEnv'(V0, V188)) end, V156)))); {'Core.CompileExpr.CConstCase', V189, V190, V191, V192} -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(((begin (V200 = fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V198, V199)) end end end end), fun (V201) -> fun (V202) -> ((((V200('erased'))('erased'))(V201))(V202)) end end end(fun (V193) -> fun (V194) -> fun (V195) -> {'Core.CompileExpr.CConstCase', V189, V193, V194, V195} end end end))(('un--dropEnv'(V0, V190)))), ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V205, V206)) end end end end, fun (V207) -> fun (V208) -> {'Prelude.Types.Just', V208} end end, fun (V209) -> fun (V210) -> fun (V211) -> fun (V212) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V211, V212)) end end end end}, fun (V213) -> ('un--dropConstAlt'(V0, V213)) end, V191)))), ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_Maybe'({'Prelude.Interfaces.MkApplicative', fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V216, V217)) end end end end, fun (V218) -> fun (V219) -> {'Prelude.Types.Just', V219} end end, fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V222, V223)) end end end end}, fun (V224) -> ('un--dropEnv'(V0, V224)) end, V192)))); {'Core.CompileExpr.CPrimVal', V225, V226} -> {'Prelude.Types.Just', {'Core.CompileExpr.CPrimVal', V225, V226}}; {'Core.CompileExpr.CErased', V227} -> {'Prelude.Types.Just', {'Core.CompileExpr.CErased', V227}}; {'Core.CompileExpr.CCrash', V228, V229} -> {'Prelude.Types.Just', {'Core.CompileExpr.CCrash', V228, V229}} end.
'un--dropConstAlt'(V0, V1) -> case V1 of {'Core.CompileExpr.MkConstAlt', V2, V3} -> ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> {'Core.CompileExpr.MkConstAlt', V2, V4} end))(('un--dropEnv'(V0, V3)))) end.
'un--dropConAlt'(V0, V1) -> case V1 of {'Core.CompileExpr.MkConAlt', V2, V3, V4, V5, V6} -> ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> {'Core.CompileExpr.MkConAlt', V2, V3, V4, V5, ('Idris.Idris2.Core.CompileExpr':'un--embed'(V7))} end))(('un--dropEnv'(V5, V6)))) end.
'un--cse'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.cse"/utf8>>, 10, fun () -> <<<<"Analysing "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V1))))/binary, <<" names"/utf8>>/binary>>/binary>> end))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V395 = begin (V294 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Opts.CSE.Sts'}, {'Compiler.Opts.CSE.MkSt', ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V12, V13)) end end}, {'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V16, V17)) end end}, V8, V9)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V22, V23)) end end}, {'Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V26, V27)) end end}, V18, V19)) end end}, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V32, V33)) end end}, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V46, V47)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V50, V51)) end end}, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V64, V65)) end end}, V28, V29)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V70, V71)) end end}, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V84, V85)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V88, V89)) end end}, fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V90, V91)) end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V94, V95)) end end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V96, V97)) end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V98, V99)) end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V100, V101)) end end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V102, V103)) end end}, V66, V67)) end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V106, V107)) end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V108, V109)) end end}, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V110, V111)) end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V112, V113)) end end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V116, V117)) end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V118, V119)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V120, V121)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V122, V123)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V124, V125)) end end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V126, V127)) end end}, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V130, V131)) end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V132, V133)) end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V134, V135)) end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V136, V137)) end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V138, V139)) end end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V140, V141)) end end}, V104, V105)) end end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V144, V145)) end end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V146, V147)) end end}, fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V148, V149)) end end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V150, V151)) end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V152, V153)) end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V154, V155)) end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V156, V157)) end end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V158, V159)) end end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V160, V161)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V162, V163)) end end, fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V164, V165)) end end}, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V166, V167)) end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V168, V169)) end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V170, V171)) end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V172, V173)) end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V174, V175)) end end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V176, V177)) end end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V178, V179)) end end}, V142, V143)) end end, fun (V180) -> fun (V181) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V182) -> fun (V183) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V182, V183)) end end, fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V184, V185)) end end}, fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V186, V187)) end end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V188, V189)) end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V190, V191)) end end, fun (V192) -> fun (V193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V192, V193)) end end, fun (V194) -> fun (V195) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V194, V195)) end end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V196, V197)) end end, fun (V198) -> fun (V199) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V198, V199)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V200) -> fun (V201) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V200, V201)) end end, fun (V202) -> fun (V203) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V202, V203)) end end}, fun (V204) -> fun (V205) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V204, V205)) end end, fun (V206) -> fun (V207) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V206, V207)) end end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V208, V209)) end end, fun (V210) -> fun (V211) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V210, V211)) end end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V212, V213)) end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V214, V215)) end end, fun (V216) -> fun (V217) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V216, V217)) end end}, V180, V181)) end end, fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V220, V221)) end end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V222, V223)) end end}, fun (V224) -> fun (V225) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V224, V225)) end end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V226, V227)) end end, fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V228, V229)) end end, fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V230, V231)) end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V232, V233)) end end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V234, V235)) end end, fun (V236) -> fun (V237) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V236, V237)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V238) -> fun (V239) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V238, V239)) end end, fun (V240) -> fun (V241) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V240, V241)) end end}, fun (V242) -> fun (V243) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V242, V243)) end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V244, V245)) end end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V246, V247)) end end, fun (V248) -> fun (V249) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V248, V249)) end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V250, V251)) end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V252, V253)) end end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V254, V255)) end end}, V218, V219)) end end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V258) -> fun (V259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V258, V259)) end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V260, V261)) end end}, fun (V262) -> fun (V263) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V262, V263)) end end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V264, V265)) end end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V266, V267)) end end, fun (V268) -> fun (V269) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V268, V269)) end end, fun (V270) -> fun (V271) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V270, V271)) end end, fun (V272) -> fun (V273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V272, V273)) end end, fun (V274) -> fun (V275) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V274, V275)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V276) -> fun (V277) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V276, V277)) end end, fun (V278) -> fun (V279) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V278, V279)) end end}, fun (V280) -> fun (V281) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V280, V281)) end end, fun (V282) -> fun (V283) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V282, V283)) end end, fun (V284) -> fun (V285) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V284, V285)) end end, fun (V286) -> fun (V287) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V286, V287)) end end, fun (V288) -> fun (V289) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V288, V289)) end end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V290, V291)) end end, fun (V292) -> fun (V293) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V292, V293)) end end}, V256, V257)) end end})), 0}))), fun (V295) -> begin (V296 = (V294(V295))), case V296 of {'Prelude.Types.Left', V297} -> {'Prelude.Types.Left', V297}; {'Prelude.Types.Right', V298} -> (begin (V394 = begin (V319 = begin (V300 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V299) -> ('un--analyzeName'(V298, V0, V299)) end, V1, []))), ((begin (V316 = fun (V311) -> fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V313, V314, V315)) end end end end end), fun (V317) -> fun (V318) -> ((((V316('erased'))('erased'))(V317))(V318)) end end end((begin (V308 = fun (V302) -> fun (V303) -> fun (V304) -> fun (V305) -> case V305 of {'Prelude.Types.Left', V306} -> {'Prelude.Types.Left', V306}; {'Prelude.Types.Right', V307} -> {'Prelude.Types.Right', (V304(V307))} end end end end end), fun (V309) -> fun (V310) -> ((((V308('erased'))('erased'))(V309))(V310)) end end end(fun (V301) -> ('Idris.Idris2.Data.List':'un--catMaybes'(V301)) end))))(V300)) end), fun (V320) -> begin (V321 = (V319(V320))), case V321 of {'Prelude.Types.Left', V322} -> {'Prelude.Types.Left', V322}; {'Prelude.Types.Right', V323} -> (begin (V393 = begin (V329 = begin (V324 = V298), fun (V325) -> begin (V328 = (begin (V326 = V324), fun (V327) -> ('erlang':'get'(V326)) end end(V325))), {'Prelude.Types.Right', V328} end end end), fun (V330) -> begin (V331 = (V329(V330))), case V331 of {'Prelude.Types.Left', V332} -> {'Prelude.Types.Left', V332}; {'Prelude.Types.Right', V333} -> (begin (V392 = case V333 of {'Compiler.Opts.CSE.MkSt', V334, V335} -> begin (V336 = ('Idris.Idris2.Core.Core':'un--newRef'(('un--ReplaceMap'()), ('un--toReplaceMap'(V334))))), fun (V337) -> begin (V338 = (V336(V337))), case V338 of {'Prelude.Types.Left', V339} -> {'Prelude.Types.Left', V339}; {'Prelude.Types.Right', V340} -> (begin (V391 = begin (V342 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V341) -> ('un--replaceDef'(V340, V0, V341)) end, V323, []))), fun (V343) -> begin (V344 = (V342(V343))), case V344 of {'Prelude.Types.Left', V345} -> {'Prelude.Types.Left', V345}; {'Prelude.Types.Right', V346} -> (begin (V390 = begin (V347 = ('un--replaceExp'(V340, V0, 1, V2))), fun (V348) -> begin (V349 = (V347(V348))), case V349 of {'Prelude.Types.Left', V350} -> {'Prelude.Types.Left', V350}; {'Prelude.Types.Right', V351} -> (begin (V389 = begin (V357 = begin (V352 = V340), fun (V353) -> begin (V356 = (begin (V354 = V352), fun (V355) -> ('erlang':'get'(V354)) end end(V353))), {'Prelude.Types.Right', V356} end end end), fun (V358) -> begin (V359 = (V357(V358))), case V359 of {'Prelude.Types.Left', V360} -> {'Prelude.Types.Left', V360}; {'Prelude.Types.Right', V361} -> (begin (V388 = begin (V362 = ('Idris.Idris2.Libraries.Data.SortedMap':'un--toList'(V361))), begin (V381 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V364 = fun (V363) -> V363 end), fun (V365) -> (V364(V365)) end end(<<"compiler.cse"/utf8>>)), 10, fun () -> ('Idris.Idris2.Data.String':'un--fastUnlines'([(begin (V367 = fun (V366) -> V366 end), fun (V368) -> (V367(V368)) end end(<<"Found the following unadjusted subexpressions:"/utf8>>)) | ((begin (V378 = fun (V374) -> fun (V375) -> fun (V376) -> fun (V377) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V376, V377)) end end end end), fun (V379) -> fun (V380) -> ((((V378('erased'))('erased'))(V379))(V380)) end end end(fun (V369) -> case V369 of {'Builtin.MkPair', V370, V371} -> case V371 of {'Builtin.MkPair', V372, V373} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V370))/binary, <<<<": count "/utf8>>/binary, ('dn--un--show_Show_Count'(V373))/binary>>/binary>> end end end))(V362))])) end))), fun (V382) -> begin (V383 = (V381(V382))), case V383 of {'Prelude.Types.Left', V384} -> {'Prelude.Types.Left', V384}; {'Prelude.Types.Right', V385} -> (begin (V387 = fun (V386) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--newToplevelDefs'(V361)), V346)), V351}} end), V387 end(V382)) end end end end end), V388 end(V358)) end end end end), V389 end(V348)) end end end end), V390 end(V343)) end end end end), V391 end(V337)) end end end end end), V392 end(V330)) end end end end), V393 end(V320)) end end end end), V394 end(V295)) end end end end), V395 end(V4)) end end end end.
'un--analyzeVect'(V0, V1) -> begin (V22 = begin (V3 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V2) -> ('un--analyze'(V0, V2)) end, V1))), ((begin (V19 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V16, V17, V18)) end end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end((begin (V11 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> {'Prelude.Types.Right', (V7(V10))} end end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V4) -> ('Idris.Idris2.Data.Vect':'dn--un--unzip_Zippable_(Vect $k)'(V4)) end))))(V3)) end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V61 = fun (V27) -> case V26 of {'Builtin.MkPair', V28, V29} -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Prelude.Num.MkNum', fun (V30) -> fun (V31) -> (V30 + V31) end end, fun (V32) -> fun (V33) -> (V32 * V33) end end, fun (V34) -> V34 end}, {'Prelude.Interfaces.MkFoldable', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'(V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'(V46)) end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Data.Vect':'dn--un--foldlM_Foldable_(Vect $n)'(V50, V51, V52, V53)) end end end end end end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V55)) end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Data.Vect':'dn--un--foldMap_Foldable_(Vect $n)'(V58, V59, V60)) end end end end end}, V28)), V29}} end end), V61 end(V23)) end end end end.
'un--analyzeSubExp'(V0, V1) -> case V1 of {'Core.CompileExpr.CLocal', V2, V3} -> fun (V4) -> {'Prelude.Types.Right', {'Builtin.MkPair', 1, V1}} end; {'Core.CompileExpr.CRef', V5, V6} -> fun (V7) -> {'Prelude.Types.Right', {'Builtin.MkPair', 1, V1}} end; {'Core.CompileExpr.CLam', V8, V9, V10} -> begin (V11 = ('un--analyze'(V0, V10))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V19 = fun (V16) -> case V15 of {'Builtin.MkPair', V17, V18} -> {'Prelude.Types.Right', {'Builtin.MkPair', (V17 + 1), {'Core.CompileExpr.CLam', V8, V9, V18}}} end end), V19 end(V12)) end end end end; {'Core.CompileExpr.CLet', V20, V21, V22, V23, V24} -> begin (V25 = ('un--analyze'(V0, V23))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V41 = case V29 of {'Builtin.MkPair', V30, V31} -> begin (V32 = ('un--analyze'(V0, V24))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V40 = fun (V37) -> case V36 of {'Builtin.MkPair', V38, V39} -> {'Prelude.Types.Right', {'Builtin.MkPair', ((V30 + V38) + 1), {'Core.CompileExpr.CLet', V20, V21, V22, V31, V39}}} end end), V40 end(V33)) end end end end end), V41 end(V26)) end end end end; {'Core.CompileExpr.CApp', V42, V43, V44} -> begin (V45 = ('un--analyze'(V0, V43))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V61 = case V49 of {'Builtin.MkPair', V50, V51} -> begin (V52 = ('un--analyzeList'(V0, V44))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V60 = fun (V57) -> case V56 of {'Builtin.MkPair', V58, V59} -> {'Prelude.Types.Right', {'Builtin.MkPair', ((V50 + V58) + 1), {'Core.CompileExpr.CApp', V42, V51, V59}}} end end), V60 end(V53)) end end end end end), V61 end(V46)) end end end end; {'Core.CompileExpr.CCon', V62, V63, V64, V65, V66} -> begin (V67 = ('un--analyzeList'(V0, V66))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V75 = fun (V72) -> case V71 of {'Builtin.MkPair', V73, V74} -> {'Prelude.Types.Right', {'Builtin.MkPair', (V73 + 1), {'Core.CompileExpr.CCon', V62, V63, V64, V65, V74}}} end end), V75 end(V68)) end end end end; {'Core.CompileExpr.COp', V76, V77, V78, V79} -> begin (V80 = ('un--analyzeVect'(V0, V79))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V88 = fun (V85) -> case V84 of {'Builtin.MkPair', V86, V87} -> {'Prelude.Types.Right', {'Builtin.MkPair', (V86 + 1), {'Core.CompileExpr.COp', V76, V77, V78, V87}}} end end), V88 end(V81)) end end end end; {'Core.CompileExpr.CExtPrim', V89, V90, V91} -> begin (V92 = ('un--analyzeList'(V0, V91))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V100 = fun (V97) -> case V96 of {'Builtin.MkPair', V98, V99} -> {'Prelude.Types.Right', {'Builtin.MkPair', (V98 + 1), {'Core.CompileExpr.CExtPrim', V89, V90, V99}}} end end), V100 end(V93)) end end end end; {'Core.CompileExpr.CForce', V101, V102, V103} -> begin (V104 = ('un--analyze'(V0, V103))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V112 = fun (V109) -> case V108 of {'Builtin.MkPair', V110, V111} -> {'Prelude.Types.Right', {'Builtin.MkPair', (V110 + 1), {'Core.CompileExpr.CForce', V101, V102, V111}}} end end), V112 end(V105)) end end end end; {'Core.CompileExpr.CDelay', V113, V114, V115} -> begin (V116 = ('un--analyze'(V0, V115))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V124 = fun (V121) -> case V120 of {'Builtin.MkPair', V122, V123} -> {'Prelude.Types.Right', {'Builtin.MkPair', (V122 + 1), {'Core.CompileExpr.CDelay', V113, V114, V123}}} end end), V124 end(V117)) end end end end; {'Core.CompileExpr.CConCase', V125, V126, V127, V128} -> begin (V129 = ('un--analyze'(V0, V126))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V204 = case V133 of {'Builtin.MkPair', V134, V135} -> begin (V156 = begin (V137 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V136) -> ('un--analyzeConAlt'(V0, V136)) end, V127, []))), ((begin (V153 = fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V150, V151, V152)) end end end end end), fun (V154) -> fun (V155) -> ((((V153('erased'))('erased'))(V154))(V155)) end end end((begin (V145 = fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> {'Prelude.Types.Right', (V141(V144))} end end end end end), fun (V146) -> fun (V147) -> ((((V145('erased'))('erased'))(V146))(V147)) end end end(fun (V138) -> ('Idris.Idris2.Data.List':'dn--un--unzip_Zippable_List'(V138)) end))))(V137)) end), fun (V157) -> begin (V158 = (V156(V157))), case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> (begin (V203 = case V160 of {'Builtin.MkPair', V161, V162} -> begin (V163 = ('un--analyzeMaybe'(V0, V128))), fun (V164) -> begin (V165 = (V163(V164))), case V165 of {'Prelude.Types.Left', V166} -> {'Prelude.Types.Left', V166}; {'Prelude.Types.Right', V167} -> (begin (V202 = fun (V168) -> case V167 of {'Builtin.MkPair', V169, V170} -> {'Prelude.Types.Right', {'Builtin.MkPair', (((V134 + ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Prelude.Num.MkNum', fun (V171) -> fun (V172) -> (V171 + V172) end end, fun (V173) -> fun (V174) -> (V173 * V174) end end, fun (V175) -> V175 end}, {'Prelude.Interfaces.MkFoldable', fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V178, V179, V180)) end end end end end, fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V183, V184, V185)) end end end end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V187)) end end, fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V191, V192, V193, V194)) end end end end end end end, fun (V195) -> fun (V196) -> V196 end end, fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V199, V200, V201)) end end end end end}, V161))) + V169) + 1), {'Core.CompileExpr.CConCase', V125, V135, V162, V170}}} end end), V202 end(V164)) end end end end end), V203 end(V157)) end end end end end), V204 end(V130)) end end end end; {'Core.CompileExpr.CConstCase', V205, V206, V207, V208} -> begin (V209 = ('un--analyze'(V0, V206))), fun (V210) -> begin (V211 = (V209(V210))), case V211 of {'Prelude.Types.Left', V212} -> {'Prelude.Types.Left', V212}; {'Prelude.Types.Right', V213} -> (begin (V284 = case V213 of {'Builtin.MkPair', V214, V215} -> begin (V236 = begin (V217 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V216) -> ('un--analyzeConstAlt'(V0, V216)) end, V207, []))), ((begin (V233 = fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V230, V231, V232)) end end end end end), fun (V234) -> fun (V235) -> ((((V233('erased'))('erased'))(V234))(V235)) end end end((begin (V225 = fun (V219) -> fun (V220) -> fun (V221) -> fun (V222) -> case V222 of {'Prelude.Types.Left', V223} -> {'Prelude.Types.Left', V223}; {'Prelude.Types.Right', V224} -> {'Prelude.Types.Right', (V221(V224))} end end end end end), fun (V226) -> fun (V227) -> ((((V225('erased'))('erased'))(V226))(V227)) end end end(fun (V218) -> ('Idris.Idris2.Data.List':'dn--un--unzip_Zippable_List'(V218)) end))))(V217)) end), fun (V237) -> begin (V238 = (V236(V237))), case V238 of {'Prelude.Types.Left', V239} -> {'Prelude.Types.Left', V239}; {'Prelude.Types.Right', V240} -> (begin (V283 = case V240 of {'Builtin.MkPair', V241, V242} -> begin (V243 = ('un--analyzeMaybe'(V0, V208))), fun (V244) -> begin (V245 = (V243(V244))), case V245 of {'Prelude.Types.Left', V246} -> {'Prelude.Types.Left', V246}; {'Prelude.Types.Right', V247} -> (begin (V282 = fun (V248) -> case V247 of {'Builtin.MkPair', V249, V250} -> {'Prelude.Types.Right', {'Builtin.MkPair', (((V214 + ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Prelude.Num.MkNum', fun (V251) -> fun (V252) -> (V251 + V252) end end, fun (V253) -> fun (V254) -> (V253 * V254) end end, fun (V255) -> V255 end}, {'Prelude.Interfaces.MkFoldable', fun (V256) -> fun (V257) -> fun (V258) -> fun (V259) -> fun (V260) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V258, V259, V260)) end end end end end, fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V263, V264, V265)) end end end end end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V267)) end end, fun (V268) -> fun (V269) -> fun (V270) -> fun (V271) -> fun (V272) -> fun (V273) -> fun (V274) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V271, V272, V273, V274)) end end end end end end end, fun (V275) -> fun (V276) -> V276 end end, fun (V277) -> fun (V278) -> fun (V279) -> fun (V280) -> fun (V281) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V279, V280, V281)) end end end end end}, V241))) + V249) + 1), {'Core.CompileExpr.CConstCase', V205, V215, V242, V250}}} end end), V282 end(V244)) end end end end end), V283 end(V237)) end end end end end), V284 end(V210)) end end end end; {'Core.CompileExpr.CPrimVal', V285, V286} -> fun (V287) -> {'Prelude.Types.Right', {'Builtin.MkPair', 1, V1}} end; {'Core.CompileExpr.CErased', V288} -> fun (V289) -> {'Prelude.Types.Right', {'Builtin.MkPair', 1, V1}} end; {'Core.CompileExpr.CCrash', V290, V291} -> fun (V292) -> {'Prelude.Types.Right', {'Builtin.MkPair', 1, V1}} end end.
'un--analyzeName'(V0, V1, V2) -> begin (V8 = begin (V3 = V1), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V124 = begin (V45 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V123 = case V49 of {'Prelude.Types.Just', V50} -> case V50 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> case V69 of {'Prelude.Types.Just', V73} -> begin (V74 = ('un--analyzeDef'(V0, V73))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V102 = fun (V79) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V2, {'Builtin.MkPair', case V50 of {'Core.Context.Context.MkGlobalDef', V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101} -> V80 end, V78}}}} end), V102 end(V75)) end end end end; {'Prelude.Types.Nothing'} -> begin (V103 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"compile.execute"/utf8>>, 50, fun () -> <<<<"Couldn\x{27}t compile "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary>> end))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V109 = fun (V108) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V109 end(V104)) end end end end end end; {'Prelude.Types.Nothing'} -> begin (V116 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V111 = fun (V110) -> V110 end), fun (V112) -> (V111(V112)) end end(<<"compile.execute"/utf8>>)), 50, fun () -> <<(begin (V114 = fun (V113) -> V113 end), fun (V115) -> (V114(V115)) end end(<<"Couldn\x{27}t find "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary>> end))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V122 = fun (V121) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V122 end(V117)) end end end end end), V123 end(V46)) end end end end), V124 end(V9)) end end end end.
'un--analyzeMaybe'(V0, V1) -> case V1 of {'Prelude.Types.Nothing'} -> fun (V2) -> {'Prelude.Types.Right', {'Builtin.MkPair', 0, {'Prelude.Types.Nothing'}}} end; {'Prelude.Types.Just', V3} -> begin (V4 = ('un--analyze'(V0, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V12 = fun (V9) -> case V8 of {'Builtin.MkPair', V10, V11} -> {'Prelude.Types.Right', {'Builtin.MkPair', V10, {'Prelude.Types.Just', V11}}} end end), V12 end(V5)) end end end end end.
'un--analyzeList'(V0, V1) -> begin (V22 = begin (V3 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V2) -> ('un--analyze'(V0, V2)) end, V1, []))), ((begin (V19 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V16, V17, V18)) end end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end((begin (V11 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> {'Prelude.Types.Right', (V7(V10))} end end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V4) -> ('Idris.Idris2.Data.List':'dn--un--unzip_Zippable_List'(V4)) end))))(V3)) end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V61 = fun (V27) -> case V26 of {'Builtin.MkPair', V28, V29} -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Prelude.Num.MkNum', fun (V30) -> fun (V31) -> (V30 + V31) end end, fun (V32) -> fun (V33) -> (V32 * V33) end end, fun (V34) -> V34 end}, {'Prelude.Interfaces.MkFoldable', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V46)) end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V50, V51, V52, V53)) end end end end end end end, fun (V54) -> fun (V55) -> V55 end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V58, V59, V60)) end end end end end}, V28)), V29}} end end), V61 end(V23)) end end end end.
'un--analyzeDef'(V0, V1) -> case V1 of {'Core.CompileExpr.MkFun', V2, V3} -> begin (V4 = ('un--analyze'(V0, V3))), ((begin (V20 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V12 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', (V8(V11))} end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V5) -> {'Core.CompileExpr.MkFun', V2, ('Idris.Idris2.Builtin':'un--snd'(V5))} end))))(V4)) end; {'Core.CompileExpr.MkCon', V23, V24, V25} -> fun (V26) -> {'Prelude.Types.Right', V1} end; {'Core.CompileExpr.MkForeign', V27, V28, V29} -> fun (V30) -> {'Prelude.Types.Right', V1} end; {'Core.CompileExpr.MkError', V31} -> fun (V32) -> {'Prelude.Types.Right', V1} end end.
'un--analyzeConstAlt'(V0, V1) -> case V1 of {'Core.CompileExpr.MkConstAlt', V2, V3} -> begin (V4 = ('un--analyze'(V0, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V12 = fun (V9) -> case V8 of {'Builtin.MkPair', V10, V11} -> {'Prelude.Types.Right', {'Builtin.MkPair', (V10 + 1), {'Core.CompileExpr.MkConstAlt', V2, V11}}} end end), V12 end(V5)) end end end end end.
'un--analyzeConAlt'(V0, V1) -> case V1 of {'Core.CompileExpr.MkConAlt', V2, V3, V4, V5, V6} -> begin (V7 = ('un--analyze'(V0, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V15 = fun (V12) -> case V11 of {'Builtin.MkPair', V13, V14} -> {'Prelude.Types.Right', {'Builtin.MkPair', (V13 + 1), {'Core.CompileExpr.MkConAlt', V2, V3, V4, V5, V14}}} end end), V15 end(V8)) end end end end end.
'un--analyze'(V0, V1) -> case V1 of {'Core.CompileExpr.COp', V2, V3, V4, V5} -> ('un--analyzeSubExp'(V0, V1)); {'Core.CompileExpr.CExtPrim', V6, V7, V8} -> ('un--analyzeSubExp'(V0, V1)); {'Core.CompileExpr.CForce', V9, V10, V11} -> ('un--analyzeSubExp'(V0, V1)); {'Core.CompileExpr.CDelay', V12, V13, V14} -> ('un--analyzeSubExp'(V0, V1)); _ -> begin (V15 = ('un--analyzeSubExp'(V0, V1))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V23 = case V19 of {'Builtin.MkPair', V20, V21} -> begin (V22 = {'Builtin.MkPair', V20, V21}), ('case--case block in analyze-7289'(V0, V1, V20, V21, V22, ('un--dropEnv'([], V21)))) end end), V23 end(V16)) end end end end end.
'un--UsageMap'() -> {'Libraries.Data.SortedMap.SortedMap', {'Builtin.Pair', {'.Integer'}, {'Core.CompileExpr.CExp', []}}, {'Builtin.Pair', {'Core.Name.Name'}, {'.Integer'}}}.
'un--ReplaceMap'() -> {'Libraries.Data.SortedMap.SortedMap', {'Core.Name.Name'}, {'Builtin.Pair', {'Core.CompileExpr.CExp', []}, {'Compiler.Opts.CSE.Count'}}}.
