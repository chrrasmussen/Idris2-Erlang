-module('Idris.Idris2.Compiler.Opts.InlineHeuristics').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in inlineHeuristics-2772'/7,
  'un--simple'/2,
  'un--isVar'/2,
  'un--inlineHeuristics'/2,
  'un--inlineCDef'/2
]).
'case--case block in inlineHeuristics-2772'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Prelude.Types.Just', V7} -> case ('un--inlineCDef'(V1, V7)) of 1 -> case case V4 of {'Core.Context.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> V17 end of 2 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V41)) end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V45, V46, V47, V48)) end end end end end end end, fun (V49) -> fun (V50) -> V50 end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V53, V54, V55)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V58, V59)) end end}, {'Core.Context.Context.NoInline'}, case V4 of {'Core.Context.Context.MkGlobalDef', V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81} -> V71 end)) of 1 -> fun (V82) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> begin (V83 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.inline.heuristic"/utf8>>, 25, fun () -> <<<<"inlining heuristic decided to inline: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>> end))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V88 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, {'Core.FC.EmptyFC'}, {'Core.Name.Resolved', V3}, {'Core.Context.Context.Inline'}))), V88 end(V84)) end end end end end; _ -> fun (V89) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; 0 -> fun (V90) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; {'Prelude.Types.Nothing'} -> fun (V91) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'un--simple'(V0, V1) -> case V1 of {'Core.CompileExpr.CLocal', V2, V3} -> 1; {'Core.CompileExpr.CRef', V4, V5} -> 1; {'Core.CompileExpr.CLam', V6, V7, V8} -> 0; {'Core.CompileExpr.CLet', V9, V10, V11, V12, V13} -> 0; {'Core.CompileExpr.CApp', V14, V15, V16} -> case V15 of {'Core.CompileExpr.CRef', V17, V18} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V18)) of 1 -> 0; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V19, V20)) end end, 1}, fun (V21) -> ('un--isVar'(V0, V21)) end, V16)) end; _ -> case ('un--isVar'(V0, V15)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V22, V23)) end end, 1}, fun (V24) -> ('un--isVar'(V0, V24)) end, V16)); 0 -> 0 end end; {'Core.CompileExpr.CCon', V25, V26, V27, V28, V29} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V30, V31)) end end, 1}, fun (V32) -> ('un--isVar'(V0, V32)) end, V29)); {'Core.CompileExpr.COp', V33, V34, V35, V36} -> ('Idris.Idris2.Data.Vect':'dn--un--foldMap_Foldable_(Vect $n)'({'Prelude.Interfaces.MkMonoid', fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V37, V38)) end end, 1}, fun (V39) -> ('un--isVar'(V0, V39)) end, V36)); {'Core.CompileExpr.CExtPrim', V40, V41, V42} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V43, V44)) end end, 1}, fun (V45) -> ('un--isVar'(V0, V45)) end, V42)); {'Core.CompileExpr.CForce', V46, V47, V48} -> ('un--simple'(V0, V48)); {'Core.CompileExpr.CDelay', V49, V50, V51} -> ('un--simple'(V0, V51)); {'Core.CompileExpr.CConCase', V52, V53, V54, V55} -> 0; {'Core.CompileExpr.CConstCase', V56, V57, V58, V59} -> 0; {'Core.CompileExpr.CPrimVal', V60, V61} -> 1; {'Core.CompileExpr.CErased', V62} -> 1; {'Core.CompileExpr.CCrash', V63, V64} -> 0 end.
'un--isVar'(V0, V1) -> case V1 of {'Core.CompileExpr.CLocal', V2, V3} -> 1; {'Core.CompileExpr.CRef', V4, V5} -> 1; {'Core.CompileExpr.CForce', V6, V7, V8} -> ('un--isVar'(V0, V8)); {'Core.CompileExpr.CDelay', V9, V10, V11} -> ('un--isVar'(V0, V11)); _ -> 0 end.
'un--inlineHeuristics'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V77 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExactI'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V76 = case V48 of {'Prelude.Types.Just', V49} -> case V49 of {'Builtin.MkPair', V50, V51} -> begin (V52 = {'Prelude.Types.Just', {'Builtin.MkPair', V50, V51}}), ('case--case block in inlineHeuristics-2772'(V0, V1, V11, V50, V51, V52, case V51 of {'Core.Context.Context.MkGlobalDef', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74} -> V71 end)) end end; {'Prelude.Types.Nothing'} -> fun (V75) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V76 end(V45)) end end end end), V77 end(V8)) end end end end.
'un--inlineCDef'(V0, V1) -> case V1 of {'Core.CompileExpr.MkFun', V2, V3} -> ('un--simple'(V0, V3)); _ -> 0 end.
