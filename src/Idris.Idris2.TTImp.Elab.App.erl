-module('Idris.Idris2.TTImp.Elab.App').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--checkAppWith\x{27}-18226'/26,
  'case--case block in case block in checkAppWith-20753'/27,
  'case--case block in checkAppWith-20693'/23,
  'case--case block in checkAppWith\x{27}-20267'/38,
  'case--with block in checkAppWith\x{27}-18275'/26,
  'case--case block in case block in case block in case block in checkRestApp,checkRtoL-16768'/49,
  'case--getVarType-12361'/11,
  'case--getNameType-11797'/10,
  'nested--10667-12279--in--un--useVars'/13,
  'nested--20903-21229--in--un--updateElabInfo'/23,
  'nested--10071-11717--in--un--rigSafe'/11,
  'nested--20903-21228--in--un--normalisePrims'/22,
  'nested--11404-13852--in--un--metavarImp'/26,
  'nested--11312-13556--in--un--metavarImp'/25,
  'nested--11609-15259--in--un--invalidArg'/26,
  'nested--11580-14463--in--un--dotTerm'/9,
  'nested--11580-14462--in--un--countConstructors'/9,
  'nested--11609-15260--in--un--checkRtoL'/27,
  'nested--11609-15261--in--un--checkLtoR'/27,
  'nested--10071-11718--in--un--checkDeprecation'/11,
  'nested--21043-21251--in--un--boundSafe'/24,
  'un--onLHS'/1,
  'un--needsDelayLHS'/2,
  'un--needsDelayExpr'/3,
  'un--needsDelay'/4,
  'un--makeImplicit'/23,
  'un--makeDefImplicit'/24,
  'un--makeAutoImplicit'/23,
  'un--isImplicitAs'/1,
  'un--isHole'/1,
  'un--isBindAllExpPattern'/1,
  'un--getVarType'/10,
  'un--getNameType'/9,
  'un--findNamed'/2,
  'un--findBindAllExpPattern'/1,
  'un--dotErased'/8,
  'un--checkVisibleNS'/4,
  'un--checkValidPattern'/10,
  'un--checkRestApp'/24,
  'un--checkAppWith\x{27}'/20,
  'un--checkAppWith'/20,
  'un--checkApp'/17
]).
'with--checkAppWith\x{27}-18226'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V2 of {'Prelude.Types.Just', V26} -> case V26 of {'Builtin.MkPair', V27, V28} -> case V27 of {'Builtin.MkPair', V29, V30} -> begin (V31 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V19, V6))), ('un--checkRestApp'(V3, V25, V24, V23, V22, V21, V20, V19, V31, V18, V17, V16, V15, V14, V0, V5, V7, V13, V30, [], V12, V28, V11, V10)) end end end; {'Prelude.Types.Nothing'} -> ('case--with block in checkAppWith\x{27}-18275'(V3, V4, V9, V25, V24, V23, V22, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V8, V7, V6, V5, V1, V0, ('un--findBindAllExpPattern'(V1)))) end.
'case--case block in case block in checkAppWith-20753'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Prelude.Types.Just', V27} -> case V27 of {'Builtin.MkPair', V28, V29} -> case case (V29 =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V25))) of 'false' -> 0; _ -> 1 end of 1 -> fun (V30) -> {'Prelude.Types.Right', V20} end; 0 -> ('Idris.Idris2.TTImp.Elab.Dot':'un--registerDot'(V0, V19, V18, V17, V16, V13, V10, V9, 6, ('Idris.Idris2.Builtin':'un--fst'(V20)), ('Idris.Idris2.Builtin':'un--snd'(V20)))) end; _ -> fun (V31) -> {'Prelude.Types.Right', V20} end end; _ -> fun (V32) -> {'Prelude.Types.Right', V20} end end.
'case--case block in checkAppWith-20693'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Builtin.MkPair', V23, V24} -> case V23 of {'Core.TT.Ref', V25, V26, V27} -> ('case--case block in case block in checkAppWith-20753'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V25, V27, V26, V24, ('Idris.Idris2.Core.TT':'un--isCon'(V26)))); _ -> fun (V28) -> {'Prelude.Types.Right', V20} end end; _ -> fun (V29) -> {'Prelude.Types.Right', V20} end end.
'case--case block in checkAppWith\x{27}-20267'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V37 of [] -> fun (V38) -> {'Prelude.Types.Right', V35} end; _ -> begin (V39 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V34))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V51 = begin (V44 = ('Idris.Idris2.Core.UnifyState':'un--newConstant'(V4, V19, V21, V11, V15, V12, ('Idris.Idris2.Builtin':'un--fst'(V35)), V43, V37))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V50 = fun (V49) -> {'Prelude.Types.Right', {'Builtin.MkPair', V48, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V4, V12, V27))}} end), V50 end(V45)) end end end end), V51 end(V40)) end end end end end.
'case--with block in checkAppWith\x{27}-18275'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Prelude.Types.Just', V26} -> begin (V27 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V9, V21))), ('un--checkRestApp'(V0, V3, V4, V5, V6, V7, V8, V9, V27, V10, V11, V12, V13, V14, V24, V22, V20, V15, V26, [], V16, V23, V17, V18)) end; _ -> begin (V33 = begin (V28 = V3), fun (V29) -> begin (V32 = (begin (V30 = V28), fun (V31) -> ('erlang':'get'(V30)) end end(V29))), {'Prelude.Types.Right', V32} end end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V67 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V38, V39)) end end, 1}, fun (V40) -> ('un--isImplicitAs'(V40)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V47 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V45, V46)) end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V42) -> ('Idris.Idris2.Builtin':'un--snd'(V42)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V41) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V41)))) of 1 -> 0; 0 -> 1 end end, V23)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V3, V5, V6, V9, V10, V12, V13, V14, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V3, V0, V37, V12, V2)), V18)); 0 -> fun (V50) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V13, V12, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V56 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V54, V55)) end end end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end(fun (V51) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V64 = fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V62, V63)) end end end end), fun (V65) -> fun (V66) -> ((((V64('erased'))('erased'))(V65))(V66)) end end end(fun (V59) -> ('Idris.Idris2.Builtin':'un--fst'(V59)) end))(V23)))), V14}, V50)) end end), V67 end(V34)) end end end end end.
'case--case block in case block in case block in case block in checkRestApp,checkRtoL-16768'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> case V48 of [] -> begin (V68 = begin (V49 = ('Idris.Idris2.Core.Unify':'un--updateSolution'(V0, V24, V22, V14, V32, V42))), ((begin (V65 = fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V62, V63, V64)) end end end end end), fun (V66) -> fun (V67) -> ((((V65('erased'))('erased'))(V66))(V67)) end end end((begin (V57 = fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> {'Prelude.Types.Right', (V53(V56))} end end end end end), fun (V58) -> fun (V59) -> ((((V57('erased'))('erased'))(V58))(V59)) end end end(fun (V50) -> {'Builtin.MkUnit'} end))))(V49)) end), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V74 = fun (V73) -> {'Prelude.Types.Right', V36} end), V74 end(V69)) end end end end; _ -> begin (V75 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V37))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V80 = ('Idris.Idris2.Core.UnifyState':'un--newConstant'(V0, V22, V24, V13, V18, V14, V36, V79, V48))), V80 end(V76)) end end end end end.
'case--getVarType-12361'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Prelude.Types.Nothing'} -> begin (V11 = ('un--getNameType'(V0, V9, V8, V7, V6, V5, V3, V2, V1))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V19 = fun (V16) -> case V15 of {'Builtin.MkPair', V17, V18} -> {'Prelude.Types.Right', {'Builtin.MkPair', V17, {'Builtin.MkPair', 0, V18}}} end end), V19 end(V12)) end end end end; {'Prelude.Types.Just', V20} -> case V20 of {'Builtin.MkPair', V21, V22} -> case V22 of {'Builtin.MkPair', V23, V24} -> begin (V30 = begin (V25 = V9), fun (V26) -> begin (V29 = (begin (V27 = V25), fun (V28) -> ('erlang':'get'(V27)) end end(V26))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V326 = begin (V35 = ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V23))), begin (V36 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V1 end, V21))), begin (V69 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V36, case V34 of {'Core.Context.MkDefs', V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68} -> V37 end))), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V325 = case V73 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V9, V2, V36)); {'Prelude.Types.Just', V74} -> begin (V97 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Core.TT.Func'} end, ('Idris.Idris2.Core.Context.Context':'un--defNameType'(case V74 of {'Core.Context.Context.MkGlobalDef', V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96} -> V92 end))))), begin (V98 = ((V24(V2))(V97))), begin (V121 = ('nested--10667-12279--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V0, ('Idris.Idris2.Core.TT':'un--getArgs'(V98)), ('Idris.Idris2.Core.TT':'un--embed'(case V74 of {'Core.Context.Context.MkGlobalDef', V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120} -> V101 end))))), begin (V166 = ('un--checkVisibleNS'(V9, V2, case V74 of {'Core.Context.Context.MkGlobalDef', V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143} -> V123 end, case V74 of {'Core.Context.Context.MkGlobalDef', V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165} -> V153 end))), fun (V167) -> begin (V168 = (V166(V167))), case V168 of {'Prelude.Types.Left', V169} -> {'Prelude.Types.Left', V169}; {'Prelude.Types.Right', V170} -> (begin (V324 = begin (V171 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V9, <<"elab"/utf8>>, 5, fun () -> <<<<"Type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V36))/binary>> end, V121))), fun (V172) -> begin (V173 = (V171(V172))), case V173 of {'Prelude.Types.Left', V174} -> {'Prelude.Types.Left', V174}; {'Prelude.Types.Right', V175} -> (begin (V323 = begin (V179 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V9, <<"elab"/utf8>>, 5, fun () -> (begin (V177 = fun (V176) -> V176 end), fun (V178) -> (V177(V178)) end end(<<"Expands to"/utf8>>)) end, V98))), fun (V180) -> begin (V181 = (V179(V180))), case V181 of {'Prelude.Types.Left', V182} -> {'Prelude.Types.Left', V182}; {'Prelude.Types.Right', V183} -> (begin (V322 = begin (V187 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"elab"/utf8>>, 5, fun () -> <<(begin (V185 = fun (V184) -> V184 end), fun (V186) -> (V185(V186)) end end(<<"Arg length "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V35))/binary>> end))), fun (V188) -> begin (V189 = (V187(V188))), case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> (begin (V321 = begin (V198 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, (begin (V193 = fun (V192) -> V192 end), fun (V194) -> (V193(V194)) end end(<<"metadata.names"/utf8>>)), 7, fun () -> (begin (V196 = fun (V195) -> V195 end), fun (V197) -> (V196(V197)) end end(<<"getVarType is adding \x{2193}"/utf8>>)) end))), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V320 = begin (V203 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V9, V8, V2, V1, V3, V121))), fun (V204) -> begin (V205 = (V203(V204))), case V205 of {'Prelude.Types.Left', V206} -> {'Prelude.Types.Left', V206}; {'Prelude.Types.Right', V207} -> (begin (V319 = begin (V312 = case ('Idris.Idris2.Core.Name':'un--isSourceName'(case V74 of {'Core.Context.Context.MkGlobalDef', V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229} -> V209 end)) of 1 -> case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V2)) of {'Prelude.Types.Just', V230} -> begin (V253 = ('Idris.Idris2.Core.Metadata':'un--nameDecoration'(case V74 of {'Core.Context.Context.MkGlobalDef', V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252} -> V232 end, V97))), begin (V282 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, (begin (V255 = fun (V254) -> V254 end), fun (V256) -> (V255(V256)) end end(<<"ide-mode.highlight"/utf8>>)), 7, fun () -> <<(begin (V258 = fun (V257) -> V257 end), fun (V259) -> (V258(V259)) end end(<<"getNameType is adding "/utf8>>))/binary, <<('Idris.Idris2.Protocol.IDE.Decoration':'dn--un--show_Show_Decoration'(V253))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V74 of {'Core.Context.Context.MkGlobalDef', V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281} -> V261 end))/binary>>/binary>>/binary>> end))), fun (V283) -> begin (V284 = (V282(V283))), case V284 of {'Prelude.Types.Left', V285} -> {'Prelude.Types.Left', V285}; {'Prelude.Types.Right', V286} -> (begin (V309 = ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V8, V9, [{'Builtin.MkPair', V230, {'Builtin.MkPair', V253, {'Prelude.Types.Just', case V74 of {'Core.Context.Context.MkGlobalDef', V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308} -> V288 end}}} | []]))), V309 end(V283)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V310) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; 0 -> fun (V311) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V313) -> begin (V314 = (V312(V313))), case V314 of {'Prelude.Types.Left', V315} -> {'Prelude.Types.Left', V315}; {'Prelude.Types.Right', V316} -> (begin (V318 = fun (V317) -> {'Prelude.Types.Right', {'Builtin.MkPair', V98, {'Builtin.MkPair', V35, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V3, V121))}}} end), V318 end(V313)) end end end end), V319 end(V204)) end end end end), V320 end(V199)) end end end end), V321 end(V188)) end end end end), V322 end(V180)) end end end end), V323 end(V172)) end end end end), V324 end(V167)) end end end end end end end end), V325 end(V70)) end end end end end end), V326 end(V31)) end end end end end end end.
'case--getNameType-11797'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Prelude.Types.Just', V10} -> case V10 of {'Core.Env.MkIsDefined', V11, V12} -> begin (V13 = ('nested--10071-11717--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12, V4))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V106 = begin (V25 = ('Idris.Idris2.Core.Env':'un--getBinder'({'Core.TT.dn--un--__mkWeaken', fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V20)) end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V23, V24)) end end end end}, V0, V11, V3))), begin (V26 = ('Idris.Idris2.Core.TT':'un--binderType'(V25))), begin (V27 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"metadata.names"/utf8>>, 7, fun () -> <<"getNameType is adding \x{2193}"/utf8>> end))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V105 = begin (V32 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V8, V7, V2, V1, V3, V26))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V104 = begin (V76 = case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V37, V38)) end end, 0, fun (V39) -> fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V39, V40)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V41) -> fun (V42) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V43, V44)) end end}}, V12)) of 1 -> begin (V50 = begin (V45 = V6), fun (V46) -> begin (V49 = (begin (V47 = V45), fun (V48) -> ('erlang':'get'(V47)) end end(V46))), {'Prelude.Types.Right', V49} end end end), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V74 = begin (V55 = V6), fun (V56) -> begin (V73 = (begin (V57 = V55), fun (V58) -> ('erlang':'put'(V57, case V54 of {'TTImp.Elab.Check.MkEState', V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> {'TTImp.Elab.Check.MkEState', V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, [V11 | V70], V71, V72} end)) end end(V56))), {'Prelude.Types.Right', V73} end end end), V74 end(V51)) end end end end; 0 -> fun (V75) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V103 = begin (V81 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"ide-mode.highlight"/utf8>>, 8, fun () -> <<<<"getNameType is trying to add Bound: "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V2))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V102 = begin (V95 = case ('Idris.Idris2.Core.Name':'un--isSourceName'(V1)) of 1 -> case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V2)) of {'Prelude.Types.Just', V86} -> begin (V87 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"ide-mode.highlight"/utf8>>, 7, fun () -> <<<<"getNameType is adding Bound: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>> end))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V92 = ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V7, V8, [{'Builtin.MkPair', V86, {'Builtin.MkPair', 5, {'Prelude.Types.Just', V1}}} | []]))), V92 end(V88)) end end end end; {'Prelude.Types.Nothing'} -> fun (V93) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; 0 -> fun (V94) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V101 = fun (V100) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Local', V2, {'Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--isLet'(V25))}, V11}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V3, V26))}} end), V101 end(V96)) end end end end), V102 end(V82)) end end end end), V103 end(V77)) end end end end), V104 end(V33)) end end end end), V105 end(V28)) end end end end end end), V106 end(V14)) end end end end end; {'Prelude.Types.Nothing'} -> begin (V112 = begin (V107 = V8), fun (V108) -> begin (V111 = (begin (V109 = V107), fun (V110) -> ('erlang':'get'(V109)) end end(V108))), {'Prelude.Types.Right', V111} end end end), fun (V113) -> begin (V114 = (V112(V113))), case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> (begin (V468 = begin (V149 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V1, case V116 of {'Core.Context.MkDefs', V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148} -> V117 end))), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V467 = case V153 of [E0 | E1] -> (fun (V154, V155) -> case V154 of {'Builtin.MkPair', V156, V157} -> case V157 of {'Builtin.MkPair', V158, V159} -> case V155 of [] -> begin (V204 = ('un--checkVisibleNS'(V8, V2, case V159 of {'Core.Context.Context.MkGlobalDef', V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181} -> V161 end, case V159 of {'Core.Context.Context.MkGlobalDef', V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203} -> V191 end))), fun (V205) -> begin (V206 = (V204(V205))), case V206 of {'Prelude.Types.Left', V207} -> {'Prelude.Types.Left', V207}; {'Prelude.Types.Right', V208} -> (begin (V434 = begin (V210 = case ('un--onLHS'(V5)) of 1 -> fun (V209) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('nested--10071-11718--in--un--checkDeprecation'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V2, V159)) end), fun (V211) -> begin (V212 = (V210(V211))), case V212 of {'Prelude.Types.Left', V213} -> {'Prelude.Types.Left', V213}; {'Prelude.Types.Right', V214} -> (begin (V433 = begin (V237 = ('nested--10071-11717--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, case V159 of {'Core.Context.Context.MkGlobalDef', V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236} -> V222 end, V4))), fun (V238) -> begin (V239 = (V237(V238))), case V239 of {'Prelude.Types.Left', V240} -> {'Prelude.Types.Left', V240}; {'Prelude.Types.Right', V241} -> (begin (V432 = begin (V264 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Core.TT.Func'} end, ('Idris.Idris2.Core.Context.Context':'un--defNameType'(case V159 of {'Core.Context.Context.MkGlobalDef', V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263} -> V259 end))))), begin (V293 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, (begin (V266 = fun (V265) -> V265 end), fun (V267) -> (V266(V267)) end end(<<"ide-mode.highlight"/utf8>>)), 8, fun () -> <<(begin (V269 = fun (V268) -> V268 end), fun (V270) -> (V269(V270)) end end(<<"getNameType is trying to add something for: "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V159 of {'Core.Context.Context.MkGlobalDef', V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292} -> V272 end))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V2))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end))), fun (V294) -> begin (V295 = (V293(V294))), case V295 of {'Prelude.Types.Left', V296} -> {'Prelude.Types.Left', V296}; {'Prelude.Types.Right', V297} -> (begin (V431 = begin (V402 = case ('Idris.Idris2.Core.Name':'un--isSourceName'(case V159 of {'Core.Context.Context.MkGlobalDef', V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319} -> V299 end)) of 1 -> case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V2)) of {'Prelude.Types.Just', V320} -> begin (V343 = ('Idris.Idris2.Core.Metadata':'un--nameDecoration'(case V159 of {'Core.Context.Context.MkGlobalDef', V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342} -> V322 end, V264))), begin (V372 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, (begin (V345 = fun (V344) -> V344 end), fun (V346) -> (V345(V346)) end end(<<"ide-mode.highlight"/utf8>>)), 7, fun () -> <<(begin (V348 = fun (V347) -> V347 end), fun (V349) -> (V348(V349)) end end(<<"getNameType is adding "/utf8>>))/binary, <<('Idris.Idris2.Protocol.IDE.Decoration':'dn--un--show_Show_Decoration'(V343))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V159 of {'Core.Context.Context.MkGlobalDef', V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371} -> V351 end))/binary>>/binary>>/binary>> end))), fun (V373) -> begin (V374 = (V372(V373))), case V374 of {'Prelude.Types.Left', V375} -> {'Prelude.Types.Left', V375}; {'Prelude.Types.Right', V376} -> (begin (V399 = ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V7, V8, [{'Builtin.MkPair', V320, {'Builtin.MkPair', V343, {'Prelude.Types.Just', case V159 of {'Core.Context.Context.MkGlobalDef', V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398} -> V378 end}}} | []]))), V399 end(V373)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V400) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; 0 -> fun (V401) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V403) -> begin (V404 = (V402(V403))), case V404 of {'Prelude.Types.Left', V405} -> {'Prelude.Types.Left', V405}; {'Prelude.Types.Right', V406} -> (begin (V430 = fun (V407) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Ref', V2, V264, {'Core.Name.Resolved', V158}}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V3, ('Idris.Idris2.Core.TT':'un--embed'(case V159 of {'Core.Context.Context.MkGlobalDef', V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429} -> V410 end))))}} end), V430 end(V403)) end end end end), V431 end(V294)) end end end end end), V432 end(V238)) end end end end), V433 end(V211)) end end end end), V434 end(V205)) end end end end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V8, V2, V1, ((begin (V440 = fun (V436) -> fun (V437) -> fun (V438) -> fun (V439) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V438, V439)) end end end end), fun (V441) -> fun (V442) -> ((((V440('erased'))('erased'))(V441))(V442)) end end end(fun (V435) -> ('Idris.Idris2.Builtin':'un--fst'(V435)) end))(V153)))) end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V8, V2, V1, ((begin (V448 = fun (V444) -> fun (V445) -> fun (V446) -> fun (V447) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V446, V447)) end end end end), fun (V449) -> fun (V450) -> ((((V448('erased'))('erased'))(V449))(V450)) end end end(fun (V443) -> ('Idris.Idris2.Builtin':'un--fst'(V443)) end))(V153)))) end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V8, V2, V1, ((begin (V456 = fun (V452) -> fun (V453) -> fun (V454) -> fun (V455) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V454, V455)) end end end end), fun (V457) -> fun (V458) -> ((((V456('erased'))('erased'))(V457))(V458)) end end end(fun (V451) -> ('Idris.Idris2.Builtin':'un--fst'(V451)) end))(V153)))) end end(E0, E1)); _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V8, V2, V1, ((begin (V464 = fun (V460) -> fun (V461) -> fun (V462) -> fun (V463) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V462, V463)) end end end end), fun (V465) -> fun (V466) -> ((((V464('erased'))('erased'))(V465))(V466)) end end end(fun (V459) -> ('Idris.Idris2.Builtin':'un--fst'(V459)) end))(V153)))) end), V467 end(V150)) end end end end), V468 end(V113)) end end end end end.
'nested--10667-12279--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of [] -> V12; [E0 | E1] -> (fun (V13, V14) -> case V12 of {'Core.TT.Bind', V15, V16, V17, V18} -> case V17 of {'Core.TT.Pi', V19, V20, V21, V22} -> {'Core.TT.Bind', V15, V16, {'Core.TT.Let', V19, V20, V13, V22}, ('nested--10667-12279--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, [V16 | V10], ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V23) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V23)) end))(V14)), V18))}; _ -> case V12 of {'Core.TT.Bind', V31, V32, V33, V34} -> case V33 of {'Core.TT.Let', V35, V36, V37, V38} -> {'Core.TT.Bind', V31, V32, {'Core.TT.Let', V35, V36, V37, V38}, ('nested--10667-12279--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, [V32 | V10], ((begin (V44 = fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V42, V43)) end end end end), fun (V45) -> fun (V46) -> ((((V44('erased'))('erased'))(V45))(V46)) end end end(fun (V39) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V39)) end))(V11)), V34))}; _ -> V12 end; _ -> V12 end end; _ -> case V12 of {'Core.TT.Bind', V47, V48, V49, V50} -> case V49 of {'Core.TT.Let', V51, V52, V53, V54} -> {'Core.TT.Bind', V47, V48, {'Core.TT.Let', V51, V52, V53, V54}, ('nested--10667-12279--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, [V48 | V10], ((begin (V60 = fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V58, V59)) end end end end), fun (V61) -> fun (V62) -> ((((V60('erased'))('erased'))(V61))(V62)) end end end(fun (V55) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V55)) end))(V11)), V50))}; _ -> V12 end; _ -> V12 end end end(E0, E1)); _ -> case V12 of {'Core.TT.Bind', V63, V64, V65, V66} -> case V65 of {'Core.TT.Let', V67, V68, V69, V70} -> {'Core.TT.Bind', V63, V64, {'Core.TT.Let', V67, V68, V69, V70}, ('nested--10667-12279--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, [V64 | V10], ((begin (V76 = fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V74, V75)) end end end end), fun (V77) -> fun (V78) -> ((((V76('erased'))('erased'))(V77))(V78)) end end end(fun (V71) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V71)) end))(V11)), V66))}; _ -> V12 end; _ -> V12 end end.
'nested--20903-21229--in--un--updateElabInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V19 of {'TTImp.Elab.Check.InLHS', V23} -> case V21 of [E0 | E1] -> (fun (V24, V25) -> case V24 of {'TTImp.TTImp.IPrimVal', V26, V27} -> case V25 of [] -> begin (V28 = ('Idris.Idris2.Core.Context':'un--getFullName'(V17, V20))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V40 = fun (V33) -> case ('Idris.Idris2.Core.Context':'un--isPrimName'(V18, V32)) of 1 -> {'Prelude.Types.Right', case V22 of {'TTImp.Elab.Check.MkElabInfo', V34, V35, V36, V37, V38, V39} -> {'TTImp.Elab.Check.MkElabInfo', {'TTImp.Elab.Check.InExpr'}, V35, V36, V37, V38, V39} end}; 0 -> {'Prelude.Types.Right', V22} end end), V40 end(V29)) end end end end; _ -> fun (V41) -> {'Prelude.Types.Right', V22} end end; _ -> fun (V42) -> {'Prelude.Types.Right', V22} end end end(E0, E1)); _ -> fun (V43) -> {'Prelude.Types.Right', V22} end end; _ -> fun (V44) -> {'Prelude.Types.Right', V22} end end.
'nested--10071-11717--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--getFullName'(V8, V1))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V29 = fun (V16) -> case ('Idris.Idris2.Algebra.Preorder':'un--<'({'Builtin.MkPair', {'Algebra.Preorder.dn--un--__mkPreorder', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V17, V18)) end end, fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V19)) end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V20, V21, V22, V23, V24)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V27, V28)) end end}}, V9, V10)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.LinearMisuse', V2, V15, V9, V10}, V16)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V29 end(V12)) end end end end.
'nested--20903-21228--in--un--normalisePrims'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> begin (V36 = ('Idris.Idris2.Core.Normalise':'un--normalisePrims'(V17, V18, fun (V22) -> ('nested--21043-21251--in--un--boundSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V21, V20, V19, V22, case V10 of {'TTImp.Elab.Check.MkElabInfo', V23, V24, V25, V26, V27, V28} -> V23 end)) end, fun (V29) -> ('Idris.Idris2.TTImp.TTImp':'un--isIPrimVal'(V29)) end, ('un--onLHS'(case V10 of {'TTImp.Elab.Check.MkElabInfo', V30, V31, V32, V33, V34, V35} -> V30 end)), V19, V1, V6, ('Idris.Idris2.Builtin':'un--fst'(V21)), V20))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V42 = fun (V41) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('Idris.Idris2.Builtin':'un--fst'(V21)) end, V40)), ('Idris.Idris2.Builtin':'un--snd'(V21))}} end), V42 end(V37)) end end end end.
'nested--11404-13852--in--un--metavarImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'TTImp.Elab.Check.InLHS', V26} -> 1; {'TTImp.Elab.Check.InTransform'} -> 1; _ -> 0 end.
'nested--11312-13556--in--un--metavarImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'TTImp.Elab.Check.InLHS', V25} -> 1; {'TTImp.Elab.Check.InTransform'} -> 1; _ -> 0 end.
'nested--11609-15259--in--un--invalidArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Core.Core.InvalidArgs', V26, V27, V28, V29, V30} -> 1; _ -> 0 end.
'nested--11580-14463--in--un--dotTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'TTImp.TTImp.IMustUnify', V9, V10, V11} -> V8; {'TTImp.TTImp.IBindVar', V12, V13} -> V8; {'TTImp.TTImp.Implicit', V14, V15} -> V8; {'TTImp.TTImp.IAs', V16, V17, V18, V19, V20} -> case V20 of {'TTImp.TTImp.IBindVar', V21, V22} -> V8; {'TTImp.TTImp.Implicit', V23, V24} -> V8; _ -> {'TTImp.TTImp.IAs', V16, V17, V18, V19, {'TTImp.TTImp.IMustUnify', V16, 3, V8}} end; _ -> {'TTImp.TTImp.IMustUnify', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V8)), 3, V8} end.
'nested--11580-14462--in--un--countConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.Value.NTCon', V9, V10, V11, V12, V13} -> case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V13)) =:= V12) of 'false' -> 0; _ -> 1 end of 1 -> begin (V19 = begin (V14 = V7), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V95 = begin (V56 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V10, case V23 of {'Core.Context.MkDefs', V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55} -> V24 end))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V94 = case V60 of {'Prelude.Types.Just', V61} -> fun (V62) -> case V61 of {'Core.Context.Context.MkGlobalDef', V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84} -> case V80 of {'Core.Context.Context.TCon', V85, V86, V87, V88, V89, V90, V91, V92} -> {'Prelude.Types.Right', {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V91))}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end; {'Prelude.Types.Nothing'} -> fun (V93) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V94 end(V57)) end end end end), V95 end(V20)) end end end end; 0 -> fun (V96) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V97) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'nested--11609-15260--in--un--checkRtoL'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> begin (V32 = begin (V27 = V24), fun (V28) -> begin (V31 = (begin (V29 = V27), fun (V30) -> ('erlang':'get'(V29)) end end(V28))), {'Prelude.Types.Right', V31} end end end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V348 = begin (V37 = ('Idris.Idris2.Core.UnifyState':'un--genMVName'(V24, V22, V11))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V347 = begin (V43 = fun (V42) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V36, V42)) end), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V346 = begin (V48 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V24, V0, V47, V14, V10))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V345 = begin (V53 = ('Idris.Idris2.TTImp.Elab.Check':'un--argVar'(V0, V24, V22, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V26)), V17, V14, V41, V52))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V344 = case V57 of {'Builtin.MkPair', V58, V59} -> begin (V60 = {'Core.TT.App', V13, V12, V59}), begin (V64 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V24, <<"elab"/utf8>>, 10, fun () -> (begin (V62 = fun (V61) -> V61 end), fun (V63) -> (V62(V63)) end end(<<"...as"/utf8>>)) end, V59))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V343 = begin (V69 = ((V9(V36))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V59))))), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V342 = begin (V74 = ('un--checkAppWith'(V0, V24, V23, V22, V21, V20, V19, V18, V16, V15, V14, V13, V60, V73, {'Builtin.MkPair', V1, (V2 + 1)}, V7, V6, V5, V25, V3))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V341 = begin (V79 = {'Builtin.MkPair', V58, V59}), case V78 of {'Builtin.MkPair', V80, V81} -> begin (V87 = begin (V82 = V24), fun (V83) -> begin (V86 = (begin (V84 = V82), fun (V85) -> ('erlang':'get'(V84)) end end(V83))), {'Prelude.Types.Right', V86} end end end), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V340 = begin (V92 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V24, V0, V91, V14, V52))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V339 = begin (V103 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V24, <<"elab"/utf8>>, 10, fun () -> <<(begin (V98 = fun (V97) -> V97 end), fun (V99) -> (V98(V99)) end end(<<"Now trying "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V41))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V101, V102)) end end}, V26))/binary>>/binary>>/binary>> end, V14, V96))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V338 = begin (V194 = case ('un--onLHS'(case V16 of {'TTImp.Elab.Check.MkElabInfo', V108, V109, V110, V111, V112, V113} -> V108 end)) of 1 -> (case V96 of {'Core.Value.NApp', V114, V115, V116} -> case V115 of {'Core.Value.NMeta', V117, V118, V119} -> fun () -> begin (V152 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', V118}, case V91 of {'Core.Context.MkDefs', V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151} -> V120 end))), fun (V153) -> begin (V154 = (V152(V153))), case V154 of {'Prelude.Types.Left', V155} -> {'Prelude.Types.Left', V155}; {'Prelude.Types.Right', V156} -> (begin (V190 = case V156 of {'Prelude.Types.Just', V157} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V158) -> fun (V159) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V158, V159)) end end, 0, fun (V160) -> fun (V161) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V160, V161)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V162) -> fun (V163) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V162, V163)) end end, fun (V164) -> fun (V165) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V164, V165)) end end}}, case V157 of {'Core.Context.Context.MkGlobalDef', V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187} -> V173 end)) of 1 -> ('Idris.Idris2.Core.UnifyState':'un--addNoSolve'(V22, V118)); 0 -> fun (V188) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; {'Prelude.Types.Nothing'} -> fun (V189) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V190 end(V153)) end end end end end; _ -> fun () -> fun (V191) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end; _ -> fun () -> fun (V192) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end()); 0 -> fun (V193) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V195) -> begin (V196 = (V194(V195))), case V196 of {'Prelude.Types.Left', V197} -> {'Prelude.Types.Left', V197}; {'Prelude.Types.Right', V198} -> (begin (V337 = begin (V205 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V24, V23, V22, V21, V20, V19, V17, case V16 of {'TTImp.Elab.Check.MkElabInfo', V199, V200, V201, V202, V203, V204} -> {'TTImp.Elab.Check.MkElabInfo', V199, V200, 0, V202, V203, V204} end, V15, V14, V26, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V24, V0, V91, V14, V96))}))), fun (V206) -> begin (V207 = (V205(V206))), case V207 of {'Prelude.Types.Left', V208} -> {'Prelude.Types.Left', V208}; {'Prelude.Types.Right', V209} -> (begin (V336 = begin (V225 = case ('un--onLHS'(case V16 of {'TTImp.Elab.Check.MkElabInfo', V210, V211, V212, V213, V214, V215} -> V210 end)) of 1 -> (case V96 of {'Core.Value.NApp', V216, V217, V218} -> case V217 of {'Core.Value.NMeta', V219, V220, V221} -> fun () -> ('Idris.Idris2.Core.UnifyState':'un--removeNoSolve'(V22, V220)) end; _ -> fun () -> fun (V222) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end; _ -> fun () -> fun (V223) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end()); 0 -> fun (V224) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V226) -> begin (V227 = (V225(V226))), case V227 of {'Prelude.Types.Left', V228} -> {'Prelude.Types.Left', V228}; {'Prelude.Types.Right', V229} -> (begin (V335 = begin (V239 = case ('un--onLHS'(case V16 of {'TTImp.Elab.Check.MkElabInfo', V230, V231, V232, V233, V234, V235} -> V230 end)) of 1 -> case V209 of {'Builtin.MkPair', V236, V237} -> ('un--checkValidPattern'(V0, V24, V23, V22, V21, V18, V14, V13, V236, V237)) end; 0 -> fun (V238) -> {'Prelude.Types.Right', V209} end end), fun (V240) -> begin (V241 = (V239(V240))), case V241 of {'Prelude.Types.Left', V242} -> {'Prelude.Types.Left', V242}; {'Prelude.Types.Right', V243} -> (begin (V334 = begin (V244 = {'Builtin.MkPair', V80, V81}), case V243 of {'Builtin.MkPair', V245, V246} -> begin (V252 = begin (V247 = V24), fun (V248) -> begin (V251 = (begin (V249 = V247), fun (V250) -> ('erlang':'get'(V249)) end end(V248))), {'Prelude.Types.Right', V251} end end end), fun (V253) -> begin (V254 = (V252(V253))), case V254 of {'Prelude.Types.Left', V255} -> {'Prelude.Types.Left', V255}; {'Prelude.Types.Right', V256} -> (begin (V333 = begin (V257 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V24, <<"elab"/utf8>>, 10, fun () -> <<<<"Solving "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V59))/binary, <<" with"/utf8>>/binary>>/binary>> end, V245))), fun (V258) -> begin (V259 = (V257(V258))), case V259 of {'Prelude.Types.Left', V260} -> {'Prelude.Types.Left', V260}; {'Prelude.Types.Right', V261} -> (begin (V332 = begin (V262 = ('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V24, V22, V14, V59, V245))), fun (V263) -> begin (V264 = (V262(V263))), case V264 of {'Prelude.Types.Left', V265} -> {'Prelude.Types.Left', V265}; {'Prelude.Types.Right', V266} -> (begin (V331 = begin (V279 = begin (V267 = {'Builtin.MkPair', V245, V246}), case V266 of 1 -> fun (V268) -> {'Prelude.Types.Right', V80} end; 0 -> begin (V269 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V24, V22, V21, V13, V16, V14, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V14, V59)), ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V14, V245))))), fun (V270) -> begin (V271 = (V269(V270))), case V271 of {'Prelude.Types.Left', V272} -> {'Prelude.Types.Left', V272}; {'Prelude.Types.Right', V273} -> (begin (V278 = ('case--case block in case block in case block in case block in checkRestApp,checkRtoL-16768'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V26, V25, V36, V41, V47, V52, V58, V59, V79, V60, V73, V80, V81, V244, V91, V96, V209, V245, V246, V267, V256, V266, V273, case V273 of {'Core.Unify.MkUnifyResult', V274, V275, V276, V277} -> V274 end))), V278 end(V270)) end end end end end end), fun (V280) -> begin (V281 = (V279(V280))), case V281 of {'Prelude.Types.Left', V282} -> {'Prelude.Types.Left', V282}; {'Prelude.Types.Right', V283} -> (begin (V330 = begin (V317 = case ('un--onLHS'(case V16 of {'TTImp.Elab.Check.MkElabInfo', V284, V285, V286, V287, V288, V289} -> V284 end)) of 1 -> begin (V291 = ('Idris.Idris2.Core.Context':'un--updateDef'(V24, {'Core.Name.Resolved', V58}, fun (V290) -> {'Prelude.Types.Just', {'Core.Context.Context.Hole', 0, ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0))}} end))), fun (V292) -> begin (V293 = (V291(V292))), case V293 of {'Prelude.Types.Left', V294} -> {'Prelude.Types.Left', V294}; {'Prelude.Types.Right', V295} -> (begin (V315 = begin (V296 = ('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V24, V22, V14, V59, V245))), ((begin (V312 = fun (V307) -> fun (V308) -> fun (V309) -> fun (V310) -> fun (V311) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V309, V310, V311)) end end end end end), fun (V313) -> fun (V314) -> ((((V312('erased'))('erased'))(V313))(V314)) end end end((begin (V304 = fun (V298) -> fun (V299) -> fun (V300) -> fun (V301) -> case V301 of {'Prelude.Types.Left', V302} -> {'Prelude.Types.Left', V302}; {'Prelude.Types.Right', V303} -> {'Prelude.Types.Right', (V300(V303))} end end end end end), fun (V305) -> fun (V306) -> ((((V304('erased'))('erased'))(V305))(V306)) end end end(fun (V297) -> {'Builtin.MkUnit'} end))))(V296)) end), V315 end(V292)) end end end end; 0 -> fun (V316) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V318) -> begin (V319 = (V317(V318))), case V319 of {'Prelude.Types.Left', V320} -> {'Prelude.Types.Left', V320}; {'Prelude.Types.Right', V321} -> (begin (V329 = begin (V322 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V22, V58))), fun (V323) -> begin (V324 = (V322(V323))), case V324 of {'Prelude.Types.Left', V325} -> {'Prelude.Types.Left', V325}; {'Prelude.Types.Right', V326} -> (begin (V328 = fun (V327) -> {'Prelude.Types.Right', {'Builtin.MkPair', V283, V81}} end), V328 end(V323)) end end end end), V329 end(V318)) end end end end), V330 end(V280)) end end end end), V331 end(V263)) end end end end), V332 end(V258)) end end end end), V333 end(V253)) end end end end end end), V334 end(V240)) end end end end), V335 end(V226)) end end end end), V336 end(V206)) end end end end), V337 end(V195)) end end end end), V338 end(V104)) end end end end), V339 end(V93)) end end end end), V340 end(V88)) end end end end end end), V341 end(V75)) end end end end), V342 end(V70)) end end end end), V343 end(V65)) end end end end end end), V344 end(V54)) end end end end), V345 end(V49)) end end end end), V346 end(V44)) end end end end), V347 end(V38)) end end end end), V348 end(V33)) end end end end.
'nested--11609-15261--in--un--checkLtoR'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> begin (V32 = begin (V27 = V24), fun (V28) -> begin (V31 = (begin (V29 = V27), fun (V30) -> ('erlang':'get'(V29)) end end(V28))), {'Prelude.Types.Right', V31} end end end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V134 = begin (V37 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V24, <<"elab"/utf8>>, 10, fun () -> <<"Full function type"/utf8>> end, V14, {'Core.Value.NBind', V13, V11, {'Core.TT.Pi', V13, V17, {'Core.TT.Explicit'}, V10}, V9}))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V133 = begin (V71 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V24, <<"elab"/utf8>>, 10, begin (V61 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V42) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end, fun () -> fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V43))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V60 = begin (V53 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V24, {'Core.Context.dn--un--__mkHasNames', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V51, V52)) end end}, V48))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V59 = fun (V58) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V57}} end), V59 end(V54)) end end end end), V60 end(V45)) end end end end end end, V3))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V70 = fun (V66) -> {'Prelude.Types.Right', <<<<"Overall expected type: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V67) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V68, V69)) end end}, V65))/binary>>} end), V70 end(V62)) end end end end))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V132 = begin (V82 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V24, V23, V22, V21, V20, V19, V17, case V16 of {'TTImp.Elab.Check.MkElabInfo', V76, V77, V78, V79, V80, V81} -> {'TTImp.Elab.Check.MkElabInfo', V76, V77, 0, V79, V80, V81} end, V15, V14, V26, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueClosure'(V24, V0, V36, V14, V10))}))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V131 = begin (V96 = case ('un--onLHS'(case V16 of {'TTImp.Elab.Check.MkElabInfo', V87, V88, V89, V90, V91, V92} -> V87 end)) of 1 -> case V86 of {'Builtin.MkPair', V93, V94} -> ('un--checkValidPattern'(V0, V24, V23, V22, V21, V18, V14, V13, V93, V94)) end; 0 -> fun (V95) -> {'Prelude.Types.Right', V86} end end), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V130 = case V100 of {'Builtin.MkPair', V101, V102} -> begin (V106 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V24, <<"elab"/utf8>>, 10, fun () -> (begin (V104 = fun (V103) -> V103 end), fun (V105) -> (V104(V105)) end end(<<"Got arg type"/utf8>>)) end, V14, V102))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V129 = begin (V116 = begin (V111 = V24), fun (V112) -> begin (V115 = (begin (V113 = V111), fun (V114) -> ('erlang':'get'(V113)) end end(V112))), {'Prelude.Types.Right', V115} end end end), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V128 = begin (V121 = {'Core.TT.App', V13, V12, V101}), begin (V122 = ((V9(V120))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V101))))), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V127 = ('un--checkAppWith'(V0, V24, V23, V22, V21, V20, V19, V18, V16, V15, V14, V13, V121, V126, {'Builtin.MkPair', V1, (V2 + 1)}, V7, V6, V5, V25, V3))), V127 end(V123)) end end end end end), V128 end(V117)) end end end end), V129 end(V107)) end end end end end), V130 end(V97)) end end end end), V131 end(V83)) end end end end), V132 end(V72)) end end end end), V133 end(V38)) end end end end), V134 end(V33)) end end end end.
'nested--10071-11718--in--un--checkDeprecation'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V26, V27, V28, V29)) end end end end end end end, fun (V30) -> fun (V31) -> V31 end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V34, V35, V36)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V39, V40)) end end}, {'Core.Context.Context.Deprecate'}, case V10 of {'Core.Context.Context.MkGlobalDef', V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62} -> V52 end)) of 1 -> ('Idris.Idris2.Core.Context':'un--recordWarning'(V8, {'Core.Core.Deprecated', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V63) -> fun (V64) -> <<V63/binary, V64/binary>> end end, <<""/utf8>>}, fun (V65) -> V65 end, [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V10 of {'Core.Context.Context.MkGlobalDef', V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} -> V67 end)) | [<<" is deprecated and will be removed in a future version."/utf8>> | []]])), {'Prelude.Types.Just', {'Builtin.MkPair', V9, case V10 of {'Core.Context.Context.MkGlobalDef', V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109} -> V89 end}}})); 0 -> fun (V110) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'nested--21043-21251--in--un--boundSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'TTImp.Elab.Check.InLHS', V24} -> 1; _ -> case V22 of {'Core.TT.BI', V25} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--abs_Abs_Integer'(V25)), 100)); {'Core.TT.Str', V26} -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V26)), 10)); _ -> 1 end end.
'un--onLHS'(V0) -> case V0 of {'TTImp.Elab.Check.InLHS', V1} -> 1; _ -> 0 end.
'un--needsDelayLHS'(V0, V1) -> case V1 of {'TTImp.TTImp.IVar', V2, V3} -> fun (V4) -> {'Prelude.Types.Right', 1} end; {'TTImp.TTImp.IApp', V5, V6, V7} -> ('un--needsDelayLHS'(V0, V6)); {'TTImp.TTImp.IAutoApp', V8, V9, V10} -> ('un--needsDelayLHS'(V0, V9)); {'TTImp.TTImp.INamedApp', V11, V12, V13, V14} -> ('un--needsDelayLHS'(V0, V12)); {'TTImp.TTImp.IAlternative', V15, V16, V17} -> fun (V18) -> {'Prelude.Types.Right', 1} end; {'TTImp.TTImp.IAs', V19, V20, V21, V22, V23} -> ('un--needsDelayLHS'(V0, V23)); {'TTImp.TTImp.ISearch', V24, V25} -> fun (V26) -> {'Prelude.Types.Right', 1} end; {'TTImp.TTImp.IPrimVal', V27, V28} -> fun (V29) -> {'Prelude.Types.Right', 1} end; {'TTImp.TTImp.IType', V30} -> fun (V31) -> {'Prelude.Types.Right', 1} end; {'TTImp.TTImp.IWithUnambigNames', V32, V33, V34} -> ('un--needsDelayLHS'(V0, V34)); _ -> fun (V35) -> {'Prelude.Types.Right', 0} end end.
'un--needsDelayExpr'(V0, V1, V2) -> case V1 of 0 -> fun (V3) -> {'Prelude.Types.Right', 0} end; 1 -> case V2 of {'TTImp.TTImp.IVar', V4, V5} -> begin (V11 = begin (V6 = V0), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V59 = begin (V48 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V5, case V15 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V16 end))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V58 = fun (V53) -> {'Prelude.Types.Right', case V52 of [E0 | E1] -> (fun (V54, V55) -> case V55 of [E2 | E3] -> (fun (V56, V57) -> 1 end(E2, E3)); _ -> 0 end end(E0, E1)); _ -> 0 end} end), V58 end(V49)) end end end end), V59 end(V12)) end end end end; {'TTImp.TTImp.IApp', V60, V61, V62} -> ('un--needsDelayExpr'(V0, 1, V61)); {'TTImp.TTImp.IAutoApp', V63, V64, V65} -> ('un--needsDelayExpr'(V0, 1, V64)); {'TTImp.TTImp.INamedApp', V66, V67, V68, V69} -> ('un--needsDelayExpr'(V0, 1, V67)); {'TTImp.TTImp.ILam', V70, V71, V72, V73, V74, V75} -> fun (V76) -> {'Prelude.Types.Right', 1} end; {'TTImp.TTImp.ICase', V77, V78, V79, V80} -> fun (V81) -> {'Prelude.Types.Right', 1} end; {'TTImp.TTImp.ILocal', V82, V83, V84} -> fun (V85) -> {'Prelude.Types.Right', 1} end; {'TTImp.TTImp.IUpdate', V86, V87, V88} -> fun (V89) -> {'Prelude.Types.Right', 1} end; {'TTImp.TTImp.IAlternative', V90, V91, V92} -> fun (V93) -> {'Prelude.Types.Right', 1} end; {'TTImp.TTImp.ISearch', V94, V95} -> fun (V96) -> {'Prelude.Types.Right', 1} end; {'TTImp.TTImp.IRewrite', V97, V98, V99} -> fun (V100) -> {'Prelude.Types.Right', 1} end; _ -> fun (V101) -> {'Prelude.Types.Right', 0} end end end.
'un--needsDelay'(V0, V1, V2, V3) -> case V1 of {'TTImp.Elab.Check.InLHS', V4} -> ('un--needsDelayLHS'(V0, V3)); _ -> ('un--needsDelayExpr'(V0, V2, V3)) end.
'un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V17 of {'Builtin.MkPair', V23, V24} -> begin (V30 = begin (V25 = V1), fun (V26) -> begin (V29 = (begin (V27 = V25), fun (V28) -> ('erlang':'get'(V27)) end end(V26))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V96 = begin (V35 = ('Idris.Idris2.Core.UnifyState':'un--genMVName'(V1, V3, V14))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V95 = begin (V41 = fun (V40) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V34, V40)) end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V94 = begin (V46 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V45, V11, V15))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V93 = begin (V51 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V12, V8, V11, V39, V50))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V92 = begin (V56 = {'Core.TT.App', V12, V13, V55}), begin (V57 = ((V16(V34))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V11, V55))))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V91 = begin (V85 = case case V9 of {'TTImp.Elab.Check.MkElabInfo', V62, V63, V64, V65, V66, V67} -> V65 end of 1 -> begin (V73 = begin (V68 = V4), fun (V69) -> begin (V72 = (begin (V70 = V68), fun (V71) -> ('erlang':'get'(V70)) end end(V69))), {'Prelude.Types.Right', V72} end end end), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V83 = begin (V78 = V4), fun (V79) -> begin (V82 = (begin (V80 = V78), fun (V81) -> ('erlang':'put'(V80, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V39, V8, {'Core.TT.Implicit'}, V11, V55, V50, V77)))) end end(V79))), {'Prelude.Types.Right', V82} end end end), V83 end(V74)) end end end end; 0 -> fun (V84) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V90 = ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V9, V10, V11, V12, V56, V61, {'Builtin.MkPair', V23, (V24 + 1)}, V18, V19, V20, V21, V22))), V90 end(V86)) end end end end), V91 end(V58)) end end end end end), V92 end(V52)) end end end end), V93 end(V47)) end end end end), V94 end(V42)) end end end end), V95 end(V36)) end end end end), V96 end(V31)) end end end end end.
'un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V18 of {'Builtin.MkPair', V24, V25} -> case ('nested--11404-13852--in--un--metavarImp'(V0, V24, V25, V23, V22, V21, V20, V19, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V9 of {'TTImp.Elab.Check.MkElabInfo', V26, V27, V28, V29, V30, V31} -> V26 end)) of 1 -> begin (V37 = begin (V32 = V1), fun (V33) -> begin (V36 = (begin (V34 = V32), fun (V35) -> ('erlang':'get'(V34)) end end(V33))), {'Prelude.Types.Right', V36} end end end), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V96 = begin (V42 = ('Idris.Idris2.Core.UnifyState':'un--genMVName'(V1, V3, V14))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V95 = begin (V48 = fun (V47) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V41, V47)) end), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V94 = begin (V53 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V52, V11, V16))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V93 = begin (V58 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V12, V8, V11, V46, V57))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V92 = begin (V63 = {'Core.TT.App', V12, V13, V62}), begin (V64 = ((V17(V41))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V11, V62))))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V91 = begin (V85 = begin (V74 = begin (V69 = V4), fun (V70) -> begin (V73 = (begin (V71 = V69), fun (V72) -> ('erlang':'get'(V71)) end end(V70))), {'Prelude.Types.Right', V73} end end end), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V84 = begin (V79 = V4), fun (V80) -> begin (V83 = (begin (V81 = V79), fun (V82) -> ('erlang':'put'(V81, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V46, V8, {'Core.TT.AutoImplicit'}, V11, V62, V57, V78)))) end end(V80))), {'Prelude.Types.Right', V83} end end end), V84 end(V75)) end end end end), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V90 = ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V9, V10, V11, V12, V63, V68, {'Builtin.MkPair', V24, (V25 + 1)}, V19, V20, V21, V22, V23))), V90 end(V86)) end end end end), V91 end(V65)) end end end end end), V92 end(V59)) end end end end), V93 end(V54)) end end end end), V94 end(V49)) end end end end), V95 end(V43)) end end end end), V96 end(V38)) end end end end; 0 -> begin (V102 = begin (V97 = V1), fun (V98) -> begin (V101 = (begin (V99 = V97), fun (V100) -> ('erlang':'get'(V99)) end end(V98))), {'Prelude.Types.Right', V101} end end end), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V127 = begin (V108 = fun (V107) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V106, V107)) end), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V126 = begin (V113 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V112, V11, V15))), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V125 = begin (V118 = {'Core.TT.App', V12, V13, V117}), begin (V119 = ((V17(V106))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V11, V117))))), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V124 = ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V9, V10, V11, V12, V118, V123, {'Builtin.MkPair', V24, (V25 + 1)}, V19, V20, V21, V22, V23))), V124 end(V120)) end end end end end), V125 end(V114)) end end end end), V126 end(V109)) end end end end), V127 end(V103)) end end end end end end.
'un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V17 of {'Builtin.MkPair', V23, V24} -> case ('nested--11312-13556--in--un--metavarImp'(V0, V23, V24, V22, V21, V20, V19, V18, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V9 of {'TTImp.Elab.Check.MkElabInfo', V25, V26, V27, V28, V29, V30} -> V25 end)) of 1 -> begin (V36 = begin (V31 = V1), fun (V32) -> begin (V35 = (begin (V33 = V31), fun (V34) -> ('erlang':'get'(V33)) end end(V32))), {'Prelude.Types.Right', V35} end end end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V95 = begin (V41 = ('Idris.Idris2.Core.UnifyState':'un--genMVName'(V1, V3, V14))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V94 = begin (V47 = fun (V46) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V40, V46)) end), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V93 = begin (V52 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V51, V11, V15))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V92 = begin (V57 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V12, V8, V11, V45, V56))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V91 = begin (V62 = {'Core.TT.App', V12, V13, V61}), begin (V63 = ((V16(V40))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V11, V61))))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V90 = begin (V84 = begin (V73 = begin (V68 = V4), fun (V69) -> begin (V72 = (begin (V70 = V68), fun (V71) -> ('erlang':'get'(V70)) end end(V69))), {'Prelude.Types.Right', V72} end end end), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V83 = begin (V78 = V4), fun (V79) -> begin (V82 = (begin (V80 = V78), fun (V81) -> ('erlang':'put'(V80, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V45, V8, {'Core.TT.AutoImplicit'}, V11, V61, V56, V77)))) end end(V79))), {'Prelude.Types.Right', V82} end end end), V83 end(V74)) end end end end), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V89 = ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V9, V10, V11, V12, V62, V67, {'Builtin.MkPair', V23, (V24 + 1)}, V18, V19, V20, V21, V22))), V89 end(V85)) end end end end), V90 end(V64)) end end end end end), V91 end(V58)) end end end end), V92 end(V53)) end end end end), V93 end(V48)) end end end end), V94 end(V42)) end end end end), V95 end(V37)) end end end end; 0 -> begin (V101 = begin (V96 = V1), fun (V97) -> begin (V100 = (begin (V98 = V96), fun (V99) -> ('erlang':'get'(V98)) end end(V97))), {'Prelude.Types.Right', V100} end end end), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V170 = begin (V106 = ('Idris.Idris2.Core.UnifyState':'un--genMVName'(V1, V3, V14))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V169 = begin (V112 = fun (V111) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V105, V111)) end), fun (V113) -> begin (V114 = (V112(V113))), case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> (begin (V168 = begin (V118 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(('Idris.Idris2.Core.Normalise.Quote':'dn--un--quoteOpts_Quote_Closure'(V1, V0, {'Core.Normalise.Quote.MkQuoteOpts', 0, 0, {'Prelude.Types.Just', 10}}, V105, V11, V15)), fun (V117) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V116, V11, V15)) end))), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V167 = begin (V128 = begin (V123 = V4), fun (V124) -> begin (V127 = (begin (V125 = V123), fun (V126) -> ('erlang':'get'(V125)) end end(V124))), {'Prelude.Types.Right', V127} end end end), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V166 = begin (V133 = ('Idris.Idris2.Core.Context':'un--getAutoImplicitLimit'(V1))), fun (V134) -> begin (V135 = (V133(V134))), case V135 of {'Prelude.Types.Left', V136} -> {'Prelude.Types.Left', V136}; {'Prelude.Types.Right', V137} -> (begin (V165 = begin (V152 = ('Idris.Idris2.TTImp.Elab.Check':'un--searchVar'(V0, V1, V3, V12, V8, V137, {'Core.Name.Resolved', case V132 of {'TTImp.Elab.Check.MkEState', V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151} -> V139 end}, V11, V10, V110, V122))), fun (V153) -> begin (V154 = (V152(V153))), case V154 of {'Prelude.Types.Left', V155} -> {'Prelude.Types.Left', V155}; {'Prelude.Types.Right', V156} -> (begin (V164 = begin (V157 = {'Core.TT.App', V12, V13, V156}), begin (V158 = ((V16(V105))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V11, V156))))), fun (V159) -> begin (V160 = (V158(V159))), case V160 of {'Prelude.Types.Left', V161} -> {'Prelude.Types.Left', V161}; {'Prelude.Types.Right', V162} -> (begin (V163 = ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V9, V10, V11, V12, V157, V162, {'Builtin.MkPair', V23, (V24 + 1)}, V18, V19, V20, V21, V22))), V163 end(V159)) end end end end end), V164 end(V153)) end end end end), V165 end(V134)) end end end end), V166 end(V129)) end end end end), V167 end(V119)) end end end end), V168 end(V113)) end end end end), V169 end(V107)) end end end end), V170 end(V102)) end end end end end end.
'un--isImplicitAs'(V0) -> case V0 of {'TTImp.TTImp.IAs', V1, V2, V3, V4, V5} -> case V3 of 0 -> case V5 of {'TTImp.TTImp.Implicit', V6, V7} -> 1; _ -> 0 end; _ -> 0 end; _ -> 0 end.
'un--isHole'(V0) -> case V0 of {'Core.Value.NApp', V1, V2, V3} -> case V2 of {'Core.Value.NMeta', V4, V5, V6} -> 1; _ -> 0 end; _ -> 0 end.
'un--isBindAllExpPattern'(V0) -> case V0 of {'Core.Name.UN', V1} -> case V1 of {'Core.Name.Underscore'} -> 1; _ -> 0 end; _ -> 0 end.
'un--getVarType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('case--getVarType-12361'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, V9, begin (V14 = V6), V14 end)))).
'un--getNameType'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('case--getNameType-11797'(V0, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.Env':'un--defined'(V0, V8, V6)))).
'un--findNamed'(V0, V1) -> case ('Idris.Idris2.Data.List':'un--partition'(fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Builtin':'un--fst'(V2)), V0)) end, V1)) of {'Builtin.MkPair', V3, V4} -> case V3 of [E0 | E1] -> (fun (V5, V6) -> {'Prelude.Types.Just', {'Builtin.MkPair', V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V4))}} end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--findBindAllExpPattern'(V0) -> ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V3, V4)) end end}, {'Core.Name.UN', {'Core.Name.Underscore'}}, V0)).
'un--dotErased'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'TTImp.Elab.Check.InLHS', V8} -> case case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V9, V10)) end end, 0, fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V11, V12)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V15, V16)) end end}}, V8)) of 1 -> 0; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V17, V18)) end end, 0, fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V19, V20)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V23, V24)) end end}}, V6)) end of 1 -> begin (V30 = begin (V25 = V1), fun (V26) -> begin (V29 = (begin (V27 = V25), fun (V28) -> ('erlang':'get'(V27)) end end(V26))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V162 = begin (V35 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V34, V2))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V161 = begin (V40 = ('nested--11580-14462--in--un--countConstructors'(V0, V8, V7, V6, V4, V3, V2, V1, V39))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V160 = begin (V51 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.app.dot"/utf8>>, 50, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V45) -> fun (V46) -> <<V45/binary, V46/binary>> end end, <<""/utf8>>}, fun (V47) -> V47 end, [<<"Found "/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V49, V50)) end end}, V44)) | [<<" constructors for type"/utf8>> | []]]])) end, ('Idris.Idris2.Core.Env':'un--mkEnv'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V0)), V39))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V159 = case case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V56) -> fun (V57) -> case (V56 =:= V57) of 'false' -> 0; _ -> 1 end end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V58, V59)) end end}, V44, {'Prelude.Types.Just', 1})) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V60) -> fun (V61) -> case (V60 =:= V61) of 'false' -> 0; _ -> 1 end end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V62, V63)) end end}, V44, {'Prelude.Types.Just', 0})) end of 1 -> fun (V64) -> {'Prelude.Types.Right', V7} end; 0 -> begin (V99 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V65) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end, fun () -> fun (V66) -> ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V66, case V34 of {'Core.Context.MkDefs', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98} -> V67 end)) end end, V3))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V158 = fun (V104) -> case V103 of {'Prelude.Types.Just', V105} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V108, V109, V110)) end end end end end, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V113, V114, V115)) end end end end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V117)) end end, fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V121, V122, V123, V124)) end end end end end end end, fun (V125) -> fun (V126) -> V126 end end, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V129, V130, V131)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V132) -> fun (V133) -> case (V132 =:= V133) of 'false' -> 0; _ -> 1 end end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V134, V135)) end end}, V4, case V105 of {'Core.Context.Context.MkGlobalDef', V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157} -> V140 end)) of 1 -> {'Prelude.Types.Right', V7}; 0 -> {'Prelude.Types.Right', ('nested--11580-14463--in--un--dotTerm'(V0, V8, V7, V6, V4, V3, V2, V1, V7))} end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', ('nested--11580-14463--in--un--dotTerm'(V0, V8, V7, V6, V4, V3, V2, V1, V7))} end end), V158 end(V100)) end end end end end), V159 end(V52)) end end end end), V160 end(V41)) end end end end), V161 end(V36)) end end end end), V162 end(V31)) end end end end; 0 -> fun (V163) -> {'Prelude.Types.Right', V7} end end; _ -> fun (V164) -> {'Prelude.Types.Right', V7} end end.
'un--checkVisibleNS'(V0, V1, V2, V3) -> case V2 of {'Core.Name.NS', V4, V5} -> begin (V6 = ('Idris.Idris2.Core.Context':'un--isVisible'(V0, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V31 = case V10 of 1 -> begin (V11 = ('Idris.Idris2.Core.Context':'un--isAllPublic'(V0))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V29 = begin (V16 = ('Idris.Idris2.Core.Context':'un--getNS'(V0))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V28 = begin (V21 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V0))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> case case V15 of 1 -> 1; 0 -> ('Idris.Idris2.Core.Context':'un--visibleInAny'([V20 | V25], {'Core.Name.NS', V4, V5}, V3)) end of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvisibleName', V1, {'Core.Name.NS', V4, V5}, {'Prelude.Types.Nothing'}}, V26)) end end), V27 end(V22)) end end end end), V28 end(V17)) end end end end), V29 end(V12)) end end end end; 0 -> fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvisibleName', V1, {'Core.Name.NS', V4, V5}, {'Prelude.Types.Just', V4}}, V30)) end end), V31 end(V7)) end end end end; _ -> fun (V32) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'un--checkValidPattern'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.app.lhs"/utf8>>, 50, fun () -> <<<<"Checking that "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V8))/binary, <<" is a valid pattern"/utf8>>/binary>>/binary>> end))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V25 = case V8 of {'Core.TT.Bind', V15, V16, V17, V18} -> case V17 of {'Core.TT.Lam', V19, V20, V21, V22} -> ('Idris.Idris2.TTImp.Elab.Dot':'un--registerDot'(V0, V1, V2, V3, V4, V5, V6, V7, 2, V8, V9)); _ -> fun (V23) -> {'Prelude.Types.Right', {'Builtin.MkPair', V8, V9}} end end; _ -> fun (V24) -> {'Prelude.Types.Right', {'Builtin.MkPair', V8, V9}} end end), V25 end(V11)) end end end end.
'un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V17 of {'Builtin.MkPair', V24, V25} -> begin (V31 = begin (V26 = V1), fun (V27) -> begin (V30 = (begin (V28 = V26), fun (V29) -> ('erlang':'get'(V28)) end end(V27))), {'Prelude.Types.Right', V30} end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V81 = begin (V42 = ('un--dotErased'(V0, V1, V15, V24, V25, case V9 of {'TTImp.Elab.Check.MkElabInfo', V36, V37, V38, V39, V40, V41} -> V36 end, V8, V18))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V80 = begin (V54 = case V22 of 1 -> fun (V47) -> {'Prelude.Types.Right', 1} end; 0 -> begin (V48 = ((V16(V35))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V11, {'Core.TT.Erased', V12, {'Core.TT.Placeholder'}}))))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V53 = ('Idris.Idris2.TTImp.Elab.Check':'un--concrete'(V35, V11, V52))), V53 end(V49)) end end end end end), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V79 = begin (V59 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V35, V15))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V78 = begin (V70 = ('un--needsDelay'(V1, case V9 of {'TTImp.Elab.Check.MkElabInfo', V64, V65, V66, V67, V68, V69} -> V64 end, V58, V18))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V77 = case case case ('un--isHole'(V63)) of 1 -> V58; 0 -> 0 end of 1 -> 1; 0 -> V74 end of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, ('nested--11609-15260--in--un--checkRtoL'(V0, V24, V25, V23, V22, V21, V20, V19, V18, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V58, V46)), fun (V75) -> case ('nested--11609-15259--in--un--invalidArg'(V0, V24, V25, V23, V22, V21, V20, V19, V18, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V75)) of 1 -> ('nested--11609-15261--in--un--checkLtoR'(V0, V24, V25, V23, V22, V21, V20, V19, V18, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V58, V46)); 0 -> fun (V76) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V75, V76)) end end end)); 0 -> ('nested--11609-15261--in--un--checkLtoR'(V0, V24, V25, V23, V22, V21, V20, V19, V18, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V58, V46)) end), V77 end(V71)) end end end end), V78 end(V60)) end end end end), V79 end(V55)) end end end end), V80 end(V43)) end end end end), V81 end(V32)) end end end end end.
'un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V13 of {'Core.Value.NBind', V20, V21, V22, V23} -> case V22 of {'Core.TT.Pi', V24, V25, V26, V27} -> case V26 of {'Core.TT.Explicit'} -> case V15 of [E8 | E9] -> (fun (V28, V29) -> begin (V30 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V30, V8, V9, V10, V11, V12, V21, V27, V23, V14, V28, V29, V16, V17, V18, V19)) end end(E8, E9)); [] -> ('with--checkAppWith\x{27}-18226'(V21, V17, ('un--findNamed'(V21, V17)), V0, V24, V27, V25, V23, V20, V13, V19, V18, V16, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)); _ -> case V14 of {'Builtin.MkPair', V31, V32} -> case V15 of [E6 | E7] -> (fun (V33, V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function type"/utf8>> end, V10, V13))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V149 = begin (V40 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function "/utf8>> end, V12))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V148 = begin (V45 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V147 = begin (V50 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V146 = begin (V55 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V145 = begin (V64 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V60) -> fun (V61) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V60, V61)) end end, 0, fun (V62) -> fun (V63) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V62, V63)) end end, 1})), V10, V49, {'Core.TT.TType', V11, V59}))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V144 = begin (V69 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V68))), begin (V74 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V70) -> fun (V71) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V70, V71)) end end, 0, fun (V72) -> fun (V73) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V72, V73)) end end, 1})), V10, V54, {'Core.TT.TType', V11, V59}))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V143 = begin (V79 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V33, {'Prelude.Types.Just', V69}))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V142 = case V83 of {'Builtin.MkPair', V84, V85} -> begin (V86 = {'Core.TT.App', V11, V12, V84}), begin (V92 = begin (V87 = V1), fun (V88) -> begin (V91 = (begin (V89 = V87), fun (V90) -> ('erlang':'get'(V89)) end end(V88))), {'Prelude.Types.Right', V91} end end end), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V141 = begin (V97 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V96, V10, V78))), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V140 = begin (V102 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V49, {'Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V68}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V78))}))), begin (V106 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V104 = fun (V103) -> V103 end), fun (V105) -> (V104(V105)) end end(<<"Expected function type"/utf8>>)) end, V10, V102))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V139 = begin (V116 = case V19 of {'Prelude.Types.Just', V111} -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V113 = fun (V112) -> V112 end), fun (V114) -> (V113(V114)) end end(<<"Expected result type"/utf8>>)) end, V10, V111)); {'Prelude.Types.Nothing'} -> fun (V115) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V138 = begin (V121 = ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V86, V101, {'Builtin.MkPair', V31, (V32 + 1)}, V34, V16, V17, V18, V19))), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V137 = begin (V126 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V11, V8, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V96, V10, V13)), V102))), fun (V127) -> begin (V128 = (V126(V127))), case V128 of {'Prelude.Types.Left', V129} -> {'Prelude.Types.Left', V129}; {'Prelude.Types.Right', V130} -> (begin (V136 = begin (V131 = {'Builtin.MkPair', V84, V85}), ('case--case block in checkAppWith\x{27}-20267'(V31, V32, V33, V34, V0, V19, V18, V17, V16, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V49, V54, V59, V68, V69, V78, V84, V85, V131, V86, V96, V101, V102, V125, V130, case V130 of {'Core.Unify.MkUnifyResult', V132, V133, V134, V135} -> V132 end)) end), V136 end(V127)) end end end end), V137 end(V122)) end end end end), V138 end(V117)) end end end end), V139 end(V107)) end end end end end), V140 end(V98)) end end end end), V141 end(V93)) end end end end end end), V142 end(V80)) end end end end), V143 end(V75)) end end end end end), V144 end(V65)) end end end end), V145 end(V56)) end end end end), V146 end(V51)) end end end end), V147 end(V46)) end end end end), V148 end(V41)) end end end end), V149 end(V36)) end end end end end(E6, E7)); _ -> case V15 of [] -> begin (V155 = begin (V150 = V1), fun (V151) -> begin (V154 = (begin (V152 = V150), fun (V153) -> ('erlang':'get'(V152)) end end(V151))), {'Prelude.Types.Right', V154} end end end), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V189 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V160, V161)) end end, 1}, fun (V162) -> ('un--isImplicitAs'(V162)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V169 = fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V167, V168)) end end end end), fun (V170) -> fun (V171) -> ((((V169('erased'))('erased'))(V170))(V171)) end end end(fun (V164) -> ('Idris.Idris2.Builtin':'un--snd'(V164)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V163) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V163)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V159, V10, V13)), V19)); 0 -> fun (V172) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V178 = fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V176, V177)) end end end end), fun (V179) -> fun (V180) -> ((((V178('erased'))('erased'))(V179))(V180)) end end end(fun (V173) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V186 = fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V184, V185)) end end end end), fun (V187) -> fun (V188) -> ((((V186('erased'))('erased'))(V187))(V188)) end end end(fun (V181) -> ('Idris.Idris2.Builtin':'un--fst'(V181)) end))(V17)))), V12}, V172)) end end), V189 end(V156)) end end end end end end; _ -> case V15 of [] -> begin (V195 = begin (V190 = V1), fun (V191) -> begin (V194 = (begin (V192 = V190), fun (V193) -> ('erlang':'get'(V192)) end end(V191))), {'Prelude.Types.Right', V194} end end end), fun (V196) -> begin (V197 = (V195(V196))), case V197 of {'Prelude.Types.Left', V198} -> {'Prelude.Types.Left', V198}; {'Prelude.Types.Right', V199} -> (begin (V229 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V200, V201)) end end, 1}, fun (V202) -> ('un--isImplicitAs'(V202)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V209 = fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V207, V208)) end end end end), fun (V210) -> fun (V211) -> ((((V209('erased'))('erased'))(V210))(V211)) end end end(fun (V204) -> ('Idris.Idris2.Builtin':'un--snd'(V204)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V203) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V203)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V199, V10, V13)), V19)); 0 -> fun (V212) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V218 = fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V216, V217)) end end end end), fun (V219) -> fun (V220) -> ((((V218('erased'))('erased'))(V219))(V220)) end end end(fun (V213) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V226 = fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V224, V225)) end end end end), fun (V227) -> fun (V228) -> ((((V226('erased'))('erased'))(V227))(V228)) end end end(fun (V221) -> ('Idris.Idris2.Builtin':'un--fst'(V221)) end))(V17)))), V12}, V212)) end end), V229 end(V196)) end end end end end end end; {'Core.TT.Implicit'} -> case V15 of [] -> case V16 of [] -> case V17 of [] -> case V19 of {'Prelude.Types.Just', V230} -> begin (V231 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), begin (V232 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V230))), fun (V233) -> begin (V234 = (V232(V233))), case V234 of {'Prelude.Types.Left', V235} -> {'Prelude.Types.Left', V235}; {'Prelude.Types.Right', V236} -> (begin (V278 = begin (V242 = begin (V237 = V1), fun (V238) -> begin (V241 = (begin (V239 = V237), fun (V240) -> ('erlang':'get'(V239)) end end(V238))), {'Prelude.Types.Right', V241} end end end), fun (V243) -> begin (V244 = (V242(V243))), case V244 of {'Prelude.Types.Left', V245} -> {'Prelude.Types.Left', V245}; {'Prelude.Types.Right', V246} -> (begin (V277 = begin (V247 = {'Core.Value.NBind', V20, V21, {'Core.TT.Pi', V24, V25, {'Core.TT.Implicit'}, V27}, V23}), case V236 of {'Core.Value.NBind', V248, V249, V250, V251} -> case V250 of {'Core.TT.Pi', V252, V253, V254, V255} -> case V254 of {'Core.TT.Implicit'} -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V246, V10, V247)), {'Prelude.Types.Just', V230})); _ -> case case V8 of {'TTImp.Elab.Check.MkElabInfo', V256, V257, V258, V259, V260, V261} -> V260 end of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V246, V10, V247)), {'Prelude.Types.Just', V230})), fun (V262) -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V231, V8, V9, V10, V11, V12, V21, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V230})) end)); 0 -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V231, V8, V9, V10, V11, V12, V21, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V230})) end end; _ -> case case V8 of {'TTImp.Elab.Check.MkElabInfo', V263, V264, V265, V266, V267, V268} -> V267 end of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V246, V10, V247)), {'Prelude.Types.Just', V230})), fun (V269) -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V231, V8, V9, V10, V11, V12, V21, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V230})) end)); 0 -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V231, V8, V9, V10, V11, V12, V21, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V230})) end end; _ -> case case V8 of {'TTImp.Elab.Check.MkElabInfo', V270, V271, V272, V273, V274, V275} -> V274 end of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V246, V10, V247)), {'Prelude.Types.Just', V230})), fun (V276) -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V231, V8, V9, V10, V11, V12, V21, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V230})) end)); 0 -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V231, V8, V9, V10, V11, V12, V21, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V230})) end end end), V277 end(V243)) end end end end), V278 end(V233)) end end end end end; _ -> begin (V279 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Nothing'} -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V279, V8, V9, V10, V11, V12, V21, V27, V23, V14, V15, V16, V17, V18, V19)); {'Prelude.Types.Just', V280} -> case V280 of {'Builtin.MkPair', V281, V282} -> case V281 of {'Builtin.MkPair', V283, V284} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V279, V8, V9, V10, V11, V12, V21, V27, V23, V14, V284, V15, V16, V282, V18, V19)) end end end end end; _ -> begin (V285 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Nothing'} -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V285, V8, V9, V10, V11, V12, V21, V27, V23, V14, V15, V16, V17, V18, V19)); {'Prelude.Types.Just', V286} -> case V286 of {'Builtin.MkPair', V287, V288} -> case V287 of {'Builtin.MkPair', V289, V290} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V285, V8, V9, V10, V11, V12, V21, V27, V23, V14, V290, V15, V16, V288, V18, V19)) end end end end end; _ -> begin (V291 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Nothing'} -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V291, V8, V9, V10, V11, V12, V21, V27, V23, V14, V15, V16, V17, V18, V19)); {'Prelude.Types.Just', V292} -> case V292 of {'Builtin.MkPair', V293, V294} -> case V293 of {'Builtin.MkPair', V295, V296} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V291, V8, V9, V10, V11, V12, V21, V27, V23, V14, V296, V15, V16, V294, V18, V19)) end end end end end; _ -> begin (V297 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Nothing'} -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V297, V8, V9, V10, V11, V12, V21, V27, V23, V14, V15, V16, V17, V18, V19)); {'Prelude.Types.Just', V298} -> case V298 of {'Builtin.MkPair', V299, V300} -> case V299 of {'Builtin.MkPair', V301, V302} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V297, V8, V9, V10, V11, V12, V21, V27, V23, V14, V302, V15, V16, V300, V18, V19)) end end end end end; {'Core.TT.AutoImplicit'} -> case V15 of [] -> case V16 of [] -> case V17 of [] -> case V19 of {'Prelude.Types.Just', V303} -> begin (V304 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), begin (V305 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V303))), fun (V306) -> begin (V307 = (V305(V306))), case V307 of {'Prelude.Types.Left', V308} -> {'Prelude.Types.Left', V308}; {'Prelude.Types.Right', V309} -> (begin (V330 = begin (V315 = begin (V310 = V1), fun (V311) -> begin (V314 = (begin (V312 = V310), fun (V313) -> ('erlang':'get'(V312)) end end(V311))), {'Prelude.Types.Right', V314} end end end), fun (V316) -> begin (V317 = (V315(V316))), case V317 of {'Prelude.Types.Left', V318} -> {'Prelude.Types.Left', V318}; {'Prelude.Types.Right', V319} -> (begin (V329 = begin (V320 = {'Core.Value.NBind', V20, V21, {'Core.TT.Pi', V24, V25, {'Core.TT.AutoImplicit'}, V27}, V23}), case V309 of {'Core.Value.NBind', V321, V322, V323, V324} -> case V323 of {'Core.TT.Pi', V325, V326, V327, V328} -> case V327 of {'Core.TT.AutoImplicit'} -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V319, V10, V320)), {'Prelude.Types.Just', V303})); _ -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V304, V8, V9, V10, V11, V12, V21, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V303})) end; _ -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V304, V8, V9, V10, V11, V12, V21, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V303})) end; _ -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V304, V8, V9, V10, V11, V12, V21, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V303})) end end), V329 end(V316)) end end end end), V330 end(V306)) end end end end end; _ -> case V16 of [E24 | E25] -> (fun (V331, V332) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25)), V8, V9, V10, V11, V12, V21, V27, V23, V14, V331, V15, V332, V17, V18, V19)) end(E24, E25)); [] -> begin (V333 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Just', V334} -> case V334 of {'Builtin.MkPair', V335, V336} -> case V335 of {'Builtin.MkPair', V337, V338} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V333, V8, V9, V10, V11, V12, V21, V27, V23, V14, V338, V15, [], V336, V18, V19)) end end; {'Prelude.Types.Nothing'} -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V333, V8, V9, V10, V11, V12, V21, V27, V23, V14, V15, [], V17, V18, V19)) end end; _ -> case V14 of {'Builtin.MkPair', V339, V340} -> case V15 of [E22 | E23] -> (fun (V341, V342) -> begin (V343 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function type"/utf8>> end, V10, V13))), fun (V344) -> begin (V345 = (V343(V344))), case V345 of {'Prelude.Types.Left', V346} -> {'Prelude.Types.Left', V346}; {'Prelude.Types.Right', V347} -> (begin (V457 = begin (V348 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function "/utf8>> end, V12))), fun (V349) -> begin (V350 = (V348(V349))), case V350 of {'Prelude.Types.Left', V351} -> {'Prelude.Types.Left', V351}; {'Prelude.Types.Right', V352} -> (begin (V456 = begin (V353 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>))), fun (V354) -> begin (V355 = (V353(V354))), case V355 of {'Prelude.Types.Left', V356} -> {'Prelude.Types.Left', V356}; {'Prelude.Types.Right', V357} -> (begin (V455 = begin (V358 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>))), fun (V359) -> begin (V360 = (V358(V359))), case V360 of {'Prelude.Types.Left', V361} -> {'Prelude.Types.Left', V361}; {'Prelude.Types.Right', V362} -> (begin (V454 = begin (V363 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V364) -> begin (V365 = (V363(V364))), case V365 of {'Prelude.Types.Left', V366} -> {'Prelude.Types.Left', V366}; {'Prelude.Types.Right', V367} -> (begin (V453 = begin (V372 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V368) -> fun (V369) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V368, V369)) end end, 0, fun (V370) -> fun (V371) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V370, V371)) end end, 1})), V10, V357, {'Core.TT.TType', V11, V367}))), fun (V373) -> begin (V374 = (V372(V373))), case V374 of {'Prelude.Types.Left', V375} -> {'Prelude.Types.Left', V375}; {'Prelude.Types.Right', V376} -> (begin (V452 = begin (V377 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V376))), begin (V382 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V378) -> fun (V379) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V378, V379)) end end, 0, fun (V380) -> fun (V381) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V380, V381)) end end, 1})), V10, V362, {'Core.TT.TType', V11, V367}))), fun (V383) -> begin (V384 = (V382(V383))), case V384 of {'Prelude.Types.Left', V385} -> {'Prelude.Types.Left', V385}; {'Prelude.Types.Right', V386} -> (begin (V451 = begin (V387 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V341, {'Prelude.Types.Just', V377}))), fun (V388) -> begin (V389 = (V387(V388))), case V389 of {'Prelude.Types.Left', V390} -> {'Prelude.Types.Left', V390}; {'Prelude.Types.Right', V391} -> (begin (V450 = case V391 of {'Builtin.MkPair', V392, V393} -> begin (V394 = {'Core.TT.App', V11, V12, V392}), begin (V400 = begin (V395 = V1), fun (V396) -> begin (V399 = (begin (V397 = V395), fun (V398) -> ('erlang':'get'(V397)) end end(V396))), {'Prelude.Types.Right', V399} end end end), fun (V401) -> begin (V402 = (V400(V401))), case V402 of {'Prelude.Types.Left', V403} -> {'Prelude.Types.Left', V403}; {'Prelude.Types.Right', V404} -> (begin (V449 = begin (V405 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V404, V10, V386))), fun (V406) -> begin (V407 = (V405(V406))), case V407 of {'Prelude.Types.Left', V408} -> {'Prelude.Types.Left', V408}; {'Prelude.Types.Right', V409} -> (begin (V448 = begin (V410 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V357, {'Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V376}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V386))}))), begin (V414 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V412 = fun (V411) -> V411 end), fun (V413) -> (V412(V413)) end end(<<"Expected function type"/utf8>>)) end, V10, V410))), fun (V415) -> begin (V416 = (V414(V415))), case V416 of {'Prelude.Types.Left', V417} -> {'Prelude.Types.Left', V417}; {'Prelude.Types.Right', V418} -> (begin (V447 = begin (V424 = case V19 of {'Prelude.Types.Just', V419} -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V421 = fun (V420) -> V420 end), fun (V422) -> (V421(V422)) end end(<<"Expected result type"/utf8>>)) end, V10, V419)); {'Prelude.Types.Nothing'} -> fun (V423) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V425) -> begin (V426 = (V424(V425))), case V426 of {'Prelude.Types.Left', V427} -> {'Prelude.Types.Left', V427}; {'Prelude.Types.Right', V428} -> (begin (V446 = begin (V429 = ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V394, V409, {'Builtin.MkPair', V339, (V340 + 1)}, V342, V16, V17, V18, V19))), fun (V430) -> begin (V431 = (V429(V430))), case V431 of {'Prelude.Types.Left', V432} -> {'Prelude.Types.Left', V432}; {'Prelude.Types.Right', V433} -> (begin (V445 = begin (V434 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V11, V8, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V404, V10, V13)), V410))), fun (V435) -> begin (V436 = (V434(V435))), case V436 of {'Prelude.Types.Left', V437} -> {'Prelude.Types.Left', V437}; {'Prelude.Types.Right', V438} -> (begin (V444 = begin (V439 = {'Builtin.MkPair', V392, V393}), ('case--case block in checkAppWith\x{27}-20267'(V339, V340, V341, V342, V0, V19, V18, V17, V16, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V357, V362, V367, V376, V377, V386, V392, V393, V439, V394, V404, V409, V410, V433, V438, case V438 of {'Core.Unify.MkUnifyResult', V440, V441, V442, V443} -> V440 end)) end), V444 end(V435)) end end end end), V445 end(V430)) end end end end), V446 end(V425)) end end end end), V447 end(V415)) end end end end end), V448 end(V406)) end end end end), V449 end(V401)) end end end end end end), V450 end(V388)) end end end end), V451 end(V383)) end end end end end), V452 end(V373)) end end end end), V453 end(V364)) end end end end), V454 end(V359)) end end end end), V455 end(V354)) end end end end), V456 end(V349)) end end end end), V457 end(V344)) end end end end end(E22, E23)); _ -> case V15 of [] -> begin (V463 = begin (V458 = V1), fun (V459) -> begin (V462 = (begin (V460 = V458), fun (V461) -> ('erlang':'get'(V460)) end end(V459))), {'Prelude.Types.Right', V462} end end end), fun (V464) -> begin (V465 = (V463(V464))), case V465 of {'Prelude.Types.Left', V466} -> {'Prelude.Types.Left', V466}; {'Prelude.Types.Right', V467} -> (begin (V497 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V468) -> fun (V469) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V468, V469)) end end, 1}, fun (V470) -> ('un--isImplicitAs'(V470)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V477 = fun (V473) -> fun (V474) -> fun (V475) -> fun (V476) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V475, V476)) end end end end), fun (V478) -> fun (V479) -> ((((V477('erased'))('erased'))(V478))(V479)) end end end(fun (V472) -> ('Idris.Idris2.Builtin':'un--snd'(V472)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V471) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V471)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V467, V10, V13)), V19)); 0 -> fun (V480) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V486 = fun (V482) -> fun (V483) -> fun (V484) -> fun (V485) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V484, V485)) end end end end), fun (V487) -> fun (V488) -> ((((V486('erased'))('erased'))(V487))(V488)) end end end(fun (V481) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V494 = fun (V490) -> fun (V491) -> fun (V492) -> fun (V493) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V492, V493)) end end end end), fun (V495) -> fun (V496) -> ((((V494('erased'))('erased'))(V495))(V496)) end end end(fun (V489) -> ('Idris.Idris2.Builtin':'un--fst'(V489)) end))(V17)))), V12}, V480)) end end), V497 end(V464)) end end end end end end; _ -> case V15 of [] -> begin (V503 = begin (V498 = V1), fun (V499) -> begin (V502 = (begin (V500 = V498), fun (V501) -> ('erlang':'get'(V500)) end end(V499))), {'Prelude.Types.Right', V502} end end end), fun (V504) -> begin (V505 = (V503(V504))), case V505 of {'Prelude.Types.Left', V506} -> {'Prelude.Types.Left', V506}; {'Prelude.Types.Right', V507} -> (begin (V537 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V508) -> fun (V509) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V508, V509)) end end, 1}, fun (V510) -> ('un--isImplicitAs'(V510)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V517 = fun (V513) -> fun (V514) -> fun (V515) -> fun (V516) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V515, V516)) end end end end), fun (V518) -> fun (V519) -> ((((V517('erased'))('erased'))(V518))(V519)) end end end(fun (V512) -> ('Idris.Idris2.Builtin':'un--snd'(V512)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V511) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V511)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V507, V10, V13)), V19)); 0 -> fun (V520) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V526 = fun (V522) -> fun (V523) -> fun (V524) -> fun (V525) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V524, V525)) end end end end), fun (V527) -> fun (V528) -> ((((V526('erased'))('erased'))(V527))(V528)) end end end(fun (V521) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V534 = fun (V530) -> fun (V531) -> fun (V532) -> fun (V533) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V532, V533)) end end end end), fun (V535) -> fun (V536) -> ((((V534('erased'))('erased'))(V535))(V536)) end end end(fun (V529) -> ('Idris.Idris2.Builtin':'un--fst'(V529)) end))(V17)))), V12}, V520)) end end), V537 end(V504)) end end end end end end end end; _ -> case V16 of [E20 | E21] -> (fun (V538, V539) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25)), V8, V9, V10, V11, V12, V21, V27, V23, V14, V538, V15, V539, V17, V18, V19)) end(E20, E21)); [] -> begin (V540 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Just', V541} -> case V541 of {'Builtin.MkPair', V542, V543} -> case V542 of {'Builtin.MkPair', V544, V545} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V540, V8, V9, V10, V11, V12, V21, V27, V23, V14, V545, V15, [], V543, V18, V19)) end end; {'Prelude.Types.Nothing'} -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V540, V8, V9, V10, V11, V12, V21, V27, V23, V14, V15, [], V17, V18, V19)) end end; _ -> case V14 of {'Builtin.MkPair', V546, V547} -> case V15 of [E18 | E19] -> (fun (V548, V549) -> begin (V550 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function type"/utf8>> end, V10, V13))), fun (V551) -> begin (V552 = (V550(V551))), case V552 of {'Prelude.Types.Left', V553} -> {'Prelude.Types.Left', V553}; {'Prelude.Types.Right', V554} -> (begin (V664 = begin (V555 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function "/utf8>> end, V12))), fun (V556) -> begin (V557 = (V555(V556))), case V557 of {'Prelude.Types.Left', V558} -> {'Prelude.Types.Left', V558}; {'Prelude.Types.Right', V559} -> (begin (V663 = begin (V560 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>))), fun (V561) -> begin (V562 = (V560(V561))), case V562 of {'Prelude.Types.Left', V563} -> {'Prelude.Types.Left', V563}; {'Prelude.Types.Right', V564} -> (begin (V662 = begin (V565 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>))), fun (V566) -> begin (V567 = (V565(V566))), case V567 of {'Prelude.Types.Left', V568} -> {'Prelude.Types.Left', V568}; {'Prelude.Types.Right', V569} -> (begin (V661 = begin (V570 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V571) -> begin (V572 = (V570(V571))), case V572 of {'Prelude.Types.Left', V573} -> {'Prelude.Types.Left', V573}; {'Prelude.Types.Right', V574} -> (begin (V660 = begin (V579 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V575) -> fun (V576) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V575, V576)) end end, 0, fun (V577) -> fun (V578) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V577, V578)) end end, 1})), V10, V564, {'Core.TT.TType', V11, V574}))), fun (V580) -> begin (V581 = (V579(V580))), case V581 of {'Prelude.Types.Left', V582} -> {'Prelude.Types.Left', V582}; {'Prelude.Types.Right', V583} -> (begin (V659 = begin (V584 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V583))), begin (V589 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V585) -> fun (V586) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V585, V586)) end end, 0, fun (V587) -> fun (V588) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V587, V588)) end end, 1})), V10, V569, {'Core.TT.TType', V11, V574}))), fun (V590) -> begin (V591 = (V589(V590))), case V591 of {'Prelude.Types.Left', V592} -> {'Prelude.Types.Left', V592}; {'Prelude.Types.Right', V593} -> (begin (V658 = begin (V594 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V548, {'Prelude.Types.Just', V584}))), fun (V595) -> begin (V596 = (V594(V595))), case V596 of {'Prelude.Types.Left', V597} -> {'Prelude.Types.Left', V597}; {'Prelude.Types.Right', V598} -> (begin (V657 = case V598 of {'Builtin.MkPair', V599, V600} -> begin (V601 = {'Core.TT.App', V11, V12, V599}), begin (V607 = begin (V602 = V1), fun (V603) -> begin (V606 = (begin (V604 = V602), fun (V605) -> ('erlang':'get'(V604)) end end(V603))), {'Prelude.Types.Right', V606} end end end), fun (V608) -> begin (V609 = (V607(V608))), case V609 of {'Prelude.Types.Left', V610} -> {'Prelude.Types.Left', V610}; {'Prelude.Types.Right', V611} -> (begin (V656 = begin (V612 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V611, V10, V593))), fun (V613) -> begin (V614 = (V612(V613))), case V614 of {'Prelude.Types.Left', V615} -> {'Prelude.Types.Left', V615}; {'Prelude.Types.Right', V616} -> (begin (V655 = begin (V617 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V564, {'Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V583}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V593))}))), begin (V621 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V619 = fun (V618) -> V618 end), fun (V620) -> (V619(V620)) end end(<<"Expected function type"/utf8>>)) end, V10, V617))), fun (V622) -> begin (V623 = (V621(V622))), case V623 of {'Prelude.Types.Left', V624} -> {'Prelude.Types.Left', V624}; {'Prelude.Types.Right', V625} -> (begin (V654 = begin (V631 = case V19 of {'Prelude.Types.Just', V626} -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V628 = fun (V627) -> V627 end), fun (V629) -> (V628(V629)) end end(<<"Expected result type"/utf8>>)) end, V10, V626)); {'Prelude.Types.Nothing'} -> fun (V630) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V632) -> begin (V633 = (V631(V632))), case V633 of {'Prelude.Types.Left', V634} -> {'Prelude.Types.Left', V634}; {'Prelude.Types.Right', V635} -> (begin (V653 = begin (V636 = ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V601, V616, {'Builtin.MkPair', V546, (V547 + 1)}, V549, V16, V17, V18, V19))), fun (V637) -> begin (V638 = (V636(V637))), case V638 of {'Prelude.Types.Left', V639} -> {'Prelude.Types.Left', V639}; {'Prelude.Types.Right', V640} -> (begin (V652 = begin (V641 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V11, V8, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V611, V10, V13)), V617))), fun (V642) -> begin (V643 = (V641(V642))), case V643 of {'Prelude.Types.Left', V644} -> {'Prelude.Types.Left', V644}; {'Prelude.Types.Right', V645} -> (begin (V651 = begin (V646 = {'Builtin.MkPair', V599, V600}), ('case--case block in checkAppWith\x{27}-20267'(V546, V547, V548, V549, V0, V19, V18, V17, V16, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V564, V569, V574, V583, V584, V593, V599, V600, V646, V601, V611, V616, V617, V640, V645, case V645 of {'Core.Unify.MkUnifyResult', V647, V648, V649, V650} -> V647 end)) end), V651 end(V642)) end end end end), V652 end(V637)) end end end end), V653 end(V632)) end end end end), V654 end(V622)) end end end end end), V655 end(V613)) end end end end), V656 end(V608)) end end end end end end), V657 end(V595)) end end end end), V658 end(V590)) end end end end end), V659 end(V580)) end end end end), V660 end(V571)) end end end end), V661 end(V566)) end end end end), V662 end(V561)) end end end end), V663 end(V556)) end end end end), V664 end(V551)) end end end end end(E18, E19)); _ -> case V15 of [] -> begin (V670 = begin (V665 = V1), fun (V666) -> begin (V669 = (begin (V667 = V665), fun (V668) -> ('erlang':'get'(V667)) end end(V666))), {'Prelude.Types.Right', V669} end end end), fun (V671) -> begin (V672 = (V670(V671))), case V672 of {'Prelude.Types.Left', V673} -> {'Prelude.Types.Left', V673}; {'Prelude.Types.Right', V674} -> (begin (V704 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V675) -> fun (V676) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V675, V676)) end end, 1}, fun (V677) -> ('un--isImplicitAs'(V677)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V684 = fun (V680) -> fun (V681) -> fun (V682) -> fun (V683) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V682, V683)) end end end end), fun (V685) -> fun (V686) -> ((((V684('erased'))('erased'))(V685))(V686)) end end end(fun (V679) -> ('Idris.Idris2.Builtin':'un--snd'(V679)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V678) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V678)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V674, V10, V13)), V19)); 0 -> fun (V687) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V693 = fun (V689) -> fun (V690) -> fun (V691) -> fun (V692) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V691, V692)) end end end end), fun (V694) -> fun (V695) -> ((((V693('erased'))('erased'))(V694))(V695)) end end end(fun (V688) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V701 = fun (V697) -> fun (V698) -> fun (V699) -> fun (V700) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V699, V700)) end end end end), fun (V702) -> fun (V703) -> ((((V701('erased'))('erased'))(V702))(V703)) end end end(fun (V696) -> ('Idris.Idris2.Builtin':'un--fst'(V696)) end))(V17)))), V12}, V687)) end end), V704 end(V671)) end end end end end end; _ -> case V15 of [] -> begin (V710 = begin (V705 = V1), fun (V706) -> begin (V709 = (begin (V707 = V705), fun (V708) -> ('erlang':'get'(V707)) end end(V706))), {'Prelude.Types.Right', V709} end end end), fun (V711) -> begin (V712 = (V710(V711))), case V712 of {'Prelude.Types.Left', V713} -> {'Prelude.Types.Left', V713}; {'Prelude.Types.Right', V714} -> (begin (V744 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V715) -> fun (V716) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V715, V716)) end end, 1}, fun (V717) -> ('un--isImplicitAs'(V717)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V724 = fun (V720) -> fun (V721) -> fun (V722) -> fun (V723) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V722, V723)) end end end end), fun (V725) -> fun (V726) -> ((((V724('erased'))('erased'))(V725))(V726)) end end end(fun (V719) -> ('Idris.Idris2.Builtin':'un--snd'(V719)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V718) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V718)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V714, V10, V13)), V19)); 0 -> fun (V727) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V733 = fun (V729) -> fun (V730) -> fun (V731) -> fun (V732) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V731, V732)) end end end end), fun (V734) -> fun (V735) -> ((((V733('erased'))('erased'))(V734))(V735)) end end end(fun (V728) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V741 = fun (V737) -> fun (V738) -> fun (V739) -> fun (V740) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V739, V740)) end end end end), fun (V742) -> fun (V743) -> ((((V741('erased'))('erased'))(V742))(V743)) end end end(fun (V736) -> ('Idris.Idris2.Builtin':'un--fst'(V736)) end))(V17)))), V12}, V727)) end end), V744 end(V711)) end end end end end end end end; _ -> case V16 of [E16 | E17] -> (fun (V745, V746) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25)), V8, V9, V10, V11, V12, V21, V27, V23, V14, V745, V15, V746, V17, V18, V19)) end(E16, E17)); [] -> begin (V747 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Just', V748} -> case V748 of {'Builtin.MkPair', V749, V750} -> case V749 of {'Builtin.MkPair', V751, V752} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V747, V8, V9, V10, V11, V12, V21, V27, V23, V14, V752, V15, [], V750, V18, V19)) end end; {'Prelude.Types.Nothing'} -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V747, V8, V9, V10, V11, V12, V21, V27, V23, V14, V15, [], V17, V18, V19)) end end; _ -> case V14 of {'Builtin.MkPair', V753, V754} -> case V15 of [E14 | E15] -> (fun (V755, V756) -> begin (V757 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function type"/utf8>> end, V10, V13))), fun (V758) -> begin (V759 = (V757(V758))), case V759 of {'Prelude.Types.Left', V760} -> {'Prelude.Types.Left', V760}; {'Prelude.Types.Right', V761} -> (begin (V871 = begin (V762 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function "/utf8>> end, V12))), fun (V763) -> begin (V764 = (V762(V763))), case V764 of {'Prelude.Types.Left', V765} -> {'Prelude.Types.Left', V765}; {'Prelude.Types.Right', V766} -> (begin (V870 = begin (V767 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>))), fun (V768) -> begin (V769 = (V767(V768))), case V769 of {'Prelude.Types.Left', V770} -> {'Prelude.Types.Left', V770}; {'Prelude.Types.Right', V771} -> (begin (V869 = begin (V772 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>))), fun (V773) -> begin (V774 = (V772(V773))), case V774 of {'Prelude.Types.Left', V775} -> {'Prelude.Types.Left', V775}; {'Prelude.Types.Right', V776} -> (begin (V868 = begin (V777 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V778) -> begin (V779 = (V777(V778))), case V779 of {'Prelude.Types.Left', V780} -> {'Prelude.Types.Left', V780}; {'Prelude.Types.Right', V781} -> (begin (V867 = begin (V786 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V782) -> fun (V783) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V782, V783)) end end, 0, fun (V784) -> fun (V785) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V784, V785)) end end, 1})), V10, V771, {'Core.TT.TType', V11, V781}))), fun (V787) -> begin (V788 = (V786(V787))), case V788 of {'Prelude.Types.Left', V789} -> {'Prelude.Types.Left', V789}; {'Prelude.Types.Right', V790} -> (begin (V866 = begin (V791 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V790))), begin (V796 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V792) -> fun (V793) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V792, V793)) end end, 0, fun (V794) -> fun (V795) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V794, V795)) end end, 1})), V10, V776, {'Core.TT.TType', V11, V781}))), fun (V797) -> begin (V798 = (V796(V797))), case V798 of {'Prelude.Types.Left', V799} -> {'Prelude.Types.Left', V799}; {'Prelude.Types.Right', V800} -> (begin (V865 = begin (V801 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V755, {'Prelude.Types.Just', V791}))), fun (V802) -> begin (V803 = (V801(V802))), case V803 of {'Prelude.Types.Left', V804} -> {'Prelude.Types.Left', V804}; {'Prelude.Types.Right', V805} -> (begin (V864 = case V805 of {'Builtin.MkPair', V806, V807} -> begin (V808 = {'Core.TT.App', V11, V12, V806}), begin (V814 = begin (V809 = V1), fun (V810) -> begin (V813 = (begin (V811 = V809), fun (V812) -> ('erlang':'get'(V811)) end end(V810))), {'Prelude.Types.Right', V813} end end end), fun (V815) -> begin (V816 = (V814(V815))), case V816 of {'Prelude.Types.Left', V817} -> {'Prelude.Types.Left', V817}; {'Prelude.Types.Right', V818} -> (begin (V863 = begin (V819 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V818, V10, V800))), fun (V820) -> begin (V821 = (V819(V820))), case V821 of {'Prelude.Types.Left', V822} -> {'Prelude.Types.Left', V822}; {'Prelude.Types.Right', V823} -> (begin (V862 = begin (V824 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V771, {'Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V790}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V800))}))), begin (V828 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V826 = fun (V825) -> V825 end), fun (V827) -> (V826(V827)) end end(<<"Expected function type"/utf8>>)) end, V10, V824))), fun (V829) -> begin (V830 = (V828(V829))), case V830 of {'Prelude.Types.Left', V831} -> {'Prelude.Types.Left', V831}; {'Prelude.Types.Right', V832} -> (begin (V861 = begin (V838 = case V19 of {'Prelude.Types.Just', V833} -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V835 = fun (V834) -> V834 end), fun (V836) -> (V835(V836)) end end(<<"Expected result type"/utf8>>)) end, V10, V833)); {'Prelude.Types.Nothing'} -> fun (V837) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V839) -> begin (V840 = (V838(V839))), case V840 of {'Prelude.Types.Left', V841} -> {'Prelude.Types.Left', V841}; {'Prelude.Types.Right', V842} -> (begin (V860 = begin (V843 = ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V808, V823, {'Builtin.MkPair', V753, (V754 + 1)}, V756, V16, V17, V18, V19))), fun (V844) -> begin (V845 = (V843(V844))), case V845 of {'Prelude.Types.Left', V846} -> {'Prelude.Types.Left', V846}; {'Prelude.Types.Right', V847} -> (begin (V859 = begin (V848 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V11, V8, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V818, V10, V13)), V824))), fun (V849) -> begin (V850 = (V848(V849))), case V850 of {'Prelude.Types.Left', V851} -> {'Prelude.Types.Left', V851}; {'Prelude.Types.Right', V852} -> (begin (V858 = begin (V853 = {'Builtin.MkPair', V806, V807}), ('case--case block in checkAppWith\x{27}-20267'(V753, V754, V755, V756, V0, V19, V18, V17, V16, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V771, V776, V781, V790, V791, V800, V806, V807, V853, V808, V818, V823, V824, V847, V852, case V852 of {'Core.Unify.MkUnifyResult', V854, V855, V856, V857} -> V854 end)) end), V858 end(V849)) end end end end), V859 end(V844)) end end end end), V860 end(V839)) end end end end), V861 end(V829)) end end end end end), V862 end(V820)) end end end end), V863 end(V815)) end end end end end end), V864 end(V802)) end end end end), V865 end(V797)) end end end end end), V866 end(V787)) end end end end), V867 end(V778)) end end end end), V868 end(V773)) end end end end), V869 end(V768)) end end end end), V870 end(V763)) end end end end), V871 end(V758)) end end end end end(E14, E15)); _ -> case V15 of [] -> begin (V877 = begin (V872 = V1), fun (V873) -> begin (V876 = (begin (V874 = V872), fun (V875) -> ('erlang':'get'(V874)) end end(V873))), {'Prelude.Types.Right', V876} end end end), fun (V878) -> begin (V879 = (V877(V878))), case V879 of {'Prelude.Types.Left', V880} -> {'Prelude.Types.Left', V880}; {'Prelude.Types.Right', V881} -> (begin (V911 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V882) -> fun (V883) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V882, V883)) end end, 1}, fun (V884) -> ('un--isImplicitAs'(V884)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V891 = fun (V887) -> fun (V888) -> fun (V889) -> fun (V890) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V889, V890)) end end end end), fun (V892) -> fun (V893) -> ((((V891('erased'))('erased'))(V892))(V893)) end end end(fun (V886) -> ('Idris.Idris2.Builtin':'un--snd'(V886)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V885) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V885)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V881, V10, V13)), V19)); 0 -> fun (V894) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V900 = fun (V896) -> fun (V897) -> fun (V898) -> fun (V899) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V898, V899)) end end end end), fun (V901) -> fun (V902) -> ((((V900('erased'))('erased'))(V901))(V902)) end end end(fun (V895) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V908 = fun (V904) -> fun (V905) -> fun (V906) -> fun (V907) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V906, V907)) end end end end), fun (V909) -> fun (V910) -> ((((V908('erased'))('erased'))(V909))(V910)) end end end(fun (V903) -> ('Idris.Idris2.Builtin':'un--fst'(V903)) end))(V17)))), V12}, V894)) end end), V911 end(V878)) end end end end end end; _ -> case V15 of [] -> begin (V917 = begin (V912 = V1), fun (V913) -> begin (V916 = (begin (V914 = V912), fun (V915) -> ('erlang':'get'(V914)) end end(V913))), {'Prelude.Types.Right', V916} end end end), fun (V918) -> begin (V919 = (V917(V918))), case V919 of {'Prelude.Types.Left', V920} -> {'Prelude.Types.Left', V920}; {'Prelude.Types.Right', V921} -> (begin (V951 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V922) -> fun (V923) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V922, V923)) end end, 1}, fun (V924) -> ('un--isImplicitAs'(V924)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V931 = fun (V927) -> fun (V928) -> fun (V929) -> fun (V930) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V929, V930)) end end end end), fun (V932) -> fun (V933) -> ((((V931('erased'))('erased'))(V932))(V933)) end end end(fun (V926) -> ('Idris.Idris2.Builtin':'un--snd'(V926)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V925) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V925)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V921, V10, V13)), V19)); 0 -> fun (V934) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V940 = fun (V936) -> fun (V937) -> fun (V938) -> fun (V939) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V938, V939)) end end end end), fun (V941) -> fun (V942) -> ((((V940('erased'))('erased'))(V941))(V942)) end end end(fun (V935) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V948 = fun (V944) -> fun (V945) -> fun (V946) -> fun (V947) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V946, V947)) end end end end), fun (V949) -> fun (V950) -> ((((V948('erased'))('erased'))(V949))(V950)) end end end(fun (V943) -> ('Idris.Idris2.Builtin':'un--fst'(V943)) end))(V17)))), V12}, V934)) end end), V951 end(V918)) end end end end end end end end; _ -> case V16 of [E12 | E13] -> (fun (V952, V953) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25)), V8, V9, V10, V11, V12, V21, V27, V23, V14, V952, V15, V953, V17, V18, V19)) end(E12, E13)); [] -> begin (V954 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Just', V955} -> case V955 of {'Builtin.MkPair', V956, V957} -> case V956 of {'Builtin.MkPair', V958, V959} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V954, V8, V9, V10, V11, V12, V21, V27, V23, V14, V959, V15, [], V957, V18, V19)) end end; {'Prelude.Types.Nothing'} -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V954, V8, V9, V10, V11, V12, V21, V27, V23, V14, V15, [], V17, V18, V19)) end end; _ -> case V14 of {'Builtin.MkPair', V960, V961} -> case V15 of [E10 | E11] -> (fun (V962, V963) -> begin (V964 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function type"/utf8>> end, V10, V13))), fun (V965) -> begin (V966 = (V964(V965))), case V966 of {'Prelude.Types.Left', V967} -> {'Prelude.Types.Left', V967}; {'Prelude.Types.Right', V968} -> (begin (V1078 = begin (V969 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function "/utf8>> end, V12))), fun (V970) -> begin (V971 = (V969(V970))), case V971 of {'Prelude.Types.Left', V972} -> {'Prelude.Types.Left', V972}; {'Prelude.Types.Right', V973} -> (begin (V1077 = begin (V974 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>))), fun (V975) -> begin (V976 = (V974(V975))), case V976 of {'Prelude.Types.Left', V977} -> {'Prelude.Types.Left', V977}; {'Prelude.Types.Right', V978} -> (begin (V1076 = begin (V979 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>))), fun (V980) -> begin (V981 = (V979(V980))), case V981 of {'Prelude.Types.Left', V982} -> {'Prelude.Types.Left', V982}; {'Prelude.Types.Right', V983} -> (begin (V1075 = begin (V984 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V985) -> begin (V986 = (V984(V985))), case V986 of {'Prelude.Types.Left', V987} -> {'Prelude.Types.Left', V987}; {'Prelude.Types.Right', V988} -> (begin (V1074 = begin (V993 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V989) -> fun (V990) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V989, V990)) end end, 0, fun (V991) -> fun (V992) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V991, V992)) end end, 1})), V10, V978, {'Core.TT.TType', V11, V988}))), fun (V994) -> begin (V995 = (V993(V994))), case V995 of {'Prelude.Types.Left', V996} -> {'Prelude.Types.Left', V996}; {'Prelude.Types.Right', V997} -> (begin (V1073 = begin (V998 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V997))), begin (V1003 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V999) -> fun (V1000) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V999, V1000)) end end, 0, fun (V1001) -> fun (V1002) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V1001, V1002)) end end, 1})), V10, V983, {'Core.TT.TType', V11, V988}))), fun (V1004) -> begin (V1005 = (V1003(V1004))), case V1005 of {'Prelude.Types.Left', V1006} -> {'Prelude.Types.Left', V1006}; {'Prelude.Types.Right', V1007} -> (begin (V1072 = begin (V1008 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V962, {'Prelude.Types.Just', V998}))), fun (V1009) -> begin (V1010 = (V1008(V1009))), case V1010 of {'Prelude.Types.Left', V1011} -> {'Prelude.Types.Left', V1011}; {'Prelude.Types.Right', V1012} -> (begin (V1071 = case V1012 of {'Builtin.MkPair', V1013, V1014} -> begin (V1015 = {'Core.TT.App', V11, V12, V1013}), begin (V1021 = begin (V1016 = V1), fun (V1017) -> begin (V1020 = (begin (V1018 = V1016), fun (V1019) -> ('erlang':'get'(V1018)) end end(V1017))), {'Prelude.Types.Right', V1020} end end end), fun (V1022) -> begin (V1023 = (V1021(V1022))), case V1023 of {'Prelude.Types.Left', V1024} -> {'Prelude.Types.Left', V1024}; {'Prelude.Types.Right', V1025} -> (begin (V1070 = begin (V1026 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V1025, V10, V1007))), fun (V1027) -> begin (V1028 = (V1026(V1027))), case V1028 of {'Prelude.Types.Left', V1029} -> {'Prelude.Types.Left', V1029}; {'Prelude.Types.Right', V1030} -> (begin (V1069 = begin (V1031 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V978, {'Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V997}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V1007))}))), begin (V1035 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V1033 = fun (V1032) -> V1032 end), fun (V1034) -> (V1033(V1034)) end end(<<"Expected function type"/utf8>>)) end, V10, V1031))), fun (V1036) -> begin (V1037 = (V1035(V1036))), case V1037 of {'Prelude.Types.Left', V1038} -> {'Prelude.Types.Left', V1038}; {'Prelude.Types.Right', V1039} -> (begin (V1068 = begin (V1045 = case V19 of {'Prelude.Types.Just', V1040} -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V1042 = fun (V1041) -> V1041 end), fun (V1043) -> (V1042(V1043)) end end(<<"Expected result type"/utf8>>)) end, V10, V1040)); {'Prelude.Types.Nothing'} -> fun (V1044) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V1046) -> begin (V1047 = (V1045(V1046))), case V1047 of {'Prelude.Types.Left', V1048} -> {'Prelude.Types.Left', V1048}; {'Prelude.Types.Right', V1049} -> (begin (V1067 = begin (V1050 = ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V1015, V1030, {'Builtin.MkPair', V960, (V961 + 1)}, V963, V16, V17, V18, V19))), fun (V1051) -> begin (V1052 = (V1050(V1051))), case V1052 of {'Prelude.Types.Left', V1053} -> {'Prelude.Types.Left', V1053}; {'Prelude.Types.Right', V1054} -> (begin (V1066 = begin (V1055 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V11, V8, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1025, V10, V13)), V1031))), fun (V1056) -> begin (V1057 = (V1055(V1056))), case V1057 of {'Prelude.Types.Left', V1058} -> {'Prelude.Types.Left', V1058}; {'Prelude.Types.Right', V1059} -> (begin (V1065 = begin (V1060 = {'Builtin.MkPair', V1013, V1014}), ('case--case block in checkAppWith\x{27}-20267'(V960, V961, V962, V963, V0, V19, V18, V17, V16, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V978, V983, V988, V997, V998, V1007, V1013, V1014, V1060, V1015, V1025, V1030, V1031, V1054, V1059, case V1059 of {'Core.Unify.MkUnifyResult', V1061, V1062, V1063, V1064} -> V1061 end)) end), V1065 end(V1056)) end end end end), V1066 end(V1051)) end end end end), V1067 end(V1046)) end end end end), V1068 end(V1036)) end end end end end), V1069 end(V1027)) end end end end), V1070 end(V1022)) end end end end end end), V1071 end(V1009)) end end end end), V1072 end(V1004)) end end end end end), V1073 end(V994)) end end end end), V1074 end(V985)) end end end end), V1075 end(V980)) end end end end), V1076 end(V975)) end end end end), V1077 end(V970)) end end end end), V1078 end(V965)) end end end end end(E10, E11)); _ -> case V15 of [] -> begin (V1084 = begin (V1079 = V1), fun (V1080) -> begin (V1083 = (begin (V1081 = V1079), fun (V1082) -> ('erlang':'get'(V1081)) end end(V1080))), {'Prelude.Types.Right', V1083} end end end), fun (V1085) -> begin (V1086 = (V1084(V1085))), case V1086 of {'Prelude.Types.Left', V1087} -> {'Prelude.Types.Left', V1087}; {'Prelude.Types.Right', V1088} -> (begin (V1118 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1089) -> fun (V1090) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V1089, V1090)) end end, 1}, fun (V1091) -> ('un--isImplicitAs'(V1091)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V1098 = fun (V1094) -> fun (V1095) -> fun (V1096) -> fun (V1097) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1096, V1097)) end end end end), fun (V1099) -> fun (V1100) -> ((((V1098('erased'))('erased'))(V1099))(V1100)) end end end(fun (V1093) -> ('Idris.Idris2.Builtin':'un--snd'(V1093)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1092) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1092)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1088, V10, V13)), V19)); 0 -> fun (V1101) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V1107 = fun (V1103) -> fun (V1104) -> fun (V1105) -> fun (V1106) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1105, V1106)) end end end end), fun (V1108) -> fun (V1109) -> ((((V1107('erased'))('erased'))(V1108))(V1109)) end end end(fun (V1102) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V1115 = fun (V1111) -> fun (V1112) -> fun (V1113) -> fun (V1114) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1113, V1114)) end end end end), fun (V1116) -> fun (V1117) -> ((((V1115('erased'))('erased'))(V1116))(V1117)) end end end(fun (V1110) -> ('Idris.Idris2.Builtin':'un--fst'(V1110)) end))(V17)))), V12}, V1101)) end end), V1118 end(V1085)) end end end end end end; _ -> case V15 of [] -> begin (V1124 = begin (V1119 = V1), fun (V1120) -> begin (V1123 = (begin (V1121 = V1119), fun (V1122) -> ('erlang':'get'(V1121)) end end(V1120))), {'Prelude.Types.Right', V1123} end end end), fun (V1125) -> begin (V1126 = (V1124(V1125))), case V1126 of {'Prelude.Types.Left', V1127} -> {'Prelude.Types.Left', V1127}; {'Prelude.Types.Right', V1128} -> (begin (V1158 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1129) -> fun (V1130) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V1129, V1130)) end end, 1}, fun (V1131) -> ('un--isImplicitAs'(V1131)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V1138 = fun (V1134) -> fun (V1135) -> fun (V1136) -> fun (V1137) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1136, V1137)) end end end end), fun (V1139) -> fun (V1140) -> ((((V1138('erased'))('erased'))(V1139))(V1140)) end end end(fun (V1133) -> ('Idris.Idris2.Builtin':'un--snd'(V1133)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1132) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1132)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1128, V10, V13)), V19)); 0 -> fun (V1141) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V1147 = fun (V1143) -> fun (V1144) -> fun (V1145) -> fun (V1146) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1145, V1146)) end end end end), fun (V1148) -> fun (V1149) -> ((((V1147('erased'))('erased'))(V1148))(V1149)) end end end(fun (V1142) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V1155 = fun (V1151) -> fun (V1152) -> fun (V1153) -> fun (V1154) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1153, V1154)) end end end end), fun (V1156) -> fun (V1157) -> ((((V1155('erased'))('erased'))(V1156))(V1157)) end end end(fun (V1150) -> ('Idris.Idris2.Builtin':'un--fst'(V1150)) end))(V17)))), V12}, V1141)) end end), V1158 end(V1125)) end end end end end end end end; {'Core.TT.DefImplicit', V1159} -> case V15 of [] -> case V16 of [] -> case V17 of [] -> case V19 of {'Prelude.Types.Just', V1160} -> begin (V1161 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), begin (V1162 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V1160))), fun (V1163) -> begin (V1164 = (V1162(V1163))), case V1164 of {'Prelude.Types.Left', V1165} -> {'Prelude.Types.Left', V1165}; {'Prelude.Types.Right', V1166} -> (begin (V1194 = begin (V1172 = begin (V1167 = V1), fun (V1168) -> begin (V1171 = (begin (V1169 = V1167), fun (V1170) -> ('erlang':'get'(V1169)) end end(V1168))), {'Prelude.Types.Right', V1171} end end end), fun (V1173) -> begin (V1174 = (V1172(V1173))), case V1174 of {'Prelude.Types.Left', V1175} -> {'Prelude.Types.Left', V1175}; {'Prelude.Types.Right', V1176} -> (begin (V1193 = begin (V1177 = {'Core.Value.NBind', V20, V21, {'Core.TT.Pi', V24, V25, {'Core.TT.DefImplicit', V1159}, V27}, V23}), case V1166 of {'Core.Value.NBind', V1178, V1179, V1180, V1181} -> case V1180 of {'Core.TT.Pi', V1182, V1183, V1184, V1185} -> case V1184 of {'Core.TT.DefImplicit', V1186} -> begin (V1187 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_Closure'(V1, V0, V1176, V10, V1159, V1186))), fun (V1188) -> begin (V1189 = (V1187(V1188))), case V1189 of {'Prelude.Types.Left', V1190} -> {'Prelude.Types.Left', V1190}; {'Prelude.Types.Right', V1191} -> (begin (V1192 = case V1191 of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1176, V10, V1177)), {'Prelude.Types.Just', V1160})); 0 -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V1161, V8, V9, V10, V11, V12, V21, V1159, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V1160})) end), V1192 end(V1188)) end end end end; _ -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V1161, V8, V9, V10, V11, V12, V21, V1159, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V1160})) end; _ -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V1161, V8, V9, V10, V11, V12, V21, V1159, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V1160})) end; _ -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V1161, V8, V9, V10, V11, V12, V21, V1159, V27, V23, V14, [], [], [], V18, {'Prelude.Types.Just', V1160})) end end), V1193 end(V1173)) end end end end), V1194 end(V1163)) end end end end end; _ -> begin (V1195 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Nothing'} -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V1195, V8, V9, V10, V11, V12, V21, V1159, V27, V23, V14, V15, V16, V17, V18, V19)); {'Prelude.Types.Just', V1196} -> case V1196 of {'Builtin.MkPair', V1197, V1198} -> case V1197 of {'Builtin.MkPair', V1199, V1200} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V1195, V8, V9, V10, V11, V12, V21, V27, V23, V14, V1200, V15, V16, V1198, V18, V19)) end end end end end; _ -> begin (V1201 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Nothing'} -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V1201, V8, V9, V10, V11, V12, V21, V1159, V27, V23, V14, V15, V16, V17, V18, V19)); {'Prelude.Types.Just', V1202} -> case V1202 of {'Builtin.MkPair', V1203, V1204} -> case V1203 of {'Builtin.MkPair', V1205, V1206} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V1201, V8, V9, V10, V11, V12, V21, V27, V23, V14, V1206, V15, V16, V1204, V18, V19)) end end end end end; _ -> begin (V1207 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Nothing'} -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V1207, V8, V9, V10, V11, V12, V21, V1159, V27, V23, V14, V15, V16, V17, V18, V19)); {'Prelude.Types.Just', V1208} -> case V1208 of {'Builtin.MkPair', V1209, V1210} -> case V1209 of {'Builtin.MkPair', V1211, V1212} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V1207, V8, V9, V10, V11, V12, V21, V27, V23, V14, V1212, V15, V16, V1210, V18, V19)) end end end end end; _ -> begin (V1213 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V25))), case ('un--findNamed'(V21, V17)) of {'Prelude.Types.Nothing'} -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V1213, V8, V9, V10, V11, V12, V21, V1159, V27, V23, V14, V15, V16, V17, V18, V19)); {'Prelude.Types.Just', V1214} -> case V1214 of {'Builtin.MkPair', V1215, V1216} -> case V1215 of {'Builtin.MkPair', V1217, V1218} -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V1213, V8, V9, V10, V11, V12, V21, V27, V23, V14, V1218, V15, V16, V1216, V18, V19)) end end end end end; _ -> case V14 of {'Builtin.MkPair', V1219, V1220} -> case V15 of [E4 | E5] -> (fun (V1221, V1222) -> begin (V1223 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function type"/utf8>> end, V10, V13))), fun (V1224) -> begin (V1225 = (V1223(V1224))), case V1225 of {'Prelude.Types.Left', V1226} -> {'Prelude.Types.Left', V1226}; {'Prelude.Types.Right', V1227} -> (begin (V1337 = begin (V1228 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function "/utf8>> end, V12))), fun (V1229) -> begin (V1230 = (V1228(V1229))), case V1230 of {'Prelude.Types.Left', V1231} -> {'Prelude.Types.Left', V1231}; {'Prelude.Types.Right', V1232} -> (begin (V1336 = begin (V1233 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>))), fun (V1234) -> begin (V1235 = (V1233(V1234))), case V1235 of {'Prelude.Types.Left', V1236} -> {'Prelude.Types.Left', V1236}; {'Prelude.Types.Right', V1237} -> (begin (V1335 = begin (V1238 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>))), fun (V1239) -> begin (V1240 = (V1238(V1239))), case V1240 of {'Prelude.Types.Left', V1241} -> {'Prelude.Types.Left', V1241}; {'Prelude.Types.Right', V1242} -> (begin (V1334 = begin (V1243 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V1244) -> begin (V1245 = (V1243(V1244))), case V1245 of {'Prelude.Types.Left', V1246} -> {'Prelude.Types.Left', V1246}; {'Prelude.Types.Right', V1247} -> (begin (V1333 = begin (V1252 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V1248) -> fun (V1249) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1248, V1249)) end end, 0, fun (V1250) -> fun (V1251) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V1250, V1251)) end end, 1})), V10, V1237, {'Core.TT.TType', V11, V1247}))), fun (V1253) -> begin (V1254 = (V1252(V1253))), case V1254 of {'Prelude.Types.Left', V1255} -> {'Prelude.Types.Left', V1255}; {'Prelude.Types.Right', V1256} -> (begin (V1332 = begin (V1257 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V1256))), begin (V1262 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V1258) -> fun (V1259) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1258, V1259)) end end, 0, fun (V1260) -> fun (V1261) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V1260, V1261)) end end, 1})), V10, V1242, {'Core.TT.TType', V11, V1247}))), fun (V1263) -> begin (V1264 = (V1262(V1263))), case V1264 of {'Prelude.Types.Left', V1265} -> {'Prelude.Types.Left', V1265}; {'Prelude.Types.Right', V1266} -> (begin (V1331 = begin (V1267 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V1221, {'Prelude.Types.Just', V1257}))), fun (V1268) -> begin (V1269 = (V1267(V1268))), case V1269 of {'Prelude.Types.Left', V1270} -> {'Prelude.Types.Left', V1270}; {'Prelude.Types.Right', V1271} -> (begin (V1330 = case V1271 of {'Builtin.MkPair', V1272, V1273} -> begin (V1274 = {'Core.TT.App', V11, V12, V1272}), begin (V1280 = begin (V1275 = V1), fun (V1276) -> begin (V1279 = (begin (V1277 = V1275), fun (V1278) -> ('erlang':'get'(V1277)) end end(V1276))), {'Prelude.Types.Right', V1279} end end end), fun (V1281) -> begin (V1282 = (V1280(V1281))), case V1282 of {'Prelude.Types.Left', V1283} -> {'Prelude.Types.Left', V1283}; {'Prelude.Types.Right', V1284} -> (begin (V1329 = begin (V1285 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V1284, V10, V1266))), fun (V1286) -> begin (V1287 = (V1285(V1286))), case V1287 of {'Prelude.Types.Left', V1288} -> {'Prelude.Types.Left', V1288}; {'Prelude.Types.Right', V1289} -> (begin (V1328 = begin (V1290 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V1237, {'Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V1256}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V1266))}))), begin (V1294 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V1292 = fun (V1291) -> V1291 end), fun (V1293) -> (V1292(V1293)) end end(<<"Expected function type"/utf8>>)) end, V10, V1290))), fun (V1295) -> begin (V1296 = (V1294(V1295))), case V1296 of {'Prelude.Types.Left', V1297} -> {'Prelude.Types.Left', V1297}; {'Prelude.Types.Right', V1298} -> (begin (V1327 = begin (V1304 = case V19 of {'Prelude.Types.Just', V1299} -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V1301 = fun (V1300) -> V1300 end), fun (V1302) -> (V1301(V1302)) end end(<<"Expected result type"/utf8>>)) end, V10, V1299)); {'Prelude.Types.Nothing'} -> fun (V1303) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V1305) -> begin (V1306 = (V1304(V1305))), case V1306 of {'Prelude.Types.Left', V1307} -> {'Prelude.Types.Left', V1307}; {'Prelude.Types.Right', V1308} -> (begin (V1326 = begin (V1309 = ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V1274, V1289, {'Builtin.MkPair', V1219, (V1220 + 1)}, V1222, V16, V17, V18, V19))), fun (V1310) -> begin (V1311 = (V1309(V1310))), case V1311 of {'Prelude.Types.Left', V1312} -> {'Prelude.Types.Left', V1312}; {'Prelude.Types.Right', V1313} -> (begin (V1325 = begin (V1314 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V11, V8, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1284, V10, V13)), V1290))), fun (V1315) -> begin (V1316 = (V1314(V1315))), case V1316 of {'Prelude.Types.Left', V1317} -> {'Prelude.Types.Left', V1317}; {'Prelude.Types.Right', V1318} -> (begin (V1324 = begin (V1319 = {'Builtin.MkPair', V1272, V1273}), ('case--case block in checkAppWith\x{27}-20267'(V1219, V1220, V1221, V1222, V0, V19, V18, V17, V16, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1237, V1242, V1247, V1256, V1257, V1266, V1272, V1273, V1319, V1274, V1284, V1289, V1290, V1313, V1318, case V1318 of {'Core.Unify.MkUnifyResult', V1320, V1321, V1322, V1323} -> V1320 end)) end), V1324 end(V1315)) end end end end), V1325 end(V1310)) end end end end), V1326 end(V1305)) end end end end), V1327 end(V1295)) end end end end end), V1328 end(V1286)) end end end end), V1329 end(V1281)) end end end end end end), V1330 end(V1268)) end end end end), V1331 end(V1263)) end end end end end), V1332 end(V1253)) end end end end), V1333 end(V1244)) end end end end), V1334 end(V1239)) end end end end), V1335 end(V1234)) end end end end), V1336 end(V1229)) end end end end), V1337 end(V1224)) end end end end end(E4, E5)); _ -> case V15 of [] -> begin (V1343 = begin (V1338 = V1), fun (V1339) -> begin (V1342 = (begin (V1340 = V1338), fun (V1341) -> ('erlang':'get'(V1340)) end end(V1339))), {'Prelude.Types.Right', V1342} end end end), fun (V1344) -> begin (V1345 = (V1343(V1344))), case V1345 of {'Prelude.Types.Left', V1346} -> {'Prelude.Types.Left', V1346}; {'Prelude.Types.Right', V1347} -> (begin (V1377 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1348) -> fun (V1349) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V1348, V1349)) end end, 1}, fun (V1350) -> ('un--isImplicitAs'(V1350)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V1357 = fun (V1353) -> fun (V1354) -> fun (V1355) -> fun (V1356) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1355, V1356)) end end end end), fun (V1358) -> fun (V1359) -> ((((V1357('erased'))('erased'))(V1358))(V1359)) end end end(fun (V1352) -> ('Idris.Idris2.Builtin':'un--snd'(V1352)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1351) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1351)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1347, V10, V13)), V19)); 0 -> fun (V1360) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V1366 = fun (V1362) -> fun (V1363) -> fun (V1364) -> fun (V1365) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1364, V1365)) end end end end), fun (V1367) -> fun (V1368) -> ((((V1366('erased'))('erased'))(V1367))(V1368)) end end end(fun (V1361) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V1374 = fun (V1370) -> fun (V1371) -> fun (V1372) -> fun (V1373) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1372, V1373)) end end end end), fun (V1375) -> fun (V1376) -> ((((V1374('erased'))('erased'))(V1375))(V1376)) end end end(fun (V1369) -> ('Idris.Idris2.Builtin':'un--fst'(V1369)) end))(V17)))), V12}, V1360)) end end), V1377 end(V1344)) end end end end end end; _ -> case V15 of [] -> begin (V1383 = begin (V1378 = V1), fun (V1379) -> begin (V1382 = (begin (V1380 = V1378), fun (V1381) -> ('erlang':'get'(V1380)) end end(V1379))), {'Prelude.Types.Right', V1382} end end end), fun (V1384) -> begin (V1385 = (V1383(V1384))), case V1385 of {'Prelude.Types.Left', V1386} -> {'Prelude.Types.Left', V1386}; {'Prelude.Types.Right', V1387} -> (begin (V1417 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1388) -> fun (V1389) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V1388, V1389)) end end, 1}, fun (V1390) -> ('un--isImplicitAs'(V1390)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V1397 = fun (V1393) -> fun (V1394) -> fun (V1395) -> fun (V1396) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1395, V1396)) end end end end), fun (V1398) -> fun (V1399) -> ((((V1397('erased'))('erased'))(V1398))(V1399)) end end end(fun (V1392) -> ('Idris.Idris2.Builtin':'un--snd'(V1392)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1391) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1391)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1387, V10, V13)), V19)); 0 -> fun (V1400) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V1406 = fun (V1402) -> fun (V1403) -> fun (V1404) -> fun (V1405) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1404, V1405)) end end end end), fun (V1407) -> fun (V1408) -> ((((V1406('erased'))('erased'))(V1407))(V1408)) end end end(fun (V1401) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V1414 = fun (V1410) -> fun (V1411) -> fun (V1412) -> fun (V1413) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1412, V1413)) end end end end), fun (V1415) -> fun (V1416) -> ((((V1414('erased'))('erased'))(V1415))(V1416)) end end end(fun (V1409) -> ('Idris.Idris2.Builtin':'un--fst'(V1409)) end))(V17)))), V12}, V1400)) end end), V1417 end(V1384)) end end end end end end end; _ -> case V14 of {'Builtin.MkPair', V1418, V1419} -> case V15 of [E2 | E3] -> (fun (V1420, V1421) -> begin (V1422 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function type"/utf8>> end, V10, V13))), fun (V1423) -> begin (V1424 = (V1422(V1423))), case V1424 of {'Prelude.Types.Left', V1425} -> {'Prelude.Types.Left', V1425}; {'Prelude.Types.Right', V1426} -> (begin (V1536 = begin (V1427 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function "/utf8>> end, V12))), fun (V1428) -> begin (V1429 = (V1427(V1428))), case V1429 of {'Prelude.Types.Left', V1430} -> {'Prelude.Types.Left', V1430}; {'Prelude.Types.Right', V1431} -> (begin (V1535 = begin (V1432 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>))), fun (V1433) -> begin (V1434 = (V1432(V1433))), case V1434 of {'Prelude.Types.Left', V1435} -> {'Prelude.Types.Left', V1435}; {'Prelude.Types.Right', V1436} -> (begin (V1534 = begin (V1437 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>))), fun (V1438) -> begin (V1439 = (V1437(V1438))), case V1439 of {'Prelude.Types.Left', V1440} -> {'Prelude.Types.Left', V1440}; {'Prelude.Types.Right', V1441} -> (begin (V1533 = begin (V1442 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V1443) -> begin (V1444 = (V1442(V1443))), case V1444 of {'Prelude.Types.Left', V1445} -> {'Prelude.Types.Left', V1445}; {'Prelude.Types.Right', V1446} -> (begin (V1532 = begin (V1451 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V1447) -> fun (V1448) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1447, V1448)) end end, 0, fun (V1449) -> fun (V1450) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V1449, V1450)) end end, 1})), V10, V1436, {'Core.TT.TType', V11, V1446}))), fun (V1452) -> begin (V1453 = (V1451(V1452))), case V1453 of {'Prelude.Types.Left', V1454} -> {'Prelude.Types.Left', V1454}; {'Prelude.Types.Right', V1455} -> (begin (V1531 = begin (V1456 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V1455))), begin (V1461 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V1457) -> fun (V1458) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1457, V1458)) end end, 0, fun (V1459) -> fun (V1460) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V1459, V1460)) end end, 1})), V10, V1441, {'Core.TT.TType', V11, V1446}))), fun (V1462) -> begin (V1463 = (V1461(V1462))), case V1463 of {'Prelude.Types.Left', V1464} -> {'Prelude.Types.Left', V1464}; {'Prelude.Types.Right', V1465} -> (begin (V1530 = begin (V1466 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V1420, {'Prelude.Types.Just', V1456}))), fun (V1467) -> begin (V1468 = (V1466(V1467))), case V1468 of {'Prelude.Types.Left', V1469} -> {'Prelude.Types.Left', V1469}; {'Prelude.Types.Right', V1470} -> (begin (V1529 = case V1470 of {'Builtin.MkPair', V1471, V1472} -> begin (V1473 = {'Core.TT.App', V11, V12, V1471}), begin (V1479 = begin (V1474 = V1), fun (V1475) -> begin (V1478 = (begin (V1476 = V1474), fun (V1477) -> ('erlang':'get'(V1476)) end end(V1475))), {'Prelude.Types.Right', V1478} end end end), fun (V1480) -> begin (V1481 = (V1479(V1480))), case V1481 of {'Prelude.Types.Left', V1482} -> {'Prelude.Types.Left', V1482}; {'Prelude.Types.Right', V1483} -> (begin (V1528 = begin (V1484 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V1483, V10, V1465))), fun (V1485) -> begin (V1486 = (V1484(V1485))), case V1486 of {'Prelude.Types.Left', V1487} -> {'Prelude.Types.Left', V1487}; {'Prelude.Types.Right', V1488} -> (begin (V1527 = begin (V1489 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V1436, {'Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V1455}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V1465))}))), begin (V1493 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V1491 = fun (V1490) -> V1490 end), fun (V1492) -> (V1491(V1492)) end end(<<"Expected function type"/utf8>>)) end, V10, V1489))), fun (V1494) -> begin (V1495 = (V1493(V1494))), case V1495 of {'Prelude.Types.Left', V1496} -> {'Prelude.Types.Left', V1496}; {'Prelude.Types.Right', V1497} -> (begin (V1526 = begin (V1503 = case V19 of {'Prelude.Types.Just', V1498} -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V1500 = fun (V1499) -> V1499 end), fun (V1501) -> (V1500(V1501)) end end(<<"Expected result type"/utf8>>)) end, V10, V1498)); {'Prelude.Types.Nothing'} -> fun (V1502) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V1504) -> begin (V1505 = (V1503(V1504))), case V1505 of {'Prelude.Types.Left', V1506} -> {'Prelude.Types.Left', V1506}; {'Prelude.Types.Right', V1507} -> (begin (V1525 = begin (V1508 = ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V1473, V1488, {'Builtin.MkPair', V1418, (V1419 + 1)}, V1421, V16, V17, V18, V19))), fun (V1509) -> begin (V1510 = (V1508(V1509))), case V1510 of {'Prelude.Types.Left', V1511} -> {'Prelude.Types.Left', V1511}; {'Prelude.Types.Right', V1512} -> (begin (V1524 = begin (V1513 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V11, V8, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1483, V10, V13)), V1489))), fun (V1514) -> begin (V1515 = (V1513(V1514))), case V1515 of {'Prelude.Types.Left', V1516} -> {'Prelude.Types.Left', V1516}; {'Prelude.Types.Right', V1517} -> (begin (V1523 = begin (V1518 = {'Builtin.MkPair', V1471, V1472}), ('case--case block in checkAppWith\x{27}-20267'(V1418, V1419, V1420, V1421, V0, V19, V18, V17, V16, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1436, V1441, V1446, V1455, V1456, V1465, V1471, V1472, V1518, V1473, V1483, V1488, V1489, V1512, V1517, case V1517 of {'Core.Unify.MkUnifyResult', V1519, V1520, V1521, V1522} -> V1519 end)) end), V1523 end(V1514)) end end end end), V1524 end(V1509)) end end end end), V1525 end(V1504)) end end end end), V1526 end(V1494)) end end end end end), V1527 end(V1485)) end end end end), V1528 end(V1480)) end end end end end end), V1529 end(V1467)) end end end end), V1530 end(V1462)) end end end end end), V1531 end(V1452)) end end end end), V1532 end(V1443)) end end end end), V1533 end(V1438)) end end end end), V1534 end(V1433)) end end end end), V1535 end(V1428)) end end end end), V1536 end(V1423)) end end end end end(E2, E3)); _ -> case V15 of [] -> begin (V1542 = begin (V1537 = V1), fun (V1538) -> begin (V1541 = (begin (V1539 = V1537), fun (V1540) -> ('erlang':'get'(V1539)) end end(V1538))), {'Prelude.Types.Right', V1541} end end end), fun (V1543) -> begin (V1544 = (V1542(V1543))), case V1544 of {'Prelude.Types.Left', V1545} -> {'Prelude.Types.Left', V1545}; {'Prelude.Types.Right', V1546} -> (begin (V1576 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1547) -> fun (V1548) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V1547, V1548)) end end, 1}, fun (V1549) -> ('un--isImplicitAs'(V1549)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V1556 = fun (V1552) -> fun (V1553) -> fun (V1554) -> fun (V1555) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1554, V1555)) end end end end), fun (V1557) -> fun (V1558) -> ((((V1556('erased'))('erased'))(V1557))(V1558)) end end end(fun (V1551) -> ('Idris.Idris2.Builtin':'un--snd'(V1551)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1550) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1550)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1546, V10, V13)), V19)); 0 -> fun (V1559) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V1565 = fun (V1561) -> fun (V1562) -> fun (V1563) -> fun (V1564) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1563, V1564)) end end end end), fun (V1566) -> fun (V1567) -> ((((V1565('erased'))('erased'))(V1566))(V1567)) end end end(fun (V1560) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V1573 = fun (V1569) -> fun (V1570) -> fun (V1571) -> fun (V1572) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1571, V1572)) end end end end), fun (V1574) -> fun (V1575) -> ((((V1573('erased'))('erased'))(V1574))(V1575)) end end end(fun (V1568) -> ('Idris.Idris2.Builtin':'un--fst'(V1568)) end))(V17)))), V12}, V1559)) end end), V1576 end(V1543)) end end end end end end; _ -> case V15 of [] -> begin (V1582 = begin (V1577 = V1), fun (V1578) -> begin (V1581 = (begin (V1579 = V1577), fun (V1580) -> ('erlang':'get'(V1579)) end end(V1578))), {'Prelude.Types.Right', V1581} end end end), fun (V1583) -> begin (V1584 = (V1582(V1583))), case V1584 of {'Prelude.Types.Left', V1585} -> {'Prelude.Types.Left', V1585}; {'Prelude.Types.Right', V1586} -> (begin (V1616 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1587) -> fun (V1588) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V1587, V1588)) end end, 1}, fun (V1589) -> ('un--isImplicitAs'(V1589)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V1596 = fun (V1592) -> fun (V1593) -> fun (V1594) -> fun (V1595) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1594, V1595)) end end end end), fun (V1597) -> fun (V1598) -> ((((V1596('erased'))('erased'))(V1597))(V1598)) end end end(fun (V1591) -> ('Idris.Idris2.Builtin':'un--snd'(V1591)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1590) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1590)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1586, V10, V13)), V19)); 0 -> fun (V1599) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V1605 = fun (V1601) -> fun (V1602) -> fun (V1603) -> fun (V1604) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1603, V1604)) end end end end), fun (V1606) -> fun (V1607) -> ((((V1605('erased'))('erased'))(V1606))(V1607)) end end end(fun (V1600) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V1613 = fun (V1609) -> fun (V1610) -> fun (V1611) -> fun (V1612) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1611, V1612)) end end end end), fun (V1614) -> fun (V1615) -> ((((V1613('erased'))('erased'))(V1614))(V1615)) end end end(fun (V1608) -> ('Idris.Idris2.Builtin':'un--fst'(V1608)) end))(V17)))), V12}, V1599)) end end), V1616 end(V1583)) end end end end end end end; {'Core.Value.NDelayed', V1617, V1618, V1619} -> case V1619 of {'Core.Value.NBind', V1620, V1621, V1622, V1623} -> case V1622 of {'Core.TT.Pi', V1624, V1625, V1626, V1627} -> ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, {'Core.TT.TForce', V1617, V1618, V12}, V1619, V14, V15, V16, V17, V18, V19)); _ -> case V14 of {'Builtin.MkPair', V1628, V1629} -> case V15 of [E28 | E29] -> (fun (V1630, V1631) -> begin (V1632 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function type"/utf8>> end, V10, V13))), fun (V1633) -> begin (V1634 = (V1632(V1633))), case V1634 of {'Prelude.Types.Left', V1635} -> {'Prelude.Types.Left', V1635}; {'Prelude.Types.Right', V1636} -> (begin (V1746 = begin (V1637 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function "/utf8>> end, V12))), fun (V1638) -> begin (V1639 = (V1637(V1638))), case V1639 of {'Prelude.Types.Left', V1640} -> {'Prelude.Types.Left', V1640}; {'Prelude.Types.Right', V1641} -> (begin (V1745 = begin (V1642 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>))), fun (V1643) -> begin (V1644 = (V1642(V1643))), case V1644 of {'Prelude.Types.Left', V1645} -> {'Prelude.Types.Left', V1645}; {'Prelude.Types.Right', V1646} -> (begin (V1744 = begin (V1647 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>))), fun (V1648) -> begin (V1649 = (V1647(V1648))), case V1649 of {'Prelude.Types.Left', V1650} -> {'Prelude.Types.Left', V1650}; {'Prelude.Types.Right', V1651} -> (begin (V1743 = begin (V1652 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V1653) -> begin (V1654 = (V1652(V1653))), case V1654 of {'Prelude.Types.Left', V1655} -> {'Prelude.Types.Left', V1655}; {'Prelude.Types.Right', V1656} -> (begin (V1742 = begin (V1661 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V1657) -> fun (V1658) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1657, V1658)) end end, 0, fun (V1659) -> fun (V1660) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V1659, V1660)) end end, 1})), V10, V1646, {'Core.TT.TType', V11, V1656}))), fun (V1662) -> begin (V1663 = (V1661(V1662))), case V1663 of {'Prelude.Types.Left', V1664} -> {'Prelude.Types.Left', V1664}; {'Prelude.Types.Right', V1665} -> (begin (V1741 = begin (V1666 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V1665))), begin (V1671 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V1667) -> fun (V1668) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1667, V1668)) end end, 0, fun (V1669) -> fun (V1670) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V1669, V1670)) end end, 1})), V10, V1651, {'Core.TT.TType', V11, V1656}))), fun (V1672) -> begin (V1673 = (V1671(V1672))), case V1673 of {'Prelude.Types.Left', V1674} -> {'Prelude.Types.Left', V1674}; {'Prelude.Types.Right', V1675} -> (begin (V1740 = begin (V1676 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V1630, {'Prelude.Types.Just', V1666}))), fun (V1677) -> begin (V1678 = (V1676(V1677))), case V1678 of {'Prelude.Types.Left', V1679} -> {'Prelude.Types.Left', V1679}; {'Prelude.Types.Right', V1680} -> (begin (V1739 = case V1680 of {'Builtin.MkPair', V1681, V1682} -> begin (V1683 = {'Core.TT.App', V11, V12, V1681}), begin (V1689 = begin (V1684 = V1), fun (V1685) -> begin (V1688 = (begin (V1686 = V1684), fun (V1687) -> ('erlang':'get'(V1686)) end end(V1685))), {'Prelude.Types.Right', V1688} end end end), fun (V1690) -> begin (V1691 = (V1689(V1690))), case V1691 of {'Prelude.Types.Left', V1692} -> {'Prelude.Types.Left', V1692}; {'Prelude.Types.Right', V1693} -> (begin (V1738 = begin (V1694 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V1693, V10, V1675))), fun (V1695) -> begin (V1696 = (V1694(V1695))), case V1696 of {'Prelude.Types.Left', V1697} -> {'Prelude.Types.Left', V1697}; {'Prelude.Types.Right', V1698} -> (begin (V1737 = begin (V1699 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V1646, {'Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V1665}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V1675))}))), begin (V1703 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V1701 = fun (V1700) -> V1700 end), fun (V1702) -> (V1701(V1702)) end end(<<"Expected function type"/utf8>>)) end, V10, V1699))), fun (V1704) -> begin (V1705 = (V1703(V1704))), case V1705 of {'Prelude.Types.Left', V1706} -> {'Prelude.Types.Left', V1706}; {'Prelude.Types.Right', V1707} -> (begin (V1736 = begin (V1713 = case V19 of {'Prelude.Types.Just', V1708} -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V1710 = fun (V1709) -> V1709 end), fun (V1711) -> (V1710(V1711)) end end(<<"Expected result type"/utf8>>)) end, V10, V1708)); {'Prelude.Types.Nothing'} -> fun (V1712) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V1714) -> begin (V1715 = (V1713(V1714))), case V1715 of {'Prelude.Types.Left', V1716} -> {'Prelude.Types.Left', V1716}; {'Prelude.Types.Right', V1717} -> (begin (V1735 = begin (V1718 = ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V1683, V1698, {'Builtin.MkPair', V1628, (V1629 + 1)}, V1631, V16, V17, V18, V19))), fun (V1719) -> begin (V1720 = (V1718(V1719))), case V1720 of {'Prelude.Types.Left', V1721} -> {'Prelude.Types.Left', V1721}; {'Prelude.Types.Right', V1722} -> (begin (V1734 = begin (V1723 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V11, V8, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1693, V10, V13)), V1699))), fun (V1724) -> begin (V1725 = (V1723(V1724))), case V1725 of {'Prelude.Types.Left', V1726} -> {'Prelude.Types.Left', V1726}; {'Prelude.Types.Right', V1727} -> (begin (V1733 = begin (V1728 = {'Builtin.MkPair', V1681, V1682}), ('case--case block in checkAppWith\x{27}-20267'(V1628, V1629, V1630, V1631, V0, V19, V18, V17, V16, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1646, V1651, V1656, V1665, V1666, V1675, V1681, V1682, V1728, V1683, V1693, V1698, V1699, V1722, V1727, case V1727 of {'Core.Unify.MkUnifyResult', V1729, V1730, V1731, V1732} -> V1729 end)) end), V1733 end(V1724)) end end end end), V1734 end(V1719)) end end end end), V1735 end(V1714)) end end end end), V1736 end(V1704)) end end end end end), V1737 end(V1695)) end end end end), V1738 end(V1690)) end end end end end end), V1739 end(V1677)) end end end end), V1740 end(V1672)) end end end end end), V1741 end(V1662)) end end end end), V1742 end(V1653)) end end end end), V1743 end(V1648)) end end end end), V1744 end(V1643)) end end end end), V1745 end(V1638)) end end end end), V1746 end(V1633)) end end end end end(E28, E29)); _ -> case V15 of [] -> begin (V1752 = begin (V1747 = V1), fun (V1748) -> begin (V1751 = (begin (V1749 = V1747), fun (V1750) -> ('erlang':'get'(V1749)) end end(V1748))), {'Prelude.Types.Right', V1751} end end end), fun (V1753) -> begin (V1754 = (V1752(V1753))), case V1754 of {'Prelude.Types.Left', V1755} -> {'Prelude.Types.Left', V1755}; {'Prelude.Types.Right', V1756} -> (begin (V1786 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1757) -> fun (V1758) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V1757, V1758)) end end, 1}, fun (V1759) -> ('un--isImplicitAs'(V1759)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V1766 = fun (V1762) -> fun (V1763) -> fun (V1764) -> fun (V1765) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1764, V1765)) end end end end), fun (V1767) -> fun (V1768) -> ((((V1766('erased'))('erased'))(V1767))(V1768)) end end end(fun (V1761) -> ('Idris.Idris2.Builtin':'un--snd'(V1761)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1760) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1760)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1756, V10, V13)), V19)); 0 -> fun (V1769) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V1775 = fun (V1771) -> fun (V1772) -> fun (V1773) -> fun (V1774) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1773, V1774)) end end end end), fun (V1776) -> fun (V1777) -> ((((V1775('erased'))('erased'))(V1776))(V1777)) end end end(fun (V1770) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V1783 = fun (V1779) -> fun (V1780) -> fun (V1781) -> fun (V1782) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1781, V1782)) end end end end), fun (V1784) -> fun (V1785) -> ((((V1783('erased'))('erased'))(V1784))(V1785)) end end end(fun (V1778) -> ('Idris.Idris2.Builtin':'un--fst'(V1778)) end))(V17)))), V12}, V1769)) end end), V1786 end(V1753)) end end end end end end; _ -> case V15 of [] -> begin (V1792 = begin (V1787 = V1), fun (V1788) -> begin (V1791 = (begin (V1789 = V1787), fun (V1790) -> ('erlang':'get'(V1789)) end end(V1788))), {'Prelude.Types.Right', V1791} end end end), fun (V1793) -> begin (V1794 = (V1792(V1793))), case V1794 of {'Prelude.Types.Left', V1795} -> {'Prelude.Types.Left', V1795}; {'Prelude.Types.Right', V1796} -> (begin (V1826 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1797) -> fun (V1798) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V1797, V1798)) end end, 1}, fun (V1799) -> ('un--isImplicitAs'(V1799)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V1806 = fun (V1802) -> fun (V1803) -> fun (V1804) -> fun (V1805) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1804, V1805)) end end end end), fun (V1807) -> fun (V1808) -> ((((V1806('erased'))('erased'))(V1807))(V1808)) end end end(fun (V1801) -> ('Idris.Idris2.Builtin':'un--snd'(V1801)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1800) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1800)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1796, V10, V13)), V19)); 0 -> fun (V1809) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V1815 = fun (V1811) -> fun (V1812) -> fun (V1813) -> fun (V1814) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1813, V1814)) end end end end), fun (V1816) -> fun (V1817) -> ((((V1815('erased'))('erased'))(V1816))(V1817)) end end end(fun (V1810) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V1823 = fun (V1819) -> fun (V1820) -> fun (V1821) -> fun (V1822) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1821, V1822)) end end end end), fun (V1824) -> fun (V1825) -> ((((V1823('erased'))('erased'))(V1824))(V1825)) end end end(fun (V1818) -> ('Idris.Idris2.Builtin':'un--fst'(V1818)) end))(V17)))), V12}, V1809)) end end), V1826 end(V1793)) end end end end end end end; _ -> case V14 of {'Builtin.MkPair', V1827, V1828} -> case V15 of [E26 | E27] -> (fun (V1829, V1830) -> begin (V1831 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function type"/utf8>> end, V10, V13))), fun (V1832) -> begin (V1833 = (V1831(V1832))), case V1833 of {'Prelude.Types.Left', V1834} -> {'Prelude.Types.Left', V1834}; {'Prelude.Types.Right', V1835} -> (begin (V1945 = begin (V1836 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function "/utf8>> end, V12))), fun (V1837) -> begin (V1838 = (V1836(V1837))), case V1838 of {'Prelude.Types.Left', V1839} -> {'Prelude.Types.Left', V1839}; {'Prelude.Types.Right', V1840} -> (begin (V1944 = begin (V1841 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>))), fun (V1842) -> begin (V1843 = (V1841(V1842))), case V1843 of {'Prelude.Types.Left', V1844} -> {'Prelude.Types.Left', V1844}; {'Prelude.Types.Right', V1845} -> (begin (V1943 = begin (V1846 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>))), fun (V1847) -> begin (V1848 = (V1846(V1847))), case V1848 of {'Prelude.Types.Left', V1849} -> {'Prelude.Types.Left', V1849}; {'Prelude.Types.Right', V1850} -> (begin (V1942 = begin (V1851 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V1852) -> begin (V1853 = (V1851(V1852))), case V1853 of {'Prelude.Types.Left', V1854} -> {'Prelude.Types.Left', V1854}; {'Prelude.Types.Right', V1855} -> (begin (V1941 = begin (V1860 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V1856) -> fun (V1857) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1856, V1857)) end end, 0, fun (V1858) -> fun (V1859) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V1858, V1859)) end end, 1})), V10, V1845, {'Core.TT.TType', V11, V1855}))), fun (V1861) -> begin (V1862 = (V1860(V1861))), case V1862 of {'Prelude.Types.Left', V1863} -> {'Prelude.Types.Left', V1863}; {'Prelude.Types.Right', V1864} -> (begin (V1940 = begin (V1865 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V1864))), begin (V1870 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V1866) -> fun (V1867) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1866, V1867)) end end, 0, fun (V1868) -> fun (V1869) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V1868, V1869)) end end, 1})), V10, V1850, {'Core.TT.TType', V11, V1855}))), fun (V1871) -> begin (V1872 = (V1870(V1871))), case V1872 of {'Prelude.Types.Left', V1873} -> {'Prelude.Types.Left', V1873}; {'Prelude.Types.Right', V1874} -> (begin (V1939 = begin (V1875 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V1829, {'Prelude.Types.Just', V1865}))), fun (V1876) -> begin (V1877 = (V1875(V1876))), case V1877 of {'Prelude.Types.Left', V1878} -> {'Prelude.Types.Left', V1878}; {'Prelude.Types.Right', V1879} -> (begin (V1938 = case V1879 of {'Builtin.MkPair', V1880, V1881} -> begin (V1882 = {'Core.TT.App', V11, V12, V1880}), begin (V1888 = begin (V1883 = V1), fun (V1884) -> begin (V1887 = (begin (V1885 = V1883), fun (V1886) -> ('erlang':'get'(V1885)) end end(V1884))), {'Prelude.Types.Right', V1887} end end end), fun (V1889) -> begin (V1890 = (V1888(V1889))), case V1890 of {'Prelude.Types.Left', V1891} -> {'Prelude.Types.Left', V1891}; {'Prelude.Types.Right', V1892} -> (begin (V1937 = begin (V1893 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V1892, V10, V1874))), fun (V1894) -> begin (V1895 = (V1893(V1894))), case V1895 of {'Prelude.Types.Left', V1896} -> {'Prelude.Types.Left', V1896}; {'Prelude.Types.Right', V1897} -> (begin (V1936 = begin (V1898 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V1845, {'Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V1864}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V1874))}))), begin (V1902 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V1900 = fun (V1899) -> V1899 end), fun (V1901) -> (V1900(V1901)) end end(<<"Expected function type"/utf8>>)) end, V10, V1898))), fun (V1903) -> begin (V1904 = (V1902(V1903))), case V1904 of {'Prelude.Types.Left', V1905} -> {'Prelude.Types.Left', V1905}; {'Prelude.Types.Right', V1906} -> (begin (V1935 = begin (V1912 = case V19 of {'Prelude.Types.Just', V1907} -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V1909 = fun (V1908) -> V1908 end), fun (V1910) -> (V1909(V1910)) end end(<<"Expected result type"/utf8>>)) end, V10, V1907)); {'Prelude.Types.Nothing'} -> fun (V1911) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V1913) -> begin (V1914 = (V1912(V1913))), case V1914 of {'Prelude.Types.Left', V1915} -> {'Prelude.Types.Left', V1915}; {'Prelude.Types.Right', V1916} -> (begin (V1934 = begin (V1917 = ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V1882, V1897, {'Builtin.MkPair', V1827, (V1828 + 1)}, V1830, V16, V17, V18, V19))), fun (V1918) -> begin (V1919 = (V1917(V1918))), case V1919 of {'Prelude.Types.Left', V1920} -> {'Prelude.Types.Left', V1920}; {'Prelude.Types.Right', V1921} -> (begin (V1933 = begin (V1922 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V11, V8, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1892, V10, V13)), V1898))), fun (V1923) -> begin (V1924 = (V1922(V1923))), case V1924 of {'Prelude.Types.Left', V1925} -> {'Prelude.Types.Left', V1925}; {'Prelude.Types.Right', V1926} -> (begin (V1932 = begin (V1927 = {'Builtin.MkPair', V1880, V1881}), ('case--case block in checkAppWith\x{27}-20267'(V1827, V1828, V1829, V1830, V0, V19, V18, V17, V16, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1845, V1850, V1855, V1864, V1865, V1874, V1880, V1881, V1927, V1882, V1892, V1897, V1898, V1921, V1926, case V1926 of {'Core.Unify.MkUnifyResult', V1928, V1929, V1930, V1931} -> V1928 end)) end), V1932 end(V1923)) end end end end), V1933 end(V1918)) end end end end), V1934 end(V1913)) end end end end), V1935 end(V1903)) end end end end end), V1936 end(V1894)) end end end end), V1937 end(V1889)) end end end end end end), V1938 end(V1876)) end end end end), V1939 end(V1871)) end end end end end), V1940 end(V1861)) end end end end), V1941 end(V1852)) end end end end), V1942 end(V1847)) end end end end), V1943 end(V1842)) end end end end), V1944 end(V1837)) end end end end), V1945 end(V1832)) end end end end end(E26, E27)); _ -> case V15 of [] -> begin (V1951 = begin (V1946 = V1), fun (V1947) -> begin (V1950 = (begin (V1948 = V1946), fun (V1949) -> ('erlang':'get'(V1948)) end end(V1947))), {'Prelude.Types.Right', V1950} end end end), fun (V1952) -> begin (V1953 = (V1951(V1952))), case V1953 of {'Prelude.Types.Left', V1954} -> {'Prelude.Types.Left', V1954}; {'Prelude.Types.Right', V1955} -> (begin (V1985 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1956) -> fun (V1957) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V1956, V1957)) end end, 1}, fun (V1958) -> ('un--isImplicitAs'(V1958)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V1965 = fun (V1961) -> fun (V1962) -> fun (V1963) -> fun (V1964) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1963, V1964)) end end end end), fun (V1966) -> fun (V1967) -> ((((V1965('erased'))('erased'))(V1966))(V1967)) end end end(fun (V1960) -> ('Idris.Idris2.Builtin':'un--snd'(V1960)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1959) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1959)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1955, V10, V13)), V19)); 0 -> fun (V1968) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V1974 = fun (V1970) -> fun (V1971) -> fun (V1972) -> fun (V1973) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1972, V1973)) end end end end), fun (V1975) -> fun (V1976) -> ((((V1974('erased'))('erased'))(V1975))(V1976)) end end end(fun (V1969) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V1982 = fun (V1978) -> fun (V1979) -> fun (V1980) -> fun (V1981) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1980, V1981)) end end end end), fun (V1983) -> fun (V1984) -> ((((V1982('erased'))('erased'))(V1983))(V1984)) end end end(fun (V1977) -> ('Idris.Idris2.Builtin':'un--fst'(V1977)) end))(V17)))), V12}, V1968)) end end), V1985 end(V1952)) end end end end end end; _ -> case V15 of [] -> begin (V1991 = begin (V1986 = V1), fun (V1987) -> begin (V1990 = (begin (V1988 = V1986), fun (V1989) -> ('erlang':'get'(V1988)) end end(V1987))), {'Prelude.Types.Right', V1990} end end end), fun (V1992) -> begin (V1993 = (V1991(V1992))), case V1993 of {'Prelude.Types.Left', V1994} -> {'Prelude.Types.Left', V1994}; {'Prelude.Types.Right', V1995} -> (begin (V2025 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1996) -> fun (V1997) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V1996, V1997)) end end, 1}, fun (V1998) -> ('un--isImplicitAs'(V1998)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V2005 = fun (V2001) -> fun (V2002) -> fun (V2003) -> fun (V2004) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V2003, V2004)) end end end end), fun (V2006) -> fun (V2007) -> ((((V2005('erased'))('erased'))(V2006))(V2007)) end end end(fun (V2000) -> ('Idris.Idris2.Builtin':'un--snd'(V2000)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1999) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1999)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1995, V10, V13)), V19)); 0 -> fun (V2008) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V2014 = fun (V2010) -> fun (V2011) -> fun (V2012) -> fun (V2013) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V2012, V2013)) end end end end), fun (V2015) -> fun (V2016) -> ((((V2014('erased'))('erased'))(V2015))(V2016)) end end end(fun (V2009) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V2022 = fun (V2018) -> fun (V2019) -> fun (V2020) -> fun (V2021) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V2020, V2021)) end end end end), fun (V2023) -> fun (V2024) -> ((((V2022('erased'))('erased'))(V2023))(V2024)) end end end(fun (V2017) -> ('Idris.Idris2.Builtin':'un--fst'(V2017)) end))(V17)))), V12}, V2008)) end end), V2025 end(V1992)) end end end end end end end; _ -> case V14 of {'Builtin.MkPair', V2026, V2027} -> case V15 of [E0 | E1] -> (fun (V2028, V2029) -> begin (V2030 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function type"/utf8>> end, V10, V13))), fun (V2031) -> begin (V2032 = (V2030(V2031))), case V2032 of {'Prelude.Types.Left', V2033} -> {'Prelude.Types.Left', V2033}; {'Prelude.Types.Right', V2034} -> (begin (V2144 = begin (V2035 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> <<"Function "/utf8>> end, V12))), fun (V2036) -> begin (V2037 = (V2035(V2036))), case V2037 of {'Prelude.Types.Left', V2038} -> {'Prelude.Types.Left', V2038}; {'Prelude.Types.Right', V2039} -> (begin (V2143 = begin (V2040 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>))), fun (V2041) -> begin (V2042 = (V2040(V2041))), case V2042 of {'Prelude.Types.Left', V2043} -> {'Prelude.Types.Left', V2043}; {'Prelude.Types.Right', V2044} -> (begin (V2142 = begin (V2045 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>))), fun (V2046) -> begin (V2047 = (V2045(V2046))), case V2047 of {'Prelude.Types.Left', V2048} -> {'Prelude.Types.Left', V2048}; {'Prelude.Types.Right', V2049} -> (begin (V2141 = begin (V2050 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V2051) -> begin (V2052 = (V2050(V2051))), case V2052 of {'Prelude.Types.Left', V2053} -> {'Prelude.Types.Left', V2053}; {'Prelude.Types.Right', V2054} -> (begin (V2140 = begin (V2059 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V2055) -> fun (V2056) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V2055, V2056)) end end, 0, fun (V2057) -> fun (V2058) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V2057, V2058)) end end, 1})), V10, V2044, {'Core.TT.TType', V11, V2054}))), fun (V2060) -> begin (V2061 = (V2059(V2060))), case V2061 of {'Prelude.Types.Left', V2062} -> {'Prelude.Types.Left', V2062}; {'Prelude.Types.Right', V2063} -> (begin (V2139 = begin (V2064 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V2063))), begin (V2069 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V2065) -> fun (V2066) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V2065, V2066)) end end, 0, fun (V2067) -> fun (V2068) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V2067, V2068)) end end, 1})), V10, V2049, {'Core.TT.TType', V11, V2054}))), fun (V2070) -> begin (V2071 = (V2069(V2070))), case V2071 of {'Prelude.Types.Left', V2072} -> {'Prelude.Types.Left', V2072}; {'Prelude.Types.Right', V2073} -> (begin (V2138 = begin (V2074 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V2028, {'Prelude.Types.Just', V2064}))), fun (V2075) -> begin (V2076 = (V2074(V2075))), case V2076 of {'Prelude.Types.Left', V2077} -> {'Prelude.Types.Left', V2077}; {'Prelude.Types.Right', V2078} -> (begin (V2137 = case V2078 of {'Builtin.MkPair', V2079, V2080} -> begin (V2081 = {'Core.TT.App', V11, V12, V2079}), begin (V2087 = begin (V2082 = V1), fun (V2083) -> begin (V2086 = (begin (V2084 = V2082), fun (V2085) -> ('erlang':'get'(V2084)) end end(V2083))), {'Prelude.Types.Right', V2086} end end end), fun (V2088) -> begin (V2089 = (V2087(V2088))), case V2089 of {'Prelude.Types.Left', V2090} -> {'Prelude.Types.Left', V2090}; {'Prelude.Types.Right', V2091} -> (begin (V2136 = begin (V2092 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V2091, V10, V2073))), fun (V2093) -> begin (V2094 = (V2092(V2093))), case V2094 of {'Prelude.Types.Left', V2095} -> {'Prelude.Types.Left', V2095}; {'Prelude.Types.Right', V2096} -> (begin (V2135 = begin (V2097 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V2044, {'Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V2063}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V2073))}))), begin (V2101 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V2099 = fun (V2098) -> V2098 end), fun (V2100) -> (V2099(V2100)) end end(<<"Expected function type"/utf8>>)) end, V10, V2097))), fun (V2102) -> begin (V2103 = (V2101(V2102))), case V2103 of {'Prelude.Types.Left', V2104} -> {'Prelude.Types.Left', V2104}; {'Prelude.Types.Right', V2105} -> (begin (V2134 = begin (V2111 = case V19 of {'Prelude.Types.Just', V2106} -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, 10, fun () -> (begin (V2108 = fun (V2107) -> V2107 end), fun (V2109) -> (V2108(V2109)) end end(<<"Expected result type"/utf8>>)) end, V10, V2106)); {'Prelude.Types.Nothing'} -> fun (V2110) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V2112) -> begin (V2113 = (V2111(V2112))), case V2113 of {'Prelude.Types.Left', V2114} -> {'Prelude.Types.Left', V2114}; {'Prelude.Types.Right', V2115} -> (begin (V2133 = begin (V2116 = ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V2081, V2096, {'Builtin.MkPair', V2026, (V2027 + 1)}, V2029, V16, V17, V18, V19))), fun (V2117) -> begin (V2118 = (V2116(V2117))), case V2118 of {'Prelude.Types.Left', V2119} -> {'Prelude.Types.Left', V2119}; {'Prelude.Types.Right', V2120} -> (begin (V2132 = begin (V2121 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V11, V8, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V2091, V10, V13)), V2097))), fun (V2122) -> begin (V2123 = (V2121(V2122))), case V2123 of {'Prelude.Types.Left', V2124} -> {'Prelude.Types.Left', V2124}; {'Prelude.Types.Right', V2125} -> (begin (V2131 = begin (V2126 = {'Builtin.MkPair', V2079, V2080}), ('case--case block in checkAppWith\x{27}-20267'(V2026, V2027, V2028, V2029, V0, V19, V18, V17, V16, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V2044, V2049, V2054, V2063, V2064, V2073, V2079, V2080, V2126, V2081, V2091, V2096, V2097, V2120, V2125, case V2125 of {'Core.Unify.MkUnifyResult', V2127, V2128, V2129, V2130} -> V2127 end)) end), V2131 end(V2122)) end end end end), V2132 end(V2117)) end end end end), V2133 end(V2112)) end end end end), V2134 end(V2102)) end end end end end), V2135 end(V2093)) end end end end), V2136 end(V2088)) end end end end end end), V2137 end(V2075)) end end end end), V2138 end(V2070)) end end end end end), V2139 end(V2060)) end end end end), V2140 end(V2051)) end end end end), V2141 end(V2046)) end end end end), V2142 end(V2041)) end end end end), V2143 end(V2036)) end end end end), V2144 end(V2031)) end end end end end(E0, E1)); _ -> case V15 of [] -> begin (V2150 = begin (V2145 = V1), fun (V2146) -> begin (V2149 = (begin (V2147 = V2145), fun (V2148) -> ('erlang':'get'(V2147)) end end(V2146))), {'Prelude.Types.Right', V2149} end end end), fun (V2151) -> begin (V2152 = (V2150(V2151))), case V2152 of {'Prelude.Types.Left', V2153} -> {'Prelude.Types.Left', V2153}; {'Prelude.Types.Right', V2154} -> (begin (V2184 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2155) -> fun (V2156) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V2155, V2156)) end end, 1}, fun (V2157) -> ('un--isImplicitAs'(V2157)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V2164 = fun (V2160) -> fun (V2161) -> fun (V2162) -> fun (V2163) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V2162, V2163)) end end end end), fun (V2165) -> fun (V2166) -> ((((V2164('erased'))('erased'))(V2165))(V2166)) end end end(fun (V2159) -> ('Idris.Idris2.Builtin':'un--snd'(V2159)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V2158) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V2158)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V2154, V10, V13)), V19)); 0 -> fun (V2167) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V2173 = fun (V2169) -> fun (V2170) -> fun (V2171) -> fun (V2172) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V2171, V2172)) end end end end), fun (V2174) -> fun (V2175) -> ((((V2173('erased'))('erased'))(V2174))(V2175)) end end end(fun (V2168) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V2181 = fun (V2177) -> fun (V2178) -> fun (V2179) -> fun (V2180) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V2179, V2180)) end end end end), fun (V2182) -> fun (V2183) -> ((((V2181('erased'))('erased'))(V2182))(V2183)) end end end(fun (V2176) -> ('Idris.Idris2.Builtin':'un--fst'(V2176)) end))(V17)))), V12}, V2167)) end end), V2184 end(V2151)) end end end end end end; _ -> case V15 of [] -> begin (V2190 = begin (V2185 = V1), fun (V2186) -> begin (V2189 = (begin (V2187 = V2185), fun (V2188) -> ('erlang':'get'(V2187)) end end(V2186))), {'Prelude.Types.Right', V2189} end end end), fun (V2191) -> begin (V2192 = (V2190(V2191))), case V2192 of {'Prelude.Types.Left', V2193} -> {'Prelude.Types.Left', V2193}; {'Prelude.Types.Right', V2194} -> (begin (V2224 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2195) -> fun (V2196) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V2195, V2196)) end end, 1}, fun (V2197) -> ('un--isImplicitAs'(V2197)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, ((begin (V2204 = fun (V2200) -> fun (V2201) -> fun (V2202) -> fun (V2203) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V2202, V2203)) end end end end), fun (V2205) -> fun (V2206) -> ((((V2204('erased'))('erased'))(V2205))(V2206)) end end end(fun (V2199) -> ('Idris.Idris2.Builtin':'un--snd'(V2199)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V2198) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V2198)))) of 1 -> 0; 0 -> 1 end end, V17)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V2194, V10, V13)), V19)); 0 -> fun (V2207) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InvalidArgs', V0, V11, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V2213 = fun (V2209) -> fun (V2210) -> fun (V2211) -> fun (V2212) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V2211, V2212)) end end end end), fun (V2214) -> fun (V2215) -> ((((V2213('erased'))('erased'))(V2214))(V2215)) end end end(fun (V2208) -> {'Core.Name.UN', {'Core.Name.Basic', <<"<auto>"/utf8>>}} end))(V16)), ((begin (V2221 = fun (V2217) -> fun (V2218) -> fun (V2219) -> fun (V2220) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V2219, V2220)) end end end end), fun (V2222) -> fun (V2223) -> ((((V2221('erased'))('erased'))(V2222))(V2223)) end end end(fun (V2216) -> ('Idris.Idris2.Builtin':'un--fst'(V2216)) end))(V17)))), V12}, V2207)) end end), V2224 end(V2191)) end end end end end end end.
'un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> begin (V20 = ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V33 = case ('Idris.Idris2.TTImp.Elab.Check':'un--isLHS'(case V8 of {'TTImp.Elab.Check.MkElabInfo', V25, V26, V27, V28, V29, V30} -> V25 end)) of {'Prelude.Types.Just', V31} -> ('case--case block in checkAppWith-20693'(V0, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V24, V31, ('Idris.Idris2.Core.TT':'un--getFnArgs'(('Idris.Idris2.Builtin':'un--fst'(V24)))))); {'Prelude.Types.Nothing'} -> fun (V32) -> {'Prelude.Types.Right', V24} end end), V33 end(V21)) end end end end.
'un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V12 of {'TTImp.TTImp.IApp', V17, V18, V19} -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17, V18, [V19 | V13], V14, V15, V16)); {'TTImp.TTImp.IAutoApp', V20, V21, V22} -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V20, V21, V13, [V22 | V14], V15, V16)); {'TTImp.TTImp.INamedApp', V23, V24, V25, V26} -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V23, V24, V13, V14, [{'Builtin.MkPair', V25, V26} | V15], V16)); {'TTImp.TTImp.IVar', V27, V28} -> begin (V35 = ('un--getVarType'(V0, V1, V2, V4, case V8 of {'TTImp.Elab.Check.MkElabInfo', V29, V30, V31, V32, V33, V34} -> V29 end, V7, V9, V10, V27, V28))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V182 = case V39 of {'Builtin.MkPair', V40, V41} -> case V41 of {'Builtin.MkPair', V42, V43} -> begin (V44 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V43))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V181 = begin (V49 = ('Idris.Idris2.Core.Context':'un--getPrimitiveNames'(V1))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V180 = begin (V60 = ('nested--20903-21229--in--un--updateElabInfo'(V0, V28, V27, V16, V15, V14, V13, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V53, case V8 of {'TTImp.Elab.Check.MkElabInfo', V54, V55, V56, V57, V58, V59} -> V54 end, V28, V13, V8))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V179 = begin (V65 = ('Idris.Idris2.Core.Metadata':'un--addNameLoc'(V2, V1, V27, V28))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V178 = begin (V156 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"elab"/utf8>>, 10, begin (V75 = begin (V70 = V1), fun (V71) -> begin (V74 = (begin (V72 = V70), fun (V73) -> ('erlang':'get'(V72)) end end(V71))), {'Prelude.Types.Right', V74} end end end), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V155 = begin (V80 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V79, V10, V48))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V154 = begin (V110 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V85) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end, fun () -> fun (V86) -> begin (V87 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V86))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V109 = begin (V92 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V79, V10, V91))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V108 = begin (V101 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V97, V98)) end end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V99, V100)) end end}, V96))), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V107 = fun (V106) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V105}} end), V107 end(V102)) end end end end), V108 end(V93)) end end end end), V109 end(V88)) end end end end end end, V16))), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V153 = begin (V115 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, V28))), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V152 = begin (V124 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V120, V121)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V122, V123)) end end}, V84))), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V151 = fun (V129) -> {'Prelude.Types.Right', <<(begin (V131 = fun (V130) -> V130 end), fun (V132) -> (V131(V132)) end end(<<"Checking application of "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V119))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V28))/binary, <<<<")"/utf8>>/binary, <<<<" to "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V133) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V134) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V134)) end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V135, V136)) end end}, V133)) end, fun (V137) -> fun (V138) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V139) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V139)) end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V140, V141)) end end}, V137, V138)) end end}, V13))/binary, <<(begin (V143 = fun (V142) -> V142 end), fun (V144) -> (V143(V144)) end end(<<"\x{a}\x{9}Function type "/utf8>>))/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V128))/binary, <<(begin (V146 = fun (V145) -> V145 end), fun (V147) -> (V146(V147)) end end(<<"\x{a}\x{9}Expected app type "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V148) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V148)) end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V149, V150)) end end}, V114))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V151 end(V125)) end end end end), V152 end(V116)) end end end end), V153 end(V111)) end end end end), V154 end(V81)) end end end end), V155 end(V76)) end end end end))), fun (V157) -> begin (V158 = (V156(V157))), case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> (begin (V177 = begin (V170 = case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V161) -> fun (V162) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V161, V162)) end end, fun (V163) -> fun (V164) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V163, V164)) end end}, V28, begin (V165 = V9), V165 end)) of {'Prelude.Types.Just', V166} -> case V166 of {'Builtin.MkPair', V167, V168} -> case V167 of {'Prelude.Types.Just', V169} -> V169; _ -> V28 end; _ -> V28 end; _ -> V28 end), begin (V171 = ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V64, V9, V10, V11, V40, V48, {'Builtin.MkPair', {'Prelude.Types.Just', V170}, V42}, V13, V14, V15, 0, V16))), fun (V172) -> begin (V173 = (V171(V172))), case V173 of {'Prelude.Types.Left', V174} -> {'Prelude.Types.Left', V174}; {'Prelude.Types.Right', V175} -> (begin (V176 = ('nested--20903-21228--in--un--normalisePrims'(V0, V28, V27, V16, V15, V14, V13, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V0, V53, V10, V175))), V176 end(V172)) end end end end end), V177 end(V157)) end end end end), V178 end(V66)) end end end end), V179 end(V61)) end end end end), V180 end(V50)) end end end end), V181 end(V45)) end end end end end end), V182 end(V36)) end end end end; _ -> begin (V183 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, {'Prelude.Types.Nothing'}))), fun (V184) -> begin (V185 = (V183(V184))), case V185 of {'Prelude.Types.Left', V186} -> {'Prelude.Types.Left', V186}; {'Prelude.Types.Right', V187} -> (begin (V196 = case V187 of {'Builtin.MkPair', V188, V189} -> begin (V190 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V189))), fun (V191) -> begin (V192 = (V190(V191))), case V192 of {'Prelude.Types.Left', V193} -> {'Prelude.Types.Left', V193}; {'Prelude.Types.Right', V194} -> (begin (V195 = ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V188, V194, {'Builtin.MkPair', {'Prelude.Types.Nothing'}, 0}, V13, V14, V15, 0, V16))), V195 end(V191)) end end end end end), V196 end(V184)) end end end end end.
