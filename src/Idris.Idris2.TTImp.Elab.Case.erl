-module('Idris.Idris2.TTImp.Elab.Case').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--checkCase,guessScrType-17269'/21,
  'nested--12434-14388--in--un--usedIn'/19,
  'nested--12434-14391--in--un--updateClause'/23,
  'nested--12434-14386--in--un--replace'/21,
  'nested--12434-14389--in--un--nestLHS'/20,
  'nested--12434-14387--in--un--mkSplit'/21,
  'nested--15525-16956--in--un--guessScrType'/17,
  'nested--15525-16955--in--un--getRetTy'/18,
  'nested--12272-14195--in--un--getNameFrom'/8,
  'nested--12434-14384--in--un--getBindName'/21,
  'nested--12272-14194--in--un--getArg'/9,
  'nested--15525-16953--in--un--checkConcrete'/18,
  'nested--15525-16954--in--un--applyTo'/19,
  'nested--12434-14390--in--un--applyNested'/20,
  'nested--12434-14385--in--un--addEnv'/22,
  'un--updateMults'/2,
  'un--toRig1'/2,
  'un--toRig0'/2,
  'un--getNestData'/1,
  'un--findScrutinee'/3,
  'un--findImpsIn'/5,
  'un--explicitPi'/1,
  'un--checkCase'/16,
  'un--changeVar'/3,
  'un--caseBlock'/18,
  'un--bindCaseLocals'/4,
  'un--allow'/2
]).
'case--checkCase,guessScrType-17269'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'TTImp.TTImp.IVar', V21, V22} -> begin (V28 = begin (V23 = V15), fun (V24) -> begin (V27 = (begin (V25 = V23), fun (V26) -> ('erlang':'get'(V25)) end end(V24))), {'Prelude.Types.Right', V27} end end end), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V92 = begin (V65 = ('Idris.Idris2.Core.Context':'un--lookupTyName'(V22, case V32 of {'Core.Context.MkDefs', V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} -> V33 end))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V91 = case V69 of [E0 | E1] -> (fun (V70, V71) -> case V70 of {'Builtin.MkPair', V72, V73} -> case V73 of {'Builtin.MkPair', V74, V75} -> case V71 of [] -> begin (V82 = begin (V76 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V15, [], V32, {'Core.Env.Nil'}, V75))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V81 = ('nested--15525-16955--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V32, V80))), V81 end(V77)) end end end end), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V90 = case V86 of {'Prelude.Types.Just', V87} -> case V87 of {'Builtin.MkPair', V88, V89} -> ('nested--15525-16954--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V32, {'TTImp.TTImp.IVar', V5, V88}, V89)); _ -> ('nested--15525-16956--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19)) end; _ -> ('nested--15525-16956--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19)) end), V90 end(V83)) end end end end; _ -> ('nested--15525-16956--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19)) end; _ -> ('nested--15525-16956--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19)) end; _ -> ('nested--15525-16956--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19)) end end(E0, E1)); _ -> ('nested--15525-16956--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19)) end), V91 end(V66)) end end end end), V92 end(V29)) end end end end; _ -> ('nested--15525-16956--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19)) end.
'nested--12434-14388--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'TTImp.TTImp.IBindVar', V19, V20} -> [{'Core.Name.UN', {'Core.Name.Basic', V20}} | []]; {'TTImp.TTImp.IApp', V21, V22, V23} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--12434-14388--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22)), ('nested--12434-14388--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V23)))); {'TTImp.TTImp.IAs', V24, V25, V26, V27, V28} -> [V27 | ('nested--12434-14388--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V28))]; {'TTImp.TTImp.IAlternative', V29, V30, V31} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V32, V33)) end end, []}, fun (V34) -> ('nested--12434-14388--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V34)) end, V31)); _ -> [] end.
'nested--12434-14391--in--un--updateClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'TTImp.TTImp.PatClause', V23, V24, V25} -> case ('nested--12434-14385--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V0, 0, V21, ('nested--12434-14388--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V24)))) of {'Builtin.MkPair', V26, V27} -> begin (V28 = ('nested--12434-14387--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V19, V24, V27))), begin (V29 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V23, V18}, V28))), {'TTImp.TTImp.PatClause', V23, ('nested--12434-14390--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20, V29)), ('un--bindCaseLocals'(V23, ((begin (V36 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V34, V35)) end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end(fun (V31) -> ('un--getNestData'(V31)) end))(begin (V30 = V20), V30 end)), V26, V25))} end end end; {'TTImp.TTImp.WithClause', V39, V40, V41, V42, V43, V44, V45} -> case ('nested--12434-14385--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V0, 0, V21, ('nested--12434-14388--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V40)))) of {'Builtin.MkPair', V46, V47} -> begin (V48 = ('nested--12434-14387--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V19, V40, V47))), begin (V49 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V39, V18}, V48))), {'TTImp.TTImp.WithClause', V39, ('nested--12434-14390--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20, V49)), V41, V42, V43, V44, V45} end end end; {'TTImp.TTImp.ImpossibleClause', V50, V51} -> case ('nested--12434-14385--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V0, 0, V21, ('nested--12434-14388--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V51)))) of {'Builtin.MkPair', V52, V53} -> begin (V54 = ('nested--12434-14387--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V19, V51, V53))), begin (V55 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V50, V18}, V54))), {'TTImp.TTImp.ImpossibleClause', V50, ('nested--12434-14390--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20, V55))} end end end end.
'nested--12434-14386--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V18 of 0 -> case V20 of [E2 | E3] -> (fun (V21, V22) -> begin (V28 = case V21 of {'TTImp.TTImp.IAs', V23, V24, V25, V26, V27} -> {'TTImp.TTImp.IAs', V23, V24, V25, V26, V19}; _ -> V19 end), [V28 | V22] end end(E2, E3)); _ -> V20 end; _ -> begin (V29 = (V18 - 1)), case V20 of [E0 | E1] -> (fun (V30, V31) -> [V30 | ('nested--12434-14386--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V29, V19, V31))] end(E0, E1)); _ -> V20 end end end.
'nested--12434-14389--in--un--nestLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Builtin.MkPair', V20, V21} -> case V21 of {'Builtin.MkPair', V22, V23} -> case V23 of {'Builtin.MkPair', V24, V25} -> {'Builtin.MkPair', V20, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V18, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V20 end, V22))}, ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V26) -> {'TTImp.TTImp.Implicit', V18, 0} end))(V24))))} end end end.
'nested--12434-14387--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V18 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Prelude.Types.List':'un--reverse'([V19 | V20])); {'Prelude.Types.Just', V21} -> begin (V22 = V21), ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('nested--12434-14386--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22, V19, V20)))) end end.
'nested--15525-16956--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> fun (V17) -> {'Prelude.Types.Right', {'TTImp.TTImp.Implicit', V5, 0}} end; [E0 | E1] -> (fun (V18, V19) -> case V18 of {'TTImp.TTImp.PatClause', V20, V21, V22} -> ('case--checkCase,guessScrType-17269'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V20, V22, V21, V19, ('Idris.Idris2.TTImp.TTImp':'un--getFn'(V21)))); _ -> ('nested--15525-16956--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19)) end end(E0, E1)) end.
'nested--15525-16955--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Core.Value.NBind', V18, V19, V20, V21} -> case V20 of {'Core.TT.Pi', V22, V23, V24, V25} -> begin (V26 = ((V21(V16))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V18, {'Core.TT.Placeholder'}}))))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V31 = ('nested--15525-16955--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V30))), V31 end(V27)) end end end end; _ -> fun (V32) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; {'Core.Value.NTCon', V33, V34, V35, V36, V37} -> begin (V70 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V34, case V16 of {'Core.Context.MkDefs', V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69} -> V38 end))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V84 = case V74 of {'Prelude.Types.Just', V75} -> begin (V76 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V15, [], V16, {'Core.Env.Nil'}, V75))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V82 = fun (V81) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V34, V80}}} end), V82 end(V77)) end end end end; {'Prelude.Types.Nothing'} -> fun (V83) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V84 end(V71)) end end end end; _ -> fun (V85) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'nested--12272-14195--in--un--getNameFrom'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = V7), case ('nested--12272-14194--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V5, V8)) of {'Prelude.Types.Nothing'} -> V0; {'Prelude.Types.Just', V9} -> V9 end end.
'nested--12434-14384--in--un--getBindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V19 of {'Core.Name.UN', V21} -> begin (V22 = {'Core.Name.UN', V21}), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V34)) end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V38, V39, V40, V41)) end end end end end end end, fun (V42) -> fun (V43) -> V43 end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V46, V47, V48)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V51, V52)) end end}, V22, V20)) of 1 -> {'Builtin.MkPair', V22, {'Core.Name.MN', ('Idris.Idris2.Core.Name':'un--displayUserName'(V21)), V18}}; 0 -> {'Builtin.MkPair', V22, V22} end end; _ -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V64)) end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V68, V69, V70, V71)) end end end end end end end, fun (V72) -> fun (V73) -> V73 end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V76, V77, V78)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V79, V80)) end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V81, V82)) end end}, V19, V20)) of 1 -> {'Builtin.MkPair', V19, {'Core.Name.MN', <<"_cn"/utf8>>, V18}}; 0 -> {'Builtin.MkPair', V19, V19} end end.
'nested--12272-14194--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Builtin.MkPair', V11, V12} -> case V8 of 0 -> {'Prelude.Types.Just', V12}; _ -> case V8 of 0 -> ('erlang':'throw'({'$idris_error', <<"Nat case not covered"/utf8>>})); _ -> begin (V13 = (V8 - 1)), ('nested--12272-14194--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V10, V13)) end end end; _ -> case V8 of 0 -> ('erlang':'throw'({'$idris_error', <<"Nat case not covered"/utf8>>})); _ -> begin (V14 = (V8 - 1)), ('nested--12272-14194--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V10, V14)) end end end end(E0, E1)) end.
'nested--15525-16953--in--un--checkConcrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V16 of {'Core.Value.NApp', V18, V19, V20} -> case V19 of {'Core.Value.NMeta', V21, V22, V23} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V5, <<"Can\x{27}t infer type for case scrutinee"/utf8>>}, V17)); _ -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; _ -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end.
'nested--15525-16954--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Core.Value.NBind', V19, V20, V21, V22} -> case V21 of {'Core.TT.Pi', V23, V24, V25, V26} -> case V25 of {'Core.TT.Explicit'} -> begin (V27 = ((V22(V16))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V19, {'Core.TT.Placeholder'}}))))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V32 = ('nested--15525-16954--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, {'TTImp.TTImp.IApp', V19, V17, {'TTImp.TTImp.Implicit', V19, 0}}, V31))), V32 end(V28)) end end end end; _ -> begin (V33 = ((V22(V16))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V5, {'Core.TT.Placeholder'}}))))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V38 = ('nested--15525-16954--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, {'TTImp.TTImp.INamedApp', V5, V17, V20, {'TTImp.TTImp.Implicit', V5, 0}}, V37))), V38 end(V34)) end end end end end; _ -> fun (V39) -> {'Prelude.Types.Right', V17} end end; _ -> fun (V40) -> {'Prelude.Types.Right', V17} end end.
'nested--12434-14390--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> begin (V20 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V19))), ('Idris.Idris2.TTImp.Utils':'un--substNames'([], ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> ('nested--12434-14389--in--un--nestLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20, V22)) end))(begin (V21 = V18), V21 end)), V19)) end.
'nested--12434-14385--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V18 of [] -> case V20 of {'Core.Env.Nil'} -> {'Builtin.MkPair', [], []} end; [E0 | E1] -> (fun (V22, V23) -> case V20 of {'Core.Env.::', V24, V25} -> begin (V26 = ('nested--12434-14384--in--un--getBindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V19, V22, V21))), case ('nested--12434-14385--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V23, begin (V27 = (V19 + 1)), case ((V27 band 9223372036854775808) =/= 0) of 'true' -> (V27 bor -9223372036854775808); _ -> (V27 band 9223372036854775807) end end, V25, [('Idris.Idris2.Builtin':'un--snd'(V26)) | V21])) of {'Builtin.MkPair', V28, V29} -> begin (V30 = [V26 | V28]), {'Builtin.MkPair', V30, [{'TTImp.TTImp.IAs', V9, {'Core.FC.EmptyFC'}, 0, ('Idris.Idris2.Builtin':'un--snd'(V26)), {'TTImp.TTImp.Implicit', V9, 1}} | V29]} end end end end end(E0, E1)) end.
'un--updateMults'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> begin (V4 = V2), ('un--updateMults'(V3, ('un--toRig0'(V4, V1)))) end end(E0, E1)) end.
'un--toRig1'(V0, V1) -> case V0 of 0 -> case V1 of {'Core.Env.::', V2, V3} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V4, V5)) end end, 0, fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V6, V7)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V10, V11)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V2)))) of 1 -> {'Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V2, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V12, V13)) end end, 0, fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V14, V15)) end end, 1})))), V3}; 0 -> {'Core.Env.::', V2, V3} end end; _ -> begin (V16 = (V0 - 1)), case V1 of {'Core.Env.::', V17, V18} -> {'Core.Env.::', V17, ('un--toRig1'(V16, V18))} end end end.
'un--toRig0'(V0, V1) -> case V0 of 0 -> case V1 of {'Core.Env.::', V2, V3} -> {'Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V4, V5)) end end, 0, fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V6, V7)) end end, 1})))), V3} end; _ -> begin (V8 = (V0 - 1)), case V1 of {'Core.Env.::', V9, V10} -> {'Core.Env.::', V9, ('un--toRig0'(V8, V10))} end end end.
'un--getNestData'(V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> {'Builtin.MkPair', V1, {'Builtin.MkPair', V3, V5}} end end end.
'un--findScrutinee'(V0, V1, V2) -> case V0 of [E0 | E1] -> (fun (V3, V4) -> case V1 of {'Core.Env.::', V5, V6} -> case V2 of {'TTImp.TTImp.IVar', V7, V8} -> case case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V3, V8)) of 1 -> case ('Idris.Idris2.Core.TT':'un--isLet'(V5)) of 1 -> 0; 0 -> 1 end; 0 -> 0 end of 1 -> {'Prelude.Types.Just', 0}; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--findScrutinee'(V4, V6, {'TTImp.TTImp.IVar', V7, V8})), fun (V9) -> begin (V10 = V9), {'Prelude.Types.Just', (V10 + 1)} end end)) end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end.
'un--findImpsIn'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Bind', V5, V6, V7, V8} -> case V7 of {'Core.TT.Pi', V9, V10, V11, V12} -> case V11 of {'Core.TT.Implicit'} -> ('un--findImpsIn'([V6 | V0], V1, {'Core.Env.::', V7, V2}, [{'Builtin.MkPair', V6, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V12))} | ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V13)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(('Idris.Idris2.Builtin':'un--snd'(V13))))} end))(V3))], V8)); _ -> ('un--findImpsIn'([V6 | V0], V1, {'Core.Env.::', V7, V2}, ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V21)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(('Idris.Idris2.Builtin':'un--snd'(V21))))} end))(V3)), V8)) end; _ -> ('un--findImpsIn'([V6 | V0], V1, {'Core.Env.::', V7, V2}, ((begin (V34 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V32, V33)) end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V29) -> {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V29)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(('Idris.Idris2.Builtin':'un--snd'(V29))))} end))(V3)), V8)) end; _ -> fun (V37) -> case ('Idris.Idris2.Data.List':'un--isNil'(V3)) of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.TryWithImplicits', V0, V1, V2, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V3))}, V37)) end end end.
'un--explicitPi'(V0) -> case V0 of {'Core.Env.::', V1, V2} -> case V1 of {'Core.TT.Pi', V3, V4, V5, V6} -> {'Core.Env.::', {'Core.TT.Pi', V3, V4, {'Core.TT.Explicit'}, V6}, ('un--explicitPi'(V2))}; _ -> {'Core.Env.::', V1, ('un--explicitPi'(V2))} end; {'Core.Env.Nil'} -> {'Core.Env.Nil'} end.
'un--checkCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayElab'(V0, V1, V2, V3, V4, V11, V7, V10, V15, 0, begin (V19 = case V13 of {'TTImp.TTImp.Implicit', V16, V17} -> ('nested--15525-16956--in--un--guessScrType'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V14)); _ -> fun (V18) -> {'Prelude.Types.Right', V13} end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V161 = begin (V24 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V160 = begin (V33 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V29, V30)) end end, 0, fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V31, V32)) end end, 1})), V8, V9, V10, V23, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V11, V28))}))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V159 = case V37 of {'Builtin.MkPair', V38, V39} -> begin (V43 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.case"/utf8>>, 10, fun () -> (begin (V41 = fun (V40) -> V40 end), fun (V42) -> (V41(V42)) end end(<<"Expected scrutinee type"/utf8>>)) end, V38))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V158 = begin (V60 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V48) -> fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V48, V49)) end end, 0, fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V50, V51)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V52) -> fun (V53) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V54, V55)) end end}}, V7)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V56) -> fun (V57) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V56, V57)) end end, 0, fun (V58) -> fun (V59) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V58, V59)) end end, 1})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()) end), begin (V64 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, 5, fun () -> <<<<"Checking "/utf8>>/binary, <<('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V61) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V61)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V62, V63)) end end}, V12))/binary, <<<<" at "/utf8>>/binary, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V60))/binary>>/binary>>/binary>> end))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V157 = begin (V108 = ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, begin (V70 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V1, V2, V3, V4, fun (V69) -> 1 end, ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V60, V8, V9, V10, V12, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V38))}))))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V76 = fun (V75) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V74)), {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'(V74)), V60}}} end), V76 end(V71)) end end end end, fun (V77) -> case V77 of {'Core.Core.LinearMisuse', V78, V79, V80, V81} -> ('Idris.Idris2.Algebra.Semiring':'un--branchOne'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V82) -> fun (V83) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V82, V83)) end end, 0, fun (V84) -> fun (V85) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V84, V85)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V86) -> fun (V87) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V88, V89)) end end}}, fun () -> begin (V95 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V1, V2, V3, V4, fun (V90) -> 1 end, ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V91) -> fun (V92) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V91, V92)) end end, 0, fun (V93) -> fun (V94) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V93, V94)) end end, 1})), V8, V9, V10, V12, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V38))}))))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V105 = fun (V100) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V99)), {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'(V99)), ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V101) -> fun (V102) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V101, V102)) end end, 0, fun (V103) -> fun (V104) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V103, V104)) end end, 1}))}}} end), V105 end(V96)) end end end end end, fun () -> fun (V106) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V77, V106)) end end, V80)); _ -> fun (V107) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V77, V107)) end end end))), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V156 = case V112 of {'Builtin.MkPair', V113, V114} -> case V114 of {'Builtin.MkPair', V115, V116} -> begin (V117 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V115))), fun (V118) -> begin (V119 = (V117(V118))), case V119 of {'Prelude.Types.Left', V120} -> {'Prelude.Types.Left', V120}; {'Prelude.Types.Right', V121} -> (begin (V155 = begin (V125 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.case"/utf8>>, 5, fun () -> (begin (V123 = fun (V122) -> V122 end), fun (V124) -> (V123(V124)) end end(<<"Scrutinee type"/utf8>>)) end, V10, V121))), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V154 = begin (V135 = begin (V130 = V1), fun (V131) -> begin (V134 = (begin (V132 = V130), fun (V133) -> ('erlang':'get'(V132)) end end(V131))), {'Prelude.Types.Right', V134} end end end), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V153 = begin (V147 = begin (V140 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V139, V10, V121))), fun (V141) -> begin (V142 = (V140(V141))), case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> (begin (V146 = fun (V145) -> ('nested--15525-16953--in--un--checkConcrete'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V144, V145)) end), V146 end(V141)) end end end end), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V152 = ('un--caseBlock'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V9, V10, V12, V113, V121, V116, V14, V15))), V152 end(V148)) end end end end), V153 end(V136)) end end end end), V154 end(V126)) end end end end), V155 end(V118)) end end end end end end), V156 end(V109)) end end end end), V157 end(V65)) end end end end end), V158 end(V44)) end end end end end), V159 end(V34)) end end end end), V160 end(V25)) end end end end), V161 end(V20)) end end end end)).
'un--changeVar'(V0, V1, V2) -> begin (V3 = V0), begin (V4 = V1), case V2 of {'Core.TT.Local', V5, V6, V7} -> case case (V3 =:= V7) of 'false' -> 0; _ -> 1 end of 1 -> {'Core.TT.Local', V5, V6, V4}; 0 -> {'Core.TT.Local', V5, V6, V7} end; _ -> case V2 of {'Core.TT.Meta', V8, V9, V10, V11} -> {'Core.TT.Meta', V8, V9, V10, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('un--changeVar'(V0, V1, V12)) end))(V11))}; _ -> begin (V20 = V0), begin (V21 = V1), case V2 of {'Core.TT.Bind', V22, V23, V24, V25} -> {'Core.TT.Bind', V22, V23, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V26) -> ('un--changeVar'(V20, V21, V26)) end, V24)), ('un--changeVar'((V20 + 1), (V21 + 1), V25))}; _ -> case V2 of {'Core.TT.App', V27, V28, V29} -> {'Core.TT.App', V27, ('un--changeVar'(V0, V1, V28)), ('un--changeVar'(V0, V1, V29))}; {'Core.TT.As', V30, V31, V32, V33} -> {'Core.TT.As', V30, V31, ('un--changeVar'(V0, V1, V32)), ('un--changeVar'(V0, V1, V33))}; {'Core.TT.TDelayed', V34, V35, V36} -> {'Core.TT.TDelayed', V34, V35, ('un--changeVar'(V0, V1, V36))}; {'Core.TT.TDelay', V37, V38, V39, V40} -> {'Core.TT.TDelay', V37, V38, ('un--changeVar'(V0, V1, V39)), ('un--changeVar'(V0, V1, V40))}; {'Core.TT.TForce', V41, V42, V43} -> {'Core.TT.TForce', V41, V42, ('un--changeVar'(V0, V1, V43))}; _ -> V2 end end end end end end end end.
'un--caseBlock'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> begin (V23 = begin (V18 = V4), fun (V19) -> begin (V22 = (begin (V20 = V18), fun (V21) -> ('erlang':'get'(V20)) end end(V19))), {'Prelude.Types.Right', V22} end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V621 = begin (V40 = ('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--getToBind'(V0, V1, V4, V3, V9, case V8 of {'TTImp.Elab.Check.MkElabInfo', V28, V29, V30, V31, V32, V33} -> V28 end, case V8 of {'TTImp.Elab.Check.MkElabInfo', V34, V35, V36, V37, V38, V39} -> V35 end, V11, []))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V620 = begin (V60 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, 5, fun () -> <<<<"Doing a case under unbound implicits "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V46)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V47, V48)) end end}, {'Prelude.Show.MkShow', fun (V49) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V50, V51)) end end}}, V45)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V55, V56)) end end}, {'Prelude.Show.MkShow', fun (V57) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V57)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V58, V59)) end end}}, V52, V53)) end end}, V44))/binary>> end))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V619 = begin (V65 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"scr"/utf8>>))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V618 = begin (V101 = begin (V89 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V70, V71)) end end, fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V72, V73, V74)) end end end}, {'Core.Name.Resolved', case V27 of {'TTImp.Elab.Check.MkEState', V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88} -> V76 end}))), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V100 = begin (V94 = ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V93))), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V99 = ('Idris.Idris2.Core.UnifyState':'un--genCaseName'(V1, V3, V98))), V99 end(V95)) end end end end), V100 end(V90)) end end end end), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V617 = begin (V120 = ('un--updateMults'(case V27 of {'TTImp.Elab.Check.MkEState', V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119} -> V117 end, V11))), begin (V126 = begin (V121 = V1), fun (V122) -> begin (V125 = (begin (V123 = V121), fun (V124) -> ('erlang':'get'(V123)) end end(V122))), {'Prelude.Types.Right', V125} end end end), fun (V127) -> begin (V128 = (V126(V127))), case V128 of {'Prelude.Types.Left', V129} -> {'Prelude.Types.Left', V129}; {'Prelude.Types.Right', V130} -> (begin (V616 = begin (V177 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', case V27 of {'TTImp.Elab.Check.MkEState', V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144} -> V132 end}, case V130 of {'Core.Context.MkDefs', V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176} -> V145 end))), fun (V178) -> begin (V179 = (V177(V178))), case V179 of {'Prelude.Types.Left', V180} -> {'Prelude.Types.Left', V180}; {'Prelude.Types.Right', V181} -> (begin (V615 = begin (V205 = case V181 of {'Prelude.Types.Just', V182} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V182 of {'Core.Context.Context.MkGlobalDef', V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204} -> V192 end, 2)) of 1 -> 2; 0 -> 0 end; {'Prelude.Types.Nothing'} -> 2 end), begin (V206 = ('un--findScrutinee'(V0, V120, V12))), begin (V224 = case V17 of {'Prelude.Types.Just', V207} -> ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V207)); _ -> begin (V208 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"caseTy"/utf8>>))), fun (V209) -> begin (V210 = (V208(V209))), case V210 of {'Prelude.Types.Left', V211} -> {'Prelude.Types.Left', V211}; {'Prelude.Types.Right', V212} -> (begin (V223 = begin (V213 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V9))), fun (V214) -> begin (V215 = (V213(V214))), case V215 of {'Prelude.Types.Left', V216} -> {'Prelude.Types.Left', V216}; {'Prelude.Types.Right', V217} -> (begin (V222 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V218) -> fun (V219) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V218, V219)) end end, 0, fun (V220) -> fun (V221) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V220, V221)) end end, 1})), V120, V212, {'Core.TT.TType', V9, V217}))), V222 end(V214)) end end end end), V223 end(V209)) end end end end end), fun (V225) -> begin (V226 = (V224(V225))), case V226 of {'Prelude.Types.Left', V227} -> {'Prelude.Types.Left', V227}; {'Prelude.Types.Right', V228} -> (begin (V614 = begin (V229 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V9))), fun (V230) -> begin (V231 = (V229(V230))), case V231 of {'Prelude.Types.Left', V232} -> {'Prelude.Types.Left', V232}; {'Prelude.Types.Right', V233} -> (begin (V613 = begin (V241 = fun (V234) -> ('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--bindImplicits'(V1, V0, V9, case V8 of {'TTImp.Elab.Check.MkElabInfo', V235, V236, V237, V238, V239, V240} -> V236 end, V130, V120, V44, V228, {'Core.TT.TType', V9, V233}, V234)) end), fun (V242) -> begin (V243 = (V241(V242))), case V243 of {'Prelude.Types.Left', V244} -> {'Prelude.Types.Left', V244}; {'Prelude.Types.Right', V245} -> (begin (V612 = case V245 of {'Builtin.MkPair', V246, V247} -> begin (V249 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V9, ('un--allow'(V206, ('un--explicitPi'(V120)))), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Core.TT.Bind', V9, V69, {'Core.TT.Pi', V9, V15, {'Core.TT.Explicit'}, V14}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V246))} end, fun () -> fun (V248) -> V246 end end, V206))))), begin (V250 = ('Idris.Idris2.Core.Normalise':'un--normaliseSizeLimit'(V1, [], V130, 10, {'Core.Env.Nil'}, V249))), fun (V251) -> begin (V252 = (V250(V251))), case V252 of {'Prelude.Types.Left', V253} -> {'Prelude.Types.Left', V253}; {'Prelude.Types.Right', V254} -> (begin (V611 = begin (V255 = ('Idris.Idris2.TTImp.Elab.Utils':'un--findErased'(V1, V254))), fun (V256) -> begin (V257 = (V255(V256))), case V257 of {'Prelude.Types.Left', V258} -> {'Prelude.Types.Left', V258}; {'Prelude.Types.Right', V259} -> (begin (V610 = case V259 of {'Builtin.MkPair', V260, V261} -> begin (V262 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"elab.case"/utf8>>, 10, <<"Case env"/utf8>>, V120))), fun (V263) -> begin (V264 = (V262(V263))), case V264 of {'Prelude.Types.Left', V265} -> {'Prelude.Types.Left', V265}; {'Prelude.Types.Right', V266} -> (begin (V609 = begin (V270 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"elab.case"/utf8>>, 2, fun () -> <<(begin (V268 = fun (V267) -> V267 end), fun (V269) -> (V268(V269)) end end(<<"Case function type: "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V105))/binary>> end, {'Core.Env.Nil'}, V254))), fun (V271) -> begin (V272 = (V270(V271))), case V272 of {'Prelude.Types.Left', V273} -> {'Prelude.Types.Left', V273}; {'Prelude.Types.Right', V274} -> (begin (V608 = begin (V276 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V275) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V275)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V254))))))), fun (V277) -> begin (V278 = (V276(V277))), case V278 of {'Prelude.Types.Left', V279} -> {'Prelude.Types.Left', V279}; {'Prelude.Types.Right', V280} -> (begin (V607 = begin (V282 = case ('Idris.Idris2.Data.List':'un--isNil'(V44)) of 1 -> fun (V281) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('un--findImpsIn'([], V9, {'Core.Env.Nil'}, [], V254)) end), fun (V283) -> begin (V284 = (V282(V283))), case V284 of {'Prelude.Types.Left', V285} -> {'Prelude.Types.Left', V285}; {'Prelude.Types.Right', V286} -> (begin (V606 = begin (V321 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V105, case ('Idris.Idris2.Core.Context':'un--newDef'(V9, V105, case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V287) -> fun (V288) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V287, V288)) end end, 0, fun (V289) -> fun (V290) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V289, V290)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V291) -> fun (V292) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V291, V292)) end end, fun (V293) -> fun (V294) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V293, V294)) end end}}, V7)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V295) -> fun (V296) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V295, V296)) end end, 0, fun (V297) -> fun (V298) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V297, V298)) end end, 1})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()) end, [], V254, V205, {'Core.Context.Context.None'})) of {'Core.Context.Context.MkGlobalDef', V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320} -> {'Core.Context.Context.MkGlobalDef', V299, V300, V301, V260, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320} end))), fun (V322) -> begin (V323 = (V321(V322))), case V323 of {'Prelude.Types.Left', V324} -> {'Prelude.Types.Left', V324}; {'Prelude.Types.Right', V325} -> (begin (V605 = begin (V349 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 2 end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V181, fun (V326) -> ('Idris.Idris2.Core.Context.Context':'un--findSetTotal'(case V326 of {'Core.Context.Context.MkGlobalDef', V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348} -> V338 end)) end))))), begin (V353 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, 5, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([(begin (V351 = fun (V350) -> V350 end), fun (V352) -> (V351(V352)) end end(<<"Setting totality requirement for"/utf8>>)) | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V105)) | [<<"to"/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V349)) | []]]]])) end))), fun (V354) -> begin (V355 = (V353(V354))), case V355 of {'Prelude.Types.Left', V356} -> {'Prelude.Types.Left', V356}; {'Prelude.Types.Right', V357} -> (begin (V604 = begin (V358 = ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V9, {'Core.Name.Resolved', V325}, {'Core.Context.Context.SetTotal', V349}))), fun (V359) -> begin (V360 = (V358(V359))), case V360 of {'Prelude.Types.Left', V361} -> {'Prelude.Types.Left', V361}; {'Prelude.Types.Right', V362} -> (begin (V603 = begin (V363 = {'Core.TT.Ref', V9, {'Core.TT.Func'}, {'Core.Name.Resolved', V325}}), begin (V364 = ('Idris.Idris2.Core.UnifyState':'un--applyToFull'(V0, V9, V363, V120))), begin (V366 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Core.TT.App', V9, V364, V13} end, fun () -> fun (V365) -> V364 end end, V206))), begin (V375 = ((begin (V372 = fun (V368) -> fun (V369) -> fun (V370) -> fun (V371) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V370, V371)) end end end end), fun (V373) -> fun (V374) -> ((((V372('erased'))('erased'))(V373))(V374)) end end end(fun (V367) -> ('nested--12434-14391--in--un--updateClause'(V0, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V105, V206, V10, V120, V367)) end))(V16))), begin (V472 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, 2, fun () -> <<<<"Nested: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V376) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V377) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V377)) end, fun (V378) -> fun (V379) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V378, V379)) end end}, {'Prelude.Show.MkShow', fun (V380) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V381) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V382) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V382)) end, fun (V383) -> fun (V384) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V383, V384)) end end}, V381)) end, fun (V385) -> fun (V386) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V387) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V387)) end, fun (V388) -> fun (V389) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V388, V389)) end end}, V385, V386)) end end}, {'Prelude.Show.MkShow', fun (V390) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V391) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V391)) end, fun (V392) -> fun (V393) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V392, V393)) end end}, V390)) end, fun (V394) -> fun (V395) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V396) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V396)) end, fun (V397) -> fun (V398) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V397, V398)) end end}, V394, V395)) end end}}, V380)) end, fun (V399) -> fun (V400) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V401) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V402) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V402)) end, fun (V403) -> fun (V404) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V403, V404)) end end}, V401)) end, fun (V405) -> fun (V406) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V407) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V407)) end, fun (V408) -> fun (V409) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V408, V409)) end end}, V405, V406)) end end}, {'Prelude.Show.MkShow', fun (V410) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V411) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V411)) end, fun (V412) -> fun (V413) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V412, V413)) end end}, V410)) end, fun (V414) -> fun (V415) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V416) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V416)) end, fun (V417) -> fun (V418) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V417, V418)) end end}, V414, V415)) end end}}, V399, V400)) end end}}, V376)) end, fun (V419) -> fun (V420) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V421) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V421)) end, fun (V422) -> fun (V423) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V422, V423)) end end}, {'Prelude.Show.MkShow', fun (V424) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V425) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V426) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V426)) end, fun (V427) -> fun (V428) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V427, V428)) end end}, V425)) end, fun (V429) -> fun (V430) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V431) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V431)) end, fun (V432) -> fun (V433) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V432, V433)) end end}, V429, V430)) end end}, {'Prelude.Show.MkShow', fun (V434) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V435) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V435)) end, fun (V436) -> fun (V437) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V436, V437)) end end}, V434)) end, fun (V438) -> fun (V439) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V440) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V440)) end, fun (V441) -> fun (V442) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V441, V442)) end end}, V438, V439)) end end}}, V424)) end, fun (V443) -> fun (V444) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V445) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V446) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V446)) end, fun (V447) -> fun (V448) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V447, V448)) end end}, V445)) end, fun (V449) -> fun (V450) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V451) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V451)) end, fun (V452) -> fun (V453) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V452, V453)) end end}, V449, V450)) end end}, {'Prelude.Show.MkShow', fun (V454) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V455) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V455)) end, fun (V456) -> fun (V457) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V456, V457)) end end}, V454)) end, fun (V458) -> fun (V459) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V460) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V460)) end, fun (V461) -> fun (V462) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V461, V462)) end end}, V458, V459)) end end}}, V443, V444)) end end}}, V419, V420)) end end}, ((begin (V469 = fun (V465) -> fun (V466) -> fun (V467) -> fun (V468) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V467, V468)) end end end end), fun (V470) -> fun (V471) -> ((((V469('erased'))('erased'))(V470))(V471)) end end end(fun (V464) -> ('un--getNestData'(V464)) end))(begin (V463 = V10), V463 end))))/binary>> end))), fun (V473) -> begin (V474 = (V472(V473))), case V474 of {'Prelude.Types.Left', V475} -> {'Prelude.Types.Left', V475}; {'Prelude.Types.Right', V476} -> (begin (V602 = begin (V489 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, 2, fun () -> <<(begin (V478 = fun (V477) -> V477 end), fun (V479) -> (V478(V479)) end end(<<"Generated alts: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V480) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V481) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V481)) end, fun (V482) -> fun (V483) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V482, V483)) end end}, V480)) end, fun (V484) -> fun (V485) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V486) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V486)) end, fun (V487) -> fun (V488) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V487, V488)) end end}, V484, V485)) end end}, V375))/binary>> end))), fun (V490) -> begin (V491 = (V489(V490))), case V491 of {'Prelude.Types.Left', V492} -> {'Prelude.Types.Left', V492}; {'Prelude.Types.Right', V493} -> (begin (V601 = begin (V497 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.case"/utf8>>, 2, fun () -> (begin (V495 = fun (V494) -> V494 end), fun (V496) -> (V495(V496)) end end(<<"Case application"/utf8>>)) end, V120, V366))), fun (V498) -> begin (V499 = (V497(V498))), case V499 of {'Prelude.Types.Left', V500} -> {'Prelude.Types.Left', V500}; {'Prelude.Types.Right', V501} -> (begin (V600 = begin (V502 = []), begin (V508 = begin (V503 = V3), fun (V504) -> begin (V507 = (begin (V505 = V503), fun (V506) -> ('erlang':'get'(V505)) end end(V504))), {'Prelude.Types.Right', V507} end end end), fun (V509) -> begin (V510 = (V508(V509))), case V510 of {'Prelude.Types.Left', V511} -> {'Prelude.Types.Left', V511}; {'Prelude.Types.Right', V512} -> (begin (V599 = begin (V525 = case V512 of {'Core.UnifyState.MkUState', V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524} -> V523 end), begin (V543 = begin (V526 = V3), fun (V527) -> begin (V542 = (begin (V528 = V526), fun (V529) -> ('erlang':'put'(V528, case V512 of {'Core.UnifyState.MkUState', V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541} -> {'Core.UnifyState.MkUState', V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, [], V541} end)) end end(V527))), {'Prelude.Types.Right', V542} end end end), fun (V544) -> begin (V545 = (V543(V544))), case V545 of {'Prelude.Types.Left', V546} -> {'Prelude.Types.Left', V546}; {'Prelude.Types.Right', V547} -> (begin (V598 = begin (V548 = ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'([], V1, V2, V3, V5, V6, [1 | []], V502, {'Core.Env.Nil'}, {'TTImp.TTImp.IDef', V9, V105, V375}))), fun (V549) -> begin (V550 = (V548(V549))), case V550 of {'Prelude.Types.Left', V551} -> {'Prelude.Types.Left', V551}; {'Prelude.Types.Right', V552} -> (begin (V597 = begin (V554 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V553) -> 1 end end, V206))), begin (V556 = case V554 of 1 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V9, V105, {'Core.Context.Context.Inline'})); 0 -> fun (V555) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V557) -> begin (V558 = (V556(V557))), case V558 of {'Prelude.Types.Left', V559} -> {'Prelude.Types.Left', V559}; {'Prelude.Types.Right', V560} -> (begin (V596 = begin (V566 = begin (V561 = V3), fun (V562) -> begin (V565 = (begin (V563 = V561), fun (V564) -> ('erlang':'get'(V563)) end end(V562))), {'Prelude.Types.Right', V565} end end end), fun (V567) -> begin (V568 = (V566(V567))), case V568 of {'Prelude.Types.Left', V569} -> {'Prelude.Types.Left', V569}; {'Prelude.Types.Right', V570} -> (begin (V595 = begin (V588 = begin (V571 = V3), fun (V572) -> begin (V587 = (begin (V573 = V571), fun (V574) -> ('erlang':'put'(V573, case V570 of {'Core.UnifyState.MkUState', V575, V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, V586} -> {'Core.UnifyState.MkUState', V575, V576, V577, V578, V579, V580, V581, V582, V583, V584, V525, V586} end)) end end(V572))), {'Prelude.Types.Right', V587} end end end), fun (V589) -> begin (V590 = (V588(V589))), case V590 of {'Prelude.Types.Left', V591} -> {'Prelude.Types.Left', V591}; {'Prelude.Types.Right', V592} -> (begin (V594 = fun (V593) -> {'Prelude.Types.Right', {'Builtin.MkPair', V366, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V120, V246))}} end), V594 end(V589)) end end end end), V595 end(V567)) end end end end), V596 end(V557)) end end end end end), V597 end(V549)) end end end end), V598 end(V544)) end end end end end), V599 end(V509)) end end end end end), V600 end(V498)) end end end end), V601 end(V490)) end end end end), V602 end(V473)) end end end end end end end end), V603 end(V359)) end end end end), V604 end(V354)) end end end end end), V605 end(V322)) end end end end), V606 end(V283)) end end end end), V607 end(V277)) end end end end), V608 end(V271)) end end end end), V609 end(V263)) end end end end end), V610 end(V256)) end end end end), V611 end(V251)) end end end end end end), V612 end(V242)) end end end end), V613 end(V230)) end end end end), V614 end(V225)) end end end end end end), V615 end(V178)) end end end end), V616 end(V127)) end end end end end), V617 end(V102)) end end end end), V618 end(V66)) end end end end), V619 end(V61)) end end end end), V620 end(V41)) end end end end), V621 end(V24)) end end end end.
'un--bindCaseLocals'(V0, V1, V2, V3) -> case V1 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'TTImp.TTImp.ICaseLocal', V0, V6, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V6 end, V8)), ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('nested--12272-14195--in--un--getNameFrom'(V6, V8, V9, V5, V3, V2, V0, V10)) end))(V9)), ('un--bindCaseLocals'(V0, V5, V2, V3))} end end end(E0, E1)) end.
'un--allow'(V0, V1) -> case V0 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V2} -> begin (V3 = V2), ('un--toRig1'(V3, V1)) end end.
