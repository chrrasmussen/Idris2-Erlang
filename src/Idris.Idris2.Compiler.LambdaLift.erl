-module('Idris.Idris2.Compiler.LambdaLift').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8805-4796--in--un--usedConstAlt'/10,
  'nested--8805-4749--in--un--usedConAlt'/10,
  'nested--8784-4309--in--un--traverseArgs'/9,
  'nested--8311-3389--in--un--mkName'/3,
  'nested--8784-4557--in--un--liftConstAlt'/10,
  'nested--8784-4495--in--un--liftConAlt'/10,
  'nested--8632-3694--in--un--finIdx'/5,
  'nested--8850-5324--in--un--dropConstCase'/9,
  'nested--8850-5250--in--un--dropConCase'/9,
  'nested--8755-3930--in--un--allVars'/10,
  'nested--8755-3929--in--un--allPrfs'/9,
  'dn--un--show_Show_LiftedDef'/1,
  'dn--un--show_Show_(LiftedConstAlt $vs)'/2,
  'dn--un--show_Show_(LiftedConAlt $vs)'/2,
  'dn--un--show_Show_(Lifted $vs)'/2,
  'dn--un--showPrec_Show_LiftedDef'/2,
  'dn--un--showPrec_Show_(LiftedConstAlt $vs)'/3,
  'dn--un--showPrec_Show_(LiftedConAlt $vs)'/3,
  'dn--un--showPrec_Show_(Lifted $vs)'/3,
  'dn--un--__Impl_Show_LiftedDef'/0,
  'dn--un--__Impl_Show_(LiftedConstAlt $vs)'/1,
  'dn--un--__Impl_Show_(LiftedConAlt $vs)'/1,
  'dn--un--__Impl_Show_(Lifted $vs)'/1,
  'un--weakenUsed'/2,
  'un--usedVars'/4,
  'un--unload'/4,
  'un--showLazy'/1,
  'un--markUsed'/3,
  'un--makeLam'/7,
  'un--liftExp'/5,
  'un--liftBody'/4,
  'un--lambdaLiftDef'/3,
  'un--lambdaLift'/3,
  'un--initUsed'/1,
  'un--getUnused'/1,
  'un--genName'/1,
  'un--dropped'/2,
  'un--dropUnused'/5,
  'un--dropIdx'/4,
  'un--contractUsedMany'/2,
  'un--contractUsed'/1
]).
'nested--8805-4796--in--un--usedConstAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Compiler.LambdaLift.MkLConstAlt', V10, V11} -> ('un--usedVars'(V0, V6, V8, V11)) end.
'nested--8805-4749--in--un--usedConAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Compiler.LambdaLift.MkLConAlt', V10, V11, V12, V13, V14} -> ('un--contractUsedMany'(V13, ('un--usedVars'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V13, V0)), V6, ('un--weakenUsed'(V13, V8)), V14)))) end.
'nested--8784-4309--in--un--traverseArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Data.Vect.Nil'} -> fun (V9) -> {'Prelude.Types.Right', {'Data.Vect.Nil'}} end; {'Data.Vect.::', V10, V11} -> begin (V12 = ('un--liftExp'(V0, V7, V1, {'Prelude.Types.Nothing'}, V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V24 = begin (V17 = ('nested--8784-4309--in--un--traverseArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V11))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V23 = fun (V22) -> {'Prelude.Types.Right', {'Data.Vect.::', V16, V21}} end), V23 end(V18)) end end end end), V24 end(V13)) end end end end end.
'nested--8311-3389--in--un--mkName'(V0, V1, V2) -> case V1 of {'Core.Name.NS', V3, V4} -> {'Core.Name.NS', V3, ('nested--8311-3389--in--un--mkName'(V0, V4, V2))}; {'Core.Name.UN', V5} -> {'Core.Name.MN', ('Idris.Idris2.Core.Name':'un--displayUserName'(V5)), V2}; {'Core.Name.DN', V6, V7} -> ('nested--8311-3389--in--un--mkName'(V0, V7, V2)); {'Core.Name.CaseBlock', V8, V9} -> {'Core.Name.MN', <<<<"case block in "/utf8>>/binary, <<V8/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>, V2}; {'Core.Name.WithBlock', V10, V11} -> {'Core.Name.MN', <<<<"with block in "/utf8>>/binary, <<V10/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V11))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>, V2}; _ -> {'Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), V2} end.
'nested--8784-4557--in--un--liftConstAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.CompileExpr.MkConstAlt', V10, V11} -> begin (V12 = ('un--liftExp'(V0, V7, V1, V2, V11))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = fun (V17) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.MkLConstAlt', V10, V16}} end), V18 end(V13)) end end end end end.
'nested--8784-4495--in--un--liftConAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.CompileExpr.MkConAlt', V10, V11, V12, V13, V14} -> begin (V15 = ('un--liftExp'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V13, V0)), V7, V1, V2, V14))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = fun (V20) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.MkLConAlt', V10, V11, V12, V13, V19}} end), V21 end(V16)) end end end end end.
'nested--8632-3694--in--un--finIdx'(V0, V1, V2, V3, V4) -> case V3 of [E0 | E1] -> (fun (V5, V6) -> case V4 of 0 -> 0; _ -> begin (V7 = (V4 - 1)), (('nested--8632-3694--in--un--finIdx'(V0, V1, V2, V6, V7)) + 1) end end end(E0, E1)) end.
'nested--8850-5324--in--un--dropConstCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Compiler.LambdaLift.MkLConstAlt', V9, V10} -> {'Compiler.LambdaLift.MkLConstAlt', V9, ('un--dropUnused'(V2, V0, V1, V7, V10))} end.
'nested--8850-5250--in--un--dropConCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Compiler.LambdaLift.MkLConAlt', V9, V10, V11, V12, V13} -> begin (V14 = V13), begin (V15 = ('un--dropUnused'(V2, V0, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V12, V1)), V7, V14))), {'Compiler.LambdaLift.MkLConAlt', V9, V10, V11, V12, V15} end end end.
'nested--8755-3930--in--un--allVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V10) -> begin (V11 = V10), {'Compiler.LambdaLift.LLocal', V11, V7} end end))(('nested--8755-3929--in--un--allPrfs'(V0, V1, V2, V3, V4, V5, V6, V8, V9)))).
'nested--8755-3929--in--un--allPrfs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> []; [E0 | E1] -> (fun (V9, V10) -> case V8 of {'Data.Vect.::', V11, V12} -> case V11 of 0 -> [0 | ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V13)) end))(('nested--8755-3929--in--un--allPrfs'(V0, V1, V2, V3, V4, V5, V6, V10, V12))))]; 1 -> ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V21)) end))(('nested--8755-3929--in--un--allPrfs'(V0, V1, V2, V3, V4, V5, V6, V10, V12)))) end end end(E0, E1)) end.
'dn--un--show_Show_LiftedDef'(V0) -> case V0 of {'Compiler.LambdaLift.MkLFun', V1, V2, V3} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V5, V6)) end end}, V1))/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V8, V9)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2))))/binary, <<<<": "/utf8>>/binary, ('dn--un--show_Show_(Lifted $vs)'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V2, V1)), V3))/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.MkLCon', V10, V11, V12} -> <<<<"Constructor tag "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V14, V15)) end end}, V10))/binary, <<<<" arity "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V11))/binary, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V16) -> <<<<" (newtype by "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V16))/binary, <<")"/utf8>>/binary>>/binary>> end end, V12))/binary>>/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.MkLForeign', V17, V18, V19} -> <<<<"Foreign call "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V20)) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V21, V22)) end end}, V17))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_CFType'(V24, V25)) end end}, V18))/binary, <<<<" -> "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V19))/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.MkLError', V26} -> <<<<"Error: "/utf8>>/binary, ('dn--un--show_Show_(Lifted $vs)'([], V26))/binary>> end.
'dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V1) -> case V1 of {'Compiler.LambdaLift.MkLConstAlt', V2, V3} -> <<<<"%constalt("/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2))/binary, <<<<") => "/utf8>>/binary, ('dn--un--show_Show_(Lifted $vs)'(V0, V3))/binary>>/binary>>/binary>> end.
'dn--un--show_Show_(LiftedConAlt $vs)'(V0, V1) -> case V1 of {'Compiler.LambdaLift.MkLConAlt', V2, V3, V4, V5, V6} -> <<<<"%conalt "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end))(V5))))/binary, <<<<") => "/utf8>>/binary, ('dn--un--show_Show_(Lifted $vs)'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V0)), V6))/binary>>/binary>>/binary>>/binary>>/binary>> end.
'dn--un--show_Show_(Lifted $vs)'(V0, V1) -> case V1 of {'Compiler.LambdaLift.LLocal', V2, V3} -> <<<<"!"/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Core.TT':'un--nameAt'(V0, V2))))/binary>>; {'Compiler.LambdaLift.LAppName', V4, V5, V6, V7} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<('un--showLazy'(V5))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V8)) end))(V7))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.LUnderApp', V16, V17, V18, V19} -> <<<<"<"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17))/binary, <<<<" underapp "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V18))/binary, <<<<">("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V20) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V20)) end))(V19))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.LApp', V28, V29, V30, V31} -> <<('dn--un--show_Show_(Lifted $vs)'(V0, V30))/binary, <<('un--showLazy'(V29))/binary, <<<<" @ ("/utf8>>/binary, <<('dn--un--show_Show_(Lifted $vs)'(V0, V31))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.LLet', V32, V33, V34, V35} -> <<<<"%let "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V33))/binary, <<<<" = "/utf8>>/binary, <<('dn--un--show_Show_(Lifted $vs)'(V0, V34))/binary, <<<<" in "/utf8>>/binary, ('dn--un--show_Show_(Lifted $vs)'([V33 | V0], V35))/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.LCon', V36, V37, V38, V39, V40} -> <<<<"%con "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V37))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V46 = fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V44, V45)) end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end(fun (V41) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V41)) end))(V40))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.LOp', V49, V50, V51, V52, V53} -> <<<<"%op "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V52))/binary, <<('un--showLazy'(V51))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V54) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V54)) end, V53))))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.LExtPrim', V55, V56, V57, V58} -> <<<<"%extprim "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V57))/binary, <<('un--showLazy'(V56))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V64 = fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V62, V63)) end end end end), fun (V65) -> fun (V66) -> ((((V64('erased'))('erased'))(V65))(V66)) end end end(fun (V59) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V59)) end))(V58))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.LConCase', V67, V68, V69, V70} -> <<<<"%case "/utf8>>/binary, <<('dn--un--show_Show_(Lifted $vs)'(V0, V68))/binary, <<<<" of { "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"| "/utf8>>, ((begin (V76 = fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V74, V75)) end end end end), fun (V77) -> fun (V78) -> ((((V76('erased'))('erased'))(V77))(V78)) end end end(fun (V71) -> ('dn--un--show_Show_(LiftedConAlt $vs)'(V0, V71)) end))(V69))))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V79) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V79)) end, fun (V80) -> fun (V81) -> ('dn--un--showPrec_Show_(Lifted $vs)'(V0, V80, V81)) end end}, V70))/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.LConstCase', V82, V83, V84, V85} -> <<<<"%case "/utf8>>/binary, <<('dn--un--show_Show_(Lifted $vs)'(V0, V83))/binary, <<<<" of { "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"| "/utf8>>, ((begin (V91 = fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V89, V90)) end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end(fun (V86) -> ('dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V86)) end))(V84))))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V94) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V94)) end, fun (V95) -> fun (V96) -> ('dn--un--showPrec_Show_(Lifted $vs)'(V0, V95, V96)) end end}, V85))/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.LambdaLift.LPrimVal', V97, V98} -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V98)); {'Compiler.LambdaLift.LErased', V99} -> <<"___"/utf8>>; {'Compiler.LambdaLift.LCrash', V100, V101} -> <<<<"%CRASH("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V101))/binary, <<")"/utf8>>/binary>>/binary>> end.
'dn--un--showPrec_Show_LiftedDef'(V0, V1) -> ('dn--un--show_Show_LiftedDef'(V1)).
'dn--un--showPrec_Show_(LiftedConstAlt $vs)'(V0, V1, V2) -> ('dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V2)).
'dn--un--showPrec_Show_(LiftedConAlt $vs)'(V0, V1, V2) -> ('dn--un--show_Show_(LiftedConAlt $vs)'(V0, V2)).
'dn--un--showPrec_Show_(Lifted $vs)'(V0, V1, V2) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V2)).
'dn--un--__Impl_Show_LiftedDef'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_LiftedDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_LiftedDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_(LiftedConstAlt $vs)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(LiftedConstAlt $vs)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(LiftedConAlt $vs)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(LiftedConAlt $vs)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(LiftedConAlt $vs)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(Lifted $vs)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(Lifted $vs)'(V0, V2, V3)) end end}.
'un--weakenUsed'(V0, V1) -> begin (V2 = V1), ('Idris.Idris2.Data.Vect':'un--++'(('Idris.Idris2.Data.Vect':'un--replicate'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)), 0)), V2)) end.
'un--usedVars'(V0, V1, V2, V3) -> case V3 of {'Compiler.LambdaLift.LLocal', V4, V5} -> ('un--markUsed'(V0, V4, V2)); {'Compiler.LambdaLift.LAppName', V6, V7, V8, V9} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V10) -> fun (V11) -> ('un--usedVars'(V0, V1, V10, V11)) end end, V2, V9)); {'Compiler.LambdaLift.LUnderApp', V12, V13, V14, V15} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V16) -> fun (V17) -> ('un--usedVars'(V0, V1, V16, V17)) end end, V2, V15)); {'Compiler.LambdaLift.LApp', V18, V19, V20, V21} -> ('un--usedVars'(V0, V1, ('un--usedVars'(V0, V1, V2, V21)), V20)); {'Compiler.LambdaLift.LLet', V22, V23, V24, V25} -> begin (V26 = ('un--contractUsed'(('un--usedVars'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V23 | []], V0)), V1, ('un--weakenUsed'([V23 | []], V2)), V25))))), ('un--usedVars'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([], V0)), V1, V26, V24)) end; {'Compiler.LambdaLift.LCon', V27, V28, V29, V30, V31} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V32) -> fun (V33) -> ('un--usedVars'(V0, V1, V32, V33)) end end, V2, V31)); {'Compiler.LambdaLift.LOp', V34, V35, V36, V37, V38} -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'(fun (V39) -> fun (V40) -> ('un--usedVars'(V0, V1, V39, V40)) end end, V2, V38)); {'Compiler.LambdaLift.LExtPrim', V41, V42, V43, V44} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V45) -> fun (V46) -> ('un--usedVars'(V0, V1, V45, V46)) end end, V2, V44)); {'Compiler.LambdaLift.LConCase', V47, V48, V49, V50} -> begin (V52 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V2 end, fun () -> fun (V51) -> ('un--usedVars'(V0, V1, V2, V51)) end end, V50))), begin (V53 = ('un--usedVars'(V0, V1, V52, V48))), ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V54) -> fun (V55) -> ('nested--8805-4749--in--un--usedConAlt'(V0, V50, V49, V48, V47, V2, V1, {'Prelude.Types.Nothing'}, V54, V55)) end end, V53, V49)) end end; {'Compiler.LambdaLift.LConstCase', V56, V57, V58, V59} -> begin (V61 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V2 end, fun () -> fun (V60) -> ('un--usedVars'(V0, V1, V2, V60)) end end, V59))), begin (V62 = ('un--usedVars'(V0, V1, V61, V57))), ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V63) -> fun (V64) -> ('nested--8805-4796--in--un--usedConstAlt'(V0, V59, V58, V57, V56, V2, V1, {'Prelude.Types.Nothing'}, V63, V64)) end end, V62, V58)) end end; {'Compiler.LambdaLift.LPrimVal', V65, V66} -> V2; {'Compiler.LambdaLift.LErased', V67} -> V2; {'Compiler.LambdaLift.LCrash', V68, V69} -> V2 end.
'un--unload'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Prelude.Types.Right', V2} end; [E0 | E1] -> (fun (V5, V6) -> ('un--unload'(V0, {'Prelude.Types.Nothing'}, {'Compiler.LambdaLift.LApp', V0, V1, V2, V5}, V6)) end(E0, E1)) end.
'un--showLazy'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V1) -> <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_LazyReason'(V1))/binary>> end end, V0)).
'un--markUsed'(V0, V1, V2) -> begin (V3 = V2), begin (V4 = ('Idris.Idris2.Data.Vect':'un--replaceAt'(('nested--8632-3694--in--un--finIdx'(V0, V3, V1, V0, V1)), 1, V3))), V4 end end.
'un--makeLam'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.CompileExpr.CLam', V7, V8, V9} -> ('un--makeLam'(V0, V1, V2, V3, V4, [V8 | V5], V9)); _ -> begin (V10 = ('un--liftExp'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V1)), V0, V2, V3, V6))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V51 = begin (V15 = ('un--usedVars'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V1)), V0, ('un--initUsed'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V1)))), V14))), begin (V16 = ('un--contractUsedMany'(V5, V15))), begin (V17 = ('un--getUnused'(V16))), begin (V18 = ('un--dropUnused'(V1, V0, V5, V17, V14))), begin (V19 = ('un--genName'(V0))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V50 = begin (V43 = begin (V29 = begin (V24 = V0), fun (V25) -> begin (V28 = (begin (V26 = V24), fun (V27) -> ('erlang':'get'(V26)) end end(V25))), {'Prelude.Types.Right', V28} end end end), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V42 = begin (V34 = V0), fun (V35) -> begin (V41 = (begin (V36 = V34), fun (V37) -> ('erlang':'put'(V36, case V33 of {'Compiler.LambdaLift.MkLDefs', V38, V39, V40} -> {'Compiler.LambdaLift.MkLDefs', V38, [{'Builtin.MkPair', V23, {'Compiler.LambdaLift.MkLFun', ('un--dropped'(V1, V17)), V5, V18}} | V39], V40} end)) end end(V35))), {'Prelude.Types.Right', V41} end end end), V42 end(V30)) end end end end), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V49 = fun (V48) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LUnderApp', V4, V23, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V5)), ('nested--8755-3930--in--un--allVars'(V2, V3, V5, V1, V6, V4, V0, V4, V1, V17))}} end), V49 end(V44)) end end end end), V50 end(V20)) end end end end end end end end), V51 end(V11)) end end end end end.
'un--liftExp'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.CLocal', V5, V6} -> fun (V7) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LLocal', V5, V6}} end; {'Core.CompileExpr.CRef', V8, V9} -> fun (V10) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LAppName', V8, V3, V9, []}} end; {'Core.CompileExpr.CLam', V11, V12, V13} -> ('un--makeLam'(V1, V0, V2, V3, V11, [V12 | []], V13)); {'Core.CompileExpr.CLet', V14, V15, V16, V17, V18} -> begin (V19 = ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, V17))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V31 = begin (V24 = ('un--liftExp'([V15 | V0], V1, V2, {'Prelude.Types.Nothing'}, V18))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LLet', V14, V15, V23, V28}} end), V30 end(V25)) end end end end), V31 end(V20)) end end end end; {'Core.CompileExpr.CApp', V32, V33, V34} -> case V33 of {'Core.CompileExpr.CRef', V35, V36} -> begin (V38 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V37) -> ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, V37)) end, V34, []))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V44 = fun (V43) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LAppName', V32, V3, V36, V42}} end), V44 end(V39)) end end end end; _ -> begin (V45 = ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, V33))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V57 = begin (V51 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V50) -> ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, V50)) end, V34, []))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V56 = ('un--unload'(V32, V3, V49, V55))), V56 end(V52)) end end end end), V57 end(V46)) end end end end end; {'Core.CompileExpr.CCon', V58, V59, V60, V61, V62} -> begin (V64 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V63) -> ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, V63)) end, V62, []))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V70 = fun (V69) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LCon', V58, V59, V60, V61, V68}} end), V70 end(V65)) end end end end; {'Core.CompileExpr.COp', V71, V72, V73, V74} -> begin (V75 = ('nested--8784-4309--in--un--traverseArgs'(V0, V2, V3, V71, V74, V73, V72, V1, V74))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V81 = fun (V80) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LOp', V71, V72, V3, V73, V79}} end), V81 end(V76)) end end end end; {'Core.CompileExpr.CExtPrim', V82, V83, V84} -> begin (V86 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V85) -> ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, V85)) end, V84, []))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V92 = fun (V91) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LExtPrim', V82, V3, V83, V90}} end), V92 end(V87)) end end end end; {'Core.CompileExpr.CForce', V93, V94, V95} -> case V2 of 1 -> ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, V95)); 0 -> ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Core.CompileExpr.CApp', V93, V95, [{'Core.CompileExpr.CErased', V93} | []]})) end; {'Core.CompileExpr.CDelay', V96, V97, V98} -> case V2 of 1 -> ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Just', V97}, V98)); 0 -> ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Core.CompileExpr.CLam', V96, {'Core.Name.MN', <<"act"/utf8>>, 0}, ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CExp'(V98))})) end; {'Core.CompileExpr.CConCase', V99, V100, V101, V102} -> begin (V103 = ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, V100))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V143 = begin (V109 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V108) -> ('nested--8784-4495--in--un--liftConAlt'(V0, V2, V3, V102, V101, V100, V99, V1, V3, V108)) end, V101, []))), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V142 = begin (V135 = case V102 of {'Prelude.Types.Nothing'} -> fun (V114) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V115} -> begin (V116 = ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, V115))), ((begin (V132 = fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V129, V130, V131)) end end end end end), fun (V133) -> fun (V134) -> ((((V132('erased'))('erased'))(V133))(V134)) end end end((begin (V124 = fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> {'Prelude.Types.Right', (V120(V123))} end end end end end), fun (V125) -> fun (V126) -> ((((V124('erased'))('erased'))(V125))(V126)) end end end(fun (V117) -> {'Prelude.Types.Just', V117} end))))(V116)) end end), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V141 = fun (V140) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LConCase', V99, V107, V113, V139}} end), V141 end(V136)) end end end end), V142 end(V110)) end end end end), V143 end(V104)) end end end end; {'Core.CompileExpr.CConstCase', V144, V145, V146, V147} -> begin (V148 = ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, V145))), fun (V149) -> begin (V150 = (V148(V149))), case V150 of {'Prelude.Types.Left', V151} -> {'Prelude.Types.Left', V151}; {'Prelude.Types.Right', V152} -> (begin (V188 = begin (V154 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V153) -> ('nested--8784-4557--in--un--liftConstAlt'(V0, V2, V3, V147, V146, V145, V144, V1, {'Prelude.Types.Nothing'}, V153)) end, V146, []))), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V187 = begin (V180 = case V147 of {'Prelude.Types.Nothing'} -> fun (V159) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V160} -> begin (V161 = ('un--liftExp'(V0, V1, V2, {'Prelude.Types.Nothing'}, V160))), ((begin (V177 = fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V174, V175, V176)) end end end end end), fun (V178) -> fun (V179) -> ((((V177('erased'))('erased'))(V178))(V179)) end end end((begin (V169 = fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> {'Prelude.Types.Right', (V165(V168))} end end end end end), fun (V170) -> fun (V171) -> ((((V169('erased'))('erased'))(V170))(V171)) end end end(fun (V162) -> {'Prelude.Types.Just', V162} end))))(V161)) end end), fun (V181) -> begin (V182 = (V180(V181))), case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> (begin (V186 = fun (V185) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LConstCase', V144, V152, V158, V184}} end), V186 end(V181)) end end end end), V187 end(V155)) end end end end), V188 end(V149)) end end end end; {'Core.CompileExpr.CPrimVal', V189, V190} -> fun (V191) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LPrimVal', V189, V190}} end; {'Core.CompileExpr.CErased', V192} -> fun (V193) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LErased', V192}} end; {'Core.CompileExpr.CCrash', V194, V195} -> fun (V196) -> {'Prelude.Types.Right', {'Compiler.LambdaLift.LCrash', V194, V195}} end end.
'un--liftBody'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.LambdaLift.Lifts'}, {'Compiler.LambdaLift.MkLDefs', V2, [], 0}))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V30 = begin (V9 = ('un--liftExp'(V0, V8, V1, {'Prelude.Types.Nothing'}, V3))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V29 = begin (V19 = begin (V14 = V8), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V28 = fun (V24) -> {'Prelude.Types.Right', {'Builtin.MkPair', V13, case V23 of {'Compiler.LambdaLift.MkLDefs', V25, V26, V27} -> V26 end}} end), V28 end(V20)) end end end end), V29 end(V10)) end end end end), V30 end(V5)) end end end end.
'un--lambdaLiftDef'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.MkFun', V3, V4} -> begin (V5 = ('un--liftBody'(V3, V0, V1, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V13 = fun (V10) -> case V9 of {'Builtin.MkPair', V11, V12} -> {'Prelude.Types.Right', [{'Builtin.MkPair', V1, {'Compiler.LambdaLift.MkLFun', V3, [], V11}} | V12]} end end), V13 end(V6)) end end end end; {'Core.CompileExpr.MkCon', V14, V15, V16} -> fun (V17) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V1, {'Compiler.LambdaLift.MkLCon', V14, V15, V16}} | []]} end; {'Core.CompileExpr.MkForeign', V18, V19, V20} -> fun (V21) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V1, {'Compiler.LambdaLift.MkLForeign', V18, V19, V20}} | []]} end; {'Core.CompileExpr.MkError', V22} -> begin (V23 = ('un--liftBody'([], V0, V1, V22))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V31 = fun (V28) -> case V27 of {'Builtin.MkPair', V29, V30} -> {'Prelude.Types.Right', [{'Builtin.MkPair', V1, {'Compiler.LambdaLift.MkLError', V29}} | V30]} end end), V31 end(V24)) end end end end end.
'un--lambdaLift'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> ('un--lambdaLiftDef'(V1, V3, V6)) end end.
'un--initUsed'(V0) -> ('Idris.Idris2.Data.Vect':'un--replicate'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)), 0)).
'un--getUnused'(V0) -> begin (V1 = V0), ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V2) -> case V2 of 1 -> 0; 0 -> 1 end end, V1)) end.
'un--genName'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V34 = begin (V14 = case V10 of {'Compiler.LambdaLift.MkLDefs', V11, V12, V13} -> V13 end), begin (V24 = begin (V15 = V0), fun (V16) -> begin (V23 = (begin (V17 = V15), fun (V18) -> ('erlang':'put'(V17, case V10 of {'Compiler.LambdaLift.MkLDefs', V19, V20, V21} -> {'Compiler.LambdaLift.MkLDefs', V19, V20, begin (V22 = (V14 + 1)), case ((V22 band 9223372036854775808) =/= 0) of 'true' -> (V22 bor -9223372036854775808); _ -> (V22 band 9223372036854775807) end end} end)) end end(V16))), {'Prelude.Types.Right', V23} end end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V33 = fun (V29) -> {'Prelude.Types.Right', ('nested--8311-3389--in--un--mkName'(V0, case V10 of {'Compiler.LambdaLift.MkLDefs', V30, V31, V32} -> V30 end, V14))} end), V33 end(V25)) end end end end end), V34 end(V7)) end end end end.
'un--dropped'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Data.Vect.::', V4, V5} -> case V4 of 0 -> [V2 | ('un--dropped'(V3, V5))]; 1 -> ('un--dropped'(V3, V5)) end end end(E0, E1)) end.
'un--dropUnused'(V0, V1, V2, V3, V4) -> case V4 of {'Compiler.LambdaLift.LPrimVal', V5, V6} -> {'Compiler.LambdaLift.LPrimVal', V5, V6}; {'Compiler.LambdaLift.LErased', V7} -> {'Compiler.LambdaLift.LErased', V7}; {'Compiler.LambdaLift.LCrash', V8, V9} -> {'Compiler.LambdaLift.LCrash', V8, V9}; {'Compiler.LambdaLift.LLocal', V10, V11} -> begin (V12 = ('un--dropIdx'(V0, V10, V2, V3))), {'Compiler.LambdaLift.LLocal', V12, V11} end; {'Compiler.LambdaLift.LCon', V13, V14, V15, V16, V17} -> begin (V26 = ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('un--dropUnused'(V0, V1, V2, V3, V18)) end))(V17))), {'Compiler.LambdaLift.LCon', V13, V14, V15, V16, V26} end; {'Compiler.LambdaLift.LLet', V27, V28, V29, V30} -> begin (V31 = ('un--dropUnused'(V0, V1, V2, V3, V29))), begin (V32 = ('un--dropUnused'(V0, V1, [V28 | V2], V3, V30))), {'Compiler.LambdaLift.LLet', V27, V28, V31, V32} end end; {'Compiler.LambdaLift.LApp', V33, V34, V35, V36} -> begin (V37 = ('un--dropUnused'(V0, V1, V2, V3, V35))), begin (V38 = ('un--dropUnused'(V0, V1, V2, V3, V36))), {'Compiler.LambdaLift.LApp', V33, V34, V37, V38} end end; {'Compiler.LambdaLift.LOp', V39, V40, V41, V42, V43} -> begin (V45 = ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V44) -> ('un--dropUnused'(V0, V1, V2, V3, V44)) end, V43))), {'Compiler.LambdaLift.LOp', V39, V40, V41, V42, V45} end; {'Compiler.LambdaLift.LExtPrim', V46, V47, V48, V49} -> begin (V58 = ((begin (V55 = fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V53, V54)) end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end(fun (V50) -> ('un--dropUnused'(V0, V1, V2, V3, V50)) end))(V49))), {'Compiler.LambdaLift.LExtPrim', V46, V47, V48, V58} end; {'Compiler.LambdaLift.LAppName', V59, V60, V61, V62} -> begin (V71 = ((begin (V68 = fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V66, V67)) end end end end), fun (V69) -> fun (V70) -> ((((V68('erased'))('erased'))(V69))(V70)) end end end(fun (V63) -> ('un--dropUnused'(V0, V1, V2, V3, V63)) end))(V62))), {'Compiler.LambdaLift.LAppName', V59, V60, V61, V71} end; {'Compiler.LambdaLift.LUnderApp', V72, V73, V74, V75} -> begin (V84 = ((begin (V81 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V79, V80)) end end end end), fun (V82) -> fun (V83) -> ((((V81('erased'))('erased'))(V82))(V83)) end end end(fun (V76) -> ('un--dropUnused'(V0, V1, V2, V3, V76)) end))(V75))), {'Compiler.LambdaLift.LUnderApp', V72, V73, V74, V84} end; {'Compiler.LambdaLift.LConCase', V85, V86, V87, V88} -> begin (V97 = ((begin (V94 = fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V92, V93)) end end end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end(fun (V89) -> ('nested--8850-5250--in--un--dropConCase'(V1, V2, V0, V88, V87, V86, V85, V3, V89)) end))(V87))), {'Compiler.LambdaLift.LConCase', V85, ('un--dropUnused'(V0, V1, V2, V3, V86)), V97, ((begin (V103 = fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V101, V102)) end end end end), fun (V104) -> fun (V105) -> ((((V103('erased'))('erased'))(V104))(V105)) end end end(fun (V98) -> ('un--dropUnused'(V0, V1, V2, V3, V98)) end))(V88))} end; {'Compiler.LambdaLift.LConstCase', V106, V107, V108, V109} -> begin (V118 = ((begin (V115 = fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V113, V114)) end end end end), fun (V116) -> fun (V117) -> ((((V115('erased'))('erased'))(V116))(V117)) end end end(fun (V110) -> ('nested--8850-5324--in--un--dropConstCase'(V1, V2, V0, V109, V108, V107, V106, V3, V110)) end))(V108))), {'Compiler.LambdaLift.LConstCase', V106, ('un--dropUnused'(V0, V1, V2, V3, V107)), V118, ((begin (V124 = fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V122, V123)) end end end end), fun (V125) -> fun (V126) -> ((((V124('erased'))('erased'))(V125))(V126)) end end end(fun (V119) -> ('un--dropUnused'(V0, V1, V2, V3, V119)) end))(V109))} end end.
'un--dropIdx'(V0, V1, V2, V3) -> case V0 of [E4 | E5] -> (fun (V4, V5) -> case V1 of 0 -> case V2 of [] -> case V3 of {'Data.Vect.::', V6, V7} -> case V6 of 0 -> 0; 1 -> ('Idris.Idris2.Builtin':'un--idris_crash'((begin (V9 = fun (V8) -> V8 end), fun (V10) -> (V9(V10)) end end(<<"INTERNAL ERROR: Referenced variable marked as unused"/utf8>>)))); _ -> case V1 of 0 -> case V2 of [E28 | E29] -> (fun (V11, V12) -> 0 end(E28, E29)) end; _ -> begin (V13 = (V1 - 1)), case V2 of [E26 | E27] -> (fun (V14, V15) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V13, V15, V3)))) end(E26, E27)) end end end end; _ -> case V1 of 0 -> case V2 of [E24 | E25] -> (fun (V16, V17) -> 0 end(E24, E25)) end; _ -> begin (V18 = (V1 - 1)), case V2 of [E22 | E23] -> (fun (V19, V20) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V18, V20, V3)))) end(E22, E23)) end end end end; _ -> case V1 of 0 -> case V2 of [E20 | E21] -> (fun (V21, V22) -> 0 end(E20, E21)) end; _ -> begin (V23 = (V1 - 1)), case V2 of [E18 | E19] -> (fun (V24, V25) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V23, V25, V3)))) end(E18, E19)) end end end end; _ -> begin (V26 = (V1 - 1)), case V2 of [] -> case V3 of {'Data.Vect.::', V27, V28} -> case V27 of 0 -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V5, V26, [], V28)))); 1 -> ('un--dropIdx'(V5, V26, [], V28)); _ -> case V1 of 0 -> case V2 of [E16 | E17] -> (fun (V29, V30) -> 0 end(E16, E17)) end; _ -> begin (V31 = (V1 - 1)), case V2 of [E14 | E15] -> (fun (V32, V33) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V31, V33, V3)))) end(E14, E15)) end end end end; _ -> case V1 of 0 -> case V2 of [E12 | E13] -> (fun (V34, V35) -> 0 end(E12, E13)) end; _ -> begin (V36 = (V1 - 1)), case V2 of [E10 | E11] -> (fun (V37, V38) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V36, V38, V3)))) end(E10, E11)) end end end end; _ -> case V1 of 0 -> case V2 of [E8 | E9] -> (fun (V39, V40) -> 0 end(E8, E9)) end; _ -> begin (V41 = (V1 - 1)), case V2 of [E6 | E7] -> (fun (V42, V43) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V41, V43, V3)))) end(E6, E7)) end end end end end end end(E4, E5)); _ -> case V1 of 0 -> case V2 of [E2 | E3] -> (fun (V44, V45) -> 0 end(E2, E3)) end; _ -> begin (V46 = (V1 - 1)), case V2 of [E0 | E1] -> (fun (V47, V48) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V46, V48, V3)))) end(E0, E1)) end end end end.
'un--contractUsedMany'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> ('un--contractUsedMany'(V3, ('un--contractUsed'(V1)))) end(E0, E1)) end.
'un--contractUsed'(V0) -> begin (V1 = V0), ('Idris.Idris2.Data.Vect':'un--tail'(V1)) end.
