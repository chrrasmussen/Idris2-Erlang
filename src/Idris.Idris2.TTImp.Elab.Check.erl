-module('Idris.Idris2.TTImp.Elab.Check').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--checkExp-19297'/13,
  'case--exactlyOne\x{27},getRight-17899'/11,
  'case--case block in searchVar,envHints-16315'/20,
  'case--strengthenedEState,removeArg-14166'/8,
  'nested--11863-13818--in--un--wknTms'/4,
  'nested--14042-15855--in--un--useVars'/14,
  'nested--12063-14027--in--un--strTms'/8,
  'nested--12063-14025--in--un--removeArgVars'/7,
  'nested--12063-14026--in--un--removeArg'/7,
  'nested--10758-12776--in--un--insertAll'/8,
  'nested--16289-17878--in--un--getRight'/10,
  'nested--16289-17879--in--un--getRes'/10,
  'nested--16289-17880--in--un--getDepthError'/10,
  'nested--14042-15856--in--un--find'/13,
  'nested--14042-15857--in--un--envHints'/13,
  'nested--12063-14028--in--un--dropTop'/7,
  'nested--12063-14024--in--un--dropSub'/8,
  'nested--16289-17881--in--un--depthError'/10,
  'nested--16914-18422--in--un--anyOneErrs'/9,
  'nested--16289-17882--in--un--altError'/11,
  'nested--15724-17348--in--un--abandon'/10,
  'dn--un--show_Show_ElabMode'/1,
  'dn--un--show_Show_(ImplBinding $vars)'/1,
  'dn--un--showPrec_Show_ElabMode'/2,
  'dn--un--showPrec_Show_(ImplBinding $vars)'/2,
  'dn--un--__Impl_Show_ElabMode'/0,
  'dn--un--__Impl_Show_(ImplBinding $vars)'/0,
  'dn--un--__Impl_Eq_ElabOpt'/0,
  'dn--un--==_Eq_ElabOpt'/2,
  'dn--un--/=_Eq_ElabOpt'/2,
  'un--weakenedEState'/3,
  'un--updateEnv'/5,
  'un--uniVar'/3,
  'un--tryError'/6,
  'un--try'/7,
  'un--successful'/7,
  'un--strengthenedEState'/6,
  'un--searchVar'/11,
  'un--saveHole'/2,
  'un--processDecl'/10,
  'un--notePatVar'/2,
  'un--noteLHSPatVar'/3,
  'un--mustBePoly'/5,
  'un--metaVarI'/8,
  'un--metaVar'/8,
  'un--isLHS'/1,
  'un--initElabInfo'/1,
  'un--initEStateSub'/4,
  'un--initEState'/3,
  'un--inScope'/7,
  'un--implBindVar'/8,
  'un--handle'/7,
  'un--exactlyOne\x{27}'/9,
  'un--exactlyOne'/8,
  'un--convertWithLazy'/10,
  'un--convert'/9,
  'un--concrete'/3,
  'un--clearToBind'/2,
  'un--clearBindIfUnsolved'/1,
  'un--checkImp'/13,
  'un--checkExp'/11,
  'un--check'/13,
  'un--bindingType'/1,
  'un--bindingTerm'/1,
  'un--bindingRig'/1,
  'un--bindingPiInfo'/1,
  'un--bindingMetas'/1,
  'un--argVar'/8,
  'un--anyOne'/7,
  'un--addBindIfUnsolved'/8
]).
'case--checkExp-19297'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> case V11 of {'Core.Unify.MkUnifyResult', V13, V14, V15, V16} -> case V16 of {'Core.Unify.NoLazy'} -> begin (V17 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V10, <<"elab"/utf8>>, 5, fun () -> <<"Solved"/utf8>> end, V3))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V23 = fun (V22) -> {'Prelude.Types.Right', {'Builtin.MkPair', V3, V2}} end), V23 end(V18)) end end end end; {'Core.Unify.AddForce', V24} -> begin (V25 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V10, <<"elab"/utf8>>, 5, fun () -> <<"Force"/utf8>> end, V3))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V43 = begin (V30 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V10, <<"elab"/utf8>>, 5, fun () -> <<"Got"/utf8>> end, V5, V2))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V42 = begin (V35 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V10, <<"elab"/utf8>>, 5, fun () -> <<"Exp"/utf8>> end, V5, V1))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V41 = fun (V40) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.TForce', V4, V24, V3}, V1}} end), V41 end(V36)) end end end end), V42 end(V31)) end end end end), V43 end(V26)) end end end end; {'Core.Unify.AddDelay', V44} -> begin (V45 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V2))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V57 = begin (V50 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V10, <<"elab"/utf8>>, 5, fun () -> <<"Delay"/utf8>> end, V3))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V56 = fun (V55) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.TDelay', V4, V44, V49, V3}, V1}} end), V56 end(V51)) end end end end), V57 end(V46)) end end end end end end; _ -> begin (V58 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V10, <<"elab"/utf8>>, 5, fun () -> <<"Not solved"/utf8>> end, V3))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V114 = begin (V68 = begin (V63 = V10), fun (V64) -> begin (V67 = (begin (V65 = V63), fun (V66) -> ('erlang':'get'(V65)) end end(V64))), {'Prelude.Types.Right', V67} end end end), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V113 = begin (V74 = fun (V73) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V72, V73)) end), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V112 = begin (V79 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V1))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V111 = begin (V84 = ('Idris.Idris2.Core.UnifyState':'un--newConstant'(V0, V9, V10, V4, V7, V5, V3, V83, V12))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V110 = begin (V89 = ('Idris.Idris2.Core.UnifyState':'un--dumpConstraints'(V9, V10, <<"elab"/utf8>>, 5, 0))), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V109 = case V11 of {'Core.Unify.MkUnifyResult', V94, V95, V96, V97} -> case V97 of {'Core.Unify.NoLazy'} -> fun (V98) -> {'Prelude.Types.Right', {'Builtin.MkPair', V88, V2}} end; {'Core.Unify.AddForce', V99} -> fun (V100) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.TForce', V4, V99, V3}, V1}} end; {'Core.Unify.AddDelay', V101} -> begin (V102 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V2))), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V108 = fun (V107) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.TDelay', V4, V101, V106, V3}, V1}} end), V108 end(V103)) end end end end end end), V109 end(V90)) end end end end), V110 end(V85)) end end end end), V111 end(V80)) end end end end), V112 end(V75)) end end end end), V113 end(V69)) end end end end), V114 end(V59)) end end end end end.
'case--exactlyOne\x{27},getRight-17899'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [E2 | E3] -> (fun (V11, V12) -> case V11 of {'Builtin.MkPair', V13, V14} -> case V12 of [] -> {'Prelude.Types.Right', V14}; _ -> case ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V15) -> case (('Idris.Idris2.Builtin':'un--fst'(V15)) =:= 0) of 'false' -> 0; _ -> 1 end end, V10)) of [E6 | E7] -> (fun (V16, V17) -> case V16 of {'Builtin.MkPair', V18, V19} -> case V17 of [] -> {'Prelude.Types.Right', V19}; _ -> {'Prelude.Types.Left', ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V20) -> ('Idris.Idris2.Builtin':'un--snd'(V20)) end))(V10))} end; _ -> {'Prelude.Types.Left', ((begin (V33 = fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V31, V32)) end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end(fun (V28) -> ('Idris.Idris2.Builtin':'un--snd'(V28)) end))(V10))} end end(E6, E7)); _ -> {'Prelude.Types.Left', ((begin (V41 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V39, V40)) end end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end(fun (V36) -> ('Idris.Idris2.Builtin':'un--snd'(V36)) end))(V10))} end end; _ -> case ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V44) -> case (('Idris.Idris2.Builtin':'un--fst'(V44)) =:= 0) of 'false' -> 0; _ -> 1 end end, V10)) of [E4 | E5] -> (fun (V45, V46) -> case V45 of {'Builtin.MkPair', V47, V48} -> case V46 of [] -> {'Prelude.Types.Right', V48}; _ -> {'Prelude.Types.Left', ((begin (V54 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V52, V53)) end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V49) -> ('Idris.Idris2.Builtin':'un--snd'(V49)) end))(V10))} end; _ -> {'Prelude.Types.Left', ((begin (V62 = fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V60, V61)) end end end end), fun (V63) -> fun (V64) -> ((((V62('erased'))('erased'))(V63))(V64)) end end end(fun (V57) -> ('Idris.Idris2.Builtin':'un--snd'(V57)) end))(V10))} end end(E4, E5)); _ -> {'Prelude.Types.Left', ((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V65) -> ('Idris.Idris2.Builtin':'un--snd'(V65)) end))(V10))} end end end(E2, E3)); _ -> case ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V73) -> case (('Idris.Idris2.Builtin':'un--fst'(V73)) =:= 0) of 'false' -> 0; _ -> 1 end end, V10)) of [E0 | E1] -> (fun (V74, V75) -> case V74 of {'Builtin.MkPair', V76, V77} -> case V75 of [] -> {'Prelude.Types.Right', V77}; _ -> {'Prelude.Types.Left', ((begin (V83 = fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V81, V82)) end end end end), fun (V84) -> fun (V85) -> ((((V83('erased'))('erased'))(V84))(V85)) end end end(fun (V78) -> ('Idris.Idris2.Builtin':'un--snd'(V78)) end))(V10))} end; _ -> {'Prelude.Types.Left', ((begin (V91 = fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V89, V90)) end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end(fun (V86) -> ('Idris.Idris2.Builtin':'un--snd'(V86)) end))(V10))} end end(E0, E1)); _ -> {'Prelude.Types.Left', ((begin (V99 = fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V97, V98)) end end end end), fun (V100) -> fun (V101) -> ((((V99('erased'))('erased'))(V100))(V101)) end end end(fun (V94) -> ('Idris.Idris2.Builtin':'un--snd'(V94)) end))(V10))} end end.
'case--case block in searchVar,envHints-16315'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Prelude.Types.Just', V20} -> case V20 of {'Builtin.MkPair', V21, V22} -> case V22 of {'Builtin.MkPair', V23, V24} -> begin (V26 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V11 end, fun () -> fun (V25) -> V25 end end, V21))), begin (V32 = begin (V27 = V10), fun (V28) -> begin (V31 = (begin (V29 = V27), fun (V30) -> ('erlang':'get'(V29)) end end(V28))), {'Prelude.Types.Right', V31} end end end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V138 = begin (V69 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V26, case V36 of {'Core.Context.MkDefs', V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68} -> V37 end))), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V137 = case V73 of {'Prelude.Types.Just', V74} -> begin (V97 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Core.TT.Func'} end, ('Idris.Idris2.Core.Context.Context':'un--defNameType'(case V74 of {'Core.Context.Context.MkGlobalDef', V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96} -> V92 end))))), begin (V98 = ((V24(V8))(V97))), begin (V121 = ('nested--14042-15855--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V0, ('Idris.Idris2.Core.TT':'un--getArgs'(V98)), ('Idris.Idris2.Core.TT':'un--embed'(case V74 of {'Core.Context.Context.MkGlobalDef', V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120} -> V101 end))))), begin (V122 = {'Core.TT.Let', V8, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V14)), V98)), ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V14)), V121))}), begin (V128 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V10, {'Core.Context.dn--un--__mkHasNames', fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V123, V124)) end end, fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V125, V126, V127)) end end end}, V26))), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V135 = fun (V133) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', [V132 | V14], {'Builtin.MkPair', fun (V134) -> (V15({'Core.TT.Bind', V8, V132, V122, V134})) end, {'Core.Env.::', V122, V16}}}} end), V135 end(V129)) end end end end end end end end; {'Prelude.Types.Nothing'} -> fun (V136) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V14, {'Builtin.MkPair', V15, V16}}} end end), V137 end(V70)) end end end end), V138 end(V33)) end end end end end end end; {'Prelude.Types.Nothing'} -> fun (V139) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V14, {'Builtin.MkPair', V15, V16}}} end end.
'case--strengthenedEState,removeArg-14166'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--12063-14025--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, V9)), fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Core.TT':'un--shrinkTerm'(V8, {'Core.TT.DropCons', {'Core.TT.SubRefl'}})), fun (V11) -> {'Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--apply'(('Idris.Idris2.Core.TT':'un--getLoc'(V8)), V11, V10))} end)) end)) end.
'nested--11863-13818--in--un--wknTms'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'TTImp.Elab.Check.NameBinding', V6, V7, V8, V9, V10} -> {'Builtin.MkPair', V4, {'TTImp.Elab.Check.NameBinding', [V0 | V6], V7, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_PiInfo'(fun (V11) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V11)) end, V8)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V9)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V10))}}; {'TTImp.Elab.Check.AsBinding', V12, V13, V14, V15, V16, V17} -> {'Builtin.MkPair', V4, {'TTImp.Elab.Check.AsBinding', [V0 | V12], V13, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_PiInfo'(fun (V18) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V18)) end, V14)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V15)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V16)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V17))}} end end.
'nested--14042-15855--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of [] -> V13; [E0 | E1] -> (fun (V14, V15) -> case V13 of {'Core.TT.Bind', V16, V17, V18, V19} -> case V18 of {'Core.TT.Pi', V20, V21, V22, V23} -> {'Core.TT.Bind', V16, V17, {'Core.TT.Let', V20, V21, V14, V23}, ('nested--14042-15855--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [V17 | V11], ((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V24) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V24)) end))(V15)), V19))}; _ -> case V13 of {'Core.TT.Bind', V32, V33, V34, V35} -> case V34 of {'Core.TT.Let', V36, V37, V38, V39} -> {'Core.TT.Bind', V32, V33, {'Core.TT.Let', V36, V37, V38, V39}, ('nested--14042-15855--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [V33 | V11], ((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V40) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V40)) end))(V12)), V35))}; _ -> V13 end; _ -> V13 end end; _ -> case V13 of {'Core.TT.Bind', V48, V49, V50, V51} -> case V50 of {'Core.TT.Let', V52, V53, V54, V55} -> {'Core.TT.Bind', V48, V49, {'Core.TT.Let', V52, V53, V54, V55}, ('nested--14042-15855--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [V49 | V11], ((begin (V61 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V59, V60)) end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end(fun (V56) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V56)) end))(V12)), V51))}; _ -> V13 end; _ -> V13 end end end(E0, E1)); _ -> case V13 of {'Core.TT.Bind', V64, V65, V66, V67} -> case V66 of {'Core.TT.Let', V68, V69, V70, V71} -> {'Core.TT.Bind', V64, V65, {'Core.TT.Let', V68, V69, V70, V71}, ('nested--14042-15855--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [V65 | V11], ((begin (V77 = fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V75, V76)) end end end end), fun (V78) -> fun (V79) -> ((((V77('erased'))('erased'))(V78))(V79)) end end end(fun (V72) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V72)) end))(V12)), V67))}; _ -> V13 end; _ -> V13 end end.
'nested--12063-14027--in--un--strTms'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> case V9 of {'TTImp.Elab.Check.NameBinding', V10, V11, V12, V13, V14} -> case V10 of [E0 | E1] -> (fun (V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V13))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V33 = begin (V22 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V14))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V32 = case ('Idris.Idris2.Core.TT':'un--shrinkPi'(V12, {'Core.TT.DropCons', {'Core.TT.SubRefl'}})) of {'Prelude.Types.Just', V27} -> fun (V28) -> case ('nested--12063-14026--in--un--removeArg'(V0, V1, V2, V3, V4, V5, V21)) of {'Prelude.Types.Just', V29} -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V26, {'Core.TT.DropCons', {'Core.TT.SubRefl'}})) of {'Prelude.Types.Just', V30} -> {'Prelude.Types.Right', {'Builtin.MkPair', V8, {'TTImp.Elab.Check.NameBinding', V0, V11, V27, V29, V30}}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V14}, V28)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V14}, V28)) end end; _ -> fun (V31) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V14}, V31)) end end), V32 end(V23)) end end end end), V33 end(V18)) end end end end end(E0, E1)) end; {'TTImp.Elab.Check.AsBinding', V34, V35, V36, V37, V38, V39} -> case V34 of [E2 | E3] -> (fun (V40, V41) -> begin (V42 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V37))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V66 = begin (V47 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V38))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V65 = begin (V52 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V39))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V64 = case ('Idris.Idris2.Core.TT':'un--shrinkPi'(V36, {'Core.TT.DropCons', {'Core.TT.SubRefl'}})) of {'Prelude.Types.Just', V57} -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V46, {'Core.TT.DropCons', {'Core.TT.SubRefl'}})) of {'Prelude.Types.Just', V58} -> fun (V59) -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V51, {'Core.TT.DropCons', {'Core.TT.SubRefl'}})) of {'Prelude.Types.Just', V60} -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V56, {'Core.TT.DropCons', {'Core.TT.SubRefl'}})) of {'Prelude.Types.Just', V61} -> {'Prelude.Types.Right', {'Builtin.MkPair', V8, {'TTImp.Elab.Check.AsBinding', V0, V35, V57, V58, V60, V61}}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V38}, V59)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V38}, V59)) end end; _ -> fun (V62) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V38}, V62)) end end; _ -> fun (V63) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V38}, V63)) end end), V64 end(V53)) end end end end), V65 end(V48)) end end end end), V66 end(V43)) end end end end end(E2, E3)) end end end.
'nested--12063-14025--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> {'Prelude.Types.Just', []}; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Core.TT.Local', V9, V10, V11} -> case V11 of 0 -> ('nested--12063-14025--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, V8)); _ -> begin (V12 = (V11 - 1)), ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--12063-14025--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, V8)), fun (V13) -> {'Prelude.Types.Just', [{'Core.TT.Local', V9, V10, V12} | V13]} end)) end end; _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Core.TT':'un--shrinkTerm'(V7, {'Core.TT.DropCons', {'Core.TT.SubRefl'}})), fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--12063-14025--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, V8)), fun (V15) -> {'Prelude.Types.Just', [V14 | V15]} end)) end)) end end(E0, E1)) end.
'nested--12063-14026--in--un--removeArg'(V0, V1, V2, V3, V4, V5, V6) -> ('case--strengthenedEState,removeArg-14166'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V6)))).
'nested--10758-12776--in--un--insertAll'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> V7; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Builtin.MkPair', V10, V11} -> ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V10, V11, ('nested--10758-12776--in--un--insertAll'(V0, V1, V2, V3, V4, V5, V9, V7)))) end end(E0, E1)) end.
'nested--16289-17878--in--un--getRight'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('case--exactlyOne\x{27},getRight-17899'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, ('Idris.Idris2.Data.Either':'un--rights'(V9)))).
'nested--16289-17879--in--un--getRes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V10 of {'Builtin.MkPair', V12, V13} -> case V11 of {'Builtin.MkPair', V14, V15} -> {'Builtin.MkPair', case V14 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V16 end, V12} end end end.
'nested--16289-17880--in--un--getDepthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Core.AmbiguityTooDeep', V10, V11, V12} -> {'Prelude.Types.Just', V9}; _ -> {'Prelude.Types.Nothing'} end.
'nested--14042-15856--in--un--find'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Builtin.MkPair', V15, V16} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V15)) of 1 -> {'Prelude.Types.Just', V16}; 0 -> case V16 of {'Builtin.MkPair', V17, V18} -> case V17 of {'Prelude.Types.Nothing'} -> ('nested--14042-15856--in--un--find'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14)); {'Prelude.Types.Just', V19} -> begin (V20 = {'Builtin.MkPair', {'Prelude.Types.Just', V19}, V18}), case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V19)) of 1 -> {'Prelude.Types.Just', V20}; 0 -> ('nested--14042-15856--in--un--find'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14)) end end end end end end end(E0, E1)) end.
'nested--14042-15857--in--un--envHints'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of [] -> fun (V13) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', [], {'Builtin.MkPair', fun (V14) -> V14 end, V12}}} end; [E0 | E1] -> (fun (V15, V16) -> begin (V17 = ('nested--14042-15857--in--un--envHints'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V16, V12))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V39 = case V21 of {'Builtin.DPair.MkDPair', V22, V23} -> case V23 of {'Builtin.MkPair', V24, V25} -> begin (V31 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V10, {'Core.Context.dn--un--__mkHasNames', fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V26, V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V28, V29, V30)) end end end}, V15))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V38 = begin (V36 = {'Builtin.DPair.MkDPair', V22, {'Builtin.MkPair', V24, V25}}), ('case--case block in searchVar,envHints-16315'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V16, V12, V22, V24, V25, V36, V35, ('nested--14042-15856--in--un--find'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V35, begin (V37 = V3), V37 end)))) end), V38 end(V32)) end end end end end end), V39 end(V18)) end end end end end(E0, E1)) end.
'nested--12063-14028--in--un--dropTop'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = V6), case V7 of 0 -> {'Prelude.Types.Nothing'}; _ -> begin (V8 = (V7 - 1)), {'Prelude.Types.Just', V8} end end end.
'nested--12063-14024--in--un--dropSub'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Core.TT.DropCons', V8} -> {'Prelude.Types.Right', V8}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Badly formed weakened environment"/utf8>>}, V7)) end.
'nested--16289-17881--in--un--depthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Builtin.MkPair', V12, V13} -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('nested--16289-17881--in--un--depthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11)) end, fun () -> fun (V14) -> {'Prelude.Types.Just', V14} end end, ('nested--16289-17880--in--un--getDepthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13)))) end end(E0, E1)) end.
'nested--16914-18422--in--un--anyOneErrs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> case V8 of {'Prelude.Basics.Lin'} -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<"No elaborators provided"/utf8>>}, V9)) end; {'Prelude.Basics.:<', V10, V11} -> fun (V12) -> case V10 of {'Prelude.Basics.Lin'} -> case V11 of {'Builtin.MkPair', V13, V14} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V14, V12)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AllFailed', ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V8, []))}, V12)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AllFailed', ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V8, []))}, V12)) end end; _ -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AllFailed', ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V8, []))}, V15)) end end; [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Builtin.MkPair', V18, V19} -> begin (V20 = ('un--tryError'(V0, V6, V5, V4, V3, V19))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V28 = case V24 of {'Prelude.Types.Right', V25} -> fun (V26) -> {'Prelude.Types.Right', V25} end; {'Prelude.Types.Left', V27} -> ('nested--16914-18422--in--un--anyOneErrs'(V0, V1, V2, V3, V4, V5, V6, V17, {'Prelude.Basics.:<', V8, {'Builtin.MkPair', V18, V27}})) end), V28 end(V21)) end end end end end end(E0, E1)) end.
'nested--16289-17882--in--un--altError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> case ('nested--16289-17881--in--un--depthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9)) of {'Prelude.Types.Nothing'} -> {'Core.Core.AllFailed', V9}; {'Prelude.Types.Just', V11} -> V11 end; _ -> {'Core.Core.AmbiguousElab', V0, V3, V2, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('nested--16289-17879--in--un--getRes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12)) end))(V10))} end.
'nested--15724-17348--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Core.UndefinedName', V10, V11} -> 1; {'Core.Core.InType', V12, V13, V14} -> ('nested--15724-17348--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14)); {'Core.Core.InCon', V15, V16, V17} -> ('nested--15724-17348--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V17)); {'Core.Core.InLHS', V18, V19, V20} -> ('nested--15724-17348--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V20)); {'Core.Core.InRHS', V21, V22, V23} -> ('nested--15724-17348--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V23)); {'Core.Core.AllFailed', V24} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V25, V26)) end end, 0}, fun (V27) -> ('nested--15724-17348--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ('Idris.Idris2.Builtin':'un--snd'(V27)))) end, V24)); _ -> 0 end.
'dn--un--show_Show_ElabMode'(V0) -> case V0 of {'TTImp.Elab.Check.InType'} -> <<"InType"/utf8>>; {'TTImp.Elab.Check.InLHS', V1} -> <<<<"InLHS "/utf8>>/binary, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V1))/binary>>; {'TTImp.Elab.Check.InExpr'} -> <<"InExpr"/utf8>>; {'TTImp.Elab.Check.InTransform'} -> <<"InTransform"/utf8>> end.
'dn--un--show_Show_(ImplBinding $vars)'(V0) -> case V0 of {'TTImp.Elab.Check.NameBinding', V1, V2, V3, V4, V5} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V6) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V1, V7, V8)) end end}, {'Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V1, V10, V11)) end end}}, {'Builtin.MkPair', V4, V5})); {'TTImp.Elab.Check.AsBinding', V12, V13, V14, V15, V16, V17} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V18) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V12, V18)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V12, V19, V20)) end end}, {'Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V12, V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V12, V22, V23)) end end}}, {'Builtin.MkPair', V15, V16}))/binary, <<<<"@"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V12, V15))/binary>>/binary>> end.
'dn--un--showPrec_Show_ElabMode'(V0, V1) -> ('dn--un--show_Show_ElabMode'(V1)).
'dn--un--showPrec_Show_(ImplBinding $vars)'(V0, V1) -> ('dn--un--show_Show_(ImplBinding $vars)'(V1)).
'dn--un--__Impl_Show_ElabMode'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ElabMode'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ElabMode'(V1, V2)) end end}.
'dn--un--__Impl_Show_(ImplBinding $vars)'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_(ImplBinding $vars)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_(ImplBinding $vars)'(V1, V2)) end end}.
'dn--un--__Impl_Eq_ElabOpt'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_ElabOpt'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_ElabOpt'(V2, V3)) end end}.
'dn--un--==_Eq_ElabOpt'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; 3 -> case V1 of 3 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_ElabOpt'(V0, V1) -> case ('dn--un--==_Eq_ElabOpt'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--weakenedEState'(V0, V1, V2) -> begin (V8 = begin (V3 = V2), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V58 = begin (V51 = ('Idris.Idris2.Core.Core':'un--newRef'({'TTImp.Elab.Check.EST'}, case V12 of {'TTImp.Elab.Check.MkEState', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> {'TTImp.Elab.Check.MkEState', V13, V14, V15, {'Core.TT.DropCons', V16}, ((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V27) -> ('nested--11863-13818--in--un--wknTms'(V0, V1, V2, V27)) end))(V17)), ((begin (V40 = fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V38, V39)) end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end(fun (V35) -> ('nested--11863-13818--in--un--wknTms'(V0, V1, V2, V35)) end))(V18)), V19, V20, V21, [], V23, ((begin (V48 = fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V46, V47)) end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end(fun (V43) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V43)) end))(V24)), V25, V26} end))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V57 = fun (V56) -> {'Prelude.Types.Right', V55} end), V57 end(V52)) end end end end), V58 end(V9)) end end end end.
'un--updateEnv'(V0, V1, V2, V3, V4) -> case V4 of {'TTImp.Elab.Check.MkEState', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18} -> {'TTImp.Elab.Check.MkEState', V0, V6, V1, V2, V9, V10, V3, V12, V13, V14, V15, V16, V17, V18} end.
'un--uniVar'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V0, V1, <<"u"/utf8>>))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V19 = begin (V12 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V7, ('Idris.Idris2.Core.Context':'un--newDef'(V2, V7, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V8, V9)) end end, 0, fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V10, V11)) end end, 1})), [], {'Core.TT.Erased', V2, {'Core.TT.Placeholder'}}, 2, {'Core.Context.Context.None'}))))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = fun (V17) -> {'Prelude.Types.Right', {'Core.Name.Resolved', V16}} end), V18 end(V13)) end end end end), V19 end(V4)) end end end end.
'un--tryError'(V0, V1, V2, V3, V4, V5) -> begin (V11 = begin (V6 = V3), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V178 = begin (V21 = begin (V16 = V4), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'get'(V18)) end end(V17))), {'Prelude.Types.Right', V20} end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V177 = begin (V31 = begin (V26 = V2), fun (V27) -> begin (V30 = (begin (V28 = V26), fun (V29) -> ('erlang':'get'(V28)) end end(V27))), {'Prelude.Types.Right', V30} end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V176 = begin (V36 = ('Idris.Idris2.Core.Context':'un--branch'(V1))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V175 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V41 = V5), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V53 = begin (V46 = ('Idris.Idris2.Core.Context':'un--commit'(V1))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V52 = fun (V51) -> {'Prelude.Types.Right', {'Prelude.Types.Right', V45}} end), V52 end(V47)) end end end end), V53 end(V42)) end end end end, fun (V54) -> begin (V60 = begin (V55 = V3), fun (V56) -> begin (V59 = (begin (V57 = V55), fun (V58) -> ('erlang':'put'(V57, V15)) end end(V56))), {'Prelude.Types.Right', V59} end end end), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V174 = begin (V70 = begin (V65 = V4), fun (V66) -> begin (V69 = (begin (V67 = V65), fun (V68) -> ('erlang':'put'(V67, V25)) end end(V66))), {'Prelude.Types.Right', V69} end end end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V173 = begin (V80 = begin (V75 = V2), fun (V76) -> begin (V79 = (begin (V77 = V75), fun (V78) -> ('erlang':'put'(V77, V35)) end end(V76))), {'Prelude.Types.Right', V79} end end end), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V172 = begin (V90 = begin (V85 = V1), fun (V86) -> begin (V89 = (begin (V87 = V85), fun (V88) -> ('erlang':'get'(V87)) end end(V86))), {'Prelude.Types.Right', V89} end end end), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V171 = begin (V164 = begin (V95 = V1), fun (V96) -> begin (V163 = (begin (V97 = V95), fun (V98) -> ('erlang':'put'(V97, case V40 of {'Core.Context.MkDefs', V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130} -> {'Core.Context.MkDefs', V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, case V94 of {'Core.Context.MkDefs', V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162} -> V158 end, V127, V128, V129, V130} end)) end end(V96))), {'Prelude.Types.Right', V163} end end end), fun (V165) -> begin (V166 = (V164(V165))), case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> (begin (V170 = fun (V169) -> {'Prelude.Types.Right', {'Prelude.Types.Left', V54}} end), V170 end(V165)) end end end end), V171 end(V91)) end end end end), V172 end(V81)) end end end end), V173 end(V71)) end end end end), V174 end(V61)) end end end end end))), V175 end(V37)) end end end end), V176 end(V32)) end end end end), V177 end(V22)) end end end end), V178 end(V12)) end end end end.
'un--try'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--tryError'(V0, V1, V2, V3, V4, V5))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V15 = case V11 of {'Prelude.Types.Right', V12} -> fun (V13) -> {'Prelude.Types.Right', V12} end; {'Prelude.Types.Left', V14} -> V6 end), V15 end(V8)) end end end end.
'un--successful'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Builtin.MkPair', V10, V11} -> begin (V17 = begin (V12 = V3), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V276 = begin (V34 = case V5 of 1 -> 0; 0 -> ('Idris.Idris2.Prelude.Types.List':'un--length'(('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V21 of {'Core.UnifyState.MkUState', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V23 end)))) end), begin (V40 = begin (V35 = V4), fun (V36) -> begin (V39 = (begin (V37 = V35), fun (V38) -> ('erlang':'get'(V37)) end end(V36))), {'Prelude.Types.Right', V39} end end end), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V275 = begin (V50 = begin (V45 = V2), fun (V46) -> begin (V49 = (begin (V47 = V45), fun (V48) -> ('erlang':'get'(V47)) end end(V46))), {'Prelude.Types.Right', V49} end end end), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V274 = begin (V55 = ('Idris.Idris2.Core.Context':'un--branch'(V1))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V273 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V74 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"elab"/utf8>>, 5, begin (V67 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V60) -> {'Prelude.Types.Right', {'Core.Name.UN', {'Core.Name.Basic', <<"__"/utf8>>}}} end end, fun () -> fun (V61) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V62, V63)) end end, fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V64, V65, V66)) end end end}, V61)) end end, V10))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V73 = fun (V72) -> {'Prelude.Types.Right', <<<<"Running "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V71))/binary>>} end), V73 end(V68)) end end end end))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V213 = begin (V79 = V11), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V212 = begin (V89 = begin (V84 = V3), fun (V85) -> begin (V88 = (begin (V86 = V84), fun (V87) -> ('erlang':'get'(V86)) end end(V85))), {'Prelude.Types.Right', V88} end end end), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V211 = begin (V106 = case V5 of 1 -> 0; 0 -> ('Idris.Idris2.Prelude.Types.List':'un--length'(('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V93 of {'Core.UnifyState.MkUState', V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105} -> V95 end)))) end), begin (V112 = begin (V107 = V4), fun (V108) -> begin (V111 = (begin (V109 = V107), fun (V110) -> ('erlang':'get'(V109)) end end(V108))), {'Prelude.Types.Right', V111} end end end), fun (V113) -> begin (V114 = (V112(V113))), case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> (begin (V210 = begin (V122 = begin (V117 = V2), fun (V118) -> begin (V121 = (begin (V119 = V117), fun (V120) -> ('erlang':'get'(V119)) end end(V118))), {'Prelude.Types.Right', V121} end end end), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V209 = begin (V132 = begin (V127 = V1), fun (V128) -> begin (V131 = (begin (V129 = V127), fun (V130) -> ('erlang':'get'(V129)) end end(V128))), {'Prelude.Types.Right', V131} end end end), fun (V133) -> begin (V134 = (V132(V133))), case V134 of {'Prelude.Types.Left', V135} -> {'Prelude.Types.Left', V135}; {'Prelude.Types.Right', V136} -> (begin (V208 = begin (V142 = begin (V137 = V3), fun (V138) -> begin (V141 = (begin (V139 = V137), fun (V140) -> ('erlang':'put'(V139, V21)) end end(V138))), {'Prelude.Types.Right', V141} end end end), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V207 = begin (V152 = begin (V147 = V4), fun (V148) -> begin (V151 = (begin (V149 = V147), fun (V150) -> ('erlang':'put'(V149, V44)) end end(V148))), {'Prelude.Types.Right', V151} end end end), fun (V153) -> begin (V154 = (V152(V153))), case V154 of {'Prelude.Types.Left', V155} -> {'Prelude.Types.Left', V155}; {'Prelude.Types.Right', V156} -> (begin (V206 = begin (V162 = begin (V157 = V2), fun (V158) -> begin (V161 = (begin (V159 = V157), fun (V160) -> ('erlang':'put'(V159, V54)) end end(V158))), {'Prelude.Types.Right', V161} end end end), fun (V163) -> begin (V164 = (V162(V163))), case V164 of {'Prelude.Types.Left', V165} -> {'Prelude.Types.Left', V165}; {'Prelude.Types.Right', V166} -> (begin (V205 = begin (V172 = begin (V167 = V1), fun (V168) -> begin (V171 = (begin (V169 = V167), fun (V170) -> ('erlang':'put'(V169, V59)) end end(V168))), {'Prelude.Types.Right', V171} end end end), fun (V173) -> begin (V174 = (V172(V173))), case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> (begin (V204 = begin (V191 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"elab"/utf8>>, 5, begin (V184 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V177) -> {'Prelude.Types.Right', {'Core.Name.UN', {'Core.Name.Basic', <<"__"/utf8>>}}} end end, fun () -> fun (V178) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V179) -> fun (V180) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V179, V180)) end end, fun (V181) -> fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V181, V182, V183)) end end end}, V178)) end end, V10))), fun (V185) -> begin (V186 = (V184(V185))), case V186 of {'Prelude.Types.Left', V187} -> {'Prelude.Types.Left', V187}; {'Prelude.Types.Right', V188} -> (begin (V190 = fun (V189) -> {'Prelude.Types.Right', <<<<"Success "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V188))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V106))/binary, <<<<" - "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V34))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V190 end(V185)) end end end end))), fun (V192) -> begin (V193 = (V191(V192))), case V193 of {'Prelude.Types.Left', V194} -> {'Prelude.Types.Left', V194}; {'Prelude.Types.Right', V195} -> (begin (V203 = begin (V196 = ('un--successful'(V0, V1, V2, V3, V4, V5, V9))), fun (V197) -> begin (V198 = (V196(V197))), case V198 of {'Prelude.Types.Left', V199} -> {'Prelude.Types.Left', V199}; {'Prelude.Types.Right', V200} -> (begin (V202 = fun (V201) -> {'Prelude.Types.Right', [{'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V106 - V34))), {'Builtin.MkPair', V83, {'Builtin.MkPair', V136, {'Builtin.MkPair', V93, {'Builtin.MkPair', V116, V126}}}}}} | V200]} end), V202 end(V197)) end end end end), V203 end(V192)) end end end end), V204 end(V173)) end end end end), V205 end(V163)) end end end end), V206 end(V153)) end end end end), V207 end(V143)) end end end end), V208 end(V133)) end end end end), V209 end(V123)) end end end end), V210 end(V113)) end end end end end), V211 end(V90)) end end end end), V212 end(V80)) end end end end), V213 end(V75)) end end end end, fun (V214) -> begin (V220 = begin (V215 = V3), fun (V216) -> begin (V219 = (begin (V217 = V215), fun (V218) -> ('erlang':'put'(V217, V21)) end end(V216))), {'Prelude.Types.Right', V219} end end end), fun (V221) -> begin (V222 = (V220(V221))), case V222 of {'Prelude.Types.Left', V223} -> {'Prelude.Types.Left', V223}; {'Prelude.Types.Right', V224} -> (begin (V272 = begin (V230 = begin (V225 = V4), fun (V226) -> begin (V229 = (begin (V227 = V225), fun (V228) -> ('erlang':'put'(V227, V44)) end end(V226))), {'Prelude.Types.Right', V229} end end end), fun (V231) -> begin (V232 = (V230(V231))), case V232 of {'Prelude.Types.Left', V233} -> {'Prelude.Types.Left', V233}; {'Prelude.Types.Right', V234} -> (begin (V271 = begin (V240 = begin (V235 = V2), fun (V236) -> begin (V239 = (begin (V237 = V235), fun (V238) -> ('erlang':'put'(V237, V54)) end end(V236))), {'Prelude.Types.Right', V239} end end end), fun (V241) -> begin (V242 = (V240(V241))), case V242 of {'Prelude.Types.Left', V243} -> {'Prelude.Types.Left', V243}; {'Prelude.Types.Right', V244} -> (begin (V270 = begin (V250 = begin (V245 = V1), fun (V246) -> begin (V249 = (begin (V247 = V245), fun (V248) -> ('erlang':'put'(V247, V59)) end end(V246))), {'Prelude.Types.Right', V249} end end end), fun (V251) -> begin (V252 = (V250(V251))), case V252 of {'Prelude.Types.Left', V253} -> {'Prelude.Types.Left', V253}; {'Prelude.Types.Right', V254} -> (begin (V269 = begin (V256 = fun (V255) -> case ('nested--15724-17348--in--un--abandon'(V0, V10, V11, V9, V5, V4, V3, V2, V1, V214)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V214, V255)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V257) -> begin (V258 = (V256(V257))), case V258 of {'Prelude.Types.Left', V259} -> {'Prelude.Types.Left', V259}; {'Prelude.Types.Right', V260} -> (begin (V268 = begin (V261 = ('un--successful'(V0, V1, V2, V3, V4, V5, V9))), fun (V262) -> begin (V263 = (V261(V262))), case V263 of {'Prelude.Types.Left', V264} -> {'Prelude.Types.Left', V264}; {'Prelude.Types.Right', V265} -> (begin (V267 = fun (V266) -> {'Prelude.Types.Right', [{'Prelude.Types.Left', {'Builtin.MkPair', V10, V214}} | V265]} end), V267 end(V262)) end end end end), V268 end(V257)) end end end end), V269 end(V251)) end end end end), V270 end(V241)) end end end end), V271 end(V231)) end end end end), V272 end(V221)) end end end end end))), V273 end(V56)) end end end end), V274 end(V51)) end end end end), V275 end(V41)) end end end end end), V276 end(V18)) end end end end end end(E0, E1)) end.
'un--strengthenedEState'(V0, V1, V2, V3, V4, V5) -> begin (V11 = begin (V6 = V3), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V106 = begin (V21 = begin (V16 = V2), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'get'(V18)) end end(V17))), {'Prelude.Types.Right', V20} end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V105 = begin (V41 = fun (V26) -> ('nested--12063-14024--in--un--dropSub'(V1, V0, V5, V4, V3, V2, case V15 of {'TTImp.Elab.Check.MkEState', V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V30 end, V26)) end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V104 = begin (V61 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V46) -> ('nested--12063-14027--in--un--strTms'(V1, V0, V5, V4, V3, V2, V25, V46)) end, case V15 of {'TTImp.Elab.Check.MkEState', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60} -> V51 end, []))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V103 = begin (V81 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V66) -> ('nested--12063-14027--in--un--strTms'(V1, V0, V5, V4, V3, V2, V25, V66)) end, case V15 of {'TTImp.Elab.Check.MkEState', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80} -> V72 end, []))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V102 = fun (V86) -> {'Prelude.Types.Right', case V15 of {'TTImp.Elab.Check.MkEState', V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100} -> {'TTImp.Elab.Check.MkEState', V87, V88, V89, V45, V65, V85, V93, V94, V95, [], V97, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V101) -> ('nested--12063-14028--in--un--dropTop'(V1, V0, V5, V4, V3, V2, V101)) end, V98)), V99, V100} end} end), V102 end(V82)) end end end end), V103 end(V62)) end end end end), V104 end(V42)) end end end end), V105 end(V22)) end end end end), V106 end(V12)) end end end end.
'un--searchVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V16 = begin (V11 = V1), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V72 = begin (V53 = ('nested--14042-15857--in--un--envHints'(V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V20 of {'Core.Context.MkDefs', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} -> V31 end)), V7))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V71 = case V57 of {'Builtin.DPair.MkDPair', V58, V59} -> case V59 of {'Builtin.MkPair', V60, V61} -> begin (V62 = ('Idris.Idris2.Core.UnifyState':'un--newSearch'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V58, V0)), V1, V2, V3, V4, V5, V6, V61, V9, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V58)), V10))))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V70 = fun (V67) -> case V66 of {'Builtin.MkPair', V68, V69} -> {'Prelude.Types.Right', (V60(V69))} end end), V70 end(V63)) end end end end end end), V71 end(V54)) end end end end), V72 end(V17)) end end end end.
'un--saveHole'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V31 = begin (V12 = V0), fun (V13) -> begin (V30 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'TTImp.Elab.Check.MkEState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> {'TTImp.Elab.Check.MkEState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V1, {'Builtin.MkUnit'}, V28)), V29} end)) end end(V13))), {'Prelude.Types.Right', V30} end end end), V31 end(V8)) end end end end.
'un--processDecl'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('Idris.Idris2.TTImp.ProcessDecls':'un--process'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9)).
'un--notePatVar'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V31 = begin (V12 = V0), fun (V13) -> begin (V30 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'TTImp.Elab.Check.MkEState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> {'TTImp.Elab.Check.MkEState', V16, V17, V18, V19, V20, V21, V22, V23, [V1 | V24], V25, V26, V27, V28, V29} end)) end end(V13))), {'Prelude.Types.Right', V30} end end end), V31 end(V8)) end end end end.
'un--noteLHSPatVar'(V0, V1, V2) -> case V1 of {'TTImp.Elab.Check.InLHS', V3} -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V33 = begin (V14 = V0), fun (V15) -> begin (V32 = (begin (V16 = V14), fun (V17) -> ('erlang':'put'(V16, case V13 of {'TTImp.Elab.Check.MkEState', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} -> {'TTImp.Elab.Check.MkEState', V18, V19, V20, V21, V22, V23, V24, [V2 | V25], V26, V27, V28, V29, V30, V31} end)) end end(V15))), {'Prelude.Types.Right', V32} end end end), V33 end(V10)) end end end end; _ -> fun (V34) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'un--mustBePoly'(V0, V1, V2, V3, V4) -> begin (V10 = begin (V5 = V0), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V34 = begin (V15 = V0), fun (V16) -> begin (V33 = (begin (V17 = V15), fun (V18) -> ('erlang':'put'(V17, case V14 of {'TTImp.Elab.Check.MkEState', V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> {'TTImp.Elab.Check.MkEState', V19, V20, V21, V22, V23, V24, V25, V26, V27, [{'Builtin.MkPair', V1, {'Builtin.MkPair', V2, {'Builtin.MkPair', V3, V4}}} | V28], V29, V30, V31, V32} end)) end end(V16))), {'Prelude.Types.Right', V33} end end end), V34 end(V11)) end end end end.
'un--metaVarI'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V13 = begin (V8 = V1), fun (V9) -> begin (V12 = (begin (V10 = V8), fun (V11) -> ('erlang':'get'(V10)) end end(V9))), {'Prelude.Types.Right', V12} end end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V33 = begin (V18 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V17, V5, V7))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V32 = begin (V31 = case V22 of {'Core.Value.NApp', V23, V24, V25} -> case V24 of {'Core.Value.NMeta', V26, V27, V28} -> case ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0)) of {'Core.Context.Context.MkHoleFlags', V29, V30} -> {'Core.Context.Context.MkHoleFlags', V29, 1} end; _ -> ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0)) end; _ -> ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0)) end), ('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V2, V3, V4, V5, V6, V7, {'Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V5)), V31}, 1)) end), V32 end(V19)) end end end end), V33 end(V14)) end end end end.
'un--metaVar'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V2, V3, V4, V5, V6, V7, {'Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V5)), ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0))}, 1))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V16 = fun (V13) -> case V12 of {'Builtin.MkPair', V14, V15} -> {'Prelude.Types.Right', V15} end end), V16 end(V9)) end end end end.
'un--isLHS'(V0) -> case V0 of {'TTImp.Elab.Check.InLHS', V1} -> {'Prelude.Types.Just', V1}; _ -> {'Prelude.Types.Nothing'} end.
'un--initElabInfo'(V0) -> {'TTImp.Elab.Check.MkElabInfo', V0, {'TTImp.TTImp.NONE'}, 0, 1, 0, []}.
'un--initEStateSub'(V0, V1, V2, V3) -> {'TTImp.Elab.Check.MkEState', V0, V1, V2, V3, [], [], [], [], [], [], 0, [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.UserNameMap':'un--empty'())}.
'un--initEState'(V0, V1, V2) -> ('un--initEStateSub'(V0, V1, V2, {'Core.TT.SubRefl'})).
'un--inScope'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--weakenedEState'(V0, V1, V3))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V36 = begin (V12 = (V6(V11))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V35 = begin (V17 = ('un--strengthenedEState'(V0, V1, V2, V11, V4, V5))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V34 = begin (V27 = begin (V22 = V3), fun (V23) -> begin (V26 = (begin (V24 = V22), fun (V25) -> ('erlang':'put'(V24, V21)) end end(V23))), {'Prelude.Types.Right', V26} end end end), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = fun (V32) -> {'Prelude.Types.Right', V16} end), V33 end(V28)) end end end end), V34 end(V18)) end end end end), V35 end(V13)) end end end end), V36 end(V8)) end end end end.
'un--implBindVar'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V2, V3, V4, V5, V6, V7, {'Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V5)), ('Idris.Idris2.Core.Context.Context':'un--holeInit'(1))}, 1))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V16 = fun (V13) -> case V12 of {'Builtin.MkPair', V14, V15} -> {'Prelude.Types.Right', V15} end end), V16 end(V9)) end end end end.
'un--handle'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--tryError'(V0, V1, V2, V3, V4, V5))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V15 = case V11 of {'Prelude.Types.Right', V12} -> fun (V13) -> {'Prelude.Types.Right', V12} end; {'Prelude.Types.Left', V14} -> (V6(V14)) end), V15 end(V8)) end end end end.
'un--exactlyOne\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Builtin.MkPair', V11, V12} -> case V10 of [] -> V12; _ -> begin (V13 = ('un--successful'(V0, V1, V2, V3, V4, V5, V8))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V80 = case ('nested--16289-17878--in--un--getRight'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V17)) of {'Prelude.Types.Right', V18} -> case V18 of {'Builtin.MkPair', V19, V20} -> case V20 of {'Builtin.MkPair', V21, V22} -> case V22 of {'Builtin.MkPair', V23, V24} -> case V24 of {'Builtin.MkPair', V25, V26} -> begin (V32 = begin (V27 = V3), fun (V28) -> begin (V31 = (begin (V29 = V27), fun (V30) -> ('erlang':'put'(V29, V23)) end end(V28))), {'Prelude.Types.Right', V31} end end end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V77 = begin (V42 = begin (V37 = V4), fun (V38) -> begin (V41 = (begin (V39 = V37), fun (V40) -> ('erlang':'put'(V39, V25)) end end(V38))), {'Prelude.Types.Right', V41} end end end), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V76 = begin (V52 = begin (V47 = V2), fun (V48) -> begin (V51 = (begin (V49 = V47), fun (V50) -> ('erlang':'put'(V49, V26)) end end(V48))), {'Prelude.Types.Right', V51} end end end), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V75 = begin (V62 = begin (V57 = V1), fun (V58) -> begin (V61 = (begin (V59 = V57), fun (V60) -> ('erlang':'put'(V59, V21)) end end(V58))), {'Prelude.Types.Right', V61} end end end), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V74 = begin (V67 = ('Idris.Idris2.Core.Context':'un--commit'(V1))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V73 = fun (V72) -> {'Prelude.Types.Right', V19} end), V73 end(V68)) end end end end), V74 end(V63)) end end end end), V75 end(V53)) end end end end), V76 end(V43)) end end end end), V77 end(V33)) end end end end end end end end; {'Prelude.Types.Left', V78} -> fun (V79) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(('nested--16289-17882--in--un--altError'(V0, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.Either':'un--lefts'(V17)), V78)), V79)) end end), V80 end(V14)) end end end end end; _ -> begin (V81 = ('un--successful'(V0, V1, V2, V3, V4, V5, V8))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V148 = case ('nested--16289-17878--in--un--getRight'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V85)) of {'Prelude.Types.Right', V86} -> case V86 of {'Builtin.MkPair', V87, V88} -> case V88 of {'Builtin.MkPair', V89, V90} -> case V90 of {'Builtin.MkPair', V91, V92} -> case V92 of {'Builtin.MkPair', V93, V94} -> begin (V100 = begin (V95 = V3), fun (V96) -> begin (V99 = (begin (V97 = V95), fun (V98) -> ('erlang':'put'(V97, V91)) end end(V96))), {'Prelude.Types.Right', V99} end end end), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V145 = begin (V110 = begin (V105 = V4), fun (V106) -> begin (V109 = (begin (V107 = V105), fun (V108) -> ('erlang':'put'(V107, V93)) end end(V106))), {'Prelude.Types.Right', V109} end end end), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V144 = begin (V120 = begin (V115 = V2), fun (V116) -> begin (V119 = (begin (V117 = V115), fun (V118) -> ('erlang':'put'(V117, V94)) end end(V116))), {'Prelude.Types.Right', V119} end end end), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V143 = begin (V130 = begin (V125 = V1), fun (V126) -> begin (V129 = (begin (V127 = V125), fun (V128) -> ('erlang':'put'(V127, V89)) end end(V126))), {'Prelude.Types.Right', V129} end end end), fun (V131) -> begin (V132 = (V130(V131))), case V132 of {'Prelude.Types.Left', V133} -> {'Prelude.Types.Left', V133}; {'Prelude.Types.Right', V134} -> (begin (V142 = begin (V135 = ('Idris.Idris2.Core.Context':'un--commit'(V1))), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V141 = fun (V140) -> {'Prelude.Types.Right', V87} end), V141 end(V136)) end end end end), V142 end(V131)) end end end end), V143 end(V121)) end end end end), V144 end(V111)) end end end end), V145 end(V101)) end end end end end end end end; {'Prelude.Types.Left', V146} -> fun (V147) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(('nested--16289-17882--in--un--altError'(V0, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.Either':'un--lefts'(V85)), V146)), V147)) end end), V148 end(V82)) end end end end end end(E0, E1)); _ -> begin (V149 = ('un--successful'(V0, V1, V2, V3, V4, V5, V8))), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V216 = case ('nested--16289-17878--in--un--getRight'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V153)) of {'Prelude.Types.Right', V154} -> case V154 of {'Builtin.MkPair', V155, V156} -> case V156 of {'Builtin.MkPair', V157, V158} -> case V158 of {'Builtin.MkPair', V159, V160} -> case V160 of {'Builtin.MkPair', V161, V162} -> begin (V168 = begin (V163 = V3), fun (V164) -> begin (V167 = (begin (V165 = V163), fun (V166) -> ('erlang':'put'(V165, V159)) end end(V164))), {'Prelude.Types.Right', V167} end end end), fun (V169) -> begin (V170 = (V168(V169))), case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> (begin (V213 = begin (V178 = begin (V173 = V4), fun (V174) -> begin (V177 = (begin (V175 = V173), fun (V176) -> ('erlang':'put'(V175, V161)) end end(V174))), {'Prelude.Types.Right', V177} end end end), fun (V179) -> begin (V180 = (V178(V179))), case V180 of {'Prelude.Types.Left', V181} -> {'Prelude.Types.Left', V181}; {'Prelude.Types.Right', V182} -> (begin (V212 = begin (V188 = begin (V183 = V2), fun (V184) -> begin (V187 = (begin (V185 = V183), fun (V186) -> ('erlang':'put'(V185, V162)) end end(V184))), {'Prelude.Types.Right', V187} end end end), fun (V189) -> begin (V190 = (V188(V189))), case V190 of {'Prelude.Types.Left', V191} -> {'Prelude.Types.Left', V191}; {'Prelude.Types.Right', V192} -> (begin (V211 = begin (V198 = begin (V193 = V1), fun (V194) -> begin (V197 = (begin (V195 = V193), fun (V196) -> ('erlang':'put'(V195, V157)) end end(V194))), {'Prelude.Types.Right', V197} end end end), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V210 = begin (V203 = ('Idris.Idris2.Core.Context':'un--commit'(V1))), fun (V204) -> begin (V205 = (V203(V204))), case V205 of {'Prelude.Types.Left', V206} -> {'Prelude.Types.Left', V206}; {'Prelude.Types.Right', V207} -> (begin (V209 = fun (V208) -> {'Prelude.Types.Right', V155} end), V209 end(V204)) end end end end), V210 end(V199)) end end end end), V211 end(V189)) end end end end), V212 end(V179)) end end end end), V213 end(V169)) end end end end end end end end; {'Prelude.Types.Left', V214} -> fun (V215) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(('nested--16289-17882--in--un--altError'(V0, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.Either':'un--lefts'(V153)), V214)), V215)) end end), V216 end(V150)) end end end end end.
'un--exactlyOne'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('un--exactlyOne\x{27}'(V0, V1, V2, V3, V4, 1, V5, V6, V7)).
'un--convertWithLazy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V17 = case V6 of {'TTImp.Elab.Check.MkElabInfo', V10, V11, V12, V13, V14, V15} -> case V10 of {'TTImp.Elab.Check.InLHS', V16} -> ('Idris.Idris2.Core.Unify':'un--inLHS'()); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end end), ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V18 = ('Idris.Idris2.Core.Context':'un--isLazyActive'(V1))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V148 = begin (V23 = case V22 of 1 -> V4; 0 -> 0 end), begin (V30 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.unify"/utf8>>, 5, fun () -> <<<<"Unifying "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V4))/binary, <<<<" "/utf8>>/binary, ('dn--un--show_Show_ElabMode'(case V6 of {'TTImp.Elab.Check.MkElabInfo', V24, V25, V26, V27, V28, V29} -> V24 end))/binary>>/binary>>/binary>> end, V7, V8))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V147 = begin (V35 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.unify"/utf8>>, 5, fun () -> <<"....with"/utf8>> end, V7, V9))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V146 = begin (V128 = case case ('Idris.Idris2.Core.Normalise.Eval':'un--isFromTerm'(V8)) of 1 -> ('Idris.Idris2.Core.Normalise.Eval':'un--isFromTerm'(V9)); 0 -> 0 end of 1 -> begin (V40 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V83 = begin (V45 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V9))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V82 = case V23 of 1 -> ((('Idris.Idris2.Core.Unify':'un--unifyWithLazy'({'Core.Unify.dn--un--__mkUnify', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V50, V51, V52, V53, V54, V55, V56, V57)) end end end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V58, V59, V60, V61, V62, V63, V64, V65)) end end end end end end end end}, V0, V1, V2, V17, V5, V7))(V44))(V49)); 0 -> ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V66, V67, V68, V69, V70, V71, V72, V73)) end end end end end end end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V74, V75, V76, V77, V78, V79, V80, V81)) end end end end end end end end}, V0, V1, V2, V17, V5, V7))(V44))(V49)) end), V82 end(V46)) end end end end), V83 end(V41)) end end end end; 0 -> begin (V84 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V8))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V127 = begin (V89 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V9))), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V126 = case V23 of 1 -> ((('Idris.Idris2.Core.Unify':'un--unifyWithLazy'({'Core.Unify.dn--un--__mkUnify', fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V94, V95, V96, V97, V98, V99, V100, V101)) end end end end end end end end, fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V102, V103, V104, V105, V106, V107, V108, V109)) end end end end end end end end}, V0, V1, V2, V17, V5, V7))(V88))(V93)); 0 -> ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V110, V111, V112, V113, V114, V115, V116, V117)) end end end end end end end end, fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V118, V119, V120, V121, V122, V123, V124, V125)) end end end end end end end end}, V0, V1, V2, V17, V5, V7))(V88))(V93)) end), V126 end(V90)) end end end end), V127 end(V85)) end end end end end), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V145 = begin (V138 = case case V132 of {'Core.Unify.MkUnifyResult', V133, V134, V135, V136} -> V134 end of 1 -> ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V2, V17, 0)); 0 -> fun (V137) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V139) -> begin (V140 = (V138(V139))), case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> (begin (V144 = fun (V143) -> {'Prelude.Types.Right', V132} end), V144 end(V139)) end end end end), V145 end(V129)) end end end end), V146 end(V36)) end end end end), V147 end(V31)) end end end end end), V148 end(V19)) end end end end, fun (V149) -> begin (V150 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))), fun (V151) -> begin (V152 = (V150(V151))), case V152 of {'Prelude.Types.Left', V153} -> {'Prelude.Types.Left', V153}; {'Prelude.Types.Right', V154} -> (begin (V213 = begin (V155 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V9))), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V212 = begin (V162 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V2, V17, 0)), fun (V160) -> fun (V161) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end))), fun (V163) -> begin (V164 = (V162(V163))), case V164 of {'Prelude.Types.Left', V165} -> {'Prelude.Types.Left', V165}; {'Prelude.Types.Right', V166} -> (begin (V211 = begin (V172 = begin (V167 = V1), fun (V168) -> begin (V171 = (begin (V169 = V167), fun (V170) -> ('erlang':'get'(V169)) end end(V168))), {'Prelude.Types.Right', V171} end end end), fun (V173) -> begin (V174 = (V172(V173))), case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> (begin (V210 = fun (V177) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.WhenUnifying', V0, V5, case V176 of {'Core.Context.MkDefs', V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209} -> V178 end, V7, V154, V159, V149}, V177)) end), V210 end(V173)) end end end end), V211 end(V163)) end end end end), V212 end(V156)) end end end end), V213 end(V151)) end end end end end)) end.
'un--convert'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('un--convertWithLazy'(V0, V1, V2, V3, 0, V4, V5, V6, V7, V8)).
'un--concrete'(V0, V1, V2) -> case V2 of {'Core.Value.NBind', V3, V4, V5, V6} -> case V5 of {'Core.TT.Pi', V7, V8, V9, V10} -> begin (V11 = ((V6(V0))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V1, {'Core.TT.Erased', V3, {'Core.TT.Placeholder'}}))))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V16 = ('un--concrete'(V0, V1, V15))), V16 end(V12)) end end end end; _ -> fun (V17) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NDCon', V18, V19, V20, V21, V22} -> fun (V23) -> {'Prelude.Types.Right', 1} end; {'Core.Value.NTCon', V24, V25, V26, V27, V28} -> fun (V29) -> {'Prelude.Types.Right', 1} end; {'Core.Value.NPrimVal', V30, V31} -> fun (V32) -> {'Prelude.Types.Right', 1} end; {'Core.Value.NType', V33, V34} -> fun (V35) -> {'Prelude.Types.Right', 1} end; _ -> fun (V36) -> {'Prelude.Types.Right', 0} end end.
'un--clearToBind'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V62 = begin (V12 = V0), fun (V13) -> begin (V61 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case ('un--clearBindIfUnsolved'(V11)) of {'TTImp.Elab.Check.MkEState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> {'TTImp.Elab.Check.MkEState', V16, V17, V18, V19, V20, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V30) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V42)) end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V46, V47, V48, V49)) end end end end end end end, fun (V50) -> fun (V51) -> V51 end end, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V54, V55, V56)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V59, V60)) end end}, ('Idris.Idris2.Builtin':'un--fst'(V30)), V1)) end, V21)), V22, V23, V24, V25, V26, V27, V28, V29} end)) end end(V13))), {'Prelude.Types.Right', V61} end end end), V62 end(V8)) end end end end.
'un--clearBindIfUnsolved'(V0) -> case V0 of {'TTImp.Elab.Check.MkEState', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14} -> {'TTImp.Elab.Check.MkEState', V1, V2, V3, V4, V5, V6, [], V8, V9, V10, V11, V12, V13, V14} end.
'un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V13 = ('Idris.Idris2.TTImp.Elab.Term':'un--checkTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V54 = begin (V47 = case case ('Idris.Idris2.TTImp.Elab.Term':'un--onLHS'(case V8 of {'TTImp.Elab.Check.MkElabInfo', V18, V19, V20, V21, V22, V23} -> V18 end)) of 1 -> case case V8 of {'TTImp.Elab.Check.MkElabInfo', V24, V25, V26, V27, V28, V29} -> V26 end of 1 -> 0; 0 -> 1 end; 0 -> 0 end of 1 -> (case V17 of {'Builtin.MkPair', V30, V31} -> case V12 of {'Prelude.Types.Just', V32} -> fun () -> begin (V33 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V32))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V44 = begin (V38 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V31))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V43 = ('Idris.Idris2.Core.UnifyState':'un--addPolyConstraint'(V0, V3, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V11)), V10, V30, V37, V42))), V43 end(V39)) end end end end), V44 end(V34)) end end end end end; {'Prelude.Types.Nothing'} -> fun () -> fun (V45) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end end()); 0 -> fun (V46) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V53 = fun (V52) -> {'Prelude.Types.Right', V17} end), V53 end(V48)) end end end end), V54 end(V14)) end end end end.
'un--checkExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Prelude.Types.Just', V11} -> begin (V12 = ('un--convertWithLazy'(V0, V1, V2, V3, 1, V7, V5, V6, V9, V11))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V21 = ('case--checkExp-19297'(V0, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V16, case V16 of {'Core.Unify.MkUnifyResult', V17, V18, V19, V20} -> V17 end))), V21 end(V13)) end end end end; {'Prelude.Types.Nothing'} -> fun (V22) -> {'Prelude.Types.Right', {'Builtin.MkPair', V8, V9}} end end.
'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'TTImp.TTImp.ICoerced', V13, V14} -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V12)); {'TTImp.TTImp.ILet', V15, V16, V17, V18, V19, V20, V21} -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); {'TTImp.TTImp.ILocal', V22, V23, V24} -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); {'TTImp.TTImp.IUpdate', V25, V26, V27} -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> begin (V34 = ('Idris.Idris2.TTImp.Elab.Ambiguity':'un--expandAmbigName'(V0, V1, V4, case V8 of {'TTImp.Elab.Check.MkElabInfo', V28, V29, V30, V31, V32, V33} -> V28 end, V9, V10, V11, [], V11, V12))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V52 = case V8 of {'TTImp.Elab.Check.MkElabInfo', V39, V40, V41, V42, V43, V44} -> case V39 of {'TTImp.Elab.Check.InLHS', V45} -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V38, V12)); _ -> begin (V46 = ('Idris.Idris2.TTImp.Elab.Term':'un--insertImpLam'(V1, V3, V10, V38, V12))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V51 = ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V50, V12))), V51 end(V47)) end end end end end end), V52 end(V35)) end end end end end.
'un--bindingType'(V0) -> case V0 of {'TTImp.Elab.Check.NameBinding', V1, V2, V3, V4, V5} -> V5; {'TTImp.Elab.Check.AsBinding', V6, V7, V8, V9, V10, V11} -> V10 end.
'un--bindingTerm'(V0) -> case V0 of {'TTImp.Elab.Check.NameBinding', V1, V2, V3, V4, V5} -> V4; {'TTImp.Elab.Check.AsBinding', V6, V7, V8, V9, V10, V11} -> V9 end.
'un--bindingRig'(V0) -> case V0 of {'TTImp.Elab.Check.NameBinding', V1, V2, V3, V4, V5} -> V2; {'TTImp.Elab.Check.AsBinding', V6, V7, V8, V9, V10, V11} -> V7 end.
'un--bindingPiInfo'(V0) -> case V0 of {'TTImp.Elab.Check.NameBinding', V1, V2, V3, V4, V5} -> V3; {'TTImp.Elab.Check.AsBinding', V6, V7, V8, V9, V10, V11} -> V8 end.
'un--bindingMetas'(V0) -> case V0 of {'TTImp.Elab.Check.NameBinding', V1, V2, V3, V4, V5} -> ('Idris.Idris2.Core.TT':'un--getMetas'(V5)); {'TTImp.Elab.Check.AsBinding', V6, V7, V8, V9, V10, V11} -> ('nested--10758-12776--in--un--insertAll'(V6, V11, V10, V9, V8, V7, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(('Idris.Idris2.Core.TT':'un--getMetas'(V10)))), ('Idris.Idris2.Core.TT':'un--getMetas'(V11)))) end.
'un--argVar'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Core.UnifyState':'un--newMetaLets'(V0, V1, V2, V3, V4, V5, V6, V7, {'Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V5)), ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0))}, 0, 1)).
'un--anyOne'(V0, V1, V2, V3, V4, V5, V6) -> ('nested--16914-18422--in--un--anyOneErrs'(V0, V6, V5, V4, V3, V2, V1, V6, {'Prelude.Basics.Lin'})).
'un--addBindIfUnsolved'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'TTImp.Elab.Check.MkEState', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21} -> {'TTImp.Elab.Check.MkEState', V8, V9, V10, V11, V12, V13, begin (V22 = {'TTImp.Elab.Check.MkEState', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21}), [{'Builtin.MkPair', V1, {'Builtin.MkPair', V2, {'Builtin.DPair.MkDPair', V0, {'Builtin.MkPair', V4, {'Builtin.MkPair', V3, {'Builtin.MkPair', V5, {'Builtin.MkPair', V6, case V22 of {'TTImp.Elab.Check.MkEState', V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} -> V26 end}}}}}}} | V14] end, V15, V16, V17, V18, V19, V20, V21} end.
