-module('Idris.Idris2.Core.Hash').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--hash_Hashable_String'/1,
  'dn--un--hash_Hashable_RigCount'/1,
  'dn--un--hash_Hashable_PrimType'/1,
  'dn--un--hash_Hashable_Pat'/1,
  'dn--un--hash_Hashable_Nat'/1,
  'dn--un--hash_Hashable_Namespace'/1,
  'dn--un--hash_Hashable_NamedDef'/1,
  'dn--un--hash_Hashable_NamedConstAlt'/1,
  'dn--un--hash_Hashable_NamedConAlt'/1,
  'dn--un--hash_Hashable_NamedCExp'/1,
  'dn--un--hash_Hashable_Name'/1,
  'dn--un--hash_Hashable_LazyReason'/1,
  'dn--un--hash_Hashable_Integer'/1,
  'dn--un--hash_Hashable_Int8'/1,
  'dn--un--hash_Hashable_Int64'/1,
  'dn--un--hash_Hashable_Int32'/1,
  'dn--un--hash_Hashable_Int16'/1,
  'dn--un--hash_Hashable_Int'/1,
  'dn--un--hash_Hashable_Double'/1,
  'dn--un--hash_Hashable_Constant'/1,
  'dn--un--hash_Hashable_ConInfo'/1,
  'dn--un--hash_Hashable_Char'/1,
  'dn--un--hash_Hashable_CFType'/1,
  'dn--un--hash_Hashable_Bits8'/1,
  'dn--un--hash_Hashable_Bits64'/1,
  'dn--un--hash_Hashable_Bits32'/1,
  'dn--un--hash_Hashable_Bits16'/1,
  'dn--un--hash_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/3,
  'dn--un--hash_Hashable_(Term $vars)'/1,
  'dn--un--hash_Hashable_(PrimFn $arity)'/1,
  'dn--un--hash_Hashable_(PiInfo $t)'/2,
  'dn--un--hash_Hashable_(Maybe $a)'/2,
  'dn--un--hash_Hashable_(List1 $a)'/2,
  'dn--un--hash_Hashable_(List $a)'/2,
  'dn--un--hash_Hashable_(CaseTree $vars)'/1,
  'dn--un--hash_Hashable_(CaseAlt $vars)'/1,
  'dn--un--hash_Hashable_(Binder $ty)'/2,
  'dn--un--hash_Hashable_((Vect $n) $a)'/2,
  'dn--un--hashWithSalt_Hashable_String'/2,
  'dn--un--hashWithSalt_Hashable_RigCount'/2,
  'dn--un--hashWithSalt_Hashable_PrimType'/2,
  'dn--un--hashWithSalt_Hashable_Pat'/2,
  'dn--un--hashWithSalt_Hashable_Nat'/2,
  'dn--un--hashWithSalt_Hashable_Namespace'/2,
  'dn--un--hashWithSalt_Hashable_NamedDef'/2,
  'dn--un--hashWithSalt_Hashable_NamedConstAlt'/2,
  'dn--un--hashWithSalt_Hashable_NamedConAlt'/2,
  'dn--un--hashWithSalt_Hashable_NamedCExp'/2,
  'dn--un--hashWithSalt_Hashable_Name'/2,
  'dn--un--hashWithSalt_Hashable_LazyReason'/2,
  'dn--un--hashWithSalt_Hashable_Integer'/2,
  'dn--un--hashWithSalt_Hashable_Int8'/2,
  'dn--un--hashWithSalt_Hashable_Int64'/2,
  'dn--un--hashWithSalt_Hashable_Int32'/2,
  'dn--un--hashWithSalt_Hashable_Int16'/2,
  'dn--un--hashWithSalt_Hashable_Int'/2,
  'dn--un--hashWithSalt_Hashable_Double'/2,
  'dn--un--hashWithSalt_Hashable_Constant'/2,
  'dn--un--hashWithSalt_Hashable_ConInfo'/2,
  'dn--un--hashWithSalt_Hashable_Char'/2,
  'dn--un--hashWithSalt_Hashable_CFType'/2,
  'dn--un--hashWithSalt_Hashable_Bits8'/2,
  'dn--un--hashWithSalt_Hashable_Bits64'/2,
  'dn--un--hashWithSalt_Hashable_Bits32'/2,
  'dn--un--hashWithSalt_Hashable_Bits16'/2,
  'dn--un--hashWithSalt_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/4,
  'dn--un--hashWithSalt_Hashable_(Term $vars)'/2,
  'dn--un--hashWithSalt_Hashable_(PrimFn $arity)'/2,
  'dn--un--hashWithSalt_Hashable_(PiInfo $t)'/3,
  'dn--un--hashWithSalt_Hashable_(Maybe $a)'/3,
  'dn--un--hashWithSalt_Hashable_(List1 $a)'/3,
  'dn--un--hashWithSalt_Hashable_(List $a)'/3,
  'dn--un--hashWithSalt_Hashable_(CaseTree $vars)'/2,
  'dn--un--hashWithSalt_Hashable_(CaseAlt $vars)'/2,
  'dn--un--hashWithSalt_Hashable_(Binder $ty)'/3,
  'dn--un--hashWithSalt_Hashable_((Vect $n) $a)'/3,
  'dn--un--__Impl_Hashable_String'/0,
  'dn--un--__Impl_Hashable_RigCount'/0,
  'dn--un--__Impl_Hashable_PrimType'/0,
  'dn--un--__Impl_Hashable_Pat'/0,
  'dn--un--__Impl_Hashable_Nat'/0,
  'dn--un--__Impl_Hashable_Namespace'/0,
  'dn--un--__Impl_Hashable_NamedDef'/0,
  'dn--un--__Impl_Hashable_NamedConstAlt'/0,
  'dn--un--__Impl_Hashable_NamedConAlt'/0,
  'dn--un--__Impl_Hashable_NamedCExp'/0,
  'dn--un--__Impl_Hashable_Name'/0,
  'dn--un--__Impl_Hashable_LazyReason'/0,
  'dn--un--__Impl_Hashable_Integer'/0,
  'dn--un--__Impl_Hashable_Int8'/0,
  'dn--un--__Impl_Hashable_Int64'/0,
  'dn--un--__Impl_Hashable_Int32'/0,
  'dn--un--__Impl_Hashable_Int16'/0,
  'dn--un--__Impl_Hashable_Int'/0,
  'dn--un--__Impl_Hashable_Double'/0,
  'dn--un--__Impl_Hashable_Constant'/0,
  'dn--un--__Impl_Hashable_ConInfo'/0,
  'dn--un--__Impl_Hashable_Char'/0,
  'dn--un--__Impl_Hashable_CFType'/0,
  'dn--un--__Impl_Hashable_Bits8'/0,
  'dn--un--__Impl_Hashable_Bits64'/0,
  'dn--un--__Impl_Hashable_Bits32'/0,
  'dn--un--__Impl_Hashable_Bits16'/0,
  'dn--un--__Impl_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/2,
  'dn--un--__Impl_Hashable_(Term $vars)'/0,
  'dn--un--__Impl_Hashable_(PrimFn $arity)'/0,
  'dn--un--__Impl_Hashable_(PiInfo $t)'/1,
  'dn--un--__Impl_Hashable_(Maybe $a)'/1,
  'dn--un--__Impl_Hashable_(List1 $a)'/1,
  'dn--un--__Impl_Hashable_(List $a)'/1,
  'dn--un--__Impl_Hashable_(CaseTree $vars)'/0,
  'dn--un--__Impl_Hashable_(CaseAlt $vars)'/0,
  'dn--un--__Impl_Hashable_(Binder $ty)'/1,
  'dn--un--__Impl_Hashable_((Vect $n) $a)'/1,
  'un--hashWithSalt'/3,
  'un--hash'/2
]).
'dn--un--hash_Hashable_String'(V0) -> ('dn--un--hashWithSalt_Hashable_String'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_RigCount'(V0) -> ('dn--un--hashWithSalt_Hashable_RigCount'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_PrimType'(V0) -> ('dn--un--hashWithSalt_Hashable_PrimType'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_Pat'(V0) -> ('dn--un--hashWithSalt_Hashable_Pat'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_Nat'(V0) -> begin (V1 = V0), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end.
'dn--un--hash_Hashable_Namespace'(V0) -> ('dn--un--hashWithSalt_Hashable_Namespace'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_NamedDef'(V0) -> ('dn--un--hashWithSalt_Hashable_NamedDef'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_NamedConstAlt'(V0) -> ('dn--un--hashWithSalt_Hashable_NamedConstAlt'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_NamedConAlt'(V0) -> ('dn--un--hashWithSalt_Hashable_NamedConAlt'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_NamedCExp'(V0) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_Name'(V0) -> ('dn--un--hashWithSalt_Hashable_Name'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_LazyReason'(V0) -> ('dn--un--hashWithSalt_Hashable_LazyReason'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_Integer'(V0) -> begin (V1 = V0), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end.
'dn--un--hash_Hashable_Int8'(V0) -> V0.
'dn--un--hash_Hashable_Int64'(V0) -> V0.
'dn--un--hash_Hashable_Int32'(V0) -> V0.
'dn--un--hash_Hashable_Int16'(V0) -> V0.
'dn--un--hash_Hashable_Int'(V0) -> V0.
'dn--un--hash_Hashable_Double'(V0) -> ('dn--un--hash_Hashable_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V0)))).
'dn--un--hash_Hashable_Constant'(V0) -> ('dn--un--hashWithSalt_Hashable_Constant'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_ConInfo'(V0) -> ('dn--un--hashWithSalt_Hashable_ConInfo'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_Char'(V0) -> case V0 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end.
'dn--un--hash_Hashable_CFType'(V0) -> ('dn--un--hashWithSalt_Hashable_CFType'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_Bits8'(V0) -> V0.
'dn--un--hash_Hashable_Bits64'(V0) -> begin (V1 = V0), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end.
'dn--un--hash_Hashable_Bits32'(V0) -> V0.
'dn--un--hash_Hashable_Bits16'(V0) -> V0.
'dn--un--hash_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2) -> ('dn--un--hashWithSalt_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, begin (V3 = 5381), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end, V2)).
'dn--un--hash_Hashable_(Term $vars)'(V0) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_(PrimFn $arity)'(V0) -> ('dn--un--hashWithSalt_Hashable_(PrimFn $arity)'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_(PiInfo $t)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, begin (V2 = 5381), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end, V1)).
'dn--un--hash_Hashable_(Maybe $a)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(Maybe $a)'(V0, begin (V2 = 5381), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end, V1)).
'dn--un--hash_Hashable_(List1 $a)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(List1 $a)'(V0, begin (V2 = 5381), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end, V1)).
'dn--un--hash_Hashable_(List $a)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(List $a)'(V0, begin (V2 = 5381), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end, V1)).
'dn--un--hash_Hashable_(CaseTree $vars)'(V0) -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_(CaseAlt $vars)'(V0) -> ('dn--un--hashWithSalt_Hashable_(CaseAlt $vars)'(begin (V1 = 5381), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end, V0)).
'dn--un--hash_Hashable_(Binder $ty)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(Binder $ty)'(V0, begin (V2 = 5381), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end, V1)).
'dn--un--hash_Hashable_((Vect $n) $a)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_((Vect $n) $a)'(V0, begin (V2 = 5381), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end, V1)).
'dn--un--hashWithSalt_Hashable_String'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_Char'(V2, V3)) end end, V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))).
'dn--un--hashWithSalt_Hashable_RigCount'(V0, V1) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V2) -> fun (V3) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V2, V3)) end end, 0, fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V4, V5)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V8, V9)) end end}}, ('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), ('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), fun (V10) -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)) end, V1)).
'dn--un--hashWithSalt_Hashable_PrimType'(V0, V1) -> case V1 of 0 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)); 1 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)); 2 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)); 3 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)); 4 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)); 5 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)); 6 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)); 7 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)); 8 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)); 9 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)); 10 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 11)); 11 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 12)); 12 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 13)); 13 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 14)) end.
'dn--un--hashWithSalt_Hashable_Pat'(V0, V1) -> case V1 of {'Core.Case.CaseTree.PAs', V2, V3, V4} -> ('dn--un--hashWithSalt_Hashable_Pat'(('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V3)), V4)); {'Core.Case.CaseTree.PCon', V5, V6, V7, V8, V9} -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V10) -> ('dn--un--hash_Hashable_Pat'(V10)) end, fun (V11) -> fun (V12) -> ('dn--un--hashWithSalt_Hashable_Pat'(V11, V12)) end end}, ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V6)), V9)); {'Core.Case.CaseTree.PTyCon', V13, V14, V15, V16} -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V17) -> ('dn--un--hash_Hashable_Pat'(V17)) end, fun (V18) -> fun (V19) -> ('dn--un--hashWithSalt_Hashable_Pat'(V18, V19)) end end}, ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V14)), V16)); {'Core.Case.CaseTree.PConst', V20, V21} -> ('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V21)))); {'Core.Case.CaseTree.PArrow', V22, V23, V24, V25} -> ('dn--un--hashWithSalt_Hashable_Pat'(('dn--un--hashWithSalt_Hashable_Pat'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V24)), V25)); {'Core.Case.CaseTree.PDelay', V26, V27, V28, V29} -> ('dn--un--hashWithSalt_Hashable_Pat'(('dn--un--hashWithSalt_Hashable_Pat'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)), V28)), V29)); {'Core.Case.CaseTree.PLoc', V30, V31} -> ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)), V31)); {'Core.Case.CaseTree.PUnmatchable', V32, V33} -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)), V33)) end.
'dn--un--hashWithSalt_Hashable_Nat'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Nat'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_Namespace'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V2) -> ('dn--un--hash_Hashable_String'(V2)) end, fun (V3) -> fun (V4) -> ('dn--un--hashWithSalt_Hashable_String'(V3, V4)) end end}, V0, ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V1)))).
'dn--un--hashWithSalt_Hashable_NamedDef'(V0, V1) -> case V1 of {'Core.CompileExpr.MkNmFun', V2, V3} -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V4) -> ('dn--un--hash_Hashable_Name'(V4)) end, fun (V5) -> fun (V6) -> ('dn--un--hashWithSalt_Hashable_Name'(V5, V6)) end end}, ('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V2)), V3)); {'Core.CompileExpr.MkNmCon', V7, V8, V9} -> ('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Core.Hash.dn--un--__mkHashable', fun (V10) -> ('dn--un--hash_Hashable_Nat'(V10)) end, fun (V11) -> fun (V12) -> ('dn--un--hashWithSalt_Hashable_Nat'(V11, V12)) end end}, ('dn--un--hashWithSalt_Hashable_Nat'(('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Core.Hash.dn--un--__mkHashable', fun (V13) -> V13 end, fun (V14) -> fun (V15) -> ('dn--un--hashWithSalt_Hashable_Int'(V14, V15)) end end}, ('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V7)), V8)), V9)); {'Core.CompileExpr.MkNmForeign', V16, V17, V18} -> ('dn--un--hashWithSalt_Hashable_CFType'(('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V19) -> ('dn--un--hash_Hashable_CFType'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--hashWithSalt_Hashable_CFType'(V20, V21)) end end}, ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V22) -> ('dn--un--hash_Hashable_String'(V22)) end, fun (V23) -> fun (V24) -> ('dn--un--hashWithSalt_Hashable_String'(V23, V24)) end end}, ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V16)), V17)), V18)); {'Core.CompileExpr.MkNmError', V25} -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), V25)) end.
'dn--un--hashWithSalt_Hashable_NamedConstAlt'(V0, V1) -> case V1 of {'Core.CompileExpr.MkNConstAlt', V2, V3} -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Constant'(V0, V2)), V3)) end.
'dn--un--hashWithSalt_Hashable_NamedConAlt'(V0, V1) -> case V1 of {'Core.CompileExpr.MkNConAlt', V2, V3, V4, V5, V6} -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V7) -> ('dn--un--hash_Hashable_Name'(V7)) end, fun (V8) -> fun (V9) -> ('dn--un--hashWithSalt_Hashable_Name'(V8, V9)) end end}, ('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Core.Hash.dn--un--__mkHashable', fun (V10) -> V10 end, fun (V11) -> fun (V12) -> ('dn--un--hashWithSalt_Hashable_Int'(V11, V12)) end end}, ('dn--un--hashWithSalt_Hashable_ConInfo'(('dn--un--hashWithSalt_Hashable_Name'(V0, V2)), V3)), V4)), V5)), V6)) end.
'dn--un--hashWithSalt_Hashable_NamedCExp'(V0, V1) -> case V1 of {'Core.CompileExpr.NmLocal', V2, V3} -> ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V3)); {'Core.CompileExpr.NmRef', V4, V5} -> ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V5)); {'Core.CompileExpr.NmLam', V6, V7, V8} -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V7)), V8)); {'Core.CompileExpr.NmLet', V9, V10, V11, V12} -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), V10)), V11)), V12)); {'Core.CompileExpr.NmApp', V13, V14, V15} -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V16) -> ('dn--un--hash_Hashable_NamedCExp'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V17, V18)) end end}, ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V14)), V15)); {'Core.CompileExpr.NmCon', V19, V20, V21, V22, V23} -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V24) -> ('dn--un--hash_Hashable_NamedCExp'(V24)) end, fun (V25) -> fun (V26) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V25, V26)) end end}, ('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Core.Hash.dn--un--__mkHashable', fun (V27) -> V27 end, fun (V28) -> fun (V29) -> ('dn--un--hashWithSalt_Hashable_Int'(V28, V29)) end end}, ('dn--un--hashWithSalt_Hashable_ConInfo'(('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)), V20)), V21)), V22)), V23)); {'Core.CompileExpr.NmOp', V30, V31, V32, V33} -> ('dn--un--hashWithSalt_Hashable_((Vect $n) $a)'({'Core.Hash.dn--un--__mkHashable', fun (V34) -> ('dn--un--hash_Hashable_NamedCExp'(V34)) end, fun (V35) -> fun (V36) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V35, V36)) end end}, ('dn--un--hashWithSalt_Hashable_(PrimFn $arity)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)), V32)), V33)); {'Core.CompileExpr.NmExtPrim', V37, V38, V39} -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V40) -> ('dn--un--hash_Hashable_NamedCExp'(V40)) end, fun (V41) -> fun (V42) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V41, V42)) end end}, ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)), V38)), V39)); {'Core.CompileExpr.NmForce', V43, V44, V45} -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_LazyReason'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)), V44)), V45)); {'Core.CompileExpr.NmDelay', V46, V47, V48} -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_LazyReason'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)), V47)), V48)); {'Core.CompileExpr.NmConCase', V49, V50, V51, V52} -> ('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Core.Hash.dn--un--__mkHashable', fun (V53) -> ('dn--un--hash_Hashable_NamedCExp'(V53)) end, fun (V54) -> fun (V55) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V54, V55)) end end}, ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V56) -> ('dn--un--hash_Hashable_NamedConAlt'(V56)) end, fun (V57) -> fun (V58) -> ('dn--un--hashWithSalt_Hashable_NamedConAlt'(V57, V58)) end end}, ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)), V50)), V51)), V52)); {'Core.CompileExpr.NmConstCase', V59, V60, V61, V62} -> ('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Core.Hash.dn--un--__mkHashable', fun (V63) -> ('dn--un--hash_Hashable_NamedCExp'(V63)) end, fun (V64) -> fun (V65) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V64, V65)) end end}, ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V66) -> ('dn--un--hash_Hashable_NamedConstAlt'(V66)) end, fun (V67) -> fun (V68) -> ('dn--un--hashWithSalt_Hashable_NamedConstAlt'(V67, V68)) end end}, ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 11)), V60)), V61)), V62)); {'Core.CompileExpr.NmPrimVal', V69, V70} -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 12)), V70)); {'Core.CompileExpr.NmErased', V71} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 13)); {'Core.CompileExpr.NmCrash', V72, V73} -> ('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 14)), V73)) end.
'dn--un--hashWithSalt_Hashable_Name'(V0, V1) -> case V1 of {'Core.Name.MN', V2, V3} -> ('dn--un--hashWithSalt_Hashable_String'(V0, V2)); {'Core.Name.DN', V4, V5} -> ('dn--un--hashWithSalt_Hashable_Name'(V0, V5)); {'Core.Name.NS', V6, V7} -> ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Namespace'(V0, V6)), V7)); {'Core.Name.Resolved', V8} -> ('dn--un--hashWithSalt_Hashable_Int'(V0, V8)); _ -> ('dn--un--hashWithSalt_Hashable_String'(V0, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)))) end.
'dn--un--hashWithSalt_Hashable_LazyReason'(V0, V1) -> case V1 of 0 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)); 1 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)); 2 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)) end.
'dn--un--hashWithSalt_Hashable_Integer'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Integer'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_Int8'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Int8'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_Int64'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Int64'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_Int32'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Int32'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_Int16'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Int16'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_Int'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + V1)), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_Double'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Double'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_Constant'(V0, V1) -> case V1 of {'Core.TT.I', V2} -> ('dn--un--hashWithSalt_Hashable_Int'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V2)); {'Core.TT.I8', V3} -> ('dn--un--hashWithSalt_Hashable_Int8'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V3)); {'Core.TT.I16', V4} -> ('dn--un--hashWithSalt_Hashable_Int16'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V4)); {'Core.TT.I32', V5} -> ('dn--un--hashWithSalt_Hashable_Int32'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), V5)); {'Core.TT.I64', V6} -> ('dn--un--hashWithSalt_Hashable_Int64'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V6)); {'Core.TT.BI', V7} -> ('dn--un--hashWithSalt_Hashable_Integer'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)), V7)); {'Core.TT.B8', V8} -> ('dn--un--hashWithSalt_Hashable_Bits8'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)), V8)); {'Core.TT.B16', V9} -> ('dn--un--hashWithSalt_Hashable_Bits16'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)), V9)); {'Core.TT.B32', V10} -> ('dn--un--hashWithSalt_Hashable_Bits32'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)), V10)); {'Core.TT.B64', V11} -> ('dn--un--hashWithSalt_Hashable_Bits64'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)), V11)); {'Core.TT.Str', V12} -> ('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)), V12)); {'Core.TT.Ch', V13} -> ('dn--un--hashWithSalt_Hashable_Char'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 11)), V13)); {'Core.TT.Db', V14} -> ('dn--un--hashWithSalt_Hashable_Double'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 12)), V14)); {'Core.TT.PrT', V15} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 13)), V15)); {'Core.TT.WorldVal'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 14)) end.
'dn--un--hashWithSalt_Hashable_ConInfo'(V0, V1) -> case V1 of {'Core.CompileExpr.DATACON'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)); {'Core.CompileExpr.TYCON'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)); {'Core.CompileExpr.NIL'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)); {'Core.CompileExpr.CONS'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)); {'Core.CompileExpr.ENUM', V2} -> ('dn--un--hashWithSalt_Hashable_Nat'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V2)); {'Core.CompileExpr.NOTHING'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)); {'Core.CompileExpr.JUST'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)); {'Core.CompileExpr.RECORD'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)); {'Core.CompileExpr.ZERO'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)); {'Core.CompileExpr.SUCC'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)); {'Core.CompileExpr.UNIT'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)) end.
'dn--un--hashWithSalt_Hashable_Char'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Char'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_CFType'(V0, V1) -> case V1 of {'Core.CompileExpr.CFUnit'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)); {'Core.CompileExpr.CFInt'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)); {'Core.CompileExpr.CFUnsigned8'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)); {'Core.CompileExpr.CFUnsigned16'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)); {'Core.CompileExpr.CFUnsigned32'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)); {'Core.CompileExpr.CFUnsigned64'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)); {'Core.CompileExpr.CFString'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)); {'Core.CompileExpr.CFDouble'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)); {'Core.CompileExpr.CFChar'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)); {'Core.CompileExpr.CFPtr'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)); {'Core.CompileExpr.CFGCPtr'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)); {'Core.CompileExpr.CFBuffer'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 11)); {'Core.CompileExpr.CFWorld'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 12)); {'Core.CompileExpr.CFFun', V2, V3} -> ('dn--un--hashWithSalt_Hashable_CFType'(('dn--un--hashWithSalt_Hashable_CFType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 13)), V2)), V3)); {'Core.CompileExpr.CFIORes', V4} -> ('dn--un--hashWithSalt_Hashable_CFType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 14)), V4)); {'Core.CompileExpr.CFStruct', V5, V6} -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V7) -> ('dn--un--hash_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Core.Hash.dn--un--__mkHashable', fun (V8) -> ('dn--un--hash_Hashable_String'(V8)) end, fun (V9) -> fun (V10) -> ('dn--un--hashWithSalt_Hashable_String'(V9, V10)) end end}, {'Core.Hash.dn--un--__mkHashable', fun (V11) -> ('dn--un--hash_Hashable_CFType'(V11)) end, fun (V12) -> fun (V13) -> ('dn--un--hashWithSalt_Hashable_CFType'(V12, V13)) end end}, V7)) end, fun (V14) -> fun (V15) -> ('dn--un--hashWithSalt_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Core.Hash.dn--un--__mkHashable', fun (V16) -> ('dn--un--hash_Hashable_String'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--hashWithSalt_Hashable_String'(V17, V18)) end end}, {'Core.Hash.dn--un--__mkHashable', fun (V19) -> ('dn--un--hash_Hashable_CFType'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--hashWithSalt_Hashable_CFType'(V20, V21)) end end}, V14, V15)) end end}, ('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 15)), V5)), V6)); {'Core.CompileExpr.CFUser', V22, V23} -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V24) -> ('dn--un--hash_Hashable_CFType'(V24)) end, fun (V25) -> fun (V26) -> ('dn--un--hashWithSalt_Hashable_CFType'(V25, V26)) end end}, ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 16)), V22)), V23)); {'Core.CompileExpr.CFInt8'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 17)); {'Core.CompileExpr.CFInt16'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 18)); {'Core.CompileExpr.CFInt32'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 19)); {'Core.CompileExpr.CFInt64'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 20)); {'Core.CompileExpr.CFForeignObj'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 21)); {'Core.CompileExpr.CFInteger'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 22)) end.
'dn--un--hashWithSalt_Hashable_Bits8'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Bits8'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_Bits64'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Bits64'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_Bits32'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Bits32'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_Bits16'(V0, V1) -> begin (V3 = (begin (V2 = (V0 * 33)), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end + ('dn--un--hash_Hashable_Bits16'(V1)))), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end.
'dn--un--hashWithSalt_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V1 of {'Core.Hash.dn--un--__mkHashable', V6, V7} -> ((V7(case V0 of {'Core.Hash.dn--un--__mkHashable', V8, V9} -> ((V9(V2))(V4)) end))(V5)) end end.
'dn--un--hashWithSalt_Hashable_(Term $vars)'(V0, V1) -> case V1 of {'Core.TT.Local', V2, V3, V4} -> ('dn--un--hashWithSalt_Hashable_Nat'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V4)); {'Core.TT.Ref', V5, V6, V7} -> ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V7)); {'Core.TT.Meta', V8, V9, V10, V11} -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V12) -> ('dn--un--hash_Hashable_(Term $vars)'(V12)) end, fun (V13) -> fun (V14) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(V13, V14)) end end}, ('dn--un--hashWithSalt_Hashable_Int'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V10)), V11)); {'Core.TT.Bind', V15, V16, V17, V18} -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_(Binder $ty)'({'Core.Hash.dn--un--__mkHashable', fun (V19) -> ('dn--un--hash_Hashable_(Term $vars)'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(V20, V21)) end end}, ('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), V17)), V18)); {'Core.TT.App', V22, V23, V24} -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V23)), V24)); {'Core.TT.As', V25, V26, V27, V28} -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)), V27)), V28)); {'Core.TT.TDelayed', V29, V30, V31} -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)), V31)); {'Core.TT.TDelay', V32, V33, V34, V35} -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)), V34)), V35)); {'Core.TT.TForce', V36, V37, V38} -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)), V38)); {'Core.TT.PrimVal', V39, V40} -> ('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)), ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V40)))); {'Core.TT.Erased', V41, V42} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)); {'Core.TT.TType', V43, V44} -> ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 11)), V44)) end.
'dn--un--hashWithSalt_Hashable_(PrimFn $arity)'(V0, V1) -> case V1 of {'Core.TT.Add', V2} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V2)); {'Core.TT.Sub', V3} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V3)); {'Core.TT.Mul', V4} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V4)); {'Core.TT.Div', V5} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), V5)); {'Core.TT.Mod', V6} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V6)); {'Core.TT.Neg', V7} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)), V7)); {'Core.TT.ShiftL', V8} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)), V8)); {'Core.TT.ShiftR', V9} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)), V9)); {'Core.TT.BAnd', V10} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)), V10)); {'Core.TT.BOr', V11} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)), V11)); {'Core.TT.BXOr', V12} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)), V12)); {'Core.TT.LT', V13} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 11)), V13)); {'Core.TT.LTE', V14} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 12)), V14)); {'Core.TT.EQ', V15} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 13)), V15)); {'Core.TT.GTE', V16} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 14)), V16)); {'Core.TT.GT', V17} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 15)), V17)); {'Core.TT.StrLength'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 16)); {'Core.TT.StrHead'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 17)); {'Core.TT.StrTail'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 18)); {'Core.TT.StrIndex'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 19)); {'Core.TT.StrCons'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 20)); {'Core.TT.StrAppend'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 21)); {'Core.TT.StrReverse'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 22)); {'Core.TT.StrSubstr'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 23)); {'Core.TT.DoubleExp'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 24)); {'Core.TT.DoubleLog'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 25)); {'Core.TT.DoubleSin'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 26)); {'Core.TT.DoubleCos'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 27)); {'Core.TT.DoubleTan'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 28)); {'Core.TT.DoubleASin'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 29)); {'Core.TT.DoubleACos'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 30)); {'Core.TT.DoubleATan'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 31)); {'Core.TT.DoubleSqrt'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 32)); {'Core.TT.DoubleFloor'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 33)); {'Core.TT.DoubleCeiling'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 34)); {'Core.TT.Cast', V18, V19} -> ('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_PrimType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 35)), V18)), V19)); {'Core.TT.BelieveMe'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 36)); {'Core.TT.Crash'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 37)); {'Core.TT.DoublePow'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 38)) end.
'dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, V1, V2) -> case V2 of {'Core.TT.Implicit'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V1, 0)); {'Core.TT.Explicit'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V1, 1)); {'Core.TT.AutoImplicit'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V1, 2)); {'Core.TT.DefImplicit', V3} -> case V0 of {'Core.Hash.dn--un--__mkHashable', V4, V5} -> ((V5(('dn--un--hashWithSalt_Hashable_Integer'(V1, 3))))(V3)) end end.
'dn--un--hashWithSalt_Hashable_(Maybe $a)'(V0, V1, V2) -> case V2 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Prelude.Num':'dn--un--abs_Abs_Int'(V1)); {'Prelude.Types.Just', V3} -> case V0 of {'Core.Hash.dn--un--__mkHashable', V4, V5} -> ((V5(V1))(V3)) end end.
'dn--un--hashWithSalt_Hashable_(List1 $a)'(V0, V1, V2) -> ('dn--un--hashWithSalt_Hashable_(List $a)'(V0, begin (V8 = (begin (V3 = (V1 * 33)), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end + case V0 of {'Core.Hash.dn--un--__mkHashable', V4, V5} -> (V4(case V2 of {'Data.List1.:::', V6, V7} -> V6 end)) end)), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end, case V2 of {'Data.List1.:::', V9, V10} -> V10 end)).
'dn--un--hashWithSalt_Hashable_(List $a)'(V0, V1, V2) -> case V2 of [] -> ('Idris.Idris2.Prelude.Num':'dn--un--abs_Abs_Int'(V1)); [E0 | E1] -> (fun (V3, V4) -> ('dn--un--hashWithSalt_Hashable_(List $a)'(V0, begin (V8 = (begin (V5 = (V1 * 33)), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end + case V0 of {'Core.Hash.dn--un--__mkHashable', V6, V7} -> (V6(V3)) end)), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end, V4)) end(E0, E1)) end.
'dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseTree.Case', V2, V3, V4, V5} -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V6) -> ('dn--un--hash_Hashable_(CaseAlt $vars)'(V6)) end, fun (V7) -> fun (V8) -> ('dn--un--hashWithSalt_Hashable_(CaseAlt $vars)'(V7, V8)) end end}, ('dn--un--hashWithSalt_Hashable_Nat'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V3)), V5)); {'Core.Case.CaseTree.STerm', V9, V10} -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V10)); {'Core.Case.CaseTree.Unmatched', V11} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)); {'Core.Case.CaseTree.Impossible'} -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)) end.
'dn--un--hashWithSalt_Hashable_(CaseAlt $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseTree.ConCase', V2, V3, V4, V5} -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(('dn--un--hashWithSalt_Hashable_(List $a)'({'Core.Hash.dn--un--__mkHashable', fun (V6) -> ('dn--un--hash_Hashable_Name'(V6)) end, fun (V7) -> fun (V8) -> ('dn--un--hashWithSalt_Hashable_Name'(V7, V8)) end end}, ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V2)), V4)), V5)); {'Core.Case.CaseTree.DelayCase', V9, V10, V11} -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)))), ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)))), V11)); {'Core.Case.CaseTree.ConstCase', V12, V13} -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V12)))), V13)); {'Core.Case.CaseTree.DefaultCase', V14} -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V14)) end.
'dn--un--hashWithSalt_Hashable_(Binder $ty)'(V0, V1, V2) -> case V2 of {'Core.TT.Lam', V3, V4, V5, V6} -> case V0 of {'Core.Hash.dn--un--__mkHashable', V7, V8} -> ((V8(('dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, ('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 0)), V4)), V5))))(V6)) end; {'Core.TT.Let', V9, V10, V11, V12} -> case V0 of {'Core.Hash.dn--un--__mkHashable', V13, V14} -> ((V14(case V0 of {'Core.Hash.dn--un--__mkHashable', V15, V16} -> ((V16(('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 1)), V10))))(V11)) end))(V12)) end; {'Core.TT.Pi', V17, V18, V19, V20} -> case V0 of {'Core.Hash.dn--un--__mkHashable', V21, V22} -> ((V22(('dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, ('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 2)), V18)), V19))))(V20)) end; {'Core.TT.PVar', V23, V24, V25, V26} -> case V0 of {'Core.Hash.dn--un--__mkHashable', V27, V28} -> ((V28(('dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, ('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 3)), V24)), V25))))(V26)) end; {'Core.TT.PLet', V29, V30, V31, V32} -> case V0 of {'Core.Hash.dn--un--__mkHashable', V33, V34} -> ((V34(case V0 of {'Core.Hash.dn--un--__mkHashable', V35, V36} -> ((V36(('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 4)), V30))))(V31)) end))(V32)) end; {'Core.TT.PVTy', V37, V38, V39} -> case V0 of {'Core.Hash.dn--un--__mkHashable', V40, V41} -> ((V41(('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 5)), V38))))(V39)) end end.
'dn--un--hashWithSalt_Hashable_((Vect $n) $a)'(V0, V1, V2) -> case V2 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Prelude.Num':'dn--un--abs_Abs_Int'(V1)); {'Data.Vect.::', V3, V4} -> ('dn--un--hashWithSalt_Hashable_((Vect $n) $a)'(V0, begin (V8 = (begin (V5 = (V1 * 33)), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end + case V0 of {'Core.Hash.dn--un--__mkHashable', V6, V7} -> (V6(V3)) end)), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end, V4)) end.
'dn--un--__Impl_Hashable_String'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_String'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_String'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_RigCount'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_RigCount'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_RigCount'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_PrimType'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_PrimType'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_PrimType'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Pat'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Pat'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Pat'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Nat'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Nat'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Nat'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Namespace'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Namespace'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Namespace'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_NamedDef'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_NamedDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_NamedDef'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_NamedConstAlt'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_NamedConstAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_NamedConstAlt'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_NamedConAlt'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_NamedConAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_NamedConAlt'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_NamedCExp'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_NamedCExp'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Name'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Name'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Name'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_LazyReason'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_LazyReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_LazyReason'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Integer'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Integer'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Integer'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Int8'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Int8'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Int8'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Int64'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Int64'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Int64'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Int32'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Int32'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Int32'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Int16'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Int16'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Int16'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Int'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> V0 end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Int'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Double'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Double'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Double'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Constant'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Constant'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Constant'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_ConInfo'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_ConInfo'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_ConInfo'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Char'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Char'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Char'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_CFType'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_CFType'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_CFType'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Bits8'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Bits8'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Bits8'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Bits64'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Bits64'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Bits64'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Bits32'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Bits32'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Bits32'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Bits16'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Bits16'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Bits16'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1) -> {'Core.Hash.dn--un--__mkHashable', fun (V2) -> ('dn--un--hash_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2)) end, fun (V3) -> fun (V4) -> ('dn--un--hashWithSalt_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V3, V4)) end end}.
'dn--un--__Impl_Hashable_(Term $vars)'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_(Term $vars)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_(PrimFn $arity)'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_(PrimFn $arity)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_(PrimFn $arity)'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_(PiInfo $t)'(V0) -> {'Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_(PiInfo $t)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Hashable_(Maybe $a)'(V0) -> {'Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_(Maybe $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_(Maybe $a)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Hashable_(List1 $a)'(V0) -> {'Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_(List1 $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_(List1 $a)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Hashable_(List $a)'(V0) -> {'Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_(List $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_(List $a)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Hashable_(CaseTree $vars)'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_(CaseTree $vars)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_(CaseAlt $vars)'() -> {'Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_(CaseAlt $vars)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_(CaseAlt $vars)'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_(Binder $ty)'(V0) -> {'Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_(Binder $ty)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_(Binder $ty)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Hashable_((Vect $n) $a)'(V0) -> {'Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_((Vect $n) $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_((Vect $n) $a)'(V0, V2, V3)) end end}.
'un--hashWithSalt'(V0, V1, V2) -> case V0 of {'Core.Hash.dn--un--__mkHashable', V3, V4} -> ((V4(V1))(V2)) end.
'un--hash'(V0, V1) -> case V0 of {'Core.Hash.dn--un--__mkHashable', V2, V3} -> (V2(V1)) end.
