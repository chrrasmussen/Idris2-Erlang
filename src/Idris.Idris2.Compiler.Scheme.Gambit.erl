-module('Idris.Idris2.Compiler.Scheme.Gambit').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--useCC-7556'/7,
  'nested--12666-7845--in--un--showFld'/4,
  'nested--11407-6669--in--un--replaceChar'/11,
  'nested--11407-6667--in--un--mkNs'/10,
  'nested--11407-6672--in--un--mkFun'/11,
  'nested--11067-6395--in--un--funTySpec'/5,
  'nested--10952-6241--in--un--funTySpec'/5,
  'nested--12311-7519--in--un--fnWrapName'/8,
  'nested--11407-6673--in--un--callback'/11,
  'nested--11407-6670--in--un--buildCWrapperDefs'/9,
  'nested--11407-6671--in--un--buildCFunWrapDeclaration'/11,
  'nested--11407-6674--in--un--buildArg'/9,
  'nested--11407-6668--in--un--applyLams'/10,
  'un--useCC'/6,
  'un--showGambitString'/2,
  'un--showGambitChar'/2,
  'un--schemeCall'/4,
  'un--schHeader'/0,
  'un--schFgnDef'/6,
  'un--notWorld'/1,
  'un--mkStruct'/2,
  'un--mkArgs'/2,
  'un--handleRet'/2,
  'un--getFgnCall'/4,
  'un--gambitString'/1,
  'un--gambitPrim'/3,
  'un--findGSCBackend'/1,
  'un--findGSC'/1,
  'un--executeExpr'/4,
  'un--compileToSCM'/3,
  'un--compileLibrary'/5,
  'un--compileExpr'/6,
  'un--codegenGambit'/0,
  'un--cftySpec'/2,
  'un--cType'/2,
  'un--cCall'/8
]).
'case--useCC-7556'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Prelude.Types.Nothing'} -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V7)) end; {'Prelude.Types.Just', V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V9 of <<"scheme,gambit"/utf8>> -> case V10 of [E0 | E1] -> (fun (V11, V12) -> case V12 of [] -> begin (V21 = ('un--schemeCall'(V3, V11, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('Idris.Idris2.Builtin':'un--fst'(V13)) end))(V1)), V0))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'Builtin.MkPair', V25, <<""/utf8>>}}} end), V27 end(V22)) end end end end; _ -> fun (V28) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V28)) end end end(E0, E1)); _ -> fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V29)) end end; <<"scheme"/utf8>> -> case V10 of [E2 | E3] -> (fun (V30, V31) -> case V31 of [] -> begin (V40 = ('un--schemeCall'(V3, V30, ((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(fun (V32) -> ('Idris.Idris2.Builtin':'un--fst'(V32)) end))(V1)), V0))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V46 = fun (V45) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'Builtin.MkPair', V44, <<""/utf8>>}}} end), V46 end(V41)) end end end end; _ -> fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V47)) end end end(E2, E3)); _ -> fun (V48) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V48)) end end; <<"C"/utf8>> -> case V10 of [E4 | E5] -> (fun (V49, V50) -> case V50 of [E6 | E7] -> (fun (V51, V52) -> case V52 of [] -> begin (V54 = ('un--cCall'(V5, V4, V3, V49, fun (V53) -> ('nested--12311-7519--in--un--fnWrapName'(V0, V1, V2, V3, V4, V5, V49, V53)) end, V51, V1, V0))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V60 = fun (V59) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Just', V51}, V58}} end), V60 end(V55)) end end end end; [E8 | E9] -> (fun (V61, V62) -> case V62 of [] -> begin (V64 = ('un--cCall'(V5, V4, V3, V49, fun (V63) -> ('nested--12311-7519--in--un--fnWrapName'(V0, V1, V2, V3, V4, V5, V49, V63)) end, V51, V1, V0))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V70 = fun (V69) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Just', V51}, V68}} end), V70 end(V65)) end end end end; _ -> fun (V71) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V71)) end end end(E8, E9)); _ -> fun (V72) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V72)) end end end(E6, E7)); _ -> fun (V73) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V73)) end end end(E4, E5)); _ -> fun (V74) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V74)) end end; _ -> fun (V75) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V75)) end end; _ -> fun (V76) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V76)) end end; _ -> fun (V77) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V3, V2}, V77)) end end.
'nested--12666-7845--in--un--showFld'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V6 = ('un--cftySpec'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> {'Prelude.Types.Right', <<<<"("/utf8>>/binary, <<V4/binary, <<<<" "/utf8>>/binary, <<V10/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V12 end(V7)) end end end end end.
'nested--11407-6669--in--un--replaceChar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replaceOn'({'Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V13, V14)) end end}, V8, V9, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V10)))))).
'nested--11407-6667--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> []; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Core.CompileExpr.CFWorld'} -> [{'Prelude.Types.Nothing'} | ('nested--11407-6667--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11))]; _ -> [{'Prelude.Types.Just', <<<<"cb"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8))/binary>>} | ('nested--11407-6667--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, begin (V12 = (V8 + 1)), case ((V12 band 9223372036854775808) =/= 0) of 'true' -> (V12 bor -9223372036854775808); _ -> (V12 band 9223372036854775807) end end, V11))] end end(E0, E1)) end.
'nested--11407-6672--in--un--mkFun'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('nested--11407-6667--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, 0, V8))), <<<<"(lambda ("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V12) -> V12 end, V11))))/binary, <<<<") "/utf8>>/binary, <<('nested--11407-6668--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, V10, V11))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end.
'nested--11067-6395--in--un--funTySpec'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.CFFun', V5, V6} -> case V5 of {'Core.CompileExpr.CFWorld'} -> ('nested--11067-6395--in--un--funTySpec'(V0, V1, V2, V3, V6)); _ -> ('nested--11067-6395--in--un--funTySpec'(V0, V1, V2, [V5 | V3], V6)) end; _ -> begin (V7 = ('un--cftySpec'(V2, V4))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V21 = begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V12) -> ('un--cftySpec'(V2, V12)) end, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V13) -> ('un--notWorld'(V13)) end, V3)))), []))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', <<<<"(function ("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V18))/binary, <<<<") "/utf8>>/binary, <<V11/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V20 end(V15)) end end end end), V21 end(V8)) end end end end end.
'nested--10952-6241--in--un--funTySpec'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.CFFun', V5, V6} -> case V5 of {'Core.CompileExpr.CFWorld'} -> ('nested--10952-6241--in--un--funTySpec'(V0, V1, V2, V3, V6)); _ -> ('nested--10952-6241--in--un--funTySpec'(V0, V1, V2, [V5 | V3], V6)) end; _ -> begin (V7 = ('un--cType'(V2, V4))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V21 = begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V12) -> ('un--cType'(V2, V12)) end, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V13) -> ('un--notWorld'(V13)) end, V3)))), []))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', <<V11/binary, <<<<" (*)("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, V18))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>} end), V20 end(V15)) end end end end), V21 end(V8)) end end end end end.
'nested--12311-7519--in--un--fnWrapName'(V0, V1, V2, V3, V4, V5, V6, V7) -> <<V7/binary, <<<<"-"/utf8>>/binary, <<V6/binary, <<"-cFunWrap"/utf8>>/binary>>/binary>>/binary>>.
'nested--11407-6673--in--un--callback'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Core.CompileExpr.CFFun', V11, V12} -> ('nested--11407-6673--in--un--callback'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V11 | V9], V12)); _ -> begin (V13 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V9))), begin (V16 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> ('un--cftySpec'(V5, V14)) end, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V15) -> ('un--notWorld'(V15)) end, V13)), []))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V28 = begin (V21 = ('un--cftySpec'(V5, V10))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('nested--11407-6672--in--un--mkFun'(V0, V1, V2, V3, V4, V5, V6, V7, V13, V10, V8)), {'Builtin.MkPair', V20, V25}}} end), V27 end(V22)) end end end end), V28 end(V17)) end end end end end end.
'nested--11407-6670--in--un--buildCWrapperDefs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Compiler.Scheme.Gambit.MkCCallbackInfo', V9, V10, V11, V12, V13} -> begin (V14 = <<V10/binary, <<"-box"/utf8>>/binary>>), begin (V15 = <<<<"\x{a} (set-box! "/utf8>>/binary, <<V14/binary, <<<<" "/utf8>>/binary, <<V11/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>), begin (V16 = ('nested--11407-6669--in--un--replaceChar'(V0, V1, V2, V3, V4, V5, V6, V7, $-, $_, V10))), begin (V17 = <<<<"\x{a}(define "/utf8>>/binary, <<V14/binary, <<" (box #f))\x{a}"/utf8>>/binary>>/binary>>), begin (V61 = case ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V12)), 0)) of 1 -> <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V58 = fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V56, V57)) end end end end), fun (V59) -> fun (V60) -> ((((V58('erased'))('erased'))(V59))(V60)) end end end(fun (V53) -> <<<<"farg-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V53))/binary>> end))(('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_$a'({'Builtin.MkPair', {'Prelude.Num.MkIntegral', {'Prelude.Num.MkNum', fun (V18) -> fun (V19) -> (V18 + V19) end end, fun (V20) -> fun (V21) -> (V20 * V21) end end, fun (V22) -> V22 end}, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V25, V26)) end end}, {'Builtin.MkPair', {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V29, V30)) end end}, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V43, V44)) end end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V45) -> fun (V46) -> (V45 + V46) end end, fun (V47) -> fun (V48) -> (V47 * V48) end end, fun (V49) -> V49 end}, fun (V50) -> (0 - V50) end, fun (V51) -> fun (V52) -> (V51 - V52) end end}}}, 0, (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V12)) - 1)))))))/binary>>; 0 -> <<""/utf8>> end), begin (V62 = <<<<"\x{a}(c-define "/utf8>>/binary, <<<<"("/utf8>>/binary, <<V10/binary, <<V61/binary, <<<<")"/utf8>>/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V12))/binary, <<<<")"/utf8>>/binary, <<<<" "/utf8>>/binary, <<V13/binary, <<<<" \x{22}"/utf8>>/binary, <<V16/binary, <<<<"\x{22}"/utf8>>/binary, <<<<" \x{22}\x{22}"/utf8>>/binary, <<<<"\x{a} ((unbox "/utf8>>/binary, <<V14/binary, <<<<")"/utf8>>/binary, <<V61/binary, <<")\x{a})\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>), {'Compiler.Scheme.Gambit.MkCWrapperDefs', V15, V17, V62} end end end end end end end.
'nested--11407-6671--in--un--buildCFunWrapDeclaration'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> <<<<"\x{a}(c-declare #<<c-declare-end\x{a}"/utf8>>/binary, <<V9/binary, <<<<" "/utf8>>/binary, <<V8/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, V10))/binary, <<");\x{a}c-declare-end\x{a})\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>.
'nested--11407-6674--in--un--buildArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Core.CompileExpr.CFFun', V11, V12} -> begin (V13 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V9))), begin (V14 = (V3(V13))), begin (V15 = ('nested--11407-6673--in--un--callback'(V0, V1, V2, V3, V4, V5, V6, V7, V13, [V11 | []], V12))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V25 = fun (V20) -> case V19 of {'Builtin.MkPair', V21, V22} -> case V22 of {'Builtin.MkPair', V23, V24} -> {'Prelude.Types.Right', {'Builtin.MkPair', V14, {'Prelude.Types.Just', {'Compiler.Scheme.Gambit.MkCCallbackInfo', V13, V14, V21, V23, V24}}}} end end end), V25 end(V16)) end end end end end end; _ -> fun (V26) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V9)), {'Prelude.Types.Nothing'}}} end end end.
'nested--11407-6668--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> V8; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Prelude.Types.Nothing'} -> ('nested--11407-6668--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, <<<<"("/utf8>>/binary, <<V8/binary, <<" #f)"/utf8>>/binary>>/binary>>, V11)); {'Prelude.Types.Just', V12} -> ('nested--11407-6668--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, <<<<"("/utf8>>/binary, <<V8/binary, <<<<" "/utf8>>/binary, <<V12/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>, V11)) end end(E0, E1)) end.
'un--useCC'(V0, V1, V2, V3, V4, V5) -> ('case--useCC-7556'(V5, V4, V3, V2, V1, V0, ('Idris.Idris2.Compiler.Common':'un--parseCC'([<<"scheme,gambit"/utf8>> | [<<"scheme"/utf8>> | [<<"C"/utf8>> | []]]], V3)))).
'un--showGambitString'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V2 of $\x{22} -> <<<<"\x{5c}\x{22}"/utf8>>/binary, ('un--showGambitString'(V3, V1))/binary>>; _ -> ('un--showGambitChar'(V2, ('un--showGambitString'(V3, V1)))) end end(E0, E1)) end.
'un--showGambitChar'(V0, V1) -> case V0 of $\x{5c} -> <<<<"\x{5c}\x{5c}"/utf8>>/binary, V1/binary>>; _ -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V0, case 32 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end)) of 1 -> <<<<<<"\x{5c}x"/utf8>>/binary, <<('Idris.Idris2.Protocol.Hex':'un--asHex'(case V0 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end))/binary, <<";"/utf8>>/binary>>/binary>>/binary, V1/binary>>; 0 -> <<('unicode':'characters_to_binary'([V0 | []]))/binary, V1/binary>> end end.
'un--schemeCall'(V0, V1, V2, V3) -> begin (V12 = <<<<"("/utf8>>/binary, <<V1/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V4)) end))(V2))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>), fun (V13) -> case V3 of {'Core.CompileExpr.CFIORes', V14} -> {'Prelude.Types.Right', V12}; _ -> {'Prelude.Types.Right', V12} end end end.
'un--schHeader'() -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V0) -> fun (V1) -> <<V0/binary, V1/binary>> end end, <<""/utf8>>}, fun (V2) -> V2 end, [<<";; "/utf8>> | [('Idris.Idris2.Compiler.Generated':'un--generatedString'(<<"Gambit"/utf8>>)) | [<<"\x{a}(declare (block)\x{a}  (inlining-limit 450)\x{a}  (standard-bindings)\x{a}  (extended-bindings)\x{a}  (not safe)\x{a}  (optimize-dead-definitions))\x{a}"/utf8>> | []]]])).
'un--schFgnDef'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.CompileExpr.MkNmForeign', V6, V7, V8} -> begin (V9 = ('un--mkArgs'(0, V7))), begin (V18 = ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('Idris.Idris2.Builtin':'un--fst'(V10)) end))(V9))), begin (V28 = ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V20) -> ('Idris.Idris2.Builtin':'un--fst'(V20)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V19) -> ('Idris.Idris2.Builtin':'un--snd'(V19)) end, V9))))), begin (V30 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V29) -> ('un--mkStruct'(V2, V29)) end, V7, []))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V115 = begin (V35 = ('un--mkStruct'(V2, V8))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V114 = begin (V40 = ('un--useCC'(V0, V1, V3, V6, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V28, V7)), V8))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V113 = case V44 of {'Builtin.MkPair', V45, V46} -> case V46 of {'Builtin.MkPair', V47, V48} -> begin (V54 = begin (V49 = V0), fun (V50) -> begin (V53 = (begin (V51 = V49), fun (V52) -> ('erlang':'get'(V51)) end end(V50))), {'Prelude.Types.Right', V53} end end end), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V112 = begin (V91 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V58 of {'Core.Context.MkDefs', V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90} -> V59 end, V4))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V111 = fun (V96) -> {'Prelude.Types.Right', {'Builtin.MkPair', V45, <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V97) -> fun (V98) -> <<V97/binary, V98/binary>> end end, <<""/utf8>>}, fun (V99) -> V99 end, V34))/binary, <<V39/binary, <<V48/binary, <<<<"(define "/utf8>>/binary, <<('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V95))/binary, <<(begin (V101 = fun (V100) -> V100 end), fun (V102) -> (V101(V102)) end end(<<" (lambda ("/utf8>>))/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V108 = fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V106, V107)) end end end end), fun (V109) -> fun (V110) -> ((((V108('erased'))('erased'))(V109))(V110)) end end end(fun (V103) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V103)) end))(V18))))/binary, <<<<") "/utf8>>/binary, <<V47/binary, <<"))\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>}} end), V111 end(V92)) end end end end), V112 end(V55)) end end end end end end), V113 end(V41)) end end end end), V114 end(V36)) end end end end), V115 end(V31)) end end end end end end end; _ -> fun (V116) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, <<""/utf8>>}} end end.
'un--notWorld'(V0) -> case V0 of {'Core.CompileExpr.CFWorld'} -> 0; _ -> 1 end.
'un--mkStruct'(V0, V1) -> case V1 of {'Core.CompileExpr.CFStruct', V2, V3} -> begin (V13 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> ('un--mkStruct'(V0, V4)) end, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('Idris.Idris2.Builtin':'un--snd'(V5)) end))(V3)), []))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V85 = begin (V23 = begin (V18 = V0), fun (V19) -> begin (V22 = (begin (V20 = V18), fun (V21) -> ('erlang':'get'(V20)) end end(V19))), {'Prelude.Types.Right', V22} end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V84 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V39)) end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V43, V44, V45, V46)) end end end end end end end, fun (V47) -> fun (V48) -> V48 end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V51, V52, V53)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V56, V57)) end end}, V2, V27)) of 1 -> fun (V58) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V59) -> fun (V60) -> <<V59/binary, V60/binary>> end end, <<""/utf8>>}, fun (V61) -> V61 end, V17))} end; 0 -> begin (V67 = begin (V62 = V0), fun (V63) -> begin (V66 = (begin (V64 = V62), fun (V65) -> ('erlang':'put'(V64, [V2 | V27])) end end(V63))), {'Prelude.Types.Right', V66} end end end), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V83 = begin (V73 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V72) -> ('nested--12666-7845--in--un--showFld'(V3, V2, V0, V72)) end, V3, []))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V82 = fun (V78) -> {'Prelude.Types.Right', <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V79) -> fun (V80) -> <<V79/binary, V80/binary>> end end, <<""/utf8>>}, fun (V81) -> V81 end, V17))/binary, <<<<"(define-c-struct "/utf8>>/binary, <<V2/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V77))/binary, <<")\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V82 end(V74)) end end end end), V83 end(V68)) end end end end end), V84 end(V24)) end end end end), V85 end(V14)) end end end end; {'Core.CompileExpr.CFIORes', V86} -> ('un--mkStruct'(V0, V86)); {'Core.CompileExpr.CFFun', V87, V88} -> begin (V108 = begin (V89 = ('un--mkStruct'(V0, V87))), ((begin (V105 = fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V102, V103, V104)) end end end end end), fun (V106) -> fun (V107) -> ((((V105('erased'))('erased'))(V106))(V107)) end end end((begin (V97 = fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> {'Prelude.Types.Right', (V93(V96))} end end end end end), fun (V98) -> fun (V99) -> ((((V97('erased'))('erased'))(V98))(V99)) end end end(fun (V90) -> {'Builtin.MkUnit'} end))))(V89)) end), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V113 = ('un--mkStruct'(V0, V88))), V113 end(V109)) end end end end; _ -> fun (V114) -> {'Prelude.Types.Right', <<""/utf8>>} end end.
'un--mkArgs'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Core.CompileExpr.CFWorld'} -> [{'Builtin.MkPair', {'Core.Name.MN', <<"farg"/utf8>>, V0}, 0} | ('un--mkArgs'(V0, V3))]; _ -> [{'Builtin.MkPair', {'Core.Name.MN', <<"farg"/utf8>>, V0}, 1} | ('un--mkArgs'(begin (V4 = (V0 + 1)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end, V3))] end end(E0, E1)) end.
'un--handleRet'(V0, V1) -> case V0 of <<"void"/utf8>> -> <<V1/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Compiler.Scheme.Common':'un--schConstructor'(fun (V2) -> ('un--gambitString'(V2)) end, {'Core.Name.UN', {'Core.Name.Basic', <<""/utf8>>}}, {'Prelude.Types.Just', 0}, []))/binary>>/binary>>; _ -> V1 end.
'un--getFgnCall'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> ('un--schFgnDef'(V0, V1, V2, V6, V4, V7)) end end.
'un--gambitString'(V0) -> <<('unicode':'characters_to_binary'([$\x{22} | []]))/binary, ('un--showGambitString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), <<"\x{22}"/utf8>>))/binary>>.
'un--gambitPrim'(V0, V1, V2) -> case V1 of {'Compiler.Scheme.Common.GetField'} -> case V2 of [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Core.CompileExpr.NmPrimVal', V5, V6} -> case V6 of {'Core.TT.Str', V7} -> case V4 of [E32 | E33] -> (fun (V8, V9) -> case V9 of [E44 | E45] -> (fun (V10, V11) -> case V11 of [E56 | E57] -> (fun (V12, V13) -> case V13 of [E68 | E69] -> (fun (V14, V15) -> case V14 of {'Core.CompileExpr.NmPrimVal', V16, V17} -> case V17 of {'Core.TT.Str', V18} -> case V15 of [E100 | E101] -> (fun (V19, V20) -> case V20 of [] -> begin (V25 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V21) -> fun (V22) -> fun (V23) -> ('un--gambitPrim'(V21, V22, V23)) end end end, fun (V24) -> ('un--gambitString'(V24)) end, 0, V12))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> {'Prelude.Types.Right', <<<<"("/utf8>>/binary, <<V7/binary, <<<<"-"/utf8>>/binary, <<V18/binary, <<<<" "/utf8>>/binary, <<V29/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V31 end(V26)) end end end end; _ -> case V4 of [E102 | E103] -> (fun (V32, V33) -> case V33 of [E104 | E105] -> (fun (V34, V35) -> case V35 of [E106 | E107] -> (fun (V36, V37) -> case V37 of [E108 | E109] -> (fun (V38, V39) -> case V39 of [E110 | E111] -> (fun (V40, V41) -> case V41 of [] -> fun (V42) -> {'Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V43) -> fun (V44) -> fun (V45) -> ('un--gambitPrim'(V43, V44, V45)) end end end, fun (V46) -> ('un--gambitString'(V46)) end, V0, V1, V2)) end end(E110, E111)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V47) -> fun (V48) -> fun (V49) -> ('un--gambitPrim'(V47, V48, V49)) end end end, fun (V50) -> ('un--gambitString'(V50)) end, V0, V1, V2)) end end(E108, E109)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V51) -> fun (V52) -> fun (V53) -> ('un--gambitPrim'(V51, V52, V53)) end end end, fun (V54) -> ('un--gambitString'(V54)) end, V0, V1, V2)) end end(E106, E107)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V55) -> fun (V56) -> fun (V57) -> ('un--gambitPrim'(V55, V56, V57)) end end end, fun (V58) -> ('un--gambitString'(V58)) end, V0, V1, V2)) end end(E104, E105)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V59) -> fun (V60) -> fun (V61) -> ('un--gambitPrim'(V59, V60, V61)) end end end, fun (V62) -> ('un--gambitString'(V62)) end, V0, V1, V2)) end end(E102, E103)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V63) -> fun (V64) -> fun (V65) -> ('un--gambitPrim'(V63, V64, V65)) end end end, fun (V66) -> ('un--gambitString'(V66)) end, V0, V1, V2)) end end end(E100, E101)); _ -> case V4 of [E90 | E91] -> (fun (V67, V68) -> case V68 of [E92 | E93] -> (fun (V69, V70) -> case V70 of [E94 | E95] -> (fun (V71, V72) -> case V72 of [E96 | E97] -> (fun (V73, V74) -> case V74 of [E98 | E99] -> (fun (V75, V76) -> case V76 of [] -> fun (V77) -> {'Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V78) -> fun (V79) -> fun (V80) -> ('un--gambitPrim'(V78, V79, V80)) end end end, fun (V81) -> ('un--gambitString'(V81)) end, V0, V1, V2)) end end(E98, E99)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V82) -> fun (V83) -> fun (V84) -> ('un--gambitPrim'(V82, V83, V84)) end end end, fun (V85) -> ('un--gambitString'(V85)) end, V0, V1, V2)) end end(E96, E97)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V86) -> fun (V87) -> fun (V88) -> ('un--gambitPrim'(V86, V87, V88)) end end end, fun (V89) -> ('un--gambitString'(V89)) end, V0, V1, V2)) end end(E94, E95)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V90) -> fun (V91) -> fun (V92) -> ('un--gambitPrim'(V90, V91, V92)) end end end, fun (V93) -> ('un--gambitString'(V93)) end, V0, V1, V2)) end end(E92, E93)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V94) -> fun (V95) -> fun (V96) -> ('un--gambitPrim'(V94, V95, V96)) end end end, fun (V97) -> ('un--gambitString'(V97)) end, V0, V1, V2)) end end(E90, E91)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V98) -> fun (V99) -> fun (V100) -> ('un--gambitPrim'(V98, V99, V100)) end end end, fun (V101) -> ('un--gambitString'(V101)) end, V0, V1, V2)) end end; _ -> case V4 of [E80 | E81] -> (fun (V102, V103) -> case V103 of [E82 | E83] -> (fun (V104, V105) -> case V105 of [E84 | E85] -> (fun (V106, V107) -> case V107 of [E86 | E87] -> (fun (V108, V109) -> case V109 of [E88 | E89] -> (fun (V110, V111) -> case V111 of [] -> fun (V112) -> {'Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V113) -> fun (V114) -> fun (V115) -> ('un--gambitPrim'(V113, V114, V115)) end end end, fun (V116) -> ('un--gambitString'(V116)) end, V0, V1, V2)) end end(E88, E89)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V117) -> fun (V118) -> fun (V119) -> ('un--gambitPrim'(V117, V118, V119)) end end end, fun (V120) -> ('un--gambitString'(V120)) end, V0, V1, V2)) end end(E86, E87)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V121) -> fun (V122) -> fun (V123) -> ('un--gambitPrim'(V121, V122, V123)) end end end, fun (V124) -> ('un--gambitString'(V124)) end, V0, V1, V2)) end end(E84, E85)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V125) -> fun (V126) -> fun (V127) -> ('un--gambitPrim'(V125, V126, V127)) end end end, fun (V128) -> ('un--gambitString'(V128)) end, V0, V1, V2)) end end(E82, E83)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V129) -> fun (V130) -> fun (V131) -> ('un--gambitPrim'(V129, V130, V131)) end end end, fun (V132) -> ('un--gambitString'(V132)) end, V0, V1, V2)) end end(E80, E81)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V133) -> fun (V134) -> fun (V135) -> ('un--gambitPrim'(V133, V134, V135)) end end end, fun (V136) -> ('un--gambitString'(V136)) end, V0, V1, V2)) end end; _ -> case V4 of [E70 | E71] -> (fun (V137, V138) -> case V138 of [E72 | E73] -> (fun (V139, V140) -> case V140 of [E74 | E75] -> (fun (V141, V142) -> case V142 of [E76 | E77] -> (fun (V143, V144) -> case V144 of [E78 | E79] -> (fun (V145, V146) -> case V146 of [] -> fun (V147) -> {'Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V148) -> fun (V149) -> fun (V150) -> ('un--gambitPrim'(V148, V149, V150)) end end end, fun (V151) -> ('un--gambitString'(V151)) end, V0, V1, V2)) end end(E78, E79)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V152) -> fun (V153) -> fun (V154) -> ('un--gambitPrim'(V152, V153, V154)) end end end, fun (V155) -> ('un--gambitString'(V155)) end, V0, V1, V2)) end end(E76, E77)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V156) -> fun (V157) -> fun (V158) -> ('un--gambitPrim'(V156, V157, V158)) end end end, fun (V159) -> ('un--gambitString'(V159)) end, V0, V1, V2)) end end(E74, E75)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V160) -> fun (V161) -> fun (V162) -> ('un--gambitPrim'(V160, V161, V162)) end end end, fun (V163) -> ('un--gambitString'(V163)) end, V0, V1, V2)) end end(E72, E73)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V164) -> fun (V165) -> fun (V166) -> ('un--gambitPrim'(V164, V165, V166)) end end end, fun (V167) -> ('un--gambitString'(V167)) end, V0, V1, V2)) end end(E70, E71)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V168) -> fun (V169) -> fun (V170) -> ('un--gambitPrim'(V168, V169, V170)) end end end, fun (V171) -> ('un--gambitString'(V171)) end, V0, V1, V2)) end end end(E68, E69)); _ -> case V4 of [E58 | E59] -> (fun (V172, V173) -> case V173 of [E60 | E61] -> (fun (V174, V175) -> case V175 of [E62 | E63] -> (fun (V176, V177) -> case V177 of [E64 | E65] -> (fun (V178, V179) -> case V179 of [E66 | E67] -> (fun (V180, V181) -> case V181 of [] -> fun (V182) -> {'Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V183) -> fun (V184) -> fun (V185) -> ('un--gambitPrim'(V183, V184, V185)) end end end, fun (V186) -> ('un--gambitString'(V186)) end, V0, V1, V2)) end end(E66, E67)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V187) -> fun (V188) -> fun (V189) -> ('un--gambitPrim'(V187, V188, V189)) end end end, fun (V190) -> ('un--gambitString'(V190)) end, V0, V1, V2)) end end(E64, E65)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V191) -> fun (V192) -> fun (V193) -> ('un--gambitPrim'(V191, V192, V193)) end end end, fun (V194) -> ('un--gambitString'(V194)) end, V0, V1, V2)) end end(E62, E63)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V195) -> fun (V196) -> fun (V197) -> ('un--gambitPrim'(V195, V196, V197)) end end end, fun (V198) -> ('un--gambitString'(V198)) end, V0, V1, V2)) end end(E60, E61)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V199) -> fun (V200) -> fun (V201) -> ('un--gambitPrim'(V199, V200, V201)) end end end, fun (V202) -> ('un--gambitString'(V202)) end, V0, V1, V2)) end end(E58, E59)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V203) -> fun (V204) -> fun (V205) -> ('un--gambitPrim'(V203, V204, V205)) end end end, fun (V206) -> ('un--gambitString'(V206)) end, V0, V1, V2)) end end end(E56, E57)); _ -> case V4 of [E46 | E47] -> (fun (V207, V208) -> case V208 of [E48 | E49] -> (fun (V209, V210) -> case V210 of [E50 | E51] -> (fun (V211, V212) -> case V212 of [E52 | E53] -> (fun (V213, V214) -> case V214 of [E54 | E55] -> (fun (V215, V216) -> case V216 of [] -> fun (V217) -> {'Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V218) -> fun (V219) -> fun (V220) -> ('un--gambitPrim'(V218, V219, V220)) end end end, fun (V221) -> ('un--gambitString'(V221)) end, V0, V1, V2)) end end(E54, E55)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V222) -> fun (V223) -> fun (V224) -> ('un--gambitPrim'(V222, V223, V224)) end end end, fun (V225) -> ('un--gambitString'(V225)) end, V0, V1, V2)) end end(E52, E53)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V226) -> fun (V227) -> fun (V228) -> ('un--gambitPrim'(V226, V227, V228)) end end end, fun (V229) -> ('un--gambitString'(V229)) end, V0, V1, V2)) end end(E50, E51)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V230) -> fun (V231) -> fun (V232) -> ('un--gambitPrim'(V230, V231, V232)) end end end, fun (V233) -> ('un--gambitString'(V233)) end, V0, V1, V2)) end end(E48, E49)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V234) -> fun (V235) -> fun (V236) -> ('un--gambitPrim'(V234, V235, V236)) end end end, fun (V237) -> ('un--gambitString'(V237)) end, V0, V1, V2)) end end(E46, E47)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V238) -> fun (V239) -> fun (V240) -> ('un--gambitPrim'(V238, V239, V240)) end end end, fun (V241) -> ('un--gambitString'(V241)) end, V0, V1, V2)) end end end(E44, E45)); _ -> case V4 of [E34 | E35] -> (fun (V242, V243) -> case V243 of [E36 | E37] -> (fun (V244, V245) -> case V245 of [E38 | E39] -> (fun (V246, V247) -> case V247 of [E40 | E41] -> (fun (V248, V249) -> case V249 of [E42 | E43] -> (fun (V250, V251) -> case V251 of [] -> fun (V252) -> {'Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V253) -> fun (V254) -> fun (V255) -> ('un--gambitPrim'(V253, V254, V255)) end end end, fun (V256) -> ('un--gambitString'(V256)) end, V0, V1, V2)) end end(E42, E43)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V257) -> fun (V258) -> fun (V259) -> ('un--gambitPrim'(V257, V258, V259)) end end end, fun (V260) -> ('un--gambitString'(V260)) end, V0, V1, V2)) end end(E40, E41)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V261) -> fun (V262) -> fun (V263) -> ('un--gambitPrim'(V261, V262, V263)) end end end, fun (V264) -> ('un--gambitString'(V264)) end, V0, V1, V2)) end end(E38, E39)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V265) -> fun (V266) -> fun (V267) -> ('un--gambitPrim'(V265, V266, V267)) end end end, fun (V268) -> ('un--gambitString'(V268)) end, V0, V1, V2)) end end(E36, E37)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V269) -> fun (V270) -> fun (V271) -> ('un--gambitPrim'(V269, V270, V271)) end end end, fun (V272) -> ('un--gambitString'(V272)) end, V0, V1, V2)) end end(E34, E35)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V273) -> fun (V274) -> fun (V275) -> ('un--gambitPrim'(V273, V274, V275)) end end end, fun (V276) -> ('un--gambitString'(V276)) end, V0, V1, V2)) end end end(E32, E33)); _ -> case V4 of [E22 | E23] -> (fun (V277, V278) -> case V278 of [E24 | E25] -> (fun (V279, V280) -> case V280 of [E26 | E27] -> (fun (V281, V282) -> case V282 of [E28 | E29] -> (fun (V283, V284) -> case V284 of [E30 | E31] -> (fun (V285, V286) -> case V286 of [] -> fun (V287) -> {'Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V288) -> fun (V289) -> fun (V290) -> ('un--gambitPrim'(V288, V289, V290)) end end end, fun (V291) -> ('un--gambitString'(V291)) end, V0, V1, V2)) end end(E30, E31)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V292) -> fun (V293) -> fun (V294) -> ('un--gambitPrim'(V292, V293, V294)) end end end, fun (V295) -> ('un--gambitString'(V295)) end, V0, V1, V2)) end end(E28, E29)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V296) -> fun (V297) -> fun (V298) -> ('un--gambitPrim'(V296, V297, V298)) end end end, fun (V299) -> ('un--gambitString'(V299)) end, V0, V1, V2)) end end(E26, E27)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V300) -> fun (V301) -> fun (V302) -> ('un--gambitPrim'(V300, V301, V302)) end end end, fun (V303) -> ('un--gambitString'(V303)) end, V0, V1, V2)) end end(E24, E25)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V304) -> fun (V305) -> fun (V306) -> ('un--gambitPrim'(V304, V305, V306)) end end end, fun (V307) -> ('un--gambitString'(V307)) end, V0, V1, V2)) end end(E22, E23)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V308) -> fun (V309) -> fun (V310) -> ('un--gambitPrim'(V308, V309, V310)) end end end, fun (V311) -> ('un--gambitString'(V311)) end, V0, V1, V2)) end end; _ -> case V4 of [E12 | E13] -> (fun (V312, V313) -> case V313 of [E14 | E15] -> (fun (V314, V315) -> case V315 of [E16 | E17] -> (fun (V316, V317) -> case V317 of [E18 | E19] -> (fun (V318, V319) -> case V319 of [E20 | E21] -> (fun (V320, V321) -> case V321 of [] -> fun (V322) -> {'Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V323) -> fun (V324) -> fun (V325) -> ('un--gambitPrim'(V323, V324, V325)) end end end, fun (V326) -> ('un--gambitString'(V326)) end, V0, V1, V2)) end end(E20, E21)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V327) -> fun (V328) -> fun (V329) -> ('un--gambitPrim'(V327, V328, V329)) end end end, fun (V330) -> ('un--gambitString'(V330)) end, V0, V1, V2)) end end(E18, E19)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V331) -> fun (V332) -> fun (V333) -> ('un--gambitPrim'(V331, V332, V333)) end end end, fun (V334) -> ('un--gambitString'(V334)) end, V0, V1, V2)) end end(E16, E17)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V335) -> fun (V336) -> fun (V337) -> ('un--gambitPrim'(V335, V336, V337)) end end end, fun (V338) -> ('un--gambitString'(V338)) end, V0, V1, V2)) end end(E14, E15)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V339) -> fun (V340) -> fun (V341) -> ('un--gambitPrim'(V339, V340, V341)) end end end, fun (V342) -> ('un--gambitString'(V342)) end, V0, V1, V2)) end end(E12, E13)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V343) -> fun (V344) -> fun (V345) -> ('un--gambitPrim'(V343, V344, V345)) end end end, fun (V346) -> ('un--gambitString'(V346)) end, V0, V1, V2)) end end; _ -> case V4 of [E2 | E3] -> (fun (V347, V348) -> case V348 of [E4 | E5] -> (fun (V349, V350) -> case V350 of [E6 | E7] -> (fun (V351, V352) -> case V352 of [E8 | E9] -> (fun (V353, V354) -> case V354 of [E10 | E11] -> (fun (V355, V356) -> case V356 of [] -> fun (V357) -> {'Prelude.Types.Right', <<"(error \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V358) -> fun (V359) -> fun (V360) -> ('un--gambitPrim'(V358, V359, V360)) end end end, fun (V361) -> ('un--gambitString'(V361)) end, V0, V1, V2)) end end(E10, E11)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V362) -> fun (V363) -> fun (V364) -> ('un--gambitPrim'(V362, V363, V364)) end end end, fun (V365) -> ('un--gambitString'(V365)) end, V0, V1, V2)) end end(E8, E9)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V366) -> fun (V367) -> fun (V368) -> ('un--gambitPrim'(V366, V367, V368)) end end end, fun (V369) -> ('un--gambitString'(V369)) end, V0, V1, V2)) end end(E6, E7)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V370) -> fun (V371) -> fun (V372) -> ('un--gambitPrim'(V370, V371, V372)) end end end, fun (V373) -> ('un--gambitString'(V373)) end, V0, V1, V2)) end end(E4, E5)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V374) -> fun (V375) -> fun (V376) -> ('un--gambitPrim'(V374, V375, V376)) end end end, fun (V377) -> ('un--gambitString'(V377)) end, V0, V1, V2)) end end(E2, E3)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V378) -> fun (V379) -> fun (V380) -> ('un--gambitPrim'(V378, V379, V380)) end end end, fun (V381) -> ('un--gambitString'(V381)) end, V0, V1, V2)) end end end(E0, E1)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V382) -> fun (V383) -> fun (V384) -> ('un--gambitPrim'(V382, V383, V384)) end end end, fun (V385) -> ('un--gambitString'(V385)) end, V0, V1, V2)) end; {'Compiler.Scheme.Common.SetField'} -> case V2 of [E112 | E113] -> (fun (V386, V387) -> case V386 of {'Core.CompileExpr.NmPrimVal', V388, V389} -> case V389 of {'Core.TT.Str', V390} -> case V387 of [E156 | E157] -> (fun (V391, V392) -> case V392 of [E172 | E173] -> (fun (V393, V394) -> case V394 of [E188 | E189] -> (fun (V395, V396) -> case V396 of [E204 | E205] -> (fun (V397, V398) -> case V397 of {'Core.CompileExpr.NmPrimVal', V399, V400} -> case V400 of {'Core.TT.Str', V401} -> case V398 of [E248 | E249] -> (fun (V402, V403) -> case V403 of [E264 | E265] -> (fun (V404, V405) -> case V405 of [E280 | E281] -> (fun (V406, V407) -> case V407 of [] -> begin (V412 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V408) -> fun (V409) -> fun (V410) -> ('un--gambitPrim'(V408, V409, V410)) end end end, fun (V411) -> ('un--gambitString'(V411)) end, 0, V395))), fun (V413) -> begin (V414 = (V412(V413))), case V414 of {'Prelude.Types.Left', V415} -> {'Prelude.Types.Left', V415}; {'Prelude.Types.Right', V416} -> (begin (V428 = begin (V421 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V417) -> fun (V418) -> fun (V419) -> ('un--gambitPrim'(V417, V418, V419)) end end end, fun (V420) -> ('un--gambitString'(V420)) end, 0, V404))), fun (V422) -> begin (V423 = (V421(V422))), case V423 of {'Prelude.Types.Left', V424} -> {'Prelude.Types.Left', V424}; {'Prelude.Types.Right', V425} -> (begin (V427 = fun (V426) -> {'Prelude.Types.Right', <<<<"("/utf8>>/binary, <<V390/binary, <<<<"-"/utf8>>/binary, <<V401/binary, <<<<"-set! "/utf8>>/binary, <<V416/binary, <<<<" "/utf8>>/binary, <<V425/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V427 end(V422)) end end end end), V428 end(V413)) end end end end; _ -> case V387 of [E282 | E283] -> (fun (V429, V430) -> case V430 of [E284 | E285] -> (fun (V431, V432) -> case V432 of [E286 | E287] -> (fun (V433, V434) -> case V434 of [E288 | E289] -> (fun (V435, V436) -> case V436 of [E290 | E291] -> (fun (V437, V438) -> case V438 of [E292 | E293] -> (fun (V439, V440) -> case V440 of [E294 | E295] -> (fun (V441, V442) -> case V442 of [] -> fun (V443) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V444) -> fun (V445) -> fun (V446) -> ('un--gambitPrim'(V444, V445, V446)) end end end, fun (V447) -> ('un--gambitString'(V447)) end, V0, V1, V2)) end end(E294, E295)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V448) -> fun (V449) -> fun (V450) -> ('un--gambitPrim'(V448, V449, V450)) end end end, fun (V451) -> ('un--gambitString'(V451)) end, V0, V1, V2)) end end(E292, E293)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V452) -> fun (V453) -> fun (V454) -> ('un--gambitPrim'(V452, V453, V454)) end end end, fun (V455) -> ('un--gambitString'(V455)) end, V0, V1, V2)) end end(E290, E291)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V456) -> fun (V457) -> fun (V458) -> ('un--gambitPrim'(V456, V457, V458)) end end end, fun (V459) -> ('un--gambitString'(V459)) end, V0, V1, V2)) end end(E288, E289)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V460) -> fun (V461) -> fun (V462) -> ('un--gambitPrim'(V460, V461, V462)) end end end, fun (V463) -> ('un--gambitString'(V463)) end, V0, V1, V2)) end end(E286, E287)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V464) -> fun (V465) -> fun (V466) -> ('un--gambitPrim'(V464, V465, V466)) end end end, fun (V467) -> ('un--gambitString'(V467)) end, V0, V1, V2)) end end(E284, E285)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V468) -> fun (V469) -> fun (V470) -> ('un--gambitPrim'(V468, V469, V470)) end end end, fun (V471) -> ('un--gambitString'(V471)) end, V0, V1, V2)) end end(E282, E283)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V472) -> fun (V473) -> fun (V474) -> ('un--gambitPrim'(V472, V473, V474)) end end end, fun (V475) -> ('un--gambitString'(V475)) end, V0, V1, V2)) end end end(E280, E281)); _ -> case V387 of [E266 | E267] -> (fun (V476, V477) -> case V477 of [E268 | E269] -> (fun (V478, V479) -> case V479 of [E270 | E271] -> (fun (V480, V481) -> case V481 of [E272 | E273] -> (fun (V482, V483) -> case V483 of [E274 | E275] -> (fun (V484, V485) -> case V485 of [E276 | E277] -> (fun (V486, V487) -> case V487 of [E278 | E279] -> (fun (V488, V489) -> case V489 of [] -> fun (V490) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V491) -> fun (V492) -> fun (V493) -> ('un--gambitPrim'(V491, V492, V493)) end end end, fun (V494) -> ('un--gambitString'(V494)) end, V0, V1, V2)) end end(E278, E279)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V495) -> fun (V496) -> fun (V497) -> ('un--gambitPrim'(V495, V496, V497)) end end end, fun (V498) -> ('un--gambitString'(V498)) end, V0, V1, V2)) end end(E276, E277)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V499) -> fun (V500) -> fun (V501) -> ('un--gambitPrim'(V499, V500, V501)) end end end, fun (V502) -> ('un--gambitString'(V502)) end, V0, V1, V2)) end end(E274, E275)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V503) -> fun (V504) -> fun (V505) -> ('un--gambitPrim'(V503, V504, V505)) end end end, fun (V506) -> ('un--gambitString'(V506)) end, V0, V1, V2)) end end(E272, E273)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V507) -> fun (V508) -> fun (V509) -> ('un--gambitPrim'(V507, V508, V509)) end end end, fun (V510) -> ('un--gambitString'(V510)) end, V0, V1, V2)) end end(E270, E271)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V511) -> fun (V512) -> fun (V513) -> ('un--gambitPrim'(V511, V512, V513)) end end end, fun (V514) -> ('un--gambitString'(V514)) end, V0, V1, V2)) end end(E268, E269)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V515) -> fun (V516) -> fun (V517) -> ('un--gambitPrim'(V515, V516, V517)) end end end, fun (V518) -> ('un--gambitString'(V518)) end, V0, V1, V2)) end end(E266, E267)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V519) -> fun (V520) -> fun (V521) -> ('un--gambitPrim'(V519, V520, V521)) end end end, fun (V522) -> ('un--gambitString'(V522)) end, V0, V1, V2)) end end end(E264, E265)); _ -> case V387 of [E250 | E251] -> (fun (V523, V524) -> case V524 of [E252 | E253] -> (fun (V525, V526) -> case V526 of [E254 | E255] -> (fun (V527, V528) -> case V528 of [E256 | E257] -> (fun (V529, V530) -> case V530 of [E258 | E259] -> (fun (V531, V532) -> case V532 of [E260 | E261] -> (fun (V533, V534) -> case V534 of [E262 | E263] -> (fun (V535, V536) -> case V536 of [] -> fun (V537) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V538) -> fun (V539) -> fun (V540) -> ('un--gambitPrim'(V538, V539, V540)) end end end, fun (V541) -> ('un--gambitString'(V541)) end, V0, V1, V2)) end end(E262, E263)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V542) -> fun (V543) -> fun (V544) -> ('un--gambitPrim'(V542, V543, V544)) end end end, fun (V545) -> ('un--gambitString'(V545)) end, V0, V1, V2)) end end(E260, E261)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V546) -> fun (V547) -> fun (V548) -> ('un--gambitPrim'(V546, V547, V548)) end end end, fun (V549) -> ('un--gambitString'(V549)) end, V0, V1, V2)) end end(E258, E259)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V550) -> fun (V551) -> fun (V552) -> ('un--gambitPrim'(V550, V551, V552)) end end end, fun (V553) -> ('un--gambitString'(V553)) end, V0, V1, V2)) end end(E256, E257)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V554) -> fun (V555) -> fun (V556) -> ('un--gambitPrim'(V554, V555, V556)) end end end, fun (V557) -> ('un--gambitString'(V557)) end, V0, V1, V2)) end end(E254, E255)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V558) -> fun (V559) -> fun (V560) -> ('un--gambitPrim'(V558, V559, V560)) end end end, fun (V561) -> ('un--gambitString'(V561)) end, V0, V1, V2)) end end(E252, E253)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V562) -> fun (V563) -> fun (V564) -> ('un--gambitPrim'(V562, V563, V564)) end end end, fun (V565) -> ('un--gambitString'(V565)) end, V0, V1, V2)) end end(E250, E251)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V566) -> fun (V567) -> fun (V568) -> ('un--gambitPrim'(V566, V567, V568)) end end end, fun (V569) -> ('un--gambitString'(V569)) end, V0, V1, V2)) end end end(E248, E249)); _ -> case V387 of [E234 | E235] -> (fun (V570, V571) -> case V571 of [E236 | E237] -> (fun (V572, V573) -> case V573 of [E238 | E239] -> (fun (V574, V575) -> case V575 of [E240 | E241] -> (fun (V576, V577) -> case V577 of [E242 | E243] -> (fun (V578, V579) -> case V579 of [E244 | E245] -> (fun (V580, V581) -> case V581 of [E246 | E247] -> (fun (V582, V583) -> case V583 of [] -> fun (V584) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V585) -> fun (V586) -> fun (V587) -> ('un--gambitPrim'(V585, V586, V587)) end end end, fun (V588) -> ('un--gambitString'(V588)) end, V0, V1, V2)) end end(E246, E247)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V589) -> fun (V590) -> fun (V591) -> ('un--gambitPrim'(V589, V590, V591)) end end end, fun (V592) -> ('un--gambitString'(V592)) end, V0, V1, V2)) end end(E244, E245)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V593) -> fun (V594) -> fun (V595) -> ('un--gambitPrim'(V593, V594, V595)) end end end, fun (V596) -> ('un--gambitString'(V596)) end, V0, V1, V2)) end end(E242, E243)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V597) -> fun (V598) -> fun (V599) -> ('un--gambitPrim'(V597, V598, V599)) end end end, fun (V600) -> ('un--gambitString'(V600)) end, V0, V1, V2)) end end(E240, E241)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V601) -> fun (V602) -> fun (V603) -> ('un--gambitPrim'(V601, V602, V603)) end end end, fun (V604) -> ('un--gambitString'(V604)) end, V0, V1, V2)) end end(E238, E239)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V605) -> fun (V606) -> fun (V607) -> ('un--gambitPrim'(V605, V606, V607)) end end end, fun (V608) -> ('un--gambitString'(V608)) end, V0, V1, V2)) end end(E236, E237)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V609) -> fun (V610) -> fun (V611) -> ('un--gambitPrim'(V609, V610, V611)) end end end, fun (V612) -> ('un--gambitString'(V612)) end, V0, V1, V2)) end end(E234, E235)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V613) -> fun (V614) -> fun (V615) -> ('un--gambitPrim'(V613, V614, V615)) end end end, fun (V616) -> ('un--gambitString'(V616)) end, V0, V1, V2)) end end; _ -> case V387 of [E220 | E221] -> (fun (V617, V618) -> case V618 of [E222 | E223] -> (fun (V619, V620) -> case V620 of [E224 | E225] -> (fun (V621, V622) -> case V622 of [E226 | E227] -> (fun (V623, V624) -> case V624 of [E228 | E229] -> (fun (V625, V626) -> case V626 of [E230 | E231] -> (fun (V627, V628) -> case V628 of [E232 | E233] -> (fun (V629, V630) -> case V630 of [] -> fun (V631) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V632) -> fun (V633) -> fun (V634) -> ('un--gambitPrim'(V632, V633, V634)) end end end, fun (V635) -> ('un--gambitString'(V635)) end, V0, V1, V2)) end end(E232, E233)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V636) -> fun (V637) -> fun (V638) -> ('un--gambitPrim'(V636, V637, V638)) end end end, fun (V639) -> ('un--gambitString'(V639)) end, V0, V1, V2)) end end(E230, E231)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V640) -> fun (V641) -> fun (V642) -> ('un--gambitPrim'(V640, V641, V642)) end end end, fun (V643) -> ('un--gambitString'(V643)) end, V0, V1, V2)) end end(E228, E229)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V644) -> fun (V645) -> fun (V646) -> ('un--gambitPrim'(V644, V645, V646)) end end end, fun (V647) -> ('un--gambitString'(V647)) end, V0, V1, V2)) end end(E226, E227)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V648) -> fun (V649) -> fun (V650) -> ('un--gambitPrim'(V648, V649, V650)) end end end, fun (V651) -> ('un--gambitString'(V651)) end, V0, V1, V2)) end end(E224, E225)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V652) -> fun (V653) -> fun (V654) -> ('un--gambitPrim'(V652, V653, V654)) end end end, fun (V655) -> ('un--gambitString'(V655)) end, V0, V1, V2)) end end(E222, E223)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V656) -> fun (V657) -> fun (V658) -> ('un--gambitPrim'(V656, V657, V658)) end end end, fun (V659) -> ('un--gambitString'(V659)) end, V0, V1, V2)) end end(E220, E221)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V660) -> fun (V661) -> fun (V662) -> ('un--gambitPrim'(V660, V661, V662)) end end end, fun (V663) -> ('un--gambitString'(V663)) end, V0, V1, V2)) end end; _ -> case V387 of [E206 | E207] -> (fun (V664, V665) -> case V665 of [E208 | E209] -> (fun (V666, V667) -> case V667 of [E210 | E211] -> (fun (V668, V669) -> case V669 of [E212 | E213] -> (fun (V670, V671) -> case V671 of [E214 | E215] -> (fun (V672, V673) -> case V673 of [E216 | E217] -> (fun (V674, V675) -> case V675 of [E218 | E219] -> (fun (V676, V677) -> case V677 of [] -> fun (V678) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V679) -> fun (V680) -> fun (V681) -> ('un--gambitPrim'(V679, V680, V681)) end end end, fun (V682) -> ('un--gambitString'(V682)) end, V0, V1, V2)) end end(E218, E219)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V683) -> fun (V684) -> fun (V685) -> ('un--gambitPrim'(V683, V684, V685)) end end end, fun (V686) -> ('un--gambitString'(V686)) end, V0, V1, V2)) end end(E216, E217)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V687) -> fun (V688) -> fun (V689) -> ('un--gambitPrim'(V687, V688, V689)) end end end, fun (V690) -> ('un--gambitString'(V690)) end, V0, V1, V2)) end end(E214, E215)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V691) -> fun (V692) -> fun (V693) -> ('un--gambitPrim'(V691, V692, V693)) end end end, fun (V694) -> ('un--gambitString'(V694)) end, V0, V1, V2)) end end(E212, E213)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V695) -> fun (V696) -> fun (V697) -> ('un--gambitPrim'(V695, V696, V697)) end end end, fun (V698) -> ('un--gambitString'(V698)) end, V0, V1, V2)) end end(E210, E211)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V699) -> fun (V700) -> fun (V701) -> ('un--gambitPrim'(V699, V700, V701)) end end end, fun (V702) -> ('un--gambitString'(V702)) end, V0, V1, V2)) end end(E208, E209)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V703) -> fun (V704) -> fun (V705) -> ('un--gambitPrim'(V703, V704, V705)) end end end, fun (V706) -> ('un--gambitString'(V706)) end, V0, V1, V2)) end end(E206, E207)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V707) -> fun (V708) -> fun (V709) -> ('un--gambitPrim'(V707, V708, V709)) end end end, fun (V710) -> ('un--gambitString'(V710)) end, V0, V1, V2)) end end end(E204, E205)); _ -> case V387 of [E190 | E191] -> (fun (V711, V712) -> case V712 of [E192 | E193] -> (fun (V713, V714) -> case V714 of [E194 | E195] -> (fun (V715, V716) -> case V716 of [E196 | E197] -> (fun (V717, V718) -> case V718 of [E198 | E199] -> (fun (V719, V720) -> case V720 of [E200 | E201] -> (fun (V721, V722) -> case V722 of [E202 | E203] -> (fun (V723, V724) -> case V724 of [] -> fun (V725) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V726) -> fun (V727) -> fun (V728) -> ('un--gambitPrim'(V726, V727, V728)) end end end, fun (V729) -> ('un--gambitString'(V729)) end, V0, V1, V2)) end end(E202, E203)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V730) -> fun (V731) -> fun (V732) -> ('un--gambitPrim'(V730, V731, V732)) end end end, fun (V733) -> ('un--gambitString'(V733)) end, V0, V1, V2)) end end(E200, E201)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V734) -> fun (V735) -> fun (V736) -> ('un--gambitPrim'(V734, V735, V736)) end end end, fun (V737) -> ('un--gambitString'(V737)) end, V0, V1, V2)) end end(E198, E199)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V738) -> fun (V739) -> fun (V740) -> ('un--gambitPrim'(V738, V739, V740)) end end end, fun (V741) -> ('un--gambitString'(V741)) end, V0, V1, V2)) end end(E196, E197)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V742) -> fun (V743) -> fun (V744) -> ('un--gambitPrim'(V742, V743, V744)) end end end, fun (V745) -> ('un--gambitString'(V745)) end, V0, V1, V2)) end end(E194, E195)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V746) -> fun (V747) -> fun (V748) -> ('un--gambitPrim'(V746, V747, V748)) end end end, fun (V749) -> ('un--gambitString'(V749)) end, V0, V1, V2)) end end(E192, E193)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V750) -> fun (V751) -> fun (V752) -> ('un--gambitPrim'(V750, V751, V752)) end end end, fun (V753) -> ('un--gambitString'(V753)) end, V0, V1, V2)) end end(E190, E191)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V754) -> fun (V755) -> fun (V756) -> ('un--gambitPrim'(V754, V755, V756)) end end end, fun (V757) -> ('un--gambitString'(V757)) end, V0, V1, V2)) end end end(E188, E189)); _ -> case V387 of [E174 | E175] -> (fun (V758, V759) -> case V759 of [E176 | E177] -> (fun (V760, V761) -> case V761 of [E178 | E179] -> (fun (V762, V763) -> case V763 of [E180 | E181] -> (fun (V764, V765) -> case V765 of [E182 | E183] -> (fun (V766, V767) -> case V767 of [E184 | E185] -> (fun (V768, V769) -> case V769 of [E186 | E187] -> (fun (V770, V771) -> case V771 of [] -> fun (V772) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V773) -> fun (V774) -> fun (V775) -> ('un--gambitPrim'(V773, V774, V775)) end end end, fun (V776) -> ('un--gambitString'(V776)) end, V0, V1, V2)) end end(E186, E187)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V777) -> fun (V778) -> fun (V779) -> ('un--gambitPrim'(V777, V778, V779)) end end end, fun (V780) -> ('un--gambitString'(V780)) end, V0, V1, V2)) end end(E184, E185)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V781) -> fun (V782) -> fun (V783) -> ('un--gambitPrim'(V781, V782, V783)) end end end, fun (V784) -> ('un--gambitString'(V784)) end, V0, V1, V2)) end end(E182, E183)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V785) -> fun (V786) -> fun (V787) -> ('un--gambitPrim'(V785, V786, V787)) end end end, fun (V788) -> ('un--gambitString'(V788)) end, V0, V1, V2)) end end(E180, E181)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V789) -> fun (V790) -> fun (V791) -> ('un--gambitPrim'(V789, V790, V791)) end end end, fun (V792) -> ('un--gambitString'(V792)) end, V0, V1, V2)) end end(E178, E179)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V793) -> fun (V794) -> fun (V795) -> ('un--gambitPrim'(V793, V794, V795)) end end end, fun (V796) -> ('un--gambitString'(V796)) end, V0, V1, V2)) end end(E176, E177)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V797) -> fun (V798) -> fun (V799) -> ('un--gambitPrim'(V797, V798, V799)) end end end, fun (V800) -> ('un--gambitString'(V800)) end, V0, V1, V2)) end end(E174, E175)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V801) -> fun (V802) -> fun (V803) -> ('un--gambitPrim'(V801, V802, V803)) end end end, fun (V804) -> ('un--gambitString'(V804)) end, V0, V1, V2)) end end end(E172, E173)); _ -> case V387 of [E158 | E159] -> (fun (V805, V806) -> case V806 of [E160 | E161] -> (fun (V807, V808) -> case V808 of [E162 | E163] -> (fun (V809, V810) -> case V810 of [E164 | E165] -> (fun (V811, V812) -> case V812 of [E166 | E167] -> (fun (V813, V814) -> case V814 of [E168 | E169] -> (fun (V815, V816) -> case V816 of [E170 | E171] -> (fun (V817, V818) -> case V818 of [] -> fun (V819) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V820) -> fun (V821) -> fun (V822) -> ('un--gambitPrim'(V820, V821, V822)) end end end, fun (V823) -> ('un--gambitString'(V823)) end, V0, V1, V2)) end end(E170, E171)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V824) -> fun (V825) -> fun (V826) -> ('un--gambitPrim'(V824, V825, V826)) end end end, fun (V827) -> ('un--gambitString'(V827)) end, V0, V1, V2)) end end(E168, E169)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V828) -> fun (V829) -> fun (V830) -> ('un--gambitPrim'(V828, V829, V830)) end end end, fun (V831) -> ('un--gambitString'(V831)) end, V0, V1, V2)) end end(E166, E167)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V832) -> fun (V833) -> fun (V834) -> ('un--gambitPrim'(V832, V833, V834)) end end end, fun (V835) -> ('un--gambitString'(V835)) end, V0, V1, V2)) end end(E164, E165)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V836) -> fun (V837) -> fun (V838) -> ('un--gambitPrim'(V836, V837, V838)) end end end, fun (V839) -> ('un--gambitString'(V839)) end, V0, V1, V2)) end end(E162, E163)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V840) -> fun (V841) -> fun (V842) -> ('un--gambitPrim'(V840, V841, V842)) end end end, fun (V843) -> ('un--gambitString'(V843)) end, V0, V1, V2)) end end(E160, E161)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V844) -> fun (V845) -> fun (V846) -> ('un--gambitPrim'(V844, V845, V846)) end end end, fun (V847) -> ('un--gambitString'(V847)) end, V0, V1, V2)) end end(E158, E159)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V848) -> fun (V849) -> fun (V850) -> ('un--gambitPrim'(V848, V849, V850)) end end end, fun (V851) -> ('un--gambitString'(V851)) end, V0, V1, V2)) end end end(E156, E157)); _ -> case V387 of [E142 | E143] -> (fun (V852, V853) -> case V853 of [E144 | E145] -> (fun (V854, V855) -> case V855 of [E146 | E147] -> (fun (V856, V857) -> case V857 of [E148 | E149] -> (fun (V858, V859) -> case V859 of [E150 | E151] -> (fun (V860, V861) -> case V861 of [E152 | E153] -> (fun (V862, V863) -> case V863 of [E154 | E155] -> (fun (V864, V865) -> case V865 of [] -> fun (V866) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V867) -> fun (V868) -> fun (V869) -> ('un--gambitPrim'(V867, V868, V869)) end end end, fun (V870) -> ('un--gambitString'(V870)) end, V0, V1, V2)) end end(E154, E155)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V871) -> fun (V872) -> fun (V873) -> ('un--gambitPrim'(V871, V872, V873)) end end end, fun (V874) -> ('un--gambitString'(V874)) end, V0, V1, V2)) end end(E152, E153)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V875) -> fun (V876) -> fun (V877) -> ('un--gambitPrim'(V875, V876, V877)) end end end, fun (V878) -> ('un--gambitString'(V878)) end, V0, V1, V2)) end end(E150, E151)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V879) -> fun (V880) -> fun (V881) -> ('un--gambitPrim'(V879, V880, V881)) end end end, fun (V882) -> ('un--gambitString'(V882)) end, V0, V1, V2)) end end(E148, E149)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V883) -> fun (V884) -> fun (V885) -> ('un--gambitPrim'(V883, V884, V885)) end end end, fun (V886) -> ('un--gambitString'(V886)) end, V0, V1, V2)) end end(E146, E147)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V887) -> fun (V888) -> fun (V889) -> ('un--gambitPrim'(V887, V888, V889)) end end end, fun (V890) -> ('un--gambitString'(V890)) end, V0, V1, V2)) end end(E144, E145)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V891) -> fun (V892) -> fun (V893) -> ('un--gambitPrim'(V891, V892, V893)) end end end, fun (V894) -> ('un--gambitString'(V894)) end, V0, V1, V2)) end end(E142, E143)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V895) -> fun (V896) -> fun (V897) -> ('un--gambitPrim'(V895, V896, V897)) end end end, fun (V898) -> ('un--gambitString'(V898)) end, V0, V1, V2)) end end; _ -> case V387 of [E128 | E129] -> (fun (V899, V900) -> case V900 of [E130 | E131] -> (fun (V901, V902) -> case V902 of [E132 | E133] -> (fun (V903, V904) -> case V904 of [E134 | E135] -> (fun (V905, V906) -> case V906 of [E136 | E137] -> (fun (V907, V908) -> case V908 of [E138 | E139] -> (fun (V909, V910) -> case V910 of [E140 | E141] -> (fun (V911, V912) -> case V912 of [] -> fun (V913) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V914) -> fun (V915) -> fun (V916) -> ('un--gambitPrim'(V914, V915, V916)) end end end, fun (V917) -> ('un--gambitString'(V917)) end, V0, V1, V2)) end end(E140, E141)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V918) -> fun (V919) -> fun (V920) -> ('un--gambitPrim'(V918, V919, V920)) end end end, fun (V921) -> ('un--gambitString'(V921)) end, V0, V1, V2)) end end(E138, E139)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V922) -> fun (V923) -> fun (V924) -> ('un--gambitPrim'(V922, V923, V924)) end end end, fun (V925) -> ('un--gambitString'(V925)) end, V0, V1, V2)) end end(E136, E137)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V926) -> fun (V927) -> fun (V928) -> ('un--gambitPrim'(V926, V927, V928)) end end end, fun (V929) -> ('un--gambitString'(V929)) end, V0, V1, V2)) end end(E134, E135)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V930) -> fun (V931) -> fun (V932) -> ('un--gambitPrim'(V930, V931, V932)) end end end, fun (V933) -> ('un--gambitString'(V933)) end, V0, V1, V2)) end end(E132, E133)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V934) -> fun (V935) -> fun (V936) -> ('un--gambitPrim'(V934, V935, V936)) end end end, fun (V937) -> ('un--gambitString'(V937)) end, V0, V1, V2)) end end(E130, E131)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V938) -> fun (V939) -> fun (V940) -> ('un--gambitPrim'(V938, V939, V940)) end end end, fun (V941) -> ('un--gambitString'(V941)) end, V0, V1, V2)) end end(E128, E129)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V942) -> fun (V943) -> fun (V944) -> ('un--gambitPrim'(V942, V943, V944)) end end end, fun (V945) -> ('un--gambitString'(V945)) end, V0, V1, V2)) end end; _ -> case V387 of [E114 | E115] -> (fun (V946, V947) -> case V947 of [E116 | E117] -> (fun (V948, V949) -> case V949 of [E118 | E119] -> (fun (V950, V951) -> case V951 of [E120 | E121] -> (fun (V952, V953) -> case V953 of [E122 | E123] -> (fun (V954, V955) -> case V955 of [E124 | E125] -> (fun (V956, V957) -> case V957 of [E126 | E127] -> (fun (V958, V959) -> case V959 of [] -> fun (V960) -> {'Prelude.Types.Right', <<"(error \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V961) -> fun (V962) -> fun (V963) -> ('un--gambitPrim'(V961, V962, V963)) end end end, fun (V964) -> ('un--gambitString'(V964)) end, V0, V1, V2)) end end(E126, E127)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V965) -> fun (V966) -> fun (V967) -> ('un--gambitPrim'(V965, V966, V967)) end end end, fun (V968) -> ('un--gambitString'(V968)) end, V0, V1, V2)) end end(E124, E125)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V969) -> fun (V970) -> fun (V971) -> ('un--gambitPrim'(V969, V970, V971)) end end end, fun (V972) -> ('un--gambitString'(V972)) end, V0, V1, V2)) end end(E122, E123)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V973) -> fun (V974) -> fun (V975) -> ('un--gambitPrim'(V973, V974, V975)) end end end, fun (V976) -> ('un--gambitString'(V976)) end, V0, V1, V2)) end end(E120, E121)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V977) -> fun (V978) -> fun (V979) -> ('un--gambitPrim'(V977, V978, V979)) end end end, fun (V980) -> ('un--gambitString'(V980)) end, V0, V1, V2)) end end(E118, E119)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V981) -> fun (V982) -> fun (V983) -> ('un--gambitPrim'(V981, V982, V983)) end end end, fun (V984) -> ('un--gambitString'(V984)) end, V0, V1, V2)) end end(E116, E117)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V985) -> fun (V986) -> fun (V987) -> ('un--gambitPrim'(V985, V986, V987)) end end end, fun (V988) -> ('un--gambitString'(V988)) end, V0, V1, V2)) end end(E114, E115)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V989) -> fun (V990) -> fun (V991) -> ('un--gambitPrim'(V989, V990, V991)) end end end, fun (V992) -> ('un--gambitString'(V992)) end, V0, V1, V2)) end end end(E112, E113)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V993) -> fun (V994) -> fun (V995) -> ('un--gambitPrim'(V993, V994, V995)) end end end, fun (V996) -> ('un--gambitString'(V996)) end, V0, V1, V2)) end; {'Compiler.Scheme.Common.SysCodegen'} -> case V2 of [] -> fun (V997) -> {'Prelude.Types.Right', <<"\x{22}gambit\x{22}"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V998) -> fun (V999) -> fun (V1000) -> ('un--gambitPrim'(V998, V999, V1000)) end end end, fun (V1001) -> ('un--gambitString'(V1001)) end, V0, V1, V2)) end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1002) -> fun (V1003) -> fun (V1004) -> ('un--gambitPrim'(V1002, V1003, V1004)) end end end, fun (V1005) -> ('un--gambitString'(V1005)) end, V0, V1, V2)) end.
'un--findGSCBackend'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"GAMBIT_GSC_BACKEND"/utf8>>))(V0))), case V28 of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V29} -> [<<"-cc"/utf8>> | [V29 | []]] end end.
'un--findGSC'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"GAMBIT_GSC"/utf8>>))(V0))), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [<<"/usr/bin/env"/utf8>> | [<<"gsc"/utf8>> | []]] end, fun () -> fun (V29) -> ('Idris.Idris2.Data.List':'un--singleton'(V29)) end end, V28)) end.
'un--executeExpr'(V0, V1, V2, V3) -> begin (V4 = ('un--compileExpr'(V0, V1, V2, V2, V3, <<"_tmpgambit"/utf8>>))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V69 = case V8 of {'Prelude.Types.Just', V9} -> begin (V58 = begin (V39 = fun (V10) -> begin (V38 = (('Idris.Idris2.Erlang.System.Escaped':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, [V9 | []]))(V10))), {'Prelude.Types.Right', V38} end end), ((begin (V55 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V52, V53, V54)) end end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end((begin (V47 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> {'Prelude.Types.Right', (V43(V46))} end end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V40) -> {'Builtin.MkUnit'} end))))(V39)) end), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V64 = fun (V63) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end), V64 end(V59)) end end end end; {'Prelude.Types.Nothing'} -> fun (V65) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V67 = fun (V66) -> V66 end), fun (V68) -> (V67(V68)) end end(<<"compileExpr returned Nothing"/utf8>>))}, V65)) end end), V69 end(V5)) end end end end.
'un--compileToSCM'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V0, 0, 0, V1))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V154 = begin (V14 = case V7 of {'Compiler.Common.MkCompileData', V8, V9, V10, V11, V12, V13} -> V10 end), begin (V21 = ('Idris.Idris2.Core.CompileExpr':'un--forget'([], case V7 of {'Compiler.Common.MkCompileData', V15, V16, V17, V18, V19, V20} -> V15 end))), begin (V27 = begin (V22 = V0), fun (V23) -> begin (V26 = (begin (V24 = V22), fun (V25) -> ('erlang':'get'(V24)) end end(V23))), {'Prelude.Types.Right', V26} end end end), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V153 = begin (V32 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Scheme.Gambit.Loaded'}, []))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V152 = begin (V37 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Scheme.Gambit.Structs'}, []))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V151 = begin (V43 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V42) -> ('un--getFgnCall'(V0, V36, V41, V42)) end, V14, []))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V150 = begin (V53 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V48) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--getScheme'(V0, fun (V49) -> fun (V50) -> fun (V51) -> ('un--gambitPrim'(V49, V50, V51)) end end end, fun (V52) -> ('un--gambitString'(V52)) end, V48)) end, V14, []))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V149 = begin (V66 = ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V63 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V61, V62)) end end end end), fun (V64) -> fun (V65) -> ((((V63('erased'))('erased'))(V64))(V65)) end end end(fun (V58) -> ('Idris.Idris2.Builtin':'un--snd'(V58)) end))(V47)), V57))))), begin (V71 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V67) -> fun (V68) -> fun (V69) -> ('un--gambitPrim'(V67, V68, V69)) end end end, fun (V70) -> ('un--gambitString'(V70)) end, 0, V21))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V148 = begin (V76 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"gambit/support.scm"/utf8>>))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V147 = begin (V81 = ('Idris.Idris2.Core.Context':'un--getDirectives'(V0, {'Core.Options.Gambit'}))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V146 = begin (V94 = ('Idris.Idris2.Compiler.Common':'un--getExtraRuntime'(((begin (V91 = fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V89, V90)) end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end(fun (V86) -> ('Idris.Idris2.Builtin':'un--snd'(V86)) end))(V85))))), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V145 = begin (V99 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"gambit/foreign.scm"/utf8>>))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V144 = begin (V104 = ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, [('un--schHeader'()) | [V80 | [V98 | [V103 | [V66 | [V75 | []]]]]]]))), begin (V134 = fun (V105) -> begin (V133 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V108, V109, V110)) end end end end end, fun (V111) -> fun (V112) -> fun (V113) -> V112 end end end, fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> begin (V119 = (V116(V118))), begin (V120 = (V117(V118))), (V119(V120)) end end end end end end end}, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V123(V125))), ((V124(V126))(V125)) end end end end end end, fun (V127) -> fun (V128) -> fun (V129) -> begin (V130 = (V128(V129))), (V130(V129)) end end end end}, fun (V131) -> fun (V132) -> V132 end end}, V2, V104))(V105))), {'Prelude.Types.Right', V133} end end), fun (V135) -> begin (V136 = (V134(V135))), case V136 of {'Prelude.Types.Left', V137} -> {'Prelude.Types.Left', V137}; {'Prelude.Types.Right', V138} -> (begin (V143 = fun (V139) -> case V138 of {'Prelude.Types.Right', V140} -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V141) -> ('Idris.Idris2.Builtin':'un--fst'(V141)) end, V47))}; {'Prelude.Types.Left', V142} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V2, V142}, V139)) end end), V143 end(V135)) end end end end end), V144 end(V100)) end end end end), V145 end(V95)) end end end end), V146 end(V82)) end end end end), V147 end(V77)) end end end end), V148 end(V72)) end end end end end), V149 end(V54)) end end end end), V150 end(V44)) end end end end), V151 end(V38)) end end end end), V152 end(V33)) end end end end), V153 end(V28)) end end end end end end), V154 end(V4)) end end end end.
'un--compileLibrary'(V0, V1, V2, V3, V4) -> begin (V7 = fun (V5) -> begin (V6 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Compiling to library is not supported.\x{a}"/utf8>>, V5))), {'Prelude.Types.Right', V6} end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V13 end(V8)) end end end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V5, <<"scm"/utf8>>))))), begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, V5))), begin (V8 = ('un--compileToSCM'(V0, V4, V6))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V102 = begin (V26 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V13) -> ('Idris.Idris2.Core.Directory':'un--findLibraryFile'(V0, V13)) end, ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V18, <<"a"/utf8>>)) end))(('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V16, V17)) end end}, V12)))), []))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V101 = begin (V33 = fun (V31) -> begin (V32 = ('un--findGSC'(V31))), {'Prelude.Types.Right', V32} end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V100 = begin (V40 = fun (V38) -> begin (V39 = ('un--findGSCBackend'(V38))), {'Prelude.Types.Right', V39} end end), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V99 = begin (V45 = ('Idris.Idris2.Core.Context':'un--getDirectives'(V0, {'Core.Options.Gambit'}))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V98 = begin (V60 = case ('Idris.Idris2.Data.List':'un--find'(fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V50, <<"C"/utf8>>)) end, ((begin (V56 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V54, V55)) end end end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end(fun (V51) -> ('Idris.Idris2.Builtin':'un--snd'(V51)) end))(V49)))) of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V44, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([<<"-exe"/utf8>> | [<<"-cc-options"/utf8>> | [<<"-Wno-implicit-function-declaration"/utf8>> | [<<"-ld-options"/utf8>> | []]]]], V30)))); {'Prelude.Types.Just', V59} -> [<<"-c"/utf8>> | []] end), begin (V61 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V37, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V60, [<<"-o"/utf8>> | [V7 | [V6 | []]]]))))), begin (V91 = fun (V62) -> begin (V90 = (('Idris.Idris2.Erlang.System.Escaped':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V65, V66, V67)) end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> V69 end end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), begin (V77 = (V74(V75))), (V76(V77)) end end end end end end end}, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), ((V81(V83))(V82)) end end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V85(V86))), (V87(V86)) end end end end}, fun (V88) -> fun (V89) -> V89 end end}, V61))(V62))), {'Prelude.Types.Right', V90} end end), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V97 = fun (V96) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V95, 0)) of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Just', V7}}; 0 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V97 end(V92)) end end end end end end), V98 end(V46)) end end end end), V99 end(V41)) end end end end), V100 end(V34)) end end end end), V101 end(V27)) end end end end), V102 end(V9)) end end end end end end.
'un--codegenGambit'() -> {'Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('un--compileExpr'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('un--executeExpr'(V6, V7, V8, V9)) end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('un--compileLibrary'(V10, V11, V12, V13, V14)) end end end end end, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}}.
'un--cftySpec'(V0, V1) -> case V1 of {'Core.CompileExpr.CFUnit'} -> fun (V2) -> {'Prelude.Types.Right', <<"void"/utf8>>} end; {'Core.CompileExpr.CFInt'} -> fun (V3) -> {'Prelude.Types.Right', <<"int"/utf8>>} end; {'Core.CompileExpr.CFInt8'} -> fun (V4) -> {'Prelude.Types.Right', <<"char"/utf8>>} end; {'Core.CompileExpr.CFInt16'} -> fun (V5) -> {'Prelude.Types.Right', <<"short"/utf8>>} end; {'Core.CompileExpr.CFInt32'} -> fun (V6) -> {'Prelude.Types.Right', <<"int"/utf8>>} end; {'Core.CompileExpr.CFInt64'} -> fun (V7) -> {'Prelude.Types.Right', <<"long"/utf8>>} end; {'Core.CompileExpr.CFUnsigned8'} -> fun (V8) -> {'Prelude.Types.Right', <<"unsigned-char"/utf8>>} end; {'Core.CompileExpr.CFUnsigned16'} -> fun (V9) -> {'Prelude.Types.Right', <<"unsigned-short"/utf8>>} end; {'Core.CompileExpr.CFUnsigned32'} -> fun (V10) -> {'Prelude.Types.Right', <<"unsigned-int"/utf8>>} end; {'Core.CompileExpr.CFUnsigned64'} -> fun (V11) -> {'Prelude.Types.Right', <<"unsigned-long"/utf8>>} end; {'Core.CompileExpr.CFString'} -> fun (V12) -> {'Prelude.Types.Right', <<"UTF-8-string"/utf8>>} end; {'Core.CompileExpr.CFDouble'} -> fun (V13) -> {'Prelude.Types.Right', <<"double"/utf8>>} end; {'Core.CompileExpr.CFChar'} -> fun (V14) -> {'Prelude.Types.Right', <<"char"/utf8>>} end; {'Core.CompileExpr.CFPtr'} -> fun (V15) -> {'Prelude.Types.Right', <<"(pointer void)"/utf8>>} end; {'Core.CompileExpr.CFIORes', V16} -> ('un--cftySpec'(V0, V16)); {'Core.CompileExpr.CFStruct', V17, V18} -> fun (V19) -> {'Prelude.Types.Right', <<V17/binary, <<"*/nonnull"/utf8>>/binary>>} end; {'Core.CompileExpr.CFFun', V20, V21} -> ('nested--11067-6395--in--un--funTySpec'(V21, V20, V0, [V20 | []], V21)); _ -> fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V0, <<<<"Can\x{27}t pass argument of type "/utf8>>/binary, <<('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V1))/binary, <<" to foreign function"/utf8>>/binary>>/binary>>}, V22)) end end.
'un--cType'(V0, V1) -> case V1 of {'Core.CompileExpr.CFUnit'} -> fun (V2) -> {'Prelude.Types.Right', <<"void"/utf8>>} end; {'Core.CompileExpr.CFInt'} -> fun (V3) -> {'Prelude.Types.Right', <<"int"/utf8>>} end; {'Core.CompileExpr.CFString'} -> fun (V4) -> {'Prelude.Types.Right', <<"char *"/utf8>>} end; {'Core.CompileExpr.CFDouble'} -> fun (V5) -> {'Prelude.Types.Right', <<"double"/utf8>>} end; {'Core.CompileExpr.CFChar'} -> fun (V6) -> {'Prelude.Types.Right', <<"char"/utf8>>} end; {'Core.CompileExpr.CFPtr'} -> fun (V7) -> {'Prelude.Types.Right', <<"void *"/utf8>>} end; {'Core.CompileExpr.CFIORes', V8} -> ('un--cType'(V0, V8)); {'Core.CompileExpr.CFStruct', V9, V10} -> fun (V11) -> {'Prelude.Types.Right', <<<<"struct "/utf8>>/binary, V9/binary>>} end; {'Core.CompileExpr.CFFun', V12, V13} -> ('nested--10952-6241--in--un--funTySpec'(V13, V12, V0, [V12 | []], V13)); _ -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V0, <<<<"Can\x{27}t pass argument of type "/utf8>>/binary, <<('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V1))/binary, <<" to foreign function"/utf8>>/binary>>/binary>>}, V14)) end end.
'un--cCall'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V8) -> ('un--cftySpec'(V2, ('Idris.Idris2.Builtin':'un--snd'(V8)))) end, V6, []))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V83 = begin (V14 = ('un--cftySpec'(V2, V7))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V82 = begin (V20 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V19) -> ('nested--11407-6674--in--un--buildArg'(V7, V6, V5, V4, V3, V2, V1, V0, V19)) end, V6, []))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V81 = begin (V26 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V25) -> ('un--cType'(V2, ('Idris.Idris2.Builtin':'un--snd'(V25)))) end, V6, []))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V80 = begin (V31 = ('un--cType'(V2, V7))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V79 = begin (V45 = ((begin (V42 = fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V40, V41)) end end end end), fun (V43) -> fun (V44) -> ((((V42('erased'))('erased'))(V43))(V44)) end end end(fun (V37) -> ('nested--11407-6670--in--un--buildCWrapperDefs'(V7, V6, V5, V4, V3, V2, V1, V0, V37)) end))(('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V36) -> ('Idris.Idris2.Builtin':'un--snd'(V36)) end, V24))))), begin (V46 = ('nested--11407-6671--in--un--buildCFunWrapDeclaration'(V7, V6, V5, V4, V3, V2, V1, V0, V3, V35, V30))), begin (V59 = <<V46/binary, <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V47) -> fun (V48) -> <<V47/binary, V48/binary>> end end, <<""/utf8>>}, fun (V49) -> case V49 of {'Compiler.Scheme.Gambit.MkCWrapperDefs', V50, V51, V52} -> V51 end end, V45))/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V53) -> fun (V54) -> <<V53/binary, V54/binary>> end end, <<""/utf8>>}, fun (V55) -> case V55 of {'Compiler.Scheme.Gambit.MkCWrapperDefs', V56, V57, V58} -> V58 end end, V45))/binary>>/binary>>), begin (V66 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V60) -> fun (V61) -> <<V60/binary, V61/binary>> end end, <<""/utf8>>}, fun (V62) -> case V62 of {'Compiler.Scheme.Gambit.MkCWrapperDefs', V63, V64, V65} -> V63 end end, V45))), begin (V75 = <<<<" ((c-lambda ("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V13))/binary, <<<<") "/utf8>>/binary, <<V18/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V3))/binary, <<<<") "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V72 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V70, V71)) end end end end), fun (V73) -> fun (V74) -> ((((V72('erased'))('erased'))(V73))(V74)) end end end(fun (V67) -> ('Idris.Idris2.Builtin':'un--fst'(V67)) end))(V24))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>), begin (V76 = <<V66/binary, <<<<"\x{a}"/utf8>>/binary, V75/binary>>/binary>>), fun (V77) -> {'Prelude.Types.Right', case V7 of {'Core.CompileExpr.CFIORes', V78} -> {'Builtin.MkPair', ('un--handleRet'(V18, V76)), V59}; _ -> {'Builtin.MkPair', V76, V59} end} end end end end end end end), V79 end(V32)) end end end end), V80 end(V27)) end end end end), V81 end(V21)) end end end end), V82 end(V15)) end end end end), V83 end(V10)) end end end end.
