-module('Idris.Idris2.TTImp.Elab').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--doPLetRenames-13493'/8,
  'case--findPLetRenames-13302'/11,
  'nested--10946-13595--in--un--updateType'/5,
  'nested--10946-13596--in--un--normaliseH'/4,
  'nested--13255-15633--in--un--bindImps\x{27}'/21,
  'nested--13255-15634--in--un--bindImps'/21,
  'nested--11200-13896--in--un--addHoles'/19,
  'un--normaliseHoleTypes'/2,
  'un--getRigNeeded'/1,
  'un--findPLetRenames'/2,
  'un--elabTermSub'/16,
  'un--elabTerm'/13,
  'un--doPLetRenames'/4,
  'un--checkTermSub'/16,
  'un--checkTerm'/13,
  'un--addHoleToSave'/2
]).
'case--doPLetRenames-13493'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Prelude.Types.Just', V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Core.TT.Bind', V4, V10, ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V3, ('Idris.Idris2.Algebra.Preorder':'un--lub'({'Algebra.Preorder.dn--un--__mkPreorder', fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V11, V12)) end end, fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V13)) end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V14, V15, V16, V17, V18)) end end end end end}, V9, ('Idris.Idris2.Core.TT':'un--multiplicity'(V3)))))), ('un--doPLetRenames'([V10 | V0], V6, [V10 | V5], ('Idris.Idris2.Core.TT':'un--renameTop'(V10, V2))))} end; {'Prelude.Types.Nothing'} -> {'Core.TT.Bind', V4, V1, V3, ('un--doPLetRenames'([V1 | V0], V6, V5, V2))} end.
'case--findPLetRenames-13302'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Core.Name.MN', V11, V12} -> [{'Builtin.MkPair', V10, {'Builtin.MkPair', V6, V7}} | ('un--findPLetRenames'([V7 | V0], V8))]; _ -> ('un--findPLetRenames'([V7 | V0], V8)) end.
'nested--10946-13595--in--un--updateType'(V0, V1, V2, V3, V4) -> begin (V50 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(('Idris.Idris2.Core.Normalise':'un--tryNormaliseSizeLimit'(V1, [], V2, 10, {'Core.Env.Nil'}, case V4 of {'Core.Context.Context.MkGlobalDef', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> V7 end)), fun (V27) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, [], V2, {'Core.Env.Nil'}, case V4 of {'Core.Context.Context.MkGlobalDef', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} -> V30 end)) end))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V96 = begin (V77 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, {'Core.Name.Resolved', V3}, case V4 of {'Core.Context.Context.MkGlobalDef', V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76} -> {'Core.Context.Context.MkGlobalDef', V55, V56, V54, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76} end))), ((begin (V93 = fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V90, V91, V92)) end end end end end), fun (V94) -> fun (V95) -> ((((V93('erased'))('erased'))(V94))(V95)) end end end((begin (V85 = fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> {'Prelude.Types.Right', (V81(V84))} end end end end end), fun (V86) -> fun (V87) -> ((((V85('erased'))('erased'))(V86))(V87)) end end end(fun (V78) -> {'Builtin.MkUnit'} end))))(V77)) end), V96 end(V51)) end end end end.
'nested--10946-13596--in--un--normaliseH'(V0, V1, V2, V3) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', V3}, case V2 of {'Core.Context.MkDefs', V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} -> V4 end))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V68 = case V40 of {'Prelude.Types.Just', V41} -> case V41 of {'Core.Context.Context.MkGlobalDef', V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63} -> case V59 of {'Core.Context.Context.Hole', V64, V65} -> ('nested--10946-13595--in--un--updateType'(V0, V1, V2, V3, V41)); _ -> fun (V66) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end; {'Prelude.Types.Nothing'} -> fun (V67) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V68 end(V37)) end end end end.
'nested--13255-15633--in--un--bindImps\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V19 of [] -> fun (V21) -> {'Prelude.Types.Right', V20} end; [E0 | E1] -> (fun (V22, V23) -> case V22 of {'Builtin.MkPair', V24, V25} -> begin (V26 = ('nested--13255-15633--in--un--bindImps\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V23, V20))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V36 = fun (V31) -> {'Prelude.Types.Right', {'TTImp.TTImp.IPi', V17, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V32, V33)) end end, 0, fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V34, V35)) end end, 1})), {'Core.TT.Implicit'}, {'Prelude.Types.Just', V24}, {'TTImp.TTImp.Implicit', V17, 1}, V30}} end), V36 end(V27)) end end end end end end(E0, E1)) end.
'nested--13255-15634--in--un--bindImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'TTImp.TTImp.IBindHere', V21, V22, V23} -> begin (V24 = ('nested--13255-15633--in--un--bindImps\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V23))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', {'TTImp.TTImp.IBindHere', V21, V22, V28}} end), V30 end(V25)) end end end end; _ -> ('nested--13255-15633--in--un--bindImps\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)) end.
'nested--11200-13896--in--un--addHoles'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of [] -> V16; [E0 | E1] -> (fun (V19, V20) -> case V19 of {'Builtin.MkPair', V21, V22} -> case ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V21, V17)) of {'Prelude.Types.Nothing'} -> ('nested--11200-13896--in--un--addHoles'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20)); {'Prelude.Types.Just', V23} -> ('nested--11200-13896--in--un--addHoles'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V21, V22, V16)), V17, V20)) end end end(E0, E1)) end.
'un--normaliseHoleTypes'(V0, V1) -> begin (V7 = begin (V2 = V1), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V37 = begin (V24 = ('Idris.Idris2.Libraries.Data.IntMap':'un--keys'(case V11 of {'Core.UnifyState.MkUState', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23} -> V12 end))), begin (V30 = begin (V25 = V0), fun (V26) -> begin (V29 = (begin (V27 = V25), fun (V28) -> ('erlang':'get'(V27)) end end(V26))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V35) -> ('nested--10946-13596--in--un--normaliseH'(V1, V0, V34, V35)) end, V24))), V36 end(V31)) end end end end end), V37 end(V8)) end end end end.
'un--getRigNeeded'(V0) -> case V0 of {'TTImp.Elab.Check.InType'} -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V1) -> fun (V2) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1, V2)) end end, 0, fun (V3) -> fun (V4) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V3, V4)) end end, 1})); {'TTImp.Elab.Check.InLHS', V5} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V6, V7)) end end, 0, fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V8, V9)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V12, V13)) end end}}, V5)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V14, V15)) end end, 0, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V16, V17)) end end, 1})); 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V18, V19)) end end, 0, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V20, V21)) end end, 1})) end; _ -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V22, V23)) end end, 0, fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V24, V25)) end end, 1})) end.
'un--findPLetRenames'(V0, V1) -> case V1 of {'Core.TT.Bind', V2, V3, V4, V5} -> case V4 of {'Core.TT.PLet', V6, V7, V8, V9} -> case V8 of {'Core.TT.Local', V10, V11, V12} -> ('case--findPLetRenames-13302'(V0, V6, V10, V11, V12, V9, V7, V3, V5, V2, ('Idris.Idris2.Core.TT':'un--nameAt'(V0, V12)))); _ -> ('un--findPLetRenames'([V3 | V0], V5)) end; _ -> ('un--findPLetRenames'([V3 | V0], V5)) end; _ -> [] end.
'un--elabTermSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V46 = ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V31, V32, V33, V34)) end end end end end end end, fun (V35) -> fun (V36) -> V36 end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V39, V40, V41)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V44, V45)) end end}, 1, V9))), begin (V77 = ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V49, V50, V51)) end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V54, V55, V56)) end end end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V58)) end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V62, V63, V64, V65)) end end end end end end end, fun (V66) -> fun (V67) -> V67 end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V70, V71, V72)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V73) -> fun (V74) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V73, V74)) end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V75, V76)) end end}, 2, V9))), begin (V108 = ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V80, V81, V82)) end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V85, V86, V87)) end end end end end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V89)) end end, fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V93, V94, V95, V96)) end end end end end end end, fun (V97) -> fun (V98) -> V98 end end, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V101, V102, V103)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V104) -> fun (V105) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V104, V105)) end end, fun (V106) -> fun (V107) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V106, V107)) end end}, 3, V9))), begin (V110 = case V46 of 1 -> fun (V109) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'())} end; 0 -> ('Idris.Idris2.Core.UnifyState':'un--saveHoles'(V4)) end), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V461 = begin (V120 = begin (V115 = V4), fun (V116) -> begin (V119 = (begin (V117 = V115), fun (V118) -> ('erlang':'get'(V117)) end end(V116))), {'Prelude.Types.Right', V119} end end end), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V460 = begin (V137 = case V124 of {'Core.UnifyState.MkUState', V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136} -> V135 end), begin (V155 = begin (V138 = V4), fun (V139) -> begin (V154 = (begin (V140 = V138), fun (V141) -> ('erlang':'put'(V140, case V124 of {'Core.UnifyState.MkUState', V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153} -> {'Core.UnifyState.MkUState', V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, [], V153} end)) end end(V139))), {'Prelude.Types.Right', V154} end end end), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V459 = begin (V160 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V2))), fun (V161) -> begin (V162 = (V160(V161))), case V162 of {'Prelude.Types.Left', V163} -> {'Prelude.Types.Left', V163}; {'Prelude.Types.Right', V164} -> (begin (V458 = begin (V170 = begin (V165 = V2), fun (V166) -> begin (V169 = (begin (V167 = V165), fun (V168) -> ('erlang':'get'(V167)) end end(V166))), {'Prelude.Types.Right', V169} end end end), fun (V171) -> begin (V172 = (V170(V171))), case V172 of {'Prelude.Types.Left', V173} -> {'Prelude.Types.Left', V173}; {'Prelude.Types.Right', V174} -> (begin (V457 = begin (V175 = ('Idris.Idris2.Core.Core':'un--newRef'({'TTImp.Elab.Check.EST'}, ('Idris.Idris2.TTImp.Elab.Check':'un--initEStateSub'(V0, V7, V12, V13))))), fun (V176) -> begin (V177 = (V175(V176))), case V177 of {'Prelude.Types.Left', V178} -> {'Prelude.Types.Left', V178}; {'Prelude.Types.Right', V179} -> (begin (V456 = begin (V180 = ('un--getRigNeeded'(V8))), begin (V181 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V1, V2, V3, V4, V179, V5, V6, V180, ('Idris.Idris2.TTImp.Elab.Check':'un--initElabInfo'(V8)), V10, V11, V14, V15))), fun (V182) -> begin (V183 = (V181(V182))), case V183 of {'Prelude.Types.Left', V184} -> {'Prelude.Types.Left', V184}; {'Prelude.Types.Right', V185} -> (begin (V455 = case V185 of {'Builtin.MkPair', V186, V187} -> begin (V189 = case V8 of {'TTImp.Elab.Check.InLHS', V188} -> ('Idris.Idris2.Core.Unify':'un--inLHS'()); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end), begin (V190 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V2, V4, V189, 0))), fun (V191) -> begin (V192 = (V190(V191))), case V192 of {'Prelude.Types.Left', V193} -> {'Prelude.Types.Left', V193}; {'Prelude.Types.Right', V194} -> (begin (V454 = begin (V198 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V2, <<"elab"/utf8>>, 5, fun () -> (begin (V196 = fun (V195) -> V195 end), fun (V197) -> (V196(V197)) end end(<<"Looking for delayed in "/utf8>>)) end, V186))), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V453 = begin (V208 = begin (V203 = V4), fun (V204) -> begin (V207 = (begin (V205 = V203), fun (V206) -> ('erlang':'get'(V205)) end end(V204))), {'Prelude.Types.Right', V207} end end end), fun (V209) -> begin (V210 = (V208(V209))), case V210 of {'Prelude.Types.Left', V211} -> {'Prelude.Types.Left', V211}; {'Prelude.Types.Right', V212} -> (begin (V452 = begin (V263 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(('Idris.Idris2.TTImp.Elab.Delayed':'un--retryDelayed'(V1, V2, V3, V4, V179, V189, ('Idris.Idris2.Data.List':'un--sortBy'(fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.UnifyState':'dn--un--compare_Ord_DelayReason'(('Idris.Idris2.Builtin':'un--fst'(V213)), ('Idris.Idris2.Builtin':'un--fst'(V214)))) end end, case V212 of {'Core.UnifyState.MkUState', V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226} -> V225 end)))), fun (V227) -> begin (V256 = begin (V233 = begin (V228 = V4), fun (V229) -> begin (V232 = (begin (V230 = V228), fun (V231) -> ('erlang':'get'(V230)) end end(V229))), {'Prelude.Types.Right', V232} end end end), fun (V234) -> begin (V235 = (V233(V234))), case V235 of {'Prelude.Types.Left', V236} -> {'Prelude.Types.Left', V236}; {'Prelude.Types.Right', V237} -> (begin (V255 = begin (V238 = V4), fun (V239) -> begin (V254 = (begin (V240 = V238), fun (V241) -> ('erlang':'put'(V240, case V237 of {'Core.UnifyState.MkUState', V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253} -> {'Core.UnifyState.MkUState', V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V137, V253} end)) end end(V239))), {'Prelude.Types.Right', V254} end end end), V255 end(V234)) end end end end), fun (V257) -> begin (V258 = (V256(V257))), case V258 of {'Prelude.Types.Left', V259} -> {'Prelude.Types.Left', V259}; {'Prelude.Types.Right', V260} -> (begin (V262 = fun (V261) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V227, V261)) end), V262 end(V257)) end end end end end))), fun (V264) -> begin (V265 = (V263(V264))), case V265 of {'Prelude.Types.Left', V266} -> {'Prelude.Types.Left', V266}; {'Prelude.Types.Right', V267} -> (begin (V451 = begin (V296 = begin (V273 = begin (V268 = V4), fun (V269) -> begin (V272 = (begin (V270 = V268), fun (V271) -> ('erlang':'get'(V270)) end end(V269))), {'Prelude.Types.Right', V272} end end end), fun (V274) -> begin (V275 = (V273(V274))), case V275 of {'Prelude.Types.Left', V276} -> {'Prelude.Types.Left', V276}; {'Prelude.Types.Right', V277} -> (begin (V295 = begin (V278 = V4), fun (V279) -> begin (V294 = (begin (V280 = V278), fun (V281) -> ('erlang':'put'(V280, case V277 of {'Core.UnifyState.MkUState', V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293} -> {'Core.UnifyState.MkUState', V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V137, V293} end)) end end(V279))), {'Prelude.Types.Right', V294} end end end), V295 end(V274)) end end end end), fun (V297) -> begin (V298 = (V296(V297))), case V298 of {'Prelude.Types.Left', V299} -> {'Prelude.Types.Left', V299}; {'Prelude.Types.Right', V300} -> (begin (V450 = begin (V301 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V2, V4, V164, V189, 2))), fun (V302) -> begin (V303 = (V301(V302))), case V303 of {'Prelude.Types.Left', V304} -> {'Prelude.Types.Left', V304}; {'Prelude.Types.Right', V305} -> (begin (V449 = begin (V322 = case case V46 of 1 -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.TTImp.Elab.Check':'un--isLHS'(V8)))); 0 -> 1 end of 1 -> begin (V309 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"elab"/utf8>>, 5, fun () -> (begin (V307 = fun (V306) -> V306 end), fun (V308) -> (V307(V308)) end end(<<"Resolving default hints"/utf8>>)) end))), fun (V310) -> begin (V311 = (V309(V310))), case V311 of {'Prelude.Types.Left', V312} -> {'Prelude.Types.Left', V312}; {'Prelude.Types.Right', V313} -> (begin (V320 = begin (V314 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V2, V4, V164, V189, 1))), fun (V315) -> begin (V316 = (V314(V315))), case V316 of {'Prelude.Types.Left', V317} -> {'Prelude.Types.Left', V317}; {'Prelude.Types.Right', V318} -> (begin (V319 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V2, V4, V164, V189, 3))), V319 end(V315)) end end end end), V320 end(V310)) end end end end; 0 -> fun (V321) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V323) -> begin (V324 = (V322(V323))), case V324 of {'Prelude.Types.Left', V325} -> {'Prelude.Types.Left', V325}; {'Prelude.Types.Right', V326} -> (begin (V448 = begin (V327 = ('Idris.Idris2.Core.UnifyState':'un--dumpConstraints'(V4, V2, <<"elab"/utf8>>, 4, 0))), fun (V328) -> begin (V329 = (V327(V328))), case V329 of {'Prelude.Types.Left', V330} -> {'Prelude.Types.Left', V330}; {'Prelude.Types.Right', V331} -> (begin (V447 = begin (V337 = begin (V332 = V2), fun (V333) -> begin (V336 = (begin (V334 = V332), fun (V335) -> ('erlang':'get'(V334)) end end(V333))), {'Prelude.Types.Right', V336} end end end), fun (V338) -> begin (V339 = (V337(V338))), case V339 of {'Prelude.Types.Left', V340} -> {'Prelude.Types.Left', V340}; {'Prelude.Types.Right', V341} -> (begin (V446 = begin (V342 = case V77 of 1 -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V2, V1, V341, V11, V186)); 0 -> ('Idris.Idris2.Core.Normalise':'un--normaliseArgHoles'(V2, V1, V341, V11, V186)) end), fun (V343) -> begin (V344 = (V342(V343))), case V344 of {'Prelude.Types.Left', V345} -> {'Prelude.Types.Left', V345}; {'Prelude.Types.Right', V346} -> (begin (V445 = begin (V371 = case V8 of {'TTImp.Elab.Check.InLHS', V347} -> begin (V349 = case V46 of 1 -> fun (V348) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('Idris.Idris2.Core.UnifyState':'un--checkUserHolesAfter'(V4, V2, V164, 1)) end), fun (V350) -> begin (V351 = (V349(V350))), case V351 of {'Prelude.Types.Left', V352} -> {'Prelude.Types.Left', V352}; {'Prelude.Types.Right', V353} -> (begin (V355 = fun (V354) -> {'Prelude.Types.Right', V346} end), V355 end(V350)) end end end end; {'TTImp.Elab.Check.InTransform'} -> begin (V357 = case V46 of 1 -> fun (V356) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('Idris.Idris2.Core.UnifyState':'un--checkUserHolesAfter'(V4, V2, V164, 1)) end), fun (V358) -> begin (V359 = (V357(V358))), case V359 of {'Prelude.Types.Left', V360} -> {'Prelude.Types.Left', V360}; {'Prelude.Types.Right', V361} -> (begin (V363 = fun (V362) -> {'Prelude.Types.Right', V346} end), V363 end(V358)) end end end end; _ -> case V46 of 1 -> fun (V364) -> {'Prelude.Types.Right', V346} end; 0 -> begin (V365 = ('Idris.Idris2.Core.UnifyState':'un--checkUserHolesAfter'(V4, V2, V164, case V108 of 1 -> 1; 0 -> V77 end))), fun (V366) -> begin (V367 = (V365(V366))), case V367 of {'Prelude.Types.Left', V368} -> {'Prelude.Types.Left', V368}; {'Prelude.Types.Right', V369} -> (begin (V370 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'(V1, V2, V4, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V14)), V180, 0, V11, V346))), V370 end(V366)) end end end end end end), fun (V372) -> begin (V373 = (V371(V372))), case V373 of {'Prelude.Types.Left', V374} -> {'Prelude.Types.Left', V374}; {'Prelude.Types.Right', V375} -> (begin (V444 = begin (V376 = ('un--normaliseHoleTypes'(V2, V4))), fun (V377) -> begin (V378 = (V376(V377))), case V378 of {'Prelude.Types.Left', V379} -> {'Prelude.Types.Left', V379}; {'Prelude.Types.Right', V380} -> (begin (V443 = begin (V388 = case V46 of 1 -> fun (V381) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> begin (V382 = ('Idris.Idris2.Core.UnifyState':'un--getHoles'(V4))), fun (V383) -> begin (V384 = (V382(V383))), case V384 of {'Prelude.Types.Left', V385} -> {'Prelude.Types.Left', V385}; {'Prelude.Types.Right', V386} -> (begin (V387 = ('Idris.Idris2.Core.UnifyState':'un--restoreHoles'(V4, ('nested--11200-13896--in--un--addHoles'(V0, V1, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), V386, ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(V114))))))), V387 end(V383)) end end end end end), fun (V389) -> begin (V390 = (V388(V389))), case V390 of {'Prelude.Types.Left', V391} -> {'Prelude.Types.Left', V391}; {'Prelude.Types.Right', V392} -> (begin (V442 = begin (V398 = begin (V393 = V179), fun (V394) -> begin (V397 = (begin (V395 = V393), fun (V396) -> ('erlang':'get'(V395)) end end(V394))), {'Prelude.Types.Right', V397} end end end), fun (V399) -> begin (V400 = (V398(V399))), case V400 of {'Prelude.Types.Left', V401} -> {'Prelude.Types.Left', V401}; {'Prelude.Types.Right', V402} -> (begin (V441 = begin (V418 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V403) -> ('un--addHoleToSave'(V2, V403)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V402 of {'TTImp.Elab.Check.MkEState', V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417} -> V416 end))))), fun (V419) -> begin (V420 = (V418(V419))), case V420 of {'Prelude.Types.Left', V421} -> {'Prelude.Types.Left', V421}; {'Prelude.Types.Right', V422} -> (begin (V440 = case V8 of {'TTImp.Elab.Check.InLHS', V423} -> begin (V424 = ('un--findPLetRenames'(V1, V375))), begin (V425 = ('un--doPLetRenames'(V1, V424, [], V375))), begin (V426 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V187))), fun (V427) -> begin (V428 = (V426(V427))), case V428 of {'Prelude.Types.Left', V429} -> {'Prelude.Types.Left', V429}; {'Prelude.Types.Right', V430} -> (begin (V432 = fun (V431) -> {'Prelude.Types.Right', {'Builtin.MkPair', V425, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V1, V11, ('un--doPLetRenames'(V1, V424, [], V430))))}} end), V432 end(V427)) end end end end end end; _ -> begin (V433 = ('Idris.Idris2.Core.UnifyState':'un--dumpConstraints'(V4, V2, <<"elab"/utf8>>, 2, 0))), fun (V434) -> begin (V435 = (V433(V434))), case V435 of {'Prelude.Types.Left', V436} -> {'Prelude.Types.Left', V436}; {'Prelude.Types.Right', V437} -> (begin (V439 = fun (V438) -> {'Prelude.Types.Right', {'Builtin.MkPair', V375, V187}} end), V439 end(V434)) end end end end end), V440 end(V419)) end end end end), V441 end(V399)) end end end end), V442 end(V389)) end end end end), V443 end(V377)) end end end end), V444 end(V372)) end end end end), V445 end(V343)) end end end end), V446 end(V338)) end end end end), V447 end(V328)) end end end end), V448 end(V323)) end end end end), V449 end(V302)) end end end end), V450 end(V297)) end end end end), V451 end(V264)) end end end end), V452 end(V209)) end end end end), V453 end(V199)) end end end end), V454 end(V191)) end end end end end end), V455 end(V182)) end end end end end), V456 end(V176)) end end end end), V457 end(V171)) end end end end), V458 end(V161)) end end end end), V459 end(V156)) end end end end end), V460 end(V121)) end end end end), V461 end(V111)) end end end end end end end.
'un--elabTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> ('un--elabTermSub'(V0, V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V10, {'Core.TT.SubRefl'}, V11, V12)).
'un--doPLetRenames'(V0, V1, V2, V3) -> case V3 of {'Core.TT.Bind', V4, V5, V6, V7} -> case V6 of {'Core.TT.PLet', V8, V9, V10, V11} -> begin (V12 = {'Core.TT.PLet', V8, V9, V10, V11}), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V28, V29, V30, V31)) end end end end end end end, fun (V32) -> fun (V33) -> V33 end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V36, V37, V38)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V41, V42)) end end}, V5, V2)) of 1 -> ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'({'Core.TT.Erased', V4, {'Core.TT.Placeholder'}}, ('un--doPLetRenames'([V5 | V0], V1, V2, V7)))); 0 -> {'Core.TT.Bind', V4, V5, V12, ('un--doPLetRenames'([V5 | V0], V1, V2, V7))} end end; _ -> ('case--doPLetRenames-13493'(V0, V5, V7, V6, V4, V2, V1, ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V45, V46)) end end}, V5, V1)))) end; _ -> V3 end.
'un--checkTermSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V21 = case V8 of {'TTImp.Elab.Check.InType'} -> ('Idris.Idris2.Core.Context':'un--branch'(V2)); _ -> begin (V16 = V2), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'get'(V18)) end end(V17))), {'Prelude.Types.Right', V20} end end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V107 = begin (V31 = begin (V26 = V4), fun (V27) -> begin (V30 = (begin (V28 = V26), fun (V29) -> ('erlang':'get'(V28)) end end(V27))), {'Prelude.Types.Right', V30} end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V106 = begin (V41 = begin (V36 = V3), fun (V37) -> begin (V40 = (begin (V38 = V36), fun (V39) -> ('erlang':'get'(V38)) end end(V37))), {'Prelude.Types.Right', V40} end end end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V105 = begin (V91 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(('un--elabTermSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, {'Prelude.Types.Just', V15})), fun (V46) -> case V46 of {'Core.Core.TryWithImplicits', V47, V48, V49, V50} -> begin (V56 = begin (V51 = V2), fun (V52) -> begin (V55 = (begin (V53 = V51), fun (V54) -> ('erlang':'put'(V53, V25)) end end(V52))), {'Prelude.Types.Right', V55} end end end), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V89 = begin (V66 = begin (V61 = V4), fun (V62) -> begin (V65 = (begin (V63 = V61), fun (V64) -> ('erlang':'put'(V63, V35)) end end(V62))), {'Prelude.Types.Right', V65} end end end), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V88 = begin (V76 = begin (V71 = V3), fun (V72) -> begin (V75 = (begin (V73 = V71), fun (V74) -> ('erlang':'put'(V73, V45)) end end(V72))), {'Prelude.Types.Right', V75} end end end), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V87 = begin (V81 = ('nested--13255-15634--in--un--bindImps'(V0, V1, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V47, V48, V49, V50, V14))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V86 = ('un--elabTermSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V85, {'Prelude.Types.Just', V15}))), V86 end(V82)) end end end end), V87 end(V77)) end end end end), V88 end(V67)) end end end end), V89 end(V57)) end end end end; _ -> fun (V90) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V46, V90)) end end end))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V104 = begin (V97 = case V8 of {'TTImp.Elab.Check.InType'} -> ('Idris.Idris2.Core.Context':'un--commit'(V2)); _ -> fun (V96) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V103 = fun (V102) -> {'Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V95))} end), V103 end(V98)) end end end end), V104 end(V92)) end end end end), V105 end(V42)) end end end end), V106 end(V32)) end end end end), V107 end(V22)) end end end end.
'un--checkTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> ('un--checkTermSub'(V0, V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V10, {'Core.TT.SubRefl'}, V11, V12)).
'un--addHoleToSave'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V60 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V59 = case V48 of {'Prelude.Types.Just', V49} -> begin (V50 = ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V49))))), begin (V51 = ('Idris.Idris2.Core.Context':'un--addToSave'(V0, V1))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V57 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V56) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V0, V56)) end, V50))), V57 end(V52)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V58) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V59 end(V45)) end end end end), V60 end(V8)) end end end end.
