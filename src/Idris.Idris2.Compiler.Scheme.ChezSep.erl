-module('Idris.Idris2.Compiler.Scheme.ChezSep').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--chezNS-1533'/2,
  'nested--11803-1551--in--un--min1'/2,
  'un--touch'/1,
  'un--startChezWinSh'/3,
  'un--startChezCmd'/3,
  'un--startChez'/3,
  'un--schHeader'/2,
  'un--schFooter'/0,
  'un--makeShWindows'/4,
  'un--makeSh'/4,
  'un--executeExpr'/4,
  'un--compileToSS'/4,
  'un--compileLibrary'/5,
  'un--compileExpr'/7,
  'un--compileChezProgram'/3,
  'un--compileChezLibrary'/3,
  'un--compileChezLibraries'/3,
  'un--codegenChezSep'/0,
  'un--chezNS'/1,
  'un--chezLibraryName'/1
]).
'case--chezNS-1533'(V0, V1) -> case V1 of <<""/utf8>> -> <<"unqualified"/utf8>>; _ -> V1 end.
'nested--11803-1551--in--un--min1'(V0, V1) -> case V1 of {'Data.List1.:::', V2, V3} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--min_Ord_Namespace'(V4, V5)) end end, V2, V3)) end.
'un--touch'(V0) -> begin (V30 = fun (V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.Escaped':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, [<<"touch"/utf8>> | [V0 | []]]))(V1))), {'Prelude.Types.Right', V29} end end), ((begin (V46 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V43, V44, V45)) end end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end((begin (V38 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> {'Prelude.Types.Right', (V34(V37))} end end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V31) -> {'Builtin.MkUnit'} end))))(V30)) end.
'un--startChezWinSh'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V3) -> fun (V4) -> <<V3/binary, V4/binary>> end end, <<""/utf8>>}, fun (V5) -> V5 end, [<<"#!/bin/sh\x{a}# "/utf8>> | [('Idris.Idris2.Compiler.Generated':'un--generatedString'(<<"ChezSep"/utf8>>)) | [<<"\x{a}\x{a}set -e # exit on any error\x{a}\x{a}DIR=$(dirname \x{22}$(readlink -f -- \x{22}$0\x{22} || cygpath -a -- \x{22}$0\x{22})\x{22})\x{a}PATH=\x{22}$DIR/"/utf8>> | [V1 | [<<":$PATH\x{22}\x{a}\x{a}\x{22}"/utf8>> | [V0 | [<<"\x{22} --program \x{22}$DIR/"/utf8>> | [V2 | [<<"\x{22} \x{22}$@\x{22}\x{a}\x{22}"/utf8>> | [V0 | [<<"\x{22} -q   --libdirs \x{22}$DIR/"/utf8>> | [V1 | [<<"\x{22}   --program \x{22}$DIR/"/utf8>> | [V2 | [<<"\x{22}   \x{22}$@\x{22}"/utf8>> | []]]]]]]]]]]]]]]])).
'un--startChezCmd'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V3) -> fun (V4) -> <<V3/binary, V4/binary>> end end, <<""/utf8>>}, fun (V5) -> V5 end, [<<"@echo off\x{a}\x{a}rem "/utf8>> | [('Idris.Idris2.Compiler.Generated':'un--generatedString'(<<"ChezSep"/utf8>>)) | [<<"\x{a}\x{a}set APPDIR=%~dp0\x{a}set PATH=%APPDIR%"/utf8>> | [V1 | [<<";%PATH%\x{a}\x{a}\x{22}"/utf8>> | [V0 | [<<"\x{22} -q   --libdirs \x{22}%APPDIR%"/utf8>> | [V1 | [<<"\x{22}   --program \x{22}%APPDIR%"/utf8>> | [V2 | [<<"\x{22}   %*"/utf8>> | []]]]]]]]]]]])).
'un--startChez'(V0, V1, V2) -> <<('Idris.Idris2.Compiler.Scheme.Chez':'un--startChezPreamble'())/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V3) -> fun (V4) -> <<V3/binary, V4/binary>> end end, <<""/utf8>>}, fun (V5) -> V5 end, [<<"export LD_LIBRARY_PATH=\x{22}$DIR/"/utf8>> | [V1 | [<<":$LD_LIBRARY_PATH\x{22}\x{a}export DYLD_LIBRARY_PATH=\x{22}$DIR/"/utf8>> | [V1 | [<<":$DYLD_LIBRARY_PATH\x{22}\x{a}\x{a}\x{22}"/utf8>> | [V0 | [<<"\x{22} -q   --libdirs \x{22}$DIR/"/utf8>> | [V1 | [<<"\x{22}   --program \x{22}$DIR/"/utf8>> | [V2 | [<<"\x{22}   \x{22}$@\x{22}"/utf8>> | []]]]]]]]]]]]))/binary>>.
'un--schHeader'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> <<V2/binary, V3/binary>> end end, <<""/utf8>>}, fun (V4) -> V4 end, [<<"(import (chezscheme) (support)\x{a}    "/utf8>> | [('Idris.Idris2.Data.String':'un--unwords'(('Idris.Idris2.Prelude.Types':'un--listBind'(V1, fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(<<<<"("/utf8>>/binary, <<V5/binary, <<")"/utf8>>/binary>>/binary>>)) end)))) | [<<")\x{a}(case (machine-type)\x{a}  [(i3le ti3le a6le ta6le tarm64le) (load-shared-object \x{22}libc.so.6\x{22})]\x{a}  [(i3osx ti3osx a6osx ta6osx tarm64osx) (load-shared-object \x{22}libc.dylib\x{22})]\x{a}  [(i3nt ti3nt a6nt ta6nt) (load-shared-object \x{22}msvcrt.dll\x{22})]\x{a}  [else (load-shared-object \x{22}libc.so\x{22})]\x{a}"/utf8>> | [('Idris.Idris2.Data.String':'un--fastUnlines'(('Idris.Idris2.Prelude.Types':'un--listBind'(V0, fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(<<<<"  (load-shared-object \x{22}"/utf8>>/binary, <<('Idris.Idris2.Libraries.Utils.String':'un--escapeStringChez'(V6))/binary, <<"\x{22})"/utf8>>/binary>>/binary>>)) end)))) | [<<")\x{a}"/utf8>> | []]]]]])).
'un--schFooter'() -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V0) -> fun (V1) -> <<V0/binary, V1/binary>> end end, <<""/utf8>>}, fun (V2) -> V2 end, [<<"\x{a}(collect 4)\x{a}(blodwen-run-finalisers)"/utf8>> | []])).
'un--makeShWindows'(V0, V1, V2, V3) -> begin (V4 = <<V1/binary, <<".cmd"/utf8>>/binary>>), begin (V5 = ('Idris.Idris2.Core.Core':'un--writeFile'(V4, ('un--startChezCmd'(V0, V2, V3))))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V10 = ('Idris.Idris2.Core.Core':'un--writeFile'(V1, ('un--startChezWinSh'(V0, V2, V3))))), V10 end(V6)) end end end end end.
'un--makeSh'(V0, V1, V2, V3) -> ('Idris.Idris2.Core.Core':'un--writeFile'(V1, ('un--startChez'(V0, V2, V3)))).
'un--executeExpr'(V0, V1, V2, V3) -> begin (V4 = ('un--compileExpr'(0, V0, V1, V2, V2, V3, <<"_tmpchez"/utf8>>))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V62 = case V8 of {'Prelude.Types.Just', V9} -> begin (V39 = fun (V10) -> begin (V38 = (('Idris.Idris2.Erlang.System.Escaped':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, [V9 | []]))(V10))), {'Prelude.Types.Right', V38} end end), ((begin (V55 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V52, V53, V54)) end end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end((begin (V47 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> {'Prelude.Types.Right', (V43(V46))} end end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V40) -> {'Builtin.MkUnit'} end))))(V39)) end; {'Prelude.Types.Nothing'} -> fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V60 = fun (V59) -> V59 end), fun (V61) -> (V60(V61)) end end(<<"compileExpr returned Nothing"/utf8>>))}, V58)) end end), V62 end(V5)) end end end end.
'un--compileToSS'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getDirectives'(V0, {'Core.Options.Chez'}))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V332 = begin (V17 = ('Idris.Idris2.Compiler.Scheme.Chez':'un--findLibs'(V0, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> ('Idris.Idris2.Builtin':'un--snd'(V9)) end))(V8))))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V331 = begin (V23 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V22) -> ('Idris.Idris2.Compiler.Common':'un--copyLib'(V22)) end, V21))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V330 = begin (V30 = fun (V28) -> begin (V29 = ('Idris.Idris2.Compiler.Scheme.Chez':'un--chezVersion'(V1, V28))), {'Prelude.Types.Right', V29} end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V329 = begin (V35 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V0, 0, 0, V3))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V328 = begin (V46 = ('Idris.Idris2.Core.CompileExpr':'un--forget'([], case V39 of {'Compiler.Common.MkCompileData', V40, V41, V42, V43, V44, V45} -> V40 end))), begin (V53 = case V39 of {'Compiler.Common.MkCompileData', V47, V48, V49, V50, V51, V52} -> V49 end), begin (V56 = ('Idris.Idris2.Compiler.Separate':'un--getCompilationUnits'(fun (V54) -> ('Idris.Idris2.Compiler.Separate':'dn--un--nsRefs_HasNamespaces_(|((Builtin.Pair FC) $a),((Builtin.MkPair FC) $a)|)'(fun (V55) -> ('Idris.Idris2.Compiler.Separate':'dn--un--nsRefs_HasNamespaces_NamedDef'(V55)) end, V54)) end, V53))), begin (V57 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"chez/support-sep.ss"/utf8>>))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V327 = begin (V62 = ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_String'(V61))))), begin (V101 = begin (V92 = fun (V63) -> begin (V91 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> V70 end end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), begin (V78 = (V75(V76))), (V77(V78)) end end end end end end end}, fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> begin (V84 = (V81(V83))), ((V82(V84))(V83)) end end end end end end, fun (V85) -> fun (V86) -> fun (V87) -> begin (V88 = (V86(V87))), (V88(V87)) end end end end}, fun (V89) -> fun (V90) -> V90 end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, <<"support.hash"/utf8>>))))(V63))), {'Prelude.Types.Right', V91} end end), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V100 = fun (V97) -> case V96 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Right', 1}; {'Prelude.Types.Right', V99} -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V99, V62))} end end), V100 end(V93)) end end end end), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V326 = begin (V113 = case V105 of 1 -> begin (V106 = ('Idris.Idris2.Core.Core':'un--writeFile'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, <<"support.ss"/utf8>>)), V61))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V111 = ('Idris.Idris2.Core.Core':'un--writeFile'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, <<"support.hash"/utf8>>)), V62))), V111 end(V107)) end end end end; 0 -> fun (V112) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V325 = begin (V291 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V118, V119, [])) end end, case V56 of {'Compiler.Separate.MkCompilationUnitInfo', V120, V121, V122} -> V120 end, fun (V123) -> begin (V124 = ('un--chezLibraryName'(V123))), begin (V134 = ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Compiler.Separate':'dn--un--hash_Hashable_(CompilationUnit $def)'({'Core.Hash.dn--un--__mkHashable', fun (V125) -> ('Idris.Idris2.Compiler.Separate':'dn--un--hash_Hashable_(|((Builtin.Pair FC) $def),((Builtin.MkPair FC) $def)|)'({'Core.Hash.dn--un--__mkHashable', fun (V126) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_NamedDef'(V126)) end, fun (V127) -> fun (V128) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_NamedDef'(V127, V128)) end end}, V125)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Compiler.Separate':'dn--un--hashWithSalt_Hashable_(|((Builtin.Pair FC) $def),((Builtin.MkPair FC) $def)|)'({'Core.Hash.dn--un--__mkHashable', fun (V131) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_NamedDef'(V131)) end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_NamedDef'(V132, V133)) end end}, V129, V130)) end end}, V123))))), begin (V173 = begin (V164 = fun (V135) -> begin (V163 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V138, V139, V140)) end end end end end, fun (V141) -> fun (V142) -> fun (V143) -> V142 end end end, fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> begin (V149 = (V146(V148))), begin (V150 = (V147(V148))), (V149(V150)) end end end end end end end}, fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> begin (V156 = (V153(V155))), ((V154(V156))(V155)) end end end end end end, fun (V157) -> fun (V158) -> fun (V159) -> begin (V160 = (V158(V159))), (V160(V159)) end end end end}, fun (V161) -> fun (V162) -> V162 end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, V124)), <<"hash"/utf8>>))))(V135))), {'Prelude.Types.Right', V163} end end), fun (V165) -> begin (V166 = (V164(V165))), case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> (begin (V172 = fun (V169) -> case V168 of {'Prelude.Types.Left', V170} -> {'Prelude.Types.Right', 1}; {'Prelude.Types.Right', V171} -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V171, V134))} end end), V172 end(V165)) end end end end), fun (V174) -> begin (V175 = (V173(V174))), case V175 of {'Prelude.Types.Left', V176} -> {'Prelude.Types.Left', V176}; {'Prelude.Types.Right', V177} -> (begin (V290 = begin (V283 = case V177 of 1 -> begin (V183 = begin (V178 = V0), fun (V179) -> begin (V182 = (begin (V180 = V178), fun (V181) -> ('erlang':'get'(V180)) end end(V179))), {'Prelude.Types.Right', V182} end end end), fun (V184) -> begin (V185 = (V183(V184))), case V185 of {'Prelude.Types.Left', V186} -> {'Prelude.Types.Left', V186}; {'Prelude.Types.Right', V187} -> (begin (V281 = begin (V188 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Scheme.Chez.Loaded'}, [<<"libc"/utf8>> | [<<"libc 6"/utf8>> | []]]))), fun (V189) -> begin (V190 = (V188(V189))), case V190 of {'Prelude.Types.Left', V191} -> {'Prelude.Types.Left', V191}; {'Prelude.Types.Right', V192} -> (begin (V280 = begin (V193 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Scheme.Chez.Structs'}, []))), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V279 = begin (V207 = ('Idris.Idris2.Data.String':'un--unwords'(('Idris.Idris2.Prelude.Types':'un--listBind'(('Idris.Idris2.Libraries.Data.SortedSet':'un--toList'(case V123 of {'Compiler.Separate.MkCompilationUnit', V198, V199, V200, V201} -> V200 end)), fun (V202) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(<<<<"("/utf8>>/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<"unqualified"/utf8>> end, fun () -> fun (V203) -> ('un--chezLibraryName'(V203)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V202, case V56 of {'Compiler.Separate.MkCompilationUnitInfo', V204, V205, V206} -> V205 end))))/binary, <<")"/utf8>>/binary>>/binary>>)) end))))), begin (V223 = ('Idris.Idris2.Data.String':'un--unwords'(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V208) -> fun (V209) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V208, V209)) end end, []}, fun (V210) -> V210 end, ('Idris.Idris2.Prelude.Types':'un--listBind'(case V123 of {'Compiler.Separate.MkCompilationUnit', V211, V212, V213, V214} -> V214 end, fun (V215) -> case V215 of {'Builtin.MkPair', V216, V217} -> case V217 of {'Builtin.MkPair', V218, V219} -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(case V219 of {'Core.CompileExpr.MkNmCon', V220, V221, V222} -> []; _ -> [('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V216)) | []] end)) end end end))))))), begin (V224 = <<<<"(library ("/utf8>>/binary, <<V124/binary, <<<<")\x{a}"/utf8>>/binary, <<<<"  (export "/utf8>>/binary, <<V223/binary, <<<<")\x{a}"/utf8>>/binary, <<<<"  (import (chezscheme) (support) "/utf8>>/binary, <<V207/binary, <<")\x{a}\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>), begin (V230 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V225) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--getFgnCall'(V0, V192, V197, V34, V225)) end, case V123 of {'Compiler.Separate.MkCompilationUnit', V226, V227, V228, V229} -> V229 end, []))), fun (V231) -> begin (V232 = (V230(V231))), case V232 of {'Prelude.Types.Left', V233} -> {'Prelude.Types.Left', V233}; {'Prelude.Types.Right', V234} -> (begin (V278 = begin (V244 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V235) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--getScheme'(V0, fun (V236) -> fun (V237) -> fun (V238) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--chezExtPrim'(V236, V237, V238)) end end end, fun (V239) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V239)) end, V235)) end, case V123 of {'Compiler.Separate.MkCompilationUnit', V240, V241, V242, V243} -> V243 end, []))), fun (V245) -> begin (V246 = (V244(V245))), case V246 of {'Prelude.Types.Left', V247} -> {'Prelude.Types.Left', V247}; {'Prelude.Types.Right', V248} -> (begin (V277 = begin (V251 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V249) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--loadLib'(V0, V2, V249)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V250) -> ('Idris.Idris2.Builtin':'un--fst'(V250)) end, V234)), []))), fun (V252) -> begin (V253 = (V251(V252))), case V253 of {'Prelude.Types.Left', V254} -> {'Prelude.Types.Left', V254}; {'Prelude.Types.Right', V255} -> (begin (V276 = begin (V256 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.scheme.chez"/utf8>>, 3, fun () -> <<<<"Generating code for "/utf8>>/binary, V124/binary>> end))), fun (V257) -> begin (V258 = (V256(V257))), case V258 of {'Prelude.Types.Left', V259} -> {'Prelude.Types.Left', V259}; {'Prelude.Types.Right', V260} -> (begin (V275 = begin (V269 = ('Idris.Idris2.Core.Core':'un--writeFile'(('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, V124)), <<"ss"/utf8>>)), ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V224 | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V266 = fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V264, V265)) end end end end), fun (V267) -> fun (V268) -> ((((V266('erased'))('erased'))(V267))(V268)) end end end(fun (V261) -> ('Idris.Idris2.Builtin':'un--snd'(V261)) end))(V234)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V248, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V255, [<<")"/utf8>> | []]))))))))))))), fun (V270) -> begin (V271 = (V269(V270))), case V271 of {'Prelude.Types.Left', V272} -> {'Prelude.Types.Left', V272}; {'Prelude.Types.Right', V273} -> (begin (V274 = ('Idris.Idris2.Core.Core':'un--writeFile'(('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, V124)), <<"hash"/utf8>>)), V134))), V274 end(V270)) end end end end), V275 end(V257)) end end end end), V276 end(V252)) end end end end), V277 end(V245)) end end end end), V278 end(V231)) end end end end end end end), V279 end(V194)) end end end end), V280 end(V189)) end end end end), V281 end(V184)) end end end end; 0 -> fun (V282) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V284) -> begin (V285 = (V283(V284))), case V285 of {'Prelude.Types.Left', V286} -> {'Prelude.Types.Left', V286}; {'Prelude.Types.Right', V287} -> (begin (V289 = fun (V288) -> {'Prelude.Types.Right', {'Compiler.Scheme.ChezSep.MkChezLib', V124, V177}} end), V289 end(V284)) end end end end), V290 end(V174)) end end end end end end end))), fun (V292) -> begin (V293 = (V291(V292))), case V293 of {'Prelude.Types.Left', V294} -> {'Prelude.Types.Left', V294}; {'Prelude.Types.Right', V295} -> (begin (V324 = begin (V300 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V296) -> fun (V297) -> fun (V298) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--chezExtPrim'(V296, V297, V298)) end end end, fun (V299) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V299)) end, 0, V46))), fun (V301) -> begin (V302 = (V300(V301))), case V302 of {'Prelude.Types.Left', V303} -> {'Prelude.Types.Left', V303}; {'Prelude.Types.Right', V304} -> (begin (V323 = begin (V316 = ('Idris.Idris2.Core.Core':'un--writeFile'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, <<"mainprog.ss"/utf8>>)), ('Idris.Idris2.Data.String':'un--fastUnlines'([('un--schHeader'(((begin (V310 = fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V308, V309)) end end end end), fun (V311) -> fun (V312) -> ((((V310('erased'))('erased'))(V311))(V312)) end end end(fun (V305) -> ('Idris.Idris2.Builtin':'un--snd'(V305)) end))(V21)), ('Idris.Idris2.Prelude.Types':'un--listBind'(V295, fun (V313) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(case V313 of {'Compiler.Scheme.ChezSep.MkChezLib', V314, V315} -> V314 end)) end)))) | [<<"(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))"/utf8>> | [V304 | [('un--schFooter'()) | []]]]]))))), fun (V317) -> begin (V318 = (V316(V317))), case V318 of {'Prelude.Types.Left', V319} -> {'Prelude.Types.Left', V319}; {'Prelude.Types.Right', V320} -> (begin (V322 = fun (V321) -> {'Prelude.Types.Right', {'Builtin.MkPair', V105, V295}} end), V322 end(V317)) end end end end), V323 end(V301)) end end end end), V324 end(V292)) end end end end), V325 end(V114)) end end end end), V326 end(V102)) end end end end end), V327 end(V58)) end end end end end end end), V328 end(V36)) end end end end), V329 end(V31)) end end end end), V330 end(V24)) end end end end), V331 end(V18)) end end end end), V332 end(V5)) end end end end.
'un--compileLibrary'(V0, V1, V2, V3, V4) -> begin (V7 = fun (V5) -> begin (V6 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Compiling to library is not supported.\x{a}"/utf8>>, V5))), {'Prelude.Types.Right', V6} end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V13 end(V8)) end end end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5, V6) -> begin (V36 = fun (V7) -> begin (V35 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}))(V7))), {'Prelude.Types.Right', V35} end end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V238 = case V40 of {'Prelude.Types.Just', V41} -> begin (V42 = <<V6/binary, <<"_app"/utf8>>/binary>>), begin (V43 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, V42))), begin (V65 = begin (V46 = fun (V44) -> begin (V45 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V43, V44))), {'Prelude.Types.Right', V45} end end), ((begin (V62 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V59, V60, V61)) end end end end end), fun (V63) -> fun (V64) -> ((((V62('erased'))('erased'))(V63))(V64)) end end end((begin (V54 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> {'Prelude.Types.Right', (V50(V53))} end end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V47) -> {'Builtin.MkUnit'} end))))(V46)) end), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V233 = begin (V72 = fun (V70) -> begin (V71 = ('Idris.Idris2.Compiler.Scheme.Chez':'un--findChez'(V70))), {'Prelude.Types.Right', V71} end end), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V232 = begin (V77 = ('un--compileToSS'(V1, V76, V43, V5))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V231 = case V81 of {'Builtin.MkPair', V82, V83} -> begin (V161 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, 2, fun () -> (begin (V85 = fun (V84) -> V84 end), fun (V86) -> (V85(V86)) end end(<<"Make SO"/utf8>>)) end, case V0 of 1 -> begin (V103 = case V82 of 1 -> begin (V93 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V88 = fun (V87) -> V87 end), fun (V89) -> (V88(V89)) end end(<<"compiler.scheme.chez"/utf8>>)), 3, fun () -> (begin (V91 = fun (V90) -> V90 end), fun (V92) -> (V91(V92)) end end(<<"Compiling support"/utf8>>)) end))), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V101 = ('un--compileChezLibrary'(V76, V43, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V43, (begin (V99 = fun (V98) -> V98 end), fun (V100) -> (V99(V100)) end end(<<"support.ss"/utf8>>))))))), V101 end(V94)) end end end end; 0 -> fun (V102) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V159 = begin (V128 = ('un--compileChezLibraries'(V76, V43, ('Idris.Idris2.Prelude.Types':'un--listBind'(V83, fun (V108) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V111, V112)) end end end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V114)) end end, fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_List'(V117, V118)) end end end end}, fun (V119) -> [] end, fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V121, (V122()))) end end end}, case V108 of {'Compiler.Scheme.ChezSep.MkChezLib', V123, V124} -> V124 end)), fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V43, case V108 of {'Compiler.Scheme.ChezSep.MkChezLib', V126, V127} -> V126 end)), <<"ss"/utf8>>)))) end)) end))))), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V158 = begin (V149 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Core':'un--traverse_'(V133, V134)) end end, V83, fun (V135) -> begin (V141 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V137 = fun (V136) -> V136 end), fun (V138) -> (V137(V138)) end end(<<"compiler.scheme.chez"/utf8>>)), 3, fun () -> <<<<"Touching "/utf8>>/binary, case V135 of {'Compiler.Scheme.ChezSep.MkChezLib', V139, V140} -> V139 end/binary>> end))), fun (V142) -> begin (V143 = (V141(V142))), case V143 of {'Prelude.Types.Left', V144} -> {'Prelude.Types.Left', V144}; {'Prelude.Types.Right', V145} -> (begin (V148 = ('un--touch'(('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V43, case V135 of {'Compiler.Scheme.ChezSep.MkChezLib', V146, V147} -> V146 end)), <<"so"/utf8>>))))), V148 end(V142)) end end end end end))), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V157 = ('un--compileChezProgram'(V76, V43, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V43, (begin (V155 = fun (V154) -> V154 end), fun (V156) -> (V155(V156)) end end(<<"mainprog.ss"/utf8>>))))))), V157 end(V150)) end end end end), V158 end(V129)) end end end end), V159 end(V104)) end end end end; 0 -> fun (V160) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end))), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V230 = begin (V166 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, V6))), begin (V167 = ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V42, <<"mainprog"/utf8>>)), case V0 of 1 -> <<"so"/utf8>>; 0 -> <<"ss"/utf8>> end))), begin (V168 = case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> ('un--makeShWindows'(V76, V166, V42, V167)); 0 -> ('un--makeSh'(V76, V166, V42, V167)) end), fun (V169) -> begin (V170 = (V168(V169))), case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> (begin (V229 = begin (V222 = begin (V203 = fun (V173) -> begin (V202 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V176, V177, V178)) end end end end end, fun (V179) -> fun (V180) -> fun (V181) -> V180 end end end, fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> begin (V187 = (V184(V186))), begin (V188 = (V185(V186))), (V187(V188)) end end end end end end end}, fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> begin (V194 = (V191(V193))), ((V192(V194))(V193)) end end end end end end, fun (V195) -> fun (V196) -> fun (V197) -> begin (V198 = (V196(V197))), (V198(V197)) end end end end}, fun (V199) -> fun (V200) -> V200 end end}, V166, begin (V201 = 493), case ((V201 band 9223372036854775808) =/= 0) of 'true' -> (V201 bor -9223372036854775808); _ -> (V201 band 9223372036854775807) end end))(V173))), {'Prelude.Types.Right', V202} end end), ((begin (V219 = fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V216, V217, V218)) end end end end end), fun (V220) -> fun (V221) -> ((((V219('erased'))('erased'))(V220))(V221)) end end end((begin (V211 = fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> case V208 of {'Prelude.Types.Left', V209} -> {'Prelude.Types.Left', V209}; {'Prelude.Types.Right', V210} -> {'Prelude.Types.Right', (V207(V210))} end end end end end), fun (V212) -> fun (V213) -> ((((V211('erased'))('erased'))(V212))(V213)) end end end(fun (V204) -> {'Builtin.MkUnit'} end))))(V203)) end), fun (V223) -> begin (V224 = (V222(V223))), case V224 of {'Prelude.Types.Left', V225} -> {'Prelude.Types.Left', V225}; {'Prelude.Types.Right', V226} -> (begin (V228 = fun (V227) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V166}} end), V228 end(V223)) end end end end), V229 end(V169)) end end end end end end), V230 end(V162)) end end end end end), V231 end(V78)) end end end end), V232 end(V73)) end end end end), V233 end(V66)) end end end end end end; {'Prelude.Types.Nothing'} -> fun (V234) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V236 = fun (V235) -> V235 end), fun (V237) -> (V236(V237)) end end(<<"Can\x{27}t get current directory"/utf8>>))}, V234)) end end), V238 end(V37)) end end end end.
'un--compileChezProgram'(V0, V1, V2) -> begin (V32 = fun (V3) -> begin (V31 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, ('Idris.Idris2.Data.String':'un--unwords'([<<"echo"/utf8>> | [<<<<"\x{27}(parameterize ([optimize-level 3] [compile-file-message #f]) (compile-program "/utf8>>/binary, <<('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V2))/binary, <<"))\x{27}"/utf8>>/binary>>/binary>> | [<<<<"\x{27}(delete-file "/utf8>>/binary, <<('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V2))/binary, <<")\x{27}"/utf8>>/binary>>/binary>> | [<<"|"/utf8>> | [V0 | [<<"-q"/utf8>> | [<<"--libdirs"/utf8>> | [V1 | []]]]]]]]]))))(V3))), {'Prelude.Types.Right', V31} end end), ((begin (V48 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V45, V46, V47)) end end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end((begin (V40 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> {'Prelude.Types.Right', (V36(V39))} end end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end(fun (V33) -> {'Builtin.MkUnit'} end))))(V32)) end.
'un--compileChezLibrary'(V0, V1, V2) -> begin (V32 = fun (V3) -> begin (V31 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, ('Idris.Idris2.Data.String':'un--unwords'([<<"echo"/utf8>> | [<<<<"\x{27}(parameterize ([optimize-level 3] [compile-file-message #f]) (compile-library "/utf8>>/binary, <<('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V2))/binary, <<"))\x{27}"/utf8>>/binary>>/binary>> | [<<<<"\x{27}(delete-file "/utf8>>/binary, <<('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V2))/binary, <<")\x{27}"/utf8>>/binary>>/binary>> | [<<"|"/utf8>> | [V0 | [<<"-q"/utf8>> | [<<"--libdirs"/utf8>> | [V1 | []]]]]]]]]))))(V3))), {'Prelude.Types.Right', V31} end end), ((begin (V48 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V45, V46, V47)) end end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end((begin (V40 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> {'Prelude.Types.Right', (V36(V39))} end end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end(fun (V33) -> {'Builtin.MkUnit'} end))))(V32)) end.
'un--compileChezLibraries'(V0, V1, V2) -> begin (V33 = fun (V3) -> begin (V32 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, ('Idris.Idris2.Data.String':'un--unwords'([<<"echo"/utf8>> | [('Idris.Idris2.Data.String':'un--unwords'(('Idris.Idris2.Prelude.Types':'un--listBind'(V2, fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(<<<<"\x{27}(parameterize ([optimize-level 3] [compile-file-message #f]) (compile-library "/utf8>>/binary, <<('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V31))/binary, <<<<"))\x{27}"/utf8>>/binary, <<<<" \x{27}(delete-file "/utf8>>/binary, <<('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V31))/binary, <<")\x{27}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>)) end)))) | [<<"|"/utf8>> | [V0 | [<<"-q"/utf8>> | [<<"--libdirs"/utf8>> | [V1 | []]]]]]]]))))(V3))), {'Prelude.Types.Right', V32} end end), ((begin (V49 = fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V46, V47, V48)) end end end end end), fun (V50) -> fun (V51) -> ((((V49('erased'))('erased'))(V50))(V51)) end end end((begin (V41 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> {'Prelude.Types.Right', (V37(V40))} end end end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end(fun (V34) -> {'Builtin.MkUnit'} end))))(V33)) end.
'un--codegenChezSep'() -> {'Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('un--compileExpr'(1, V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('un--executeExpr'(V6, V7, V8, V9)) end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('un--compileLibrary'(V10, V11, V12, V13, V14)) end end end end end, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}}.
'un--chezNS'(V0) -> ('case--chezNS-1533'(V0, ('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"-"/utf8>>, V0)))).
'un--chezLibraryName'(V0) -> ('un--chezNS'(('nested--11803-1551--in--un--min1'(V0, case V0 of {'Compiler.Separate.MkCompilationUnit', V1, V2, V3, V4} -> V2 end)))).
