-module('Idris.Idris2.Yaffle.Main').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--resolved_HasNames_(|Unit,MkUnit|)'/3,
  'dn--un--full_HasNames_(|Unit,MkUnit|)'/3,
  'un--yaffleMain'/2,
  'un--usage'/0,
  'un--processArgs'/1
]).
'dn--un--resolved_HasNames_(|Unit,MkUnit|)'(V0, V1, V2) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}.
'dn--un--full_HasNames_(|Unit,MkUnit|)'(V0, V1, V2) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}.
'un--yaffleMain'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--initDefs'())), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V316 = begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Context.Ctxt'}, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V315 = begin (V12 = ('un--processArgs'(V1))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V314 = begin (V17 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V11, V0))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V313 = begin (V22 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Core.FC.PhysicalIdrSrc', V21}))))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V312 = begin (V27 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'())))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V311 = begin (V32 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Syntax.Syn'}, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'())))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V310 = begin (V37 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.REPL.Opts.ROpts'}, ('Idris.Idris2.Idris.REPL.Opts':'un--defaultOpts'({'Prelude.Types.Just', V0}, {'Idris.REPL.Opts.REPL', 1}, []))))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V309 = begin (V44 = case V16 of {'Prelude.Types.Just', V42} -> ('Idris.Idris2.Core.Context':'un--setLogTimings'(V11, V42)); {'Prelude.Types.Nothing'} -> fun (V43) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V308 = begin (V49 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V11))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V307 = begin (V301 = case ('Idris.Idris2.Libraries.Utils.Path':'un--extension'(V0)) of {'Prelude.Types.Just', V54} -> case V54 of <<"ttc"/utf8>> -> begin (V76 = begin (V57 = fun (V55) -> begin (V56 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Processing as TTC\x{a}"/utf8>>, V55))), {'Prelude.Types.Right', V56} end end), ((begin (V73 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V70, V71, V72)) end end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end((begin (V65 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> {'Prelude.Types.Right', (V61(V64))} end end end end end), fun (V66) -> fun (V67) -> ((((V65('erased'))('erased'))(V66))(V67)) end end end(fun (V58) -> {'Builtin.MkUnit'} end))))(V57)) end), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V132 = begin (V105 = begin (V86 = ('Idris.Idris2.Core.Binary':'un--readFromTTC'({'Core.Binary.Prims.dn--un--__mkTTC', fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V81, V82, V83)) end end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V84, V85)) end end}, V11, V31, 1, ('Idris.Idris2.Core.FC':'un--emptyFC'()), 1, {'Core.Binary.LocalFile', V0}, ('Idris.Idris2.Core.Name.Namespace':'un--nsAsModuleIdent'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()))), ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'())))), ((begin (V102 = fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V99, V100, V101)) end end end end end), fun (V103) -> fun (V104) -> ((((V102('erased'))('erased'))(V103))(V104)) end end end((begin (V94 = fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> {'Prelude.Types.Right', (V90(V93))} end end end end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end(fun (V87) -> {'Builtin.MkUnit'} end))))(V86)) end), fun (V106) -> begin (V107 = (V105(V106))), case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> (begin (V131 = begin (V112 = fun (V110) -> begin (V111 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Read TTC\x{a}"/utf8>>, V110))), {'Prelude.Types.Right', V111} end end), ((begin (V128 = fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V125, V126, V127)) end end end end end), fun (V129) -> fun (V130) -> ((((V128('erased'))('erased'))(V129))(V130)) end end end((begin (V120 = fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> {'Prelude.Types.Right', (V116(V119))} end end end end end), fun (V121) -> fun (V122) -> ((((V120('erased'))('erased'))(V121))(V122)) end end end(fun (V113) -> {'Builtin.MkUnit'} end))))(V112)) end), V131 end(V106)) end end end end), V132 end(V77)) end end end end; _ -> begin (V154 = begin (V135 = fun (V133) -> begin (V134 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Processing as TTImp\x{a}"/utf8>>, V133))), {'Prelude.Types.Right', V134} end end), ((begin (V151 = fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V148, V149, V150)) end end end end end), fun (V152) -> fun (V153) -> ((((V151('erased'))('erased'))(V152))(V153)) end end end((begin (V143 = fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> {'Prelude.Types.Right', (V139(V142))} end end end end end), fun (V144) -> fun (V145) -> ((((V143('erased'))('erased'))(V144))(V145)) end end end(fun (V136) -> {'Builtin.MkUnit'} end))))(V135)) end), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V216 = begin (V159 = ('Idris.Idris2.TTImp.ProcessDecls':'un--processTTImpFile'(V11, V26, V31, V36, V41, V0))), fun (V160) -> begin (V161 = (V159(V160))), case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> (begin (V215 = case V163 of 1 -> begin (V164 = ('Idris.Idris2.Core.Directory':'un--makeBuildDirectory'(V11, V21))), fun (V165) -> begin (V166 = (V164(V165))), case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> (begin (V213 = begin (V169 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V11, V0, <<"ttc"/utf8>>))), fun (V170) -> begin (V171 = (V169(V170))), case V171 of {'Prelude.Types.Left', V172} -> {'Prelude.Types.Left', V172}; {'Prelude.Types.Right', V173} -> (begin (V212 = begin (V185 = ('Idris.Idris2.Core.Binary':'un--writeToTTC'({'Builtin.MkPair', {'Core.Context.dn--un--__mkHasNames', fun (V174) -> fun (V175) -> fun (V176) -> ('dn--un--full_HasNames_(|Unit,MkUnit|)'(V174, V175, V176)) end end end, fun (V177) -> fun (V178) -> fun (V179) -> ('dn--un--resolved_HasNames_(|Unit,MkUnit|)'(V177, V178, V179)) end end end}, {'Core.Binary.Prims.dn--un--__mkTTC', fun (V180) -> fun (V181) -> fun (V182) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V180, V181, V182)) end end end, fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V183, V184)) end end}}, V11, V31, {'Builtin.MkUnit'}, V0, V173))), fun (V186) -> begin (V187 = (V185(V186))), case V187 of {'Prelude.Types.Left', V188} -> {'Prelude.Types.Left', V188}; {'Prelude.Types.Right', V189} -> (begin (V211 = begin (V192 = fun (V190) -> begin (V191 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Written TTC\x{a}"/utf8>>, V190))), {'Prelude.Types.Right', V191} end end), ((begin (V208 = fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V205, V206, V207)) end end end end end), fun (V209) -> fun (V210) -> ((((V208('erased'))('erased'))(V209))(V210)) end end end((begin (V200 = fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> case V197 of {'Prelude.Types.Left', V198} -> {'Prelude.Types.Left', V198}; {'Prelude.Types.Right', V199} -> {'Prelude.Types.Right', (V196(V199))} end end end end end), fun (V201) -> fun (V202) -> ((((V200('erased'))('erased'))(V201))(V202)) end end end(fun (V193) -> {'Builtin.MkUnit'} end))))(V192)) end), V211 end(V186)) end end end end), V212 end(V170)) end end end end), V213 end(V165)) end end end end; 0 -> fun (V214) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V215 end(V160)) end end end end), V216 end(V155)) end end end end end; _ -> begin (V238 = begin (V219 = fun (V217) -> begin (V218 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Processing as TTImp\x{a}"/utf8>>, V217))), {'Prelude.Types.Right', V218} end end), ((begin (V235 = fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V232, V233, V234)) end end end end end), fun (V236) -> fun (V237) -> ((((V235('erased'))('erased'))(V236))(V237)) end end end((begin (V227 = fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> case V224 of {'Prelude.Types.Left', V225} -> {'Prelude.Types.Left', V225}; {'Prelude.Types.Right', V226} -> {'Prelude.Types.Right', (V223(V226))} end end end end end), fun (V228) -> fun (V229) -> ((((V227('erased'))('erased'))(V228))(V229)) end end end(fun (V220) -> {'Builtin.MkUnit'} end))))(V219)) end), fun (V239) -> begin (V240 = (V238(V239))), case V240 of {'Prelude.Types.Left', V241} -> {'Prelude.Types.Left', V241}; {'Prelude.Types.Right', V242} -> (begin (V300 = begin (V243 = ('Idris.Idris2.TTImp.ProcessDecls':'un--processTTImpFile'(V11, V26, V31, V36, V41, V0))), fun (V244) -> begin (V245 = (V243(V244))), case V245 of {'Prelude.Types.Left', V246} -> {'Prelude.Types.Left', V246}; {'Prelude.Types.Right', V247} -> (begin (V299 = case V247 of 1 -> begin (V248 = ('Idris.Idris2.Core.Directory':'un--makeBuildDirectory'(V11, V21))), fun (V249) -> begin (V250 = (V248(V249))), case V250 of {'Prelude.Types.Left', V251} -> {'Prelude.Types.Left', V251}; {'Prelude.Types.Right', V252} -> (begin (V297 = begin (V253 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V11, V0, <<"ttc"/utf8>>))), fun (V254) -> begin (V255 = (V253(V254))), case V255 of {'Prelude.Types.Left', V256} -> {'Prelude.Types.Left', V256}; {'Prelude.Types.Right', V257} -> (begin (V296 = begin (V269 = ('Idris.Idris2.Core.Binary':'un--writeToTTC'({'Builtin.MkPair', {'Core.Context.dn--un--__mkHasNames', fun (V258) -> fun (V259) -> fun (V260) -> ('dn--un--full_HasNames_(|Unit,MkUnit|)'(V258, V259, V260)) end end end, fun (V261) -> fun (V262) -> fun (V263) -> ('dn--un--resolved_HasNames_(|Unit,MkUnit|)'(V261, V262, V263)) end end end}, {'Core.Binary.Prims.dn--un--__mkTTC', fun (V264) -> fun (V265) -> fun (V266) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V264, V265, V266)) end end end, fun (V267) -> fun (V268) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V267, V268)) end end}}, V11, V31, {'Builtin.MkUnit'}, V0, V257))), fun (V270) -> begin (V271 = (V269(V270))), case V271 of {'Prelude.Types.Left', V272} -> {'Prelude.Types.Left', V272}; {'Prelude.Types.Right', V273} -> (begin (V295 = begin (V276 = fun (V274) -> begin (V275 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Written TTC\x{a}"/utf8>>, V274))), {'Prelude.Types.Right', V275} end end), ((begin (V292 = fun (V287) -> fun (V288) -> fun (V289) -> fun (V290) -> fun (V291) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V289, V290, V291)) end end end end end), fun (V293) -> fun (V294) -> ((((V292('erased'))('erased'))(V293))(V294)) end end end((begin (V284 = fun (V278) -> fun (V279) -> fun (V280) -> fun (V281) -> case V281 of {'Prelude.Types.Left', V282} -> {'Prelude.Types.Left', V282}; {'Prelude.Types.Right', V283} -> {'Prelude.Types.Right', (V280(V283))} end end end end end), fun (V285) -> fun (V286) -> ((((V284('erased'))('erased'))(V285))(V286)) end end end(fun (V277) -> {'Builtin.MkUnit'} end))))(V276)) end), V295 end(V270)) end end end end), V296 end(V254)) end end end end), V297 end(V249)) end end end end; 0 -> fun (V298) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V299 end(V244)) end end end end), V300 end(V239)) end end end end end), fun (V302) -> begin (V303 = (V301(V302))), case V303 of {'Prelude.Types.Left', V304} -> {'Prelude.Types.Left', V304}; {'Prelude.Types.Right', V305} -> (begin (V306 = ('Idris.Idris2.Yaffle.REPL':'un--repl'(V11, V26, V31, V36, V41))), V306 end(V302)) end end end end), V307 end(V50)) end end end end), V308 end(V45)) end end end end), V309 end(V38)) end end end end), V310 end(V33)) end end end end), V311 end(V28)) end end end end), V312 end(V23)) end end end end), V313 end(V18)) end end end end), V314 end(V13)) end end end end), V315 end(V8)) end end end end), V316 end(V3)) end end end end.
'un--usage'() -> <<"Usage: yaffle <input file> [--timing]"/utf8>>.
'un--processArgs'(V0) -> case V0 of [] -> fun (V1) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V2, V3) -> fun (V4) -> case V2 of <<"--timing"/utf8>> -> case V3 of [] -> {'Prelude.Types.Right', {'Prelude.Types.Just', 10}}; _ -> begin (V43 = begin (V15 = (((begin (V12 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V9, V10, V11)) end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V6) -> {'Builtin.MkUnit'} end))(fun (V5) -> ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('un--usage'())/binary, <<"\x{a}"/utf8>>/binary>>, V5)) end))(V4))), (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V4)) end), {'Prelude.Types.Right', V43} end end; _ -> begin (V82 = begin (V54 = (((begin (V51 = fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V48, V49, V50)) end end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(fun (V45) -> {'Builtin.MkUnit'} end))(fun (V44) -> ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('un--usage'())/binary, <<"\x{a}"/utf8>>/binary>>, V44)) end))(V4))), (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V4)) end), {'Prelude.Types.Right', V82} end end end end(E0, E1)); _ -> fun (V83) -> begin (V122 = begin (V94 = (((begin (V91 = fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V88, V89, V90)) end end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end(fun (V85) -> {'Builtin.MkUnit'} end))(fun (V84) -> ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('un--usage'())/binary, <<"\x{a}"/utf8>>/binary>>, V84)) end))(V83))), (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V97, V98, V99)) end end end end end, fun (V100) -> fun (V101) -> fun (V102) -> V101 end end end, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V105(V107))), begin (V109 = (V106(V107))), (V108(V109)) end end end end end end end}, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V112(V114))), ((V113(V115))(V114)) end end end end end end, fun (V116) -> fun (V117) -> fun (V118) -> begin (V119 = (V117(V118))), (V119(V118)) end end end end}, fun (V120) -> fun (V121) -> V121 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V83)) end), {'Prelude.Types.Right', V122} end end end.
