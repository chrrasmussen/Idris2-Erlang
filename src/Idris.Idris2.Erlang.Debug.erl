-module('Idris.Idris2.Erlang.Debug').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--toErlTerm_ToErlTerm_AnalyzeSort'/1,
  'dn--un--toErlTerm_ToErlTerm_AnalyzeOpts'/1,
  'dn--un--toErlTerm_ToErlTerm_AnalyzeFilter'/1,
  'un--erlRunTimeProfiler'/3,
  'un--erlPrintMemory'/1,
  'un--erlPrintLn'/2,
  'un--erlInspect'/1,
  'un--defaultAnalyzeOpts'/0
]).
'dn--un--toErlTerm_ToErlTerm_AnalyzeSort'(V0) -> case V0 of 0 -> (begin (V2 = fun (V1) -> V1 end), fun (V3) -> (V2(V3)) end end('time')); 1 -> (begin (V5 = fun (V4) -> V4 end), fun (V6) -> (V5(V6)) end end('calls')); 2 -> (begin (V8 = fun (V7) -> V7 end), fun (V9) -> (V8(V9)) end end('mfa')) end.
'dn--un--toErlTerm_ToErlTerm_AnalyzeOpts'(V0) -> case V0 of {'Erlang.Debug.MkAnalyzeOpts', V1, V2} -> begin (V11 = {'filter', ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('dn--un--toErlTerm_ToErlTerm_AnalyzeFilter'(V3)) end))(V1))}), begin (V20 = ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> {'sort', ('dn--un--toErlTerm_ToErlTerm_AnalyzeSort'(V12))} end))(V2))), (begin (V22 = fun (V21) -> V21 end), fun (V23) -> (V22(V23)) end end([V11 | ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(V20))])) end end end.
'dn--un--toErlTerm_ToErlTerm_AnalyzeFilter'(V0) -> case V0 of {'Erlang.Debug.FilterByCalls', V1} -> (begin (V3 = fun (V2) -> V2 end), fun (V4) -> (V3(V4)) end end({'calls', V1})); {'Erlang.Debug.FilterByTime', V5} -> (begin (V7 = fun (V6) -> V6 end), fun (V8) -> (V7(V8)) end end({'time', V5})) end.
'un--erlRunTimeProfiler'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(((begin (V152 = case V0 of {'Prelude.IO.MkHasIO', V144, V145} -> case V144 of {'Prelude.Interfaces.MkMonad', V146, V147, V148} -> case V146 of {'Prelude.Interfaces.MkApplicative', V149, V150, V151} -> V149 end end end), fun (V153) -> fun (V154) -> ((((V152('erased'))('erased'))(V153))(V154)) end end end(fun (V143) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V135, V136} -> case V135 of {'Prelude.Interfaces.MkMonad', V137, V138, V139} -> case V137 of {'Prelude.Interfaces.MkApplicative', V140, V141, V142} -> ((V141('erased'))(('erlang':'apply'('eprof', 'start', [])))) end end end))))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> ((((V12('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V109, V110} -> case V109 of {'Prelude.Interfaces.MkMonad', V111, V112, V113} -> ((((V112('erased'))('erased'))(('Idris.Idris2.Erlang.System.Concurrency':'un--erlSelf'(V0))))(fun (V114) -> ((begin (V132 = case V0 of {'Prelude.IO.MkHasIO', V124, V125} -> case V124 of {'Prelude.Interfaces.MkMonad', V126, V127, V128} -> case V126 of {'Prelude.Interfaces.MkApplicative', V129, V130, V131} -> V129 end end end), fun (V133) -> fun (V134) -> ((((V132('erased'))('erased'))(V133))(V134)) end end end(fun (V123) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V115, V116} -> case V115 of {'Prelude.Interfaces.MkMonad', V117, V118, V119} -> case V117 of {'Prelude.Interfaces.MkApplicative', V120, V121, V122} -> ((V121('erased'))(('erlang':'apply'('eprof', 'start_profiling', [[V114 | []] | []])))) end end end)) end)) end end))(fun (V14) -> case V0 of {'Prelude.IO.MkHasIO', V15, V16} -> case V15 of {'Prelude.Interfaces.MkMonad', V17, V18, V19} -> ((((V18('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V107, V108} -> ((V108('erased'))(V2)) end))(fun (V20) -> case V0 of {'Prelude.IO.MkHasIO', V21, V22} -> case V21 of {'Prelude.Interfaces.MkMonad', V23, V24, V25} -> ((((V24('erased'))('erased'))(((begin (V104 = case V0 of {'Prelude.IO.MkHasIO', V96, V97} -> case V96 of {'Prelude.Interfaces.MkMonad', V98, V99, V100} -> case V98 of {'Prelude.Interfaces.MkApplicative', V101, V102, V103} -> V101 end end end), fun (V105) -> fun (V106) -> ((((V104('erased'))('erased'))(V105))(V106)) end end end(fun (V95) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V87, V88} -> case V87 of {'Prelude.Interfaces.MkMonad', V89, V90, V91} -> case V89 of {'Prelude.Interfaces.MkApplicative', V92, V93, V94} -> ((V93('erased'))(('erlang':'apply'('eprof', 'stop_profiling', [])))) end end end))))(fun (V26) -> case V0 of {'Prelude.IO.MkHasIO', V27, V28} -> case V27 of {'Prelude.Interfaces.MkMonad', V29, V30, V31} -> ((((V30('erased'))('erased'))(((begin (V84 = case V0 of {'Prelude.IO.MkHasIO', V76, V77} -> case V76 of {'Prelude.Interfaces.MkMonad', V78, V79, V80} -> case V78 of {'Prelude.Interfaces.MkApplicative', V81, V82, V83} -> V81 end end end), fun (V85) -> fun (V86) -> ((((V84('erased'))('erased'))(V85))(V86)) end end end(fun (V75) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V67, V68} -> case V67 of {'Prelude.Interfaces.MkMonad', V69, V70, V71} -> case V69 of {'Prelude.Interfaces.MkApplicative', V72, V73, V74} -> ((V73('erased'))(('erlang':'apply'('eprof', 'analyze', ['total' | [('dn--un--toErlTerm_ToErlTerm_AnalyzeOpts'(V1)) | []]])))) end end end))))(fun (V32) -> case V0 of {'Prelude.IO.MkHasIO', V33, V34} -> case V33 of {'Prelude.Interfaces.MkMonad', V35, V36, V37} -> ((((V36('erased'))('erased'))(((begin (V64 = case V0 of {'Prelude.IO.MkHasIO', V56, V57} -> case V56 of {'Prelude.Interfaces.MkMonad', V58, V59, V60} -> case V58 of {'Prelude.Interfaces.MkApplicative', V61, V62, V63} -> V61 end end end), fun (V65) -> fun (V66) -> ((((V64('erased'))('erased'))(V65))(V66)) end end end(fun (V55) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V47, V48} -> case V47 of {'Prelude.Interfaces.MkMonad', V49, V50, V51} -> case V49 of {'Prelude.Interfaces.MkApplicative', V52, V53, V54} -> ((V53('erased'))(('erlang':'apply'('eprof', 'stop', [])))) end end end))))(fun (V38) -> case V0 of {'Prelude.IO.MkHasIO', V39, V40} -> case V39 of {'Prelude.Interfaces.MkMonad', V41, V42, V43} -> case V41 of {'Prelude.Interfaces.MkApplicative', V44, V45, V46} -> ((V45('erased'))(V20)) end end end end)) end end end)) end end end)) end end end)) end end end)) end end end)) end end.
'un--erlPrintMemory'(V0) -> case V0 of {'Prelude.IO.MkHasIO', V1, V2} -> case V1 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> ((((V4('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V7, V8} -> case V7 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> ((V13('erased'))(('erlang':'apply'('erlang', 'memory', [])))) end end end))(fun (V6) -> ('un--erlPrintLn'(V0, V6)) end)) end end.
'un--erlPrintLn'(V0, V1) -> ((begin (V22 = case V0 of {'Prelude.IO.MkHasIO', V14, V15} -> case V14 of {'Prelude.Interfaces.MkMonad', V16, V17, V18} -> case V16 of {'Prelude.Interfaces.MkApplicative', V19, V20, V21} -> V19 end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V13) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> case V4 of {'Prelude.Interfaces.MkApplicative', V7, V8, V9} -> ((V8('erased'))(('erlang':'apply'('io', 'format', [(begin (V11 = fun (V10) -> V10 end), fun (V12) -> (V11(V12)) end end(<<"~p~n"/utf8>>)) | [[V1 | []] | []]])))) end end end)).
'un--erlInspect'(V0) -> ('Idris.Idris2.PrimIO':'un--unsafePerformIO'(fun (V1) -> begin (V29 = (('un--erlPrintLn'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), V0 end end)).
'un--defaultAnalyzeOpts'() -> {'Erlang.Debug.MkAnalyzeOpts', [], {'Prelude.Types.Nothing'}}.
