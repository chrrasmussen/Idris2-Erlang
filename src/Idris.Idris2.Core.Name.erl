-module('Idris.Idris2.Core.Name').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--nameEq-11724'/3,
  'with--with block in nameEq-11699'/4,
  'with--nameEq-11680'/5,
  'with--with block in nameEq-11655'/4,
  'with--nameEq-11636'/5,
  'with--with block in nameEq-11616'/4,
  'with--nameEq-11594'/5,
  'with--with block in nameEq-11563'/4,
  'with--nameEq-11552'/5,
  'with--with block in nameEq-11524'/4,
  'with--nameEq-11513'/5,
  'with--with block in nameEq-11488'/4,
  'with--nameEq-11473'/5,
  'with--with block in nameEq-11437'/4,
  'with--nameEq-11426'/5,
  'with--userNameEq-11379'/3,
  'with--userNameEq-11354'/3,
  'with--mkUserName-9215'/2,
  'case--isUnsafeBuiltin-9804'/2,
  'dn--un--show_Show_UserName'/1,
  'dn--un--show_Show_RawUNUserName'/1,
  'dn--un--show_Show_RawName'/1,
  'dn--un--show_Show_Name'/1,
  'dn--un--showPrec_Show_UserName'/2,
  'dn--un--showPrec_Show_RawUNUserName'/2,
  'dn--un--showPrec_Show_RawName'/2,
  'dn--un--showPrec_Show_Name'/2,
  'dn--un--pretty_Pretty_Void_UserName'/1,
  'dn--un--pretty_Pretty_Void_Name'/1,
  'dn--un--prettyPrec_Pretty_Void_UserName'/2,
  'dn--un--prettyPrec_Pretty_Void_Name'/2,
  'dn--un--min_Ord_UserName'/2,
  'dn--un--min_Ord_Name'/2,
  'dn--un--max_Ord_UserName'/2,
  'dn--un--max_Ord_Name'/2,
  'dn--un--compare_Ord_UserName'/2,
  'dn--un--compare_Ord_Name'/2,
  'dn--un--__Impl_Show_UserName'/0,
  'dn--un--__Impl_Show_Name'/0,
  'dn--un--__Impl_Pretty_Void_UserName'/0,
  'dn--un--__Impl_Pretty_Void_Name'/0,
  'dn--un--__Impl_Ord_UserName'/0,
  'dn--un--__Impl_Ord_Name'/0,
  'dn--un--__Impl_Eq_UserName'/0,
  'dn--un--__Impl_Eq_Name'/0,
  'dn--un-->_Ord_UserName'/2,
  'dn--un-->_Ord_Name'/2,
  'dn--un-->=_Ord_UserName'/2,
  'dn--un-->=_Ord_Name'/2,
  'dn--un--==_Eq_UserName'/2,
  'dn--un--==_Eq_Name'/2,
  'dn--un--<_Ord_UserName'/2,
  'dn--un--<_Ord_Name'/2,
  'dn--un--<=_Ord_UserName'/2,
  'dn--un--<=_Ord_Name'/2,
  'dn--un--/=_Eq_UserName'/2,
  'dn--un--/=_Eq_Name'/2,
  'un--usernameTag'/1,
  'un--userNameRoot'/1,
  'un--userNameEq'/2,
  'un--splitNS'/1,
  'un--prettyOp'/2,
  'un--namesEq'/2,
  'un--nameTag'/1,
  'un--nameRoot'/1,
  'un--nameEq'/2,
  'un--mkUserName'/1,
  'un--mkNamespacedName'/2,
  'un--mbApplyNS'/2,
  'un--matches'/2,
  'un--isUserName'/1,
  'un--isUnsafeBuiltin'/1,
  'un--isUnderscoreName'/1,
  'un--isUN'/1,
  'un--isSourceName'/1,
  'un--isRF'/1,
  'un--isPrettyOp'/2,
  'un--isPatternVariable'/1,
  'un--isOpUserName'/1,
  'un--isOpName'/1,
  'un--isOpChar'/1,
  'un--isField'/1,
  'un--isBasic'/1,
  'un--dropNS'/1,
  'un--dropAllNS'/1,
  'un--displayUserName'/1,
  'un--displayName'/1,
  'un--asName'/3,
  'un--RawUN'/0,
  'un--Raw'/0
]).
'with--nameEq-11724'(V0, V1, V2) -> case V2 of {'Prelude.Types.Yes', V3} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V4} -> {'Prelude.Types.Nothing'} end.
'with--with block in nameEq-11699'(V0, V1, V2, V3) -> case V2 of {'Prelude.Types.No', V4} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Yes', V5} -> {'Prelude.Types.Just', {'Builtin.Refl'}} end.
'with--nameEq-11680'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.No', V5} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Yes', V6} -> ('with--with block in nameEq-11699'(V4, V3, ((begin (V9 = fun (V7) -> fun (V8) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'())(V7))(V8)) end end), fun (V10) -> fun (V11) -> ((V9(V10))(V11)) end end end(V3))(V4)), V0)) end.
'with--with block in nameEq-11655'(V0, V1, V2, V3) -> case V2 of {'Prelude.Types.No', V4} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Yes', V5} -> {'Prelude.Types.Just', {'Builtin.Refl'}} end.
'with--nameEq-11636'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.No', V5} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Yes', V6} -> ('with--with block in nameEq-11655'(V4, V3, ((begin (V9 = fun (V7) -> fun (V8) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'())(V7))(V8)) end end), fun (V10) -> fun (V11) -> ((V9(V10))(V11)) end end end(V3))(V4)), V0)) end.
'with--with block in nameEq-11616'(V0, V1, V2, V3) -> case V2 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V4} -> {'Prelude.Types.Just', {'Builtin.Refl'}} end.
'with--nameEq-11594'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.No', V5} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Yes', V6} -> ('with--with block in nameEq-11616'(V4, V3, ('un--nameEq'(V3, V4)), V0)) end.
'with--with block in nameEq-11563'(V0, V1, V2, V3) -> case V2 of {'Prelude.Types.Just', V4} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'} end.
'with--nameEq-11552'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.Yes', V5} -> ('with--with block in nameEq-11563'(V4, V3, ('un--nameEq'(V3, V4)), V0)); {'Prelude.Types.No', V6} -> {'Prelude.Types.Nothing'} end.
'with--with block in nameEq-11524'(V0, V1, V2, V3) -> case V2 of {'Prelude.Types.Yes', V4} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V5} -> {'Prelude.Types.Nothing'} end.
'with--nameEq-11513'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.Just', V5} -> ('with--with block in nameEq-11524'(V4, V3, ((begin (V8 = fun (V6) -> fun (V7) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'())(V6))(V7)) end end), fun (V9) -> fun (V10) -> ((V8(V9))(V10)) end end end(V3))(V4)), V0)); {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'} end.
'with--with block in nameEq-11488'(V0, V1, V2, V3) -> case V2 of {'Prelude.Types.Yes', V4} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V5} -> {'Prelude.Types.Nothing'} end.
'with--nameEq-11473'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.Yes', V5} -> ('with--with block in nameEq-11488'(V4, V3, ((begin (V8 = fun (V6) -> fun (V7) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'())(V6))(V7)) end end), fun (V9) -> fun (V10) -> ((V8(V9))(V10)) end end end(V3))(V4)), V0)); {'Prelude.Types.No', V11} -> {'Prelude.Types.Nothing'} end.
'with--with block in nameEq-11437'(V0, V1, V2, V3) -> case V2 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V4} -> {'Prelude.Types.Just', {'Builtin.Refl'}} end.
'with--nameEq-11426'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.Yes', V5} -> ('with--with block in nameEq-11437'(V4, V3, ('un--nameEq'(V3, V4)), V0)); {'Prelude.Types.No', V6} -> {'Prelude.Types.Nothing'} end.
'with--userNameEq-11379'(V0, V1, V2) -> case V2 of {'Prelude.Types.Yes', V3} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V4} -> {'Prelude.Types.Nothing'} end.
'with--userNameEq-11354'(V0, V1, V2) -> case V2 of {'Prelude.Types.Yes', V3} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V4} -> {'Prelude.Types.Nothing'} end.
'with--mkUserName-9215'(V0, V1) -> case V1 of {'Data.String.StrCons', V2, V3} -> case V2 of $. -> {'Core.Name.Field', V3}; _ -> {'Core.Name.Basic', V0} end; _ -> {'Core.Name.Basic', V0} end.
'case--isUnsafeBuiltin-9804'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Core.Name.UN', V4} -> case V4 of {'Core.Name.Basic', V5} -> case case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V2, ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()))) of 1 -> 1; 0 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V2, ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()))) end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V6, V7)) end end, 0}, fun (V8) -> V8 end, [('Idris.Idris2.Data.String':'un--isPrefixOf'(<<"assert_"/utf8>>, V5)) | [('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V24, V25, V26, V27)) end end end end end end end, fun (V28) -> fun (V29) -> V29 end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V32, V33, V34)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V37, V38)) end end}, V5, [<<"prim__believe_me"/utf8>> | [<<"believe_me"/utf8>> | [<<"prim__crash"/utf8>> | [<<"idris_crash"/utf8>> | []]]]])) | []]])); 0 -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end.
'dn--un--show_Show_UserName'(V0) -> case V0 of {'Core.Name.Basic', V1} -> V1; {'Core.Name.Field', V2} -> <<<<"."/utf8>>/binary, V2/binary>>; {'Core.Name.Underscore'} -> <<"_"/utf8>> end.
'dn--un--show_Show_RawUNUserName'(V0) -> ('dn--un--showPrec_Show_RawUNUserName'({'Prelude.Show.Open'}, V0)).
'dn--un--show_Show_RawName'(V0) -> ('dn--un--showPrec_Show_RawName'({'Prelude.Show.Open'}, V0)).
'dn--un--show_Show_Name'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> case V2 of {'Core.Name.UN', V3} -> case V3 of {'Core.Name.Field', V4} -> <<('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V1))/binary, <<<<".("/utf8>>/binary, <<('dn--un--show_Show_Name'(V2))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>; _ -> <<('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V1))/binary, <<<<"."/utf8>>/binary, ('dn--un--show_Show_Name'(V2))/binary>>/binary>> end; _ -> <<('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V1))/binary, <<<<"."/utf8>>/binary, ('dn--un--show_Show_Name'(V2))/binary>>/binary>> end; {'Core.Name.UN', V5} -> ('dn--un--show_Show_UserName'(V5)); {'Core.Name.MN', V6, V7} -> <<<<"{"/utf8>>/binary, <<V6/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7))/binary, <<"}"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Core.Name.PV', V8, V9} -> <<<<"{P:"/utf8>>/binary, <<('dn--un--show_Show_Name'(V8))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9))/binary, <<"}"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Core.Name.DN', V10, V11} -> V10; {'Core.Name.Nested', V12, V13} -> case V12 of {'Builtin.MkPair', V14, V15} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V14))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15))/binary, <<<<":"/utf8>>/binary, ('dn--un--show_Show_Name'(V13))/binary>>/binary>>/binary>>/binary>> end; {'Core.Name.CaseBlock', V16, V17} -> <<<<"case block in "/utf8>>/binary, V16/binary>>; {'Core.Name.WithBlock', V18, V19} -> <<<<"with block in "/utf8>>/binary, V18/binary>>; {'Core.Name.Resolved', V20} -> <<<<"$resolved"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V20))/binary>> end.
'dn--un--showPrec_Show_UserName'(V0, V1) -> ('dn--un--show_Show_UserName'(V1)).
'dn--un--showPrec_Show_RawUNUserName'(V0, V1) -> case V1 of {'Core.Name.Basic', V2} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Basic "/utf8>>, V2)); {'Core.Name.Field', V3} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Field "/utf8>>, V3)); {'Core.Name.Underscore'} -> <<"Underscore"/utf8>> end.
'dn--un--showPrec_Show_RawName'(V0, V1) -> case V1 of {'Core.Name.NS', V2, V3} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"NS"/utf8>>, <<('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V4) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V4)) end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--showPrec_Show_Namespace'(V5, V6)) end end}, V2))/binary, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V7) -> ('dn--un--show_Show_RawName'(V7)) end, fun (V8) -> fun (V9) -> ('dn--un--showPrec_Show_RawName'(V8, V9)) end end}, V3))/binary>>)); {'Core.Name.UN', V10} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"UN"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V11) -> ('dn--un--show_Show_RawUNUserName'(V11)) end, fun (V12) -> fun (V13) -> ('dn--un--showPrec_Show_RawUNUserName'(V12, V13)) end end}, V10)))); {'Core.Name.MN', V14, V15} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"MN"/utf8>>, <<('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V17, V18)) end end}, V14))/binary, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V19) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19)) end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V20, V21)) end end}, V15))/binary>>)); {'Core.Name.PV', V22, V23} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"PV"/utf8>>, <<('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V24) -> ('dn--un--show_Show_RawName'(V24)) end, fun (V25) -> fun (V26) -> ('dn--un--showPrec_Show_RawName'(V25, V26)) end end}, V22))/binary, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V28, V29)) end end}, V23))/binary>>)); {'Core.Name.DN', V30, V31} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"DN"/utf8>>, <<('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V32) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V32)) end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V33, V34)) end end}, V30))/binary, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V35) -> ('dn--un--show_Show_RawName'(V35)) end, fun (V36) -> fun (V37) -> ('dn--un--showPrec_Show_RawName'(V36, V37)) end end}, V31))/binary>>)); {'Core.Name.Nested', V38, V39} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Nested"/utf8>>, <<('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V40) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V42, V43)) end end}, {'Prelude.Show.MkShow', fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V44)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V45, V46)) end end}}, V40)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V49) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V50, V51)) end end}, {'Prelude.Show.MkShow', fun (V52) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V53, V54)) end end}}, V47, V48)) end end}, V38))/binary, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V55) -> ('dn--un--show_Show_RawName'(V55)) end, fun (V56) -> fun (V57) -> ('dn--un--showPrec_Show_RawName'(V56, V57)) end end}, V39))/binary>>)); {'Core.Name.CaseBlock', V58, V59} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"CaseBlock"/utf8>>, <<('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V60) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V60)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V61, V62)) end end}, V58))/binary, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V64, V65)) end end}, V59))/binary>>)); {'Core.Name.WithBlock', V66, V67} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"WithBlock"/utf8>>, <<('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V68) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V69, V70)) end end}, V66))/binary, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V71) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V72, V73)) end end}, V67))/binary>>)); {'Core.Name.Resolved', V74} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Resolved"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V75) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V75)) end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V76, V77)) end end}, V74)))) end.
'dn--un--showPrec_Show_Name'(V0, V1) -> ('dn--un--show_Show_Name'(V1)).
'dn--un--pretty_Pretty_Void_UserName'(V0) -> case V0 of {'Core.Name.Basic', V1} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V1)); {'Core.Name.Field', V2} -> ((begin (V8 = fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V6, V7)) end end), fun (V9) -> fun (V10) -> ((V8(V9))(V10)) end end end((begin (V4 = fun (V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V3)) end), fun (V5) -> (V4(V5)) end end(<<"."/utf8>>))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V2)))); {'Core.Name.Underscore'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V11) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V12)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V13) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V13)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V14) -> fun (V15) -> case case (V14 =:= V15) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V11)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> [V17 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V18))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V11)); 0 -> V11 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V19} -> case V19 of {'Builtin.MkPair', V20, V21} -> [V20 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V21))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V22) -> fun (V23) -> case case (V22 =:= V23) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V11)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V24} -> case V24 of {'Builtin.MkPair', V25, V26} -> [V25 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V26))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V11)); 0 -> V11 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V27} -> case V27 of {'Builtin.MkPair', V28, V29} -> [V28 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V29))] end end)))))))) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V32) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V32)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V33) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V33)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V34) -> fun (V35) -> case case (V34 =:= V35) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V31)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V36} -> case V36 of {'Builtin.MkPair', V37, V38} -> [V37 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V38))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V31)); 0 -> V31 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V39} -> case V39 of {'Builtin.MkPair', V40, V41} -> [V40 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V41))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V42) -> fun (V43) -> case case (V42 =:= V43) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V31)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V44} -> case V44 of {'Builtin.MkPair', V45, V46} -> [V45 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V46))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V31)); 0 -> V31 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V47} -> case V47 of {'Builtin.MkPair', V48, V49} -> [V48 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V49))] end end)))))))) end end}, <<"_"/utf8>>)) end.
'dn--un--pretty_Pretty_Void_Name'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(((begin (V5 = fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V3, V4)) end end), fun (V6) -> fun (V7) -> ((V5(V6))(V7)) end end end(('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_Void_Namespace'(V1))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dot'()))), ('un--prettyOp'(1, V2)))); {'Core.Name.UN', V8} -> ('dn--un--pretty_Pretty_Void_UserName'(V8)); {'Core.Name.MN', V9, V10} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--braces'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(((begin (V13 = fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V11, V12)) end end), fun (V14) -> fun (V15) -> ((V13(V14))(V15)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V9))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V17, V18)) end end}, V10)))))); {'Core.Name.PV', V19, V20} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--braces'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(((begin (V31 = fun (V29) -> fun (V30) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V29, V30)) end end), fun (V32) -> fun (V33) -> ((V31(V32))(V33)) end end end(((begin (V26 = fun (V24) -> fun (V25) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V24, V25)) end end), fun (V27) -> fun (V28) -> ((V26(V27))(V28)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_Char'((begin (V22 = fun (V21) -> V21 end), fun (V23) -> (V22(V23)) end end($P))))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'())))))(('dn--un--pretty_Pretty_Void_Name'(V19)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V35, V36)) end end}, V20)))))); {'Core.Name.DN', V37, V38} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V37)); {'Core.Name.Nested', V39, V40} -> case V39 of {'Builtin.MkPair', V41, V42} -> ((begin (V66 = fun (V64) -> fun (V65) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V64, V65)) end end), fun (V67) -> fun (V68) -> ((V66(V67))(V68)) end end end(((begin (V61 = fun (V59) -> fun (V60) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V59, V60)) end end), fun (V62) -> fun (V63) -> ((V61(V62))(V63)) end end end(((begin (V56 = fun (V54) -> fun (V55) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V54, V55)) end end), fun (V57) -> fun (V58) -> ((V56(V57))(V58)) end end end(((begin (V51 = fun (V49) -> fun (V50) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V49, V50)) end end), fun (V52) -> fun (V53) -> ((V51(V52))(V53)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V46) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V46)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V47, V48)) end end}, V41))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'())))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V43) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V43)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V44, V45)) end end}, V42))))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'())))))(('dn--un--pretty_Pretty_Void_Name'(V40)))) end; {'Core.Name.CaseBlock', V69, V70} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"case block in"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V69)))); {'Core.Name.WithBlock', V71, V72} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"with block in"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V71)))); {'Core.Name.Resolved', V73} -> ((begin (V79 = fun (V77) -> fun (V78) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V77, V78)) end end), fun (V80) -> fun (V81) -> ((V79(V80))(V81)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V75 = fun (V74) -> V74 end), fun (V76) -> (V75(V76)) end end(<<"$resolved"/utf8>>))))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V73)))))) end.
'dn--un--prettyPrec_Pretty_Void_UserName'(V0, V1) -> ('dn--un--pretty_Pretty_Void_UserName'(V1)).
'dn--un--prettyPrec_Pretty_Void_Name'(V0, V1) -> ('dn--un--pretty_Pretty_Void_Name'(V1)).
'dn--un--min_Ord_UserName'(V0, V1) -> case ('dn--un--<_Ord_UserName'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--min_Ord_Name'(V0, V1) -> case ('dn--un--<_Ord_Name'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_UserName'(V0, V1) -> case ('dn--un-->_Ord_UserName'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_Name'(V0, V1) -> case ('dn--un-->_Ord_Name'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--compare_Ord_UserName'(V0, V1) -> case V0 of {'Core.Name.Basic', V2} -> case V1 of {'Core.Name.Basic', V3} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V2, V3)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--usernameTag'(V0)), ('un--usernameTag'(V1)))) end; {'Core.Name.Field', V4} -> case V1 of {'Core.Name.Field', V5} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V4, V5)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--usernameTag'(V0)), ('un--usernameTag'(V1)))) end; {'Core.Name.Underscore'} -> case V1 of {'Core.Name.Underscore'} -> 1; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--usernameTag'(V0)), ('un--usernameTag'(V1)))) end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--usernameTag'(V0)), ('un--usernameTag'(V1)))) end.
'dn--un--compare_Ord_Name'(V0, V1) -> case V0 of {'Core.Name.NS', V2, V3} -> case V1 of {'Core.Name.NS', V4, V5} -> case ('dn--un--compare_Ord_Name'(V3, V5)) of 1 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--compare_Ord_Namespace'(V2, V4)); 2 -> 2; 0 -> 0 end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end; {'Core.Name.UN', V6} -> case V1 of {'Core.Name.UN', V7} -> ('dn--un--compare_Ord_UserName'(V6, V7)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end; {'Core.Name.MN', V8, V9} -> case V1 of {'Core.Name.MN', V10, V11} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V9, V11)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V8, V10)); 2 -> 2; 0 -> 0 end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end; {'Core.Name.PV', V12, V13} -> case V1 of {'Core.Name.PV', V14, V15} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V13, V15)) of 1 -> ('dn--un--compare_Ord_Name'(V12, V14)); 2 -> 2; 0 -> 0 end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end; {'Core.Name.DN', V16, V17} -> case V1 of {'Core.Name.DN', V18, V19} -> ('dn--un--compare_Ord_Name'(V17, V19)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end; {'Core.Name.Nested', V20, V21} -> case V1 of {'Core.Name.Nested', V22, V23} -> case ('dn--un--compare_Ord_Name'(V21, V23)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V26, V27)) end end}, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V40, V41)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V44, V45)) end end}, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V58, V59)) end end}, V20, V22)); 2 -> 2; 0 -> 0 end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end; {'Core.Name.CaseBlock', V60, V61} -> case V1 of {'Core.Name.CaseBlock', V62, V63} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V61, V63)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V60, V62)); 2 -> 2; 0 -> 0 end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end; {'Core.Name.WithBlock', V64, V65} -> case V1 of {'Core.Name.WithBlock', V66, V67} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V65, V67)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V64, V66)); 2 -> 2; 0 -> 0 end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end; {'Core.Name.Resolved', V68} -> case V1 of {'Core.Name.Resolved', V69} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V68, V69)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end.
'dn--un--__Impl_Show_UserName'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_UserName'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_UserName'(V1, V2)) end end}.
'dn--un--__Impl_Show_Name'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Name'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Name'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_UserName'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_UserName'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_UserName'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_Name'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_Name'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_Name'(V1, V2)) end end}.
'dn--un--__Impl_Ord_UserName'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_UserName'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_UserName'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_UserName'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_UserName'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_UserName'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_UserName'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_UserName'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_UserName'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_UserName'(V16, V17)) end end}.
'dn--un--__Impl_Ord_Name'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Name'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Name'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_Name'(V16, V17)) end end}.
'dn--un--__Impl_Eq_UserName'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_UserName'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_UserName'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Name'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Name'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Name'(V2, V3)) end end}.
'dn--un-->_Ord_UserName'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_UserName'(V0, V1)), 2)).
'dn--un-->_Ord_Name'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Name'(V0, V1)), 2)).
'dn--un-->=_Ord_UserName'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_UserName'(V0, V1)), 0)).
'dn--un-->=_Ord_Name'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Name'(V0, V1)), 0)).
'dn--un--==_Eq_UserName'(V0, V1) -> case V0 of {'Core.Name.Basic', V2} -> case V1 of {'Core.Name.Basic', V3} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)); _ -> 0 end; {'Core.Name.Field', V4} -> case V1 of {'Core.Name.Field', V5} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, V5)); _ -> 0 end; {'Core.Name.Underscore'} -> case V1 of {'Core.Name.Underscore'} -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_Name'(V0, V1) -> case V0 of {'Core.Name.NS', V2, V3} -> case V1 of {'Core.Name.NS', V4, V5} -> case ('dn--un--==_Eq_Name'(V3, V5)) of 1 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V2, V4)); 0 -> 0 end; _ -> 0 end; {'Core.Name.UN', V6} -> case V1 of {'Core.Name.UN', V7} -> ('dn--un--==_Eq_UserName'(V6, V7)); _ -> 0 end; {'Core.Name.MN', V8, V9} -> case V1 of {'Core.Name.MN', V10, V11} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V9, V11)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V8, V10)); 0 -> 0 end; _ -> 0 end; {'Core.Name.PV', V12, V13} -> case V1 of {'Core.Name.PV', V14, V15} -> case ('dn--un--==_Eq_Name'(V12, V14)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V13, V15)); 0 -> 0 end; _ -> 0 end; {'Core.Name.DN', V16, V17} -> case V1 of {'Core.Name.DN', V18, V19} -> ('dn--un--==_Eq_Name'(V17, V19)); _ -> 0 end; {'Core.Name.Nested', V20, V21} -> case V1 of {'Core.Name.Nested', V22, V23} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V26, V27)) end end}, {'Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V30, V31)) end end}, V20, V22)) of 1 -> ('dn--un--==_Eq_Name'(V21, V23)); 0 -> 0 end; _ -> 0 end; {'Core.Name.CaseBlock', V32, V33} -> case V1 of {'Core.Name.CaseBlock', V34, V35} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V33, V35)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V32, V34)); 0 -> 0 end; _ -> 0 end; {'Core.Name.WithBlock', V36, V37} -> case V1 of {'Core.Name.WithBlock', V38, V39} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V37, V39)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V36, V38)); 0 -> 0 end; _ -> 0 end; {'Core.Name.Resolved', V40} -> case V1 of {'Core.Name.Resolved', V41} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V40, V41)); _ -> 0 end; _ -> 0 end.
'dn--un--<_Ord_UserName'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_UserName'(V0, V1)), 0)).
'dn--un--<_Ord_Name'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Name'(V0, V1)), 0)).
'dn--un--<=_Ord_UserName'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_UserName'(V0, V1)), 2)).
'dn--un--<=_Ord_Name'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Name'(V0, V1)), 2)).
'dn--un--/=_Eq_UserName'(V0, V1) -> case ('dn--un--==_Eq_UserName'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_Name'(V0, V1) -> case ('dn--un--==_Eq_Name'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--usernameTag'(V0) -> case V0 of {'Core.Name.Basic', V1} -> 0; {'Core.Name.Field', V2} -> 2; {'Core.Name.Underscore'} -> 3 end.
'un--userNameRoot'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> ('un--userNameRoot'(V2)); {'Core.Name.UN', V3} -> {'Prelude.Types.Just', V3}; {'Core.Name.DN', V4, V5} -> ('un--userNameRoot'(V5)); _ -> {'Prelude.Types.Nothing'} end.
'un--userNameEq'(V0, V1) -> case V0 of {'Core.Name.Basic', V2} -> case V1 of {'Core.Name.Basic', V3} -> ('with--userNameEq-11354'(V2, V3, ((begin (V6 = fun (V4) -> fun (V5) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'())(V4))(V5)) end end), fun (V7) -> fun (V8) -> ((V6(V7))(V8)) end end end(V2))(V3)))); _ -> {'Prelude.Types.Nothing'} end; {'Core.Name.Field', V9} -> case V1 of {'Core.Name.Field', V10} -> ('with--userNameEq-11379'(V9, V10, ((begin (V13 = fun (V11) -> fun (V12) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'())(V11))(V12)) end end), fun (V14) -> fun (V15) -> ((V13(V14))(V15)) end end end(V9))(V10)))); _ -> {'Prelude.Types.Nothing'} end; {'Core.Name.Underscore'} -> case V1 of {'Core.Name.Underscore'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--splitNS'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> case ('un--splitNS'(V2)) of {'Builtin.MkPair', V3, V4} -> {'Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V1, V3)), V4} end; _ -> {'Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V0} end.
'un--prettyOp'(V0, V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parenthesise'(('un--isPrettyOp'(V0, V1)), ('dn--un--pretty_Pretty_Void_Name'(V1)))).
'un--namesEq'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V2, V3) -> case V1 of [E2 | E3] -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--nameEq'(V2, V4)), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--namesEq'(V3, V5)), fun (V7) -> {'Prelude.Types.Just', {'Builtin.Refl'}} end)) end)) end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end.
'un--nameTag'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> 0; {'Core.Name.UN', V3} -> 1; {'Core.Name.MN', V4, V5} -> 2; {'Core.Name.PV', V6, V7} -> 3; {'Core.Name.DN', V8, V9} -> 4; {'Core.Name.Nested', V10, V11} -> 6; {'Core.Name.CaseBlock', V12, V13} -> 7; {'Core.Name.WithBlock', V14, V15} -> 8; {'Core.Name.Resolved', V16} -> 9 end.
'un--nameRoot'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> ('un--nameRoot'(V2)); {'Core.Name.UN', V3} -> ('un--displayUserName'(V3)); {'Core.Name.MN', V4, V5} -> V4; {'Core.Name.PV', V6, V7} -> ('un--nameRoot'(V6)); {'Core.Name.DN', V8, V9} -> ('un--nameRoot'(V9)); {'Core.Name.Nested', V10, V11} -> ('un--nameRoot'(V11)); {'Core.Name.CaseBlock', V12, V13} -> <<<<"$"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V12))/binary>>; {'Core.Name.WithBlock', V14, V15} -> <<<<"$"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V14))/binary>>; {'Core.Name.Resolved', V16} -> <<<<"$"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V16))/binary>> end.
'un--nameEq'(V0, V1) -> case V0 of {'Core.Name.NS', V2, V3} -> case V1 of {'Core.Name.NS', V4, V5} -> ('with--nameEq-11426'(V2, V4, ('Idris.Idris2.Core.Name.Namespace':'dn--un--decEq_DecEq_Namespace'(V2, V4)), V3, V5)); _ -> {'Prelude.Types.Nothing'} end; {'Core.Name.UN', V6} -> case V1 of {'Core.Name.UN', V7} -> ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> {'Builtin.Refl'} end))(('un--userNameEq'(V6, V7)))); _ -> {'Prelude.Types.Nothing'} end; {'Core.Name.MN', V16, V17} -> case V1 of {'Core.Name.MN', V18, V19} -> ('with--nameEq-11473'(V16, V18, ((begin (V22 = fun (V20) -> fun (V21) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'())(V20))(V21)) end end), fun (V23) -> fun (V24) -> ((V22(V23))(V24)) end end end(V16))(V18)), V17, V19)); _ -> {'Prelude.Types.Nothing'} end; {'Core.Name.PV', V25, V26} -> case V1 of {'Core.Name.PV', V27, V28} -> ('with--nameEq-11513'(V25, V27, ('un--nameEq'(V25, V27)), V26, V28)); _ -> {'Prelude.Types.Nothing'} end; {'Core.Name.DN', V29, V30} -> case V1 of {'Core.Name.DN', V31, V32} -> ('with--nameEq-11552'(V29, V31, ((begin (V35 = fun (V33) -> fun (V34) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'())(V33))(V34)) end end), fun (V36) -> fun (V37) -> ((V35(V36))(V37)) end end end(V29))(V31)), V30, V32)); _ -> {'Prelude.Types.Nothing'} end; {'Core.Name.Nested', V38, V39} -> case V1 of {'Core.Name.Nested', V40, V41} -> ('with--nameEq-11594'(V38, V40, ((begin (V48 = fun (V42) -> fun (V43) -> ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V44) -> fun (V45) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'())(V44))(V45)) end end, fun (V46) -> fun (V47) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'())(V46))(V47)) end end}, V42, V43)) end end), fun (V49) -> fun (V50) -> ((V48(V49))(V50)) end end end(V38))(V40)), V39, V41)); _ -> {'Prelude.Types.Nothing'} end; {'Core.Name.CaseBlock', V51, V52} -> case V1 of {'Core.Name.CaseBlock', V53, V54} -> ('with--nameEq-11636'(V51, V53, ((begin (V57 = fun (V55) -> fun (V56) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'())(V55))(V56)) end end), fun (V58) -> fun (V59) -> ((V57(V58))(V59)) end end end(V51))(V53)), V52, V54)); _ -> {'Prelude.Types.Nothing'} end; {'Core.Name.WithBlock', V60, V61} -> case V1 of {'Core.Name.WithBlock', V62, V63} -> ('with--nameEq-11680'(V60, V62, ((begin (V66 = fun (V64) -> fun (V65) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'())(V64))(V65)) end end), fun (V67) -> fun (V68) -> ((V66(V67))(V68)) end end end(V60))(V62)), V61, V63)); _ -> {'Prelude.Types.Nothing'} end; {'Core.Name.Resolved', V69} -> case V1 of {'Core.Name.Resolved', V70} -> ('with--nameEq-11724'(V69, V70, ((begin (V73 = fun (V71) -> fun (V72) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'())(V71))(V72)) end end), fun (V74) -> fun (V75) -> ((V73(V74))(V75)) end end end(V69))(V70)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--mkUserName'(V0) -> case V0 of <<"_"/utf8>> -> {'Core.Name.Underscore'}; _ -> ('with--mkUserName-9215'(V0, ('Idris.Idris2.Data.String':'un--strM'(V0)))) end.
'un--mkNamespacedName'(V0, V1) -> case V0 of {'Prelude.Types.Nothing'} -> {'Core.Name.UN', V1}; {'Prelude.Types.Just', V2} -> {'Core.Name.NS', V2, {'Core.Name.UN', V1}} end.
'un--mbApplyNS'(V0, V1) -> case V0 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V2} -> {'Core.Name.NS', V2, V1} end.
'un--matches'(V0, V1) -> case V0 of {'Core.Name.NS', V2, V3} -> case V1 of {'Core.Name.NS', V4, V5} -> ('Idris.Idris2.Core.Name.Namespace':'un--isApproximationOf'(V2, V4)); _ -> 1 end; _ -> 1 end.
'un--isUserName'(V0) -> case V0 of {'Core.Name.PV', V1, V2} -> 0; {'Core.Name.MN', V3, V4} -> 0; {'Core.Name.NS', V5, V6} -> ('un--isUserName'(V6)); {'Core.Name.DN', V7, V8} -> ('un--isUserName'(V8)); _ -> 1 end.
'un--isUnsafeBuiltin'(V0) -> ('case--isUnsafeBuiltin-9804'(V0, ('un--splitNS'(V0)))).
'un--isUnderscoreName'(V0) -> case V0 of {'Core.Name.UN', V1} -> case V1 of {'Core.Name.Underscore'} -> 1; _ -> 0 end; {'Core.Name.MN', V2, V3} -> case V2 of <<"_"/utf8>> -> 1; _ -> 0 end; _ -> 0 end.
'un--isUN'(V0) -> case V0 of {'Core.Name.UN', V1} -> {'Prelude.Types.Just', {'Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V1}}; {'Core.Name.NS', V2, V3} -> ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> {'Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V2, V5)), V6} end end))(('un--isUN'(V3)))); _ -> {'Prelude.Types.Nothing'} end.
'un--isSourceName'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> ('un--isSourceName'(V2)); {'Core.Name.UN', V3} -> 1; {'Core.Name.MN', V4, V5} -> 0; {'Core.Name.PV', V6, V7} -> ('un--isSourceName'(V6)); {'Core.Name.DN', V8, V9} -> ('un--isSourceName'(V9)); {'Core.Name.Nested', V10, V11} -> ('un--isSourceName'(V11)); {'Core.Name.CaseBlock', V12, V13} -> 0; {'Core.Name.WithBlock', V14, V15} -> 0; {'Core.Name.Resolved', V16} -> 0 end.
'un--isRF'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> {'Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V1, V4)), V5} end end))(('un--isRF'(V2)))); {'Core.Name.UN', V13} -> case V13 of {'Core.Name.Field', V14} -> {'Prelude.Types.Just', {'Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V14}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--isPrettyOp'(V0, V1) -> case V1 of {'Core.Name.UN', V2} -> case V2 of {'Core.Name.Field', V3} -> V0; {'Core.Name.Basic', V4} -> ('un--isOpUserName'(V2)); _ -> 0 end; {'Core.Name.DN', V5, V6} -> ('un--isOpUserName'({'Core.Name.Basic', V5})); _ -> 0 end.
'un--isPatternVariable'(V0) -> case V0 of {'Core.Name.Basic', V1} -> ('Idris.Idris2.Libraries.Utils.String':'un--lowerFirst'(V1)); {'Core.Name.Field', V2} -> 0; {'Core.Name.Underscore'} -> 1 end.
'un--isOpUserName'(V0) -> case V0 of {'Core.Name.Basic', V1} -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 0 end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('Idris.Idris2.Builtin':'un--fst'(V2)) end))(('Idris.Idris2.Prelude.Types':'un--strUncons'(V1)))), fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V13, V14)) end end end end, fun (V15) -> fun (V16) -> {'Prelude.Types.Just', V16} end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V19, V20)) end end end end}, fun (V21) -> {'Prelude.Types.Nothing'} end, fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V23, V24)) end end end}, ('un--isOpChar'(V10)))), fun (V25) -> {'Prelude.Types.Just', 1} end)) end)))); {'Core.Name.Field', V26} -> 0; {'Core.Name.Underscore'} -> 0 end.
'un--isOpName'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V1) -> ('un--isOpUserName'(V1)) end end, ('un--userNameRoot'(V0)))).
'un--isOpChar'(V0) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> V21 end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V29, V30)) end end}, V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(<<":!#$%&*+./<=>?@\x{5c}^|-~"/utf8>>)))).
'un--isField'(V0) -> case V0 of {'Core.Name.Field', V1} -> {'Prelude.Types.Just', V1}; _ -> {'Prelude.Types.Nothing'} end.
'un--isBasic'(V0) -> case V0 of {'Core.Name.Basic', V1} -> {'Prelude.Types.Just', V1}; _ -> {'Prelude.Types.Nothing'} end.
'un--dropNS'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> V2; _ -> V0 end.
'un--dropAllNS'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> ('un--dropAllNS'(V2)); _ -> V0 end.
'un--displayUserName'(V0) -> case V0 of {'Core.Name.Basic', V1} -> V1; {'Core.Name.Field', V2} -> V2; {'Core.Name.Underscore'} -> <<"_"/utf8>> end.
'un--displayName'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> case ('un--displayName'(V2)) of {'Builtin.MkPair', V3, V4} -> {'Builtin.MkPair', {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V5) -> ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V1, V5)) end end, V3))}, V4} end; {'Core.Name.UN', V6} -> {'Builtin.MkPair', {'Prelude.Types.Nothing'}, ('un--displayUserName'(V6))}; {'Core.Name.MN', V7, V8} -> {'Builtin.MkPair', {'Prelude.Types.Nothing'}, V7}; {'Core.Name.PV', V9, V10} -> ('un--displayName'(V9)); {'Core.Name.DN', V11, V12} -> {'Builtin.MkPair', {'Prelude.Types.Nothing'}, V11}; {'Core.Name.Nested', V13, V14} -> ('un--displayName'(V14)); {'Core.Name.CaseBlock', V15, V16} -> {'Builtin.MkPair', {'Prelude.Types.Nothing'}, <<<<"case block in "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V15))/binary>>}; {'Core.Name.WithBlock', V17, V18} -> {'Builtin.MkPair', {'Prelude.Types.Nothing'}, <<<<"with block in "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V17))/binary>>}; {'Core.Name.Resolved', V19} -> {'Builtin.MkPair', {'Prelude.Types.Nothing'}, <<<<"$resolved"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19))/binary>>} end.
'un--asName'(V0, V1, V2) -> case V2 of {'Core.Name.DN', V3, V4} -> {'Core.Name.DN', V3, ('un--asName'(V0, V1, V4))}; {'Core.Name.NS', V5, V6} -> {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--replace'(V0, V1, V5)), V6}; _ -> V2 end.
'un--RawUN'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_RawUNUserName'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_RawUNUserName'(V1, V2)) end end}.
'un--Raw'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_RawName'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_RawName'(V1, V2)) end end}.
