-module('Idris.Idris2.Core.Context.Log').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8130-3454--in--un--showTimeLog'/2,
  'nested--8130-3453--in--un--addZeros'/2,
  'nested--7549-2936--in--un--addZeros'/6,
  'nested--7407-2788--in--un--addZeros'/4,
  'un--unverifiedLogging'/3,
  'un--unverifiedLogC'/4,
  'un--showTimeRecord'/1,
  'un--nano'/0,
  'un--micro'/0,
  'un--logging\x{27}'/2,
  'un--logging'/3,
  'un--logTimeWhen'/5,
  'un--logTimeRecord\x{27}'/3,
  'un--logTimeRecord'/3,
  'un--logTimeOver'/3,
  'un--logTime'/4,
  'un--logTerm'/6,
  'un--logString\x{27}'/3,
  'un--logString'/4,
  'un--logC'/4,
  'un--log\x{27}'/3,
  'un--log'/4
]).
'nested--8130-3454--in--un--showTimeLog'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V8 = fun (V6) -> begin (V7 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<V2/binary, <<": "/utf8>>/binary>>, V6))), {'Prelude.Types.Right', V7} end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V15 = fun (V13) -> begin (V14 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V5, ('un--nano'())))))/binary, <<<<"."/utf8>>/binary, <<('nested--8130-3453--in--un--addZeros'(V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V5, ('un--nano'()))), ('un--micro'())))))))))/binary, <<"s"/utf8>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V13))), {'Prelude.Types.Right', V14} end end), V15 end(V9)) end end end end end end.
'nested--8130-3453--in--un--addZeros'(V0, V1) -> case V1 of [] -> <<"000"/utf8>>; [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> <<<<"00"/utf8>>/binary, ('unicode':'characters_to_binary'([V2 | []]))/binary>>; [E2 | E3] -> (fun (V4, V5) -> case V5 of [] -> <<<<"0"/utf8>>/binary, <<('unicode':'characters_to_binary'([V2 | []]))/binary, ('unicode':'characters_to_binary'([V4 | []]))/binary>>/binary>>; _ -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V1)) end end(E2, E3)); _ -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V1)) end end(E0, E1)); _ -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V1)) end.
'nested--7549-2936--in--un--addZeros'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> <<"000"/utf8>>; [E0 | E1] -> (fun (V6, V7) -> case V7 of [] -> <<<<"00"/utf8>>/binary, ('unicode':'characters_to_binary'([V6 | []]))/binary>>; [E2 | E3] -> (fun (V8, V9) -> case V9 of [] -> <<<<"0"/utf8>>/binary, <<('unicode':'characters_to_binary'([V6 | []]))/binary, ('unicode':'characters_to_binary'([V8 | []]))/binary>>/binary>>; _ -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V5)) end end(E2, E3)); _ -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V5)) end end(E0, E1)); _ -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V5)) end.
'nested--7407-2788--in--un--addZeros'(V0, V1, V2, V3) -> case V3 of [] -> <<"000"/utf8>>; [E0 | E1] -> (fun (V4, V5) -> case V5 of [] -> <<<<"00"/utf8>>/binary, ('unicode':'characters_to_binary'([V4 | []]))/binary>>; [E2 | E3] -> (fun (V6, V7) -> case V7 of [] -> <<<<"0"/utf8>>/binary, <<('unicode':'characters_to_binary'([V4 | []]))/binary, ('unicode':'characters_to_binary'([V6 | []]))/binary>>/binary>>; _ -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V3)) end end(E2, E3)); _ -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V3)) end end(E0, E1)); _ -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V3)) end.
'un--unverifiedLogging'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> {'Prelude.Types.Right', 1} end; _ -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V62 = fun (V9) -> {'Prelude.Types.Right', case case V8 of {'Core.Options.MkSessionOpts', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} -> V20 end of 1 -> ('Idris.Idris2.Core.Options.Log':'un--keepLog'(('Idris.Idris2.Core.Options.Log':'un--mkUnverifiedLogLevel'(V1, V2)), case V8 of {'Core.Options.MkSessionOpts', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61} -> V47 end)); 0 -> 0 end} end), V62 end(V5)) end end end end end.
'un--unverifiedLogC'(V0, V1, V2, V3) -> begin (V4 = ('un--unverifiedLogging'(V0, V1, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V19 = case V8 of 1 -> begin (V9 = V3), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V17 = fun (V14) -> case V1 of <<""/utf8>> -> begin (V15 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, V13/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V14))), {'Prelude.Types.Right', V15} end; _ -> begin (V16 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V1/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, V13/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V14))), {'Prelude.Types.Right', V16} end end end), V17 end(V10)) end end end end; 0 -> fun (V18) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V19 end(V5)) end end end end.
'un--showTimeRecord'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V44 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V11) -> ('nested--8130-3454--in--un--showTimeLog'(V0, V11)) end, ('Idris.Idris2.Libraries.Data.StringMap':'un--toList'(case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V39 end))))), V44 end(V7)) end end end end.
'un--nano'() -> 1000000000.
'un--micro'() -> 1000000.
'un--logging\x{27}'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V60 = fun (V7) -> {'Prelude.Types.Right', case case (('Idris.Idris2.Core.Options.Log':'un--verbosity'(V1)) =:= 0) of 'false' -> 0; _ -> 1 end of 1 -> 1; 0 -> case case V6 of {'Core.Options.MkSessionOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V18 end of 1 -> ('Idris.Idris2.Core.Options.Log':'un--keepLog'(V1, case V6 of {'Core.Options.MkSessionOpts', V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> V45 end)); 0 -> 0 end end} end), V60 end(V3)) end end end end.
'un--logging'(V0, V1, V2) -> ('un--unverifiedLogging'(V0, V1, V2)).
'un--logTimeWhen'(V0, V1, V2, V3, V4) -> case V1 of 1 -> begin (V7 = fun (V5) -> begin (V6 = ('Idris.Idris2.System.Clock':'un--clockTime'(3, V5))), {'Prelude.Types.Right', V6} end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V45 = begin (V12 = ((('Idris.Idris2.System.Clock':'un--seconds'(V11)) * ('un--nano'())) + ('Idris.Idris2.System.Clock':'un--nanoseconds'(V11)))), begin (V13 = V4), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V44 = begin (V20 = fun (V18) -> begin (V19 = ('Idris.Idris2.System.Clock':'un--clockTime'(3, V18))), {'Prelude.Types.Right', V19} end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V43 = begin (V25 = ((('Idris.Idris2.System.Clock':'un--seconds'(V24)) * ('un--nano'())) + ('Idris.Idris2.System.Clock':'un--nanoseconds'(V24)))), begin (V26 = (V25 - V12)), begin (V36 = fun (V27) -> begin (V35 = begin (V34 = <<<<"TIMING "/utf8>>/binary, <<('Idris.Idris2.Data.String':'un--replicate'(V2, $+))/binary, case ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(0, V2)) of 1 -> (begin (V29 = fun (V28) -> V28 end), fun (V30) -> (V29(V30)) end end(<<" "/utf8>>)); 0 -> (begin (V32 = fun (V31) -> V31 end), fun (V33) -> (V32(V33)) end end(<<""/utf8>>)) end/binary>>/binary>>), ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<V34/binary, <<(V3())/binary, <<<<": "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V26, ('un--nano'())))))/binary, <<<<"."/utf8>>/binary, <<('nested--7549-2936--in--un--addZeros'(V4, V3, V2, V1, V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V26, ('un--nano'()))), ('un--micro'())))))))))/binary, <<"s"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V27)) end), {'Prelude.Types.Right', V35} end end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V42 = fun (V41) -> {'Prelude.Types.Right', V17} end), V42 end(V37)) end end end end end end), V43 end(V21)) end end end end), V44 end(V14)) end end end end end), V45 end(V8)) end end end end; 0 -> V4 end.
'un--logTimeRecord\x{27}'(V0, V1, V2) -> begin (V5 = fun (V3) -> begin (V4 = ('Idris.Idris2.System.Clock':'un--clockTime'(3, V3))), {'Prelude.Types.Right', V4} end end), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V118 = begin (V10 = ((('Idris.Idris2.System.Clock':'un--seconds'(V9)) * ('un--nano'())) + ('Idris.Idris2.System.Clock':'un--nanoseconds'(V9)))), begin (V11 = V2), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V117 = begin (V18 = fun (V16) -> begin (V17 = ('Idris.Idris2.System.Clock':'un--clockTime'(3, V16))), {'Prelude.Types.Right', V17} end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V116 = begin (V23 = ((('Idris.Idris2.System.Clock':'un--seconds'(V22)) * ('un--nano'())) + ('Idris.Idris2.System.Clock':'un--nanoseconds'(V22)))), begin (V24 = (V23 - V10)), begin (V30 = begin (V25 = V0), fun (V26) -> begin (V29 = (begin (V27 = V25), fun (V28) -> ('erlang':'get'(V27)) end end(V26))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V115 = begin (V70 = case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V1, case V34 of {'Core.Context.MkDefs', V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} -> V62 end)) of {'Prelude.Types.Nothing'} -> 0; {'Prelude.Types.Just', V67} -> case V67 of {'Builtin.MkPair', V68, V69} -> V69 end end), begin (V108 = begin (V71 = V0), fun (V72) -> begin (V107 = (begin (V73 = V71), fun (V74) -> ('erlang':'put'(V73, case V34 of {'Core.Context.MkDefs', V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106} -> {'Core.Context.MkDefs', V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V1, {'Builtin.MkPair', 0, (V70 + V24)}, V102)), V103, V104, V105, V106} end)) end end(V72))), {'Prelude.Types.Right', V107} end end end), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V114 = fun (V113) -> {'Prelude.Types.Right', V15} end), V114 end(V109)) end end end end end), V115 end(V31)) end end end end end end), V116 end(V19)) end end end end), V117 end(V12)) end end end end end), V118 end(V6)) end end end end.
'un--logTimeRecord'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V91 = case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V1, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V40 end)) of {'Prelude.Types.Just', V45} -> case V45 of {'Builtin.MkPair', V46, V47} -> case V46 of 1 -> V2; 0 -> begin (V85 = begin (V48 = V0), fun (V49) -> begin (V84 = (begin (V50 = V48), fun (V51) -> ('erlang':'put'(V50, case V12 of {'Core.Context.MkDefs', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> {'Core.Context.MkDefs', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V1, {'Builtin.MkPair', 1, V47}, V79)), V80, V81, V82, V83} end)) end end(V49))), {'Prelude.Types.Right', V84} end end end), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V90 = ('un--logTimeRecord\x{27}'(V0, V1, V2))), V90 end(V86)) end end end end end end; {'Prelude.Types.Nothing'} -> ('un--logTimeRecord\x{27}'(V0, V1, V2)) end), V91 end(V9)) end end end end.
'un--logTimeOver'(V0, V1, V2) -> begin (V5 = fun (V3) -> begin (V4 = ('Idris.Idris2.System.Clock':'un--clockTime'(3, V3))), {'Prelude.Types.Right', V4} end end), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V43 = begin (V10 = ((('Idris.Idris2.System.Clock':'un--seconds'(V9)) * ('un--nano'())) + ('Idris.Idris2.System.Clock':'un--nanoseconds'(V9)))), begin (V11 = V2), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V42 = begin (V18 = fun (V16) -> begin (V17 = ('Idris.Idris2.System.Clock':'un--clockTime'(3, V16))), {'Prelude.Types.Right', V17} end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V41 = begin (V23 = ((('Idris.Idris2.System.Clock':'un--seconds'(V22)) * ('un--nano'())) + ('Idris.Idris2.System.Clock':'un--nanoseconds'(V22)))), begin (V24 = (V23 - V10)), begin (V34 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V24, V0)) of 1 -> begin (V25 = V1), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V32 = fun (V30) -> begin (V31 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"TIMING "/utf8>>/binary, <<V29/binary, <<<<": "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V24, ('un--nano'())))))/binary, <<<<"."/utf8>>/binary, <<('nested--7407-2788--in--un--addZeros'(V2, V1, V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V24, ('un--nano'()))), ('un--micro'())))))))))/binary, <<"s"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V30))), {'Prelude.Types.Right', V31} end end), V32 end(V26)) end end end end; 0 -> fun (V33) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V40 = fun (V39) -> {'Prelude.Types.Right', V15} end), V40 end(V35)) end end end end end end), V41 end(V19)) end end end end), V42 end(V12)) end end end end end), V43 end(V6)) end end end end.
'un--logTime'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V36 = ('un--logTimeWhen'(V0, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V1, V9)) end end, case V8 of {'Core.Options.MkSessionOpts', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} -> V22 end)), V1, V2, V3))), V36 end(V5)) end end end end.
'un--logTerm'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--unverifiedLogging'(V1, V2, V3))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V25 = case V10 of 1 -> begin (V15 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V13, V14)) end end}, V5))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V23 = fun (V20) -> case V2 of <<""/utf8>> -> begin (V21 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, <<(V4())/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V19))/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V20))), {'Prelude.Types.Right', V21} end; _ -> begin (V22 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V2/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, <<(V4())/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V19))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V20))), {'Prelude.Types.Right', V22} end end end), V23 end(V16)) end end end end; 0 -> fun (V24) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V25 end(V7)) end end end end.
'un--logString\x{27}'(V0, V1, V2) -> case <<('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Data.List':'un--intersperse'(<<"."/utf8>>, ('Idris.Idris2.Core.Options.Log':'un--topics'(V0))))))/binary, <<":"/utf8>>/binary>> of <<""/utf8>> -> begin (V3 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Core.Options.Log':'un--verbosity'(V0))))/binary, <<<<": "/utf8>>/binary, V1/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V2))), {'Prelude.Types.Right', V3} end; _ -> begin (V4 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<<<('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Data.List':'un--intersperse'(<<"."/utf8>>, ('Idris.Idris2.Core.Options.Log':'un--topics'(V0))))))/binary, <<":"/utf8>>/binary>>/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Core.Options.Log':'un--verbosity'(V0))))/binary, <<<<": "/utf8>>/binary, V1/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V2))), {'Prelude.Types.Right', V4} end end.
'un--logString'(V0, V1, V2, V3) -> case V0 of <<""/utf8>> -> begin (V4 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V1))/binary, <<<<": "/utf8>>/binary, V2/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V3))), {'Prelude.Types.Right', V4} end; _ -> begin (V5 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V0/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V1))/binary, <<<<": "/utf8>>/binary, V2/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V3))), {'Prelude.Types.Right', V5} end end.
'un--logC'(V0, V1, V2, V3) -> ('un--unverifiedLogC'(V0, V1, V2, V3)).
'un--log\x{27}'(V0, V1, V2) -> begin (V3 = ('un--logging\x{27}'(V0, V1))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V11 = fun (V8) -> case V7 of 1 -> case <<('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Data.List':'un--intersperse'(<<"."/utf8>>, ('Idris.Idris2.Core.Options.Log':'un--topics'(V1))))))/binary, <<":"/utf8>>/binary>> of <<""/utf8>> -> begin (V9 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Core.Options.Log':'un--verbosity'(V1))))/binary, <<<<": "/utf8>>/binary, (V2())/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V8))), {'Prelude.Types.Right', V9} end; _ -> begin (V10 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<<<('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Data.List':'un--intersperse'(<<"."/utf8>>, ('Idris.Idris2.Core.Options.Log':'un--topics'(V1))))))/binary, <<":"/utf8>>/binary>>/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Core.Options.Log':'un--verbosity'(V1))))/binary, <<<<": "/utf8>>/binary, (V2())/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V8))), {'Prelude.Types.Right', V10} end end; 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V11 end(V4)) end end end end.
'un--log'(V0, V1, V2, V3) -> begin (V4 = ('un--unverifiedLogging'(V0, V1, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V12 = fun (V9) -> case V8 of 1 -> case V1 of <<""/utf8>> -> begin (V10 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, (V3())/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V9))), {'Prelude.Types.Right', V10} end; _ -> begin (V11 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V1/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, (V3())/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V9))), {'Prelude.Types.Right', V11} end end; 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V12 end(V5)) end end end end.
