-module('Idris.Idris2.TTImp.Interactive.Intro').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in introCon-5077'/16,
  'un--introLam'/12,
  'un--introCon'/11,
  'un--intro'/10
]).
'case--case block in introCon-5077'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Core.Context.Context.TCon', V16, V17, V18, V19, V20, V21, V22, V23} -> begin (V24 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V9))), begin (V176 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V25, V26, [])) end end, V22, fun (V27) -> begin (V60 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V27, case V11 of {'Core.Context.MkDefs', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> V28 end))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V175 = case V64 of {'Prelude.Types.Just', V65} -> begin (V90 = ('Idris.Idris2.Core.Env':'un--lengthExplicitPi'(('Idris.Idris2.Builtin':'un--fst'(case ('Idris.Idris2.Core.TT.Views':'un--underPis'(-1, {'Core.Env.Nil'}, case V65 of {'Core.Context.Context.MkGlobalDef', V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} -> V68 end)) of {'Builtin.DPair.MkDPair', V88, V89} -> V89 end))))), begin (V91 = ('Idris.Idris2.TTImp.Utils':'un--uniqueHoleNames'(V2, V11, V90, ('Idris.Idris2.Core.Name':'un--nameRoot'(V7))))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V173 = begin (V104 = ((begin (V101 = fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V99, V100)) end end end end), fun (V102) -> fun (V103) -> ((((V101('erased'))('erased'))(V102))(V103)) end end end(fun (V96) -> {'Idris.Syntax.PHole', ('Idris.Idris2.Core.FC':'un--replFC'()), 1, V96} end))(V95))), begin (V105 = ('Idris.Idris2.Idris.Syntax':'un--papply'(('Idris.Idris2.Core.FC':'un--replFC'()), {'Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--replFC'()), V27}, V104))), begin (V144 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V106 = ('Idris.Idris2.Idris.Desugar':'un--desugar'(V2, V1, V3, V4, V5, 1, V0, V105))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V141 = begin (V111 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V3, V4, V2, V5, V6, {'TTImp.Elab.Check.InExpr'}, [], [], V8, V110, V24))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V140 = begin (V121 = begin (V116 = V1), fun (V117) -> begin (V120 = (begin (V118 = V116), fun (V119) -> ('erlang':'get'(V118)) end end(V117))), {'Prelude.Types.Right', V120} end end end), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V139 = begin (V126 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V125, V8, V115))), fun (V127) -> begin (V128 = (V126(V127))), case V128 of {'Prelude.Types.Left', V129} -> {'Prelude.Types.Left', V129}; {'Prelude.Types.Right', V130} -> (begin (V138 = begin (V131 = ('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V8, V130))), fun (V132) -> begin (V133 = (V131(V132))), case V133 of {'Prelude.Types.Left', V134} -> {'Prelude.Types.Left', V134}; {'Prelude.Types.Right', V135} -> (begin (V137 = fun (V136) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V135}} end), V137 end(V132)) end end end end), V138 end(V127)) end end end end), V139 end(V122)) end end end end), V140 end(V112)) end end end end), V141 end(V107)) end end end end, fun (V142) -> fun (V143) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end))), fun (V145) -> begin (V146 = (V144(V145))), case V146 of {'Prelude.Types.Left', V147} -> {'Prelude.Types.Left', V147}; {'Prelude.Types.Right', V148} -> (begin (V172 = begin (V154 = begin (V149 = V1), fun (V150) -> begin (V153 = (begin (V151 = V149), fun (V152) -> ('erlang':'put'(V151, V11)) end end(V150))), {'Prelude.Types.Right', V153} end end end), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V171 = begin (V164 = begin (V159 = V4), fun (V160) -> begin (V163 = (begin (V161 = V159), fun (V162) -> ('erlang':'put'(V161, V12)) end end(V160))), {'Prelude.Types.Right', V163} end end end), fun (V165) -> begin (V166 = (V164(V165))), case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> (begin (V170 = fun (V169) -> {'Prelude.Types.Right', V148} end), V170 end(V165)) end end end end), V171 end(V155)) end end end end), V172 end(V145)) end end end end end end), V173 end(V92)) end end end end end; _ -> fun (V174) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V175 end(V61)) end end end end end))), fun (V177) -> begin (V178 = (V176(V177))), case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> (begin (V182 = fun (V181) -> {'Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--catMaybes'(V180))} end), V182 end(V177)) end end end end end; _ -> fun (V183) -> {'Prelude.Types.Right', []} end end.
'un--introLam'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V12 = ('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V8, V11))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V36 = begin (V22 = begin (V17 = V1), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'get'(V19)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V35 = begin (V27 = ('Idris.Idris2.TTImp.Utils':'un--uniqueHoleName'(V2, V26, [], ('Idris.Idris2.Core.Name':'un--nameRoot'(V7))))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V34 = begin (V32 = {'TTImp.TTImp.ILam', ('Idris.Idris2.Core.FC':'un--replFC'()), V10, {'Core.TT.Explicit'}, {'Prelude.Types.Just', V9}, V16, {'TTImp.TTImp.IHole', ('Idris.Idris2.Core.FC':'un--replFC'()), V31}}), fun (V33) -> {'Prelude.Types.Right', V32} end end), V34 end(V28)) end end end end), V35 end(V23)) end end end end), V36 end(V13)) end end end end.
'un--introCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V16 = begin (V11 = V1), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V95 = begin (V26 = begin (V21 = V4), fun (V22) -> begin (V25 = (begin (V23 = V21), fun (V24) -> ('erlang':'get'(V23)) end end(V22))), {'Prelude.Types.Right', V25} end end end), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V94 = begin (V63 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V9, case V20 of {'Core.Context.MkDefs', V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62} -> V31 end))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V93 = case V67 of {'Prelude.Types.Just', V68} -> begin (V69 = {'Prelude.Types.Just', V68}), ('case--case block in introCon-5077'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V20, V30, V68, V69, case V68 of {'Core.Context.Context.MkGlobalDef', V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91} -> V87 end)) end; _ -> fun (V92) -> {'Prelude.Types.Right', []} end end), V93 end(V64)) end end end end), V94 end(V27)) end end end end), V95 end(V17)) end end end end.
'un--intro'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.TT.Bind', V10, V11, V12, V13} -> case V12 of {'Core.TT.Let', V14, V15, V16, V17} -> begin (V18 = ('un--intro'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V17, V13))))), ((begin (V34 = fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V31, V32, V33)) end end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end((begin (V26 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> {'Prelude.Types.Right', (V22(V25))} end end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V19) -> V19 end))))(V18)) end; {'Core.TT.Pi', V37, V38, V39, V40} -> case V39 of {'Core.TT.Explicit'} -> begin (V41 = ('un--introLam'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V38, V40))), ((begin (V57 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V54, V55, V56)) end end end end end), fun (V58) -> fun (V59) -> ((((V57('erased'))('erased'))(V58))(V59)) end end end((begin (V49 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> {'Prelude.Types.Right', (V45(V48))} end end end end end), fun (V50) -> fun (V51) -> ((((V49('erased'))('erased'))(V50))(V51)) end end end(fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V42)) end))))(V41)) end; _ -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V9)) of {'Builtin.MkPair', V60, V61} -> case V60 of {'Core.TT.Ref', V62, V63, V64} -> case V63 of {'Core.TT.TyCon', V65, V66} -> ('un--introCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V64, V9)); _ -> fun (V67) -> {'Prelude.Types.Right', []} end end; _ -> fun (V68) -> {'Prelude.Types.Right', []} end end; _ -> fun (V69) -> {'Prelude.Types.Right', []} end end end; _ -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V9)) of {'Builtin.MkPair', V70, V71} -> case V70 of {'Core.TT.Ref', V72, V73, V74} -> case V73 of {'Core.TT.TyCon', V75, V76} -> ('un--introCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V74, V9)); _ -> fun (V77) -> {'Prelude.Types.Right', []} end end; _ -> fun (V78) -> {'Prelude.Types.Right', []} end end; _ -> fun (V79) -> {'Prelude.Types.Right', []} end end end; {'Core.TT.TDelayed', V80, V81, V82} -> ('un--intro'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V82)); _ -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V9)) of {'Builtin.MkPair', V83, V84} -> case V83 of {'Core.TT.Ref', V85, V86, V87} -> case V86 of {'Core.TT.TyCon', V88, V89} -> ('un--introCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V87, V9)); _ -> fun (V90) -> {'Prelude.Types.Right', []} end end; _ -> fun (V91) -> {'Prelude.Types.Right', []} end end; _ -> fun (V92) -> {'Prelude.Types.Right', []} end end end.
