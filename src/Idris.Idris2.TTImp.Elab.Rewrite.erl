-module('Idris.Idris2.TTImp.Elab.Rewrite').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--rewriteErr'/1,
  'un--getRewriteTerms'/6,
  'un--findRewriteLemma'/3,
  'un--elabRewrite'/7,
  'un--checkRewrite'/15
]).
'un--rewriteErr'(V0) -> case V0 of {'Core.Core.NotRewriteRule', V1, V2, V3, V4} -> 1; {'Core.Core.RewriteNoChange', V5, V6, V7, V8, V9} -> 1; {'Core.Core.InType', V10, V11, V12} -> ('un--rewriteErr'(V12)); {'Core.Core.InCon', V13, V14, V15} -> ('un--rewriteErr'(V15)); {'Core.Core.InLHS', V16, V17, V18} -> ('un--rewriteErr'(V18)); {'Core.Core.InRHS', V19, V20, V21} -> ('un--rewriteErr'(V21)); {'Core.Core.WhenUnifying', V22, V23, V24, V25, V26, V27, V28} -> ('un--rewriteErr'(V28)); _ -> 0 end.
'un--getRewriteTerms'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Core.Value.NTCon', V6, V7, V8, V9, V10} -> begin (V11 = ('Idris.Idris2.Core.Context':'un--isEqualTy'(V1, V7))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V56 = case V15 of 1 -> case ('Idris.Idris2.Prelude.Types.List':'un--reverse'(((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V16) -> ('Idris.Idris2.Builtin':'un--snd'(V16)) end))(V10)))) of [E0 | E1] -> (fun (V24, V25) -> case V25 of [E2 | E3] -> (fun (V26, V27) -> case V27 of [E4 | E5] -> (fun (V28, V29) -> case V29 of [E6 | E7] -> (fun (V30, V31) -> begin (V32 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V3, V26))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V50 = begin (V37 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V3, V24))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V49 = begin (V42 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V3, V30))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V48 = fun (V47) -> {'Prelude.Types.Right', {'Builtin.MkPair', V36, {'Builtin.MkPair', V41, V46}}} end), V48 end(V43)) end end end end), V49 end(V38)) end end end end), V50 end(V33)) end end end end end(E6, E7)); _ -> fun (V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V51)) end end end(E4, E5)); _ -> fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V52)) end end end(E2, E3)); _ -> fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V53)) end end end(E0, E1)); _ -> fun (V54) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V54)) end end; 0 -> fun (V55) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V55)) end end), V56 end(V12)) end end end end; _ -> fun (V57) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V57)) end end.
'un--findRewriteLemma'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getRewrite'(V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V13 = fun (V8) -> case V7 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, (begin (V10 = fun (V9) -> V9 end), fun (V11) -> (V10(V11)) end end(<<"No rewrite lemma defined"/utf8>>))}, V8)); {'Prelude.Types.Just', V12} -> {'Prelude.Types.Right', V12} end end), V13 end(V4)) end end end end.
'un--elabRewrite'(V0, V1, V2, V3, V4, V5, V6) -> begin (V12 = begin (V7 = V1), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V139 = begin (V17 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V2, <<"rwarg"/utf8>>))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V138 = begin (V22 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V16, V4, V6))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V137 = begin (V27 = ('un--getRewriteTerms'(V0, V1, V3, V16, V26, {'Core.Core.NotRewriteRule', V0, V3, V4, V6}))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V136 = case V31 of {'Builtin.MkPair', V32, V33} -> case V33 of {'Builtin.MkPair', V34, V35} -> begin (V36 = ('un--findRewriteLemma'(V1, V3, V6))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V135 = begin (V41 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V16, V4, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V134 = begin (V52 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, (begin (V47 = fun (V46) -> V46 end), fun (V48) -> (V47(V48)) end end(<<"elab.rewrite"/utf8>>)), 5, fun () -> (begin (V50 = fun (V49) -> V49 end), fun (V51) -> (V50(V51)) end end(<<"Rewriting"/utf8>>)) end, V4, V32))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V133 = begin (V63 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, (begin (V58 = fun (V57) -> V57 end), fun (V59) -> (V58(V59)) end end(<<"elab.rewrite"/utf8>>)), 5, fun () -> (begin (V61 = fun (V60) -> V60 end), fun (V62) -> (V61(V62)) end end(<<"Rewriting in"/utf8>>)) end, V4, V45))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V132 = begin (V68 = ('Idris.Idris2.Core.Normalise':'un--replace'(V1, V0, V16, V4, V32, {'Core.TT.Ref', V3, {'Core.TT.Bound'}, V21}, V45))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V131 = begin (V79 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, (begin (V74 = fun (V73) -> V73 end), fun (V75) -> (V74(V75)) end end(<<"elab.rewrite"/utf8>>)), 5, fun () -> (begin (V77 = fun (V76) -> V76 end), fun (V78) -> (V77(V78)) end end(<<"Rewritten to"/utf8>>)) end, V72))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V130 = begin (V85 = fun (V84) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V16, V84)) end), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V129 = begin (V90 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V89, V4, V35))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V128 = begin (V95 = {'Core.TT.Bind', V3, V21, {'Core.TT.Lam', V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V94}, ('Idris.Idris2.Core.TT':'un--refsToLocals'({'Core.TT.Bounds.Add', V21, V21, {'Core.TT.Bounds.None'}}, V72))}), begin (V96 = ('Idris.Idris2.Core.GetType':'un--getType'(V0, V1, V4, V95))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V127 = begin (V101 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V100))), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V126 = begin (V106 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Term'(V1, V0, V16, V4, V5))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V125 = begin (V118 = begin (V111 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_Term'(V1, V0, V16, V4, V72, V110))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V117 = fun (V116) -> case V115 of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.RewriteNoChange', V0, V3, V4, V6, V110}, V116)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V117 end(V112)) end end end end), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V124 = fun (V123) -> {'Prelude.Types.Right', {'TTImp.Elab.Rewrite.MkLemma', V40, V95, V105}} end), V124 end(V119)) end end end end), V125 end(V107)) end end end end), V126 end(V102)) end end end end), V127 end(V97)) end end end end end), V128 end(V91)) end end end end), V129 end(V86)) end end end end), V130 end(V80)) end end end end), V131 end(V69)) end end end end), V132 end(V64)) end end end end), V133 end(V53)) end end end end), V134 end(V42)) end end end end), V135 end(V37)) end end end end end end), V136 end(V28)) end end end end), V137 end(V23)) end end end end), V138 end(V18)) end end end end), V139 end(V13)) end end end end.
'un--checkRewrite'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Prelude.Types.Nothing'} -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V11, <<"Can\x{27}t infer a type for rewrite"/utf8>>}, V15)) end; {'Prelude.Types.Just', V16} -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V1, V2, V3, V4, V11, V7, V10, {'Prelude.Types.Just', V16}, fun (V17) -> ('un--rewriteErr'(V17)) end, 3, fun (V18) -> begin (V19 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V11))), begin (V20 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V1))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V126 = begin (V29 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V25, V26)) end end, 0, fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V27, V28)) end end, 1})), V8, V9, V10, V12, {'Prelude.Types.Nothing'}))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V125 = case V33 of {'Builtin.MkPair', V34, V35} -> begin (V36 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V1, V3, V24, ('Idris.Idris2.Core.Unify':'un--inTerm'()), 0))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V124 = begin (V41 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V35))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V123 = begin (V46 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V16))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V122 = begin (V58 = case V18 of 1 -> ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V52 = fun (V51) -> V51 end), fun (V53) -> (V52(V53)) end end(<<"elab.rewrite"/utf8>>)), 5, fun () -> (begin (V55 = fun (V54) -> V54 end), fun (V56) -> (V55(V56)) end end(<<"Retrying rewrite"/utf8>>)) end)); 0 -> fun (V57) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V121 = begin (V63 = ('un--elabRewrite'(V0, V1, V3, V19, V10, V50, V45))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V120 = begin (V68 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"_"/utf8>>))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V119 = begin (V73 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"_"/utf8>>))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V118 = begin (V88 = {'Core.TT.Let', V19, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V78) -> fun (V79) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V78, V79)) end end, 0, fun (V80) -> fun (V81) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V80, V81)) end end, 1})), case V67 of {'TTImp.Elab.Rewrite.MkLemma', V82, V83, V84} -> V83 end, case V67 of {'TTImp.Elab.Rewrite.MkLemma', V85, V86, V87} -> V87 end}), begin (V93 = {'Core.TT.Let', V19, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V89) -> fun (V90) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V89, V90)) end end, 0, fun (V91) -> fun (V92) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V91, V92)) end end, 1})), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V34)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V45))}), begin (V94 = {'Core.Env.::', V93, {'Core.Env.::', V88, V10}}), begin (V101 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'(V77, V0, V1, V4, V19, {'Core.Env.::', V88, V10}, fun (V95) -> ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'(V72, [V77 | V0], V1, V95, V19, V94, fun (V96) -> begin (V97 = ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V72 | [V77 | []]]))), ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V72 | [V77 | V0]], V1, V2, V3, V96, V5, V6, V7, V8, ('Idris.Idris2.TTImp.TTImp':'dn--un--weakenNs_Weaken_NestedNames'(V97, V9)), V94, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V19, case V67 of {'TTImp.Elab.Rewrite.MkLemma', V98, V99, V100} -> V98 end}, [{'TTImp.TTImp.IVar', V19, V77} | [{'TTImp.TTImp.IVar', V19, V72} | [V13 | []]]])), {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'([V72 | [V77 | V0]], V94, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V97, V50))))})) end end)) end))), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V117 = case V105 of {'Builtin.MkPair', V106, V107} -> begin (V108 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V107))), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V116 = begin (V114 = fun (V113) -> {'Core.TT.Bind', V19, V77, V88, {'Core.TT.Bind', V19, V72, V93, V113}} end), fun (V115) -> {'Prelude.Types.Right', {'Builtin.MkPair', (V114(V106)), ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, (V114(V112))))}} end end), V116 end(V109)) end end end end end), V117 end(V102)) end end end end end end end), V118 end(V74)) end end end end), V119 end(V69)) end end end end), V120 end(V64)) end end end end), V121 end(V59)) end end end end), V122 end(V47)) end end end end), V123 end(V42)) end end end end), V124 end(V37)) end end end end end), V125 end(V30)) end end end end), V126 end(V21)) end end end end end end)) end.
