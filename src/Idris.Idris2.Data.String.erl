-module('Idris.Idris2.Data.String').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--parseInteger,parseIntTrimmed-8432'/6,
  'with--parsePositive,parsePosTrimmed-8319'/5,
  'with--ltrim-7992'/2,
  'with--asList-7968'/2,
  'case--case block in parseDouble,wfe-8943'/4,
  'case--parseDouble,wfe-8780'/2,
  'case--case block in case block in with block in parseInteger,parseIntTrimmed-8553'/6,
  'case--case block in with block in parseInteger,parseIntTrimmed-8499'/6,
  'case--with block in parseInteger,parseIntTrimmed-8450'/6,
  'case--with block in parsePositive,parsePosTrimmed-8360'/5,
  'case--parseNumWithoutSign-8270'/4,
  'case--span-8073'/3,
  'case--with block in ltrim-8007'/5,
  'case--words,words\x{27}-7765'/6,
  'nested--3788-7730--in--un--wordsHelper'/3,
  'nested--3788-7731--in--un--words\x{27}'/4,
  'nested--4672-8614--in--un--wfe'/1,
  'nested--3760-7700--in--un--unlines\x{27}'/1,
  'nested--4364-8313--in--un--parsePosTrimmed'/3,
  'nested--4468-8426--in--un--parseIntTrimmed'/4,
  'nested--4677-8624--in--un--num'/4,
  'nested--4672-8612--in--un--natpow'/2,
  'nested--4672-8613--in--un--mkDouble'/1,
  'nested--3893-7830--in--un--linesHelp'/3,
  'nested--4672-8611--in--un--intPow'/2,
  'un--words'/1,
  'un--unwords'/1,
  'un--unlines'/1,
  'un--trim'/1,
  'un--toUpper'/1,
  'un--toLower'/1,
  'un--stringToNatOrZ'/1,
  'un--strTail'/1,
  'un--strSubstr'/3,
  'un--strM'/1,
  'un--strLength'/1,
  'un--strIndex'/2,
  'un--split'/2,
  'un--span'/2,
  'un--singleton'/1,
  'un--replicate'/2,
  'un--parsePositive'/2,
  'un--parseNumWithoutSign'/2,
  'un--parseInteger'/3,
  'un--parseDouble'/1,
  'un--padRight'/3,
  'un--padLeft'/3,
  'un--null'/1,
  'un--ltrim'/1,
  'un--lines\x{27}'/1,
  'un--lines'/1,
  'un--joinBy'/2,
  'un--isSuffixOf'/2,
  'un--isPrefixOf'/2,
  'un--isInfixOf'/2,
  'un--indent'/2,
  'un--fastUnlines'/1,
  'un--break'/2,
  'un--asList'/1
]).
'with--parseInteger,parseIntTrimmed-8432'(V0, V1, V2, V3, V4, V5) -> case V4 of <<""/utf8>> -> case V5 of {'Data.String.StrNil'} -> {'Prelude.Types.Nothing'}; _ -> case V5 of {'Data.String.StrCons', V6, V7} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V6, $-)) of 1 -> ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V8) -> case V2 of {'Prelude.Num.MkNeg', V9, V10, V11} -> (V10(case V1 of {'Prelude.Num.MkNum', V12, V13, V14} -> (V14(V8)) end)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V7)), 0)))); 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V6, $+)) of 1 -> ((begin (V30 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V28, V29)) end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V22) -> case V1 of {'Prelude.Num.MkNum', V23, V24, V25} -> (V25(V22)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V7)), 0)))); 0 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V6, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V6, $9)); 0 -> 0 end of 1 -> ((begin (V42 = fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V40, V41)) end end end end), fun (V43) -> fun (V44) -> ((((V42('erased'))('erased'))(V43))(V44)) end end end(fun (V34) -> case V1 of {'Prelude.Num.MkNum', V35, V36, V37} -> (V37(V34)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V7)), begin (V33 = (case V6 of E2 when ((erlang:'is_integer'(E2)) andalso (((E2 >= 0) andalso (E2 =< 55295)) orelse ((E2 >= 57344) andalso (E2 =< 1114111)))) -> E2; _ -> 65533 end - case $0 of E3 when ((erlang:'is_integer'(E3)) andalso (((E3 >= 0) andalso (E3 =< 55295)) orelse ((E3 >= 57344) andalso (E3 =< 1114111)))) -> E3; _ -> 65533 end)), case ((V33 band 9223372036854775808) =/= 0) of 'true' -> (V33 bor -9223372036854775808); _ -> (V33 band 9223372036854775807) end end)))); 0 -> {'Prelude.Types.Nothing'} end end end end end; _ -> case V5 of {'Data.String.StrCons', V45, V46} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V45, $-)) of 1 -> ((begin (V58 = fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V56, V57)) end end end end), fun (V59) -> fun (V60) -> ((((V58('erased'))('erased'))(V59))(V60)) end end end(fun (V47) -> case V2 of {'Prelude.Num.MkNeg', V48, V49, V50} -> (V49(case V1 of {'Prelude.Num.MkNum', V51, V52, V53} -> (V53(V47)) end)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V46)), 0)))); 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V45, $+)) of 1 -> ((begin (V69 = fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V67, V68)) end end end end), fun (V70) -> fun (V71) -> ((((V69('erased'))('erased'))(V70))(V71)) end end end(fun (V61) -> case V1 of {'Prelude.Num.MkNum', V62, V63, V64} -> (V64(V61)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V46)), 0)))); 0 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V45, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V45, $9)); 0 -> 0 end of 1 -> ((begin (V81 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V79, V80)) end end end end), fun (V82) -> fun (V83) -> ((((V81('erased'))('erased'))(V82))(V83)) end end end(fun (V73) -> case V1 of {'Prelude.Num.MkNum', V74, V75, V76} -> (V76(V73)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V46)), begin (V72 = (case V45 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end - case $0 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end)), case ((V72 band 9223372036854775808) =/= 0) of 'true' -> (V72 bor -9223372036854775808); _ -> (V72 band 9223372036854775807) end end)))); 0 -> {'Prelude.Types.Nothing'} end end end end end.
'with--parsePositive,parsePosTrimmed-8319'(V0, V1, V2, V3, V4) -> case V3 of <<""/utf8>> -> case V4 of {'Data.String.StrNil'} -> {'Prelude.Types.Nothing'}; _ -> case V4 of {'Data.String.StrCons', V5, V6} -> case V5 of $+ -> ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V7) -> case V1 of {'Prelude.Num.MkNum', V8, V9, V10} -> (V10(V7)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V6)), 0)))); _ -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V5, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V5, $9)); 0 -> 0 end of 1 -> ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V19) -> case V1 of {'Prelude.Num.MkNum', V20, V21, V22} -> (V22(V19)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V6)), begin (V18 = (case V5 of E2 when ((erlang:'is_integer'(E2)) andalso (((E2 >= 0) andalso (E2 =< 55295)) orelse ((E2 >= 57344) andalso (E2 =< 1114111)))) -> E2; _ -> 65533 end - case $0 of E3 when ((erlang:'is_integer'(E3)) andalso (((E3 >= 0) andalso (E3 =< 55295)) orelse ((E3 >= 57344) andalso (E3 =< 1114111)))) -> E3; _ -> 65533 end)), case ((V18 band 9223372036854775808) =/= 0) of 'true' -> (V18 bor -9223372036854775808); _ -> (V18 band 9223372036854775807) end end)))); 0 -> {'Prelude.Types.Nothing'} end end end end; _ -> case V4 of {'Data.String.StrCons', V30, V31} -> case V30 of $+ -> ((begin (V40 = fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V38, V39)) end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end(fun (V32) -> case V1 of {'Prelude.Num.MkNum', V33, V34, V35} -> (V35(V32)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V31)), 0)))); _ -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V30, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V30, $9)); 0 -> 0 end of 1 -> ((begin (V52 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V50, V51)) end end end end), fun (V53) -> fun (V54) -> ((((V52('erased'))('erased'))(V53))(V54)) end end end(fun (V44) -> case V1 of {'Prelude.Num.MkNum', V45, V46, V47} -> (V47(V44)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V31)), begin (V43 = (case V30 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end - case $0 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end)), case ((V43 band 9223372036854775808) =/= 0) of 'true' -> (V43 bor -9223372036854775808); _ -> (V43 band 9223372036854775807) end end)))); 0 -> {'Prelude.Types.Nothing'} end end end end.
'with--ltrim-7992'(V0, V1) -> case V0 of <<""/utf8>> -> case V1 of {'Data.String.Nil'} -> <<""/utf8>>; _ -> case V1 of {'Data.String.::', V2, V3, V4} -> begin (V5 = <<('unicode':'characters_to_binary'([V2 | []]))/binary, V3/binary>>), case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V2)) of 1 -> ('with--ltrim-7992'(V3, (V4()))); 0 -> V5 end end end end; _ -> case V1 of {'Data.String.::', V6, V7, V8} -> begin (V9 = <<('unicode':'characters_to_binary'([V6 | []]))/binary, V7/binary>>), case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V6)) of 1 -> ('with--ltrim-7992'(V7, (V8()))); 0 -> V9 end end end end.
'with--asList-7968'(V0, V1) -> case V0 of <<""/utf8>> -> case V1 of {'Data.String.StrNil'} -> {'Data.String.Nil'}; _ -> case V1 of {'Data.String.StrCons', V2, V3} -> {'Data.String.::', V2, V3, fun () -> ('un--asList'(V3)) end} end end; _ -> case V1 of {'Data.String.StrCons', V4, V5} -> {'Data.String.::', V4, V5, fun () -> ('un--asList'(V5)) end} end end.
'case--case block in parseDouble,wfe-8943'(V0, V1, V2, V3) -> case V3 of {'Data.List1.:::', V4, V5} -> case V4 of <<""/utf8>> -> case V5 of [E4 | E5] -> (fun (V6, V7) -> case V7 of [] -> {'Prelude.Types.Nothing'}; _ -> case V5 of [E6 | E7] -> (fun (V8, V9) -> case V9 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V23) -> ('erlang':'float'(V23)) end))(('un--parseInteger'({'Prelude.Num.MkNum', fun (V10) -> fun (V11) -> (V10 + V11) end end, fun (V12) -> fun (V13) -> (V12 * V13) end end, fun (V14) -> V14 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V15) -> fun (V16) -> (V15 + V16) end end, fun (V17) -> fun (V18) -> (V17 * V18) end end, fun (V19) -> V19 end}, fun (V20) -> (0 - V20) end, fun (V21) -> fun (V22) -> (V21 - V22) end end}, V1)))), fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V40) -> (V40 / ('nested--4672-8612--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4))))) end))(((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(fun (V32) -> ('erlang':'float'(V32)) end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--parseInteger'({'Prelude.Num.MkNum', fun (V49) -> fun (V50) -> (V49 + V50) end end, fun (V51) -> fun (V52) -> (V51 * V52) end end, fun (V53) -> V53 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V54) -> fun (V55) -> (V54 + V55) end end, fun (V56) -> fun (V57) -> (V56 * V57) end end, fun (V58) -> V58 end}, fun (V59) -> (0 - V59) end, fun (V60) -> fun (V61) -> (V60 - V61) end end}, V8)), fun (V62) -> {'Prelude.Types.Just', {'Builtin.MkPair', V31, {'Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V31, ('erlang':'float'(0)))) of 1 -> ('erlang':'-'(V48)); 0 -> V48 end, V62}}} end)) end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E6, E7)); [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V81 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V79, V80)) end end end end), fun (V82) -> fun (V83) -> ((((V81('erased'))('erased'))(V82))(V83)) end end end(fun (V76) -> ('erlang':'float'(V76)) end))(('un--parseInteger'({'Prelude.Num.MkNum', fun (V63) -> fun (V64) -> (V63 + V64) end end, fun (V65) -> fun (V66) -> (V65 * V66) end end, fun (V67) -> V67 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V68) -> fun (V69) -> (V68 + V69) end end, fun (V70) -> fun (V71) -> (V70 * V71) end end, fun (V72) -> V72 end}, fun (V73) -> (0 - V73) end, fun (V74) -> fun (V75) -> (V74 - V75) end end}, V1)))), fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V98 = fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V96, V97)) end end end end), fun (V99) -> fun (V100) -> ((((V98('erased'))('erased'))(V99))(V100)) end end end(fun (V93) -> (V93 / ('nested--4672-8612--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4))))) end))(((begin (V90 = fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V88, V89)) end end end end), fun (V91) -> fun (V92) -> ((((V90('erased'))('erased'))(V91))(V92)) end end end(fun (V85) -> ('erlang':'float'(V85)) end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V101) -> {'Prelude.Types.Just', {'Builtin.MkPair', V84, {'Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V84, ('erlang':'float'(0)))) of 1 -> ('erlang':'-'(V101)); 0 -> V101 end, 0}}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end end(E4, E5)); _ -> case V5 of [E2 | E3] -> (fun (V102, V103) -> case V103 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V122 = fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V120, V121)) end end end end), fun (V123) -> fun (V124) -> ((((V122('erased'))('erased'))(V123))(V124)) end end end(fun (V117) -> ('erlang':'float'(V117)) end))(('un--parseInteger'({'Prelude.Num.MkNum', fun (V104) -> fun (V105) -> (V104 + V105) end end, fun (V106) -> fun (V107) -> (V106 * V107) end end, fun (V108) -> V108 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V109) -> fun (V110) -> (V109 + V110) end end, fun (V111) -> fun (V112) -> (V111 * V112) end end, fun (V113) -> V113 end}, fun (V114) -> (0 - V114) end, fun (V115) -> fun (V116) -> (V115 - V116) end end}, V1)))), fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V139 = fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V137, V138)) end end end end), fun (V140) -> fun (V141) -> ((((V139('erased'))('erased'))(V140))(V141)) end end end(fun (V134) -> (V134 / ('nested--4672-8612--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4))))) end))(((begin (V131 = fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V129, V130)) end end end end), fun (V132) -> fun (V133) -> ((((V131('erased'))('erased'))(V132))(V133)) end end end(fun (V126) -> ('erlang':'float'(V126)) end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V142) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--parseInteger'({'Prelude.Num.MkNum', fun (V143) -> fun (V144) -> (V143 + V144) end end, fun (V145) -> fun (V146) -> (V145 * V146) end end, fun (V147) -> V147 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V148) -> fun (V149) -> (V148 + V149) end end, fun (V150) -> fun (V151) -> (V150 * V151) end end, fun (V152) -> V152 end}, fun (V153) -> (0 - V153) end, fun (V154) -> fun (V155) -> (V154 - V155) end end}, V102)), fun (V156) -> {'Prelude.Types.Just', {'Builtin.MkPair', V125, {'Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V125, ('erlang':'float'(0)))) of 1 -> ('erlang':'-'(V142)); 0 -> V142 end, V156}}} end)) end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V175 = fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V173, V174)) end end end end), fun (V176) -> fun (V177) -> ((((V175('erased'))('erased'))(V176))(V177)) end end end(fun (V170) -> ('erlang':'float'(V170)) end))(('un--parseInteger'({'Prelude.Num.MkNum', fun (V157) -> fun (V158) -> (V157 + V158) end end, fun (V159) -> fun (V160) -> (V159 * V160) end end, fun (V161) -> V161 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V162) -> fun (V163) -> (V162 + V163) end end, fun (V164) -> fun (V165) -> (V164 * V165) end end, fun (V166) -> V166 end}, fun (V167) -> (0 - V167) end, fun (V168) -> fun (V169) -> (V168 - V169) end end}, V1)))), fun (V178) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V192 = fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V190, V191)) end end end end), fun (V193) -> fun (V194) -> ((((V192('erased'))('erased'))(V193))(V194)) end end end(fun (V187) -> (V187 / ('nested--4672-8612--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4))))) end))(((begin (V184 = fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V182, V183)) end end end end), fun (V185) -> fun (V186) -> ((((V184('erased'))('erased'))(V185))(V186)) end end end(fun (V179) -> ('erlang':'float'(V179)) end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V195) -> {'Prelude.Types.Just', {'Builtin.MkPair', V178, {'Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V178, ('erlang':'float'(0)))) of 1 -> ('erlang':'-'(V195)); 0 -> V195 end, 0}}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end; _ -> case V5 of [E0 | E1] -> (fun (V196, V197) -> case V197 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V216 = fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V214, V215)) end end end end), fun (V217) -> fun (V218) -> ((((V216('erased'))('erased'))(V217))(V218)) end end end(fun (V211) -> ('erlang':'float'(V211)) end))(('un--parseInteger'({'Prelude.Num.MkNum', fun (V198) -> fun (V199) -> (V198 + V199) end end, fun (V200) -> fun (V201) -> (V200 * V201) end end, fun (V202) -> V202 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V203) -> fun (V204) -> (V203 + V204) end end, fun (V205) -> fun (V206) -> (V205 * V206) end end, fun (V207) -> V207 end}, fun (V208) -> (0 - V208) end, fun (V209) -> fun (V210) -> (V209 - V210) end end}, V1)))), fun (V219) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V233 = fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V231, V232)) end end end end), fun (V234) -> fun (V235) -> ((((V233('erased'))('erased'))(V234))(V235)) end end end(fun (V228) -> (V228 / ('nested--4672-8612--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4))))) end))(((begin (V225 = fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V223, V224)) end end end end), fun (V226) -> fun (V227) -> ((((V225('erased'))('erased'))(V226))(V227)) end end end(fun (V220) -> ('erlang':'float'(V220)) end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V236) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--parseInteger'({'Prelude.Num.MkNum', fun (V237) -> fun (V238) -> (V237 + V238) end end, fun (V239) -> fun (V240) -> (V239 * V240) end end, fun (V241) -> V241 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V242) -> fun (V243) -> (V242 + V243) end end, fun (V244) -> fun (V245) -> (V244 * V245) end end, fun (V246) -> V246 end}, fun (V247) -> (0 - V247) end, fun (V248) -> fun (V249) -> (V248 - V249) end end}, V196)), fun (V250) -> {'Prelude.Types.Just', {'Builtin.MkPair', V219, {'Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V219, ('erlang':'float'(0)))) of 1 -> ('erlang':'-'(V236)); 0 -> V236 end, V250}}} end)) end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V269 = fun (V265) -> fun (V266) -> fun (V267) -> fun (V268) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V267, V268)) end end end end), fun (V270) -> fun (V271) -> ((((V269('erased'))('erased'))(V270))(V271)) end end end(fun (V264) -> ('erlang':'float'(V264)) end))(('un--parseInteger'({'Prelude.Num.MkNum', fun (V251) -> fun (V252) -> (V251 + V252) end end, fun (V253) -> fun (V254) -> (V253 * V254) end end, fun (V255) -> V255 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V256) -> fun (V257) -> (V256 + V257) end end, fun (V258) -> fun (V259) -> (V258 * V259) end end, fun (V260) -> V260 end}, fun (V261) -> (0 - V261) end, fun (V262) -> fun (V263) -> (V262 - V263) end end}, V1)))), fun (V272) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V286 = fun (V282) -> fun (V283) -> fun (V284) -> fun (V285) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V284, V285)) end end end end), fun (V287) -> fun (V288) -> ((((V286('erased'))('erased'))(V287))(V288)) end end end(fun (V281) -> (V281 / ('nested--4672-8612--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4))))) end))(((begin (V278 = fun (V274) -> fun (V275) -> fun (V276) -> fun (V277) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V276, V277)) end end end end), fun (V279) -> fun (V280) -> ((((V278('erased'))('erased'))(V279))(V280)) end end end(fun (V273) -> ('erlang':'float'(V273)) end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V289) -> {'Prelude.Types.Just', {'Builtin.MkPair', V272, {'Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V272, ('erlang':'float'(0)))) of 1 -> ('erlang':'-'(V289)); 0 -> V289 end, 0}}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end.
'case--parseDouble,wfe-8780'(V0, V1) -> case V1 of {'Data.List1.:::', V2, V3} -> case V3 of [] -> case ('un--split'(fun (V4) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V4, $e)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V4, $E)) end end, V2)) of {'Data.List1.:::', V5, V6} -> case V6 of [E0 | E1] -> (fun (V7, V8) -> case V8 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> ('erlang':'float'(V22)) end))(('un--parseInteger'({'Prelude.Num.MkNum', fun (V9) -> fun (V10) -> (V9 + V10) end end, fun (V11) -> fun (V12) -> (V11 * V12) end end, fun (V13) -> V13 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V14) -> fun (V15) -> (V14 + V15) end end, fun (V16) -> fun (V17) -> (V16 * V17) end end, fun (V18) -> V18 end}, fun (V19) -> (0 - V19) end, fun (V20) -> fun (V21) -> (V20 - V21) end end}, V5)))), fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--parseInteger'({'Prelude.Num.MkNum', fun (V31) -> fun (V32) -> (V31 + V32) end end, fun (V33) -> fun (V34) -> (V33 * V34) end end, fun (V35) -> V35 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V36) -> fun (V37) -> (V36 + V37) end end, fun (V38) -> fun (V39) -> (V38 * V39) end end, fun (V40) -> V40 end}, fun (V41) -> (0 - V41) end, fun (V42) -> fun (V43) -> (V42 - V43) end end}, V7)), fun (V44) -> {'Prelude.Types.Just', {'Builtin.MkPair', V30, {'Builtin.MkPair', 0.0, V44}}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(((begin (V63 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V61, V62)) end end end end), fun (V64) -> fun (V65) -> ((((V63('erased'))('erased'))(V64))(V65)) end end end(fun (V58) -> ('erlang':'float'(V58)) end))(('un--parseInteger'({'Prelude.Num.MkNum', fun (V45) -> fun (V46) -> (V45 + V46) end end, fun (V47) -> fun (V48) -> (V47 * V48) end end, fun (V49) -> V49 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V50) -> fun (V51) -> (V50 + V51) end end, fun (V52) -> fun (V53) -> (V52 * V53) end end, fun (V54) -> V54 end}, fun (V55) -> (0 - V55) end, fun (V56) -> fun (V57) -> (V56 - V57) end end}, V5)))), fun (V66) -> {'Prelude.Types.Just', {'Builtin.MkPair', V66, {'Builtin.MkPair', 0.0, 0}}} end)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; [E2 | E3] -> (fun (V67, V68) -> case V68 of [] -> ('case--case block in parseDouble,wfe-8943'(V0, V2, V67, ('un--split'(fun (V69) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V69, $e)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V69, $E)) end end, V67)))); _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'case--case block in case block in with block in parseInteger,parseIntTrimmed-8553'(V0, V1, V2, V3, V4, V5) -> case V5 of 1 -> ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V7) -> case V0 of {'Prelude.Num.MkNum', V8, V9, V10} -> (V10(V7)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V3)), begin (V6 = (case V4 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end - case $0 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)))); 0 -> {'Prelude.Types.Nothing'} end.
'case--case block in with block in parseInteger,parseIntTrimmed-8499'(V0, V1, V2, V3, V4, V5) -> case V5 of 1 -> ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V6) -> case V0 of {'Prelude.Num.MkNum', V7, V8, V9} -> (V9(V6)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V3)), 0)))); 0 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V4, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V4, $9)); 0 -> 0 end of 1 -> ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V18) -> case V0 of {'Prelude.Num.MkNum', V19, V20, V21} -> (V21(V18)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V3)), begin (V17 = (case V4 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end - case $0 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end)), case ((V17 band 9223372036854775808) =/= 0) of 'true' -> (V17 bor -9223372036854775808); _ -> (V17 band 9223372036854775807) end end)))); 0 -> {'Prelude.Types.Nothing'} end end.
'case--with block in parseInteger,parseIntTrimmed-8450'(V0, V1, V2, V3, V4, V5) -> case V5 of 1 -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V6) -> case V1 of {'Prelude.Num.MkNeg', V7, V8, V9} -> (V8(case V0 of {'Prelude.Num.MkNum', V10, V11, V12} -> (V12(V6)) end)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V3)), 0)))); 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V4, $+)) of 1 -> ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V20) -> case V0 of {'Prelude.Num.MkNum', V21, V22, V23} -> (V23(V20)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V3)), 0)))); 0 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V4, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V4, $9)); 0 -> 0 end of 1 -> ((begin (V40 = fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V38, V39)) end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end(fun (V32) -> case V0 of {'Prelude.Num.MkNum', V33, V34, V35} -> (V35(V32)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V3)), begin (V31 = (case V4 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end - case $0 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end)), case ((V31 band 9223372036854775808) =/= 0) of 'true' -> (V31 bor -9223372036854775808); _ -> (V31 band 9223372036854775807) end end)))); 0 -> {'Prelude.Types.Nothing'} end end end.
'case--with block in parsePositive,parsePosTrimmed-8360'(V0, V1, V2, V3, V4) -> case V4 of 1 -> ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V6) -> case V0 of {'Prelude.Num.MkNum', V7, V8, V9} -> (V9(V6)) end end))(('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V2)), begin (V5 = (case V3 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end - case $0 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end)), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end)))); 0 -> {'Prelude.Types.Nothing'} end.
'case--parseNumWithoutSign-8270'(V0, V1, V2, V3) -> case V3 of 1 -> ('un--parseNumWithoutSign'(V1, ((V2 * 10) + begin (V4 = (case V0 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end - case $0 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end))); 0 -> {'Prelude.Types.Nothing'} end.
'case--span-8073'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--fastPack'(V3)), ('Idris.Idris2.Prelude.Types':'un--fastPack'(V4))} end.
'case--with block in ltrim-8007'(V0, V1, V2, V3, V4) -> case V4 of 1 -> ('with--ltrim-7992'(V0, (V1()))); 0 -> V3 end.
'case--words,words\x{27}-7765'(V0, V1, V2, V3, V4, V5) -> case V5 of 1 -> ('nested--3788-7731--in--un--words\x{27}'(V0, V2, {'Prelude.Basics.Lin'}, ('nested--3788-7730--in--un--wordsHelper'(V0, V4, V3)))); 0 -> ('nested--3788-7731--in--un--words\x{27}'(V0, V2, {'Prelude.Basics.:<', V4, V1}, V3)) end.
'nested--3788-7730--in--un--wordsHelper'(V0, V1, V2) -> case V1 of {'Prelude.Basics.Lin'} -> V2; _ -> {'Prelude.Basics.:<', V2, ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V1, []))} end.
'nested--3788-7731--in--un--words\x{27}'(V0, V1, V2, V3) -> case V1 of [E0 | E1] -> (fun (V4, V5) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V4)) of 1 -> ('nested--3788-7731--in--un--words\x{27}'(V0, V5, {'Prelude.Basics.Lin'}, ('nested--3788-7730--in--un--wordsHelper'(V0, V2, V3)))); 0 -> ('nested--3788-7731--in--un--words\x{27}'(V0, V5, {'Prelude.Basics.:<', V2, V4}, V3)) end end(E0, E1)); [] -> ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(('nested--3788-7730--in--un--wordsHelper'(V0, V2, V3)), [])) end.
'nested--4672-8614--in--un--wfe'(V0) -> ('case--parseDouble,wfe-8780'(V0, ('un--split'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $.)) end, V0)))).
'nested--3760-7700--in--un--unlines\x{27}'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> [V1 | [<<"\x{a}"/utf8>> | ('nested--3760-7700--in--un--unlines\x{27}'(V2))]] end(E0, E1)) end.
'nested--4364-8313--in--un--parsePosTrimmed'(V0, V1, V2) -> ('with--parsePositive,parsePosTrimmed-8319'('erased', V0, V2, V2, ('un--strM'(V2)))).
'nested--4468-8426--in--un--parseIntTrimmed'(V0, V1, V2, V3) -> ('with--parseInteger,parseIntTrimmed-8432'('erased', V0, V1, V3, V3, ('un--strM'(V3)))).
'nested--4677-8624--in--un--num'(V0, V1, V2, V3) -> case V3 of 0 -> 1.0; _ -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V3, 0)) of 1 -> (('erlang':'float'(V2)) * ('nested--4677-8624--in--un--num'(V0, V1, V2, (V3 + 1)))); 0 -> (('erlang':'float'(V2)) * ('nested--4677-8624--in--un--num'(V0, V1, V2, (V3 - 1)))) end end.
'nested--4672-8612--in--un--natpow'(V0, V1) -> case V1 of 0 -> 1.0; _ -> begin (V2 = (V1 - 1)), (V0 * ('nested--4672-8612--in--un--natpow'(V0, V2))) end end.
'nested--4672-8613--in--un--mkDouble'(V0) -> case V0 of {'Prelude.Types.Just', V1} -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V6 = ('nested--4672-8611--in--un--intPow'(10, V5))), {'Prelude.Types.Just', ((V2 * V6) + (V4 * V6))} end end end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'} end.
'nested--3893-7830--in--un--linesHelp'(V0, V1, V2) -> case V1 of [] -> case V2 of [] -> []; _ -> case V2 of [] -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | []]; [E4 | E5] -> (fun (V3, V4) -> case V3 of $\x{a} -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3893-7830--in--un--linesHelp'(V0, [], V4))]; $\x{d} -> case V4 of [E6 | E7] -> (fun (V5, V6) -> case V5 of $\x{a} -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3893-7830--in--un--linesHelp'(V0, [], V6))]; _ -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3893-7830--in--un--linesHelp'(V0, [], V4))] end end(E6, E7)); _ -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3893-7830--in--un--linesHelp'(V0, [], V4))] end; _ -> ('nested--3893-7830--in--un--linesHelp'(V0, [V3 | V1], V4)) end end(E4, E5)) end end; _ -> case V2 of [] -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | []]; [E0 | E1] -> (fun (V7, V8) -> case V7 of $\x{a} -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3893-7830--in--un--linesHelp'(V0, [], V8))]; $\x{d} -> case V8 of [E2 | E3] -> (fun (V9, V10) -> case V9 of $\x{a} -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3893-7830--in--un--linesHelp'(V0, [], V10))]; _ -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3893-7830--in--un--linesHelp'(V0, [], V8))] end end(E2, E3)); _ -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3893-7830--in--un--linesHelp'(V0, [], V8))] end; _ -> ('nested--3893-7830--in--un--linesHelp'(V0, [V7 | V1], V8)) end end(E0, E1)) end end.
'nested--4672-8611--in--un--intPow'(V0, V1) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V1, 0)) of 1 -> ('nested--4677-8624--in--un--num'(V1, V0, V0, V1)); 0 -> (('erlang':'float'(1)) / ('nested--4677-8624--in--un--num'(V1, V0, V0, V1))) end.
'un--words'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V1)) end))(('nested--3788-7731--in--un--words\x{27}'(V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), {'Prelude.Basics.Lin'}, {'Prelude.Basics.Lin'})))).
'un--unwords'(V0) -> ('un--joinBy'(<<" "/utf8>>, V0)).
'un--unlines'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> <<V1/binary, V2/binary>> end end, <<""/utf8>>}, fun (V3) -> V3 end, ('Idris.Idris2.Data.List':'un--interleave'(V0, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> <<"\x{a}"/utf8>> end))(V0)))))).
'un--trim'(V0) -> ('un--ltrim'(('unicode':'characters_to_binary'(('string':'reverse'(('un--ltrim'(('unicode':'characters_to_binary'(('string':'reverse'(V0)))))))))))).
'un--toUpper'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--toUpper'(V1)) end))(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))).
'un--toLower'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--toLower'(V1)) end))(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))).
'un--stringToNatOrZ'(V0) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(case ('string':'to_integer'(V0)) of {E0, E1} when (erlang:'is_integer'(E0)) -> (fun (V1, V2) -> case ('string':'is_empty'(V2)) of 'true' -> V1; _ -> 0 end end(E0, E1)); _ -> 0 end)).
'un--strTail'(V0) -> case ('string':'next_grapheme'(V0)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> <<""/utf8>> end.
'un--strSubstr'(V0, V1, V2) -> ('string':'slice'(V2, V0, V1)).
'un--strM'(V0) -> case V0 of <<""/utf8>> -> {'Data.String.StrNil'}; _ -> {'Data.String.StrCons', ('erlang':'hd'(('string':'next_grapheme'(V0)))), case ('string':'next_grapheme'(V0)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> <<""/utf8>> end} end.
'un--strLength'(V0) -> ('string':'length'(V0)).
'un--strIndex'(V0, V1) -> ('erlang':'hd'(('string':'next_grapheme'(('string':'slice'(V0, V1, 1)))))).
'un--split'(V0, V1) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V2)) end, ('Idris.Idris2.Data.List':'un--split'(V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))))).
'un--span'(V0, V1) -> case ('Idris.Idris2.Data.List':'un--span'(V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))) of {'Builtin.MkPair', V2, V3} -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--fastPack'(V2)), ('Idris.Idris2.Prelude.Types':'un--fastPack'(V3))} end.
'un--singleton'(V0) -> <<('unicode':'characters_to_binary'([V0 | []]))/binary, <<""/utf8>>/binary>>.
'un--replicate'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicateTR'([], V0, V1)))).
'un--parsePositive'(V0, V1) -> ('nested--4364-8313--in--un--parsePosTrimmed'(V0, V1, ('un--trim'(V1)))).
'un--parseNumWithoutSign'(V0, V1) -> case V0 of [] -> {'Prelude.Types.Just', V1}; [E0 | E1] -> (fun (V2, V3) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V2, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V2, $9)); 0 -> 0 end of 1 -> ('un--parseNumWithoutSign'(V3, ((V1 * 10) + begin (V4 = (case V2 of E2 when ((erlang:'is_integer'(E2)) andalso (((E2 >= 0) andalso (E2 =< 55295)) orelse ((E2 >= 57344) andalso (E2 =< 1114111)))) -> E2; _ -> 65533 end - case $0 of E3 when ((erlang:'is_integer'(E3)) andalso (((E3 >= 0) andalso (E3 =< 55295)) orelse ((E3 >= 57344) andalso (E3 =< 1114111)))) -> E3; _ -> 65533 end)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end))); 0 -> {'Prelude.Types.Nothing'} end end(E0, E1)) end.
'un--parseInteger'(V0, V1, V2) -> ('nested--4468-8426--in--un--parseIntTrimmed'(V0, V1, V2, ('un--trim'(V2)))).
'un--parseDouble'(V0) -> ('nested--4672-8613--in--un--mkDouble'(('nested--4672-8614--in--un--wfe'(('un--trim'(V0)))))).
'un--padRight'(V0, V1, V2) -> <<V2/binary, ('un--replicate'(('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V0 - ('Idris.Idris2.Prelude.Types.String':'un--length'(V2))))), V1))/binary>>.
'un--padLeft'(V0, V1, V2) -> <<('un--replicate'(('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V0 - ('Idris.Idris2.Prelude.Types.String':'un--length'(V2))))), V1))/binary, V2/binary>>.
'un--null'(V0) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V0, <<""/utf8>>)).
'un--ltrim'(V0) -> ('with--ltrim-7992'(V0, ('un--asList'(V0)))).
'un--lines\x{27}'(V0) -> ('nested--3893-7830--in--un--linesHelp'(V0, [], V0)).
'un--lines'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V1)) end))(('un--lines\x{27}'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))).
'un--joinBy'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> <<V2/binary, V3/binary>> end end, <<""/utf8>>}, fun (V4) -> V4 end, ('Idris.Idris2.Data.List':'un--intersperse'(V0, V1)))).
'un--isSuffixOf'(V0, V1) -> ('Idris.Idris2.Data.List':'un--isSuffixOf'({'Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V4, V5)) end end}, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))).
'un--isPrefixOf'(V0, V1) -> ('Idris.Idris2.Data.List':'un--isPrefixOf'({'Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V4, V5)) end end}, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))).
'un--isInfixOf'(V0, V1) -> ('Idris.Idris2.Data.List':'un--isInfixOf'({'Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V4, V5)) end end}, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))).
'un--indent'(V0, V1) -> <<('un--replicate'(V0, $ ))/binary, V1/binary>>.
'un--fastUnlines'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('nested--3760-7700--in--un--unlines\x{27}'(V0)))).
'un--break'(V0, V1) -> ('un--span'(fun (V2) -> case (V0(V2)) of 1 -> 0; 0 -> 1 end end, V1)).
'un--asList'(V0) -> ('with--asList-7968'(V0, ('un--strM'(V0)))).
