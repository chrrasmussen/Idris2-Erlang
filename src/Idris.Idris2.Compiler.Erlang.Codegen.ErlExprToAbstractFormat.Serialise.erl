-module('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Serialise').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--setUnsignedInt'/4,
  'un--setSignedInt'/4,
  'un--setGeneric'/5,
  'un--setDouble'/3,
  'un--setBinary'/3,
  'un--getUnsignedInt'/3,
  'un--getSignedInt'/3,
  'un--getGeneric'/4,
  'un--getDouble'/2,
  'un--getBinary'/2,
  'un--genSerialiseMkIteratorRes'/3,
  'un--genSerialiseDecodeResultSuccess'/2,
  'un--genSerialiseDecodeResultFail'/2,
  'un--defaultEndianness'/0
]).
'un--setUnsignedInt'(V0, V1, V2, V3) -> ('un--setGeneric'({'Compiler.Erlang.IR.AbstractFormat.ABInteger', 0, ('un--defaultEndianness'()), 0}, V0, V1, V2, V3)).
'un--setSignedInt'(V0, V1, V2, V3) -> ('un--setGeneric'({'Compiler.Erlang.IR.AbstractFormat.ABInteger', 0, ('un--defaultEndianness'()), 0}, V0, V1, V2, V3)).
'un--setGeneric'(V0, V1, V2, V3, V4) -> begin (V5 = {'Compiler.Erlang.IR.AbstractFormat.AEBitstring', V2, [{'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, V3, {'Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Compiler.Erlang.IR.AbstractFormat.ABBinary', 7}} | [{'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, V4, {'Compiler.Erlang.IR.AbstractFormat.ABSInteger', V2, V1}, V0} | []]]}), V5 end.
'un--setDouble'(V0, V1, V2) -> ('un--setGeneric'({'Compiler.Erlang.IR.AbstractFormat.ABFloat', ('un--defaultEndianness'()), 0}, 64, V0, V1, V2)).
'un--setBinary'(V0, V1, V2) -> begin (V3 = {'Compiler.Erlang.IR.AbstractFormat.AEBitstring', V0, [{'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Bin"/utf8>>}, {'Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Compiler.Erlang.IR.AbstractFormat.ABBinary', 7}} | [{'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Size"/utf8>>}, {'Compiler.Erlang.IR.AbstractFormat.ABSInteger', V0, 32}, {'Compiler.Erlang.IR.AbstractFormat.ABInteger', 0, ('un--defaultEndianness'()), 0}} | [{'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Value"/utf8>>}, {'Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Compiler.Erlang.IR.AbstractFormat.ABBinary', 7}} | []]]]}), begin (V4 = {'Data.List1.:::', {'Compiler.Erlang.IR.AbstractFormat.AEMatch', V0, {'Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Size"/utf8>>}, ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Internal':'un--genFunCall'(V0, <<"erlang"/utf8>>, <<"byte_size"/utf8>>, [{'Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Value"/utf8>>} | []]))}, [V3 | []]}), begin (V5 = {'Compiler.Erlang.IR.AbstractFormat.AEFun', V0, 2, ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.AbstractFormat.MkFunClause', V0, {'Data.Vect.::', {'Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Bin"/utf8>>}, {'Data.Vect.::', {'Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Value"/utf8>>}, {'Data.Vect.Nil'}}}, [], V4}))}), {'Compiler.Erlang.IR.AbstractFormat.AEFunCall', V0, V5, [V1 | [V2 | []]]} end end end.
'un--getUnsignedInt'(V0, V1, V2) -> ('un--getGeneric'({'Compiler.Erlang.IR.AbstractFormat.ABInteger', 0, ('un--defaultEndianness'()), 0}, V0, V1, V2)).
'un--getSignedInt'(V0, V1, V2) -> ('un--getGeneric'({'Compiler.Erlang.IR.AbstractFormat.ABInteger', 0, ('un--defaultEndianness'()), 0}, V0, V1, V2)).
'un--getGeneric'(V0, V1, V2, V3) -> begin (V4 = {'Compiler.Erlang.IR.AbstractFormat.APBitstring', V2, [{'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Compiler.Erlang.IR.AbstractFormat.ABPVar', V2, <<"Value"/utf8>>}, {'Compiler.Erlang.IR.AbstractFormat.ABSInteger', V2, V1}, V0} | [{'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Compiler.Erlang.IR.AbstractFormat.ABPVar', V2, <<"NewIt"/utf8>>}, {'Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Compiler.Erlang.IR.AbstractFormat.ABBinary', 7}} | []]]}), begin (V5 = {'Data.List1.:::', ('un--genSerialiseMkIteratorRes'(V2, ('un--genSerialiseDecodeResultSuccess'(V2, {'Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"Value"/utf8>>})), {'Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"NewIt"/utf8>>})), []}), begin (V6 = {'Compiler.Erlang.IR.AbstractFormat.APVar', V2, <<"It"/utf8>>}), begin (V7 = {'Data.List1.:::', ('un--genSerialiseMkIteratorRes'(V2, ('un--genSerialiseDecodeResultFail'(V2, <<"Failed to decode number"/utf8>>)), {'Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"It"/utf8>>})), []}), begin (V8 = {'Compiler.Erlang.IR.AbstractFormat.AEFun', V2, 1, {'Data.List1.:::', {'Compiler.Erlang.IR.AbstractFormat.MkFunClause', V2, {'Data.Vect.::', V4, {'Data.Vect.Nil'}}, [], V5}, [{'Compiler.Erlang.IR.AbstractFormat.MkFunClause', V2, {'Data.Vect.::', V6, {'Data.Vect.Nil'}}, [], V7} | []]}}), {'Compiler.Erlang.IR.AbstractFormat.AEFunCall', V2, V8, [V3 | []]} end end end end end.
'un--getDouble'(V0, V1) -> ('un--getGeneric'({'Compiler.Erlang.IR.AbstractFormat.ABFloat', ('un--defaultEndianness'()), 0}, 64, V0, V1)).
'un--getBinary'(V0, V1) -> begin (V2 = {'Compiler.Erlang.IR.AbstractFormat.APBitstring', V0, [{'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Compiler.Erlang.IR.AbstractFormat.ABPVar', V0, <<"Size"/utf8>>}, {'Compiler.Erlang.IR.AbstractFormat.ABSInteger', V0, 32}, {'Compiler.Erlang.IR.AbstractFormat.ABInteger', 0, ('un--defaultEndianness'()), 0}} | [{'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Compiler.Erlang.IR.AbstractFormat.ABPVar', V0, <<"Value"/utf8>>}, {'Compiler.Erlang.IR.AbstractFormat.ABSVar', V0, <<"Size"/utf8>>}, {'Compiler.Erlang.IR.AbstractFormat.ABBinary', 7}} | [{'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Compiler.Erlang.IR.AbstractFormat.ABPVar', V0, <<"NewIt"/utf8>>}, {'Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Compiler.Erlang.IR.AbstractFormat.ABBinary', 7}} | []]]]}), begin (V3 = {'Data.List1.:::', ('un--genSerialiseMkIteratorRes'(V0, ('un--genSerialiseDecodeResultSuccess'(V0, {'Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Value"/utf8>>})), {'Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"NewIt"/utf8>>})), []}), begin (V4 = {'Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"It"/utf8>>}), begin (V5 = {'Data.List1.:::', ('un--genSerialiseMkIteratorRes'(V0, ('un--genSerialiseDecodeResultFail'(V0, <<"Failed to decode binary"/utf8>>)), {'Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"It"/utf8>>})), []}), begin (V6 = {'Compiler.Erlang.IR.AbstractFormat.AEFun', V0, 1, {'Data.List1.:::', {'Compiler.Erlang.IR.AbstractFormat.MkFunClause', V0, {'Data.Vect.::', V2, {'Data.Vect.Nil'}}, [], V3}, [{'Compiler.Erlang.IR.AbstractFormat.MkFunClause', V0, {'Data.Vect.::', V4, {'Data.Vect.Nil'}}, [], V5} | []]}}), {'Compiler.Erlang.IR.AbstractFormat.AEFunCall', V0, V6, [V1 | []]} end end end end end.
'un--genSerialiseMkIteratorRes'(V0, V1, V2) -> ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Internal':'un--genDataCtorExpr'(V0, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'({'Core.Name.NS', ('Idris.Idris2.Compiler.Erlang.Name':'un--serialiseCoreNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"MkIteratorRes"/utf8>>}}})), [V1 | [V2 | []]])).
'un--genSerialiseDecodeResultSuccess'(V0, V1) -> ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Internal':'un--genDataCtorExpr'(V0, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'({'Core.Name.NS', ('Idris.Idris2.Compiler.Erlang.Name':'un--serialiseCoreNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"Success"/utf8>>}}})), [V1 | []])).
'un--genSerialiseDecodeResultFail'(V0, V1) -> ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Internal':'un--genDataCtorExpr'(V0, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'({'Core.Name.NS', ('Idris.Idris2.Compiler.Erlang.Name':'un--serialiseCoreNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"Fail"/utf8>>}}})), [('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Internal':'un--genStringLiteralExpr'(V0, V1)) | []])).
'un--defaultEndianness'() -> 0.
