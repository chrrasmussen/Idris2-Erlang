-module('Idris.Idris2.Idris.Parser').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--collectDefs-22353'/4,
  'case--multilineStr,toLines-14294'/8,
  'case--doAct-13590'/4,
  'case--nonEmptyTuple,mergePairs-9803'/9,
  'nested--12026-7226--in--un--underscore'/4,
  'nested--12448-14036--in--un--toPStr'/4,
  'nested--12459-14260--in--un--toLines'/6,
  'nested--12037-7735--in--un--singleName'/2,
  'nested--12350-12855--in--un--recFieldCompat'/3,
  'nested--20641-15341--in--un--parseWithArg'/4,
  'nested--32086-26465--in--un--parse'/3,
  'nested--31921-26293--in--un--parse'/3,
  'nested--31758-26122--in--un--parse'/3,
  'nested--31590-25945--in--un--parse'/3,
  'nested--31455-25800--in--un--parse'/3,
  'nested--31381-25716--in--un--parse'/3,
  'nested--31290-25625--in--un--parse'/3,
  'nested--31225-25554--in--un--parse'/3,
  'nested--31125-25450--in--un--parse'/3,
  'nested--30988-25312--in--un--parse'/4,
  'nested--30921-25239--in--un--parse'/3,
  'nested--30655-24966--in--un--parse'/3,
  'nested--30588-24897--in--un--parse'/3,
  'nested--30523-24830--in--un--parse'/3,
  'nested--30462-24768--in--un--parse'/3,
  'nested--30323-24625--in--un--parse'/3,
  'nested--30257-24557--in--un--parse'/3,
  'nested--30208-24504--in--un--parse'/3,
  'nested--12137-9673--in--un--optionalPair'/6,
  'nested--12342-12726--in--un--oldSyntaxWarning'/2,
  'nested--26761-21086--in--un--oldParamDecls'/4,
  'nested--24375-18680--in--un--noMangleWarning'/1,
  'nested--26761-21087--in--un--newParamDecls'/4,
  'nested--32086-26464--in--un--names'/3,
  'nested--31921-26292--in--un--names'/3,
  'nested--31758-26121--in--un--names'/3,
  'nested--31590-25944--in--un--names'/3,
  'nested--31455-25799--in--un--names'/3,
  'nested--31381-25715--in--un--names'/3,
  'nested--31290-25624--in--un--names'/3,
  'nested--31225-25553--in--un--names'/3,
  'nested--31125-25448--in--un--names'/3,
  'nested--30988-25311--in--un--names'/4,
  'nested--30921-25238--in--un--names'/3,
  'nested--30655-24965--in--un--names'/3,
  'nested--30588-24896--in--un--names'/3,
  'nested--30523-24829--in--un--names'/3,
  'nested--30462-24767--in--un--names'/3,
  'nested--30323-24624--in--un--names'/3,
  'nested--30257-24556--in--un--names'/3,
  'nested--30208-24503--in--un--names'/3,
  'nested--12037-7736--in--un--nameList'/2,
  'nested--12415-13822--in--un--mkPi'/6,
  'nested--12137-9674--in--un--mergePairs'/7,
  'nested--12287-12128--in--un--letDecl'/2,
  'nested--12287-12127--in--un--letBinder'/2,
  'nested--12137-9671--in--un--lams'/6,
  'nested--25117-19432--in--un--go'/2,
  'nested--12350-12854--in--un--fieldName'/4,
  'nested--25913-20238--in--un--fieldBody'/4,
  'nested--29244-23535--in--un--explain'/2,
  'nested--22584-16879--in--un--drop'/3,
  'nested--25913-20237--in--un--defImplicitField'/2,
  'nested--12279-11937--in--un--continueLamCase'/3,
  'nested--12279-11936--in--un--continueLam'/2,
  'nested--20641-15340--in--un--clauseLHS'/7,
  'nested--12137-9672--in--un--buildOutput'/6,
  'nested--12026-7227--in--un--braceArgs'/5,
  'nested--12342-12727--in--un--body'/3,
  'nested--12214-11218--in--un--binderName'/2,
  'nested--12279-11935--in--un--bindAll'/4,
  'nested--31125-25449--in--un--autoNumber'/3,
  'nested--25913-20236--in--un--autoImplicitField'/2,
  'nested--12015-6957--in--un--applyExpImp'/7,
  'nested--25117-19431--in--un--adjust'/3,
  'dn--un--show_Show_CmdArg'/1,
  'dn--un--showPrec_Show_CmdArg'/2,
  'dn--un--__Impl_Show_CmdArg'/0,
  'un--with_'/2,
  'un--withProblem'/3,
  'un--withFlags'/1,
  'un--whereBlock'/2,
  'un--visibility'/1,
  'un--visOption'/1,
  'un--visOpt'/1,
  'un--validPatternVar'/1,
  'un--usingDecls'/2,
  'un--typedArg'/2,
  'un--typeExpr'/3,
  'un--tyDecls'/4,
  'un--tuple'/4,
  'un--transformDecl'/2,
  'un--totalityOpt'/1,
  'un--topDecl'/2,
  'un--stripBraces'/1,
  'un--stringArgCmd'/3,
  'un--snocListExpr'/3,
  'un--singlelineStr'/3,
  'un--simplerExpr'/2,
  'un--simpleExpr'/2,
  'un--simpleData'/4,
  'un--simpleCon'/3,
  'un--showCmdArg'/1,
  'un--setVarOption'/0,
  'un--setOption'/1,
  'un--runParseCmd'/1,
  'un--runElabDecl'/2,
  'un--rewrite_'/2,
  'un--replCmd'/1,
  'un--record_'/2,
  'un--recordParam'/2,
  'un--recordDecl'/2,
  'un--recordConstructor'/1,
  'un--recordBody'/8,
  'un--progHdr'/1,
  'un--prog'/1,
  'un--pnowith'/0,
  'un--pnoeq'/1,
  'un--plhs'/0,
  'un--pibindListName'/2,
  'un--pibindList'/2,
  'un--pibindAll'/4,
  'un--pdef'/0,
  'un--patAlt'/2,
  'un--parserCommandsForHelp'/0,
  'un--parseRHS'/6,
  'un--parseMode'/0,
  'un--parens'/3,
  'un--paramDecls'/2,
  'un--optArgCmd'/4,
  'un--opExpr'/3,
  'un--onoff'/0,
  'un--onOffArgCmd'/3,
  'un--nonEmptyTuple'/4,
  'un--nonEmptyCommand'/0,
  'un--noArgCmd'/3,
  'un--nestedDpair'/3,
  'un--namespaceHead'/1,
  'un--namespaceDecl'/2,
  'un--nameArgCmd'/3,
  'un--mutualDecls'/2,
  'un--multiplicity'/1,
  'un--multilineStr'/3,
  'un--moduleArgCmd'/3,
  'un--mkTyConType'/3,
  'un--mkDataConType'/3,
  'un--loggingArgCmd'/3,
  'un--logLevel'/1,
  'un--listRange'/4,
  'un--listExpr'/3,
  'un--let_'/2,
  'un--letBlock'/2,
  'un--lazy'/2,
  'un--lam'/2,
  'un--knownCommands'/0,
  'un--interpBlock'/3,
  'un--import_'/2,
  'un--implicitPi'/2,
  'un--implDecl'/2,
  'un--implBinds'/2,
  'un--ifaceParam'/2,
  'un--ifaceDecl'/2,
  'un--if_'/2,
  'un--iOperator'/0,
  'un--helpCmd'/3,
  'un--help'/0,
  'un--getVisibility'/2,
  'un--getInitRange'/1,
  'un--getHelpType'/0,
  'un--gadtData'/5,
  'un--forall_'/2,
  'un--fnOpt'/1,
  'un--fnDirectOpt'/1,
  'un--fixDecl'/2,
  'un--fix'/0,
  'un--firstHelpLine'/1,
  'un--fieldDecl'/2,
  'un--field'/3,
  'un--failDecls'/2,
  'un--extractNames'/1,
  'un--extension'/0,
  'un--exprArgCmd'/3,
  'un--expr'/3,
  'un--explicitPi'/2,
  'un--eval'/0,
  'un--editLineNamePTermArgCmd'/3,
  'un--editLineNameOptionArgCmd'/3,
  'un--editLineNameCSVArgCmd'/3,
  'un--editLineNameArgCmd'/3,
  'un--editLineColNameArgCmd'/3,
  'un--dpairType'/3,
  'un--docArgCmd'/3,
  'un--doBlock'/2,
  'un--doAct'/2,
  'un--directiveDecl'/2,
  'un--directive'/2,
  'un--dependentDecorate'/3,
  'un--definition'/2,
  'un--defaultImplicitPi'/2,
  'un--decoratedSymbol'/2,
  'un--decoratedSimpleNamedArg'/1,
  'un--decoratedSimpleBinderName'/1,
  'un--decoratedPragma'/2,
  'un--decoratedNamespacedSymbol'/2,
  'un--decoratedKeyword'/2,
  'un--decoratedDataTypeName'/1,
  'un--decoratedDataConstructorName'/1,
  'un--decorateKeywords'/2,
  'un--decorateBoundedNames'/3,
  'un--decorate'/3,
  'un--declsArgCmd'/3,
  'un--dataVisOpt'/1,
  'un--dataOpts'/1,
  'un--dataOpt'/1,
  'un--dataDeclBody'/2,
  'un--dataDecl'/2,
  'un--dataBody'/6,
  'un--continueWithDecorated'/3,
  'un--continueWith'/2,
  'un--constraints'/2,
  'un--compileArgsCmd'/3,
  'un--commitSymbol'/2,
  'un--commitKeyword'/3,
  'un--command'/0,
  'un--collectDefs'/1,
  'un--cmdName'/1,
  'un--clause'/4,
  'un--claims'/2,
  'un--case_'/2,
  'un--caseRHS'/4,
  'un--caseAlt'/2,
  'un--builtinDecl'/2,
  'un--bracketedExpr'/3,
  'un--boundedNameDecoration'/3,
  'un--binder'/2,
  'un--bindSymbol'/1,
  'un--bindList'/2,
  'un--autoNumberArgCmd'/3,
  'un--autoImplicitPi'/2,
  'un--atom'/1,
  'un--argExpr'/3,
  'un--appExpr'/3,
  'un--aPTerm'/0,
  'un--KnownCommand'/1,
  'un--CommandTable'/0,
  'un--CommandDefinition'/0
]).
'case--collectDefs-22353'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V17 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V7)) end end, []}, fun (V8) -> V8 end, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> ('Idris.Idris2.Builtin':'un--snd'(V9)) end))(V4))))))), begin (V28 = ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Core.FC.EmptyFC'} end, ('Idris.Idris2.Core.FC':'un--mergeFC'(V18, V19)))) end end, V1, ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V20) -> ('Idris.Idris2.Builtin':'un--fst'(V20)) end))(V4))))), [{'Idris.Syntax.PDef', V28, V17} | ('un--collectDefs'(V5))] end end end.
'case--multilineStr,toLines-14294'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Prelude.Types.Left', V8} -> ('nested--12459-14260--in--un--toLines'(V0, V1, V2, V4, {'Prelude.Basics.:<', V6, {'Idris.Syntax.StrInterp', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), V8}}, V5)); {'Prelude.Types.Right', V9} -> case V9 of {'Data.List1.:::', V10, V11} -> case V11 of [] -> ('nested--12459-14260--in--un--toLines'(V0, V1, V2, V4, {'Prelude.Basics.:<', V6, {'Idris.Syntax.StrLiteral', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), V10}}, V5)); [E0 | E1] -> (fun (V12, V13) -> begin (V14 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3))), ('nested--12459-14260--in--un--toLines'(V0, V1, V2, V4, {'Prelude.Basics.:<', {'Prelude.Basics.Lin'}, {'Idris.Syntax.StrLiteral', V14, ('Idris.Idris2.Data.List':'un--last'(V11))}}, ('Idris.Idris2.Prelude.Types.SnocList':'un--<><'({'Prelude.Basics.:<', V5, ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V6, [{'Idris.Syntax.StrLiteral', V14, V10} | []]))}, ((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V16) -> [{'Idris.Syntax.StrLiteral', V14, V16} | []] end))(begin (V15 = [V12 | V13]), ('Idris.Idris2.Data.List':'un--init'(V15)) end)))))) end end(E0, E1)) end end end.
'case--doAct-13590'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> {'Libraries.Text.Parser.Core.Empty', [{'Idris.Syntax.DoBind', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V2)), ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V4)), case V4 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end, V5} | []]} end.
'case--nonEmptyTuple,mergePairs-9803'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> case ('nested--12137-9674--in--un--mergePairs'(V0, V1, V2, V3, V9, V4, V5)) of {'Builtin.MkPair', V13, V14} -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V11, V13)), {'Idris.Syntax.PPair', ('Idris.Idris2.Builtin':'un--fst'(V4)), V12, V14}} end end end.
'nested--12026-7226--in--un--underscore'(V0, V1, V2, V3) -> {'Idris.Parser.NamedArg', {'Core.Name.UN', {'Core.Name.Underscore'}}, {'Idris.Syntax.PImplicit', V3}}.
'nested--12448-14036--in--un--toPStr'(V0, V1, V2, V3) -> case V3 of {'Libraries.Text.Bounded.MkBounded', V4, V5, V6} -> case V4 of {'Prelude.Types.Right', V7} -> case V7 of {'Data.List1.:::', V8, V9} -> case V9 of [] -> {'Prelude.Types.Right', {'Idris.Syntax.StrLiteral', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), V8}}; _ -> {'Prelude.Types.Left', <<"Multi-line string is expected to begin with \x{22}\x{22}\x{22}"/utf8>>} end end; {'Prelude.Types.Left', V10} -> {'Prelude.Types.Right', {'Idris.Syntax.StrInterp', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), V10}} end end.
'nested--12459-14260--in--un--toLines'(V0, V1, V2, V3, V4, V5) -> case V3 of [] -> ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V5, [('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V4, [])) | []])); [E0 | E1] -> (fun (V6, V7) -> ('case--multilineStr,toLines-14294'(V0, V1, V2, V6, V7, V5, V4, case V6 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end)) end(E0, E1)) end.
'nested--12037-7735--in--un--singleName'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', [{'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V2)), case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> V3 end} | []]} end end}.
'nested--12350-12855--in--un--recFieldCompat'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--decorate'(V1, 2, ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'()))), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V3) -> fun (V4) -> V4 end end))(('un--decoratedSymbol'(V1, <<"->"/utf8>>)))), fun (V12) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(V12))(('un--decorate'(V1, 2, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))) end} end}.
'nested--20641-15341--in--un--parseWithArg'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<"|"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--expr'(('un--plhs'()), V1, V0))}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V4)), case V4 of {'Libraries.Text.Bounded.MkBounded', V5, V6, V7} -> V5 end}} end end} end}.
'nested--32086-26465--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> 1 end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))))), fun (V11) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V12) -> begin (V13 = V12), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end end))({'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--intLit'())})), fun () -> fun (V21) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V22) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V23) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V23)) end))(('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))))), fun (V31) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Editing', ((((V1(V11))(V21))(V22))(V31))}} end} end end} end end} end} end} end}.
'nested--31921-26293--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> 1 end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))))), fun (V11) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V12) -> begin (V13 = V12), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end end))({'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--intLit'())})), fun () -> fun (V21) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V22) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--name'())))}, fun (V23) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Editing', ((((V1(V11))(V21))(V22))(V23))}} end} end end} end end} end} end} end}.
'nested--31758-26122--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> 1 end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))))), fun (V11) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V12) -> begin (V13 = V12), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end end))({'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--intLit'())})), fun () -> fun (V21) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V22) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), {'Core.FC.Virtual', {'Core.FC.Interactive'}}, ('Idris.Idris2.Parser.Rule.Source':'un--init'())))}, fun () -> fun (V23) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Editing', ((((V1(V11))(V21))(V22))(V23))}} end end} end end} end end} end} end} end}.
'nested--31590-25945--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> 1 end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))))), fun (V11) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V12) -> begin (V13 = V12), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end end))({'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--intLit'())})), fun () -> fun (V21) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V22) -> begin (V23 = V22), case ((V23 band 9223372036854775808) =/= 0) of 'true' -> (V23 bor -9223372036854775808); _ -> (V23 band 9223372036854775807) end end end))({'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--intLit'())})), fun () -> fun (V31) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V32) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Editing', ((((V1(V11))(V21))(V31))(V32))}} end end} end end} end end} end} end} end}.
'nested--31455-25800--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> 1 end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)))))), fun (V11) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V12) -> begin (V13 = V12), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end end))({'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--intLit'())})), fun () -> fun (V21) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V22) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Editing', (((V1(V11))(V21))(V22))}} end end} end end} end} end} end}.
'nested--31381-25716--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--logLevel'({'Core.FC.Virtual', {'Core.FC.Interactive'}}))}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--31290-25625--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'())}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--expr'(('un--pdef'()), {'Core.FC.Virtual', {'Core.FC.Interactive'}}, ('Idris.Idris2.Parser.Rule.Source':'un--init'())))}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', ((V1(V4))(V3))} end end} end end} end} end}.
'nested--31225-25554--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--onOffLit'())}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--31125-25450--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('nested--31125-25449--in--un--autoNumber'(V0, V1, V2))}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--30988-25312--in--un--parse'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V3)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--setOption'(V1))}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', (V2(V4))} end end} end} end}.
'nested--30921-25239--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--topDecl'({'Core.FC.Virtual', {'Core.FC.Interactive'}}, ('Idris.Idris2.Parser.Rule.Source':'un--init'())))}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--30655-24966--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V3) -> fun (V4) -> {'Idris.Syntax.AModule', V4} end end))(('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"module"/utf8>>)))), fun (V12) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(V12))(('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'()))) end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V20) -> {'Idris.Syntax.Keyword', V20} end))(('Idris.Idris2.Parser.Rule.Source':'un--anyKeyword'()))), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V67 = fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V65, V66)) end end end end), fun (V68) -> fun (V69) -> ((((V67('erased'))('erased'))(V68))(V69)) end end end(fun (V62) -> {'Idris.Syntax.Symbol', V62} end))({'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ((begin (V34 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V32, V33)) end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V28) -> fun (V29) -> V28 end end))(('Idris.Idris2.Parser.Rule.Source':'un--anyReservedSymbol'()))), fun (V37) -> ((begin (V42 = fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V40, V41)) end end end end), fun (V43) -> fun (V44) -> ((((V42('erased'))('erased'))(V43))(V44)) end end end(V37))(('Idris.Idris2.Parser.Rule.Source':'un--eoi'()))) end}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ((begin (V51 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V49, V50)) end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(fun (V45) -> fun (V46) -> V45 end end))(('un--parens'(1, {'Core.FC.Virtual', {'Core.FC.Interactive'}}, ('Idris.Idris2.Parser.Rule.Source':'un--anyReservedSymbol'()))))), fun (V54) -> ((begin (V59 = fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V57, V58)) end end end end), fun (V60) -> fun (V61) -> ((((V59('erased'))('erased'))(V60))(V61)) end end end(V54))(('Idris.Idris2.Parser.Rule.Source':'un--eoi'()))) end} end})), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V175 = fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V173, V174)) end end end end), fun (V176) -> fun (V177) -> ((((V175('erased'))('erased'))(V176))(V177)) end end end(fun (V170) -> {'Idris.Syntax.Bracket', V170} end))({'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V84 = fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V82, V83)) end end end end), fun (V85) -> fun (V86) -> ((((V84('erased'))('erased'))(V85))(V86)) end end end(fun (V78) -> fun (V79) -> V78 end end))(((begin (V75 = fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V73, V74)) end end end end), fun (V76) -> fun (V77) -> ((((V75('erased'))('erased'))(V76))(V77)) end end end(fun (V70) -> 0 end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"[|"/utf8>>)))))), fun (V87) -> ((begin (V92 = fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V90, V91)) end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end(V87))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"|]"/utf8>>)))) end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V109 = fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V107, V108)) end end end end), fun (V110) -> fun (V111) -> ((((V109('erased'))('erased'))(V110))(V111)) end end end(fun (V103) -> fun (V104) -> V103 end end))(((begin (V100 = fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V98, V99)) end end end end), fun (V101) -> fun (V102) -> ((((V100('erased'))('erased'))(V101))(V102)) end end end(fun (V95) -> 1 end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`{"/utf8>>)))))), fun (V112) -> ((begin (V117 = fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V115, V116)) end end end end), fun (V118) -> fun (V119) -> ((((V117('erased'))('erased'))(V118))(V119)) end end end(V112))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)))) end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V134 = fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V132, V133)) end end end end), fun (V135) -> fun (V136) -> ((((V134('erased'))('erased'))(V135))(V136)) end end end(fun (V128) -> fun (V129) -> V128 end end))(((begin (V125 = fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V123, V124)) end end end end), fun (V126) -> fun (V127) -> ((((V125('erased'))('erased'))(V126))(V127)) end end end(fun (V120) -> 2 end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`("/utf8>>)))))), fun (V137) -> ((begin (V142 = fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V140, V141)) end end end end), fun (V143) -> fun (V144) -> ((((V142('erased'))('erased'))(V143))(V144)) end end end(V137))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))) end}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V159 = fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V157, V158)) end end end end), fun (V160) -> fun (V161) -> ((((V159('erased'))('erased'))(V160))(V161)) end end end(fun (V153) -> fun (V154) -> V153 end end))(((begin (V150 = fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V148, V149)) end end end end), fun (V151) -> fun (V152) -> ((((V150('erased'))('erased'))(V151))(V152)) end end end(fun (V145) -> 3 end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`["/utf8>>)))))), fun (V162) -> ((begin (V167 = fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V165, V166)) end end end end), fun (V168) -> fun (V169) -> ((((V167('erased'))('erased'))(V168))(V169)) end end end(V162))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>)))) end} end} end} end})), fun () -> ((begin (V183 = fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V181, V182)) end end end end), fun (V184) -> fun (V185) -> ((((V183('erased'))('erased'))(V184))(V185)) end end end(fun (V178) -> {'Idris.Syntax.APTerm', V178} end))(('un--typeExpr'(('un--pdef'()), {'Core.FC.Virtual', {'Core.FC.Interactive'}}, ('Idris.Idris2.Parser.Rule.Source':'un--init'()))))) end} end} end} end}}, fun () -> fun (V186) -> {'Libraries.Text.Parser.Core.Empty', (V1(V186))} end end} end} end}.
'nested--30588-24897--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), {'Core.FC.Virtual', {'Core.FC.Interactive'}}, ('Idris.Idris2.Parser.Rule.Source':'un--init'())))}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--30523-24830--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'())}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--30462-24768--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--getHelpType'()), fun (V3) -> {'Libraries.Text.Parser.Core.Empty', (V1(V3))} end} end} end}.
'nested--30323-24625--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'())}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--30257-24557--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--30208-24504--in--un--parse'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--runParseCmd'(V2)), fun () -> {'Libraries.Text.Parser.Core.Empty', V1} end} end}.
'nested--12137-9673--in--un--optionalPair'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Prelude.Types.Just', V8} -> {'Builtin.MkPair', V4, {'Builtin.MkPair', [], V8}}; {'Prelude.Types.Nothing'} -> begin (V9 = {'Idris.Syntax.PRef', V6, {'Core.Name.MN', <<"__infixTupleSection"/utf8>>, V4}}), {'Builtin.MkPair', begin (V10 = (V4 + 1)), case ((V10 band 9223372036854775808) =/= 0) of 'true' -> (V10 bor -9223372036854775808); _ -> (V10 band 9223372036854775807) end end, {'Builtin.MkPair', [{'Builtin.MkPair', V6, V9} | []], V9}} end end end.
'nested--12342-12726--in--un--oldSyntaxWarning'(V0, V1) -> ('Idris.Idris2.Data.String':'un--fastUnlines'([<<"DEPRECATED: old record update syntax."/utf8>> | [<<"  Use \x{22}{ f := v } p\x{22} instead of \x{22}record { f = v } p\x{22}"/utf8>> | [<<"  and \x{22}{ f $= v } p\x{22} instead of \x{22}record { f $= v } p\x{22}"/utf8>> | []]]])).
'nested--26761-21086--in--un--oldParamDecls'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V2, <<"("/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('un--decoratedSymbol'(V2, <<","/utf8>>)), {'Libraries.Text.Parser.Core.SeqEat', 1, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> {'Core.Name.UN', {'Core.Name.Basic', V4}} end))(('un--decoratedSimpleBinderName'(V2)))), fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V2, <<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V2, V3)), fun () -> fun (V13) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V12, {'Builtin.MkPair', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Builtin.MkPair', {'Core.TT.Explicit'}, V13}}}} end end} end} end end})), fun (V14) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V2, <<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', V14} end} end} end}.
'nested--24375-18680--in--un--noMangleWarning'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> <<V1/binary, V2/binary>> end end, <<""/utf8>>}, fun (V3) -> V3 end, [<<"DEPRECATED: \x{22}%nomangle\x{22}.\x{a}  Use \x{22}%export\x{22} instead"/utf8>> | []])).
'nested--26761-21087--in--un--newParamDecls'(V0, V1, V2, V3) -> ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V4) -> ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'({'Prelude.Interfaces.MkMonoid', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V6)) end end, []}, fun (V7) -> V7 end, V4)) end))(('Idris.Idris2.Libraries.Text.Parser':'un--some'(('un--typedArg'(V2, V3)))))).
'nested--32086-26464--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--31921-26292--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--31758-26121--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--31590-25944--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--31455-25799--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--31381-25715--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--31290-25624--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--31225-25553--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--31125-25448--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--30988-25311--in--un--names'(V0, V1, V2, V3) -> ('un--extractNames'(V3)).
'nested--30921-25238--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--30655-24965--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--30588-24896--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--30523-24829--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--30462-24767--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--30323-24624--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--30257-24556--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--30208-24503--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--12037-7736--in--un--nameList'(V0, V1) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<"["/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V1, <<","/utf8>>)), {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--name'())})), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V1, <<"]"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V3) -> {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), case V3 of {'Libraries.Text.Bounded.MkBounded', V4, V5, V6} -> V4 end} end))(('Idris.Idris2.Data.List1':'un--forget'(V2))))} end} end end}} end}.
'nested--12415-13822--in--un--mkPi'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Prelude.Types.Nothing'} -> V4; {'Prelude.Types.Just', V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> {'Idris.Syntax.PPi', V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V7, {'Prelude.Types.Nothing'}, V4, V8} end end.
'nested--12137-9674--in--un--mergePairs'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> ('Idris.Idris2.Builtin':'un--snd'(('nested--12137-9673--in--un--optionalPair'(V0, V1, V2, V3, V4, V5)))); [E0 | E1] -> (fun (V7, V8) -> ('case--nonEmptyTuple,mergePairs-9803'(V0, V1, V2, V3, V7, V8, V5, V4, ('nested--12137-9673--in--un--optionalPair'(V0, V1, V2, V3, V4, V5)))) end(E0, E1)) end.
'nested--12287-12128--in--un--letDecl'(V0, V1) -> ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V3) -> ('un--collectDefs'(('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'({'Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, V5)) end end, []}, fun (V6) -> V6 end, V3)))) end))(('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V2) -> {'Libraries.Text.Parser.Core.Try', ('un--topDecl'(V1, V2))} end)))).
'nested--12287-12127--in--un--letBinder'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V2) -> fun (V3) -> {'Builtin.MkPair', V2, V3} end end))(('un--multiplicity'(V1)))), fun (V11) -> ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(V11))(('un--expr'(('un--plhs'()), V1, V0)))) end}}, fun () -> fun (V19) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Libraries.Text.Parser.Core.Empty', case V19 of {'Libraries.Text.Bounded.MkBounded', V20, V21, V22} -> V20 end}, fun (V23) -> case V23 of {'Builtin.MkPair', V24, V25} -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, {'Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V19))))}, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V26) -> fun (V27) -> V27 end end))(('un--decoratedSymbol'(V1, <<":"/utf8>>)))), fun (V35) -> ((begin (V40 = fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V38, V39)) end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end(V35))(('un--typeExpr'(('un--pnoeq'(('un--pdef'()))), V1, V0)))) end})), fun (V43) -> {'Libraries.Text.Parser.Core.ThenEat', 1, {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--decoratedSymbol'(V1, <<"="/utf8>>)), fun () -> ('un--decoratedSymbol'(V1, <<":="/utf8>>)) end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pnowith'()), V1, V0)), fun () -> fun (V44) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V45) -> ('un--patAlt'(V1, V45)) end)), fun (V46) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Parser.Let.MkLetBinder', V24, V25, V43, V44, V46}} end} end end} end} end} end end} end end}.
'nested--12137-9671--in--un--lams'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> V5; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Builtin.MkPair', V8, V9} -> begin (V10 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V8))), {'Idris.Syntax.PLam', V10, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V9, {'Idris.Syntax.PInfer', V10}, ('nested--12137-9671--in--un--lams'(V0, V1, V2, V3, V7, V5))} end end end(E0, E1)) end.
'nested--25117-19432--in--un--go'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindListName'(V1, V0)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--commitSymbol'(V1, <<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--commitSymbol'(V1, <<"->"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('nested--25117-19432--in--un--go'(V0, V1)), fun (V3) -> {'Libraries.Text.Parser.Core.Empty', [V2 | V3]} end} end} end} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Empty', []} end}.
'nested--12350-12854--in--un--fieldName'(V0, V1, V2, V3) -> case V3 of {'Core.Name.UN', V4} -> case V4 of {'Core.Name.Basic', V5} -> V5; {'Core.Name.Field', V6} -> V6; _ -> <<"_impossible"/utf8>> end; _ -> <<"_impossible"/utf8>> end.
'nested--25913-20238--in--un--fieldBody'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V1)), fun (V4) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V1, <<","/utf8>>)), {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--decorate'(V1, 2, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"_"/utf8>>))}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Just', case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V8 end}, 1, <<"Fields have to be named"/utf8>>} end end} end})), fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V1, V0)), fun () -> fun (V10) -> {'Libraries.Text.Parser.Core.Empty', fun (V11) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> {'Idris.Syntax.MkField', V11, V2, V4, V3, V12, V10} end))(('Idris.Idris2.Data.List1':'un--forget'(V9)))) end} end end} end} end end} end}}, fun () -> fun (V20) -> {'Libraries.Text.Parser.Core.Empty', case V20 of {'Libraries.Text.Bounded.MkBounded', V21, V22, V23} -> (V21(('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V20)))) end} end end}.
'nested--29244-23535--in--un--explain'(V0, V1) -> ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> {'Builtin.MkPair', V2, V1} end))(V0)).
'nested--22584-16879--in--un--drop'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, V3)) of 1 -> ('nested--22584-16879--in--un--drop'(V0, V1, V4)); 0 -> [V3 | V4] end end(E0, E1)) end.
'nested--25913-20237--in--un--defImplicitField'(V0, V1) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V1, <<"default"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V1, V0)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', {'Core.TT.DefImplicit', V2}} end end}} end}.
'nested--12279-11937--in--un--continueLamCase'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> ('Idris.Idris2.Data.List1':'un--forget'(V4)) end))(('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V3) -> ('un--caseAlt'(V1, V3)) end))))}, fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.Empty', begin (V13 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V12))), begin (V14 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V2))))), begin (V15 = {'Core.Name.MN', <<"lcase"/utf8>>, 0}), {'Idris.Syntax.PLam', V14, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Idris.Syntax.PRef', V14, V15}, {'Idris.Syntax.PInfer', V14}, {'Idris.Syntax.PCase', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V13)), {'Idris.Syntax.PRef', V14, V15}, case V12 of {'Libraries.Text.Bounded.MkBounded', V16, V17, V18} -> V16 end}} end end end} end end}.
'nested--12279-11936--in--un--continueLam'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--bindList'(V1, V0)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--commitSymbol'(V1, <<"=>"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V0, {'Prelude.Types.Nothing'})), {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V1, V0)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', ('nested--12279-11935--in--un--bindAll'(V0, V1, V2, V3))} end end}} end} end end}.
'nested--20641-15340--in--un--clauseLHS'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Libraries.Data.IMaybe.Nothing'} -> ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> {'Builtin.MkPair', V7, []} end))(('un--opExpr'(('un--plhs'()), V4, V0)))); {'Libraries.Data.IMaybe.Just', V15} -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--opExpr'(('un--plhs'()), V4, V0)), fun () -> fun (V16) -> {'Libraries.Text.Parser.Core.Empty', case V16 of {'Idris.Syntax.PImplicit', V17} -> begin (V18 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V17))), case V15 of {'Builtin.MkPair', V19, V20} -> {'Builtin.MkPair', ('Idris.Idris2.Idris.Syntax.Traversals':'un--substFC'(V18, V19)), ((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end((begin (V28 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> case V25 of {'Builtin.MkPair', V26, V27} -> {'Builtin.MkPair', V26, (V24(V27))} end end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V21) -> ('Idris.Idris2.Idris.Syntax.Traversals':'un--substFC'(V18, V21)) end))))(V20))} end end; _ -> {'Builtin.MkPair', V16, []} end} end end} end.
'nested--12137-9672--in--un--buildOutput'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Builtin.MkPair', V6, V7} -> ('nested--12137-9671--in--un--lams'(V0, V1, V2, V3, V6, {'Idris.Syntax.PPair', V4, V0, V7})) end.
'nested--12026-7227--in--un--braceArgs'(V0, V1, V2, V3, V4) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V3, <<"{"/utf8>>))}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.MustWork', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('un--decoratedSymbol'(V3, <<","/utf8>>)), {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> {'Core.Name.UN', {'Core.Name.Basic', V6}} end))(('un--decoratedSimpleNamedArg'(V3))))}, fun () -> fun (V14) -> begin (V15 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V3, V14))), ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, {'Idris.Parser.NamedArg', case V14 of {'Libraries.Text.Bounded.MkBounded', V16, V17, V18} -> V16 end, {'Idris.Syntax.PRef', V15, case V14 of {'Libraries.Text.Bounded.MkBounded', V19, V20, V21} -> V19 end}}, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V22) -> fun (V23) -> V23 end end))(('un--decoratedSymbol'(V3, <<"="/utf8>>)))), fun (V31) -> ((begin (V36 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V34, V35)) end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end(V31))(('un--typeExpr'(('un--pdef'()), V3, V4)))) end}, fun () -> fun (V39) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Parser.NamedArg', case V14 of {'Libraries.Text.Bounded.MkBounded', V40, V41, V42} -> V40 end, V39}} end end})) end end end})), fun (V43) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], case ('Idris.Idris2.Data.List':'un--isCons'(V43)) of 1 -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V3, <<","/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V3, <<"_"/utf8>>))}, fun () -> fun (V44) -> {'Libraries.Text.Parser.Core.Empty', [('nested--12026-7226--in--un--underscore'(V0, V1, V2, ('Idris.Idris2.Core.FC':'un--boundToFC'(V3, V44)))) | []]} end end} end}; 0 -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"non-empty list required"/utf8>>} end)), fun (V45) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V3, <<"}"/utf8>>))}, fun () -> fun (V46) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, begin (V47 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V5, V46))))), {'Libraries.Text.Parser.Core.Empty', case ('Idris.Idris2.Data.List':'un--isNil'(V43)) of 1 -> [('nested--12026-7226--in--un--underscore'(V0, V1, V2, V47)) | []]; 0 -> V45 end} end, fun (V48) -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V48, V43))} end} end end} end} end}} end end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V3, <<"@{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V3, V4)), fun () -> fun (V49) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V3, <<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', [{'Idris.Parser.UnnamedAutoArg', V49} | []]} end} end end}} end} end}.
'nested--12342-12727--in--un--body'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V1, <<","/utf8>>)), ('un--field'(V2, V1, V0)))), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V1, <<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'un--forget'(V3))} end} end end}} end}.
'nested--12214-11218--in--un--binderName'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> {'Core.Name.Basic', V2} end))(('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun () -> ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> {'Core.Name.Underscore'} end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"_"/utf8>>)))) end}.
'nested--12279-11935--in--un--bindAll'(V0, V1, V2, V3) -> case V2 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Idris.Syntax.PLam', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V8)), V6, {'Core.TT.Explicit'}, case V8 of {'Libraries.Text.Bounded.MkBounded', V10, V11, V12} -> V10 end, V9, ('nested--12279-11935--in--un--bindAll'(V0, V1, V5, V3))} end end end(E0, E1)) end.
'nested--31125-25449--in--un--autoNumber'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> {'Prelude.Types.Nothing'} end))(('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"auto"/utf8>>)))), fun () -> ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V11))} end))(('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))) end}.
'nested--25913-20236--in--un--autoImplicitField'(V0, V1) -> ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> {'Core.TT.AutoImplicit'} end))(('un--decoratedKeyword'(V1, <<"auto"/utf8>>)))).
'nested--12015-6957--in--un--applyExpImp'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> V5; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Parser.UnnamedExpArg', V9} -> ('nested--12015-6957--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Syntax.PApp', {'Core.FC.MkFC', V1, V3, V4}, V5, V9}, V8)); {'Idris.Parser.UnnamedAutoArg', V10} -> ('nested--12015-6957--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Syntax.PAutoApp', {'Core.FC.MkFC', V1, V3, V4}, V5, V10}, V8)); {'Idris.Parser.NamedArg', V11, V12} -> begin (V13 = {'Core.FC.MkFC', V1, V3, V4}), ('nested--12015-6957--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Syntax.PNamedApp', V13, V5, V11, V12}, V8)) end; {'Idris.Parser.WithArg', V14} -> ('nested--12015-6957--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Syntax.PWithApp', {'Core.FC.MkFC', V1, V3, V4}, V5, V14}, V8)) end end(E0, E1)) end.
'nested--25117-19431--in--un--adjust'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V5)))), {'Builtin.MkPair', V3, {'Builtin.MkPair', case V5 of {'Libraries.Text.Bounded.MkBounded', V7, V8, V9} -> V7 end, V6}}} end end.
'dn--un--show_Show_CmdArg'(V0) -> case V0 of {'Idris.Parser.NoArg'} -> <<""/utf8>>; {'Idris.Parser.OnOffArg'} -> <<"(on|off)"/utf8>>; {'Idris.Parser.Args', V1} -> ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('dn--un--show_Show_CmdArg'(V2)) end))(V1)))); _ -> <<<<"<"/utf8>>/binary, <<('un--showCmdArg'(V0))/binary, <<">"/utf8>>/binary>>/binary>> end.
'dn--un--showPrec_Show_CmdArg'(V0, V1) -> ('dn--un--show_Show_CmdArg'(V1)).
'dn--un--__Impl_Show_CmdArg'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_CmdArg'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_CmdArg'(V1, V2)) end end}.
'un--with_'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"with"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12037-7735--in--un--singleName'(V1, V0)), fun () -> ('nested--12037-7736--in--un--nameList'(V1, V0)) end}, fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, V4}} end end} end} end end}} end}}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end}, fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PWithUnambigNames', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V10, V11}} end end} end end}.
'un--withProblem'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V0)), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.MustWork', {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V0, <<"("/utf8>>))}}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--bracketedExpr'(V0, V4, V2)), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V6) -> fun (V7) -> V7 end end))(('un--decoratedKeyword'(V0, <<"proof"/utf8>>)))), fun (V15) -> ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(V15))(((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V16) -> {'Core.Name.UN', {'Core.Name.Basic', V16}} end))(('un--decoratedSimpleBinderName'(V0)))))) end})), fun (V31) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkPWithProblem', V3, V5, V31}} end} end end} end end} end}.
'un--withFlags'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"syntactic"/utf8>>)), fun () -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> [{'TTImp.TTImp.Syntactic'} | V1] end))(('un--withFlags'(V0)))) end}, fun () -> {'Libraries.Text.Parser.Core.Empty', []} end}.
'un--whereBlock'(V0, V1) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedKeyword'(V0, <<"where"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'(V1, fun (V2) -> ('un--topDecl'(V0, V2)) end)), fun (V3) -> {'Libraries.Text.Parser.Core.Empty', ('un--collectDefs'(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, V5)) end end, []}, fun (V6) -> V6 end, V3))))} end} end}.
'un--visibility'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 0, ('un--visOption'(V0)), fun () -> {'Libraries.Text.Parser.Core.Empty', 0} end}.
'un--visOption'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V1) -> fun (V2) -> V2 end end))(('un--decoratedKeyword'(V0, <<"public"/utf8>>)))), fun (V10) -> ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(V10))(((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> 2 end))(('un--decoratedKeyword'(V0, <<"export"/utf8>>)))))) end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V26) -> 1 end))(('un--decoratedKeyword'(V0, <<"export"/utf8>>)))), fun () -> ((begin (V39 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V37, V38)) end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V34) -> 0 end))(('un--decoratedKeyword'(V0, <<"private"/utf8>>)))) end} end}.
'un--visOpt'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--visOption'(V0)), fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Left', V1}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--fnOpt'(V0)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Right', V2}} end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--fnDirectOpt'(V0)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Right', V3}} end end} end} end}.
'un--validPatternVar'(V0) -> case V0 of {'Core.Name.UN', V1} -> case V1 of {'Core.Name.Underscore'} -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkUnit'}}; {'Core.Name.Basic', V2} -> ('Idris.Idris2.Libraries.Text.Parser':'un--when'(case ('Idris.Idris2.Libraries.Utils.String':'un--lowerFirst'(V2)) of 1 -> 0; 0 -> 1 end, fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Not a pattern variable"/utf8>>} end)); _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Not a pattern variable"/utf8>>} end; _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Not a pattern variable"/utf8>>} end.
'un--usingDecls'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"using"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"("/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Core.Name.UN', {'Core.Name.Basic', V3}}} end} end end})), fun (V4) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V4, V5}} end end} end})), fun (V6) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlockAfter'(V2, fun (V7) -> ('un--topDecl'(V0, V7)) end)), fun () -> fun (V8) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V6, V8}} end end} end} end} end}} end} end}}, fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V9 of {'Libraries.Text.Bounded.MkBounded', V10, V11, V12} -> V10 end}, fun (V13) -> case V13 of {'Builtin.MkPair', V14, V15} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PUsing', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V9)), V14, ('un--collectDefs'(('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'({'Prelude.Interfaces.MkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, V17)) end end, []}, fun (V18) -> V18 end, V15))))}} end end} end end}.
'un--typedArg'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--parens'(1, V0, ('un--pibindListName'(V0, V1)))), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> {'Builtin.MkPair', case V6 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end, {'Builtin.MkPair', V4, {'Builtin.MkPair', {'Core.TT.Explicit'}, V7}}} end end end))(V2))} end end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V18) -> fun (V19) -> V18 end end))({'Libraries.Text.Parser.Core.Empty', {'Core.TT.AutoImplicit'}})), fun (V27) -> ((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(V27))(('un--decoratedKeyword'(V0, <<"auto"/utf8>>)))) end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V41 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V39, V40)) end end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end(fun (V35) -> fun (V36) -> V36 end end))(('un--decoratedKeyword'(V0, <<"default"/utf8>>)))), fun (V44) -> ((begin (V57 = fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V55, V56)) end end end end), fun (V58) -> fun (V59) -> ((((V57('erased'))('erased'))(V58))(V59)) end end end(V44))(((begin (V50 = fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V48, V49)) end end end end), fun (V51) -> fun (V52) -> ((((V50('erased'))('erased'))(V51))(V52)) end end end(fun (V45) -> {'Core.TT.DefImplicit', V45} end))(('un--simpleExpr'(V0, V1)))))) end}, fun () -> {'Libraries.Text.Parser.Core.Empty', {'Core.TT.Implicit'}} end} end}, fun (V60) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindListName'(V0, V1)), fun () -> fun (V61) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', ((begin (V74 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V72, V73)) end end end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V62) -> case V62 of {'Builtin.MkPair', V63, V64} -> case V64 of {'Builtin.MkPair', V65, V66} -> {'Builtin.MkPair', case V65 of {'Libraries.Text.Bounded.MkBounded', V67, V68, V69} -> V67 end, {'Builtin.MkPair', V63, {'Builtin.MkPair', V60, V66}}} end end end))(V61))} end} end end} end}} end} end}.
'un--typeExpr'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--binder'(V1, V2)), fun () -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V7) -> begin (V8 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V7))), case V7 of {'Libraries.Text.Bounded.MkBounded', V9, V10, V11} -> case V9 of {'Builtin.MkPair', V12, V13} -> ('nested--12415-13822--in--un--mkPi'(V2, V1, V0, V8, V12, V13)) end end end end))({'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(V0, V1, V2)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--bindSymbol'(V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(V0, V1, V2))}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V4, V5}} end end} end end}})), fun (V6) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V3, V6}} end} end end}})) end}.
'un--tyDecls'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V2, <<","/utf8>>)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', fun (V4) -> fun (V5) -> {'Builtin.MkPair', V4, V5} end end}, fun (V6) -> ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(V6))(('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V2)))) end}, fun (V14) -> ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(V14))({'Libraries.Text.Parser.Core.Bounds', V0})) end})), fun () -> fun (V22) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V2, <<":"/utf8>>))}, fun () -> fun (V23) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V23 of {'Libraries.Text.Bounded.MkBounded', V24, V25, V26} -> V26 end, <<"Expected a type declaration"/utf8>>, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V2, V3)), fun () -> fun (V27) -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V28) -> case V28 of {'Builtin.MkPair', V29, V30} -> {'Builtin.MkPair', V29, {'Builtin.MkPair', case V30 of {'Libraries.Text.Bounded.MkBounded', V31, V32, V33} -> V31 end, {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V2, V30)), V27}}} end end, V22))} end end})) end end} end end}, fun () -> fun (V34) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V3)), {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V35) -> case V35 of {'Builtin.MkPair', V36, V37} -> case V37 of {'Builtin.MkPair', V38, V39} -> case V39 of {'Builtin.MkPair', V40, V41} -> {'Idris.Syntax.MkPTy', V40, V40, V38, <<V1/binary, V36/binary>>, V41} end end end end, V34))}} end end}.
'un--tuple'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--nonEmptyTuple'(V0, V1, V2, V3)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--continueWithDecorated'(V0, V2, <<")"/utf8>>))}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--actD'({'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Builtin.MkPair', 4, {'Prelude.Types.Nothing'}}})), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PBracketed', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V4)))), V3}}} end end} end}.
'un--transformDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"transform"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'()), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--plhs'()), V0, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"="/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pnowith'()), V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, {'Builtin.MkPair', V3, V4}}} end end} end} end end} end end} end}}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end}, fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PTransform', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V10, V12, V13}} end end end} end end}.
'un--totalityOpt'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> 2 end))(('un--decoratedKeyword'(V0, <<"partial"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> 0 end))(('un--decoratedKeyword'(V0, <<"total"/utf8>>)))), fun () -> ((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V17) -> 1 end))(('un--decoratedKeyword'(V0, <<"covering"/utf8>>)))) end} end}.
'un--topDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--anyReservedIdent'()), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Just', case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> V5 end}, 1, <<"Cannot begin a declaration with a reserved identifier"/utf8>>} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--dataDecl'(V0, V1)), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.Empty', [V6 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--claims'(V0, V1)), fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'un--forget'(V7))} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--implDecl'(V0, V1)), fun () -> fun (V8) -> {'Libraries.Text.Parser.Core.Empty', [V8 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--definition'(V0, V1)), fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.Empty', [V9 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--fixDecl'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--ifaceDecl'(V0, V1)), fun () -> fun (V10) -> {'Libraries.Text.Parser.Core.Empty', [V10 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--recordDecl'(V0, V1)), fun () -> fun (V11) -> {'Libraries.Text.Parser.Core.Empty', [V11 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--namespaceDecl'(V0, V1)), fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.Empty', [V12 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--failDecls'(V0, V1)), fun () -> fun (V13) -> {'Libraries.Text.Parser.Core.Empty', [V13 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--mutualDecls'(V0, V1)), fun () -> fun (V14) -> {'Libraries.Text.Parser.Core.Empty', [V14 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--paramDecls'(V0, V1)), fun () -> fun (V15) -> {'Libraries.Text.Parser.Core.Empty', [V15 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--usingDecls'(V0, V1)), fun () -> fun (V16) -> {'Libraries.Text.Parser.Core.Empty', [V16 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--builtinDecl'(V0, V1)), fun () -> fun (V17) -> {'Libraries.Text.Parser.Core.Empty', [V17 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--runElabDecl'(V0, V1)), fun () -> fun (V18) -> {'Libraries.Text.Parser.Core.Empty', [V18 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--transformDecl'(V0, V1)), fun () -> fun (V19) -> {'Libraries.Text.Parser.Core.Empty', [V19 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--directiveDecl'(V0, V1)), fun () -> fun (V20) -> {'Libraries.Text.Parser.Core.Empty', [V20 | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.Terminal', <<"Expected CG directive"/utf8>>, fun (V21) -> case V21 of {'Parser.Lexer.Source.CGDirective', V22} -> {'Prelude.Types.Just', V22}; _ -> {'Prelude.Types.Nothing'} end end}}, fun () -> fun (V23) -> {'Libraries.Text.Parser.Core.Empty', [begin (V28 = ('Idris.Idris2.Data.String':'un--span'(fun (V24) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V24)) end, case V23 of {'Libraries.Text.Bounded.MkBounded', V25, V26, V27} -> V25 end))), {'Idris.Syntax.PDirective', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V23)), {'Idris.Syntax.CGAction', ('Idris.Idris2.Builtin':'un--fst'(V28)), ('un--stripBraces'(('Idris.Idris2.Data.String':'un--trim'(('Idris.Idris2.Builtin':'un--snd'(V28))))))}} end | []]} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--anyKeyword'())}, fun () -> fun (V29) -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Just', case V29 of {'Libraries.Text.Bounded.MkBounded', V30, V31, V32} -> V32 end}, 1, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V33) -> fun (V34) -> <<V33/binary, V34/binary>> end end, <<""/utf8>>}, fun (V35) -> V35 end, [<<"Keyword \x{27}"/utf8>> | [case V29 of {'Libraries.Text.Bounded.MkBounded', V36, V37, V38} -> V36 end | [<<"\x{27} is not a valid start to a declaration"/utf8>> | []]]]))} end end}, fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<"Couldn\x{27}t parse declaration"/utf8>>} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--stripBraces'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('nested--22584-16879--in--un--drop'(V0, ${, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('nested--22584-16879--in--un--drop'(V0, $}, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))))))))).
'un--stringArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--30323-24624--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.StringArg'}, {'Builtin.MkPair', V2, ('nested--30323-24625--in--un--parse'(V2, V1, V0))}}}.
'un--snocListExpr'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V2)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>))}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> V3 end))(V4))} end end} end end})), fun (V13) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V2)), fun () -> fun (V14) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V13, V14}} end end} end})), fun (V15) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>))}, fun () -> fun (V16) -> {'Libraries.Text.Parser.Core.Empty', begin (V28 = case V15 of {'Prelude.Types.Nothing'} -> {'Prelude.Basics.Lin'}; {'Prelude.Types.Just', V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> {'Prelude.Basics.:<', ('Idris.Idris2.Prelude.Types.SnocList':'un--<><'({'Prelude.Basics.Lin'}, V18)), ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V20) -> V19 end))(V16))} end end), begin (V29 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V16))))), begin (V30 = case ('Idris.Idris2.Data.SnocList':'dn--un--null_Foldable_SnocList'(V28)) of 1 -> V29; 0 -> ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)) end), {'Idris.Syntax.PSnocList', V29, V30, ('Idris.Idris2.Data.SnocList':'un--mapTR'(fun (V31) -> {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V31)), case V31 of {'Libraries.Text.Bounded.MkBounded', V32, V33, V34} -> V32 end} end, V28))} end end end} end end} end}.
'un--singlelineStr'(V0, V1, V2) -> ('un--decorate'(V1, 3, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--strBegin'())}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Libraries.Text.Parser.Core':'un--<||>'(1, 1, ('un--interpBlock'(V0, V1, V2)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--strLitLines'()) end))})), fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, case ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> {'Prelude.Types.Right', (V7(V10))} end end end end end, fun (V11) -> fun (V12) -> {'Prelude.Types.Right', V12} end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> case V15 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> case V16 of {'Prelude.Types.Right', V19} -> {'Prelude.Types.Right', (V18(V19))}; {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20} end end end end end end}, fun (V21) -> ('nested--12448-14036--in--un--toPStr'(V2, V1, V0, V21)) end, V4)) of {'Prelude.Types.Left', V22} -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Just', case V3 of {'Libraries.Text.Bounded.MkBounded', V23, V24, V25} -> V25 end}, 1, V22}; {'Prelude.Types.Right', V26} -> {'Libraries.Text.Parser.Core.Empty', V26} end, fun (V27) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--strEnd'()), fun () -> {'Libraries.Text.Parser.Core.Empty', V27} end} end} end}} end end}}, fun () -> fun (V28) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PString', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V28)), case V28 of {'Libraries.Text.Bounded.MkBounded', V29, V30, V31} -> V29 end}} end end})).
'un--simplerExpr'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> {'Core.Name.UN', {'Core.Name.Basic', V2}} end))(('un--decoratedSimpleBinderName'(V0))))}, fun () -> fun (V10) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"@"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V0, V1)), fun () -> fun (V11) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V10, V11}} end end}} end} end end}}, fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V12 of {'Libraries.Text.Bounded.MkBounded', V13, V14, V15} -> V13 end}, fun (V16) -> case V16 of {'Builtin.MkPair', V17, V18} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PAs', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V12)), ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V17)), case V17 of {'Libraries.Text.Bounded.MkBounded', V19, V20, V21} -> V19 end, V18}} end end} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--decoratedNamespacedSymbol'(V0, <<"[|"/utf8>>)), fun () -> fun (V22) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V23) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"|]"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V23, V22}} end} end end} end end}}, fun () -> fun (V24) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PIdiom', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V24)), ('Idris.Idris2.Builtin':'un--snd'(case V24 of {'Libraries.Text.Bounded.MkBounded', V25, V26, V27} -> V25 end)), ('Idris.Idris2.Builtin':'un--fst'(case V24 of {'Libraries.Text.Bounded.MkBounded', V28, V29, V30} -> V28 end))}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--atom'(V0)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--record_'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--singlelineStr'(('un--pdef'()), V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--multilineStr'(('un--pdef'()), V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<".("/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V31) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', V31} end} end end}} end}}, fun () -> fun (V32) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PDotted', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V32)), case V32 of {'Libraries.Text.Bounded.MkBounded', V33, V34, V35} -> V33 end}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"`("/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V36) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', V36} end} end end} end}}, fun () -> fun (V37) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PQuote', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V37)), case V37 of {'Libraries.Text.Bounded.MkBounded', V38, V39, V40} -> V38 end}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"`{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V41) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', V41} end} end end} end}}, fun () -> fun (V42) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PQuoteName', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V42)), case V42 of {'Libraries.Text.Bounded.MkBounded', V43, V44, V45} -> V43 end}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"`["/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V46) -> ('un--topDecl'(V0, V46)) end)), fun () -> fun (V47) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"]"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', V47} end} end end} end}}, fun () -> fun (V48) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PQuoteDecl', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V48)), ('un--collectDefs'(('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'({'Prelude.Interfaces.MkMonoid', fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V49, V50)) end end, []}, fun (V51) -> V51 end, case V48 of {'Libraries.Text.Bounded.MkBounded', V52, V53, V54} -> V52 end))))}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V61 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V59, V60)) end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end(fun (V55) -> fun (V56) -> V56 end end))(('un--decoratedSymbol'(V0, <<"~"/utf8>>)))), fun (V64) -> ((begin (V69 = fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V67, V68)) end end end end), fun (V70) -> fun (V71) -> ((((V69('erased'))('erased'))(V70))(V71)) end end end(V64))(('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V72) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PUnquote', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V72)), case V72 of {'Libraries.Text.Bounded.MkBounded', V73, V74, V75} -> V73 end}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>))}, fun () -> fun (V76) -> ('un--bracketedExpr'(V0, V76, V1)) end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"[<"/utf8>>))}, fun () -> fun (V77) -> ('un--snocListExpr'(V0, V77, V1)) end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"[>"/utf8>>)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"["/utf8>>)) end}}, fun () -> fun (V78) -> ('un--listExpr'(V0, V78, V1)) end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V85 = fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V83, V84)) end end end end), fun (V86) -> fun (V87) -> ((((V85('erased'))('erased'))(V86))(V87)) end end end(fun (V79) -> fun (V80) -> V80 end end))(('un--decoratedSymbol'(V0, <<"!"/utf8>>)))), fun (V88) -> ((begin (V93 = fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V91, V92)) end end end end), fun (V94) -> fun (V95) -> ((((V93('erased'))('erased'))(V94))(V95)) end end end(V88))(('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V96) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PBang', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V96)))), case V96 of {'Libraries.Text.Bounded.MkBounded', V97, V98, V99} -> V97 end}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"logging"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ((begin (V106 = fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V104, V105)) end end end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V100) -> ('Idris.Idris2.Data.String':'un--split'(fun (V101) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'($., V101)) end, V100)) end))(('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'()))))), fun (V109) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V110) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V111) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', ('Idris.Idris2.Core.Options.Log':'un--mkLogLevel\x{27}'(V109, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V110)))), V111}} end end} end end} end} end}}, fun () -> fun (V112) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V112 of {'Libraries.Text.Bounded.MkBounded', V113, V114, V115} -> V113 end}, fun (V116) -> case V116 of {'Builtin.MkPair', V117, V118} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PUnifyLog', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V112)), V117, V118}} end end} end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, {'Libraries.Text.Parser.Core.Bounds', ('un--lam'(V0, V1))}, fun (V119) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Libraries.Text.Parser.Core.Warning', {'Prelude.Types.Just', case V119 of {'Libraries.Text.Bounded.MkBounded', V120, V121, V122} -> V122 end}, <<"DEPRECATED: trailing lambda. Use a $ or parens"/utf8>>}, {'Libraries.Text.Parser.Core.Empty', case V119 of {'Libraries.Text.Bounded.MkBounded', V123, V124, V125} -> V123 end}} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--simpleExpr'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simplerExpr'(V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'())})), fun (V3) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, V3}} end} end end}}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V4 of {'Libraries.Text.Bounded.MkBounded', V5, V6, V7} -> V5 end}, fun (V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> begin (V22 = ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V11) -> {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V11)), case V11 of {'Libraries.Text.Bounded.MkBounded', V12, V13, V14} -> V12 end} end))(V10))), {'Libraries.Text.Parser.Core.Empty', case V22 of [] -> V9; _ -> {'Idris.Syntax.PPostfixApp', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V9, V22} end} end end end} end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V23) -> ('Idris.Idris2.Data.List1':'un--forget'(V23)) end))(('Idris.Idris2.Libraries.Text.Parser':'un--some'({'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'())}))))}, fun () -> fun (V31) -> {'Libraries.Text.Parser.Core.Empty', begin (V46 = ((begin (V43 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V41, V42)) end end end end), fun (V44) -> fun (V45) -> ((((V43('erased'))('erased'))(V44))(V45)) end end end(fun (V35) -> {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V35)), case V35 of {'Libraries.Text.Bounded.MkBounded', V36, V37, V38} -> V36 end} end))(case V31 of {'Libraries.Text.Bounded.MkBounded', V32, V33, V34} -> V32 end))), {'Idris.Syntax.PPostfixAppPartial', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V31)), V46} end} end end} end}.
'un--simpleData'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Libraries.Text.Parser.Core.Bounds', ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'())))})), fun (V4) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V0, <<"="/utf8>>))}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.MustWork', begin (V6 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V5))))), begin (V10 = {'Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V2)), case V2 of {'Libraries.Text.Bounded.MkBounded', V7, V8, V9} -> V7 end}), begin (V15 = fun (V11) -> {'Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V11)), case V11 of {'Libraries.Text.Bounded.MkBounded', V12, V13, V14} -> V12 end} end), begin (V23 = ('Idris.Idris2.Idris.Syntax':'un--papply'(V6, V10, ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(V15))(V4))))), {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<"|"/utf8>>)), ('un--simpleCon'(V0, V23, V3)))), fun () -> fun (V24) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V4, {'Builtin.MkPair', V6, ('Idris.Idris2.Data.List1':'un--forget'(V24))}}} end end} end end end end} end end} end}}, fun () -> fun (V25) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V25 of {'Libraries.Text.Bounded.MkBounded', V26, V27, V28} -> V26 end}, fun (V29) -> case V29 of {'Builtin.MkPair', V30, V31} -> case V31 of {'Builtin.MkPair', V32, V33} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkPData', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V25)))), case V2 of {'Libraries.Text.Bounded.MkBounded', V34, V35, V36} -> V34 end, ('un--mkTyConType'(V0, V32, V30)), [], V33}} end end end} end end}.
'un--simpleCon'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V0)), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedDataConstructorName'(V0))}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--argExpr'(('un--plhs'()), V0, V2)))), fun (V5) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V3, {'Builtin.MkPair', case V4 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end, {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V5}}}} end} end end} end}}, fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V9 of {'Libraries.Text.Bounded.MkBounded', V10, V11, V12} -> V10 end}, fun (V13) -> case V13 of {'Builtin.MkPair', V14, V15} -> case V15 of {'Builtin.MkPair', V16, V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> begin (V20 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V9))), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, (begin (V22 = fun (V21) -> V21 end), fun (V23) -> (V22(V23)) end end(<<"Named arguments not allowed in ADT constructors"/utf8>>))} end, ((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V27) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkPTy', V20, V18, V16, V14, V27}} end))(('un--mkDataConType'(V20, V1, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V24, V25)) end end, []}, fun (V26) -> V26 end, V19)))))))) end end end end end}} end end}.
'un--showCmdArg'(V0) -> case V0 of {'Idris.Parser.NoArg'} -> <<""/utf8>>; {'Idris.Parser.NameArg'} -> <<"name"/utf8>>; {'Idris.Parser.ExprArg'} -> <<"expr"/utf8>>; {'Idris.Parser.DocArg'} -> <<"keyword|expr"/utf8>>; {'Idris.Parser.DeclsArg'} -> <<"decls"/utf8>>; {'Idris.Parser.NumberArg'} -> <<"number"/utf8>>; {'Idris.Parser.AutoNumberArg'} -> <<"number|auto"/utf8>>; {'Idris.Parser.OptionArg'} -> <<"option"/utf8>>; {'Idris.Parser.FileArg'} -> <<"file"/utf8>>; {'Idris.Parser.ModuleArg'} -> <<"module"/utf8>>; {'Idris.Parser.StringArg'} -> <<"string"/utf8>>; {'Idris.Parser.OnOffArg'} -> <<"(on|off)"/utf8>>; {'Idris.Parser.CSVArg', V1} -> <<<<"["/utf8>>/binary, <<('un--showCmdArg'(V1))/binary, <<"]"/utf8>>/binary>>/binary>>; {'Idris.Parser.WithDefaultArg', V2, V3} -> <<('un--showCmdArg'(V3))/binary, <<<<"|"/utf8>>/binary, V2/binary>>/binary>>; {'Idris.Parser.NamedCmdArg', V4, V5} -> <<V4/binary, <<<<":"/utf8>>/binary, ('un--showCmdArg'(V5))/binary>>/binary>>; {'Idris.Parser.Args', V6} -> ('dn--un--show_Show_CmdArg'(V0)) end.
'un--setVarOption'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"eval"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 1, ('un--parseMode'()))), fun (V0) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.EvalMode', V0}} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"editor"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Editor', V1}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"cg"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.CG', V2}} end end} end} end} end}.
'un--setOption'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"showimplicits"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.ShowImplicits', V0}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"shownamespace"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.ShowNamespace', V0}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"showmachinenames"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.ShowMachineNames', V0}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"showtypes"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.ShowTypes', V0}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"profile"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Profile', V0}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"evaltiming"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.EvalTiming', V0}} end}, case V0 of 1 -> fun () -> ('un--setVarOption'()) end; 0 -> fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, (begin (V2 = fun (V1) -> V1 end), fun (V3) -> (V2(V3)) end end(<<"Unrecognised option"/utf8>>))} end end} end} end} end} end} end}.
'un--runParseCmd'(V0) -> case V0 of {'Idris.Parser.ParseREPLCmd', V1} -> ('un--replCmd'(V1)); {'Idris.Parser.ParseKeywordCmd', V2} -> ('Idris.Idris2.Libraries.Text.Parser':'un--choice'({'Prelude.Interfaces.MkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V18, V19, V20, V21)) end end end end end end end, fun (V22) -> fun (V23) -> V23 end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V26, V27, V28)) end end end end end}, 1, ((begin (V34 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V32, V33)) end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V29) -> ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(V29)) end))(V2)))); {'Idris.Parser.ParseIdentCmd', V37} -> ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(V37)) end.
'un--runElabDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"runElab"/utf8>>)), fun () -> ('un--expr'(('un--pnowith'()), V0, V1)) end}}, fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PRunElabDecl', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V2)), case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> V3 end}} end end}.
'un--rewrite_'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"rewrite"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--commitKeyword'(V0, V1, <<"in"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, V3}} end end} end} end end} end}}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V4 of {'Libraries.Text.Bounded.MkBounded', V5, V6, V7} -> V5 end}, fun (V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PRewrite', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V9, V10}} end end} end end}.
'un--replCmd'(V0) -> case V0 of [] -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Unrecognised command"/utf8>>}; [E0 | E1] -> (fun (V1, V2) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(V1)), fun () -> ('un--replCmd'(V2)) end} end} end(E0, E1)) end.
'un--record_'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"record"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, ('nested--12342-12727--in--un--body'(V1, V0, 1))} end}}}, fun (V2) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Libraries.Text.Parser.Core.Warning', {'Prelude.Types.Just', case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> V5 end}, ('nested--12342-12726--in--un--oldSyntaxWarning'(V1, V0))}, {'Libraries.Text.Parser.Core.Empty', case V2 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end}} end}, fun () -> {'Libraries.Text.Parser.Core.Bounds', ('nested--12342-12727--in--un--body'(V1, V0, 0))} end}, fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PUpdate', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V9)), case V9 of {'Libraries.Text.Bounded.MkBounded', V10, V11, V12} -> V10 end}} end end}.
'un--recordParam'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--typedArg'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> {'Core.Name.UN', {'Core.Name.Basic', V2}} end))(('un--decoratedSimpleBinderName'(V0))))}, fun () -> fun (V10) -> {'Libraries.Text.Parser.Core.Empty', [{'Builtin.MkPair', case V10 of {'Libraries.Text.Bounded.MkBounded', V11, V12, V13} -> V11 end, {'Builtin.MkPair', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Builtin.MkPair', {'Core.TT.Explicit'}, {'Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V10))}}}} | []]} end end} end}.
'un--recordDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V0)), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--dataVisOpt'(V0)), fun (V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V6) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"record"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--decoratedDataTypeName'(V0))}, fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V1)), ('un--recordParam'(V0, V1))})), fun (V8) -> begin (V12 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V9, V10)) end end, []}, fun (V11) -> V11 end, V8))), ('un--recordBody'(V0, V1, V2, V4, V5, V6, V7, V12)) end end} end end} end} end} end end} end}}, fun () -> fun (V13) -> {'Libraries.Text.Parser.Core.Empty', case V13 of {'Libraries.Text.Bounded.MkBounded', V14, V15, V16} -> (V14(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V13)))) end} end end}.
'un--recordConstructor'(V0) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"constructor"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--decoratedDataConstructorName'(V0))}, fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.Empty', V1} end end} end}.
'un--recordBody'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Libraries.Text.Parser.Core.Alt', 0, 1, {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEndIndent'(V1)), {'Libraries.Text.Parser.Core.Empty', fun (V8) -> {'Idris.Syntax.PRecord', V8, V2, V3, V4, {'Idris.Syntax.MkPRecordLater', V6, V7}} end}}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--decoratedKeyword'(V0, <<"where"/utf8>>))}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--dataOpts'(V0)), fun (V9) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--blockWithOptHeaderAfter'(V5, fun (V10) -> {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V11) -> fun (V12) -> V11 end end))(('un--recordConstructor'(V0)))), fun (V20) -> ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(V20))(('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V10)))) end} end, fun (V28) -> ('un--fieldDecl'(V0, V28)) end)), fun (V29) -> {'Libraries.Text.Parser.Core.Empty', fun (V30) -> {'Idris.Syntax.PRecord', V30, V2, V3, V4, {'Idris.Syntax.MkPRecord', V6, V7, V9, ('Idris.Idris2.Builtin':'un--fst'(V29)), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V31, V32)) end end, []}, fun (V33) -> V33 end, ('Idris.Idris2.Builtin':'un--snd'(V29))))}} end} end} end} end} end}.
'un--progHdr'(V0) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V0)), fun (V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, ('Idris.Idris2.Core.Name.Namespace':'un--nsAsModuleIdent'(('Idris.Idris2.Core.Name.Namespace':'un--mainNS'()))), {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"module"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'())} end})), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V3) -> ('un--import_'(V0, V3)) end)), fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V1, {'Builtin.MkPair', V2, V4}}} end} end} end}}, fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end}, fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkModule', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V12, V13, V10, []}} end end end} end}.
'un--prog'(V0) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V0)), fun (V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, ('Idris.Idris2.Core.Name.Namespace':'un--nsAsModuleIdent'(('Idris.Idris2.Core.Name.Namespace':'un--mainNS'()))), {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"module"/utf8>>)), fun () -> ('un--decorate'(V0, 8, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'())})) end})), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V3) -> ('un--import_'(V0, V3)) end)), fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V1, {'Builtin.MkPair', V2, V4}}} end} end} end}}, fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V6) -> ('un--topDecl'(V0, V6)) end)), fun (V7) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V5 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end}, fun (V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkModule', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V14, V15, V12, ('un--collectDefs'(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, V17)) end end, []}, fun (V18) -> V18 end, V7))))}} end end end} end} end}.
'un--pnowith'() -> {'Idris.Parser.MkParseOpts', 1, 0}.
'un--pnoeq'(V0) -> case V0 of {'Idris.Parser.MkParseOpts', V1, V2} -> {'Idris.Parser.MkParseOpts', 0, V2} end.
'un--plhs'() -> {'Idris.Parser.MkParseOpts', 0, 0}.
'un--pibindListName'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V0)), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), {'Libraries.Text.Parser.Core.Bounds', ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> {'Core.Name.UN', V3} end))(('nested--12214-11218--in--un--binderName'(V1, V0))))})), fun () -> fun (V11) -> begin (V12 = ('Idris.Idris2.Data.List1':'un--forget'(V11))), {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('un--decorateBoundedNames'(V0, 5, V12)), {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V13) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> {'Builtin.MkPair', V2, {'Builtin.MkPair', V14, V13}} end))(V12))}} end end} end}} end end end} end}.
'un--pibindList'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--pibindListName'(V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> {'Builtin.MkPair', V4, {'Builtin.MkPair', ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> {'Prelude.Types.Just', V8} end))(V6)), V7}} end end end))(V2))} end end}.
'un--pibindAll'(V0, V1, V2, V3) -> case V2 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Idris.Syntax.PPi', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V8)), V6, V1, case V8 of {'Libraries.Text.Bounded.MkBounded', V10, V11, V12} -> V10 end, V9, ('un--pibindAll'(V0, V1, V5, V3))} end end end(E0, E1)) end.
'un--pdef'() -> {'Idris.Parser.MkParseOpts', 1, 1}.
'un--patAlt'(V0, V1) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"|"/utf8>>)), fun () -> ('un--caseAlt'(V0, V1)) end}.
'un--parserCommandsForHelp'() -> [('un--exprArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"t"/utf8>> | [<<"type"/utf8>> | []]]}, fun (V0) -> {'Idris.Syntax.Check', V0} end, ('un--firstHelpLine'(<<"t"/utf8>>)))) | [('un--exprArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"ti"/utf8>> | []]}, fun (V1) -> {'Idris.Syntax.CheckWithImplicits', V1} end, ('un--firstHelpLine'(<<"ti"/utf8>>)))) | [('un--exprArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"printdef"/utf8>> | []]}, fun (V2) -> {'Idris.Syntax.PrintDef', V2} end, ('un--firstHelpLine'(<<"printdef"/utf8>>)))) | [('un--exprArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"s"/utf8>> | [<<"search"/utf8>> | []]]}, fun (V3) -> {'Idris.Syntax.TypeSearch', V3} end, ('un--firstHelpLine'(<<"s"/utf8>>)))) | [('un--nameArgCmd'({'Idris.Parser.ParseIdentCmd', <<"di"/utf8>>}, fun (V4) -> {'Idris.Syntax.DebugInfo', V4} end, ('un--firstHelpLine'(<<"di"/utf8>>)))) | [('un--moduleArgCmd'({'Idris.Parser.ParseKeywordCmd', [<<"module"/utf8>> | [<<"import"/utf8>> | []]]}, fun (V5) -> {'Idris.Syntax.ImportMod', V5} end, ('un--firstHelpLine'(<<"module"/utf8>>)))) | [('un--stringArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"package"/utf8>> | []]}, fun (V6) -> {'Idris.Syntax.ImportPackage', V6} end, ('un--firstHelpLine'(<<"package"/utf8>>)))) | [('un--noArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"q"/utf8>> | [<<"quit"/utf8>> | [<<"exit"/utf8>> | []]]]}, {'Idris.Syntax.Quit'}, ('un--firstHelpLine'(<<"q"/utf8>>)))) | [('un--noArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"cwd"/utf8>> | []]}, {'Idris.Syntax.CWD'}, ('un--firstHelpLine'(<<"cwd"/utf8>>)))) | [('un--stringArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"cd"/utf8>> | []]}, fun (V7) -> {'Idris.Syntax.CD', V7} end, ('un--firstHelpLine'(<<"cd"/utf8>>)))) | [('un--stringArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"sh"/utf8>> | []]}, fun (V8) -> {'Idris.Syntax.RunShellCommand', V8} end, ('un--firstHelpLine'(<<"sh"/utf8>>)))) | [('un--optArgCmd'({'Idris.Parser.ParseIdentCmd', <<"set"/utf8>>}, fun (V9) -> {'Idris.Syntax.SetOpt', V9} end, 1, ('un--firstHelpLine'(<<"set"/utf8>>)))) | [('un--optArgCmd'({'Idris.Parser.ParseIdentCmd', <<"unset"/utf8>>}, fun (V10) -> {'Idris.Syntax.SetOpt', V10} end, 0, ('un--firstHelpLine'(<<"unset"/utf8>>)))) | [('un--noArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"opts"/utf8>> | []]}, {'Idris.Syntax.GetOpts'}, ('un--firstHelpLine'(<<"opts"/utf8>>)))) | [('un--compileArgsCmd'({'Idris.Parser.ParseREPLCmd', [<<"c"/utf8>> | [<<"compile"/utf8>> | []]]}, fun (V11) -> fun (V12) -> {'Idris.Syntax.Compile', V11, V12} end end, ('un--firstHelpLine'(<<"c"/utf8>>)))) | [('un--exprArgCmd'({'Idris.Parser.ParseIdentCmd', <<"exec"/utf8>>}, fun (V13) -> {'Idris.Syntax.Exec', V13} end, ('un--firstHelpLine'(<<"exec"/utf8>>)))) | [('un--stringArgCmd'({'Idris.Parser.ParseIdentCmd', <<"directive"/utf8>>}, fun (V14) -> {'Idris.Syntax.CGDirective', V14} end, ('un--firstHelpLine'(<<"directive"/utf8>>)))) | [('un--stringArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"l"/utf8>> | [<<"load"/utf8>> | []]]}, fun (V15) -> {'Idris.Syntax.Load', V15} end, ('un--firstHelpLine'(<<"l"/utf8>>)))) | [('un--noArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"r"/utf8>> | [<<"reload"/utf8>> | []]]}, {'Idris.Syntax.Reload'}, ('un--firstHelpLine'(<<"r"/utf8>>)))) | [('un--noArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"e"/utf8>> | [<<"edit"/utf8>> | []]]}, {'Idris.Syntax.Edit'}, ('un--firstHelpLine'(<<"e"/utf8>>)))) | [('un--nameArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"miss"/utf8>> | [<<"missing"/utf8>> | []]]}, fun (V16) -> {'Idris.Syntax.Missing', V16} end, ('un--firstHelpLine'(<<"miss"/utf8>>)))) | [('un--nameArgCmd'({'Idris.Parser.ParseKeywordCmd', [<<"total"/utf8>> | []]}, fun (V17) -> {'Idris.Syntax.Total', V17} end, ('un--firstHelpLine'(<<"total"/utf8>>)))) | [('un--docArgCmd'({'Idris.Parser.ParseIdentCmd', <<"doc"/utf8>>}, fun (V18) -> {'Idris.Syntax.Doc', V18} end, ('un--firstHelpLine'(<<"doc"/utf8>>)))) | [('un--moduleArgCmd'({'Idris.Parser.ParseIdentCmd', <<"browse"/utf8>>}, fun (V19) -> {'Idris.Syntax.Browse', ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V19))} end, ('un--firstHelpLine'(<<"browse"/utf8>>)))) | [('un--loggingArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"log"/utf8>> | [<<"logging"/utf8>> | []]]}, fun (V20) -> {'Idris.Syntax.SetLog', V20} end, ('un--firstHelpLine'(<<"log"/utf8>>)))) | [('un--autoNumberArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"consolewidth"/utf8>> | []]}, fun (V21) -> {'Idris.Syntax.SetConsoleWidth', V21} end, ('un--firstHelpLine'(<<"consolewidth"/utf8>>)))) | [('un--onOffArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"colour"/utf8>> | [<<"color"/utf8>> | []]]}, fun (V22) -> {'Idris.Syntax.SetColor', V22} end, ('un--firstHelpLine'(<<"colour"/utf8>>)))) | [('un--noArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"m"/utf8>> | [<<"metavars"/utf8>> | []]]}, {'Idris.Syntax.Metavars'}, ('un--firstHelpLine'(<<"m"/utf8>>)))) | [('un--editLineColNameArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"typeat"/utf8>> | []]}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> {'Idris.Syntax.TypeAt', V24, V25, V26} end end end end, ('un--firstHelpLine'(<<"typeat"/utf8>>)))) | [('un--editLineColNameArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"cs"/utf8>> | [<<"casesplit"/utf8>> | []]]}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> {'Idris.Syntax.CaseSplit', V27, V28, V29, V30} end end end end, ('un--firstHelpLine'(<<"cs"/utf8>>)))) | [('un--editLineNameArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"ac"/utf8>> | [<<"addclause"/utf8>> | []]]}, fun (V31) -> fun (V32) -> fun (V33) -> {'Idris.Syntax.AddClause', V31, V32, V33} end end end, ('un--firstHelpLine'(<<"ac"/utf8>>)))) | [('un--editLineNameArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"ml"/utf8>> | [<<"makelemma"/utf8>> | []]]}, fun (V34) -> fun (V35) -> fun (V36) -> {'Idris.Syntax.MakeLemma', V34, V35, V36} end end end, ('un--firstHelpLine'(<<"ml"/utf8>>)))) | [('un--editLineNameArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"mc"/utf8>> | [<<"makecase"/utf8>> | []]]}, fun (V37) -> fun (V38) -> fun (V39) -> {'Idris.Syntax.MakeCase', V37, V38, V39} end end end, ('un--firstHelpLine'(<<"mc"/utf8>>)))) | [('un--editLineNameArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"mw"/utf8>> | [<<"makewith"/utf8>> | []]]}, fun (V40) -> fun (V41) -> fun (V42) -> {'Idris.Syntax.MakeWith', V40, V41, V42} end end end, ('un--firstHelpLine'(<<"mw"/utf8>>)))) | [('un--editLineNameArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"intro"/utf8>> | []]}, fun (V43) -> fun (V44) -> fun (V45) -> {'Idris.Syntax.Intro', V43, V44, V45} end end end, ('un--firstHelpLine'(<<"intro"/utf8>>)))) | [('un--editLineNamePTermArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"refine"/utf8>> | []]}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> {'Idris.Syntax.Refine', V46, V47, V48, V49} end end end end, ('un--firstHelpLine'(<<"refine"/utf8>>)))) | [('un--editLineNameCSVArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"ps"/utf8>> | [<<"proofsearch"/utf8>> | []]]}, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> {'Idris.Syntax.ExprSearch', V50, V51, V52, V53} end end end end, ('un--firstHelpLine'(<<"ps"/utf8>>)))) | [('un--noArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"psnext"/utf8>> | []]}, {'Idris.Syntax.Editing', {'Idris.Syntax.ExprSearchNext'}}, ('un--firstHelpLine'(<<"psnext"/utf8>>)))) | [('un--editLineNameOptionArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"gd"/utf8>> | []]}, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> {'Idris.Syntax.GenerateDef', V54, V55, V56, V57} end end end end, ('un--firstHelpLine'(<<"gd"/utf8>>)))) | [('un--noArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"gdnext"/utf8>> | []]}, {'Idris.Syntax.Editing', {'Idris.Syntax.GenerateDefNext'}}, ('un--firstHelpLine'(<<"gdnext"/utf8>>)))) | [('un--noArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"version"/utf8>> | []]}, {'Idris.Syntax.ShowVersion'}, ('un--firstHelpLine'(<<"version"/utf8>>)))) | [('un--helpCmd'({'Idris.Parser.ParseREPLCmd', [<<"?"/utf8>> | [<<"h"/utf8>> | [<<"help"/utf8>> | []]]]}, fun (V58) -> {'Idris.Syntax.Help', V58} end, ('un--firstHelpLine'(<<"?"/utf8>>)))) | [('un--declsArgCmd'({'Idris.Parser.ParseKeywordCmd', [<<"let"/utf8>> | []]}, fun (V59) -> {'Idris.Syntax.NewDefn', V59} end, ('un--firstHelpLine'(<<"let"/utf8>>)))) | [('un--exprArgCmd'({'Idris.Parser.ParseREPLCmd', [<<"fs"/utf8>> | [<<"fsearch"/utf8>> | []]]}, fun (V60) -> {'Idris.Syntax.FuzzyTypeSearch', V60} end, ('un--firstHelpLine'(<<"fs"/utf8>>)))) | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]].
'un--parseRHS'(V0, V1, V2, V3, V4, V5) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<"="/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.MustWork', {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V1, V4)), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], ('un--whereBlock'(V1, V3)))), fun (V7) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V6, V7}} end} end end}} end}}, fun () -> fun (V8) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V4)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V8 of {'Libraries.Text.Bounded.MkBounded', V9, V10, V11} -> V9 end}, fun (V12) -> case V12 of {'Builtin.MkPair', V13, V14} -> begin (V15 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V2, V8))))), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkPatClause', V15, ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V16) -> fun (V17) -> ('Idris.Idris2.Idris.Syntax':'un--applyArgs'(V16, V17)) end end, V5)), V13, V14}} end end end}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V1, <<"with"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--withFlags'(V1)), fun (V18) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V1, <<"|"/utf8>>)), ('un--withProblem'(V1, V3, V4)))), fun () -> fun (V19) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlockAfter'(V3, fun (V20) -> ('un--clause'(((('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(case V19 of {'Data.List1.:::', V21, V22} -> V22 end)) + 1) + V0), {'Libraries.Data.IMaybe.Just', V5}, V1, V20)) end))}, fun () -> fun (V23) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V18, {'Builtin.MkPair', V19, ('Idris.Idris2.Data.List1':'un--forget'(V23))}}} end end} end end} end}} end}}, fun () -> fun (V24) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V24 of {'Libraries.Text.Bounded.MkBounded', V25, V26, V27} -> V25 end}, fun (V28) -> case V28 of {'Builtin.MkPair', V29, V30} -> case V30 of {'Builtin.MkPair', V31, V32} -> begin (V33 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V2, V24))))), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkWithClause', V33, ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V34) -> fun (V35) -> ('Idris.Idris2.Idris.Syntax':'un--applyArgs'(V34, V35)) end end, V5)), V31, V29, V32}} end end end end} end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedKeyword'(V1, <<"impossible"/utf8>>))}, fun () -> fun (V36) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V4)), {'Libraries.Text.Parser.Core.Empty', begin (V37 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V2, V36))))), {'Idris.Syntax.MkImpossible', V37, ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V38) -> fun (V39) -> ('Idris.Idris2.Idris.Syntax':'un--applyArgs'(V38, V39)) end end, V5))} end}} end end} end} end}.
'un--parseMode'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"typecheck"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 0} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"tc"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 0} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"normalise"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 1} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"default"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 1} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"normal"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 1} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"normalize"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 1} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"execute"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 2} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"exec"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 2} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"scheme"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 3} end} end} end} end} end} end} end} end} end}.
'un--parens'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(fun (V29) -> fun (V30) -> V29 end end))({'Libraries.Text.Parser.Core.SeqEmpty', 1, V0, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V4) -> fun (V5) -> V4 end end))({'Libraries.Text.Parser.Core.Empty', fun (V3) -> V3 end})), fun (V13) -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(V13))(('un--decoratedSymbol'(V1, <<"("/utf8>>)))) end}, fun (V21) -> ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(V21))(V2)) end})), fun (V38) -> ((begin (V43 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V41, V42)) end end end end), fun (V44) -> fun (V45) -> ((((V43('erased'))('erased'))(V44))(V45)) end end end(V38))(('un--decoratedSymbol'(V1, <<")"/utf8>>)))) end}.
'un--paramDecls'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedKeyword'(V0, <<"parameters"/utf8>>))}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--26761-21087--in--un--newParamDecls'(V1, V0, V0, V1)), fun () -> ('nested--26761-21086--in--un--oldParamDecls'(V1, V0, V0, V1)) end}}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlockAfter'(V2, fun (V5) -> ('un--topDecl'(V0, V5)) end))}, fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V4, V6))))}, fun (V7) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PParameters', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V7)), case V4 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end, ('un--collectDefs'(('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'({'Prelude.Interfaces.MkMonoid', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V11, V12)) end end, []}, fun (V13) -> V13 end, case V6 of {'Libraries.Text.Bounded.MkBounded', V14, V15, V16} -> V14 end))))}} end} end end}} end end}} end end} end}.
'un--optArgCmd'(V0, V1, V2, V3) -> {'Builtin.MkPair', ('nested--30988-25311--in--un--names'(V3, V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.OptionArg'}, {'Builtin.MkPair', V3, ('nested--30988-25312--in--un--parse'(V3, V2, V1, V0))}}}.
'un--opExpr'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--appExpr'(V0, V1, V2))}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Alt', 1, 0, case case V0 of {'Idris.Parser.MkParseOpts', V4, V5} -> V4 end of 1 -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V23) -> fun (V24) -> V24 end end))({'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V6) -> fun (V7) -> V7 end end))(('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)))), fun (V15) -> ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(V15))(('un--decoratedSymbol'(V1, <<"="/utf8>>)))) end})), fun (V32) -> ((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(V32))(('un--opExpr'(V0, V1, V2)))) end}}, fun () -> fun (V40) -> {'Libraries.Text.Parser.Core.Empty', begin (V41 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V3, V40))))), begin (V42 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V41))), {'Idris.Syntax.POp', V41, V42, {'Core.Name.UN', {'Core.Name.Basic', <<"="/utf8>>}}, case V3 of {'Libraries.Text.Bounded.MkBounded', V43, V44, V45} -> V43 end, case V40 of {'Libraries.Text.Bounded.MkBounded', V46, V47, V48} -> V46 end} end end} end end}; 0 -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"= not allowed"/utf8>>} end, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('un--iOperator'())}, fun () -> fun (V49) -> {'Libraries.Text.Parser.Core.SeqEat', 0, case V49 of {'Libraries.Text.Bounded.MkBounded', V50, V51, V52} -> case V50 of {'Core.Name.UN', V53} -> case V53 of {'Core.Name.Basic', V54} -> case V54 of <<"$"/utf8>> -> ('un--typeExpr'(V0, V1, V2)); _ -> ('un--expr'(V0, V1, V2)) end; _ -> ('un--expr'(V0, V1, V2)) end; _ -> ('un--expr'(V0, V1, V2)) end end, fun () -> fun (V55) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V49, V55}} end end} end end}}}, fun () -> fun (V56) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V56 of {'Libraries.Text.Bounded.MkBounded', V57, V58, V59} -> V57 end}, fun (V60) -> case V60 of {'Builtin.MkPair', V61, V62} -> begin (V63 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V3, V56))))), begin (V64 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V61))), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.POp', V63, V64, case V61 of {'Libraries.Text.Bounded.MkBounded', V65, V66, V67} -> V65 end, case V3 of {'Libraries.Text.Bounded.MkBounded', V68, V69, V70} -> V68 end, V62}} end end end end} end end}, fun () -> {'Libraries.Text.Parser.Core.Empty', case V3 of {'Libraries.Text.Bounded.MkBounded', V71, V72, V73} -> V71 end} end} end} end end}.
'un--onoff'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> 1 end))(('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"on"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> 0 end))(('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"off"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"expected \x{27}on\x{27} or \x{27}off\x{27}"/utf8>>} end} end}.
'un--onOffArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--31225-25553--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.OnOffArg'}, {'Builtin.MkPair', V2, ('nested--31225-25554--in--un--parse'(V2, V1, V0))}}}.
'un--nonEmptyTuple'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--some'({'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>))}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('un--typeExpr'(('un--pdef'()), V0, V2)))), fun (V5) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V5}} end} end end})), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--continueWithDecorated'(V0, V2, <<")"/utf8>>)), fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--actD'({'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Builtin.MkPair', 4, {'Prelude.Types.Nothing'}}})), {'Libraries.Text.Parser.Core.Empty', case V6 of {'Data.List1.:::', V8, V9} -> ('nested--12137-9672--in--un--buildOutput'(V3, V2, V1, V0, ('Idris.Idris2.Builtin':'un--fst'(V8)), ('nested--12137-9674--in--un--mergePairs'(V3, V2, V1, V0, 0, V8, V9)))) end}} end end} end end}.
'un--nonEmptyCommand'() -> ('Idris.Idris2.Libraries.Text.Parser':'un--choice'({'Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> V20 end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V23, V24, V25)) end end end end end}, 1, ((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(fun (V26) -> case V26 of {'Builtin.MkPair', V27, V28} -> case V28 of {'Builtin.MkPair', V29, V30} -> case V30 of {'Builtin.MkPair', V31, V32} -> V32 end end end end))(('un--parserCommandsForHelp'()))))).
'un--noArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--30208-24503--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.NoArg'}, {'Builtin.MkPair', V2, ('nested--30208-24504--in--un--parse'(V2, V1, V0))}}}.
'un--nestedDpair'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--dpairType'(V0, V1, V2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V2)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"**"/utf8>>))}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--nestedDpair'(V0, V4, V2)), fun () -> ('un--expr'(('un--pdef'()), V0, V2)) end}}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PDPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V5)))), ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V3, {'Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V5))))}, case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end}} end end} end end} end end} end}.
'un--namespaceHead'(V0) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"namespace"/utf8>>)), fun () -> ('un--decorate'(V0, 6, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--namespaceId'())})) end}.
'un--namespaceDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V0)), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--namespaceHead'(V0)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'(V3, fun (V5) -> ('un--topDecl'(V0, V5)) end)), fun (V6) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, {'Builtin.MkPair', V4, V6}}} end} end end} end} end}}, fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V7 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end}, fun (V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PNamespace', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V7)), V14, ('un--collectDefs'(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, V17)) end end, []}, fun (V18) -> V18 end, V15))))}} end end end} end end}.
'un--nameArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--30257-24556--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.NameArg'}, {'Builtin.MkPair', V2, ('nested--30257-24557--in--un--parse'(V2, V1, V0))}}}.
'un--mutualDecls'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"mutual"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlockAfter'(V2, fun (V3) -> ('un--topDecl'(V0, V3)) end))} end} end}}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PMutual', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'({'Prelude.Interfaces.MkMonoid', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V6)) end end, []}, fun (V7) -> V7 end, case V4 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end))}} end end}.
'un--multiplicity'(V0) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))))), fun (V1) -> case V1 of {'Prelude.Types.Just', V2} -> case V2 of 0 -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V3) -> fun (V4) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V3, V4)) end end, 0, fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V6)) end end, 1}))}; 1 -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V7, V8)) end end, 0, fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V9, V10)) end end, 1}))}; _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Invalid multiplicity (must be 0 or 1)"/utf8>>} end; {'Prelude.Types.Nothing'} -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'())}; _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Invalid multiplicity (must be 0 or 1)"/utf8>>} end end}.
'un--multilineStr'(V0, V1, V2) -> ('un--decorate'(V1, 3, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--multilineBegin'()), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Libraries.Text.Parser.Core':'un--<||>'(1, 1, ('un--interpBlock'(V0, V1, V2)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--strLitLines'()) end))})), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--strEnd'()), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V4, ('nested--12459-14260--in--un--toLines'(V2, V1, V0, V3, {'Prelude.Basics.Lin'}, {'Prelude.Basics.Lin'}))}} end} end} end}} end}}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.Empty', case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> case V6 of {'Builtin.MkPair', V9, V10} -> case V9 of {'Builtin.MkPair', V11, V12} -> {'Idris.Syntax.PMultiline', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V5)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V12)), V10} end end end} end end})).
'un--moduleArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--30523-24829--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.ModuleArg'}, {'Builtin.MkPair', V2, ('nested--30523-24830--in--un--parse'(V2, V1, V0))}}}.
'un--mkTyConType'(V0, V1, V2) -> case V2 of [] -> {'Idris.Syntax.PType', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V1))}; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V3))), {'Idris.Syntax.PPi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Prelude.Types.Nothing'}, {'Idris.Syntax.PType', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V1))}, ('un--mkTyConType'(V0, V1, V4))} end end(E0, E1)) end.
'un--mkDataConType'(V0, V1, V2) -> case V2 of [] -> {'Prelude.Types.Just', V1}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Parser.UnnamedExpArg', V5} -> ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> {'Idris.Syntax.PPi', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Prelude.Types.Nothing'}, V5, V6} end))(('un--mkDataConType'(V0, V1, V4)))); {'Idris.Parser.UnnamedAutoArg', V14} -> ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> {'Idris.Syntax.PPi', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.AutoImplicit'}, {'Prelude.Types.Nothing'}, V14, V15} end))(('un--mkDataConType'(V0, V1, V4)))); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end.
'un--loggingArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--31381-25715--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.Args', [{'Idris.Parser.StringArg'} | [{'Idris.Parser.NumberArg'} | []]]}, {'Builtin.MkPair', V2, ('nested--31381-25716--in--un--parse'(V2, V1, V0))}}}.
'un--logLevel'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> {'Prelude.Types.Nothing'} end))(('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"off"/utf8>>)))))), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V9) -> ('Idris.Idris2.Data.String':'un--split'(fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'($., V10)) end, V9)) end))(('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'()))))), fun (V18) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V19) -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Just', ('Idris.Idris2.Core.Options.Log':'un--mkLogLevel\x{27}'(V18, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V19))))}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"expected a log level"/utf8>>} end} end}.
'un--listRange'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V0, <<"]"/utf8>>))}, fun () -> fun (V4) -> begin (V5 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V4))))), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--getInitRange'(V3)), fun (V6) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('un--decorateKeywords'(V0, V3)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PRangeStream', V5, ('Idris.Idris2.Builtin':'un--fst'(V6)), ('Idris.Idris2.Builtin':'un--snd'(V6))}}} end} end end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V7) -> fun (V8) -> V7 end end))(('un--expr'(('un--pdef'()), V0, V2)))), fun (V16) -> ((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(V16))(('un--decoratedSymbol'(V0, <<"]"/utf8>>)))) end}}, fun () -> fun (V24) -> begin (V25 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V24))))), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--getInitRange'(V3)), fun (V26) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('un--decorateKeywords'(V0, V3)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PRange', V25, ('Idris.Idris2.Builtin':'un--fst'(V26)), ('Idris.Idris2.Builtin':'un--snd'(V26)), case V24 of {'Libraries.Text.Bounded.MkBounded', V27, V28, V29} -> V27 end}}} end} end end end} end}.
'un--listExpr'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pnowith'()), V0, V2)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"|"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--doAct'(V0, V2)))), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"]"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V3, V4}} end} end end} end} end end}}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end}, fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PComprehension', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V5)))), V10, ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'({'Prelude.Interfaces.MkMonoid', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V12, V13)) end end, []}, fun (V14) -> V14 end, V11))}} end end} end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V2)), fun () -> fun (V15) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>))}, fun () -> fun (V16) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--expr'(('un--pdef'()), V0, V2))}, fun () -> fun (V17) -> {'Libraries.Text.Parser.Core.Empty', ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> V17 end))(V16))} end end} end end})), fun (V26) -> {'Libraries.Text.Parser.Core.Empty', [((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V27) -> V15 end))(V1)) | V26]} end} end end})), fun (V35) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<".."/utf8>>)), fun () -> ('un--listRange'(V0, V1, V2, V35)) end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>))}, fun () -> fun (V36) -> {'Libraries.Text.Parser.Core.Empty', begin (V37 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V36))))), begin (V38 = case ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V35)) of 1 -> V37; 0 -> ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V36)) end), {'Idris.Syntax.PList', V37, V38, (begin (V51 = fun (V50) -> V50 end), fun (V52) -> (V51(V52)) end end(((begin (V47 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V45, V46)) end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V39) -> {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V39)), case V39 of {'Libraries.Text.Bounded.MkBounded', V40, V41, V42} -> V40 end} end))(V35))))} end end} end end} end} end} end}.
'un--let_'(V0, V1) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"let"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V2) -> ('un--letBlock'(V0, V2)) end)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--commitKeyword'(V0, V1, <<"in"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Idris.Parser.Let':'un--mkLets'(V0, V3, V4))} end end} end} end end}} end}.
'un--letBlock'(V0, V1) -> {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Libraries.Text.Parser.Core':'un--<||>'(1, 1, ('nested--12287-12127--in--un--letBinder'(V1, V0)), fun () -> ('nested--12287-12128--in--un--letDecl'(V1, V0)) end))}.
'un--lazy'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V2) -> fun (V3) -> V3 end end))(('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Lazy"/utf8>>)))))), fun (V11) -> ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(V11))(('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V19) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PDelayed', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V19)), 1, case V19 of {'Libraries.Text.Bounded.MkBounded', V20, V21, V22} -> V20 end}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V23) -> fun (V24) -> V24 end end))(('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Inf"/utf8>>)))))), fun (V32) -> ((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(V32))(('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V40) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PDelayed', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V40)), 0, case V40 of {'Libraries.Text.Bounded.MkBounded', V41, V42, V43} -> V41 end}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V50 = fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V48, V49)) end end end end), fun (V51) -> fun (V52) -> ((((V50('erased'))('erased'))(V51))(V52)) end end end(fun (V44) -> fun (V45) -> V45 end end))(('un--decorate'(V0, 3, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Delay"/utf8>>)))))), fun (V53) -> ((begin (V58 = fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V56, V57)) end end end end), fun (V59) -> fun (V60) -> ((((V58('erased'))('erased'))(V59))(V60)) end end end(V53))(('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V61) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PDelay', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V61)), case V61 of {'Libraries.Text.Bounded.MkBounded', V62, V63, V64} -> V62 end}} end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V71 = fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V69, V70)) end end end end), fun (V72) -> fun (V73) -> ((((V71('erased'))('erased'))(V72))(V73)) end end end(fun (V65) -> fun (V66) -> V66 end end))(('un--decorate'(V0, 3, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Force"/utf8>>)))))), fun (V74) -> ((begin (V79 = fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V77, V78)) end end end end), fun (V80) -> fun (V81) -> ((((V79('erased'))('erased'))(V80))(V81)) end end end(V74))(('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V82) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PForce', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V82)), case V82 of {'Libraries.Text.Bounded.MkBounded', V83, V84, V85} -> V83 end}} end end} end} end} end}.
'un--lam'(V0, V1) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"\x{5c}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedKeyword'(V0, <<"case"/utf8>>))})), fun (V2) -> case V2 of {'Prelude.Types.Nothing'} -> ('nested--12279-11936--in--un--continueLam'(V1, V0)); {'Prelude.Types.Just', V3} -> ('nested--12279-11937--in--un--continueLamCase'(V1, V0, V3)) end end}} end}.
'un--knownCommands'() -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"t"/utf8>> | [<<"type"/utf8>> | []]], <<"Check the type of an expression"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Builtin.MkPair', <<"ti"/utf8>>, <<"Check the type of an expression, showing implicit arguments"/utf8>>} | [{'Builtin.MkPair', <<"printdef"/utf8>>, <<"Show the definition of a pattern-matching function"/utf8>>} | []]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"s"/utf8>> | [<<"search"/utf8>> | []]], <<"Search for values by type"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Builtin.MkPair', <<"di"/utf8>>, <<"Show debugging information for a name"/utf8>>} | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"module"/utf8>> | [<<"import"/utf8>> | []]], <<"Import an extra module"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Builtin.MkPair', <<"package"/utf8>>, <<"Import every module of the package"/utf8>>} | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"q"/utf8>> | [<<"quit"/utf8>> | [<<"exit"/utf8>> | []]]], <<"Exit the Idris system"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Builtin.MkPair', <<"cwd"/utf8>>, <<"Displays the current working directory"/utf8>>} | [{'Builtin.MkPair', <<"cd"/utf8>>, <<"Change the current working directory"/utf8>>} | [{'Builtin.MkPair', <<"sh"/utf8>>, <<"Run a shell command"/utf8>>} | [{'Builtin.MkPair', <<"set"/utf8>>, ('Idris.Idris2.Data.String':'un--fastUnlines'([<<"Set an option"/utf8>> | [<<"  eval                specify what evaluation mode to use:"/utf8>> | [<<"                        typecheck|tc"/utf8>> | [<<"                        normalise|normalize|normal"/utf8>> | [<<"                        execute|exec"/utf8>> | [<<"                        scheme"/utf8>> | [<<""/utf8>> | [<<"  editor              specify the name of the editor command"/utf8>> | [<<""/utf8>> | [<<"  cg                  specify the codegen/backend to use"/utf8>> | [<<"                      builtin codegens are:"/utf8>> | [<<"                        chez"/utf8>> | [<<"                        racket"/utf8>> | [<<"                        refc"/utf8>> | [<<"                        node"/utf8>> | [<<""/utf8>> | [<<"  showimplicits       enable displaying implicit arguments as part of the"/utf8>> | [<<"                      output"/utf8>> | [<<""/utf8>> | [<<"  shownamespace       enable displaying namespaces as part of the output"/utf8>> | [<<""/utf8>> | [<<"  showmachinenames    enable displaying machine names as part of the"/utf8>> | [<<"                      output"/utf8>> | [<<""/utf8>> | [<<"  showtypes           enable displaying the type of the term as part of"/utf8>> | [<<"                      the output"/utf8>> | [<<""/utf8>> | [<<"  profile"/utf8>> | [<<""/utf8>> | [<<"  evaltiming          enable timing how long evaluation takes and"/utf8>> | [<<"                      displaying this before the printing of the output"/utf8>> | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]))} | [{'Builtin.MkPair', <<"unset"/utf8>>, <<"Unset an option"/utf8>>} | [{'Builtin.MkPair', <<"opts"/utf8>>, <<"Show current options settings"/utf8>>} | []]]]]]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"c"/utf8>> | [<<"compile"/utf8>> | []]], <<"Compile to an executable"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Builtin.MkPair', <<"exec"/utf8>>, <<"Compile to an executable and run"/utf8>>} | [{'Builtin.MkPair', <<"directive"/utf8>>, <<"Set a codegen-specific directive"/utf8>>} | []]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"l"/utf8>> | [<<"load"/utf8>> | []]], <<"Load a file"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"r"/utf8>> | [<<"reload"/utf8>> | []]], <<"Reload current file"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"e"/utf8>> | [<<"edit"/utf8>> | []]], <<"Edit current file using $EDITOR or $VISUAL"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"miss"/utf8>> | [<<"missing"/utf8>> | []]], <<"Show missing clauses"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Builtin.MkPair', <<"total"/utf8>>, <<"Check the totality of a name"/utf8>>} | [{'Builtin.MkPair', <<"doc"/utf8>>, <<"Show documentation for a keyword, a name, or a primitive"/utf8>>} | [{'Builtin.MkPair', <<"browse"/utf8>>, <<"Browse contents of a namespace"/utf8>>} | []]]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"log"/utf8>> | [<<"logging"/utf8>> | []]], <<"Set logging level"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Builtin.MkPair', <<"consolewidth"/utf8>>, <<"Set the width of the console output (0 for unbounded) (auto by default)"/utf8>>} | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"colour"/utf8>> | [<<"color"/utf8>> | []]], <<"Whether to use colour for the console output (enabled by default)"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"m"/utf8>> | [<<"metavars"/utf8>> | []]], <<"Show remaining proof obligations (metavariables or holes)"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Builtin.MkPair', <<"typeat"/utf8>>, <<"Show type of term <n> defined on line <l> and column <c>"/utf8>>} | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"cs"/utf8>> | [<<"casesplit"/utf8>> | []]], <<"Case split term <n> defined on line <l> and column <c>"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"ac"/utf8>> | [<<"addclause"/utf8>> | []]], <<"Add clause to term <n> defined on line <l>"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"ml"/utf8>> | [<<"makelemma"/utf8>> | []]], <<"Make lemma for term <n> defined on line <l>"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"mc"/utf8>> | [<<"makecase"/utf8>> | []]], <<"Make case on term <n> defined on line <l>"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"mw"/utf8>> | [<<"makewith"/utf8>> | []]], <<"Add with expression on term <n> defined on line <l>"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Builtin.MkPair', <<"intro"/utf8>>, <<"Introduce unambiguous constructor in hole <n> defined on line <l>"/utf8>>} | [{'Builtin.MkPair', <<"refine"/utf8>>, <<"Refine hole <h> with identifier <n> on line <l> and column <c>"/utf8>>} | []]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"ps"/utf8>> | [<<"proofsearch"/utf8>> | []]], <<"Search for a proof"/utf8>>)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Builtin.MkPair', <<"psnext"/utf8>>, <<"Show next proof"/utf8>>} | [{'Builtin.MkPair', <<"gd"/utf8>>, <<"Try to generate a definition using proof-search"/utf8>>} | [{'Builtin.MkPair', <<"gdnext"/utf8>>, <<"Show next definition"/utf8>>} | [{'Builtin.MkPair', <<"version"/utf8>>, <<"Display the Idris version"/utf8>>} | []]]]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--29244-23535--in--un--explain'([<<"?"/utf8>> | [<<"h"/utf8>> | [<<"help"/utf8>> | []]]], ('Idris.Idris2.Data.String':'un--fastUnlines'([<<"Display help text, optionally of a specific command.\x{a}"/utf8>> | [<<"If run without arguments, lists all the REPL commands along with their"/utf8>> | [<<"initial line of help text.\x{a}"/utf8>> | [<<"More detailed help can then be obtained by running the :help command"/utf8>> | [<<"with another command as an argument, e.g."/utf8>> | [<<"  > :help :help"/utf8>> | [<<"  > :help :set"/utf8>> | [<<"(the leading \x{27}:\x{27} in the command argument is optional)"/utf8>> | []]]]]]]]])))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Builtin.MkPair', <<"let"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V0) -> fun (V1) -> <<V0/binary, V1/binary>> end end, <<""/utf8>>}, fun (V2) -> V2 end, [<<"Define a new value.\x{a}\x{a}First, declare the type of your new value, e.g.\x{a}  :let myValue : List Nat\x{a}\x{a}Then, define the value:\x{a}  :let myValue = [1, 2, 3]\x{a}\x{a}Now the value is in scope at the REPL:\x{a}  > map (+ 2) myValue\x{a}  [3, 4, 5]"/utf8>> | []]))} | []], ('nested--29244-23535--in--un--explain'([<<"fs"/utf8>> | [<<"fsearch"/utf8>> | []]], <<"Search for global definitions by sketching the names distribution of the wanted type(s)."/utf8>>)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
'un--interpBlock'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V20) -> fun (V21) -> V20 end end))({'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V3) -> fun (V4) -> V4 end end))(('Idris.Idris2.Parser.Rule.Source':'un--interpBegin'()))), fun (V12) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(V12))({'Libraries.Text.Parser.Core.MustWork', ('un--expr'(V0, V1, V2))})) end})), fun (V29) -> ((begin (V34 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V32, V33)) end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(V29))(('Idris.Idris2.Parser.Rule.Source':'un--interpEnd'()))) end}.
'un--import_'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"import"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> 1 end))(('un--decoratedKeyword'(V0, <<"public"/utf8>>)))))), fun (V10) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 8, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'())})), fun () -> fun (V11) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V11)), {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"as"/utf8>>)))), fun () -> ('un--decorate'(V0, 6, {'Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--namespaceId'())})) end})), fun (V12) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V10, {'Builtin.MkPair', V11, V12}}} end} end end} end} end}}, fun () -> fun (V13) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V13 of {'Libraries.Text.Bounded.MkBounded', V14, V15, V16} -> V14 end}, fun (V17) -> case V17 of {'Builtin.MkPair', V18, V19} -> case V19 of {'Builtin.MkPair', V20, V21} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkImport', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V13)), V18, V20, V21}} end end end}} end end}.
'un--implicitPi'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindList'(V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', V2} end} end end} end}}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V3 of {'Libraries.Text.Bounded.MkBounded', V4, V5, V6} -> V6 end, <<"Cannot return an implicit argument"/utf8>>, ('un--decoratedSymbol'(V0, <<"->"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), V0, V1))}, fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.Empty', ('un--pibindAll'(V0, {'Core.TT.Implicit'}, case V3 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end, V7))} end end} end} end end}.
'un--implDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V0)), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--visOpt'(V0)))), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--getVisibility'({'Prelude.Types.Nothing'}, V3)), fun (V4) -> begin (V6 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V5) -> ('Idris.Idris2.Data.Either':'un--getRight'(V5)) end, V3))), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V7) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, {'Builtin.MkUnit'}, ('un--decoratedKeyword'(V0, <<"implementation"/utf8>>)))), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V25) -> fun (V26) -> V25 end end))({'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V8) -> fun (V9) -> V9 end end))(('un--decoratedSymbol'(V0, <<"["/utf8>>)))), fun (V17) -> ((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(V17))(('un--decorate'(V0, 2, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))) end})), fun (V34) -> ((begin (V39 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V37, V38)) end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(V34))(('un--decoratedSymbol'(V0, <<"]"/utf8>>)))) end})), fun (V42) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--implBinds'(V0, V1)), fun (V43) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--constraints'(V0, V1)), fun (V44) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V45) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ((begin (V52 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V50, V51)) end end end end), fun (V53) -> fun (V54) -> ((((V52('erased'))('erased'))(V53))(V54)) end end end(fun (V46) -> fun (V47) -> V47 end end))(('Idris.Idris2.Parser.Rule.Source':'un--continue'(V1)))), fun (V55) -> ((begin (V60 = fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V58, V59)) end end end end), fun (V61) -> fun (V62) -> ((((V60('erased'))('erased'))(V61))(V62)) end end end(V55))(('un--simpleExpr'(V0, V1)))) end})), fun (V63) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V64) -> fun (V65) -> V65 end end))(('un--decoratedKeyword'(V0, <<"using"/utf8>>)))), fun (V73) -> ((begin (V86 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V84, V85)) end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(V73))(((begin (V79 = fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V77, V78)) end end end end), fun (V80) -> fun (V81) -> ((((V79('erased'))('erased'))(V80))(V81)) end end end(fun (V74) -> ('Idris.Idris2.Data.List1':'un--forget'(V74)) end))(('Idris.Idris2.Libraries.Text.Parser':'un--some'(('un--decorate'(V0, 2, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))))))) end})), fun (V89) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ((begin (V96 = fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V94, V95)) end end end end), fun (V97) -> fun (V98) -> ((((V96('erased'))('erased'))(V97))(V98)) end end end(fun (V90) -> fun (V91) -> V91 end end))(('un--decoratedKeyword'(V0, <<"where"/utf8>>)))), fun (V99) -> ((begin (V105 = fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V103, V104)) end end end end), fun (V106) -> fun (V107) -> ((((V105('erased'))('erased'))(V106))(V107)) end end end(V99))(('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'(V7, fun (V100) -> ('un--topDecl'(V0, V100)) end)))) end})), fun (V108) -> {'Libraries.Text.Parser.Core.Empty', fun (V109) -> {'Idris.Syntax.PImplementation', V109, V4, V6, 0, V43, V44, V45, V63, V42, V89, ((begin (V118 = fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V116, V117)) end end end end), fun (V119) -> fun (V120) -> ((((V118('erased'))('erased'))(V119))(V120)) end end end(fun (V110) -> ('un--collectDefs'(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V111, V112)) end end, []}, fun (V113) -> V113 end, V110)))) end))(V108))} end} end} end} end} end end} end} end} end}} end} end end} end} end}}, fun () -> fun (V121) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', case V121 of {'Libraries.Text.Bounded.MkBounded', V122, V123, V124} -> (V122(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V121)))) end}} end end}.
'un--implBinds'(V0, V1) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, V4)) end end, []}, (begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('nested--25117-19431--in--un--adjust'(V1, V0, V5)) end)), V2)) end))(('nested--25117-19432--in--un--go'(V1, V0)))).
'un--ifaceParam'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"("/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V0)), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', ('Idris.Idris2.Data.List1':'un--forget'(V3)), {'Builtin.MkPair', V2, V4}}} end} end end} end} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'())))}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', [case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end | []], {'Builtin.MkPair', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V9, V10)) end end, 0, fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V11, V12)) end end, 1})), {'Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5))}}}} end end} end}.
'un--ifaceDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V0)), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--visibility'(V0)), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"interface"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--constraints'(V0, V1)), fun (V5) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--ifaceParam'(V0, V1)))), fun (V7) -> begin (V21 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, V9)) end end, []}, fun (V10) -> case V10 of {'Builtin.MkPair', V11, V12} -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> {'Builtin.MkPair', V13, V12} end))(V11)) end end, V7))), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V22) -> fun (V23) -> V23 end end))(('un--decoratedSymbol'(V0, <<"|"/utf8>>)))), fun (V31) -> ((begin (V36 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V34, V35)) end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end(V31))(('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))))) end})), fun (V39) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedKeyword'(V0, <<"where"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('un--recordConstructor'(V0)))), fun (V40) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'(V4, fun (V41) -> ('un--topDecl'(V0, V41)) end)), fun (V42) -> {'Libraries.Text.Parser.Core.Empty', fun (V43) -> {'Idris.Syntax.PInterface', V43, V3, V5, V6, V2, V21, V39, V40, ('un--collectDefs'(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V44, V45)) end end, []}, fun (V46) -> V46 end, V42))))} end} end} end} end} end} end end} end end} end}} end} end} end} end}}, fun () -> fun (V47) -> {'Libraries.Text.Parser.Core.Empty', case V47 of {'Libraries.Text.Bounded.MkBounded', V48, V49, V50} -> (V48(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V47)))) end} end end}.
'un--if_'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"if"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--commitKeyword'(V0, V1, <<"then"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--commitKeyword'(V0, V1, <<"else"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, {'Builtin.MkPair', V3, V4}}} end end} end} end end} end} end end}} end}}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end}, fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PIfThenElse', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V10, V12, V13}} end end end}} end end}.
'un--iOperator'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--operator'()), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V17) -> fun (V18) -> V17 end end))({'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V0) -> fun (V1) -> V1 end end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`"/utf8>>)))), fun (V9) -> ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(V9))(('Idris.Idris2.Parser.Rule.Source':'un--name'()))) end})), fun (V26) -> ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(V26))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`"/utf8>>)))) end} end}.
'un--helpCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--30462-24767--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.StringArg'}, {'Builtin.MkPair', V2, ('nested--30462-24768--in--un--parse'(V2, V1, V0))}}}.
'un--help'() -> [{'Builtin.MkPair', [<<"<expr>"/utf8>> | []], {'Builtin.MkPair', {'Idris.Parser.NoArg'}, <<"Evaluate an expression"/utf8>>}} | ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> {'Builtin.MkPair', ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> <<<<":"/utf8>>/binary, V7/binary>> end))(V1)), {'Builtin.MkPair', V3, V5}} end end end end))(('un--parserCommandsForHelp'())))].
'un--getVisibility'(V0, V1) -> case V0 of {'Prelude.Types.Nothing'} -> case V1 of [] -> {'Libraries.Text.Parser.Core.Empty', 0}; [E4 | E5] -> (fun (V2, V3) -> case V2 of {'Prelude.Types.Left', V4} -> ('un--getVisibility'({'Prelude.Types.Just', V4}, V3)); _ -> case V1 of [E6 | E7] -> (fun (V5, V6) -> ('un--getVisibility'(V0, V6)) end(E6, E7)) end end end(E4, E5)); _ -> case V1 of [E2 | E3] -> (fun (V7, V8) -> ('un--getVisibility'(V0, V8)) end(E2, E3)) end end; {'Prelude.Types.Just', V9} -> case V1 of [] -> {'Libraries.Text.Parser.Core.Empty', V9}; [E10 | E11] -> (fun (V10, V11) -> case V10 of {'Prelude.Types.Left', V12} -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<"Multiple visibility modifiers"/utf8>>}; _ -> case V1 of [E12 | E13] -> (fun (V13, V14) -> ('un--getVisibility'(V0, V14)) end(E12, E13)) end end end(E10, E11)); _ -> case V1 of [E8 | E9] -> (fun (V15, V16) -> ('un--getVisibility'(V0, V16)) end(E8, E9)) end end; _ -> case V1 of [E0 | E1] -> (fun (V17, V18) -> ('un--getVisibility'(V0, V18)) end(E0, E1)) end end.
'un--getInitRange'(V0) -> case V0 of [E0 | E1] -> (fun (V1, V2) -> case V2 of [] -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', case V1 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> V3 end, {'Prelude.Types.Nothing'}}}; [E2 | E3] -> (fun (V6, V7) -> case V7 of [] -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', case V1 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end, {'Prelude.Types.Just', case V6 of {'Libraries.Text.Bounded.MkBounded', V11, V12, V13} -> V11 end}}}; _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<"Invalid list range syntax"/utf8>>} end end(E2, E3)); _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<"Invalid list range syntax"/utf8>>} end end(E0, E1)); _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<"Invalid list range syntax"/utf8>>} end.
'un--getHelpType'() -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('Idris.Idris2.Libraries.Text.Parser':'un--choice'({'Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> V20 end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V23, V24, V25)) end end end end end}, 1, ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V26) -> ('un--cmdName'(('Idris.Idris2.Builtin':'un--fst'(V26)))) end))(('un--knownCommands'()))))))), fun (V34) -> {'Libraries.Text.Parser.Core.Empty', case V34 of {'Prelude.Types.Nothing'} -> {'Idris.Syntax.GenericHelp'}; {'Prelude.Types.Just', V35} -> {'Idris.Syntax.DetailedHelp', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V36) -> fun (V37) -> <<V36/binary, V37/binary>> end end, <<""/utf8>>}, fun (V38) -> V38 end, [(begin (V40 = fun (V39) -> V39 end), fun (V41) -> (V40(V41)) end end(<<"Unrecognised command \x{27}"/utf8>>)) | [(begin (V43 = fun (V42) -> V42 end), fun (V44) -> (V43(V44)) end end(V35)) | [(begin (V46 = fun (V45) -> V45 end), fun (V47) -> (V46(V47)) end end(<<"\x{27}"/utf8>>)) | []]]])) end, ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V50, V51)) end end}, V35, ('un--knownCommands'())))))} end} end}.
'un--gadtData'(V0, V1, V2, V3, V4) -> {'Libraries.Text.Parser.Core.ThenEat', 1, {'Libraries.Text.Parser.Core.MustWork', ('un--decoratedSymbol'(V0, <<":"/utf8>>))}, fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V4)), fun () -> fun (V5) -> ('un--dataBody'(V0, V1, V2, case V3 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end, V4, V5)) end end}} end}.
'un--forall_'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"forall"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedSimpleBinderName'(V0))})), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V3) -> {'Builtin.MkPair', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V4, V5)) end end, 0, fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V6, V7)) end end, 1})), {'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(fun (V8) -> {'Prelude.Types.Just', {'Core.Name.UN', {'Core.Name.Basic', V8}}} end, V3)), {'Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V3))}}} end))(('Idris.Idris2.Data.List1':'un--forget'(V2))))} end end}} end}}, fun () -> fun (V16) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V16 of {'Libraries.Text.Bounded.MkBounded', V17, V18, V19} -> V19 end, <<"Cannot return a forall quantifier"/utf8>>, ('un--decoratedSymbol'(V0, <<"."/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), V0, V1))}, fun () -> fun (V20) -> {'Libraries.Text.Parser.Core.Empty', ('un--pibindAll'(V0, {'Core.TT.Implicit'}, case V16 of {'Libraries.Text.Bounded.MkBounded', V21, V22, V23} -> V21 end, V20))} end end} end} end end}.
'un--fnOpt'(V0) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--totalityOpt'(V0)), fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.IFnOpt', {'TTImp.TTImp.Totality', V1}}} end end}.
'un--fnDirectOpt'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"hint"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.IFnOpt', {'TTImp.TTImp.Hint', 1}}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"globalhint"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.IFnOpt', {'TTImp.TTImp.GlobalHint', 0}}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"defaulthint"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.IFnOpt', {'TTImp.TTImp.GlobalHint', 1}}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"inline"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.IFnOpt', {'TTImp.TTImp.Inline'}}}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"noinline"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.IFnOpt', {'TTImp.TTImp.NoInline'}}}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"deprecate"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.IFnOpt', {'TTImp.TTImp.Deprecate'}}}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"tcinline"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.IFnOpt', {'TTImp.TTImp.TCInline'}}}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"extern"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.IFnOpt', {'TTImp.TTImp.ExternFn'}}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"macro"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.IFnOpt', {'TTImp.TTImp.Macro'}}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"spec"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun (V1) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.IFnOpt', {'TTImp.TTImp.SpecArgs', V1}}} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedPragma'(V0, <<"foreign"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V2) -> ('un--expr'(('un--pdef'()), V0, V2)) end)), fun (V3) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PForeign', V3}} end} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--decoratedPragma'(V0, <<"export"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedPragma'(V0, <<"nomangle"/utf8>>))}, fun (V4) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Libraries.Text.Parser.Core.Warning', {'Prelude.Types.Just', case V4 of {'Libraries.Text.Bounded.MkBounded', V5, V6, V7} -> V7 end}, ('nested--24375-18680--in--un--noMangleWarning'(V0))}, {'Libraries.Text.Parser.Core.Empty', case V4 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end}} end} end}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V11) -> ('un--expr'(('un--pdef'()), V0, V11)) end)), fun (V12) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PForeignExport', V12}} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--fixDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--decorate'(V0, 4, ('un--fix'()))), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--iOperator'()))), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, {'Builtin.MkPair', V3, V4}}} end end} end end}} end end}}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end}, fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Libraries.Text.Parser.Core.Empty', ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> {'Idris.Syntax.PFixity', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V10, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V12)), V14} end))(('Idris.Idris2.Data.List1':'un--forget'(V13))))} end end end} end end}.
'un--fix'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> 0 end))(('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"infixl"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> 1 end))(('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"infixr"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V16) -> 2 end))(('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"infix"/utf8>>)))), fun () -> ((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V24) -> 3 end))(('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"prefix"/utf8>>)))) end} end} end}.
'un--firstHelpLine'(V0) -> case ('Idris.Idris2.Data.String':'un--split'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'($\x{a}, V1)) end, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> <<V2/binary, V3/binary>> end end, <<""/utf8>>}, fun (V4) -> V4 end, [<<"Failed to look up \x{27}"/utf8>> | [V0 | [<<"\x{27} (SHOULDN\x{27}T HAPPEN!)"/utf8>> | []]]])) end, ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V7, V8)) end end}, V0, ('un--knownCommands'()))))))) of {'Data.List1.:::', V9, V10} -> V9 end.
'un--fieldDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V0)), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, {'Core.TT.Implicit'}, {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--25913-20236--in--un--autoImplicitField'(V1, V0)), fun () -> ('nested--25913-20237--in--un--defImplicitField'(V1, V0)) end})), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('nested--25913-20238--in--un--fieldBody'(V1, V0, V2, V3)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', V4}} end} end end} end}} end} end}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V0)), fun (V5) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('nested--25913-20238--in--un--fieldBody'(V1, V0, V5, {'Core.TT.Explicit'})), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', V6}} end end} end} end}.
'un--field'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ((begin (V33 = fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V31, V32)) end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('nested--12350-12854--in--un--fieldName'(V2, V1, V0, V21)) end))))({'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Libraries.Text.Parser.Core.Empty', fun (V3) -> fun (V4) -> [V3 | V4] end end}, fun (V5) -> ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(V5))(('un--decorate'(V1, 2, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))) end}, fun (V13) -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(V13))(('Idris.Idris2.Libraries.Text.Parser':'un--many'(('nested--12350-12855--in--un--recFieldCompat'(V2, V1, V0)))))) end})), fun () -> fun (V36) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V44 = fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V42, V43)) end end end end), fun (V45) -> fun (V46) -> ((((V44('erased'))('erased'))(V45))(V46)) end end end(fun (V37) -> fun (V38) -> fun (V39) -> {'Idris.Syntax.PSetField', V38, V39} end end end))(case V0 of 1 -> ('un--decoratedSymbol'(V1, <<"="/utf8>>)); 0 -> ('un--decoratedSymbol'(V1, <<":="/utf8>>)) end)), fun () -> ((begin (V54 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V52, V53)) end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V47) -> fun (V48) -> fun (V49) -> {'Idris.Syntax.PSetFieldApp', V48, V49} end end end))(('un--decoratedSymbol'(V1, <<"$="/utf8>>)))) end}, fun () -> fun (V57) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--plhs'()), V1, V2)), fun () -> fun (V58) -> {'Libraries.Text.Parser.Core.Empty', ((V57(V36))(V58))} end end} end end} end end}.
'un--failDecls'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"failing"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('un--decorate'(V0, 3, ('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'()))))), fun (V3) -> ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> {'Builtin.MkPair', V3, V5} end))(('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlockAfter'(V2, fun (V4) -> ('un--topDecl'(V0, V4)) end)))) end}} end} end}}, fun () -> fun (V13) -> {'Libraries.Text.Parser.Core.Empty', case V13 of {'Libraries.Text.Bounded.MkBounded', V14, V15, V16} -> case V14 of {'Builtin.MkPair', V17, V18} -> begin (V19 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V13))), {'Idris.Syntax.PFail', V19, V17, ('un--collectDefs'(('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'({'Prelude.Interfaces.MkMonoid', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V20, V21)) end end, []}, fun (V22) -> V22 end, V18))))} end end end} end end}.
'un--extractNames'(V0) -> case V0 of {'Idris.Parser.ParseREPLCmd', V1} -> V1; {'Idris.Parser.ParseKeywordCmd', V2} -> V2; {'Idris.Parser.ParseIdentCmd', V3} -> [V3 | []] end.
'un--extension'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> 0 end))(('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"ElabReflection"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> 1 end))(('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Borrowing"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"expected either \x{27}ElabReflection\x{27} or \x{27}Borrowing\x{27}"/utf8>>} end} end}.
'un--exprArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--30588-24896--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.ExprArg'}, {'Builtin.MkPair', V2, ('nested--30588-24897--in--un--parse'(V2, V1, V0))}}}.
'un--expr'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--let_'(V1, V2)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--rewrite_'(V1, V2)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V1, <<"runElab"/utf8>>)), fun () -> ('un--expr'(('un--pdef'()), V1, V2)) end}}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PRunElab', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), case V3 of {'Libraries.Text.Bounded.MkBounded', V4, V5, V6} -> V4 end}} end end}, fun () -> ('un--opExpr'(V0, V1, V2)) end} end} end}.
'un--explicitPi'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('un--parens'(1, V0, ('un--pibindList'(V0, V1))))}, fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> V5 end, <<"Cannot return a named argument"/utf8>>, ('un--bindSymbol'(V0)))), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), V0, V1))}, fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.Empty', ('un--pibindAll'(V0, V6, case V2 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end, V7))} end end} end end} end end}.
'un--eval'() -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), {'Core.FC.Virtual', {'Core.FC.Interactive'}}, ('Idris.Idris2.Parser.Rule.Source':'un--init'()))), fun () -> fun (V0) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Eval', V0}} end end}.
'un--editLineNamePTermArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--31758-26121--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.Args', [{'Idris.Parser.NamedCmdArg', <<"l"/utf8>>, {'Idris.Parser.NumberArg'}} | [{'Idris.Parser.NamedCmdArg', <<"c"/utf8>>, {'Idris.Parser.NumberArg'}} | [{'Idris.Parser.NamedCmdArg', <<"h"/utf8>>, {'Idris.Parser.StringArg'}} | [{'Idris.Parser.NamedCmdArg', <<"e"/utf8>>, {'Idris.Parser.ExprArg'}} | []]]]]}, {'Builtin.MkPair', V2, ('nested--31758-26122--in--un--parse'(V2, V1, V0))}}}.
'un--editLineNameOptionArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--32086-26464--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.Args', [{'Idris.Parser.NamedCmdArg', <<"l"/utf8>>, {'Idris.Parser.NumberArg'}} | [{'Idris.Parser.NamedCmdArg', <<"n"/utf8>>, {'Idris.Parser.StringArg'}} | [{'Idris.Parser.NamedCmdArg', <<"r"/utf8>>, {'Idris.Parser.WithDefaultArg', <<"0"/utf8>>, {'Idris.Parser.NumberArg'}}} | []]]]}, {'Builtin.MkPair', V2, ('nested--32086-26465--in--un--parse'(V2, V1, V0))}}}.
'un--editLineNameCSVArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--31921-26292--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.Args', [{'Idris.Parser.NamedCmdArg', <<"l"/utf8>>, {'Idris.Parser.NumberArg'}} | [{'Idris.Parser.NamedCmdArg', <<"n"/utf8>>, {'Idris.Parser.StringArg'}} | [{'Idris.Parser.NamedCmdArg', <<"h"/utf8>>, {'Idris.Parser.CSVArg', {'Idris.Parser.NameArg'}}} | []]]]}, {'Builtin.MkPair', V2, ('nested--31921-26293--in--un--parse'(V2, V1, V0))}}}.
'un--editLineNameArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--31455-25799--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.Args', [{'Idris.Parser.NamedCmdArg', <<"l"/utf8>>, {'Idris.Parser.NumberArg'}} | [{'Idris.Parser.NamedCmdArg', <<"n"/utf8>>, {'Idris.Parser.StringArg'}} | []]]}, {'Builtin.MkPair', V2, ('nested--31455-25800--in--un--parse'(V2, V1, V0))}}}.
'un--editLineColNameArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--31590-25944--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.Args', [{'Idris.Parser.NamedCmdArg', <<"l"/utf8>>, {'Idris.Parser.NumberArg'}} | [{'Idris.Parser.NamedCmdArg', <<"c"/utf8>>, {'Idris.Parser.NumberArg'}} | [{'Idris.Parser.NamedCmdArg', <<"n"/utf8>>, {'Idris.Parser.StringArg'}} | []]]]}, {'Builtin.MkPair', V2, ('nested--31590-25945--in--un--parse'(V2, V1, V0))}}}.
'un--dpairType'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEat', 1, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> {'Core.Name.UN', {'Core.Name.Basic', V3}} end))(('un--decoratedSimpleBinderName'(V0)))), fun () -> fun (V11) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V2)), fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V11, V12}} end end} end} end end}}, fun () -> fun (V13) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Libraries.Text.Parser.Core.Empty', case V13 of {'Libraries.Text.Bounded.MkBounded', V14, V15, V16} -> V14 end}, fun (V17) -> case V17 of {'Builtin.MkPair', V18, V19} -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"**"/utf8>>))}, fun () -> fun (V20) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--nestedDpair'(V0, V13, V2)), fun () -> ('un--typeExpr'(('un--pdef'()), V0, V2)) end}}, fun () -> fun (V21) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PDPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V21)))), ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V20)), {'Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V13)), V18}, V19, case V21 of {'Libraries.Text.Bounded.MkBounded', V22, V23, V24} -> V22 end}} end end} end end} end end} end end}.
'un--docArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--30655-24965--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.DocArg'}, {'Builtin.MkPair', V2, ('nested--30655-24966--in--un--parse'(V2, V1, V0))}}}.
'un--doBlock'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V2) -> fun (V3) -> V3 end end))(('un--decoratedKeyword'(V0, <<"do"/utf8>>)))), fun (V11) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(V11))(('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V12) -> ('un--doAct'(V0, V12)) end)))) end}}, fun () -> fun (V20) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PDoBlock', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V20)))), {'Prelude.Types.Nothing'}, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V21, V22)) end end, []}, fun (V23) -> V23 end, case V20 of {'Libraries.Text.Bounded.MkBounded', V24, V25, V26} -> V24 end))}}} end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--namespacedIdent'())}, fun () -> fun (V27) -> case V27 of {'Libraries.Text.Bounded.MkBounded', V28, V29, V30} -> case V28 of {'Builtin.MkPair', V31, V32} -> case V32 of <<"do"/utf8>> -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V33) -> ('un--doAct'(V0, V33)) end))}, fun (V34) -> begin (V35 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V27, V34))))))), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PDoBlock', V35, V31, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V36, V37)) end end, []}, fun (V38) -> V38 end, case V34 of {'Libraries.Text.Bounded.MkBounded', V39, V40, V41} -> V39 end))}} end end}}; _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Not a namespaced \x{27}do\x{27}"/utf8>>} end; _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Not a namespaced \x{27}do\x{27}"/utf8>>} end end end end} end}.
'un--doAct'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> {'Core.Name.UN', {'Core.Name.Underscore'}} end))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"_"/utf8>>)))) end}}, fun () -> fun (V10) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('un--validPatternVar'(case V10 of {'Libraries.Text.Bounded.MkBounded', V11, V12, V13} -> V11 end)), {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"<-"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V14) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V10, V14}} end end} end}} end end}}, fun () -> fun (V15) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), ('case--doAct-13590'(V1, V0, V15, case V15 of {'Libraries.Text.Bounded.MkBounded', V16, V17, V18} -> V16 end))} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"let"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V19) -> ('un--letBlock'(V0, V19)) end)), fun () -> fun (V20) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Idris.Parser.Let':'un--mkDoLets'(V0, V20))}} end end}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V21) -> fun (V22) -> V22 end end))(('un--decoratedKeyword'(V0, <<"rewrite"/utf8>>)))), fun (V30) -> ((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(V30))(('un--expr'(('un--pdef'()), V0, V1)))) end}}, fun () -> fun (V38) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', [{'Idris.Syntax.DoRewrite', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V38)), case V38 of {'Libraries.Text.Bounded.MkBounded', V39, V40, V41} -> V39 end} | []]}} end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--expr'(('un--plhs'()), V0, V1))}, fun () -> fun (V42) -> {'Libraries.Text.Parser.Core.Alt', 0, 1, ((begin (V51 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V49, V50)) end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(fun (V43) -> [{'Idris.Syntax.DoExp', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V42)))), case V42 of {'Libraries.Text.Bounded.MkBounded', V44, V45, V46} -> V44 end} | []] end))(('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)))), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V60 = fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V58, V59)) end end end end), fun (V61) -> fun (V62) -> ((((V60('erased'))('erased'))(V61))(V62)) end end end(fun (V54) -> fun (V55) -> V55 end end))(('un--decoratedSymbol'(V0, <<"<-"/utf8>>)))), fun (V63) -> ((begin (V87 = fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V85, V86)) end end end end), fun (V88) -> fun (V89) -> ((((V87('erased'))('erased'))(V88))(V89)) end end end(V63))({'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Libraries.Text.Parser.Core.Empty', fun (V64) -> fun (V65) -> {'Builtin.MkPair', V64, V65} end end}, fun (V66) -> ((begin (V71 = fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V69, V70)) end end end end), fun (V72) -> fun (V73) -> ((((V71('erased'))('erased'))(V72))(V73)) end end end(V66))(('un--expr'(('un--pnowith'()), V0, V1)))) end}, fun (V74) -> ((begin (V80 = fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V78, V79)) end end end end), fun (V81) -> fun (V82) -> ((((V80('erased'))('erased'))(V81))(V82)) end end end(V74))(('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V75) -> ('un--patAlt'(V0, V75)) end)))) end})) end}}, fun () -> fun (V90) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), case V90 of {'Libraries.Text.Bounded.MkBounded', V91, V92, V93} -> case V91 of {'Builtin.MkPair', V94, V95} -> begin (V96 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V42, V90))))))), {'Libraries.Text.Parser.Core.Empty', [{'Idris.Syntax.DoBindPat', V96, case V42 of {'Libraries.Text.Bounded.MkBounded', V97, V98, V99} -> V97 end, V94, V95} | []]} end end end} end end} end} end end} end} end} end}.
'un--directiveDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--directive'(V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', fun (V3) -> {'Idris.Syntax.PDirective', V3, V2} end} end end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"runElab"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', fun (V5) -> {'Idris.Syntax.PReflect', V5, V4} end}} end end} end} end}}, fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.Empty', case V6 of {'Libraries.Text.Bounded.MkBounded', V7, V8, V9} -> (V7(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V6)))) end} end end}.
'un--directive'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"hide"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Hide', V2}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"unhide"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Unhide', V3}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"logging"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--logLevel'(V0)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Logging', V4}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"auto_lazy"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--onoff'()), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.LazyOn', V5}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"unbound_implicits"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--onoff'()), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.UnboundImplicits', V6}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"prefix_record_projections"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--onoff'()), fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PrefixRecordProjections', V7}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"ambiguity_depth"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun () -> fun (V8) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.AmbigDepth', ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V8))}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"auto_implicit_depth"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.AutoImplicitDepth', ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V9))}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"nf_metavar_threshold"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun () -> fun (V10) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.NFMetavarThreshold', ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V10))}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"search_timeout"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun () -> fun (V11) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.SearchTimeout', V11}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"pair"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V13) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V14) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PairNames', V12, V13, V14}}} end end} end end} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"rewrite"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V15) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V16) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.RewriteName', V15, V16}}} end end} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"integerLit"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V17) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PrimInteger', V17}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"stringLit"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V18) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PrimString', V18}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"charLit"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V19) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PrimChar', V19}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"doubleLit"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V20) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PrimDouble', V20}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"name"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V21) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--decoratedSimpleBinderName'(V0)))), fun () -> fun (V22) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Names', V21, ('Idris.Idris2.Data.List1':'un--forget'(V22))}}} end end} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"start"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V23) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.StartExpr', V23}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"allow_overloads"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V24) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Overloadable', V24}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"language"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--extension'())}, fun () -> fun (V25) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Extension', V25}}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"default"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--totalityOpt'(V0)), fun () -> fun (V26) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.DefaultTotality', V26}}} end end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--dependentDecorate'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', V1}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--actD'(('Idris.Idris2.Parser.Rule.Source':'un--decorationFromBounded'(V0, (V2(case V3 of {'Libraries.Text.Bounded.MkBounded', V4, V5, V6} -> V4 end)), V3)))), {'Libraries.Text.Parser.Core.Empty', case V3 of {'Libraries.Text.Bounded.MkBounded', V7, V8, V9} -> V7 end}} end end}.
'un--definition'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--clause'(0, {'Libraries.Data.IMaybe.Nothing'}, V0, V1))}, fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PDef', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V2)), [case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> V3 end | []]}} end end}.
'un--defaultImplicitPi'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"default"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--simpleExpr'(V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindList'(V0, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, V3}} end} end end} end end}} end} end}}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V4 of {'Libraries.Text.Bounded.MkBounded', V5, V6, V7} -> V7 end, <<"Cannot return a default implicit argument"/utf8>>, ('un--decoratedSymbol'(V0, <<"->"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), V0, V1))}, fun () -> fun (V8) -> {'Libraries.Text.Parser.Core.Empty', case V4 of {'Libraries.Text.Bounded.MkBounded', V9, V10, V11} -> case V9 of {'Builtin.MkPair', V12, V13} -> ('un--pibindAll'(V0, {'Core.TT.DefImplicit', V12}, V13, V8)) end end} end end} end} end end}.
'un--decoratedSymbol'(V0, V1) -> ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(V1)))).
'un--decoratedSimpleNamedArg'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun () -> ('un--parens'(1, V0, ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedOperatorName'()))))) end}.
'un--decoratedSimpleBinderName'(V0) -> ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))).
'un--decoratedPragma'(V0, V1) -> ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(V1)))).
'un--decoratedNamespacedSymbol'(V0, V1) -> ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--namespacedSymbol'(V1)))).
'un--decoratedKeyword'(V0, V1) -> ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(V1)))).
'un--decoratedDataTypeName'(V0) -> ('un--decorate'(V0, 1, {'Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--opNonNS'()), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--capitalisedName'()) end})).
'un--decoratedDataConstructorName'(V0) -> ('un--decorate'(V0, 3, ('Idris.Idris2.Parser.Rule.Source':'un--dataConstructorName'()))).
'un--decorateKeywords'(V0, V1) -> {'Libraries.Text.Parser.Core.Act', {'Parser.Rule.Source.MkState', (begin (V11 = fun (V10) -> ('Idris.Idris2.Data.SnocList':'dn--un--cast_Cast_(List $a)_(SnocList $a)'(V10)) end), fun (V12) -> (V11(V12)) end end(((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('Idris.Idris2.Parser.Rule.Source':'un--decorationFromBounded'(V0, 4, V2)) end))(V1)))), []}}.
'un--decorateBoundedNames'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Act', {'Parser.Rule.Source.MkState', (begin (V12 = fun (V11) -> ('Idris.Idris2.Data.SnocList':'dn--un--cast_Cast_(List $a)_(SnocList $a)'(V11)) end), fun (V13) -> (V12(V13)) end end(((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('un--boundedNameDecoration'(V0, V1, V3)) end))(V2)))), []}}.
'un--decorate'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', V2}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--actD'(('Idris.Idris2.Parser.Rule.Source':'un--decorationFromBounded'(V0, V1, V3)))), {'Libraries.Text.Parser.Core.Empty', case V3 of {'Libraries.Text.Bounded.MkBounded', V4, V5, V6} -> V4 end}} end end}.
'un--declsArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--30921-25238--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.DeclsArg'}, {'Builtin.MkPair', V2, ('nested--30921-25239--in--un--parse'(V2, V1, V0))}}}.
'un--dataVisOpt'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--visOption'(V0)), fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('un--totalityOpt'(V0)))), fun (V2) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V1, V2}} end} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--totalityOpt'(V0)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--visibility'(V0)), fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V4, {'Prelude.Types.Just', V3}}} end} end end}, fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', 0, {'Prelude.Types.Nothing'}}} end} end}.
'un--dataOpts'(V0) -> ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"["/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--dataOpt'(V0)))), fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"]"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'un--forget'(V1))} end} end end} end})).
'un--dataOpt'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> {'TTImp.TTImp.NoHints'} end))(('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"noHints"/utf8>>)))))), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> {'TTImp.TTImp.UniqueSearch'} end))(('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"uniqueSearch"/utf8>>)))))), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"search"/utf8>>)))), fun () -> ((begin (V30 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V28, V29)) end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V25) -> {'TTImp.TTImp.SearchBy', V25} end))(((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V17) -> ('Idris.Idris2.Data.List1':'un--forget'(V17)) end))(('Idris.Idris2.Libraries.Text.Parser':'un--some'(('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))))))) end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V38 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V36, V37)) end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V33) -> {'TTImp.TTImp.External'} end))(('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"external"/utf8>>)))))), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V46 = fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V44, V45)) end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end(fun (V41) -> {'TTImp.TTImp.NoNewtype'} end))(('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"noNewtype"/utf8>>)))))), fun () -> ((begin (V54 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V52, V53)) end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V49) -> {'TTImp.TTImp.NoEnum'} end))(('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"noEnum"/utf8>>)))))) end} end} end} end} end}.
'un--dataDeclBody'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"data"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedDataTypeName'(V0))}}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, V3}} end end} end} end}}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Libraries.Text.Parser.Core.Empty', case V4 of {'Libraries.Text.Bounded.MkBounded', V5, V6, V7} -> V5 end}, fun (V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--simpleData'(V0, V4, V10, V1)), fun () -> ('un--gadtData'(V0, V9, V4, V10, V1)) end} end end} end end}.
'un--dataDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V0)), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--dataVisOpt'(V0)), fun (V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--dataDeclBody'(V0, V1)), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, {'Builtin.MkPair', V4, {'Builtin.MkPair', V5, V6}}}} end end} end end} end}}, fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V7 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end}, fun (V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> case V15 of {'Builtin.MkPair', V16, V17} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PData', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V7)), V12, V14, V16, V17}} end end end end} end end}.
'un--dataBody'(V0, V1, V2, V3, V4, V5) -> {'Libraries.Text.Parser.Core.Alt', 0, 1, {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEndIndent'(V4)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkPLater', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V2)), V3, V5}}}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--decoratedKeyword'(V0, <<"where"/utf8>>))}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--dataOpts'(V0)), fun (V6) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'(V1, fun (V7) -> ('un--tyDecls'({'Libraries.Text.Parser.Core.MustWork', ('un--decoratedDataConstructorName'(V0))}, <<""/utf8>>, V0, V7)) end)), fun (V8) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V6, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V9, V10)) end end, []}, fun (V11) -> ('Idris.Idris2.Data.List1':'un--forget'(V11)) end, V8))}} end} end} end}}, fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V12 of {'Libraries.Text.Bounded.MkBounded', V13, V14, V15} -> V13 end}, fun (V16) -> case V16 of {'Builtin.MkPair', V17, V18} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkPData', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V2, V12)))), V3, V5, V17, V18}} end end} end end} end}.
'un--continueWithDecorated'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V3) -> fun (V4) -> V4 end end))(('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V1, {'Prelude.Types.Just', V2})))), fun (V12) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(V12))(('un--decoratedSymbol'(V0, V2)))) end}.
'un--continueWith'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V2) -> fun (V3) -> V3 end end))(('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V0, {'Prelude.Types.Just', V1})))), fun (V11) -> ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(V11))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(V1)))) end}.
'un--constraints'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--appExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"=>"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--constraints'(V0, V1)), fun (V3) -> {'Libraries.Text.Parser.Core.Empty', [{'Builtin.MkPair', {'Prelude.Types.Nothing'}, V2} | V3]} end} end} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"("/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"=>"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--constraints'(V0, V1)), fun (V6) -> {'Libraries.Text.Parser.Core.Empty', [{'Builtin.MkPair', {'Prelude.Types.Just', V4}, V5} | V6]} end} end} end} end end} end} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Empty', []} end} end}.
'un--compileArgsCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--31290-25624--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.Args', [{'Idris.Parser.FileArg'} | [{'Idris.Parser.ExprArg'} | []]]}, {'Builtin.MkPair', V2, ('nested--31290-25625--in--un--parse'(V2, V1, V0))}}}.
'un--commitSymbol'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--decoratedSymbol'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<<<"Expected \x{27}"/utf8>>/binary, <<V1/binary, <<"\x{27}"/utf8>>/binary>>/binary>>} end}.
'un--commitKeyword'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V1, {'Prelude.Types.Just', V2})), {'Libraries.Text.Parser.Core.ThenEat', 0, {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--decoratedKeyword'(V0, V2)), fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<<<"Expected \x{27}"/utf8>>/binary, <<V2/binary, <<"\x{27}"/utf8>>/binary>>/binary>>} end}, fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V1, {'Prelude.Types.Nothing'})) end}}.
'un--command'() -> {'Libraries.Text.Parser.Core.Alt', 0, 1, ((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> {'Idris.Syntax.NOP'} end))(('Idris.Idris2.Parser.Rule.Source':'un--eoi'()))), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--nonEmptyCommand'()), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":?"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--getHelpType'()), fun (V8) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.Help', V8}} end} end}, fun () -> ('un--eval'()) end} end} end}.
'un--collectDefs'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Syntax.PDef', V3, V4} -> ('case--collectDefs-22353'(V4, V3, V2, ('Idris.Idris2.Data.List':'un--spanBy'(fun (V5) -> ('Idris.Idris2.Idris.Syntax':'un--isPDef'(V5)) end, V2)))); {'Idris.Syntax.PNamespace', V6, V7, V8} -> [{'Idris.Syntax.PNamespace', V6, V7, ('un--collectDefs'(V8))} | ('un--collectDefs'(V2))]; {'Idris.Syntax.PMutual', V9, V10} -> [{'Idris.Syntax.PMutual', V9, ('un--collectDefs'(V10))} | ('un--collectDefs'(V2))]; _ -> [V1 | ('un--collectDefs'(V2))] end end(E0, E1)) end.
'un--cmdName'(V0) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)))), fun (V1) -> {'Libraries.Text.Parser.Core.Terminal', <<<<"Unrecognised REPL command \x{27}"/utf8>>/binary, <<V0/binary, <<"\x{27}"/utf8>>/binary>>/binary>>, fun (V2) -> case V2 of {'Parser.Lexer.Source.Ident', V3} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V3, V0)) of 1 -> {'Prelude.Types.Just', V3}; 0 -> {'Prelude.Types.Nothing'} end; {'Parser.Lexer.Source.Keyword', V4} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, V0)) of 1 -> {'Prelude.Types.Just', V4}; 0 -> {'Prelude.Types.Nothing'} end; {'Parser.Lexer.Source.Symbol', V5} -> case V5 of <<"?"/utf8>> -> {'Prelude.Types.Just', <<"?"/utf8>>}; <<":?"/utf8>> -> {'Prelude.Types.Just', <<"?"/utf8>>}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end} end}.
'un--clause'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V4) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('nested--20641-15340--in--un--clauseLHS'(V3, V2, V0, V1, V2, V3, V1)), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('nested--20641-15341--in--un--parseWithArg'(V3, V2, V0, V1)))), fun (V6) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V4, case V5 of {'Builtin.MkPair', V7, V8} -> {'Builtin.MkPair', V7, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, V6))} end}} end} end end} end}}, fun () -> fun (V9) -> begin (V13 = ('Idris.Idris2.Builtin':'un--fst'(case V9 of {'Libraries.Text.Bounded.MkBounded', V10, V11, V12} -> V10 end))), begin (V17 = ('Idris.Idris2.Builtin':'un--snd'(case V9 of {'Libraries.Text.Bounded.MkBounded', V14, V15, V16} -> V14 end))), begin (V18 = ('Idris.Idris2.Builtin':'un--snd'(V17))), case ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V0, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V18)))) of 1 -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<<<"Wrong number of \x{27}with\x{27} arguments:"/utf8>>/binary, <<<<" expected "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V0))/binary, <<<<" but got "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V18))))/binary>>/binary>>/binary>>/binary>>}; 0 -> ('un--parseRHS'(V0, V2, V9, V13, V3, V17)) end end end end end end}.
'un--claims'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--optDocumentation'(V0)), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--visOpt'(V0)))), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--getVisibility'({'Prelude.Types.Nothing'}, V3)), fun (V4) -> begin (V6 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V5) -> ('Idris.Idris2.Data.Either':'un--getRight'(V5)) end, V3))), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V0)), fun (V7) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--tyDecls'(('un--dependentDecorate'(V0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun (V8) -> case ('Idris.Idris2.Core.Name':'un--isUnsafeBuiltin'(V8)) of 1 -> 7; 0 -> 2 end end)), V2, V0, V1)), fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V10) -> {'Builtin.MkPair', V2, {'Builtin.MkPair', V4, {'Builtin.MkPair', V6, {'Builtin.MkPair', V7, V10}}}} end, V9))} end end} end} end end} end} end}}, fun () -> fun (V11) -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V12) -> case V12 of {'Builtin.MkPair', V13, V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> case V18 of {'Builtin.MkPair', V19, V20} -> {'Idris.Syntax.PClaim', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V11)), V19, V15, V17, V20} end end end end end, case V11 of {'Libraries.Text.Bounded.MkBounded', V21, V22, V23} -> V21 end))} end end}.
'un--case_'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"case"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--commitKeyword'(V0, V1, <<"of"/utf8>>))}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V3) -> ('un--caseAlt'(V0, V3)) end)), fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, V4}} end} end} end end} end}}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end}, fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PCase', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)))), V10, V11}} end end} end end}.
'un--caseRHS'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"=>"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V2, {'Prelude.Types.Nothing'})), ('un--typeExpr'(('un--pdef'()), V0, V2))} end}}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), begin (V5 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V4))))), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkPatClause', V5, V3, case V4 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end, []}} end} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedKeyword'(V0, <<"impossible"/utf8>>))}, fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.MkImpossible', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V9)))), V3}}} end end}, fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<"Expected \x{27}=>\x{27} or \x{27}impossible\x{27}"/utf8>>} end} end}.
'un--caseAlt'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('un--opExpr'(('un--plhs'()), V0, V1))}, fun () -> fun (V2) -> ('un--caseRHS'(V0, V2, V1, case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> V3 end)) end end}.
'un--builtinDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedPragma'(V0, <<"builtin"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--builtinType'()), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, V3}} end end} end end}} end}}, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V4 of {'Libraries.Text.Bounded.MkBounded', V5, V6, V7} -> V5 end}, fun (V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PBuiltin', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V9, V10}} end end} end end}.
'un--bracketedExpr'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('un--iOperator'())}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V2)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--continueWithDecorated'(V0, V2, <<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V3, V4}} end} end end} end end}}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end}, fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--actD'({'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Builtin.MkPair', 4, {'Prelude.Types.Nothing'}}})), begin (V12 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V5))))), begin (V13 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V10))), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PSectionL', V12, V13, case V10 of {'Libraries.Text.Bounded.MkBounded', V14, V15, V16} -> V14 end, V11}} end end} end end} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V17) -> ('Idris.Idris2.Data.List1':'un--forget'(V17)) end))(('Idris.Idris2.Libraries.Text.Parser':'un--some'({'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'())}))))}, fun () -> fun (V25) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--actD'({'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Builtin.MkPair', 4, {'Prelude.Types.Nothing'}}})), begin (V40 = ((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(fun (V29) -> {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V29)), case V29 of {'Libraries.Text.Bounded.MkBounded', V30, V31, V32} -> V30 end} end))(case V25 of {'Libraries.Text.Bounded.MkBounded', V26, V27, V28} -> V26 end))), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PPostfixAppPartial', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V25)), V40}} end} end} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--continueWith'(V2, <<")"/utf8>>))}, fun () -> fun (V41) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PUnit', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V41))))}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ((begin (V65 = fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V63, V64)) end end end end), fun (V66) -> fun (V67) -> ((((V65('erased'))('erased'))(V66))(V67)) end end end(fun (V59) -> fun (V60) -> V59 end end))({'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V48 = fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V46, V47)) end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end(fun (V42) -> fun (V43) -> V42 end end))(('un--dpairType'(V0, V1, V2)))), fun (V51) -> ((begin (V56 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V54, V55)) end end end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end(V51))(('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))))) end})), fun (V68) -> ((begin (V73 = fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V71, V72)) end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end(V68))(('Idris.Idris2.Parser.Rule.Source':'un--actD'({'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Builtin.MkPair', 1, {'Prelude.Types.Nothing'}}})))) end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('un--typeExpr'(('un--pdef'()), V0, V2))}, fun () -> fun (V76) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"**"/utf8>>))}, fun () -> fun (V77) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V84 = fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V82, V83)) end end end end), fun (V85) -> fun (V86) -> ((((V84('erased'))('erased'))(V85))(V86)) end end end(fun (V78) -> fun (V79) -> V78 end end))({'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--nestedDpair'(V0, V77, V2)), fun () -> ('un--expr'(('un--pdef'()), V0, V2)) end})), fun (V87) -> ((begin (V92 = fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V90, V91)) end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end(V87))(('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))) end}}, fun () -> fun (V95) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PDPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V95)))), ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V77)), case V76 of {'Libraries.Text.Bounded.MkBounded', V96, V97, V98} -> V96 end, {'Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V95))))}, case V95 of {'Libraries.Text.Bounded.MkBounded', V99, V100, V101} -> V99 end}} end end} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V108 = fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V106, V107)) end end end end), fun (V109) -> fun (V110) -> ((((V108('erased'))('erased'))(V109))(V110)) end end end(fun (V102) -> fun (V103) -> V102 end end))({'Libraries.Text.Parser.Core.Bounds', ('un--iOperator'())})), fun (V111) -> ((begin (V116 = fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V114, V115)) end end end end), fun (V117) -> fun (V118) -> ((((V116('erased'))('erased'))(V117))(V118)) end end end(V111))(('un--decoratedSymbol'(V0, <<")"/utf8>>)))) end}}, fun () -> fun (V119) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--actD'({'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Builtin.MkPair', 4, {'Prelude.Types.Nothing'}}})), begin (V120 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V119))))), begin (V124 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, case V119 of {'Libraries.Text.Bounded.MkBounded', V121, V122, V123} -> V121 end))), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PSectionR', V120, V124, case V76 of {'Libraries.Text.Bounded.MkBounded', V125, V126, V127} -> V125 end, case V119 of {'Libraries.Text.Bounded.MkBounded', V128, V129, V130} -> case V128 of {'Libraries.Text.Bounded.MkBounded', V131, V132, V133} -> V131 end end}} end end} end end}, fun () -> ('un--tuple'(V0, V1, V2, case V76 of {'Libraries.Text.Bounded.MkBounded', V134, V135, V136} -> V134 end)) end} end} end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V137) -> begin (V138 = {'Core.FC.MkFC', V0, V137, V137}), begin (V139 = {'Idris.Syntax.PRef', V138, {'Core.Name.MN', <<"__leftTupleSection"/utf8>>, 0}}), {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--nonEmptyTuple'(V0, V1, V2, V139))}, fun () -> fun (V140) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PLam', V138, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V139, {'Idris.Syntax.PInfer', V138}, case V140 of {'Libraries.Text.Bounded.MkBounded', V141, V142, V143} -> V141 end}} end end} end end end} end} end} end} end} end}.
'un--boundedNameDecoration'(V0, V1, V2) -> {'Builtin.MkPair', {'Builtin.MkPair', V0, {'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Bounded':'un--start'(V2)), ('Idris.Idris2.Libraries.Text.Bounded':'un--end'(V2))}}, {'Builtin.MkPair', V1, {'Prelude.Types.Just', case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> V3 end}}}.
'un--binder'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--autoImplicitPi'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--defaultImplicitPi'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--forall_'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--implicitPi'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--explicitPi'(V0, V1)), fun () -> ('un--lam'(V0, V1)) end} end} end} end} end}.
'un--bindSymbol'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> {'Core.TT.Explicit'} end))(('un--decoratedSymbol'(V0, <<"->"/utf8>>)))), fun () -> ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> {'Core.TT.AutoImplicit'} end))(('un--decoratedSymbol'(V0, <<"=>"/utf8>>)))) end}.
'un--bindList'(V0, V1) -> ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> ('Idris.Idris2.Data.List1':'un--forget'(V22)) end))(('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V0)), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--simpleExpr'(V0, V1))}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, {'Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V3))}, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V4) -> fun (V5) -> V5 end end))(('un--decoratedSymbol'(V0, <<":"/utf8>>)))), fun (V13) -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(V13))(('un--opExpr'(('un--pdef'()), V0, V1)))) end})), fun (V21) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V2, {'Builtin.MkPair', V3, V21}}} end} end end} end})))).
'un--autoNumberArgCmd'(V0, V1, V2) -> {'Builtin.MkPair', ('nested--31125-25448--in--un--names'(V2, V1, V0)), {'Builtin.MkPair', {'Idris.Parser.AutoNumberArg'}, {'Builtin.MkPair', V2, ('nested--31125-25450--in--un--parse'(V2, V1, V0))}}}.
'un--autoImplicitPi'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"auto"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindList'(V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', V2} end} end end}} end} end}}, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V3 of {'Libraries.Text.Bounded.MkBounded', V4, V5, V6} -> V6 end, <<"Cannot return an auto implicit argument"/utf8>>, ('un--decoratedSymbol'(V0, <<"->"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), V0, V1))}, fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.Empty', ('un--pibindAll'(V0, {'Core.TT.AutoImplicit'}, case V3 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end, V7))} end end} end} end end}.
'un--atom'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Type"/utf8>>))))}, fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PType', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1))}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V2)), case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> V3 end}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--dependentDecorate'(V0, ('Idris.Idris2.Parser.Rule.Source':'un--constant'()), fun (V6) -> case ('Idris.Idris2.Core.TT':'un--isPrimType'(V6)) of 1 -> 1; 0 -> 3 end end))}, fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V7)), case V7 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> V8 end}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V0, <<"_"/utf8>>))}, fun () -> fun (V11) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V11))}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"?"/utf8>>))}, fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V12))}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--holeName'())}, fun () -> fun (V13) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--actH'(case V13 of {'Libraries.Text.Bounded.MkBounded', V14, V15, V16} -> V14 end)), {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PHole', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V13)), 0, case V13 of {'Libraries.Text.Bounded.MkBounded', V17, V18, V19} -> V17 end}}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decorate'(V0, 3, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"MkWorld"/utf8>>))))}, fun () -> fun (V20) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V20)), {'Core.TT.WorldVal'}}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"World"/utf8>>))))}, fun () -> fun (V21) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V21)), {'Core.TT.PrT', 13}}} end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', ('un--decoratedPragma'(V0, <<"search"/utf8>>))}, fun () -> fun (V22) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PSearch', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V22)), 50}} end end} end} end} end} end} end} end} end} end}.
'un--argExpr'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V1, V2)), fun () -> fun (V3) -> case V3 of {'Idris.Syntax.PHole', V4, V5, V6} -> {'Libraries.Text.Parser.Core.Empty', [{'Idris.Parser.UnnamedExpArg', {'Idris.Syntax.PHole', V4, 1, V6}} | []]}; _ -> {'Libraries.Text.Parser.Core.Empty', [{'Idris.Parser.UnnamedExpArg', V3} | []]} end end end}}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), ('nested--12026-7227--in--un--braceArgs'(V2, V1, V0, V1, V2))}, case case V0 of {'Idris.Parser.MkParseOpts', V7, V8} -> V8 end of 1 -> fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<"|"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(case V0 of {'Idris.Parser.MkParseOpts', V9, V10} -> {'Idris.Parser.MkParseOpts', V9, 0} end, V1, V2)), fun () -> fun (V11) -> {'Libraries.Text.Parser.Core.Empty', [{'Idris.Parser.WithArg', V11} | []]} end end} end}} end; 0 -> fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"| not allowed here"/utf8>>} end end} end}.
'un--appExpr'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--case_'(V1, V2)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--doBlock'(V1, V2)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--lam'(V1, V2)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--lazy'(V1, V2)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--if_'(V1, V2)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--with_'(V1, V2)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V3) -> fun (V4) -> {'Builtin.MkPair', V3, V4} end end))(('un--simpleExpr'(V1, V2)))), fun (V12) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(V12))(('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--argExpr'(V0, V1, V2)))))) end}}, fun () -> fun (V20) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V20 of {'Libraries.Text.Bounded.MkBounded', V21, V22, V23} -> V21 end}, fun (V24) -> case V24 of {'Builtin.MkPair', V25, V26} -> {'Libraries.Text.Parser.Core.Empty', ('nested--12015-6957--in--un--applyExpImp'(V2, V1, V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--start'(V20)), ('Idris.Idris2.Libraries.Text.Bounded':'un--end'(V20)), V25, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V27, V28)) end end, []}, fun (V29) -> V29 end, V26))))} end end} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V36 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V34, V35)) end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end(fun (V30) -> fun (V31) -> {'Builtin.MkPair', V30, V31} end end))({'Libraries.Text.Parser.Core.Bounds', ('un--iOperator'())})), fun (V39) -> ((begin (V44 = fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V42, V43)) end end end end), fun (V45) -> fun (V46) -> ((((V44('erased'))('erased'))(V45))(V46)) end end end(V39))(('un--expr'(('un--pdef'()), V1, V2)))) end}}, fun () -> fun (V47) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V47 of {'Libraries.Text.Bounded.MkBounded', V48, V49, V50} -> V48 end}, fun (V51) -> case V51 of {'Builtin.MkPair', V52, V53} -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Syntax.PPrefixOp', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V47)), ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V52)), case V52 of {'Libraries.Text.Bounded.MkBounded', V54, V55, V56} -> V54 end, V53}} end end} end end}, fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Expected \x{27}case\x{27}, \x{27}if\x{27}, \x{27}do\x{27}, application or operator expression"/utf8>>} end} end} end} end} end} end} end} end}.
'un--aPTerm'() -> ('un--typeExpr'(('un--pdef'()), {'Core.FC.Virtual', {'Core.FC.Interactive'}}, ('Idris.Idris2.Parser.Rule.Source':'un--init'()))).
'un--KnownCommand'(V0) -> {'Data.Maybe.IsJust', 'erased', ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V3, V4)) end end}, V0, ('un--knownCommands'())))}.
'un--CommandTable'() -> {'Prelude.Basics.List', ('un--CommandDefinition'())}.
'un--CommandDefinition'() -> {'Builtin.Pair', {'Prelude.Basics.List', {'.String'}}, {'Builtin.Pair', {'Idris.Parser.CmdArg'}, {'Builtin.Pair', {'.String'}, ('Idris.Idris2.Parser.Rule.Source':'un--Rule'({'Idris.Syntax.REPLCmd'}))}}}.
