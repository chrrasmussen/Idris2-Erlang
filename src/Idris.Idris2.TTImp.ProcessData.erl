-module('Idris.Idris2.TTImp.ProcessData').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in case block in calcNaty-16276'/13,
  'case--case block in case block in case block in calcNaty-16238'/12,
  'case--case block in case block in calcNaty-16207'/11,
  'nested--10701-13639--in--un--updateNSApp'/4,
  'nested--13251-15980--in--un--isNullary'/4,
  'nested--11321-14191--in--un--getRetType'/4,
  'nested--11321-14192--in--un--getPats'/4,
  'nested--11441-14333--in--un--getDisjointPos'/5,
  'nested--11441-14329--in--un--disjointArgs'/5,
  'nested--11441-14330--in--un--disjoint'/5,
  'nested--11441-14331--in--un--allDisjointWith'/5,
  'nested--11441-14332--in--un--allDisjoint'/4,
  'un--updateNS'/3,
  'un--typeCon'/1,
  'un--shaped'/3,
  'un--processDataOpt'/4,
  'un--processData'/13,
  'un--hasArgs'/2,
  'un--getRelevantArg'/6,
  'un--getIndexPats'/2,
  'un--getDetags'/3,
  'un--firstArg'/1,
  'un--findNewtype'/2,
  'un--checkRetType'/4,
  'un--checkIsType'/5,
  'un--checkFamily'/6,
  'un--checkCon'/13,
  'un--calcUnity'/4,
  'un--calcRecord'/3,
  'un--calcNaty'/4,
  'un--calcMaybe'/3,
  'un--calcListy'/3,
  'un--calcEnum'/3,
  'un--calcConInfo'/4
]).
'case--case block in case block in case block in case block in calcNaty-16276'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Prelude.Types.Just', V13} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V13, V3)) of 1 -> begin (V14 = ('Idris.Idris2.Core.Context':'un--setFlag'(V5, V4, V6, {'Core.Context.Context.ConType', {'Core.CompileExpr.ZERO'}}))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V26 = begin (V19 = ('Idris.Idris2.Core.Context':'un--setFlag'(V5, V4, V8, {'Core.Context.Context.ConType', {'Core.CompileExpr.SUCC'}}))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', 1} end), V25 end(V20)) end end end end), V26 end(V15)) end end end end; 0 -> fun (V27) -> {'Prelude.Types.Right', 0} end end; {'Prelude.Types.Nothing'} -> fun (V28) -> {'Prelude.Types.Right', 0} end end.
'case--case block in case block in case block in calcNaty-16238'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Prelude.Types.Just', V12} -> begin (V13 = V12), ('case--case block in case block in case block in case block in calcNaty-16276'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, ('un--typeCon'(V13)))) end; {'Prelude.Types.Nothing'} -> fun (V14) -> {'Prelude.Types.Right', 0} end end.
'case--case block in case block in calcNaty-16207'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Prelude.Types.Just', V11} -> ('case--case block in case block in case block in calcNaty-16238'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, ('un--firstArg'(case V11 of {'Core.Context.Context.MkCon', V12, V13, V14, V15} -> V15 end)))); {'Prelude.Types.Nothing'} -> fun (V16) -> {'Prelude.Types.Right', 0} end end.
'nested--10701-13639--in--un--updateNSApp'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.IVar', V4, V5} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V2)) of 1 -> {'TTImp.TTImp.IVar', V4, V1}; 0 -> {'TTImp.TTImp.IVar', V4, V5} end; {'TTImp.TTImp.IApp', V6, V7, V8} -> {'TTImp.TTImp.IApp', V6, ('nested--10701-13639--in--un--updateNSApp'(V0, V1, V2, V7)), V8}; {'TTImp.TTImp.IAutoApp', V9, V10, V11} -> {'TTImp.TTImp.IAutoApp', V9, ('nested--10701-13639--in--un--updateNSApp'(V0, V1, V2, V10)), V11}; {'TTImp.TTImp.INamedApp', V12, V13, V14, V15} -> {'TTImp.TTImp.INamedApp', V12, ('nested--10701-13639--in--un--updateNSApp'(V0, V1, V2, V13)), V14, V15}; _ -> V3 end.
'nested--13251-15980--in--un--isNullary'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V2), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V25 = begin (V18 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V2, [], V13, {'Core.Env.Nil'}, case V3 of {'Core.Context.Context.MkCon', V14, V15, V16, V17} -> V17 end))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', ('un--hasArgs'(0, V22))} end), V24 end(V19)) end end end end), V25 end(V10)) end end end end.
'nested--11321-14191--in--un--getRetType'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NBind', V4, V5, V6, V7} -> case V6 of {'Core.TT.Pi', V8, V9, V10, V11} -> begin (V12 = ((V7(V2))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V4, {'Core.TT.Placeholder'}}))))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V17 = ('nested--11321-14191--in--un--getRetType'(V0, V1, V2, V16))), V17 end(V13)) end end end end; _ -> fun (V18) -> {'Prelude.Types.Right', V3} end end; _ -> fun (V19) -> {'Prelude.Types.Right', V3} end end.
'nested--11321-14192--in--un--getPats'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NTCon', V4, V5, V6, V7, V8} -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, [], V2, ('Idris.Idris2.Builtin':'un--snd'(V9)))) end, V8, [])); _ -> fun (V10) -> {'Prelude.Types.Right', []} end end.
'nested--11441-14333--in--un--getDisjointPos'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V6, V7) -> begin (V8 = ('nested--11441-14333--in--un--getDisjointPos'(V0, V1, V2, (V3 + 1), V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V20 = begin (V13 = ('nested--11441-14332--in--un--allDisjoint'(V0, V1, V2, V6))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = fun (V18) -> case V17 of 1 -> {'Prelude.Types.Right', [V3 | V12]}; 0 -> {'Prelude.Types.Right', V12} end end), V19 end(V14)) end end end end), V20 end(V9)) end end end end end(E0, E1)) end.
'nested--11441-14329--in--un--disjointArgs'(V0, V1, V2, V3, V4) -> case V3 of [] -> fun (V5) -> {'Prelude.Types.Right', 0} end; _ -> case V4 of [] -> fun (V6) -> {'Prelude.Types.Right', 0} end; _ -> case V3 of [E0 | E1] -> (fun (V7, V8) -> case V4 of [E2 | E3] -> (fun (V9, V10) -> begin (V11 = ('nested--11441-14330--in--un--disjoint'(V0, V1, V2, V7, V9))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = case V15 of 1 -> fun (V16) -> {'Prelude.Types.Right', 1} end; 0 -> ('nested--11441-14329--in--un--disjointArgs'(V0, V1, V2, V8, V10)) end), V17 end(V12)) end end end end end(E2, E3)) end end(E0, E1)) end end end.
'nested--11441-14330--in--un--disjoint'(V0, V1, V2, V3, V4) -> case V3 of {'Core.Value.NDCon', V5, V6, V7, V8, V9} -> case V4 of {'Core.Value.NDCon', V10, V11, V12, V13, V14} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7, V12)) of 1 -> fun (V15) -> {'Prelude.Types.Right', 1} end; 0 -> begin (V21 = begin (V16 = V2), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'get'(V18)) end end(V17))), {'Prelude.Types.Right', V20} end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V40 = begin (V27 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V25, ('Idris.Idris2.Builtin':'un--snd'(V26)))) end, V9, []))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V39 = begin (V33 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V32) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V25, ('Idris.Idris2.Builtin':'un--snd'(V32)))) end, V14, []))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V38 = ('nested--11441-14329--in--un--disjointArgs'(V0, V1, V2, V31, V37))), V38 end(V34)) end end end end), V39 end(V28)) end end end end), V40 end(V22)) end end end end end; _ -> fun (V41) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NTCon', V42, V43, V44, V45, V46} -> case V4 of {'Core.Value.NDCon', V47, V48, V49, V50, V51} -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V43, V48)) of 1 -> fun (V52) -> {'Prelude.Types.Right', 1} end; 0 -> begin (V58 = begin (V53 = V2), fun (V54) -> begin (V57 = (begin (V55 = V53), fun (V56) -> ('erlang':'get'(V55)) end end(V54))), {'Prelude.Types.Right', V57} end end end), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V77 = begin (V64 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V63) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V62, ('Idris.Idris2.Builtin':'un--snd'(V63)))) end, V46, []))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V76 = begin (V70 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V69) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V62, ('Idris.Idris2.Builtin':'un--snd'(V69)))) end, V51, []))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V75 = ('nested--11441-14329--in--un--disjointArgs'(V0, V1, V2, V68, V74))), V75 end(V71)) end end end end), V76 end(V65)) end end end end), V77 end(V59)) end end end end end; _ -> fun (V78) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V79, V80} -> fun (V81) -> case V4 of {'Core.Value.NPrimVal', V82, V83} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V80, V83))}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V84) -> {'Prelude.Types.Right', 0} end end.
'nested--11441-14331--in--un--allDisjointWith'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NErased', V6, V7} -> fun (V8) -> {'Prelude.Types.Right', 0} end; _ -> case V4 of [E0 | E1] -> (fun (V9, V10) -> begin (V11 = ('nested--11441-14330--in--un--disjoint'(V0, V1, V2, V3, V9))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = case V15 of 1 -> ('nested--11441-14331--in--un--allDisjointWith'(V0, V1, V2, V3, V10)); 0 -> fun (V16) -> {'Prelude.Types.Right', 0} end end), V17 end(V12)) end end end end end(E0, E1)) end end end.
'nested--11441-14332--in--un--allDisjoint'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Core.Value.NErased', V7, V8} -> fun (V9) -> {'Prelude.Types.Right', 0} end; _ -> begin (V10 = ('nested--11441-14332--in--un--allDisjoint'(V0, V1, V2, V6))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = case V14 of 1 -> ('nested--11441-14331--in--un--allDisjointWith'(V0, V1, V2, V5, V6)); 0 -> fun (V15) -> {'Prelude.Types.Right', 0} end end), V16 end(V11)) end end end end end end(E0, E1)) end.
'un--updateNS'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.IPi', V3, V4, V5, V6, V7, V8} -> {'TTImp.TTImp.IPi', V3, V4, V5, V6, V7, ('un--updateNS'(V0, V1, V8))}; _ -> ('nested--10701-13639--in--un--updateNSApp'(V2, V1, V0, V2)) end.
'un--typeCon'(V0) -> case V0 of {'Core.TT.Ref', V1, V2, V3} -> case V2 of {'Core.TT.TyCon', V4, V5} -> {'Prelude.Types.Just', V3}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.App', V6, V7, V8} -> ('un--typeCon'(V7)); _ -> {'Prelude.Types.Nothing'} end.
'un--shaped'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V4, V5) -> begin (V11 = begin (V6 = V0), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V32 = begin (V20 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V0, [], V15, {'Core.Env.Nil'}, case V4 of {'Core.Context.Context.MkCon', V16, V17, V18, V19} -> V19 end))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V31 = case ((V1('erased'))(V24)) of 1 -> fun (V25) -> {'Prelude.Types.Right', {'Prelude.Types.Just', case V4 of {'Core.Context.Context.MkCon', V26, V27, V28, V29} -> V27 end}} end; 0 -> ('un--shaped'(V0, fun (V30) -> (V1('erased')) end, V5)) end), V31 end(V21)) end end end end), V32 end(V12)) end end end end end(E0, E1)) end.
'un--processDataOpt'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.NoHints'} -> fun (V4) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'TTImp.TTImp.SearchBy', V5} -> ('Idris.Idris2.Core.Context':'un--setDetermining'(V0, V1, V2, V5)); {'TTImp.TTImp.UniqueSearch'} -> ('Idris.Idris2.Core.Context':'un--setUniqueSearch'(V0, V1, V2, 1)); {'TTImp.TTImp.External'} -> ('Idris.Idris2.Core.Context':'un--setExternal'(V0, V1, V2, 1)); {'TTImp.TTImp.NoNewtype'} -> fun (V6) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'TTImp.TTImp.NoEnum'} -> fun (V7) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'un--processData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'TTImp.TTImp.MkImpLater', V13, V14, V15} -> begin (V16 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V14))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V288 = begin (V21 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V9, [], V0, V15))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V287 = begin (V31 = begin (V26 = V1), fun (V27) -> begin (V30 = (begin (V28 = V26), fun (V29) -> ('erlang':'get'(V28)) end end(V27))), {'Prelude.Types.Right', V30} end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V286 = begin (V68 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V20, case V35 of {'Core.Context.MkDefs', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> V36 end))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V285 = case V72 of {'Prelude.Types.Nothing'} -> begin (V73 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V9))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V282 = begin (V89 = begin (V78 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V20))), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V88 = ('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V6, fun (V83) -> {'Core.Core.InCon', V9, V20, V83} end, ('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V4, V5, V82, {'TTImp.Elab.Check.InType'}, V6, V7, V8, {'TTImp.TTImp.IBindHere', V9, {'TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V84) -> fun (V85) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V84, V85)) end end, 0, fun (V86) -> fun (V87) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V86, V87)) end end, 1}))}, V25}, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V13, V77))}))))), V88 end(V79)) end end end end), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V281 = case V93 of {'Builtin.MkPair', V94, V95} -> begin (V96 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V13, V8, V94))), begin (V100 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, (begin (V98 = fun (V97) -> V97 end), fun (V99) -> (V98(V99)) end end(<<"declare.data"/utf8>>)), 5, fun () -> <<<<"data "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20))/binary>> end, {'Core.Env.Nil'}, V96))), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V280 = begin (V111 = begin (V105 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V35, V8, V94))), fun (V106) -> begin (V107 = (V105(V106))), case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> (begin (V110 = ('un--checkIsType'(V1, V9, V20, V8, V109))), V110 end(V106)) end end end end), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V279 = begin (V116 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V35, {'Core.Env.Nil'}, V96))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V278 = begin (V125 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V20, ('Idris.Idris2.Core.Context':'un--newDef'(V9, V20, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V121) -> fun (V122) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V121, V122)) end end, 0, fun (V123) -> fun (V124) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V123, V124)) end end, 1})), V0, V96, V10, {'Core.Context.Context.TCon', 0, V120, [], [], ('Idris.Idris2.Core.Context.Context':'un--defaultFlags'()), [], [], {'Prelude.Types.Nothing'}}))))), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V277 = begin (V130 = ('Idris.Idris2.Core.Context':'un--addMutData'(V1, {'Core.Name.Resolved', V129}))), fun (V131) -> begin (V132 = (V130(V131))), case V132 of {'Prelude.Types.Left', V133} -> {'Prelude.Types.Left', V133}; {'Prelude.Types.Right', V134} -> (begin (V276 = begin (V140 = begin (V135 = V1), fun (V136) -> begin (V139 = (begin (V137 = V135), fun (V138) -> ('erlang':'get'(V137)) end end(V136))), {'Prelude.Types.Right', V139} end end end), fun (V141) -> begin (V142 = (V140(V141))), case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> (begin (V275 = begin (V210 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V145) -> ('Idris.Idris2.Core.Context':'un--setMutWith'(V1, V9, V145, case V144 of {'Core.Context.MkDefs', V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177} -> V147 end)) end, case V144 of {'Core.Context.MkDefs', V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209} -> V179 end))), fun (V211) -> begin (V212 = (V210(V211))), case V212 of {'Prelude.Types.Left', V213} -> {'Prelude.Types.Left', V213}; {'Prelude.Types.Right', V214} -> (begin (V274 = begin (V216 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V215) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V215)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V94))))))), fun (V217) -> begin (V218 = (V216(V217))), case V218 of {'Prelude.Types.Left', V219} -> {'Prelude.Types.Left', V219}; {'Prelude.Types.Right', V220} -> (begin (V273 = begin (V221 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V20))), fun (V222) -> begin (V223 = (V221(V222))), case V223 of {'Prelude.Types.Left', V224} -> {'Prelude.Types.Left', V224}; {'Prelude.Types.Right', V225} -> (begin (V272 = begin (V235 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V227 = fun (V226) -> V226 end), fun (V228) -> (V227(V228)) end end(<<"declare.data"/utf8>>)), 10, fun () -> <<(begin (V230 = fun (V229) -> V229 end), fun (V231) -> (V230(V231)) end end(<<"Saving from "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V232) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V232)) end, fun (V233) -> fun (V234) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V233, V234)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V94))))))/binary>>/binary>>/binary>> end))), fun (V236) -> begin (V237 = (V235(V236))), case V237 of {'Prelude.Types.Left', V238} -> {'Prelude.Types.Left', V238}; {'Prelude.Types.Right', V239} -> (begin (V271 = case V10 of 0 -> fun (V240) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; _ -> begin (V249 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Core.Hash.dn--un--__mkHashable', fun (V241) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V241)) end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V242, V243)) end end}, {'Core.Context.dn--un--__mkHasNames', fun (V244) -> fun (V245) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V244, V245)) end end, fun (V246) -> fun (V247) -> fun (V248) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V246, V247, V248)) end end end}, V20))), fun (V250) -> begin (V251 = (V249(V250))), case V251 of {'Prelude.Types.Left', V252} -> {'Prelude.Types.Left', V252}; {'Prelude.Types.Right', V253} -> (begin (V270 = begin (V261 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Core.Hash.dn--un--__mkHashable', fun (V254) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V254)) end, fun (V255) -> fun (V256) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V255, V256)) end end}, {'Core.Context.dn--un--__mkHasNames', fun (V257) -> fun (V258) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V257, V258)) end end, fun (V259) -> fun (V260) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V259, V260)) end end}, V96))), fun (V262) -> begin (V263 = (V261(V262))), case V263 of {'Prelude.Types.Left', V264} -> {'Prelude.Types.Left', V264}; {'Prelude.Types.Right', V265} -> (begin (V269 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"module.hash"/utf8>>, 15, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V266) -> fun (V267) -> <<V266/binary, V267/binary>> end end, <<""/utf8>>}, fun (V268) -> V268 end, [<<"Adding hash for data declaration with name "/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20)) | []]])) end))), V269 end(V262)) end end end end), V270 end(V250)) end end end end end), V271 end(V236)) end end end end), V272 end(V222)) end end end end), V273 end(V217)) end end end end), V274 end(V211)) end end end end), V275 end(V141)) end end end end), V276 end(V131)) end end end end), V277 end(V126)) end end end end), V278 end(V117)) end end end end), V279 end(V112)) end end end end), V280 end(V101)) end end end end end end), V281 end(V90)) end end end end), V282 end(V74)) end end end end; {'Prelude.Types.Just', V283} -> fun (V284) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AlreadyDefined', V9, V20}, V284)) end end), V285 end(V69)) end end end end), V286 end(V32)) end end end end), V287 end(V22)) end end end end), V288 end(V17)) end end end end; {'TTImp.TTImp.MkImpData', V289, V290, V291, V292, V293} -> begin (V294 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V290))), fun (V295) -> begin (V296 = (V294(V295))), case V296 of {'Prelude.Types.Left', V297} -> {'Prelude.Types.Left', V297}; {'Prelude.Types.Right', V298} -> (begin (V853 = begin (V299 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V9, [], V0, V291))), fun (V300) -> begin (V301 = (V299(V300))), case V301 of {'Prelude.Types.Left', V302} -> {'Prelude.Types.Left', V302}; {'Prelude.Types.Right', V303} -> (begin (V852 = begin (V304 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, 1, fun () -> <<<<"Processing "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V298))/binary>> end))), fun (V305) -> begin (V306 = (V304(V305))), case V306 of {'Prelude.Types.Left', V307} -> {'Prelude.Types.Left', V307}; {'Prelude.Types.Right', V308} -> (begin (V851 = begin (V314 = begin (V309 = V1), fun (V310) -> begin (V313 = (begin (V311 = V309), fun (V312) -> ('erlang':'get'(V311)) end end(V310))), {'Prelude.Types.Right', V313} end end end), fun (V315) -> begin (V316 = (V314(V315))), case V316 of {'Prelude.Types.Left', V317} -> {'Prelude.Types.Left', V317}; {'Prelude.Types.Right', V318} -> (begin (V850 = begin (V319 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V9))), fun (V320) -> begin (V321 = (V319(V320))), case V321 of {'Prelude.Types.Left', V322} -> {'Prelude.Types.Left', V322}; {'Prelude.Types.Right', V323} -> (begin (V849 = begin (V335 = begin (V324 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V298))), fun (V325) -> begin (V326 = (V324(V325))), case V326 of {'Prelude.Types.Left', V327} -> {'Prelude.Types.Left', V327}; {'Prelude.Types.Right', V328} -> (begin (V334 = ('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V6, fun (V329) -> {'Core.Core.InCon', V9, V298, V329} end, ('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V4, V5, V328, {'TTImp.Elab.Check.InType'}, V6, V7, V8, {'TTImp.TTImp.IBindHere', V9, {'TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V330) -> fun (V331) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V330, V331)) end end, 0, fun (V332) -> fun (V333) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V332, V333)) end end, 1}))}, V303}, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V289, V323))}))))), V334 end(V325)) end end end end), fun (V336) -> begin (V337 = (V335(V336))), case V337 of {'Prelude.Types.Left', V338} -> {'Prelude.Types.Left', V338}; {'Prelude.Types.Right', V339} -> (begin (V848 = case V339 of {'Builtin.MkPair', V340, V341} -> begin (V342 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V289, V8, V340))), begin (V375 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V298, case V318 of {'Core.Context.MkDefs', V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374} -> V343 end))), fun (V376) -> begin (V377 = (V375(V376))), case V377 of {'Prelude.Types.Left', V378} -> {'Prelude.Types.Left', V378}; {'Prelude.Types.Right', V379} -> (begin (V847 = begin (V490 = case V379 of {'Prelude.Types.Nothing'} -> fun (V380) -> {'Prelude.Types.Right', []} end; {'Prelude.Types.Just', V381} -> case V381 of {'Core.Context.Context.MkGlobalDef', V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403} -> case V399 of {'Core.Context.Context.TCon', V404, V405, V406, V407, V408, V409, V410, V411} -> case V410 of [] -> begin (V434 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_Term'(V1, [], V318, {'Core.Env.Nil'}, V342, case V381 of {'Core.Context.Context.MkGlobalDef', V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433} -> V414 end))), fun (V435) -> begin (V436 = (V434(V435))), case V436 of {'Prelude.Types.Left', V437} -> {'Prelude.Types.Left', V437}; {'Prelude.Types.Right', V438} -> (begin (V487 = case V438 of 1 -> fun (V439) -> {'Prelude.Types.Right', V409} end; 0 -> begin (V468 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, (begin (V441 = fun (V440) -> V440 end), fun (V442) -> (V441(V442)) end end(<<"declare.data"/utf8>>)), 1, fun () -> (begin (V444 = fun (V443) -> V443 end), fun (V445) -> (V444(V445)) end end(<<"Previous"/utf8>>)) end, {'Core.Env.Nil'}, case V381 of {'Core.Context.Context.MkGlobalDef', V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467} -> V448 end))), fun (V469) -> begin (V470 = (V468(V469))), case V470 of {'Prelude.Types.Left', V471} -> {'Prelude.Types.Left', V471}; {'Prelude.Types.Right', V472} -> (begin (V486 = begin (V479 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, (begin (V474 = fun (V473) -> V473 end), fun (V475) -> (V474(V475)) end end(<<"declare.data"/utf8>>)), 1, fun () -> (begin (V477 = fun (V476) -> V476 end), fun (V478) -> (V477(V478)) end end(<<"Now"/utf8>>)) end, {'Core.Env.Nil'}, V342))), fun (V480) -> begin (V481 = (V479(V480))), case V481 of {'Prelude.Types.Left', V482} -> {'Prelude.Types.Left', V482}; {'Prelude.Types.Right', V483} -> (begin (V485 = fun (V484) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AlreadyDefined', V9, V298}, V484)) end), V485 end(V480)) end end end end), V486 end(V469)) end end end end end), V487 end(V435)) end end end end; _ -> fun (V488) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AlreadyDefined', V9, V298}, V488)) end end; _ -> fun (V489) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AlreadyDefined', V9, V298}, V489)) end end end end), fun (V491) -> begin (V492 = (V490(V491))), case V492 of {'Prelude.Types.Left', V493} -> {'Prelude.Types.Left', V493}; {'Prelude.Types.Right', V494} -> (begin (V846 = begin (V498 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, (begin (V496 = fun (V495) -> V495 end), fun (V497) -> (V496(V497)) end end(<<"declare.data"/utf8>>)), 5, fun () -> <<<<"data "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V298))/binary>> end, {'Core.Env.Nil'}, V342))), fun (V499) -> begin (V500 = (V498(V499))), case V500 of {'Prelude.Types.Left', V501} -> {'Prelude.Types.Left', V501}; {'Prelude.Types.Right', V502} -> (begin (V845 = begin (V509 = begin (V503 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V318, V8, V340))), fun (V504) -> begin (V505 = (V503(V504))), case V505 of {'Prelude.Types.Left', V506} -> {'Prelude.Types.Left', V506}; {'Prelude.Types.Right', V507} -> (begin (V508 = ('un--checkIsType'(V1, V9, V298, V8, V507))), V508 end(V504)) end end end end), fun (V510) -> begin (V511 = (V509(V510))), case V511 of {'Prelude.Types.Left', V512} -> {'Prelude.Types.Left', V512}; {'Prelude.Types.Right', V513} -> (begin (V844 = begin (V514 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V318, {'Core.Env.Nil'}, V342))), fun (V515) -> begin (V516 = (V514(V515))), case V516 of {'Prelude.Types.Left', V517} -> {'Prelude.Types.Left', V517}; {'Prelude.Types.Right', V518} -> (begin (V843 = begin (V523 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V298, ('Idris.Idris2.Core.Context':'un--newDef'(V9, V298, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V519) -> fun (V520) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V519, V520)) end end, 0, fun (V521) -> fun (V522) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V521, V522)) end end, 1})), V0, V342, V10, {'Core.Context.Context.TCon', 0, V518, [], [], ('Idris.Idris2.Core.Context.Context':'un--defaultFlags'()), [], [], {'Prelude.Types.Nothing'}}))))), fun (V524) -> begin (V525 = (V523(V524))), case V525 of {'Prelude.Types.Left', V526} -> {'Prelude.Types.Left', V526}; {'Prelude.Types.Right', V527} -> (begin (V842 = begin (V559 = case V10 of 0 -> fun (V528) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; _ -> begin (V537 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Core.Hash.dn--un--__mkHashable', fun (V529) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V529)) end, fun (V530) -> fun (V531) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V530, V531)) end end}, {'Core.Context.dn--un--__mkHasNames', fun (V532) -> fun (V533) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V532, V533)) end end, fun (V534) -> fun (V535) -> fun (V536) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V534, V535, V536)) end end end}, V298))), fun (V538) -> begin (V539 = (V537(V538))), case V539 of {'Prelude.Types.Left', V540} -> {'Prelude.Types.Left', V540}; {'Prelude.Types.Right', V541} -> (begin (V558 = begin (V549 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Core.Hash.dn--un--__mkHashable', fun (V542) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V542)) end, fun (V543) -> fun (V544) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V543, V544)) end end}, {'Core.Context.dn--un--__mkHasNames', fun (V545) -> fun (V546) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V545, V546)) end end, fun (V547) -> fun (V548) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V547, V548)) end end}, V342))), fun (V550) -> begin (V551 = (V549(V550))), case V551 of {'Prelude.Types.Left', V552} -> {'Prelude.Types.Left', V552}; {'Prelude.Types.Right', V553} -> (begin (V557 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"module.hash"/utf8>>, 15, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V554) -> fun (V555) -> <<V554/binary, V555/binary>> end end, <<""/utf8>>}, fun (V556) -> V556 end, [<<"Adding hash for data declaration with name "/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V298)) | []]])) end))), V557 end(V550)) end end end end), V558 end(V538)) end end end end end), fun (V560) -> begin (V561 = (V559(V560))), case V561 of {'Prelude.Types.Left', V562} -> {'Prelude.Types.Left', V562}; {'Prelude.Types.Right', V563} -> (begin (V841 = begin (V564 = case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(V10, 1)) of 1 -> 0; 0 -> V10 end), begin (V566 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V565) -> ('un--checkCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V564, V290, {'Core.Name.Resolved', V527}, V565)) end, V293, []))), fun (V567) -> begin (V568 = (V566(V567))), case V568 of {'Prelude.Types.Left', V569} -> {'Prelude.Types.Left', V569}; {'Prelude.Types.Right', V570} -> (begin (V840 = begin (V571 = {'Core.Context.Context.MkData', {'Core.Context.Context.MkCon', V289, V298, V518, V342}, V570}), begin (V591 = begin (V572 = ('Idris.Idris2.Core.Context.Data':'un--addData'(V1, V0, V10, V527, V571))), ((begin (V588 = fun (V583) -> fun (V584) -> fun (V585) -> fun (V586) -> fun (V587) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V585, V586, V587)) end end end end end), fun (V589) -> fun (V590) -> ((((V588('erased'))('erased'))(V589))(V590)) end end end((begin (V580 = fun (V574) -> fun (V575) -> fun (V576) -> fun (V577) -> case V577 of {'Prelude.Types.Left', V578} -> {'Prelude.Types.Left', V578}; {'Prelude.Types.Right', V579} -> {'Prelude.Types.Right', (V576(V579))} end end end end end), fun (V581) -> fun (V582) -> ((((V580('erased'))('erased'))(V581))(V582)) end end end(fun (V573) -> {'Builtin.MkUnit'} end))))(V572)) end), fun (V592) -> begin (V593 = (V591(V592))), case V593 of {'Prelude.Types.Left', V594} -> {'Prelude.Types.Left', V594}; {'Prelude.Types.Right', V595} -> (begin (V839 = begin (V627 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V596) -> fun (V597) -> fun (V598) -> fun (V599) -> fun (V600) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V598, V599, V600)) end end end end end, fun (V601) -> fun (V602) -> fun (V603) -> fun (V604) -> fun (V605) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V603, V604, V605)) end end end end end, fun (V606) -> fun (V607) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V607)) end end, fun (V608) -> fun (V609) -> fun (V610) -> fun (V611) -> fun (V612) -> fun (V613) -> fun (V614) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V611, V612, V613, V614)) end end end end end end end, fun (V615) -> fun (V616) -> V616 end end, fun (V617) -> fun (V618) -> fun (V619) -> fun (V620) -> fun (V621) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V619, V620, V621)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V622) -> fun (V623) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V622, V623)) end end, fun (V624) -> fun (V625) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V624, V625)) end end}, {'TTImp.TTImp.NoNewtype'}, V292)) of 1 -> fun (V626) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('un--findNewtype'(V1, V570)) end), fun (V628) -> begin (V629 = (V627(V628))), case V629 of {'Prelude.Types.Left', V630} -> {'Prelude.Types.Left', V630}; {'Prelude.Types.Right', V631} -> (begin (V838 = begin (V637 = begin (V632 = V1), fun (V633) -> begin (V636 = (begin (V634 = V632), fun (V635) -> ('erlang':'get'(V634)) end end(V633))), {'Prelude.Types.Right', V636} end end end), fun (V638) -> begin (V639 = (V637(V638))), case V639 of {'Prelude.Types.Left', V640} -> {'Prelude.Types.Left', V640}; {'Prelude.Types.Right', V641} -> (begin (V837 = begin (V651 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V643 = fun (V642) -> V642 end), fun (V644) -> (V643(V644)) end end(<<"declare.data"/utf8>>)), 3, fun () -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V298))/binary, <<(begin (V646 = fun (V645) -> V645 end), fun (V647) -> (V646(V647)) end end(<<" defined in a mutual block with "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V648) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V648)) end, fun (V649) -> fun (V650) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V649, V650)) end end}, V494))/binary>>/binary>> end))), fun (V652) -> begin (V653 = (V651(V652))), case V653 of {'Prelude.Types.Left', V654} -> {'Prelude.Types.Left', V654}; {'Prelude.Types.Right', V655} -> (begin (V836 = begin (V656 = ('Idris.Idris2.Core.Context':'un--setMutWith'(V1, V9, {'Core.Name.Resolved', V527}, V494))), fun (V657) -> begin (V658 = (V656(V657))), case V658 of {'Prelude.Types.Left', V659} -> {'Prelude.Types.Left', V659}; {'Prelude.Types.Right', V660} -> (begin (V835 = begin (V662 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V661) -> ('un--processDataOpt'(V1, V9, {'Core.Name.Resolved', V527}, V661)) end, V292))), fun (V663) -> begin (V664 = (V662(V663))), case V664 of {'Prelude.Types.Left', V665} -> {'Prelude.Types.Left', V665}; {'Prelude.Types.Right', V666} -> (begin (V834 = begin (V667 = ('Idris.Idris2.Core.Context':'un--dropMutData'(V1, {'Core.Name.Resolved', V527}))), fun (V668) -> begin (V669 = (V667(V668))), case V669 of {'Prelude.Types.Left', V670} -> {'Prelude.Types.Left', V670}; {'Prelude.Types.Right', V671} -> (begin (V833 = begin (V684 = ('un--getDetags'(V1, V9, ((begin (V681 = fun (V677) -> fun (V678) -> fun (V679) -> fun (V680) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V679, V680)) end end end end), fun (V682) -> fun (V683) -> ((((V681('erased'))('erased'))(V682))(V683)) end end end(fun (V672) -> case V672 of {'Core.Context.Context.MkCon', V673, V674, V675, V676} -> V676 end end))(V570))))), fun (V685) -> begin (V686 = (V684(V685))), case V686 of {'Prelude.Types.Left', V687} -> {'Prelude.Types.Left', V687}; {'Prelude.Types.Right', V688} -> (begin (V832 = begin (V689 = ('Idris.Idris2.Core.Context':'un--setDetags'(V1, V9, {'Core.Name.Resolved', V527}, V688))), fun (V690) -> begin (V691 = (V689(V690))), case V691 of {'Prelude.Types.Left', V692} -> {'Prelude.Types.Left', V692}; {'Prelude.Types.Right', V693} -> (begin (V831 = begin (V695 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V694) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V694)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V340))))))), fun (V696) -> begin (V697 = (V695(V696))), case V697 of {'Prelude.Types.Left', V698} -> {'Prelude.Types.Left', V698}; {'Prelude.Types.Right', V699} -> (begin (V830 = begin (V700 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V298))), fun (V701) -> begin (V702 = (V700(V701))), case V702 of {'Prelude.Types.Left', V703} -> {'Prelude.Types.Left', V703}; {'Prelude.Types.Right', V704} -> (begin (V829 = begin (V714 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V706 = fun (V705) -> V705 end), fun (V707) -> (V706(V707)) end end(<<"declare.data"/utf8>>)), 10, fun () -> <<(begin (V709 = fun (V708) -> V708 end), fun (V710) -> (V709(V710)) end end(<<"Saving from "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V298))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V711) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V711)) end, fun (V712) -> fun (V713) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V712, V713)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V340))))))/binary>>/binary>>/binary>> end))), fun (V715) -> begin (V716 = (V714(V715))), case V716 of {'Prelude.Types.Left', V717} -> {'Prelude.Types.Left', V717}; {'Prelude.Types.Right', V718} -> (begin (V828 = begin (V731 = ((begin (V728 = fun (V724) -> fun (V725) -> fun (V726) -> fun (V727) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V726, V727)) end end end end), fun (V729) -> fun (V730) -> ((((V728('erased'))('erased'))(V729))(V730)) end end end(fun (V719) -> case V719 of {'Core.Context.Context.MkCon', V720, V721, V722, V723} -> V721 end end))(V570))), begin (V764 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V732) -> fun (V733) -> fun (V734) -> fun (V735) -> fun (V736) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V734, V735, V736)) end end end end end, fun (V737) -> fun (V738) -> fun (V739) -> fun (V740) -> fun (V741) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V739, V740, V741)) end end end end end, fun (V742) -> fun (V743) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V743)) end end, fun (V744) -> fun (V745) -> fun (V746) -> fun (V747) -> fun (V748) -> fun (V749) -> fun (V750) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V747, V748, V749, V750)) end end end end end end end, fun (V751) -> fun (V752) -> V752 end end, fun (V753) -> fun (V754) -> fun (V755) -> fun (V756) -> fun (V757) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V755, V756, V757)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V758) -> fun (V759) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V758, V759)) end end, fun (V760) -> fun (V761) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V760, V761)) end end}, {'TTImp.TTImp.NoHints'}, V292)) of 1 -> fun (V762) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V763) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V1, V9, {'Core.Name.Resolved', V527}, V763, 1, 0)) end, V731)) end), fun (V765) -> begin (V766 = (V764(V765))), case V766 of {'Prelude.Types.Left', V767} -> {'Prelude.Types.Left', V767}; {'Prelude.Types.Right', V768} -> (begin (V827 = begin (V800 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V769) -> fun (V770) -> fun (V771) -> fun (V772) -> fun (V773) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V771, V772, V773)) end end end end end, fun (V774) -> fun (V775) -> fun (V776) -> fun (V777) -> fun (V778) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V776, V777, V778)) end end end end end, fun (V779) -> fun (V780) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V780)) end end, fun (V781) -> fun (V782) -> fun (V783) -> fun (V784) -> fun (V785) -> fun (V786) -> fun (V787) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V784, V785, V786, V787)) end end end end end end end, fun (V788) -> fun (V789) -> V789 end end, fun (V790) -> fun (V791) -> fun (V792) -> fun (V793) -> fun (V794) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V792, V793, V794)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V795) -> fun (V796) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V795, V796)) end end, fun (V797) -> fun (V798) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V797, V798)) end end}, {'TTImp.TTImp.NoEnum'}, V292)) of 1 -> fun (V799) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('un--calcConInfo'(V1, V9, {'Core.Name.Resolved', V527}, V570)) end), fun (V801) -> begin (V802 = (V800(V801))), case V802 of {'Prelude.Types.Left', V803} -> {'Prelude.Types.Left', V803}; {'Prelude.Types.Right', V804} -> (begin (V826 = begin (V806 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V805) -> ('Idris.Idris2.TTImp.Elab.Utils':'un--updateErasable'(V1, V805)) end, [{'Core.Name.Resolved', V527} | V731]))), fun (V807) -> begin (V808 = (V806(V807))), case V808 of {'Prelude.Types.Left', V809} -> {'Prelude.Types.Left', V809}; {'Prelude.Types.Right', V810} -> (begin (V825 = case V11 of {'Prelude.Types.Just', V811} -> begin (V818 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V813 = fun (V812) -> V812 end), fun (V814) -> (V813(V814)) end end(<<"declare.data"/utf8>>)), 5, fun () -> <<(begin (V816 = fun (V815) -> V815 end), fun (V817) -> (V816(V817)) end end(<<"setting totality flag for "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V298))/binary>> end))), fun (V819) -> begin (V820 = (V818(V819))), case V820 of {'Prelude.Types.Left', V821} -> {'Prelude.Types.Left', V821}; {'Prelude.Types.Right', V822} -> (begin (V823 = ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V9, V298, {'Core.Context.Context.SetTotal', V811}))), V823 end(V819)) end end end end; {'Prelude.Types.Nothing'} -> fun (V824) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V825 end(V807)) end end end end), V826 end(V801)) end end end end), V827 end(V765)) end end end end end), V828 end(V715)) end end end end), V829 end(V701)) end end end end), V830 end(V696)) end end end end), V831 end(V690)) end end end end), V832 end(V685)) end end end end), V833 end(V668)) end end end end), V834 end(V663)) end end end end), V835 end(V657)) end end end end), V836 end(V652)) end end end end), V837 end(V638)) end end end end), V838 end(V628)) end end end end), V839 end(V592)) end end end end end), V840 end(V567)) end end end end end), V841 end(V560)) end end end end), V842 end(V524)) end end end end), V843 end(V515)) end end end end), V844 end(V510)) end end end end), V845 end(V499)) end end end end), V846 end(V491)) end end end end), V847 end(V376)) end end end end end end), V848 end(V336)) end end end end), V849 end(V320)) end end end end), V850 end(V315)) end end end end), V851 end(V305)) end end end end), V852 end(V300)) end end end end), V853 end(V295)) end end end end end.
'un--hasArgs'(V0, V1) -> case V0 of 0 -> case V1 of {'Core.TT.Bind', V2, V3, V4, V5} -> case V4 of {'Core.TT.Pi', V6, V7, V8, V9} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V10, V11)) end end, 0, fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V12, V13)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V16, V17)) end end}}, V7)) of 1 -> ('un--hasArgs'(0, V5)); 0 -> 0 end; _ -> 1 end; _ -> 1 end; _ -> begin (V18 = (V0 - 1)), case V1 of {'Core.TT.Bind', V19, V20, V21, V22} -> case V21 of {'Core.TT.Pi', V23, V24, V25, V26} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V27, V28)) end end, 0, fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V29, V30)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V33, V34)) end end}}, V24)) of 1 -> ('un--hasArgs'((V18 + 1), V22)); 0 -> ('un--hasArgs'(V18, V22)) end; _ -> 0 end; _ -> 0 end end end.
'un--getRelevantArg'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.Value.NBind', V6, V7, V8, V9} -> case V8 of {'Core.TT.Pi', V10, V11, V12, V13} -> begin (V14 = ((V9(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V6, {'Core.TT.Placeholder'}}))))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V66 = begin (V19 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, V13))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V65 = ('Idris.Idris2.Algebra.Semiring':'un--branchZero'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V24, V25)) end end, 0, fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V26, V27)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V30, V31)) end end}}, fun () -> ('un--getRelevantArg'(V0, V1, (V2 + 1), V3, V4, V18)) end, case V23 of {'Core.Value.NPrimVal', V32, V33} -> case V33 of {'Core.TT.PrT', V34} -> case V34 of 13 -> fun () -> begin (V35 = ((V9(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V6, {'Core.TT.Placeholder'}}))))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V40 = ('un--getRelevantArg'(V0, V1, (V2 + 1), V3, 0, V39))), V40 end(V36)) end end end end end; _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> begin (V41 = ((V9(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V6, {'Core.TT.Placeholder'}}))))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V46 = ('un--getRelevantArg'(V0, V1, (V2 + 1), {'Prelude.Types.Just', V2}, 0, V45))), V46 end(V42)) end end end end end, fun () -> fun (V47) -> fun (V48) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end, V3)) end end; _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> begin (V49 = ((V9(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V6, {'Core.TT.Placeholder'}}))))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V54 = ('un--getRelevantArg'(V0, V1, (V2 + 1), {'Prelude.Types.Just', V2}, 0, V53))), V54 end(V50)) end end end end end, fun () -> fun (V55) -> fun (V56) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end, V3)) end end; _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> begin (V57 = ((V9(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V6, {'Core.TT.Placeholder'}}))))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V62 = ('un--getRelevantArg'(V0, V1, (V2 + 1), {'Prelude.Types.Just', V2}, 0, V61))), V62 end(V58)) end end end end end, fun () -> fun (V63) -> fun (V64) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end, V3)) end end, V11))), V65 end(V20)) end end end end), V66 end(V15)) end end end end; _ -> fun (V67) -> {'Prelude.Types.Right', ((begin (V73 = fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V71, V72)) end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end(fun (V68) -> {'Builtin.MkPair', V4, V68} end))(V3))} end end; _ -> fun (V76) -> {'Prelude.Types.Right', ((begin (V82 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V80, V81)) end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V77) -> {'Builtin.MkPair', V4, V77} end))(V3))} end end.
'un--getIndexPats'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V24 = begin (V12 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V11, {'Core.Env.Nil'}, V1))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V23 = begin (V17 = ('nested--11321-14191--in--un--getRetType'(V1, V0, V11, V16))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V22 = ('nested--11321-14192--in--un--getPats'(V1, V0, V11, V21))), V22 end(V18)) end end end end), V23 end(V13)) end end end end), V24 end(V8)) end end end end.
'un--getDetags'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end; [E0 | E1] -> (fun (V4, V5) -> case V5 of [] -> fun (V6) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end; _ -> begin (V8 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V7) -> ('un--getIndexPats'(V0, V7)) end, V2, []))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V20 = begin (V13 = ('nested--11441-14333--in--un--getDisjointPos'(V2, V1, V0, 0, ('Idris.Idris2.Data.List':'un--transpose'(V12))))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = fun (V18) -> case V17 of [] -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Just', V17}} end end), V19 end(V14)) end end end end), V20 end(V9)) end end end end end end(E0, E1)); _ -> begin (V22 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V21) -> ('un--getIndexPats'(V0, V21)) end, V2, []))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V34 = begin (V27 = ('nested--11441-14333--in--un--getDisjointPos'(V2, V1, V0, 0, ('Idris.Idris2.Data.List':'un--transpose'(V26))))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = fun (V32) -> case V31 of [] -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Just', V31}} end end), V33 end(V28)) end end end end), V34 end(V23)) end end end end end.
'un--firstArg'(V0) -> case V0 of {'Core.TT.Bind', V1, V2, V3, V4} -> case V3 of {'Core.TT.Pi', V5, V6, V7, V8} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V9, V10)) end end, 0, fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V11, V12)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V15, V16)) end end}}, V6)) of 1 -> ('un--firstArg'(V4)); 0 -> {'Prelude.Types.Just', V8} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--findNewtype'(V0, V1) -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V40 = begin (V24 = begin (V18 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V13, {'Core.Env.Nil'}, case V2 of {'Core.Context.Context.MkCon', V14, V15, V16, V17} -> V17 end))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V23 = ('un--getRelevantArg'(V0, V13, 0, {'Prelude.Types.Nothing'}, 1, V22))), V23 end(V19)) end end end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V39 = case V28 of {'Prelude.Types.Just', V29} -> ('Idris.Idris2.Core.Context':'un--updateDef'(V0, case V2 of {'Core.Context.Context.MkCon', V30, V31, V32, V33} -> V31 end, fun (V34) -> case V34 of {'Core.Context.Context.DCon', V35, V36, V37} -> {'Prelude.Types.Just', {'Core.Context.Context.DCon', V35, V36, {'Prelude.Types.Just', V29}}}; _ -> {'Prelude.Types.Nothing'} end end)); {'Prelude.Types.Nothing'} -> fun (V38) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V39 end(V25)) end end end end), V40 end(V10)) end end end end; _ -> fun (V41) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end(E0, E1)); _ -> fun (V42) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'un--checkRetType'(V0, V1, V2, V3) -> case V2 of {'Core.Value.NBind', V4, V5, V6, V7} -> case V6 of {'Core.TT.Pi', V8, V9, V10, V11} -> begin (V17 = begin (V12 = V0), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V28 = begin (V22 = ((V7(V21))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V1, {'Core.TT.Erased', V4, {'Core.TT.Placeholder'}}))))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V27 = ('un--checkRetType'(V0, V1, V26, V3))), V27 end(V23)) end end end end), V28 end(V18)) end end end end; _ -> (V3(V2)) end; _ -> (V3(V2)) end.
'un--checkIsType'(V0, V1, V2, V3, V4) -> ('un--checkRetType'(V0, V3, V4, fun (V5) -> fun (V6) -> case V5 of {'Core.Value.NType', V7, V8} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadTypeConType', V1, V2}, V6)) end end end)).
'un--checkFamily'(V0, V1, V2, V3, V4, V5) -> ('un--checkRetType'(V0, V4, V5, fun (V6) -> fun (V7) -> case V6 of {'Core.Value.NType', V8, V9} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadDataConType', V1, V2, V3}, V7)); {'Core.Value.NTCon', V10, V11, V12, V13, V14} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V3, V11)) of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadDataConType', V1, V2, V3}, V7)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadDataConType', V1, V2, V3}, V7)) end end end)).
'un--checkCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'TTImp.TTImp.MkImpTy', V13, V14, V15, V16} -> begin (V17 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V15))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V224 = begin (V22 = ('un--updateNS'(V10, V11, V16))), begin (V26 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, 5, fun () -> <<<<"Checking constructor type "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V24, V25)) end end}, V22))/binary>>/binary>>/binary>> end))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V223 = begin (V37 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, 10, fun () -> <<<<"Updated "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V32, V33)) end end}, {'Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V35, V36)) end end}}, {'Builtin.MkPair', V10, V11}))/binary>> end))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V222 = begin (V47 = begin (V42 = V1), fun (V43) -> begin (V46 = (begin (V44 = V42), fun (V45) -> ('erlang':'get'(V44)) end end(V43))), {'Prelude.Types.Right', V46} end end end), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V221 = begin (V84 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V21, case V51 of {'Core.Context.MkDefs', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> V52 end))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V220 = case V88 of {'Prelude.Types.Nothing'} -> begin (V89 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V13))), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V217 = begin (V105 = begin (V94 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V21))), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V104 = ('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V6, fun (V99) -> {'Core.Core.InCon', V13, V21, V99} end, ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V4, V5, V98, {'TTImp.Elab.Check.InType'}, V6, V7, V8, {'TTImp.TTImp.IBindHere', V13, {'TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V100) -> fun (V101) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V100, V101)) end end, 0, fun (V102) -> fun (V103) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V102, V103)) end end, 1}))}, V22}, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V13, V93))))))), V104 end(V95)) end end end end), fun (V106) -> begin (V107 = (V105(V106))), case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> (begin (V216 = begin (V116 = begin (V110 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V51, V8, V109))), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V115 = ('un--checkFamily'(V1, V13, V21, V11, V8, V114))), V115 end(V111)) end end end end), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V215 = begin (V121 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V13, V8, V109))), begin (V128 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, (begin (V123 = fun (V122) -> V122 end), fun (V124) -> (V123(V124)) end end(<<"declare.data.constructor"/utf8>>)), 5, fun () -> <<(begin (V126 = fun (V125) -> V125 end), fun (V127) -> (V126(V127)) end end(<<"Constructor "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21))/binary>> end, {'Core.Env.Nil'}, V121))), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V214 = begin (V134 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V133) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V133)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V109))))))), fun (V135) -> begin (V136 = (V134(V135))), case V136 of {'Prelude.Types.Left', V137} -> {'Prelude.Types.Left', V137}; {'Prelude.Types.Right', V138} -> (begin (V213 = begin (V139 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V21))), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V212 = begin (V153 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V145 = fun (V144) -> V144 end), fun (V146) -> (V145(V146)) end end(<<"declare.data.constructor"/utf8>>)), 10, fun () -> <<(begin (V148 = fun (V147) -> V147 end), fun (V149) -> (V148(V149)) end end(<<"Saving from "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V150) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V150)) end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V151, V152)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V109))))))/binary>>/binary>>/binary>> end))), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V211 = begin (V198 = case V9 of 2 -> begin (V166 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Core.Hash.dn--un--__mkHashable', fun (V158) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V158)) end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V159, V160)) end end}, {'Core.Context.dn--un--__mkHasNames', fun (V161) -> fun (V162) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V161, V162)) end end, fun (V163) -> fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V163, V164, V165)) end end end}, V21))), fun (V167) -> begin (V168 = (V166(V167))), case V168 of {'Prelude.Types.Left', V169} -> {'Prelude.Types.Left', V169}; {'Prelude.Types.Right', V170} -> (begin (V196 = begin (V178 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Core.Hash.dn--un--__mkHashable', fun (V171) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V171)) end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V172, V173)) end end}, {'Core.Context.dn--un--__mkHasNames', fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V174, V175)) end end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V176, V177)) end end}, V121))), fun (V179) -> begin (V180 = (V178(V179))), case V180 of {'Prelude.Types.Left', V181} -> {'Prelude.Types.Left', V181}; {'Prelude.Types.Right', V182} -> (begin (V195 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V184 = fun (V183) -> V183 end), fun (V185) -> (V184(V185)) end end(<<"module.hash"/utf8>>)), 15, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V186) -> fun (V187) -> <<V186/binary, V187/binary>> end end, <<""/utf8>>}, fun (V188) -> V188 end, [(begin (V190 = fun (V189) -> V189 end), fun (V191) -> (V190(V191)) end end(<<"Adding hash for data constructor: "/utf8>>)) | [(begin (V193 = fun (V192) -> V192 end), fun (V194) -> (V193(V194)) end end(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21)))) | []]])) end))), V195 end(V179)) end end end end), V196 end(V167)) end end end end; _ -> fun (V197) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V210 = begin (V203 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V51, {'Core.Env.Nil'}, V121))), fun (V204) -> begin (V205 = (V203(V204))), case V205 of {'Prelude.Types.Left', V206} -> {'Prelude.Types.Left', V206}; {'Prelude.Types.Right', V207} -> (begin (V209 = fun (V208) -> {'Prelude.Types.Right', {'Core.Context.Context.MkCon', V13, V21, V207, V121}} end), V209 end(V204)) end end end end), V210 end(V199)) end end end end), V211 end(V154)) end end end end), V212 end(V140)) end end end end), V213 end(V135)) end end end end), V214 end(V129)) end end end end end), V215 end(V117)) end end end end), V216 end(V106)) end end end end), V217 end(V90)) end end end end; {'Prelude.Types.Just', V218} -> fun (V219) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AlreadyDefined', V13, V21}, V219)) end end), V220 end(V85)) end end end end), V221 end(V48)) end end end end), V222 end(V38)) end end end end), V223 end(V27)) end end end end end), V224 end(V18)) end end end end end.
'un--calcUnity'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> case V5 of [] -> begin (V8 = ('un--shaped'(V0, fun (V6) -> fun (V7) -> ('un--hasArgs'(0, V7)) end end, V3))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V22 = case V12 of {'Prelude.Types.Just', V13} -> begin (V14 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V13, {'Core.Context.Context.ConType', {'Core.CompileExpr.UNIT'}}))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', 1} end), V20 end(V15)) end end end end; {'Prelude.Types.Nothing'} -> fun (V21) -> {'Prelude.Types.Right', 0} end end), V22 end(V9)) end end end end; _ -> fun (V23) -> {'Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V24) -> {'Prelude.Types.Right', 0} end end.
'un--calcRecord'(V0, V1, V2) -> case V2 of [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> begin (V9 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, case V3 of {'Core.Context.Context.MkCon', V5, V6, V7, V8} -> V6 end, {'Core.Context.Context.ConType', {'Core.CompileExpr.RECORD'}}))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', 1} end), V15 end(V10)) end end end end; _ -> fun (V16) -> {'Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V17) -> {'Prelude.Types.Right', 0} end end.
'un--calcNaty'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> case V5 of [E2 | E3] -> (fun (V6, V7) -> case V7 of [] -> begin (V10 = ('un--shaped'(V0, fun (V8) -> fun (V9) -> ('un--hasArgs'(0, V9)) end end, V3))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V35 = begin (V15 = [V4 | [V6 | []]]), case V14 of {'Prelude.Types.Just', V16} -> begin (V19 = ('un--shaped'(V0, fun (V17) -> fun (V18) -> ('un--hasArgs'(1, V18)) end end, V15))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V33 = begin (V24 = {'Prelude.Types.Just', V16}), case V23 of {'Prelude.Types.Just', V25} -> begin (V26 = {'Prelude.Types.Just', V25}), ('case--case block in case block in calcNaty-16207'(V6, V4, V15, V2, V1, V0, V16, V24, V25, V26, ('Idris.Idris2.Data.List':'un--find'(fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(case V27 of {'Core.Context.Context.MkCon', V28, V29, V30, V31} -> V29 end, V25)) end, V15)))) end; {'Prelude.Types.Nothing'} -> fun (V32) -> {'Prelude.Types.Right', 0} end end end), V33 end(V20)) end end end end; {'Prelude.Types.Nothing'} -> fun (V34) -> {'Prelude.Types.Right', 0} end end end), V35 end(V11)) end end end end; _ -> fun (V36) -> {'Prelude.Types.Right', 0} end end end(E2, E3)); _ -> fun (V37) -> {'Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V38) -> {'Prelude.Types.Right', 0} end end.
'un--calcMaybe'(V0, V1, V2) -> case V2 of [E0 | E1] -> (fun (V3, V4) -> case V4 of [E2 | E3] -> (fun (V5, V6) -> case V6 of [] -> begin (V9 = ('un--shaped'(V0, fun (V7) -> fun (V8) -> ('un--hasArgs'(0, V8)) end end, V2))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V40 = begin (V14 = [V3 | [V5 | []]]), case V13 of {'Prelude.Types.Just', V15} -> begin (V18 = ('un--shaped'(V0, fun (V16) -> fun (V17) -> ('un--hasArgs'(1, V17)) end end, V14))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V38 = case V22 of {'Prelude.Types.Just', V23} -> begin (V24 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V15, {'Core.Context.Context.ConType', {'Core.CompileExpr.NOTHING'}}))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V36 = begin (V29 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V23, {'Core.Context.Context.ConType', {'Core.CompileExpr.JUST'}}))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V35 = fun (V34) -> {'Prelude.Types.Right', 1} end), V35 end(V30)) end end end end), V36 end(V25)) end end end end; {'Prelude.Types.Nothing'} -> fun (V37) -> {'Prelude.Types.Right', 0} end end), V38 end(V19)) end end end end; {'Prelude.Types.Nothing'} -> fun (V39) -> {'Prelude.Types.Right', 0} end end end), V40 end(V10)) end end end end; _ -> fun (V41) -> {'Prelude.Types.Right', 0} end end end(E2, E3)); _ -> fun (V42) -> {'Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V43) -> {'Prelude.Types.Right', 0} end end.
'un--calcListy'(V0, V1, V2) -> case V2 of [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> begin (V7 = ('un--shaped'(V0, fun (V5) -> fun (V6) -> ('un--hasArgs'(2, V6)) end end, V2))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V21 = case V11 of {'Prelude.Types.Just', V12} -> begin (V13 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V12, {'Core.Context.Context.ConType', {'Core.CompileExpr.CONS'}}))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = fun (V18) -> {'Prelude.Types.Right', 1} end), V19 end(V14)) end end end end; {'Prelude.Types.Nothing'} -> fun (V20) -> {'Prelude.Types.Right', 0} end end), V21 end(V8)) end end end end; [E2 | E3] -> (fun (V22, V23) -> case V23 of [] -> begin (V26 = ('un--shaped'(V0, fun (V24) -> fun (V25) -> ('un--hasArgs'(0, V25)) end end, V2))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V57 = begin (V31 = [V3 | [V22 | []]]), case V30 of {'Prelude.Types.Just', V32} -> begin (V35 = ('un--shaped'(V0, fun (V33) -> fun (V34) -> ('un--hasArgs'(2, V34)) end end, V31))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V55 = case V39 of {'Prelude.Types.Just', V40} -> begin (V41 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V32, {'Core.Context.Context.ConType', {'Core.CompileExpr.NIL'}}))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V53 = begin (V46 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V40, {'Core.Context.Context.ConType', {'Core.CompileExpr.CONS'}}))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V52 = fun (V51) -> {'Prelude.Types.Right', 1} end), V52 end(V47)) end end end end), V53 end(V42)) end end end end; {'Prelude.Types.Nothing'} -> fun (V54) -> {'Prelude.Types.Right', 0} end end), V55 end(V36)) end end end end; {'Prelude.Types.Nothing'} -> fun (V56) -> {'Prelude.Types.Right', 0} end end end), V57 end(V27)) end end end end; _ -> fun (V58) -> {'Prelude.Types.Right', 0} end end end(E2, E3)); _ -> fun (V59) -> {'Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V60) -> {'Prelude.Types.Right', 0} end end.
'un--calcEnum'(V0, V1, V2) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--allM'(fun (V3) -> ('nested--13251-15980--in--un--isNullary'(V2, V1, V0, V3)) end, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V30 = case V8 of 1 -> begin (V22 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V9) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V9, {'Core.Context.Context.ConType', {'Core.CompileExpr.ENUM', ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V2))}})) end, ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V10) -> case V10 of {'Core.Context.Context.MkCon', V11, V12, V13, V14} -> V12 end end))(V2))))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V28 = fun (V27) -> {'Prelude.Types.Right', 1} end), V28 end(V23)) end end end end; 0 -> fun (V29) -> {'Prelude.Types.Right', 0} end end), V30 end(V5)) end end end end.
'un--calcConInfo'(V0, V1, V2, V3) -> begin (V4 = ('un--calcNaty'(V0, V1, V2, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V45 = case V8 of 0 -> begin (V9 = ('un--calcUnity'(V0, V1, V2, V3))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V43 = case V13 of 0 -> begin (V14 = ('un--calcListy'(V0, V1, V3))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V41 = case V18 of 0 -> begin (V19 = ('un--calcMaybe'(V0, V1, V3))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V39 = case V23 of 0 -> begin (V24 = ('un--calcEnum'(V0, V1, V3))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V37 = case V28 of 0 -> begin (V29 = ('un--calcRecord'(V0, V1, V3))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V35 = fun (V34) -> case V33 of 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V35 end(V30)) end end end end; 1 -> fun (V36) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V37 end(V25)) end end end end; 1 -> fun (V38) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V39 end(V20)) end end end end; 1 -> fun (V40) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V41 end(V15)) end end end end; 1 -> fun (V42) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V43 end(V10)) end end end end; 1 -> fun (V44) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V45 end(V5)) end end end end.
