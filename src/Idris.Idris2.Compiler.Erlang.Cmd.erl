-module('Idris.Idris2.Compiler.Erlang.Cmd').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--3624-2547--in--un--escapeComponent'/2,
  'nested--3624-2546--in--un--escapeChar'/2,
  'un--pmapErlFun'/0,
  'un--executeBeamCmd'/3,
  'un--evalErlangSourceCmd'/2,
  'un--escapeCmd'/1,
  'un--erlShowPaths'/1,
  'un--erlShowPath'/1,
  'un--compileErlToBeamCmd'/3,
  'un--compileAbstrToErlCmd'/4,
  'un--compileAbstrToBeamCmd'/3,
  'un--archiveFilesToEscriptCmd'/5
]).
'nested--3624-2547--in--un--escapeComponent'(V0, V1) -> <<<<"\x{27}"/utf8>>/binary, <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> <<V2/binary, V3/binary>> end end, <<""/utf8>>}, fun (V4) -> V4 end, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('nested--3624-2546--in--un--escapeChar'(V0, V5)) end))(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1))))))/binary, <<"\x{27}"/utf8>>/binary>>/binary>>.
'nested--3624-2546--in--un--escapeChar'(V0, V1) -> case V1 of $\x{27} -> <<"\x{27}\x{22}\x{27}\x{22}\x{27}"/utf8>>; _ -> ('unicode':'characters_to_binary'([V1 | []])) end.
'un--pmapErlFun'() -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V0) -> fun (V1) -> <<V0/binary, V1/binary>> end end, <<""/utf8>>}, fun (V2) -> V2 end, [<<"Collect = fun\x{a}  Collect([]) -> [];\x{a}  Collect([{Pid, MRef} | Next]) ->\x{a}    receive\x{a}      {Pid, Res} ->\x{a}        erlang:demonitor(MRef, [flush]),\x{a}        [{ok, Res} | Collect(Next)];\x{a}      {\x{27}DOWN\x{27}, MRef, process, Pid, Reason} ->\x{a}        [{error, Reason} | Collect(Next)]\x{a}    end\x{a}  end,\x{a}  Pmap = fun(F, Es) ->\x{a}  Parent = self(),\x{a}  Running = [\x{a}    spawn_monitor(fun() -> Parent ! {self(), F(E)} end)\x{a}      || E <- Es],\x{a}  Collect(Running)\x{a}end"/utf8>> | []])).
'un--executeBeamCmd'(V0, V1, V2) -> ('un--escapeCmd'([V0 | [<<"-noshell"/utf8>> | [<<"-boot"/utf8>> | [<<"no_dot_erlang"/utf8>> | [<<"-pa"/utf8>> | [V1 | [<<"-run"/utf8>> | [V2 | []]]]]]]]])).
'un--evalErlangSourceCmd'(V0, V1) -> ('un--escapeCmd'([V0 | [<<"-noshell"/utf8>> | [<<"-boot"/utf8>> | [<<"no_dot_erlang"/utf8>> | [<<"-eval"/utf8>> | [V1 | []]]]]]])).
'un--escapeCmd'(V0) -> ('Idris.Idris2.Data.String':'un--unwords'(((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('nested--3624-2547--in--un--escapeComponent'(V0, V1)) end))(V0)))).
'un--erlShowPaths'(V0) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V1)) end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V2, V3)) end end}, V0)).
'un--erlShowPath'(V0) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V0)).
'un--compileErlToBeamCmd'(V0, V1, V2) -> ('un--escapeCmd'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V0 | [<<"-W0"/utf8>> | [<<"-o"/utf8>> | [V2 | []]]]], V1)))).
'un--compileAbstrToErlCmd'(V0, V1, V2, V3) -> begin (V6 = case V0 of 1 -> begin (V4 = 10000), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end; 0 -> begin (V5 = 120), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end end), begin (V10 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V7) -> fun (V8) -> <<V7/binary, V8/binary>> end end, <<""/utf8>>}, fun (V9) -> V9 end, [<<"[{paper, "/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) | [<<"}, {ribbon, "/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) | [<<"}]"/utf8>> | []]]]]]))), begin (V14 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V11) -> fun (V12) -> <<V11/binary, V12/binary>> end end, <<""/utf8>>}, fun (V13) -> V13 end, [('un--pmapErlFun'()) | [<<",\x{a}ModuleNameFromForms = fun(Forms) ->\x{a}  lists:foldl(\x{a}    fun\x{a}      ({attribute, _, module, ModuleName}, _Acc) -> {ok, ModuleName};\x{a}      (_, Acc) -> Acc\x{a}    end, not_found, Forms)\x{a}end,\x{a}GenerateErl = fun(File, OutputDir) ->\x{a}  {ok, Forms} = file:consult(File),\x{a}  {ok, ModuleName} = ModuleNameFromForms(Forms),\x{a}  OutputFile = filename:join(OutputDir, atom_to_list(ModuleName) ++ \x{22}.erl\x{22}),\x{a}  ErlangSource = erl_prettypr:format(erl_syntax:form_list(Forms), "/utf8>> | [V10 | [<<"),\x{a}  file:write_file(OutputFile, ErlangSource)\x{a}end,\x{a}Pmap(fun(File) -> GenerateErl(File, "/utf8>> | [('un--erlShowPath'(V3)) | [<<") end, "/utf8>> | [('un--erlShowPaths'(V2)) | [<<"),\x{a}halt(0)"/utf8>> | []]]]]]]]]))), ('un--evalErlangSourceCmd'(V1, V14)) end end end.
'un--compileAbstrToBeamCmd'(V0, V1, V2) -> begin (V6 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V3) -> fun (V4) -> <<V3/binary, V4/binary>> end end, <<""/utf8>>}, fun (V5) -> V5 end, [('un--pmapErlFun'()) | [<<",\x{a}CompileAbstr = fun(File, OutputDir) ->\x{a}  {ok, Forms} = file:consult(File),\x{a}  {ok, ModuleName, BinaryOrCode} = compile:noenv_forms(Forms, []),\x{a}  OutputFile = filename:join(OutputDir, atom_to_list(ModuleName) ++ \x{22}.beam\x{22}),\x{a}  file:write_file(OutputFile, BinaryOrCode)\x{a}end,\x{a}Pmap(fun(File) -> CompileAbstr(File, "/utf8>> | [('un--erlShowPath'(V2)) | [<<") end, "/utf8>> | [('un--erlShowPaths'(V1)) | [<<"),\x{a}halt(0)"/utf8>> | []]]]]]]))), ('un--evalErlangSourceCmd'(V0, V6)) end.
'un--archiveFilesToEscriptCmd'(V0, V1, V2, V3, V4) -> begin (V8 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V5) -> fun (V6) -> <<V5/binary, V6/binary>> end end, <<""/utf8>>}, fun (V7) -> V7 end, [<<"InputDir = "/utf8>> | [('un--erlShowPath'(V1)) | [<<",\x{a}InputFiles = "/utf8>> | [('un--erlShowPaths'(V2)) | [<<",\x{a}OutputDir = "/utf8>> | [('un--erlShowPath'(V3)) | [<<",\x{a}MainModule = "/utf8>> | [('un--erlShowPath'(V4)) | [<<",\x{a}GeneratedEscriptFile = filename:join(InputDir, MainModule),\x{a}OutputFile = filename:join(OutputDir, MainModule),\x{a}EmuArgs = \x{22}-escript main \x{22} ++ MainModule,\x{a}{ok, CurrentDir} = file:get_cwd(),\x{a}file:set_cwd(InputDir),\x{a}escript:create(MainModule, [shebang, {emu_args, EmuArgs}, {archive, InputFiles, []}]),\x{a}file:change_mode(MainModule, 8#00755),\x{a}file:set_cwd(CurrentDir),\x{a}file:rename(GeneratedEscriptFile, OutputFile),\x{a}halt(0)"/utf8>> | []]]]]]]]]]))), ('un--evalErlangSourceCmd'(V0, V8)) end.
