-module('Idris.Idris2.Libraries.Text.Lexer.Tokenizer').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--tokenise,getFirstMatch-6254'/10,
  'case--case block in case block in case block in tokenise,getFirstMatch-6017'/27,
  'case--tokenise,getFirstMatch-5737'/14,
  'case--tokenise,getFirstMatch-5637'/10,
  'case--tokenise,getNext-5534'/11,
  'nested--4159-5408--in--un--getNext'/10,
  'nested--4159-5409--in--un--getFirstMatch'/8,
  'nested--4159-5407--in--un--getCols'/8,
  'nested--4159-5406--in--un--countNLs'/7,
  'dn--un--show_Show_StopReason'/1,
  'dn--un--showPrec_Show_StopReason'/2,
  'dn--un--pretty_Pretty_Void_StopReason'/1,
  'dn--un--prettyPrec_Pretty_Void_StopReason'/2,
  'dn--un--__Impl_Show_StopReason'/0,
  'dn--un--__Impl_Pretty_Void_StopReason'/0,
  'un--tokenise'/6,
  'un--match'/2,
  'un--lexTo'/3,
  'un--lex'/2,
  'un--compose'/6,
  'un--<|>'/2
]).
'case--tokenise,getFirstMatch-6254'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Prelude.Types.Right', V10} -> {'Prelude.Types.Right', V10}; {'Prelude.Types.Left', V11} -> case V11 of {'Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', V12, V13} -> {'Prelude.Types.Left', V11}; _ -> ('nested--4159-5409--in--un--getFirstMatch'(V0, V1, V2, V3, V4, V5, (V6()), V8)) end end.
'case--case block in case block in case block in tokenise,getFirstMatch-6017'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Prelude.Types.Just', V27} -> case V27 of {'Builtin.MkPair', V28, V29} -> case V29 of {'Builtin.MkPair', V30, V31} -> case V31 of {'Builtin.MkPair', V32, V33} -> begin (V34 = {'Libraries.Text.Bounded.MkBounded', (V6(V28)), 0, {'Libraries.Text.Bounded.MkBounds', V22, V23, V30, V32}}), {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V34 | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V20)), [V19 | []])))), {'Builtin.MkPair', V30, {'Builtin.MkPair', V32, V33}}}} end; _ -> {'Prelude.Types.Left', {'Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', {'Builtin.MkPair', V3, V2}, {'Builtin.MkPair', V14, V15}}} end; _ -> {'Prelude.Types.Left', {'Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', {'Builtin.MkPair', V3, V2}, {'Builtin.MkPair', V14, V15}}} end; _ -> {'Prelude.Types.Left', {'Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', {'Builtin.MkPair', V3, V2}, {'Builtin.MkPair', V14, V15}}} end; _ -> {'Prelude.Types.Left', {'Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', {'Builtin.MkPair', V3, V2}, {'Builtin.MkPair', V14, V15}}} end.
'case--tokenise,getFirstMatch-5737'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Prelude.Types.Just', V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> case V18 of {'Builtin.MkPair', V19, V20} -> begin (V21 = (V9(V15))), begin (V22 = ((V8())(V21))), begin (V23 = (V7(V21))), begin (V24 = {'Libraries.Text.Bounded.MkBounded', (V10(V15)), 0, {'Libraries.Text.Bounded.MkBounds', V3, V2, V17, V19}}), case ('un--tokenise'(V23, V22, V17, V19, [], V20)) of {'Builtin.MkPair', V25, V26} -> case V26 of {'Builtin.MkPair', V27, V28} -> case V28 of {'Builtin.MkPair', V29, V30} -> case V30 of {'Builtin.MkPair', V31, V32} -> case V27 of {'Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', V33, V34} -> {'Prelude.Types.Left', V27}; _ -> ('case--case block in case block in case block in tokenise,getFirstMatch-6017'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V15, V17, V19, V20, V22, V23, V24, V25, V27, V29, V31, V32, V21, ('nested--4159-5408--in--un--getNext'(V0, V1, V2, V3, V4, V5, V23, V29, V31, V32)))) end end end end end end end end end end end end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Left', {'Libraries.Text.Lexer.Tokenizer.NoRuleApply'}} end.
'case--tokenise,getFirstMatch-5637'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Prelude.Types.Just', V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> case V12 of {'Builtin.MkPair', V13, V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> begin (V17 = {'Libraries.Text.Bounded.MkBounded', (V6(V11)), 0, {'Libraries.Text.Bounded.MkBounds', V3, V2, V13, V15}}), {'Prelude.Types.Right', {'Builtin.MkPair', [V17 | []], {'Builtin.MkPair', V13, {'Builtin.MkPair', V15, V16}}}} end; _ -> {'Prelude.Types.Left', {'Libraries.Text.Lexer.Tokenizer.NoRuleApply'}} end; _ -> {'Prelude.Types.Left', {'Libraries.Text.Lexer.Tokenizer.NoRuleApply'}} end; _ -> {'Prelude.Types.Left', {'Libraries.Text.Lexer.Tokenizer.NoRuleApply'}} end; _ -> {'Prelude.Types.Left', {'Libraries.Text.Lexer.Tokenizer.NoRuleApply'}} end.
'case--tokenise,getNext-5534'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Prelude.Types.Just', V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> begin (V16 = begin (V15 = (V8 + begin (V14 = ('nested--4159-5406--in--un--countNLs'(V0, V1, V2, V3, V4, V5, V12))), case ((V14 band 9223372036854775808) =/= 0) of 'true' -> (V14 bor -9223372036854775808); _ -> (V14 band 9223372036854775807) end end)), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end), begin (V17 = ('nested--4159-5407--in--un--getCols'(V0, V1, V2, V3, V4, V5, V12, V7))), begin (V18 = ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V12))))), {'Prelude.Types.Just', {'Builtin.MkPair', V18, {'Builtin.MkPair', V16, {'Builtin.MkPair', V17, V13}}}} end end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'nested--4159-5408--in--un--getNext'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('case--tokenise,getNext-5534'(V0, V1, V2, V3, V4, V5, V9, V8, V7, V6, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--scan'(V6, [], V9)))).
'nested--4159-5409--in--un--getFirstMatch'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Libraries.Text.Lexer.Tokenizer.Match', V8, V9} -> ('case--tokenise,getFirstMatch-5637'(V0, V1, V2, V3, V4, V5, V9, V8, V7, ('nested--4159-5408--in--un--getNext'(V0, V1, V2, V3, V4, V5, V8, V3, V2, V7)))); {'Libraries.Text.Lexer.Tokenizer.Compose', V10, V11, V12, V13, V14, V15} -> ('case--tokenise,getFirstMatch-5737'(V0, V1, V2, V3, V4, V5, V15, V14, V13, V12, V11, V10, V7, ('nested--4159-5408--in--un--getNext'(V0, V1, V2, V3, V4, V5, V10, V3, V2, V7)))); {'Libraries.Text.Lexer.Tokenizer.Alt', V16, V17} -> ('case--tokenise,getFirstMatch-6254'(V0, V1, V2, V3, V4, V5, V17, V16, V7, ('nested--4159-5409--in--un--getFirstMatch'(V0, V1, V2, V3, V4, V5, V16, V7)))) end.
'nested--4159-5407--in--un--getCols'(V0, V1, V2, V3, V4, V5, V6, V7) -> case ('Idris.Idris2.Data.List':'un--span'(fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V8, $\x{a})) end, V6)) of {'Builtin.MkPair', V9, V10} -> case V10 of [] -> begin (V12 = (V7 + begin (V11 = ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V9))), case ((V11 band 9223372036854775808) =/= 0) of 'true' -> (V11 bor -9223372036854775808); _ -> (V11 band 9223372036854775807) end end)), case ((V12 band 9223372036854775808) =/= 0) of 'true' -> (V12 bor -9223372036854775808); _ -> (V12 band 9223372036854775807) end end; _ -> begin (V13 = ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V9))), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end end end.
'nested--4159-5406--in--un--countNLs'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V7, $\x{a})) end, V6)))).
'dn--un--show_Show_StopReason'(V0) -> case V0 of {'Libraries.Text.Lexer.Tokenizer.EndInput'} -> <<"EndInput"/utf8>>; {'Libraries.Text.Lexer.Tokenizer.NoRuleApply'} -> <<"NoRuleApply"/utf8>>; {'Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', V1, V2} -> <<<<"ComposeNotClosing "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V4, V5)) end end}, {'Prelude.Show.MkShow', fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V7, V8)) end end}}, V1))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V10, V11)) end end}, {'Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V13, V14)) end end}}, V2))/binary>>/binary>>/binary>> end.
'dn--un--showPrec_Show_StopReason'(V0, V1) -> ('dn--un--show_Show_StopReason'(V1)).
'dn--un--pretty_Pretty_Void_StopReason'(V0) -> case V0 of {'Libraries.Text.Lexer.Tokenizer.EndInput'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V2 = fun (V1) -> V1 end), fun (V3) -> (V2(V3)) end end(<<"EndInput"/utf8>>)))); {'Libraries.Text.Lexer.Tokenizer.NoRuleApply'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V5 = fun (V4) -> V4 end), fun (V6) -> (V5(V6)) end end(<<"NoRuleApply"/utf8>>)))); {'Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', V7, V8} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'((begin (V10 = fun (V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V9)) end), fun (V11) -> (V10(V11)) end end(<<"ComposeNotClosing"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V13, V14)) end end}, {'Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V16, V17)) end end}}, V7)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V19, V20)) end end}, {'Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V22, V23)) end end}}, V8)))))))) end.
'dn--un--prettyPrec_Pretty_Void_StopReason'(V0, V1) -> ('dn--un--pretty_Pretty_Void_StopReason'(V1)).
'dn--un--__Impl_Show_StopReason'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_StopReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_StopReason'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_StopReason'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_StopReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_StopReason'(V1, V2)) end end}.
'un--tokenise'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V4)), {'Builtin.MkPair', {'Libraries.Text.Lexer.Tokenizer.EndInput'}, {'Builtin.MkPair', V2, {'Builtin.MkPair', V3, []}}}}; _ -> case ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--scan'(V0, [], V5)) of {'Prelude.Types.Just', V6} -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V4)), {'Builtin.MkPair', {'Libraries.Text.Lexer.Tokenizer.EndInput'}, {'Builtin.MkPair', V2, {'Builtin.MkPair', V3, V5}}}}; {'Prelude.Types.Nothing'} -> case ('nested--4159-5409--in--un--getFirstMatch'(V5, V4, V3, V2, V1, V0, V1, V5)) of {'Prelude.Types.Right', V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> ('un--tokenise'(V0, V1, V10, V12, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, V4)), V13)) end end end; {'Prelude.Types.Left', V14} -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V4)), {'Builtin.MkPair', V14, {'Builtin.MkPair', V2, {'Builtin.MkPair', V3, V5}}}} end end end.
'un--match'(V0, V1) -> {'Libraries.Text.Lexer.Tokenizer.Match', V0, V1}.
'un--lexTo'(V0, V1, V2) -> case ('un--tokenise'(V0, V1, 0, 0, [], ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V2)))) of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Builtin.MkPair', V3, {'Builtin.MkPair', V5, {'Builtin.MkPair', V7, {'Builtin.MkPair', V9, ('Idris.Idris2.Prelude.Types':'un--fastPack'(V10))}}}} end end end end.
'un--lex'(V0, V1) -> ('un--lexTo'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V2) -> 0 end)), V0, V1)).
'un--compose'(V0, V1, V2, V3, V4, V5) -> {'Libraries.Text.Lexer.Tokenizer.Compose', V0, V1, V2, V3, V4, V5}.
'un--<|>'(V0, V1) -> {'Libraries.Text.Lexer.Tokenizer.Alt', V0, V1}.
