-module('Idris.Idris2.TTImp.Elab.Dot').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--checkDot-11774'/16,
  'un--registerDot'/11,
  'un--checkDot'/15
]).
'case--checkDot-11774'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'TTImp.Elab.Check.InLHS', V16} -> begin (V23 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V14, V13, V12, V11, V10, V9, V8, case V7 of {'TTImp.Elab.Check.MkElabInfo', V17, V18, V19, V20, V21, V22} -> {'TTImp.Elab.Check.MkElabInfo', {'TTImp.Elab.Check.InExpr'}, V18, V19, V20, V21, V22} end, V6, V5, V2, {'Prelude.Types.Just', V1}))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V30 = case V27 of {'Builtin.MkPair', V28, V29} -> ('un--registerDot'(V0, V14, V13, V12, V11, V8, V5, V4, V3, V28, V1)) end), V30 end(V24)) end end end end; _ -> fun (V31) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V4, <<<<"Dot pattern not valid here (Not LHS) "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V32)) end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V33, V34)) end end}, V2))/binary>>}, V31)) end end.
'un--registerDot'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"dotTm"/utf8>>))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V36 = begin (V16 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V10))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V35 = begin (V21 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V7, V5, V6, V15, V20))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V34 = begin (V26 = ('Idris.Idris2.Core.UnifyState':'un--addDot'(V0, V1, V3, V7, V6, V15, V9, V8, V25))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V33 = begin (V31 = case V8 of 4 -> {'Core.TT.Erased', V7, {'Core.TT.Dotted', V25}}; _ -> V25 end), fun (V32) -> {'Prelude.Types.Right', {'Builtin.MkPair', V31, V10}} end end), V33 end(V27)) end end end end), V34 end(V22)) end end end end), V35 end(V17)) end end end end), V36 end(V12)) end end end end.
'un--checkDot'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Prelude.Types.Nothing'} -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V11, <<<<"Dot pattern not valid here (unknown type) "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V17, V18)) end end}, V13))/binary>>}, V15)) end; {'Prelude.Types.Just', V19} -> ('case--checkDot-11774'(V0, V19, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V8 of {'TTImp.Elab.Check.MkElabInfo', V20, V21, V22, V23, V24, V25} -> V20 end)) end.
