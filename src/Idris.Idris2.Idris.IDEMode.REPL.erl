-module('Idris.Idris2.Idris.IDEMode.REPL').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in loop-10542'/14,
  'case--case block in case block in loop-10459'/13,
  'nested--19230-10296--in--un--updateOutput'/6,
  'nested--18284-9930--in--un--sexpOriginDesc'/9,
  'nested--18284-9931--in--un--constructFileContext'/9,
  'dn--un--cast_Cast_REPLOpt_REPLOption'/1,
  'dn--un--cast_Cast_REPLEval_String'/1,
  'un--todoCmd'/3,
  'un--socketToFile'/2,
  'un--returnFromIDE'/4,
  'un--replWrap'/1,
  'un--replIDE'/5,
  'un--processCatch'/6,
  'un--process'/6,
  'un--printIDEResultWithHighlight'/4,
  'un--printIDEResult'/4,
  'un--printIDEError'/5,
  'un--loop'/5,
  'un--initIDESocketFile'/3,
  'un--idePutStrLn'/4,
  'un--handleIDEResult'/8,
  'un--getNChars'/2,
  'un--getInput'/2,
  'un--getFLine'/2,
  'un--getChar'/2,
  'un--displayIDEResult'/8
]).
'case--case block in case block in case block in loop-10542'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Prelude.Types.Just', V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> begin (V17 = ('nested--19230-10296--in--un--updateOutput'(V0, V1, V2, V3, V4, V16))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V34 = begin (V22 = ('un--processCatch'(V4, V3, V2, V1, V0, V15))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V33 = begin (V27 = ('un--handleIDEResult'(V4, V3, V2, V1, V0, V5, V16, V26))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V32 = ('un--loop'(V4, V3, V2, V1, V0))), V32 end(V28)) end end end end), V33 end(V23)) end end end end), V34 end(V18)) end end end end end; {'Prelude.Types.Nothing'} -> begin (V38 = ('un--printIDEError'(V0, V4, V5, V7, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Unrecognised command:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V35) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V36, V37)) end end}, ('Idris.Idris2.Protocol.SExp':'dn--un--show_Show_SExp'(V12))))))))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V43 = ('un--loop'(V4, V3, V2, V1, V0))), V43 end(V39)) end end end end end.
'case--case block in case block in loop-10459'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Prelude.Types.Left', V13} -> begin (V20 = begin (V14 = ('Idris.Idris2.Idris.Error':'un--perror'(V4, V2, V0, V13))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V19 = ('un--printIDEError'(V0, V4, V5, V7, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Parse error:"/utf8>>)), V18))))), V19 end(V15)) end end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V25 = ('un--loop'(V4, V3, V2, V1, V0))), V25 end(V21)) end end end end; {'Prelude.Types.Right', V26} -> ('case--case block in case block in case block in loop-10542'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V26, ('Idris.Idris2.Idris.IDEMode.Commands':'un--getMsg'(V26)))) end.
'nested--19230-10296--in--un--updateOutput'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.REPL.Opts':'un--getOutput'(V0))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V15 = case V10 of {'Idris.REPL.Opts.IDEMode', V11, V12, V13} -> ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V0, {'Idris.REPL.Opts.IDEMode', V5, V12, V13})); _ -> fun (V14) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V15 end(V7)) end end end end.
'nested--18284-9930--in--un--sexpOriginDesc'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.FC.PhysicalIdrSrc', V9} -> begin (V15 = begin (V10 = V7), fun (V11) -> begin (V14 = (begin (V12 = V10), fun (V13) -> ('erlang':'get'(V12)) end end(V11))), {'Prelude.Types.Right', V14} end end end), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V211 = begin (V72 = case V19 of {'Core.Context.MkDefs', V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51} -> case V24 of {'Core.Options.MkOptions', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61} -> case V52 of {'Core.Options.MkDirs', V62, V63, V64, V65, V66, V67, V68, V69, V70, V71} -> V62 end end end), begin (V178 = ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V73) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V73, <<"."/utf8>>)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V19 of {'Core.Context.MkDefs', V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105} -> case V78 of {'Core.Options.MkOptions', V106, V107, V108, V109, V110, V111, V112, V113, V114, V115} -> case V106 of {'Core.Options.MkDirs', V116, V117, V118, V119, V120, V121, V122, V123, V124, V125} -> V122 end end end, case V19 of {'Core.Context.MkDefs', V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157} -> case V130 of {'Core.Options.MkOptions', V158, V159, V160, V161, V162, V163, V164, V165, V166, V167} -> case V158 of {'Core.Options.MkDirs', V168, V169, V170, V171, V172, V173, V174, V175, V176, V177} -> V175 end end end))))), begin (V179 = ('Idris.Idris2.Core.Directory':'un--listOfExtensionsStr'())), begin (V203 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V180 = ('Idris.Idris2.Core.Directory':'un--nsToSource'(V7, ('Idris.Idris2.Core.FC':'un--replFC'()), V9))), ((begin (V196 = fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V193, V194, V195)) end end end end end), fun (V197) -> fun (V198) -> ((((V196('erased'))('erased'))(V197))(V198)) end end end((begin (V188 = fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> case V185 of {'Prelude.Types.Left', V186} -> {'Prelude.Types.Left', V186}; {'Prelude.Types.Right', V187} -> {'Prelude.Types.Right', (V184(V187))} end end end end end), fun (V189) -> fun (V190) -> ((((V188('erased'))('erased'))(V189))(V190)) end end end(fun (V181) -> {'Prelude.Types.Just', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V72, V181))} end))))(V180)) end, fun (V199) -> ('Idris.Idris2.Core.Directory':'un--firstAvailable'(V7, ('Idris.Idris2.Prelude.Types':'un--listBind'(V178, fun (V200) -> begin (V201 = case ('Idris.Idris2.Libraries.Utils.Path':'un--isRelative'(V200)) of 1 -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V72, V200)); 0 -> V200 end), ('Idris.Idris2.Prelude.Types':'un--listBind'(V179, fun (V202) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V201, ('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V9)))), V202)))) end)) end end)))) end))), fun (V204) -> begin (V205 = (V203(V204))), case V205 of {'Prelude.Types.Left', V206} -> {'Prelude.Types.Left', V206}; {'Prelude.Types.Right', V207} -> (begin (V210 = fun (V208) -> case V207 of {'Prelude.Types.Just', V209} -> {'Prelude.Types.Right', V209}; _ -> {'Prelude.Types.Right', <<"(File-Not-Found)"/utf8>>} end end), V210 end(V204)) end end end end end end end), V211 end(V16)) end end end end; {'Core.FC.PhysicalPkgSrc', V212} -> fun (V213) -> {'Prelude.Types.Right', V212} end; {'Core.FC.Virtual', V214} -> fun (V215) -> {'Prelude.Types.Right', <<"(Interactive)"/utf8>>} end end.
'nested--18284-9931--in--un--constructFileContext'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> case V12 of {'Builtin.MkPair', V13, V14} -> case V13 of {'Builtin.MkPair', V15, V16} -> case V14 of {'Builtin.MkPair', V17, V18} -> begin (V22 = ('Idris.Idris2.Idris.Pretty':'un--render'(V3, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V19)) end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--prettyPrec_Pretty_Void_Name'(V20, V21)) end end}, V9))))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V34 = begin (V27 = ('nested--18284-9930--in--un--sexpOriginDesc'(V0, V1, V2, V3, V4, V5, V6, V7, V11))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = fun (V32) -> {'Prelude.Types.Right', {'Builtin.MkPair', V26, {'Protocol.IDE.FileContext.MkFileContext', V31, {'Libraries.Text.Bounded.MkBounds', V15, V16, V17, V18}}}} end), V33 end(V28)) end end end end), V34 end(V23)) end end end end end end end end end.
'dn--un--cast_Cast_REPLOpt_REPLOption'(V0) -> case V0 of {'Idris.Syntax.ShowImplicits', V1} -> {'Protocol.IDE.Result.MkOption', <<"show-implicits"/utf8>>, 0, V1}; {'Idris.Syntax.ShowNamespace', V2} -> {'Protocol.IDE.Result.MkOption', <<"show-namespace"/utf8>>, 0, V2}; {'Idris.Syntax.ShowMachineNames', V3} -> {'Protocol.IDE.Result.MkOption', <<"show-machinenames"/utf8>>, 0, V3}; {'Idris.Syntax.ShowTypes', V4} -> {'Protocol.IDE.Result.MkOption', <<"show-types"/utf8>>, 0, V4}; {'Idris.Syntax.EvalMode', V5} -> {'Protocol.IDE.Result.MkOption', <<"eval"/utf8>>, 2, ('dn--un--cast_Cast_REPLEval_String'(V5))}; {'Idris.Syntax.Editor', V6} -> {'Protocol.IDE.Result.MkOption', <<"editor"/utf8>>, 1, V6}; {'Idris.Syntax.CG', V7} -> {'Protocol.IDE.Result.MkOption', <<"cg"/utf8>>, 1, V7}; {'Idris.Syntax.Profile', V8} -> {'Protocol.IDE.Result.MkOption', <<"profile"/utf8>>, 0, V8}; {'Idris.Syntax.EvalTiming', V9} -> {'Protocol.IDE.Result.MkOption', <<"evaltiming"/utf8>>, 0, V9} end.
'dn--un--cast_Cast_REPLEval_String'(V0) -> case V0 of 0 -> <<"typecheck"/utf8>>; 1 -> <<"normalise"/utf8>>; 2 -> <<"execute"/utf8>>; 3 -> <<"scheme"/utf8>> end.
'un--todoCmd'(V0, V1, V2) -> ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V0, V1, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<V2/binary, <<": command not yet implemented. Hopefully soon!"/utf8>>/binary>>)))).
'un--socketToFile'(V0, V1) -> case V0 of {'Network.Socket.Data.MkSocket', V2, V3, V4, V5} -> {'Prelude.Types.Left', <<"Failed to fdopen socket file descriptor"/utf8>>} end.
'un--returnFromIDE'(V0, V1, V2, V3) -> ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V0, V1, {'Protocol.IDE.Immediate', V3, V2})).
'un--replWrap'(V0) -> begin (V1 = V0), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V7 = fun (V6) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.REPL', V5}} end), V7 end(V2)) end end end end.
'un--replIDE'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Idris.REPL.Opts':'un--getOutput'(V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V23 = case V9 of {'Idris.REPL.Opts.REPL', V10} -> ('Idris.Idris2.Idris.REPL.Common':'un--printError'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'((begin (V12 = fun (V11) -> V11 end), fun (V13) -> (V12(V13)) end end(<<"Running idemode but output isn\x{27}t"/utf8>>)))))); {'Idris.REPL.Opts.IDEMode', V14, V15, V16} -> begin (V17 = ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V0, V16, {'Protocol.IDE.ProtocolVersion', 2, 1}))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V22 = ('un--loop'(V0, V1, V2, V3, V4))), V22 end(V18)) end end end end end), V23 end(V6)) end end end end.
'un--processCatch'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--branch'(V0))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V109 = begin (V16 = begin (V11 = V1), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V108 = begin (V26 = begin (V21 = V2), fun (V22) -> begin (V25 = (begin (V23 = V21), fun (V24) -> ('erlang':'get'(V23)) end end(V22))), {'Prelude.Types.Right', V25} end end end), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V107 = begin (V36 = begin (V31 = V4), fun (V32) -> begin (V35 = (begin (V33 = V31), fun (V34) -> ('erlang':'get'(V33)) end end(V32))), {'Prelude.Types.Right', V35} end end end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V106 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V41 = ('un--process'(V0, V1, V2, V3, V4, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V53 = begin (V46 = ('Idris.Idris2.Core.Context':'un--commit'(V0))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V52 = fun (V51) -> {'Prelude.Types.Right', V45} end), V52 end(V47)) end end end end), V53 end(V42)) end end end end, fun (V54) -> begin (V60 = begin (V55 = V0), fun (V56) -> begin (V59 = (begin (V57 = V55), fun (V58) -> ('erlang':'put'(V57, V10)) end end(V56))), {'Prelude.Types.Right', V59} end end end), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V105 = begin (V70 = begin (V65 = V1), fun (V66) -> begin (V69 = (begin (V67 = V65), fun (V68) -> ('erlang':'put'(V67, V20)) end end(V66))), {'Prelude.Types.Right', V69} end end end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V104 = begin (V80 = begin (V75 = V2), fun (V76) -> begin (V79 = (begin (V77 = V75), fun (V78) -> ('erlang':'put'(V77, V30)) end end(V76))), {'Prelude.Types.Right', V79} end end end), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V103 = begin (V90 = begin (V85 = V4), fun (V86) -> begin (V89 = (begin (V87 = V85), fun (V88) -> ('erlang':'put'(V87, V40)) end end(V86))), {'Prelude.Types.Right', V89} end end end), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V102 = begin (V95 = ('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V4, V54))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V101 = fun (V100) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.REPL', {'Idris.REPL.Common.REPLError', V99}}} end), V101 end(V96)) end end end end), V102 end(V91)) end end end end), V103 end(V81)) end end end end), V104 end(V71)) end end end end), V105 end(V61)) end end end end end))), V106 end(V37)) end end end end), V107 end(V27)) end end end end), V108 end(V17)) end end end end), V109 end(V7)) end end end end.
'un--process'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Protocol.IDE.Command.Interpret', V6} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--interpret'(V0, V1, V2, V3, V4, V6)))); {'Protocol.IDE.Command.LoadFile', V7, V8} -> begin (V9 = ('Idris.Idris2.Idris.Package':'un--findIpkg'(V0, V4, V2, {'Prelude.Types.Just', V7}))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V22 = begin (V15 = case V13 of {'Prelude.Types.Nothing'} -> V7; {'Prelude.Types.Just', V14} -> V14 end), ('un--replWrap'(begin (V16 = ('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Load', V15}))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V21 = ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--outputSyntaxHighlighting'(V0, V3, V2, V4, V15, V20))), V21 end(V17)) end end end end)) end), V22 end(V10)) end end end end; {'Protocol.IDE.Command.NameAt', V23, V24} -> case V24 of {'Prelude.Types.Nothing'} -> begin (V30 = begin (V25 = V0), fun (V26) -> begin (V29 = (begin (V27 = V25), fun (V28) -> ('erlang':'get'(V27)) end end(V26))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V109 = begin (V67 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'({'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V23))}, case V34 of {'Core.Context.MkDefs', V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} -> V35 end))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V108 = begin (V106 = ((begin (V103 = fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V101, V102)) end end end end), fun (V104) -> fun (V105) -> ((((V103('erased'))('erased'))(V104))(V105)) end end end(fun (V72) -> case V72 of {'Builtin.MkPair', V73, V74} -> case V74 of {'Builtin.MkPair', V75, V76} -> {'Builtin.MkPair', V73, case V76 of {'Core.Context.Context.MkGlobalDef', V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98} -> V77 end} end end end))(V71))), fun (V107) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.NameLocList', V106}} end end), V108 end(V68)) end end end end), V109 end(V31)) end end end end; {'Prelude.Types.Just', V110} -> begin (V111 = ('un--todoCmd'(V0, V4, <<"name-at <name> <line> <column>"/utf8>>))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V117 = fun (V116) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.REPL', {'Idris.REPL.Common.Edited', {'Idris.REPL.Common.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}}} end), V117 end(V112)) end end end end end; {'Protocol.IDE.Command.TypeOf', V118, V119} -> case V119 of {'Prelude.Types.Nothing'} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Check', {'Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--replFC'()), {'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V118))}}})))); {'Prelude.Types.Just', V120} -> case V120 of {'Builtin.MkPair', V121, V122} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.TypeAt', begin (V123 = V121), case ((V123 band 9223372036854775808) =/= 0) of 'true' -> (V123 bor -9223372036854775808); _ -> (V123 band 9223372036854775807) end end, begin (V124 = V122), case ((V124 band 9223372036854775808) =/= 0) of 'true' -> (V124 bor -9223372036854775808); _ -> (V124 band 9223372036854775807) end end, {'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V118))}}})))) end end; {'Protocol.IDE.Command.CaseSplit', V125, V126, V127} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.CaseSplit', 0, begin (V128 = V125), case ((V128 band 9223372036854775808) =/= 0) of 'true' -> (V128 bor -9223372036854775808); _ -> (V128 band 9223372036854775807) end end, begin (V129 = V126), case ((V129 band 9223372036854775808) =/= 0) of 'true' -> (V129 bor -9223372036854775808); _ -> (V129 band 9223372036854775807) end end, {'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V127))}}})))); {'Protocol.IDE.Command.AddClause', V130, V131} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.AddClause', 0, begin (V132 = V130), case ((V132 band 9223372036854775808) =/= 0) of 'true' -> (V132 bor -9223372036854775808); _ -> (V132 band 9223372036854775807) end end, {'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V131))}}})))); {'Protocol.IDE.Command.AddMissing', V133, V134} -> begin (V135 = ('un--todoCmd'(V0, V4, <<"add-missing"/utf8>>))), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V141 = fun (V140) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.REPL', {'Idris.REPL.Common.Edited', {'Idris.REPL.Common.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}}} end), V141 end(V136)) end end end end; {'Protocol.IDE.Command.Intro', V142, V143} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.Intro', 0, begin (V144 = V142), case ((V144 band 9223372036854775808) =/= 0) of 'true' -> (V144 bor -9223372036854775808); _ -> (V144 band 9223372036854775807) end end, {'Core.Name.UN', {'Core.Name.Basic', V143}}}})))); {'Protocol.IDE.Command.Refine', V145, V146, V147} -> case ('Idris.Idris2.Parser.Source':'un--runParser'(1, {'Core.FC.Virtual', {'Core.FC.Interactive'}}, {'Prelude.Types.Nothing'}, V147, ('Idris.Idris2.Idris.Parser':'un--aPTerm'()))) of {'Prelude.Types.Right', V148} -> case V148 of {'Builtin.MkPair', V149, V150} -> case V150 of {'Builtin.MkPair', V151, V152} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.Refine', 0, begin (V153 = V145), case ((V153 band 9223372036854775808) =/= 0) of 'true' -> (V153 bor -9223372036854775808); _ -> (V153 band 9223372036854775807) end end, {'Core.Name.UN', {'Core.Name.Basic', V146}}, V152}})))) end end; {'Prelude.Types.Left', V154} -> fun (V155) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.REPL', {'Idris.REPL.Common.REPLError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V156) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V156)) end, fun (V157) -> fun (V158) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V157, V158)) end end}, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V154))))}}} end end; {'Protocol.IDE.Command.ExprSearch', V159, V160, V161, V162} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.ExprSearch', 0, begin (V163 = V159), case ((V163 band 9223372036854775808) =/= 0) of 'true' -> (V163 bor -9223372036854775808); _ -> (V163 band 9223372036854775807) end end, {'Core.Name.UN', {'Core.Name.Basic', V160}}, ((begin (V170 = fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V168, V169)) end end end end), fun (V171) -> fun (V172) -> ((((V170('erased'))('erased'))(V171))(V172)) end end end(fun (V165) -> {'Core.Name.UN', {'Core.Name.Basic', V165}} end))(begin (V164 = V161), V164 end))}})))); {'Protocol.IDE.Command.ExprSearchNext'} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.ExprSearchNext'}})))); {'Protocol.IDE.Command.GenerateDef', V173, V174} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.GenerateDef', 0, begin (V175 = V173), case ((V175 band 9223372036854775808) =/= 0) of 'true' -> (V175 bor -9223372036854775808); _ -> (V175 band 9223372036854775807) end end, {'Core.Name.UN', {'Core.Name.Basic', V174}}, 0}})))); {'Protocol.IDE.Command.GenerateDefNext'} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.GenerateDefNext'}})))); {'Protocol.IDE.Command.MakeLemma', V176, V177} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.MakeLemma', 0, begin (V178 = V176), case ((V178 band 9223372036854775808) =/= 0) of 'true' -> (V178 bor -9223372036854775808); _ -> (V178 band 9223372036854775807) end end, {'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V177))}}})))); {'Protocol.IDE.Command.MakeCase', V179, V180} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.MakeCase', 0, begin (V181 = V179), case ((V181 band 9223372036854775808) =/= 0) of 'true' -> (V181 bor -9223372036854775808); _ -> (V181 band 9223372036854775807) end end, {'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V180))}}})))); {'Protocol.IDE.Command.MakeWith', V182, V183} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Editing', {'Idris.Syntax.MakeWith', 0, begin (V184 = V182), case ((V184 band 9223372036854775808) =/= 0) of 'true' -> (V184 bor -9223372036854775808); _ -> (V184 band 9223372036854775807) end end, {'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V183))}}})))); {'Protocol.IDE.Command.DocsFor', V185, V186} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Doc', {'Idris.Syntax.APTerm', {'Idris.Syntax.PRef', {'Core.FC.EmptyFC'}, {'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V185))}}}})))); {'Protocol.IDE.Command.Apropos', V187} -> begin (V188 = ('un--todoCmd'(V0, V4, <<"apropros"/utf8>>))), fun (V189) -> begin (V190 = (V188(V189))), case V190 of {'Prelude.Types.Left', V191} -> {'Prelude.Types.Left', V191}; {'Prelude.Types.Right', V192} -> (begin (V194 = fun (V193) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.REPL', {'Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}} end), V194 end(V189)) end end end end; {'Protocol.IDE.Command.Directive', V195} -> begin (V196 = ('un--todoCmd'(V0, V4, <<"directive"/utf8>>))), fun (V197) -> begin (V198 = (V196(V197))), case V198 of {'Prelude.Types.Left', V199} -> {'Prelude.Types.Left', V199}; {'Prelude.Types.Right', V200} -> (begin (V202 = fun (V201) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.REPL', {'Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}} end), V202 end(V197)) end end end end; {'Protocol.IDE.Command.WhoCalls', V203} -> begin (V204 = ('un--todoCmd'(V0, V4, <<"who-calls"/utf8>>))), fun (V205) -> begin (V206 = (V204(V205))), case V206 of {'Prelude.Types.Left', V207} -> {'Prelude.Types.Left', V207}; {'Prelude.Types.Right', V208} -> (begin (V210 = fun (V209) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.NameList', []}} end), V210 end(V205)) end end end end; {'Protocol.IDE.Command.CallsWho', V211} -> begin (V212 = ('un--todoCmd'(V0, V4, <<"calls-who"/utf8>>))), fun (V213) -> begin (V214 = (V212(V213))), case V214 of {'Prelude.Types.Left', V215} -> {'Prelude.Types.Left', V215}; {'Prelude.Types.Right', V216} -> (begin (V218 = fun (V217) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.NameList', []}} end), V218 end(V213)) end end end end; {'Protocol.IDE.Command.BrowseNamespace', V219} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.Browse', ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V219))})))); {'Protocol.IDE.Command.NormaliseTerm', V220} -> begin (V221 = ('un--todoCmd'(V0, V4, <<"normalise-term"/utf8>>))), fun (V222) -> begin (V223 = (V221(V222))), case V223 of {'Prelude.Types.Left', V224} -> {'Prelude.Types.Left', V224}; {'Prelude.Types.Right', V225} -> (begin (V227 = fun (V226) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.Term', V220}} end), V227 end(V222)) end end end end; {'Protocol.IDE.Command.ShowTermImplicits', V228} -> begin (V229 = ('un--todoCmd'(V0, V4, <<"show-term-implicits"/utf8>>))), fun (V230) -> begin (V231 = (V229(V230))), case V231 of {'Prelude.Types.Left', V232} -> {'Prelude.Types.Left', V232}; {'Prelude.Types.Right', V233} -> (begin (V235 = fun (V234) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.Term', V228}} end), V235 end(V230)) end end end end; {'Protocol.IDE.Command.HideTermImplicits', V236} -> begin (V237 = ('un--todoCmd'(V0, V4, <<"hide-term-implicits"/utf8>>))), fun (V238) -> begin (V239 = (V237(V238))), case V239 of {'Prelude.Types.Left', V240} -> {'Prelude.Types.Left', V240}; {'Prelude.Types.Right', V241} -> (begin (V243 = fun (V242) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.Term', V236}} end), V243 end(V238)) end end end end; {'Protocol.IDE.Command.ElaborateTerm', V244} -> begin (V245 = ('un--todoCmd'(V0, V4, <<"elaborate-term"/utf8>>))), fun (V246) -> begin (V247 = (V245(V246))), case V247 of {'Prelude.Types.Left', V248} -> {'Prelude.Types.Left', V248}; {'Prelude.Types.Right', V249} -> (begin (V251 = fun (V250) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.TTTerm', V244}} end), V251 end(V246)) end end end end; {'Protocol.IDE.Command.PrintDefinition', V252} -> begin (V253 = ('un--todoCmd'(V0, V4, <<"print-definition"/utf8>>))), fun (V254) -> begin (V255 = (V253(V254))), case V255 of {'Prelude.Types.Left', V256} -> {'Prelude.Types.Left', V256}; {'Prelude.Types.Right', V257} -> (begin (V262 = fun (V258) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.REPL', {'Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V259) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V259)) end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V260, V261)) end end}, V252))}}} end), V262 end(V254)) end end end end; {'Protocol.IDE.Command.ReplCompletions', V263} -> begin (V264 = ('Idris.Idris2.TTImp.Interactive.Completion':'un--completion'(V0, V263))), fun (V265) -> begin (V266 = (V264(V265))), case V266 of {'Prelude.Types.Left', V267} -> {'Prelude.Types.Left', V267}; {'Prelude.Types.Right', V268} -> (begin (V279 = fun (V269) -> case V268 of {'Prelude.Types.Just', V270} -> case V270 of {'Builtin.MkPair', V271, V272} -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.CompletionList', V272, V271}} end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.REPL', {'Idris.REPL.Common.REPLError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([(begin (V274 = fun (V273) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V273)) end), fun (V275) -> (V274(V275)) end end(<<"I can\x{27}t make sense of the completion task:"/utf8>>)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V276) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V276)) end, fun (V277) -> fun (V278) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V277, V278)) end end}, V263)) | []]]))}}} end end), V279 end(V265)) end end end end; {'Protocol.IDE.Command.EnableSyntax', V280} -> begin (V281 = ('Idris.Idris2.Idris.REPL.Opts':'un--setSynHighlightOn'(V4, V280))), fun (V282) -> begin (V283 = (V281(V282))), case V283 of {'Prelude.Types.Left', V284} -> {'Prelude.Types.Left', V284}; {'Prelude.Types.Right', V285} -> (begin (V290 = fun (V286) -> {'Prelude.Types.Right', {'Idris.IDEMode.REPL.REPL', {'Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Syntax highlight option changed to"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V287) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V287)) end, fun (V288) -> fun (V289) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Bool'(V288, V289)) end end}, V280))))}}} end), V290 end(V282)) end end end end; {'Protocol.IDE.Command.Version'} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.ShowVersion'})))); {'Protocol.IDE.Command.Metavariables', V291} -> begin (V292 = ('Idris.Idris2.Idris.IDEMode.Holes':'un--getUserHolesData'(V0, V2))), ((begin (V308 = fun (V303) -> fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V305, V306, V307)) end end end end end), fun (V309) -> fun (V310) -> ((((V308('erased'))('erased'))(V309))(V310)) end end end((begin (V300 = fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> case V297 of {'Prelude.Types.Left', V298} -> {'Prelude.Types.Left', V298}; {'Prelude.Types.Right', V299} -> {'Prelude.Types.Right', (V296(V299))} end end end end end), fun (V301) -> fun (V302) -> ((((V300('erased'))('erased'))(V301))(V302)) end end end(fun (V293) -> {'Idris.IDEMode.REPL.FoundHoles', V293} end))))(V292)) end; {'Protocol.IDE.Command.GetOptions'} -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Syntax.GetOpts'})))) end.
'un--printIDEResultWithHighlight'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> ('un--returnFromIDE'(V0, V1, V2, {'Protocol.IDE.OK', V4, V5})) end.
'un--printIDEResult'(V0, V1, V2, V3) -> ('un--returnFromIDE'(V0, V1, V2, {'Protocol.IDE.OK', V3, []})).
'un--printIDEError'(V0, V1, V2, V3, V4) -> begin (V6 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V1, V0, fun (V5) -> ('Idris.Idris2.Idris.IDEMode.Pretty':'un--annToProperties'(V5)) end, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V13 = ('un--returnFromIDE'(V1, V2, V3, ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V11) -> fun (V12) -> {'Protocol.IDE.Error', V11, V12} end end, V10))))), V13 end(V7)) end end end end.
'un--loop'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Idris.REPL.Opts':'un--getOutput'(V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V53 = case V9 of {'Idris.REPL.Opts.REPL', V10} -> ('Idris.Idris2.Idris.REPL.Common':'un--printError'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'((begin (V12 = fun (V11) -> V11 end), fun (V13) -> (V12(V13)) end end(<<"Running idemode but output isn\x{27}t"/utf8>>)))))); {'Idris.REPL.Opts.IDEMode', V14, V15, V16} -> begin (V19 = fun (V17) -> begin (V18 = ('un--getInput'(V15, V17))), {'Prelude.Types.Right', V18} end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V52 = begin (V24 = {'Idris.REPL.Opts.IDEMode', V14, V15, V16}), case V23 of {'Builtin.MkPair', V25, V26} -> begin (V45 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V28 = fun (V27) -> V27 end), fun (V29) -> (V28(V29)) end end(<<"ide-mode.recv"/utf8>>)), 50, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V30) -> fun (V31) -> <<V30/binary, V31/binary>> end end, <<""/utf8>>}, fun (V32) -> V32 end, [(begin (V34 = fun (V33) -> V33 end), fun (V35) -> (V34(V35)) end end(<<"Received: "/utf8>>)) | [(begin (V40 = fun (V39) -> V39 end), fun (V41) -> (V40(V41)) end end(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> (begin (V37 = fun (V36) -> V36 end), fun (V38) -> (V37(V38)) end end(<<""/utf8>>)) end, V25)))) | [(begin (V43 = fun (V42) -> V42 end), fun (V44) -> (V43(V44)) end end(V26)) | []]]])) end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V51 = begin (V50 = {'Builtin.MkPair', V25, V26}), ('case--case block in case block in loop-10459'(V4, V3, V2, V1, V0, V16, V15, V14, V24, V25, V26, V50, ('Idris.Idris2.Idris.IDEMode.Parser':'un--parseSExp'(V26)))) end), V51 end(V46)) end end end end end end), V52 end(V20)) end end end end end), V53 end(V6)) end end end end.
'un--initIDESocketFile'(V0, V1, V2) -> begin (V30 = (('Idris.Idris2.Network.Socket':'un--socket'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, 2, 1, 0))(V2))), case V30 of {'Prelude.Types.Left', V31} -> begin (V32 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V31))/binary, <<"\x{a}"/utf8>>/binary>>, V2))), begin (V36 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<(begin (V34 = fun (V33) -> V33 end), fun (V35) -> (V34(V35)) end end(<<"Failed to open socket"/utf8>>))/binary, <<"\x{a}"/utf8>>/binary>>, V2))), (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> V43 end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), begin (V51 = (V48(V49))), (V50(V51)) end end end end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V54(V56))), ((V55(V57))(V56)) end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V59(V60))), (V61(V60)) end end end end}, fun (V62) -> fun (V63) -> V63 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V2)) end end; {'Prelude.Types.Right', V64} -> begin (V92 = (('Idris.Idris2.Network.Socket':'un--bind'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V67, V68, V69)) end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> V71 end end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), begin (V79 = (V76(V77))), (V78(V79)) end end end end end end end}, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> begin (V85 = (V82(V84))), ((V83(V85))(V84)) end end end end end end, fun (V86) -> fun (V87) -> fun (V88) -> begin (V89 = (V87(V88))), (V89(V88)) end end end end}, fun (V90) -> fun (V91) -> V91 end end}, V64, {'Prelude.Types.Just', {'Network.Socket.Data.Hostname', V0}}, V1))(V2))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V92, begin (V93 = 0), case ((V93 band 9223372036854775808) =/= 0) of 'true' -> (V93 bor -9223372036854775808); _ -> (V93 band 9223372036854775807) end end)) of 1 -> {'Prelude.Types.Left', <<<<"Failed to bind socket with error: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V92))/binary>>}; 0 -> begin (V121 = (('Idris.Idris2.Network.Socket':'un--listen'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V96, V97, V98)) end end end end end, fun (V99) -> fun (V100) -> fun (V101) -> V100 end end end, fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> begin (V107 = (V104(V106))), begin (V108 = (V105(V106))), (V107(V108)) end end end end end end end}, fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> begin (V114 = (V111(V113))), ((V112(V114))(V113)) end end end end end end, fun (V115) -> fun (V116) -> fun (V117) -> begin (V118 = (V116(V117))), (V118(V117)) end end end end}, fun (V119) -> fun (V120) -> V120 end end}, V64))(V2))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V121, begin (V122 = 0), case ((V122 band 9223372036854775808) =/= 0) of 'true' -> (V122 bor -9223372036854775808); _ -> (V122 band 9223372036854775807) end end)) of 1 -> {'Prelude.Types.Left', <<<<"Failed to listen on socket with error: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V121))/binary>>}; 0 -> begin (V150 = (('Idris.Idris2.Network.Socket.Raw':'un--getSockPort'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V125, V126, V127)) end end end end end, fun (V128) -> fun (V129) -> fun (V130) -> V129 end end end, fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> begin (V136 = (V133(V135))), begin (V137 = (V134(V135))), (V136(V137)) end end end end end end end}, fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> begin (V143 = (V140(V142))), ((V141(V143))(V142)) end end end end end end, fun (V144) -> fun (V145) -> fun (V146) -> begin (V147 = (V145(V146))), (V147(V146)) end end end end}, fun (V148) -> fun (V149) -> V149 end end}, V64))(V2))), begin (V151 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V150))/binary, <<"\x{a}"/utf8>>/binary>>, V2))), begin (V179 = (('Idris.Idris2.Erlang.System.File':'un--fflush'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V154, V155, V156)) end end end end end, fun (V157) -> fun (V158) -> fun (V159) -> V158 end end end, fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> begin (V165 = (V162(V164))), begin (V166 = (V163(V164))), (V165(V166)) end end end end end end end}, fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> begin (V172 = (V169(V171))), ((V170(V172))(V171)) end end end end end end, fun (V173) -> fun (V174) -> fun (V175) -> begin (V176 = (V174(V175))), (V176(V175)) end end end end}, fun (V177) -> fun (V178) -> V178 end end}, ('Idris.Idris2.Erlang.System.File':'un--stdout'())))(V2))), begin (V207 = (('Idris.Idris2.Network.Socket':'un--accept'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V182, V183, V184)) end end end end end, fun (V185) -> fun (V186) -> fun (V187) -> V186 end end end, fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> begin (V193 = (V190(V192))), begin (V194 = (V191(V192))), (V193(V194)) end end end end end end end}, fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> begin (V200 = (V197(V199))), ((V198(V200))(V199)) end end end end end end, fun (V201) -> fun (V202) -> fun (V203) -> begin (V204 = (V202(V203))), (V204(V203)) end end end end}, fun (V205) -> fun (V206) -> V206 end end}, V64))(V2))), case V207 of {'Prelude.Types.Left', V208} -> {'Prelude.Types.Left', <<(begin (V210 = fun (V209) -> V209 end), fun (V211) -> (V210(V211)) end end(<<"Failed to accept on socket with error: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V208))/binary>>}; {'Prelude.Types.Right', V212} -> case V212 of {'Builtin.MkPair', V213, V214} -> ('un--socketToFile'(V213, V2)) end end end end end end end end end end end end.
'un--idePutStrLn'(V0, V1, V2, V3) -> ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V0, V1, {'Protocol.IDE.WriteString', V3, V2})).
'un--handleIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.IDEMode.REPL.REPL', V8} -> case V8 of {'Idris.REPL.Common.Exited'} -> ('un--idePutStrLn'(V0, V5, V6, <<"Bye for now!"/utf8>>)); _ -> ('un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7)) end; _ -> ('un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7)) end.
'un--getNChars'(V0, V1) -> case V1 of 0 -> fun (V2) -> [] end; _ -> begin (V3 = (V1 - 1)), fun (V4) -> begin (V5 = ('un--getChar'(V0, V4))), begin (V6 = (('un--getNChars'(V0, V3))(V4))), [V5 | V6] end end end end end.
'un--getInput'(V0, V1) -> begin (V2 = (('un--getNChars'(V0, 6))(V1))), case ('Idris.Idris2.Protocol.Hex':'un--fromHexChars'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2)))) of {'Prelude.Types.Nothing'} -> begin (V3 = ('un--getFLine'(V0, V1))), {'Builtin.MkPair', {'Prelude.Types.Nothing'}, <<('Idris.Idris2.Prelude.Types':'un--fastPack'(V2))/binary, V3/binary>>} end; {'Prelude.Types.Just', V4} -> begin (V5 = (('un--getNChars'(V0, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V4))))(V1))), {'Builtin.MkPair', {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'un--fastPack'(V2))}, ('Idris.Idris2.Prelude.Types':'un--fastPack'(V5))} end end end.
'un--getFLine'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fGetLine'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Prelude.Types.Right', V30} -> V30; {'Prelude.Types.Left', V31} -> begin (V35 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<(begin (V33 = fun (V32) -> V32 end), fun (V34) -> (V33(V34)) end end(<<"Failed to read a line"/utf8>>))/binary, <<"\x{a}"/utf8>>/binary>>, V1))), (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V1)) end end end.
'un--getChar'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fGetChar'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Prelude.Types.Right', V30} -> V30; {'Prelude.Types.Left', V31} -> begin (V35 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<(begin (V33 = fun (V32) -> V32 end), fun (V34) -> (V33(V34)) end end(<<"Failed to read a character"/utf8>>))/binary, <<"\x{a}"/utf8>>/binary>>, V1))), (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V1)) end end end.
'un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.IDEMode.REPL.REPL', V8} -> case V8 of {'Idris.REPL.Common.REPLError', V9} -> ('un--printIDEError'(V4, V0, V5, V6, V9)); {'Idris.REPL.Common.RequestedHelp'} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', ('Idris.Idris2.Idris.REPL':'un--displayHelp'())})); {'Idris.REPL.Common.RequestedDetails', V10} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', V10})); {'Idris.REPL.Common.Evaluated', V11, V12} -> case V12 of {'Prelude.Types.Nothing'} -> begin (V14 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V13) -> ('Idris.Idris2.Idris.IDEMode.Pretty':'un--syntaxToProperties'(V13)) end, ('Idris.Idris2.Idris.Pretty':'dn--un--pretty_Pretty_IdrisSyntax_IPTerm'(V11))))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V21 = ('un--printIDEResultWithHighlight'(V0, V5, V6, case V18 of {'Builtin.MkPair', V19, V20} -> {'Builtin.MkPair', {'Protocol.IDE.Result.AString', V19}, V20} end))), V21 end(V15)) end end end end; {'Prelude.Types.Just', V22} -> begin (V24 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V23) -> ('Idris.Idris2.Idris.IDEMode.Pretty':'un--syntaxToProperties'(V23)) end, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'dn--un--pretty_Pretty_IdrisSyntax_IPTerm'(V11)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<":"/utf8>>)), ('Idris.Idris2.Idris.Pretty':'dn--un--pretty_Pretty_IdrisSyntax_IPTerm'(V22))))))))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V31 = ('un--printIDEResultWithHighlight'(V0, V5, V6, case V28 of {'Builtin.MkPair', V29, V30} -> {'Builtin.MkPair', {'Protocol.IDE.Result.AString', V29}, V30} end))), V31 end(V25)) end end end end end; {'Idris.REPL.Common.Printed', V32} -> begin (V34 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V33) -> ('Idris.Idris2.Idris.IDEMode.Pretty':'un--annToProperties'(V33)) end, V32))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V41 = ('un--printIDEResultWithHighlight'(V0, V5, V6, case V38 of {'Builtin.MkPair', V39, V40} -> {'Builtin.MkPair', {'Protocol.IDE.Result.AString', V39}, V40} end))), V41 end(V35)) end end end end; {'Idris.REPL.Common.PrintedDoc', V42} -> begin (V44 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V43) -> ('Idris.Idris2.Idris.IDEMode.Pretty':'un--docToProperties'(V43)) end, V42))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V51 = ('un--printIDEResultWithHighlight'(V0, V5, V6, case V48 of {'Builtin.MkPair', V49, V50} -> {'Builtin.MkPair', {'Protocol.IDE.Result.AString', V49}, V50} end))), V51 end(V45)) end end end end; {'Idris.REPL.Common.TermChecked', V52, V53} -> begin (V55 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V54) -> ('Idris.Idris2.Idris.IDEMode.Pretty':'un--syntaxToProperties'(V54)) end, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'dn--un--pretty_Pretty_IdrisSyntax_IPTerm'(V52)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<":"/utf8>>)), ('Idris.Idris2.Idris.Pretty':'dn--un--pretty_Pretty_IdrisSyntax_IPTerm'(V53))))))))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V62 = ('un--printIDEResultWithHighlight'(V0, V5, V6, case V59 of {'Builtin.MkPair', V60, V61} -> {'Builtin.MkPair', {'Protocol.IDE.Result.AString', V60}, V61} end))), V62 end(V56)) end end end end; {'Idris.REPL.Common.FileLoaded', V63} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AUnit'})); {'Idris.REPL.Common.ErrorLoadingFile', V64, V65} -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Error loading file"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(((begin (V71 = fun (V69) -> fun (V70) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V69, V70)) end end), fun (V72) -> fun (V73) -> ((V71(V72))(V73)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V66) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V66)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V67, V68)) end end}, V64))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V74) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V75, V76)) end end}, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V65)))))))))); {'Idris.REPL.Common.ErrorsBuildingFile', V77, V78} -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Error(s) building file"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V79) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V80, V81)) end end}, V77)))))); {'Idris.REPL.Common.NoFileLoaded'} -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"No file can be reloaded"/utf8>>)))); {'Idris.REPL.Common.CurrentDirectory', V82} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V83) -> fun (V84) -> <<V83/binary, V84/binary>> end end, <<""/utf8>>}, fun (V85) -> V85 end, [<<"Current working directory is \x{22}"/utf8>> | [V82 | [<<"\x{22}"/utf8>> | []]]]))})); {'Idris.REPL.Common.CompilationFailed'} -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Compilation failed"/utf8>>)))); {'Idris.REPL.Common.Compiled', V86} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V87) -> fun (V88) -> <<V87/binary, V88/binary>> end end, <<""/utf8>>}, fun (V89) -> V89 end, [<<"File "/utf8>> | [V86 | [<<" written"/utf8>> | []]]]))})); {'Idris.REPL.Common.ProofFound', V90} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V90))})); {'Idris.REPL.Common.Missed', V91} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ((begin (V97 = fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V95, V96)) end end end end), fun (V98) -> fun (V99) -> ((((V97('erased'))('erased'))(V98))(V99)) end end end(fun (V92) -> ('Idris.Idris2.Idris.REPL':'un--handleMissing\x{27}'(V92)) end))(V91))))})); {'Idris.REPL.Common.CheckedTotal', V100} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ((begin (V108 = fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V106, V107)) end end end end), fun (V109) -> fun (V110) -> ((((V108('erased'))('erased'))(V109))(V110)) end end end(fun (V101) -> case V101 of {'Builtin.MkPair', V102, V103} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V102))/binary, <<<<" is "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Totality'(V103))/binary>>/binary>> end end))(V100))))})); {'Idris.REPL.Common.LogLevelSet', V111} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', <<<<"Set loglevel to "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V112) -> ('Idris.Idris2.Core.Options.Log':'dn--un--show_Show_LogLevel'(V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Options.Log':'dn--un--showPrec_Show_LogLevel'(V113, V114)) end end}, V111))/binary>>})); {'Idris.REPL.Common.OptionsSet', V115} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AnOptionList', ((begin (V121 = fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V119, V120)) end end end end), fun (V122) -> fun (V123) -> ((((V121('erased'))('erased'))(V122))(V123)) end end end(fun (V116) -> ('dn--un--cast_Cast_REPLOpt_REPLOption'(V116)) end))(V115))})); {'Idris.REPL.Common.VersionIs', V124} -> case V124 of {'Libraries.Data.Version.MkVersion', V125, V126} -> case V125 of {'Builtin.MkPair', V127, V128} -> case V128 of {'Builtin.MkPair', V129, V130} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AVersion', {'Protocol.IDE.Result.MkIdrisVersion', V127, V129, V130, case V124 of {'Libraries.Data.Version.MkVersion', V131, V132} -> V132 end}})) end end end; {'Idris.REPL.Common.Edited', V133} -> case V133 of {'Idris.REPL.Common.DisplayEdit', V134} -> begin (V136 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V135) -> ('Idris.Idris2.Idris.IDEMode.Pretty':'un--annToProperties'(V135)) end, V134))), fun (V137) -> begin (V138 = (V136(V137))), case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> (begin (V143 = ('un--printIDEResultWithHighlight'(V0, V5, V6, case V140 of {'Builtin.MkPair', V141, V142} -> {'Builtin.MkPair', {'Protocol.IDE.Result.AString', V141}, V142} end))), V143 end(V137)) end end end end; {'Idris.REPL.Common.EditError', V144} -> ('un--printIDEError'(V4, V0, V5, V6, V144)); {'Idris.REPL.Common.MadeIntro', V145} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AnIntroList', V145})); {'Idris.REPL.Common.MadeLemma', V146, V147, V148, V149} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AMetaVarLemma', {'Protocol.IDE.Result.MkMetaVarLemma', V149, ('Idris.Idris2.Parser.Unlit':'un--relit'(V146, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V147))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V148))/binary>>/binary>>))}})); {'Idris.REPL.Common.MadeWith', V150, V151} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ((begin (V157 = fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V155, V156)) end end end end), fun (V158) -> fun (V159) -> ((((V157('erased'))('erased'))(V158))(V159)) end end end(fun (V152) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V150, V152)) end))(V151))))})); {'Idris.REPL.Common.MadeCase', V160, V161} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ((begin (V167 = fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V165, V166)) end end end end), fun (V168) -> fun (V169) -> ((((V167('erased'))('erased'))(V168))(V169)) end end end(fun (V162) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V160, V162)) end))(V161))))})) end; {'Idris.REPL.Common.ConsoleWidthSet', V170} -> begin (V175 = case V170 of {'Prelude.Types.Just', V171} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V171)); {'Prelude.Types.Nothing'} -> (begin (V173 = fun (V172) -> V172 end), fun (V174) -> (V173(V174)) end end(<<"auto"/utf8>>)) end), ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', <<<<"Set consolewidth to "/utf8>>/binary, V175/binary>>})) end; {'Idris.REPL.Common.Done'} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', <<""/utf8>>})); {'Idris.REPL.Common.Executed', V176} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', <<""/utf8>>})); {'Idris.REPL.Common.CompiledLibrary', V177} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', <<""/utf8>>})); {'Idris.REPL.Common.ModuleLoaded', V178} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', <<""/utf8>>})); {'Idris.REPL.Common.ErrorLoadingModule', V179, V180} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', <<""/utf8>>})); {'Idris.REPL.Common.ColorSet', V181} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', <<""/utf8>>})); {'Idris.REPL.Common.DefDeclared'} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', <<""/utf8>>})); {'Idris.REPL.Common.Exited'} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', <<""/utf8>>})) end; {'Idris.IDEMode.REPL.FoundHoles', V182} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AHoleList', ((begin (V188 = fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V186, V187)) end end end end), fun (V189) -> fun (V190) -> ((((V188('erased'))('erased'))(V189))(V190)) end end end(fun (V183) -> ('Idris.Idris2.Idris.IDEMode.Holes':'un--holeIDE'(V183)) end))(V182))})); {'Idris.IDEMode.REPL.CompletionList', V191, V192} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.ACompletionList', V191, V192})); {'Idris.IDEMode.REPL.NameList', V193} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.ANameList', ((begin (V199 = fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V197, V198)) end end end end), fun (V200) -> fun (V201) -> ((((V199('erased'))('erased'))(V200))(V201)) end end end(fun (V194) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V194)) end))(V193))})); {'Idris.IDEMode.REPL.Term', V202} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', V202})); {'Idris.IDEMode.REPL.TTTerm', V203} -> ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.AString', V203})); {'Idris.IDEMode.REPL.NameLocList', V204} -> begin (V216 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V205) -> ('nested--18284-9931--in--un--constructFileContext'(V204, V6, V5, V4, V3, V2, V1, V0, ((begin (V213 = fun (V207) -> fun (V208) -> fun (V209) -> fun (V210) -> case V210 of {'Builtin.MkPair', V211, V212} -> {'Builtin.MkPair', V211, (V209(V212))} end end end end end), fun (V214) -> fun (V215) -> ((((V213('erased'))('erased'))(V214))(V215)) end end end(fun (V206) -> ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V206)) end))(V205)))) end, V204, []))), fun (V217) -> begin (V218 = (V216(V217))), case V218 of {'Prelude.Types.Left', V219} -> {'Prelude.Types.Left', V219}; {'Prelude.Types.Right', V220} -> (begin (V221 = ('un--printIDEResult'(V0, V5, V6, {'Protocol.IDE.Result.ANameLocList', V220}))), V221 end(V217)) end end end end end.
