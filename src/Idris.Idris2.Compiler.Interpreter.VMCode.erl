-module('Idris.Idris2.Compiler.Interpreter.VMCode').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in callFunc-4009'/13,
  'case--callFunc-3869'/10,
  'case--step-3181'/7,
  'case--callPrim-2239'/5,
  'nested--10673-2429--in--un--world'/3,
  'nested--9912-1705--in--un--showWithIndex'/6,
  'nested--10673-2433--in--un--prim_putStr'/3,
  'nested--10673-2430--in--un--prim_putChar'/3,
  'nested--10673-2432--in--un--prim_getStr'/3,
  'nested--10673-2431--in--un--prim_getChar'/3,
  'nested--11186-3470--in--un--matchConst'/10,
  'nested--11186-3307--in--un--matchCon'/10,
  'nested--10411-2210--in--un--getConst'/5,
  'dn--un--show_Show_Object'/1,
  'dn--un--showPrec_Show_Object'/2,
  'un--unit'/0,
  'un--step'/4,
  'un--showType'/1,
  'un--showSep'/2,
  'un--showDepth'/2,
  'un--setReg'/4,
  'un--saveLocals'/2,
  'un--knownForeign'/0,
  'un--knownExtern'/0,
  'un--interpError'/3,
  'un--initInterpState'/1,
  'un--indexMaybe'/2,
  'un--getReg'/3,
  'un--executeExpr'/4,
  'un--compileLibrary'/5,
  'un--compileExpr'/7,
  'un--codegenVMCodeInterp'/0,
  'un--callPrim'/4,
  'un--callFunc'/5,
  'un--beginFunction'/4,
  'un--argError'/3,
  'un--NS_UN'/2
]).
'case--case block in callFunc-4009'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Prelude.Types.Nothing'} -> ('un--interpError'(V1, V4, <<<<"Unkown foreign function: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>)); {'Prelude.Types.Just', V13} -> case V13 of {'Builtin.DPair.MkDPair', V14, V15} -> case ('Idris.Idris2.Data.Vect':'un--toVect'(V14, V2)) of {'Prelude.Types.Nothing'} -> ('un--interpError'(V1, V4, <<<<"Wrong number of arguments, found: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V2))))/binary, <<<<", expected: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V14))/binary>>/binary>>/binary>>)); {'Prelude.Types.Just', V16} -> (((V15(V1))(V4))(V16)) end end end.
'case--callFunc-3869'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Prelude.Types.Nothing'} -> ('un--interpError'(V1, V4, <<<<"Undefined function: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>)); {'Prelude.Types.Just', V10} -> case V10 of {'Compiler.VMCode.MkVMFun', V11, V12} -> begin (V14 = case ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V11)), ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V2)))) of 1 -> ('un--interpError'(V1, V4, <<<<"Unexpected argument count during function call, expected: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V11))))/binary, <<<<", found: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V2))))/binary>>/binary>>/binary>>)); 0 -> fun (V13) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V34 = begin (V21 = ('un--beginFunction'(V1, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V11, V2)), V12, ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V19, V20)) end end, -1, V11))))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V33 = begin (V27 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V26) -> ('un--step'(V0, V7, V1, V26)) end, V25))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V32 = ('un--getReg'(V1, V7, {'Compiler.VMCode.RVal'}))), V32 end(V28)) end end end end), V33 end(V22)) end end end end), V34 end(V15)) end end end end; {'Compiler.VMCode.MkVMForeign', V35, V36, V37} -> ('case--case block in callFunc-4009'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V35, V36, V37, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V3, ('un--knownForeign'()))))); {'Compiler.VMCode.MkVMError', V38} -> begin (V40 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V39) -> ('un--step'(V0, V7, V1, V39)) end, V38))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V45 = ('un--getReg'(V1, V7, {'Compiler.VMCode.RVal'}))), V45 end(V41)) end end end end end end.
'case--step-3181'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Prelude.Types.Nothing'} -> ('un--interpError'(V1, V5, <<<<"EXTPRIM: Unkown foreign function: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>)); {'Prelude.Types.Just', V7} -> case V7 of {'Builtin.DPair.MkDPair', V8, V9} -> case ('Idris.Idris2.Data.Vect':'un--toVect'(V8, V2)) of {'Prelude.Types.Nothing'} -> ('un--interpError'(V1, V5, <<<<"EXTPRIM: Wrong number of arguments, found: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V2))))/binary, <<<<", expected: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8))/binary>>/binary>>/binary>>)); {'Prelude.Types.Just', V10} -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V11) -> ('un--getReg'(V1, V5, V11)) end, V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V23 = begin (V17 = (((V9(V1))(V5))(V16))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V22 = ('un--setReg'(V1, V5, V4, V21))), V22 end(V18)) end end end end), V23 end(V13)) end end end end end end end.
'case--callPrim-2239'(V0, V1, V2, V3, V4) -> case V4 of {'Prelude.Types.Right', V5} -> case (('Idris.Idris2.Core.Primitives':'un--getOp'(V2, []))(((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> {'Core.Value.NPrimVal', {'Core.FC.EmptyFC'}, V6} end))(V5)))) of {'Prelude.Types.Just', V14} -> case V14 of {'Core.Value.NPrimVal', V15, V16} -> fun (V17) -> {'Prelude.Types.Right', {'Compiler.Interpreter.VMCode.Const', V16}} end; _ -> ('un--interpError'(V0, V3, <<<<"OP: Error calling "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Core.Primitives':'un--opName'(V2))))/binary, <<<<" with operands: "/utf8>>/binary, ('Idris.Idris2.Data.Vect':'dn--un--show_Show_((Vect $len) $elem)'({'Prelude.Show.MkShow', fun (V18) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V18)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V19, V20)) end end}, V5))/binary>>/binary>>/binary>>)) end; _ -> ('un--interpError'(V0, V3, <<<<"OP: Error calling "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Core.Primitives':'un--opName'(V2))))/binary, <<<<" with operands: "/utf8>>/binary, ('Idris.Idris2.Data.Vect':'dn--un--show_Show_((Vect $len) $elem)'({'Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V22, V23)) end end}, V5))/binary>>/binary>>/binary>>)) end; {'Prelude.Types.Left', V24} -> ('un--interpError'(V0, V3, <<<<"OP: Expected Constant, found "/utf8>>/binary, ('un--showType'(V24))/binary>>)) end.
'nested--10673-2429--in--un--world'(V0, V1, V2) -> case V2 of {'Compiler.Interpreter.VMCode.Null'} -> fun (V3) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Compiler.Interpreter.VMCode.Const', V4} -> case V4 of {'Core.TT.WorldVal'} -> fun (V5) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; _ -> ('un--interpError'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V6) -> fun (V7) -> <<V6/binary, V7/binary>> end end, <<""/utf8>>}, fun (V8) -> V8 end, [<<"expected %MkWorld or Null, got "/utf8>> | [('dn--un--show_Show_Object'(V2)) | []]])))) end; _ -> ('un--interpError'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> <<V9/binary, V10/binary>> end end, <<""/utf8>>}, fun (V11) -> V11 end, [<<"expected %MkWorld or Null, got "/utf8>> | [('dn--un--show_Show_Object'(V2)) | []]])))) end.
'nested--9912-1705--in--un--showWithIndex'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V6, V7) -> <<<<"  "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, <<case V4 of {'Prelude.Show.MkShow', V8, V9} -> (V8(V6)) end/binary, <<<<"\x{a}"/utf8>>/binary, ('nested--9912-1705--in--un--showWithIndex'(V0, V1, V2, (V3 + 1), V4, V7))/binary>>/binary>>/binary>>/binary>>/binary>> end(E0, E1)) end.
'nested--10673-2433--in--un--prim_putStr'(V0, V1, V2) -> case V2 of {'Data.Vect.::', V3, V4} -> case V3 of {'Compiler.Interpreter.VMCode.Const', V5} -> case V5 of {'Core.TT.Str', V6} -> case V4 of {'Data.Vect.::', V7, V8} -> case V8 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Core.Core':'un--*>'(('nested--10673-2429--in--un--world'(V0, V1, V7)), begin (V30 = begin (V11 = fun (V9) -> begin (V10 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(V6, V9))), {'Prelude.Types.Right', V10} end end), ((begin (V27 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V24, V25, V26)) end end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end((begin (V19 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> {'Prelude.Types.Right', (V15(V18))} end end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V12) -> {'Builtin.MkUnit'} end))))(V11)) end), ((begin (V46 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V43, V44, V45)) end end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end((begin (V38 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> {'Prelude.Types.Right', (V34(V37))} end end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V31) -> ('un--unit'()) end))))(V30)) end)); _ -> ('un--argError'(V0, V1, V2)) end; _ -> ('un--argError'(V0, V1, V2)) end; _ -> ('un--argError'(V0, V1, V2)) end; _ -> ('un--argError'(V0, V1, V2)) end; _ -> ('un--argError'(V0, V1, V2)) end.
'nested--10673-2430--in--un--prim_putChar'(V0, V1, V2) -> case V2 of {'Data.Vect.::', V3, V4} -> case V3 of {'Compiler.Interpreter.VMCode.Const', V5} -> case V5 of {'Core.TT.Ch', V6} -> case V4 of {'Data.Vect.::', V7, V8} -> case V8 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Core.Core':'un--*>'(('nested--10673-2429--in--un--world'(V0, V1, V7)), begin (V30 = begin (V11 = fun (V9) -> begin (V10 = ('Idris.Idris2.Prelude.IO':'un--prim__putChar'(V6, V9))), {'Prelude.Types.Right', V10} end end), ((begin (V27 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V24, V25, V26)) end end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end((begin (V19 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> {'Prelude.Types.Right', (V15(V18))} end end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V12) -> {'Builtin.MkUnit'} end))))(V11)) end), ((begin (V46 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V43, V44, V45)) end end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end((begin (V38 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> {'Prelude.Types.Right', (V34(V37))} end end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V31) -> ('un--unit'()) end))))(V30)) end)); _ -> ('un--argError'(V0, V1, V2)) end; _ -> ('un--argError'(V0, V1, V2)) end; _ -> ('un--argError'(V0, V1, V2)) end; _ -> ('un--argError'(V0, V1, V2)) end; _ -> ('un--argError'(V0, V1, V2)) end.
'nested--10673-2432--in--un--prim_getStr'(V0, V1, V2) -> case V2 of {'Data.Vect.::', V3, V4} -> case V4 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Core.Core':'un--*>'(('nested--10673-2429--in--un--world'(V0, V1, V3)), begin (V7 = fun (V5) -> begin (V6 = ('Idris.Idris2.Prelude.IO':'un--prim__getStr'(V5))), {'Prelude.Types.Right', V6} end end), ((begin (V23 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V20, V21, V22)) end end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end((begin (V15 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> {'Prelude.Types.Right', (V11(V14))} end end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V8) -> {'Compiler.Interpreter.VMCode.Const', {'Core.TT.Str', V8}} end))))(V7)) end)); _ -> ('un--argError'(V0, V1, V2)) end; _ -> ('un--argError'(V0, V1, V2)) end.
'nested--10673-2431--in--un--prim_getChar'(V0, V1, V2) -> case V2 of {'Data.Vect.::', V3, V4} -> case V4 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Core.Core':'un--*>'(('nested--10673-2429--in--un--world'(V0, V1, V3)), begin (V7 = fun (V5) -> begin (V6 = ('Idris.Idris2.Prelude.IO':'un--prim__getChar'(V5))), {'Prelude.Types.Right', V6} end end), ((begin (V23 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V20, V21, V22)) end end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end((begin (V15 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> {'Prelude.Types.Right', (V11(V14))} end end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V8) -> {'Compiler.Interpreter.VMCode.Const', {'Core.TT.Ch', V8}} end))))(V7)) end)); _ -> ('un--argError'(V0, V1, V2)) end; _ -> ('un--argError'(V0, V1, V2)) end.
'nested--11186-3470--in--un--matchConst'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> case V9 of {'Prelude.Types.Nothing'} -> ('un--interpError'(V1, V6, <<"CONSTCASE: Missing matching alternative or default"/utf8>>)); {'Prelude.Types.Just', V10} -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V11) -> ('un--step'(V0, V6, V1, V11)) end, V10)) end; [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Builtin.MkPair', V14, V15} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V7, V14)) of 1 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V16) -> ('un--step'(V0, V6, V1, V16)) end, V15)); 0 -> ('nested--11186-3470--in--un--matchConst'(V0, V1, V2, V3, V4, V5, V6, V7, V13, V9)) end end end(E0, E1)) end.
'nested--11186-3307--in--un--matchCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> case V9 of {'Prelude.Types.Nothing'} -> ('un--interpError'(V1, V6, <<"CASE: Missing matching alternative or default"/utf8>>)); {'Prelude.Types.Just', V10} -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V11) -> ('un--step'(V0, V6, V1, V11)) end, V10)) end; [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Builtin.MkPair', V14, V15} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_((Either $a) $b)'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V18, V19)) end end}, {'Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V22, V23)) end end}}, V7, V14)) of 1 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V24) -> ('un--step'(V0, V6, V1, V24)) end, V15)); 0 -> ('nested--11186-3307--in--un--matchCon'(V0, V1, V2, V3, V4, V5, V6, V7, V13, V9)) end end end(E0, E1)) end.
'nested--10411-2210--in--un--getConst'(V0, V1, V2, V3, V4) -> case V4 of {'Compiler.Interpreter.VMCode.Const', V5} -> {'Prelude.Types.Right', V5}; _ -> {'Prelude.Types.Left', V4} end.
'dn--un--show_Show_Object'(V0) -> ('un--showDepth'(5, V0)).
'dn--un--showPrec_Show_Object'(V0, V1) -> ('dn--un--show_Show_Object'(V1)).
'un--unit'() -> {'Compiler.Interpreter.VMCode.Const', {'Core.TT.I', 0}}.
'un--step'(V0, V1, V2, V3) -> case V3 of {'Compiler.VMCode.DECLARE', V4} -> fun (V5) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Compiler.VMCode.START'} -> fun (V6) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Compiler.VMCode.ASSIGN', V7, V8} -> begin (V9 = ('un--getReg'(V2, V1, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V14 = ('un--setReg'(V2, V1, V7, V13))), V14 end(V10)) end end end end; {'Compiler.VMCode.MKCON', V15, V16, V17} -> begin (V19 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V18) -> ('un--getReg'(V2, V1, V18)) end, V17, []))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V24 = ('un--setReg'(V2, V1, V15, {'Compiler.Interpreter.VMCode.Constructor', V16, V23}))), V24 end(V20)) end end end end; {'Compiler.VMCode.MKCLOSURE', V25, V26, V27, V28} -> begin (V30 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V29) -> ('un--getReg'(V2, V1, V29)) end, V28, []))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V35 = ('un--setReg'(V2, V1, V25, {'Compiler.Interpreter.VMCode.Closure', ('Idris.Idris2.Data.Nat':'un--pred'(V27)), ('Idris.Idris2.Prelude.Types.SnocList':'un--<><'({'Prelude.Basics.Lin'}, V34)), V26}))), V35 end(V31)) end end end end; {'Compiler.VMCode.MKCONSTANT', V36, V37} -> ('un--setReg'(V2, V1, V36, {'Compiler.Interpreter.VMCode.Const', V37})); {'Compiler.VMCode.APPLY', V38, V39, V40} -> begin (V41 = ('un--getReg'(V2, V1, V39))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V68 = begin (V46 = ('un--getReg'(V2, V1, V40))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V67 = case V45 of {'Compiler.Interpreter.VMCode.Closure', V51, V52, V53} -> case V51 of 0 -> begin (V54 = ('un--callFunc'(V0, V2, V1, V53, ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V52, [V50 | []]))))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V59 = ('un--setReg'(V2, V1, V38, V58))), V59 end(V55)) end end end end; _ -> begin (V60 = (V51 - 1)), ('un--setReg'(V2, V1, V38, {'Compiler.Interpreter.VMCode.Closure', V60, {'Prelude.Basics.:<', V52, V50}, V53})) end end; _ -> ('un--interpError'(V2, V1, <<(begin (V62 = fun (V61) -> V61 end), fun (V63) -> (V62(V63)) end end(<<"APPLY: While applying "/utf8>>))/binary, <<('Idris.Idris2.Compiler.VMCode':'dn--un--show_Show_Reg'(V39))/binary, <<(begin (V65 = fun (V64) -> V64 end), fun (V66) -> (V65(V66)) end end(<<", expected closure, found: "/utf8>>))/binary, ('dn--un--show_Show_Object'(V45))/binary>>/binary>>/binary>>)) end), V67 end(V47)) end end end end), V68 end(V42)) end end end end; {'Compiler.VMCode.CALL', V69, V70, V71, V72} -> begin (V74 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V73) -> ('un--getReg'(V2, V1, V73)) end, V72, []))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V85 = begin (V79 = ('un--callFunc'(V0, V2, V1, V71, V78))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V84 = ('un--setReg'(V2, V1, V69, V83))), V84 end(V80)) end end end end), V85 end(V75)) end end end end; {'Compiler.VMCode.OP', V86, V87, V88} -> begin (V90 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V89) -> ('un--getReg'(V2, V1, V89)) end, V88))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V101 = begin (V95 = ('un--callPrim'(V2, V1, V87, V94))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V100 = ('un--setReg'(V2, V1, V86, V99))), V100 end(V96)) end end end end), V101 end(V91)) end end end end; {'Compiler.VMCode.EXTPRIM', V102, V103, V104} -> ('case--step-3181'(V0, V2, V104, V103, V102, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V103, ('un--knownExtern'()))))); {'Compiler.VMCode.CASE', V105, V106, V107} -> begin (V108 = ('un--getReg'(V2, V1, V105))), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V115 = case V112 of {'Compiler.Interpreter.VMCode.Constructor', V113, V114} -> ('nested--11186-3307--in--un--matchCon'(V0, V2, V107, V106, V105, V1, V1, V113, V106, V107)); _ -> ('un--interpError'(V2, V1, <<<<"CASE: Expected Constructor, found "/utf8>>/binary, ('un--showType'(V112))/binary>>)) end), V115 end(V109)) end end end end; {'Compiler.VMCode.CONSTCASE', V116, V117, V118} -> begin (V119 = ('un--getReg'(V2, V1, V116))), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V125 = case V123 of {'Compiler.Interpreter.VMCode.Const', V124} -> ('nested--11186-3470--in--un--matchConst'(V0, V2, V118, V117, V116, V1, V1, V124, V117, V118)); _ -> ('un--interpError'(V2, V1, <<<<"CONSTCASE: Expected Constant, found "/utf8>>/binary, ('un--showType'(V123))/binary>>)) end), V125 end(V120)) end end end end; {'Compiler.VMCode.PROJECT', V126, V127, V128} -> begin (V129 = ('un--getReg'(V2, V1, V127))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V138 = case V133 of {'Compiler.Interpreter.VMCode.Constructor', V134, V135} -> begin (V136 = {'Compiler.Interpreter.VMCode.Constructor', V134, V135}), case ('un--indexMaybe'(V135, V128)) of {'Prelude.Types.Nothing'} -> ('un--interpError'(V2, V1, <<<<"PROJECT: Unable to project index "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V128))/binary, <<<<", missing arguments for constructor:\x{a}"/utf8>>/binary, ('dn--un--show_Show_Object'(V136))/binary>>/binary>>/binary>>)); {'Prelude.Types.Just', V137} -> ('un--setReg'(V2, V1, V126, V137)) end end; _ -> ('un--interpError'(V2, V1, <<<<"PROJECT: Expected Constructor, found "/utf8>>/binary, ('un--showType'(V133))/binary>>)) end), V138 end(V130)) end end end end; {'Compiler.VMCode.NULL', V139} -> ('un--setReg'(V2, V1, V139, {'Compiler.Interpreter.VMCode.Null'})); {'Compiler.VMCode.ERROR', V140} -> ('un--interpError'(V2, V1, <<<<"ERROR: "/utf8>>/binary, V140/binary>>)) end.
'un--showType'(V0) -> case V0 of {'Compiler.Interpreter.VMCode.Closure', V1, V2, V3} -> <<"Closure"/utf8>>; {'Compiler.Interpreter.VMCode.Constructor', V4, V5} -> <<"Constructor"/utf8>>; {'Compiler.Interpreter.VMCode.Const', V6} -> <<"Constant"/utf8>>; {'Compiler.Interpreter.VMCode.Null'} -> <<"Null"/utf8>> end.
'un--showSep'(V0, V1) -> case V1 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> ('un--showDepth'(V0, V2)); _ -> <<('un--showDepth'(V0, V2))/binary, <<<<", "/utf8>>/binary, ('un--showSep'(V0, V3))/binary>>/binary>> end end(E0, E1)) end.
'un--showDepth'(V0, V1) -> case V0 of 0 -> ('un--showType'(V1)); _ -> begin (V2 = (V0 - 1)), case V1 of {'Compiler.Interpreter.VMCode.Closure', V3, V4, V5} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary, <<<<"-"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<"("/utf8>>/binary, <<('un--showSep'(V2, ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V4, []))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.Interpreter.VMCode.Constructor', V6, V7} -> case V6 of {'Prelude.Types.Left', V8} -> <<<<"tag"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8))/binary, <<<<"("/utf8>>/binary, <<('un--showSep'(V2, V7))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--showType'(V1)) end; {'Compiler.Interpreter.VMCode.Const', V9} -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V9)); _ -> ('un--showType'(V1)) end end end.
'un--setReg'(V0, V1, V2, V3) -> case V2 of {'Compiler.VMCode.RVal'} -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V22 = begin (V14 = V0), fun (V15) -> begin (V21 = (begin (V16 = V14), fun (V17) -> ('erlang':'put'(V16, case V13 of {'Compiler.Interpreter.VMCode.MkInterpState', V18, V19, V20} -> {'Compiler.Interpreter.VMCode.MkInterpState', V18, V19, {'Prelude.Types.Just', V3}} end)) end end(V15))), {'Prelude.Types.Right', V21} end end end), V22 end(V10)) end end end end; {'Compiler.VMCode.Loc', V23} -> begin (V51 = begin (V29 = begin (V24 = V0), fun (V25) -> begin (V28 = (begin (V26 = V24), fun (V27) -> ('erlang':'get'(V26)) end end(V25))), {'Prelude.Types.Right', V28} end end end), ((begin (V48 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V45, V46, V47)) end end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end((begin (V40 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> {'Prelude.Types.Right', (V36(V39))} end end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end(fun (V30) -> case V30 of {'Compiler.Interpreter.VMCode.MkInterpState', V31, V32, V33} -> V32 end end))))(V29)) end), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V92 = begin (V57 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V23, ('Idris.Idris2.Erlang.Data.IOArray':'un--max'(V55)))) of 1 -> ('un--interpError'(V0, V1, <<<<"Attempt to set register: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V23))/binary, <<<<", size of locals: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Erlang.Data.IOArray':'un--max'(V55))))/binary>>/binary>>/binary>>)); 0 -> fun (V56) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V91 = fun (V62) -> begin (V90 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V65, V66, V67)) end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> V69 end end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), begin (V77 = (V74(V75))), (V76(V77)) end end end end end end end}, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), ((V81(V83))(V82)) end end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V85(V86))), (V87(V86)) end end end end}, fun (V88) -> fun (V89) -> V89 end end}, V55, V23, V3))(V62))), {'Prelude.Types.Right', V90} end end), V91 end(V58)) end end end end), V92 end(V52)) end end end end; {'Compiler.VMCode.Discard'} -> fun (V93) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'un--saveLocals'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V30 = begin (V12 = V1), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V29 = begin (V22 = begin (V17 = V0), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'put'(V19, V11)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V28 = fun (V27) -> {'Prelude.Types.Right', V16} end), V28 end(V23)) end end end end), V29 end(V13)) end end end end), V30 end(V8)) end end end end.
'un--knownForeign'() -> ('Idris.Idris2.Libraries.Data.NameMap':'un--fromList'([{'Builtin.MkPair', ('un--NS_UN'(('Idris.Idris2.Core.Name.Namespace':'un--ioNS'()), <<"prim__putChar"/utf8>>)), {'Builtin.DPair.MkDPair', 2, fun (V0) -> fun (V1) -> fun (V2) -> ('nested--10673-2430--in--un--prim_putChar'(V0, V1, V2)) end end end}} | [{'Builtin.MkPair', ('un--NS_UN'(('Idris.Idris2.Core.Name.Namespace':'un--ioNS'()), <<"prim__getChar"/utf8>>)), {'Builtin.DPair.MkDPair', 1, fun (V3) -> fun (V4) -> fun (V5) -> ('nested--10673-2431--in--un--prim_getChar'(V3, V4, V5)) end end end}} | [{'Builtin.MkPair', ('un--NS_UN'(('Idris.Idris2.Core.Name.Namespace':'un--ioNS'()), <<"prim__getStr"/utf8>>)), {'Builtin.DPair.MkDPair', 1, fun (V6) -> fun (V7) -> fun (V8) -> ('nested--10673-2432--in--un--prim_getStr'(V6, V7, V8)) end end end}} | [{'Builtin.MkPair', ('un--NS_UN'(('Idris.Idris2.Core.Name.Namespace':'un--ioNS'()), <<"prim__putStr"/utf8>>)), {'Builtin.DPair.MkDPair', 2, fun (V9) -> fun (V10) -> fun (V11) -> ('nested--10673-2433--in--un--prim_putStr'(V9, V10, V11)) end end end}} | []]]]])).
'un--knownExtern'() -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()).
'un--interpError'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V76 = case V12 of {'Compiler.Interpreter.VMCode.MkInterpState', V13, V14, V15} -> begin (V45 = fun (V16) -> begin (V44 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> V23 end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), begin (V31 = (V28(V29))), (V30(V31)) end end end end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), ((V35(V37))(V36)) end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V39(V40))), (V41(V40)) end end end end}, fun (V42) -> fun (V43) -> V43 end end}, V14))(V16))), {'Prelude.Types.Right', V44} end end), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V75 = fun (V50) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<(begin (V52 = fun (V51) -> V51 end), fun (V53) -> (V52(V53)) end end(<<"Interpreter Error in "/utf8>>))/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V55, V56)) end end}, ('Idris.Idris2.Data.List':'un--take'(10, V1))))/binary, <<<<":\x{a}"/utf8>>/binary, <<V2/binary, <<(begin (V58 = fun (V57) -> V57 end), fun (V59) -> (V58(V59)) end end(<<"\x{a}\x{a}locals:\x{a}"/utf8>>))/binary, <<('nested--9912-1705--in--un--showWithIndex'(V0, V2, V1, 0, {'Prelude.Show.MkShow', fun (V60) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V61) -> ('dn--un--show_Show_Object'(V61)) end, fun (V62) -> fun (V63) -> ('dn--un--showPrec_Show_Object'(V62, V63)) end end}, V60)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V66) -> ('dn--un--show_Show_Object'(V66)) end, fun (V67) -> fun (V68) -> ('dn--un--showPrec_Show_Object'(V67, V68)) end end}, V64, V65)) end end}, V49))/binary, <<(begin (V70 = fun (V69) -> V69 end), fun (V71) -> (V70(V71)) end end(<<"\x{a}return:\x{a}  "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V72) -> ('dn--un--show_Show_Object'(V72)) end, fun (V73) -> fun (V74) -> ('dn--un--showPrec_Show_Object'(V73, V74)) end end}, V15))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>}, V50)) end), V75 end(V46)) end end end end end), V76 end(V9)) end end end end.
'un--initInterpState'(V0) -> begin (V1 = ('Idris.Idris2.Libraries.Data.NameMap':'un--fromList'(V0))), begin (V31 = fun (V2) -> begin (V30 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, 0))(V2))), {'Prelude.Types.Right', V30} end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V39 = begin (V37 = fun (V36) -> {'Prelude.Types.Nothing'} end), fun (V38) -> {'Prelude.Types.Right', {'Compiler.Interpreter.VMCode.MkInterpState', V1, V35, (V37('erased'))}} end end), V39 end(V32)) end end end end end.
'un--indexMaybe'(V0, V1) -> case V0 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1, 0)) of 1 -> {'Prelude.Types.Just', V2}; 0 -> ('un--indexMaybe'(V3, begin (V4 = (V1 - 1)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end)) end end(E0, E1)) end.
'un--getReg'(V0, V1, V2) -> case V2 of {'Compiler.VMCode.Loc', V3} -> begin (V31 = begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), ((begin (V28 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V25, V26, V27)) end end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end((begin (V20 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> {'Prelude.Types.Right', (V16(V19))} end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V10) -> case V10 of {'Compiler.Interpreter.VMCode.MkInterpState', V11, V12, V13} -> V12 end end))))(V9)) end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V76 = begin (V65 = fun (V36) -> begin (V64 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> V43 end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), begin (V51 = (V48(V49))), (V50(V51)) end end end end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V54(V56))), ((V55(V57))(V56)) end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V59(V60))), (V61(V60)) end end end end}, fun (V62) -> fun (V63) -> V63 end end}, V35, V3))(V36))), {'Prelude.Types.Right', V64} end end), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V75 = case V69 of {'Prelude.Types.Just', V70} -> fun (V71) -> {'Prelude.Types.Right', V70} end; {'Prelude.Types.Nothing'} -> ('un--interpError'(V0, V1, <<(begin (V73 = fun (V72) -> V72 end), fun (V74) -> (V73(V74)) end end(<<"Missing local "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3))/binary>>)) end), V75 end(V66)) end end end end), V76 end(V32)) end end end end; {'Compiler.VMCode.RVal'} -> begin (V104 = begin (V82 = begin (V77 = V0), fun (V78) -> begin (V81 = (begin (V79 = V77), fun (V80) -> ('erlang':'get'(V79)) end end(V78))), {'Prelude.Types.Right', V81} end end end), ((begin (V101 = fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V98, V99, V100)) end end end end end), fun (V102) -> fun (V103) -> ((((V101('erased'))('erased'))(V102))(V103)) end end end((begin (V93 = fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> {'Prelude.Types.Right', (V89(V92))} end end end end end), fun (V94) -> fun (V95) -> ((((V93('erased'))('erased'))(V94))(V95)) end end end(fun (V83) -> case V83 of {'Compiler.Interpreter.VMCode.MkInterpState', V84, V85, V86} -> V86 end end))))(V82)) end), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V114 = case V108 of {'Prelude.Types.Just', V109} -> fun (V110) -> {'Prelude.Types.Right', V109} end; {'Prelude.Types.Nothing'} -> ('un--interpError'(V0, V1, (begin (V112 = fun (V111) -> V111 end), fun (V113) -> (V112(V113)) end end(<<"Missing returnObj val"/utf8>>)))) end), V114 end(V105)) end end end end; {'Compiler.VMCode.Discard'} -> fun (V115) -> {'Prelude.Types.Right', {'Compiler.Interpreter.VMCode.Null'}} end end.
'un--executeExpr'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V0, 0, 3, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V46 = begin (V21 = begin (V15 = ('un--initInterpState'(case V8 of {'Compiler.Common.MkCompileData', V9, V10, V11, V12, V13, V14} -> V14 end))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V20 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Interpreter.VMCode.State'}, V19))), V20 end(V16)) end end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V45 = begin (V26 = ('un--callFunc'(V0, V25, [], {'Core.Name.MN', <<"__mainExpression"/utf8>>, 0}, []))), ((begin (V42 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V39, V40, V41)) end end end end end), fun (V43) -> fun (V44) -> ((((V42('erased'))('erased'))(V43))(V44)) end end end((begin (V34 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> {'Prelude.Types.Right', (V30(V33))} end end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V27) -> {'Builtin.MkUnit'} end))))(V26)) end), V45 end(V22)) end end end end), V46 end(V5)) end end end end.
'un--compileLibrary'(V0, V1, V2, V3, V4) -> begin (V7 = fun (V5) -> begin (V6 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Compiling to library is not supported.\x{a}"/utf8>>, V5))), {'Prelude.Types.Right', V6} end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V13 end(V8)) end end end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"compile not implemeted for vmcode-interp"/utf8>>}, V6)).
'un--codegenVMCodeInterp'() -> {'Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('un--compileExpr'(V0, V1, V2, V3, V4, V5, V6)) end end end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('un--executeExpr'(V7, V8, V9, V10)) end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('un--compileLibrary'(V11, V12, V13, V14, V15)) end end end end end, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}}.
'un--callPrim'(V0, V1, V2, V3) -> case V2 of {'Core.TT.BelieveMe'} -> case V3 of {'Data.Vect.::', V4, V5} -> case V5 of {'Data.Vect.::', V6, V7} -> case V7 of {'Data.Vect.::', V8, V9} -> case V9 of {'Data.Vect.Nil'} -> fun (V10) -> {'Prelude.Types.Right', V8} end; _ -> ('case--callPrim-2239'(V0, V3, V2, V1, ('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> {'Prelude.Types.Right', (V13(V16))} end end end end end, fun (V17) -> fun (V18) -> {'Prelude.Types.Right', V18} end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> case V21 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> case V22 of {'Prelude.Types.Right', V25} -> {'Prelude.Types.Right', (V24(V25))}; {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26} end end end end end end}, fun (V27) -> ('nested--10411-2210--in--un--getConst'(V0, V3, V2, V1, V27)) end, V3)))) end; _ -> ('case--callPrim-2239'(V0, V3, V2, V1, ('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Prelude.Interfaces.MkApplicative', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> {'Prelude.Types.Right', (V30(V33))} end end end end end, fun (V34) -> fun (V35) -> {'Prelude.Types.Right', V35} end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> case V38 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> case V39 of {'Prelude.Types.Right', V42} -> {'Prelude.Types.Right', (V41(V42))}; {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43} end end end end end end}, fun (V44) -> ('nested--10411-2210--in--un--getConst'(V0, V3, V2, V1, V44)) end, V3)))) end; _ -> ('case--callPrim-2239'(V0, V3, V2, V1, ('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Prelude.Interfaces.MkApplicative', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> {'Prelude.Types.Right', (V47(V50))} end end end end end, fun (V51) -> fun (V52) -> {'Prelude.Types.Right', V52} end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> case V55 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> case V56 of {'Prelude.Types.Right', V59} -> {'Prelude.Types.Right', (V58(V59))}; {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60} end end end end end end}, fun (V61) -> ('nested--10411-2210--in--un--getConst'(V0, V3, V2, V1, V61)) end, V3)))) end; _ -> ('case--callPrim-2239'(V0, V3, V2, V1, ('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Prelude.Interfaces.MkApplicative', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> {'Prelude.Types.Right', (V64(V67))} end end end end end, fun (V68) -> fun (V69) -> {'Prelude.Types.Right', V69} end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> case V72 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> case V73 of {'Prelude.Types.Right', V76} -> {'Prelude.Types.Right', (V75(V76))}; {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77} end end end end end end}, fun (V78) -> ('nested--10411-2210--in--un--getConst'(V0, V3, V2, V1, V78)) end, V3)))) end; _ -> ('case--callPrim-2239'(V0, V3, V2, V1, ('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Prelude.Interfaces.MkApplicative', fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> {'Prelude.Types.Right', (V81(V84))} end end end end end, fun (V85) -> fun (V86) -> {'Prelude.Types.Right', V86} end end, fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> case V89 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> case V90 of {'Prelude.Types.Right', V93} -> {'Prelude.Types.Right', (V92(V93))}; {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94} end end end end end end}, fun (V95) -> ('nested--10411-2210--in--un--getConst'(V0, V3, V2, V1, V95)) end, V3)))) end.
'un--callFunc'(V0, V1, V2, V3, V4) -> ('un--saveLocals'(V1, begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V0, <<"compiler.interpreter"/utf8>>, 25))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V85 = begin (V24 = case V9 of 1 -> ('Idris.Idris2.Prelude.Types':'un--pack'(((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V10) -> (begin (V12 = fun (V11) -> V11 end), fun (V13) -> (V12(V13)) end end($|)) end))(V2)))); 0 -> (begin (V22 = fun (V21) -> V21 end), fun (V23) -> (V22(V23)) end end(<<""/utf8>>)) end), begin (V30 = fun (V25) -> case V9 of 1 -> begin (V29 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<V24/binary, <<<<"Calling "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary, <<<<" with args: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V26) -> ('dn--un--show_Show_Object'(V26)) end, fun (V27) -> fun (V28) -> ('dn--un--showPrec_Show_Object'(V27, V28)) end end}, V4))/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V25))), {'Prelude.Types.Right', V29} end; 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V84 = begin (V35 = [V3 | V2]), begin (V63 = begin (V41 = begin (V36 = V1), fun (V37) -> begin (V40 = (begin (V38 = V36), fun (V39) -> ('erlang':'get'(V38)) end end(V37))), {'Prelude.Types.Right', V40} end end end), ((begin (V60 = fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V57, V58, V59)) end end end end end), fun (V61) -> fun (V62) -> ((((V60('erased'))('erased'))(V61))(V62)) end end end((begin (V52 = fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> {'Prelude.Types.Right', (V48(V51))} end end end end end), fun (V53) -> fun (V54) -> ((((V52('erased'))('erased'))(V53))(V54)) end end end(fun (V42) -> case V42 of {'Compiler.Interpreter.VMCode.MkInterpState', V43, V44, V45} -> V43 end end))))(V41)) end), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V83 = begin (V68 = ('case--callFunc-3869'(V0, V1, V4, V3, V2, V9, V24, V35, V67, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V3, V67))))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V82 = begin (V75 = fun (V73) -> case V9 of 1 -> begin (V74 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<V24/binary, <<<<"Result: "/utf8>>/binary, ('dn--un--show_Show_Object'(V72))/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V73))), {'Prelude.Types.Right', V74} end; 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V81 = fun (V80) -> {'Prelude.Types.Right', V72} end), V81 end(V76)) end end end end), V82 end(V69)) end end end end), V83 end(V64)) end end end end end), V84 end(V31)) end end end end end), V85 end(V6)) end end end end)).
'un--beginFunction'(V0, V1, V2, V3) -> case V2 of [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Compiler.VMCode.DECLARE', V6} -> case V6 of {'Compiler.VMCode.Loc', V7} -> ('un--beginFunction'(V0, V1, V5, ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7, V3)))); _ -> ('un--beginFunction'(V0, V1, V5, V3)) end; {'Compiler.VMCode.START'} -> begin (V38 = fun (V8) -> begin (V37 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, begin (V36 = (V3 + 1)), case ((V36 band 9223372036854775808) =/= 0) of 'true' -> (V36 bor -9223372036854775808); _ -> (V36 band 9223372036854775807) end end))(V8))), {'Prelude.Types.Right', V37} end end), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V126 = begin (V94 = begin (V75 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V43) -> fun (V44) -> case V43 of {'Builtin.MkPair', V45, V46} -> begin (V74 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V49, V50, V51)) end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> V53 end end end, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V57(V59))), begin (V61 = (V58(V59))), (V60(V61)) end end end end end end end}, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V64(V66))), ((V65(V67))(V66)) end end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V69(V70))), (V71(V70)) end end end end}, fun (V72) -> fun (V73) -> V73 end end}, V42, V45, V46))(V44))), {'Prelude.Types.Right', V74} end end end end, V1, []))), ((begin (V91 = fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V88, V89, V90)) end end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end((begin (V83 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> {'Prelude.Types.Right', (V79(V82))} end end end end end), fun (V84) -> fun (V85) -> ((((V83('erased'))('erased'))(V84))(V85)) end end end(fun (V76) -> {'Builtin.MkUnit'} end))))(V75)) end), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V125 = begin (V118 = begin (V104 = begin (V99 = V0), fun (V100) -> begin (V103 = (begin (V101 = V99), fun (V102) -> ('erlang':'get'(V101)) end end(V100))), {'Prelude.Types.Right', V103} end end end), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V117 = begin (V109 = V0), fun (V110) -> begin (V116 = (begin (V111 = V109), fun (V112) -> ('erlang':'put'(V111, case V108 of {'Compiler.Interpreter.VMCode.MkInterpState', V113, V114, V115} -> {'Compiler.Interpreter.VMCode.MkInterpState', V113, V42, {'Prelude.Types.Nothing'}} end)) end end(V110))), {'Prelude.Types.Right', V116} end end end), V117 end(V105)) end end end end), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V124 = fun (V123) -> {'Prelude.Types.Right', V5} end), V124 end(V119)) end end end end), V125 end(V95)) end end end end), V126 end(V39)) end end end end; _ -> fun (V127) -> {'Prelude.Types.Right', V2} end end end(E0, E1)); _ -> fun (V128) -> {'Prelude.Types.Right', V2} end end.
'un--argError'(V0, V1, V2) -> ('un--interpError'(V0, V1, <<<<"Unexpected arguments: "/utf8>>/binary, ('Idris.Idris2.Data.Vect':'dn--un--foldMap_Foldable_(Vect $n)'({'Prelude.Interfaces.MkMonoid', fun (V3) -> fun (V4) -> <<V3/binary, V4/binary>> end end, <<""/utf8>>}, fun (V5) -> <<<<" "/utf8>>/binary, ('un--showDepth'(1, V5))/binary>> end, V2))/binary>>)).
'un--NS_UN'(V0, V1) -> {'Core.Name.NS', V0, {'Core.Name.UN', {'Core.Name.Basic', V1}}}.
