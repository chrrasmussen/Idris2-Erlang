-module('Idris.Idris2.TTImp.Elab.Quote').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--10305-12412--in--un--unqTuple'/7,
  'nested--10261-12254--in--un--unqPair'/10,
  'un--onLHS'/1,
  'un--getUnquoteUpdate'/4,
  'un--getUnquoteTy'/4,
  'un--getUnquoteRecord'/4,
  'un--getUnquoteField'/4,
  'un--getUnquoteDecl'/4,
  'un--getUnquoteData'/4,
  'un--getUnquoteClause'/4,
  'un--getUnquote'/4,
  'un--checkQuoteName'/12,
  'un--checkQuoteDecl'/14,
  'un--checkQuote'/14,
  'un--bindUnqs'/13
]).
'nested--10305-12412--in--un--unqTuple'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> begin (V13 = ('un--getUnquote'(V5, V4, V3, V12))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = fun (V18) -> {'Prelude.Types.Right', {'Builtin.MkPair', V7, {'Builtin.MkPair', V9, {'Builtin.MkPair', V11, V17}}}} end), V19 end(V14)) end end end end end end end.
'nested--10261-12254--in--un--unqPair'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> begin (V16 = ('un--getUnquote'(V8, V7, V6, V15))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Builtin.MkPair', V10, {'Builtin.MkPair', V12, {'Builtin.MkPair', V14, V20}}}} end), V22 end(V17)) end end end end end end end.
'un--onLHS'(V0) -> case V0 of {'TTImp.Elab.Check.InLHS', V1} -> 1; _ -> 0 end.
'un--getUnquoteUpdate'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.ISetField', V4, V5} -> begin (V6 = ('un--getUnquote'(V0, V1, V2, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> {'Prelude.Types.Right', {'TTImp.TTImp.ISetField', V4, V10}} end), V12 end(V7)) end end end end; {'TTImp.TTImp.ISetFieldApp', V13, V14} -> begin (V15 = ('un--getUnquote'(V0, V1, V2, V14))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = fun (V20) -> {'Prelude.Types.Right', {'TTImp.TTImp.ISetFieldApp', V13, V19}} end), V21 end(V16)) end end end end end.
'un--getUnquoteTy'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.MkImpTy', V4, V5, V6, V7} -> begin (V8 = ('un--getUnquote'(V0, V1, V2, V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V14 = fun (V13) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkImpTy', V4, V5, V6, V12}} end), V14 end(V9)) end end end end end.
'un--getUnquoteRecord'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.MkImpRecord', V4, V5, V6, V7, V8, V9} -> begin (V11 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> ('nested--10261-12254--in--un--unqPair'(V9, V8, V7, V6, V5, V4, V2, V1, V0, V10)) end, V6, []))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V24 = begin (V17 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V16) -> ('un--getUnquoteField'(V0, V1, V2, V16)) end, V9, []))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V23 = fun (V22) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkImpRecord', V4, V5, V15, V7, V8, V21}} end), V23 end(V18)) end end end end), V24 end(V12)) end end end end end.
'un--getUnquoteField'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.MkIField', V4, V5, V6, V7, V8} -> begin (V9 = ('un--getUnquote'(V0, V1, V2, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkIField', V4, V5, V6, V7, V13}} end), V15 end(V10)) end end end end end.
'un--getUnquoteDecl'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.IClaim', V4, V5, V6, V7, V8} -> begin (V9 = ('un--getUnquoteTy'(V0, V1, V2, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', {'TTImp.TTImp.IClaim', V4, V5, V6, V7, V13}} end), V15 end(V10)) end end end end; {'TTImp.TTImp.IData', V16, V17, V18, V19} -> begin (V20 = ('un--getUnquoteData'(V0, V1, V2, V19))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V26 = fun (V25) -> {'Prelude.Types.Right', {'TTImp.TTImp.IData', V16, V17, V18, V24}} end), V26 end(V21)) end end end end; {'TTImp.TTImp.IDef', V27, V28, V29} -> begin (V31 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V30) -> ('un--getUnquoteClause'(V0, V1, V2, V30)) end, V29, []))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V37 = fun (V36) -> {'Prelude.Types.Right', {'TTImp.TTImp.IDef', V27, V28, V35}} end), V37 end(V32)) end end end end; {'TTImp.TTImp.IParameters', V38, V39, V40} -> begin (V42 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V41) -> ('nested--10305-12412--in--un--unqTuple'(V40, V39, V38, V2, V1, V0, V41)) end, V39, []))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V55 = begin (V48 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V47) -> ('un--getUnquoteDecl'(V0, V1, V2, V47)) end, V40, []))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V54 = fun (V53) -> {'Prelude.Types.Right', {'TTImp.TTImp.IParameters', V38, V46, V52}} end), V54 end(V49)) end end end end), V55 end(V43)) end end end end; {'TTImp.TTImp.IRecord', V56, V57, V58, V59, V60} -> begin (V61 = ('un--getUnquoteRecord'(V0, V1, V2, V60))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V67 = fun (V66) -> {'Prelude.Types.Right', {'TTImp.TTImp.IRecord', V56, V57, V58, V59, V65}} end), V67 end(V62)) end end end end; {'TTImp.TTImp.INamespace', V68, V69, V70} -> begin (V72 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V71) -> ('un--getUnquoteDecl'(V0, V1, V2, V71)) end, V70, []))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V78 = fun (V77) -> {'Prelude.Types.Right', {'TTImp.TTImp.INamespace', V68, V69, V76}} end), V78 end(V73)) end end end end; {'TTImp.TTImp.ITransform', V79, V80, V81, V82} -> begin (V83 = ('un--getUnquote'(V0, V1, V2, V81))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V95 = begin (V88 = ('un--getUnquote'(V0, V1, V2, V82))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V94 = fun (V93) -> {'Prelude.Types.Right', {'TTImp.TTImp.ITransform', V79, V80, V87, V92}} end), V94 end(V89)) end end end end), V95 end(V84)) end end end end; _ -> fun (V96) -> {'Prelude.Types.Right', V3} end end.
'un--getUnquoteData'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.MkImpData', V4, V5, V6, V7, V8} -> begin (V9 = ('un--getUnquote'(V0, V1, V2, V6))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V22 = begin (V15 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> ('un--getUnquoteTy'(V0, V1, V2, V14)) end, V8, []))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = fun (V20) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkImpData', V4, V5, V13, V7, V19}} end), V21 end(V16)) end end end end), V22 end(V10)) end end end end; {'TTImp.TTImp.MkImpLater', V23, V24, V25} -> begin (V26 = ('un--getUnquote'(V0, V1, V2, V25))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkImpLater', V23, V24, V30}} end), V32 end(V27)) end end end end end.
'un--getUnquoteClause'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.PatClause', V4, V5, V6} -> begin (V7 = ('un--getUnquote'(V0, V1, V2, V5))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V19 = begin (V12 = ('un--getUnquote'(V0, V1, V2, V6))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = fun (V17) -> {'Prelude.Types.Right', {'TTImp.TTImp.PatClause', V4, V11, V16}} end), V18 end(V13)) end end end end), V19 end(V8)) end end end end; {'TTImp.TTImp.WithClause', V20, V21, V22, V23, V24, V25, V26} -> begin (V27 = ('un--getUnquote'(V0, V1, V2, V21))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V46 = begin (V32 = ('un--getUnquote'(V0, V1, V2, V23))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V45 = begin (V38 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V37) -> ('un--getUnquoteClause'(V0, V1, V2, V37)) end, V26, []))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V44 = fun (V43) -> {'Prelude.Types.Right', {'TTImp.TTImp.WithClause', V20, V31, V22, V36, V24, V25, V42}} end), V44 end(V39)) end end end end), V45 end(V33)) end end end end), V46 end(V28)) end end end end; {'TTImp.TTImp.ImpossibleClause', V47, V48} -> begin (V49 = ('un--getUnquote'(V0, V1, V2, V48))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V55 = fun (V54) -> {'Prelude.Types.Right', {'TTImp.TTImp.ImpossibleClause', V47, V53}} end), V55 end(V50)) end end end end end.
'un--getUnquote'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.IPi', V4, V5, V6, V7, V8, V9} -> begin (V10 = ('un--getUnquote'(V0, V1, V2, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V22 = begin (V15 = ('un--getUnquote'(V0, V1, V2, V9))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = fun (V20) -> {'Prelude.Types.Right', {'TTImp.TTImp.IPi', V4, V5, V6, V7, V14, V19}} end), V21 end(V16)) end end end end), V22 end(V11)) end end end end; {'TTImp.TTImp.ILam', V23, V24, V25, V26, V27, V28} -> begin (V29 = ('un--getUnquote'(V0, V1, V2, V27))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V41 = begin (V34 = ('un--getUnquote'(V0, V1, V2, V28))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V40 = fun (V39) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILam', V23, V24, V25, V26, V33, V38}} end), V40 end(V35)) end end end end), V41 end(V30)) end end end end; {'TTImp.TTImp.ILet', V42, V43, V44, V45, V46, V47, V48} -> begin (V49 = ('un--getUnquote'(V0, V1, V2, V46))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V67 = begin (V54 = ('un--getUnquote'(V0, V1, V2, V47))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V66 = begin (V59 = ('un--getUnquote'(V0, V1, V2, V48))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V65 = fun (V64) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILet', V42, V43, V44, V45, V53, V58, V63}} end), V65 end(V60)) end end end end), V66 end(V55)) end end end end), V67 end(V50)) end end end end; {'TTImp.TTImp.ICase', V68, V69, V70, V71} -> begin (V72 = ('un--getUnquote'(V0, V1, V2, V69))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V91 = begin (V77 = ('un--getUnquote'(V0, V1, V2, V70))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V90 = begin (V83 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V82) -> ('un--getUnquoteClause'(V0, V1, V2, V82)) end, V71, []))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V89 = fun (V88) -> {'Prelude.Types.Right', {'TTImp.TTImp.ICase', V68, V76, V81, V87}} end), V89 end(V84)) end end end end), V90 end(V78)) end end end end), V91 end(V73)) end end end end; {'TTImp.TTImp.ILocal', V92, V93, V94} -> begin (V96 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V95) -> ('un--getUnquoteDecl'(V0, V1, V2, V95)) end, V93, []))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V108 = begin (V101 = ('un--getUnquote'(V0, V1, V2, V94))), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V107 = fun (V106) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILocal', V92, V100, V105}} end), V107 end(V102)) end end end end), V108 end(V97)) end end end end; {'TTImp.TTImp.IUpdate', V109, V110, V111} -> begin (V113 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V112) -> ('un--getUnquoteUpdate'(V0, V1, V2, V112)) end, V110, []))), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V125 = begin (V118 = ('un--getUnquote'(V0, V1, V2, V111))), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V124 = fun (V123) -> {'Prelude.Types.Right', {'TTImp.TTImp.IUpdate', V109, V117, V122}} end), V124 end(V119)) end end end end), V125 end(V114)) end end end end; {'TTImp.TTImp.IApp', V126, V127, V128} -> begin (V129 = ('un--getUnquote'(V0, V1, V2, V127))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V141 = begin (V134 = ('un--getUnquote'(V0, V1, V2, V128))), fun (V135) -> begin (V136 = (V134(V135))), case V136 of {'Prelude.Types.Left', V137} -> {'Prelude.Types.Left', V137}; {'Prelude.Types.Right', V138} -> (begin (V140 = fun (V139) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V126, V133, V138}} end), V140 end(V135)) end end end end), V141 end(V130)) end end end end; {'TTImp.TTImp.IAutoApp', V142, V143, V144} -> begin (V145 = ('un--getUnquote'(V0, V1, V2, V143))), fun (V146) -> begin (V147 = (V145(V146))), case V147 of {'Prelude.Types.Left', V148} -> {'Prelude.Types.Left', V148}; {'Prelude.Types.Right', V149} -> (begin (V157 = begin (V150 = ('un--getUnquote'(V0, V1, V2, V144))), fun (V151) -> begin (V152 = (V150(V151))), case V152 of {'Prelude.Types.Left', V153} -> {'Prelude.Types.Left', V153}; {'Prelude.Types.Right', V154} -> (begin (V156 = fun (V155) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAutoApp', V142, V149, V154}} end), V156 end(V151)) end end end end), V157 end(V146)) end end end end; {'TTImp.TTImp.INamedApp', V158, V159, V160, V161} -> begin (V162 = ('un--getUnquote'(V0, V1, V2, V159))), fun (V163) -> begin (V164 = (V162(V163))), case V164 of {'Prelude.Types.Left', V165} -> {'Prelude.Types.Left', V165}; {'Prelude.Types.Right', V166} -> (begin (V174 = begin (V167 = ('un--getUnquote'(V0, V1, V2, V161))), fun (V168) -> begin (V169 = (V167(V168))), case V169 of {'Prelude.Types.Left', V170} -> {'Prelude.Types.Left', V170}; {'Prelude.Types.Right', V171} -> (begin (V173 = fun (V172) -> {'Prelude.Types.Right', {'TTImp.TTImp.INamedApp', V158, V166, V160, V171}} end), V173 end(V168)) end end end end), V174 end(V163)) end end end end; {'TTImp.TTImp.IWithApp', V175, V176, V177} -> begin (V178 = ('un--getUnquote'(V0, V1, V2, V176))), fun (V179) -> begin (V180 = (V178(V179))), case V180 of {'Prelude.Types.Left', V181} -> {'Prelude.Types.Left', V181}; {'Prelude.Types.Right', V182} -> (begin (V190 = begin (V183 = ('un--getUnquote'(V0, V1, V2, V177))), fun (V184) -> begin (V185 = (V183(V184))), case V185 of {'Prelude.Types.Left', V186} -> {'Prelude.Types.Left', V186}; {'Prelude.Types.Right', V187} -> (begin (V189 = fun (V188) -> {'Prelude.Types.Right', {'TTImp.TTImp.IWithApp', V175, V182, V187}} end), V189 end(V184)) end end end end), V190 end(V179)) end end end end; {'TTImp.TTImp.IAlternative', V191, V192, V193} -> begin (V195 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V194) -> ('un--getUnquote'(V0, V1, V2, V194)) end, V193, []))), fun (V196) -> begin (V197 = (V195(V196))), case V197 of {'Prelude.Types.Left', V198} -> {'Prelude.Types.Left', V198}; {'Prelude.Types.Right', V199} -> (begin (V201 = fun (V200) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAlternative', V191, V192, V199}} end), V201 end(V196)) end end end end; {'TTImp.TTImp.IRewrite', V202, V203, V204} -> begin (V205 = ('un--getUnquote'(V0, V1, V2, V203))), fun (V206) -> begin (V207 = (V205(V206))), case V207 of {'Prelude.Types.Left', V208} -> {'Prelude.Types.Left', V208}; {'Prelude.Types.Right', V209} -> (begin (V217 = begin (V210 = ('un--getUnquote'(V0, V1, V2, V204))), fun (V211) -> begin (V212 = (V210(V211))), case V212 of {'Prelude.Types.Left', V213} -> {'Prelude.Types.Left', V213}; {'Prelude.Types.Right', V214} -> (begin (V216 = fun (V215) -> {'Prelude.Types.Right', {'TTImp.TTImp.IRewrite', V202, V209, V214}} end), V216 end(V211)) end end end end), V217 end(V206)) end end end end; {'TTImp.TTImp.ICoerced', V218, V219} -> begin (V220 = ('un--getUnquote'(V0, V1, V2, V219))), fun (V221) -> begin (V222 = (V220(V221))), case V222 of {'Prelude.Types.Left', V223} -> {'Prelude.Types.Left', V223}; {'Prelude.Types.Right', V224} -> (begin (V226 = fun (V225) -> {'Prelude.Types.Right', {'TTImp.TTImp.ICoerced', V218, V224}} end), V226 end(V221)) end end end end; {'TTImp.TTImp.IBindHere', V227, V228, V229} -> begin (V230 = ('un--getUnquote'(V0, V1, V2, V229))), fun (V231) -> begin (V232 = (V230(V231))), case V232 of {'Prelude.Types.Left', V233} -> {'Prelude.Types.Left', V233}; {'Prelude.Types.Right', V234} -> (begin (V236 = fun (V235) -> {'Prelude.Types.Right', {'TTImp.TTImp.IBindHere', V227, V228, V234}} end), V236 end(V231)) end end end end; {'TTImp.TTImp.IAs', V237, V238, V239, V240, V241} -> begin (V242 = ('un--getUnquote'(V0, V1, V2, V241))), fun (V243) -> begin (V244 = (V242(V243))), case V244 of {'Prelude.Types.Left', V245} -> {'Prelude.Types.Left', V245}; {'Prelude.Types.Right', V246} -> (begin (V248 = fun (V247) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAs', V237, V238, V239, V240, V246}} end), V248 end(V243)) end end end end; {'TTImp.TTImp.IMustUnify', V249, V250, V251} -> begin (V252 = ('un--getUnquote'(V0, V1, V2, V251))), fun (V253) -> begin (V254 = (V252(V253))), case V254 of {'Prelude.Types.Left', V255} -> {'Prelude.Types.Left', V255}; {'Prelude.Types.Right', V256} -> (begin (V258 = fun (V257) -> {'Prelude.Types.Right', {'TTImp.TTImp.IMustUnify', V249, V250, V256}} end), V258 end(V253)) end end end end; {'TTImp.TTImp.IDelayed', V259, V260, V261} -> begin (V262 = ('un--getUnquote'(V0, V1, V2, V261))), fun (V263) -> begin (V264 = (V262(V263))), case V264 of {'Prelude.Types.Left', V265} -> {'Prelude.Types.Left', V265}; {'Prelude.Types.Right', V266} -> (begin (V268 = fun (V267) -> {'Prelude.Types.Right', {'TTImp.TTImp.IDelayed', V259, V260, V266}} end), V268 end(V263)) end end end end; {'TTImp.TTImp.IDelay', V269, V270} -> begin (V271 = ('un--getUnquote'(V0, V1, V2, V270))), fun (V272) -> begin (V273 = (V271(V272))), case V273 of {'Prelude.Types.Left', V274} -> {'Prelude.Types.Left', V274}; {'Prelude.Types.Right', V275} -> (begin (V277 = fun (V276) -> {'Prelude.Types.Right', {'TTImp.TTImp.IDelay', V269, V275}} end), V277 end(V272)) end end end end; {'TTImp.TTImp.IForce', V278, V279} -> begin (V280 = ('un--getUnquote'(V0, V1, V2, V279))), fun (V281) -> begin (V282 = (V280(V281))), case V282 of {'Prelude.Types.Left', V283} -> {'Prelude.Types.Left', V283}; {'Prelude.Types.Right', V284} -> (begin (V286 = fun (V285) -> {'Prelude.Types.Right', {'TTImp.TTImp.IForce', V278, V284}} end), V286 end(V281)) end end end end; {'TTImp.TTImp.IQuote', V287, V288} -> begin (V289 = ('un--getUnquote'(V0, V1, V2, V288))), fun (V290) -> begin (V291 = (V289(V290))), case V291 of {'Prelude.Types.Left', V292} -> {'Prelude.Types.Left', V292}; {'Prelude.Types.Right', V293} -> (begin (V295 = fun (V294) -> {'Prelude.Types.Right', {'TTImp.TTImp.IQuote', V287, V293}} end), V295 end(V290)) end end end end; {'TTImp.TTImp.IUnquote', V296, V297} -> begin (V298 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V0, V2, <<"q"/utf8>>))), fun (V299) -> begin (V300 = (V298(V299))), case V300 of {'Prelude.Types.Left', V301} -> {'Prelude.Types.Left', V301}; {'Prelude.Types.Right', V302} -> (begin (V326 = begin (V319 = begin (V308 = begin (V303 = V1), fun (V304) -> begin (V307 = (begin (V305 = V303), fun (V306) -> ('erlang':'get'(V305)) end end(V304))), {'Prelude.Types.Right', V307} end end end), fun (V309) -> begin (V310 = (V308(V309))), case V310 of {'Prelude.Types.Left', V311} -> {'Prelude.Types.Left', V311}; {'Prelude.Types.Right', V312} -> (begin (V318 = begin (V313 = V1), fun (V314) -> begin (V317 = (begin (V315 = V313), fun (V316) -> ('erlang':'put'(V315, [{'Builtin.MkPair', V302, {'Builtin.MkPair', V296, V297}} | V312])) end end(V314))), {'Prelude.Types.Right', V317} end end end), V318 end(V309)) end end end end), fun (V320) -> begin (V321 = (V319(V320))), case V321 of {'Prelude.Types.Left', V322} -> {'Prelude.Types.Left', V322}; {'Prelude.Types.Right', V323} -> (begin (V325 = fun (V324) -> {'Prelude.Types.Right', {'TTImp.TTImp.IUnquote', V296, {'TTImp.TTImp.IVar', V296, V302}}} end), V325 end(V320)) end end end end), V326 end(V299)) end end end end; _ -> fun (V327) -> {'Prelude.Types.Right', V3} end end.
'un--checkQuoteName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V17 = begin (V12 = V1), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V40 = begin (V28 = ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V0, V9, V21, ('un--onLHS'(case V6 of {'TTImp.Elab.Check.MkElabInfo', V22, V23, V24, V25, V26, V27} -> V22 end)), V8, V10))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V39 = begin (V33 = ('Idris.Idris2.Core.Reflect':'un--getCon'(V0, V9, V21, ('Idris.Idris2.Core.Reflect':'un--reflectiontt'(<<"Name"/utf8>>))))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V38 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V32, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V37)), V11))), V38 end(V34)) end end end end), V39 end(V29)) end end end end), V40 end(V18)) end end end end.
'un--checkQuoteDecl'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V19 = begin (V14 = V1), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V96 = begin (V24 = ('Idris.Idris2.Core.Core':'un--newRef'({'TTImp.Elab.Quote.Unq'}, []))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V95 = begin (V30 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V29) -> ('un--getUnquoteDecl'(V1, V28, V3, V29)) end, V12, []))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V94 = begin (V59 = (((((begin (V53 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(List $a)'(fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_ImpDecl'(V47, V48, V49, V50, V51, V52)) end end end end end end, V41, V42, V43, V44, V45, V46)) end end end end end end), fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ((((((V53(V0))(V54))(V55))(V56))(V57))(V58)) end end end end end end(V11))(V23))(('un--onLHS'(case V8 of {'TTImp.Elab.Check.MkElabInfo', V35, V36, V37, V38, V39, V40} -> V35 end))))(V10))(V34))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V93 = begin (V69 = begin (V64 = V28), fun (V65) -> begin (V68 = (begin (V66 = V64), fun (V67) -> ('erlang':'get'(V66)) end end(V65))), {'Prelude.Types.Right', V68} end end end), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V92 = begin (V74 = ('Idris.Idris2.Core.Reflect':'un--getCon'(V0, V11, V23, ('Idris.Idris2.Core.Reflect':'un--reflectionttimp'(<<"Decl"/utf8>>))))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V91 = begin (V79 = ('Idris.Idris2.Core.Reflect':'un--appCon'(V0, V11, V23, ('Idris.Idris2.Core.Reflect':'un--basics'(<<"List"/utf8>>)), [V78 | []]))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V90 = begin (V84 = ('un--bindUnqs'(V0, V1, V2, V3, V4, V5, V6, V73, V7, V8, V9, V10, V63))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V89 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V88, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V83)), V13))), V89 end(V85)) end end end end), V90 end(V80)) end end end end), V91 end(V75)) end end end end), V92 end(V70)) end end end end), V93 end(V60)) end end end end), V94 end(V31)) end end end end), V95 end(V25)) end end end end), V96 end(V20)) end end end end.
'un--checkQuote'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V19 = begin (V14 = V1), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V89 = begin (V24 = ('Idris.Idris2.Core.Core':'un--newRef'({'TTImp.Elab.Quote.Unq'}, []))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V88 = begin (V29 = ('un--getUnquote'(V1, V28, V3, V12))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V87 = begin (V52 = (((((begin (V46 = fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V40, V41, V42, V43, V44, V45)) end end end end end end), fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ((((((V46(V0))(V47))(V48))(V49))(V50))(V51)) end end end end end end(V11))(V23))(('un--onLHS'(case V8 of {'TTImp.Elab.Check.MkElabInfo', V34, V35, V36, V37, V38, V39} -> V34 end))))(V10))(V33))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V86 = begin (V62 = begin (V57 = V28), fun (V58) -> begin (V61 = (begin (V59 = V57), fun (V60) -> ('erlang':'get'(V59)) end end(V58))), {'Prelude.Types.Right', V61} end end end), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V85 = begin (V67 = ('Idris.Idris2.Core.Reflect':'un--getCon'(V0, V11, V23, ('Idris.Idris2.Core.Reflect':'un--reflectionttimp'(<<"TTImp"/utf8>>))))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V84 = begin (V72 = ('un--bindUnqs'(V0, V1, V2, V3, V4, V5, V6, V66, V7, V8, V9, V10, V56))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V83 = begin (V77 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V23, V10, V76))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V82 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V81, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V71)), V13))), V82 end(V78)) end end end end), V83 end(V73)) end end end end), V84 end(V68)) end end end end), V85 end(V63)) end end end end), V86 end(V53)) end end end end), V87 end(V30)) end end end end), V88 end(V25)) end end end end), V89 end(V20)) end end end end.
'un--bindUnqs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V7 of [] -> fun (V13) -> {'Prelude.Types.Right', V12} end; [E0 | E1] -> (fun (V14, V15) -> case V14 of {'Builtin.MkPair', V16, V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> begin (V25 = begin (V20 = V1), fun (V21) -> begin (V24 = (begin (V22 = V20), fun (V23) -> ('erlang':'get'(V22)) end end(V21))), {'Prelude.Types.Right', V24} end end end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V94 = begin (V62 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExactI'(('Idris.Idris2.Core.Reflect':'un--reflectionttimp'(<<"TTImp"/utf8>>)), case V29 of {'Core.Context.MkDefs', V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61} -> V30 end))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V93 = case V66 of {'Prelude.Types.Just', V67} -> case V67 of {'Builtin.MkPair', V68, V69} -> begin (V70 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V10, V11, V19, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V11, {'Core.TT.Ref', V18, {'Core.TT.TyCon', 0, 0}, {'Core.Name.Resolved', V68}}))}))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V90 = case V74 of {'Builtin.MkPair', V75, V76} -> begin (V77 = ('un--bindUnqs'(V0, V1, V2, V3, V4, V5, V6, V15, V8, V9, V10, V11, V12))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V89 = begin (V82 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V76))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V88 = fun (V87) -> {'Prelude.Types.Right', {'Core.TT.Bind', V18, V16, {'Core.TT.Let', V18, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V8)), V75, V86}, ('Idris.Idris2.Core.TT':'un--refToLocal'(V16, V16, V81))}} end), V88 end(V83)) end end end end), V89 end(V78)) end end end end end), V90 end(V71)) end end end end; _ -> fun (V91) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.UndefinedName', V18, ('Idris.Idris2.Core.Reflect':'un--reflectionttimp'(<<"TTImp"/utf8>>))}, V91)) end end; _ -> fun (V92) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.UndefinedName', V18, ('Idris.Idris2.Core.Reflect':'un--reflectionttimp'(<<"TTImp"/utf8>>))}, V92)) end end), V93 end(V63)) end end end end), V94 end(V26)) end end end end end end end(E0, E1)) end.
