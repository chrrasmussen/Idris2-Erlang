-module('Idris.Idris2.TTImp.ProcessBuiltin').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in case block in processIntegerToNat-14954'/19,
  'case--case block in case block in case block in processIntegerToNat-14906'/17,
  'case--case block in processIntegerToNat-14807'/11,
  'case--case block in case block in case block in processNatToInteger-14273'/18,
  'case--case block in case block in processNatToInteger-14225'/16,
  'case--case block in processNatToInteger-14167'/10,
  'case--case block in case block in processBuiltinNatural-13943'/10,
  'case--case block in checkNatCons,checkCon-13400'/11,
  'nested--8553-12944--in--un--isNatFlag'/4,
  'nested--7780-12225--in--un--isInteger'/5,
  'nested--8553-12945--in--un--hasNatFlag'/4,
  'nested--8714-13098--in--un--checkTyS'/6,
  'nested--8714-13099--in--un--checkCon'/6,
  'un--termConMatch'/2,
  'un--showDefType'/1,
  'un--processNatToInteger'/3,
  'un--processIntegerToNat'/3,
  'un--processBuiltinNatural'/3,
  'un--processBuiltin'/6,
  'un--isStrict'/1,
  'un--isNatural'/3,
  'un--getTypeCons'/2,
  'un--getReturnType'/2,
  'un--getNEIntegerIndex'/1,
  'un--getNEIndex'/1,
  'un--getNEArgs'/2,
  'un--getFirstNEType'/2,
  'un--getConsGDef'/3,
  'un--checkNatCons'/4
]).
'case--case block in case block in case block in case block in processIntegerToNat-14954'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Prelude.Types.Just', V19} -> begin (V20 = ('un--isNatural'(V0, V2, V19))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V29 = case V24 of 1 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V2, {'Core.Name.Resolved', V6}, {'Core.Context.Context.Identity', V15})); 0 -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, (begin (V27 = fun (V26) -> V26 end), fun (V28) -> (V27(V28)) end end(<<"Return type is not a \x{27}Nat\x{27}-like type"/utf8>>))}, V25)) end end), V29 end(V21)) end end end end; {'Prelude.Types.Nothing'} -> fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"No type constructor found for return type of "/utf8>>/binary, <<V3/binary, <<"."/utf8>>/binary>>/binary>>}, V30)) end end.
'case--case block in case block in case block in processIntegerToNat-14906'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Prelude.Types.Just', V17} -> case V17 of {'Builtin.DPair.MkDPair', V18, V19} -> ('case--case block in case block in case block in case block in processIntegerToNat-14954'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V19, ('un--getTypeCons'(V18, V19)))) end; {'Prelude.Types.Nothing'} -> fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Unexpected type "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V9))/binary>>}, V20)) end end.
'case--case block in processIntegerToNat-14807'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Core.Context.Context.PMDef', V11, V12, V13, V14, V15} -> begin (V16 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"builtin.IntegerToNatural"/utf8>>, 25, fun () -> <<<<"Type of "/utf8>>/binary, V3/binary>> end, V9))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V28 = case ('un--getNEIntegerIndex'(V9)) of {'Prelude.Types.Just', V21} -> case V21 of [E0 | E1] -> (fun (V22, V23) -> case V23 of [] -> ('case--case block in case block in case block in processIntegerToNat-14906'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, V12, V13, V14, V15, V22, ('un--getReturnType'([], V9)))); _ -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"More than one unrestricted arguments of type `Integer` found for "/utf8>>/binary, <<V3/binary, <<"."/utf8>>/binary>>/binary>>}, V24)) end end end(E0, E1)); [] -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"No unrestricted arguments of type `Integer` found for "/utf8>>/binary, <<V3/binary, <<"."/utf8>>/binary>>/binary>>}, V25)) end; _ -> fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"More than one unrestricted arguments of type `Integer` found for "/utf8>>/binary, <<V3/binary, <<"."/utf8>>/binary>>/binary>>}, V26)) end end; {'Prelude.Types.Nothing'} -> fun (V27) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Unexpected arity while processing %builtin IntegerToNatural "/utf8>>/binary, <<V3/binary, <<" (getNEIntegerIndex returned Nothing)"/utf8>>/binary>>/binary>>}, V27)) end end), V28 end(V17)) end end end end; _ -> fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"Expected function definition, found "/utf8>>/binary, <<('un--showDefType'(V10))/binary, <<"."/utf8>>/binary>>/binary>>}, V29)) end end.
'case--case block in case block in case block in processNatToInteger-14273'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Prelude.Types.Just', V18} -> begin (V19 = ('un--isNatural'(V0, V2, V18))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V30 = case V23 of 1 -> case ('un--getNEIndex'(V14)) of {'Prelude.Types.Just', V24} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V2, {'Core.Name.Resolved', V6}, {'Core.Context.Context.Identity', V24})); {'Prelude.Types.Nothing'} -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Couldn\x{27}t find non-erased argument."/utf8>>}, V25)) end end; 0 -> fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, (begin (V28 = fun (V27) -> V27 end), fun (V29) -> (V28(V29)) end end(<<"Non-erased argument is not a \x{27}Nat\x{27}-like type."/utf8>>))}, V26)) end end), V30 end(V20)) end end end end; {'Prelude.Types.Nothing'} -> fun (V31) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"No type constructor found for non-erased arguement of "/utf8>>/binary, <<V3/binary, <<"."/utf8>>/binary>>/binary>>}, V31)) end end.
'case--case block in case block in processNatToInteger-14225'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Builtin.DPair.MkDPair', V18, V19} -> case V17 of [] -> ('case--case block in case block in case block in processNatToInteger-14273'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V18, V19, ('un--getTypeCons'(V18, V19)))); _ -> fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"More than 1 non-erased arguments found for "/utf8>>/binary, <<V3/binary, <<"."/utf8>>/binary>>/binary>>}, V20)) end end; _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"More than 1 non-erased arguments found for "/utf8>>/binary, <<V3/binary, <<"."/utf8>>/binary>>/binary>>}, V21)) end end end(E0, E1)); [] -> fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"No arguments found for "/utf8>>/binary, <<V3/binary, <<"."/utf8>>/binary>>/binary>>}, V22)) end; _ -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"More than 1 non-erased arguments found for "/utf8>>/binary, <<V3/binary, <<"."/utf8>>/binary>>/binary>>}, V23)) end end.
'case--case block in processNatToInteger-14167'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Context.Context.PMDef', V10, V11, V12, V13, V14} -> begin (V41 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V17, V18)) end end}, case V7 of {'Core.Context.Context.MkGlobalDef', V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V21 end))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V52 = begin (V46 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"builtin.NaturalToInteger"/utf8>>, 25, fun () -> <<<<"Type of "/utf8>>/binary, V3/binary>> end, V45))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V51 = ('case--case block in case block in processNatToInteger-14225'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V11, V12, V14, V13, V45, ('un--getNEArgs'([], V45))))), V51 end(V47)) end end end end), V52 end(V42)) end end end end; _ -> fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"Expected function definition, found "/utf8>>/binary, <<('un--showDefType'(V9))/binary, <<"."/utf8>>/binary>>/binary>>}, V53)) end end.
'case--case block in case block in processBuiltinNatural-13943'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Context.Context.TCon', V10, V11, V12, V13, V14, V15, V16, V17} -> begin (V18 = ('un--getConsGDef'(V0, V2, V16))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V55 = ('un--checkNatCons'(case V3 of {'Core.Context.MkDefs', V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54} -> V23 end, V22, V5, V2))), V55 end(V19)) end end end end; _ -> fun (V56) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"Expected a type constructor, found "/utf8>>/binary, <<('un--showDefType'(V9))/binary, <<"."/utf8>>/binary>>/binary>>}, V56)) end end.
'case--case block in checkNatCons,checkCon-13400'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Core.Context.Context.DCon', V11, V12, V13} -> case ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V12 - ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(case V5 of {'Core.Context.Context.MkGlobalDef', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} -> V17 end))))) of 0 -> fun (V36) -> case V7 of {'Prelude.Types.Just', V37} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V0, <<(begin (V39 = fun (V38) -> V38 end), fun (V40) -> (V39(V40)) end end(<<"Multiple \x{27}Z\x{27}-like constructors for "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary, <<"."/utf8>>/binary>>/binary>>}, V36)); {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Just', V4}, V8}} end end; _ -> begin (V63 = (('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V12 - ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(case V5 of {'Core.Context.Context.MkGlobalDef', V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62} -> V44 end))))) - 1)), case V63 of 0 -> case V8 of {'Prelude.Types.Just', V64} -> fun (V65) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V0, <<(begin (V67 = fun (V66) -> V66 end), fun (V68) -> (V67(V68)) end end(<<"Multiple \x{27}S\x{27}-like constructors for "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary, <<"."/utf8>>/binary>>/binary>>}, V65)) end; {'Prelude.Types.Nothing'} -> begin (V69 = ('nested--8714-13098--in--un--checkTyS'(V0, V1, V2, V3, V4, V5))), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V75 = fun (V74) -> {'Prelude.Types.Right', {'Builtin.MkPair', V7, {'Prelude.Types.Just', V4}}} end), V75 end(V70)) end end end end end; _ -> fun (V76) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V0, <<<<"Constructor "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary, <<" doesn\x{27}t match any pattern for Natural."/utf8>>/binary>>/binary>>}, V76)) end end end end; _ -> fun (V77) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V0, <<<<"Expected data constructor, found:"/utf8>>/binary, ('un--showDefType'(V10))/binary>>}, V77)) end end.
'nested--8553-12944--in--un--isNatFlag'(V0, V1, V2, V3) -> case V3 of {'Core.Context.Context.ConType', V4} -> case V4 of {'Core.CompileExpr.ZERO'} -> 1; {'Core.CompileExpr.SUCC'} -> 1; _ -> 0 end; _ -> 0 end.
'nested--7780-12225--in--un--isInteger'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.PrimVal', V5, V6} -> case V6 of {'Core.TT.PrT', V7} -> case V7 of 5 -> 1; _ -> 0 end; _ -> 0 end; _ -> 0 end.
'nested--8553-12945--in--un--hasNatFlag'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V6, V7)) end end, 0}, fun (V8) -> ('nested--8553-12944--in--un--isNatFlag'(V0, V1, V2, V8)) end, case V5 of {'Core.Context.Context.MkGlobalDef', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} -> V20 end)) end.
'nested--8714-13098--in--un--checkTyS'(V0, V1, V2, V3, V4, V5) -> begin (V28 = case V5 of {'Core.Context.Context.MkGlobalDef', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} -> V8 end), case ('un--getFirstNEType'([], V28)) of {'Prelude.Types.Just', V29} -> case V29 of {'Builtin.DPair.MkDPair', V30, V31} -> case ('un--getReturnType'([], V28)) of {'Prelude.Types.Just', V32} -> case V32 of {'Builtin.DPair.MkDPair', V33, V34} -> begin (V36 = fun (V35) -> case ('un--termConMatch'(V31, V34)) of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V0, <<<<"Incorrect type for \x{27}S\x{27}-like constructor for "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary, <<"."/utf8>>/binary>>/binary>>}, V35)) end end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V49 = begin (V42 = fun (V41) -> case ('un--isStrict'(V31)) of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V0, <<"Natural builtin does not support lazy types."/utf8>>}, V41)) end end), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V48 = fun (V47) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end), V48 end(V43)) end end end end), V49 end(V37)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V50) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Unexpected type "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V28))/binary>>}, V50)) end end end; {'Prelude.Types.Nothing'} -> fun (V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Expected a non-erased argument, found none."/utf8>>}, V51)) end end end.
'nested--8714-13099--in--un--checkCon'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> begin (V8 = V5), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V38 = case V12 of {'Builtin.MkPair', V13, V14} -> begin (V15 = {'Builtin.MkPair', V13, V14}), ('case--case block in checkNatCons,checkCon-13400'(V0, V1, V2, V3, V6, V7, V5, V13, V14, V15, case V7 of {'Core.Context.Context.MkGlobalDef', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} -> V33 end)) end end), V38 end(V9)) end end end end end.
'un--termConMatch'(V0, V1) -> case V0 of {'Core.TT.Local', V2, V3, V4} -> case V1 of {'Core.TT.Local', V5, V6, V7} -> case (V4 =:= V7) of 'false' -> 0; _ -> 1 end; _ -> case V1 of {'Core.TT.TDelayed', V8, V9, V10} -> ('un--termConMatch'(V0, V10)); _ -> case V0 of {'Core.TT.TDelay', V11, V12, V13, V14} -> case V1 of {'Core.TT.TDelay', V15, V16, V17, V18} -> case ('un--termConMatch'(V13, V17)) of 1 -> ('un--termConMatch'(V14, V18)); 0 -> 0 end; _ -> case V1 of {'Core.TT.TForce', V19, V20, V21} -> ('un--termConMatch'(V0, V21)); _ -> case V0 of {'Core.TT.PrimVal', V22, V23} -> case V1 of {'Core.TT.PrimVal', V24, V25} -> 1; _ -> 0 end; {'Core.TT.Erased', V26, V27} -> case V1 of {'Core.TT.Erased', V28, V29} -> 1; _ -> 0 end; {'Core.TT.TType', V30, V31} -> case V1 of {'Core.TT.TType', V32, V33} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.TForce', V34, V35, V36} -> ('un--termConMatch'(V36, V1)); _ -> case V1 of {'Core.TT.TForce', V37, V38, V39} -> ('un--termConMatch'(V0, V39)); _ -> case V0 of {'Core.TT.PrimVal', V40, V41} -> case V1 of {'Core.TT.PrimVal', V42, V43} -> 1; _ -> 0 end; {'Core.TT.Erased', V44, V45} -> case V1 of {'Core.TT.Erased', V46, V47} -> 1; _ -> 0 end; {'Core.TT.TType', V48, V49} -> case V1 of {'Core.TT.TType', V50, V51} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.Ref', V52, V53, V54} -> case V1 of {'Core.TT.Ref', V55, V56, V57} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V54, V57)); _ -> case V1 of {'Core.TT.TDelayed', V58, V59, V60} -> ('un--termConMatch'(V0, V60)); _ -> case V0 of {'Core.TT.TDelay', V61, V62, V63, V64} -> case V1 of {'Core.TT.TDelay', V65, V66, V67, V68} -> case ('un--termConMatch'(V63, V67)) of 1 -> ('un--termConMatch'(V64, V68)); 0 -> 0 end; _ -> case V1 of {'Core.TT.TForce', V69, V70, V71} -> ('un--termConMatch'(V0, V71)); _ -> case V0 of {'Core.TT.PrimVal', V72, V73} -> case V1 of {'Core.TT.PrimVal', V74, V75} -> 1; _ -> 0 end; {'Core.TT.Erased', V76, V77} -> case V1 of {'Core.TT.Erased', V78, V79} -> 1; _ -> 0 end; {'Core.TT.TType', V80, V81} -> case V1 of {'Core.TT.TType', V82, V83} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.TForce', V84, V85, V86} -> ('un--termConMatch'(V86, V1)); _ -> case V1 of {'Core.TT.TForce', V87, V88, V89} -> ('un--termConMatch'(V0, V89)); _ -> case V0 of {'Core.TT.PrimVal', V90, V91} -> case V1 of {'Core.TT.PrimVal', V92, V93} -> 1; _ -> 0 end; {'Core.TT.Erased', V94, V95} -> case V1 of {'Core.TT.Erased', V96, V97} -> 1; _ -> 0 end; {'Core.TT.TType', V98, V99} -> case V1 of {'Core.TT.TType', V100, V101} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.Meta', V102, V103, V104, V105} -> case V1 of {'Core.TT.Meta', V106, V107, V108, V109} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V104, V108)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V110, V111)) end end, 1}, fun (V112) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V113) -> fun (V114) -> ('un--termConMatch'(V113, V114)) end end, V112)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V105, V109)))); 0 -> 0 end; _ -> case V1 of {'Core.TT.TDelayed', V115, V116, V117} -> ('un--termConMatch'(V0, V117)); _ -> case V0 of {'Core.TT.TDelay', V118, V119, V120, V121} -> case V1 of {'Core.TT.TDelay', V122, V123, V124, V125} -> case ('un--termConMatch'(V120, V124)) of 1 -> ('un--termConMatch'(V121, V125)); 0 -> 0 end; _ -> case V1 of {'Core.TT.TForce', V126, V127, V128} -> ('un--termConMatch'(V0, V128)); _ -> case V0 of {'Core.TT.PrimVal', V129, V130} -> case V1 of {'Core.TT.PrimVal', V131, V132} -> 1; _ -> 0 end; {'Core.TT.Erased', V133, V134} -> case V1 of {'Core.TT.Erased', V135, V136} -> 1; _ -> 0 end; {'Core.TT.TType', V137, V138} -> case V1 of {'Core.TT.TType', V139, V140} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.TForce', V141, V142, V143} -> ('un--termConMatch'(V143, V1)); _ -> case V1 of {'Core.TT.TForce', V144, V145, V146} -> ('un--termConMatch'(V0, V146)); _ -> case V0 of {'Core.TT.PrimVal', V147, V148} -> case V1 of {'Core.TT.PrimVal', V149, V150} -> 1; _ -> 0 end; {'Core.TT.Erased', V151, V152} -> case V1 of {'Core.TT.Erased', V153, V154} -> 1; _ -> 0 end; {'Core.TT.TType', V155, V156} -> case V1 of {'Core.TT.TType', V157, V158} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.Bind', V159, V160, V161, V162} -> case V1 of {'Core.TT.Bind', V163, V164, V165, V166} -> case ('Idris.Idris2.Core.TT':'un--eqBinderBy'(fun (V167) -> fun (V168) -> ('un--termConMatch'(V167, V168)) end end, V161, V165)) of 1 -> ('un--termConMatch'(V162, V166)); 0 -> 0 end; _ -> case V1 of {'Core.TT.TDelayed', V169, V170, V171} -> ('un--termConMatch'(V0, V171)); _ -> case V0 of {'Core.TT.TDelay', V172, V173, V174, V175} -> case V1 of {'Core.TT.TDelay', V176, V177, V178, V179} -> case ('un--termConMatch'(V174, V178)) of 1 -> ('un--termConMatch'(V175, V179)); 0 -> 0 end; _ -> case V1 of {'Core.TT.TForce', V180, V181, V182} -> ('un--termConMatch'(V0, V182)); _ -> case V0 of {'Core.TT.PrimVal', V183, V184} -> case V1 of {'Core.TT.PrimVal', V185, V186} -> 1; _ -> 0 end; {'Core.TT.Erased', V187, V188} -> case V1 of {'Core.TT.Erased', V189, V190} -> 1; _ -> 0 end; {'Core.TT.TType', V191, V192} -> case V1 of {'Core.TT.TType', V193, V194} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.TForce', V195, V196, V197} -> ('un--termConMatch'(V197, V1)); _ -> case V1 of {'Core.TT.TForce', V198, V199, V200} -> ('un--termConMatch'(V0, V200)); _ -> case V0 of {'Core.TT.PrimVal', V201, V202} -> case V1 of {'Core.TT.PrimVal', V203, V204} -> 1; _ -> 0 end; {'Core.TT.Erased', V205, V206} -> case V1 of {'Core.TT.Erased', V207, V208} -> 1; _ -> 0 end; {'Core.TT.TType', V209, V210} -> case V1 of {'Core.TT.TType', V211, V212} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.App', V213, V214, V215} -> case V1 of {'Core.TT.App', V216, V217, V218} -> ('un--termConMatch'(V214, V217)); _ -> case V1 of {'Core.TT.TDelayed', V219, V220, V221} -> ('un--termConMatch'(V0, V221)); _ -> case V0 of {'Core.TT.TDelay', V222, V223, V224, V225} -> case V1 of {'Core.TT.TDelay', V226, V227, V228, V229} -> case ('un--termConMatch'(V224, V228)) of 1 -> ('un--termConMatch'(V225, V229)); 0 -> 0 end; _ -> case V1 of {'Core.TT.TForce', V230, V231, V232} -> ('un--termConMatch'(V0, V232)); _ -> case V0 of {'Core.TT.PrimVal', V233, V234} -> case V1 of {'Core.TT.PrimVal', V235, V236} -> 1; _ -> 0 end; {'Core.TT.Erased', V237, V238} -> case V1 of {'Core.TT.Erased', V239, V240} -> 1; _ -> 0 end; {'Core.TT.TType', V241, V242} -> case V1 of {'Core.TT.TType', V243, V244} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.TForce', V245, V246, V247} -> ('un--termConMatch'(V247, V1)); _ -> case V1 of {'Core.TT.TForce', V248, V249, V250} -> ('un--termConMatch'(V0, V250)); _ -> case V0 of {'Core.TT.PrimVal', V251, V252} -> case V1 of {'Core.TT.PrimVal', V253, V254} -> 1; _ -> 0 end; {'Core.TT.Erased', V255, V256} -> case V1 of {'Core.TT.Erased', V257, V258} -> 1; _ -> 0 end; {'Core.TT.TType', V259, V260} -> case V1 of {'Core.TT.TType', V261, V262} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.As', V263, V264, V265, V266} -> case V1 of {'Core.TT.As', V267, V268, V269, V270} -> case ('un--termConMatch'(V265, V269)) of 1 -> ('un--termConMatch'(V266, V270)); 0 -> 0 end; _ -> case V1 of {'Core.TT.TDelayed', V271, V272, V273} -> ('un--termConMatch'(V0, V273)); _ -> case V0 of {'Core.TT.TDelay', V274, V275, V276, V277} -> case V1 of {'Core.TT.TDelay', V278, V279, V280, V281} -> case ('un--termConMatch'(V276, V280)) of 1 -> ('un--termConMatch'(V277, V281)); 0 -> 0 end; _ -> case V1 of {'Core.TT.TForce', V282, V283, V284} -> ('un--termConMatch'(V0, V284)); _ -> case V0 of {'Core.TT.PrimVal', V285, V286} -> case V1 of {'Core.TT.PrimVal', V287, V288} -> 1; _ -> 0 end; {'Core.TT.Erased', V289, V290} -> case V1 of {'Core.TT.Erased', V291, V292} -> 1; _ -> 0 end; {'Core.TT.TType', V293, V294} -> case V1 of {'Core.TT.TType', V295, V296} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.TForce', V297, V298, V299} -> ('un--termConMatch'(V299, V1)); _ -> case V1 of {'Core.TT.TForce', V300, V301, V302} -> ('un--termConMatch'(V0, V302)); _ -> case V0 of {'Core.TT.PrimVal', V303, V304} -> case V1 of {'Core.TT.PrimVal', V305, V306} -> 1; _ -> 0 end; {'Core.TT.Erased', V307, V308} -> case V1 of {'Core.TT.Erased', V309, V310} -> 1; _ -> 0 end; {'Core.TT.TType', V311, V312} -> case V1 of {'Core.TT.TType', V313, V314} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.TDelayed', V315, V316, V317} -> ('un--termConMatch'(V317, V1)); _ -> case V1 of {'Core.TT.TDelayed', V318, V319, V320} -> ('un--termConMatch'(V0, V320)); _ -> case V0 of {'Core.TT.TDelay', V321, V322, V323, V324} -> case V1 of {'Core.TT.TDelay', V325, V326, V327, V328} -> case ('un--termConMatch'(V323, V327)) of 1 -> ('un--termConMatch'(V324, V328)); 0 -> 0 end; _ -> case V1 of {'Core.TT.TForce', V329, V330, V331} -> ('un--termConMatch'(V0, V331)); _ -> case V0 of {'Core.TT.PrimVal', V332, V333} -> case V1 of {'Core.TT.PrimVal', V334, V335} -> 1; _ -> 0 end; {'Core.TT.Erased', V336, V337} -> case V1 of {'Core.TT.Erased', V338, V339} -> 1; _ -> 0 end; {'Core.TT.TType', V340, V341} -> case V1 of {'Core.TT.TType', V342, V343} -> 1; _ -> 0 end; _ -> 0 end end end; {'Core.TT.TForce', V344, V345, V346} -> ('un--termConMatch'(V346, V1)); _ -> case V1 of {'Core.TT.TForce', V347, V348, V349} -> ('un--termConMatch'(V0, V349)); _ -> case V0 of {'Core.TT.PrimVal', V350, V351} -> case V1 of {'Core.TT.PrimVal', V352, V353} -> 1; _ -> 0 end; {'Core.TT.Erased', V354, V355} -> case V1 of {'Core.TT.Erased', V356, V357} -> 1; _ -> 0 end; {'Core.TT.TType', V358, V359} -> case V1 of {'Core.TT.TType', V360, V361} -> 1; _ -> 0 end; _ -> 0 end end end end end.
'un--showDefType'(V0) -> case V0 of {'Core.Context.Context.None'} -> <<"undefined"/utf8>>; {'Core.Context.Context.PMDef', V1, V2, V3, V4, V5} -> <<"function"/utf8>>; {'Core.Context.Context.ExternDef', V6} -> <<"external function"/utf8>>; {'Core.Context.Context.ForeignDef', V7, V8} -> <<"foreign function"/utf8>>; {'Core.Context.Context.Builtin', V9, V10} -> <<"builtin function"/utf8>>; {'Core.Context.Context.DCon', V11, V12, V13} -> <<"data constructor"/utf8>>; {'Core.Context.Context.TCon', V14, V15, V16, V17, V18, V19, V20, V21} -> <<"type constructor"/utf8>>; {'Core.Context.Context.Hole', V22, V23} -> <<"hole"/utf8>>; {'Core.Context.Context.BySearch', V24, V25, V26} -> <<"search"/utf8>>; {'Core.Context.Context.Guess', V27, V28, V29} -> <<"guess"/utf8>>; {'Core.Context.Context.ImpBind'} -> <<"bound name"/utf8>>; {'Core.Context.Context.UniverseLevel', V30} -> <<"universe level"/utf8>>; {'Core.Context.Context.Delayed'} -> <<"delayed"/utf8>> end.
'un--processNatToInteger'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))), begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V135 = begin (V14 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.NaturalToInteger"/utf8>>, 5, fun () -> <<<<"Processing %builtin NaturalToInteger "/utf8>>/binary, <<V3/binary, <<"."/utf8>>/binary>>/binary>> end))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V134 = begin (V51 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V2, case V13 of {'Core.Context.MkDefs', V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> V19 end))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V133 = case V55 of [E0 | E1] -> (fun (V56, V57) -> case V56 of {'Builtin.MkPair', V58, V59} -> case V59 of {'Builtin.MkPair', V60, V61} -> case V57 of [] -> begin (V62 = [{'Builtin.MkPair', V58, {'Builtin.MkPair', V60, V61}} | []]), ('case--case block in processNatToInteger-14167'(V0, V2, V1, V3, V13, V58, V60, V61, V62, case V61 of {'Core.Context.Context.MkGlobalDef', V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84} -> V80 end)) end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V94 = fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V92, V93)) end end end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end(fun (V85) -> case V85 of {'Builtin.MkPair', V86, V87} -> case V87 of {'Builtin.MkPair', V88, V89} -> V86 end end end))(V55)))) end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V106 = fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V104, V105)) end end end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V97) -> case V97 of {'Builtin.MkPair', V98, V99} -> case V99 of {'Builtin.MkPair', V100, V101} -> V98 end end end))(V55)))) end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V118 = fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V116, V117)) end end end end), fun (V119) -> fun (V120) -> ((((V118('erased'))('erased'))(V119))(V120)) end end end(fun (V109) -> case V109 of {'Builtin.MkPair', V110, V111} -> case V111 of {'Builtin.MkPair', V112, V113} -> V110 end end end))(V55)))) end end(E0, E1)); _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V130 = fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V128, V129)) end end end end), fun (V131) -> fun (V132) -> ((((V130('erased'))('erased'))(V131))(V132)) end end end(fun (V121) -> case V121 of {'Builtin.MkPair', V122, V123} -> case V123 of {'Builtin.MkPair', V124, V125} -> V122 end end end))(V55)))) end), V133 end(V52)) end end end end), V134 end(V15)) end end end end), V135 end(V10)) end end end end end.
'un--processIntegerToNat'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))), begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V167 = begin (V14 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.IntegerToNatural"/utf8>>, 5, fun () -> <<<<"Processing %builtin IntegerToNatural "/utf8>>/binary, <<V3/binary, <<"."/utf8>>/binary>>/binary>> end))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V166 = begin (V51 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V2, case V13 of {'Core.Context.MkDefs', V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> V19 end))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V165 = case V55 of [E0 | E1] -> (fun (V56, V57) -> case V56 of {'Builtin.MkPair', V58, V59} -> case V59 of {'Builtin.MkPair', V60, V61} -> case V57 of [] -> begin (V88 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V64, V65)) end end}, case V61 of {'Core.Context.Context.MkGlobalDef', V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} -> V68 end))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V116 = begin (V93 = [{'Builtin.MkPair', V58, {'Builtin.MkPair', V60, V61}} | []]), ('case--case block in processIntegerToNat-14807'(V0, V2, V1, V3, V13, V58, V60, V61, V93, V92, case V61 of {'Core.Context.Context.MkGlobalDef', V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115} -> V111 end)) end), V116 end(V89)) end end end end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V126 = fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V124, V125)) end end end end), fun (V127) -> fun (V128) -> ((((V126('erased'))('erased'))(V127))(V128)) end end end(fun (V117) -> case V117 of {'Builtin.MkPair', V118, V119} -> case V119 of {'Builtin.MkPair', V120, V121} -> V118 end end end))(V55)))) end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V138 = fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V136, V137)) end end end end), fun (V139) -> fun (V140) -> ((((V138('erased'))('erased'))(V139))(V140)) end end end(fun (V129) -> case V129 of {'Builtin.MkPair', V130, V131} -> case V131 of {'Builtin.MkPair', V132, V133} -> V130 end end end))(V55)))) end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V150 = fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V148, V149)) end end end end), fun (V151) -> fun (V152) -> ((((V150('erased'))('erased'))(V151))(V152)) end end end(fun (V141) -> case V141 of {'Builtin.MkPair', V142, V143} -> case V143 of {'Builtin.MkPair', V144, V145} -> V142 end end end))(V55)))) end end(E0, E1)); _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V162 = fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V160, V161)) end end end end), fun (V163) -> fun (V164) -> ((((V162('erased'))('erased'))(V163))(V164)) end end end(fun (V153) -> case V153 of {'Builtin.MkPair', V154, V155} -> case V155 of {'Builtin.MkPair', V156, V157} -> V154 end end end))(V55)))) end), V165 end(V52)) end end end end), V166 end(V15)) end end end end), V167 end(V10)) end end end end end.
'un--processBuiltinNatural'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V141 = begin (V13 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.Natural"/utf8>>, 5, fun () -> <<<<"Processing %builtin Natural "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary, <<"."/utf8>>/binary>>/binary>> end))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V140 = begin (V50 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V2, case V12 of {'Core.Context.MkDefs', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} -> V18 end))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V139 = case V54 of [E0 | E1] -> (fun (V55, V56) -> case V55 of {'Builtin.MkPair', V57, V58} -> case V58 of {'Builtin.MkPair', V59, V60} -> case V56 of [] -> begin (V61 = ('un--isNatural'(V0, V1, V57))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V90 = begin (V66 = [{'Builtin.MkPair', V57, {'Builtin.MkPair', V59, V60}} | []]), case V65 of 0 -> ('case--case block in case block in processBuiltinNatural-13943'(V0, V2, V1, V12, V59, V57, V60, V66, 0, case V60 of {'Core.Context.Context.MkGlobalDef', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88} -> V84 end)); 1 -> fun (V89) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end), V90 end(V62)) end end end end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V100 = fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V98, V99)) end end end end), fun (V101) -> fun (V102) -> ((((V100('erased'))('erased'))(V101))(V102)) end end end(fun (V91) -> case V91 of {'Builtin.MkPair', V92, V93} -> case V93 of {'Builtin.MkPair', V94, V95} -> V92 end end end))(V54)))) end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V112 = fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V110, V111)) end end end end), fun (V113) -> fun (V114) -> ((((V112('erased'))('erased'))(V113))(V114)) end end end(fun (V103) -> case V103 of {'Builtin.MkPair', V104, V105} -> case V105 of {'Builtin.MkPair', V106, V107} -> V104 end end end))(V54)))) end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V124 = fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V122, V123)) end end end end), fun (V125) -> fun (V126) -> ((((V124('erased'))('erased'))(V125))(V126)) end end end(fun (V115) -> case V115 of {'Builtin.MkPair', V116, V117} -> case V117 of {'Builtin.MkPair', V118, V119} -> V116 end end end))(V54)))) end end(E0, E1)); _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V2, ((begin (V136 = fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V134, V135)) end end end end), fun (V137) -> fun (V138) -> ((((V136('erased'))('erased'))(V137))(V138)) end end end(fun (V127) -> case V127 of {'Builtin.MkPair', V128, V129} -> case V129 of {'Builtin.MkPair', V130, V131} -> V128 end end end))(V54)))) end), V139 end(V51)) end end end end), V140 end(V14)) end end end end), V141 end(V9)) end end end end.
'un--processBuiltin'(V0, V1, V2, V3, V4, V5) -> case V4 of 0 -> ('un--processBuiltinNatural'(V0, V3, V5)); 1 -> ('un--processNatToInteger'(V0, V3, V5)); 2 -> ('un--processIntegerToNat'(V0, V3, V5)) end.
'un--isStrict'(V0) -> case V0 of {'Core.TT.Local', V1, V2, V3} -> 1; {'Core.TT.Ref', V4, V5, V6} -> 1; {'Core.TT.Meta', V7, V8, V9, V10} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V11, V12)) end end, 1}, fun (V13) -> ('un--isStrict'(V13)) end, V10)); {'Core.TT.Bind', V14, V15, V16, V17} -> case ('un--isStrict'(('Idris.Idris2.Core.TT':'un--binderType'(V16)))) of 1 -> ('un--isStrict'(V17)); 0 -> 0 end; {'Core.TT.App', V18, V19, V20} -> case ('un--isStrict'(V19)) of 1 -> ('un--isStrict'(V20)); 0 -> 0 end; {'Core.TT.As', V21, V22, V23, V24} -> case ('un--isStrict'(V23)) of 1 -> ('un--isStrict'(V24)); 0 -> 0 end; {'Core.TT.TDelayed', V25, V26, V27} -> 0; {'Core.TT.TDelay', V28, V29, V30, V31} -> case ('un--isStrict'(V30)) of 1 -> ('un--isStrict'(V31)); 0 -> 0 end; {'Core.TT.TForce', V32, V33, V34} -> ('un--isStrict'(V34)); {'Core.TT.PrimVal', V35, V36} -> 1; {'Core.TT.Erased', V37, V38} -> 1; {'Core.TT.TType', V39, V40} -> 1 end.
'un--isNatural'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V93 = begin (V45 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V92 = case V49 of {'Prelude.Types.Just', V50} -> case V50 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> case V68 of {'Core.Context.Context.TCon', V73, V74, V75, V76, V77, V78, V79, V80} -> begin (V81 = ('un--getConsGDef'(V0, V1, V79))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V90 = fun (V86) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V87, V88)) end end, 1}, fun (V89) -> ('nested--8553-12945--in--un--hasNatFlag'(V0, V2, V1, V89)) end, V85))} end), V90 end(V82)) end end end end; _ -> fun (V91) -> {'Prelude.Types.Right', 0} end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, {'Core.FC.EmptyFC'}, V2)) end), V92 end(V46)) end end end end), V93 end(V9)) end end end end.
'un--getTypeCons'(V0, V1) -> case V1 of {'Core.TT.Local', V2, V3, V4} -> {'Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--nameAt'(V0, V4))}; {'Core.TT.Ref', V5, V6, V7} -> {'Prelude.Types.Just', V7}; {'Core.TT.Meta', V8, V9, V10, V11} -> {'Prelude.Types.Nothing'}; {'Core.TT.Bind', V12, V13, V14, V15} -> case V14 of {'Core.TT.Let', V16, V17, V18, V19} -> ('un--getTypeCons'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V18, V15)))); _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.App', V20, V21, V22} -> ('un--getTypeCons'(V0, V21)); _ -> {'Prelude.Types.Nothing'} end.
'un--getReturnType'(V0, V1) -> case V1 of {'Core.TT.Bind', V2, V3, V4, V5} -> case V4 of {'Core.TT.Let', V6, V7, V8, V9} -> ('un--getReturnType'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V8, V5)))); {'Core.TT.Pi', V10, V11, V12, V13} -> ('un--getReturnType'([V3 | V0], V5)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Just', {'Builtin.DPair.MkDPair', V0, V1}} end.
'un--getNEIntegerIndex'(V0) -> case V0 of {'Core.TT.Bind', V1, V2, V3, V4} -> case V3 of {'Core.TT.Let', V5, V6, V7, V8} -> ('un--getNEIntegerIndex'(('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V7, V4)))); {'Core.TT.Pi', V9, V10, V11, V12} -> begin (V13 = {'Core.TT.Pi', V9, V10, V11, V12}), case case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V14, V15)) end end, 0, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V16, V17)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, V10)) of 1 -> 0; 0 -> ('nested--7780-12225--in--un--isInteger'(V1, V2, V4, V13, V12)) end of 1 -> ((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(fun (V22) -> [0 | ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V23) -> (V23 + 1) end))(V22))] end))(('un--getNEIntegerIndex'(V4)))); 0 -> ('un--getNEIntegerIndex'(V4)) end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Just', []} end.
'un--getNEIndex'(V0) -> case V0 of {'Core.TT.Bind', V1, V2, V3, V4} -> case V3 of {'Core.TT.Let', V5, V6, V7, V8} -> ('un--getNEIndex'(('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V7, V4)))); {'Core.TT.Pi', V9, V10, V11, V12} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V13, V14)) end end, 0, fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V15, V16)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V19, V20)) end end}}, V10)) of 1 -> ('un--getNEIndex'(V4)); 0 -> {'Prelude.Types.Just', 0} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--getNEArgs'(V0, V1) -> case V1 of {'Core.TT.Bind', V2, V3, V4, V5} -> case V4 of {'Core.TT.Let', V6, V7, V8, V9} -> ('un--getNEArgs'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V8, V5)))); {'Core.TT.Pi', V10, V11, V12, V13} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V14, V15)) end end, 0, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V16, V17)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, V11)) of 1 -> ('un--getNEArgs'([V3 | V0], V5)); 0 -> [{'Builtin.DPair.MkDPair', V0, V13} | ('un--getNEArgs'([V3 | V0], V5))] end; _ -> [] end; _ -> [] end.
'un--getFirstNEType'(V0, V1) -> case ('un--getNEArgs'(V0, V1)) of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> {'Prelude.Types.Just', V2} end(E0, E1)) end.
'un--getConsGDef'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V110 = begin (V45 = case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end), ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V46, V47, [])) end end, V2, fun (V48) -> begin (V49 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V48, V45))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V109 = case V53 of [E0 | E1] -> (fun (V54, V55) -> case V54 of {'Builtin.MkPair', V56, V57} -> case V57 of {'Builtin.MkPair', V58, V59} -> case V55 of [] -> fun (V60) -> {'Prelude.Types.Right', {'Builtin.MkPair', V56, V59}} end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V48, ((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V61) -> case V61 of {'Builtin.MkPair', V62, V63} -> case V63 of {'Builtin.MkPair', V64, V65} -> V62 end end end))(V53)))) end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V48, ((begin (V82 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V80, V81)) end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V73) -> case V73 of {'Builtin.MkPair', V74, V75} -> case V75 of {'Builtin.MkPair', V76, V77} -> V74 end end end))(V53)))) end; _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V48, ((begin (V94 = fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V92, V93)) end end end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end(fun (V85) -> case V85 of {'Builtin.MkPair', V86, V87} -> case V87 of {'Builtin.MkPair', V88, V89} -> V86 end end end))(V53)))) end end(E0, E1)); _ -> ('Idris.Idris2.Core.Context':'un--ambiguousName'(V0, V1, V48, ((begin (V106 = fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V104, V105)) end end end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V97) -> case V97 of {'Builtin.MkPair', V98, V99} -> case V99 of {'Builtin.MkPair', V100, V101} -> V98 end end end))(V53)))) end), V109 end(V50)) end end end end end)) end), V110 end(V9)) end end end end.
'un--checkNatCons'(V0, V1, V2, V3) -> begin (V7 = ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V4) -> fun (V5) -> ('nested--8714-13099--in--un--checkCon'(V3, V2, V1, V0, V4, V5)) end end, fun (V6) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}}} end, V1))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V26 = case V11 of {'Builtin.MkPair', V12, V13} -> fun (V14) -> case V12 of {'Prelude.Types.Just', V15} -> case V13 of {'Prelude.Types.Just', V16} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; _ -> case V13 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V3, <<(begin (V18 = fun (V17) -> V17 end), fun (V19) -> (V18(V19)) end end(<<"No \x{27}S\x{27}-like constructors for "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary, <<"."/utf8>>/binary>>/binary>>}, V14)) end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V3, <<(begin (V21 = fun (V20) -> V20 end), fun (V22) -> (V21(V22)) end end(<<"No \x{27}Z\x{27}-like constructors for "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary, <<"."/utf8>>/binary>>/binary>>}, V14)); _ -> case V13 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V3, <<(begin (V24 = fun (V23) -> V23 end), fun (V25) -> (V24(V25)) end end(<<"No \x{27}S\x{27}-like constructors for "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary, <<"."/utf8>>/binary>>/binary>>}, V14)) end end end end), V26 end(V8)) end end end end.
