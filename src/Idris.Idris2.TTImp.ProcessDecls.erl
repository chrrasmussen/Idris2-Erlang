-module('Idris.Idris2.TTImp.ProcessDecls').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--14849-14185--in--un--bindNames'/10,
  'nested--14849-14184--in--un--bindDataNames'/10,
  'nested--14849-14183--in--un--bindConNames'/10,
  'un--processTTImpFile'/6,
  'un--processTTImpDecls'/9,
  'un--processFailing'/12,
  'un--processDecls'/9,
  'un--process'/10
]).
'nested--14849-14185--in--un--bindNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'TTImp.TTImp.IClaim', V10, V11, V12, V13, V14} -> case V14 of {'TTImp.TTImp.MkImpTy', V15, V16, V17, V18} -> begin (V19 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V8, V10, [], V1, V18))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', {'TTImp.TTImp.IClaim', V10, V11, V12, V13, {'TTImp.TTImp.MkImpTy', V15, V16, V17, V23}}} end), V25 end(V20)) end end end end; _ -> fun (V26) -> {'Prelude.Types.Right', V9} end end; {'TTImp.TTImp.IData', V27, V28, V29, V30} -> begin (V31 = ('nested--14849-14184--in--un--bindDataNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V30))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V37 = fun (V36) -> {'Prelude.Types.Right', {'TTImp.TTImp.IData', V27, V28, V29, V35}} end), V37 end(V32)) end end end end; _ -> fun (V38) -> {'Prelude.Types.Right', V9} end end.
'nested--14849-14184--in--un--bindDataNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'TTImp.TTImp.MkImpData', V10, V11, V12, V13, V14} -> begin (V15 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V8, V10, [], V1, V12))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V28 = begin (V21 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V20) -> ('nested--14849-14183--in--un--bindConNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V20)) end, V14, []))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkImpData', V10, V11, V19, V13, V25}} end), V27 end(V22)) end end end end), V28 end(V16)) end end end end; {'TTImp.TTImp.MkImpLater', V29, V30, V31} -> begin (V32 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V8, V29, [], V1, V31))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V38 = fun (V37) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkImpLater', V29, V30, V36}} end), V38 end(V33)) end end end end end.
'nested--14849-14183--in--un--bindConNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'TTImp.TTImp.MkImpTy', V10, V11, V12, V13} -> begin (V14 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V8, V10, [], V1, V13))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkImpTy', V10, V11, V12, V18}} end), V20 end(V15)) end end end end end.
'un--processTTImpFile'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V107 = begin (V14 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 0, fun () -> <<"Parsing"/utf8>> end, fun (V11) -> begin (V13 = ('Idris.Idris2.Parser.Source':'un--parseFile'(V5, {'Core.FC.PhysicalIdrSrc', V10}, {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.TTImp.Parser':'un--prog'({'Core.FC.PhysicalIdrSrc', V10})), fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--eoi'()), {'Libraries.Text.Parser.Core.Empty', V12}} end end}, V11))), {'Prelude.Types.Right', V13} end end))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V106 = case V18 of {'Prelude.Types.Right', V19} -> case V19 of {'Builtin.MkPair', V20, V21} -> case V21 of {'Builtin.MkPair', V22, V23} -> begin (V25 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V24) -> ('Idris.Idris2.Core.Context':'un--recordWarning'(V0, V24)) end, V20))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V95 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 0, fun () -> (begin (V31 = fun (V30) -> V30 end), fun (V32) -> (V31(V32)) end end(<<"Elaboration"/utf8>>)) end, ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V52 = begin (V33 = ('un--processTTImpDecls'([], V0, V1, V2, V3, V4, [], {'Core.Env.Nil'}, V23))), ((begin (V49 = fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V46, V47, V48)) end end end end end), fun (V50) -> fun (V51) -> ((((V49('erased'))('erased'))(V50))(V51)) end end end((begin (V41 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> {'Prelude.Types.Right', (V37(V40))} end end end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end(fun (V34) -> {'Builtin.MkUnit'} end))))(V33)) end), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V65 = begin (V57 = ('Idris.Idris2.Core.UnifyState':'un--checkDelayedHoles'(V2, V0))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V64 = fun (V62) -> case V61 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', 1}; {'Prelude.Types.Just', V63} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V63, V62)) end end), V64 end(V58)) end end end end), V65 end(V53)) end end end end, fun (V66) -> begin (V88 = begin (V69 = fun (V67) -> begin (V68 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V66))/binary, <<"\x{a}"/utf8>>/binary>>, V67))), {'Prelude.Types.Right', V68} end end), ((begin (V85 = fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V82, V83, V84)) end end end end end), fun (V86) -> fun (V87) -> ((((V85('erased'))('erased'))(V86))(V87)) end end end((begin (V77 = fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> {'Prelude.Types.Right', (V73(V76))} end end end end end), fun (V78) -> fun (V79) -> ((((V77('erased'))('erased'))(V78))(V79)) end end end(fun (V70) -> {'Builtin.MkUnit'} end))))(V69)) end), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V94 = fun (V93) -> {'Prelude.Types.Right', 0} end), V94 end(V89)) end end end end end))))), V95 end(V26)) end end end end end end; {'Prelude.Types.Left', V96} -> begin (V99 = fun (V97) -> begin (V98 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V96))/binary, <<"\x{a}"/utf8>>/binary>>, V97))), {'Prelude.Types.Right', V98} end end), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V105 = fun (V104) -> {'Prelude.Types.Right', 0} end), V105 end(V100)) end end end end end), V106 end(V15)) end end end end), V107 end(V7)) end end end end.
'un--processTTImpDecls'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V16 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V9) -> begin (V10 = ('nested--14849-14185--in--un--bindNames'(V8, V0, V7, V6, V5, V4, V3, V2, V1, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V15 = ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, V4, V5, [], V6, V7, V14))), V15 end(V11)) end end end end end, V8))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', 1} end), V22 end(V17)) end end end end.
'un--processFailing'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V17 = begin (V12 = V3), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V282 = begin (V27 = begin (V22 = V4), fun (V23) -> begin (V26 = (begin (V24 = V22), fun (V25) -> ('erlang':'get'(V24)) end end(V23))), {'Prelude.Types.Right', V26} end end end), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V281 = begin (V37 = begin (V32 = V2), fun (V33) -> begin (V36 = (begin (V34 = V32), fun (V35) -> ('erlang':'get'(V34)) end end(V33))), {'Prelude.Types.Right', V36} end end end), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V280 = begin (V42 = ('Idris.Idris2.Core.Context':'un--branch'(V1))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V279 = begin (V176 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V47 = ('Idris.Idris2.TTImp.ProcessDecls.Totality':'un--getTotalityErrors'(V1))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V126 = begin (V53 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V52) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V52)) end, V11))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V125 = begin (V58 = ('Idris.Idris2.TTImp.ProcessDecls.Totality':'un--getTotalityErrors'(V1))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V124 = begin (V67 = ('Idris.Idris2.Data.List':'un--\x{5c}\x{5c}'({'Prelude.EqOrd.MkEq', fun (V63) -> fun (V64) -> ('Idris.Idris2.Idris.Error':'dn--un--==_Eq_Error'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Idris.Error':'dn--un--/=_Eq_Error'(V65, V66)) end end}, V62, V51))), case V67 of [E0 | E1] -> (fun (V68, V69) -> begin (V70 = [V68 | V69]), case V10 of {'Prelude.Types.Just', V71} -> begin (V93 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V73 = fun (V72) -> V72 end), fun (V74) -> (V73(V74)) end end(<<"elab.failing"/utf8>>)), 10, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V75) -> fun (V76) -> <<V75/binary, V76/binary>> end end, <<""/utf8>>}, fun (V77) -> V77 end, [(begin (V79 = fun (V78) -> V78 end), fun (V80) -> (V79(V80)) end end(<<"Failing block based on "/utf8>>)) | [(begin (V82 = fun (V81) -> V81 end), fun (V83) -> (V82(V83)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V71)))) | [(begin (V85 = fun (V84) -> V84 end), fun (V86) -> (V85(V86)) end end(<<" failed with "/utf8>>)) | [(begin (V91 = fun (V90) -> V90 end), fun (V92) -> (V91(V92)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V87) -> ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V87)) end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Core':'dn--un--showPrec_Show_Error'(V88, V89)) end end}, V70)))) | []]]]])) end))), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V121 = begin (V99 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V98) -> ('Idris.Idris2.Idris.Error':'un--checkError'(V1, V4, V5, V71, V98)) end, V70))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V120 = fun (V104) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V107, V108)) end end end end, fun (V109) -> fun (V110) -> {'Prelude.Types.Just', V110} end end, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V113, V114)) end end end end}, fun (V115) -> {'Prelude.Types.Nothing'} end, fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V117, V118)) end end end}, case V103 of 1 -> 0; 0 -> 1 end)), fun (V119) -> {'Prelude.Types.Just', {'Core.Core.FailingWrongError', V9, V71, {'Data.List1.:::', V68, V69}}} end))} end), V120 end(V100)) end end end end), V121 end(V94)) end end end end; _ -> fun (V122) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end(E0, E1)); [] -> fun (V123) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Core.Core.FailingDidNotFail', V9}}} end end end), V124 end(V59)) end end end end), V125 end(V54)) end end end end), V126 end(V48)) end end end end, fun (V127) -> case V10 of {'Prelude.Types.Just', V128} -> begin (V147 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V130 = fun (V129) -> V129 end), fun (V131) -> (V130(V131)) end end(<<"elab.failing"/utf8>>)), 10, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V132) -> fun (V133) -> <<V132/binary, V133/binary>> end end, <<""/utf8>>}, fun (V134) -> V134 end, [(begin (V136 = fun (V135) -> V135 end), fun (V137) -> (V136(V137)) end end(<<"Failing block based on "/utf8>>)) | [(begin (V139 = fun (V138) -> V138 end), fun (V140) -> (V139(V140)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V128)))) | [(begin (V142 = fun (V141) -> V141 end), fun (V143) -> (V142(V143)) end end(<<" failed with "/utf8>>)) | [(begin (V145 = fun (V144) -> V144 end), fun (V146) -> (V145(V146)) end end(('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V127)))) | []]]]])) end))), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V174 = begin (V152 = ('Idris.Idris2.Idris.Error':'un--checkError'(V1, V4, V5, V128, V127))), fun (V153) -> begin (V154 = (V152(V153))), case V154 of {'Prelude.Types.Left', V155} -> {'Prelude.Types.Left', V155}; {'Prelude.Types.Right', V156} -> (begin (V173 = fun (V157) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V160, V161)) end end end end, fun (V162) -> fun (V163) -> {'Prelude.Types.Just', V163} end end, fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V166, V167)) end end end end}, fun (V168) -> {'Prelude.Types.Nothing'} end, fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V170, V171)) end end end}, case V156 of 1 -> 0; 0 -> 1 end)), fun (V172) -> {'Prelude.Types.Just', {'Core.Core.FailingWrongError', V9, V128, {'Data.List1.:::', V127, []}}} end))} end), V173 end(V153)) end end end end), V174 end(V148)) end end end end; _ -> fun (V175) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end))), fun (V177) -> begin (V178 = (V176(V177))), case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> (begin (V278 = begin (V186 = begin (V181 = V2), fun (V182) -> begin (V185 = (begin (V183 = V181), fun (V184) -> ('erlang':'get'(V183)) end end(V182))), {'Prelude.Types.Right', V185} end end end), fun (V187) -> begin (V188 = (V186(V187))), case V188 of {'Prelude.Types.Left', V189} -> {'Prelude.Types.Left', V189}; {'Prelude.Types.Right', V190} -> (begin (V277 = begin (V196 = begin (V191 = V3), fun (V192) -> begin (V195 = (begin (V193 = V191), fun (V194) -> ('erlang':'put'(V193, V21)) end end(V192))), {'Prelude.Types.Right', V195} end end end), fun (V197) -> begin (V198 = (V196(V197))), case V198 of {'Prelude.Types.Left', V199} -> {'Prelude.Types.Left', V199}; {'Prelude.Types.Right', V200} -> (begin (V276 = begin (V206 = begin (V201 = V4), fun (V202) -> begin (V205 = (begin (V203 = V201), fun (V204) -> ('erlang':'put'(V203, V31)) end end(V202))), {'Prelude.Types.Right', V205} end end end), fun (V207) -> begin (V208 = (V206(V207))), case V208 of {'Prelude.Types.Left', V209} -> {'Prelude.Types.Left', V209}; {'Prelude.Types.Right', V210} -> (begin (V275 = begin (V256 = begin (V211 = V2), fun (V212) -> begin (V255 = (begin (V213 = V211), fun (V214) -> ('erlang':'put'(V213, case V41 of {'Core.Metadata.MkMetadata', V215, V216, V217, V218, V219, V220, V221, V222, V223, V224} -> {'Core.Metadata.MkMetadata', V215, V216, V217, V218, V219, V220, V221, case V190 of {'Core.Metadata.MkMetadata', V225, V226, V227, V228, V229, V230, V231, V232, V233, V234} -> V232 end, case V190 of {'Core.Metadata.MkMetadata', V235, V236, V237, V238, V239, V240, V241, V242, V243, V244} -> V243 end, case V190 of {'Core.Metadata.MkMetadata', V245, V246, V247, V248, V249, V250, V251, V252, V253, V254} -> V254 end} end)) end end(V212))), {'Prelude.Types.Right', V255} end end end), fun (V257) -> begin (V258 = (V256(V257))), case V258 of {'Prelude.Types.Left', V259} -> {'Prelude.Types.Left', V259}; {'Prelude.Types.Right', V260} -> (begin (V274 = begin (V266 = begin (V261 = V1), fun (V262) -> begin (V265 = (begin (V263 = V261), fun (V264) -> ('erlang':'put'(V263, V46)) end end(V262))), {'Prelude.Types.Right', V265} end end end), fun (V267) -> begin (V268 = (V266(V267))), case V268 of {'Prelude.Types.Left', V269} -> {'Prelude.Types.Left', V269}; {'Prelude.Types.Right', V270} -> (begin (V273 = fun (V271) -> case V180 of {'Prelude.Types.Just', V272} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V272, V271)); {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V273 end(V267)) end end end end), V274 end(V257)) end end end end), V275 end(V207)) end end end end), V276 end(V197)) end end end end), V277 end(V187)) end end end end), V278 end(V177)) end end end end), V279 end(V43)) end end end end), V280 end(V38)) end end end end), V281 end(V28)) end end end end), V282 end(V18)) end end end end.
'un--processDecls'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V9) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, V4, V5, [], V6, V7, V9)) end, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', 1} end), V16 end(V11)) end end end end.
'un--process'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'TTImp.TTImp.IClaim', V10, V11, V12, V13, V14} -> ('Idris.Idris2.TTImp.ProcessType':'un--processType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V11, V12, V13, V14)); {'TTImp.TTImp.IData', V15, V16, V17, V18} -> ('Idris.Idris2.TTImp.ProcessData':'un--processData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15, V16, V17, V18)); {'TTImp.TTImp.IDef', V19, V20, V21} -> ('Idris.Idris2.TTImp.ProcessDef':'un--processDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V19, V20, V21)); {'TTImp.TTImp.IParameters', V22, V23, V24} -> ('Idris.Idris2.TTImp.ProcessParams':'un--processParams'(V0, V1, V2, V3, V4, V5, V7, V8, V22, V23, V24)); {'TTImp.TTImp.IRecord', V25, V26, V27, V28, V29} -> ('Idris.Idris2.TTImp.ProcessRecord':'un--processRecord'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V26, V27, V28, V29)); {'TTImp.TTImp.IFail', V30, V31, V32} -> ('un--processFailing'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V30, V31, V32)); {'TTImp.TTImp.INamespace', V33, V34, V35} -> ('Idris.Idris2.Core.Context':'un--withExtendedNS'(V1, V34, ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V36) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V36)) end, V35)))); {'TTImp.TTImp.ITransform', V37, V38, V39, V40} -> ('Idris.Idris2.TTImp.ProcessTransform':'un--processTransform'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V37, V38, V39, V40)); {'TTImp.TTImp.IRunElabDecl', V41, V42} -> ('Idris.Idris2.TTImp.ProcessRunElab':'un--processRunElab'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V41, V42)); {'TTImp.TTImp.IPragma', V43, V44, V45} -> (((V45(V0))(V7))(V8)); {'TTImp.TTImp.ILog', V46} -> ('Idris.Idris2.Core.Context':'un--addLogLevel'(V1, ((begin (V54 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V52, V53)) end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V47) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Options.Log':'un--unsafeMkLogLevel'(V48, V49)) end end, V47)) end))(V46)))); {'TTImp.TTImp.IBuiltin', V57, V58, V59} -> ('Idris.Idris2.TTImp.ProcessBuiltin':'un--processBuiltin'(V1, V7, V8, V57, V58, V59)) end.
