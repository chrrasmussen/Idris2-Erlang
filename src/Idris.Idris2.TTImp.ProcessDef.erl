-module('Idris.Idris2.TTImp.ProcessDef').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--with block in nameListEq-14315'/4,
  'with--nameListEq-14308'/5,
  'with--extendEnv-7454'/20,
  'with--extendEnv-7365'/19,
  'case--case block in lookupOrAddAlias-16327'/18,
  'case--case block in mkRunTime-15308'/12,
  'case--case block in calcRefs-14518'/8,
  'case--case block in case block in case block in case block in case block in case block in case block in checkClause-12530'/55,
  'case--case block in case block in case block in case block in case block in checkClause-12033'/42,
  'case--case block in case block in checkClause-11734'/38,
  'case--combineLinear-8475'/5,
  'case--findLinear-7962'/7,
  'nested--27321-17107--in--un--withTotality'/14,
  'nested--19707-10703--in--un--wargs'/39,
  'nested--19525-10519--in--un--wargs'/24,
  'nested--19707-10702--in--un--wargn'/39,
  'nested--19525-10518--in--un--wargn'/24,
  'nested--18282-10432--in--un--vfc'/21,
  'nested--24873-14943--in--un--toErased'/10,
  'nested--24873-14944--in--un--toClause'/9,
  'nested--27321-17108--in--un--simplePat'/13,
  'nested--17035-8288--in--un--notN'/5,
  'nested--24873-14936--in--un--noInline'/8,
  'nested--18282-10433--in--un--mkExplicit'/22,
  'nested--24873-14938--in--un--mkCrash'/9,
  'nested--18282-10436--in--un--mkClauseWith'/26,
  'nested--24873-14939--in--un--matchAny'/8,
  'nested--24873-14940--in--un--makeErrorClause'/10,
  'nested--17035-8289--in--un--lookupAll'/6,
  'nested--18282-10435--in--un--keepOldEnv'/24,
  'nested--26255-16210--in--un--holeyType'/16,
  'nested--24873-14942--in--un--getSpec'/8,
  'nested--27321-17111--in--un--getClause'/13,
  'nested--16235-7596--in--un--findLinArg'/10,
  'nested--24205-14353--in--un--dropErased'/6,
  'nested--17035-8291--in--un--combineAll'/6,
  'nested--17035-8290--in--un--combine'/7,
  'nested--27388-17234--in--un--closeEnv'/17,
  'nested--27321-17110--in--un--checkImpossible'/15,
  'nested--27321-17112--in--un--checkCoverage'/16,
  'nested--27321-17109--in--un--catchAll'/13,
  'nested--24873-14937--in--un--caseName'/8,
  'nested--18282-10434--in--un--bindWithArgs'/25,
  'nested--24873-14941--in--un--addErrorCase'/8,
  'nested--16235-7595--in--un--accessible'/8,
  'un--warnUnreachable'/2,
  'un--toPats'/1,
  'un--setLinear'/2,
  'un--recoverableErr'/3,
  'un--recoverable'/5,
  'un--processDef'/12,
  'un--nameListEq'/2,
  'un--mkRunTime'/7,
  'un--mismatchNF'/5,
  'un--mismatch'/4,
  'un--lookupOrAddAlias'/12,
  'un--isAlias'/1,
  'un--impossibleOK'/5,
  'un--impossibleErrOK'/3,
  'un--hasEmptyPat'/5,
  'un--findLinear'/6,
  'un--extendEnv'/6,
  'un--compileRunTime'/7,
  'un--combineLinear'/2,
  'un--checkLHS'/14,
  'un--checkClause'/15,
  'un--calcRefs'/4,
  'un--applyEnv'/4
]).
'with--with block in nameListEq-14315'(V0, V1, V2, V3) -> case V2 of {'Prelude.Types.Just', V4} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'} end.
'with--nameListEq-14308'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.Just', V5} -> ('with--with block in nameListEq-14315'(V4, V3, ('un--nameListEq'(V3, V4)), V0)); {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'} end.
'with--extendEnv-7454'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V2 of {'Prelude.Types.Nothing'} -> fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Can\x{27}t happen: names don\x{27}t match in pattern type"/utf8>>}, V20)) end; {'Prelude.Types.Just', V21} -> ('un--extendEnv'([V0 | V4], {'Core.Env.::', {'Core.TT.Let', V14, V13, V11, V12}, V19}, {'Core.TT.DropCons', V18}, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(V17)), V15, V16)) end.
'with--extendEnv-7365'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V2 of {'Prelude.Types.Nothing'} -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Can\x{27}t happen: names don\x{27}t match in pattern type"/utf8>>}, V19)) end; {'Prelude.Types.Just', V20} -> ('un--extendEnv'([V0 | V4], {'Core.Env.::', {'Core.TT.PVar', V13, V12, V11, V10}, V18}, {'Core.TT.DropCons', V17}, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(V16)), V14, V15)) end.
'case--case block in lookupOrAddAlias-16327'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Prelude.Types.Just', V18} -> case V18 of {'Builtin.MkPair', V19, V20} -> begin (V21 = ('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.def"/utf8>>, 5, fun () -> <<<<"Missing type declaration for the alias "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary, <<". Checking first whether it is a misspelling."/utf8>>/binary>>/binary>> end))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V221 = begin (V143 = begin (V26 = ('Idris.Idris2.Core.Context':'un--getSimilarNames'(V13, V5))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V142 = case V30 of {'Prelude.Types.Just', V31} -> case V31 of {'Builtin.MkPair', V32, V33} -> begin (V102 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V34, V35, [])) end end, V33, fun (V36) -> case V36 of {'Builtin.MkPair', V37, V38} -> begin (V71 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V37, case V15 of {'Core.Context.MkDefs', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70} -> V39 end))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V101 = case V75 of {'Prelude.Types.Just', V76} -> fun (V77) -> case V76 of {'Core.Context.Context.MkGlobalDef', V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99} -> case V95 of {'Core.Context.Context.None'} -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V37, V38}}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end; {'Prelude.Types.Nothing'} -> fun (V100) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V101 end(V72)) end end end end end end))), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V140 = fun (V107) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Context':'un--showSimilarNames'(case V15 of {'Core.Context.MkDefs', V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139} -> V110 end, V5, V32, ('Idris.Idris2.Data.List':'un--catMaybes'(V106))))} end), V140 end(V103)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V141) -> {'Prelude.Types.Right', []} end end), V142 end(V27)) end end end end), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V220 = case V147 of [] -> begin (V154 = ('Idris.Idris2.Core.Context.Log':'un--log'(V13, (begin (V149 = fun (V148) -> V148 end), fun (V150) -> (V149(V150)) end end(<<"declare.def"/utf8>>)), 5, fun () -> (begin (V152 = fun (V151) -> V151 end), fun (V153) -> (V152(V153)) end end(<<"Not a misspelling: go ahead and declare it!"/utf8>>)) end))), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V216 = begin (V167 = ('Idris.Idris2.TTImp.ProcessType':'un--processType'(V0, V13, V14, V12, V11, V10, V9, V8, V7, V6, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), 2, [], {'TTImp.TTImp.MkImpTy', V6, V6, V5, ('nested--26255-16210--in--un--holeyType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ((begin (V164 = fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V162, V163)) end end end end), fun (V165) -> fun (V166) -> ((((V164('erased'))('erased'))(V165))(V166)) end end end(fun (V159) -> ('Idris.Idris2.Builtin':'un--snd'(V159)) end))(V20))))}))), fun (V168) -> begin (V169 = (V167(V168))), case V169 of {'Prelude.Types.Left', V170} -> {'Prelude.Types.Left', V170}; {'Prelude.Types.Right', V171} -> (begin (V215 = begin (V177 = begin (V172 = V13), fun (V173) -> begin (V176 = (begin (V174 = V172), fun (V175) -> ('erlang':'get'(V174)) end end(V173))), {'Prelude.Types.Right', V176} end end end), fun (V178) -> begin (V179 = (V177(V178))), case V179 of {'Prelude.Types.Left', V180} -> {'Prelude.Types.Left', V180}; {'Prelude.Types.Right', V181} -> (begin (V214 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V181 of {'Core.Context.MkDefs', V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213} -> V182 end))), V214 end(V178)) end end end end), V215 end(V168)) end end end end), V216 end(V155)) end end end end; [E0 | E1] -> (fun (V217, V218) -> fun (V219) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.MaybeMisspelling', {'Core.Core.NoDeclaration', V6, V5}, {'Data.List1.:::', V217, V218}}, V219)) end end(E0, E1)) end), V220 end(V144)) end end end end), V221 end(V22)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V222) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'case--case block in mkRunTime-15308'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Core.Context.Context.PMDef', V12, V13, V14, V15, V16} -> begin (V39 = case V8 of {'Core.Context.Context.MkGlobalDef', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} -> V19 end), fun () -> begin (V85 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V40) -> ('nested--24873-14943--in--un--toErased'(V0, V1, V2, V3, V4, V5, V6, case V8 of {'Core.Context.Context.MkGlobalDef', V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62} -> V41 end, ('nested--24873-14942--in--un--getSpec'(V0, V1, V2, V3, V4, V5, V6, case V8 of {'Core.Context.Context.MkGlobalDef', V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84} -> V74 end)), V40)) end, V16, []))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V340 = begin (V120 = ((begin (V117 = fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V115, V116)) end end end end), fun (V118) -> fun (V119) -> ((((V117('erased'))('erased'))(V118))(V119)) end end end(fun (V90) -> ('nested--24873-14944--in--un--toClause'(V0, V1, V2, V3, V4, V5, V6, case V8 of {'Core.Context.Context.MkGlobalDef', V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112} -> V91 end, V90)) end))(V89))), begin (V122 = case V10 of {'Core.TT.MissingCases', V121} -> ('nested--24873-14941--in--un--addErrorCase'(V0, V1, V2, V3, V4, V5, V6, V120)); _ -> V120 end), begin (V145 = ('Idris.Idris2.Core.Case.CaseBuilder':'un--getPMDef'(V6, case V8 of {'Core.Context.Context.MkGlobalDef', V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144} -> V123 end, {'Core.Case.CaseBuilder.RunTime'}, V0, V39, V122))), fun (V146) -> begin (V147 = (V145(V146))), case V147 of {'Prelude.Types.Left', V148} -> {'Prelude.Types.Left', V148}; {'Prelude.Types.Right', V149} -> (begin (V339 = case V149 of {'Builtin.DPair.MkDPair', V150, V151} -> case V151 of {'Builtin.MkPair', V152, V153} -> begin (V193 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V6, (begin (V155 = fun (V154) -> V154 end), fun (V156) -> (V155(V156)) end end(<<"compile.casetree"/utf8>>)), 5, begin (V161 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V157) -> fun (V158) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'(V157, V158)) end end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'(V159, V160)) end end}, V152))), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V192 = fun (V166) -> {'Prelude.Types.Right', ('Idris.Idris2.Data.String':'un--fastUnlines'([<<('Idris.Idris2.Core.TT':'dn--un--show_Show_Covering'(V10))/binary, <<":"/utf8>>/binary>> | [<<(begin (V168 = fun (V167) -> V167 end), fun (V169) -> (V168(V169)) end end(<<"Runtime tree for "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V8 of {'Core.Context.Context.MkGlobalDef', V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191} -> V171 end))/binary, <<":"/utf8>>/binary>>/binary>> | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Core.Case.CaseTree.Pretty.Raw':'un--prettyTree'(V150, V165)))))) | []]]]))} end), V192 end(V162)) end end end end))), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V338 = begin (V201 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, (begin (V199 = fun (V198) -> V198 end), fun (V200) -> (V199(V200)) end end(<<"compile.casetree"/utf8>>)), 10, fun () -> ('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V150, V152)) end))), fun (V202) -> begin (V203 = (V201(V202))), case V203 of {'Prelude.Types.Left', V204} -> {'Prelude.Types.Left', V204}; {'Prelude.Types.Right', V205} -> (begin (V337 = begin (V209 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, (begin (V207 = fun (V206) -> V206 end), fun (V208) -> (V207(V208)) end end(<<"compile.casetree.measure"/utf8>>)), 15, fun () -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Core.Case.CaseTree':'un--measure'(V152)))) end))), fun (V210) -> begin (V211 = (V209(V210))), case V211 of {'Prelude.Types.Left', V212} -> {'Prelude.Types.Left', V212}; {'Prelude.Types.Right', V213} -> (begin (V336 = case ('un--nameListEq'(V13, V150)) of {'Prelude.Types.Just', V214} -> begin (V256 = begin (V237 = ('Idris.Idris2.Core.Context':'un--addDef'(V6, V0, case V8 of {'Core.Context.Context.MkGlobalDef', V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236} -> {'Core.Context.Context.MkGlobalDef', V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, {'Core.Context.Context.PMDef', V12, V13, V14, V152, V16}, V233, V234, V235, V236} end))), ((begin (V253 = fun (V248) -> fun (V249) -> fun (V250) -> fun (V251) -> fun (V252) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V250, V251, V252)) end end end end end), fun (V254) -> fun (V255) -> ((((V253('erased'))('erased'))(V254))(V255)) end end end((begin (V245 = fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> case V242 of {'Prelude.Types.Left', V243} -> {'Prelude.Types.Left', V243}; {'Prelude.Types.Right', V244} -> {'Prelude.Types.Right', (V241(V244))} end end end end end), fun (V246) -> fun (V247) -> ((((V245('erased'))('erased'))(V246))(V247)) end end end(fun (V238) -> {'Builtin.MkUnit'} end))))(V237)) end), fun (V257) -> begin (V258 = (V256(V257))), case V258 of {'Prelude.Types.Left', V259} -> {'Prelude.Types.Left', V259}; {'Prelude.Types.Right', V260} -> (begin (V334 = begin (V266 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V261) -> fun (V262) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V261, V262)) end end, fun (V263) -> fun (V264) -> fun (V265) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V263, V264, V265)) end end end}, V0))), fun (V267) -> begin (V268 = (V266(V267))), case V268 of {'Prelude.Types.Left', V269} -> {'Prelude.Types.Left', V269}; {'Prelude.Types.Right', V270} -> (begin (V333 = case case ('nested--24873-14937--in--un--caseName'(V0, V1, V2, V3, V4, V5, V6, V270)) of 1 -> ('nested--24873-14936--in--un--noInline'(V0, V1, V2, V3, V4, V5, V6, case V8 of {'Core.Context.Context.MkGlobalDef', V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292} -> V282 end)); 0 -> 0 end of 1 -> begin (V293 = ('Idris.Idris2.TTImp.Elab.Utils':'un--canInlineCaseBlock'(V6, V0))), fun (V294) -> begin (V295 = (V293(V294))), case V295 of {'Prelude.Types.Left', V296} -> {'Prelude.Types.Left', V296}; {'Prelude.Types.Right', V297} -> (begin (V331 = case V297 of 1 -> begin (V324 = begin (V303 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V298) -> fun (V299) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V298, V299)) end end, fun (V300) -> fun (V301) -> fun (V302) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V300, V301, V302)) end end end}, V0))), fun (V304) -> begin (V305 = (V303(V304))), case V305 of {'Prelude.Types.Left', V306} -> {'Prelude.Types.Left', V306}; {'Prelude.Types.Right', V307} -> (begin (V323 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, (begin (V309 = fun (V308) -> V308 end), fun (V310) -> (V309(V310)) end end(<<"compiler.inline.eval"/utf8>>)), 5, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V311) -> fun (V312) -> <<V311/binary, V312/binary>> end end, <<""/utf8>>}, fun (V313) -> V313 end, [(begin (V315 = fun (V314) -> V314 end), fun (V316) -> (V315(V316)) end end(<<"Marking "/utf8>>)) | [(begin (V318 = fun (V317) -> V317 end), fun (V319) -> (V318(V319)) end end(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V307)))) | [(begin (V321 = fun (V320) -> V320 end), fun (V322) -> (V321(V322)) end end(<<" for inlining in runtime case tree."/utf8>>)) | []]]])) end))), V323 end(V304)) end end end end), fun (V325) -> begin (V326 = (V324(V325))), case V326 of {'Prelude.Types.Left', V327} -> {'Prelude.Types.Left', V327}; {'Prelude.Types.Right', V328} -> (begin (V329 = ('Idris.Idris2.Core.Context':'un--setFlag'(V6, V1, V0, {'Core.Context.Context.Inline'}))), V329 end(V325)) end end end end; 0 -> fun (V330) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V331 end(V294)) end end end end; 0 -> fun (V332) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V333 end(V267)) end end end end), V334 end(V257)) end end end end; {'Prelude.Types.Nothing'} -> fun (V335) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"WAT"/utf8>>}, V335)) end end), V336 end(V210)) end end end end), V337 end(V202)) end end end end), V338 end(V194)) end end end end end end), V339 end(V146)) end end end end end end), V340 end(V86)) end end end end end end; _ -> fun () -> fun (V341) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end.
'case--case block in calcRefs-14518'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.Context.Context.PMDef', V8, V9, V10, V11, V12} -> begin (V57 = case V2 of 1 -> case V5 of {'Core.Context.Context.MkGlobalDef', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} -> V26 end; 0 -> case V5 of {'Core.Context.Context.MkGlobalDef', V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56} -> V47 end end), case V57 of {'Prelude.Types.Nothing'} -> begin (V58 = case V2 of 1 -> V11; 0 -> V10 end), begin (V59 = ('Idris.Idris2.Core.Case.CaseTree':'un--getMetas'(V58))), begin (V61 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V60) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V3, V60)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V59))))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V144 = begin (V66 = ('Idris.Idris2.Core.Case.CaseTree':'un--addRefs'(V1, V59, V58))), begin (V68 = case V2 of 1 -> ('nested--24205-14353--in--un--dropErased'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V66)), V66)); 0 -> fun (V67) -> {'Prelude.Types.Right', V66} end end), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V143 = begin (V136 = begin (V117 = case V2 of 1 -> ('Idris.Idris2.Core.Context':'un--addDef'(V3, V0, case V5 of {'Core.Context.Context.MkGlobalDef', V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94} -> {'Core.Context.Context.MkGlobalDef', V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, {'Prelude.Types.Just', V72}, V87, V88, V89, V90, V91, V92, V93, V94} end)); 0 -> ('Idris.Idris2.Core.Context':'un--addDef'(V3, V0, case V5 of {'Core.Context.Context.MkGlobalDef', V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116} -> {'Core.Context.Context.MkGlobalDef', V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, {'Prelude.Types.Just', V72}, V108, V109, V110, V111, V112, V113, V114, V115, V116} end)) end), ((begin (V133 = fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V130, V131, V132)) end end end end end), fun (V134) -> fun (V135) -> ((((V133('erased'))('erased'))(V134))(V135)) end end end((begin (V125 = fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> {'Prelude.Types.Right', (V121(V124))} end end end end end), fun (V126) -> fun (V127) -> ((((V125('erased'))('erased'))(V126))(V127)) end end end(fun (V118) -> {'Builtin.MkUnit'} end))))(V117)) end), fun (V137) -> begin (V138 = (V136(V137))), case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> (begin (V142 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V141) -> ('un--calcRefs'(V3, V2, V1, V141)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V72))))), V142 end(V137)) end end end end), V143 end(V69)) end end end end end), V144 end(V62)) end end end end end end; {'Prelude.Types.Just', V145} -> fun (V146) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end; _ -> fun (V147) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'case--case block in case block in case block in case block in case block in case block in case block in checkClause-12530'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> case V54 of {'Prelude.Types.Just', V55} -> case V55 of {'Builtin.MkPair', V56, V57} -> case V57 of {'Builtin.MkPair', V58, V59} -> begin (V76 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V65 = fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V63, V64)) end end end end), fun (V66) -> fun (V67) -> ((((V65('erased'))('erased'))(V66))(V67)) end end end(fun (V60) -> {'Prelude.Types.Just', V60} end))(V56)), [{'Prelude.Types.Nothing'} | ((begin (V73 = fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V71, V72)) end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end(fun (V68) -> {'Prelude.Types.Just', V68} end))(V48))]))), begin (V77 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V20, <<"declare.def.clause.with"/utf8>>, 3, fun () -> <<"With function type"/utf8>> end, V59))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V335 = begin (V187 = ('Idris.Idris2.Core.Context.Log':'un--log'(V20, <<"declare.def.clause.with"/utf8>>, 5, fun () -> <<<<"Argument names "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V82) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V83) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V84) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V85) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V86) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V86)) end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V87, V88)) end end}, V85)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V91) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V92, V93)) end end}, V89, V90)) end end}, V84)) end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V96) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V97)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V98, V99)) end end}, V96)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V102)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V103, V104)) end end}, V100, V101)) end end}, V94, V95)) end end}, {'Prelude.Show.MkShow', fun (V105) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V105)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V106, V107)) end end}}, V83)) end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V110) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V111) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V112) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V113, V114)) end end}, V111)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V117) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V117)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V118, V119)) end end}, V115, V116)) end end}, V110)) end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V122) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V123) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V123)) end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V124, V125)) end end}, V122)) end, fun (V126) -> fun (V127) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V128) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V128)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V129, V130)) end end}, V126, V127)) end end}, V120, V121)) end end}, {'Prelude.Show.MkShow', fun (V131) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V131)) end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V132, V133)) end end}}, V108, V109)) end end}, V82)) end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V136) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V137) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V138) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V139) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V139)) end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V140, V141)) end end}, V138)) end, fun (V142) -> fun (V143) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V144) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V144)) end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V145, V146)) end end}, V142, V143)) end end}, V137)) end, fun (V147) -> fun (V148) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V149) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V150) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V150)) end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V151, V152)) end end}, V149)) end, fun (V153) -> fun (V154) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V155) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V155)) end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V156, V157)) end end}, V153, V154)) end end}, V147, V148)) end end}, {'Prelude.Show.MkShow', fun (V158) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V158)) end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V159, V160)) end end}}, V136)) end, fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V163) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V164) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V165) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V165)) end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V166, V167)) end end}, V164)) end, fun (V168) -> fun (V169) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V170) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V170)) end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V171, V172)) end end}, V168, V169)) end end}, V163)) end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V175) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V176) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V176)) end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V177, V178)) end end}, V175)) end, fun (V179) -> fun (V180) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V181) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V181)) end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V182, V183)) end end}, V179, V180)) end end}, V173, V174)) end end}, {'Prelude.Show.MkShow', fun (V184) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V184)) end, fun (V185) -> fun (V186) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V185, V186)) end end}}, V161, V162)) end end}, V134, V135)) end end}, V76))/binary>> end))), fun (V188) -> begin (V189 = (V187(V188))), case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> (begin (V334 = begin (V209 = begin (V197 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V20, {'Core.Context.dn--un--__mkHasNames', fun (V192) -> fun (V193) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V192, V193)) end end, fun (V194) -> fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V194, V195, V196)) end end end}, {'Core.Name.Resolved', V11}))), fun (V198) -> begin (V199 = (V197(V198))), case V199 of {'Prelude.Types.Left', V200} -> {'Prelude.Types.Left', V200}; {'Prelude.Types.Right', V201} -> (begin (V208 = begin (V202 = ('Idris.Idris2.Core.Context':'un--prettyName'(V20, V201))), fun (V203) -> begin (V204 = (V202(V203))), case V204 of {'Prelude.Types.Left', V205} -> {'Prelude.Types.Left', V205}; {'Prelude.Types.Right', V206} -> (begin (V207 = ('Idris.Idris2.Core.UnifyState':'un--genWithName'(V20, V18, V206))), V207 end(V203)) end end end end), V208 end(V198)) end end end end), fun (V210) -> begin (V211 = (V209(V210))), case V211 of {'Prelude.Types.Left', V212} -> {'Prelude.Types.Left', V212}; {'Prelude.Types.Right', V213} -> (begin (V333 = begin (V248 = ('Idris.Idris2.Core.Context':'un--addDef'(V20, V213, case ('Idris.Idris2.Core.Context':'un--newDef'(('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), V213, case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V214) -> fun (V215) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V214, V215)) end end, 0, fun (V216) -> fun (V217) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V216, V217)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V218) -> fun (V219) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V218, V219)) end end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V220, V221)) end end}}, V15)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V222) -> fun (V223) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V222, V223)) end end, 0, fun (V224) -> fun (V225) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V224, V225)) end end, 1})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()) end, V7, V59, V14, {'Core.Context.Context.None'})) of {'Core.Context.Context.MkGlobalDef', V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247} -> {'Core.Context.Context.MkGlobalDef', V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, [{'Core.Context.Context.SetTotal', V13} | V237], V238, V239, V240, V241, V242, V243, V244, V245, V246, V247} end))), fun (V249) -> begin (V250 = (V248(V249))), case V250 of {'Prelude.Types.Left', V251} -> {'Prelude.Types.Left', V251}; {'Prelude.Types.Right', V252} -> (begin (V332 = begin (V260 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V253) -> fun (V254) -> fun (V255) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(V253, V254, V255)) end end end, fun () -> fun (V256) -> [{'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'TTImp.TTImp.IVar', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), ('Idris.Idris2.Builtin':'un--snd'(V256))}} | []] end end, fun () -> [{'Builtin.MkPair', {'Prelude.Types.Nothing'}, V3} | case V2 of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V257} -> begin (V258 = ('Idris.Idris2.Core.FC':'un--emptyFC'())), begin (V259 = {'TTImp.TTImp.IVar', V258, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"Refl"/utf8>>}}}}), [{'Builtin.MkPair', V2, {'TTImp.TTImp.INamedApp', V258, V259, {'Core.Name.UN', {'Core.Name.Basic', <<"x"/utf8>>}}, V3}} | []] end end end] end))), begin (V271 = ('Idris.Idris2.TTImp.TTImp':'un--gapply'({'TTImp.TTImp.IVar', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), V213}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V266 = fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V264, V265)) end end end end), fun (V267) -> fun (V268) -> ((((V266('erased'))('erased'))(V267))(V268)) end end end(fun (V261) -> {'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'TTImp.TTImp.IVar', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), V261}} end))(V58)), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V269) -> fun (V270) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V269, V270)) end end, []}, V260, V76))))))), begin (V275 = ('Idris.Idris2.Core.Context.Log':'un--log'(V20, <<"declare.def.clause.with"/utf8>>, 3, fun () -> <<<<"Applying to with argument "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V272) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V272)) end, fun (V273) -> fun (V274) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V273, V274)) end end}, V271))/binary>> end))), fun (V276) -> begin (V277 = (V275(V276))), case V277 of {'Prelude.Types.Left', V278} -> {'Prelude.Types.Left', V278}; {'Prelude.Types.Right', V279} -> (begin (V331 = begin (V287 = begin (V280 = ('Idris.Idris2.Core.Context':'un--getFullName'(V20, {'Core.Name.Resolved', V11}))), fun (V281) -> begin (V282 = (V280(V281))), case V282 of {'Prelude.Types.Left', V283} -> {'Prelude.Types.Left', V283}; {'Prelude.Types.Right', V284} -> (begin (V286 = ('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V10, fun (V285) -> {'Core.Core.InRHS', V6, V284, V285} end, ('Idris.Idris2.TTImp.Elab':'un--checkTermSub'(V7, V22, V20, V19, V18, V17, V16, V11, V29, V10, V25, V53, V8, V23, V271, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V22, V53, V27))))))), V286 end(V281)) end end end end), fun (V288) -> begin (V289 = (V287(V288))), case V289 of {'Prelude.Types.Left', V290} -> {'Prelude.Types.Left', V290}; {'Prelude.Types.Right', V291} -> (begin (V330 = begin (V293 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V292) -> ('nested--18282-10436--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, 1, V213, V76, V21, V292)) end, V0, []))), fun (V294) -> begin (V295 = (V293(V294))), case V295 of {'Prelude.Types.Left', V296} -> {'Prelude.Types.Left', V296}; {'Prelude.Types.Right', V297} -> (begin (V329 = begin (V307 = ('Idris.Idris2.Core.Context.Log':'un--log'(V20, <<"declare.def.clause.with"/utf8>>, 3, fun () -> <<<<"With clauses: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V298) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V299) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V299)) end, fun (V300) -> fun (V301) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V300, V301)) end end}, V298)) end, fun (V302) -> fun (V303) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V304) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V304)) end, fun (V305) -> fun (V306) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V305, V306)) end end}, V302, V303)) end end}, V297))/binary>> end))), fun (V308) -> begin (V309 = (V307(V308))), case V309 of {'Prelude.Types.Left', V310} -> {'Prelude.Types.Left', V310}; {'Prelude.Types.Right', V311} -> (begin (V328 = begin (V312 = ('un--applyEnv'(V7, V20, V8, V213))), fun (V313) -> begin (V314 = (V312(V313))), case V314 of {'Prelude.Types.Left', V315} -> {'Prelude.Types.Left', V315}; {'Prelude.Types.Right', V316} -> (begin (V327 = begin (V318 = begin (V317 = V9), [V316 | V317] end), begin (V319 = {'TTImp.TTImp.IDef', V6, V213, V297}), begin (V320 = ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V7, V20, V19, V18, V17, V16, [], V318, V8, V319))), fun (V321) -> begin (V322 = (V320(V321))), case V322 of {'Prelude.Types.Left', V323} -> {'Prelude.Types.Left', V323}; {'Prelude.Types.Right', V324} -> (begin (V326 = fun (V325) -> {'Prelude.Types.Right', {'Prelude.Types.Right', {'Core.Context.Context.MkClause', V22, V53, V26, V291}}} end), V326 end(V321)) end end end end end end), V327 end(V313)) end end end end), V328 end(V308)) end end end end), V329 end(V294)) end end end end), V330 end(V288)) end end end end), V331 end(V276)) end end end end end end), V332 end(V249)) end end end end), V333 end(V210)) end end end end), V334 end(V188)) end end end end), V335 end(V78)) end end end end end end end; {'Prelude.Types.Nothing'} -> fun (V336) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Impossible happened: With abstraction failure #4"/utf8>>}, V336)) end end.
'case--case block in case block in case block in case block in case block in checkClause-12033'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V41 of {'Prelude.Types.Just', V42} -> begin (V51 = ('nested--18282-10434--in--un--bindWithArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V4, V40, ((begin (V48 = fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V46, V47)) end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end(fun (V43) -> {'Builtin.MkPair', V43, V39} end))(V2)), V42))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V123 = case V55 of {'Builtin.DPair.MkDPair', V56, V57} -> case V57 of {'Builtin.MkPair', V58, V59} -> case V59 of {'Builtin.MkPair', V60, V61} -> begin (V62 = ('Idris.Idris2.TTImp.Elab.Utils':'un--bindNotReq'(V22, ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), 0, V24, V38, [], V27))), begin (V63 = ('Idris.Idris2.Builtin':'un--fst'(V62))), begin (V64 = ('Idris.Idris2.Builtin':'un--snd'(V62))), begin (V96 = fun (V65) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V68, V69, V70)) end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V73, V74, V75)) end end end end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V77)) end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V81, V82, V83, V84)) end end end end end end end, fun (V85) -> fun (V86) -> V86 end end, fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V89, V90, V91)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V92) -> fun (V93) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_WithFlag'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_WithFlag'(V94, V95)) end end}, {'TTImp.TTImp.Syntactic'}, V1)) of 1 -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V34, V65)); 0 -> {'Prelude.Types.Right', V34} end end), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V122 = begin (V113 = begin (V101 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V20, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V56, V37)), V100, V58, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V56)), V39))))), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V112 = begin (V106 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V20, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V56, V37)), V100, V58, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V56)), V64))))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V111 = ('Idris.Idris2.Core.Normalise':'un--replace'(V20, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V56, V37)), V100, V58, V105, V60, V110))), V111 end(V107)) end end end end), V112 end(V102)) end end end end), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V121 = begin (V118 = (V61(V117))), begin (V119 = ('nested--18282-10433--in--un--mkExplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V24))), begin (V120 = {'Builtin.DPair.MkDPair', V56, {'Builtin.MkPair', V58, {'Builtin.MkPair', V60, V61}}}), ('case--case block in case block in case block in case block in case block in case block in case block in checkClause-12530'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V42, V56, V58, V60, V61, V120, V62, V63, V64, V100, V117, V118, V119, ('Idris.Idris2.TTImp.Elab.Utils':'un--bindReq'(V22, ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), V119, V38, [], V118)))) end end end), V121 end(V114)) end end end end), V122 end(V97)) end end end end end end end end end end), V123 end(V52)) end end end end; {'Prelude.Types.Nothing'} -> fun (V124) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Impossible happened: With abstraction failure #3"/utf8>>}, V124)) end end.
'case--case block in case block in checkClause-11734'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V37 of {'Builtin.DPair.MkDPair', V38, V39} -> begin (V40 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V22, V20, <<"declare.def.clause.with"/utf8>>, 5, fun () -> <<"With value type"/utf8>> end, V36))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V58 = begin (V48 = ('Idris.Idris2.Core.Context.Log':'un--log'(V20, <<"declare.def.clause.with"/utf8>>, 5, fun () -> <<<<"Using vars "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V46, V47)) end end}, V38))/binary>> end))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V57 = case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V35, V39)) of {'Prelude.Types.Just', V53} -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V36, V39)) of {'Prelude.Types.Just', V54} -> ('case--case block in case block in case block in case block in case block in checkClause-12033'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V38, V39, V53, V54, ('Idris.Idris2.Core.Env':'un--shrinkEnv'(V24, V39)))); {'Prelude.Types.Nothing'} -> fun (V55) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Impossible happened: With abstraction failure #2"/utf8>>}, V55)) end end; {'Prelude.Types.Nothing'} -> fun (V56) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Impossible happened: With abstraction failure #1"/utf8>>}, V56)) end end), V57 end(V49)) end end end end), V58 end(V41)) end end end end end.
'case--combineLinear-8475'(V0, V1, V2, V3, V4) -> case V4 of [] -> begin (V5 = ('un--combineLinear'(V3, V2))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V0, V1} | V9]} end), V11 end(V6)) end end end end; _ -> begin (V12 = ('nested--17035-8291--in--un--combineAll'(V0, V1, V2, V3, V1, V4))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V25 = begin (V18 = ('un--combineLinear'(V3, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V17) -> ('nested--17035-8288--in--un--notN'(V0, V1, V2, V3, V17)) end, V2))))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V0, V16} | V22]} end), V24 end(V19)) end end end end), V25 end(V13)) end end end end end.
'case--findLinear-7962'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case V7 of {'Core.TT.Ref', V9, V10, V11} -> case V8 of [] -> fun (V12) -> {'Prelude.Types.Right', []} end; _ -> begin (V18 = begin (V13 = V5), fun (V14) -> begin (V17 = (begin (V15 = V13), fun (V16) -> ('erlang':'get'(V15)) end end(V14))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V69 = begin (V55 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V11, case V22 of {'Core.Context.MkDefs', V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54} -> V23 end))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V68 = case V59 of {'Prelude.Types.Just', V60} -> begin (V61 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V5, [], V22, {'Core.Env.Nil'}, V60))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V66 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V0, ('nested--16235-7595--in--un--accessible'(V0, V1, V2, V3, V4, V5, V10, V2)), V65, V8))), V66 end(V62)) end end end end; {'Prelude.Types.Nothing'} -> fun (V67) -> {'Prelude.Types.Right', []} end end), V68 end(V56)) end end end end), V69 end(V19)) end end end end end; _ -> fun (V70) -> {'Prelude.Types.Right', []} end end; _ -> fun (V71) -> {'Prelude.Types.Right', []} end end.
'nested--27321-17107--in--un--withTotality'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V11))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V46 = begin (V19 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V11, V12))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V45 = begin (V32 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'((V13()), fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V11, V18))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V24, V30)) end), V31 end(V26)) end end end end end))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V44 = begin (V37 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V11, V18))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V43 = fun (V42) -> {'Prelude.Types.Right', V36} end), V43 end(V38)) end end end end), V44 end(V33)) end end end end), V45 end(V20)) end end end end), V46 end(V15)) end end end end.
'nested--19707-10703--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> [V21 | [('nested--19707-10702--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38)) | []]].
'nested--19525-10519--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> [('nested--19525-10518--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23)) | []].
'nested--19707-10702--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Core.Name.MN', <<"warg"/utf8>>, 0}.
'nested--19525-10518--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> {'Core.Name.MN', <<"warg"/utf8>>, 0}.
'nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V6)).
'nested--24873-14943--in--un--toErased'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Builtin.DPair.MkDPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> begin (V20 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'(V10, V6, V4, V7, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V16, V17)) end end, 0, fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V18, V19)) end end, 1})), 1, V12, V14))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V48 = begin (V25 = ('Idris.Idris2.Core.Transform':'un--applyTransforms'(V6, V12, V15))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V47 = begin (V30 = ('Idris.Idris2.TTImp.PartialEval':'un--applySpecialise'(V10, V6, V5, V4, V3, V2, V12, V8, V29))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V46 = begin (V39 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'(V10, V6, V4, V7, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V35, V36)) end end, 0, fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V37, V38)) end end, 1})), 1, V12, V34))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V45 = fun (V44) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V10, {'Builtin.MkPair', V12, {'Builtin.MkPair', V24, V43}}}} end), V45 end(V40)) end end end end), V46 end(V31)) end end end end), V47 end(V26)) end end end end), V48 end(V21)) end end end end end end end.
'nested--24873-14944--in--un--toClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Builtin.DPair.MkDPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> case V12 of {'Builtin.MkPair', V13, V14} -> {'Core.Context.Context.MkClause', V9, V11, V13, V14} end end end.
'nested--27321-17108--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Core.TT.Local', V13, V14, V15} -> 1; {'Core.TT.Erased', V16, V17} -> 1; {'Core.TT.As', V18, V19, V20, V21} -> ('nested--27321-17108--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V21)); _ -> 0 end.
'nested--17035-8288--in--un--notN'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V0, V5)) end.
'nested--24873-14936--in--un--noInline'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.Context.Context.Inline'} -> 0; {'Core.Context.Context.NoInline'} -> 0; _ -> ('nested--24873-14936--in--un--noInline'(V0, V1, V2, V3, V4, V5, V6, V9)) end end(E0, E1)); _ -> 1 end.
'nested--18282-10433--in--un--mkExplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Core.Env.Nil'} -> {'Core.Env.Nil'}; {'Core.Env.::', V22, V23} -> case V22 of {'Core.TT.Pi', V24, V25, V26, V27} -> {'Core.Env.::', {'Core.TT.Pi', V24, V25, {'Core.TT.Explicit'}, V27}, ('nested--18282-10433--in--un--mkExplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V23))}; _ -> {'Core.Env.::', V22, ('nested--18282-10433--in--un--mkExplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V23))} end end.
'nested--24873-14938--in--un--mkCrash'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.TT':'un--apply'(V1, {'Core.TT.Ref', V1, {'Core.TT.Func'}, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"idris_crash"/utf8>>}}}}, [{'Core.TT.Erased', V1, {'Core.TT.Placeholder'}} | [{'Core.TT.PrimVal', V1, {'Core.TT.Str', V8}} | []]])).
'nested--18282-10436--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'TTImp.TTImp.PatClause', V26, V27, V28} -> begin (V29 = ('Idris.Idris2.Core.Context.Log':'un--log'(V20, <<"declare.def.clause.with"/utf8>>, 20, fun () -> <<"PatClause"/utf8>> end))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V47 = begin (V34 = ('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'(V20, V19, V26, V21, V9, V22, V23, V24, V27))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V46 = begin (V39 = ('Idris.Idris2.TTImp.WithClause':'un--withRHS'(V20, V19, V26, V21, V22, V23, V28, V24))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V45 = fun (V44) -> {'Prelude.Types.Right', {'TTImp.TTImp.PatClause', V26, V38, V43}} end), V45 end(V40)) end end end end), V46 end(V35)) end end end end), V47 end(V30)) end end end end; {'TTImp.TTImp.WithClause', V48, V49, V50, V51, V52, V53, V54} -> begin (V55 = ('Idris.Idris2.Core.Context.Log':'un--log'(V20, <<"declare.def.clause.with"/utf8>>, 20, fun () -> <<"WithClause"/utf8>> end))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V80 = begin (V60 = ('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'(V20, V19, V48, V21, V9, V22, V23, V24, V49))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V79 = begin (V65 = ('Idris.Idris2.TTImp.WithClause':'un--withRHS'(V20, V19, V48, V21, V22, V23, V51, V24))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V78 = begin (V71 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V70) -> ('nested--18282-10436--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, (V21 + 1), V22, V23, V24, V70)) end, V54, []))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V77 = fun (V76) -> {'Prelude.Types.Right', {'TTImp.TTImp.WithClause', V48, V64, V50, V69, V52, V53, V75}} end), V77 end(V72)) end end end end), V78 end(V66)) end end end end), V79 end(V61)) end end end end), V80 end(V56)) end end end end; {'TTImp.TTImp.ImpossibleClause', V81, V82} -> begin (V83 = ('Idris.Idris2.Core.Context.Log':'un--log'(V20, <<"declare.def.clause.with"/utf8>>, 20, fun () -> <<"ImpossibleClause"/utf8>> end))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V95 = begin (V88 = ('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'(V20, V19, V81, V21, V9, V22, V23, V24, V82))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V94 = fun (V93) -> {'Prelude.Types.Right', {'TTImp.TTImp.ImpossibleClause', V81, V92}} end), V94 end(V89)) end end end end), V95 end(V84)) end end end end end.
'nested--24873-14939--in--un--matchAny'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.TT.App', V8, V9, V10} -> {'Core.TT.App', V8, ('nested--24873-14939--in--un--matchAny'(V0, V1, V2, V3, V4, V5, V6, V9)), {'Core.TT.Erased', V8, {'Core.TT.Placeholder'}}}; _ -> V7 end.
'nested--24873-14940--in--un--makeErrorClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> {'Core.Context.Context.MkClause', V7, V8, ('nested--24873-14939--in--un--matchAny'(V0, V1, V2, V3, V4, V5, V6, V9)), ('nested--24873-14938--in--un--mkCrash'(V0, V1, V2, V3, V4, V5, V6, V7, <<<<"Unhandled input for "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0))/binary, <<<<" at "/utf8>>/binary, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V1))/binary>>/binary>>/binary>>))}.
'nested--17035-8289--in--un--lookupAll'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> []; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Builtin.MkPair', V8, V9} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V8)) of 1 -> [V9 | ('nested--17035-8289--in--un--lookupAll'(V0, V1, V2, V3, V4, V7))]; 0 -> ('nested--17035-8289--in--un--lookupAll'(V0, V1, V2, V3, V4, V7)) end end end(E0, E1)) end.
'nested--18282-10435--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V22 of {'Core.TT.SubRefl'} -> {'Builtin.DPair.MkDPair', V21, {'Core.TT.SubRefl'}}; _ -> case V23 of {'Core.TT.SubRefl'} -> {'Builtin.DPair.MkDPair', V21, {'Core.TT.SubRefl'}}; _ -> case V21 of [E0 | E1] -> (fun (V24, V25) -> case V22 of {'Core.TT.DropCons', V26} -> case V23 of {'Core.TT.DropCons', V27} -> case ('nested--18282-10435--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V25, V26, V27)) of {'Builtin.DPair.MkDPair', V28, V29} -> {'Builtin.DPair.MkDPair', V28, {'Core.TT.DropCons', V29}} end; {'Core.TT.KeepCons', V30} -> case ('nested--18282-10435--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V25, V26, V30)) of {'Builtin.DPair.MkDPair', V31, V32} -> {'Builtin.DPair.MkDPair', [V24 | V31], {'Core.TT.KeepCons', V32}} end end; {'Core.TT.KeepCons', V33} -> case V23 of {'Core.TT.DropCons', V34} -> case ('nested--18282-10435--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V25, V33, V34)) of {'Builtin.DPair.MkDPair', V35, V36} -> {'Builtin.DPair.MkDPair', [V24 | V35], {'Core.TT.KeepCons', V36}} end; {'Core.TT.KeepCons', V37} -> case ('nested--18282-10435--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V25, V33, V37)) of {'Builtin.DPair.MkDPair', V38, V39} -> {'Builtin.DPair.MkDPair', [V24 | V38], {'Core.TT.KeepCons', V39}} end end end end(E0, E1)) end end end.
'nested--26255-16210--in--un--holeyType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of [] -> {'TTImp.TTImp.Implicit', V6, 0}; [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Builtin.MkPair', V18, V19} -> begin (V20 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V18))), {'TTImp.TTImp.IPi', V20, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Prelude.Types.Just', {'Core.Name.UN', {'Core.Name.Basic', V19}}}, {'TTImp.TTImp.Implicit', V20, 0}, ('nested--26255-16210--in--un--holeyType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17))} end end end(E0, E1)) end.
'nested--24873-14942--in--un--getSpec'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.Context.Context.PartialEval', V10} -> {'Prelude.Types.Just', V10}; _ -> ('nested--24873-14942--in--un--getSpec'(V0, V1, V2, V3, V4, V5, V6, V9)) end end(E0, E1)) end.
'nested--27321-17111--in--un--getClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Prelude.Types.Left', V13} -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V14 = ('Idris.Idris2.TTImp.Impossible':'un--getImpossibleTerm'(V0, V11, V4, V5, V13))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V26 = begin (V19 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"declare.def.impossible"/utf8>>, 3, fun () -> <<<<"Generated impossible LHS: "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V18))/binary>> end))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Core.Context.Context.MkClause', [], {'Core.Env.Nil'}, V18, {'Core.TT.Erased', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V13)), {'Core.TT.Impossible'}}}}} end), V25 end(V20)) end end end end), V26 end(V15)) end end end end, fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"declare.def"/utf8>>, 5, fun () -> <<<<"Error in getClause "/utf8>>/binary, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V27))/binary>> end))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V34 = fun (V33) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V34 end(V29)) end end end end end)); {'Prelude.Types.Right', V35} -> fun (V36) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V35}} end end.
'nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E8 | E9] -> (fun (V10, V11) -> case V10 of {'Core.TT.As', V12, V13, V14, V15} -> case V13 of 0 -> ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V15 | V11])); 1 -> ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V14 | V11])); _ -> case V8 of {'Core.Value.NBind', V16, V17, V18, V19} -> case V18 of {'Core.TT.Pi', V20, V21, V22, V23} -> case V9 of [E24 | E25] -> (fun (V24, V25) -> case V24 of {'Core.TT.Local', V26, V27, V28} -> begin (V34 = begin (V29 = V5), fun (V30) -> begin (V33 = (begin (V31 = V29), fun (V32) -> ('erlang':'get'(V31)) end end(V30))), {'Prelude.Types.Right', V33} end end end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V59 = begin (V39 = ('Idris.Idris2.Core.TT':'un--nameAt'(V6, V28))), case ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V28, V3)) of 1 -> begin (V40 = ((V19(V38))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V26, {'Core.TT.Bound'}, V17}))))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V52 = begin (V45 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V44, V25))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V51 = fun (V50) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V39, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V21, V7))} | V49]} end), V51 end(V46)) end end end end), V52 end(V41)) end end end end; 0 -> begin (V53 = ((V19(V38))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V26, {'Core.TT.Bound'}, V17}))))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V58 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V57, V25))), V58 end(V54)) end end end end end end), V59 end(V35)) end end end end; _ -> begin (V65 = begin (V60 = V5), fun (V61) -> begin (V64 = (begin (V62 = V60), fun (V63) -> ('erlang':'get'(V62)) end end(V61))), {'Prelude.Types.Right', V64} end end end), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V89 = begin (V70 = ('un--findLinear'(V6, V5, 0, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V21, V7)), V24))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V88 = begin (V75 = ((V19(V69))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V16, {'Core.TT.Bound'}, V17}))))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V87 = begin (V80 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V79, V25))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V86 = fun (V85) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V74, V84))} end), V86 end(V81)) end end end end), V87 end(V76)) end end end end), V88 end(V71)) end end end end), V89 end(V66)) end end end end end end(E24, E25)); _ -> case V9 of [E22 | E23] -> (fun (V90, V91) -> begin (V92 = ('un--findLinear'(V6, V5, 0, V3, V7, V90))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V104 = begin (V97 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V91))), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V103 = fun (V102) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V96, V101))} end), V103 end(V98)) end end end end), V104 end(V93)) end end end end end(E22, E23)); [] -> fun (V105) -> {'Prelude.Types.Right', []} end end end; _ -> case V9 of [E20 | E21] -> (fun (V106, V107) -> begin (V108 = ('un--findLinear'(V6, V5, 0, V3, V7, V106))), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V120 = begin (V113 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V107))), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V119 = fun (V118) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V112, V117))} end), V119 end(V114)) end end end end), V120 end(V109)) end end end end end(E20, E21)); [] -> fun (V121) -> {'Prelude.Types.Right', []} end end end; _ -> case V9 of [E18 | E19] -> (fun (V122, V123) -> begin (V124 = ('un--findLinear'(V6, V5, 0, V3, V7, V122))), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V136 = begin (V129 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V123))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V135 = fun (V134) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V128, V133))} end), V135 end(V130)) end end end end), V136 end(V125)) end end end end end(E18, E19)); [] -> fun (V137) -> {'Prelude.Types.Right', []} end end end end; _ -> case V8 of {'Core.Value.NBind', V138, V139, V140, V141} -> case V140 of {'Core.TT.Pi', V142, V143, V144, V145} -> case V9 of [E16 | E17] -> (fun (V146, V147) -> case V146 of {'Core.TT.Local', V148, V149, V150} -> begin (V156 = begin (V151 = V5), fun (V152) -> begin (V155 = (begin (V153 = V151), fun (V154) -> ('erlang':'get'(V153)) end end(V152))), {'Prelude.Types.Right', V155} end end end), fun (V157) -> begin (V158 = (V156(V157))), case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> (begin (V181 = begin (V161 = ('Idris.Idris2.Core.TT':'un--nameAt'(V6, V150))), case ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V150, V3)) of 1 -> begin (V162 = ((V141(V160))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V148, {'Core.TT.Bound'}, V139}))))), fun (V163) -> begin (V164 = (V162(V163))), case V164 of {'Prelude.Types.Left', V165} -> {'Prelude.Types.Left', V165}; {'Prelude.Types.Right', V166} -> (begin (V174 = begin (V167 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V166, V147))), fun (V168) -> begin (V169 = (V167(V168))), case V169 of {'Prelude.Types.Left', V170} -> {'Prelude.Types.Left', V170}; {'Prelude.Types.Right', V171} -> (begin (V173 = fun (V172) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V161, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V143, V7))} | V171]} end), V173 end(V168)) end end end end), V174 end(V163)) end end end end; 0 -> begin (V175 = ((V141(V160))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V148, {'Core.TT.Bound'}, V139}))))), fun (V176) -> begin (V177 = (V175(V176))), case V177 of {'Prelude.Types.Left', V178} -> {'Prelude.Types.Left', V178}; {'Prelude.Types.Right', V179} -> (begin (V180 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V179, V147))), V180 end(V176)) end end end end end end), V181 end(V157)) end end end end; _ -> begin (V187 = begin (V182 = V5), fun (V183) -> begin (V186 = (begin (V184 = V182), fun (V185) -> ('erlang':'get'(V184)) end end(V183))), {'Prelude.Types.Right', V186} end end end), fun (V188) -> begin (V189 = (V187(V188))), case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> (begin (V211 = begin (V192 = ('un--findLinear'(V6, V5, 0, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V143, V7)), V146))), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V210 = begin (V197 = ((V141(V191))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V138, {'Core.TT.Bound'}, V139}))))), fun (V198) -> begin (V199 = (V197(V198))), case V199 of {'Prelude.Types.Left', V200} -> {'Prelude.Types.Left', V200}; {'Prelude.Types.Right', V201} -> (begin (V209 = begin (V202 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V201, V147))), fun (V203) -> begin (V204 = (V202(V203))), case V204 of {'Prelude.Types.Left', V205} -> {'Prelude.Types.Left', V205}; {'Prelude.Types.Right', V206} -> (begin (V208 = fun (V207) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V196, V206))} end), V208 end(V203)) end end end end), V209 end(V198)) end end end end), V210 end(V193)) end end end end), V211 end(V188)) end end end end end end(E16, E17)); _ -> case V9 of [E14 | E15] -> (fun (V212, V213) -> begin (V214 = ('un--findLinear'(V6, V5, 0, V3, V7, V212))), fun (V215) -> begin (V216 = (V214(V215))), case V216 of {'Prelude.Types.Left', V217} -> {'Prelude.Types.Left', V217}; {'Prelude.Types.Right', V218} -> (begin (V226 = begin (V219 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V213))), fun (V220) -> begin (V221 = (V219(V220))), case V221 of {'Prelude.Types.Left', V222} -> {'Prelude.Types.Left', V222}; {'Prelude.Types.Right', V223} -> (begin (V225 = fun (V224) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V218, V223))} end), V225 end(V220)) end end end end), V226 end(V215)) end end end end end(E14, E15)); [] -> fun (V227) -> {'Prelude.Types.Right', []} end end end; _ -> case V9 of [E12 | E13] -> (fun (V228, V229) -> begin (V230 = ('un--findLinear'(V6, V5, 0, V3, V7, V228))), fun (V231) -> begin (V232 = (V230(V231))), case V232 of {'Prelude.Types.Left', V233} -> {'Prelude.Types.Left', V233}; {'Prelude.Types.Right', V234} -> (begin (V242 = begin (V235 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V229))), fun (V236) -> begin (V237 = (V235(V236))), case V237 of {'Prelude.Types.Left', V238} -> {'Prelude.Types.Left', V238}; {'Prelude.Types.Right', V239} -> (begin (V241 = fun (V240) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V234, V239))} end), V241 end(V236)) end end end end), V242 end(V231)) end end end end end(E12, E13)); [] -> fun (V243) -> {'Prelude.Types.Right', []} end end end; _ -> case V9 of [E10 | E11] -> (fun (V244, V245) -> begin (V246 = ('un--findLinear'(V6, V5, 0, V3, V7, V244))), fun (V247) -> begin (V248 = (V246(V247))), case V248 of {'Prelude.Types.Left', V249} -> {'Prelude.Types.Left', V249}; {'Prelude.Types.Right', V250} -> (begin (V258 = begin (V251 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V245))), fun (V252) -> begin (V253 = (V251(V252))), case V253 of {'Prelude.Types.Left', V254} -> {'Prelude.Types.Left', V254}; {'Prelude.Types.Right', V255} -> (begin (V257 = fun (V256) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V250, V255))} end), V257 end(V252)) end end end end), V258 end(V247)) end end end end end(E10, E11)); [] -> fun (V259) -> {'Prelude.Types.Right', []} end end end end end(E8, E9)); _ -> case V8 of {'Core.Value.NBind', V260, V261, V262, V263} -> case V262 of {'Core.TT.Pi', V264, V265, V266, V267} -> case V9 of [E6 | E7] -> (fun (V268, V269) -> case V268 of {'Core.TT.Local', V270, V271, V272} -> begin (V278 = begin (V273 = V5), fun (V274) -> begin (V277 = (begin (V275 = V273), fun (V276) -> ('erlang':'get'(V275)) end end(V274))), {'Prelude.Types.Right', V277} end end end), fun (V279) -> begin (V280 = (V278(V279))), case V280 of {'Prelude.Types.Left', V281} -> {'Prelude.Types.Left', V281}; {'Prelude.Types.Right', V282} -> (begin (V303 = begin (V283 = ('Idris.Idris2.Core.TT':'un--nameAt'(V6, V272))), case ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V272, V3)) of 1 -> begin (V284 = ((V263(V282))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V270, {'Core.TT.Bound'}, V261}))))), fun (V285) -> begin (V286 = (V284(V285))), case V286 of {'Prelude.Types.Left', V287} -> {'Prelude.Types.Left', V287}; {'Prelude.Types.Right', V288} -> (begin (V296 = begin (V289 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V288, V269))), fun (V290) -> begin (V291 = (V289(V290))), case V291 of {'Prelude.Types.Left', V292} -> {'Prelude.Types.Left', V292}; {'Prelude.Types.Right', V293} -> (begin (V295 = fun (V294) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V283, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V265, V7))} | V293]} end), V295 end(V290)) end end end end), V296 end(V285)) end end end end; 0 -> begin (V297 = ((V263(V282))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V270, {'Core.TT.Bound'}, V261}))))), fun (V298) -> begin (V299 = (V297(V298))), case V299 of {'Prelude.Types.Left', V300} -> {'Prelude.Types.Left', V300}; {'Prelude.Types.Right', V301} -> (begin (V302 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V301, V269))), V302 end(V298)) end end end end end end), V303 end(V279)) end end end end; _ -> begin (V309 = begin (V304 = V5), fun (V305) -> begin (V308 = (begin (V306 = V304), fun (V307) -> ('erlang':'get'(V306)) end end(V305))), {'Prelude.Types.Right', V308} end end end), fun (V310) -> begin (V311 = (V309(V310))), case V311 of {'Prelude.Types.Left', V312} -> {'Prelude.Types.Left', V312}; {'Prelude.Types.Right', V313} -> (begin (V333 = begin (V314 = ('un--findLinear'(V6, V5, 0, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V265, V7)), V268))), fun (V315) -> begin (V316 = (V314(V315))), case V316 of {'Prelude.Types.Left', V317} -> {'Prelude.Types.Left', V317}; {'Prelude.Types.Right', V318} -> (begin (V332 = begin (V319 = ((V263(V313))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V260, {'Core.TT.Bound'}, V261}))))), fun (V320) -> begin (V321 = (V319(V320))), case V321 of {'Prelude.Types.Left', V322} -> {'Prelude.Types.Left', V322}; {'Prelude.Types.Right', V323} -> (begin (V331 = begin (V324 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V323, V269))), fun (V325) -> begin (V326 = (V324(V325))), case V326 of {'Prelude.Types.Left', V327} -> {'Prelude.Types.Left', V327}; {'Prelude.Types.Right', V328} -> (begin (V330 = fun (V329) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V318, V328))} end), V330 end(V325)) end end end end), V331 end(V320)) end end end end), V332 end(V315)) end end end end), V333 end(V310)) end end end end end end(E6, E7)); _ -> case V9 of [E4 | E5] -> (fun (V334, V335) -> begin (V336 = ('un--findLinear'(V6, V5, 0, V3, V7, V334))), fun (V337) -> begin (V338 = (V336(V337))), case V338 of {'Prelude.Types.Left', V339} -> {'Prelude.Types.Left', V339}; {'Prelude.Types.Right', V340} -> (begin (V348 = begin (V341 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V335))), fun (V342) -> begin (V343 = (V341(V342))), case V343 of {'Prelude.Types.Left', V344} -> {'Prelude.Types.Left', V344}; {'Prelude.Types.Right', V345} -> (begin (V347 = fun (V346) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V340, V345))} end), V347 end(V342)) end end end end), V348 end(V337)) end end end end end(E4, E5)); [] -> fun (V349) -> {'Prelude.Types.Right', []} end end end; _ -> case V9 of [E2 | E3] -> (fun (V350, V351) -> begin (V352 = ('un--findLinear'(V6, V5, 0, V3, V7, V350))), fun (V353) -> begin (V354 = (V352(V353))), case V354 of {'Prelude.Types.Left', V355} -> {'Prelude.Types.Left', V355}; {'Prelude.Types.Right', V356} -> (begin (V364 = begin (V357 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V351))), fun (V358) -> begin (V359 = (V357(V358))), case V359 of {'Prelude.Types.Left', V360} -> {'Prelude.Types.Left', V360}; {'Prelude.Types.Right', V361} -> (begin (V363 = fun (V362) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V356, V361))} end), V363 end(V358)) end end end end), V364 end(V353)) end end end end end(E2, E3)); [] -> fun (V365) -> {'Prelude.Types.Right', []} end end end; _ -> case V9 of [E0 | E1] -> (fun (V366, V367) -> begin (V368 = ('un--findLinear'(V6, V5, 0, V3, V7, V366))), fun (V369) -> begin (V370 = (V368(V369))), case V370 of {'Prelude.Types.Left', V371} -> {'Prelude.Types.Left', V371}; {'Prelude.Types.Right', V372} -> (begin (V380 = begin (V373 = ('nested--16235-7596--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V367))), fun (V374) -> begin (V375 = (V373(V374))), case V375 of {'Prelude.Types.Left', V376} -> {'Prelude.Types.Left', V376}; {'Prelude.Types.Right', V377} -> (begin (V379 = fun (V378) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V372, V377))} end), V379 end(V374)) end end end end), V380 end(V369)) end end end end end(E0, E1)); [] -> fun (V381) -> {'Prelude.Types.Right', []} end end end end.
'nested--24205-14353--in--un--dropErased'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> fun (V6) -> {'Prelude.Types.Right', V5} end; [E0 | E1] -> (fun (V7, V8) -> begin (V14 = begin (V9 = V3), fun (V10) -> begin (V13 = (begin (V11 = V9), fun (V12) -> ('erlang':'get'(V11)) end end(V10))), {'Prelude.Types.Right', V13} end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V84 = begin (V51 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V7, case V18 of {'Core.Context.MkDefs', V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> V19 end))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V83 = case V55 of {'Prelude.Types.Just', V56} -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V56 of {'Core.Context.Context.MkGlobalDef', V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78} -> V64 end, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V79) -> fun (V80) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V79, V80)) end end, 0, fun (V81) -> fun (V82) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V81, V82)) end end, 1})))) of 1 -> ('nested--24205-14353--in--un--dropErased'(V0, V1, V2, V3, V8, V5)); 0 -> ('nested--24205-14353--in--un--dropErased'(V0, V1, V2, V3, V8, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'(V7, V5)))) end; {'Prelude.Types.Nothing'} -> ('nested--24205-14353--in--un--dropErased'(V0, V1, V2, V3, V8, V5)) end), V83 end(V52)) end end end end), V84 end(V15)) end end end end end(E0, E1)) end.
'nested--17035-8291--in--un--combineAll'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Prelude.Types.Right', V4} end; [E0 | E1] -> (fun (V7, V8) -> begin (V10 = fun (V9) -> ('nested--17035-8290--in--un--combine'(V0, V1, V2, V3, V4, V7, V9)) end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V15 = ('nested--17035-8291--in--un--combineAll'(V0, V1, V2, V3, V14, V8))), V15 end(V11)) end end end end end(E0, E1)) end.
'nested--17035-8290--in--un--combine'(V0, V1, V2, V3, V4, V5, V6) -> case case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V4, V5)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V7, V8)) end end, 0, fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V9, V10)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V13, V14)) end end}}, ('Idris.Idris2.Algebra.Preorder':'un--glb'({'Algebra.Preorder.dn--un--__mkPreorder', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V15, V16)) end end, fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V17)) end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V18, V19, V20, V21, V22)) end end end end end}, V4, V5)))) of 1 -> 0; 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Algebra.Preorder':'un--glb'({'Algebra.Preorder.dn--un--__mkPreorder', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V23, V24)) end end, fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V25)) end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V26, V27, V28, V29, V30)) end end end end end}, V4, V5)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) end; 0 -> 0 end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.LinearUsed', V3, 2, V0}, V6)); 0 -> {'Prelude.Types.Right', ('Idris.Idris2.Algebra.Preorder':'un--lub'({'Algebra.Preorder.dn--un--__mkPreorder', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V31, V32)) end end, fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V33)) end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V34, V35, V36, V37, V38)) end end end end end}, V4, V5))} end.
'nested--27388-17234--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Core.Value.NBind', V17, V18, V19, V20} -> case V19 of {'Core.TT.PVar', V21, V22, V23, V24} -> begin (V25 = ((V20(V15))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V3, {'Core.TT.Bound'}, V18}))))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V30 = ('nested--27388-17234--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V29))), V30 end(V26)) end end end end; _ -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V11, [], V15, {'Core.Env.Nil'}, V16)) end; _ -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V11, [], V15, {'Core.Env.Nil'}, V16)) end.
'nested--27321-17110--in--un--checkImpossible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V15 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoPatvars'([], V11, {'Core.Env.Nil'}, V14))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V188 = begin (V24 = ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V20) -> case V20 of {'Core.TT.MkKindedName', V21, V22, V23} -> V23 end end, V19))), ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V11, V9, begin (V30 = begin (V25 = V11), fun (V26) -> begin (V29 = (begin (V27 = V25), fun (V28) -> ('erlang':'get'(V27)) end end(V26))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V168 = begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"declare.def.impossible"/utf8>>, 3, fun () -> <<<<"Checking for impossibility: "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V36, V37)) end end}, V24))/binary>> end))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V167 = begin (V43 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V11))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V166 = begin (V48 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V11, 1))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V165 = begin (V53 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V11, 0, V24))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V164 = case V57 of {'Builtin.MkPair', V58, V59} -> begin (V60 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V11, V47))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V163 = begin (V65 = ('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V11, V10, V9, V8, V7, V12, {'TTImp.Elab.Check.InLHS', V13}, [], [], {'Core.Env.Nil'}, {'TTImp.TTImp.IBindHere', V3, {'TTImp.TTImp.COVERAGE'}, V59}, {'Prelude.Types.Nothing'}))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V162 = case V69 of {'Builtin.MkPair', V70, V71} -> begin (V77 = begin (V72 = V11), fun (V73) -> begin (V76 = (begin (V74 = V72), fun (V75) -> ('erlang':'get'(V74)) end end(V73))), {'Prelude.Types.Right', V76} end end end), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V161 = begin (V82 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V11, [], V81, {'Core.Env.Nil'}, V70))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V160 = begin (V87 = ('un--hasEmptyPat'([], V11, V81, {'Core.Env.Nil'}, V86))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V159 = case V91 of 1 -> begin (V98 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, (begin (V93 = fun (V92) -> V92 end), fun (V94) -> (V93(V94)) end end(<<"declare.def.impossible"/utf8>>)), 5, fun () -> (begin (V96 = fun (V95) -> V95 end), fun (V97) -> (V96(V97)) end end(<<"Some empty pat"/utf8>>)) end))), fun (V99) -> begin (V100 = (V98(V99))), case V100 of {'Prelude.Types.Left', V101} -> {'Prelude.Types.Left', V101}; {'Prelude.Types.Right', V102} -> (begin (V115 = begin (V108 = begin (V103 = V11), fun (V104) -> begin (V107 = (begin (V105 = V103), fun (V106) -> ('erlang':'put'(V105, V34)) end end(V104))), {'Prelude.Types.Right', V107} end end end), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V114 = fun (V113) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V114 end(V109)) end end end end), V115 end(V99)) end end end end; 0 -> begin (V122 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, (begin (V117 = fun (V116) -> V116 end), fun (V118) -> (V117(V118)) end end(<<"declare.def.impossible"/utf8>>)), 5, fun () -> (begin (V120 = fun (V119) -> V119 end), fun (V121) -> (V120(V121)) end end(<<"No empty pat"/utf8>>)) end))), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V158 = begin (V128 = fun (V127) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V34, V127)) end), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V157 = begin (V139 = begin (V133 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V11, [], V132, {'Core.Env.Nil'}, V86))), fun (V134) -> begin (V135 = (V133(V134))), case V135 of {'Prelude.Types.Left', V136} -> {'Prelude.Types.Left', V136}; {'Prelude.Types.Right', V137} -> (begin (V138 = ('nested--27388-17234--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14, V13, V12, V132, V137))), V138 end(V134)) end end end end), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V156 = begin (V149 = begin (V144 = V11), fun (V145) -> begin (V148 = (begin (V146 = V144), fun (V147) -> ('erlang':'put'(V146, V34)) end end(V145))), {'Prelude.Types.Right', V148} end end end), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V155 = fun (V154) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V143}} end), V155 end(V150)) end end end end), V156 end(V140)) end end end end), V157 end(V129)) end end end end), V158 end(V123)) end end end end end), V159 end(V88)) end end end end), V160 end(V83)) end end end end), V161 end(V78)) end end end end end), V162 end(V66)) end end end end), V163 end(V61)) end end end end end), V164 end(V54)) end end end end), V165 end(V49)) end end end end), V166 end(V44)) end end end end), V167 end(V39)) end end end end), V168 end(V31)) end end end end, fun (V169) -> begin (V175 = begin (V170 = V11), fun (V171) -> begin (V174 = (begin (V172 = V170), fun (V173) -> ('erlang':'get'(V172)) end end(V171))), {'Prelude.Types.Right', V174} end end end), fun (V176) -> begin (V177 = (V175(V176))), case V177 of {'Prelude.Types.Left', V178} -> {'Prelude.Types.Left', V178}; {'Prelude.Types.Right', V179} -> (begin (V187 = begin (V180 = ('un--recoverableErr'(V11, V179, V169))), fun (V181) -> begin (V182 = (V180(V181))), case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> (begin (V186 = fun (V185) -> case V184 of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Just', V14}}; 0 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V186 end(V181)) end end end end), V187 end(V176)) end end end end end)) end), V188 end(V16)) end end end end.
'nested--27321-17112--in--un--checkCoverage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V17 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V16) -> ('nested--27321-17111--in--un--getClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V16)) end, V15, []))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V174 = begin (V52 = begin (V35 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V22) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V11, {'Core.Context.dn--un--__mkHasNames', fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'({'Core.Context.dn--un--__mkHasNames', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Clause'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Clause'(V27, V28)) end end}, V23, V24)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'({'Core.Context.dn--un--__mkHasNames', fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Clause'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Clause'(V33, V34)) end end}, V29, V30)) end end}, V22)) end, V21, []))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V51 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"declare.def"/utf8>>, 5, fun () -> ('Idris.Idris2.Data.String':'un--fastUnlines'([<<"Using clauses :"/utf8>> | ((begin (V48 = fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V46, V47)) end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end(fun (V40) -> <<<<"  "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Clause'(V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Context.Context':'dn--un--showPrec_Show_Clause'(V42, V43)) end end}, V40))/binary>> end))(V39))])) end))), V51 end(V36)) end end end end), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V173 = begin (V58 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V57) -> V57 end, V21))), begin (V59 = ('Idris.Idris2.Core.Case.CaseBuilder':'un--getPMDef'(V11, V3, {'Core.Case.CaseBuilder.CompileTime', V14}, {'Core.Name.Resolved', V12}, V13, V58))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V172 = case V63 of {'Builtin.DPair.MkDPair', V64, V65} -> case V65 of {'Builtin.MkPair', V66, V67} -> begin (V84 = begin (V72 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V11, {'Core.Context.dn--un--__mkHasNames', fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'(V70, V71)) end end}, V66))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V83 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, (begin (V78 = fun (V77) -> V77 end), fun (V79) -> (V78(V79)) end end(<<"declare.def"/utf8>>)), 3, fun () -> <<(begin (V81 = fun (V80) -> V80 end), fun (V82) -> (V81(V82)) end end(<<"Working from "/utf8>>))/binary, ('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V64, V76))/binary>> end))), V83 end(V73)) end end end end), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V171 = begin (V99 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V89, V90)) end end, 0}, fun (V91) -> ('nested--27321-17109--in--un--catchAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V91)) end, V58)) of 1 -> begin (V92 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"declare.def"/utf8>>, 3, fun () -> <<<<"Catch all case in "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12))/binary>> end))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V98 = fun (V97) -> {'Prelude.Types.Right', []} end), V98 end(V93)) end end end end; 0 -> ('Idris.Idris2.Core.Coverage':'un--getMissing'(V64, V11, V3, {'Core.Name.Resolved', V12}, V66)) end), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V170 = begin (V136 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V11, (begin (V105 = fun (V104) -> V104 end), fun (V106) -> (V105(V106)) end end(<<"declare.def"/utf8>>)), 3, begin (V112 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V107) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V11, {'Core.Context.dn--un--__mkHasNames', fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V108, V109)) end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V110, V111)) end end}, V107)) end, V103, []))), fun (V113) -> begin (V114 = (V112(V113))), case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> (begin (V135 = begin (V117 = ('Idris.Idris2.Core.Context':'un--getFullName'(V11, {'Core.Name.Resolved', V12}))), fun (V118) -> begin (V119 = (V117(V118))), case V119 of {'Prelude.Types.Left', V120} -> {'Prelude.Types.Left', V120}; {'Prelude.Types.Right', V121} -> (begin (V134 = fun (V122) -> {'Prelude.Types.Right', <<(begin (V124 = fun (V123) -> V123 end), fun (V125) -> (V124(V125)) end end(<<"Initially missing in "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V121))/binary, <<<<":\x{a}"/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ((begin (V131 = fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V129, V130)) end end end end), fun (V132) -> fun (V133) -> ((((V131('erased'))('erased'))(V132))(V133)) end end end(fun (V126) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V126)) end))(V116))))/binary>>/binary>>/binary>>} end), V134 end(V118)) end end end end), V135 end(V113)) end end end end))), fun (V137) -> begin (V138 = (V136(V137))), case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> (begin (V169 = begin (V142 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V141) -> ('nested--27321-17110--in--un--checkImpossible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V14, V141)) end, V103, []))), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V168 = begin (V149 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V147) -> ('Idris.Idris2.Core.Coverage':'un--checkMatched'(V11, V58, V147)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V148) -> V148 end, V146)), []))), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V167 = begin (V154 = ('Idris.Idris2.Data.List':'un--catMaybes'(V153))), case ('Idris.Idris2.Data.List':'un--isNil'(V154)) of 1 -> begin (V155 = ('Idris.Idris2.Core.Coverage':'un--getNonCoveringRefs'(V11, V3, {'Core.Name.Resolved', V12}))), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V165 = case V159 of [] -> fun (V160) -> {'Prelude.Types.Right', {'Core.TT.IsCovering'}} end; _ -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V11, {'Core.Context.dn--un--__mkHasNames', fun (V161) -> fun (V162) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Covering'(V161, V162)) end end, fun (V163) -> fun (V164) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Covering'(V163, V164)) end end}, {'Core.TT.NonCoveringCall', V159})) end), V165 end(V156)) end end end end; 0 -> fun (V166) -> {'Prelude.Types.Right', {'Core.TT.MissingCases', V154}} end end end), V167 end(V150)) end end end end), V168 end(V143)) end end end end), V169 end(V137)) end end end end), V170 end(V100)) end end end end), V171 end(V85)) end end end end end end), V172 end(V60)) end end end end end), V173 end(V53)) end end end end), V174 end(V18)) end end end end.
'nested--27321-17109--in--un--catchAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Core.Context.Context.MkClause', V13, V14, V15, V16} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V17, V18)) end end, 1}, fun (V19) -> ('nested--27321-17108--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V19)) end, ('Idris.Idris2.Core.TT':'un--getArgs'(V15)))) end.
'nested--24873-14937--in--un--caseName'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.Name.CaseBlock', V8, V9} -> 1; {'Core.Name.NS', V10, V11} -> ('nested--24873-14937--in--un--caseName'(V0, V1, V2, V3, V4, V5, V6, V11)); _ -> 0 end.
'nested--18282-10434--in--un--bindWithArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V23 of {'Prelude.Types.Nothing'} -> begin (V25 = {'Core.Env.::', {'Core.TT.Pi', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V22}, V24}), begin (V26 = {'Core.TT.Local', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), {'Prelude.Types.Just', 0}, 0}), begin (V28 = fun (V27) -> {'Core.TT.Bind', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), ('nested--19525-10518--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V24, V22, V21)), {'Core.TT.Pi', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), V21, {'Core.TT.Explicit'}, V22}, V27} end), fun (V29) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', ('nested--19525-10519--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V24, V22, V21)), {'Builtin.MkPair', V25, {'Builtin.MkPair', V26, V28}}}} end end end end; {'Prelude.Types.Just', V30} -> case V30 of {'Builtin.MkPair', V31, V32} -> begin (V38 = begin (V33 = V20), fun (V34) -> begin (V37 = (begin (V35 = V33), fun (V36) -> ('erlang':'get'(V35)) end end(V34))), {'Prelude.Types.Right', V37} end end end), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V112 = begin (V43 = {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"Equal"/utf8>>}}}), begin (V76 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V43, case V42 of {'Core.Context.MkDefs', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75} -> V44 end))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V111 = case V80 of {'Prelude.Types.Just', V81} -> case V81 of {'Core.Context.Context.TCon', V82, V83, V84, V85, V86, V87, V88, V89} -> begin (V95 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V20, {'Core.Context.dn--un--__mkHasNames', fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V90, V91)) end end, fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V92, V93, V94)) end end end}, V43))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V108 = begin (V100 = {'Core.TT.Ref', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), {'Core.TT.TyCon', V82, V83}, V99}), begin (V101 = ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V22))), begin (V102 = ('Idris.Idris2.Core.TT':'un--apply'(('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), V100, [V101 | [V101 | [('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V32)) | [{'Core.TT.Local', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), {'Prelude.Types.Just', 0}, 0} | []]]]]))), begin (V103 = {'Core.Env.::', {'Core.TT.Pi', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Implicit'}, V102}, {'Core.Env.::', {'Core.TT.Pi', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V22}, V24}}), begin (V104 = {'Core.TT.Local', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), {'Prelude.Types.Just', 0}, 1}), begin (V106 = fun (V105) -> {'Core.TT.Bind', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), ('nested--19707-10702--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V31, V32, V24, V22, V21, V42, V43, V84, V85, V86, V87, V88, V89, V83, V82, V80, V99, V100)), {'Core.TT.Pi', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), V21, {'Core.TT.Explicit'}, V22}, {'Core.TT.Bind', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), V31, {'Core.TT.Pi', ('nested--18282-10432--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)), V21, {'Core.TT.Implicit'}, V102}, V105}} end), fun (V107) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', ('nested--19707-10703--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V31, V32, V24, V22, V21, V42, V43, V84, V85, V86, V87, V88, V89, V83, V82, V80, V99, V100)), {'Builtin.MkPair', V103, {'Builtin.MkPair', V104, V106}}}} end end end end end end end), V108 end(V96)) end end end end; _ -> fun (V109) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Cannot find builtin Equal"/utf8>>}, V109)) end end; _ -> fun (V110) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Cannot find builtin Equal"/utf8>>}, V110)) end end), V111 end(V77)) end end end end end), V112 end(V39)) end end end end end end.
'nested--24873-14941--in--un--addErrorCase'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> []; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.Context.Context.MkClause', V10, V11, V12, V13} -> case V9 of [] -> [{'Core.Context.Context.MkClause', V10, V11, V12, V13} | [('nested--24873-14940--in--un--makeErrorClause'(V0, V1, V2, V3, V4, V5, V6, V10, V11, V12)) | []]]; _ -> [V8 | ('nested--24873-14941--in--un--addErrorCase'(V0, V1, V2, V3, V4, V5, V6, V9))] end; _ -> [V8 | ('nested--24873-14941--in--un--addErrorCase'(V0, V1, V2, V3, V4, V5, V6, V9))] end end(E0, E1)) end.
'nested--16235-7595--in--un--accessible'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Core.TT.Func'} -> case V4 of 1 -> V7; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V8, V9)) end end, 0, fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V10, V11)) end end, 1})) end; _ -> V7 end.
'un--warnUnreachable'(V0, V1) -> case V1 of {'Core.Context.Context.MkClause', V2, V3, V4, V5} -> ('Idris.Idris2.Core.Context':'un--recordWarning'(V0, {'Core.Core.UnreachableClause', V2, ('Idris.Idris2.Core.TT':'un--getLoc'(V4)), V3, V4})) end.
'un--toPats'(V0) -> case V0 of {'Core.Context.Context.MkClause', V1, V2, V3, V4} -> {'Builtin.DPair.MkDPair', V1, {'Builtin.MkPair', V2, {'Builtin.MkPair', V3, V4}}} end.
'un--setLinear'(V0, V1) -> case V1 of {'Core.TT.Bind', V2, V3, V4, V5} -> case V4 of {'Core.TT.PVar', V6, V7, V8, V9} -> begin (V10 = {'Core.TT.PVar', V6, V7, V8, V9}), case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, V3, V0)) of {'Prelude.Types.Just', V15} -> {'Core.TT.Bind', V2, V3, ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V10, V15)), ('un--setLinear'(V0, V5))}; _ -> {'Core.TT.Bind', V2, V3, V10, ('un--setLinear'(V0, V5))} end end; {'Core.TT.PVTy', V16, V17, V18} -> begin (V19 = {'Core.TT.PVTy', V16, V17, V18}), case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V22, V23)) end end}, V3, V0)) of {'Prelude.Types.Just', V24} -> {'Core.TT.Bind', V2, V3, ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V19, V24)), ('un--setLinear'(V0, V5))}; _ -> {'Core.TT.Bind', V2, V3, V19, ('un--setLinear'(V0, V5))} end end; _ -> V1 end; _ -> V1 end.
'un--recoverableErr'(V0, V1, V2) -> case V2 of {'Core.Core.CantConvert', V3, V4, V5, V6, V7, V8} -> begin (V41 = case V1 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> {'Core.Context.MkDefs', V5, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} end), begin (V42 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V3, V41, V6, V7))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V59 = begin (V47 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V3, V41, V6, V8))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V58 = begin (V52 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.recover"/utf8>>, 10, fun () -> ('Idris.Idris2.Data.String':'un--fastUnlines'([<<"Recovering from CantConvert?"/utf8>> | [<<"Checking:"/utf8>> | [<<<<"  "/utf8>>/binary, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V3, V46))/binary>> | [<<<<"  "/utf8>>/binary, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V3, V51))/binary>> | []]]]])) end))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V57 = ('un--recoverable'(V0, V3, V41, V46, V51))), V57 end(V53)) end end end end), V58 end(V48)) end end end end), V59 end(V43)) end end end end end; {'Core.Core.CantSolveEq', V60, V61, V62, V63, V64, V65} -> begin (V98 = case V1 of {'Core.Context.MkDefs', V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97} -> {'Core.Context.MkDefs', V62, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97} end), begin (V99 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V60, V98, V63, V64))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V110 = begin (V104 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V60, V98, V63, V65))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V109 = ('un--recoverable'(V0, V60, V98, V103, V108))), V109 end(V105)) end end end end), V110 end(V100)) end end end end end; {'Core.Core.BadDotPattern', V111, V112, V113, V114, V115, V116} -> fun (V117) -> case V114 of 3 -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Core.CyclicMeta', V118, V119, V120, V121, V122} -> fun (V123) -> {'Prelude.Types.Right', 0} end; {'Core.Core.AllFailed', V124} -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V125) -> ('un--recoverableErr'(V0, V1, V125)) end, ((begin (V131 = fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V129, V130)) end end end end), fun (V132) -> fun (V133) -> ((((V131('erased'))('erased'))(V132))(V133)) end end end(fun (V126) -> ('Idris.Idris2.Builtin':'un--snd'(V126)) end))(V124)))); {'Core.Core.WhenUnifying', V134, V135, V136, V137, V138, V139, V140} -> ('un--recoverableErr'(V0, V1, V140)); _ -> fun (V141) -> {'Prelude.Types.Right', 0} end end.
'un--recoverable'(V0, V1, V2, V3, V4) -> case V3 of {'Core.Value.NTCon', V5, V6, V7, V8, V9} -> case V4 of {'Core.Value.NTCon', V10, V11, V12, V13, V14} -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V11)) of 1 -> fun (V15) -> {'Prelude.Types.Right', 0} end; 0 -> begin (V44 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> ('un--mismatch'(V0, V1, V2, V16)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V19) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> case V26 of {'Builtin.MkPair', V27, V28} -> {'Builtin.MkPair', (V24(V27)), (V25(V28))} end end end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> case V33 of {'Builtin.MkPair', V34, V35} -> {'Builtin.MkPair', (V32(V34)), V35} end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> case V40 of {'Builtin.MkPair', V41, V42} -> {'Builtin.MkPair', V41, (V39(V42))} end end end end end end}, fun (V43) -> ('Idris.Idris2.Builtin':'un--snd'(V43)) end, V19)) end, V17, V18)) end end, V9, V14))))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V50 = fun (V49) -> {'Prelude.Types.Right', case V48 of 1 -> 0; 0 -> 1 end} end), V50 end(V45)) end end end end end; {'Core.Value.NPrimVal', V51, V52} -> fun (V53) -> {'Prelude.Types.Right', 0} end; {'Core.Value.NType', V54, V55} -> fun (V56) -> {'Prelude.Types.Right', 0} end; {'Core.Value.NBind', V57, V58, V59, V60} -> fun (V61) -> {'Prelude.Types.Right', 0} end; _ -> fun (V62) -> {'Prelude.Types.Right', 1} end end; {'Core.Value.NPrimVal', V63, V64} -> case V4 of {'Core.Value.NTCon', V65, V66, V67, V68, V69} -> fun (V70) -> {'Prelude.Types.Right', 0} end; _ -> case V4 of {'Core.Value.NTCon', V71, V72, V73, V74, V75} -> fun (V76) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NDCon', V77, V78, V79, V80, V81} -> case V4 of {'Core.Value.NDCon', V82, V83, V84, V85, V86} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V79, V84)) of 1 -> fun (V87) -> {'Prelude.Types.Right', 0} end; 0 -> begin (V116 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V88) -> ('un--mismatch'(V0, V1, V2, V88)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V91) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> case V98 of {'Builtin.MkPair', V99, V100} -> {'Builtin.MkPair', (V96(V99)), (V97(V100))} end end end end end end end end, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> case V105 of {'Builtin.MkPair', V106, V107} -> {'Builtin.MkPair', (V104(V106)), V107} end end end end end end, fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> case V112 of {'Builtin.MkPair', V113, V114} -> {'Builtin.MkPair', V113, (V111(V114))} end end end end end end}, fun (V115) -> ('Idris.Idris2.Builtin':'un--snd'(V115)) end, V91)) end, V89, V90)) end end, V81, V86))))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V122 = fun (V121) -> {'Prelude.Types.Right', case V120 of 1 -> 0; 0 -> 1 end} end), V122 end(V117)) end end end end end; {'Core.Value.NPrimVal', V123, V124} -> fun (V125) -> {'Prelude.Types.Right', 0} end; _ -> fun (V126) -> {'Prelude.Types.Right', 1} end end; {'Core.Value.NPrimVal', V127, V128} -> case V4 of {'Core.Value.NDCon', V129, V130, V131, V132, V133} -> fun (V134) -> {'Prelude.Types.Right', 0} end; _ -> case V4 of {'Core.Value.NDCon', V135, V136, V137, V138, V139} -> fun (V140) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NApp', V141, V142, V143} -> case V142 of {'Core.Value.NRef', V144, V145} -> fun (V146) -> case V4 of {'Core.Value.NApp', V147, V148, V149} -> case V148 of {'Core.Value.NRef', V150, V151} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V152) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V153, V154} -> fun (V155) -> case V4 of {'Core.Value.NPrimVal', V156, V157} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V154, V157))}; {'Core.Value.NBind', V158, V159, V160, V161} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NBind', V162, V163, V164, V165} -> fun (V166) -> case V4 of {'Core.Value.NPrimVal', V167, V168} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V169) -> {'Prelude.Types.Right', 0} end end end end; _ -> case V4 of {'Core.Value.NDCon', V170, V171, V172, V173, V174} -> fun (V175) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NApp', V176, V177, V178} -> case V177 of {'Core.Value.NRef', V179, V180} -> fun (V181) -> case V4 of {'Core.Value.NApp', V182, V183, V184} -> case V183 of {'Core.Value.NRef', V185, V186} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V187) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V188, V189} -> fun (V190) -> case V4 of {'Core.Value.NPrimVal', V191, V192} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V189, V192))}; {'Core.Value.NBind', V193, V194, V195, V196} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NBind', V197, V198, V199, V200} -> fun (V201) -> case V4 of {'Core.Value.NPrimVal', V202, V203} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V204) -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NType', V205, V206} -> case V4 of {'Core.Value.NTCon', V207, V208, V209, V210, V211} -> fun (V212) -> {'Prelude.Types.Right', 0} end; _ -> case V4 of {'Core.Value.NTCon', V213, V214, V215, V216, V217} -> fun (V218) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NDCon', V219, V220, V221, V222, V223} -> case V4 of {'Core.Value.NDCon', V224, V225, V226, V227, V228} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V221, V226)) of 1 -> fun (V229) -> {'Prelude.Types.Right', 0} end; 0 -> begin (V258 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V230) -> ('un--mismatch'(V0, V1, V2, V230)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V231) -> fun (V232) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V233) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V234) -> fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> case V240 of {'Builtin.MkPair', V241, V242} -> {'Builtin.MkPair', (V238(V241)), (V239(V242))} end end end end end end end end, fun (V243) -> fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> case V247 of {'Builtin.MkPair', V248, V249} -> {'Builtin.MkPair', (V246(V248)), V249} end end end end end end, fun (V250) -> fun (V251) -> fun (V252) -> fun (V253) -> fun (V254) -> case V254 of {'Builtin.MkPair', V255, V256} -> {'Builtin.MkPair', V255, (V253(V256))} end end end end end end}, fun (V257) -> ('Idris.Idris2.Builtin':'un--snd'(V257)) end, V233)) end, V231, V232)) end end, V223, V228))))), fun (V259) -> begin (V260 = (V258(V259))), case V260 of {'Prelude.Types.Left', V261} -> {'Prelude.Types.Left', V261}; {'Prelude.Types.Right', V262} -> (begin (V264 = fun (V263) -> {'Prelude.Types.Right', case V262 of 1 -> 0; 0 -> 1 end} end), V264 end(V259)) end end end end end; {'Core.Value.NPrimVal', V265, V266} -> fun (V267) -> {'Prelude.Types.Right', 0} end; _ -> fun (V268) -> {'Prelude.Types.Right', 1} end end; {'Core.Value.NPrimVal', V269, V270} -> case V4 of {'Core.Value.NDCon', V271, V272, V273, V274, V275} -> fun (V276) -> {'Prelude.Types.Right', 0} end; _ -> case V4 of {'Core.Value.NDCon', V277, V278, V279, V280, V281} -> fun (V282) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NApp', V283, V284, V285} -> case V284 of {'Core.Value.NRef', V286, V287} -> fun (V288) -> case V4 of {'Core.Value.NApp', V289, V290, V291} -> case V290 of {'Core.Value.NRef', V292, V293} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V294) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V295, V296} -> fun (V297) -> case V4 of {'Core.Value.NPrimVal', V298, V299} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V296, V299))}; {'Core.Value.NBind', V300, V301, V302, V303} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NBind', V304, V305, V306, V307} -> fun (V308) -> case V4 of {'Core.Value.NPrimVal', V309, V310} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V311) -> {'Prelude.Types.Right', 0} end end end end; _ -> case V4 of {'Core.Value.NDCon', V312, V313, V314, V315, V316} -> fun (V317) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NApp', V318, V319, V320} -> case V319 of {'Core.Value.NRef', V321, V322} -> fun (V323) -> case V4 of {'Core.Value.NApp', V324, V325, V326} -> case V325 of {'Core.Value.NRef', V327, V328} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V329) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V330, V331} -> fun (V332) -> case V4 of {'Core.Value.NPrimVal', V333, V334} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V331, V334))}; {'Core.Value.NBind', V335, V336, V337, V338} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NBind', V339, V340, V341, V342} -> fun (V343) -> case V4 of {'Core.Value.NPrimVal', V344, V345} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V346) -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NBind', V347, V348, V349, V350} -> case V4 of {'Core.Value.NTCon', V351, V352, V353, V354, V355} -> fun (V356) -> {'Prelude.Types.Right', 0} end; _ -> case V4 of {'Core.Value.NTCon', V357, V358, V359, V360, V361} -> fun (V362) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NDCon', V363, V364, V365, V366, V367} -> case V4 of {'Core.Value.NDCon', V368, V369, V370, V371, V372} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V365, V370)) of 1 -> fun (V373) -> {'Prelude.Types.Right', 0} end; 0 -> begin (V402 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V374) -> ('un--mismatch'(V0, V1, V2, V374)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V375) -> fun (V376) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V377) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V378) -> fun (V379) -> fun (V380) -> fun (V381) -> fun (V382) -> fun (V383) -> fun (V384) -> case V384 of {'Builtin.MkPair', V385, V386} -> {'Builtin.MkPair', (V382(V385)), (V383(V386))} end end end end end end end end, fun (V387) -> fun (V388) -> fun (V389) -> fun (V390) -> fun (V391) -> case V391 of {'Builtin.MkPair', V392, V393} -> {'Builtin.MkPair', (V390(V392)), V393} end end end end end end, fun (V394) -> fun (V395) -> fun (V396) -> fun (V397) -> fun (V398) -> case V398 of {'Builtin.MkPair', V399, V400} -> {'Builtin.MkPair', V399, (V397(V400))} end end end end end end}, fun (V401) -> ('Idris.Idris2.Builtin':'un--snd'(V401)) end, V377)) end, V375, V376)) end end, V367, V372))))), fun (V403) -> begin (V404 = (V402(V403))), case V404 of {'Prelude.Types.Left', V405} -> {'Prelude.Types.Left', V405}; {'Prelude.Types.Right', V406} -> (begin (V408 = fun (V407) -> {'Prelude.Types.Right', case V406 of 1 -> 0; 0 -> 1 end} end), V408 end(V403)) end end end end end; {'Core.Value.NPrimVal', V409, V410} -> fun (V411) -> {'Prelude.Types.Right', 0} end; _ -> fun (V412) -> {'Prelude.Types.Right', 1} end end; {'Core.Value.NPrimVal', V413, V414} -> case V4 of {'Core.Value.NDCon', V415, V416, V417, V418, V419} -> fun (V420) -> {'Prelude.Types.Right', 0} end; _ -> case V4 of {'Core.Value.NDCon', V421, V422, V423, V424, V425} -> fun (V426) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NApp', V427, V428, V429} -> case V428 of {'Core.Value.NRef', V430, V431} -> fun (V432) -> case V4 of {'Core.Value.NApp', V433, V434, V435} -> case V434 of {'Core.Value.NRef', V436, V437} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V438) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V439, V440} -> fun (V441) -> case V4 of {'Core.Value.NPrimVal', V442, V443} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V440, V443))}; {'Core.Value.NBind', V444, V445, V446, V447} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NBind', V448, V449, V450, V451} -> fun (V452) -> case V4 of {'Core.Value.NPrimVal', V453, V454} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V455) -> {'Prelude.Types.Right', 0} end end end end; _ -> case V4 of {'Core.Value.NDCon', V456, V457, V458, V459, V460} -> fun (V461) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NApp', V462, V463, V464} -> case V463 of {'Core.Value.NRef', V465, V466} -> fun (V467) -> case V4 of {'Core.Value.NApp', V468, V469, V470} -> case V469 of {'Core.Value.NRef', V471, V472} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V473) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V474, V475} -> fun (V476) -> case V4 of {'Core.Value.NPrimVal', V477, V478} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V475, V478))}; {'Core.Value.NBind', V479, V480, V481, V482} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NBind', V483, V484, V485, V486} -> fun (V487) -> case V4 of {'Core.Value.NPrimVal', V488, V489} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V490) -> {'Prelude.Types.Right', 0} end end end end end end; _ -> case V4 of {'Core.Value.NTCon', V491, V492, V493, V494, V495} -> fun (V496) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NDCon', V497, V498, V499, V500, V501} -> case V4 of {'Core.Value.NDCon', V502, V503, V504, V505, V506} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V499, V504)) of 1 -> fun (V507) -> {'Prelude.Types.Right', 0} end; 0 -> begin (V536 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V508) -> ('un--mismatch'(V0, V1, V2, V508)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V509) -> fun (V510) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V511) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V512) -> fun (V513) -> fun (V514) -> fun (V515) -> fun (V516) -> fun (V517) -> fun (V518) -> case V518 of {'Builtin.MkPair', V519, V520} -> {'Builtin.MkPair', (V516(V519)), (V517(V520))} end end end end end end end end, fun (V521) -> fun (V522) -> fun (V523) -> fun (V524) -> fun (V525) -> case V525 of {'Builtin.MkPair', V526, V527} -> {'Builtin.MkPair', (V524(V526)), V527} end end end end end end, fun (V528) -> fun (V529) -> fun (V530) -> fun (V531) -> fun (V532) -> case V532 of {'Builtin.MkPair', V533, V534} -> {'Builtin.MkPair', V533, (V531(V534))} end end end end end end}, fun (V535) -> ('Idris.Idris2.Builtin':'un--snd'(V535)) end, V511)) end, V509, V510)) end end, V501, V506))))), fun (V537) -> begin (V538 = (V536(V537))), case V538 of {'Prelude.Types.Left', V539} -> {'Prelude.Types.Left', V539}; {'Prelude.Types.Right', V540} -> (begin (V542 = fun (V541) -> {'Prelude.Types.Right', case V540 of 1 -> 0; 0 -> 1 end} end), V542 end(V537)) end end end end end; {'Core.Value.NPrimVal', V543, V544} -> fun (V545) -> {'Prelude.Types.Right', 0} end; _ -> fun (V546) -> {'Prelude.Types.Right', 1} end end; {'Core.Value.NPrimVal', V547, V548} -> case V4 of {'Core.Value.NDCon', V549, V550, V551, V552, V553} -> fun (V554) -> {'Prelude.Types.Right', 0} end; _ -> case V4 of {'Core.Value.NDCon', V555, V556, V557, V558, V559} -> fun (V560) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NApp', V561, V562, V563} -> case V562 of {'Core.Value.NRef', V564, V565} -> fun (V566) -> case V4 of {'Core.Value.NApp', V567, V568, V569} -> case V568 of {'Core.Value.NRef', V570, V571} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V572) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V573, V574} -> fun (V575) -> case V4 of {'Core.Value.NPrimVal', V576, V577} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V574, V577))}; {'Core.Value.NBind', V578, V579, V580, V581} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NBind', V582, V583, V584, V585} -> fun (V586) -> case V4 of {'Core.Value.NPrimVal', V587, V588} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V589) -> {'Prelude.Types.Right', 0} end end end end; _ -> case V4 of {'Core.Value.NDCon', V590, V591, V592, V593, V594} -> fun (V595) -> {'Prelude.Types.Right', 1} end; _ -> case V3 of {'Core.Value.NApp', V596, V597, V598} -> case V597 of {'Core.Value.NRef', V599, V600} -> fun (V601) -> case V4 of {'Core.Value.NApp', V602, V603, V604} -> case V603 of {'Core.Value.NRef', V605, V606} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V607) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V608, V609} -> fun (V610) -> case V4 of {'Core.Value.NPrimVal', V611, V612} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V609, V612))}; {'Core.Value.NBind', V613, V614, V615, V616} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NBind', V617, V618, V619, V620} -> fun (V621) -> case V4 of {'Core.Value.NPrimVal', V622, V623} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V624) -> {'Prelude.Types.Right', 0} end end end end end end.
'un--processDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V12 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V708 = begin (V22 = begin (V17 = V1), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'get'(V19)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V707 = begin (V27 = ('un--lookupOrAddAlias'(V0, V2, V1, V3, V4, V5, V6, V7, V8, V9, V16, V11))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V706 = case V31 of {'Prelude.Types.Just', V32} -> case V32 of {'Core.Context.Context.MkGlobalDef', V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54} -> case V50 of {'Core.Context.Context.None'} -> begin (V77 = case V32 of {'Core.Context.Context.MkGlobalDef', V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76} -> V57 end), begin (V152 = case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V32 of {'Core.Context.Context.MkGlobalDef', V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99} -> V87 end, 2)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V102, V103, V104)) end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V107, V108, V109)) end end end end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V111)) end end, fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V115, V116, V117, V118)) end end end end end end end, fun (V119) -> fun (V120) -> V120 end end, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V123, V124, V125)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V128, V129)) end end}, {'Core.Context.Context.Inline'}, case V32 of {'Core.Context.Context.MkGlobalDef', V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151} -> V141 end)) end), begin (V191 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V153) -> fun (V154) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V153, V154)) end end, 0, fun (V155) -> fun (V156) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V155, V156)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V157) -> fun (V158) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V157, V158)) end end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V159, V160)) end end}}, case V32 of {'Core.Context.Context.MkGlobalDef', V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182} -> V168 end)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V183) -> fun (V184) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V183, V184)) end end, 0, fun (V185) -> fun (V186) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V185, V186)) end end, 1})); 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V187) -> fun (V188) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V187, V188)) end end, 0, fun (V189) -> fun (V190) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V189, V190)) end end, 1})) end), begin (V192 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V16))), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V704 = begin (V197 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def"/utf8>>, 5, fun () -> <<<<"Traversing clauses of "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16))/binary, <<<<" with mult "/utf8>>/binary, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V191))/binary>>/binary>>/binary>> end))), fun (V198) -> begin (V199 = (V197(V198))), case V199 of {'Prelude.Types.Left', V200} -> {'Prelude.Types.Left', V200}; {'Prelude.Types.Right', V201} -> (begin (V703 = begin (V202 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V1))), fun (V203) -> begin (V204 = (V202(V203))), case V204 of {'Prelude.Types.Left', V205} -> {'Prelude.Types.Left', V205}; {'Prelude.Types.Right', V206} -> (begin (V702 = begin (V229 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V206 end, ('Idris.Idris2.Core.Context.Context':'un--findSetTotal'(case V32 of {'Core.Context.Context.MkGlobalDef', V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228} -> V218 end))))), begin (V253 = ('nested--27321-17107--in--un--withTotality'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V229, fun () -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V230) -> ('un--checkClause'(V0, V1, V2, V3, V4, V5, V191, case V32 of {'Core.Context.Context.MkGlobalDef', V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252} -> V240 end, V229, V152, V196, V6, V7, V8, V230)) end, V11, [])) end))), fun (V254) -> begin (V255 = (V253(V254))), case V255 of {'Prelude.Types.Left', V256} -> {'Prelude.Types.Left', V256}; {'Prelude.Types.Right', V257} -> (begin (V701 = begin (V266 = ((begin (V263 = fun (V259) -> fun (V260) -> fun (V261) -> fun (V262) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V261, V262)) end end end end), fun (V264) -> fun (V265) -> ((((V263('erased'))('erased'))(V264))(V265)) end end end(fun (V258) -> ('un--toPats'(V258)) end))(('Idris.Idris2.Data.Either':'un--rights'(V257))))), begin (V267 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, 3, fun () -> <<<<"Building compile time case tree for "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16))/binary>> end, ('Idris.Idris2.Core.Case.CaseBuilder':'un--getPMDef'(V1, V9, {'Core.Case.CaseBuilder.CompileTime', V191}, V16, V77, ('Idris.Idris2.Data.Either':'un--rights'(V257))))))), fun (V268) -> begin (V269 = (V267(V268))), case V269 of {'Prelude.Types.Left', V270} -> {'Prelude.Types.Left', V270}; {'Prelude.Types.Right', V271} -> (begin (V700 = case V271 of {'Builtin.DPair.MkDPair', V272, V273} -> case V273 of {'Builtin.MkPair', V274, V275} -> begin (V277 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V276) -> ('un--warnUnreachable'(V1, V276)) end, V275))), fun (V278) -> begin (V279 = (V277(V278))), case V279 of {'Prelude.Types.Left', V280} -> {'Prelude.Types.Left', V280}; {'Prelude.Types.Right', V281} -> (begin (V699 = begin (V299 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, (begin (V283 = fun (V282) -> V282 end), fun (V284) -> (V283(V284)) end end(<<"declare.def"/utf8>>)), 2, begin (V289 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V285) -> fun (V286) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'(V285, V286)) end end, fun (V287) -> fun (V288) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'(V287, V288)) end end}, V274))), fun (V290) -> begin (V291 = (V289(V290))), case V291 of {'Prelude.Types.Left', V292} -> {'Prelude.Types.Left', V292}; {'Prelude.Types.Right', V293} -> (begin (V298 = fun (V294) -> {'Prelude.Types.Right', <<(begin (V296 = fun (V295) -> V295 end), fun (V297) -> (V296(V297)) end end(<<"Case tree for "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V272, V293))/binary>>/binary>>/binary>>} end), V298 end(V290)) end end end end))), fun (V300) -> begin (V301 = (V299(V300))), case V301 of {'Prelude.Types.Left', V302} -> {'Prelude.Types.Left', V302}; {'Prelude.Types.Right', V303} -> (begin (V698 = begin (V309 = begin (V304 = V1), fun (V305) -> begin (V308 = (begin (V306 = V304), fun (V307) -> ('erlang':'get'(V306)) end end(V305))), {'Prelude.Types.Right', V308} end end end), fun (V310) -> begin (V311 = (V309(V310))), case V311 of {'Prelude.Types.Left', V312} -> {'Prelude.Types.Left', V312}; {'Prelude.Types.Right', V313} -> (begin (V697 = begin (V350 = case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V16, case V313 of {'Core.Context.MkDefs', V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345} -> V339 end)) of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context.Context':'un--defaultPI'()); {'Prelude.Types.Just', V346} -> case ('Idris.Idris2.Core.Context.Context':'un--defaultPI'()) of {'Core.Context.Context.MkPMDefInfo', V347, V348, V349} -> {'Core.Context.Context.MkPMDefInfo', V347, V348, V346} end end), begin (V392 = begin (V373 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, {'Core.Name.Resolved', V196}, case V32 of {'Core.Context.Context.MkGlobalDef', V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372} -> {'Core.Context.Context.MkGlobalDef', V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, {'Core.Context.Context.PMDef', V350, V272, V274, V274, V266}, V369, V370, V371, V372} end))), ((begin (V389 = fun (V384) -> fun (V385) -> fun (V386) -> fun (V387) -> fun (V388) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V386, V387, V388)) end end end end end), fun (V390) -> fun (V391) -> ((((V389('erased'))('erased'))(V390))(V391)) end end end((begin (V381 = fun (V375) -> fun (V376) -> fun (V377) -> fun (V378) -> case V378 of {'Prelude.Types.Left', V379} -> {'Prelude.Types.Left', V379}; {'Prelude.Types.Right', V380} -> {'Prelude.Types.Right', (V377(V380))} end end end end end), fun (V382) -> fun (V383) -> ((((V381('erased'))('erased'))(V382))(V383)) end end end(fun (V374) -> {'Builtin.MkUnit'} end))))(V373)) end), fun (V393) -> begin (V394 = (V392(V393))), case V394 of {'Prelude.Types.Left', V395} -> {'Prelude.Types.Left', V395}; {'Prelude.Types.Right', V396} -> (begin (V696 = begin (V437 = case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V32 of {'Core.Context.Context.MkGlobalDef', V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418} -> V406 end, 2)) of 1 -> (begin (V419 = ('Idris.Idris2.Core.Case.CaseTree':'un--getMetas'(V274))), fun () -> begin (V429 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V421 = fun (V420) -> V420 end), fun (V422) -> (V421(V422)) end end(<<"declare.def"/utf8>>)), 10, fun () -> <<(begin (V424 = fun (V423) -> V423 end), fun (V425) -> (V424(V425)) end end(<<"Saving from "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V426) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V426)) end, fun (V427) -> fun (V428) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V427, V428)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V419))))/binary>>/binary>>/binary>> end))), fun (V430) -> begin (V431 = (V429(V430))), case V431 of {'Prelude.Types.Left', V432} -> {'Prelude.Types.Left', V432}; {'Prelude.Types.Right', V433} -> (begin (V435 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V434) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V434)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V419))))), V435 end(V430)) end end end end end end()); 0 -> fun (V436) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V438) -> begin (V439 = (V437(V438))), case V439 of {'Prelude.Types.Left', V440} -> {'Prelude.Types.Left', V440}; {'Prelude.Types.Right', V441} -> (begin (V695 = begin (V489 = case case ('Idris.Idris2.Core.Name':'un--isUserName'(V16)) of 1 -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(case V32 of {'Core.Context.Context.MkGlobalDef', V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463} -> V451 end, 0)); 0 -> 0 end of 1 -> (begin (V486 = ('Idris.Idris2.Core.TT':'un--getMetas'(case V32 of {'Core.Context.Context.MkGlobalDef', V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485} -> V466 end))), fun () -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V487) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V487)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V486)))) end end()); 0 -> fun (V488) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V490) -> begin (V491 = (V489(V490))), case V491 of {'Prelude.Types.Left', V492} -> {'Prelude.Types.Left', V492}; {'Prelude.Types.Right', V493} -> (begin (V694 = begin (V494 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V16))), fun (V495) -> begin (V496 = (V494(V495))), case V496 of {'Prelude.Types.Left', V497} -> {'Prelude.Types.Left', V497}; {'Prelude.Types.Right', V498} -> (begin (V693 = begin (V547 = begin (V504 = begin (V499 = V1), fun (V500) -> begin (V503 = (begin (V501 = V499), fun (V502) -> ('erlang':'get'(V501)) end end(V500))), {'Prelude.Types.Right', V503} end end end), fun (V505) -> begin (V506 = (V504(V505))), case V506 of {'Prelude.Types.Left', V507} -> {'Prelude.Types.Left', V507}; {'Prelude.Types.Right', V508} -> (begin (V546 = begin (V509 = V1), fun (V510) -> begin (V545 = (begin (V511 = V509), fun (V512) -> ('erlang':'put'(V511, case V508 of {'Core.Context.MkDefs', V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544} -> {'Core.Context.MkDefs', V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531, V532, V533, [V16 | V534], V535, V536, V537, V538, V539, V540, V541, V542, V543, V544} end)) end end(V510))), {'Prelude.Types.Right', V545} end end end), V546 end(V505)) end end end end), fun (V548) -> begin (V549 = (V547(V548))), case V549 of {'Prelude.Types.Left', V550} -> {'Prelude.Types.Left', V550}; {'Prelude.Types.Right', V551} -> (begin (V692 = begin (V560 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V552) -> fun (V553) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V552, V553)) end end, fun (V554) -> fun (V555) -> fun (V556) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V554, V555, V556)) end end end}, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Core.Name.UN', {'Core.Name.Basic', (begin (V558 = fun (V557) -> V557 end), fun (V559) -> (V558(V559)) end end(<<"assert_total"/utf8>>))}}}))), fun (V561) -> begin (V562 = (V560(V561))), case V562 of {'Prelude.Types.Left', V563} -> {'Prelude.Types.Left', V563}; {'Prelude.Types.Right', V564} -> (begin (V691 = begin (V617 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, 3, fun () -> <<(begin (V566 = fun (V565) -> V565 end), fun (V567) -> (V566(V567)) end end(<<"Building size change graphs "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16))/binary>> end, case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V568) -> fun (V569) -> fun (V570) -> fun (V571) -> fun (V572) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V570, V571, V572)) end end end end end, fun (V573) -> fun (V574) -> fun (V575) -> fun (V576) -> fun (V577) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V575, V576, V577)) end end end end end, fun (V578) -> fun (V579) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V579)) end end, fun (V580) -> fun (V581) -> fun (V582) -> fun (V583) -> fun (V584) -> fun (V585) -> fun (V586) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V583, V584, V585, V586)) end end end end end end end, fun (V587) -> fun (V588) -> V588 end end, fun (V589) -> fun (V590) -> fun (V591) -> fun (V592) -> fun (V593) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V591, V592, V593)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V594) -> fun (V595) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V594, V595)) end end, fun (V596) -> fun (V597) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V596, V597)) end end}, 1, V6)) of 1 -> fun (V598) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> begin (V599 = ('un--calcRefs'(V1, 0, V564, {'Core.Name.Resolved', V196}))), fun (V600) -> begin (V601 = (V599(V600))), case V601 of {'Prelude.Types.Left', V602} -> {'Prelude.Types.Left', V602}; {'Prelude.Types.Right', V603} -> (begin (V616 = begin (V604 = ('Idris.Idris2.Core.Termination':'un--calculateSizeChange'(V1, V9, V16))), fun (V605) -> begin (V606 = (V604(V605))), case V606 of {'Prelude.Types.Left', V607} -> {'Prelude.Types.Left', V607}; {'Prelude.Types.Right', V608} -> (begin (V615 = begin (V609 = ('Idris.Idris2.Core.Context':'un--setSizeChange'(V1, V9, V16, V608))), fun (V610) -> begin (V611 = (V609(V610))), case V611 of {'Prelude.Types.Left', V612} -> {'Prelude.Types.Left', V612}; {'Prelude.Types.Right', V613} -> (begin (V614 = ('Idris.Idris2.Core.Termination':'un--checkIfGuarded'(V1, V9, V16))), V614 end(V610)) end end end end), V615 end(V605)) end end end end), V616 end(V600)) end end end end end))), fun (V618) -> begin (V619 = (V617(V618))), case V619 of {'Prelude.Types.Left', V620} -> {'Prelude.Types.Left', V620}; {'Prelude.Types.Right', V621} -> (begin (V690 = begin (V627 = begin (V622 = V2), fun (V623) -> begin (V626 = (begin (V624 = V622), fun (V625) -> ('erlang':'get'(V624)) end end(V623))), {'Prelude.Types.Right', V626} end end end), fun (V628) -> begin (V629 = (V627(V628))), case V629 of {'Prelude.Types.Left', V630} -> {'Prelude.Types.Left', V630}; {'Prelude.Types.Right', V631} -> (begin (V689 = begin (V635 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, 3, fun () -> <<(begin (V633 = fun (V632) -> V632 end), fun (V634) -> (V633(V634)) end end(<<"Checking Coverage "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16))/binary>> end, ('nested--27321-17112--in--un--checkCoverage'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V196, V77, V191, V257))))), fun (V636) -> begin (V637 = (V635(V636))), case V637 of {'Prelude.Types.Left', V638} -> {'Prelude.Types.Left', V638}; {'Prelude.Types.Right', V639} -> (begin (V688 = begin (V640 = ('Idris.Idris2.Core.Context':'un--setCovering'(V1, V9, V16, V639))), fun (V641) -> begin (V642 = (V640(V641))), case V642 of {'Prelude.Types.Left', V643} -> {'Prelude.Types.Left', V643}; {'Prelude.Types.Right', V644} -> (begin (V687 = begin (V650 = begin (V645 = V2), fun (V646) -> begin (V649 = (begin (V647 = V645), fun (V648) -> ('erlang':'put'(V647, V631)) end end(V646))), {'Prelude.Types.Right', V649} end end end), fun (V651) -> begin (V652 = (V650(V651))), case V652 of {'Prelude.Types.Left', V653} -> {'Prelude.Types.Left', V653}; {'Prelude.Types.Right', V654} -> (begin (V686 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V655) -> fun (V656) -> fun (V657) -> fun (V658) -> fun (V659) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V657, V658, V659)) end end end end end, fun (V660) -> fun (V661) -> fun (V662) -> fun (V663) -> fun (V664) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V662, V663, V664)) end end end end end, fun (V665) -> fun (V666) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V666)) end end, fun (V667) -> fun (V668) -> fun (V669) -> fun (V670) -> fun (V671) -> fun (V672) -> fun (V673) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V670, V671, V672, V673)) end end end end end end end, fun (V674) -> fun (V675) -> V675 end end, fun (V676) -> fun (V677) -> fun (V678) -> fun (V679) -> fun (V680) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V678, V679, V680)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V681) -> fun (V682) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V681, V682)) end end, fun (V683) -> fun (V684) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V683, V684)) end end}, 1, V6)) of 1 -> fun (V685) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('un--compileRunTime'(V1, V2, V3, V4, V5, V9, V564)) end), V686 end(V651)) end end end end), V687 end(V641)) end end end end), V688 end(V636)) end end end end), V689 end(V628)) end end end end), V690 end(V618)) end end end end), V691 end(V561)) end end end end), V692 end(V548)) end end end end), V693 end(V495)) end end end end), V694 end(V490)) end end end end), V695 end(V438)) end end end end), V696 end(V393)) end end end end end), V697 end(V310)) end end end end), V698 end(V300)) end end end end), V699 end(V278)) end end end end end end), V700 end(V268)) end end end end end), V701 end(V254)) end end end end end), V702 end(V203)) end end end end), V703 end(V198)) end end end end), V704 end(V193)) end end end end end end end; _ -> fun (V705) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AlreadyDefined', V9, V16}, V705)) end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--noDeclaration'(V1, V9, V16)) end), V706 end(V28)) end end end end), V707 end(V23)) end end end end), V708 end(V13)) end end end end.
'un--nameListEq'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V2, V3) -> case V1 of [E2 | E3] -> (fun (V4, V5) -> ('with--nameListEq-14308'(V2, V4, ('Idris.Idris2.Core.Name':'un--nameEq'(V2, V4)), V3, V5)) end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end.
'un--mkRunTime'(V0, V1, V2, V3, V4, V5, V6) -> begin (V18 = begin (V12 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V9, V10, V11)) end end end}, V6))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V17 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, 5, fun () -> <<<<"Making run time definition for "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16))/binary>> end))), V17 end(V13)) end end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V153 = begin (V28 = begin (V23 = V0), fun (V24) -> begin (V27 = (begin (V25 = V23), fun (V26) -> ('erlang':'get'(V25)) end end(V24))), {'Prelude.Types.Right', V27} end end end), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V152 = begin (V65 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V6, case V32 of {'Core.Context.MkDefs', V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} -> V33 end))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V151 = case V69 of {'Prelude.Types.Just', V70} -> begin (V95 = case V70 of {'Core.Context.Context.MkGlobalDef', V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92} -> case V81 of {'Core.TT.MkTotality', V93, V94} -> V94 end end), case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V96) -> fun (V97) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V96, V97)) end end, 0, fun (V98) -> fun (V99) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V98, V99)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V100) -> fun (V101) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V100, V101)) end end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V102, V103)) end end}}, case V70 of {'Core.Context.Context.MkGlobalDef', V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125} -> V111 end)) of 1 -> fun (V126) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> (begin (V127 = {'Prelude.Types.Just', V70}), ('case--case block in mkRunTime-15308'(V6, V5, V4, V3, V2, V1, V0, V32, V70, V127, V95, case V70 of {'Core.Context.Context.MkGlobalDef', V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149} -> V145 end)) end()) end end; _ -> fun (V150) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V151 end(V66)) end end end end), V152 end(V29)) end end end end), V153 end(V19)) end end end end.
'un--mismatchNF'(V0, V1, V2, V3, V4) -> case V3 of {'Core.Value.NTCon', V5, V6, V7, V8, V9} -> case V4 of {'Core.Value.NTCon', V10, V11, V12, V13, V14} -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V11)) of 1 -> fun (V15) -> {'Prelude.Types.Right', 1} end; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> ('un--mismatch'(V0, V1, V2, V16)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V19) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> case V26 of {'Builtin.MkPair', V27, V28} -> {'Builtin.MkPair', (V24(V27)), (V25(V28))} end end end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> case V33 of {'Builtin.MkPair', V34, V35} -> {'Builtin.MkPair', (V32(V34)), V35} end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> case V40 of {'Builtin.MkPair', V41, V42} -> {'Builtin.MkPair', V41, (V39(V42))} end end end end end end}, fun (V43) -> ('Idris.Idris2.Builtin':'un--snd'(V43)) end, V19)) end, V17, V18)) end end, V9, V14)))) end; {'Core.Value.NPrimVal', V44, V45} -> fun (V46) -> {'Prelude.Types.Right', 1} end; {'Core.Value.NBind', V47, V48, V49, V50} -> fun (V51) -> {'Prelude.Types.Right', 1} end; {'Core.Value.NType', V52, V53} -> fun (V54) -> {'Prelude.Types.Right', 1} end; _ -> fun (V55) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NDCon', V56, V57, V58, V59, V60} -> case V4 of {'Core.Value.NDCon', V61, V62, V63, V64, V65} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V58, V63)) of 1 -> fun (V66) -> {'Prelude.Types.Right', 1} end; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V67) -> ('un--mismatch'(V0, V1, V2, V67)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V70) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> case V77 of {'Builtin.MkPair', V78, V79} -> {'Builtin.MkPair', (V75(V78)), (V76(V79))} end end end end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> case V84 of {'Builtin.MkPair', V85, V86} -> {'Builtin.MkPair', (V83(V85)), V86} end end end end end end, fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> case V91 of {'Builtin.MkPair', V92, V93} -> {'Builtin.MkPair', V92, (V90(V93))} end end end end end end}, fun (V94) -> ('Idris.Idris2.Builtin':'un--snd'(V94)) end, V70)) end, V68, V69)) end end, V60, V65)))) end; {'Core.Value.NPrimVal', V95, V96} -> fun (V97) -> {'Prelude.Types.Right', 1} end; _ -> fun (V98) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V99, V100} -> fun (V101) -> case V4 of {'Core.Value.NPrimVal', V102, V103} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V100, V103))}; {'Core.Value.NDCon', V104, V105, V106, V107, V108} -> {'Prelude.Types.Right', 1}; {'Core.Value.NBind', V109, V110, V111, V112} -> {'Prelude.Types.Right', 1}; {'Core.Value.NTCon', V113, V114, V115, V116, V117} -> {'Prelude.Types.Right', 1}; {'Core.Value.NType', V118, V119} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NDelayed', V120, V121, V122} -> case V4 of {'Core.Value.NDelayed', V123, V124, V125} -> ('un--mismatchNF'(V0, V1, V2, V122, V125)); _ -> fun (V126) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NDelay', V127, V128, V129, V130} -> case V4 of {'Core.Value.NDelay', V131, V132, V133, V134} -> begin (V135 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V130))), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V146 = begin (V140 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V134))), fun (V141) -> begin (V142 = (V140(V141))), case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> (begin (V145 = ('un--mismatchNF'(V0, V1, V2, V139, V144))), V145 end(V141)) end end end end), V146 end(V136)) end end end end; _ -> fun (V147) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NBind', V148, V149, V150, V151} -> fun (V152) -> case V4 of {'Core.Value.NPrimVal', V153, V154} -> {'Prelude.Types.Right', 1}; {'Core.Value.NTCon', V155, V156, V157, V158, V159} -> {'Prelude.Types.Right', 1}; {'Core.Value.NType', V160, V161} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NType', V162, V163} -> fun (V164) -> case V4 of {'Core.Value.NPrimVal', V165, V166} -> {'Prelude.Types.Right', 1}; {'Core.Value.NTCon', V167, V168, V169, V170, V171} -> {'Prelude.Types.Right', 1}; {'Core.Value.NBind', V172, V173, V174, V175} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V176) -> {'Prelude.Types.Right', 0} end end.
'un--mismatch'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V6 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V17 = begin (V11 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V5))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V16 = ('un--mismatchNF'(V0, V1, V2, V10, V15))), V16 end(V12)) end end end end), V17 end(V7)) end end end end end.
'un--lookupOrAddAlias'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [E0 | E1] -> (fun (V12, V13) -> case V12 of {'TTImp.TTImp.PatClause', V14, V15, V16} -> case V13 of [] -> begin (V22 = begin (V17 = V2), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'get'(V19)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V90 = begin (V42 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, (begin (V28 = fun (V27) -> V27 end), fun (V29) -> (V28(V29)) end end(<<"declare.def.alias"/utf8>>)), 20, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V30) -> fun (V31) -> <<V30/binary, V31/binary>> end end, <<""/utf8>>}, fun (V32) -> V32 end, [(begin (V34 = fun (V33) -> V33 end), fun (V35) -> (V34(V35)) end end(<<"Looking at "/utf8>>)) | [(begin (V40 = fun (V39) -> V39 end), fun (V41) -> (V40(V41)) end end(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Prelude.Show.MkShow', fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V36)) end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V37, V38)) end end}, V12)))) | []]])) end))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V89 = begin (V79 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V10, case V26 of {'Core.Context.MkDefs', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78} -> V47 end))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V88 = begin (V84 = {'TTImp.TTImp.PatClause', V14, V15, V16}), case V83 of {'Prelude.Types.Nothing'} -> begin (V85 = {'Prelude.Types.Nothing'}), ('case--case block in lookupOrAddAlias-16327'(V0, V14, V16, V15, V84, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V26, V85, ('un--isAlias'(V15)))) end; {'Prelude.Types.Just', V86} -> fun (V87) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V86}} end end end), V88 end(V80)) end end end end), V89 end(V43)) end end end end), V90 end(V23)) end end end end; _ -> begin (V96 = begin (V91 = V2), fun (V92) -> begin (V95 = (begin (V93 = V91), fun (V94) -> ('erlang':'get'(V93)) end end(V92))), {'Prelude.Types.Right', V95} end end end), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V133 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V10, case V100 of {'Core.Context.MkDefs', V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132} -> V101 end))), V133 end(V97)) end end end end end; _ -> begin (V139 = begin (V134 = V2), fun (V135) -> begin (V138 = (begin (V136 = V134), fun (V137) -> ('erlang':'get'(V136)) end end(V135))), {'Prelude.Types.Right', V138} end end end), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V176 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V10, case V143 of {'Core.Context.MkDefs', V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175} -> V144 end))), V176 end(V140)) end end end end end end(E0, E1)); _ -> begin (V182 = begin (V177 = V2), fun (V178) -> begin (V181 = (begin (V179 = V177), fun (V180) -> ('erlang':'get'(V179)) end end(V178))), {'Prelude.Types.Right', V181} end end end), fun (V183) -> begin (V184 = (V182(V183))), case V184 of {'Prelude.Types.Left', V185} -> {'Prelude.Types.Left', V185}; {'Prelude.Types.Right', V186} -> (begin (V219 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V10, case V186 of {'Core.Context.MkDefs', V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218} -> V187 end))), V219 end(V183)) end end end end end.
'un--isAlias'(V0) -> case ('Idris.Idris2.TTImp.TTImp':'un--getFnArgs'(V0, [])) of {'Builtin.MkPair', V1, V2} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.TTImp.TTImp':'un--isIVar'(V1)), fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V6, V7)) end end end end, fun (V8) -> fun (V9) -> {'Prelude.Types.Just', V9} end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V12, V13)) end end end end}, fun (V14) -> ('Idris.Idris2.Prelude.Interfaces':'un-->=>'({'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V17, V18)) end end end end, fun (V19) -> fun (V20) -> {'Prelude.Types.Just', V20} end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V23, V24)) end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V27, V28)) end end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V30)) end end}, fun (V31) -> ('Idris.Idris2.TTImp.TTImp':'un--isExplicit'(V31)) end, fun (V32) -> case V32 of {'Builtin.MkPair', V33, V34} -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'({'Prelude.Types.Just', fun (V35) -> fun (V36) -> {'Builtin.MkPair', V35, V36} end end}, {'Prelude.Types.Just', V33})), ('Idris.Idris2.TTImp.TTImp':'un--isIBindVar'(V34)))) end end, V14)) end, V2)), fun (V37) -> {'Prelude.Types.Just', {'Builtin.MkPair', V3, V37}} end)) end)) end.
'un--impossibleOK'(V0, V1, V2, V3, V4) -> case V3 of {'Core.Value.NTCon', V5, V6, V7, V8, V9} -> case V4 of {'Core.Value.NTCon', V10, V11, V12, V13, V14} -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V11)) of 1 -> fun (V15) -> {'Prelude.Types.Right', 1} end; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> ('un--mismatch'(V0, V1, V2, V16)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V19) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> case V26 of {'Builtin.MkPair', V27, V28} -> {'Builtin.MkPair', (V24(V27)), (V25(V28))} end end end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> case V33 of {'Builtin.MkPair', V34, V35} -> {'Builtin.MkPair', (V32(V34)), V35} end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> case V40 of {'Builtin.MkPair', V41, V42} -> {'Builtin.MkPair', V41, (V39(V42))} end end end end end end}, fun (V43) -> ('Idris.Idris2.Builtin':'un--snd'(V43)) end, V19)) end, V17, V18)) end end, V9, V14)))) end; {'Core.Value.NPrimVal', V44, V45} -> fun (V46) -> {'Prelude.Types.Right', 1} end; {'Core.Value.NBind', V47, V48, V49, V50} -> fun (V51) -> {'Prelude.Types.Right', 1} end; {'Core.Value.NType', V52, V53} -> fun (V54) -> {'Prelude.Types.Right', 1} end; _ -> fun (V55) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NDCon', V56, V57, V58, V59, V60} -> case V4 of {'Core.Value.NDCon', V61, V62, V63, V64, V65} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V58, V63)) of 1 -> fun (V66) -> {'Prelude.Types.Right', 1} end; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V67) -> ('un--mismatch'(V0, V1, V2, V67)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V70) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> case V77 of {'Builtin.MkPair', V78, V79} -> {'Builtin.MkPair', (V75(V78)), (V76(V79))} end end end end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> case V84 of {'Builtin.MkPair', V85, V86} -> {'Builtin.MkPair', (V83(V85)), V86} end end end end end end, fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> case V91 of {'Builtin.MkPair', V92, V93} -> {'Builtin.MkPair', V92, (V90(V93))} end end end end end end}, fun (V94) -> ('Idris.Idris2.Builtin':'un--snd'(V94)) end, V70)) end, V68, V69)) end end, V60, V65)))) end; {'Core.Value.NPrimVal', V95, V96} -> fun (V97) -> {'Prelude.Types.Right', 1} end; _ -> fun (V98) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V99, V100} -> fun (V101) -> case V4 of {'Core.Value.NPrimVal', V102, V103} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V100, V103))}; {'Core.Value.NDCon', V104, V105, V106, V107, V108} -> {'Prelude.Types.Right', 1}; {'Core.Value.NBind', V109, V110, V111, V112} -> {'Prelude.Types.Right', 1}; {'Core.Value.NTCon', V113, V114, V115, V116, V117} -> {'Prelude.Types.Right', 1}; {'Core.Value.NType', V118, V119} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NBind', V120, V121, V122, V123} -> fun (V124) -> case V4 of {'Core.Value.NPrimVal', V125, V126} -> {'Prelude.Types.Right', 1}; {'Core.Value.NTCon', V127, V128, V129, V130, V131} -> {'Prelude.Types.Right', 1}; {'Core.Value.NType', V132, V133} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NType', V134, V135} -> fun (V136) -> case V4 of {'Core.Value.NPrimVal', V137, V138} -> {'Prelude.Types.Right', 1}; {'Core.Value.NTCon', V139, V140, V141, V142, V143} -> {'Prelude.Types.Right', 1}; {'Core.Value.NBind', V144, V145, V146, V147} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V148) -> {'Prelude.Types.Right', 0} end end.
'un--impossibleErrOK'(V0, V1, V2) -> case V2 of {'Core.Core.CantConvert', V3, V4, V5, V6, V7, V8} -> begin (V41 = case V1 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> {'Core.Context.MkDefs', V5, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} end), begin (V42 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V3, V41, V6, V7))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V53 = begin (V47 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V3, V41, V6, V8))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V52 = ('un--impossibleOK'(V0, V3, V41, V46, V51))), V52 end(V48)) end end end end), V53 end(V43)) end end end end end; {'Core.Core.CantSolveEq', V54, V55, V56, V57, V58, V59} -> begin (V92 = case V1 of {'Core.Context.MkDefs', V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91} -> {'Core.Context.MkDefs', V56, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91} end), begin (V93 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V54, V92, V57, V58))), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V104 = begin (V98 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V54, V92, V57, V59))), fun (V99) -> begin (V100 = (V98(V99))), case V100 of {'Prelude.Types.Left', V101} -> {'Prelude.Types.Left', V101}; {'Prelude.Types.Right', V102} -> (begin (V103 = ('un--impossibleOK'(V0, V54, V92, V97, V102))), V103 end(V99)) end end end end), V104 end(V94)) end end end end end; {'Core.Core.BadDotPattern', V105, V106, V107, V108, V109, V110} -> fun (V111) -> case V108 of 3 -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Core.CyclicMeta', V112, V113, V114, V115, V116} -> fun (V117) -> {'Prelude.Types.Right', 1} end; {'Core.Core.AllFailed', V118} -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V119) -> ('un--impossibleErrOK'(V0, V1, V119)) end, ((begin (V125 = fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V123, V124)) end end end end), fun (V126) -> fun (V127) -> ((((V125('erased'))('erased'))(V126))(V127)) end end end(fun (V120) -> ('Idris.Idris2.Builtin':'un--snd'(V120)) end))(V118)))); {'Core.Core.WhenUnifying', V128, V129, V130, V131, V132, V133, V134} -> ('un--impossibleErrOK'(V0, V1, V134)); _ -> fun (V135) -> {'Prelude.Types.Right', 0} end end.
'un--hasEmptyPat'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Bind', V5, V6, V7, V8} -> begin (V9 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V2, V3, ('Idris.Idris2.Core.TT':'un--binderType'(V7))))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V27 = begin (V14 = ('Idris.Idris2.Core.Coverage':'un--isEmpty'(V0, V1, V2, V3, V13))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V26 = begin (V19 = ('un--hasEmptyPat'([V6 | V0], V1, V2, {'Core.Env.::', V7, V3}, V8))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', case V18 of 1 -> 1; 0 -> V23 end} end), V25 end(V20)) end end end end), V26 end(V15)) end end end end), V27 end(V10)) end end end end; _ -> fun (V28) -> {'Prelude.Types.Right', 0} end end.
'un--findLinear'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.TT.Bind', V6, V7, V8, V9} -> ('un--findLinear'([V7 | V0], V1, V2, (V3 + 1), V4, V9)); {'Core.TT.As', V10, V11, V12, V13} -> ('un--findLinear'(V0, V1, V2, V3, V4, V13)); _ -> ('case--findLinear-7962'(V0, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V5)))) end.
'un--extendEnv'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Core.TT.Bind', V6, V7, V8, V9} -> case V8 of {'Core.TT.PVar', V10, V11, V12, V13} -> case V5 of {'Core.TT.Bind', V14, V15, V16, V17} -> case V16 of {'Core.TT.PVTy', V18, V19, V20} -> ('with--extendEnv-7365'(V7, V15, ('Idris.Idris2.Core.Name':'un--nameEq'(V7, V15)), 'erased', V0, V14, V18, V19, V20, V6, V13, V12, V11, V10, V9, V17, V3, V2, V1)); _ -> fun (V21) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V0, {'Builtin.MkPair', V2, {'Builtin.MkPair', V1, {'Builtin.MkPair', V3, {'Builtin.MkPair', V4, V5}}}}}} end end; _ -> fun (V22) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V0, {'Builtin.MkPair', V2, {'Builtin.MkPair', V1, {'Builtin.MkPair', V3, {'Builtin.MkPair', V4, V5}}}}}} end end; {'Core.TT.PLet', V23, V24, V25, V26} -> case V5 of {'Core.TT.Bind', V27, V28, V29, V30} -> case V29 of {'Core.TT.PLet', V31, V32, V33, V34} -> ('with--extendEnv-7454'(V7, V28, ('Idris.Idris2.Core.Name':'un--nameEq'(V7, V28)), 'erased', V0, V27, V31, V32, V34, V33, V6, V25, V26, V24, V23, V9, V30, V3, V2, V1)); _ -> fun (V35) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V0, {'Builtin.MkPair', V2, {'Builtin.MkPair', V1, {'Builtin.MkPair', V3, {'Builtin.MkPair', V4, V5}}}}}} end end; _ -> fun (V36) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V0, {'Builtin.MkPair', V2, {'Builtin.MkPair', V1, {'Builtin.MkPair', V3, {'Builtin.MkPair', V4, V5}}}}}} end end; _ -> fun (V37) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V0, {'Builtin.MkPair', V2, {'Builtin.MkPair', V1, {'Builtin.MkPair', V3, {'Builtin.MkPair', V4, V5}}}}}} end end; _ -> fun (V38) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V0, {'Builtin.MkPair', V2, {'Builtin.MkPair', V1, {'Builtin.MkPair', V3, {'Builtin.MkPair', V4, V5}}}}}} end end.
'un--compileRunTime'(V0, V1, V2, V3, V4, V5, V6) -> begin (V12 = begin (V7 = V0), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V143 = begin (V50 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V17) -> ('un--mkRunTime'(V0, V1, V2, V3, V4, V5, V17)) end, case V16 of {'Core.Context.MkDefs', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} -> V39 end))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V142 = begin (V88 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V55) -> ('un--calcRefs'(V0, 1, V6, V55)) end, case V16 of {'Core.Context.MkDefs', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} -> V77 end))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V141 = begin (V98 = begin (V93 = V0), fun (V94) -> begin (V97 = (begin (V95 = V93), fun (V96) -> ('erlang':'get'(V95)) end end(V94))), {'Prelude.Types.Right', V97} end end end), fun (V99) -> begin (V100 = (V98(V99))), case V100 of {'Prelude.Types.Left', V101} -> {'Prelude.Types.Left', V101}; {'Prelude.Types.Right', V102} -> (begin (V140 = begin (V103 = V0), fun (V104) -> begin (V139 = (begin (V105 = V103), fun (V106) -> ('erlang':'put'(V105, case V102 of {'Core.Context.MkDefs', V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138} -> {'Core.Context.MkDefs', V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, [], V129, V130, V131, V132, V133, V134, V135, V136, V137, V138} end)) end end(V104))), {'Prelude.Types.Right', V139} end end end), V140 end(V99)) end end end end), V141 end(V89)) end end end end), V142 end(V51)) end end end end), V143 end(V13)) end end end end.
'un--combineLinear'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Builtin.MkPair', V5, V6} -> ('case--combineLinear-8475'(V5, V6, V4, V0, ('nested--17035-8289--in--un--lookupAll'(V5, V6, V4, V0, V5, V4)))) end end(E0, E1)) end.
'un--checkLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V19 = begin (V14 = V1), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V280 = begin (V24 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, <<"declare.def.lhs"/utf8>>, 30, fun () -> <<"Raw LHS: "/utf8>> end, V13))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V279 = begin (V30 = case V6 of 1 -> fun (V29) -> {'Prelude.Types.Right', V13} end; 0 -> ('Idris.Idris2.TTImp.TTImp':'un--lhsInCurrentNS'(V1, V10, V13)) end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V278 = begin (V35 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, <<"declare.def.lhs"/utf8>>, 30, fun () -> <<"Raw LHS in current NS: "/utf8>> end, V34))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V277 = begin (V40 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V276 = begin (V45 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, 1))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V275 = begin (V50 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 0, V34))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V274 = case V54 of {'Builtin.MkPair', V55, V56} -> begin (V57 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V44))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V273 = begin (V68 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, (begin (V63 = fun (V62) -> V62 end), fun (V64) -> (V63(V64)) end end(<<"declare.def.lhs"/utf8>>)), 30, fun () -> (begin (V66 = fun (V65) -> V65 end), fun (V67) -> (V66(V67)) end end(<<"Raw LHS with implicits bound"/utf8>>)) end, V56))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V272 = begin (V74 = case V6 of 1 -> fun (V73) -> {'Prelude.Types.Right', V56} end; 0 -> ('Idris.Idris2.TTImp.TTImp':'un--implicitsAs'(V1, V8, V23, V0, V56)) end), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V271 = begin (V92 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, (begin (V80 = fun (V79) -> V79 end), fun (V81) -> (V80(V81)) end end(<<"declare.def.lhs"/utf8>>)), 5, begin (V82 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Core.Name.Resolved', V8}))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V91 = fun (V87) -> {'Prelude.Types.Right', <<(begin (V89 = fun (V88) -> V88 end), fun (V90) -> (V89(V90)) end end(<<"Checking LHS of "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V86))/binary>>} end), V91 end(V83)) end end end end))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V270 = begin (V103 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V98 = fun (V97) -> V97 end), fun (V99) -> (V98(V99)) end end(<<"declare.def.lhs"/utf8>>)), 10, fun () -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V101, V102)) end end}, V78)) end))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V269 = begin (V111 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, (begin (V109 = fun (V108) -> V108 end), fun (V110) -> (V109(V110)) end end(<<"declare.def.lhs"/utf8>>)), 5, <<"In env"/utf8>>, V11))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V268 = begin (V116 = case V6 of 1 -> {'TTImp.Elab.Check.InTransform'}; 0 -> {'TTImp.Elab.Check.InLHS', V7} end), begin (V124 = begin (V117 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Core.Name.Resolved', V8}))), fun (V118) -> begin (V119 = (V117(V118))), case V119 of {'Prelude.Types.Left', V120} -> {'Prelude.Types.Left', V120}; {'Prelude.Types.Right', V121} -> (begin (V123 = ('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V9, fun (V122) -> {'Core.Core.InLHS', V12, V121, V122} end, ('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V4, V5, V8, V116, V9, V10, V11, {'TTImp.TTImp.IBindHere', V12, {'TTImp.TTImp.PATTERN'}, V78}, {'Prelude.Types.Nothing'}))))), V123 end(V118)) end end end end), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V267 = case V128 of {'Builtin.MkPair', V129, V130} -> begin (V137 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, (begin (V132 = fun (V131) -> V131 end), fun (V133) -> (V132(V133)) end end(<<"declare.def.lhs"/utf8>>)), 5, fun () -> (begin (V135 = fun (V134) -> V134 end), fun (V136) -> (V135(V136)) end end(<<"Checked LHS term"/utf8>>)) end, V129))), fun (V138) -> begin (V139 = (V137(V138))), case V139 of {'Prelude.Types.Left', V140} -> {'Prelude.Types.Left', V140}; {'Prelude.Types.Right', V141} -> (begin (V266 = begin (V142 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V130))), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V265 = begin (V152 = begin (V147 = V1), fun (V148) -> begin (V151 = (begin (V149 = V147), fun (V150) -> ('erlang':'get'(V149)) end end(V148))), {'Prelude.Types.Right', V151} end end end), fun (V153) -> begin (V154 = (V152(V153))), case V154 of {'Prelude.Types.Left', V155} -> {'Prelude.Types.Left', V155}; {'Prelude.Types.Right', V156} -> (begin (V264 = begin (V157 = ('Idris.Idris2.Core.Env':'un--letToLam'(V11))), begin (V158 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V156, V157, V129))), fun (V159) -> begin (V160 = (V158(V159))), case V160 of {'Prelude.Types.Left', V161} -> {'Prelude.Types.Left', V161}; {'Prelude.Types.Right', V162} -> (begin (V263 = begin (V163 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V156, V11, V146))), fun (V164) -> begin (V165 = (V163(V164))), case V165 of {'Prelude.Types.Left', V166} -> {'Prelude.Types.Left', V166}; {'Prelude.Types.Right', V167} -> (begin (V262 = begin (V172 = ('un--findLinear'(V0, V1, 1, 0, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V168) -> fun (V169) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V168, V169)) end end, 0, fun (V170) -> fun (V171) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V170, V171)) end end, 1})), V162))), fun (V173) -> begin (V174 = (V172(V173))), case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> (begin (V261 = begin (V183 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, (begin (V178 = fun (V177) -> V177 end), fun (V179) -> (V178(V179)) end end(<<"declare.def.lhs"/utf8>>)), 10, fun () -> (begin (V181 = fun (V180) -> V180 end), fun (V182) -> (V181(V182)) end end(<<"Checked LHS term after normalise"/utf8>>)) end, V162))), fun (V184) -> begin (V185 = (V183(V184))), case V185 of {'Prelude.Types.Left', V186} -> {'Prelude.Types.Left', V186}; {'Prelude.Types.Right', V187} -> (begin (V260 = begin (V209 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V189 = fun (V188) -> V188 end), fun (V190) -> (V189(V190)) end end(<<"declare.def.lhs"/utf8>>)), 5, fun () -> <<(begin (V192 = fun (V191) -> V191 end), fun (V193) -> (V192(V193)) end end(<<"Linearity of names in "/utf8>>))/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V194) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V195) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V195)) end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V196, V197)) end end}, {'Prelude.Show.MkShow', fun (V198) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V198)) end, fun (V199) -> fun (V200) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V199, V200)) end end}}, V194)) end, fun (V201) -> fun (V202) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V203) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V203)) end, fun (V204) -> fun (V205) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V204, V205)) end end}, {'Prelude.Show.MkShow', fun (V206) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V206)) end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V207, V208)) end end}}, V201, V202)) end end}, V176))/binary>>/binary>>/binary>> end))), fun (V210) -> begin (V211 = (V209(V210))), case V211 of {'Prelude.Types.Left', V212} -> {'Prelude.Types.Left', V212}; {'Prelude.Types.Right', V213} -> (begin (V259 = begin (V214 = ('un--combineLinear'(V12, V176))), fun (V215) -> begin (V216 = (V214(V215))), case V216 of {'Prelude.Types.Left', V217} -> {'Prelude.Types.Left', V217}; {'Prelude.Types.Right', V218} -> (begin (V258 = begin (V219 = ('un--setLinear'(V218, V162))), begin (V220 = ('un--setLinear'(V218, V167))), begin (V227 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, (begin (V222 = fun (V221) -> V221 end), fun (V223) -> (V222(V223)) end end(<<"declare.def.lhs"/utf8>>)), 3, fun () -> (begin (V225 = fun (V224) -> V224 end), fun (V226) -> (V225(V226)) end end(<<"LHS term"/utf8>>)) end, V219))), fun (V228) -> begin (V229 = (V227(V228))), case V229 of {'Prelude.Types.Left', V230} -> {'Prelude.Types.Left', V230}; {'Prelude.Types.Right', V231} -> (begin (V257 = begin (V238 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, (begin (V233 = fun (V232) -> V232 end), fun (V234) -> (V233(V234)) end end(<<"declare.def.lhs"/utf8>>)), 5, fun () -> (begin (V236 = fun (V235) -> V235 end), fun (V237) -> (V236(V237)) end end(<<"LHS type"/utf8>>)) end, V220))), fun (V239) -> begin (V240 = (V238(V239))), case V240 of {'Prelude.Types.Left', V241} -> {'Prelude.Types.Left', V241}; {'Prelude.Types.Right', V242} -> (begin (V256 = begin (V243 = ('Idris.Idris2.Core.Metadata':'un--setHoleLHS'(V2, ('Idris.Idris2.Core.Env':'un--bindEnv'(V0, V12, V11, V219))))), fun (V244) -> begin (V245 = (V243(V244))), case V245 of {'Prelude.Types.Left', V246} -> {'Prelude.Types.Left', V246}; {'Prelude.Types.Right', V247} -> (begin (V255 = begin (V248 = ('un--extendEnv'(V0, V11, {'Core.TT.SubRefl'}, V10, V219, V220))), fun (V249) -> begin (V250 = (V248(V249))), case V250 of {'Prelude.Types.Left', V251} -> {'Prelude.Types.Left', V251}; {'Prelude.Types.Right', V252} -> (begin (V254 = fun (V253) -> {'Prelude.Types.Right', {'Builtin.MkPair', V78, V252}} end), V254 end(V249)) end end end end), V255 end(V244)) end end end end), V256 end(V239)) end end end end), V257 end(V228)) end end end end end end), V258 end(V215)) end end end end), V259 end(V210)) end end end end), V260 end(V184)) end end end end), V261 end(V173)) end end end end), V262 end(V164)) end end end end), V263 end(V159)) end end end end end), V264 end(V153)) end end end end), V265 end(V143)) end end end end), V266 end(V138)) end end end end end), V267 end(V125)) end end end end end), V268 end(V112)) end end end end), V269 end(V104)) end end end end), V270 end(V93)) end end end end), V271 end(V75)) end end end end), V272 end(V69)) end end end end), V273 end(V58)) end end end end end), V274 end(V51)) end end end end), V275 end(V46)) end end end end), V276 end(V41)) end end end end), V277 end(V36)) end end end end), V278 end(V31)) end end end end), V279 end(V25)) end end end end), V280 end(V20)) end end end end.
'un--checkClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'TTImp.TTImp.ImpossibleClause', V15, V16} -> begin (V17 = ('Idris.Idris2.TTImp.TTImp':'un--lhsInCurrentNS'(V1, V12, V16))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V125 = ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V1, V3, begin (V22 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V100 = begin (V27 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, 1))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V99 = begin (V32 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 0, V21))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V98 = case V36 of {'Builtin.MkPair', V37, V38} -> begin (V39 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V26))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V97 = begin (V50 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V45 = fun (V44) -> V44 end), fun (V46) -> (V45(V46)) end end(<<"declare.def.clause.impossible"/utf8>>)), 5, fun () -> <<<<"Checking "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V48, V49)) end end}, V38))/binary>> end))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V96 = begin (V58 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, (begin (V56 = fun (V55) -> V55 end), fun (V57) -> (V56(V57)) end end(<<"declare.def.clause.impossible"/utf8>>)), 5, <<"In env"/utf8>>, V13))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V95 = begin (V63 = ('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V4, V5, V10, {'TTImp.Elab.Check.InLHS', V6}, V11, V12, V13, {'TTImp.TTImp.IBindHere', V15, {'TTImp.TTImp.PATTERN'}, V38}, {'Prelude.Types.Nothing'}))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V94 = case V67 of {'Builtin.MkPair', V68, V69} -> begin (V75 = begin (V70 = V1), fun (V71) -> begin (V74 = (begin (V72 = V70), fun (V73) -> ('erlang':'get'(V72)) end end(V71))), {'Prelude.Types.Right', V74} end end end), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V93 = begin (V80 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V79, V13, V68))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V92 = begin (V85 = ('un--hasEmptyPat'(V0, V1, V79, V13, V84))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V91 = fun (V90) -> case V89 of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Left', V21}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.ValidCase', V0, V15, V13, {'Prelude.Types.Left', V84}}, V90)) end end), V91 end(V86)) end end end end), V92 end(V81)) end end end end), V93 end(V76)) end end end end end), V94 end(V64)) end end end end), V95 end(V59)) end end end end), V96 end(V51)) end end end end), V97 end(V40)) end end end end end), V98 end(V33)) end end end end), V99 end(V28)) end end end end), V100 end(V23)) end end end end, fun (V101) -> case V101 of {'Core.Core.ValidCase', V102, V103, V104, V105} -> fun (V106) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V101, V106)) end; _ -> begin (V112 = begin (V107 = V1), fun (V108) -> begin (V111 = (begin (V109 = V107), fun (V110) -> ('erlang':'get'(V109)) end end(V108))), {'Prelude.Types.Right', V111} end end end), fun (V113) -> begin (V114 = (V112(V113))), case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> (begin (V124 = begin (V117 = ('un--impossibleErrOK'(V1, V116, V101))), fun (V118) -> begin (V119 = (V117(V118))), case V119 of {'Prelude.Types.Left', V120} -> {'Prelude.Types.Left', V120}; {'Prelude.Types.Right', V121} -> (begin (V123 = fun (V122) -> case V121 of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Left', V21}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.ValidCase', V0, V15, V13, {'Prelude.Types.Right', V101}}, V122)) end end), V123 end(V118)) end end end end), V124 end(V113)) end end end end end end))), V125 end(V18)) end end end end; {'TTImp.TTImp.PatClause', V126, V127, V128} -> begin (V129 = ('un--checkLHS'(V0, V1, V2, V3, V4, V5, 0, V6, V10, V11, V12, V13, V126, V127))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V264 = case V133 of {'Builtin.MkPair', V134, V135} -> case V135 of {'Builtin.DPair.MkDPair', V136, V137} -> case V137 of {'Builtin.MkPair', V138, V139} -> case V139 of {'Builtin.MkPair', V140, V141} -> case V141 of {'Builtin.MkPair', V142, V143} -> case V143 of {'Builtin.MkPair', V144, V145} -> begin (V154 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V146) -> fun (V147) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V146, V147)) end end, 0, fun (V148) -> fun (V149) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V148, V149)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V150) -> fun (V151) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V150, V151)) end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V152, V153)) end end}}, V6)) of 1 -> {'TTImp.Elab.Check.InType'}; 0 -> {'TTImp.Elab.Check.InExpr'} end), begin (V164 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V156 = fun (V155) -> V155 end), fun (V157) -> (V156(V157)) end end(<<"declare.def.clause"/utf8>>)), 5, fun () -> <<(begin (V159 = fun (V158) -> V158 end), fun (V160) -> (V159(V160)) end end(<<"Checking RHS "/utf8>>))/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V161) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V161)) end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V162, V163)) end end}, V128))/binary>> end))), fun (V165) -> begin (V166 = (V164(V165))), case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> (begin (V263 = begin (V172 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V136, V1, (begin (V170 = fun (V169) -> V169 end), fun (V171) -> (V170(V171)) end end(<<"declare.def.clause"/utf8>>)), 5, <<"In env"/utf8>>, V140))), fun (V173) -> begin (V174 = (V172(V173))), case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> (begin (V262 = begin (V187 = begin (V177 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Core.Name.Resolved', V10}))), fun (V178) -> begin (V179 = (V177(V178))), case V179 of {'Prelude.Types.Left', V180} -> {'Prelude.Types.Left', V180}; {'Prelude.Types.Right', V181} -> (begin (V186 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, 3, fun () -> <<(begin (V183 = fun (V182) -> V182 end), fun (V184) -> (V183(V184)) end end(<<"Check RHS "/utf8>>))/binary, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V126))/binary>> end, ('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V11, fun (V185) -> {'Core.Core.InRHS', V126, V181, V185} end, ('Idris.Idris2.TTImp.Elab':'un--checkTermSub'(V0, V136, V1, V2, V3, V4, V5, V10, V154, V11, V142, V140, V13, V138, V128, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V136, V140, V145))))))))), V186 end(V178)) end end end end), fun (V188) -> begin (V189 = (V187(V188))), case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> (begin (V261 = begin (V192 = ('Idris.Idris2.Core.Metadata':'un--clearHoleLHS'(V2))), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V260 = begin (V203 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V136, V1, (begin (V198 = fun (V197) -> V197 end), fun (V199) -> (V198(V199)) end end(<<"declare.def.clause"/utf8>>)), 3, fun () -> (begin (V201 = fun (V200) -> V200 end), fun (V202) -> (V201(V202)) end end(<<"RHS term"/utf8>>)) end, V191))), fun (V204) -> begin (V205 = (V203(V204))), case V205 of {'Prelude.Types.Left', V206} -> {'Prelude.Types.Left', V206}; {'Prelude.Types.Right', V207} -> (begin (V259 = begin (V241 = case V9 of 1 -> begin (V215 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Core.Hash.dn--un--__mkHashable', fun (V208) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V208)) end, fun (V209) -> fun (V210) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V209, V210)) end end}, {'Core.Context.dn--un--__mkHasNames', fun (V211) -> fun (V212) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V211, V212)) end end, fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V213, V214)) end end}, V144))), fun (V216) -> begin (V217 = (V215(V216))), case V217 of {'Prelude.Types.Left', V218} -> {'Prelude.Types.Left', V218}; {'Prelude.Types.Right', V219} -> (begin (V239 = begin (V227 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Core.Hash.dn--un--__mkHashable', fun (V220) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V220)) end, fun (V221) -> fun (V222) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V221, V222)) end end}, {'Core.Context.dn--un--__mkHasNames', fun (V223) -> fun (V224) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V223, V224)) end end, fun (V225) -> fun (V226) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V225, V226)) end end}, V191))), fun (V228) -> begin (V229 = (V227(V228))), case V229 of {'Prelude.Types.Left', V230} -> {'Prelude.Types.Left', V230}; {'Prelude.Types.Right', V231} -> (begin (V238 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V233 = fun (V232) -> V232 end), fun (V234) -> (V233(V234)) end end(<<"module.hash"/utf8>>)), 15, fun () -> (begin (V236 = fun (V235) -> V235 end), fun (V237) -> (V236(V237)) end end(<<"Adding hash for def."/utf8>>)) end))), V238 end(V228)) end end end end), V239 end(V216)) end end end end; 0 -> fun (V240) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V242) -> begin (V243 = (V241(V242))), case V243 of {'Prelude.Types.Left', V244} -> {'Prelude.Types.Left', V244}; {'Prelude.Types.Right', V245} -> (begin (V258 = begin (V251 = case V191 of {'Core.TT.Meta', V246, V247, V248, V249} -> ('Idris.Idris2.Core.Metadata':'un--addLHS'(V136, V1, V2, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V127)), ('Idris.Idris2.Core.Env':'un--length'(V13)), V140, V144)); _ -> fun (V250) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V252) -> begin (V253 = (V251(V252))), case V253 of {'Prelude.Types.Left', V254} -> {'Prelude.Types.Left', V254}; {'Prelude.Types.Right', V255} -> (begin (V257 = fun (V256) -> {'Prelude.Types.Right', {'Prelude.Types.Right', {'Core.Context.Context.MkClause', V136, V140, V144, V191}}} end), V257 end(V252)) end end end end), V258 end(V242)) end end end end), V259 end(V204)) end end end end), V260 end(V193)) end end end end), V261 end(V188)) end end end end), V262 end(V173)) end end end end), V263 end(V165)) end end end end end end end end end end end), V264 end(V130)) end end end end; {'TTImp.TTImp.WithClause', V265, V266, V267, V268, V269, V270, V271} -> begin (V272 = ('un--checkLHS'(V0, V1, V2, V3, V4, V5, 0, V6, V10, V11, V12, V13, V265, V266))), fun (V273) -> begin (V274 = (V272(V273))), case V274 of {'Prelude.Types.Left', V275} -> {'Prelude.Types.Left', V275}; {'Prelude.Types.Right', V276} -> (begin (V393 = case V276 of {'Builtin.MkPair', V277, V278} -> case V278 of {'Builtin.DPair.MkDPair', V279, V280} -> case V280 of {'Builtin.MkPair', V281, V282} -> case V282 of {'Builtin.MkPair', V283, V284} -> case V284 of {'Builtin.MkPair', V285, V286} -> case V286 of {'Builtin.MkPair', V287, V288} -> begin (V305 = case case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V289) -> fun (V290) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V289, V290)) end end, 0, fun (V291) -> fun (V292) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V291, V292)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V293) -> fun (V294) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V293, V294)) end end, fun (V295) -> fun (V296) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V295, V296)) end end}}, V6)) of 1 -> 1; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V297) -> fun (V298) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V297, V298)) end end, 0, fun (V299) -> fun (V300) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V299, V300)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V301) -> fun (V302) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V301, V302)) end end, fun (V303) -> fun (V304) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V303, V304)) end end}}, V267)) end of 1 -> {'TTImp.Elab.Check.InType'}; 0 -> {'TTImp.Elab.Check.InExpr'} end), begin (V313 = begin (V306 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Core.Name.Resolved', V10}))), fun (V307) -> begin (V308 = (V306(V307))), case V308 of {'Prelude.Types.Left', V309} -> {'Prelude.Types.Left', V309}; {'Prelude.Types.Right', V310} -> (begin (V312 = ('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V11, fun (V311) -> {'Core.Core.InRHS', V265, V310, V311} end, ('Idris.Idris2.TTImp.Elab':'un--elabTermSub'(V0, V279, V1, V2, V3, V4, V5, V10, V305, V11, V285, V283, V13, V281, V268, {'Prelude.Types.Nothing'}))))), V312 end(V307)) end end end end), fun (V314) -> begin (V315 = (V313(V314))), case V315 of {'Prelude.Types.Left', V316} -> {'Prelude.Types.Left', V316}; {'Prelude.Types.Right', V317} -> (begin (V392 = begin (V318 = {'Builtin.MkPair', V277, {'Builtin.DPair.MkDPair', V279, {'Builtin.MkPair', V281, {'Builtin.MkPair', V283, {'Builtin.MkPair', V285, {'Builtin.MkPair', V287, V288}}}}}}), case V317 of {'Builtin.MkPair', V319, V320} -> begin (V321 = ('Idris.Idris2.Core.Metadata':'un--clearHoleLHS'(V2))), fun (V322) -> begin (V323 = (V321(V322))), case V323 of {'Prelude.Types.Left', V324} -> {'Prelude.Types.Left', V324}; {'Prelude.Types.Right', V325} -> (begin (V391 = begin (V341 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V279, V1, (begin (V327 = fun (V326) -> V326 end), fun (V328) -> (V327(V328)) end end(<<"declare.def.clause.with"/utf8>>)), 5, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V329) -> fun (V330) -> <<V329/binary, V330/binary>> end end, <<""/utf8>>}, fun (V331) -> V331 end, [(begin (V333 = fun (V332) -> V332 end), fun (V334) -> (V333(V334)) end end(<<"With value (at quantity "/utf8>>)) | [(begin (V336 = fun (V335) -> V335 end), fun (V337) -> (V336(V337)) end end(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V267)))) | [(begin (V339 = fun (V338) -> V338 end), fun (V340) -> (V339(V340)) end end(<<")"/utf8>>)) | []]]])) end, V319))), fun (V342) -> begin (V343 = (V341(V342))), case V343 of {'Prelude.Types.Left', V344} -> {'Prelude.Types.Left', V344}; {'Prelude.Types.Right', V345} -> (begin (V390 = begin (V352 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V279, V1, (begin (V347 = fun (V346) -> V346 end), fun (V348) -> (V347(V348)) end end(<<"declare.def.clause.with"/utf8>>)), 3, fun () -> (begin (V350 = fun (V349) -> V349 end), fun (V351) -> (V350(V351)) end end(<<"Required type"/utf8>>)) end, V288))), fun (V353) -> begin (V354 = (V352(V353))), case V354 of {'Prelude.Types.Left', V355} -> {'Prelude.Types.Left', V355}; {'Prelude.Types.Right', V356} -> (begin (V389 = begin (V357 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V320))), fun (V358) -> begin (V359 = (V357(V358))), case V359 of {'Prelude.Types.Left', V360} -> {'Prelude.Types.Left', V360}; {'Prelude.Types.Right', V361} -> (begin (V388 = begin (V367 = begin (V362 = V1), fun (V363) -> begin (V366 = (begin (V364 = V362), fun (V365) -> ('erlang':'get'(V364)) end end(V363))), {'Prelude.Types.Right', V366} end end end), fun (V368) -> begin (V369 = (V367(V368))), case V369 of {'Prelude.Types.Left', V370} -> {'Prelude.Types.Left', V370}; {'Prelude.Types.Right', V371} -> (begin (V387 = begin (V372 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V279, V371, V283, V319))), fun (V373) -> begin (V374 = (V372(V373))), case V374 of {'Prelude.Types.Left', V375} -> {'Prelude.Types.Left', V375}; {'Prelude.Types.Right', V376} -> (begin (V386 = begin (V377 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V279, V371, V283, V361))), fun (V378) -> begin (V379 = (V377(V378))), case V379 of {'Prelude.Types.Left', V380} -> {'Prelude.Types.Left', V380}; {'Prelude.Types.Right', V381} -> (begin (V385 = begin (V382 = {'Builtin.MkPair', V319, V320}), ('case--case block in case block in checkClause-11734'(V271, V270, V269, V268, V267, V266, V265, V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V277, V279, V281, V283, V285, V287, V288, V318, V305, V319, V320, V382, V361, V371, V376, V381, ('nested--18282-10435--in--un--keepOldEnv'(V271, V270, V269, V268, V267, V266, V265, V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V279, V281, case ('Idris.Idris2.Core.Env':'un--findSubEnv'(V279, V283, V376)) of {'Builtin.DPair.MkDPair', V383, V384} -> V384 end)))) end), V385 end(V378)) end end end end), V386 end(V373)) end end end end), V387 end(V368)) end end end end), V388 end(V358)) end end end end), V389 end(V353)) end end end end), V390 end(V342)) end end end end), V391 end(V322)) end end end end end end), V392 end(V314)) end end end end end end end end end end end), V393 end(V273)) end end end end end.
'un--calcRefs'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V77 = begin (V46 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V76 = case V50 of {'Prelude.Types.Just', V51} -> begin (V52 = {'Prelude.Types.Just', V51}), ('case--case block in calcRefs-14518'(V3, V2, V1, V0, V13, V51, V52, case V51 of {'Core.Context.Context.MkGlobalDef', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74} -> V70 end)) end; _ -> fun (V75) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V76 end(V47)) end end end end), V77 end(V10)) end end end end.
'un--applyEnv'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V12 = fun (V9) -> {'Prelude.Types.Right', {'Builtin.MkPair', V3, {'Builtin.MkPair', {'Prelude.Types.Just', V3}, {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Core.Env':'un--allVarsNoLet'(V0, V2)))), fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.UnifyState':'un--applyTo'(V0, V10, {'Core.TT.Ref', V10, V11, {'Core.Name.Resolved', V8}}, V2)) end end}}}} end), V12 end(V5)) end end end end.
