-module('Idris.Idris2.Idris.Env').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--idrisGetEnv'/3,
  'un--envs'/0,
  'un--envNames'/0
]).
'un--idrisGetEnv'(V0, V1, V2) -> ('Idris.Idris2.Erlang.System':'un--getEnv'(V0, V1)).
'un--envs'() -> [{'Idris.Env.MkEnvDesc', <<"EDITOR"/utf8>>, <<"Editor used in REPL :e command."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"IDRIS2_PREFIX"/utf8>>, <<"Idris2 installation prefix."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"IDRIS2_PATH"/utf8>>, <<"Directories where Idris2 looks for import files."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"IDRIS2_PACKAGE_PATH"/utf8>>, <<"Directories where Idris2 looks for Idris 2 packages."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"IDRIS2_DATA"/utf8>>, <<"Directories where Idris2 looks for data files."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"IDRIS2_LIBS"/utf8>>, <<"Directories where Idris2 looks for libraries (for code generation)."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"IDRIS2_CG"/utf8>>, <<"Codegen backend."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"IDRIS2_INC_CGS"/utf8>>, <<"Code generators to use (comma separated) when compiling modules incrementally."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"CHEZ"/utf8>>, <<"Chez backend: chez executable."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"RACKET"/utf8>>, <<"Racket backend: racket executable."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"RACKET_RACO"/utf8>>, <<"Racket backend: raco executable."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"GAMBIT_GSI"/utf8>>, <<"Gambit backend: gsi executable."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"GAMBIT_GSC"/utf8>>, <<"Gambit backend: gsc executable."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"GAMBIT_GSC_BACKEND"/utf8>>, <<"Gambit backend: arguments passed to gsc."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"IDRIS2_CC"/utf8>>, <<"RefC backend: C compiler executable."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"IDRIS2_CFLAGS"/utf8>>, <<"RefC backend: C compiler flags."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"IDRIS2_CPPFLAGS"/utf8>>, <<"RefC backend: C preprocessor flags."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"IDRIS2_LDFLAGS"/utf8>>, <<"RefC backend: C linker flags."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"CC"/utf8>>, <<"RefC backend: C compiler executable (IDRIS2_CC takes precedence)."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"CFLAGS"/utf8>>, <<"RefC backend: C compiler flags (IDRIS2_CFLAGS takes precedence)."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"CPPFLAGS"/utf8>>, <<"RefC backend: C preprocessor flags (IDRIS2_CPPFLAGS takes precedence)."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"LDFLAGS"/utf8>>, <<"RefC backend: C linker flags (IDRIS2_LDFLAGS takes precedence)."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"NODE"/utf8>>, <<"NodeJS backend: NodeJS executable."/utf8>>} | [{'Idris.Env.MkEnvDesc', <<"PATH"/utf8>>, <<"PATH variable is used to search for executables in certain codegens."/utf8>>} | []]]]]]]]]]]]]]]]]]]]]]]]].
'un--envNames'() -> ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V0) -> case V0 of {'Idris.Env.MkEnvDesc', V1, V2} -> V1 end end))(('un--envs'()))).
