-module('Idris.Idris2.Parser.Support').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in escape\x{27}-11387'/5,
  'case--case block in case block in escape\x{27}-11320'/5,
  'case--case block in case block in escape\x{27}-11248'/5,
  'case--case block in escape\x{27}-10937'/4,
  'nested--6652-10818--in--un--toOct'/5,
  'nested--6652-10817--in--un--toHex'/5,
  'nested--5997-10165--in--un--fromError'/3,
  'un--oct'/1,
  'un--hex'/1,
  'un--getEsc'/1,
  'un--getCharLit'/1,
  'un--fromParsingErrors'/3,
  'un--fromLitError'/2,
  'un--fromLexError'/2,
  'un--escape\x{27}'/2,
  'un--escape'/2,
  'un--dec'/1
]).
'case--case block in case block in escape\x{27}-11387'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V5 of [] -> case V6 of [E3 | E4] -> (fun (V7, V8) -> case V8 of [E5 | E6] -> (fun (V9, V10) -> case V10 of [E7 | E8] -> (fun (V11, V12) -> case ('un--getEsc'(('Idris.Idris2.Prelude.Types':'un--fastPack'([V7 | [V9 | [V11 | []]]])))) of {'Prelude.Types.Just', V13} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V12)), fun (V14) -> {'Prelude.Types.Just', [V13 | V14]} end)); {'Prelude.Types.Nothing'} -> case ('un--getEsc'(('Idris.Idris2.Prelude.Types':'un--fastPack'([V7 | [V9 | []]])))) of {'Prelude.Types.Just', V15} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, [V11 | V12])), fun (V16) -> {'Prelude.Types.Just', [V15 | V16]} end)); {'Prelude.Types.Nothing'} -> ('un--escape\x{27}'(V2, V3)) end end end(E7, E8)); [] -> case ('un--getEsc'(('Idris.Idris2.Prelude.Types':'un--fastPack'([V7 | [V9 | []]])))) of {'Prelude.Types.Just', V17} -> {'Prelude.Types.Just', [V17 | []]}; {'Prelude.Types.Nothing'} -> ('un--escape\x{27}'(V2, V3)) end; _ -> ('un--escape\x{27}'(V2, V6)) end end(E5, E6)); _ -> ('un--escape\x{27}'(V2, V6)) end end(E3, E4)); _ -> ('un--escape\x{27}'(V2, V6)) end; _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V6)), fun (V18) -> {'Prelude.Types.Just', [case begin (V21 = case ('string':'to_integer'(('Idris.Idris2.Prelude.Types':'un--fastPack'(V5)))) of {E1, E2} when (erlang:'is_integer'(E1)) -> (fun (V19, V20) -> case ('string':'is_empty'(V20)) of 'true' -> V19; _ -> 0 end end(E1, E2)); _ -> 0 end), case ((V21 band 9223372036854775808) =/= 0) of 'true' -> (V21 bor -9223372036854775808); _ -> (V21 band 9223372036854775807) end end of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end | V18]} end)) end end.
'case--case block in case block in escape\x{27}-11320'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V5 of [] -> ('un--escape\x{27}'(V2, V6)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--6652-10818--in--un--toOct'(V0, V1, V2, 1, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V5)))), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V6)), fun (V8) -> {'Prelude.Types.Just', [case V7 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end | V8]} end)) end)) end end.
'case--case block in case block in escape\x{27}-11248'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V5 of [] -> ('un--escape\x{27}'(V2, V6)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--6652-10817--in--un--toHex'(V0, V1, V2, 1, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V5)))), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V6)), fun (V8) -> {'Prelude.Types.Just', [case V7 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end | V8]} end)) end)) end end.
'case--case block in escape\x{27}-10937'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> case V4 of $\x{5c} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V6) -> {'Prelude.Types.Just', [$\x{5c} | V6]} end)); $\x{a} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V7) -> {'Prelude.Types.Just', V7} end)); $& -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V8) -> {'Prelude.Types.Just', V8} end)); $a -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V9) -> {'Prelude.Types.Just', [$\x{7} | V9]} end)); $b -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V10) -> {'Prelude.Types.Just', [$\x{8} | V10]} end)); $f -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V11) -> {'Prelude.Types.Just', [$\x{c} | V11]} end)); $n -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V12) -> {'Prelude.Types.Just', [$\x{a} | V12]} end)); $r -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V13) -> {'Prelude.Types.Just', [$\x{d} | V13]} end)); $t -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V14) -> {'Prelude.Types.Just', [$\x{9} | V14]} end)); $v -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V15) -> {'Prelude.Types.Just', [$\x{b} | V15]} end)); $\x{27} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V16) -> {'Prelude.Types.Just', [$\x{27} | V16]} end)); $\x{22} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V17) -> {'Prelude.Types.Just', [$\x{22} | V17]} end)); $x -> ('case--case block in case block in escape\x{27}-11248'(V0, V1, V2, V5, ('Idris.Idris2.Data.List':'un--span'(fun (V18) -> ('Idris.Idris2.Prelude.Types':'un--isHexDigit'(V18)) end, V5)))); $o -> ('case--case block in case block in escape\x{27}-11320'(V0, V1, V2, V5, ('Idris.Idris2.Data.List':'un--span'(fun (V19) -> ('Idris.Idris2.Prelude.Types':'un--isOctDigit'(V19)) end, V5)))); _ -> ('case--case block in case block in escape\x{27}-11387'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--span'(fun (V20) -> ('Idris.Idris2.Prelude.Types':'un--isDigit'(V20)) end, V3)))) end end(E0, E1)); _ -> ('case--case block in case block in escape\x{27}-11387'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--span'(fun (V21) -> ('Idris.Idris2.Prelude.Types':'un--isDigit'(V21)) end, V3)))) end.
'nested--6652-10818--in--un--toOct'(V0, V1, V2, V3, V4) -> case V4 of [] -> {'Prelude.Types.Just', 0}; [E0 | E1] -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--oct'(('Idris.Idris2.Prelude.Types':'un--toLower'(V5)))), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--6652-10818--in--un--toOct'(V0, V1, V2, begin (V8 = (V3 * 8)), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end, V6)), fun (V9) -> {'Prelude.Types.Just', begin (V11 = (begin (V10 = (V7 * V3)), case ((V10 band 9223372036854775808) =/= 0) of 'true' -> (V10 bor -9223372036854775808); _ -> (V10 band 9223372036854775807) end end + V9)), case ((V11 band 9223372036854775808) =/= 0) of 'true' -> (V11 bor -9223372036854775808); _ -> (V11 band 9223372036854775807) end end} end)) end)) end(E0, E1)) end.
'nested--6652-10817--in--un--toHex'(V0, V1, V2, V3, V4) -> case V4 of [] -> {'Prelude.Types.Just', 0}; [E0 | E1] -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--hex'(('Idris.Idris2.Prelude.Types':'un--toLower'(V5)))), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--6652-10817--in--un--toHex'(V0, V1, V2, begin (V8 = (V3 * 16)), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end, V6)), fun (V9) -> {'Prelude.Types.Just', begin (V11 = (begin (V10 = (V7 * V3)), case ((V10 band 9223372036854775808) =/= 0) of 'true' -> (V10 bor -9223372036854775808); _ -> (V10 band 9223372036854775807) end end + V9)), case ((V11 band 9223372036854775808) =/= 0) of 'true' -> (V11 bor -9223372036854775808); _ -> (V11 band 9223372036854775807) end end} end)) end)) end(E0, E1)) end.
'nested--5997-10165--in--un--fromError'(V0, V1, V2) -> case V2 of {'Libraries.Text.Parser.Core.Error', V3, V4} -> case V4 of {'Prelude.Types.Nothing'} -> {'Builtin.MkPair', {'Core.FC.MkFC', V1, {'Builtin.MkPair', 0, 0}, {'Builtin.MkPair', 0, 0}}, ('Idris.Idris2.Libraries.Data.String.Extra':'un--strSnoc'(V3, $.))}; {'Prelude.Types.Just', V5} -> begin (V6 = ('Idris.Idris2.Libraries.Text.Bounded':'un--startBounds'(V5))), begin (V7 = ('Idris.Idris2.Libraries.Text.Bounded':'un--endBounds'(V5))), begin (V19 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V10, V11)) end end}, {'Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V14, V15)) end end}, V6, V7)) of 1 -> {'Core.FC.MkFC', V1, V6, case V6 of {'Builtin.MkPair', V16, V17} -> {'Builtin.MkPair', V16, begin (V18 = (V17 + 1)), case ((V18 band 9223372036854775808) =/= 0) of 'true' -> (V18 bor -9223372036854775808); _ -> (V18 band 9223372036854775807) end end} end}; 0 -> {'Core.FC.MkFC', V1, V6, V7} end), {'Builtin.MkPair', V19, ('Idris.Idris2.Libraries.Data.String.Extra':'un--strSnoc'(V3, $.))} end end end end end.
'un--oct'(V0) -> case V0 of $0 -> {'Prelude.Types.Just', 0}; $1 -> {'Prelude.Types.Just', 1}; $2 -> {'Prelude.Types.Just', 2}; $3 -> {'Prelude.Types.Just', 3}; $4 -> {'Prelude.Types.Just', 4}; $5 -> {'Prelude.Types.Just', 5}; $6 -> {'Prelude.Types.Just', 6}; $7 -> {'Prelude.Types.Just', 7}; _ -> {'Prelude.Types.Nothing'} end.
'un--hex'(V0) -> case V0 of $0 -> {'Prelude.Types.Just', 0}; $1 -> {'Prelude.Types.Just', 1}; $2 -> {'Prelude.Types.Just', 2}; $3 -> {'Prelude.Types.Just', 3}; $4 -> {'Prelude.Types.Just', 4}; $5 -> {'Prelude.Types.Just', 5}; $6 -> {'Prelude.Types.Just', 6}; $7 -> {'Prelude.Types.Just', 7}; $8 -> {'Prelude.Types.Just', 8}; $9 -> {'Prelude.Types.Just', 9}; $a -> {'Prelude.Types.Just', 10}; $b -> {'Prelude.Types.Just', 11}; $c -> {'Prelude.Types.Just', 12}; $d -> {'Prelude.Types.Just', 13}; $e -> {'Prelude.Types.Just', 14}; $f -> {'Prelude.Types.Just', 15}; _ -> {'Prelude.Types.Nothing'} end.
'un--getEsc'(V0) -> case V0 of <<"NUL"/utf8>> -> {'Prelude.Types.Just', $\x{0}}; <<"SOH"/utf8>> -> {'Prelude.Types.Just', $\x{1}}; <<"STX"/utf8>> -> {'Prelude.Types.Just', $\x{2}}; <<"ETX"/utf8>> -> {'Prelude.Types.Just', $\x{3}}; <<"EOT"/utf8>> -> {'Prelude.Types.Just', $\x{4}}; <<"ENQ"/utf8>> -> {'Prelude.Types.Just', $\x{5}}; <<"ACK"/utf8>> -> {'Prelude.Types.Just', $\x{6}}; <<"BEL"/utf8>> -> {'Prelude.Types.Just', $\x{7}}; <<"BS"/utf8>> -> {'Prelude.Types.Just', $\x{8}}; <<"HT"/utf8>> -> {'Prelude.Types.Just', $\x{9}}; <<"LF"/utf8>> -> {'Prelude.Types.Just', $\x{a}}; <<"VT"/utf8>> -> {'Prelude.Types.Just', $\x{b}}; <<"FF"/utf8>> -> {'Prelude.Types.Just', $\x{c}}; <<"CR"/utf8>> -> {'Prelude.Types.Just', $\x{d}}; <<"SO"/utf8>> -> {'Prelude.Types.Just', $\x{e}}; <<"SI"/utf8>> -> {'Prelude.Types.Just', $\x{f}}; <<"DLE"/utf8>> -> {'Prelude.Types.Just', $\x{10}}; <<"DC1"/utf8>> -> {'Prelude.Types.Just', $\x{11}}; <<"DC2"/utf8>> -> {'Prelude.Types.Just', $\x{12}}; <<"DC3"/utf8>> -> {'Prelude.Types.Just', $\x{13}}; <<"DC4"/utf8>> -> {'Prelude.Types.Just', $\x{14}}; <<"NAK"/utf8>> -> {'Prelude.Types.Just', $\x{15}}; <<"SYN"/utf8>> -> {'Prelude.Types.Just', $\x{16}}; <<"ETB"/utf8>> -> {'Prelude.Types.Just', $\x{17}}; <<"CAN"/utf8>> -> {'Prelude.Types.Just', $\x{18}}; <<"EM"/utf8>> -> {'Prelude.Types.Just', $\x{19}}; <<"SUB"/utf8>> -> {'Prelude.Types.Just', $\x{1a}}; <<"ESC"/utf8>> -> {'Prelude.Types.Just', $\x{1b}}; <<"FS"/utf8>> -> {'Prelude.Types.Just', $\x{1c}}; <<"GS"/utf8>> -> {'Prelude.Types.Just', $\x{1d}}; <<"RS"/utf8>> -> {'Prelude.Types.Just', $\x{1e}}; <<"US"/utf8>> -> {'Prelude.Types.Just', $\x{1f}}; <<"SP"/utf8>> -> {'Prelude.Types.Just', $ }; <<"DEL"/utf8>> -> {'Prelude.Types.Just', $\x{7f}}; _ -> {'Prelude.Types.Nothing'} end.
'un--getCharLit'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape'(0, V0)), fun (V1) -> case case (('Idris.Idris2.Prelude.Types.String':'un--length'(V1)) =:= 1) of 'false' -> 0; _ -> 1 end of 1 -> {'Prelude.Types.Just', ('erlang':'hd'(('string':'next_grapheme'(V1))))}; 0 -> case case (('Idris.Idris2.Prelude.Types.String':'un--length'(V1)) =:= 0) of 'false' -> 0; _ -> 1 end of 1 -> {'Prelude.Types.Just', $\x{0}}; 0 -> {'Prelude.Types.Nothing'} end end end)).
'un--fromParsingErrors'(V0, V1, V2) -> {'Core.Core.ParseFail', ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V3) -> ('nested--5997-10165--in--un--fromError'(V0, V1, V3)) end, V2))}.
'un--fromLitError'(V0, V1) -> case V1 of {'Libraries.Text.Literate.MkLitErr', V2, V3, V4} -> {'Core.Core.LitFail', {'Core.FC.MkFC', V0, {'Builtin.MkPair', V2, V3}, {'Builtin.MkPair', V2, begin (V5 = (V3 + 1)), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end}}} end.
'un--fromLexError'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V2 of {'Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', V4, V5} -> case V3 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Core.Core.LexFail', {'Core.FC.MkFC', V0, V4, V5}, <<"Bracket is not properly closed."/utf8>>}; _ -> case V3 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Core.Core.LexFail', {'Core.FC.MkFC', V0, {'Builtin.MkPair', V10, V12}, {'Builtin.MkPair', V10, begin (V14 = (V12 + 1)), case ((V14 band 9223372036854775808) =/= 0) of 'true' -> (V14 bor -9223372036854775808); _ -> (V14 band 9223372036854775807) end end}}, <<"Can\x{27}t recognise token."/utf8>>} end end end; _ -> case V3 of {'Builtin.MkPair', V15, V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> {'Core.Core.LexFail', {'Core.FC.MkFC', V0, {'Builtin.MkPair', V15, V17}, {'Builtin.MkPair', V15, begin (V19 = (V17 + 1)), case ((V19 band 9223372036854775808) =/= 0) of 'true' -> (V19 bor -9223372036854775808); _ -> (V19 band 9223372036854775807) end end}}, <<"Can\x{27}t recognise token."/utf8>>} end end end; _ -> case V3 of {'Builtin.MkPair', V20, V21} -> case V21 of {'Builtin.MkPair', V22, V23} -> {'Core.Core.LexFail', {'Core.FC.MkFC', V0, {'Builtin.MkPair', V20, V22}, {'Builtin.MkPair', V20, begin (V24 = (V22 + 1)), case ((V24 band 9223372036854775808) =/= 0) of 'true' -> (V24 bor -9223372036854775808); _ -> (V24 band 9223372036854775807) end end}}, <<"Can\x{27}t recognise token."/utf8>>} end end end end.
'un--escape\x{27}'(V0, V1) -> case V1 of [] -> {'Prelude.Types.Just', []}; [E0 | E1] -> (fun (V2, V3) -> case ('Idris.Idris2.Data.List':'un--isPrefixOf'({'Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V6, V7)) end end}, V0, [V2 | V3])) of 1 -> ('case--case block in escape\x{27}-10937'(V2, V3, V0, ('Idris.Idris2.Data.List':'un--drop'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)), [V2 | V3])))); 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V0, V3)), fun (V8) -> {'Prelude.Types.Just', [V2 | V8]} end)) end end(E0, E1)) end.
'un--escape'(V0, V1) -> begin (V2 = [$\x{5c} | ('Idris.Idris2.Data.List':'un--replicateTR'([], V0, $#))]), ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V3)) end))(('un--escape\x{27}'(V2, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))))) end.
'un--dec'(V0) -> case V0 of $0 -> {'Prelude.Types.Just', 0}; $1 -> {'Prelude.Types.Just', 1}; $2 -> {'Prelude.Types.Just', 2}; $3 -> {'Prelude.Types.Just', 3}; $4 -> {'Prelude.Types.Just', 4}; $5 -> {'Prelude.Types.Just', 5}; $6 -> {'Prelude.Types.Just', 6}; $7 -> {'Prelude.Types.Just', 7}; $8 -> {'Prelude.Types.Just', 8}; $9 -> {'Prelude.Types.Just', 9}; _ -> {'Prelude.Types.Nothing'} end.
