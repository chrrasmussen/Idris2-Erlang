-module('Idris.Idris2.Idris.Resugar').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--toPRef-6496'/5,
  'nested--12368-6842--in--un--needsBind'/9,
  'nested--10365-4771--in--un--needed'/3,
  'nested--12368-7328--in--un--mkIf'/8,
  'nested--12501-8394--in--un--mapPiInfo'/9,
  'nested--14905-8882--in--un--cleanNode'/3,
  'nested--14905-8879--in--un--cleanName'/3,
  'nested--14905-8880--in--un--cleanKindedName'/3,
  'nested--14905-8881--in--un--cleanBinderName'/4,
  'un--unbracketApp'/1,
  'un--unbracket'/1,
  'un--tyPrec'/0,
  'un--toPTypeDecl'/3,
  'un--toPTermApp'/4,
  'un--toPTerm'/4,
  'un--toPRef'/2,
  'un--toPRecord'/3,
  'un--toPFnOpt'/3,
  'un--toPFieldUpdate'/3,
  'un--toPField'/3,
  'un--toPDecl'/3,
  'un--toPData'/3,
  'un--toPClause'/3,
  'un--toCleanPTerm'/4,
  'un--sugarName'/1,
  'un--sugarAppM'/1,
  'un--sugarApp'/1,
  'un--startPrec'/0,
  'un--showImplicits'/1,
  'un--showFullEnv'/1,
  'un--resugarNoPatvars'/5,
  'un--resugar'/5,
  'un--pterm'/3,
  'un--mkSectionL'/3,
  'un--mkOp'/2,
  'un--mkApp'/4,
  'un--extractNat'/2,
  'un--extractInteger'/1,
  'un--extractDouble'/1,
  'un--cleanPTerm'/2,
  'un--bracket'/5,
  'un--argPrec'/0,
  'un--appPrec'/0,
  'un--addBracket'/2
]).
'case--toPRef-6496'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Name.MN', V5, V6} -> fun (V7) -> {'Prelude.Types.Right', ('un--sugarApp'({'Idris.Syntax.PRef', V3, {'Core.TT.MkKindedName', V2, V1, {'Core.Name.MN', V5, V6}}}))} end; {'Core.Name.PV', V8, V9} -> fun (V10) -> {'Prelude.Types.Right', ('un--sugarApp'({'Idris.Syntax.PRef', V3, {'Core.TT.MkKindedName', V2, V1, V8}}))} end; {'Core.Name.DN', V11, V12} -> fun (V13) -> {'Prelude.Types.Right', ('un--sugarApp'({'Idris.Syntax.PRef', V3, {'Core.TT.MkKindedName', V2, V1, {'Core.Name.UN', {'Core.Name.Basic', V11}}}}))} end; {'Core.Name.Nested', V14, V15} -> ('un--toPRef'(V3, {'Core.TT.MkKindedName', V2, V1, V15})); _ -> fun (V16) -> {'Prelude.Types.Right', ('un--sugarApp'({'Idris.Syntax.PRef', V3, {'Core.TT.MkKindedName', V2, V1, V4}}))} end end.
'nested--12368-6842--in--un--needsBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Prelude.Types.Just', V9} -> case V9 of {'Core.Name.UN', V10} -> case V10 of {'Core.Name.Basic', V11} -> begin (V23 = ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V12) -> case V12 of {'Core.TT.MkKindedName', V13, V14, V15} -> V15 end end))(V0))), begin (V24 = ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, [], [], V23))), begin (V25 = ('Idris.Idris2.TTImp.Utils':'un--findAllNames'([], V23))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V37)) end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V41, V42, V43, V44)) end end end end end end end, fun (V45) -> fun (V46) -> V46 end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V49, V50, V51)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V54, V55)) end end}, V9, V25)) of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V63, V64, V65)) end end end end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V67)) end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V71, V72, V73, V74)) end end end end end end end, fun (V75) -> fun (V76) -> V76 end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V79, V80, V81)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V84, V85)) end end}, V11, ((begin (V91 = fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V89, V90)) end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end(fun (V86) -> ('Idris.Idris2.Builtin':'un--fst'(V86)) end))(V24)))) of 1 -> 0; 0 -> 1 end; 0 -> 0 end end end end; _ -> 0 end; _ -> 0 end; _ -> 0 end.
'nested--10365-4771--in--un--needed'(V0, V1, V2) -> case V2 of {'Idris.Syntax.PBracketed', V3, V4} -> 0; {'Idris.Syntax.PRef', V5, V6} -> 0; {'Idris.Syntax.PPair', V7, V8, V9} -> 0; {'Idris.Syntax.PDPair', V10, V11, V12, V13, V14} -> 0; {'Idris.Syntax.PUnit', V15} -> 0; {'Idris.Syntax.PComprehension', V16, V17, V18} -> 0; {'Idris.Syntax.PList', V19, V20, V21} -> 0; {'Idris.Syntax.PSnocList', V22, V23, V24} -> 0; {'Idris.Syntax.PRange', V25, V26, V27, V28} -> 0; {'Idris.Syntax.PRangeStream', V29, V30, V31} -> 0; {'Idris.Syntax.PPrimVal', V32, V33} -> 0; {'Idris.Syntax.PIdiom', V34, V35, V36} -> 0; {'Idris.Syntax.PBang', V37, V38} -> 0; _ -> 1 end.
'nested--12368-7328--in--un--mkIf'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Syntax.PCase', V8, V9, V10} -> case V10 of [E0 | E1] -> (fun (V11, V12) -> case V11 of {'Idris.Syntax.MkPatClause', V13, V14, V15, V16} -> case V14 of {'Idris.Syntax.PRef', V17, V18} -> case V16 of [] -> case V12 of [E2 | E3] -> (fun (V19, V20) -> case V19 of {'Idris.Syntax.MkPatClause', V21, V22, V23, V24} -> case V22 of {'Idris.Syntax.PRef', V25, V26} -> case V24 of [] -> case V20 of [] -> begin (V27 = {'Idris.Syntax.PCase', V8, V9, [{'Idris.Syntax.MkPatClause', V13, {'Idris.Syntax.PRef', V17, V18}, V15, []} | [{'Idris.Syntax.MkPatClause', V21, {'Idris.Syntax.PRef', V25, V26}, V23, []} | []]]}), case case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(case V18 of {'Core.TT.MkKindedName', V28, V29, V30} -> V30 end)), {'Core.Name.UN', {'Core.Name.Basic', <<"True"/utf8>>}})) of 1 -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(case V26 of {'Core.TT.MkKindedName', V31, V32, V33} -> V33 end)), {'Core.Name.UN', {'Core.Name.Basic', <<"False"/utf8>>}})); 0 -> 0 end of 1 -> {'Idris.Syntax.PIfThenElse', V8, V9, V15, V23}; 0 -> V27 end end; _ -> V7 end; _ -> V7 end; _ -> V7 end; _ -> V7 end end(E2, E3)); _ -> V7 end; _ -> V7 end; _ -> V7 end; _ -> V7 end end(E0, E1)); _ -> V7 end; _ -> V7 end.
'nested--12501-8394--in--un--mapPiInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.TT.Explicit'} -> fun (V9) -> {'Prelude.Types.Right', {'Core.TT.Explicit'}} end; {'Core.TT.Implicit'} -> fun (V10) -> {'Prelude.Types.Right', {'Core.TT.Implicit'}} end; {'Core.TT.AutoImplicit'} -> fun (V11) -> {'Prelude.Types.Right', {'Core.TT.AutoImplicit'}} end; {'Core.TT.DefImplicit', V12} -> begin (V13 = ('un--toPTerm'(V7, V6, ('un--startPrec'()), V12))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = fun (V18) -> {'Prelude.Types.Right', {'Core.TT.DefImplicit', V17}} end), V19 end(V14)) end end end end end.
'nested--14905-8882--in--un--cleanNode'(V0, V1, V2) -> case V2 of {'Idris.Syntax.PRef', V3, V4} -> begin (V5 = ('nested--14905-8880--in--un--cleanKindedName'(V0, V1, V4))), ((begin (V21 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end((begin (V13 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> {'Prelude.Types.Right', (V9(V12))} end end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V6) -> {'Idris.Syntax.PRef', V3, V6} end))))(V5)) end; {'Idris.Syntax.POp', V24, V25, V26, V27, V28} -> begin (V29 = ('nested--14905-8880--in--un--cleanKindedName'(V0, V1, V26))), ((begin (V45 = fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V42, V43, V44)) end end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end((begin (V37 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> {'Prelude.Types.Right', (V33(V36))} end end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(fun (V30) -> {'Idris.Syntax.POp', V24, V25, V30, V27, V28} end))))(V29)) end; {'Idris.Syntax.PPrefixOp', V48, V49, V50, V51} -> begin (V52 = ('nested--14905-8880--in--un--cleanKindedName'(V0, V1, V50))), ((begin (V68 = fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V65, V66, V67)) end end end end end), fun (V69) -> fun (V70) -> ((((V68('erased'))('erased'))(V69))(V70)) end end end((begin (V60 = fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> {'Prelude.Types.Right', (V56(V59))} end end end end end), fun (V61) -> fun (V62) -> ((((V60('erased'))('erased'))(V61))(V62)) end end end(fun (V53) -> {'Idris.Syntax.PPrefixOp', V48, V49, V53, V51} end))))(V52)) end; {'Idris.Syntax.PSectionL', V71, V72, V73, V74} -> begin (V75 = ('nested--14905-8880--in--un--cleanKindedName'(V0, V1, V73))), ((begin (V91 = fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V88, V89, V90)) end end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end((begin (V83 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> {'Prelude.Types.Right', (V79(V82))} end end end end end), fun (V84) -> fun (V85) -> ((((V83('erased'))('erased'))(V84))(V85)) end end end(fun (V76) -> {'Idris.Syntax.PSectionL', V71, V72, V76, V74} end))))(V75)) end; {'Idris.Syntax.PSectionR', V94, V95, V96, V97} -> begin (V98 = ('nested--14905-8880--in--un--cleanKindedName'(V0, V1, V97))), ((begin (V114 = fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V111, V112, V113)) end end end end end), fun (V115) -> fun (V116) -> ((((V114('erased'))('erased'))(V115))(V116)) end end end((begin (V106 = fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> {'Prelude.Types.Right', (V102(V105))} end end end end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V99) -> {'Idris.Syntax.PSectionR', V94, V95, V96, V99} end))))(V98)) end; {'Idris.Syntax.PPi', V117, V118, V119, V120, V121, V122} -> case V120 of {'Prelude.Types.Just', V123} -> begin (V124 = ('nested--14905-8881--in--un--cleanBinderName'(V0, V1, V119, V123))), ((begin (V140 = fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V137, V138, V139)) end end end end end), fun (V141) -> fun (V142) -> ((((V140('erased'))('erased'))(V141))(V142)) end end end((begin (V132 = fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> case V129 of {'Prelude.Types.Left', V130} -> {'Prelude.Types.Left', V130}; {'Prelude.Types.Right', V131} -> {'Prelude.Types.Right', (V128(V131))} end end end end end), fun (V133) -> fun (V134) -> ((((V132('erased'))('erased'))(V133))(V134)) end end end(fun (V125) -> {'Idris.Syntax.PPi', V117, V118, V119, V125, V121, V122} end))))(V124)) end; _ -> fun (V143) -> {'Prelude.Types.Right', V2} end end; _ -> fun (V144) -> {'Prelude.Types.Right', V2} end end.
'nested--14905-8879--in--un--cleanName'(V0, V1, V2) -> case V2 of {'Core.Name.PV', V3, V4} -> fun (V5) -> {'Prelude.Types.Right', V3} end; {'Core.Name.MN', V6, V7} -> fun (V8) -> {'Prelude.Types.Right', {'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V6))}} end; {'Core.Name.DN', V9, V10} -> fun (V11) -> {'Prelude.Types.Right', {'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V9))}} end; {'Core.Name.NS', V12, V13} -> begin (V14 = ('nested--14905-8879--in--un--cleanName'(V0, V1, V13))), ((begin (V30 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V27, V28, V29)) end end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end((begin (V22 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> {'Prelude.Types.Right', (V18(V21))} end end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V15) -> {'Core.Name.NS', V12, V15} end))))(V14)) end; {'Core.Name.Nested', V33, V34} -> ('nested--14905-8879--in--un--cleanName'(V0, V1, V34)); {'Core.Name.UN', V35} -> fun (V36) -> {'Prelude.Types.Right', {'Core.Name.UN', V35}} end; _ -> begin (V37 = ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2))), ((begin (V53 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V50, V51, V52)) end end end end end), fun (V54) -> fun (V55) -> ((((V53('erased'))('erased'))(V54))(V55)) end end end((begin (V45 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> {'Prelude.Types.Right', (V41(V44))} end end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V38) -> {'Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V38))} end))))(V37)) end end.
'nested--14905-8880--in--un--cleanKindedName'(V0, V1, V2) -> case V2 of {'Core.TT.MkKindedName', V3, V4, V5} -> begin (V6 = ('nested--14905-8879--in--un--cleanName'(V0, V1, V5))), ((begin (V22 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V19, V20, V21)) end end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end((begin (V14 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> {'Prelude.Types.Right', (V10(V13))} end end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V7) -> {'Core.TT.MkKindedName', V3, V4, V7} end))))(V6)) end end.
'nested--14905-8881--in--un--cleanBinderName'(V0, V1, V2, V3) -> case V2 of {'Core.TT.AutoImplicit'} -> case V3 of {'Core.Name.UN', V4} -> case V4 of {'Core.Name.Basic', V5} -> case V5 of <<"__con"/utf8>> -> fun (V6) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; _ -> begin (V7 = ('nested--14905-8879--in--un--cleanName'(V0, V1, V3))), ((begin (V23 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V20, V21, V22)) end end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end((begin (V15 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> {'Prelude.Types.Right', (V11(V14))} end end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V8) -> {'Prelude.Types.Just', V8} end))))(V7)) end end; _ -> begin (V26 = ('nested--14905-8879--in--un--cleanName'(V0, V1, V3))), ((begin (V42 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V39, V40, V41)) end end end end end), fun (V43) -> fun (V44) -> ((((V42('erased'))('erased'))(V43))(V44)) end end end((begin (V34 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> {'Prelude.Types.Right', (V30(V33))} end end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V27) -> {'Prelude.Types.Just', V27} end))))(V26)) end end; _ -> begin (V45 = ('nested--14905-8879--in--un--cleanName'(V0, V1, V3))), ((begin (V61 = fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V58, V59, V60)) end end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end((begin (V53 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> {'Prelude.Types.Right', (V49(V52))} end end end end end), fun (V54) -> fun (V55) -> ((((V53('erased'))('erased'))(V54))(V55)) end end end(fun (V46) -> {'Prelude.Types.Just', V46} end))))(V45)) end end; _ -> begin (V64 = ('nested--14905-8879--in--un--cleanName'(V0, V1, V3))), ((begin (V80 = fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V77, V78, V79)) end end end end end), fun (V81) -> fun (V82) -> ((((V80('erased'))('erased'))(V81))(V82)) end end end((begin (V72 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> {'Prelude.Types.Right', (V68(V71))} end end end end end), fun (V73) -> fun (V74) -> ((((V72('erased'))('erased'))(V73))(V74)) end end end(fun (V65) -> {'Prelude.Types.Just', V65} end))))(V64)) end end.
'un--unbracketApp'(V0) -> case V0 of {'Idris.Syntax.PBracketed', V1, V2} -> case V2 of {'Idris.Syntax.PApp', V3, V4, V5} -> V2; _ -> V0 end; _ -> V0 end.
'un--unbracket'(V0) -> case V0 of {'Idris.Syntax.PBracketed', V1, V2} -> V2; _ -> V0 end.
'un--tyPrec'() -> 1.
'un--toPTypeDecl'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.MkImpTy', V3, V4, V5, V6} -> begin (V7 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Idris.Syntax.MkPTy', V3, V4, V5, <<""/utf8>>, V11}} end), V13 end(V8)) end end end end end.
'un--toPTermApp'(V0, V1, V2, V3) -> case V2 of {'TTImp.TTImp.IApp', V4, V5, V6} -> begin (V7 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('un--toPTermApp'(V0, V1, V5, [{'Builtin.MkPair', V4, {'Builtin.MkPair', {'Prelude.Types.Nothing'}, V11}} | V3]))), V12 end(V8)) end end end end; {'TTImp.TTImp.INamedApp', V13, V14, V15, V16} -> begin (V17 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V16))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V22 = ('un--toPTermApp'(V0, V1, V14, [{'Builtin.MkPair', V13, {'Builtin.MkPair', {'Prelude.Types.Just', {'Prelude.Types.Just', V15}}, V21}} | V3]))), V22 end(V18)) end end end end; {'TTImp.TTImp.IVar', V23, V24} -> begin (V30 = begin (V25 = V0), fun (V26) -> begin (V29 = (begin (V27 = V25), fun (V28) -> ('erlang':'get'(V27)) end end(V26))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V119 = begin (V70 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(case V24 of {'Core.TT.MkKindedName', V35, V36, V37} -> V37 end, case V34 of {'Core.Context.MkDefs', V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69} -> V38 end))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V118 = begin (V75 = {'TTImp.TTImp.IVar', V23, V24}), case V74 of {'Prelude.Types.Nothing'} -> begin (V76 = ('un--toPTerm'(V0, V1, ('un--appPrec'()), V75))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V81 = ('un--mkApp'(V0, V1, V80, V3))), V81 end(V77)) end end end end; {'Prelude.Types.Just', V82} -> begin (V83 = ('un--toPTerm'(V0, V1, ('un--appPrec'()), V75))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V117 = begin (V88 = ('un--showFullEnv'(V0))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V116 = begin (V115 = case V92 of 1 -> V3; 0 -> ('Idris.Idris2.Data.List':'un--drop'(('Idris.Idris2.Prelude.Types.List':'un--length'(case V82 of {'Core.Context.Context.MkGlobalDef', V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114} -> V101 end)), V3)) end), ('un--mkApp'(V0, V1, V87, V115)) end), V116 end(V89)) end end end end), V117 end(V84)) end end end end end end), V118 end(V71)) end end end end), V119 end(V31)) end end end end; _ -> begin (V120 = ('un--toPTerm'(V0, V1, ('un--appPrec'()), V2))), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V125 = ('un--mkApp'(V0, V1, V124, V3))), V125 end(V121)) end end end end end.
'un--toPTerm'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.IVar', V4, V5} -> begin (V17 = begin (V6 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V16 = case case V10 of {'Core.Options.MkPPOpts', V11, V12, V13, V14} -> V14 end of 1 -> fun (V15) -> {'Prelude.Types.Right', {'Idris.Syntax.PRef', V4, V5}} end; 0 -> ('un--toPRef'(V4, V5)) end), V16 end(V7)) end end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V32 = begin (V25 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"resugar.var"/utf8>>, 70, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Resugaring"/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_RawName'(case V5 of {'Core.TT.MkKindedName', V22, V23, V24} -> V24 end)) | [<<"to"/utf8>> | [('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V21)) | []]]]])) end))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> {'Prelude.Types.Right', V21} end), V31 end(V26)) end end end end), V32 end(V18)) end end end end; {'TTImp.TTImp.IPi', V33, V34, V35, V36, V37, V38} -> case V35 of {'Core.TT.Implicit'} -> begin (V39 = ('un--showImplicits'(V0))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V68 = case V43 of 1 -> begin (V44 = ('un--toPTerm'(V0, V1, ('un--tyPrec'()), V37))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V55 = begin (V49 = ('un--toPTerm'(V0, V1, ('un--tyPrec'()), V38))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V54 = ('un--bracket'(V0, V1, V2, ('un--tyPrec'()), {'Idris.Syntax.PPi', V33, V34, {'Core.TT.Implicit'}, V36, V48, V53}))), V54 end(V50)) end end end end), V55 end(V45)) end end end end; 0 -> case ('nested--12368-6842--in--un--needsBind'(V38, V37, V36, V34, V33, V2, V1, V0, V36)) of 1 -> begin (V56 = ('un--toPTerm'(V0, V1, ('un--tyPrec'()), V37))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V67 = begin (V61 = ('un--toPTerm'(V0, V1, ('un--tyPrec'()), V38))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V66 = ('un--bracket'(V0, V1, V2, ('un--tyPrec'()), {'Idris.Syntax.PPi', V33, V34, {'Core.TT.Implicit'}, V36, V60, V65}))), V66 end(V62)) end end end end), V67 end(V57)) end end end end; 0 -> ('un--toPTerm'(V0, V1, V2, V38)) end end), V68 end(V40)) end end end end; _ -> begin (V69 = ('un--toPTerm'(V0, V1, ('un--appPrec'()), V37))), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V87 = begin (V74 = ('un--toPTerm'(V0, V1, ('un--tyPrec'()), V38))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V86 = begin (V80 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V79) -> ('un--toPTerm'(V0, V1, ('un--argPrec'()), V79)) end, V35))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V85 = ('un--bracket'(V0, V1, V2, ('un--tyPrec'()), {'Idris.Syntax.PPi', V33, V34, V84, V36, V73, V78}))), V85 end(V81)) end end end end), V86 end(V75)) end end end end), V87 end(V70)) end end end end end; {'TTImp.TTImp.ILam', V88, V89, V90, V91, V92, V93} -> begin (V95 = case V91 of {'Prelude.Types.Nothing'} -> {'Core.Name.UN', {'Core.Name.Underscore'}}; {'Prelude.Types.Just', V94} -> V94 end), begin (V96 = ('un--showImplicits'(V0))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V122 = begin (V102 = case V100 of 1 -> ('un--toPTerm'(V0, V1, ('un--tyPrec'()), V92)); 0 -> fun (V101) -> {'Prelude.Types.Right', {'Idris.Syntax.PImplicit', V88}} end end), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V121 = begin (V107 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V93))), fun (V108) -> begin (V109 = (V107(V108))), case V109 of {'Prelude.Types.Left', V110} -> {'Prelude.Types.Left', V110}; {'Prelude.Types.Right', V111} -> (begin (V120 = begin (V113 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V112) -> ('un--toPTerm'(V0, V1, ('un--argPrec'()), V112)) end, V90))), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V119 = begin (V118 = {'Idris.Syntax.PRef', V88, {'Core.TT.MkKindedName', {'Prelude.Types.Just', {'Core.TT.Bound'}}, V95, V95}}), ('un--bracket'(V0, V1, V2, ('un--startPrec'()), {'Idris.Syntax.PLam', V88, V89, V117, V118, V106, V111})) end), V119 end(V114)) end end end end), V120 end(V108)) end end end end), V121 end(V103)) end end end end), V122 end(V97)) end end end end end; {'TTImp.TTImp.ILet', V123, V124, V125, V126, V127, V128, V129} -> begin (V130 = ('un--showImplicits'(V0))), fun (V131) -> begin (V132 = (V130(V131))), case V132 of {'Prelude.Types.Left', V133} -> {'Prelude.Types.Left', V133}; {'Prelude.Types.Right', V134} -> (begin (V155 = begin (V136 = case V134 of 1 -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V127)); 0 -> fun (V135) -> {'Prelude.Types.Right', {'Idris.Syntax.PImplicit', V123}} end end), fun (V137) -> begin (V138 = (V136(V137))), case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> (begin (V154 = begin (V141 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V128))), fun (V142) -> begin (V143 = (V141(V142))), case V143 of {'Prelude.Types.Left', V144} -> {'Prelude.Types.Left', V144}; {'Prelude.Types.Right', V145} -> (begin (V153 = begin (V146 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V129))), fun (V147) -> begin (V148 = (V146(V147))), case V148 of {'Prelude.Types.Left', V149} -> {'Prelude.Types.Left', V149}; {'Prelude.Types.Right', V150} -> (begin (V152 = begin (V151 = {'Idris.Syntax.PRef', V124, {'Core.TT.MkKindedName', {'Prelude.Types.Just', {'Core.TT.Bound'}}, V126, V126}}), ('un--bracket'(V0, V1, V2, ('un--startPrec'()), {'Idris.Syntax.PLet', V123, V125, V151, V140, V145, V150, []})) end), V152 end(V147)) end end end end), V153 end(V142)) end end end end), V154 end(V137)) end end end end), V155 end(V131)) end end end end; {'TTImp.TTImp.ICase', V156, V157, V158, V159} -> case V159 of [E0 | E1] -> (fun (V160, V161) -> case V160 of {'TTImp.TTImp.PatClause', V162, V163, V164} -> case V161 of [] -> begin (V165 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V157))), fun (V166) -> begin (V167 = (V165(V166))), case V167 of {'Prelude.Types.Left', V168} -> {'Prelude.Types.Left', V168}; {'Prelude.Types.Right', V169} -> (begin (V182 = begin (V170 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V163))), fun (V171) -> begin (V172 = (V170(V171))), case V172 of {'Prelude.Types.Left', V173} -> {'Prelude.Types.Left', V173}; {'Prelude.Types.Right', V174} -> (begin (V181 = begin (V175 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V164))), fun (V176) -> begin (V177 = (V175(V176))), case V177 of {'Prelude.Types.Left', V178} -> {'Prelude.Types.Left', V178}; {'Prelude.Types.Right', V179} -> (begin (V180 = ('un--bracket'(V0, V1, V2, ('un--startPrec'()), {'Idris.Syntax.PLet', V156, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V174, {'Idris.Syntax.PImplicit', V156}, V169, V179, []}))), V180 end(V176)) end end end end), V181 end(V171)) end end end end), V182 end(V166)) end end end end; _ -> begin (V183 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V157))), fun (V184) -> begin (V185 = (V183(V184))), case V185 of {'Prelude.Types.Left', V186} -> {'Prelude.Types.Left', V186}; {'Prelude.Types.Right', V187} -> (begin (V195 = begin (V189 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V188) -> ('un--toPClause'(V0, V1, V188)) end, V159, []))), fun (V190) -> begin (V191 = (V189(V190))), case V191 of {'Prelude.Types.Left', V192} -> {'Prelude.Types.Left', V192}; {'Prelude.Types.Right', V193} -> (begin (V194 = ('un--bracket'(V0, V1, V2, ('un--startPrec'()), ('nested--12368-7328--in--un--mkIf'(V159, V158, V157, V156, V2, V1, V0, {'Idris.Syntax.PCase', V156, V187, V193}))))), V194 end(V190)) end end end end), V195 end(V184)) end end end end end; _ -> begin (V196 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V157))), fun (V197) -> begin (V198 = (V196(V197))), case V198 of {'Prelude.Types.Left', V199} -> {'Prelude.Types.Left', V199}; {'Prelude.Types.Right', V200} -> (begin (V208 = begin (V202 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V201) -> ('un--toPClause'(V0, V1, V201)) end, V159, []))), fun (V203) -> begin (V204 = (V202(V203))), case V204 of {'Prelude.Types.Left', V205} -> {'Prelude.Types.Left', V205}; {'Prelude.Types.Right', V206} -> (begin (V207 = ('un--bracket'(V0, V1, V2, ('un--startPrec'()), ('nested--12368-7328--in--un--mkIf'(V159, V158, V157, V156, V2, V1, V0, {'Idris.Syntax.PCase', V156, V200, V206}))))), V207 end(V203)) end end end end), V208 end(V197)) end end end end end end(E0, E1)); _ -> begin (V209 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V157))), fun (V210) -> begin (V211 = (V209(V210))), case V211 of {'Prelude.Types.Left', V212} -> {'Prelude.Types.Left', V212}; {'Prelude.Types.Right', V213} -> (begin (V221 = begin (V215 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V214) -> ('un--toPClause'(V0, V1, V214)) end, V159, []))), fun (V216) -> begin (V217 = (V215(V216))), case V217 of {'Prelude.Types.Left', V218} -> {'Prelude.Types.Left', V218}; {'Prelude.Types.Right', V219} -> (begin (V220 = ('un--bracket'(V0, V1, V2, ('un--startPrec'()), ('nested--12368-7328--in--un--mkIf'(V159, V158, V157, V156, V2, V1, V0, {'Idris.Syntax.PCase', V156, V213, V219}))))), V220 end(V216)) end end end end), V221 end(V210)) end end end end end; {'TTImp.TTImp.ILocal', V222, V223, V224} -> begin (V226 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V225) -> ('un--toPDecl'(V0, V1, V225)) end, V223, []))), fun (V227) -> begin (V228 = (V226(V227))), case V228 of {'Prelude.Types.Left', V229} -> {'Prelude.Types.Left', V229}; {'Prelude.Types.Right', V230} -> (begin (V237 = begin (V231 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V224))), fun (V232) -> begin (V233 = (V231(V232))), case V233 of {'Prelude.Types.Left', V234} -> {'Prelude.Types.Left', V234}; {'Prelude.Types.Right', V235} -> (begin (V236 = ('un--bracket'(V0, V1, V2, ('un--startPrec'()), {'Idris.Syntax.PLocal', V222, ('Idris.Idris2.Data.List':'un--catMaybes'(V230)), V235}))), V236 end(V232)) end end end end), V237 end(V227)) end end end end; {'TTImp.TTImp.ICaseLocal', V238, V239, V240, V241, V242} -> ('un--toPTerm'(V0, V1, V2, V242)); {'TTImp.TTImp.IUpdate', V243, V244, V245} -> begin (V247 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V246) -> ('un--toPFieldUpdate'(V0, V1, V246)) end, V244, []))), fun (V248) -> begin (V249 = (V247(V248))), case V249 of {'Prelude.Types.Left', V250} -> {'Prelude.Types.Left', V250}; {'Prelude.Types.Right', V251} -> (begin (V258 = begin (V252 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V245))), fun (V253) -> begin (V254 = (V252(V253))), case V254 of {'Prelude.Types.Left', V255} -> {'Prelude.Types.Left', V255}; {'Prelude.Types.Right', V256} -> (begin (V257 = ('un--bracket'(V0, V1, V2, ('un--startPrec'()), {'Idris.Syntax.PApp', V243, {'Idris.Syntax.PUpdate', V243, V251}, V256}))), V257 end(V253)) end end end end), V258 end(V248)) end end end end; {'TTImp.TTImp.IApp', V259, V260, V261} -> begin (V262 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V261))), fun (V263) -> begin (V264 = (V262(V263))), case V264 of {'Prelude.Types.Left', V265} -> {'Prelude.Types.Left', V265}; {'Prelude.Types.Right', V266} -> (begin (V273 = begin (V267 = ('un--toPTermApp'(V0, V1, V260, [{'Builtin.MkPair', V259, {'Builtin.MkPair', {'Prelude.Types.Nothing'}, V266}} | []]))), fun (V268) -> begin (V269 = (V267(V268))), case V269 of {'Prelude.Types.Left', V270} -> {'Prelude.Types.Left', V270}; {'Prelude.Types.Right', V271} -> (begin (V272 = ('un--bracket'(V0, V1, V2, ('un--appPrec'()), V271))), V272 end(V268)) end end end end), V273 end(V263)) end end end end; {'TTImp.TTImp.IAutoApp', V274, V275, V276} -> begin (V277 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V276))), fun (V278) -> begin (V279 = (V277(V278))), case V279 of {'Prelude.Types.Left', V280} -> {'Prelude.Types.Left', V280}; {'Prelude.Types.Right', V281} -> (begin (V288 = begin (V282 = ('un--toPTermApp'(V0, V1, V275, [{'Builtin.MkPair', V274, {'Builtin.MkPair', {'Prelude.Types.Just', {'Prelude.Types.Nothing'}}, V281}} | []]))), fun (V283) -> begin (V284 = (V282(V283))), case V284 of {'Prelude.Types.Left', V285} -> {'Prelude.Types.Left', V285}; {'Prelude.Types.Right', V286} -> (begin (V287 = ('un--bracket'(V0, V1, V2, ('un--appPrec'()), V286))), V287 end(V283)) end end end end), V288 end(V278)) end end end end; {'TTImp.TTImp.IWithApp', V289, V290, V291} -> begin (V292 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V291))), fun (V293) -> begin (V294 = (V292(V293))), case V294 of {'Prelude.Types.Left', V295} -> {'Prelude.Types.Left', V295}; {'Prelude.Types.Right', V296} -> (begin (V303 = begin (V297 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V290))), fun (V298) -> begin (V299 = (V297(V298))), case V299 of {'Prelude.Types.Left', V300} -> {'Prelude.Types.Left', V300}; {'Prelude.Types.Right', V301} -> (begin (V302 = ('un--bracket'(V0, V1, V2, ('un--appPrec'()), {'Idris.Syntax.PWithApp', V289, V301, V296}))), V302 end(V298)) end end end end), V303 end(V293)) end end end end; {'TTImp.TTImp.INamedApp', V304, V305, V306, V307} -> begin (V308 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V307))), fun (V309) -> begin (V310 = (V308(V309))), case V310 of {'Prelude.Types.Left', V311} -> {'Prelude.Types.Left', V311}; {'Prelude.Types.Right', V312} -> (begin (V325 = begin (V313 = ('un--toPTermApp'(V0, V1, V305, [{'Builtin.MkPair', V304, {'Builtin.MkPair', {'Prelude.Types.Just', {'Prelude.Types.Just', V306}}, V312}} | []]))), fun (V314) -> begin (V315 = (V313(V314))), case V315 of {'Prelude.Types.Left', V316} -> {'Prelude.Types.Left', V316}; {'Prelude.Types.Right', V317} -> (begin (V324 = begin (V318 = ('un--showImplicits'(V0))), fun (V319) -> begin (V320 = (V318(V319))), case V320 of {'Prelude.Types.Left', V321} -> {'Prelude.Types.Left', V321}; {'Prelude.Types.Right', V322} -> (begin (V323 = case V322 of 1 -> ('un--bracket'(V0, V1, V2, ('un--startPrec'()), V317)); 0 -> ('un--mkOp'(V1, V317)) end), V323 end(V319)) end end end end), V324 end(V314)) end end end end), V325 end(V309)) end end end end; {'TTImp.TTImp.ISearch', V326, V327} -> fun (V328) -> {'Prelude.Types.Right', {'Idris.Syntax.PSearch', V326, V327}} end; {'TTImp.TTImp.IAlternative', V329, V330, V331} -> fun (V332) -> {'Prelude.Types.Right', {'Idris.Syntax.PImplicit', V329}} end; {'TTImp.TTImp.IRewrite', V333, V334, V335} -> begin (V336 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V334))), fun (V337) -> begin (V338 = (V336(V337))), case V338 of {'Prelude.Types.Left', V339} -> {'Prelude.Types.Left', V339}; {'Prelude.Types.Right', V340} -> (begin (V348 = begin (V341 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V335))), fun (V342) -> begin (V343 = (V341(V342))), case V343 of {'Prelude.Types.Left', V344} -> {'Prelude.Types.Left', V344}; {'Prelude.Types.Right', V345} -> (begin (V347 = fun (V346) -> {'Prelude.Types.Right', {'Idris.Syntax.PRewrite', V333, V340, V345}} end), V347 end(V342)) end end end end), V348 end(V337)) end end end end; {'TTImp.TTImp.ICoerced', V349, V350} -> ('un--toPTerm'(V0, V1, V2, V350)); {'TTImp.TTImp.IPrimVal', V351, V352} -> fun (V353) -> {'Prelude.Types.Right', {'Idris.Syntax.PPrimVal', V351, V352}} end; {'TTImp.TTImp.IHole', V354, V355} -> fun (V356) -> {'Prelude.Types.Right', {'Idris.Syntax.PHole', V354, 0, V355}} end; {'TTImp.TTImp.IType', V357} -> fun (V358) -> {'Prelude.Types.Right', {'Idris.Syntax.PType', V357}} end; {'TTImp.TTImp.IBindVar', V359, V360} -> begin (V361 = {'Core.Name.UN', {'Core.Name.Basic', V360}}), fun (V362) -> {'Prelude.Types.Right', {'Idris.Syntax.PRef', V359, {'Core.TT.MkKindedName', {'Prelude.Types.Just', {'Core.TT.Bound'}}, V361, V361}}} end end; {'TTImp.TTImp.IBindHere', V363, V364, V365} -> ('un--toPTerm'(V0, V1, V2, V365)); {'TTImp.TTImp.IAs', V366, V367, V368, V369, V370} -> begin (V371 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V370))), fun (V372) -> begin (V373 = (V371(V372))), case V373 of {'Prelude.Types.Left', V374} -> {'Prelude.Types.Left', V374}; {'Prelude.Types.Right', V375} -> (begin (V377 = fun (V376) -> {'Prelude.Types.Right', {'Idris.Syntax.PAs', V366, V367, V369, V375}} end), V377 end(V372)) end end end end; {'TTImp.TTImp.IMustUnify', V378, V379, V380} -> begin (V381 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V380))), fun (V382) -> begin (V383 = (V381(V382))), case V383 of {'Prelude.Types.Left', V384} -> {'Prelude.Types.Left', V384}; {'Prelude.Types.Right', V385} -> (begin (V387 = fun (V386) -> {'Prelude.Types.Right', {'Idris.Syntax.PDotted', V378, V385}} end), V387 end(V382)) end end end end; {'TTImp.TTImp.IDelayed', V388, V389, V390} -> begin (V391 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V390))), fun (V392) -> begin (V393 = (V391(V392))), case V393 of {'Prelude.Types.Left', V394} -> {'Prelude.Types.Left', V394}; {'Prelude.Types.Right', V395} -> (begin (V397 = fun (V396) -> {'Prelude.Types.Right', {'Idris.Syntax.PDelayed', V388, V389, V395}} end), V397 end(V392)) end end end end; {'TTImp.TTImp.IDelay', V398, V399} -> begin (V400 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V399))), fun (V401) -> begin (V402 = (V400(V401))), case V402 of {'Prelude.Types.Left', V403} -> {'Prelude.Types.Left', V403}; {'Prelude.Types.Right', V404} -> (begin (V406 = fun (V405) -> {'Prelude.Types.Right', {'Idris.Syntax.PDelay', V398, V404}} end), V406 end(V401)) end end end end; {'TTImp.TTImp.IForce', V407, V408} -> begin (V409 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V408))), fun (V410) -> begin (V411 = (V409(V410))), case V411 of {'Prelude.Types.Left', V412} -> {'Prelude.Types.Left', V412}; {'Prelude.Types.Right', V413} -> (begin (V415 = fun (V414) -> {'Prelude.Types.Right', {'Idris.Syntax.PForce', V407, V413}} end), V415 end(V410)) end end end end; {'TTImp.TTImp.IQuote', V416, V417} -> begin (V418 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V417))), fun (V419) -> begin (V420 = (V418(V419))), case V420 of {'Prelude.Types.Left', V421} -> {'Prelude.Types.Left', V421}; {'Prelude.Types.Right', V422} -> (begin (V424 = fun (V423) -> {'Prelude.Types.Right', {'Idris.Syntax.PQuote', V416, V422}} end), V424 end(V419)) end end end end; {'TTImp.TTImp.IQuoteName', V425, V426} -> fun (V427) -> {'Prelude.Types.Right', {'Idris.Syntax.PQuoteName', V425, V426}} end; {'TTImp.TTImp.IQuoteDecl', V428, V429} -> begin (V431 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V430) -> ('un--toPDecl'(V0, V1, V430)) end, V429, []))), fun (V432) -> begin (V433 = (V431(V432))), case V433 of {'Prelude.Types.Left', V434} -> {'Prelude.Types.Left', V434}; {'Prelude.Types.Right', V435} -> (begin (V437 = fun (V436) -> {'Prelude.Types.Right', {'Idris.Syntax.PQuoteDecl', V428, ('Idris.Idris2.Data.List':'un--catMaybes'(V435))}} end), V437 end(V432)) end end end end; {'TTImp.TTImp.IUnquote', V438, V439} -> begin (V440 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V439))), fun (V441) -> begin (V442 = (V440(V441))), case V442 of {'Prelude.Types.Left', V443} -> {'Prelude.Types.Left', V443}; {'Prelude.Types.Right', V444} -> (begin (V446 = fun (V445) -> {'Prelude.Types.Right', {'Idris.Syntax.PUnquote', V438, V444}} end), V446 end(V441)) end end end end; {'TTImp.TTImp.IRunElab', V447, V448} -> begin (V449 = ('un--toPTerm'(V0, V1, ('un--argPrec'()), V448))), fun (V450) -> begin (V451 = (V449(V450))), case V451 of {'Prelude.Types.Left', V452} -> {'Prelude.Types.Left', V452}; {'Prelude.Types.Right', V453} -> (begin (V455 = fun (V454) -> {'Prelude.Types.Right', {'Idris.Syntax.PRunElab', V447, V453}} end), V455 end(V450)) end end end end; {'TTImp.TTImp.IUnifyLog', V456, V457, V458} -> ('un--toPTerm'(V0, V1, V2, V458)); {'TTImp.TTImp.Implicit', V459, V460} -> fun (V461) -> case V460 of 1 -> {'Prelude.Types.Right', {'Idris.Syntax.PImplicit', V459}}; 0 -> {'Prelude.Types.Right', {'Idris.Syntax.PInfer', V459}} end end; {'TTImp.TTImp.IWithUnambigNames', V462, V463, V464} -> begin (V465 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V464))), ((begin (V481 = fun (V476) -> fun (V477) -> fun (V478) -> fun (V479) -> fun (V480) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V478, V479, V480)) end end end end end), fun (V482) -> fun (V483) -> ((((V481('erased'))('erased'))(V482))(V483)) end end end((begin (V473 = fun (V467) -> fun (V468) -> fun (V469) -> fun (V470) -> case V470 of {'Prelude.Types.Left', V471} -> {'Prelude.Types.Left', V471}; {'Prelude.Types.Right', V472} -> {'Prelude.Types.Right', (V469(V472))} end end end end end), fun (V474) -> fun (V475) -> ((((V473('erased'))('erased'))(V474))(V475)) end end end(fun (V466) -> {'Idris.Syntax.PWithUnambigNames', V462, V463, V466} end))))(V465)) end end.
'un--toPRef'(V0, V1) -> case V1 of {'Core.TT.MkKindedName', V2, V3, V4} -> ('case--toPRef-6496'(V4, V3, V2, V0, ('Idris.Idris2.Core.Name':'un--dropNS'(V4)))) end.
'un--toPRecord'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.MkImpRecord', V3, V4, V5, V6, V7, V8} -> begin (V29 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> begin (V16 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V15))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V28 = begin (V21 = ('nested--12501-8394--in--un--mapPiInfo'(V8, V7, V6, V5, V4, V3, V1, V0, V14))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', {'Builtin.MkPair', V10, {'Builtin.MkPair', V12, {'Builtin.MkPair', V25, V20}}}} end), V27 end(V22)) end end end end), V28 end(V17)) end end end end end end end end, V5, []))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V42 = begin (V35 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V34) -> ('un--toPField'(V0, V1, V34)) end, V8, []))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V41 = fun (V40) -> {'Prelude.Types.Right', {'Builtin.MkPair', V4, {'Builtin.MkPair', V33, {'Builtin.MkPair', V6, {'Builtin.MkPair', {'Prelude.Types.Just', V7}, V39}}}}} end), V41 end(V36)) end end end end), V42 end(V30)) end end end end end.
'un--toPFnOpt'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.ForeignFn', V3} -> begin (V5 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V4)) end, V3, []))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', {'Idris.Syntax.PForeign', V9}} end), V11 end(V6)) end end end end; _ -> fun (V12) -> {'Prelude.Types.Right', {'Idris.Syntax.IFnOpt', V2}} end end.
'un--toPFieldUpdate'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.ISetField', V3, V4} -> begin (V5 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', {'Idris.Syntax.PSetField', V3, V9}} end), V11 end(V6)) end end end end; {'TTImp.TTImp.ISetFieldApp', V12, V13} -> begin (V14 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V13))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', {'Idris.Syntax.PSetFieldApp', V12, V18}} end), V20 end(V15)) end end end end end.
'un--toPField'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.MkIField', V3, V4, V5, V6, V7} -> begin (V8 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V21 = begin (V14 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V13) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V13)) end, V5))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', {'Idris.Syntax.MkField', V3, <<""/utf8>>, V4, V18, V6, V12}} end), V20 end(V15)) end end end end), V21 end(V9)) end end end end end.
'un--toPDecl'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.IClaim', V3, V4, V5, V6, V7} -> begin (V9 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V8) -> ('un--toPFnOpt'(V0, V1, V8)) end, V6, []))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V21 = begin (V14 = ('un--toPTypeDecl'(V0, V1, V7))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Idris.Syntax.PClaim', V3, V4, V5, V13, V18}}} end), V20 end(V15)) end end end end), V21 end(V10)) end end end end; {'TTImp.TTImp.IData', V22, V23, V24, V25} -> begin (V26 = ('un--toPData'(V0, V1, V25))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Idris.Syntax.PData', V22, <<""/utf8>>, V23, V24, V30}}} end), V32 end(V27)) end end end end; {'TTImp.TTImp.IDef', V33, V34, V35} -> begin (V37 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V36) -> ('un--toPClause'(V0, V1, V36)) end, V35, []))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V43 = fun (V42) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Idris.Syntax.PDef', V33, V41}}} end), V43 end(V38)) end end end end; {'TTImp.TTImp.IParameters', V44, V45, V46} -> begin (V48 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V47) -> ('un--toPDecl'(V0, V1, V47)) end, V46, []))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V81 = begin (V74 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V53) -> case V53 of {'Builtin.MkPair', V54, V55} -> case V55 of {'Builtin.MkPair', V56, V57} -> case V57 of {'Builtin.MkPair', V58, V59} -> begin (V61 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V60) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V60)) end, V58))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V73 = begin (V66 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V59))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V72 = fun (V71) -> {'Prelude.Types.Right', {'Builtin.MkPair', V54, {'Builtin.MkPair', V56, {'Builtin.MkPair', V65, V70}}}} end), V72 end(V67)) end end end end), V73 end(V62)) end end end end end end end end, V45, []))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V80 = fun (V79) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Idris.Syntax.PParameters', V44, V78, ('Idris.Idris2.Data.List':'un--catMaybes'(V52))}}} end), V80 end(V75)) end end end end), V81 end(V49)) end end end end; {'TTImp.TTImp.IRecord', V82, V83, V84, V85, V86} -> begin (V87 = ('un--toPRecord'(V0, V1, V86))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V101 = case V91 of {'Builtin.MkPair', V92, V93} -> case V93 of {'Builtin.MkPair', V94, V95} -> fun (V96) -> case V95 of {'Builtin.MkPair', V97, V98} -> case V98 of {'Builtin.MkPair', V99, V100} -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Idris.Syntax.PRecord', V82, <<""/utf8>>, V84, V85, {'Idris.Syntax.MkPRecord', V92, V94, V97, V99, V100}}}} end end end end end), V101 end(V88)) end end end end; {'TTImp.TTImp.IFail', V102, V103, V104} -> begin (V106 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V105) -> ('un--toPDecl'(V0, V1, V105)) end, V104, []))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V112 = fun (V111) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Idris.Syntax.PFail', V102, V103, ('Idris.Idris2.Data.List':'un--catMaybes'(V110))}}} end), V112 end(V107)) end end end end; {'TTImp.TTImp.INamespace', V113, V114, V115} -> begin (V117 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V116) -> ('un--toPDecl'(V0, V1, V116)) end, V115, []))), fun (V118) -> begin (V119 = (V117(V118))), case V119 of {'Prelude.Types.Left', V120} -> {'Prelude.Types.Left', V120}; {'Prelude.Types.Right', V121} -> (begin (V123 = fun (V122) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Idris.Syntax.PNamespace', V113, V114, ('Idris.Idris2.Data.List':'un--catMaybes'(V121))}}} end), V123 end(V118)) end end end end; {'TTImp.TTImp.ITransform', V124, V125, V126, V127} -> begin (V128 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V126))), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V140 = begin (V133 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V127))), fun (V134) -> begin (V135 = (V133(V134))), case V135 of {'Prelude.Types.Left', V136} -> {'Prelude.Types.Left', V136}; {'Prelude.Types.Right', V137} -> (begin (V139 = fun (V138) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Idris.Syntax.PTransform', V124, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V125)), V132, V137}}} end), V139 end(V134)) end end end end), V140 end(V129)) end end end end; {'TTImp.TTImp.IRunElabDecl', V141, V142} -> begin (V143 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V142))), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V149 = fun (V148) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Idris.Syntax.PRunElabDecl', V141, V147}}} end), V149 end(V144)) end end end end; {'TTImp.TTImp.IPragma', V150, V151, V152} -> fun (V153) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'TTImp.TTImp.ILog', V154} -> fun (V155) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'TTImp.TTImp.IBuiltin', V156, V157, V158} -> fun (V159) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Idris.Syntax.PBuiltin', V156, V157, V158}}} end end.
'un--toPData'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.MkImpData', V3, V4, V5, V6, V7} -> begin (V8 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V5))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V21 = begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V13) -> ('un--toPTypeDecl'(V0, V1, V13)) end, V7, []))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', {'Idris.Syntax.MkPData', V3, V4, V12, V6, V18}} end), V20 end(V15)) end end end end), V21 end(V9)) end end end end; {'TTImp.TTImp.MkImpLater', V22, V23, V24} -> begin (V25 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V24))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> {'Prelude.Types.Right', {'Idris.Syntax.MkPLater', V22, V23, V29}} end), V31 end(V26)) end end end end end.
'un--toPClause'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.PatClause', V3, V4, V5} -> begin (V6 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V18 = begin (V11 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V5))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Idris.Syntax.MkPatClause', V3, V10, V15, []}} end), V17 end(V12)) end end end end), V18 end(V7)) end end end end; {'TTImp.TTImp.WithClause', V19, V20, V21, V22, V23, V24, V25} -> begin (V26 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V20))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V45 = begin (V31 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V22))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V44 = begin (V37 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V36) -> ('un--toPClause'(V0, V1, V36)) end, V25, []))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V43 = fun (V42) -> {'Prelude.Types.Right', {'Idris.Syntax.MkWithClause', V19, V30, {'Data.List1.:::', {'Idris.Syntax.MkPWithProblem', V21, V35, V23}, []}, V24, V41}} end), V43 end(V38)) end end end end), V44 end(V32)) end end end end), V45 end(V27)) end end end end; {'TTImp.TTImp.ImpossibleClause', V46, V47} -> begin (V48 = ('un--toPTerm'(V0, V1, ('un--startPrec'()), V47))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V54 = fun (V53) -> {'Prelude.Types.Right', {'Idris.Syntax.MkImpossible', V46, V52}} end), V54 end(V49)) end end end end end.
'un--toCleanPTerm'(V0, V1, V2, V3) -> begin (V4 = ('un--toPTerm'(V0, V1, V2, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V9 = ('un--cleanPTerm'(V0, V8))), V9 end(V5)) end end end end.
'un--sugarName'(V0) -> case V0 of {'Core.Name.MN', V1, V2} -> <<<<"(implicit) "/utf8>>/binary, V1/binary>>; {'Core.Name.PV', V3, V4} -> ('un--sugarName'(V3)); {'Core.Name.DN', V5, V6} -> V5; _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)) end.
'un--sugarAppM'(V0) -> case V0 of {'Idris.Syntax.PApp', V1, V2, V3} -> case V2 of {'Idris.Syntax.PApp', V4, V5, V6} -> case V5 of {'Idris.Syntax.PApp', V7, V8, V9} -> case V8 of {'Idris.Syntax.PRef', V10, V11} -> case V11 of {'Core.TT.MkKindedName', V12, V13, V14} -> case V13 of {'Core.Name.NS', V15, V16} -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V16)) of <<"rangeFromThenTo"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PRange', V1, ('un--unbracket'(V9)), {'Prelude.Types.Just', ('un--unbracket'(V6))}, ('un--unbracket'(V3))}}; _ -> {'Prelude.Types.Nothing'} end; _ -> case ('un--extractNat'(0, V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractInteger'(V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractDouble'(V0)) of {'Prelude.Types.Nothing'} -> case V0 of {'Idris.Syntax.PRef', V17, V18} -> case V18 of {'Core.TT.MkKindedName', V19, V20, V21} -> case V20 of {'Core.Name.NS', V22, V23} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V22)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V23)) of <<"Unit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V17}}; <<"MkUnit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V17}}; _ -> {'Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V23)) of <<"Nil"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PList', V17, V17, []}}; <<"Lin"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PSnocList', V17, V17, {'Prelude.Basics.Lin'}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PApp', V24, V25, V26} -> case V25 of {'Idris.Syntax.PRef', V27, V28} -> case V28 of {'Core.TT.MkKindedName', V29, V30, V31} -> case V30 of {'Core.Name.NS', V32, V33} -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V33)) of <<"rangeFrom"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PRangeStream', V24, ('un--unbracket'(V26)), {'Prelude.Types.Nothing'}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Prelude.Types.Just', V34} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.Db', V34}}} end; {'Prelude.Types.Just', V35} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V35}}} end; {'Prelude.Types.Just', V36} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V36}}} end end; _ -> case ('un--extractNat'(0, V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractInteger'(V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractDouble'(V0)) of {'Prelude.Types.Nothing'} -> case V0 of {'Idris.Syntax.PRef', V37, V38} -> case V38 of {'Core.TT.MkKindedName', V39, V40, V41} -> case V40 of {'Core.Name.NS', V42, V43} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V42)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V43)) of <<"Unit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V37}}; <<"MkUnit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V37}}; _ -> {'Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V43)) of <<"Nil"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PList', V37, V37, []}}; <<"Lin"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PSnocList', V37, V37, {'Prelude.Basics.Lin'}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PApp', V44, V45, V46} -> case V45 of {'Idris.Syntax.PRef', V47, V48} -> case V48 of {'Core.TT.MkKindedName', V49, V50, V51} -> case V50 of {'Core.Name.NS', V52, V53} -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V53)) of <<"rangeFrom"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PRangeStream', V44, ('un--unbracket'(V46)), {'Prelude.Types.Nothing'}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Prelude.Types.Just', V54} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.Db', V54}}} end; {'Prelude.Types.Just', V55} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V55}}} end; {'Prelude.Types.Just', V56} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V56}}} end end; _ -> case ('un--extractNat'(0, V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractInteger'(V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractDouble'(V0)) of {'Prelude.Types.Nothing'} -> case V0 of {'Idris.Syntax.PRef', V57, V58} -> case V58 of {'Core.TT.MkKindedName', V59, V60, V61} -> case V60 of {'Core.Name.NS', V62, V63} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V62)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V63)) of <<"Unit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V57}}; <<"MkUnit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V57}}; _ -> {'Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V63)) of <<"Nil"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PList', V57, V57, []}}; <<"Lin"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PSnocList', V57, V57, {'Prelude.Basics.Lin'}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PApp', V64, V65, V66} -> case V65 of {'Idris.Syntax.PRef', V67, V68} -> case V68 of {'Core.TT.MkKindedName', V69, V70, V71} -> case V70 of {'Core.Name.NS', V72, V73} -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V73)) of <<"rangeFrom"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PRangeStream', V64, ('un--unbracket'(V66)), {'Prelude.Types.Nothing'}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Prelude.Types.Just', V74} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.Db', V74}}} end; {'Prelude.Types.Just', V75} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V75}}} end; {'Prelude.Types.Just', V76} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V76}}} end end; {'Idris.Syntax.PRef', V77, V78} -> case V78 of {'Core.TT.MkKindedName', V79, V80, V81} -> case V80 of {'Core.Name.NS', V82, V83} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V82)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V83)) of <<"Pair"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PPair', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))}}; <<"MkPair"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PPair', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))}}; <<"Equal"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PEq', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))}}; <<"==="/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PEq', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))}}; <<"~=~"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PEq', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))}}; _ -> {'Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--dpairNS'()), V82)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V83)) of <<"DPair"/utf8>> -> case ('un--unbracket'(V3)) of {'Idris.Syntax.PLam', V84, V85, V86, V87, V88, V89} -> {'Prelude.Types.Just', {'Idris.Syntax.PDPair', V1, V77, V87, ('un--unbracket'(V6)), ('un--unbracket'(V89))}}; _ -> {'Prelude.Types.Nothing'} end; <<"MkDPair"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PDPair', V1, V77, ('un--unbracket'(V6)), {'Idris.Syntax.PImplicit', V77}, ('un--unbracket'(V3))}}; _ -> {'Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V83)) of <<"::"/utf8>> -> case ('un--sugarApp'(('un--unbracket'(V3)))) of {'Idris.Syntax.PList', V90, V91, V92} -> {'Prelude.Types.Just', {'Idris.Syntax.PList', V90, V91, [{'Builtin.MkPair', V77, ('un--unbracketApp'(V6))} | V92]}}; _ -> {'Prelude.Types.Nothing'} end; <<":<"/utf8>> -> case ('un--sugarApp'(('un--unbracket'(V6)))) of {'Idris.Syntax.PSnocList', V93, V94, V95} -> {'Prelude.Types.Just', {'Idris.Syntax.PSnocList', V93, V94, {'Prelude.Basics.:<', V95, {'Builtin.MkPair', V77, ('un--unbracketApp'(V3))}}}}; _ -> {'Prelude.Types.Nothing'} end; <<"rangeFromTo"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PRange', V1, ('un--unbracket'(V6)), {'Prelude.Types.Nothing'}, ('un--unbracket'(V3))}}; <<"rangeFromThen"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PRangeStream', V1, ('un--unbracket'(V6)), {'Prelude.Types.Just', ('un--unbracket'(V3))}}}; _ -> {'Prelude.Types.Nothing'} end end end; _ -> case ('un--extractNat'(0, V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractInteger'(V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractDouble'(V0)) of {'Prelude.Types.Nothing'} -> case V0 of {'Idris.Syntax.PRef', V96, V97} -> case V97 of {'Core.TT.MkKindedName', V98, V99, V100} -> case V99 of {'Core.Name.NS', V101, V102} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V101)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V102)) of <<"Unit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V96}}; <<"MkUnit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V96}}; _ -> {'Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V102)) of <<"Nil"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PList', V96, V96, []}}; <<"Lin"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PSnocList', V96, V96, {'Prelude.Basics.Lin'}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PApp', V103, V104, V105} -> case V104 of {'Idris.Syntax.PRef', V106, V107} -> case V107 of {'Core.TT.MkKindedName', V108, V109, V110} -> case V109 of {'Core.Name.NS', V111, V112} -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V112)) of <<"rangeFrom"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PRangeStream', V103, ('un--unbracket'(V105)), {'Prelude.Types.Nothing'}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Prelude.Types.Just', V113} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.Db', V113}}} end; {'Prelude.Types.Just', V114} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V114}}} end; {'Prelude.Types.Just', V115} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V115}}} end end; _ -> case ('un--extractNat'(0, V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractInteger'(V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractDouble'(V0)) of {'Prelude.Types.Nothing'} -> case V0 of {'Idris.Syntax.PRef', V116, V117} -> case V117 of {'Core.TT.MkKindedName', V118, V119, V120} -> case V119 of {'Core.Name.NS', V121, V122} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V121)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V122)) of <<"Unit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V116}}; <<"MkUnit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V116}}; _ -> {'Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V122)) of <<"Nil"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PList', V116, V116, []}}; <<"Lin"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PSnocList', V116, V116, {'Prelude.Basics.Lin'}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PApp', V123, V124, V125} -> case V124 of {'Idris.Syntax.PRef', V126, V127} -> case V127 of {'Core.TT.MkKindedName', V128, V129, V130} -> case V129 of {'Core.Name.NS', V131, V132} -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V132)) of <<"rangeFrom"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PRangeStream', V123, ('un--unbracket'(V125)), {'Prelude.Types.Nothing'}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Prelude.Types.Just', V133} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.Db', V133}}} end; {'Prelude.Types.Just', V134} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V134}}} end; {'Prelude.Types.Just', V135} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V135}}} end end; _ -> case ('un--extractNat'(0, V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractInteger'(V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractDouble'(V0)) of {'Prelude.Types.Nothing'} -> case V0 of {'Idris.Syntax.PRef', V136, V137} -> case V137 of {'Core.TT.MkKindedName', V138, V139, V140} -> case V139 of {'Core.Name.NS', V141, V142} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V141)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V142)) of <<"Unit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V136}}; <<"MkUnit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V136}}; _ -> {'Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V142)) of <<"Nil"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PList', V136, V136, []}}; <<"Lin"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PSnocList', V136, V136, {'Prelude.Basics.Lin'}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PApp', V143, V144, V145} -> case V144 of {'Idris.Syntax.PRef', V146, V147} -> case V147 of {'Core.TT.MkKindedName', V148, V149, V150} -> case V149 of {'Core.Name.NS', V151, V152} -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V152)) of <<"rangeFrom"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PRangeStream', V143, ('un--unbracket'(V145)), {'Prelude.Types.Nothing'}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Prelude.Types.Just', V153} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.Db', V153}}} end; {'Prelude.Types.Just', V154} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V154}}} end; {'Prelude.Types.Just', V155} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V155}}} end end; _ -> case ('un--extractNat'(0, V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractInteger'(V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractDouble'(V0)) of {'Prelude.Types.Nothing'} -> case V0 of {'Idris.Syntax.PRef', V156, V157} -> case V157 of {'Core.TT.MkKindedName', V158, V159, V160} -> case V159 of {'Core.Name.NS', V161, V162} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V161)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V162)) of <<"Unit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V156}}; <<"MkUnit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V156}}; _ -> {'Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V162)) of <<"Nil"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PList', V156, V156, []}}; <<"Lin"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PSnocList', V156, V156, {'Prelude.Basics.Lin'}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PApp', V163, V164, V165} -> case V164 of {'Idris.Syntax.PRef', V166, V167} -> case V167 of {'Core.TT.MkKindedName', V168, V169, V170} -> case V169 of {'Core.Name.NS', V171, V172} -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V172)) of <<"rangeFrom"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PRangeStream', V163, ('un--unbracket'(V165)), {'Prelude.Types.Nothing'}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Prelude.Types.Just', V173} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.Db', V173}}} end; {'Prelude.Types.Just', V174} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V174}}} end; {'Prelude.Types.Just', V175} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V175}}} end end; _ -> case ('un--extractNat'(0, V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractInteger'(V0)) of {'Prelude.Types.Nothing'} -> case ('un--extractDouble'(V0)) of {'Prelude.Types.Nothing'} -> case V0 of {'Idris.Syntax.PRef', V176, V177} -> case V177 of {'Core.TT.MkKindedName', V178, V179, V180} -> case V179 of {'Core.Name.NS', V181, V182} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V181)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V182)) of <<"Unit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V176}}; <<"MkUnit"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PUnit', V176}}; _ -> {'Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V182)) of <<"Nil"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PList', V176, V176, []}}; <<"Lin"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PSnocList', V176, V176, {'Prelude.Basics.Lin'}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PApp', V183, V184, V185} -> case V184 of {'Idris.Syntax.PRef', V186, V187} -> case V187 of {'Core.TT.MkKindedName', V188, V189, V190} -> case V189 of {'Core.Name.NS', V191, V192} -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V192)) of <<"rangeFrom"/utf8>> -> {'Prelude.Types.Just', {'Idris.Syntax.PRangeStream', V183, ('un--unbracket'(V185)), {'Prelude.Types.Nothing'}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Prelude.Types.Just', V193} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.Db', V193}}} end; {'Prelude.Types.Just', V194} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V194}}} end; {'Prelude.Types.Just', V195} -> {'Prelude.Types.Just', {'Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Core.TT.BI', V195}}} end end.
'un--sugarApp'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V0 end, ('un--sugarAppM'(V0)))).
'un--startPrec'() -> 0.
'un--showImplicits'(V0) -> begin (V1 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V11 = fun (V6) -> {'Prelude.Types.Right', case V5 of {'Core.Options.MkPPOpts', V7, V8, V9, V10} -> V7 end} end), V11 end(V2)) end end end end.
'un--showFullEnv'(V0) -> begin (V1 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V11 = fun (V6) -> {'Prelude.Types.Right', case V5 of {'Core.Options.MkPPOpts', V7, V8, V9, V10} -> V9 end} end), V11 end(V2)) end end end end.
'un--resugarNoPatvars'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoPatvars'(V0, V1, V3, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V10 = ('un--toCleanPTerm'(V1, V2, ('un--startPrec'()), V9))), V10 end(V6)) end end end end.
'un--resugar'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V3, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V10 = ('un--toCleanPTerm'(V1, V2, ('un--startPrec'()), V9))), V10 end(V6)) end end end end.
'un--pterm'(V0, V1, V2) -> ('un--toCleanPTerm'(V0, V1, ('un--startPrec'()), V2)).
'un--mkSectionL'(V0, V1, V2) -> case V2 of {'Idris.Syntax.PLam', V3, V4, V5, V6, V7, V8} -> case V6 of {'Idris.Syntax.PRef', V9, V10} -> case V8 of {'Idris.Syntax.PApp', V11, V12, V13} -> case V12 of {'Idris.Syntax.PApp', V14, V15, V16} -> case V15 of {'Idris.Syntax.PRef', V17, V18} -> case V16 of {'Idris.Syntax.PRef', V19, V20} -> case V20 of {'Core.TT.MkKindedName', V21, V22, V23} -> case V21 of {'Prelude.Types.Just', V24} -> case V24 of {'Core.TT.Bound'} -> begin (V37 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V26 = fun (V25) -> V25 end), fun (V27) -> (V26(V27)) end end(<<"resugar.sectionL"/utf8>>)), 30, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V28) -> fun (V29) -> <<V28/binary, V29/binary>> end end, <<""/utf8>>}, fun (V30) -> V30 end, [(begin (V32 = fun (V31) -> V31 end), fun (V33) -> (V32(V33)) end end(<<"SectionL candidate: "/utf8>>)) | [(begin (V35 = fun (V34) -> V34 end), fun (V36) -> (V35(V36)) end end(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V2)))) | []]])) end))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V80 = begin (V42 = {'Idris.Syntax.PLam', V3, V4, V5, {'Idris.Syntax.PRef', V9, V10}, V7, {'Idris.Syntax.PApp', V11, {'Idris.Syntax.PApp', V14, {'Idris.Syntax.PRef', V17, V18}, {'Idris.Syntax.PRef', V19, {'Core.TT.MkKindedName', {'Prelude.Types.Just', {'Core.TT.Bound'}}, V22, V23}}}, V13}}), case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(case V10 of {'Core.TT.MkKindedName', V43, V44, V45} -> V44 end, V22)) of 1 -> begin (V51 = begin (V46 = V1), fun (V47) -> begin (V50 = (begin (V48 = V46), fun (V49) -> ('erlang':'get'(V48)) end end(V47))), {'Prelude.Types.Right', V50} end end end), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V78 = begin (V59 = case V18 of {'Core.TT.MkKindedName', V56, V57, V58} -> V58 end), begin (V60 = {'Idris.Syntax.PSectionL', V3, V17, V18, ('un--unbracketApp'(V13))}), fun (V61) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Core.Name':'un--displayName'(V59)))), case V55 of {'Idris.Syntax.MkSyntax', V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74} -> V62 end)) of {'Prelude.Types.Just', V75} -> {'Prelude.Types.Right', V60}; {'Prelude.Types.Nothing'} -> case ('Idris.Idris2.Core.Name':'un--dropNS'(V59)) of {'Core.Name.DN', V76, V77} -> {'Prelude.Types.Right', case ('Idris.Idris2.Core.Name':'un--isOpUserName'({'Core.Name.Basic', V76})) of 1 -> V60; 0 -> V42 end}; _ -> {'Prelude.Types.Right', V42} end end end end end), V78 end(V52)) end end end end; _ -> fun (V79) -> {'Prelude.Types.Right', V42} end end end), V80 end(V38)) end end end end; _ -> fun (V81) -> {'Prelude.Types.Right', V2} end end; _ -> fun (V82) -> {'Prelude.Types.Right', V2} end end; _ -> fun (V83) -> {'Prelude.Types.Right', V2} end end; _ -> fun (V84) -> {'Prelude.Types.Right', V2} end end; _ -> fun (V85) -> {'Prelude.Types.Right', V2} end end; _ -> fun (V86) -> {'Prelude.Types.Right', V2} end end; _ -> fun (V87) -> {'Prelude.Types.Right', V2} end end; _ -> fun (V88) -> {'Prelude.Types.Right', V2} end end; _ -> fun (V89) -> {'Prelude.Types.Right', V2} end end.
'un--mkOp'(V0, V1) -> case V1 of {'Idris.Syntax.PApp', V2, V3, V4} -> case V3 of {'Idris.Syntax.PApp', V5, V6, V7} -> case V6 of {'Idris.Syntax.PRef', V8, V9} -> begin (V15 = begin (V10 = V0), fun (V11) -> begin (V14 = (begin (V12 = V10), fun (V13) -> ('erlang':'get'(V12)) end end(V11))), {'Prelude.Types.Right', V14} end end end), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V43 = begin (V23 = case V9 of {'Core.TT.MkKindedName', V20, V21, V22} -> V22 end), begin (V24 = {'Idris.Syntax.POp', V2, V8, V9, ('un--unbracketApp'(V7)), ('un--unbracketApp'(V4))}), begin (V25 = {'Idris.Syntax.PApp', V2, {'Idris.Syntax.PApp', V5, {'Idris.Syntax.PRef', V8, V9}, V7}, V4}), fun (V26) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Core.Name':'un--displayName'(V23)))), case V19 of {'Idris.Syntax.MkSyntax', V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> V27 end)) of {'Prelude.Types.Just', V40} -> {'Prelude.Types.Right', V24}; {'Prelude.Types.Nothing'} -> case ('Idris.Idris2.Core.Name':'un--dropNS'(V23)) of {'Core.Name.DN', V41, V42} -> {'Prelude.Types.Right', case ('Idris.Idris2.Core.Name':'un--isOpUserName'({'Core.Name.Basic', V41})) of 1 -> V24; 0 -> V25 end}; _ -> {'Prelude.Types.Right', V25} end end end end end end), V43 end(V16)) end end end end; _ -> fun (V44) -> {'Prelude.Types.Right', V1} end end; {'Idris.Syntax.PRef', V45, V46} -> begin (V52 = begin (V47 = V0), fun (V48) -> begin (V51 = (begin (V49 = V47), fun (V50) -> ('erlang':'get'(V49)) end end(V48))), {'Prelude.Types.Right', V51} end end end), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V80 = begin (V60 = case V46 of {'Core.TT.MkKindedName', V57, V58, V59} -> V59 end), begin (V61 = {'Idris.Syntax.PSectionR', V2, V45, ('un--unbracketApp'(V4)), V46}), begin (V62 = {'Idris.Syntax.PApp', V2, {'Idris.Syntax.PRef', V45, V46}, V4}), fun (V63) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Core.Name':'un--displayName'(V60)))), case V56 of {'Idris.Syntax.MkSyntax', V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76} -> V64 end)) of {'Prelude.Types.Just', V77} -> {'Prelude.Types.Right', V61}; {'Prelude.Types.Nothing'} -> case ('Idris.Idris2.Core.Name':'un--dropNS'(V60)) of {'Core.Name.DN', V78, V79} -> {'Prelude.Types.Right', case ('Idris.Idris2.Core.Name':'un--isOpUserName'({'Core.Name.Basic', V78})) of 1 -> V61; 0 -> V62 end}; _ -> {'Prelude.Types.Right', V62} end end end end end end), V80 end(V53)) end end end end; _ -> fun (V81) -> {'Prelude.Types.Right', V1} end end; _ -> fun (V82) -> {'Prelude.Types.Right', V1} end end.
'un--mkApp'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Prelude.Types.Right', V2} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V9 of {'Prelude.Types.Nothing'} -> begin (V11 = ('un--sugarApp'({'Idris.Syntax.PApp', V7, V2, V10}))), ('un--mkApp'(V0, V1, V11, V6)) end; {'Prelude.Types.Just', V12} -> case V12 of {'Prelude.Types.Nothing'} -> begin (V13 = ('un--sugarApp'({'Idris.Syntax.PAutoApp', V7, V2, V10}))), ('un--mkApp'(V0, V1, V13, V6)) end; {'Prelude.Types.Just', V14} -> begin (V15 = ('un--showImplicits'(V0))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = case V19 of 1 -> begin (V20 = {'Idris.Syntax.PNamedApp', V7, V2, V14, V10}), ('un--mkApp'(V0, V1, V20, V6)) end; 0 -> ('un--mkApp'(V0, V1, V2, V6)) end), V21 end(V16)) end end end end end end end end end(E0, E1)) end.
'un--extractNat'(V0, V1) -> case V1 of {'Idris.Syntax.PRef', V2, V3} -> case V3 of {'Core.TT.MkKindedName', V4, V5, V6} -> case V5 of {'Core.Name.NS', V7, V8} -> case V8 of {'Core.Name.UN', V9} -> case V9 of {'Core.Name.Basic', V10} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V13, V14)) end end end end, fun (V15) -> fun (V16) -> {'Prelude.Types.Just', V16} end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V19, V20)) end end end end}, fun (V21) -> {'Prelude.Types.Nothing'} end, fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V23, V24)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V10, (begin (V26 = fun (V25) -> V25 end), fun (V27) -> (V26(V27)) end end(<<"Z"/utf8>>)))))), fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V31, V32)) end end end end, fun (V33) -> fun (V34) -> {'Prelude.Types.Just', V34} end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V37, V38)) end end end end}, fun (V39) -> {'Prelude.Types.Nothing'} end, fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V41, V42)) end end end}, case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V7, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))) of 1 -> 1; 0 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V7, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))) end)), fun (V43) -> {'Prelude.Types.Just', V0} end)) end)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PApp', V44, V45, V46} -> case V45 of {'Idris.Syntax.PRef', V47, V48} -> case V48 of {'Core.TT.MkKindedName', V49, V50, V51} -> case V50 of {'Core.Name.NS', V52, V53} -> case V53 of {'Core.Name.UN', V54} -> case V54 of {'Core.Name.Basic', V55} -> case V55 of <<"S"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V58, V59)) end end end end, fun (V60) -> fun (V61) -> {'Prelude.Types.Just', V61} end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V64, V65)) end end end end}, fun (V66) -> {'Prelude.Types.Nothing'} end, fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V68, V69)) end end end}, case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V52, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))) of 1 -> 1; 0 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V52, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))) end)), fun (V70) -> ('un--extractNat'((V0 + 1), V46)) end)); <<"fromInteger"/utf8>> -> ('un--extractNat'(V0, V46)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PPrimVal', V71, V72} -> case V72 of {'Core.TT.BI', V73} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V76, V77)) end end end end, fun (V78) -> fun (V79) -> {'Prelude.Types.Just', V79} end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V82, V83)) end end end end}, fun (V84) -> {'Prelude.Types.Nothing'} end, fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V86, V87)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(0, V73)))), fun (V88) -> {'Prelude.Types.Just', (V0 + ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V73)))} end)); _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PBracketed', V89, V90} -> ('un--extractNat'(V0, V90)); _ -> {'Prelude.Types.Nothing'} end.
'un--extractInteger'(V0) -> case V0 of {'Idris.Syntax.PApp', V1, V2, V3} -> case V2 of {'Idris.Syntax.PRef', V4, V5} -> case V5 of {'Core.TT.MkKindedName', V6, V7, V8} -> case V7 of {'Core.Name.NS', V9, V10} -> case V10 of {'Core.Name.UN', V11} -> case V11 of {'Core.Name.Basic', V12} -> case V12 of <<"fromInteger"/utf8>> -> ('un--extractInteger'(V3)); <<"negate"/utf8>> -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> (0 - V13) end))(('un--extractInteger'(V3)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PPrimVal', V21, V22} -> case V22 of {'Core.TT.BI', V23} -> {'Prelude.Types.Just', V23}; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PBracketed', V24, V25} -> ('un--extractInteger'(V25)); _ -> {'Prelude.Types.Nothing'} end.
'un--extractDouble'(V0) -> case V0 of {'Idris.Syntax.PApp', V1, V2, V3} -> case V2 of {'Idris.Syntax.PRef', V4, V5} -> case V5 of {'Core.TT.MkKindedName', V6, V7, V8} -> case V7 of {'Core.Name.NS', V9, V10} -> case V10 of {'Core.Name.UN', V11} -> case V11 of {'Core.Name.Basic', V12} -> case V12 of <<"fromDouble"/utf8>> -> ('un--extractDouble'(V3)); <<"negate"/utf8>> -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('erlang':'-'(V13)) end))(('un--extractDouble'(V3)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PPrimVal', V21, V22} -> case V22 of {'Core.TT.Db', V23} -> {'Prelude.Types.Just', V23}; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PBracketed', V24, V25} -> ('un--extractDouble'(V25)); _ -> {'Prelude.Types.Nothing'} end.
'un--cleanPTerm'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V13 = case case V6 of {'Core.Options.MkPPOpts', V7, V8, V9, V10} -> V8 end of 1 -> fun (V11) -> {'Prelude.Types.Right', V1} end; 0 -> ('Idris.Idris2.Idris.Syntax.Traversals':'un--mapPTermM'(fun (V12) -> ('nested--14905-8882--in--un--cleanNode'(V1, V0, V12)) end, V1)) end), V13 end(V3)) end end end end.
'un--bracket'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--mkOp'(V1, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V17 = begin (V10 = ('un--mkSectionL'(V0, V1, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> case ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V2, V3)) of 1 -> {'Prelude.Types.Right', ('un--addBracket'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V14))}; 0 -> {'Prelude.Types.Right', V14} end end), V16 end(V11)) end end end end), V17 end(V6)) end end end end.
'un--argPrec'() -> 1000.
'un--appPrec'() -> 999.
'un--addBracket'(V0, V1) -> case ('nested--10365-4771--in--un--needed'(V1, V0, V1)) of 1 -> {'Idris.Syntax.PBracketed', V0, V1}; 0 -> V1 end.
