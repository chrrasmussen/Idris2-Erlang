-module('Idris.Idris2.Core.SchemeEval.Builtins').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--applyCast-4243'/4,
  'case--applyCast-4062'/4,
  'case--applyCast-3905'/4,
  'nested--9916-5544--in--un--vars'/5,
  'nested--9900-5535--in--un--makeBlockedApp'/4,
  'nested--9900-5536--in--un--bindArgs'/6,
  'un--wrap'/2,
  'un--unaryOp'/3,
  'un--testPartial'/2,
  'un--sub'/3,
  'un--shr'/3,
  'un--shl'/3,
  'un--mul'/3,
  'un--mod'/2,
  'un--mkArgList'/2,
  'un--integer'/1,
  'un--int8'/1,
  'un--int64'/1,
  'un--int32'/1,
  'un--int16'/1,
  'un--int'/1,
  'un--div'/3,
  'un--compileBuiltin'/3,
  'un--canonical'/3,
  'un--boolOp'/4,
  'un--bits8'/1,
  'un--bits64'/1,
  'un--bits32'/1,
  'un--bits16'/1,
  'un--binOp'/4,
  'un--applyOp'/3,
  'un--applyIntCast'/3,
  'un--applyCast'/4,
  'un--add'/3
]).
'case--applyCast-4243'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Nothing'} -> case V1 of 10 -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V5 = fun (V4) -> V4 end), fun (V6) -> (V5(V6)) end end(<<"number->string"/utf8>>))}, [V0 | []]}; _ -> V2 end; {'Prelude.Types.Just', V7} -> case V7 of {'Core.TT.Signed', V8} -> case V8 of {'Core.TT.Unlimited'} -> ('un--integer'({'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-exact-truncate"/utf8>>}, [V0 | []]})); {'Core.TT.P', V9} -> ('un--wrap'(V7, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V11 = fun (V10) -> V10 end), fun (V12) -> (V11(V12)) end end(<<"ct-exact-truncate-boundedInt"/utf8>>))}, [V0 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V13 = (V9 - 1)), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end)) | []]]})) end; {'Core.TT.Unsigned', V14} -> ('un--wrap'(V7, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V16 = fun (V15) -> V15 end), fun (V17) -> (V16(V17)) end end(<<"ct-exact-truncate-boundedUInt"/utf8>>))}, [V0 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V14)) | []]]})) end end.
'case--applyCast-4062'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Nothing'} -> case V1 of 12 -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V5 = fun (V4) -> V4 end), fun (V6) -> (V5(V6)) end end(<<"ct-cast-string-double"/utf8>>))}, [V0 | []]}; _ -> V2 end; {'Prelude.Types.Just', V7} -> case V7 of {'Core.TT.Signed', V8} -> case V8 of {'Core.TT.Unlimited'} -> ('un--integer'({'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-cast-string-int"/utf8>>}, [V0 | []]})); {'Core.TT.P', V9} -> ('un--wrap'(V7, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V11 = fun (V10) -> V10 end), fun (V12) -> (V11(V12)) end end(<<"ct-cast-string-boundedInt"/utf8>>))}, [V0 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V13 = (V9 - 1)), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end)) | []]]})) end; {'Core.TT.Unsigned', V14} -> ('un--wrap'(V7, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V16 = fun (V15) -> V15 end), fun (V17) -> (V16(V17)) end end(<<"ct-cast-string-boundedUInt"/utf8>>))}, [V0 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V14)) | []]]})) end end.
'case--applyCast-3905'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Nothing'} -> case V1 of 10 -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"string"/utf8>>}, [V0 | []]}; _ -> V2 end; {'Prelude.Types.Just', V4} -> case V4 of {'Core.TT.Signed', V5} -> case V5 of {'Core.TT.Unlimited'} -> ('un--integer'({'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"char->integer"/utf8>>}, [V0 | []]})); {'Core.TT.P', V6} -> ('un--wrap'(V4, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V8 = fun (V7) -> V7 end), fun (V9) -> (V8(V9)) end end(<<"ct-cast-char-boundedInt"/utf8>>))}, [V0 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V10 = (V6 - 1)), case ((V10 band 9223372036854775808) =/= 0) of 'true' -> (V10 bor -9223372036854775808); _ -> (V10 band 9223372036854775807) end end)) | []]]})) end; {'Core.TT.Unsigned', V11} -> ('un--wrap'(V4, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V13 = fun (V12) -> V12 end), fun (V14) -> (V13(V14)) end end(<<"ct-cast-char-boundedUInt"/utf8>>))}, [V0 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V11)) | []]]})) end end.
'nested--9916-5544--in--un--vars'(V0, V1, V2, V3, V4) -> case V4 of {'Data.Vect.Nil'} -> {'Libraries.Utils.Scheme.Null'}; {'Data.Vect.::', V5, V6} -> {'Libraries.Utils.Scheme.Cons', {'Libraries.Utils.Scheme.Var', V5}, ('nested--9916-5544--in--un--vars'(V0, V1, V2, V3, V6))} end.
'nested--9900-5535--in--un--makeBlockedApp'(V0, V1, V2, V3) -> {'Libraries.Utils.Scheme.Vector', -2, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V2)) | [('nested--9916-5544--in--un--vars'(V0, V1, V2, V3, V3)) | []]]}.
'nested--9900-5536--in--un--bindArgs'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Data.Vect.Nil'} -> ('un--applyOp'(('nested--9900-5535--in--un--makeBlockedApp'(V0, V1, V2, V5)), V1, ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> {'Libraries.Utils.Scheme.Var', V6} end))(V5)))); {'Data.Vect.::', V14, V15} -> {'Libraries.Utils.Scheme.Vector', -9, [('nested--9900-5535--in--un--makeBlockedApp'(V0, V1, V2, ('Idris.Idris2.Data.Vect':'un--reverse'(V4)))) | [{'Libraries.Utils.Scheme.Lambda', [V14 | []], ('nested--9900-5536--in--un--bindArgs'(V0, V1, V2, V15, {'Data.Vect.::', V14, V4}, V5))} | []]]} end.
'un--wrap'(V0, V1) -> case V0 of {'Core.TT.Signed', V2} -> case V2 of {'Core.TT.Unlimited'} -> ('un--integer'(V1)); {'Core.TT.P', V3} -> case V3 of 8 -> ('un--int8'(V1)); 16 -> ('un--int16'(V1)); 32 -> ('un--int32'(V1)); 64 -> ('un--int64'(V1)); _ -> ('un--integer'(V1)) end; _ -> ('un--integer'(V1)) end; {'Core.TT.Unsigned', V4} -> case V4 of 8 -> ('un--bits8'(V1)); 16 -> ('un--bits16'(V1)); 32 -> ('un--bits32'(V1)); 64 -> ('un--bits64'(V1)); _ -> ('un--integer'(V1)) end; _ -> ('un--integer'(V1)) end.
'un--unaryOp'(V0, V1, V2) -> ('un--canonical'(V0, {'Data.Vect.::', V2, {'Data.Vect.Nil'}}, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', V1}, [V2 | []]})).
'un--testPartial'(V0, V1) -> {'Libraries.Utils.Scheme.Let', <<"p-0"/utf8>>, V1, {'Libraries.Utils.Scheme.If', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-isConstant"/utf8>>}, [{'Libraries.Utils.Scheme.Var', <<"p-0"/utf8>>} | []]}, {'Libraries.Utils.Scheme.Var', <<"p-0"/utf8>>}, V0}}.
'un--sub'(V0, V1, V2) -> case V0 of {'Prelude.Types.Just', V3} -> case V3 of {'Core.TT.Signed', V4} -> case V4 of {'Core.TT.P', V5} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-s-"/utf8>>}, [V1 | [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V6 = (V5 - 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)) | []]]]}; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-"/utf8>>}, [V1 | [V2 | []]]} end; {'Core.TT.Unsigned', V7} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-u-"/utf8>>}, [V1 | [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V7)) | []]]]}; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-"/utf8>>}, [V1 | [V2 | []]]} end; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-"/utf8>>}, [V1 | [V2 | []]]} end.
'un--shr'(V0, V1, V2) -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-shr"/utf8>>}, [V1 | [V2 | []]]}.
'un--shl'(V0, V1, V2) -> case V0 of {'Prelude.Types.Just', V3} -> case V3 of {'Core.TT.Signed', V4} -> case V4 of {'Core.TT.P', V5} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-bits-shl-signed"/utf8>>}, [V1 | [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V6 = (V5 - 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)) | []]]]}; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-shl"/utf8>>}, [V1 | [V2 | []]]} end; {'Core.TT.Unsigned', V7} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-bits-shl"/utf8>>}, [V1 | [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V7)) | []]]]}; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-shl"/utf8>>}, [V1 | [V2 | []]]} end; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-shl"/utf8>>}, [V1 | [V2 | []]]} end.
'un--mul'(V0, V1, V2) -> case V0 of {'Prelude.Types.Just', V3} -> case V3 of {'Core.TT.Signed', V4} -> case V4 of {'Core.TT.P', V5} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-s*"/utf8>>}, [V1 | [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V6 = (V5 - 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)) | []]]]}; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct*"/utf8>>}, [V1 | [V2 | []]]} end; {'Core.TT.Unsigned', V7} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-u*"/utf8>>}, [V1 | [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V7)) | []]]]}; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct*"/utf8>>}, [V1 | [V2 | []]]} end; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct*"/utf8>>}, [V1 | [V2 | []]]} end.
'un--mod'(V0, V1) -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-mod"/utf8>>}, [V0 | [V1 | []]]}.
'un--mkArgList'(V0, V1) -> case V1 of 0 -> {'Data.Vect.Nil'}; _ -> begin (V2 = (V1 - 1)), {'Data.Vect.::', <<<<"x-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V0))/binary>>, ('un--mkArgList'(begin (V3 = (V0 + 1)), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end, V2))} end end.
'un--integer'(V0) -> {'Libraries.Utils.Scheme.Vector', -105, [V0 | []]}.
'un--int8'(V0) -> {'Libraries.Utils.Scheme.Vector', -101, [V0 | []]}.
'un--int64'(V0) -> {'Libraries.Utils.Scheme.Vector', -104, [V0 | []]}.
'un--int32'(V0) -> {'Libraries.Utils.Scheme.Vector', -103, [V0 | []]}.
'un--int16'(V0) -> {'Libraries.Utils.Scheme.Vector', -102, [V0 | []]}.
'un--int'(V0) -> {'Libraries.Utils.Scheme.Vector', -100, [V0 | []]}.
'un--div'(V0, V1, V2) -> case V0 of {'Prelude.Types.Just', V3} -> case V3 of {'Core.TT.Signed', V4} -> case V4 of {'Core.TT.Unlimited'} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct/"/utf8>>}, [V1 | [V2 | []]]}; {'Core.TT.P', V5} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-s/"/utf8>>}, [V1 | [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V6 = (V5 - 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)) | []]]]}; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct/"/utf8>>}, [V1 | [V2 | []]]} end; {'Core.TT.Unsigned', V7} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-u/"/utf8>>}, [V1 | [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V7)) | []]]]}; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct/"/utf8>>}, [V1 | [V2 | []]]} end; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct/"/utf8>>}, [V1 | [V2 | []]]} end.
'un--compileBuiltin'(V0, V1, V2) -> begin (V3 = ('un--mkArgList'(0, V0))), ('nested--9900-5536--in--un--bindArgs'(V0, V2, V1, V3, {'Data.Vect.Nil'}, V3)) end.
'un--canonical'(V0, V1, V2) -> case V1 of {'Data.Vect.Nil'} -> V2; {'Data.Vect.::', V3, V4} -> {'Libraries.Utils.Scheme.If', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-isConstant"/utf8>>}, [V3 | []]}, ('un--canonical'(V0, V4, V2)), V0} end.
'un--boolOp'(V0, V1, V2, V3) -> ('un--canonical'(V0, {'Data.Vect.::', V2, {'Data.Vect.::', V3, {'Data.Vect.Nil'}}}, ('un--int'({'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"or"/utf8>>}, [{'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"and"/utf8>>}, [{'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', V1}, [V2 | [V3 | []]]} | [{'Libraries.Utils.Scheme.IntegerVal', 1} | []]]} | [{'Libraries.Utils.Scheme.IntegerVal', 0} | []]]})))).
'un--bits8'(V0) -> {'Libraries.Utils.Scheme.Vector', -106, [V0 | []]}.
'un--bits64'(V0) -> {'Libraries.Utils.Scheme.Vector', -109, [V0 | []]}.
'un--bits32'(V0) -> {'Libraries.Utils.Scheme.Vector', -108, [V0 | []]}.
'un--bits16'(V0) -> {'Libraries.Utils.Scheme.Vector', -107, [V0 | []]}.
'un--binOp'(V0, V1, V2, V3) -> ('un--canonical'(V0, {'Data.Vect.::', V2, {'Data.Vect.::', V3, {'Data.Vect.Nil'}}}, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', V1}, [V2 | [V3 | []]]})).
'un--applyOp'(V0, V1, V2) -> case V1 of {'Core.TT.Add', V3} -> case V3 of 12 -> case V2 of {'Data.Vect.::', V4, V5} -> case V5 of {'Data.Vect.::', V6, V7} -> case V7 of {'Data.Vect.Nil'} -> ('un--binOp'(V0, <<"+"/utf8>>, V4, V6)); _ -> case V2 of {'Data.Vect.::', V8, V9} -> case V9 of {'Data.Vect.::', V10, V11} -> case V11 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V8, {'Data.Vect.::', V10, {'Data.Vect.Nil'}}}, ('un--add'(('Idris.Idris2.Core.TT':'un--intKind'(V3)), V8, V10)))) end end end end; _ -> case V2 of {'Data.Vect.::', V12, V13} -> case V13 of {'Data.Vect.::', V14, V15} -> case V15 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V12, {'Data.Vect.::', V14, {'Data.Vect.Nil'}}}, ('un--add'(('Idris.Idris2.Core.TT':'un--intKind'(V3)), V12, V14)))) end end end end; _ -> case V2 of {'Data.Vect.::', V16, V17} -> case V17 of {'Data.Vect.::', V18, V19} -> case V19 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V16, {'Data.Vect.::', V18, {'Data.Vect.Nil'}}}, ('un--add'(('Idris.Idris2.Core.TT':'un--intKind'(V3)), V16, V18)))) end end end end; _ -> case V2 of {'Data.Vect.::', V20, V21} -> case V21 of {'Data.Vect.::', V22, V23} -> case V23 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V20, {'Data.Vect.::', V22, {'Data.Vect.Nil'}}}, ('un--add'(('Idris.Idris2.Core.TT':'un--intKind'(V3)), V20, V22)))) end end end end; {'Core.TT.Sub', V24} -> case V24 of 12 -> case V2 of {'Data.Vect.::', V25, V26} -> case V26 of {'Data.Vect.::', V27, V28} -> case V28 of {'Data.Vect.Nil'} -> ('un--binOp'(V0, <<"-"/utf8>>, V25, V27)); _ -> case V2 of {'Data.Vect.::', V29, V30} -> case V30 of {'Data.Vect.::', V31, V32} -> case V32 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V29, {'Data.Vect.::', V31, {'Data.Vect.Nil'}}}, ('un--sub'(('Idris.Idris2.Core.TT':'un--intKind'(V24)), V29, V31)))) end end end end; _ -> case V2 of {'Data.Vect.::', V33, V34} -> case V34 of {'Data.Vect.::', V35, V36} -> case V36 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V33, {'Data.Vect.::', V35, {'Data.Vect.Nil'}}}, ('un--sub'(('Idris.Idris2.Core.TT':'un--intKind'(V24)), V33, V35)))) end end end end; _ -> case V2 of {'Data.Vect.::', V37, V38} -> case V38 of {'Data.Vect.::', V39, V40} -> case V40 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V37, {'Data.Vect.::', V39, {'Data.Vect.Nil'}}}, ('un--sub'(('Idris.Idris2.Core.TT':'un--intKind'(V24)), V37, V39)))) end end end end; _ -> case V2 of {'Data.Vect.::', V41, V42} -> case V42 of {'Data.Vect.::', V43, V44} -> case V44 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V41, {'Data.Vect.::', V43, {'Data.Vect.Nil'}}}, ('un--sub'(('Idris.Idris2.Core.TT':'un--intKind'(V24)), V41, V43)))) end end end end; {'Core.TT.Mul', V45} -> case V45 of 12 -> case V2 of {'Data.Vect.::', V46, V47} -> case V47 of {'Data.Vect.::', V48, V49} -> case V49 of {'Data.Vect.Nil'} -> ('un--binOp'(V0, <<"*"/utf8>>, V46, V48)); _ -> case V2 of {'Data.Vect.::', V50, V51} -> case V51 of {'Data.Vect.::', V52, V53} -> case V53 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V50, {'Data.Vect.::', V52, {'Data.Vect.Nil'}}}, ('un--mul'(('Idris.Idris2.Core.TT':'un--intKind'(V45)), V50, V52)))) end end end end; _ -> case V2 of {'Data.Vect.::', V54, V55} -> case V55 of {'Data.Vect.::', V56, V57} -> case V57 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V54, {'Data.Vect.::', V56, {'Data.Vect.Nil'}}}, ('un--mul'(('Idris.Idris2.Core.TT':'un--intKind'(V45)), V54, V56)))) end end end end; _ -> case V2 of {'Data.Vect.::', V58, V59} -> case V59 of {'Data.Vect.::', V60, V61} -> case V61 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V58, {'Data.Vect.::', V60, {'Data.Vect.Nil'}}}, ('un--mul'(('Idris.Idris2.Core.TT':'un--intKind'(V45)), V58, V60)))) end end end end; _ -> case V2 of {'Data.Vect.::', V62, V63} -> case V63 of {'Data.Vect.::', V64, V65} -> case V65 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V62, {'Data.Vect.::', V64, {'Data.Vect.Nil'}}}, ('un--mul'(('Idris.Idris2.Core.TT':'un--intKind'(V45)), V62, V64)))) end end end end; {'Core.TT.Div', V66} -> case V66 of 12 -> case V2 of {'Data.Vect.::', V67, V68} -> case V68 of {'Data.Vect.::', V69, V70} -> case V70 of {'Data.Vect.Nil'} -> ('un--binOp'(V0, <<"/"/utf8>>, V67, V69)); _ -> case V2 of {'Data.Vect.::', V71, V72} -> case V72 of {'Data.Vect.::', V73, V74} -> case V74 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V71, {'Data.Vect.::', V73, {'Data.Vect.Nil'}}}, ('un--div'(('Idris.Idris2.Core.TT':'un--intKind'(V66)), V71, V73)))) end end end end; _ -> case V2 of {'Data.Vect.::', V75, V76} -> case V76 of {'Data.Vect.::', V77, V78} -> case V78 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V75, {'Data.Vect.::', V77, {'Data.Vect.Nil'}}}, ('un--div'(('Idris.Idris2.Core.TT':'un--intKind'(V66)), V75, V77)))) end end end end; _ -> case V2 of {'Data.Vect.::', V79, V80} -> case V80 of {'Data.Vect.::', V81, V82} -> case V82 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V79, {'Data.Vect.::', V81, {'Data.Vect.Nil'}}}, ('un--div'(('Idris.Idris2.Core.TT':'un--intKind'(V66)), V79, V81)))) end end end end; _ -> case V2 of {'Data.Vect.::', V83, V84} -> case V84 of {'Data.Vect.::', V85, V86} -> case V86 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V83, {'Data.Vect.::', V85, {'Data.Vect.Nil'}}}, ('un--div'(('Idris.Idris2.Core.TT':'un--intKind'(V66)), V83, V85)))) end end end end; {'Core.TT.Neg', V87} -> case V87 of 12 -> case V2 of {'Data.Vect.::', V88, V89} -> case V89 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"-"/utf8>>, V88)); _ -> case V2 of {'Data.Vect.::', V90, V91} -> case V91 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V90, {'Data.Vect.Nil'}}, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-neg"/utf8>>}, [V90 | []]})) end end end; _ -> case V2 of {'Data.Vect.::', V92, V93} -> case V93 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V92, {'Data.Vect.Nil'}}, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-neg"/utf8>>}, [V92 | []]})) end end end; _ -> case V2 of {'Data.Vect.::', V94, V95} -> case V95 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V94, {'Data.Vect.Nil'}}, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-neg"/utf8>>}, [V94 | []]})) end end end; {'Core.TT.Mod', V96} -> case V2 of {'Data.Vect.::', V97, V98} -> case V98 of {'Data.Vect.::', V99, V100} -> case V100 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V97, {'Data.Vect.::', V99, {'Data.Vect.Nil'}}}, ('un--mod'(V97, V99)))) end end end; {'Core.TT.ShiftL', V101} -> case V2 of {'Data.Vect.::', V102, V103} -> case V103 of {'Data.Vect.::', V104, V105} -> case V105 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V102, {'Data.Vect.::', V104, {'Data.Vect.Nil'}}}, ('un--shl'(('Idris.Idris2.Core.TT':'un--intKind'(V101)), V102, V104)))) end end end; {'Core.TT.ShiftR', V106} -> case V2 of {'Data.Vect.::', V107, V108} -> case V108 of {'Data.Vect.::', V109, V110} -> case V110 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V107, {'Data.Vect.::', V109, {'Data.Vect.Nil'}}}, ('un--shr'(('Idris.Idris2.Core.TT':'un--intKind'(V106)), V107, V109)))) end end end; {'Core.TT.BAnd', V111} -> case V2 of {'Data.Vect.::', V112, V113} -> case V113 of {'Data.Vect.::', V114, V115} -> case V115 of {'Data.Vect.Nil'} -> ('un--binOp'(V0, <<"ct-and"/utf8>>, V112, V114)) end end end; {'Core.TT.BOr', V116} -> case V2 of {'Data.Vect.::', V117, V118} -> case V118 of {'Data.Vect.::', V119, V120} -> case V120 of {'Data.Vect.Nil'} -> ('un--binOp'(V0, <<"ct-or"/utf8>>, V117, V119)) end end end; {'Core.TT.BXOr', V121} -> case V2 of {'Data.Vect.::', V122, V123} -> case V123 of {'Data.Vect.::', V124, V125} -> case V125 of {'Data.Vect.Nil'} -> ('un--binOp'(V0, <<"ct-xor"/utf8>>, V122, V124)) end end end; {'Core.TT.LT', V126} -> case V126 of 11 -> case V2 of {'Data.Vect.::', V127, V128} -> case V128 of {'Data.Vect.::', V129, V130} -> case V130 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"char<?"/utf8>>, V127, V129)); _ -> case V2 of {'Data.Vect.::', V131, V132} -> case V132 of {'Data.Vect.::', V133, V134} -> case V134 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<"/utf8>>, V131, V133)) end end end end; _ -> case V2 of {'Data.Vect.::', V135, V136} -> case V136 of {'Data.Vect.::', V137, V138} -> case V138 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<"/utf8>>, V135, V137)) end end end end; _ -> case V2 of {'Data.Vect.::', V139, V140} -> case V140 of {'Data.Vect.::', V141, V142} -> case V142 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<"/utf8>>, V139, V141)) end end end end; 10 -> case V2 of {'Data.Vect.::', V143, V144} -> case V144 of {'Data.Vect.::', V145, V146} -> case V146 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"string<?"/utf8>>, V143, V145)); _ -> case V2 of {'Data.Vect.::', V147, V148} -> case V148 of {'Data.Vect.::', V149, V150} -> case V150 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<"/utf8>>, V147, V149)) end end end end; _ -> case V2 of {'Data.Vect.::', V151, V152} -> case V152 of {'Data.Vect.::', V153, V154} -> case V154 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<"/utf8>>, V151, V153)) end end end end; _ -> case V2 of {'Data.Vect.::', V155, V156} -> case V156 of {'Data.Vect.::', V157, V158} -> case V158 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<"/utf8>>, V155, V157)) end end end end; 12 -> case V2 of {'Data.Vect.::', V159, V160} -> case V160 of {'Data.Vect.::', V161, V162} -> case V162 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"<"/utf8>>, V159, V161)); _ -> case V2 of {'Data.Vect.::', V163, V164} -> case V164 of {'Data.Vect.::', V165, V166} -> case V166 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<"/utf8>>, V163, V165)) end end end end; _ -> case V2 of {'Data.Vect.::', V167, V168} -> case V168 of {'Data.Vect.::', V169, V170} -> case V170 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<"/utf8>>, V167, V169)) end end end end; _ -> case V2 of {'Data.Vect.::', V171, V172} -> case V172 of {'Data.Vect.::', V173, V174} -> case V174 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<"/utf8>>, V171, V173)) end end end end; _ -> case V2 of {'Data.Vect.::', V175, V176} -> case V176 of {'Data.Vect.::', V177, V178} -> case V178 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<"/utf8>>, V175, V177)) end end end end; {'Core.TT.LTE', V179} -> case V179 of 11 -> case V2 of {'Data.Vect.::', V180, V181} -> case V181 of {'Data.Vect.::', V182, V183} -> case V183 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"char<=?"/utf8>>, V180, V182)); _ -> case V2 of {'Data.Vect.::', V184, V185} -> case V185 of {'Data.Vect.::', V186, V187} -> case V187 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<="/utf8>>, V184, V186)) end end end end; _ -> case V2 of {'Data.Vect.::', V188, V189} -> case V189 of {'Data.Vect.::', V190, V191} -> case V191 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<="/utf8>>, V188, V190)) end end end end; _ -> case V2 of {'Data.Vect.::', V192, V193} -> case V193 of {'Data.Vect.::', V194, V195} -> case V195 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<="/utf8>>, V192, V194)) end end end end; 10 -> case V2 of {'Data.Vect.::', V196, V197} -> case V197 of {'Data.Vect.::', V198, V199} -> case V199 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"string<=?"/utf8>>, V196, V198)); _ -> case V2 of {'Data.Vect.::', V200, V201} -> case V201 of {'Data.Vect.::', V202, V203} -> case V203 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<="/utf8>>, V200, V202)) end end end end; _ -> case V2 of {'Data.Vect.::', V204, V205} -> case V205 of {'Data.Vect.::', V206, V207} -> case V207 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<="/utf8>>, V204, V206)) end end end end; _ -> case V2 of {'Data.Vect.::', V208, V209} -> case V209 of {'Data.Vect.::', V210, V211} -> case V211 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<="/utf8>>, V208, V210)) end end end end; 12 -> case V2 of {'Data.Vect.::', V212, V213} -> case V213 of {'Data.Vect.::', V214, V215} -> case V215 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"<="/utf8>>, V212, V214)); _ -> case V2 of {'Data.Vect.::', V216, V217} -> case V217 of {'Data.Vect.::', V218, V219} -> case V219 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<="/utf8>>, V216, V218)) end end end end; _ -> case V2 of {'Data.Vect.::', V220, V221} -> case V221 of {'Data.Vect.::', V222, V223} -> case V223 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<="/utf8>>, V220, V222)) end end end end; _ -> case V2 of {'Data.Vect.::', V224, V225} -> case V225 of {'Data.Vect.::', V226, V227} -> case V227 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<="/utf8>>, V224, V226)) end end end end; _ -> case V2 of {'Data.Vect.::', V228, V229} -> case V229 of {'Data.Vect.::', V230, V231} -> case V231 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct<="/utf8>>, V228, V230)) end end end end; {'Core.TT.EQ', V232} -> case V232 of 11 -> case V2 of {'Data.Vect.::', V233, V234} -> case V234 of {'Data.Vect.::', V235, V236} -> case V236 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"char=?"/utf8>>, V233, V235)); _ -> case V2 of {'Data.Vect.::', V237, V238} -> case V238 of {'Data.Vect.::', V239, V240} -> case V240 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct="/utf8>>, V237, V239)) end end end end; _ -> case V2 of {'Data.Vect.::', V241, V242} -> case V242 of {'Data.Vect.::', V243, V244} -> case V244 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct="/utf8>>, V241, V243)) end end end end; _ -> case V2 of {'Data.Vect.::', V245, V246} -> case V246 of {'Data.Vect.::', V247, V248} -> case V248 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct="/utf8>>, V245, V247)) end end end end; 10 -> case V2 of {'Data.Vect.::', V249, V250} -> case V250 of {'Data.Vect.::', V251, V252} -> case V252 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"string=?"/utf8>>, V249, V251)); _ -> case V2 of {'Data.Vect.::', V253, V254} -> case V254 of {'Data.Vect.::', V255, V256} -> case V256 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct="/utf8>>, V253, V255)) end end end end; _ -> case V2 of {'Data.Vect.::', V257, V258} -> case V258 of {'Data.Vect.::', V259, V260} -> case V260 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct="/utf8>>, V257, V259)) end end end end; _ -> case V2 of {'Data.Vect.::', V261, V262} -> case V262 of {'Data.Vect.::', V263, V264} -> case V264 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct="/utf8>>, V261, V263)) end end end end; 12 -> case V2 of {'Data.Vect.::', V265, V266} -> case V266 of {'Data.Vect.::', V267, V268} -> case V268 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"="/utf8>>, V265, V267)); _ -> case V2 of {'Data.Vect.::', V269, V270} -> case V270 of {'Data.Vect.::', V271, V272} -> case V272 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct="/utf8>>, V269, V271)) end end end end; _ -> case V2 of {'Data.Vect.::', V273, V274} -> case V274 of {'Data.Vect.::', V275, V276} -> case V276 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct="/utf8>>, V273, V275)) end end end end; _ -> case V2 of {'Data.Vect.::', V277, V278} -> case V278 of {'Data.Vect.::', V279, V280} -> case V280 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct="/utf8>>, V277, V279)) end end end end; _ -> case V2 of {'Data.Vect.::', V281, V282} -> case V282 of {'Data.Vect.::', V283, V284} -> case V284 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct="/utf8>>, V281, V283)) end end end end; {'Core.TT.GTE', V285} -> case V285 of 11 -> case V2 of {'Data.Vect.::', V286, V287} -> case V287 of {'Data.Vect.::', V288, V289} -> case V289 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"char>=?"/utf8>>, V286, V288)); _ -> case V2 of {'Data.Vect.::', V290, V291} -> case V291 of {'Data.Vect.::', V292, V293} -> case V293 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>="/utf8>>, V290, V292)) end end end end; _ -> case V2 of {'Data.Vect.::', V294, V295} -> case V295 of {'Data.Vect.::', V296, V297} -> case V297 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>="/utf8>>, V294, V296)) end end end end; _ -> case V2 of {'Data.Vect.::', V298, V299} -> case V299 of {'Data.Vect.::', V300, V301} -> case V301 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>="/utf8>>, V298, V300)) end end end end; 10 -> case V2 of {'Data.Vect.::', V302, V303} -> case V303 of {'Data.Vect.::', V304, V305} -> case V305 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"string>=?"/utf8>>, V302, V304)); _ -> case V2 of {'Data.Vect.::', V306, V307} -> case V307 of {'Data.Vect.::', V308, V309} -> case V309 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>="/utf8>>, V306, V308)) end end end end; _ -> case V2 of {'Data.Vect.::', V310, V311} -> case V311 of {'Data.Vect.::', V312, V313} -> case V313 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>="/utf8>>, V310, V312)) end end end end; _ -> case V2 of {'Data.Vect.::', V314, V315} -> case V315 of {'Data.Vect.::', V316, V317} -> case V317 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>="/utf8>>, V314, V316)) end end end end; 12 -> case V2 of {'Data.Vect.::', V318, V319} -> case V319 of {'Data.Vect.::', V320, V321} -> case V321 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<">="/utf8>>, V318, V320)); _ -> case V2 of {'Data.Vect.::', V322, V323} -> case V323 of {'Data.Vect.::', V324, V325} -> case V325 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>="/utf8>>, V322, V324)) end end end end; _ -> case V2 of {'Data.Vect.::', V326, V327} -> case V327 of {'Data.Vect.::', V328, V329} -> case V329 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>="/utf8>>, V326, V328)) end end end end; _ -> case V2 of {'Data.Vect.::', V330, V331} -> case V331 of {'Data.Vect.::', V332, V333} -> case V333 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>="/utf8>>, V330, V332)) end end end end; _ -> case V2 of {'Data.Vect.::', V334, V335} -> case V335 of {'Data.Vect.::', V336, V337} -> case V337 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>="/utf8>>, V334, V336)) end end end end; {'Core.TT.GT', V338} -> case V338 of 11 -> case V2 of {'Data.Vect.::', V339, V340} -> case V340 of {'Data.Vect.::', V341, V342} -> case V342 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"char>?"/utf8>>, V339, V341)); _ -> case V2 of {'Data.Vect.::', V343, V344} -> case V344 of {'Data.Vect.::', V345, V346} -> case V346 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>"/utf8>>, V343, V345)) end end end end; _ -> case V2 of {'Data.Vect.::', V347, V348} -> case V348 of {'Data.Vect.::', V349, V350} -> case V350 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>"/utf8>>, V347, V349)) end end end end; _ -> case V2 of {'Data.Vect.::', V351, V352} -> case V352 of {'Data.Vect.::', V353, V354} -> case V354 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>"/utf8>>, V351, V353)) end end end end; 10 -> case V2 of {'Data.Vect.::', V355, V356} -> case V356 of {'Data.Vect.::', V357, V358} -> case V358 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"string>?"/utf8>>, V355, V357)); _ -> case V2 of {'Data.Vect.::', V359, V360} -> case V360 of {'Data.Vect.::', V361, V362} -> case V362 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>"/utf8>>, V359, V361)) end end end end; _ -> case V2 of {'Data.Vect.::', V363, V364} -> case V364 of {'Data.Vect.::', V365, V366} -> case V366 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>"/utf8>>, V363, V365)) end end end end; _ -> case V2 of {'Data.Vect.::', V367, V368} -> case V368 of {'Data.Vect.::', V369, V370} -> case V370 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>"/utf8>>, V367, V369)) end end end end; 12 -> case V2 of {'Data.Vect.::', V371, V372} -> case V372 of {'Data.Vect.::', V373, V374} -> case V374 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<">"/utf8>>, V371, V373)); _ -> case V2 of {'Data.Vect.::', V375, V376} -> case V376 of {'Data.Vect.::', V377, V378} -> case V378 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>"/utf8>>, V375, V377)) end end end end; _ -> case V2 of {'Data.Vect.::', V379, V380} -> case V380 of {'Data.Vect.::', V381, V382} -> case V382 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>"/utf8>>, V379, V381)) end end end end; _ -> case V2 of {'Data.Vect.::', V383, V384} -> case V384 of {'Data.Vect.::', V385, V386} -> case V386 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>"/utf8>>, V383, V385)) end end end end; _ -> case V2 of {'Data.Vect.::', V387, V388} -> case V388 of {'Data.Vect.::', V389, V390} -> case V390 of {'Data.Vect.Nil'} -> ('un--boolOp'(V0, <<"ct>"/utf8>>, V387, V389)) end end end end; {'Core.TT.StrLength'} -> case V2 of {'Data.Vect.::', V391, V392} -> case V392 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V391, {'Data.Vect.Nil'}}, {'Libraries.Utils.Scheme.Vector', -100, [{'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V394 = fun (V393) -> V393 end), fun (V395) -> (V394(V395)) end end(<<"string-length"/utf8>>))}, [V391 | []]} | []]})) end end; {'Core.TT.StrHead'} -> case V2 of {'Data.Vect.::', V396, V397} -> case V397 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V396, {'Data.Vect.Nil'}}, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V399 = fun (V398) -> V398 end), fun (V400) -> (V399(V400)) end end(<<"string-ref"/utf8>>))}, [V396 | [{'Libraries.Utils.Scheme.IntegerVal', 0} | []]]})) end end; {'Core.TT.StrTail'} -> case V2 of {'Data.Vect.::', V401, V402} -> case V402 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V401, {'Data.Vect.Nil'}}, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"substring"/utf8>>}, [V401 | [{'Libraries.Utils.Scheme.IntegerVal', 1} | [{'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V404 = fun (V403) -> V403 end), fun (V405) -> (V404(V405)) end end(<<"string-length"/utf8>>))}, [V401 | []]} | []]]]})) end end; {'Core.TT.StrIndex'} -> case V2 of {'Data.Vect.::', V406, V407} -> case V407 of {'Data.Vect.::', V408, V409} -> case V409 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V406, {'Data.Vect.::', V408, {'Data.Vect.Nil'}}}, ('un--testPartial'(V0, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V411 = fun (V410) -> V410 end), fun (V412) -> (V411(V412)) end end(<<"ct-string-ref"/utf8>>))}, [V406 | [V408 | []]]})))) end end end; {'Core.TT.StrCons'} -> case V2 of {'Data.Vect.::', V413, V414} -> case V414 of {'Data.Vect.::', V415, V416} -> case V416 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V413, {'Data.Vect.::', V415, {'Data.Vect.Nil'}}}, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V418 = fun (V417) -> V417 end), fun (V419) -> (V418(V419)) end end(<<"ct-string-cons"/utf8>>))}, [V413 | [V415 | []]]})) end end end; {'Core.TT.StrAppend'} -> case V2 of {'Data.Vect.::', V420, V421} -> case V421 of {'Data.Vect.::', V422, V423} -> case V423 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V420, {'Data.Vect.::', V422, {'Data.Vect.Nil'}}}, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V425 = fun (V424) -> V424 end), fun (V426) -> (V425(V426)) end end(<<"string-append"/utf8>>))}, [V420 | [V422 | []]]})) end end end; {'Core.TT.StrReverse'} -> case V2 of {'Data.Vect.::', V427, V428} -> case V428 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V427, {'Data.Vect.Nil'}}, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V430 = fun (V429) -> V429 end), fun (V431) -> (V430(V431)) end end(<<"ct-string-reverse"/utf8>>))}, [V427 | []]})) end end; {'Core.TT.StrSubstr'} -> case V2 of {'Data.Vect.::', V432, V433} -> case V433 of {'Data.Vect.::', V434, V435} -> case V435 of {'Data.Vect.::', V436, V437} -> case V437 of {'Data.Vect.Nil'} -> ('un--canonical'(V0, {'Data.Vect.::', V432, {'Data.Vect.::', V434, {'Data.Vect.::', V436, {'Data.Vect.Nil'}}}}, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V439 = fun (V438) -> V438 end), fun (V440) -> (V439(V440)) end end(<<"ct-string-substr"/utf8>>))}, [V432 | []]})) end end end end; {'Core.TT.DoubleExp'} -> case V2 of {'Data.Vect.::', V441, V442} -> case V442 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"flexp"/utf8>>, V441)) end end; {'Core.TT.DoubleLog'} -> case V2 of {'Data.Vect.::', V443, V444} -> case V444 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"fllog"/utf8>>, V443)) end end; {'Core.TT.DoublePow'} -> case V2 of {'Data.Vect.::', V445, V446} -> case V446 of {'Data.Vect.::', V447, V448} -> case V448 of {'Data.Vect.Nil'} -> ('un--binOp'(V0, <<"expt"/utf8>>, V445, V447)) end end end; {'Core.TT.DoubleSin'} -> case V2 of {'Data.Vect.::', V449, V450} -> case V450 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"flsin"/utf8>>, V449)) end end; {'Core.TT.DoubleCos'} -> case V2 of {'Data.Vect.::', V451, V452} -> case V452 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"flcos"/utf8>>, V451)) end end; {'Core.TT.DoubleTan'} -> case V2 of {'Data.Vect.::', V453, V454} -> case V454 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"fltan"/utf8>>, V453)) end end; {'Core.TT.DoubleASin'} -> case V2 of {'Data.Vect.::', V455, V456} -> case V456 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"flasin"/utf8>>, V455)) end end; {'Core.TT.DoubleACos'} -> case V2 of {'Data.Vect.::', V457, V458} -> case V458 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"flacos"/utf8>>, V457)) end end; {'Core.TT.DoubleATan'} -> case V2 of {'Data.Vect.::', V459, V460} -> case V460 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"flatan"/utf8>>, V459)) end end; {'Core.TT.DoubleSqrt'} -> case V2 of {'Data.Vect.::', V461, V462} -> case V462 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"flsqrt"/utf8>>, V461)) end end; {'Core.TT.DoubleFloor'} -> case V2 of {'Data.Vect.::', V463, V464} -> case V464 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"flfloor"/utf8>>, V463)) end end; {'Core.TT.DoubleCeiling'} -> case V2 of {'Data.Vect.::', V465, V466} -> case V466 of {'Data.Vect.Nil'} -> ('un--unaryOp'(V0, <<"flceiling"/utf8>>, V465)) end end; {'Core.TT.Cast', V467, V468} -> case V2 of {'Data.Vect.::', V469, V470} -> case V470 of {'Data.Vect.Nil'} -> ('un--applyCast'(V0, V467, V468, V469)) end end; {'Core.TT.BelieveMe'} -> case V2 of {'Data.Vect.::', V471, V472} -> case V472 of {'Data.Vect.::', V473, V474} -> case V474 of {'Data.Vect.::', V475, V476} -> case V476 of {'Data.Vect.Nil'} -> V475 end end end end; {'Core.TT.Crash'} -> case V2 of {'Data.Vect.::', V477, V478} -> case V478 of {'Data.Vect.::', V479, V480} -> case V480 of {'Data.Vect.Nil'} -> V0 end end end end.
'un--applyIntCast'(V0, V1, V2) -> case V1 of {'Core.TT.Signed', V3} -> case V3 of {'Core.TT.Unlimited'} -> V2; _ -> case V0 of {'Core.TT.Signed', V4} -> case V1 of {'Core.TT.Signed', V5} -> case V5 of {'Core.TT.P', V6} -> begin (V7 = {'Core.TT.Signed', {'Core.TT.P', V6}}), case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'({'Core.TT.P', V6}, V4)) of 1 -> V2; 0 -> ('un--wrap'(V7, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-cast-signed"/utf8>>}, [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V8 = (V6 - 1)), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end)) | []]]})) end end end; {'Core.TT.Unsigned', V9} -> ('un--wrap'(V1, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V11 = fun (V10) -> V10 end), fun (V12) -> (V11(V12)) end end(<<"ct-cast-unsigned"/utf8>>))}, [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V9)) | []]]})) end; {'Core.TT.Unsigned', V13} -> case V1 of {'Core.TT.Signed', V14} -> case V14 of {'Core.TT.P', V15} -> begin (V16 = {'Core.TT.Signed', {'Core.TT.P', V15}}), case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V15, V13)) of 1 -> V2; 0 -> ('un--wrap'(V16, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-cast-signed"/utf8>>}, [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V17 = (V15 - 1)), case ((V17 band 9223372036854775808) =/= 0) of 'true' -> (V17 bor -9223372036854775808); _ -> (V17 band 9223372036854775807) end end)) | []]]})) end end end; {'Core.TT.Unsigned', V18} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V18, V13)) of 1 -> V2; 0 -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-cast-unsigned"/utf8>>}, [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V18)) | []]]} end end end end; _ -> case V0 of {'Core.TT.Signed', V19} -> case V1 of {'Core.TT.Signed', V20} -> case V20 of {'Core.TT.P', V21} -> begin (V22 = {'Core.TT.Signed', {'Core.TT.P', V21}}), case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'({'Core.TT.P', V21}, V19)) of 1 -> V2; 0 -> ('un--wrap'(V22, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-cast-signed"/utf8>>}, [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V23 = (V21 - 1)), case ((V23 band 9223372036854775808) =/= 0) of 'true' -> (V23 bor -9223372036854775808); _ -> (V23 band 9223372036854775807) end end)) | []]]})) end end end; {'Core.TT.Unsigned', V24} -> ('un--wrap'(V1, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V26 = fun (V25) -> V25 end), fun (V27) -> (V26(V27)) end end(<<"ct-cast-unsigned"/utf8>>))}, [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V24)) | []]]})) end; {'Core.TT.Unsigned', V28} -> case V1 of {'Core.TT.Signed', V29} -> case V29 of {'Core.TT.P', V30} -> begin (V31 = {'Core.TT.Signed', {'Core.TT.P', V30}}), case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V30, V28)) of 1 -> V2; 0 -> ('un--wrap'(V31, {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-cast-signed"/utf8>>}, [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V32 = (V30 - 1)), case ((V32 band 9223372036854775808) =/= 0) of 'true' -> (V32 bor -9223372036854775808); _ -> (V32 band 9223372036854775807) end end)) | []]]})) end end end; {'Core.TT.Unsigned', V33} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V33, V28)) of 1 -> V2; 0 -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-cast-unsigned"/utf8>>}, [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V33)) | []]]} end end end end.
'un--applyCast'(V0, V1, V2, V3) -> case V1 of 11 -> ('un--canonical'(V0, {'Data.Vect.::', V3, {'Data.Vect.Nil'}}, ('case--applyCast-3905'(V3, V2, V0, ('Idris.Idris2.Core.TT':'un--intKind'(V2)))))); _ -> case V2 of 11 -> ('un--canonical'(V0, {'Data.Vect.::', V3, {'Data.Vect.Nil'}}, case ('Idris.Idris2.Core.TT':'un--intKind'(V1)) of {'Prelude.Types.Nothing'} -> V0; {'Prelude.Types.Just', V4} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-cast-int-char"/utf8>>}, [V3 | []]} end)); _ -> case V1 of 10 -> ('un--canonical'(V0, {'Data.Vect.::', V3, {'Data.Vect.Nil'}}, ('case--applyCast-4062'(V3, V2, V0, ('Idris.Idris2.Core.TT':'un--intKind'(V2)))))); _ -> case V2 of 10 -> ('un--canonical'(V0, {'Data.Vect.::', V3, {'Data.Vect.Nil'}}, case ('Idris.Idris2.Core.TT':'un--intKind'(V1)) of {'Prelude.Types.Nothing'} -> case V1 of 12 -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V6 = fun (V5) -> V5 end), fun (V7) -> (V6(V7)) end end(<<"number->string"/utf8>>))}, [V3 | []]}; _ -> V0 end; {'Prelude.Types.Just', V8} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-cast-number-string"/utf8>>}, [V3 | []]} end)); _ -> case V1 of 12 -> ('un--canonical'(V0, {'Data.Vect.::', V3, {'Data.Vect.Nil'}}, ('case--applyCast-4243'(V3, V2, V0, ('Idris.Idris2.Core.TT':'un--intKind'(V2)))))); _ -> case V2 of 12 -> ('un--canonical'(V0, {'Data.Vect.::', V3, {'Data.Vect.Nil'}}, case ('Idris.Idris2.Core.TT':'un--intKind'(V1)) of {'Prelude.Types.Nothing'} -> case V1 of 10 -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V10 = fun (V9) -> V9 end), fun (V11) -> (V10(V11)) end end(<<"ct-cast-string-double"/utf8>>))}, [V3 | []]}; _ -> V0 end; {'Prelude.Types.Just', V12} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-int-double"/utf8>>}, [V3 | []]} end)); _ -> ('un--canonical'(V0, {'Data.Vect.::', V3, {'Data.Vect.Nil'}}, case ('Idris.Idris2.Core.TT':'un--intKind'(V1)) of {'Prelude.Types.Just', V13} -> case ('Idris.Idris2.Core.TT':'un--intKind'(V2)) of {'Prelude.Types.Just', V14} -> ('un--applyIntCast'(V13, V14, V3)); _ -> V0 end; _ -> V0 end)) end end end end end end.
'un--add'(V0, V1, V2) -> case V0 of {'Prelude.Types.Just', V3} -> case V3 of {'Core.TT.Signed', V4} -> case V4 of {'Core.TT.P', V5} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-s+"/utf8>>}, [V1 | [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(begin (V6 = (V5 - 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)) | []]]]}; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct+"/utf8>>}, [V1 | [V2 | []]]} end; {'Core.TT.Unsigned', V7} -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-u+"/utf8>>}, [V1 | [V2 | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V7)) | []]]]}; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct+"/utf8>>}, [V1 | [V2 | []]]} end; _ -> {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct+"/utf8>>}, [V1 | [V2 | []]]} end.
