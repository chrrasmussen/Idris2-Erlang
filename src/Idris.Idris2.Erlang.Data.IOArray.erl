-module('Idris.Idris2.Erlang.Data.IOArray').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--4788-4180--in--un--iter'/5,
  'nested--4594-3997--in--un--copyFrom'/6,
  'nested--4894-4282--in--un--addToArray'/5,
  'un--writeArray'/4,
  'un--toList'/2,
  'un--readArray'/3,
  'un--prim__newArray'/3,
  'un--prim__arraySet'/4,
  'un--prim__arrayGet'/3,
  'un--newArrayCopy'/3,
  'un--newArray'/2,
  'un--max'/1,
  'un--fromList'/2
]).
'nested--4788-4180--in--un--iter'(V0, V1, V2, V3, V4) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2, V3)) of 1 -> case V0 of {'Prelude.IO.MkHasIO', V5, V6} -> case V5 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> case V7 of {'Prelude.Interfaces.MkApplicative', V10, V11, V12} -> ((V11('erased'))(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V4)))) end end end; 0 -> case V0 of {'Prelude.IO.MkHasIO', V13, V14} -> case V13 of {'Prelude.Interfaces.MkMonad', V15, V16, V17} -> ((((V16('erased'))('erased'))(('un--readArray'(V0, V1, V2))))(fun (V18) -> ('nested--4788-4180--in--un--iter'(V0, V1, begin (V19 = (V2 + 1)), case ((V19 band 9223372036854775808) =/= 0) of 'true' -> (V19 bor -9223372036854775808); _ -> (V19 band 9223372036854775807) end end, V3, [V18 | V4])) end)) end end end.
'nested--4594-3997--in--un--copyFrom'(V0, V1, V2, V3, V4, V5) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5, begin (V6 = 0), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)) of 1 -> case V0 of {'Prelude.IO.MkHasIO', V7, V8} -> case V7 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> ((V13('erased'))({'Builtin.MkUnit'})) end end end; 0 -> case V0 of {'Prelude.IO.MkHasIO', V15, V16} -> case V15 of {'Prelude.Interfaces.MkMonad', V17, V18, V19} -> ((((V18('erased'))('erased'))(('un--prim__arrayGet'(V0, V3, V5))))(fun (V20) -> case V0 of {'Prelude.IO.MkHasIO', V21, V22} -> case V21 of {'Prelude.Interfaces.MkMonad', V23, V24, V25} -> ((((V24('erased'))('erased'))(('un--prim__arraySet'(V0, V4, V5, V20))))(fun (V26) -> ('nested--4594-3997--in--un--copyFrom'(V0, V1, V2, V3, V4, begin (V27 = (V5 - 1)), case ((V27 band 9223372036854775808) =/= 0) of 'true' -> (V27 bor -9223372036854775808); _ -> (V27 band 9223372036854775807) end end)) end)) end end end)) end end end.
'nested--4894-4282--in--un--addToArray'(V0, V1, V2, V3, V4) -> case V3 of [] -> case V0 of {'Prelude.IO.MkHasIO', V5, V6} -> case V5 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> case V7 of {'Prelude.Interfaces.MkApplicative', V10, V11, V12} -> ((V11('erased'))({'Builtin.MkUnit'})) end end end; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Prelude.Types.Nothing'} -> ('nested--4894-4282--in--un--addToArray'(V0, V1, begin (V15 = (V2 + 1)), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end, V14, V4)); {'Prelude.Types.Just', V16} -> case V0 of {'Prelude.IO.MkHasIO', V17, V18} -> case V17 of {'Prelude.Interfaces.MkMonad', V19, V20, V21} -> ((((V20('erased'))('erased'))(('un--prim__arraySet'(V0, case V4 of {'Erlang.Data.IOArray.MkIOArray', V24, V25} -> V25 end, V2, {'Prelude.Types.Just', V16}))))(fun (V22) -> ('nested--4894-4282--in--un--addToArray'(V0, V1, begin (V23 = (V2 + 1)), case ((V23 band 9223372036854775808) =/= 0) of 'true' -> (V23 bor -9223372036854775808); _ -> (V23 band 9223372036854775807) end end, V14, V4)) end)) end end end end(E0, E1)) end.
'un--writeArray'(V0, V1, V2, V3) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, begin (V4 = 0), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2, ('un--max'(V1)))) end of 1 -> case V0 of {'Prelude.IO.MkHasIO', V5, V6} -> case V5 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> case V7 of {'Prelude.Interfaces.MkApplicative', V10, V11, V12} -> ((V11('erased'))({'Builtin.MkUnit'})) end end end; 0 -> ('un--prim__arraySet'(V0, case V1 of {'Erlang.Data.IOArray.MkIOArray', V13, V14} -> V14 end, V2, {'Prelude.Types.Just', V3})) end.
'un--toList'(V0, V1) -> ('nested--4788-4180--in--un--iter'(V0, V1, 0, ('un--max'(V1)), [])).
'un--readArray'(V0, V1, V2) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, begin (V3 = 0), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2, ('un--max'(V1)))) end of 1 -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> case V6 of {'Prelude.Interfaces.MkApplicative', V9, V10, V11} -> ((V10('erased'))({'Prelude.Types.Nothing'})) end end end; 0 -> ('un--prim__arrayGet'(V0, case V1 of {'Erlang.Data.IOArray.MkIOArray', V12, V13} -> V13 end, V2)) end.
'un--prim__newArray'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V23, V24} -> case V23 of {'Prelude.Interfaces.MkMonad', V25, V26, V27} -> case V25 of {'Prelude.Interfaces.MkApplicative', V28, V29, V30} -> ((V29('erased'))(('erlang':'apply'('array', 'new', [V1 | [{'default', V2} | []]])))) end end end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> ((((V12('erased'))('erased'))(('Idris.Idris2.Data.IORef':'un--newIORef'(V0, V8))))(fun (V14) -> case V0 of {'Prelude.IO.MkHasIO', V15, V16} -> case V15 of {'Prelude.Interfaces.MkMonad', V17, V18, V19} -> case V17 of {'Prelude.Interfaces.MkApplicative', V20, V21, V22} -> ((V21('erased'))(V14)) end end end end)) end end end)) end end.
'un--prim__arraySet'(V0, V1, V2, V3) -> begin (V4 = V1), case V0 of {'Prelude.IO.MkHasIO', V5, V6} -> case V5 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> ((((V8('erased'))('erased'))(begin (V29 = V4), case V0 of {'Prelude.IO.MkHasIO', V30, V31} -> ((V31('erased'))(fun (V32) -> ('erlang':'get'(V29)) end)) end end))(fun (V10) -> case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> ((((V14('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V21, V22} -> case V21 of {'Prelude.Interfaces.MkMonad', V23, V24, V25} -> case V23 of {'Prelude.Interfaces.MkApplicative', V26, V27, V28} -> ((V27('erased'))(('erlang':'apply'('array', 'set', [V2 | [V3 | [V10 | []]]])))) end end end))(fun (V16) -> begin (V17 = V4), case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> ((V19('erased'))(fun (V20) -> ('erlang':'put'(V17, V16)) end)) end end end)) end end end)) end end end.
'un--prim__arrayGet'(V0, V1, V2) -> begin (V3 = V1), case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(begin (V33 = V3), case V0 of {'Prelude.IO.MkHasIO', V34, V35} -> ((V35('erased'))(fun (V36) -> ('erlang':'get'(V33)) end)) end end))(fun (V9) -> case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> ((((V13('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V25, V26} -> case V25 of {'Prelude.Interfaces.MkMonad', V27, V28, V29} -> case V27 of {'Prelude.Interfaces.MkApplicative', V30, V31, V32} -> ((V31('erased'))(('erlang':'apply'('array', 'get', [V2 | [V9 | []]])))) end end end))(fun (V15) -> begin (V16 = V15), case V0 of {'Prelude.IO.MkHasIO', V17, V18} -> case V17 of {'Prelude.Interfaces.MkMonad', V19, V20, V21} -> case V19 of {'Prelude.Interfaces.MkApplicative', V22, V23, V24} -> ((V23('erased'))(V16)) end end end end end)) end end end)) end end end.
'un--newArrayCopy'(V0, V1, V2) -> begin (V3 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1, ('un--max'(V2)))) of 1 -> ('un--max'(V2)); 0 -> V1 end), case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(('un--newArray'(V0, V3))))(fun (V9) -> case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> ((((V13('erased'))('erased'))(('nested--4594-3997--in--un--copyFrom'(V0, V2, V1, case V2 of {'Erlang.Data.IOArray.MkIOArray', V24, V25} -> V25 end, case V9 of {'Erlang.Data.IOArray.MkIOArray', V26, V27} -> V27 end, begin (V29 = (('un--max'(V2)) - begin (V28 = 1), case ((V28 band 9223372036854775808) =/= 0) of 'true' -> (V28 bor -9223372036854775808); _ -> (V28 band 9223372036854775807) end end)), case ((V29 band 9223372036854775808) =/= 0) of 'true' -> (V29 bor -9223372036854775808); _ -> (V29 band 9223372036854775807) end end))))(fun (V15) -> case V0 of {'Prelude.IO.MkHasIO', V16, V17} -> case V16 of {'Prelude.Interfaces.MkMonad', V18, V19, V20} -> case V18 of {'Prelude.Interfaces.MkApplicative', V21, V22, V23} -> ((V22('erased'))(V9)) end end end end)) end end end)) end end end.
'un--newArray'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(('un--prim__newArray'(V0, V1, {'Prelude.Types.Nothing'}))))(fun (V7) -> case V0 of {'Prelude.IO.MkHasIO', V8, V9} -> case V8 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> ((V14('erased'))({'Erlang.Data.IOArray.MkIOArray', V1, V7})) end end end end)) end end.
'un--max'(V0) -> case V0 of {'Erlang.Data.IOArray.MkIOArray', V1, V2} -> V1 end.
'un--fromList'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(('un--newArray'(V0, begin (V22 = ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V1))), case ((V22 band 9223372036854775808) =/= 0) of 'true' -> (V22 bor -9223372036854775808); _ -> (V22 band 9223372036854775807) end end))))(fun (V7) -> case V0 of {'Prelude.IO.MkHasIO', V8, V9} -> case V8 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> ((((V11('erased'))('erased'))(('nested--4894-4282--in--un--addToArray'(V0, V1, 0, V1, V7))))(fun (V13) -> case V0 of {'Prelude.IO.MkHasIO', V14, V15} -> case V14 of {'Prelude.Interfaces.MkMonad', V16, V17, V18} -> case V16 of {'Prelude.Interfaces.MkApplicative', V19, V20, V21} -> ((V20('erased'))(V7)) end end end end)) end end end)) end end.
