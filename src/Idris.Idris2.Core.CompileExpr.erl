-module('Idris.Idris2.Core.CompileExpr').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--find-6180'/5,
  'nested--6392-4138--in--un--showFlag'/6,
  'nested--6064-3904--in--un--showFlag'/6,
  'dn--un--weaken_Weaken_CExp'/1,
  'dn--un--weaken_Weaken_CConAlt'/1,
  'dn--un--weakenNs_Weaken_CExp'/2,
  'dn--un--weakenNs_Weaken_CConAlt'/2,
  'dn--un--show_Show_NamedDef'/1,
  'dn--un--show_Show_NamedConstAlt'/1,
  'dn--un--show_Show_NamedConAlt'/1,
  'dn--un--show_Show_NamedCExp'/1,
  'dn--un--show_Show_ConInfo'/1,
  'dn--un--show_Show_CFType'/1,
  'dn--un--show_Show_CDef'/1,
  'dn--un--show_Show_(CExp $vars)'/2,
  'dn--un--showPrec_Show_NamedDef'/2,
  'dn--un--showPrec_Show_NamedConstAlt'/2,
  'dn--un--showPrec_Show_NamedConAlt'/2,
  'dn--un--showPrec_Show_NamedCExp'/2,
  'dn--un--showPrec_Show_ConInfo'/2,
  'dn--un--showPrec_Show_CFType'/2,
  'dn--un--showPrec_Show_CDef'/2,
  'dn--un--showPrec_Show_(CExp $vars)'/3,
  'dn--un--__Impl_Weaken_CExp'/0,
  'dn--un--__Impl_Weaken_CConAlt'/0,
  'dn--un--__Impl_Show_NamedDef'/0,
  'dn--un--__Impl_Show_NamedConstAlt'/0,
  'dn--un--__Impl_Show_NamedConAlt'/0,
  'dn--un--__Impl_Show_NamedCExp'/0,
  'dn--un--__Impl_Show_ConInfo'/0,
  'dn--un--__Impl_Show_CFType'/0,
  'dn--un--__Impl_Show_CDef'/0,
  'dn--un--__Impl_Show_(CExp $vars)'/1,
  'dn--un--__Impl_Eq_InlineOk'/0,
  'dn--un--__Impl_Eq_ConInfo'/0,
  'dn--un--==_Eq_InlineOk'/2,
  'dn--un--==_Eq_ConInfo'/2,
  'dn--un--/=_Eq_InlineOk'/2,
  'dn--un--/=_Eq_ConInfo'/2,
  'un--uniqueName'/2,
  'un--tryNext'/1,
  'un--substs'/4,
  'un--substEnv'/3,
  'un--substConstAlt'/3,
  'un--substConAlt'/3,
  'un--shrinkConstAlt'/2,
  'un--shrinkConAlt'/2,
  'un--shrinkCExp'/2,
  'un--resolveRef'/5,
  'un--refsToLocals'/2,
  'un--mkLocalsConstAlt'/3,
  'un--mkLocalsConAlt'/3,
  'un--mkLocals'/3,
  'un--insertNamesConstAlt'/3,
  'un--insertNamesConAlt'/3,
  'un--insertNames'/3,
  'un--getLocName'/2,
  'un--getFC'/1,
  'un--forgetExp'/2,
  'un--forgetDef'/1,
  'un--forgetConstAlt'/2,
  'un--forgetConAlt'/2,
  'un--forget'/2,
  'un--findDrop'/3,
  'un--find'/4,
  'un--embed'/1,
  'un--elem'/2,
  'un--conArgs'/2,
  'un--addLocs'/2
]).
'case--find-6180'(V0, V1, V2, V3, V4) -> begin (V5 = V2), case V5 of 0 -> case V4 of {'Core.TT.SizedView.Z'} -> ('un--findDrop'(V3, V1, V0)); _ -> case V4 of {'Core.TT.SizedView.S', V6} -> begin (V7 = V1), case V7 of 0 -> {'Core.CompileExpr.CLocal', 0, V3}; _ -> begin (V8 = (V7 - 1)), ('dn--un--weaken_Weaken_CExp'(('un--find'(V3, V6, V8, V0)))) end end end end end; _ -> case V4 of {'Core.TT.SizedView.S', V9} -> begin (V10 = V1), case V10 of 0 -> {'Core.CompileExpr.CLocal', 0, V3}; _ -> begin (V11 = (V10 - 1)), ('dn--un--weaken_Weaken_CExp'(('un--find'(V3, V9, V11, V0)))) end end end end end end.
'nested--6392-4138--in--un--showFlag'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.CompileExpr.DATACON'} -> <<""/utf8>>; _ -> <<('dn--un--show_Show_ConInfo'(V5))/binary, <<" "/utf8>>/binary>> end.
'nested--6064-3904--in--un--showFlag'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.CompileExpr.DATACON'} -> <<""/utf8>>; _ -> <<('dn--un--show_Show_ConInfo'(V5))/binary, <<" "/utf8>>/binary>> end.
'dn--un--weaken_Weaken_CExp'(V0) -> ('dn--un--weakenNs_Weaken_CExp'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()))), V0)).
'dn--un--weaken_Weaken_CConAlt'(V0) -> ('dn--un--weakenNs_Weaken_CConAlt'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()))), V0)).
'dn--un--weakenNs_Weaken_CExp'(V0, V1) -> ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)).
'dn--un--weakenNs_Weaken_CConAlt'(V0, V1) -> ('un--insertNamesConAlt'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)).
'dn--un--show_Show_NamedDef'(V0) -> case V0 of {'Core.CompileExpr.MkNmFun', V1, V2} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V4, V5)) end end}, V1))/binary, <<<<": "/utf8>>/binary, ('dn--un--show_Show_NamedCExp'(V2))/binary>>/binary>>; {'Core.CompileExpr.MkNmCon', V6, V7, V8} -> <<<<"Constructor tag "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V10, V11)) end end}, V6))/binary, <<<<" arity "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7))/binary, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V12) -> <<<<" (newtype by "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V12))/binary, <<")"/utf8>>/binary>>/binary>> end end, V8))/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.MkNmForeign', V13, V14, V15} -> <<<<"Foreign call "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V17, V18)) end end}, V13))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V19) -> ('dn--un--show_Show_CFType'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--showPrec_Show_CFType'(V20, V21)) end end}, V14))/binary, <<<<" -> "/utf8>>/binary, ('dn--un--show_Show_CFType'(V15))/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.MkNmError', V22} -> <<<<"Error: "/utf8>>/binary, ('dn--un--show_Show_NamedCExp'(V22))/binary>> end.
'dn--un--show_Show_NamedConstAlt'(V0) -> case V0 of {'Core.CompileExpr.MkNConstAlt', V1, V2} -> <<<<"(%constcase "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_NamedCExp'(V2))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end.
'dn--un--show_Show_NamedConAlt'(V0) -> case V0 of {'Core.CompileExpr.MkNConAlt', V1, V2, V3, V4, V5} -> <<<<"(%concase "/utf8>>/binary, <<('nested--6392-4138--in--un--showFlag'(V5, V4, V3, V2, V1, V2))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V7, V8)) end end}, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V10, V11)) end end}, V4))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_NamedCExp'(V5))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end.
'dn--un--show_Show_NamedCExp'(V0) -> case V0 of {'Core.CompileExpr.NmLocal', V1, V2} -> <<<<"!"/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary>>; {'Core.CompileExpr.NmRef', V3, V4} -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)); {'Core.CompileExpr.NmLam', V5, V6, V7} -> <<<<"(%lam "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_NamedCExp'(V7))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.NmLet', V8, V9, V10, V11} -> <<<<"(%let "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_NamedCExp'(V10))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_NamedCExp'(V11))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.NmApp', V12, V13, V14} -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_NamedCExp'(V13))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V15) -> ('dn--un--show_Show_NamedCExp'(V15)) end, fun (V16) -> fun (V17) -> ('dn--un--showPrec_Show_NamedCExp'(V16, V17)) end end}, V14))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.NmCon', V18, V19, V20, V21, V22} -> <<<<"(%con "/utf8>>/binary, <<('nested--6064-3904--in--un--showFlag'(V18, V22, V21, V20, V19, V20))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V24, V25)) end end}, V21))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V26) -> ('dn--un--show_Show_NamedCExp'(V26)) end, fun (V27) -> fun (V28) -> ('dn--un--showPrec_Show_NamedCExp'(V27, V28)) end end}, V22))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.NmOp', V29, V30, V31, V32} -> <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V31))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Data.Vect':'dn--un--show_Show_((Vect $len) $elem)'({'Prelude.Show.MkShow', fun (V33) -> ('dn--un--show_Show_NamedCExp'(V33)) end, fun (V34) -> fun (V35) -> ('dn--un--showPrec_Show_NamedCExp'(V34, V35)) end end}, V32))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.NmExtPrim', V36, V37, V38} -> <<<<"(%extern "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V37))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V39) -> ('dn--un--show_Show_NamedCExp'(V39)) end, fun (V40) -> fun (V41) -> ('dn--un--showPrec_Show_NamedCExp'(V40, V41)) end end}, V38))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.NmForce', V42, V43, V44} -> <<<<"(%force "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_LazyReason'(V43))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_NamedCExp'(V44))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.NmDelay', V45, V46, V47} -> <<<<"(%delay "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_LazyReason'(V46))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_NamedCExp'(V47))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.NmConCase', V48, V49, V50, V51} -> <<<<"(%case "/utf8>>/binary, <<('dn--un--show_Show_NamedCExp'(V49))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V52) -> ('dn--un--show_Show_NamedConAlt'(V52)) end, fun (V53) -> fun (V54) -> ('dn--un--showPrec_Show_NamedConAlt'(V53, V54)) end end}, V50))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V55) -> ('dn--un--show_Show_NamedCExp'(V55)) end, fun (V56) -> fun (V57) -> ('dn--un--showPrec_Show_NamedCExp'(V56, V57)) end end}, V51))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.NmConstCase', V58, V59, V60, V61} -> <<<<"(%case "/utf8>>/binary, <<('dn--un--show_Show_NamedCExp'(V59))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V62) -> ('dn--un--show_Show_NamedConstAlt'(V62)) end, fun (V63) -> fun (V64) -> ('dn--un--showPrec_Show_NamedConstAlt'(V63, V64)) end end}, V60))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V65) -> ('dn--un--show_Show_NamedCExp'(V65)) end, fun (V66) -> fun (V67) -> ('dn--un--showPrec_Show_NamedCExp'(V66, V67)) end end}, V61))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.NmPrimVal', V68, V69} -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V69)); {'Core.CompileExpr.NmErased', V70} -> <<"___"/utf8>>; {'Core.CompileExpr.NmCrash', V71, V72} -> <<<<"(CRASH "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V72))/binary, <<")"/utf8>>/binary>>/binary>> end.
'dn--un--show_Show_ConInfo'(V0) -> case V0 of {'Core.CompileExpr.DATACON'} -> <<"[datacon]"/utf8>>; {'Core.CompileExpr.TYCON'} -> <<"[tycon]"/utf8>>; {'Core.CompileExpr.NIL'} -> <<"[nil]"/utf8>>; {'Core.CompileExpr.CONS'} -> <<"[cons]"/utf8>>; {'Core.CompileExpr.ENUM', V1} -> <<<<"[enum "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V1))/binary, <<"]"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.NOTHING'} -> <<"[nothing]"/utf8>>; {'Core.CompileExpr.JUST'} -> <<"[just]"/utf8>>; {'Core.CompileExpr.RECORD'} -> <<"[record]"/utf8>>; {'Core.CompileExpr.ZERO'} -> <<"[zero]"/utf8>>; {'Core.CompileExpr.SUCC'} -> <<"[succ]"/utf8>>; {'Core.CompileExpr.UNIT'} -> <<"[unit]"/utf8>> end.
'dn--un--show_Show_CFType'(V0) -> case V0 of {'Core.CompileExpr.CFUnit'} -> <<"Unit"/utf8>>; {'Core.CompileExpr.CFInt'} -> <<"Int"/utf8>>; {'Core.CompileExpr.CFInteger'} -> <<"Integer"/utf8>>; {'Core.CompileExpr.CFInt8'} -> <<"Int_8"/utf8>>; {'Core.CompileExpr.CFInt16'} -> <<"Int_16"/utf8>>; {'Core.CompileExpr.CFInt32'} -> <<"Int_32"/utf8>>; {'Core.CompileExpr.CFInt64'} -> <<"Int_64"/utf8>>; {'Core.CompileExpr.CFUnsigned8'} -> <<"Bits_8"/utf8>>; {'Core.CompileExpr.CFUnsigned16'} -> <<"Bits_16"/utf8>>; {'Core.CompileExpr.CFUnsigned32'} -> <<"Bits_32"/utf8>>; {'Core.CompileExpr.CFUnsigned64'} -> <<"Bits_64"/utf8>>; {'Core.CompileExpr.CFString'} -> <<"String"/utf8>>; {'Core.CompileExpr.CFDouble'} -> <<"Double"/utf8>>; {'Core.CompileExpr.CFChar'} -> <<"Char"/utf8>>; {'Core.CompileExpr.CFPtr'} -> <<"Ptr"/utf8>>; {'Core.CompileExpr.CFGCPtr'} -> <<"GCPtr"/utf8>>; {'Core.CompileExpr.CFBuffer'} -> <<"Buffer"/utf8>>; {'Core.CompileExpr.CFForeignObj'} -> <<"ForeignObj"/utf8>>; {'Core.CompileExpr.CFWorld'} -> <<"%World"/utf8>>; {'Core.CompileExpr.CFFun', V1, V2} -> <<('dn--un--show_Show_CFType'(V1))/binary, <<<<" -> "/utf8>>/binary, ('dn--un--show_Show_CFType'(V2))/binary>>/binary>>; {'Core.CompileExpr.CFIORes', V3} -> <<<<"IORes "/utf8>>/binary, ('dn--un--show_Show_CFType'(V3))/binary>>; {'Core.CompileExpr.CFStruct', V4, V5} -> <<<<"struct "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V4))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V8, V9)) end end}, {'Prelude.Show.MkShow', fun (V10) -> ('dn--un--show_Show_CFType'(V10)) end, fun (V11) -> fun (V12) -> ('dn--un--showPrec_Show_CFType'(V11, V12)) end end}}, V6)) end))(V5))))/binary>>/binary>>/binary>>; {'Core.CompileExpr.CFUser', V20, V21} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> ('dn--un--show_Show_CFType'(V22)) end))(V21))))/binary>>/binary>> end.
'dn--un--show_Show_CDef'(V0) -> case V0 of {'Core.CompileExpr.MkFun', V1, V2} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V4, V5)) end end}, V1))/binary, <<<<": "/utf8>>/binary, ('dn--un--show_Show_(CExp $vars)'(V1, V2))/binary>>/binary>>; {'Core.CompileExpr.MkCon', V6, V7, V8} -> <<<<"Constructor tag "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V10, V11)) end end}, V6))/binary, <<<<" arity "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7))/binary, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V12) -> <<<<" (newtype by "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V12))/binary, <<")"/utf8>>/binary>>/binary>> end end, V8))/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.MkForeign', V13, V14, V15} -> <<<<"Foreign call "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V17, V18)) end end}, V13))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V19) -> ('dn--un--show_Show_CFType'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--showPrec_Show_CFType'(V20, V21)) end end}, V14))/binary, <<<<" -> "/utf8>>/binary, ('dn--un--show_Show_CFType'(V15))/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.CompileExpr.MkError', V22} -> <<<<"Error: "/utf8>>/binary, ('dn--un--show_Show_(CExp $vars)'([], V22))/binary>> end.
'dn--un--show_Show_(CExp $vars)'(V0, V1) -> ('dn--un--show_Show_NamedCExp'(('un--forget'(V0, V1)))).
'dn--un--showPrec_Show_NamedDef'(V0, V1) -> ('dn--un--show_Show_NamedDef'(V1)).
'dn--un--showPrec_Show_NamedConstAlt'(V0, V1) -> ('dn--un--show_Show_NamedConstAlt'(V1)).
'dn--un--showPrec_Show_NamedConAlt'(V0, V1) -> ('dn--un--show_Show_NamedConAlt'(V1)).
'dn--un--showPrec_Show_NamedCExp'(V0, V1) -> ('dn--un--show_Show_NamedCExp'(V1)).
'dn--un--showPrec_Show_ConInfo'(V0, V1) -> ('dn--un--show_Show_ConInfo'(V1)).
'dn--un--showPrec_Show_CFType'(V0, V1) -> ('dn--un--show_Show_CFType'(V1)).
'dn--un--showPrec_Show_CDef'(V0, V1) -> ('dn--un--show_Show_CDef'(V1)).
'dn--un--showPrec_Show_(CExp $vars)'(V0, V1, V2) -> ('dn--un--show_Show_(CExp $vars)'(V0, V2)).
'dn--un--__Impl_Weaken_CExp'() -> {'Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_CExp'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_CExp'(V5, V6)) end end end end}.
'dn--un--__Impl_Weaken_CConAlt'() -> {'Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_CConAlt'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_CConAlt'(V5, V6)) end end end end}.
'dn--un--__Impl_Show_NamedDef'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_NamedDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_NamedDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_NamedConstAlt'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_NamedConstAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_NamedConstAlt'(V1, V2)) end end}.
'dn--un--__Impl_Show_NamedConAlt'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_NamedConAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_NamedConAlt'(V1, V2)) end end}.
'dn--un--__Impl_Show_NamedCExp'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_NamedCExp'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_NamedCExp'(V1, V2)) end end}.
'dn--un--__Impl_Show_ConInfo'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ConInfo'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ConInfo'(V1, V2)) end end}.
'dn--un--__Impl_Show_CFType'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_CFType'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_CFType'(V1, V2)) end end}.
'dn--un--__Impl_Show_CDef'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_CDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_CDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_(CExp $vars)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(CExp $vars)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(CExp $vars)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Eq_InlineOk'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_InlineOk'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_InlineOk'(V2, V3)) end end}.
'dn--un--__Impl_Eq_ConInfo'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_ConInfo'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_ConInfo'(V2, V3)) end end}.
'dn--un--==_Eq_InlineOk'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_ConInfo'(V0, V1) -> case V0 of {'Core.CompileExpr.DATACON'} -> case V1 of {'Core.CompileExpr.DATACON'} -> 1; _ -> 0 end; {'Core.CompileExpr.TYCON'} -> case V1 of {'Core.CompileExpr.TYCON'} -> 1; _ -> 0 end; {'Core.CompileExpr.NIL'} -> case V1 of {'Core.CompileExpr.NIL'} -> 1; _ -> 0 end; {'Core.CompileExpr.CONS'} -> case V1 of {'Core.CompileExpr.CONS'} -> 1; _ -> 0 end; {'Core.CompileExpr.ENUM', V2} -> case V1 of {'Core.CompileExpr.ENUM', V3} -> case (V2 =:= V3) of 'false' -> 0; _ -> 1 end; _ -> 0 end; {'Core.CompileExpr.NOTHING'} -> case V1 of {'Core.CompileExpr.NOTHING'} -> 1; _ -> 0 end; {'Core.CompileExpr.JUST'} -> case V1 of {'Core.CompileExpr.JUST'} -> 1; _ -> 0 end; {'Core.CompileExpr.RECORD'} -> case V1 of {'Core.CompileExpr.RECORD'} -> 1; _ -> 0 end; {'Core.CompileExpr.ZERO'} -> case V1 of {'Core.CompileExpr.ZERO'} -> 1; _ -> 0 end; {'Core.CompileExpr.SUCC'} -> case V1 of {'Core.CompileExpr.SUCC'} -> 1; _ -> 0 end; {'Core.CompileExpr.UNIT'} -> case V1 of {'Core.CompileExpr.UNIT'} -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_InlineOk'(V0, V1) -> case ('dn--un--==_Eq_InlineOk'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_ConInfo'(V0, V1) -> case ('dn--un--==_Eq_ConInfo'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--uniqueName'(V0, V1) -> case ('un--elem'(V0, V1)) of 1 -> ('un--uniqueName'(('un--tryNext'(V0)), V1)); 0 -> V0 end.
'un--tryNext'(V0) -> case V0 of {'Core.Name.UN', V1} -> {'Core.Name.MN', ('Idris.Idris2.Core.Name':'un--displayUserName'(V1)), 0}; {'Core.Name.MN', V2, V3} -> {'Core.Name.MN', V2, begin (V4 = (V3 + 1)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end}; _ -> {'Core.Name.MN', ('Idris.Idris2.Core.Name':'un--nameRoot'(V0)), 0} end.
'un--substs'(V0, V1, V2, V3) -> ('un--substEnv'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V2, V3)).
'un--substEnv'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.CLocal', V3, V4} -> ('un--find'(V4, V0, V3, V1)); {'Core.CompileExpr.CRef', V5, V6} -> {'Core.CompileExpr.CRef', V5, V6}; {'Core.CompileExpr.CLam', V7, V8, V9} -> begin (V10 = ('un--substEnv'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V9))), {'Core.CompileExpr.CLam', V7, V8, V10} end; {'Core.CompileExpr.CLet', V11, V12, V13, V14, V15} -> begin (V16 = ('un--substEnv'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V15))), {'Core.CompileExpr.CLet', V11, V12, V13, ('un--substEnv'(V0, V1, V14)), V16} end; {'Core.CompileExpr.CApp', V17, V18, V19} -> {'Core.CompileExpr.CApp', V17, ('un--substEnv'(V0, V1, V18)), ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V20) -> ('un--substEnv'(V0, V1, V20)) end))(V19))}; {'Core.CompileExpr.CCon', V28, V29, V30, V31, V32} -> {'Core.CompileExpr.CCon', V28, V29, V30, V31, ((begin (V38 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V36, V37)) end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V33) -> ('un--substEnv'(V0, V1, V33)) end))(V32))}; {'Core.CompileExpr.COp', V41, V42, V43, V44} -> {'Core.CompileExpr.COp', V41, V42, V43, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V45) -> ('un--substEnv'(V0, V1, V45)) end, V44))}; {'Core.CompileExpr.CExtPrim', V46, V47, V48} -> {'Core.CompileExpr.CExtPrim', V46, V47, ((begin (V54 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V52, V53)) end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V49) -> ('un--substEnv'(V0, V1, V49)) end))(V48))}; {'Core.CompileExpr.CForce', V57, V58, V59} -> {'Core.CompileExpr.CForce', V57, V58, ('un--substEnv'(V0, V1, V59))}; {'Core.CompileExpr.CDelay', V60, V61, V62} -> {'Core.CompileExpr.CDelay', V60, V61, ('un--substEnv'(V0, V1, V62))}; {'Core.CompileExpr.CConCase', V63, V64, V65, V66} -> {'Core.CompileExpr.CConCase', V63, ('un--substEnv'(V0, V1, V64)), ((begin (V72 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V70, V71)) end end end end), fun (V73) -> fun (V74) -> ((((V72('erased'))('erased'))(V73))(V74)) end end end(fun (V67) -> ('un--substConAlt'(V0, V1, V67)) end))(V65)), ((begin (V80 = fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V78, V79)) end end end end), fun (V81) -> fun (V82) -> ((((V80('erased'))('erased'))(V81))(V82)) end end end(fun (V75) -> ('un--substEnv'(V0, V1, V75)) end))(V66))}; {'Core.CompileExpr.CConstCase', V83, V84, V85, V86} -> {'Core.CompileExpr.CConstCase', V83, ('un--substEnv'(V0, V1, V84)), ((begin (V92 = fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V90, V91)) end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end(fun (V87) -> ('un--substConstAlt'(V0, V1, V87)) end))(V85)), ((begin (V100 = fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V98, V99)) end end end end), fun (V101) -> fun (V102) -> ((((V100('erased'))('erased'))(V101))(V102)) end end end(fun (V95) -> ('un--substEnv'(V0, V1, V95)) end))(V86))}; {'Core.CompileExpr.CPrimVal', V103, V104} -> {'Core.CompileExpr.CPrimVal', V103, V104}; {'Core.CompileExpr.CErased', V105} -> {'Core.CompileExpr.CErased', V105}; {'Core.CompileExpr.CCrash', V106, V107} -> {'Core.CompileExpr.CCrash', V106, V107} end.
'un--substConstAlt'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.MkConstAlt', V3, V4} -> {'Core.CompileExpr.MkConstAlt', V3, ('un--substEnv'(V0, V1, V4))} end.
'un--substConAlt'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.MkConAlt', V3, V4, V5, V6, V7} -> {'Core.CompileExpr.MkConAlt', V3, V4, V5, V6, ('un--substEnv'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V6)), V0)), V1, V7))} end.
'un--shrinkConstAlt'(V0, V1) -> case V1 of {'Core.CompileExpr.MkConstAlt', V2, V3} -> {'Core.CompileExpr.MkConstAlt', V2, ('un--shrinkCExp'(V0, V3))} end.
'un--shrinkConAlt'(V0, V1) -> case V1 of {'Core.CompileExpr.MkConAlt', V2, V3, V4, V5, V6} -> {'Core.CompileExpr.MkConAlt', V2, V3, V4, V5, ('un--shrinkCExp'(('Idris.Idris2.Core.TT':'un--subExtend'(V5, V0)), V6))} end.
'un--shrinkCExp'(V0, V1) -> case V1 of {'Core.CompileExpr.CLocal', V2, V3} -> case ('Idris.Idris2.Core.TT':'un--subElem'(V2, V0)) of {'Prelude.Types.Nothing'} -> {'Core.CompileExpr.CErased', V3}; {'Prelude.Types.Just', V4} -> begin (V5 = V4), {'Core.CompileExpr.CLocal', V5, V3} end end; {'Core.CompileExpr.CRef', V6, V7} -> {'Core.CompileExpr.CRef', V6, V7}; {'Core.CompileExpr.CLam', V8, V9, V10} -> begin (V11 = ('un--shrinkCExp'({'Core.TT.KeepCons', V0}, V10))), {'Core.CompileExpr.CLam', V8, V9, V11} end; {'Core.CompileExpr.CLet', V12, V13, V14, V15, V16} -> begin (V17 = ('un--shrinkCExp'({'Core.TT.KeepCons', V0}, V16))), {'Core.CompileExpr.CLet', V12, V13, V14, ('un--shrinkCExp'(V0, V15)), V17} end; {'Core.CompileExpr.CApp', V18, V19, V20} -> {'Core.CompileExpr.CApp', V18, ('un--shrinkCExp'(V0, V19)), ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('un--shrinkCExp'(V0, V21)) end))(V20))}; {'Core.CompileExpr.CCon', V29, V30, V31, V32, V33} -> {'Core.CompileExpr.CCon', V29, V30, V31, V32, ((begin (V39 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V37, V38)) end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V34) -> ('un--shrinkCExp'(V0, V34)) end))(V33))}; {'Core.CompileExpr.COp', V42, V43, V44, V45} -> {'Core.CompileExpr.COp', V42, V43, V44, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V46) -> ('un--shrinkCExp'(V0, V46)) end, V45))}; {'Core.CompileExpr.CExtPrim', V47, V48, V49} -> {'Core.CompileExpr.CExtPrim', V47, V48, ((begin (V55 = fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V53, V54)) end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end(fun (V50) -> ('un--shrinkCExp'(V0, V50)) end))(V49))}; {'Core.CompileExpr.CForce', V58, V59, V60} -> {'Core.CompileExpr.CForce', V58, V59, ('un--shrinkCExp'(V0, V60))}; {'Core.CompileExpr.CDelay', V61, V62, V63} -> {'Core.CompileExpr.CDelay', V61, V62, ('un--shrinkCExp'(V0, V63))}; {'Core.CompileExpr.CConCase', V64, V65, V66, V67} -> {'Core.CompileExpr.CConCase', V64, ('un--shrinkCExp'(V0, V65)), ((begin (V73 = fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V71, V72)) end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end(fun (V68) -> ('un--shrinkConAlt'(V0, V68)) end))(V66)), ((begin (V81 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V79, V80)) end end end end), fun (V82) -> fun (V83) -> ((((V81('erased'))('erased'))(V82))(V83)) end end end(fun (V76) -> ('un--shrinkCExp'(V0, V76)) end))(V67))}; {'Core.CompileExpr.CConstCase', V84, V85, V86, V87} -> {'Core.CompileExpr.CConstCase', V84, ('un--shrinkCExp'(V0, V85)), ((begin (V93 = fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V91, V92)) end end end end), fun (V94) -> fun (V95) -> ((((V93('erased'))('erased'))(V94))(V95)) end end end(fun (V88) -> ('un--shrinkConstAlt'(V0, V88)) end))(V86)), ((begin (V101 = fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V99, V100)) end end end end), fun (V102) -> fun (V103) -> ((((V101('erased'))('erased'))(V102))(V103)) end end end(fun (V96) -> ('un--shrinkCExp'(V0, V96)) end))(V87))}; {'Core.CompileExpr.CPrimVal', V104, V105} -> {'Core.CompileExpr.CPrimVal', V104, V105}; {'Core.CompileExpr.CErased', V106} -> {'Core.CompileExpr.CErased', V106}; {'Core.CompileExpr.CCrash', V107, V108} -> {'Core.CompileExpr.CCrash', V107, V108} end.
'un--resolveRef'(V0, V1, V2, V3, V4) -> case V2 of {'Core.TT.Bounds.None'} -> {'Prelude.Types.Nothing'}; {'Core.TT.Bounds.Add', V5, V6, V7} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V6)) of 1 -> begin (V8 = ('Idris.Idris2.Core.TT':'un--weakenNVar'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(V0, V1)), 0))), {'Prelude.Types.Just', {'Core.CompileExpr.CLocal', V8, V3}} end; 0 -> ('un--resolveRef'(V0, ('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V1)), V7, V3, V4)) end end.
'un--refsToLocals'(V0, V1) -> case V0 of {'Core.TT.Bounds.None'} -> V1; _ -> ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)) end.
'un--mkLocalsConstAlt'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.MkConstAlt', V3, V4} -> {'Core.CompileExpr.MkConstAlt', V3, ('un--mkLocals'(V0, V1, V4))} end.
'un--mkLocalsConAlt'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.MkConAlt', V3, V4, V5, V6, V7} -> begin (V8 = V7), {'Core.CompileExpr.MkConAlt', V3, V4, V5, V6, ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V6)), V0)), V1, V8))} end end.
'un--mkLocals'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.CLocal', V3, V4} -> begin (V5 = ('Idris.Idris2.Core.TT':'un--addVars'(V0, V1, V3))), {'Core.CompileExpr.CLocal', V5, V4} end; {'Core.CompileExpr.CRef', V6, V7} -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Core.CompileExpr.CRef', V6, V7} end, fun () -> fun (V8) -> V8 end end, ('un--resolveRef'(V0, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V1, V6, V7)))); {'Core.CompileExpr.CLam', V9, V10, V11} -> begin (V12 = ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V11))), {'Core.CompileExpr.CLam', V9, V10, V12} end; {'Core.CompileExpr.CLet', V13, V14, V15, V16, V17} -> begin (V18 = ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V17))), {'Core.CompileExpr.CLet', V13, V14, V15, ('un--mkLocals'(V0, V1, V16)), V18} end; {'Core.CompileExpr.CApp', V19, V20, V21} -> {'Core.CompileExpr.CApp', V19, ('un--mkLocals'(V0, V1, V20)), ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> ('un--mkLocals'(V0, V1, V22)) end))(V21))}; {'Core.CompileExpr.CCon', V30, V31, V32, V33, V34} -> {'Core.CompileExpr.CCon', V30, V31, V32, V33, ((begin (V40 = fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V38, V39)) end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end(fun (V35) -> ('un--mkLocals'(V0, V1, V35)) end))(V34))}; {'Core.CompileExpr.COp', V43, V44, V45, V46} -> {'Core.CompileExpr.COp', V43, V44, V45, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V47) -> ('un--mkLocals'(V0, V1, V47)) end, V46))}; {'Core.CompileExpr.CExtPrim', V48, V49, V50} -> {'Core.CompileExpr.CExtPrim', V48, V49, ((begin (V56 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V54, V55)) end end end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end(fun (V51) -> ('un--mkLocals'(V0, V1, V51)) end))(V50))}; {'Core.CompileExpr.CForce', V59, V60, V61} -> {'Core.CompileExpr.CForce', V59, V60, ('un--mkLocals'(V0, V1, V61))}; {'Core.CompileExpr.CDelay', V62, V63, V64} -> {'Core.CompileExpr.CDelay', V62, V63, ('un--mkLocals'(V0, V1, V64))}; {'Core.CompileExpr.CConCase', V65, V66, V67, V68} -> {'Core.CompileExpr.CConCase', V65, ('un--mkLocals'(V0, V1, V66)), ((begin (V74 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V72, V73)) end end end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V69) -> ('un--mkLocalsConAlt'(V0, V1, V69)) end))(V67)), ((begin (V82 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V80, V81)) end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V77) -> ('un--mkLocals'(V0, V1, V77)) end))(V68))}; {'Core.CompileExpr.CConstCase', V85, V86, V87, V88} -> {'Core.CompileExpr.CConstCase', V85, ('un--mkLocals'(V0, V1, V86)), ((begin (V94 = fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V92, V93)) end end end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end(fun (V89) -> ('un--mkLocalsConstAlt'(V0, V1, V89)) end))(V87)), ((begin (V102 = fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V100, V101)) end end end end), fun (V103) -> fun (V104) -> ((((V102('erased'))('erased'))(V103))(V104)) end end end(fun (V97) -> ('un--mkLocals'(V0, V1, V97)) end))(V88))}; {'Core.CompileExpr.CPrimVal', V105, V106} -> {'Core.CompileExpr.CPrimVal', V105, V106}; {'Core.CompileExpr.CErased', V107} -> {'Core.CompileExpr.CErased', V107}; {'Core.CompileExpr.CCrash', V108, V109} -> {'Core.CompileExpr.CCrash', V108, V109} end.
'un--insertNamesConstAlt'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.MkConstAlt', V3, V4} -> {'Core.CompileExpr.MkConstAlt', V3, ('un--insertNames'(V0, V1, V4))} end.
'un--insertNamesConAlt'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.MkConAlt', V3, V4, V5, V6, V7} -> begin (V8 = V7), {'Core.CompileExpr.MkConAlt', V3, V4, V5, V6, ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V6)), V0)), V1, V8))} end end.
'un--insertNames'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.CLocal', V3, V4} -> begin (V5 = ('Idris.Idris2.Core.TT':'un--insertNVarNames'(V0, V1, V3))), {'Core.CompileExpr.CLocal', V5, V4} end; {'Core.CompileExpr.CRef', V6, V7} -> {'Core.CompileExpr.CRef', V6, V7}; {'Core.CompileExpr.CLam', V8, V9, V10} -> begin (V11 = ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V10))), {'Core.CompileExpr.CLam', V8, V9, V11} end; {'Core.CompileExpr.CLet', V12, V13, V14, V15, V16} -> begin (V17 = ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V16))), {'Core.CompileExpr.CLet', V12, V13, V14, ('un--insertNames'(V0, V1, V15)), V17} end; {'Core.CompileExpr.CApp', V18, V19, V20} -> {'Core.CompileExpr.CApp', V18, ('un--insertNames'(V0, V1, V19)), ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('un--insertNames'(V0, V1, V21)) end))(V20))}; {'Core.CompileExpr.CCon', V29, V30, V31, V32, V33} -> {'Core.CompileExpr.CCon', V29, V30, V31, V32, ((begin (V39 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V37, V38)) end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V34) -> ('un--insertNames'(V0, V1, V34)) end))(V33))}; {'Core.CompileExpr.COp', V42, V43, V44, V45} -> {'Core.CompileExpr.COp', V42, V43, V44, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V46) -> ('un--insertNames'(V0, V1, V46)) end, V45))}; {'Core.CompileExpr.CExtPrim', V47, V48, V49} -> {'Core.CompileExpr.CExtPrim', V47, V48, ((begin (V55 = fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V53, V54)) end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end(fun (V50) -> ('un--insertNames'(V0, V1, V50)) end))(V49))}; {'Core.CompileExpr.CForce', V58, V59, V60} -> {'Core.CompileExpr.CForce', V58, V59, ('un--insertNames'(V0, V1, V60))}; {'Core.CompileExpr.CDelay', V61, V62, V63} -> {'Core.CompileExpr.CDelay', V61, V62, ('un--insertNames'(V0, V1, V63))}; {'Core.CompileExpr.CConCase', V64, V65, V66, V67} -> {'Core.CompileExpr.CConCase', V64, ('un--insertNames'(V0, V1, V65)), ((begin (V73 = fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V71, V72)) end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end(fun (V68) -> ('un--insertNamesConAlt'(V0, V1, V68)) end))(V66)), ((begin (V81 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V79, V80)) end end end end), fun (V82) -> fun (V83) -> ((((V81('erased'))('erased'))(V82))(V83)) end end end(fun (V76) -> ('un--insertNames'(V0, V1, V76)) end))(V67))}; {'Core.CompileExpr.CConstCase', V84, V85, V86, V87} -> {'Core.CompileExpr.CConstCase', V84, ('un--insertNames'(V0, V1, V85)), ((begin (V93 = fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V91, V92)) end end end end), fun (V94) -> fun (V95) -> ((((V93('erased'))('erased'))(V94))(V95)) end end end(fun (V88) -> ('un--insertNamesConstAlt'(V0, V1, V88)) end))(V86)), ((begin (V101 = fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V99, V100)) end end end end), fun (V102) -> fun (V103) -> ((((V101('erased'))('erased'))(V102))(V103)) end end end(fun (V96) -> ('un--insertNames'(V0, V1, V96)) end))(V87))}; {'Core.CompileExpr.CPrimVal', V104, V105} -> {'Core.CompileExpr.CPrimVal', V104, V105}; {'Core.CompileExpr.CErased', V106} -> {'Core.CompileExpr.CErased', V106}; {'Core.CompileExpr.CCrash', V107, V108} -> {'Core.CompileExpr.CCrash', V107, V108} end.
'un--getLocName'(V0, V1) -> case V0 of 0 -> case V1 of {'Core.CompileExpr.::', V2, V3} -> V2 end; _ -> begin (V4 = (V0 - 1)), case V1 of {'Core.CompileExpr.::', V5, V6} -> ('un--getLocName'(V4, V6)) end end end.
'un--getFC'(V0) -> case V0 of {'Core.CompileExpr.CLocal', V1, V2} -> V2; {'Core.CompileExpr.CRef', V3, V4} -> V3; {'Core.CompileExpr.CLam', V5, V6, V7} -> V5; {'Core.CompileExpr.CLet', V8, V9, V10, V11, V12} -> V8; {'Core.CompileExpr.CApp', V13, V14, V15} -> V13; {'Core.CompileExpr.CCon', V16, V17, V18, V19, V20} -> V16; {'Core.CompileExpr.COp', V21, V22, V23, V24} -> V22; {'Core.CompileExpr.CExtPrim', V25, V26, V27} -> V25; {'Core.CompileExpr.CForce', V28, V29, V30} -> V28; {'Core.CompileExpr.CDelay', V31, V32, V33} -> V31; {'Core.CompileExpr.CConCase', V34, V35, V36, V37} -> V34; {'Core.CompileExpr.CConstCase', V38, V39, V40, V41} -> V38; {'Core.CompileExpr.CPrimVal', V42, V43} -> V42; {'Core.CompileExpr.CErased', V44} -> V44; {'Core.CompileExpr.CCrash', V45, V46} -> V45 end.
'un--forgetExp'(V0, V1) -> case V1 of {'Core.CompileExpr.CLocal', V2, V3} -> {'Core.CompileExpr.NmLocal', V3, ('un--getLocName'(V2, V0))}; {'Core.CompileExpr.CRef', V4, V5} -> {'Core.CompileExpr.NmRef', V4, V5}; {'Core.CompileExpr.CLam', V6, V7, V8} -> begin (V9 = ('un--addLocs'([V7 | []], V0))), {'Core.CompileExpr.NmLam', V6, ('un--getLocName'(0, V9)), ('un--forgetExp'(V9, V8))} end; {'Core.CompileExpr.CLet', V10, V11, V12, V13, V14} -> begin (V15 = ('un--addLocs'([V11 | []], V0))), {'Core.CompileExpr.NmLet', V10, ('un--getLocName'(0, V15)), ('un--forgetExp'(V0, V13)), ('un--forgetExp'(V15, V14))} end; {'Core.CompileExpr.CApp', V16, V17, V18} -> {'Core.CompileExpr.NmApp', V16, ('un--forgetExp'(V0, V17)), ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> ('un--forgetExp'(V0, V19)) end))(V18))}; {'Core.CompileExpr.CCon', V27, V28, V29, V30, V31} -> {'Core.CompileExpr.NmCon', V27, V28, V29, V30, ((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(fun (V32) -> ('un--forgetExp'(V0, V32)) end))(V31))}; {'Core.CompileExpr.COp', V40, V41, V42, V43} -> {'Core.CompileExpr.NmOp', V40, V41, V42, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V44) -> ('un--forgetExp'(V0, V44)) end, V43))}; {'Core.CompileExpr.CExtPrim', V45, V46, V47} -> {'Core.CompileExpr.NmExtPrim', V45, V46, ((begin (V53 = fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V51, V52)) end end end end), fun (V54) -> fun (V55) -> ((((V53('erased'))('erased'))(V54))(V55)) end end end(fun (V48) -> ('un--forgetExp'(V0, V48)) end))(V47))}; {'Core.CompileExpr.CForce', V56, V57, V58} -> {'Core.CompileExpr.NmForce', V56, V57, ('un--forgetExp'(V0, V58))}; {'Core.CompileExpr.CDelay', V59, V60, V61} -> {'Core.CompileExpr.NmDelay', V59, V60, ('un--forgetExp'(V0, V61))}; {'Core.CompileExpr.CConCase', V62, V63, V64, V65} -> {'Core.CompileExpr.NmConCase', V62, ('un--forgetExp'(V0, V63)), ((begin (V71 = fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V69, V70)) end end end end), fun (V72) -> fun (V73) -> ((((V71('erased'))('erased'))(V72))(V73)) end end end(fun (V66) -> ('un--forgetConAlt'(V0, V66)) end))(V64)), ((begin (V79 = fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V77, V78)) end end end end), fun (V80) -> fun (V81) -> ((((V79('erased'))('erased'))(V80))(V81)) end end end(fun (V74) -> ('un--forgetExp'(V0, V74)) end))(V65))}; {'Core.CompileExpr.CConstCase', V82, V83, V84, V85} -> {'Core.CompileExpr.NmConstCase', V82, ('un--forgetExp'(V0, V83)), ((begin (V91 = fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V89, V90)) end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end(fun (V86) -> ('un--forgetConstAlt'(V0, V86)) end))(V84)), ((begin (V99 = fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V97, V98)) end end end end), fun (V100) -> fun (V101) -> ((((V99('erased'))('erased'))(V100))(V101)) end end end(fun (V94) -> ('un--forgetExp'(V0, V94)) end))(V85))}; {'Core.CompileExpr.CPrimVal', V102, V103} -> {'Core.CompileExpr.NmPrimVal', V102, V103}; {'Core.CompileExpr.CErased', V104} -> {'Core.CompileExpr.NmErased', V104}; {'Core.CompileExpr.CCrash', V105, V106} -> {'Core.CompileExpr.NmCrash', V105, V106} end.
'un--forgetDef'(V0) -> case V0 of {'Core.CompileExpr.MkFun', V1, V2} -> begin (V3 = ('un--addLocs'(V1, {'Core.CompileExpr.Nil'}))), begin (V4 = ('un--conArgs'(V1, V3))), {'Core.CompileExpr.MkNmFun', V4, ('un--forget'(V1, V2))} end end; {'Core.CompileExpr.MkCon', V5, V6, V7} -> {'Core.CompileExpr.MkNmCon', V5, V6, V7}; {'Core.CompileExpr.MkForeign', V8, V9, V10} -> {'Core.CompileExpr.MkNmForeign', V8, V9, V10}; {'Core.CompileExpr.MkError', V11} -> {'Core.CompileExpr.MkNmError', ('un--forget'([], V11))} end.
'un--forgetConstAlt'(V0, V1) -> case V1 of {'Core.CompileExpr.MkConstAlt', V2, V3} -> {'Core.CompileExpr.MkNConstAlt', V2, ('un--forgetExp'(V0, V3))} end.
'un--forgetConAlt'(V0, V1) -> case V1 of {'Core.CompileExpr.MkConAlt', V2, V3, V4, V5, V6} -> begin (V7 = ('un--addLocs'(V5, V0))), {'Core.CompileExpr.MkNConAlt', V2, V3, V4, ('un--conArgs'(V5, V7)), ('un--forgetExp'(V7, V6))} end end.
'un--forget'(V0, V1) -> ('un--forgetExp'(('un--addLocs'(V0, {'Core.CompileExpr.Nil'})), V1)).
'un--findDrop'(V0, V1, V2) -> begin (V3 = V1), case V2 of {'Core.CompileExpr.SubstCEnv.Nil'} -> {'Core.CompileExpr.CLocal', V3, V0}; _ -> case V3 of 0 -> case V2 of {'Core.CompileExpr.SubstCEnv.::', V4, V5} -> V4 end; _ -> begin (V6 = (V3 - 1)), case V2 of {'Core.CompileExpr.SubstCEnv.::', V7, V8} -> ('un--findDrop'(V0, V6, V8)) end end end end end.
'un--find'(V0, V1, V2, V3) -> ('case--find-6180'(V3, V2, V1, V0, ('Idris.Idris2.Core.TT':'un--sizedView'(V1)))).
'un--embed'(V0) -> V0.
'un--elem'(V0, V1) -> case V1 of {'Core.CompileExpr.Nil'} -> 0; {'Core.CompileExpr.::', V2, V3} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V2)) of 1 -> 1; 0 -> ('un--elem'(V0, V3)) end end.
'un--conArgs'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Core.CompileExpr.::', V4, V5} -> [V4 | ('un--conArgs'(V3, V5))] end end(E0, E1)) end.
'un--addLocs'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> begin (V4 = ('un--addLocs'(V3, V1))), {'Core.CompileExpr.::', ('un--uniqueName'(V2, V4)), V4} end end(E0, E1)) end.
