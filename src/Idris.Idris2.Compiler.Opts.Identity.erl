-module('Idris.Idris2.Compiler.Opts.Identity').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in rewriteIdentityFlag-3806'/9,
  'case--case block in rewriteIdentityFlag-3737'/7,
  'nested--7622-2462--in--un--makeArgs\x{27}'/3,
  'nested--8956-3687--in--un--isId'/3,
  'nested--7688-3018--in--un--eqArgs'/13,
  'nested--7688-3409--in--un--altEq'/10,
  'nested--7688-3369--in--un--altEq'/10,
  'un--unsuccIdentity'/5,
  'un--setIdentity'/2,
  'un--rewriteIdentityFlag'/2,
  'un--maybeVarEq'/6,
  'un--makeArgs'/1,
  'un--isUnsucc'/4,
  'un--idCDef'/2,
  'un--getArg'/3,
  'un--checkIdentity'/4,
  'un--cexpIdentity'/6,
  'un--calcIdentity'/2
]).
'case--case block in case block in rewriteIdentityFlag-3806'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Prelude.Types.Just', V9} -> begin (V10 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.identity"/utf8>>, 5, fun () -> <<<<"\x{9}new def: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CDef'(V9))/binary>> end))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V27 = begin (V15 = ('Idris.Idris2.Core.Context':'un--unsetFlag'(V0, {'Core.FC.EmptyFC'}, {'Core.Name.Resolved', V3}, V7))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V26 = begin (V20 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, {'Core.FC.EmptyFC'}, {'Core.Name.Resolved', V3}, {'Core.Context.Context.Inline'}))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V25 = ('Idris.Idris2.Core.Context':'un--setCompiled'(V0, {'Core.Name.Resolved', V3}, V9))), V25 end(V21)) end end end end), V26 end(V16)) end end end end), V27 end(V11)) end end end end; {'Prelude.Types.Nothing'} -> fun (V28) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'case--case block in rewriteIdentityFlag-3737'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Prelude.Types.Just', V7} -> case V7 of {'Core.Context.Context.Identity', V8} -> begin (V49 = begin (V9 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V48 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V15 = fun (V14) -> V14 end), fun (V16) -> (V15(V16)) end end(<<"compiler.identity"/utf8>>)), 5, fun () -> <<(begin (V18 = fun (V17) -> V17 end), fun (V19) -> (V18(V19)) end end(<<"found identity flag for: "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13))/binary, <<<<", "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8))/binary, <<(begin (V21 = fun (V20) -> V20 end), fun (V22) -> (V21(V22)) end end(<<"\x{a}\x{9}old def: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CDef'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_CDef'(V24, V25)) end end}, case V4 of {'Core.Context.Context.MkGlobalDef', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V44 end))/binary>>/binary>>/binary>>/binary>>/binary>> end))), V48 end(V10)) end end end end), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V78 = begin (V54 = {'Core.Context.Context.Identity', V8}), ('case--case block in case block in rewriteIdentityFlag-3806'(V0, V1, V2, V3, V4, V5, V8, V54, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(case V4 of {'Core.Context.Context.MkGlobalDef', V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76} -> V73 end, fun (V77) -> ('un--idCDef'(V8, V77)) end)))) end), V78 end(V50)) end end end end; _ -> fun (V79) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; _ -> fun (V80) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'nested--7622-2462--in--un--makeArgs\x{27}'(V0, V1, V2) -> case V1 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> [(V2(0)) | ('nested--7622-2462--in--un--makeArgs\x{27}'(V0, V4, fun (V5) -> (V2(('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V5)))) end))] end(E0, E1)) end.
'nested--8956-3687--in--un--isId'(V0, V1, V2) -> case V2 of {'Core.Context.Context.Identity', V3} -> 1; _ -> 0 end.
'nested--7688-3018--in--un--eqArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of [] -> case V12 of [] -> 1; _ -> 0 end; [E0 | E1] -> (fun (V13, V14) -> case V12 of [E2 | E3] -> (fun (V15, V16) -> case ('un--cexpIdentity'(V0, V1, V13, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V15)) of 1 -> ('nested--7688-3018--in--un--eqArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V16)); 0 -> 0 end end(E2, E3)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--7688-3409--in--un--altEq'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.CompileExpr.MkConstAlt', V10, V11} -> ('un--cexpIdentity'(V0, V1, V8, V7, {'Prelude.Types.Just', V10}, V11)) end.
'nested--7688-3369--in--un--altEq'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.CompileExpr.MkConAlt', V10, V11, V12, V13, V14} -> ('un--cexpIdentity'(V0, V1, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Var'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V13)), V8)), {'Prelude.Types.Just', {'Builtin.MkPair', V10, ('un--makeArgs'(V13))}}, V6, V14)) end.
'un--unsuccIdentity'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.COp', V5, V6, V7, V8} -> case V5 of 0 -> 0; _ -> begin (V9 = (V5 - 1)), case V9 of 0 -> 0; _ -> begin (V10 = (V9 - 1)), case V10 of 0 -> case V7 of {'Core.TT.Add', V11} -> case V8 of {'Data.Vect.::', V12, V13} -> case V13 of {'Data.Vect.::', V14, V15} -> case V14 of {'Core.CompileExpr.CPrimVal', V16, V17} -> case V15 of {'Data.Vect.Nil'} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V2, V17)) of 1 -> ('un--cexpIdentity'(V0, V1, V3, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V12)); 0 -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end end end end end; _ -> 0 end.
'un--setIdentity'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V85 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExactI'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V84 = case V48 of {'Prelude.Types.Just', V49} -> case V49 of {'Builtin.MkPair', V50, V51} -> case ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(case V51 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> V70 end, fun (V74) -> ('un--calcIdentity'(V1, V74)) end)) of {'Prelude.Types.Just', V75} -> begin (V76 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, {'Core.FC.EmptyFC'}, {'Core.Name.Resolved', V50}, {'Core.Context.Context.Identity', V75}))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V81 = ('un--rewriteIdentityFlag'(V0, {'Core.Name.Resolved', V50}))), V81 end(V77)) end end end end; {'Prelude.Types.Nothing'} -> fun (V82) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end; {'Prelude.Types.Nothing'} -> fun (V83) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V84 end(V45)) end end end end), V85 end(V8)) end end end end.
'un--rewriteIdentityFlag'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V78 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExactI'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V77 = case V48 of {'Prelude.Types.Just', V49} -> case V49 of {'Builtin.MkPair', V50, V51} -> begin (V52 = {'Prelude.Types.Just', {'Builtin.MkPair', V50, V51}}), ('case--case block in rewriteIdentityFlag-3737'(V0, V1, V11, V50, V51, V52, ('Idris.Idris2.Data.List':'un--find'(fun (V53) -> ('nested--8956-3687--in--un--isId'(V0, V1, V53)) end, case V51 of {'Core.Context.Context.MkGlobalDef', V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75} -> V65 end)))) end end; {'Prelude.Types.Nothing'} -> fun (V76) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V77 end(V45)) end end end end), V78 end(V8)) end end end end.
'un--maybeVarEq'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Prelude.Types.Nothing'} -> 1; {'Prelude.Types.Just', V6} -> ('un--cexpIdentity'(V0, V1, V2, V3, V4, V6)) end.
'un--makeArgs'(V0) -> ('nested--7622-2462--in--un--makeArgs\x{27}'(V0, V0, fun (V1) -> V1 end)).
'un--isUnsucc'(V0, V1, V2, V3) -> begin (V4 = V2), case V3 of {'Core.CompileExpr.COp', V5, V6, V7, V8} -> case V5 of 0 -> {'Prelude.Types.Nothing'}; _ -> begin (V9 = (V5 - 1)), case V9 of 0 -> {'Prelude.Types.Nothing'}; _ -> begin (V10 = (V9 - 1)), case V10 of 0 -> case V7 of {'Core.TT.Sub', V11} -> case V8 of {'Data.Vect.::', V12, V13} -> case V12 of {'Core.CompileExpr.CLocal', V14, V15} -> case V13 of {'Data.Vect.::', V16, V17} -> case V16 of {'Core.CompileExpr.CPrimVal', V18, V19} -> case V17 of {'Data.Vect.Nil'} -> case case (V4 =:= V14) of 'false' -> 0; _ -> 1 end of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V19, 0}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end end end end; _ -> {'Prelude.Types.Nothing'} end end.
'un--idCDef'(V0, V1) -> case V1 of {'Core.CompileExpr.MkFun', V2, V3} -> ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> {'Core.CompileExpr.MkFun', V2, V4} end))(('un--getArg'(('Idris.Idris2.Core.CompileExpr':'un--getFC'(V3)), V0, V2)))); _ -> {'Prelude.Types.Just', V1} end.
'un--getArg'(V0, V1, V2) -> case V2 of [] -> {'Prelude.Types.Nothing'}; _ -> case V1 of 0 -> case V2 of [E2 | E3] -> (fun (V3, V4) -> {'Prelude.Types.Just', {'Core.CompileExpr.CLocal', 0, V0}} end(E2, E3)) end; _ -> begin (V5 = (V1 - 1)), case V2 of [E0 | E1] -> (fun (V6, V7) -> ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CExp'(V8)) end))(('un--getArg'(V0, V5, V7)))) end(E0, E1)) end end end end.
'un--checkIdentity'(V0, V1, V2, V3) -> case V1 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V4, V5) -> case ('un--cexpIdentity'(V0, V3, V4, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V2)) of 1 -> {'Prelude.Types.Just', V3}; 0 -> ('un--checkIdentity'(V0, V5, V2, (V3 + 1))) end end(E0, E1)) end.
'un--cexpIdentity'(V0, V1, V2, V3, V4, V5) -> begin (V6 = V2), case V5 of {'Core.CompileExpr.CLocal', V7, V8} -> case (V7 =:= V6) of 'false' -> 0; _ -> 1 end; _ -> case V5 of {'Core.CompileExpr.CRef', V9, V10} -> 0; {'Core.CompileExpr.CLam', V11, V12, V13} -> 0; {'Core.CompileExpr.CLet', V14, V15, V16, V17, V18} -> case V16 of 1 -> 0; _ -> case case ('un--isUnsucc'(V0, V1, V2, V17)) of {'Prelude.Types.Just', V19} -> case V19 of {'Builtin.MkPair', V20, V21} -> ('un--unsuccIdentity'(V0, V1, V20, V21, V18)) end; {'Prelude.Types.Nothing'} -> 0 end of 1 -> 1; 0 -> ('un--cexpIdentity'(V0, V1, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V2)), ((begin (V43 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V41, V42)) end end end end), fun (V44) -> fun (V45) -> ((((V43('erased'))('erased'))(V44))(V45)) end end end((begin (V36 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> case V33 of {'Builtin.MkPair', V34, V35} -> {'Builtin.MkPair', V34, (V32(V35))} end end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V22)) end))))))(V3)), V4, V18)) end end; {'Core.CompileExpr.CApp', V46, V47, V48} -> case V47 of {'Core.CompileExpr.CRef', V49, V50} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V50)) of 1 -> (case ('Idris.Idris2.Prelude.Types':'un--getAt'(V1, V48)) of {'Prelude.Types.Just', V51} -> fun () -> ('un--cexpIdentity'(V0, V1, V2, V3, V4, V51)) end; {'Prelude.Types.Nothing'} -> fun () -> 0 end end()); 0 -> 0 end; _ -> 0 end; _ -> case V3 of {'Prelude.Types.Just', V52} -> case V52 of {'Builtin.MkPair', V53, V54} -> case V5 of {'Core.CompileExpr.CCon', V55, V56, V57, V58, V59} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V53, V56)) of 1 -> ('nested--7688-3018--in--un--eqArgs'(V0, V1, V55, V57, V58, V53, V54, V59, V56, V4, V2, V54, V59)); 0 -> 0 end; _ -> case V5 of {'Core.CompileExpr.COp', V60, V61, V62, V63} -> case V60 of 0 -> 0; _ -> begin (V64 = (V60 - 1)), case V64 of 0 -> 0; _ -> begin (V65 = (V64 - 1)), case V65 of 0 -> case V62 of {'Core.TT.Add', V66} -> case V63 of {'Data.Vect.::', V67, V68} -> case V68 of {'Data.Vect.::', V69, V70} -> case V70 of {'Data.Vect.Nil'} -> case V69 of {'Core.CompileExpr.CPrimVal', V71, V72} -> case V67 of {'Core.CompileExpr.CApp', V73, V74, V75} -> case V74 of {'Core.CompileExpr.CRef', V76, V77} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V77)) of 1 -> (case ('Idris.Idris2.Prelude.Types':'un--getAt'(V1, V75)) of {'Prelude.Types.Just', V78} -> case V78 of {'Core.CompileExpr.COp', V79, V80, V81, V82} -> case V79 of 0 -> fun () -> 0 end; _ -> begin (V83 = (V79 - 1)), case V83 of 0 -> fun () -> 0 end; _ -> begin (V84 = (V83 - 1)), case V84 of 0 -> case V81 of {'Core.TT.Sub', V85} -> case V82 of {'Data.Vect.::', V86, V87} -> case V87 of {'Data.Vect.::', V88, V89} -> case V88 of {'Core.CompileExpr.CPrimVal', V90, V91} -> case V89 of {'Data.Vect.Nil'} -> fun () -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V72, V91)) of 1 -> ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V86)); 0 -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end end end end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end()); 0 -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end end end end end; {'Core.CompileExpr.CExtPrim', V92, V93, V94} -> 0; {'Core.CompileExpr.CForce', V95, V96, V97} -> 0; {'Core.CompileExpr.CDelay', V98, V99, V100} -> 0; {'Core.CompileExpr.CConCase', V101, V102, V103, V104} -> case ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V102)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V105, V106)) end end, 1}, fun (V107) -> ('nested--7688-3369--in--un--altEq'(V0, V1, V101, V104, V103, V102, V4, V3, V2, V107)) end, V103)) of 1 -> ('un--maybeVarEq'(V0, V1, V2, V3, V4, V104)); 0 -> 0 end; 0 -> 0 end; {'Core.CompileExpr.CConstCase', V108, V109, V110, V111} -> case ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V109)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V112, V113)) end end, 1}, fun (V114) -> ('nested--7688-3409--in--un--altEq'(V0, V1, V111, V110, V109, V108, V4, V3, V2, V114)) end, V110)) of 1 -> ('un--maybeVarEq'(V0, V1, V2, V3, V4, V111)); 0 -> 0 end; 0 -> 0 end; _ -> case V4 of {'Prelude.Types.Just', V115} -> case V5 of {'Core.CompileExpr.CPrimVal', V116, V117} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V115, V117)); _ -> case V5 of {'Core.CompileExpr.CErased', V118} -> 0; {'Core.CompileExpr.CCrash', V119, V120} -> 0 end end; {'Prelude.Types.Nothing'} -> case V5 of {'Core.CompileExpr.CPrimVal', V121, V122} -> 0; _ -> case V5 of {'Core.CompileExpr.CErased', V123} -> 0; {'Core.CompileExpr.CCrash', V124, V125} -> 0 end end; _ -> case V5 of {'Core.CompileExpr.CErased', V126} -> 0; {'Core.CompileExpr.CCrash', V127, V128} -> 0 end end end end; _ -> case V5 of {'Core.CompileExpr.COp', V129, V130, V131, V132} -> case V129 of 0 -> 0; _ -> begin (V133 = (V129 - 1)), case V133 of 0 -> 0; _ -> begin (V134 = (V133 - 1)), case V134 of 0 -> case V131 of {'Core.TT.Add', V135} -> case V132 of {'Data.Vect.::', V136, V137} -> case V137 of {'Data.Vect.::', V138, V139} -> case V139 of {'Data.Vect.Nil'} -> case V138 of {'Core.CompileExpr.CPrimVal', V140, V141} -> case V136 of {'Core.CompileExpr.CApp', V142, V143, V144} -> case V143 of {'Core.CompileExpr.CRef', V145, V146} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V146)) of 1 -> (case ('Idris.Idris2.Prelude.Types':'un--getAt'(V1, V144)) of {'Prelude.Types.Just', V147} -> case V147 of {'Core.CompileExpr.COp', V148, V149, V150, V151} -> case V148 of 0 -> fun () -> 0 end; _ -> begin (V152 = (V148 - 1)), case V152 of 0 -> fun () -> 0 end; _ -> begin (V153 = (V152 - 1)), case V153 of 0 -> case V150 of {'Core.TT.Sub', V154} -> case V151 of {'Data.Vect.::', V155, V156} -> case V156 of {'Data.Vect.::', V157, V158} -> case V157 of {'Core.CompileExpr.CPrimVal', V159, V160} -> case V158 of {'Data.Vect.Nil'} -> fun () -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V141, V160)) of 1 -> ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V155)); 0 -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end end end end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end()); 0 -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end end end end end; {'Core.CompileExpr.CExtPrim', V161, V162, V163} -> 0; {'Core.CompileExpr.CForce', V164, V165, V166} -> 0; {'Core.CompileExpr.CDelay', V167, V168, V169} -> 0; {'Core.CompileExpr.CConCase', V170, V171, V172, V173} -> case ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V171)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V174) -> fun (V175) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V174, V175)) end end, 1}, fun (V176) -> ('nested--7688-3369--in--un--altEq'(V0, V1, V170, V173, V172, V171, V4, V3, V2, V176)) end, V172)) of 1 -> ('un--maybeVarEq'(V0, V1, V2, V3, V4, V173)); 0 -> 0 end; 0 -> 0 end; {'Core.CompileExpr.CConstCase', V177, V178, V179, V180} -> case ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V178)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V181) -> fun (V182) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V181, V182)) end end, 1}, fun (V183) -> ('nested--7688-3409--in--un--altEq'(V0, V1, V180, V179, V178, V177, V4, V3, V2, V183)) end, V179)) of 1 -> ('un--maybeVarEq'(V0, V1, V2, V3, V4, V180)); 0 -> 0 end; 0 -> 0 end; _ -> case V4 of {'Prelude.Types.Just', V184} -> case V5 of {'Core.CompileExpr.CPrimVal', V185, V186} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V184, V186)); _ -> case V5 of {'Core.CompileExpr.CErased', V187} -> 0; {'Core.CompileExpr.CCrash', V188, V189} -> 0 end end; {'Prelude.Types.Nothing'} -> case V5 of {'Core.CompileExpr.CPrimVal', V190, V191} -> 0; _ -> case V5 of {'Core.CompileExpr.CErased', V192} -> 0; {'Core.CompileExpr.CCrash', V193, V194} -> 0 end end; _ -> case V5 of {'Core.CompileExpr.CErased', V195} -> 0; {'Core.CompileExpr.CCrash', V196, V197} -> 0 end end end end; {'Prelude.Types.Nothing'} -> case V5 of {'Core.CompileExpr.CCon', V198, V199, V200, V201, V202} -> 0; _ -> case V5 of {'Core.CompileExpr.COp', V203, V204, V205, V206} -> case V203 of 0 -> 0; _ -> begin (V207 = (V203 - 1)), case V207 of 0 -> 0; _ -> begin (V208 = (V207 - 1)), case V208 of 0 -> case V205 of {'Core.TT.Add', V209} -> case V206 of {'Data.Vect.::', V210, V211} -> case V211 of {'Data.Vect.::', V212, V213} -> case V213 of {'Data.Vect.Nil'} -> case V212 of {'Core.CompileExpr.CPrimVal', V214, V215} -> case V210 of {'Core.CompileExpr.CApp', V216, V217, V218} -> case V217 of {'Core.CompileExpr.CRef', V219, V220} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V220)) of 1 -> (case ('Idris.Idris2.Prelude.Types':'un--getAt'(V1, V218)) of {'Prelude.Types.Just', V221} -> case V221 of {'Core.CompileExpr.COp', V222, V223, V224, V225} -> case V222 of 0 -> fun () -> 0 end; _ -> begin (V226 = (V222 - 1)), case V226 of 0 -> fun () -> 0 end; _ -> begin (V227 = (V226 - 1)), case V227 of 0 -> case V224 of {'Core.TT.Sub', V228} -> case V225 of {'Data.Vect.::', V229, V230} -> case V230 of {'Data.Vect.::', V231, V232} -> case V231 of {'Core.CompileExpr.CPrimVal', V233, V234} -> case V232 of {'Data.Vect.Nil'} -> fun () -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V215, V234)) of 1 -> ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V229)); 0 -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end end end end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end()); 0 -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end end end end end; {'Core.CompileExpr.CExtPrim', V235, V236, V237} -> 0; {'Core.CompileExpr.CForce', V238, V239, V240} -> 0; {'Core.CompileExpr.CDelay', V241, V242, V243} -> 0; {'Core.CompileExpr.CConCase', V244, V245, V246, V247} -> case ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V245)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V248, V249)) end end, 1}, fun (V250) -> ('nested--7688-3369--in--un--altEq'(V0, V1, V244, V247, V246, V245, V4, V3, V2, V250)) end, V246)) of 1 -> ('un--maybeVarEq'(V0, V1, V2, V3, V4, V247)); 0 -> 0 end; 0 -> 0 end; {'Core.CompileExpr.CConstCase', V251, V252, V253, V254} -> case ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V252)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V255) -> fun (V256) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V255, V256)) end end, 1}, fun (V257) -> ('nested--7688-3409--in--un--altEq'(V0, V1, V254, V253, V252, V251, V4, V3, V2, V257)) end, V253)) of 1 -> ('un--maybeVarEq'(V0, V1, V2, V3, V4, V254)); 0 -> 0 end; 0 -> 0 end; _ -> case V4 of {'Prelude.Types.Just', V258} -> case V5 of {'Core.CompileExpr.CPrimVal', V259, V260} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V258, V260)); _ -> case V5 of {'Core.CompileExpr.CErased', V261} -> 0; {'Core.CompileExpr.CCrash', V262, V263} -> 0 end end; {'Prelude.Types.Nothing'} -> case V5 of {'Core.CompileExpr.CPrimVal', V264, V265} -> 0; _ -> case V5 of {'Core.CompileExpr.CErased', V266} -> 0; {'Core.CompileExpr.CCrash', V267, V268} -> 0 end end; _ -> case V5 of {'Core.CompileExpr.CErased', V269} -> 0; {'Core.CompileExpr.CCrash', V270, V271} -> 0 end end end end; _ -> case V5 of {'Core.CompileExpr.COp', V272, V273, V274, V275} -> case V272 of 0 -> 0; _ -> begin (V276 = (V272 - 1)), case V276 of 0 -> 0; _ -> begin (V277 = (V276 - 1)), case V277 of 0 -> case V274 of {'Core.TT.Add', V278} -> case V275 of {'Data.Vect.::', V279, V280} -> case V280 of {'Data.Vect.::', V281, V282} -> case V282 of {'Data.Vect.Nil'} -> case V281 of {'Core.CompileExpr.CPrimVal', V283, V284} -> case V279 of {'Core.CompileExpr.CApp', V285, V286, V287} -> case V286 of {'Core.CompileExpr.CRef', V288, V289} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V289)) of 1 -> (case ('Idris.Idris2.Prelude.Types':'un--getAt'(V1, V287)) of {'Prelude.Types.Just', V290} -> case V290 of {'Core.CompileExpr.COp', V291, V292, V293, V294} -> case V291 of 0 -> fun () -> 0 end; _ -> begin (V295 = (V291 - 1)), case V295 of 0 -> fun () -> 0 end; _ -> begin (V296 = (V295 - 1)), case V296 of 0 -> case V293 of {'Core.TT.Sub', V297} -> case V294 of {'Data.Vect.::', V298, V299} -> case V299 of {'Data.Vect.::', V300, V301} -> case V300 of {'Core.CompileExpr.CPrimVal', V302, V303} -> case V301 of {'Data.Vect.Nil'} -> fun () -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V284, V303)) of 1 -> ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V298)); 0 -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end end end end end; _ -> fun () -> 0 end end; _ -> fun () -> 0 end end()); 0 -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> 0 end end end end end; {'Core.CompileExpr.CExtPrim', V304, V305, V306} -> 0; {'Core.CompileExpr.CForce', V307, V308, V309} -> 0; {'Core.CompileExpr.CDelay', V310, V311, V312} -> 0; {'Core.CompileExpr.CConCase', V313, V314, V315, V316} -> case ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V314)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V317) -> fun (V318) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V317, V318)) end end, 1}, fun (V319) -> ('nested--7688-3369--in--un--altEq'(V0, V1, V313, V316, V315, V314, V4, V3, V2, V319)) end, V315)) of 1 -> ('un--maybeVarEq'(V0, V1, V2, V3, V4, V316)); 0 -> 0 end; 0 -> 0 end; {'Core.CompileExpr.CConstCase', V320, V321, V322, V323} -> case ('un--cexpIdentity'(V0, V1, V2, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V321)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V324) -> fun (V325) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V324, V325)) end end, 1}, fun (V326) -> ('nested--7688-3409--in--un--altEq'(V0, V1, V323, V322, V321, V320, V4, V3, V2, V326)) end, V322)) of 1 -> ('un--maybeVarEq'(V0, V1, V2, V3, V4, V323)); 0 -> 0 end; 0 -> 0 end; _ -> case V4 of {'Prelude.Types.Just', V327} -> case V5 of {'Core.CompileExpr.CPrimVal', V328, V329} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V327, V329)); _ -> case V5 of {'Core.CompileExpr.CErased', V330} -> 0; {'Core.CompileExpr.CCrash', V331, V332} -> 0 end end; {'Prelude.Types.Nothing'} -> case V5 of {'Core.CompileExpr.CPrimVal', V333, V334} -> 0; _ -> case V5 of {'Core.CompileExpr.CErased', V335} -> 0; {'Core.CompileExpr.CCrash', V336, V337} -> 0 end end; _ -> case V5 of {'Core.CompileExpr.CErased', V338} -> 0; {'Core.CompileExpr.CCrash', V339, V340} -> 0 end end end end end end end.
'un--calcIdentity'(V0, V1) -> case V1 of {'Core.CompileExpr.MkFun', V2, V3} -> ('un--checkIdentity'(V0, ('un--makeArgs'(V2)), V3, 0)); _ -> {'Prelude.Types.Nothing'} end.
