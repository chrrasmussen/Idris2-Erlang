-module('Idris.Idris2.Compiler.CompileExpr').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in conCases-5745'/13,
  'case--toCExp-5389'/6,
  'nested--15464-8764--in--un--toLam'/11,
  'nested--10855-4551--in--un--toEnum'/5,
  'nested--15464-9006--in--un--toArgExp'/7,
  'nested--15464-8900--in--un--toArgExp'/6,
  'nested--16172-9376--in--un--noDefYet'/4,
  'nested--11986-6115--in--un--mkSubst'/15,
  'nested--9024-2870--in--un--mkLocal'/6,
  'nested--9024-2871--in--un--mkApp'/6,
  'nested--15396-8661--in--un--lamBind'/5,
  'nested--9285-3110--in--un--keepArg'/6,
  'nested--9285-3109--in--un--keep'/7,
  'nested--9829-3596--in--un--go'/4,
  'nested--15464-9007--in--un--getVars'/7,
  'nested--15464-8901--in--un--getVars'/6,
  'nested--9829-3595--in--un--fire'/4,
  'nested--11942-5684--in--un--dcon'/10,
  'nested--11113-4772--in--un--ciFlags'/4,
  'nested--9154-2998--in--un--applyAll'/5,
  'nested--9154-3027--in--un--addArg'/7,
  'un--weakenVar'/1,
  'un--unitTree'/2,
  'un--tryZBranch'/1,
  'un--trySBranch'/2,
  'un--toCExpTree\x{27}'/5,
  'un--toCExpTree'/5,
  'un--toCExpTm'/5,
  'un--toCExp'/5,
  'un--toCDef'/5,
  'un--numArgs'/2,
  'un--newMN'/2,
  'un--natHack'/0,
  'un--natBranch'/1,
  'un--mkSub'/3,
  'un--mkDropSubst'/4,
  'un--mkBounds'/1,
  'un--mkArgList'/2,
  'un--magic__natUnsuc'/3,
  'un--magic__natMinus'/3,
  'un--magic'/2,
  'un--lamRHSenv'/3,
  'un--lamRHS'/2,
  'un--getZBranch'/1,
  'un--getSBranch'/2,
  'un--getNewType'/7,
  'un--getNewArgs'/2,
  'un--getDef'/5,
  'un--expandToArity'/4,
  'un--etaExpand'/5,
  'un--eraseConArgs'/5,
  'un--enumTree'/1,
  'un--enumTag'/2,
  'un--dropPos'/2,
  'un--dropFrom'/3,
  'un--dconFlag'/2,
  'un--constCases'/5,
  'un--conCases'/5,
  'un--compileExp'/2,
  'un--compileDef'/2,
  'un--builtinNatTree'/2,
  'un--builtinMagic'/1,
  'un--applyNewType'/5
]).
'case--case block in conCases-5745'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Core.Context.Context.DCon', V13, V14, V15} -> case V15 of {'Prelude.Types.Just', V16} -> ('un--conCases'(V1, V8, V7, V6, V5)); _ -> begin (V17 = ('Idris.Idris2.Core.Context':'un--getFullName'(V8, V4))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V94 = case ('un--mkDropSubst'(0, case V10 of {'Core.Context.Context.MkGlobalDef', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V25 end, V1, V0)) of {'Builtin.DPair.MkDPair', V44, V45} -> begin (V46 = ('un--toCExpTree'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, V1)), V8, V7, V6, V2))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V93 = begin (V51 = ('un--conCases'(V1, V8, V7, V6, V5))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V92 = case ('nested--11942-5684--in--un--dcon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, case V10 of {'Core.Context.Context.MkGlobalDef', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77} -> V73 end)) of 1 -> begin (V78 = ('un--dconFlag'(V8, V21))), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V84 = fun (V83) -> {'Prelude.Types.Right', [{'Core.CompileExpr.MkConAlt', V21, V82, {'Prelude.Types.Just', V3}, V44, ('Idris.Idris2.Core.CompileExpr':'un--shrinkCExp'(V45, V50))} | V55]} end), V84 end(V79)) end end end end; 0 -> begin (V85 = ('un--dconFlag'(V8, V21))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V91 = fun (V90) -> {'Prelude.Types.Right', [{'Core.CompileExpr.MkConAlt', V21, V89, {'Prelude.Types.Nothing'}, V44, ('Idris.Idris2.Core.CompileExpr':'un--shrinkCExp'(V45, V50))} | V55]} end), V91 end(V86)) end end end end end), V92 end(V52)) end end end end), V93 end(V47)) end end end end end), V94 end(V18)) end end end end end; _ -> begin (V95 = ('Idris.Idris2.Core.Context':'un--getFullName'(V8, V4))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V172 = case ('un--mkDropSubst'(0, case V10 of {'Core.Context.Context.MkGlobalDef', V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121} -> V103 end, V1, V0)) of {'Builtin.DPair.MkDPair', V122, V123} -> begin (V124 = ('un--toCExpTree'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, V1)), V8, V7, V6, V2))), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V171 = begin (V129 = ('un--conCases'(V1, V8, V7, V6, V5))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V170 = case ('nested--11942-5684--in--un--dcon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, case V10 of {'Core.Context.Context.MkGlobalDef', V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155} -> V151 end)) of 1 -> begin (V156 = ('un--dconFlag'(V8, V99))), fun (V157) -> begin (V158 = (V156(V157))), case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> (begin (V162 = fun (V161) -> {'Prelude.Types.Right', [{'Core.CompileExpr.MkConAlt', V99, V160, {'Prelude.Types.Just', V3}, V122, ('Idris.Idris2.Core.CompileExpr':'un--shrinkCExp'(V123, V128))} | V133]} end), V162 end(V157)) end end end end; 0 -> begin (V163 = ('un--dconFlag'(V8, V99))), fun (V164) -> begin (V165 = (V163(V164))), case V165 of {'Prelude.Types.Left', V166} -> {'Prelude.Types.Left', V166}; {'Prelude.Types.Right', V167} -> (begin (V169 = fun (V168) -> {'Prelude.Types.Right', [{'Core.CompileExpr.MkConAlt', V99, V167, {'Prelude.Types.Nothing'}, V122, ('Idris.Idris2.Core.CompileExpr':'un--shrinkCExp'(V123, V128))} | V133]} end), V169 end(V164)) end end end end end), V170 end(V130)) end end end end), V171 end(V125)) end end end end end), V172 end(V96)) end end end end end.
'case--toCExp-5389'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Builtin.MkPair', V6, V7} -> begin (V9 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V8) -> ('un--toCExp'(V0, V4, V3, V2, V8)) end, V7, []))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V48 = begin (V19 = begin (V14 = V4), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V47 = begin (V24 = ('un--toCExpTm'(V0, V4, V3, V2, V6))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V46 = begin (V29 = ('un--numArgs'(V23, V6))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V45 = case V33 of {'Compiler.CompileExpr.Arity', V34} -> begin (V35 = ('un--expandToArity'(V0, V34, V28, V13))), fun (V36) -> {'Prelude.Types.Right', ('un--builtinMagic'(V35))} end end; {'Compiler.CompileExpr.NewTypeBy', V37, V38} -> begin (V39 = ('un--applyNewType'(V0, V37, V38, V28, V13))), fun (V40) -> {'Prelude.Types.Right', ('un--builtinMagic'(V39))} end end; {'Compiler.CompileExpr.EraseArgs', V41, V42} -> begin (V43 = ('un--eraseConArgs'(V0, V41, V42, V28, V13))), fun (V44) -> {'Prelude.Types.Right', ('un--builtinMagic'(V43))} end end end), V45 end(V30)) end end end end), V46 end(V25)) end end end end), V47 end(V20)) end end end end), V48 end(V10)) end end end end end.
'nested--15464-8764--in--un--toLam'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of 1 -> case V10 of {'Core.CompileExpr.MkFun', V11, V12} -> {'Core.CompileExpr.MkFun', [], ('un--lamRHS'(V11, V12))}; _ -> V10 end; _ -> V10 end.
'nested--10855-4551--in--un--toEnum'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.MkConAlt', V5, V6, V7, V8, V9} -> case V6 of {'Core.CompileExpr.ENUM', V10} -> case V7 of {'Prelude.Types.Just', V11} -> case V8 of [] -> {'Prelude.Types.Just', {'Core.CompileExpr.MkConstAlt', ('un--enumTag'(V10, V11)), V9}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'nested--15464-9006--in--un--toArgExp'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = V6), {'Core.CompileExpr.CLocal', V7, ('Idris.Idris2.Core.FC':'un--emptyFC'())} end.
'nested--15464-8900--in--un--toArgExp'(V0, V1, V2, V3, V4, V5) -> begin (V6 = V5), {'Core.CompileExpr.CLocal', V6, ('Idris.Idris2.Core.FC':'un--emptyFC'())} end.
'nested--16172-9376--in--un--noDefYet'(V0, V1, V2, V3) -> case V2 of {'Core.Context.Context.None'} -> case V3 of [E0 | E1] -> (fun (V4, V5) -> 1 end(E0, E1)); _ -> 0 end; _ -> 0 end.
'nested--11986-6115--in--un--mkSubst'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [] -> {'Core.CompileExpr.SubstCEnv.Nil'}; [E0 | E1] -> (fun (V15, V16) -> case case (V11 =:= V13) of 'false' -> 0; _ -> 1 end of 1 -> {'Core.CompileExpr.SubstCEnv.::', V12, ('nested--11986-6115--in--un--mkSubst'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, (V11 + 1), V12, V13, V16))}; 0 -> {'Core.CompileExpr.SubstCEnv.::', {'Core.CompileExpr.CErased', V8}, ('nested--11986-6115--in--un--mkSubst'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, (V11 + 1), V12, V13, V16))} end end(E0, E1)) end.
'nested--9024-2870--in--un--mkLocal'(V0, V1, V2, V3, V4, V5) -> begin (V6 = V5), {'Core.CompileExpr.CLocal', V6, V4} end.
'nested--9024-2871--in--un--mkApp'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> V4; _ -> case V4 of {'Core.CompileExpr.CApp', V6, V7, V8} -> {'Core.CompileExpr.CApp', V6, V7, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, V5))}; {'Core.CompileExpr.CCon', V9, V10, V11, V12, V13} -> {'Core.CompileExpr.CCon', V9, V10, V11, V12, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V13, V5))}; {'Core.CompileExpr.CExtPrim', V14, V15, V16} -> {'Core.CompileExpr.CExtPrim', V14, V15, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, V5))}; _ -> {'Core.CompileExpr.CApp', ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V4)), V4, V5} end end.
'nested--15396-8661--in--un--lamBind'(V0, V1, V2, V3, V4) -> case V3 of [] -> V4; [E0 | E1] -> (fun (V5, V6) -> ('nested--15396-8661--in--un--lamBind'(V0, V1, V2, V6, {'Core.CompileExpr.CLam', V2, V5, V4})) end(E0, E1)) end.
'nested--9285-3110--in--un--keepArg'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.CompileExpr.CLam', V6, V7, V8} -> {'Core.CompileExpr.CLam', V6, V7, ('nested--9285-3110--in--un--keepArg'(V0, V1, V2, V3, V4, V8))}; {'Core.CompileExpr.CCon', V9, V10, V11, V12, V13} -> ('nested--9285-3109--in--un--keep'(V0, V1, V2, V3, V4, 0, V13)); _ -> {'Core.CompileExpr.CErased', ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V2))} end.
'nested--9285-3109--in--un--keep'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> {'Core.CompileExpr.CErased', ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V2))}; [E0 | E1] -> (fun (V7, V8) -> case case (V5 =:= V3) of 'false' -> 0; _ -> 1 end of 1 -> V7; 0 -> ('nested--9285-3109--in--un--keep'(V0, V1, V2, V3, V4, (V5 + 1), V8)) end end(E0, E1)) end.
'nested--9829-3596--in--un--go'(V0, V1, V2, V3) -> case V2 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case ('nested--9829-3595--in--un--fire'(V0, V1, V4, V3)) of {'Prelude.Types.Nothing'} -> ('nested--9829-3596--in--un--go'(V0, V1, V5, V3)); {'Prelude.Types.Just', V6} -> V6 end end(E0, E1)) end.
'nested--15464-9007--in--un--getVars'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Compiler.CompileExpr.NoArgs'} -> {'Data.Vect.Nil'}; {'Compiler.CompileExpr.ConsArg', V7, V8} -> {'Data.Vect.::', 0, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> ('un--weakenVar'(V9)) end))(('nested--15464-9007--in--un--getVars'(V0, V1, V2, V3, V4, V5, V8))))} end.
'nested--15464-8901--in--un--getVars'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Compiler.CompileExpr.NoArgs'} -> []; {'Compiler.CompileExpr.ConsArg', V6, V7} -> [0 | ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('un--weakenVar'(V8)) end))(('nested--15464-8901--in--un--getVars'(V0, V1, V2, V3, V4, V7))))] end.
'nested--9829-3595--in--un--fire'(V0, V1, V2, V3) -> case V2 of {'Compiler.CompileExpr.MagicCCon', V4, V5, V6} -> case V3 of {'Core.CompileExpr.CCon', V7, V8, V9, V10, V11} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V14, V15)) end end end end, fun (V16) -> fun (V17) -> {'Prelude.Types.Just', V17} end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V20, V21)) end end end end}, fun (V22) -> {'Prelude.Types.Nothing'} end, fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V24, V25)) end end end}, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V8)))), fun (V26) -> ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(((V6(V7))('erased'))))(('Idris.Idris2.Data.Vect':'un--toVect'(V5, V11)))) end)); _ -> {'Prelude.Types.Nothing'} end; {'Compiler.CompileExpr.MagicCRef', V34, V35, V36} -> case V3 of {'Core.CompileExpr.CApp', V37, V38, V39} -> case V38 of {'Core.CompileExpr.CRef', V40, V41} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V44, V45)) end end end end, fun (V46) -> fun (V47) -> {'Prelude.Types.Just', V47} end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V50, V51)) end end end end}, fun (V52) -> {'Prelude.Types.Nothing'} end, fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V54, V55)) end end end}, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V34, V41)))), fun (V56) -> ((begin (V61 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V59, V60)) end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end((((V36(V37))(V40))('erased'))))(('Idris.Idris2.Data.Vect':'un--toVect'(V35, V39)))) end)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'nested--11942-5684--in--un--dcon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Context.Context.DCon', V10, V11, V12} -> 1; _ -> 0 end.
'nested--11113-4772--in--un--ciFlags'(V0, V1, V2, V3) -> case V3 of [] -> case V2 of {'Core.Context.Context.TCon', V4, V5, V6, V7, V8, V9, V10, V11} -> {'Core.CompileExpr.TYCON'}; _ -> {'Core.CompileExpr.DATACON'} end; [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Core.Context.Context.ConType', V14} -> V14; _ -> ('nested--11113-4772--in--un--ciFlags'(V0, V1, V2, V13)) end end(E0, E1)) end.
'nested--9154-2998--in--un--applyAll'(V0, V1, V2, V3, V4) -> case V4 of [] -> V3; [E0 | E1] -> (fun (V5, V6) -> ('nested--9154-2998--in--un--applyAll'(V0, V1, V2, {'Core.CompileExpr.CApp', ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V3)), V3, [V5 | []]}, V6)) end(E0, E1)) end.
'nested--9154-3027--in--un--addArg'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Core.CompileExpr.CApp', V7, V8, V9} -> {'Core.CompileExpr.CApp', V7, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V9, [V6 | []]))}; {'Core.CompileExpr.CCon', V10, V11, V12, V13, V14} -> {'Core.CompileExpr.CCon', V10, V11, V12, V13, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, [V6 | []]))}; {'Core.CompileExpr.CExtPrim', V15, V16, V17} -> {'Core.CompileExpr.CExtPrim', V15, V16, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V17, [V6 | []]))}; _ -> {'Core.CompileExpr.CApp', ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V5)), V5, [V6 | []]} end.
'un--weakenVar'(V0) -> begin (V1 = V0), (V1 + 1) end.
'un--unitTree'(V0, V1) -> case V1 of {'Core.CompileExpr.CConCase', V2, V3, V4, V5} -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(begin (V6 = {'Core.CompileExpr.CConCase', V2, V3, V4, V5}), fun () -> fun (V7) -> {'Prelude.Types.Right', V6} end end end, case V4 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.CompileExpr.MkConAlt', V10, V11, V12, V13, V14} -> case V11 of {'Core.CompileExpr.UNIT'} -> case V13 of [] -> case V9 of [] -> {'Prelude.Types.Just', case V3 of {'Core.CompileExpr.CLocal', V15, V16} -> fun (V17) -> {'Prelude.Types.Right', V14} end; _ -> begin (V18 = ('un--newMN'(V0, <<"_unit"/utf8>>))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', {'Core.CompileExpr.CLet', V2, V22, 1, V3, ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CExp'(V14))}} end), V24 end(V19)) end end end end end}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end)); _ -> fun (V25) -> {'Prelude.Types.Right', V1} end end.
'un--tryZBranch'(V0) -> case V0 of {'Core.CompileExpr.MkConAlt', V1, V2, V3, V4, V5} -> case V2 of {'Core.CompileExpr.ZERO'} -> case V4 of [] -> {'Prelude.Types.Just', V5}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--trySBranch'(V0, V1) -> case V1 of {'Core.CompileExpr.MkConAlt', V2, V3, V4, V5, V6} -> case V3 of {'Core.CompileExpr.SUCC'} -> case V5 of [E0 | E1] -> (fun (V7, V8) -> case V8 of [] -> {'Prelude.Types.Just', {'Core.CompileExpr.CLet', ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V0)), V7, 0, ('un--magic__natUnsuc'(('Idris.Idris2.Core.CompileExpr':'un--getFC'(V0)), ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V0)), {'Data.Vect.::', V0, {'Data.Vect.Nil'}})), V6}}; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--toCExpTree\x{27}'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Case.CaseTree.Case', V5, V6, V7, V8} -> case V8 of [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Core.Case.CaseTree.ConCase', V11, V12, V13, V14} -> begin (V15 = ('Idris.Idris2.Core.TT':'un--getLoc'(V7))), begin (V16 = ('un--getNewType'(V0, V1, V2, V15, {'Core.CompileExpr.CLocal', V6, V15}, V3, V8))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V54 = begin (V21 = [{'Core.Case.CaseTree.ConCase', V11, V12, V13, V14} | V10]), case V20 of {'Prelude.Types.Nothing'} -> begin (V27 = begin (V22 = V1), fun (V23) -> begin (V26 = (begin (V24 = V22), fun (V25) -> ('erlang':'get'(V24)) end end(V23))), {'Prelude.Types.Right', V26} end end end), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V51 = begin (V32 = ('un--conCases'(V0, V1, V2, V3, V21))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V50 = begin (V37 = ('un--getDef'(V0, V1, V2, V3, V21))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V49 = case ('Idris.Idris2.Data.List':'un--isNil'(V36)) of 1 -> fun (V42) -> {'Prelude.Types.Right', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Core.CompileExpr.CErased', V15} end, V41))} end; 0 -> begin (V43 = ('un--builtinNatTree'(V2, {'Core.CompileExpr.CConCase', V15, {'Core.CompileExpr.CLocal', V6, V15}, V36, V41}))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V48 = ('un--unitTree'(V2, ('un--enumTree'(V47))))), V48 end(V44)) end end end end end), V49 end(V38)) end end end end), V50 end(V33)) end end end end), V51 end(V28)) end end end end; {'Prelude.Types.Just', V52} -> fun (V53) -> {'Prelude.Types.Right', V52} end end end), V54 end(V17)) end end end end end; {'Core.Case.CaseTree.DelayCase', V55, V56, V57} -> fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V60 = fun (V59) -> V59 end), fun (V61) -> (V60(V61)) end end(<<"Unexpected DelayCase"/utf8>>))}, V58)) end; {'Core.Case.CaseTree.ConstCase', V62, V63} -> begin (V64 = ('Idris.Idris2.Core.TT':'un--getLoc'(V7))), begin (V65 = ('un--constCases'(V0, V1, V2, V3, V8))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V77 = begin (V70 = ('un--getDef'(V0, V1, V2, V3, V8))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V76 = fun (V75) -> case ('Idris.Idris2.Data.List':'un--isNil'(V69)) of 1 -> {'Prelude.Types.Right', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Core.CompileExpr.CErased', V64} end, V74))}; 0 -> {'Prelude.Types.Right', {'Core.CompileExpr.CConstCase', V64, {'Core.CompileExpr.CLocal', V6, V64}, V69, V74}} end end), V76 end(V71)) end end end end), V77 end(V66)) end end end end end; {'Core.Case.CaseTree.DefaultCase', V78} -> ('un--toCExpTree'(V0, V1, V2, V3, V78)) end end(E0, E1)); [] -> fun (V79) -> {'Prelude.Types.Right', {'Core.CompileExpr.CCrash', ('Idris.Idris2.Core.TT':'un--getLoc'(V7)), <<<<"Missing case tree in "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>}} end end; {'Core.Case.CaseTree.STerm', V80, V81} -> ('un--toCExp'(V0, V1, V2, V3, V81)); {'Core.Case.CaseTree.Unmatched', V82} -> fun (V83) -> {'Prelude.Types.Right', {'Core.CompileExpr.CCrash', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V82}} end; {'Core.Case.CaseTree.Impossible'} -> fun (V84) -> {'Prelude.Types.Right', {'Core.CompileExpr.CCrash', ('Idris.Idris2.Core.FC':'un--emptyFC'()), <<<<"Impossible case encountered in "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>}} end end.
'un--toCExpTree'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Case.CaseTree.Case', V5, V6, V7, V8} -> case V8 of [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Core.Case.CaseTree.DelayCase', V11, V12, V13} -> begin (V14 = ('Idris.Idris2.Core.TT':'un--getLoc'(V7))), begin (V15 = ('un--toCExpTree'([V11 | [V12 | V0]], V1, V2, V3, V13))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = fun (V20) -> {'Prelude.Types.Right', {'Core.CompileExpr.CLet', V14, V12, 0, {'Core.CompileExpr.CForce', V14, 0, {'Core.CompileExpr.CLocal', V6, ('Idris.Idris2.Core.TT':'un--getLoc'(V7))}}, {'Core.CompileExpr.CLet', V14, V11, 0, {'Core.CompileExpr.CErased', V14}, V19}}} end), V21 end(V16)) end end end end end; _ -> ('un--toCExpTree\x{27}'(V0, V1, V2, V3, V4)) end end(E0, E1)); _ -> ('un--toCExpTree\x{27}'(V0, V1, V2, V3, V4)) end; _ -> ('un--toCExpTree\x{27}'(V0, V1, V2, V3, V4)) end.
'un--toCExpTm'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Local', V5, V6, V7} -> fun (V8) -> {'Prelude.Types.Right', {'Core.CompileExpr.CLocal', V7, V5}} end; {'Core.TT.Ref', V9, V10, V11} -> case V10 of {'Core.TT.DataCon', V12, V13} -> begin (V14 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, V11))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V36 = begin (V19 = ('un--dconFlag'(V1, V18))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V35 = case V23 of {'Core.CompileExpr.ENUM', V24} -> fun (V25) -> {'Prelude.Types.Right', {'Core.CompileExpr.CPrimVal', V9, ('un--enumTag'(V24, V12))}} end; {'Core.CompileExpr.ZERO'} -> fun (V26) -> {'Prelude.Types.Right', {'Core.CompileExpr.CPrimVal', V9, {'Core.TT.BI', 0}}} end; {'Core.CompileExpr.SUCC'} -> begin (V27 = ('un--newMN'(V2, <<"succ"/utf8>>))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = fun (V32) -> {'Prelude.Types.Right', {'Core.CompileExpr.CLam', V9, V31, {'Core.CompileExpr.COp', 2, V9, {'Core.TT.Add', 5}, {'Data.Vect.::', {'Core.CompileExpr.CPrimVal', V9, {'Core.TT.BI', 1}}, {'Data.Vect.::', {'Core.CompileExpr.CLocal', 0, V9}, {'Data.Vect.Nil'}}}}}} end), V33 end(V28)) end end end end; _ -> fun (V34) -> {'Prelude.Types.Right', {'Core.CompileExpr.CCon', V9, V18, V23, {'Prelude.Types.Just', V12}, []}} end end), V35 end(V20)) end end end end), V36 end(V15)) end end end end; {'Core.TT.TyCon', V37, V38} -> fun (V39) -> {'Prelude.Types.Right', {'Core.CompileExpr.CCon', V9, V11, {'Core.CompileExpr.TYCON'}, {'Prelude.Types.Nothing'}, []}} end; _ -> begin (V40 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, V11))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V46 = fun (V45) -> {'Prelude.Types.Right', {'Core.CompileExpr.CApp', V9, {'Core.CompileExpr.CRef', V9, V44}, []}} end), V46 end(V41)) end end end end end; {'Core.TT.Meta', V47, V48, V49, V50} -> begin (V52 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V51) -> ('un--toCExp'(V0, V1, V2, V3, V51)) end, V50, []))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V58 = fun (V57) -> {'Prelude.Types.Right', {'Core.CompileExpr.CApp', V47, {'Core.CompileExpr.CRef', V47, V48}, V56}} end), V58 end(V53)) end end end end; {'Core.TT.Bind', V59, V60, V61, V62} -> case V61 of {'Core.TT.Lam', V63, V64, V65, V66} -> begin (V67 = ('un--toCExp'([V60 | V0], V1, V2, V3, V62))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V73 = fun (V72) -> {'Prelude.Types.Right', {'Core.CompileExpr.CLam', V59, V60, V71}} end), V73 end(V68)) end end end end; {'Core.TT.Let', V74, V75, V76, V77} -> begin (V78 = ('un--toCExp'([V60 | V0], V1, V2, V3, V62))), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V98 = begin (V83 = ('un--toCExp'(V0, V1, V2, V3, V76))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V97 = fun (V88) -> {'Prelude.Types.Right', ('Idris.Idris2.Algebra.Semiring':'un--branchZero'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V89) -> fun (V90) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V89, V90)) end end, 0, fun (V91) -> fun (V92) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V91, V92)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V93) -> fun (V94) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V93, V94)) end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V95, V96)) end end}}, fun () -> ('Idris.Idris2.Core.CompileExpr':'un--shrinkCExp'({'Core.TT.DropCons', {'Core.TT.SubRefl'}}, V82)) end, fun () -> {'Core.CompileExpr.CLet', V59, V60, 0, V87, V82} end, V75))} end), V97 end(V84)) end end end end), V98 end(V79)) end end end end; {'Core.TT.Pi', V99, V100, V101, V102} -> begin (V103 = ('un--toCExp'(V0, V1, V2, V3, V102))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V115 = begin (V108 = ('un--toCExp'([V60 | V0], V1, V2, V3, V62))), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V114 = fun (V113) -> {'Prelude.Types.Right', {'Core.CompileExpr.CCon', V59, {'Core.Name.UN', {'Core.Name.Basic', <<"->"/utf8>>}}, {'Core.CompileExpr.TYCON'}, {'Prelude.Types.Nothing'}, [V107 | [{'Core.CompileExpr.CLam', V59, V60, V112} | []]]}} end), V114 end(V109)) end end end end), V115 end(V104)) end end end end; _ -> fun (V116) -> {'Prelude.Types.Right', {'Core.CompileExpr.CErased', V59}} end end; {'Core.TT.App', V117, V118, V119} -> begin (V120 = ('un--toCExp'(V0, V1, V2, V3, V118))), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V132 = begin (V125 = ('un--toCExp'(V0, V1, V2, V3, V119))), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V131 = fun (V130) -> {'Prelude.Types.Right', {'Core.CompileExpr.CApp', V117, V124, [V129 | []]}} end), V131 end(V126)) end end end end), V132 end(V121)) end end end end; {'Core.TT.As', V133, V134, V135, V136} -> ('un--toCExpTm'(V0, V1, V2, V3, V136)); {'Core.TT.TDelayed', V137, V138, V139} -> fun (V140) -> {'Prelude.Types.Right', {'Core.CompileExpr.CErased', V137}} end; {'Core.TT.TDelay', V141, V142, V143, V144} -> begin (V145 = ('un--toCExp'(V0, V1, V2, V3, V144))), fun (V146) -> begin (V147 = (V145(V146))), case V147 of {'Prelude.Types.Left', V148} -> {'Prelude.Types.Left', V148}; {'Prelude.Types.Right', V149} -> (begin (V151 = fun (V150) -> {'Prelude.Types.Right', {'Core.CompileExpr.CDelay', V141, V142, V149}} end), V151 end(V146)) end end end end; {'Core.TT.TForce', V152, V153, V154} -> begin (V155 = ('un--toCExp'(V0, V1, V2, V3, V154))), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V161 = fun (V160) -> {'Prelude.Types.Right', {'Core.CompileExpr.CForce', V152, V153, V159}} end), V161 end(V156)) end end end end; {'Core.TT.PrimVal', V162, V163} -> fun (V164) -> case V163 of {'Core.TT.PrT', V165} -> {'Prelude.Types.Right', {'Core.CompileExpr.CCon', V162, {'Core.Name.UN', {'Core.Name.Basic', ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V165))}}, {'Core.CompileExpr.TYCON'}, {'Prelude.Types.Nothing'}, []}}; _ -> {'Prelude.Types.Right', {'Core.CompileExpr.CPrimVal', V162, V163}} end end; {'Core.TT.Erased', V166, V167} -> fun (V168) -> {'Prelude.Types.Right', {'Core.CompileExpr.CErased', V166}} end; {'Core.TT.TType', V169, V170} -> fun (V171) -> {'Prelude.Types.Right', {'Core.CompileExpr.CCon', V169, {'Core.Name.UN', {'Core.Name.Basic', <<"Type"/utf8>>}}, {'Core.CompileExpr.TYCON'}, {'Prelude.Types.Nothing'}, []}} end end.
'un--toCExp'(V0, V1, V2, V3, V4) -> ('case--toCExp-5389'(V0, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V4)))).
'un--toCDef'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Context.Context.None'} -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkError', {'Core.CompileExpr.CCrash', ('Idris.Idris2.Core.FC':'un--emptyFC'()), <<<<"Encountered undefined name "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9))/binary>>}}} end), V11 end(V6)) end end end end; {'Core.Context.Context.PMDef', V12, V13, V14, V15, V16} -> case ('un--mkSub'(0, V13, V3)) of {'Builtin.DPair.MkDPair', V17, V18} -> begin (V19 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.CompileExpr.NextMN'}, 0))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V34 = begin (V24 = ('un--toCExpTree'(V13, V0, V23, V1, V15))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V33 = fun (V29) -> {'Prelude.Types.Right', ('nested--15464-8764--in--un--toLam'(V13, V14, V16, V15, V12, V3, V2, V1, V0, case V12 of {'Core.Context.Context.MkPMDefInfo', V30, V31, V32} -> V32 end, case ('Idris.Idris2.Data.List':'un--isNil'(V3)) of 1 -> {'Core.CompileExpr.MkFun', V13, V28}; 0 -> {'Core.CompileExpr.MkFun', V17, ('Idris.Idris2.Core.CompileExpr':'un--shrinkCExp'(V18, V28))} end))} end), V33 end(V25)) end end end end), V34 end(V20)) end end end end end; {'Core.Context.Context.ExternDef', V35} -> case ('un--mkArgList'(0, V35)) of {'Builtin.DPair.MkDPair', V36, V37} -> begin (V38 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V52 = fun (V43) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkFun', V36, {'Core.CompileExpr.CExtPrim', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V42, ((begin (V49 = fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V47, V48)) end end end end), fun (V50) -> fun (V51) -> ((((V49('erased'))('erased'))(V50))(V51)) end end end(fun (V44) -> ('nested--15464-8900--in--un--toArgExp'(V3, V35, V2, V1, V0, V44)) end))(('nested--15464-8901--in--un--getVars'(V3, V35, V2, V1, V0, V37))))}}} end), V52 end(V39)) end end end end end; {'Core.Context.Context.ForeignDef', V53, V54} -> fun (V55) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkForeign', V54, ('Idris.Idris2.Data.List':'un--replicateTR'([], V53, {'Core.CompileExpr.CFUnit'})), {'Core.CompileExpr.CFUnit'}}} end; {'Core.Context.Context.Builtin', V56, V57} -> fun (V58) -> case ('un--mkArgList'(0, V56)) of {'Builtin.DPair.MkDPair', V59, V60} -> {'Prelude.Types.Right', {'Core.CompileExpr.MkFun', V59, {'Core.CompileExpr.COp', V56, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V57, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V61) -> ('nested--15464-9006--in--un--toArgExp'(V3, V56, V57, V2, V1, V0, V61)) end, ('nested--15464-9007--in--un--getVars'(V3, V56, V57, V2, V1, V0, V60))))}}} end end; {'Core.Context.Context.DCon', V62, V63, V64} -> begin (V73 = ((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V65) -> ('Idris.Idris2.Builtin':'un--snd'(V65)) end))(V64))), begin (V79 = begin (V74 = V0), fun (V75) -> begin (V78 = (begin (V76 = V74), fun (V77) -> ('erlang':'get'(V76)) end end(V75))), {'Prelude.Types.Right', V78} end end end), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V97 = begin (V84 = ('un--numArgs'(V83, {'Core.TT.Ref', {'Core.FC.EmptyFC'}, {'Core.TT.DataCon', V62, V63}, V1}))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V96 = begin (V94 = case V88 of {'Compiler.CompileExpr.NewTypeBy', V89, V90} -> V89; {'Compiler.CompileExpr.EraseArgs', V91, V92} -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V91 - ('Idris.Idris2.Prelude.Types.List':'un--length'(V92))))); {'Compiler.CompileExpr.Arity', V93} -> V93 end), fun (V95) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkCon', {'Prelude.Types.Just', V62}, V94, V73}} end end), V96 end(V85)) end end end end), V97 end(V80)) end end end end end; {'Core.Context.Context.TCon', V98, V99, V100, V101, V102, V103, V104, V105} -> fun (V106) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkCon', {'Prelude.Types.Nothing'}, V99, {'Prelude.Types.Nothing'}}} end; {'Core.Context.Context.Hole', V107, V108} -> begin (V109 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V115 = fun (V114) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkError', {'Core.CompileExpr.CCrash', ('Idris.Idris2.Core.FC':'un--emptyFC'()), <<<<"Encountered unimplemented hole "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V113))/binary>>}}} end), V115 end(V110)) end end end end; {'Core.Context.Context.Guess', V116, V117, V118} -> begin (V119 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V125 = fun (V124) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkError', {'Core.CompileExpr.CCrash', ('Idris.Idris2.Core.FC':'un--emptyFC'()), <<<<"Encountered constrained hole "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V123))/binary>>}}} end), V125 end(V120)) end end end end; {'Core.Context.Context.BySearch', V126, V127, V128} -> begin (V129 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V135 = fun (V134) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkError', {'Core.CompileExpr.CCrash', ('Idris.Idris2.Core.FC':'un--emptyFC'()), <<<<"Encountered incomplete proof search "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V133))/binary>>}}} end), V135 end(V130)) end end end end; _ -> begin (V136 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))), fun (V137) -> begin (V138 = (V136(V137))), case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> (begin (V148 = fun (V141) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkError', {'Core.CompileExpr.CCrash', ('Idris.Idris2.Core.FC':'un--emptyFC'()), <<<<"Encountered uncompilable name "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V142) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V142)) end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V143, V144)) end end}, {'Prelude.Show.MkShow', fun (V145) -> ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Def'(V145)) end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.Context.Context':'dn--un--showPrec_Show_Def'(V146, V147)) end end}}, {'Builtin.MkPair', V140, V4}))/binary>>}}} end), V148 end(V137)) end end end end end.
'un--numArgs'(V0, V1) -> case V1 of {'Core.TT.Ref', V2, V3, V4} -> case V3 of {'Core.TT.TyCon', V5, V6} -> fun (V7) -> {'Prelude.Types.Right', {'Compiler.CompileExpr.Arity', V6}} end; _ -> begin (V40 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V0 of {'Core.Context.MkDefs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> V8 end))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V135 = case V44 of {'Prelude.Types.Just', V45} -> case V45 of {'Core.Context.Context.MkGlobalDef', V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> case V63 of {'Core.Context.Context.DCon', V68, V69, V70} -> fun (V71) -> case V70 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Compiler.CompileExpr.EraseArgs', V69, case V45 of {'Core.Context.Context.MkGlobalDef', V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93} -> V75 end}}; {'Prelude.Types.Just', V94} -> case V94 of {'Builtin.MkPair', V95, V96} -> {'Prelude.Types.Right', {'Compiler.CompileExpr.NewTypeBy', V69, V96}}; _ -> {'Prelude.Types.Right', {'Compiler.CompileExpr.Arity', 0}} end; _ -> {'Prelude.Types.Right', {'Compiler.CompileExpr.Arity', 0}} end end; {'Core.Context.Context.PMDef', V97, V98, V99, V100, V101} -> fun (V102) -> {'Prelude.Types.Right', {'Compiler.CompileExpr.EraseArgs', ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V98)), case V45 of {'Core.Context.Context.MkGlobalDef', V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124} -> V106 end}} end; {'Core.Context.Context.ExternDef', V125} -> fun (V126) -> {'Prelude.Types.Right', {'Compiler.CompileExpr.Arity', V125}} end; {'Core.Context.Context.ForeignDef', V127, V128} -> fun (V129) -> {'Prelude.Types.Right', {'Compiler.CompileExpr.Arity', V127}} end; {'Core.Context.Context.Builtin', V130, V131} -> fun (V132) -> {'Prelude.Types.Right', {'Compiler.CompileExpr.Arity', V130}} end; _ -> fun (V133) -> {'Prelude.Types.Right', {'Compiler.CompileExpr.Arity', 0}} end end end; {'Prelude.Types.Nothing'} -> fun (V134) -> {'Prelude.Types.Right', {'Compiler.CompileExpr.Arity', 0}} end end), V135 end(V41)) end end end end end; _ -> fun (V136) -> {'Prelude.Types.Right', {'Compiler.CompileExpr.Arity', 0}} end end.
'un--newMN'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V25 = begin (V18 = begin (V12 = V0), fun (V13) -> begin (V17 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, begin (V16 = (V11 + 1)), case ((V16 band 9223372036854775808) =/= 0) of 'true' -> (V16 bor -9223372036854775808); _ -> (V16 band 9223372036854775807) end end)) end end(V13))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', {'Core.Name.MN', V1, V11}} end), V24 end(V19)) end end end end), V25 end(V8)) end end end end.
'un--natHack'() -> [{'Compiler.CompileExpr.MagicCRef', {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"natToInteger"/utf8>>}}}, 1, fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> case V3 of {'Data.Vect.::', V4, V5} -> case V5 of {'Data.Vect.Nil'} -> V4 end end end end end end} | [{'Compiler.CompileExpr.MagicCRef', {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"integerToNat"/utf8>>}}}, 1, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Data.Vect.::', V10, V11} -> case V11 of {'Data.Vect.Nil'} -> {'Core.CompileExpr.CApp', V6, {'Core.CompileExpr.CRef', V7, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"prim__integerToNat"/utf8>>}}}}, [V10 | []]} end end end end end end} | [{'Compiler.CompileExpr.MagicCRef', {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"plus"/utf8>>}}}, 2, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> case V15 of {'Data.Vect.::', V16, V17} -> case V17 of {'Data.Vect.::', V18, V19} -> case V19 of {'Data.Vect.Nil'} -> {'Core.CompileExpr.COp', 2, V12, {'Core.TT.Add', 5}, {'Data.Vect.::', V16, {'Data.Vect.::', V18, {'Data.Vect.Nil'}}}} end end end end end end end} | [{'Compiler.CompileExpr.MagicCRef', {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"mult"/utf8>>}}}, 2, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> case V23 of {'Data.Vect.::', V24, V25} -> case V25 of {'Data.Vect.::', V26, V27} -> case V27 of {'Data.Vect.Nil'} -> {'Core.CompileExpr.COp', 2, V20, {'Core.TT.Mul', 5}, {'Data.Vect.::', V24, {'Data.Vect.::', V26, {'Data.Vect.Nil'}}}} end end end end end end end} | [{'Compiler.CompileExpr.MagicCRef', {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"minus"/utf8>>}}}, 2, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('un--magic__natMinus'(V28, V29, V31)) end end end end} | [{'Compiler.CompileExpr.MagicCRef', {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"equalNat"/utf8>>}}}, 2, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> case V35 of {'Data.Vect.::', V36, V37} -> case V37 of {'Data.Vect.::', V38, V39} -> case V39 of {'Data.Vect.Nil'} -> {'Core.CompileExpr.COp', 2, V32, {'Core.TT.EQ', 5}, {'Data.Vect.::', V36, {'Data.Vect.::', V38, {'Data.Vect.Nil'}}}} end end end end end end end} | [{'Compiler.CompileExpr.MagicCRef', {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"compareNat"/utf8>>}}}, 2, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> case V43 of {'Data.Vect.::', V44, V45} -> case V45 of {'Data.Vect.::', V46, V47} -> case V47 of {'Data.Vect.Nil'} -> {'Core.CompileExpr.CApp', V40, {'Core.CompileExpr.CRef', V41, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--eqOrdNS'()), {'Core.Name.UN', {'Core.Name.Basic', (begin (V49 = fun (V48) -> V48 end), fun (V50) -> (V49(V50)) end end(<<"compareInteger"/utf8>>))}}}}, [V44 | [V46 | []]]} end end end end end end end} | []]]]]]]].
'un--natBranch'(V0) -> case V0 of {'Core.CompileExpr.MkConAlt', V1, V2, V3, V4, V5} -> case V2 of {'Core.CompileExpr.ZERO'} -> 1; {'Core.CompileExpr.SUCC'} -> 1; _ -> 0 end; _ -> 0 end.
'un--mkSub'(V0, V1, V2) -> case V2 of [] -> {'Builtin.DPair.MkDPair', V1, {'Core.TT.SubRefl'}}; _ -> case V1 of [] -> {'Builtin.DPair.MkDPair', [], {'Core.TT.SubRefl'}}; [E0 | E1] -> (fun (V3, V4) -> case ('un--mkSub'((V0 + 1), V4, V2)) of {'Builtin.DPair.MkDPair', V5, V6} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> V27 end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> case (V33 =:= V34) of 'false' -> 0; _ -> 1 end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V35, V36)) end end}, V0, V2)) of 1 -> {'Builtin.DPair.MkDPair', V5, {'Core.TT.DropCons', V6}}; 0 -> {'Builtin.DPair.MkDPair', [V3 | V5], {'Core.TT.KeepCons', V6}} end end end(E0, E1)) end end.
'un--mkDropSubst'(V0, V1, V2, V3) -> case V3 of [] -> {'Builtin.DPair.MkDPair', [], {'Core.TT.SubRefl'}}; [E0 | E1] -> (fun (V4, V5) -> case ('un--mkDropSubst'((V0 + 1), V1, V2, V5)) of {'Builtin.DPair.MkDPair', V6, V7} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V19)) end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V23, V24, V25, V26)) end end end end end end end, fun (V27) -> fun (V28) -> V28 end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V31, V32, V33)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> case (V34 =:= V35) of 'false' -> 0; _ -> 1 end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V36, V37)) end end}, V0, V1)) of 1 -> {'Builtin.DPair.MkDPair', V6, {'Core.TT.DropCons', V7}}; 0 -> {'Builtin.DPair.MkDPair', [V4 | V6], {'Core.TT.KeepCons', V7}} end end end(E0, E1)) end.
'un--mkBounds'(V0) -> case V0 of [] -> {'Core.TT.Bounds.None'}; [E0 | E1] -> (fun (V1, V2) -> {'Core.TT.Bounds.Add', V1, V1, ('un--mkBounds'(V2))} end(E0, E1)) end.
'un--mkArgList'(V0, V1) -> case V1 of 0 -> {'Builtin.DPair.MkDPair', [], {'Compiler.CompileExpr.NoArgs'}}; _ -> begin (V2 = (V1 - 1)), case ('un--mkArgList'(begin (V3 = (V0 + 1)), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end, V2)) of {'Builtin.DPair.MkDPair', V4, V5} -> {'Builtin.DPair.MkDPair', [{'Core.Name.MN', <<"arg"/utf8>>, V0} | V4], {'Compiler.CompileExpr.ConsArg', {'Core.Name.MN', <<"arg"/utf8>>, V0}, V5}} end end end.
'un--magic__natUnsuc'(V0, V1, V2) -> case V2 of {'Data.Vect.::', V3, V4} -> case V4 of {'Data.Vect.Nil'} -> {'Core.CompileExpr.COp', 2, V0, {'Core.TT.Sub', 5}, {'Data.Vect.::', V3, {'Data.Vect.::', {'Core.CompileExpr.CPrimVal', V0, {'Core.TT.BI', 1}}, {'Data.Vect.Nil'}}}} end end.
'un--magic__natMinus'(V0, V1, V2) -> case V2 of {'Data.Vect.::', V3, V4} -> case V4 of {'Data.Vect.::', V5, V6} -> case V6 of {'Data.Vect.Nil'} -> {'Core.CompileExpr.CApp', V0, {'Core.CompileExpr.CRef', V1, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"prim__integerToNat"/utf8>>}}}}, [{'Core.CompileExpr.COp', 2, V0, {'Core.TT.Sub', 5}, {'Data.Vect.::', V3, {'Data.Vect.::', V5, {'Data.Vect.Nil'}}}} | []]} end end end.
'un--magic'(V0, V1) -> case V1 of {'Core.CompileExpr.CLam', V2, V3, V4} -> {'Core.CompileExpr.CLam', V2, V3, ('un--magic'(V0, V4))}; _ -> ('nested--9829-3596--in--un--go'(V1, V0, V0, V1)) end.
'un--lamRHSenv'(V0, V1, V2) -> case V2 of [] -> {'Core.CompileExpr.SubstCEnv.Nil'}; [E0 | E1] -> (fun (V3, V4) -> {'Core.CompileExpr.SubstCEnv.::', {'Core.CompileExpr.CRef', V1, {'Core.Name.MN', <<"x"/utf8>>, V0}}, ('un--lamRHSenv'(begin (V5 = (V0 + 1)), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end, V1, V4))} end(E0, E1)) end.
'un--lamRHS'(V0, V1) -> begin (V2 = ('un--lamRHSenv'(0, ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V1)), V0))), begin (V3 = ('Idris.Idris2.Core.CompileExpr':'un--substs'(V0, [], V2, V1))), begin (V4 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--getNewArgs'(V0, V2))))), begin (V5 = ('un--mkBounds'(V4))), begin (V6 = ('Idris.Idris2.Core.CompileExpr':'un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V5, V3))), ('nested--15396-8661--in--un--lamBind'(V0, V1, ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V1)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, [])))), V6)) end end end end end.
'un--getZBranch'(V0) -> case V0 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('un--tryZBranch'(V1)), fun () -> ('un--getZBranch'(V2)) end)) end(E0, E1)) end.
'un--getSBranch'(V0, V1) -> case V1 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('un--trySBranch'(V0, V2)), fun () -> ('un--getSBranch'(V0, V3)) end)) end(E0, E1)) end.
'un--getNewType'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.Case.CaseTree.DefaultCase', V10} -> fun (V11) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Core.Case.CaseTree.ConCase', V12, V13, V14, V15} -> begin (V21 = begin (V16 = V1), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'get'(V18)) end end(V17))), {'Prelude.Types.Right', V20} end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V132 = begin (V58 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V12, case V25 of {'Core.Context.MkDefs', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> V26 end))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V131 = case V62 of {'Prelude.Types.Just', V63} -> case V63 of {'Core.Context.Context.DCon', V64, V65, V66} -> case V66 of {'Prelude.Types.Just', V67} -> case V67 of {'Builtin.MkPair', V68, V69} -> case V68 of 1 -> begin (V70 = ('nested--11986-6115--in--un--mkSubst'(V14, V0, V15, V13, V12, V9, V5, V4, V3, V2, V1, 0, V4, V69, V14))), begin (V86 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V72 = fun (V71) -> V71 end), fun (V73) -> (V72(V73)) end end(<<"compiler.newtype.world"/utf8>>)), 50, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V74) -> fun (V75) -> <<V74/binary, V75/binary>> end end, <<""/utf8>>}, fun (V76) -> V76 end, [(begin (V78 = fun (V77) -> V77 end), fun (V79) -> (V78(V79)) end end(<<"Inlining case on "/utf8>>)) | [(begin (V81 = fun (V80) -> V80 end), fun (V82) -> (V81(V82)) end end(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)))) | [(begin (V84 = fun (V83) -> V83 end), fun (V85) -> (V84(V85)) end end(<<" (no world)"/utf8>>)) | []]]])) end))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V98 = begin (V91 = ('un--toCExpTree'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, V0)), V1, V2, V5, V15))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V97 = fun (V96) -> {'Prelude.Types.Right', {'Prelude.Types.Just', ('Idris.Idris2.Core.CompileExpr':'un--substs'(V14, V0, V70, V95))}} end), V97 end(V92)) end end end end), V98 end(V87)) end end end end end; 0 -> begin (V99 = ('nested--11986-6115--in--un--mkSubst'(V14, V0, V15, V13, V12, V9, V5, V4, V3, V2, V1, 0, {'Core.CompileExpr.CLocal', 0, V3}, V69, V14))), begin (V100 = ('un--toCExpTree'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, V0)), V1, V2, V5, V15))), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V126 = begin (V105 = ('Idris.Idris2.Core.CompileExpr':'un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V14)), ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([{'Core.Name.MN', <<"eff"/utf8>>, 0} | []])), V104))), begin (V106 = {'Core.CompileExpr.CLet', V3, {'Core.Name.MN', <<"eff"/utf8>>, 0}, 1, V4, ('Idris.Idris2.Core.CompileExpr':'un--substs'(V14, [{'Core.Name.MN', <<"eff"/utf8>>, 0} | V0], V99, V105))}), begin (V119 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V108 = fun (V107) -> V107 end), fun (V109) -> (V108(V109)) end end(<<"compiler.newtype.world"/utf8>>)), 50, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V110) -> fun (V111) -> <<V110/binary, V111/binary>> end end, <<""/utf8>>}, fun (V112) -> V112 end, [(begin (V114 = fun (V113) -> V113 end), fun (V115) -> (V114(V115)) end end(<<"Kept the scrutinee "/utf8>>)) | [(begin (V117 = fun (V116) -> V116 end), fun (V118) -> (V117(V118)) end end(('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_(CExp $vars)'(V0, V106)))) | []]])) end))), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V125 = fun (V124) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V106}} end), V125 end(V120)) end end end end end end), V126 end(V101)) end end end end end end; _ -> fun (V127) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V128) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V129) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V130) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V131 end(V59)) end end end end), V132 end(V22)) end end end end; _ -> ('un--getNewType'(V0, V1, V2, V3, V4, V5, V9)) end end(E0, E1)) end.
'un--getNewArgs'(V0, V1) -> case V0 of [] -> case V1 of {'Core.CompileExpr.SubstCEnv.Nil'} -> [] end; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Core.CompileExpr.SubstCEnv.::', V4, V5} -> case V4 of {'Core.CompileExpr.CRef', V6, V7} -> [V7 | ('un--getNewArgs'(V3, V5))]; _ -> [V2 | ('un--getNewArgs'(V3, V5))] end end end(E0, E1)) end.
'un--getDef'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Core.Case.CaseTree.DefaultCase', V8} -> begin (V9 = ('un--toCExpTree'(V0, V1, V2, V3, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V13}} end), V15 end(V10)) end end end end; {'Core.Case.CaseTree.ConstCase', V16, V17} -> case V16 of {'Core.TT.WorldVal'} -> begin (V18 = ('un--toCExpTree'(V0, V1, V2, V3, V17))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V22}} end), V24 end(V19)) end end end end; _ -> ('un--getDef'(V0, V1, V2, V3, V7)) end; _ -> ('un--getDef'(V0, V1, V2, V3, V7)) end end(E0, E1)) end.
'un--expandToArity'(V0, V1, V2, V3) -> case V2 of {'Core.CompileExpr.CErased', V4} -> {'Core.CompileExpr.CErased', V4}; _ -> case V1 of 0 -> ('nested--9154-2998--in--un--applyAll'(V0, V3, V2, V2, V3)); _ -> begin (V5 = (V1 - 1)), case V3 of [E0 | E1] -> (fun (V6, V7) -> ('un--expandToArity'(V0, V5, ('nested--9154-3027--in--un--addArg'(V0, V5, V6, V7, V2, V2, V6)), V7)) end(E0, E1)); _ -> case V3 of [] -> ('un--etaExpand'(V0, 0, V1, V2, [])) end end end end end.
'un--etaExpand'(V0, V1, V2, V3, V4) -> case V2 of 0 -> ('nested--9024-2871--in--un--mkApp'(V0, V4, V3, V1, V3, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('nested--9024-2870--in--un--mkLocal'(V0, V4, V3, V1, ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V3)), V5)) end))(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V4)))))); _ -> begin (V13 = (V2 - 1)), {'Core.CompileExpr.CLam', ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V3)), {'Core.Name.MN', <<"eta"/utf8>>, V1}, ('un--etaExpand'([{'Core.Name.MN', <<"eta"/utf8>>, V1} | V0], begin (V14 = (V1 + 1)), case ((V14 band 9223372036854775808) =/= 0) of 'true' -> (V14 bor -9223372036854775808); _ -> (V14 band 9223372036854775807) end end, V13, ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CExp'(V3)), [0 | ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> ('un--weakenVar'(V15)) end))(V4))]))} end end.
'un--eraseConArgs'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--expandToArity'(V0, V1, V3, V4))), case ('Idris.Idris2.Data.List':'un--isNil'(V2)) of 1 -> V5; 0 -> ('un--dropPos'(V2, V5)) end end.
'un--enumTree'(V0) -> case V0 of {'Core.CompileExpr.CConCase', V1, V2, V3, V4} -> begin (V16 = ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V7, V8)) end end end end, fun (V9) -> fun (V10) -> {'Prelude.Types.Just', V10} end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V13, V14)) end end end end}, fun (V15) -> ('nested--10855-4551--in--un--toEnum'(V4, V3, V2, V1, V15)) end, V3))), case V16 of {'Prelude.Types.Just', V17} -> {'Core.CompileExpr.CConstCase', V1, V2, V17, V4}; {'Prelude.Types.Nothing'} -> {'Core.CompileExpr.CConCase', V1, V2, V3, V4} end end; _ -> V0 end.
'un--enumTag'(V0, V1) -> case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V0, 255)) of 1 -> {'Core.TT.B8', begin (V2 = V1), begin (V3 = 256), begin (V4 = (V2 rem V3)), case ((V4 * V3) < 0) of 'true' -> (V4 + V3); _ -> V4 end end end end}; 0 -> case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V0, 65535)) of 1 -> {'Core.TT.B16', begin (V5 = V1), begin (V6 = 65536), begin (V7 = (V5 rem V6)), case ((V7 * V6) < 0) of 'true' -> (V7 + V6); _ -> V7 end end end end}; 0 -> {'Core.TT.B32', begin (V8 = V1), begin (V9 = 4294967296), begin (V10 = (V8 rem V9)), case ((V10 * V9) < 0) of 'true' -> (V10 + V9); _ -> V10 end end end end} end end.
'un--dropPos'(V0, V1) -> case V1 of {'Core.CompileExpr.CLam', V2, V3, V4} -> {'Core.CompileExpr.CLam', V2, V3, ('un--dropPos'(V0, V4))}; {'Core.CompileExpr.CApp', V5, V6, V7} -> case V6 of {'Core.CompileExpr.CApp', V8, V9, V10} -> {'Core.CompileExpr.CApp', V5, ('un--dropPos'(V0, V6)), V7}; _ -> {'Core.CompileExpr.CApp', V5, V6, ('un--dropFrom'(V0, 0, V7))} end; {'Core.CompileExpr.CCon', V11, V12, V13, V14, V15} -> {'Core.CompileExpr.CCon', V11, V12, V13, V14, ('un--dropFrom'(V0, 0, V15))}; _ -> V1 end.
'un--dropFrom'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V20, V21, V22, V23)) end end end end end end end, fun (V24) -> fun (V25) -> V25 end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V28, V29, V30)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V31) -> fun (V32) -> case (V31 =:= V32) of 'false' -> 0; _ -> 1 end end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V33, V34)) end end}, V1, V0)) of 1 -> ('un--dropFrom'(V0, (V1 + 1), V4)); 0 -> [V3 | ('un--dropFrom'(V0, (V1 + 1), V4))] end end(E0, E1)) end.
'un--dconFlag'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V99 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V98 = fun (V49) -> case V48 of {'Prelude.Types.Just', V50} -> {'Prelude.Types.Right', ('nested--11113-4772--in--un--ciFlags'(V1, V0, case V50 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> V68 end, case V50 of {'Core.Context.Context.MkGlobalDef', V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94} -> V84 end))}; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<(begin (V96 = fun (V95) -> V95 end), fun (V97) -> (V96(V97)) end end(<<"Can\x{27}t find "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V49)) end end), V98 end(V45)) end end end end), V99 end(V8)) end end end end.
'un--constCases'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Core.Case.CaseTree.ConstCase', V8, V9} -> case V8 of {'Core.TT.WorldVal'} -> ('un--constCases'(V0, V1, V2, V3, V7)); _ -> begin (V10 = ('un--toCExpTree'(V0, V1, V2, V3, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V22 = begin (V15 = ('un--constCases'(V0, V1, V2, V3, V7))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = fun (V20) -> {'Prelude.Types.Right', [{'Core.CompileExpr.MkConstAlt', V8, V14} | V19]} end), V21 end(V16)) end end end end), V22 end(V11)) end end end end end; _ -> ('un--constCases'(V0, V1, V2, V3, V7)) end end(E0, E1)) end.
'un--conCases'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Core.Case.CaseTree.ConCase', V8, V9, V10, V11} -> begin (V17 = begin (V12 = V1), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V103 = begin (V54 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V8, case V21 of {'Core.Context.MkDefs', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> V22 end))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V102 = case V58 of {'Prelude.Types.Just', V59} -> begin (V60 = {'Prelude.Types.Just', V59}), ('case--case block in conCases-5745'(V10, V0, V11, V9, V8, V7, V3, V2, V1, V21, V59, V60, case V59 of {'Core.Context.Context.MkGlobalDef', V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82} -> V78 end)) end; {'Prelude.Types.Nothing'} -> begin (V83 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, V8))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V101 = begin (V88 = ('un--toCExpTree'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V10, V0)), V1, V2, V3, V11))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V100 = begin (V93 = ('un--conCases'(V0, V1, V2, V3, V7))), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V99 = fun (V98) -> {'Prelude.Types.Right', [{'Core.CompileExpr.MkConAlt', V87, {'Core.CompileExpr.TYCON'}, {'Prelude.Types.Nothing'}, V10, V92} | V97]} end), V99 end(V94)) end end end end), V100 end(V89)) end end end end), V101 end(V84)) end end end end end), V102 end(V55)) end end end end), V103 end(V18)) end end end end; _ -> ('un--conCases'(V0, V1, V2, V3, V7)) end end(E0, E1)) end.
'un--compileExp'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.CompileExpr.NextMN'}, 0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V14 = begin (V7 = ('un--toCExp'([], V0, V6, {'Core.Name.UN', {'Core.Name.Basic', <<"main"/utf8>>}}, V1))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', V11} end), V13 end(V8)) end end end end), V14 end(V3)) end end end end.
'un--compileDef'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V191 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V190 = case V48 of {'Prelude.Types.Just', V49} -> begin (V50 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V185 = case ('nested--16172-9376--in--un--noDefYet'(V1, V0, case V49 of {'Core.Context.Context.MkGlobalDef', V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76} -> V72 end, case V54 of {'Core.Options.MkSessionOpts', V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} -> V100 end)) of 1 -> ('Idris.Idris2.Core.Context':'un--recordWarning'(V0, {'Core.Core.GenericWarn', <<<<"Compiling hole "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>})); 0 -> begin (V179 = begin (V129 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Def'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Def'(V105, V106)) end end}, case V49 of {'Core.Context.Context.MkGlobalDef', V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128} -> V124 end))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V178 = ('un--toCDef'(V0, V1, case V49 of {'Core.Context.Context.MkGlobalDef', V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155} -> V136 end, case V49 of {'Core.Context.Context.MkGlobalDef', V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177} -> V159 end, V133))), V178 end(V130)) end end end end), fun (V180) -> begin (V181 = (V179(V180))), case V181 of {'Prelude.Types.Left', V182} -> {'Prelude.Types.Left', V182}; {'Prelude.Types.Right', V183} -> (begin (V184 = ('Idris.Idris2.Core.Context':'un--setCompiled'(V0, V1, V183))), V184 end(V180)) end end end end end), V185 end(V51)) end end end end; {'Prelude.Types.Nothing'} -> fun (V186) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<(begin (V188 = fun (V187) -> V187 end), fun (V189) -> (V188(V189)) end end(<<"Trying to compile unknown name "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V186)) end end), V190 end(V45)) end end end end), V191 end(V8)) end end end end.
'un--builtinNatTree'(V0, V1) -> case V1 of {'Core.CompileExpr.CConCase', V2, V3, V4, V5} -> case V3 of {'Core.CompileExpr.CLocal', V6, V7} -> fun (V8) -> {'Prelude.Types.Right', begin (V9 = {'Core.CompileExpr.CLocal', V6, V7}), case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V10, V11)) end end, 0}, fun (V12) -> ('un--natBranch'(V12)) end, V4)) of 1 -> begin (V13 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Core.CompileExpr.CCrash', V2, <<"Nat case not covered"/utf8>>} end, V5))), begin (V15 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V13 end, fun () -> fun (V14) -> V14 end end, ('un--getSBranch'(V9, V4))))), begin (V17 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V13 end, fun () -> fun (V16) -> V16 end end, ('un--getZBranch'(V4))))), {'Core.CompileExpr.CConstCase', V2, V9, [{'Core.CompileExpr.MkConstAlt', {'Core.TT.BI', 0}, V17} | []], {'Prelude.Types.Just', V15}} end end end; 0 -> {'Core.CompileExpr.CConCase', V2, V9, V4, V5} end end} end; _ -> begin (V18 = ('un--newMN'(V0, <<"succ"/utf8>>))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V46 = begin (V39 = ('un--builtinNatTree'(V0, {'Core.CompileExpr.CConCase', V2, {'Core.CompileExpr.CLocal', 0, V2}, ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V23) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CConAlt'(V23)) end))(V4)), ((begin (V36 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V34, V35)) end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end(fun (V31) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CExp'(V31)) end))(V5))}))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V45 = fun (V44) -> {'Prelude.Types.Right', {'Core.CompileExpr.CLet', V2, V22, 0, V3, V43}} end), V45 end(V40)) end end end end), V46 end(V19)) end end end end end; _ -> fun (V47) -> {'Prelude.Types.Right', V1} end end.
'un--builtinMagic'(V0) -> ('un--magic'(('un--natHack'()), V0)).
'un--applyNewType'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--expandToArity'(V0, V1, V3, V4))), ('nested--9285-3110--in--un--keepArg'(V0, V4, V3, V2, V1, V5)) end.
