-module('Idris.Idris2.System.File.ReadWrite').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--3585-1511--in--un--fRead\x{27}'/5,
  'un--writeFile'/3,
  'un--removeFile'/2,
  'un--readLinesOnto'/5,
  'un--readFilePage'/4,
  'un--readFile'/2,
  'un--prim__writeLine'/3,
  'un--prim__seekLine'/2,
  'un--prim__removeFile'/2,
  'un--prim__readLine'/2,
  'un--prim__readChars'/3,
  'un--prim__readChar'/2,
  'un--prim__eof'/2,
  'un--getStringAndFree'/2,
  'un--fSeekLine'/2,
  'un--fRead'/2,
  'un--fPutStrLn'/3,
  'un--fPutStr'/3,
  'un--fGetLine'/2,
  'un--fGetChars'/3,
  'un--fGetChar'/2,
  'un--fEOF'/2,
  'un--appendFile'/3
]).
'nested--3585-1511--in--un--fRead\x{27}'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.IO.MkHasIO', V5, V6} -> case V5 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> ((((V8('erased'))('erased'))(('un--fEOF'(V2, V3))))(fun (V10) -> case V10 of 1 -> case V2 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))({'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Data.SnocList':'dn--un--cast_Cast_(SnocList $a)_(List $a)'(V4))))})) end end end; 0 -> case V2 of {'Prelude.IO.MkHasIO', V19, V20} -> case V19 of {'Prelude.Interfaces.MkMonad', V21, V22, V23} -> ((((V22('erased'))('erased'))(('un--fGetLine'(V2, V3))))(fun (V24) -> case V24 of {'Prelude.Types.Right', V25} -> ('nested--3585-1511--in--un--fRead\x{27}'(V0, V1, V2, V3, {'Prelude.Basics.:<', V4, V25})); {'Prelude.Types.Left', V26} -> case V2 of {'Prelude.IO.MkHasIO', V27, V28} -> case V27 of {'Prelude.Interfaces.MkMonad', V29, V30, V31} -> case V29 of {'Prelude.Interfaces.MkApplicative', V32, V33, V34} -> ((V33('erased'))({'Prelude.Types.Left', V26})) end end end end end)) end end end end)) end end.
'un--writeFile'(V0, V1, V2) -> ('Idris.Idris2.System.File.Handle':'un--withFile'(V0, V1, 1, fun (V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> case V6 of {'Prelude.Interfaces.MkApplicative', V9, V10, V11} -> ((V10('erased'))(V3)) end end end end, fun (V12) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V13) -> fun (V14) -> ('un--fPutStr'(V0, V13, V14)) end end, V2, V12)) end)).
'un--removeFile'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> ((V10('erased'))(fun (V11) -> ('un--prim__removeFile'(V1, V11)) end)) end))(fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7, begin (V8 = 0), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end)) of 1 -> ('Idris.Idris2.System.File.Support':'un--ok'(V0, {'Builtin.MkUnit'})); 0 -> ('Idris.Idris2.System.File.Error':'un--returnError'(V0)) end end)) end end.
'un--readLinesOnto'(V0, V1, V2, V3, V4) -> case V3 of {'Data.Fuel.Dry'} -> case V0 of {'Prelude.IO.MkHasIO', V5, V6} -> case V5 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> case V7 of {'Prelude.Interfaces.MkApplicative', V10, V11, V12} -> ((V11('erased'))({'Prelude.Types.Right', {'Builtin.MkPair', 0, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1))}})) end end end; {'Data.Fuel.More', V13} -> case V0 of {'Prelude.IO.MkHasIO', V14, V15} -> case V14 of {'Prelude.Interfaces.MkMonad', V16, V17, V18} -> ((((V17('erased'))('erased'))(('un--fEOF'(V0, V4))))(fun (V19) -> case V19 of 0 -> case V2 of 0 -> ('Idris.Idris2.Prelude.Interfaces.Monad':'dn--un-->>=_Monad_Compose((. $m) $t)'(case V0 of {'Prelude.IO.MkHasIO', V20, V21} -> V20 end, {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> {'Prelude.Types.Right', (V24(V27))} end end end end end, fun (V28) -> fun (V29) -> {'Prelude.Types.Right', V29} end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> case V32 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> case V33 of {'Prelude.Types.Right', V36} -> {'Prelude.Types.Right', (V35(V36))}; {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37} end end end end end end}, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(V40, V41)) end end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_(Either $e)'(V43)) end end}, {'Prelude.Interfaces.MkTraversable', fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> {'Prelude.Types.Right', (V46(V49))} end end end end end, {'Prelude.Interfaces.MkFoldable', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_(Either $e)'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_(Either $e)'(V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_(Either $e)'(V61)) end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_(Either $e)'(V65, V66, V67, V68)) end end end end end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_(Either $e)'(V70)) end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_(Either $e)'(V73, V74, V75)) end end end end end}, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_(Either $e)'(V79, V80, V81)) end end end end end end}, ('un--fGetLine'(V0, V4)), fun (V82) -> ('un--readLinesOnto'(V0, [V82 | V1], 0, (V13()), V4)) end)); _ -> begin (V83 = (V2 - 1)), ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Prelude.Interfaces.MkApplicative', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> (('Idris.Idris2.Prelude.Interfaces.Functor':'dn--un--map_Functor_Compose((. $f) $g)'(case V0 of {'Prelude.IO.MkHasIO', V88, V89} -> case V88 of {'Prelude.Interfaces.MkMonad', V90, V91, V92} -> case V90 of {'Prelude.Interfaces.MkApplicative', V93, V94, V95} -> V93 end end end, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> {'Prelude.Types.Right', (V98(V101))} end end end end end, V86))(V87)) end end end end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Interfaces.Applicative':'dn--un--pure_Applicative_Compose((. $f) $g)'(case V0 of {'Prelude.IO.MkHasIO', V104, V105} -> case V104 of {'Prelude.Interfaces.MkMonad', V106, V107, V108} -> V106 end end, {'Prelude.Interfaces.MkApplicative', fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> {'Prelude.Types.Right', (V111(V114))} end end end end end, fun (V115) -> fun (V116) -> {'Prelude.Types.Right', V116} end end, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> case V119 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> case V120 of {'Prelude.Types.Right', V123} -> {'Prelude.Types.Right', (V122(V123))}; {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124} end end end end end end}, V103)) end end, fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> ('Idris.Idris2.Prelude.Interfaces.Applicative':'dn--un--<*>_Applicative_Compose((. $f) $g)'(case V0 of {'Prelude.IO.MkHasIO', V129, V130} -> case V129 of {'Prelude.Interfaces.MkMonad', V131, V132, V133} -> V131 end end, {'Prelude.Interfaces.MkApplicative', fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> {'Prelude.Types.Right', (V136(V139))} end end end end end, fun (V140) -> fun (V141) -> {'Prelude.Types.Right', V141} end end, fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> case V144 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> case V145 of {'Prelude.Types.Right', V148} -> {'Prelude.Types.Right', (V147(V148))}; {'Prelude.Types.Left', V149} -> {'Prelude.Types.Left', V149} end end end end end end}, V127, V128)) end end end end}, ('un--fSeekLine'(V0, V4)), ('un--readLinesOnto'(V0, V1, V83, {'Data.Fuel.More', V13}, V4)))) end end; 1 -> case V0 of {'Prelude.IO.MkHasIO', V150, V151} -> case V150 of {'Prelude.Interfaces.MkMonad', V152, V153, V154} -> case V152 of {'Prelude.Interfaces.MkApplicative', V155, V156, V157} -> ((V156('erased'))({'Prelude.Types.Right', {'Builtin.MkPair', 1, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1))}})) end end end end end)) end end end.
'un--readFilePage'(V0, V1, V2, V3) -> ('Idris.Idris2.System.File.Handle':'un--withFile'(V0, V3, 0, fun (V4) -> case V0 of {'Prelude.IO.MkHasIO', V5, V6} -> case V5 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> case V7 of {'Prelude.Interfaces.MkApplicative', V10, V11, V12} -> ((V11('erased'))(V4)) end end end end, fun (V13) -> ('un--readLinesOnto'(V0, [], V1, V2, V13)) end)).
'un--readFile'(V0, V1) -> ((begin (V20 = case V0 of {'Prelude.IO.MkHasIO', V12, V13} -> case V12 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkApplicative', V17, V18, V19} -> V17 end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V9 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> {'Prelude.Types.Right', (V5(V8))} end end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Builtin':'un--snd'(V2)))) end))))(('un--readFilePage'(V0, 0, ('Idris.Idris2.Data.Fuel':'un--forever'()), V1)))).
'un--prim__writeLine'(V0, V1, V2) -> ('erlang':'throw'({'$idris_error', <<"Error: Unsupported %foreign primitive System.File.ReadWrite.prim__writeLine"/utf8>>})).
'un--prim__seekLine'(V0, V1) -> ('erlang':'throw'({'$idris_error', <<"Error: Unsupported %foreign primitive System.File.ReadWrite.prim__seekLine"/utf8>>})).
'un--prim__removeFile'(V0, V1) -> ('erlang':'throw'({'$idris_error', <<"Error: Unsupported %foreign primitive System.File.ReadWrite.prim__removeFile"/utf8>>})).
'un--prim__readLine'(V0, V1) -> ('erlang':'throw'({'$idris_error', <<"Error: Unsupported %foreign primitive System.File.ReadWrite.prim__readLine"/utf8>>})).
'un--prim__readChars'(V0, V1, V2) -> ('erlang':'throw'({'$idris_error', <<"Error: Unsupported %foreign primitive System.File.ReadWrite.prim__readChars"/utf8>>})).
'un--prim__readChar'(V0, V1) -> ('erlang':'throw'({'$idris_error', <<"Error: Unsupported %foreign primitive System.File.ReadWrite.prim__readChar"/utf8>>})).
'un--prim__eof'(V0, V1) -> ('erlang':'throw'({'$idris_error', <<"Error: Unsupported %foreign primitive System.File.ReadWrite.prim__eof"/utf8>>})).
'un--getStringAndFree'(V0, V1) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(('Idris.Idris2.PrimIO':'un--prim__nullAnyPtr'(('Idris.Idris2.PrimIO':'un--prim__forgetPtr'(V1)))), begin (V2 = 0), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end)) of 1 -> ('Idris.Idris2.System.File.Error':'un--returnError'(V0)); 0 -> begin (V3 = ('Idris.Idris2.Prelude.IO':'un--prim__getString'(V1))), case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(('Idris.Idris2.System.FFI':'un--free'(V0, ('Idris.Idris2.PrimIO':'un--prim__forgetPtr'(V1))))))(fun (V9) -> ('Idris.Idris2.System.File.Support':'un--ok'(V0, V3)) end)) end end end end.
'un--fSeekLine'(V0, V1) -> begin (V2 = V1), case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> ((V11('erased'))(fun (V12) -> ('un--prim__seekLine'(V2, V12)) end)) end))(fun (V8) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V8, begin (V9 = 0), case ((V9 band 9223372036854775808) =/= 0) of 'true' -> (V9 bor -9223372036854775808); _ -> (V9 band 9223372036854775807) end end)) of 1 -> ('Idris.Idris2.System.File.Error':'un--returnError'(V0)); 0 -> ('Idris.Idris2.System.File.Support':'un--ok'(V0, {'Builtin.MkUnit'})) end end)) end end end.
'un--fRead'(V0, V1) -> ('nested--3585-1511--in--un--fRead\x{27}'(V0, V1, V0, V1, {'Prelude.Basics.Lin'})).
'un--fPutStrLn'(V0, V1, V2) -> ('un--fPutStr'(V0, V1, <<V2/binary, <<"\x{a}"/utf8>>/binary>>)).
'un--fPutStr'(V0, V1, V2) -> begin (V3 = V1), case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> ((V12('erased'))(fun (V13) -> ('un--prim__writeLine'(V3, V2, V13)) end)) end))(fun (V9) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V9, begin (V10 = 0), case ((V10 band 9223372036854775808) =/= 0) of 'true' -> (V10 bor -9223372036854775808); _ -> (V10 band 9223372036854775807) end end)) of 1 -> ('Idris.Idris2.System.File.Error':'un--returnError'(V0)); 0 -> ('Idris.Idris2.System.File.Support':'un--ok'(V0, {'Builtin.MkUnit'})) end end)) end end end.
'un--fGetLine'(V0, V1) -> begin (V2 = V1), case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> ((V10('erased'))(fun (V11) -> ('un--prim__readLine'(V2, V11)) end)) end))(fun (V8) -> ('un--getStringAndFree'(V0, V8)) end)) end end end.
'un--fGetChars'(V0, V1, V2) -> begin (V3 = V1), case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> ((V11('erased'))(fun (V12) -> ('un--prim__readChars'(V2, V3, V12)) end)) end))(fun (V9) -> ('un--getStringAndFree'(V0, V9)) end)) end end end.
'un--fGetChar'(V0, V1) -> begin (V2 = V1), case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> ((V19('erased'))(fun (V20) -> ('un--prim__readChar'(V2, V20)) end)) end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> ((((V12('erased'))('erased'))(('Idris.Idris2.System.File.Error':'un--fileError'(V0, V1))))(fun (V14) -> case V14 of 1 -> ('Idris.Idris2.System.File.Error':'un--returnError'(V0)); 0 -> ('Idris.Idris2.System.File.Support':'un--ok'(V0, (begin (V16 = fun (V15) -> case V15 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end end), fun (V17) -> (V16(V17)) end end(V8)))) end end)) end end end)) end end end.
'un--fEOF'(V0, V1) -> begin (V2 = V1), case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> ((V19('erased'))(fun (V20) -> ('un--prim__eof'(V2, V20)) end)) end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))(('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V8, begin (V17 = 0), case ((V17 band 9223372036854775808) =/= 0) of 'true' -> (V17 bor -9223372036854775808); _ -> (V17 band 9223372036854775807) end end)))) end end end end)) end end end.
'un--appendFile'(V0, V1, V2) -> ('Idris.Idris2.System.File.Handle':'un--withFile'(V0, V1, 2, fun (V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> case V6 of {'Prelude.Interfaces.MkApplicative', V9, V10, V11} -> ((V10('erased'))(V3)) end end end end, fun (V12) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V13) -> fun (V14) -> ('un--fPutStr'(V0, V13, V14)) end end, V2, V12)) end)).
