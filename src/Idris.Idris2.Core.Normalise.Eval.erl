-module('Idris.Idris2.Core.Normalise.Eval').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in evalDef-5704'/18,
  'case--evalOp-5528'/9,
  'nested--8470-5342--in--un--takeStk'/7,
  'nested--8250-1625--in--un--set'/5,
  'nested--8472-5486--in--un--evalAll'/9,
  'nested--8467-4715--in--un--concrete'/13,
  'nested--8458-2340--in--un--closeArgs'/13,
  'un--updateLocal'/7,
  'un--updateLimit'/4,
  'un--tryAlt'/12,
  'un--toClosure'/3,
  'un--takeFromStack'/4,
  'un--nfOpts'/6,
  'un--nf'/5,
  'un--isFromTerm'/1,
  'un--gnfOpts'/4,
  'un--gnf'/3,
  'un--getTerm'/1,
  'un--getNF'/2,
  'un--getCaseBound'/5,
  'un--gType'/2,
  'un--gErased'/1,
  'un--findAlt'/12,
  'un--evalWithOpts'/9,
  'un--evalTree'/11,
  'un--evalRef'/11,
  'un--evalOp'/8,
  'un--evalMeta'/10,
  'un--evalLocal'/10,
  'un--evalLocClosure'/9,
  'un--evalDef'/13,
  'un--evalConAlt'/13,
  'un--evalClosureWithOpts'/5,
  'un--evalClosure'/4,
  'un--evalArg'/4,
  'un--eval'/9,
  'un--continueNF'/5,
  'un--argsFromStack'/4,
  'un--applyToStack'/7,
  'un--Stack'/1
]).
'case--case block in evalDef-5704'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Prelude.Types.Nothing'} -> begin (V32 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V16, <<"eval.def.underapplied"/utf8>>, 50, begin (V22 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V16, {'Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Value':'dn--un--full_HasNames_(NF $free)'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Value':'dn--un--resolved_HasNames_(NF $free)'(V20, V21)) end end}, (V8())))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V31 = fun (V27) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V28) -> fun (V29) -> <<V28/binary, V29/binary>> end end, <<""/utf8>>}, fun (V30) -> V30 end, [<<"Cannot reduce under-applied "/utf8>> | [('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V2, V26)) | []]]))} end), V31 end(V23)) end end end end))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V38 = fun (V37) -> {'Prelude.Types.Right', (V8())} end), V38 end(V33)) end end end end; {'Prelude.Types.Just', V39} -> case V39 of {'Builtin.MkPair', V40, V41} -> begin (V42 = ('un--evalTree'(V0, V1, V16, V3, V2, V15, V40, V14, V12, V41, V6))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V70 = case V46 of {'Core.Normalise.Eval.Result', V47} -> fun (V48) -> {'Prelude.Types.Right', V47} end; _ -> begin (V63 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V16, <<"eval.def.stuck"/utf8>>, 50, begin (V53 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V16, {'Core.Context.dn--un--__mkHasNames', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Value':'dn--un--full_HasNames_(NF $free)'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Value':'dn--un--resolved_HasNames_(NF $free)'(V51, V52)) end end}, (V8())))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V62 = fun (V58) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V59) -> fun (V60) -> <<V59/binary, V60/binary>> end end, <<""/utf8>>}, fun (V61) -> V61 end, [<<"evalTree failed on "/utf8>> | [('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V2, V57)) | []]]))} end), V62 end(V54)) end end end end))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V69 = fun (V68) -> {'Prelude.Types.Right', (V8())} end), V69 end(V64)) end end end end end), V70 end(V43)) end end end end end end.
'case--evalOp-5528'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Prelude.Types.Just', V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of [] -> begin (V12 = ('nested--8472-5486--in--un--evalAll'(V0, V1, V2, V3, V4, V5, V6, V7, V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V19 = fun (V17) -> {'Prelude.Types.Right', case (V6(V16)) of {'Prelude.Types.Nothing'} -> (V3()); {'Prelude.Types.Just', V18} -> V18 end} end), V19 end(V13)) end end end end; _ -> fun (V20) -> {'Prelude.Types.Right', (V3())} end end; _ -> fun (V21) -> {'Prelude.Types.Right', (V3())} end end; _ -> fun (V22) -> {'Prelude.Types.Right', (V3())} end end.
'nested--8470-5342--in--un--takeStk'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of 0 -> {'Prelude.Types.Just', {'Builtin.MkPair', ('Idris.Idris2.Data.Vect':'un--reverse'(V6)), V5}}; _ -> begin (V7 = (V4 - 1)), case V5 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V8, V9) -> ('nested--8470-5342--in--un--takeStk'(V0, V1, V2, V3, V7, V9, {'Data.Vect.::', ('Idris.Idris2.Builtin':'un--snd'(V8)), V6})) end(E0, E1)) end end end.
'nested--8250-1625--in--un--set'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Builtin.MkPair', V7, V8} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V2)) of 1 -> [{'Builtin.MkPair', V7, V3} | V6]; 0 -> [{'Builtin.MkPair', V7, V8} | ('nested--8250-1625--in--un--set'(V0, V1, V2, V3, V6))] end end end(E0, E1)) end.
'nested--8472-5486--in--un--evalAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Data.Vect.Nil'} -> fun (V9) -> {'Prelude.Types.Right', {'Data.Vect.Nil'}} end; {'Data.Vect.::', V10, V11} -> begin (V12 = ('un--evalClosure'(V7, V2, V0, V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V24 = begin (V17 = ('nested--8472-5486--in--un--evalAll'(V0, V1, V2, V3, V4, V5, V6, V7, V11))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V23 = fun (V22) -> {'Prelude.Types.Right', {'Data.Vect.::', V16, V21}} end), V23 end(V18)) end end end end), V24 end(V13)) end end end end end.
'nested--8467-4715--in--un--concrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Core.Value.NDCon', V13, V14, V15, V16, V17} -> 1; {'Core.Value.NTCon', V18, V19, V20, V21, V22} -> 1; {'Core.Value.NPrimVal', V23, V24} -> 1; {'Core.Value.NBind', V25, V26, V27, V28} -> 1; {'Core.Value.NType', V29, V30} -> 1; {'Core.Value.NDelay', V31, V32, V33, V34} -> 1; _ -> 0 end.
'nested--8458-2340--in--un--closeArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> []; [E0 | E1] -> (fun (V13, V14) -> [{'Core.Value.MkClosure', V2, V1, V9, V10, V13} | ('nested--8458-2340--in--un--closeArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14))] end(E0, E1)) end.
'un--updateLocal'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of 0 -> case V5 of {'Core.Value.::', V7, V8} -> {'Core.Value.::', {'Core.Value.MkNFClosure', V2, V3, V6}, V8}; _ -> V5 end; _ -> begin (V9 = (V4 - 1)), case V5 of {'Core.Value.::', V10, V11} -> {'Core.Value.::', V10, ('un--updateLocal'(V0, V1, V2, V3, V9, V11, V6))}; _ -> V5 end end end.
'un--updateLimit'(V0, V1, V2, V3) -> case V0 of {'Core.TT.Func'} -> {'Prelude.Types.Right', case ('Idris.Idris2.Data.List':'un--isNil'(case V2 of {'Core.Value.MkEvalOpts', V4, V5, V6, V7, V8, V9, V10, V11} -> V10 end)) of 1 -> {'Prelude.Types.Just', V2}; 0 -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V14, V15)) end end}, V1, case V2 of {'Core.Value.MkEvalOpts', V16, V17, V18, V19, V20, V21, V22, V23} -> V22 end)) of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V24} -> case V24 of 0 -> {'Prelude.Types.Nothing'}; _ -> begin (V25 = (V24 - 1)), {'Prelude.Types.Just', case V2 of {'Core.Value.MkEvalOpts', V26, V27, V28, V29, V30, V31, V32, V33} -> {'Core.Value.MkEvalOpts', V26, V27, V28, V29, V30, V31, ('nested--8250-1625--in--un--set'(V2, V1, V1, V25, V32)), V33} end} end end end end}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Just', V2}} end.
'un--tryAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Core.Value.NErased', V12, V13} -> case V13 of {'Core.TT.Dotted', V14} -> ('un--tryAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V14, V11)); _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V15} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V15, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V15)); 0 -> fun (V16) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V17) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; {'Core.Value.NDCon', V18, V19, V20, V21, V22} -> case V11 of {'Core.Case.CaseTree.ConCase', V23, V24, V25, V26} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V24, V20)) of 1 -> ('un--evalConAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V25, ((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V27) -> ('Idris.Idris2.Builtin':'un--snd'(V27)) end))(V22)), V26)); 0 -> fun (V35) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.NoMatch'}} end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V36} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V36, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V36)); 0 -> fun (V37) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V38) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; {'Core.Value.NTCon', V39, V40, V41, V42, V43} -> case V11 of {'Core.Case.CaseTree.ConCase', V44, V45, V46, V47} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V40, V44)) of 1 -> ('un--evalConAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V46, ((begin (V53 = fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V51, V52)) end end end end), fun (V54) -> fun (V55) -> ((((V53('erased'))('erased'))(V54))(V55)) end end end(fun (V48) -> ('Idris.Idris2.Builtin':'un--snd'(V48)) end))(V43)), V47)); 0 -> fun (V56) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.NoMatch'}} end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V57} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V57, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V57)); 0 -> fun (V58) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V59) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; {'Core.Value.NPrimVal', V60, V61} -> case V11 of {'Core.Case.CaseTree.ConCase', V62, V63, V64, V65} -> case V64 of [] -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'({'Core.Name.UN', {'Core.Name.Basic', ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V61))}}, V62)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V65)); 0 -> fun (V66) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.NoMatch'}} end end; _ -> fun (V67) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.NoMatch'}} end end; {'Core.Case.CaseTree.ConstCase', V68, V69} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V68, V61)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V69)); 0 -> fun (V70) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.NoMatch'}} end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V71} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V71, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V71)); 0 -> fun (V72) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V73) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; {'Core.Value.NType', V74, V75} -> case V11 of {'Core.Case.CaseTree.ConCase', V76, V77, V78, V79} -> case V76 of {'Core.Name.UN', V80} -> case V80 of {'Core.Name.Basic', V81} -> case V81 of <<"Type"/utf8>> -> case V78 of [] -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V79)); _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V82} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V82, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V82)); 0 -> fun (V83) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V84) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V85} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V85, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V85)); 0 -> fun (V86) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V87) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V88} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V88, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V88)); 0 -> fun (V89) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V90) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V91} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V91, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V91)); 0 -> fun (V92) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V93) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V94} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V94, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V94)); 0 -> fun (V95) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V96) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; {'Core.Value.NBind', V97, V98, V99, V100} -> case V99 of {'Core.TT.Pi', V101, V102, V103, V104} -> case V11 of {'Core.Case.CaseTree.ConCase', V105, V106, V107, V108} -> case V105 of {'Core.Name.UN', V109} -> case V109 of {'Core.Name.Basic', V110} -> case V110 of <<"->"/utf8>> -> case V107 of [E0 | E1] -> (fun (V111, V112) -> case V112 of [E2 | E3] -> (fun (V113, V114) -> case V114 of [] -> ('un--evalConAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, [V111 | [V113 | []]], [V104 | [{'Core.Value.MkNFClosure', V7, V5, {'Core.Value.NBind', V97, V98, {'Core.TT.Lam', V101, V102, V103, V104}, V100}} | []]], V108)); _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V115} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V115, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V115)); 0 -> fun (V116) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V117) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end end(E2, E3)); _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V118} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V118, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V118)); 0 -> fun (V119) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V120) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end end(E0, E1)); _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V121} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V121, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V121)); 0 -> fun (V122) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V123) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V124} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V124, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V124)); 0 -> fun (V125) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V126) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V127} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V127, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V127)); 0 -> fun (V128) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V129) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V130} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V130, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V130)); 0 -> fun (V131) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V132) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V133} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V133, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V133)); 0 -> fun (V134) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V135) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V136} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V136, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V136)); 0 -> fun (V137) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V138) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; {'Core.Value.NDelay', V139, V140, V141, V142} -> case V11 of {'Core.Case.CaseTree.DelayCase', V143, V144, V145} -> ('un--evalTree'(V0, V1, V2, [V143 | [V144 | V4]], V3, V5, {'Core.Value.::', V141, {'Core.Value.::', V142, V6}}, V7, V8, V9, V145)); _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V146} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V146, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V146)); 0 -> fun (V147) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V148) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Core.Case.CaseTree.DefaultCase', V149} -> case ('nested--8467-4715--in--un--concrete'(V0, V1, V3, V4, V149, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V149)); 0 -> fun (V150) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end; _ -> fun (V151) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end end.
'un--toClosure'(V0, V1, V2) -> {'Core.Value.MkClosure', [], V0, {'Core.Value.Nil'}, V1, V2}.
'un--takeFromStack'(V0, V1, V2, V3) -> ('nested--8470-5342--in--un--takeStk'(V0, V1, V3, V2, V2, V3, {'Data.Vect.Nil'})).
'un--nfOpts'(V0, V1, V2, V3, V4, V5) -> ('un--eval'(V3, V2, V0, V1, [], V4, {'Core.Value.Nil'}, V5, [])).
'un--nf'(V0, V1, V2, V3, V4) -> ('un--eval'(V2, ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V0, V1, [], V3, {'Core.Value.Nil'}, V4, [])).
'un--isFromTerm'(V0) -> case V0 of {'Core.Normalise.Eval.MkGlue', V1, V2, V3} -> V1 end.
'un--gnfOpts'(V0, V1, V2, V3) -> {'Core.Normalise.Eval.MkGlue', 1, fun (V4) -> {'Prelude.Types.Right', V3} end, fun (V5) -> begin (V11 = begin (V6 = V5), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V16 = ('un--nfOpts'(V5, V0, V1, V15, V2, V3))), V16 end(V12)) end end end end end}.
'un--gnf'(V0, V1, V2) -> {'Core.Normalise.Eval.MkGlue', 1, fun (V3) -> {'Prelude.Types.Right', V2} end, fun (V4) -> begin (V10 = begin (V5 = V4), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V15 = ('un--nf'(V4, V0, V14, V1, V2))), V15 end(V11)) end end end end end}.
'un--getTerm'(V0) -> case V0 of {'Core.Normalise.Eval.MkGlue', V1, V2, V3} -> V2 end.
'un--getNF'(V0, V1) -> case V1 of {'Core.Normalise.Eval.MkGlue', V2, V3, V4} -> (V4(V0)) end.
'un--getCaseBound'(V0, V1, V2, V3, V4) -> case V2 of [] -> case V3 of [] -> {'Prelude.Types.Just', V4}; [E0 | E1] -> (fun (V5, V6) -> {'Prelude.Types.Nothing'} end(E0, E1)) end; [E2 | E3] -> (fun (V7, V8) -> case V3 of [] -> {'Prelude.Types.Nothing'}; [E4 | E5] -> (fun (V9, V10) -> ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> {'Core.Value.::', V7, V11} end))(('un--getCaseBound'(V0, V1, V8, V10, V4)))) end(E4, E5)) end end(E2, E3)) end.
'un--gType'(V0, V1) -> {'Core.Normalise.Eval.MkGlue', 1, fun (V2) -> {'Prelude.Types.Right', {'Core.TT.TType', V0, V1}} end, fun (V3) -> fun (V4) -> {'Prelude.Types.Right', {'Core.Value.NType', V0, V1}} end end}.
'un--gErased'(V0) -> {'Core.Normalise.Eval.MkGlue', 1, fun (V1) -> {'Prelude.Types.Right', {'Core.TT.Erased', V0, {'Core.TT.Placeholder'}}} end, fun (V2) -> fun (V3) -> {'Prelude.Types.Right', {'Core.Value.NErased', V0, {'Core.TT.Placeholder'}}} end end}.
'un--findAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> begin (V12 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"eval.casetree.stuck"/utf8>>, 2, fun () -> <<"Ran out of alternatives"/utf8>> end))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = fun (V17) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end), V18 end(V13)) end end end end; [E0 | E1] -> (fun (V19, V20) -> begin (V21 = ('un--tryAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V10, V19))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V74 = case V25 of {'Core.Normalise.Eval.Result', V26} -> fun (V27) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.Result', V26}} end; {'Core.Normalise.Eval.NoMatch'} -> ('un--findAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V20)); {'Core.Normalise.Eval.GotStuck'} -> begin (V67 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V2, (begin (V29 = fun (V28) -> V28 end), fun (V30) -> (V29(V30)) end end(<<"eval.casetree.stuck"/utf8>>)), 5, begin (V35 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Value':'dn--un--full_HasNames_(NF $free)'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Value':'dn--un--resolved_HasNames_(NF $free)'(V33, V34)) end end}, V10))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V66 = begin (V44 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseAlt $vars)'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseAlt $vars)'(V42, V43)) end end}, V19))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V65 = fun (V49) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V50) -> fun (V51) -> <<V50/binary, V51/binary>> end end, <<""/utf8>>}, fun (V52) -> V52 end, [(begin (V54 = fun (V53) -> V53 end), fun (V55) -> (V54(V55)) end end(<<"Got stuck matching "/utf8>>)) | [(begin (V57 = fun (V56) -> V56 end), fun (V58) -> (V57(V58)) end end(('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V4, V39)))) | [(begin (V60 = fun (V59) -> V59 end), fun (V61) -> (V60(V61)) end end(<<" against "/utf8>>)) | [(begin (V63 = fun (V62) -> V62 end), fun (V64) -> (V63(V64)) end end(('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_(CaseAlt $vars)'(V3, V48)))) | []]]]]))} end), V65 end(V45)) end end end end), V66 end(V36)) end end end end))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V73 = fun (V72) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end), V73 end(V68)) end end end end end), V74 end(V22)) end end end end end(E0, E1)) end.
'un--evalWithOpts'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('un--eval'(V3, V4, V0, V1, V2, V5, V6, V7, V8)).
'un--evalTree'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Core.Case.CaseTree.Case', V11, V12, V13, V14} -> begin (V15 = ('un--evalLocal'(V0, V1, V2, V4, V5, V8, {'Prelude.Types.Nothing'}, V12, [], V6))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V41 = begin (V34 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V2, <<"eval.casetree"/utf8>>, 5, begin (V24 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Value':'dn--un--full_HasNames_(NF $free)'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Value':'dn--un--resolved_HasNames_(NF $free)'(V22, V23)) end end}, V19))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V33 = fun (V29) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V30) -> fun (V31) -> <<V30/binary, V31/binary>> end end, <<""/utf8>>}, fun (V32) -> V32 end, [<<"Evaluated "/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11)) | [<<" to "/utf8>> | [('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V4, V28)) | []]]]]))} end), V33 end(V25)) end end end end))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V40 = begin (V39 = ('un--updateLocal'(V0, V1, V7, V5, V12, V6, V19))), ('un--findAlt'(V0, V1, V2, V3, V4, V5, V39, V7, V8, V9, V19, V14)) end), V40 end(V35)) end end end end), V41 end(V16)) end end end end; {'Core.Case.CaseTree.STerm', V42, V43} -> case V7 of {'Core.Value.MkEvalOpts', V44, V45, V46, V47, V48, V49, V50, V51} -> case V49 of {'Prelude.Types.Nothing'} -> begin (V52 = ('un--evalWithOpts'(V2, V4, V3, V0, V7, V5, V6, ('Idris.Idris2.Core.TT':'un--embed'(V43)), V9))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V58 = fun (V57) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.Result', V56}} end), V58 end(V53)) end end end end; {'Prelude.Types.Just', V59} -> case V59 of 0 -> fun (V60) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end; _ -> begin (V61 = (V59 - 1)), begin (V70 = case V7 of {'Core.Value.MkEvalOpts', V62, V63, V64, V65, V66, V67, V68, V69} -> {'Core.Value.MkEvalOpts', V62, V63, V64, V65, V66, {'Prelude.Types.Just', V61}, V68, V69} end), begin (V71 = ('un--evalWithOpts'(V2, V4, V3, V0, V70, V5, V6, ('Idris.Idris2.Core.TT':'un--embed'(V43)), V9))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V77 = fun (V76) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.Result', V75}} end), V77 end(V72)) end end end end end end end end end; _ -> fun (V78) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end.
'un--evalRef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V7 of {'Core.TT.DataCon', V11, V12} -> fun (V13) -> {'Prelude.Types.Right', {'Core.Value.NDCon', V6, V8, V11, V12, V9}} end; {'Core.TT.TyCon', V14, V15} -> fun (V16) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Value':'un--ntCon'(V6, V8, V14, V15, V9))} end; {'Core.TT.Bound'} -> fun (V17) -> {'Prelude.Types.Right', (V10())} end; {'Core.TT.Func'} -> begin (V50 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V8, case V0 of {'Core.Context.MkDefs', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} -> V18 end))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V342 = begin (V55 = {'Core.TT.Func'}), case V54 of {'Prelude.Types.Just', V56} -> begin (V65 = case V1 of {'Core.Value.MkEvalOpts', V57, V58, V59, V60, V61, V62, V63, V64} -> V60 end), begin (V174 = ('Idris.Idris2.Core.Context':'un--reducibleInAny'([case V0 of {'Core.Context.MkDefs', V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97} -> V68 end | case V0 of {'Core.Context.MkDefs', V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129} -> V101 end], case V56 of {'Core.Context.Context.MkGlobalDef', V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151} -> V131 end, case V56 of {'Core.Context.Context.MkGlobalDef', V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173} -> V161 end))), begin (V175 = case V65 of 1 -> 1; 0 -> V174 end), begin (V176 = ('Idris.Idris2.Core.Context':'un--checkTimer'(V2))), fun (V177) -> begin (V178 = (V176(V177))), case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> (begin (V316 = begin (V206 = case V174 of 1 -> fun (V181) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V2, (begin (V183 = fun (V182) -> V182 end), fun (V184) -> (V183(V184)) end end(<<"eval.stuck"/utf8>>)), 5, begin (V190 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V185) -> fun (V186) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V185, V186)) end end, fun (V187) -> fun (V188) -> fun (V189) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V187, V188, V189)) end end end}, V8))), fun (V191) -> begin (V192 = (V190(V191))), case V192 of {'Prelude.Types.Left', V193} -> {'Prelude.Types.Left', V193}; {'Prelude.Types.Right', V194} -> (begin (V205 = fun (V195) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V196) -> fun (V197) -> <<V196/binary, V197/binary>> end end, <<""/utf8>>}, fun (V198) -> V198 end, [(begin (V200 = fun (V199) -> V199 end), fun (V201) -> (V200(V201)) end end(<<"Stuck function: "/utf8>>)) | [(begin (V203 = fun (V202) -> V202 end), fun (V204) -> (V203(V204)) end end(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V194)))) | []]]))} end), V205 end(V191)) end end end end)) end), fun (V207) -> begin (V208 = (V206(V207))), case V208 of {'Prelude.Types.Left', V209} -> {'Prelude.Types.Left', V209}; {'Prelude.Types.Right', V210} -> (begin (V315 = case V175 of 1 -> begin (V212 = fun (V211) -> ('un--updateLimit'(V55, V8, V1, V211)) end), fun (V213) -> begin (V214 = (V212(V213))), case V214 of {'Prelude.Types.Left', V215} -> {'Prelude.Types.Left', V215}; {'Prelude.Types.Right', V216} -> (begin (V313 = case V216 of {'Prelude.Types.Just', V217} -> begin (V284 = ('un--evalDef'(V0, V1, V2, V3, V4, V217, V5, V6, case V56 of {'Core.Context.Context.MkGlobalDef', V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239} -> V225 end, case V56 of {'Core.Context.Context.MkGlobalDef', V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261} -> V257 end, case V56 of {'Core.Context.Context.MkGlobalDef', V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283} -> V273 end, V9, V10))), fun (V285) -> begin (V286 = (V284(V285))), case V286 of {'Prelude.Types.Left', V287} -> {'Prelude.Types.Left', V287}; {'Prelude.Types.Right', V288} -> (begin (V290 = fun (V289) -> {'Prelude.Types.Right', V288} end), V290 end(V285)) end end end end; {'Prelude.Types.Nothing'} -> begin (V306 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, (begin (V292 = fun (V291) -> V291 end), fun (V293) -> (V292(V293)) end end(<<"eval.stuck"/utf8>>)), 10, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V294) -> fun (V295) -> <<V294/binary, V295/binary>> end end, <<""/utf8>>}, fun (V296) -> V296 end, [(begin (V298 = fun (V297) -> V297 end), fun (V299) -> (V298(V299)) end end(<<"Function "/utf8>>)) | [(begin (V301 = fun (V300) -> V300 end), fun (V302) -> (V301(V302)) end end(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)))) | [(begin (V304 = fun (V303) -> V303 end), fun (V305) -> (V304(V305)) end end(<<" past reduction limit"/utf8>>)) | []]]])) end))), fun (V307) -> begin (V308 = (V306(V307))), case V308 of {'Prelude.Types.Left', V309} -> {'Prelude.Types.Left', V309}; {'Prelude.Types.Right', V310} -> (begin (V312 = fun (V311) -> {'Prelude.Types.Right', (V10())} end), V312 end(V307)) end end end end end), V313 end(V213)) end end end end; 0 -> fun (V314) -> {'Prelude.Types.Right', (V10())} end end), V315 end(V207)) end end end end), V316 end(V177)) end end end end end end end; {'Prelude.Types.Nothing'} -> begin (V335 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V2, (begin (V318 = fun (V317) -> V317 end), fun (V319) -> (V318(V319)) end end(<<"eval.stuck.outofscope"/utf8>>)), 5, begin (V325 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V320) -> fun (V321) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V320, V321)) end end, fun (V322) -> fun (V323) -> fun (V324) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V322, V323, V324)) end end end}, V8))), fun (V326) -> begin (V327 = (V325(V326))), case V327 of {'Prelude.Types.Left', V328} -> {'Prelude.Types.Left', V328}; {'Prelude.Types.Right', V329} -> (begin (V334 = fun (V330) -> {'Prelude.Types.Right', <<(begin (V332 = fun (V331) -> V331 end), fun (V333) -> (V332(V333)) end end(<<"Stuck function: "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V329))/binary>>} end), V334 end(V326)) end end end end))), fun (V336) -> begin (V337 = (V335(V336))), case V337 of {'Prelude.Types.Left', V338} -> {'Prelude.Types.Left', V338}; {'Prelude.Types.Right', V339} -> (begin (V341 = fun (V340) -> {'Prelude.Types.Right', (V10())} end), V341 end(V336)) end end end end end end), V342 end(V51)) end end end end end.
'un--evalOp'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('case--evalOp-5528'(V0, V1, V4, V7, V6, V3, V5, V2, ('un--takeFromStack'(V0, V1, V3, V6)))).
'un--evalMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V26 = case ('Idris.Idris2.Data.List':'un--isNil'(V9)) of 1 -> ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> {'Builtin.MkPair', {'Core.FC.EmptyFC'}, V10} end))(V8)); 0 -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> {'Builtin.MkPair', {'Core.FC.EmptyFC'}, V18} end))(V8)), V9)) end), ('un--evalRef'(V0, V1, V2, V3, V4, 1, V5, {'Core.TT.Func'}, {'Core.Name.Resolved', V7}, V26, fun () -> {'Core.Value.NApp', V5, {'Core.Value.NMeta', V6, V7, V8}, V9} end)) end.
'un--evalLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Value.Nil'} -> case case case case V1 of {'Core.Value.MkEvalOpts', V10, V11, V12, V13, V14, V15, V16, V17} -> V10 end of 1 -> 1; 0 -> case V1 of {'Core.Value.MkEvalOpts', V18, V19, V20, V21, V22, V23, V24, V25} -> V19 end end of 1 -> 0; 0 -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 1 end, V6)) end of 1 -> case ('Idris.Idris2.Core.Env':'un--getBinder'({'Core.TT.dn--un--__mkWeaken', fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V28)) end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V31, V32)) end end end end}, V3, V7, V4)) of {'Core.TT.Let', V33, V34, V35, V36} -> ('un--eval'(V0, V1, V2, V3, [], V4, {'Core.Value.Nil'}, V35, V8)); _ -> fun (V37) -> {'Prelude.Types.Right', {'Core.Value.NApp', V5, {'Core.Value.NLocal', V6, V7}, V8}} end end; 0 -> fun (V38) -> {'Prelude.Types.Right', {'Core.Value.NApp', V5, {'Core.Value.NLocal', V6, V7}, V8}} end end; _ -> case V7 of 0 -> case V9 of {'Core.Value.::', V39, V40} -> ('un--evalLocClosure'(V0, V1, V2, V3, V4, V5, V6, V8, V39)) end; _ -> begin (V41 = (V7 - 1)), case V9 of {'Core.Value.::', V42, V43} -> ('un--evalLocal'(V0, V1, V2, V3, V4, V5, V6, V41, V8, V43)) end end end end.
'un--evalLocClosure'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.Value.MkClosure', V9, V10, V11, V12, V13} -> ('un--evalWithOpts'(V2, V3, V9, V0, V10, V12, V11, V13, V7)); {'Core.Value.MkNFClosure', V14, V15, V16} -> ('un--applyToStack'(V0, V1, V2, V3, V15, V16, V7)) end.
'un--evalDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V9 of {'Core.Context.Context.PMDef', V13, V14, V15, V16, V17} -> case case case V13 of {'Core.Context.Context.MkPMDefInfo', V18, V19, V20} -> V19 end of 1 -> 1; 0 -> case case case V5 of {'Core.Value.MkEvalOpts', V21, V22, V23, V24, V25, V26, V27, V28} -> V21 end of 1 -> 1; 0 -> case case V5 of {'Core.Value.MkEvalOpts', V29, V30, V31, V32, V33, V34, V35, V36} -> V30 end of 1 -> 1; 0 -> case V5 of {'Core.Value.MkEvalOpts', V37, V38, V39, V40, V41, V42, V43, V44} -> V41 end end end of 1 -> case case V6 of 1 -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V45) -> fun (V46) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V45, V46)) end end, 0, fun (V47) -> fun (V48) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V47, V48)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V51, V52)) end end}}, V8)) of 1 -> 0; 0 -> 1 end; 0 -> 0 end of 1 -> 1; 0 -> case case V6 of 1 -> case V5 of {'Core.Value.MkEvalOpts', V53, V54, V55, V56, V57, V58, V59, V60} -> V53 end; 0 -> 0 end of 1 -> 1; 0 -> case case V5 of {'Core.Value.MkEvalOpts', V61, V62, V63, V64, V65, V66, V67, V68} -> V65 end of 1 -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V71, V72, V73)) end end end end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V76, V77, V78)) end end end end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V80)) end end, fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V84, V85, V86, V87)) end end end end end end end, fun (V88) -> fun (V89) -> V89 end end, fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V92, V93, V94)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V95, V96)) end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V97, V98)) end end}, {'Core.Context.Context.TCInline'}, V10)); 0 -> 0 end end end; 0 -> 1 end end of 1 -> ('case--case block in evalDef-5704'(V0, V1, V3, V14, V16, V17, V15, V13, V12, V11, V10, V8, V7, V6, V5, V4, V2, ('un--argsFromStack'(V0, V1, V14, V11)))); 0 -> fun (V99) -> {'Prelude.Types.Right', (V12())} end end; {'Core.Context.Context.Builtin', V100, V101} -> ('un--evalOp'(V0, V1, V2, V100, V3, ('Idris.Idris2.Core.Primitives':'un--getOp'(V101, V3)), V11, V12)); _ -> begin (V116 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V2, <<"eval.def.stuck"/utf8>>, 50, begin (V106 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.Value':'dn--un--full_HasNames_(NF $free)'(V102, V103)) end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Value':'dn--un--resolved_HasNames_(NF $free)'(V104, V105)) end end}, (V12())))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V115 = fun (V111) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V112) -> fun (V113) -> <<V112/binary, V113/binary>> end end, <<""/utf8>>}, fun (V114) -> V114 end, [<<"Cannot reduce def "/utf8>> | [('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V3, V110)) | [<<": it is a "/utf8>> | [('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Def'(V9)) | []]]]]))} end), V115 end(V107)) end end end end))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V122 = fun (V121) -> {'Prelude.Types.Right', (V12())} end), V122 end(V117)) end end end end end.
'un--evalConAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case ('un--getCaseBound'(V0, V1, V11, V10, V6)) of {'Prelude.Types.Just', V13} -> ('un--evalTree'(V0, V1, V2, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V10, V3)), V4, V5, V13, V7, V8, V9, V12)); {'Prelude.Types.Nothing'} -> fun (V14) -> {'Prelude.Types.Right', {'Core.Normalise.Eval.GotStuck'}} end end.
'un--evalClosureWithOpts'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Value.MkClosure', V5, V6, V7, V8, V9} -> ('un--eval'(V2, V3, V0, V1, V5, V8, V7, V9, [])); {'Core.Value.MkNFClosure', V10, V11, V12} -> ('un--applyToStack'(V2, V3, V0, V1, V11, V12, [])) end.
'un--evalClosure'(V0, V1, V2, V3) -> case V3 of {'Core.Value.MkClosure', V4, V5, V6, V7, V8} -> ('un--eval'(V2, V5, V0, V1, V4, V7, V6, V8, [])); {'Core.Value.MkNFClosure', V9, V10, V11} -> ('un--applyToStack'(V2, V9, V0, V1, V10, V11, [])) end.
'un--evalArg'(V0, V1, V2, V3) -> ('un--evalClosure'(V0, V1, V2, V3)).
'un--eval'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Core.TT.Local', V9, V10, V11} -> ('un--evalLocal'(V0, V1, V2, V3, V5, V9, V10, V11, V8, V6)); {'Core.TT.Ref', V12, V13, V14} -> ('un--evalRef'(V0, V1, V2, V3, V5, 0, V12, V13, V14, V8, fun () -> {'Core.Value.NApp', V12, {'Core.Value.NRef', V13, V14}, V8} end)); {'Core.TT.Meta', V15, V16, V17, V18} -> ('un--evalMeta'(V0, V1, V2, V3, V5, V15, V16, V17, ('nested--8458-2340--in--un--closeArgs'(V0, V1, V4, V3, V18, V17, V16, V15, V8, V6, V5, V2, V18)), V8)); {'Core.TT.Bind', V19, V20, V21, V22} -> case V21 of {'Core.TT.Lam', V23, V24, V25, V26} -> case V8 of [E0 | E1] -> (fun (V27, V28) -> ('un--eval'(V0, V1, V2, V3, [V20 | V4], V5, {'Core.Value.::', ('Idris.Idris2.Builtin':'un--snd'(V27)), V6}, V22, V28)) end(E0, E1)); _ -> begin (V30 = ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V29) -> {'Core.Value.MkClosure', V4, V1, V6, V5, V29} end, V21))), fun (V31) -> {'Prelude.Types.Right', {'Core.Value.NBind', V19, V20, V30, fun (V32) -> fun (V33) -> ('un--evalWithOpts'(V2, V3, [V20 | V4], V32, V1, V5, {'Core.Value.::', V33, V6}, V22, V8)) end end}} end end end; {'Core.TT.Let', V34, V35, V36, V37} -> begin (V38 = {'Core.TT.Let', V34, V35, V36, V37}), case case case case V1 of {'Core.Value.MkEvalOpts', V39, V40, V41, V42, V43, V44, V45, V46} -> V39 end of 1 -> 1; 0 -> case V1 of {'Core.Value.MkEvalOpts', V47, V48, V49, V50, V51, V52, V53, V54} -> V48 end end of 1 -> case case V1 of {'Core.Value.MkEvalOpts', V55, V56, V57, V58, V59, V60, V61, V62} -> V59 end of 1 -> 0; 0 -> 1 end; 0 -> 0 end of 1 -> begin (V64 = ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V63) -> {'Core.Value.MkClosure', V4, V1, V6, V5, V63} end, V38))), fun (V65) -> {'Prelude.Types.Right', {'Core.Value.NBind', V19, V20, V64, fun (V66) -> fun (V67) -> ('un--evalWithOpts'(V2, V3, [V20 | V4], V66, V1, V5, {'Core.Value.::', V67, V6}, V22, V8)) end end}} end end; 0 -> ('un--eval'(V0, V1, V2, V3, [V20 | V4], V5, {'Core.Value.::', {'Core.Value.MkClosure', V4, V1, V6, V5, V36}, V6}, V22, V8)) end end; _ -> begin (V69 = ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V68) -> {'Core.Value.MkClosure', V4, V1, V6, V5, V68} end, V21))), fun (V70) -> {'Prelude.Types.Right', {'Core.Value.NBind', V19, V20, V69, fun (V71) -> fun (V72) -> ('un--evalWithOpts'(V2, V3, [V20 | V4], V71, V1, V5, {'Core.Value.::', V72, V6}, V22, V8)) end end}} end end end; {'Core.TT.App', V73, V74, V75} -> case case V1 of {'Core.Value.MkEvalOpts', V76, V77, V78, V79, V80, V81, V82, V83} -> V83 end of 0 -> begin (V84 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V75, []))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V89 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V74, [{'Builtin.MkPair', V73, {'Core.Value.MkNFClosure', V1, V5, V88}} | V8]))), V89 end(V85)) end end end end; 1 -> ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V74, [{'Builtin.MkPair', V73, {'Core.Value.MkClosure', V4, V1, V6, V5, V75}} | V8])) end; {'Core.TT.As', V90, V91, V92, V93} -> case case V1 of {'Core.Value.MkEvalOpts', V94, V95, V96, V97, V98, V99, V100, V101} -> V96 end of 1 -> ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V93, V8)); 0 -> begin (V102 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V92, V8))), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V114 = begin (V107 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V93, V8))), fun (V108) -> begin (V109 = (V107(V108))), case V109 of {'Prelude.Types.Left', V110} -> {'Prelude.Types.Left', V110}; {'Prelude.Types.Right', V111} -> (begin (V113 = fun (V112) -> {'Prelude.Types.Right', {'Core.Value.NAs', V90, V91, V106, V111}} end), V113 end(V108)) end end end end), V114 end(V103)) end end end end end; {'Core.TT.TDelayed', V115, V116, V117} -> begin (V118 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V117, V8))), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V124 = fun (V123) -> {'Prelude.Types.Right', {'Core.Value.NDelayed', V115, V116, V122}} end), V124 end(V119)) end end end end; {'Core.TT.TDelay', V125, V126, V127, V128} -> fun (V129) -> {'Prelude.Types.Right', {'Core.Value.NDelay', V125, V126, {'Core.Value.MkClosure', V4, V1, V6, V5, V127}, {'Core.Value.MkClosure', V4, V1, V6, V5, V128}}} end; {'Core.TT.TForce', V130, V131, V132} -> begin (V133 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V132, []))), fun (V134) -> begin (V135 = (V133(V134))), case V135 of {'Prelude.Types.Left', V136} -> {'Prelude.Types.Left', V136}; {'Prelude.Types.Right', V137} -> (begin (V143 = case V137 of {'Core.Value.NDelay', V138, V139, V140, V141} -> ('un--eval'(V0, V1, V2, V3, [{'Core.Name.UN', {'Core.Name.Basic', <<"fvar"/utf8>>}} | V4], V5, {'Core.Value.::', V141, V6}, {'Core.TT.Local', V138, {'Prelude.Types.Nothing'}, 0}, V8)); _ -> fun (V142) -> {'Prelude.Types.Right', {'Core.Value.NForce', V130, V131, V137, V8}} end end), V143 end(V134)) end end end end; {'Core.TT.PrimVal', V144, V145} -> fun (V146) -> {'Prelude.Types.Right', {'Core.Value.NPrimVal', V144, V145}} end; {'Core.TT.Erased', V147, V148} -> begin (V161 = ('Idris.Idris2.Core.TT':'dn--un--traverse_Traversable_WhyErased'({'Prelude.Interfaces.MkApplicative', fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> ('Idris.Idris2.Core.Core.Functor':'dn--un--map_Functor_CORECore'(V151, V152)) end end end end, fun (V153) -> fun (V154) -> fun (V155) -> ('Idris.Idris2.Core.Core.Applicative':'dn--un--pure_Applicative_CORECore'(V154, V155)) end end end, fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Core.Core.Applicative':'dn--un--<*>_Applicative_CORECore'(V158, V159)) end end end end}, fun (V160) -> ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V160, V8)) end, V148))), ((begin (V177 = fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V174, V175, V176)) end end end end end), fun (V178) -> fun (V179) -> ((((V177('erased'))('erased'))(V178))(V179)) end end end((begin (V169 = fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> {'Prelude.Types.Right', (V165(V168))} end end end end end), fun (V170) -> fun (V171) -> ((((V169('erased'))('erased'))(V170))(V171)) end end end(fun (V162) -> {'Core.Value.NErased', V147, V162} end))))(V161)) end; {'Core.TT.TType', V180, V181} -> fun (V182) -> {'Prelude.Types.Right', {'Core.Value.NType', V180, V181}} end end.
'un--continueNF'(V0, V1, V2, V3, V4) -> ('un--applyToStack'(V2, ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V0, V1, V3, V4, [])).
'un--argsFromStack'(V0, V1, V2, V3) -> case V2 of [] -> {'Prelude.Types.Just', {'Builtin.MkPair', {'Core.Value.Nil'}, V3}}; [E0 | E1] -> (fun (V4, V5) -> case V3 of [] -> {'Prelude.Types.Nothing'}; [E2 | E3] -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--argsFromStack'(V0, V1, V5, V7)), fun (V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Prelude.Types.Just', {'Builtin.MkPair', {'Core.Value.::', ('Idris.Idris2.Builtin':'un--snd'(V6)), V9}, V10}} end end)) end(E2, E3)) end end(E0, E1)) end.
'un--applyToStack'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Core.Value.NBind', V7, V8, V9, V10} -> case V9 of {'Core.TT.Lam', V11, V12, V13, V14} -> case V6 of [E0 | E1] -> (fun (V15, V16) -> begin (V17 = ((V10(V0))(('Idris.Idris2.Builtin':'un--snd'(V15))))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V22 = ('un--applyToStack'(V0, V1, V2, V3, V4, V21, V16))), V22 end(V18)) end end end end end(E0, E1)); _ -> fun (V23) -> {'Prelude.Types.Right', {'Core.Value.NBind', V7, V8, V9, fun (V24) -> fun (V25) -> begin (V26 = ((V10(V24))(V25))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V31 = ('un--applyToStack'(V0, V1, V2, V3, V4, V30, V6))), V31 end(V27)) end end end end end end}} end end; {'Core.TT.Let', V32, V33, V34, V35} -> begin (V36 = {'Core.TT.Let', V32, V33, V34, V35}), case case case case V1 of {'Core.Value.MkEvalOpts', V37, V38, V39, V40, V41, V42, V43, V44} -> V37 end of 1 -> 1; 0 -> case V1 of {'Core.Value.MkEvalOpts', V45, V46, V47, V48, V49, V50, V51, V52} -> V46 end end of 1 -> case case V1 of {'Core.Value.MkEvalOpts', V53, V54, V55, V56, V57, V58, V59, V60} -> V57 end of 1 -> 0; 0 -> 1 end; 0 -> 0 end of 1 -> fun (V61) -> {'Prelude.Types.Right', {'Core.Value.NBind', V7, V8, V36, fun (V62) -> fun (V63) -> begin (V64 = ((V10(V62))(V63))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V69 = ('un--applyToStack'(V0, V1, V2, V3, V4, V68, V6))), V69 end(V65)) end end end end end end}} end; 0 -> begin (V70 = ((V10(V0))(V34))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V75 = ('un--applyToStack'(V0, V1, V2, V3, V4, V74, V6))), V75 end(V71)) end end end end end end; _ -> fun (V76) -> {'Prelude.Types.Right', {'Core.Value.NBind', V7, V8, V9, fun (V77) -> fun (V78) -> begin (V79 = ((V10(V77))(V78))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V84 = ('un--applyToStack'(V0, V1, V2, V3, V4, V83, V6))), V84 end(V80)) end end end end end end}} end end; {'Core.Value.NApp', V85, V86, V87} -> case V86 of {'Core.Value.NRef', V88, V89} -> ('un--evalRef'(V0, V1, V2, V3, V4, 0, V85, V88, V89, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V87, V6)), fun () -> {'Core.Value.NApp', V85, {'Core.Value.NRef', V88, V89}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V87, V6))} end)); {'Core.Value.NLocal', V90, V91} -> ('un--evalLocal'(V0, V1, V2, V3, V4, V85, V90, V91, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V87, V6)), {'Core.Value.Nil'})); {'Core.Value.NMeta', V92, V93, V94} -> ('un--evalMeta'(V0, V1, V2, V3, V4, V85, V92, V93, V94, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V87, V6)))) end; {'Core.Value.NDCon', V95, V96, V97, V98, V99} -> fun (V100) -> {'Prelude.Types.Right', {'Core.Value.NDCon', V95, V96, V97, V98, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V99, V6))}} end; {'Core.Value.NTCon', V101, V102, V103, V104, V105} -> fun (V106) -> {'Prelude.Types.Right', {'Core.Value.NTCon', V101, V102, V103, V104, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V105, V6))}} end; {'Core.Value.NAs', V107, V108, V109, V110} -> case case V1 of {'Core.Value.MkEvalOpts', V111, V112, V113, V114, V115, V116, V117, V118} -> V113 end of 1 -> ('un--applyToStack'(V0, V1, V2, V3, V4, V110, V6)); 0 -> begin (V119 = ('un--applyToStack'(V0, V1, V2, V3, V4, V109, []))), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V131 = begin (V124 = ('un--applyToStack'(V0, V1, V2, V3, V4, V110, V6))), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V130 = fun (V129) -> {'Prelude.Types.Right', {'Core.Value.NAs', V107, V108, V123, V128}} end), V130 end(V125)) end end end end), V131 end(V120)) end end end end end; {'Core.Value.NDelayed', V132, V133, V134} -> begin (V135 = ('un--applyToStack'(V0, V1, V2, V3, V4, V134, V6))), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V141 = fun (V140) -> {'Prelude.Types.Right', {'Core.Value.NDelayed', V132, V133, V139}} end), V141 end(V136)) end end end end; {'Core.Value.NDelay', V142, V143, V144, V145} -> fun (V146) -> {'Prelude.Types.Right', V5} end; {'Core.Value.NForce', V147, V148, V149, V150} -> begin (V151 = ('un--applyToStack'(V0, V1, V2, V3, V4, V149, []))), fun (V152) -> begin (V153 = (V151(V152))), case V153 of {'Prelude.Types.Left', V154} -> {'Prelude.Types.Left', V154}; {'Prelude.Types.Right', V155} -> (begin (V161 = case V155 of {'Core.Value.NDelay', V156, V157, V158, V159} -> ('un--eval'(V0, V1, V2, V3, [{'Core.Name.UN', {'Core.Name.Basic', <<"fvar"/utf8>>}} | []], V4, {'Core.Value.::', V159, {'Core.Value.Nil'}}, {'Core.TT.Local', V156, {'Prelude.Types.Nothing'}, 0}, V6)); _ -> fun (V160) -> {'Prelude.Types.Right', {'Core.Value.NForce', V147, V148, V155, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V150, V6))}} end end), V161 end(V152)) end end end end; {'Core.Value.NPrimVal', V162, V163} -> fun (V164) -> {'Prelude.Types.Right', V5} end; {'Core.Value.NErased', V165, V166} -> begin (V179 = ('Idris.Idris2.Core.TT':'dn--un--traverse_Traversable_WhyErased'({'Prelude.Interfaces.MkApplicative', fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> ('Idris.Idris2.Core.Core.Functor':'dn--un--map_Functor_CORECore'(V169, V170)) end end end end, fun (V171) -> fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.Core.Applicative':'dn--un--pure_Applicative_CORECore'(V172, V173)) end end end, fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.Core.Applicative':'dn--un--<*>_Applicative_CORECore'(V176, V177)) end end end end}, fun (V178) -> ('un--applyToStack'(V0, V1, V2, V3, V4, V178, V6)) end, V166))), ((begin (V195 = fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V192, V193, V194)) end end end end end), fun (V196) -> fun (V197) -> ((((V195('erased'))('erased'))(V196))(V197)) end end end((begin (V187 = fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> case V184 of {'Prelude.Types.Left', V185} -> {'Prelude.Types.Left', V185}; {'Prelude.Types.Right', V186} -> {'Prelude.Types.Right', (V183(V186))} end end end end end), fun (V188) -> fun (V189) -> ((((V187('erased'))('erased'))(V188))(V189)) end end end(fun (V180) -> {'Core.Value.NErased', V165, V180} end))))(V179)) end; {'Core.Value.NType', V198, V199} -> fun (V200) -> {'Prelude.Types.Right', V5} end end.
'un--Stack'(V0) -> {'Prelude.Basics.List', {'Builtin.Pair', {'Core.FC.FC'}, {'Core.Value.Closure', V0}}}.
