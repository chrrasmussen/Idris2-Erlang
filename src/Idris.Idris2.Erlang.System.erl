-module('Idris.Idris2.Erlang.System').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--getEnvironment,splitEq-3517'/3,
  'nested--4703-3498--in--un--splitEq'/2,
  'un--unsetEnv'/2,
  'un--time'/1,
  'un--system'/2,
  'un--sleep'/2,
  'un--setEnv'/4,
  'un--halt'/2,
  'un--getEnvironment'/1,
  'un--getEnv'/2,
  'un--getArgs'/1,
  'un--exitWith'/2,
  'un--exitSuccess'/1,
  'un--exitFailure'/1,
  'un--die'/2
]).
'case--getEnvironment,splitEq-3517'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V5, $=)) end, V4)) of {'Builtin.MkPair', V6, V7} -> {'Builtin.MkPair', V3, V7} end end.
'nested--4703-3498--in--un--splitEq'(V0, V1) -> ('case--getEnvironment,splitEq-3517'(V0, V1, ('Idris.Idris2.Data.String':'un--break'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, $=)) end, V1)))).
'un--unsetEnv'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V16, V17} -> case V16 of {'Prelude.Interfaces.MkMonad', V18, V19, V20} -> case V18 of {'Prelude.Interfaces.MkApplicative', V21, V22, V23} -> ((V22('erased'))(('erlang':'apply'('os', 'unsetenv', [('unicode':'characters_to_list'(V1)) | []])))) end end end))(fun (V7) -> case V0 of {'Prelude.IO.MkHasIO', V8, V9} -> case V8 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> ((V14('erased'))(1)) end end end end)) end end.
'un--time'(V0) -> case V0 of {'Prelude.IO.MkHasIO', V1, V2} -> case V1 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> ((((V4('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V15, V16} -> case V15 of {'Prelude.Interfaces.MkMonad', V17, V18, V19} -> case V17 of {'Prelude.Interfaces.MkApplicative', V20, V21, V22} -> ((V21('erased'))(('erlang':'apply'('erlang', 'system_time', [])))) end end end))(fun (V6) -> case V0 of {'Prelude.IO.MkHasIO', V7, V8} -> case V7 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> ((V13('erased'))(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V6, 1000000000)))) end end end end)) end end.
'un--system'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V28, V29} -> case V28 of {'Prelude.Interfaces.MkMonad', V30, V31, V32} -> case V30 of {'Prelude.Interfaces.MkApplicative', V33, V34, V35} -> ((V34('erased'))(('erlang':'apply'('os', 'cmd', [('unicode':'characters_to_list'(V1)) | []])))) end end end))(fun (V7) -> case V7 of E0 -> (fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> ((((V12('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V24, V25} -> ((V25('erased'))(fun (V26) -> ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(V8, V26)) end)) end))(fun (V14) -> case V0 of {'Prelude.IO.MkHasIO', V15, V16} -> case V15 of {'Prelude.Interfaces.MkMonad', V17, V18, V19} -> case V17 of {'Prelude.Interfaces.MkApplicative', V20, V21, V22} -> ((V21('erased'))(begin (V23 = 0), case ((V23 band 9223372036854775808) =/= 0) of 'true' -> (V23 bor -9223372036854775808); _ -> (V23 band 9223372036854775807) end end)) end end end end)) end end end((fun (V27) -> ('unicode':'characters_to_binary'(V27)) end(E0)))) end end)) end end.
'un--sleep'(V0, V1) -> ((begin (V19 = case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> V16 end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V10) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> case V4 of {'Prelude.Interfaces.MkApplicative', V7, V8, V9} -> ((V8('erased'))(('erlang':'apply'('timer', 'sleep', [V1 | []])))) end end end)).
'un--setEnv'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(case V3 of 1 -> case V0 of {'Prelude.IO.MkHasIO', V49, V50} -> case V49 of {'Prelude.Interfaces.MkMonad', V51, V52, V53} -> case V51 of {'Prelude.Interfaces.MkApplicative', V54, V55, V56} -> ((V55('erased'))(1)) end end end; 0 -> ((begin (V66 = case V0 of {'Prelude.IO.MkHasIO', V58, V59} -> case V58 of {'Prelude.Interfaces.MkMonad', V60, V61, V62} -> case V60 of {'Prelude.Interfaces.MkApplicative', V63, V64, V65} -> V63 end end end), fun (V67) -> fun (V68) -> ((((V66('erased'))('erased'))(V67))(V68)) end end end(fun (V57) -> ('Idris.Idris2.Data.Maybe':'un--isNothing'(V57)) end))(('un--getEnv'(V0, V1)))) end))(fun (V9) -> case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> ((((V13('erased'))('erased'))(('Idris.Idris2.Prelude.Interfaces':'un--when'(case V0 of {'Prelude.IO.MkHasIO', V24, V25} -> case V24 of {'Prelude.Interfaces.MkMonad', V26, V27, V28} -> V26 end end, V9, fun () -> ((begin (V46 = case V0 of {'Prelude.IO.MkHasIO', V38, V39} -> case V38 of {'Prelude.Interfaces.MkMonad', V40, V41, V42} -> case V40 of {'Prelude.Interfaces.MkApplicative', V43, V44, V45} -> V43 end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end(fun (V37) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V29, V30} -> case V29 of {'Prelude.Interfaces.MkMonad', V31, V32, V33} -> case V31 of {'Prelude.Interfaces.MkApplicative', V34, V35, V36} -> ((V35('erased'))(('erlang':'apply'('os', 'putenv', [('unicode':'characters_to_list'(V1)) | [('unicode':'characters_to_list'(V2)) | []]])))) end end end)) end))))(fun (V15) -> case V0 of {'Prelude.IO.MkHasIO', V16, V17} -> case V16 of {'Prelude.Interfaces.MkMonad', V18, V19, V20} -> case V18 of {'Prelude.Interfaces.MkApplicative', V21, V22, V23} -> ((V22('erased'))(1)) end end end end)) end end end)) end end.
'un--halt'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V17, V18} -> case V17 of {'Prelude.Interfaces.MkMonad', V19, V20, V21} -> case V19 of {'Prelude.Interfaces.MkApplicative', V22, V23, V24} -> ((V23('erased'))(('erlang':'apply'('erlang', 'halt', [V1 | []])))) end end end))(fun (V7) -> begin (V8 = V7), case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))(V8)) end end end end end)) end end.
'un--getEnvironment'(V0) -> case V0 of {'Prelude.IO.MkHasIO', V1, V2} -> case V1 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> ((((V4('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V25, V26} -> case V25 of {'Prelude.Interfaces.MkMonad', V27, V28, V29} -> case V27 of {'Prelude.Interfaces.MkApplicative', V30, V31, V32} -> ((V31('erased'))(('erlang':'apply'('os', 'getenv', [])))) end end end))(fun (V6) -> case V0 of {'Prelude.IO.MkHasIO', V7, V8} -> case V7 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> ((V13('erased'))(((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V15) -> case V15 of E0 -> (fun (V16) -> ('nested--4703-3498--in--un--splitEq'(V0, V16)) end((fun (V17) -> ('unicode':'characters_to_binary'(V17)) end(E0)))) end end))(V6)))) end end end end)) end end.
'un--getEnv'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V28, V29} -> case V28 of {'Prelude.Interfaces.MkMonad', V30, V31, V32} -> case V30 of {'Prelude.Interfaces.MkApplicative', V33, V34, V35} -> ((V34('erased'))(('erlang':'apply'('os', 'getenv', [('unicode':'characters_to_list'(V1)) | []])))) end end end))(fun (V7) -> case ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Erlang.Types.ETErlCharlist'}, ('Idris.Idris2.Erlang.Decode':'un--charlist'()), V7)) of {'Prelude.Types.Right', V8} -> case V8 of E0 -> (fun (V9) -> case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> case V12 of {'Prelude.Interfaces.MkApplicative', V15, V16, V17} -> ((V16('erased'))({'Prelude.Types.Just', V9})) end end end end((fun (V18) -> ('unicode':'characters_to_binary'(V18)) end(E0)))) end; {'Prelude.Types.Left', V19} -> case V0 of {'Prelude.IO.MkHasIO', V20, V21} -> case V20 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> ((V26('erased'))({'Prelude.Types.Nothing'})) end end end end end)) end end.
'un--getArgs'(V0) -> case V0 of {'Prelude.IO.MkHasIO', V1, V2} -> case V1 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> ((((V4('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V25, V26} -> case V25 of {'Prelude.Interfaces.MkMonad', V27, V28, V29} -> case V27 of {'Prelude.Interfaces.MkApplicative', V30, V31, V32} -> ((V31('erased'))(('erlang':'apply'('init', 'get_plain_arguments', [])))) end end end))(fun (V6) -> case V0 of {'Prelude.IO.MkHasIO', V7, V8} -> case V7 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> ((V13('erased'))(((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V15) -> case V15 of E0 -> (fun (V16) -> V16 end((fun (V17) -> ('unicode':'characters_to_binary'(V17)) end(E0)))) end end))(V6)))) end end end end)) end end.
'un--exitWith'(V0, V1) -> case V1 of {'Erlang.System.ExitSuccess'} -> ('un--halt'(V0, 0)); {'Erlang.System.ExitFailure', V2, V3} -> ('un--halt'(V0, V2)) end.
'un--exitSuccess'(V0) -> ('un--exitWith'(V0, {'Erlang.System.ExitSuccess'})).
'un--exitFailure'(V0) -> ('un--exitWith'(V0, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}})).
'un--die'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V8, V9} -> ((V9('erased'))(fun (V10) -> ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<V1/binary, <<"\x{a}"/utf8>>/binary>>, V10)) end)) end))(fun (V7) -> ('un--exitFailure'(V0)) end)) end end.
