-module('Idris.Idris2.Compiler.Erlang.GlobalOpts').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--4302-9416--in--un--parseFlag'/2,
  'un--stringToFlags'/1,
  'un--parseOutputFormat'/1,
  'un--parseOpts'/2,
  'un--flagToOpts'/2,
  'un--defaultGlobalOpts'/0
]).
'nested--4302-9416--in--un--parseFlag'(V0, V1) -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V2 of <<"format"/utf8>> -> case V3 of [E2 | E3] -> (fun (V4, V5) -> case V5 of [] -> ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> {'Compiler.Erlang.GlobalOpts.SetOutputFormat', V6} end))(('un--parseOutputFormat'(V4)))); _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end; <<"prefix"/utf8>> -> case V3 of [E4 | E5] -> (fun (V14, V15) -> case V15 of [] -> {'Prelude.Types.Just', {'Compiler.Erlang.GlobalOpts.SetPrefix', V14}}; _ -> {'Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Prelude.Types.Nothing'} end; <<"inline"/utf8>> -> case V3 of [E6 | E7] -> (fun (V16, V17) -> case V17 of [] -> {'Prelude.Types.Just', {'Compiler.Erlang.GlobalOpts.SetInlineSize', ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(case ('string':'to_integer'(V16)) of {E8, E9} when (erlang:'is_integer'(E8)) -> (fun (V18, V19) -> case ('string':'is_empty'(V19)) of 'true' -> V18; _ -> 0 end end(E8, E9)); _ -> 0 end))}}; _ -> {'Prelude.Types.Nothing'} end end(E6, E7)); _ -> {'Prelude.Types.Nothing'} end; <<"mutablestorage"/utf8>> -> case V3 of [] -> {'Prelude.Types.Just', {'Compiler.Erlang.GlobalOpts.SetUseMutableStorage', 1}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end.
'un--stringToFlags'(V0) -> ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V1) -> ('nested--4302-9416--in--un--parseFlag'(V0, V1)) end, ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('Idris.Idris2.Data.String':'un--words'(V2)) end))(V0)))).
'un--parseOutputFormat'(V0) -> case V0 of <<"erl"/utf8>> -> {'Prelude.Types.Just', 0}; <<"erl-pretty"/utf8>> -> {'Prelude.Types.Just', 1}; <<"abstr"/utf8>> -> {'Prelude.Types.Just', 2}; <<"beam"/utf8>> -> {'Prelude.Types.Just', 3}; <<"beam-abstr"/utf8>> -> {'Prelude.Types.Just', 4}; <<"escript"/utf8>> -> {'Prelude.Types.Just', 5}; _ -> {'Prelude.Types.Nothing'} end.
'un--parseOpts'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V2) -> fun (V3) -> ('un--flagToOpts'(V2, V3)) end end, V0, ('un--stringToFlags'(V1)))).
'un--flagToOpts'(V0, V1) -> case V1 of {'Compiler.Erlang.GlobalOpts.SetOutputFormat', V2} -> case V0 of {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V3, V4, V5, V6} -> {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V2, V4, V5, V6} end; {'Compiler.Erlang.GlobalOpts.SetPrefix', V7} -> case V0 of {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V8, V9, V10, V11} -> {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V8, V7, V10, V11} end; {'Compiler.Erlang.GlobalOpts.SetInlineSize', V12} -> case V0 of {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V13, V14, V15, V16} -> {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V13, V14, V12, V16} end; {'Compiler.Erlang.GlobalOpts.SetUseMutableStorage', V17} -> case V0 of {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V18, V19, V20, V21} -> {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V18, V19, V20, V17} end end.
'un--defaultGlobalOpts'() -> {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', 5, <<"Idris"/utf8>>, 0, 0}.
