-module('Idris.Idris2.Core.Normalise').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in normalisePrims-8437'/14,
  'case--case block in normalisePrims-8400'/12,
  'nested--8699-7910--in--un--repSub'/9,
  'nested--8699-7909--in--un--repArg'/9,
  'nested--8544-7764--in--un--dumpEnv'/8,
  'nested--7745-6987--in--un--act'/5,
  'un--tryNormaliseSizeLimit'/6,
  'un--replace\x{27}'/8,
  'un--replace'/7,
  'un--normaliseSizeLimit'/6,
  'un--normaliseScope'/5,
  'un--normalisePrims'/10,
  'un--normalisePis'/5,
  'un--normaliseOpts'/6,
  'un--normaliseLHS'/5,
  'un--normaliseHoles'/5,
  'un--normaliseArgHoles'/5,
  'un--normaliseAll'/5,
  'un--normalise'/5,
  'un--logTermNF\x{27}'/7,
  'un--logTermNF'/7,
  'un--logNF'/7,
  'un--logGlueNF'/7,
  'un--logGlue'/7,
  'un--logEnv'/6,
  'un--glueClosure'/5,
  'un--glueBack'/5,
  'un--getValArity'/3,
  'un--getArity'/5,
  'un--etaContract'/3
]).
'case--case block in case block in normalisePrims-8437'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Prelude.Types.Just', V14} -> case (V8(V14)) of 1 -> begin (V20 = begin (V15 = V9), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V32 = begin (V25 = case V6 of 1 -> ('un--normaliseAll'(V9, V0, V24, V1, V2)); 0 -> ('un--normalise'(V9, V0, V24, V1, V2)) end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V29}} end), V31 end(V26)) end end end end), V32 end(V21)) end end end end; _ -> fun (V33) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V34) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'case--case block in normalisePrims-8400'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [E0 | E1] -> (fun (V12, V13) -> ('case--case block in case block in normalisePrims-8437'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, V12, (V7(V12)))) end(E0, E1)); _ -> fun (V14) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'nested--8699-7910--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.Value.NBind', V9, V10, V11, V12} -> begin (V20 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V7, V0, V5, V13))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V19 = ('nested--8699-7910--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V18))), V19 end(V15)) end end end end end, V11))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V40 = begin (V25 = {'Core.Name.MN', <<"tmp"/utf8>>, V6}), begin (V33 = begin (V26 = ((V12(V5))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, {'Core.TT.Ref', V9, {'Core.TT.Bound'}, V25}))))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = ('un--replace\x{27}'(V7, V0, begin (V31 = (V6 + 1)), case ((V31 band 9223372036854775808) =/= 0) of 'true' -> (V31 bor -9223372036854775808); _ -> (V31 band 9223372036854775807) end end, V5, V4, V3, V2, V30))), V32 end(V27)) end end end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', {'Core.TT.Bind', V9, V10, V24, ('Idris.Idris2.Core.TT':'un--refsToLocals'({'Core.TT.Bounds.Add', V10, V25, {'Core.TT.Bounds.None'}}, V37))}} end), V39 end(V34)) end end end end end), V40 end(V21)) end end end end; {'Core.Value.NApp', V41, V42, V43} -> case V43 of [] -> begin (V45 = fun (V44) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V44)) end), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V50 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V49, V4, {'Core.Value.NApp', V41, V42, []}))), V50 end(V46)) end end end end; _ -> begin (V53 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V51) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V52) -> ('nested--8699-7909--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V52)) end, V51)) end, V43, []))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V65 = begin (V58 = ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, {'Core.Value.NApp', V41, V42, []}))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V64 = fun (V63) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V62, V57))} end), V64 end(V59)) end end end end), V65 end(V54)) end end end end end; {'Core.Value.NDCon', V66, V67, V68, V69, V70} -> begin (V73 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V71) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V72) -> ('nested--8699-7909--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V72)) end, V71)) end, V70, []))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V92 = begin (V79 = fun (V78) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V78)) end), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V91 = begin (V84 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V83, V4, {'Core.Value.NDCon', V66, V67, V68, V69, []}))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V90 = fun (V89) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V88, V77))} end), V90 end(V85)) end end end end), V91 end(V80)) end end end end), V92 end(V74)) end end end end; {'Core.Value.NTCon', V93, V94, V95, V96, V97} -> begin (V100 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V98) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V99) -> ('nested--8699-7909--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V99)) end, V98)) end, V97, []))), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V119 = begin (V106 = fun (V105) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V105)) end), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V118 = begin (V111 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V110, V4, {'Core.Value.NTCon', V93, V94, V95, V96, []}))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V117 = fun (V116) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V115, V104))} end), V117 end(V112)) end end end end), V118 end(V107)) end end end end), V119 end(V101)) end end end end; {'Core.Value.NAs', V120, V121, V122, V123} -> begin (V124 = ('nested--8699-7910--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V122))), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V136 = begin (V129 = ('nested--8699-7910--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V123))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V135 = fun (V134) -> {'Prelude.Types.Right', {'Core.TT.As', V120, V121, V128, V133}} end), V135 end(V130)) end end end end), V136 end(V125)) end end end end; {'Core.Value.NDelayed', V137, V138, V139} -> begin (V140 = ('nested--8699-7910--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V139))), fun (V141) -> begin (V142 = (V140(V141))), case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> (begin (V146 = fun (V145) -> {'Prelude.Types.Right', {'Core.TT.TDelayed', V137, V138, V144}} end), V146 end(V141)) end end end end; {'Core.Value.NDelay', V147, V148, V149, V150} -> begin (V157 = begin (V151 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V7, V0, V5, V149))), fun (V152) -> begin (V153 = (V151(V152))), case V153 of {'Prelude.Types.Left', V154} -> {'Prelude.Types.Left', V154}; {'Prelude.Types.Right', V155} -> (begin (V156 = ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, V155))), V156 end(V152)) end end end end), fun (V158) -> begin (V159 = (V157(V158))), case V159 of {'Prelude.Types.Left', V160} -> {'Prelude.Types.Left', V160}; {'Prelude.Types.Right', V161} -> (begin (V175 = begin (V168 = begin (V162 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V7, V0, V5, V150))), fun (V163) -> begin (V164 = (V162(V163))), case V164 of {'Prelude.Types.Left', V165} -> {'Prelude.Types.Left', V165}; {'Prelude.Types.Right', V166} -> (begin (V167 = ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, V166))), V167 end(V163)) end end end end), fun (V169) -> begin (V170 = (V168(V169))), case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> (begin (V174 = fun (V173) -> {'Prelude.Types.Right', {'Core.TT.TDelay', V147, V148, V161, V172}} end), V174 end(V169)) end end end end), V175 end(V158)) end end end end; {'Core.Value.NForce', V176, V177, V178, V179} -> begin (V182 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V180) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V181) -> ('nested--8699-7909--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V181)) end, V180)) end, V179, []))), fun (V183) -> begin (V184 = (V182(V183))), case V184 of {'Prelude.Types.Left', V185} -> {'Prelude.Types.Left', V185}; {'Prelude.Types.Right', V186} -> (begin (V194 = begin (V187 = ('nested--8699-7910--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V178))), fun (V188) -> begin (V189 = (V187(V188))), case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> (begin (V193 = fun (V192) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Core.TT.TForce', V176, V177, V191}, V186))} end), V193 end(V188)) end end end end), V194 end(V183)) end end end end; {'Core.Value.NErased', V195, V196} -> case V196 of {'Core.TT.Dotted', V197} -> begin (V198 = ('nested--8699-7910--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V197))), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V204 = fun (V203) -> {'Prelude.Types.Right', {'Core.TT.Erased', V195, {'Core.TT.Dotted', V202}}} end), V204 end(V199)) end end end end; _ -> begin (V206 = fun (V205) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V205)) end), fun (V207) -> begin (V208 = (V206(V207))), case V208 of {'Prelude.Types.Left', V209} -> {'Prelude.Types.Left', V209}; {'Prelude.Types.Right', V210} -> (begin (V211 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V210, V4, V8))), V211 end(V207)) end end end end end; _ -> begin (V213 = fun (V212) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V212)) end), fun (V214) -> begin (V215 = (V213(V214))), case V215 of {'Prelude.Types.Left', V216} -> {'Prelude.Types.Left', V216}; {'Prelude.Types.Right', V217} -> (begin (V218 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V217, V4, V8))), V218 end(V214)) end end end end end.
'nested--8699-7909--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V7, V0, V5, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V14 = ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, V13))), V14 end(V10)) end end end end.
'nested--8544-7764--in--un--dumpEnv'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> fun (V8) -> case V7 of {'Core.Env.Nil'} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; [E0 | E1] -> (fun (V9, V10) -> case V7 of {'Core.Env.::', V11, V12} -> case V11 of {'Core.TT.Let', V13, V14, V15, V16} -> begin (V17 = ('un--logTermNF\x{27}'(V10, V5, V1, V4, fun () -> <<V3/binary, <<<<": let "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9))/binary>>/binary>> end, V12, V15))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V28 = begin (V22 = ('un--logTermNF\x{27}'(V10, V5, V1, V4, fun () -> <<V3/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V14))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9))/binary>>/binary>>/binary>>/binary>> end, V12, V16))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V27 = ('nested--8544-7764--in--un--dumpEnv'(V0, V1, V2, V3, V4, V5, V10, V12))), V27 end(V23)) end end end end), V28 end(V18)) end end end end; _ -> begin (V32 = ('un--logTermNF\x{27}'(V10, V5, V1, V4, fun () -> <<V3/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V11))))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Prelude.Show.MkShow', fun (V29) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V10, V29)) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V10, V30, V31)) end end}, ('Idris.Idris2.Core.TT':'un--piInfo'(V11))))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end, V12, ('Idris.Idris2.Core.TT':'un--binderType'(V11))))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V37 = ('nested--8544-7764--in--un--dumpEnv'(V0, V1, V2, V3, V4, V5, V10, V12))), V37 end(V33)) end end end end end end end(E0, E1)) end.
'nested--7745-6987--in--un--act'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V3, V0, <<"eval.eta"/utf8>>, 10, fun () -> <<"  Considering"/utf8>> end, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V61 = case V4 of {'Core.TT.Bind', V10, V11, V12, V13} -> case V12 of {'Core.TT.Lam', V14, V15, V16, V17} -> case V13 of {'Core.TT.App', V18, V19, V20} -> case V20 of {'Core.TT.Local', V21, V22, V23} -> case V23 of 0 -> begin (V27 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([V11 | V3], V0, <<"eval.eta"/utf8>>, 10, fun () -> (begin (V25 = fun (V24) -> V24 end), fun (V26) -> (V25(V26)) end end(<<"  Shrinking candidate"/utf8>>)) end, V19))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V55 = begin (V32 = ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V19, {'Core.TT.DropCons', {'Core.TT.SubRefl'}}))), begin (V33 = {'Core.TT.Bind', V10, V11, {'Core.TT.Lam', V14, V15, V16, V17}, {'Core.TT.App', V18, V19, {'Core.TT.Local', V21, V22, 0}}}), case V32 of {'Prelude.Types.Nothing'} -> begin (V37 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"eval.eta"/utf8>>, 10, fun () -> (begin (V35 = fun (V34) -> V34 end), fun (V36) -> (V35(V36)) end end(<<"  Failure!"/utf8>>)) end))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V43 = fun (V42) -> {'Prelude.Types.Right', V33} end), V43 end(V38)) end end end end; {'Prelude.Types.Just', V44} -> begin (V48 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V3, V0, <<"eval.eta"/utf8>>, 10, fun () -> (begin (V46 = fun (V45) -> V45 end), fun (V47) -> (V46(V47)) end end(<<"  Success!"/utf8>>)) end, V44))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V54 = fun (V53) -> {'Prelude.Types.Right', V44} end), V54 end(V49)) end end end end end end end), V55 end(V28)) end end end end; _ -> fun (V56) -> {'Prelude.Types.Right', V4} end end; _ -> fun (V57) -> {'Prelude.Types.Right', V4} end end; _ -> fun (V58) -> {'Prelude.Types.Right', V4} end end; _ -> fun (V59) -> {'Prelude.Types.Right', V4} end end; _ -> fun (V60) -> {'Prelude.Types.Right', V4} end end), V61 end(V6)) end end end end.
'un--tryNormaliseSizeLimit'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V2, V4, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quoteOpts_Quote_NF'(V0, V1, {'Core.Normalise.Quote.MkQuoteOpts', 0, 0, {'Prelude.Types.Just', V3}}, V2, V4, V10))), V11 end(V7)) end end end end.
'un--replace\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_NF'(V0, V1, V3, V4, V5, V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V14 = case V12 of 1 -> fun (V13) -> {'Prelude.Types.Right', V6} end; 0 -> ('nested--8699-7910--in--un--repSub'(V1, V7, V6, V5, V4, V3, V2, V0, V7)) end), V14 end(V9)) end end end end.
'un--replace'(V0, V1, V2, V3, V4, V5, V6) -> ('un--replace\x{27}'(V0, V1, 0, V2, V3, V4, V5, V6)).
'un--normaliseSizeLimit'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V6 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V2, V4, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quoteOpts_Quote_NF'(V0, V1, {'Core.Normalise.Quote.MkQuoteOpts', 0, 0, {'Prelude.Types.Just', V3}}, V2, V4, V10))), V11 end(V7)) end end end end, fun (V12) -> fun (V13) -> {'Prelude.Types.Right', V5} end end)).
'un--normaliseScope'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Bind', V5, V6, V7, V8} -> begin (V9 = ('un--normaliseScope'(V0, [V6 | V1], V2, {'Core.Env.::', V7, V3}, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', {'Core.TT.Bind', V5, V6, V7, V13}} end), V15 end(V10)) end end end end; _ -> ('un--normalise'(V0, V1, V2, V3, V4)) end.
'un--normalisePrims'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V6))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = case ('Idris.Idris2.Core.Context':'un--isPrimName'(V5, V14)) of 1 -> ('case--case block in normalisePrims-8400'(V1, V9, V8, V7, V6, V5, V4, V3, V2, V0, V14, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V7)))); _ -> fun (V15) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V16 end(V11)) end end end end.
'un--normalisePis'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V2, V3, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V20 = case V9 of {'Core.Value.NBind', V10, V11, V12, V13} -> case V12 of {'Core.TT.Pi', V14, V15, V16, V17} -> ('Idris.Idris2.Core.Normalise.Quote':'un--quoteWithPi'(V0, V1, V2, V3, V9)); _ -> fun (V18) -> {'Prelude.Types.Right', V4} end end; _ -> fun (V19) -> {'Prelude.Types.Right', V4} end end), V20 end(V6)) end end end end.
'un--normaliseOpts'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V0, V1, V2, V3, V4, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V3, V4, V10))), V11 end(V7)) end end end end.
'un--normaliseLHS'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Bind', V5, V6, V7, V8} -> begin (V9 = ('un--normaliseLHS'(V0, [V6 | V1], V2, {'Core.Env.::', V7, V3}, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', {'Core.TT.Bind', V5, V6, V7, V13}} end), V15 end(V10)) end end end end; _ -> begin (V16 = ('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--onLHS'()), V2, V3, V4))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V21 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V20))), V21 end(V17)) end end end end end.
'un--normaliseHoles'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--withHoles'()), V2, V3, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V10 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V9))), V10 end(V6)) end end end end.
'un--normaliseArgHoles'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--withArgHoles'()), V2, V3, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V10 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V9))), V10 end(V6)) end end end end.
'un--normaliseAll'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--withAll'()), V2, V3, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V10 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V9))), V10 end(V6)) end end end end.
'un--normalise'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V2, V3, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V10 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V9))), V10 end(V6)) end end end end.
'un--logTermNF\x{27}'(V0, V1, V2, V3, V4, V5, V6) -> begin (V12 = begin (V7 = V1), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V36 = begin (V17 = ('un--normaliseHoles'(V1, V0, V16, V5, V6))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V35 = begin (V26 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V24, V25)) end end}, V21))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V34 = fun (V31) -> case V2 of <<""/utf8>> -> begin (V32 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, <<(V4())/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V30))/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V31))), {'Prelude.Types.Right', V32} end; _ -> begin (V33 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V2/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, <<(V4())/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V30))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V31))), {'Prelude.Types.Right', V33} end end end), V34 end(V27)) end end end end), V35 end(V18)) end end end end), V36 end(V13)) end end end end.
'un--logTermNF'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = case V11 of 1 -> ('un--logTermNF\x{27}'(V0, V1, V2, V3, V4, V5, V6)); 0 -> fun (V12) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V13 end(V8)) end end end end.
'un--logNF'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V43 = case V11 of 1 -> begin (V17 = begin (V12 = V1), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V41 = begin (V22 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V21, V5, V6))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V40 = begin (V31 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V29, V30)) end end}, V26))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V39 = fun (V36) -> case V2 of <<""/utf8>> -> begin (V37 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, <<(V4())/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V35))/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V36))), {'Prelude.Types.Right', V37} end; _ -> begin (V38 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V2/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, <<(V4())/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V35))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V36))), {'Prelude.Types.Right', V38} end end end), V39 end(V32)) end end end end), V40 end(V23)) end end end end), V41 end(V18)) end end end end; 0 -> fun (V42) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V43 end(V8)) end end end end.
'un--logGlueNF'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = case V11 of 1 -> begin (V17 = begin (V12 = V1), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V47 = begin (V22 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V6))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V46 = begin (V27 = ('un--normaliseHoles'(V1, V0, V21, V5, V26))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V45 = begin (V36 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V34, V35)) end end}, V31))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V44 = fun (V41) -> case V2 of <<""/utf8>> -> begin (V42 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, <<(V4())/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V40))/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V41))), {'Prelude.Types.Right', V42} end; _ -> begin (V43 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V2/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, <<(V4())/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V40))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V41))), {'Prelude.Types.Right', V43} end end end), V44 end(V37)) end end end end), V45 end(V28)) end end end end), V46 end(V23)) end end end end), V47 end(V18)) end end end end; 0 -> fun (V48) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V49 end(V8)) end end end end.
'un--logGlue'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V43 = case V11 of 1 -> begin (V17 = begin (V12 = V1), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V41 = begin (V22 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V6))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V40 = begin (V31 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V29, V30)) end end}, V26))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V39 = fun (V36) -> case V2 of <<""/utf8>> -> begin (V37 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, <<(V4())/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V35))/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V36))), {'Prelude.Types.Right', V37} end; _ -> begin (V38 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V2/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, <<(V4())/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V35))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V36))), {'Prelude.Types.Right', V38} end end end), V39 end(V32)) end end end end), V40 end(V23)) end end end end), V41 end(V18)) end end end end; 0 -> fun (V42) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V43 end(V8)) end end end end.
'un--logEnv'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V21 = case V10 of 1 -> begin (V14 = fun (V11) -> case V2 of <<""/utf8>> -> begin (V12 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, V4/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V11))), {'Prelude.Types.Right', V12} end; _ -> begin (V13 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V2/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<<<": "/utf8>>/binary, V4/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V11))), {'Prelude.Types.Right', V13} end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V19 = ('nested--8544-7764--in--un--dumpEnv'(V0, V2, V5, V4, V3, V1, V0, V5))), V19 end(V15)) end end end end; 0 -> fun (V20) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V21 end(V7)) end end end end.
'un--glueClosure'(V0, V1, V2, V3, V4) -> {'Core.Normalise.Eval.MkGlue', 0, begin (V6 = fun (V5) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V2, V5)) end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V10, V3, V4))), V11 end(V7)) end end end end, fun (V12) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V4)) end}.
'un--glueBack'(V0, V1, V2, V3, V4) -> {'Core.Normalise.Eval.MkGlue', 0, begin (V6 = fun (V5) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V2, V5)) end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V10, V3, V4))), V11 end(V7)) end end end end, fun (V12) -> fun (V13) -> {'Prelude.Types.Right', V4} end end}.
'un--getValArity'(V0, V1, V2) -> case V2 of {'Core.Value.NBind', V3, V4, V5, V6} -> case V5 of {'Core.TT.Pi', V7, V8, V9, V10} -> begin (V11 = ((V6(V0))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V1, {'Core.TT.Erased', V3, {'Core.TT.Placeholder'}}))))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V23 = begin (V16 = ('un--getValArity'(V0, V1, V15))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', (V20 + 1)} end), V22 end(V17)) end end end end), V23 end(V12)) end end end end; _ -> fun (V24) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V25) -> {'Prelude.Types.Right', 0} end end.
'un--getArity'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V2, V3, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V10 = ('un--getValArity'(V2, V3, V9))), V10 end(V6)) end end end end.
'un--etaContract'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V46 = begin (V13 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V0, <<"eval.eta"/utf8>>, 5, fun () -> <<"Attempting to eta contract subterms of"/utf8>> end, V2))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V45 = begin (V18 = ('un--normalise'(V0, V1, V12, ('Idris.Idris2.Core.Env':'un--mkEnv'({'Core.FC.EmptyFC'}, V1)), V2))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V44 = begin (V23 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V0, <<"eval.eta"/utf8>>, 5, fun () -> <<"Evaluated to"/utf8>> end, V22))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V43 = begin (V30 = ('Idris.Idris2.Core.Core':'un--mapTermM'(fun (V28) -> fun (V29) -> ('nested--7745-6987--in--un--act'(V0, V1, V2, V28, V29)) end end, V1, V2))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V42 = begin (V35 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V0, <<"eval.eta"/utf8>>, 5, fun () -> <<"Result of eta-contraction"/utf8>> end, V34))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V41 = fun (V40) -> {'Prelude.Types.Right', V34} end), V41 end(V36)) end end end end), V42 end(V31)) end end end end), V43 end(V24)) end end end end), V44 end(V19)) end end end end), V45 end(V14)) end end end end), V46 end(V9)) end end end end.
