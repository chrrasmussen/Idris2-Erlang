-module('Idris.Idris2.TTImp.ProcessRunElab').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--processRunElab'/11
]).
'un--processRunElab'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V16 = begin (V11 = V1), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V78 = begin (V22 = fun (V21) -> case ('Idris.Idris2.Core.Context':'un--isExtension'(0, V20)) of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V9, <<"%language ElabReflection not enabled"/utf8>>}, V21)) end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V77 = begin (V27 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, {'Core.Name.UN', {'Core.Name.Basic', <<"[elaborator script]"/utf8>>}}))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V76 = begin (V32 = {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--reflectionNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"Elab"/utf8>>}}}), begin (V33 = ('Idris.Idris2.Core.Reflect':'un--getCon'(V0, V9, V20, ('Idris.Idris2.Core.Reflect':'un--builtin'(<<"Unit"/utf8>>))))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V75 = begin (V38 = ('Idris.Idris2.Core.Reflect':'un--appCon'(V0, V9, V20, V32, [V37 | []]))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V74 = begin (V43 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V4, V5, V31, {'TTImp.Elab.Check.InExpr'}, V6, V7, V8, V10, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V42))))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V73 = begin (V48 = ('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V1, V0, ('Idris.Idris2.Core.Value':'un--withAll'()), V20, V8, V47))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V72 = begin (V53 = ('Idris.Idris2.TTImp.Elab.RunElab':'un--elabScript'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V9, V7, V8, V52, {'Prelude.Types.Nothing'}))), ((begin (V69 = fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V66, V67, V68)) end end end end end), fun (V70) -> fun (V71) -> ((((V69('erased'))('erased'))(V70))(V71)) end end end((begin (V61 = fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> {'Prelude.Types.Right', (V57(V60))} end end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end(fun (V54) -> {'Builtin.MkUnit'} end))))(V53)) end), V72 end(V49)) end end end end), V73 end(V44)) end end end end), V74 end(V39)) end end end end), V75 end(V34)) end end end end end), V76 end(V28)) end end end end), V77 end(V23)) end end end end), V78 end(V17)) end end end end.
