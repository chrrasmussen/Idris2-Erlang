-module('Idris.Idris2.Core.Case.CaseBuilder').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--groupCons,addConstG-11850'/18,
  'with--groupCons,addDelayG-11649'/19,
  'with--groupCons,addConG-11275'/20,
  'with--partition-8935'/7,
  'case--identifyUnreachableDefaults-18203'/8,
  'case--identifyUnreachableDefaults,dropRep-18046'/14,
  'case--patCompile-17256'/9,
  'case--match-15366'/13,
  'case--weakenNs-7451'/3,
  'case--substInPatInfo-6227'/10,
  'nested--20946-16107--in--un--updateVar'/11,
  'nested--15874-10652--in--un--update'/4,
  'nested--15842-10600--in--un--update'/1,
  'nested--24448-18559--in--un--toClosed'/8,
  'nested--13445-8527--in--un--splitCon'/11,
  'nested--11818-7049--in--un--showAll'/6,
  'nested--18732-13230--in--un--scores'/5,
  'nested--18451-12975--in--un--scoreFirstColumn'/7,
  'nested--18451-12976--in--un--scoreColumns'/8,
  'nested--19194-13690--in--un--sameTypeAs'/12,
  'nested--19692-14112--in--un--samePatAs'/4,
  'nested--23903-17984--in--un--rep'/7,
  'nested--11992-7213--in--un--prettyAll'/6,
  'nested--24448-18557--in--un--mkSubstEnv'/9,
  'nested--22954-17129--in--un--mkPatClausesFrom'/11,
  'nested--22527-16689--in--un--mkNames'/12,
  'nested--24448-18556--in--un--labelPat'/8,
  'nested--18732-13229--in--un--isBlank'/5,
  'nested--19194-13689--in--un--headEq'/12,
  'nested--24448-18555--in--un--getUnreachable'/9,
  'nested--22954-17130--in--un--getNames'/10,
  'nested--13445-8529--in--un--getClauseType'/12,
  'nested--24448-18440--in--un--getArgs'/7,
  'nested--16110-10879--in--un--gc'/14,
  'nested--24342-18337--in--un--findExtraAlts'/10,
  'nested--23903-17985--in--un--dropRep'/8,
  'nested--19692-14111--in--un--dropAs'/3,
  'nested--24448-18558--in--un--close'/10,
  'nested--13445-8528--in--un--clauseType\x{27}'/10,
  'nested--20855-15782--in--un--altGroups'/13,
  'nested--16110-10878--in--un--addGroup'/17,
  'nested--16110-10876--in--un--addDelayG'/17,
  'nested--16110-10877--in--un--addConstG'/16,
  'nested--16110-10875--in--un--addConG'/18,
  'dn--un--weaken_Weaken_ArgType'/1,
  'dn--un--weaken_Weaken_(PatInfo $p)'/1,
  'dn--un--weakenNs_Weaken_(PatInfo $p)'/2,
  'dn--un--show_Show_(Partitions $ps)'/2,
  'dn--un--show_Show_(ArgType $ns)'/2,
  'dn--un--show_Show_((PatClause $vars) $todo)'/3,
  'dn--un--show_Show_((NamedPats $vars) $todo)'/3,
  'dn--un--showPrec_Show_((PatClause $vars) $todo)'/4,
  'dn--un--resolved_HasNames_(ArgType $vars)'/2,
  'dn--un--resolved_HasNames_((PatInfo $n) $vars)'/2,
  'dn--un--resolved_HasNames_((PatClause $vars) $todo)'/2,
  'dn--un--resolved_HasNames_((NamedPats $vars) $todo)'/2,
  'dn--un--pretty_Pretty_IdrisSyntax_((PatClause $vars) $todo)'/3,
  'dn--un--pretty_Pretty_IdrisSyntax_((NamedPats $vars) $todo)'/3,
  'dn--un--full_HasNames_(ArgType $vars)'/2,
  'dn--un--full_HasNames_((PatInfo $n) $vars)'/2,
  'dn--un--full_HasNames_((PatClause $vars) $todo)'/2,
  'dn--un--full_HasNames_((NamedPats $vars) $todo)'/2,
  'un--zeroedScore'/2,
  'un--weakenNs'/2,
  'un--weaken'/3,
  'un--varRule'/10,
  'un--updatePats'/6,
  'un--updatePatNames'/2,
  'un--updateNames'/1,
  'un--toPatClause'/4,
  'un--tail'/1,
  'un--substInPats'/7,
  'un--substInPatInfo'/9,
  'un--substInClause'/6,
  'un--simpleCase'/7,
  'un--shuffleVars'/2,
  'un--sameType'/8,
  'un--samePat'/1,
  'un--pickNextViable'/9,
  'un--patCompile'/7,
  'un--partition'/5,
  'un--nextNames'/7,
  'un--nextName'/2,
  'un--nextIdxByScore'/5,
  'un--newPats'/3,
  'un--namesIn'/2,
  'un--namesFrom'/1,
  'un--moveFirst'/2,
  'un--mkPatClause'/7,
  'un--mkPat'/4,
  'un--mixture'/11,
  'un--match'/9,
  'un--identifyUnreachableDefaults'/6,
  'un--highScoreIdx'/3,
  'un--highScore'/6,
  'un--heuristicF'/2,
  'un--heuristicB'/2,
  'un--heuristicA'/2,
  'un--headConsPenalty'/2,
  'un--groupCons'/9,
  'un--getScore'/7,
  'un--getPatInfo'/1,
  'un--getPat'/2,
  'un--getPMDef'/6,
  'un--getNPs'/1,
  'un--getFirstPat'/1,
  'un--getFirstArgType'/1,
  'un--findReachedAlts'/1,
  'un--findReached'/1,
  'un--findExtraDefaults'/5,
  'un--dropPat'/2,
  'un--consScoreHeuristic'/3,
  'un--conRule'/10,
  'un--clauseType'/2,
  'un--checkGroupMatch'/3,
  'un--caseGroups'/12,
  'un--argToPat'/2,
  'un--applyHeuristics'/4,
  'un--++'/2
]).
'with--groupCons,addConstG-11850'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V11 of {'Core.Case.CaseBuilder.ConstGroup', V18, V19} -> case V19 of [E0 | E1] -> (fun (V20, V21) -> case V20 of {'Core.Case.CaseBuilder.MkPatClause', V22, V23, V24, V25} -> case V13 of {'Core.Case.CaseBuilder.ConstMatch'} -> begin (V26 = {'Core.Case.CaseBuilder.MkPatClause', V22, V17, V16, V15}), fun (V27) -> {'Prelude.Types.Right', [{'Core.Case.CaseBuilder.ConstGroup', V18, [{'Core.Case.CaseBuilder.MkPatClause', V22, V23, V24, V25} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V21, [V26 | []]))]} | V14]} end end; _ -> case V13 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V28 = ('nested--16110-10877--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V12, V17, V16, V15, V14))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V34 = fun (V33) -> {'Prelude.Types.Right', [V11 | V32]} end), V34 end(V29)) end end end end end end; _ -> case V13 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V35 = ('nested--16110-10877--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V12, V17, V16, V15, V14))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V41 = fun (V40) -> {'Prelude.Types.Right', [V11 | V39]} end), V41 end(V36)) end end end end end end end(E0, E1)); _ -> case V13 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V42 = ('nested--16110-10877--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V12, V17, V16, V15, V14))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V48 = fun (V47) -> {'Prelude.Types.Right', [V11 | V46]} end), V48 end(V43)) end end end end end end; _ -> case V13 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V49 = ('nested--16110-10877--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V12, V17, V16, V15, V14))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V55 = fun (V54) -> {'Prelude.Types.Right', [V11 | V53]} end), V55 end(V50)) end end end end end end.
'with--groupCons,addDelayG-11649'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V11 of {'Core.Case.CaseBuilder.DelayGroup', V19, V20, V21} -> case V21 of [E0 | E1] -> (fun (V22, V23) -> case V22 of {'Core.Case.CaseBuilder.MkPatClause', V24, V25, V26, V27} -> case V12 of {'Core.Case.CaseBuilder.DelayMatch'} -> begin (V28 = ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V19 | [V20 | []]]))), begin (V29 = ('un--newPats'([V18 | [V17 | []]], 2, V25))), begin (V30 = ('un--updatePatNames'(('un--updateNames'([{'Builtin.MkPair', V19, V18} | [{'Builtin.MkPair', V20, V17} | []]])), ('un--weakenNs'(V28, V16))))), begin (V31 = {'Core.Case.CaseBuilder.MkPatClause', V24, ('un--++'(V29, V30)), V15, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V28, V14))}), fun (V32) -> {'Prelude.Types.Right', [{'Core.Case.CaseBuilder.DelayGroup', V19, V20, [{'Core.Case.CaseBuilder.MkPatClause', V24, V25, V26, V27} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V23, [V31 | []]))]} | V13]} end end end end end; _ -> case V12 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V33 = ('nested--16110-10876--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V18, V17, V16, V15, V14, V13))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', [V11 | V37]} end), V39 end(V34)) end end end end end end; _ -> case V12 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V40 = ('nested--16110-10876--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V18, V17, V16, V15, V14, V13))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V46 = fun (V45) -> {'Prelude.Types.Right', [V11 | V44]} end), V46 end(V41)) end end end end end end end(E0, E1)); _ -> case V12 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V47 = ('nested--16110-10876--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V18, V17, V16, V15, V14, V13))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V53 = fun (V52) -> {'Prelude.Types.Right', [V11 | V51]} end), V53 end(V48)) end end end end end end; _ -> case V12 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V54 = ('nested--16110-10876--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V18, V17, V16, V15, V14, V13))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V60 = fun (V59) -> {'Prelude.Types.Right', [V11 | V58]} end), V60 end(V55)) end end end end end end.
'with--groupCons,addConG-11275'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V11 of {'Core.Case.CaseBuilder.ConGroup', V20, V21, V22, V23} -> case V23 of [E0 | E1] -> (fun (V24, V25) -> case V24 of {'Core.Case.CaseBuilder.MkPatClause', V26, V27, V28, V29} -> case V15 of {'Core.Case.CaseBuilder.ConMatch', V30, V31} -> begin (V32 = ('un--newPats'(V12, V31, V27))), begin (V33 = ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V20))), begin (V34 = ('un--updatePatNames'(('un--updateNames'(('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V20, V12)))), ('un--weakenNs'(V33, V19))))), begin (V35 = {'Core.Case.CaseBuilder.MkPatClause', V26, ('un--++'(V32, V34)), V18, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V33, V17))}), fun (V36) -> {'Prelude.Types.Right', [{'Core.Case.CaseBuilder.ConGroup', V20, V21, V22, [{'Core.Case.CaseBuilder.MkPatClause', V26, V27, V28, V29} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V25, [V35 | []]))]} | V16]} end end end end end; _ -> case V15 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V37 = ('nested--16110-10875--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V14, V13, V12, V19, V18, V17, V16))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V43 = fun (V42) -> {'Prelude.Types.Right', [V11 | V41]} end), V43 end(V38)) end end end end end end; _ -> case V15 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V44 = ('nested--16110-10875--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V14, V13, V12, V19, V18, V17, V16))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V50 = fun (V49) -> {'Prelude.Types.Right', [V11 | V48]} end), V50 end(V45)) end end end end end end end(E0, E1)); _ -> case V15 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V51 = ('nested--16110-10875--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V14, V13, V12, V19, V18, V17, V16))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V57 = fun (V56) -> {'Prelude.Types.Right', [V11 | V55]} end), V57 end(V52)) end end end end end end; _ -> case V15 of {'Core.Case.CaseBuilder.NoMatch'} -> begin (V58 = ('nested--16110-10875--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V14, V13, V12, V19, V18, V17, V16))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V64 = fun (V63) -> {'Prelude.Types.Right', [V11 | V62]} end), V64 end(V59)) end end end end end end.
'with--partition-8935'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Core.Case.CaseBuilder.ConClauses', V7, V8, V9, V10, V11} -> case V7 of [E0 | E1] -> (fun (V12, V13) -> case ('un--clauseType'(V4, V6)) of 0 -> {'Core.Case.CaseBuilder.ConClauses', [V0 | V1], V2, V9, [V6 | V10], V11}; 1 -> {'Core.Case.CaseBuilder.VarClauses', [V0 | V1], V2, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V10, V9)), [V6 | []], {'Core.Case.CaseBuilder.ConClauses', [V0 | V1], V2, V9, V10, V11}} end end(E0, E1)); _ -> case V3 of [] -> case V5 of {'Core.Case.CaseBuilder.NoClauses'} -> case ('un--clauseType'(V4, V6)) of 0 -> {'Core.Case.CaseBuilder.ConClauses', [V0 | V1], V2, [], [V6 | []], {'Core.Case.CaseBuilder.NoClauses'}}; 1 -> {'Core.Case.CaseBuilder.VarClauses', [V0 | V1], V2, [], [V6 | []], {'Core.Case.CaseBuilder.NoClauses'}} end end end end; {'Core.Case.CaseBuilder.VarClauses', V14, V15, V16, V17, V18} -> case V14 of [E2 | E3] -> (fun (V19, V20) -> case ('un--clauseType'(V4, V6)) of 0 -> {'Core.Case.CaseBuilder.ConClauses', [V0 | V1], V2, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V17, V16)), [V6 | []], {'Core.Case.CaseBuilder.VarClauses', [V0 | V1], V2, V16, V17, V18}}; 1 -> {'Core.Case.CaseBuilder.VarClauses', [V0 | V1], V2, V16, [V6 | V17], V18} end end(E2, E3)); _ -> case V3 of [] -> case V5 of {'Core.Case.CaseBuilder.NoClauses'} -> case ('un--clauseType'(V4, V6)) of 0 -> {'Core.Case.CaseBuilder.ConClauses', [V0 | V1], V2, [], [V6 | []], {'Core.Case.CaseBuilder.NoClauses'}}; 1 -> {'Core.Case.CaseBuilder.VarClauses', [V0 | V1], V2, [], [V6 | []], {'Core.Case.CaseBuilder.NoClauses'}} end end end end; _ -> case V3 of [] -> case V5 of {'Core.Case.CaseBuilder.NoClauses'} -> case ('un--clauseType'(V4, V6)) of 0 -> {'Core.Case.CaseBuilder.ConClauses', [V0 | V1], V2, [], [V6 | []], {'Core.Case.CaseBuilder.NoClauses'}}; 1 -> {'Core.Case.CaseBuilder.VarClauses', [V0 | V1], V2, [], [V6 | []], {'Core.Case.CaseBuilder.NoClauses'}} end end end end.
'case--identifyUnreachableDefaults-18203'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> begin (V28 = case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V1)) =:= (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V8)) + 1)) of 'false' -> 0; _ -> 1 end of 1 -> V9; 0 -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V12, V13)) end end}, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V26, V27)) end end})) end), begin (V33 = case ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--null_Foldable_SortedSet'(V28)) of 1 -> fun (V29) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"compile.casetree.clauses"/utf8>>, 25, fun () -> <<<<"Marking the following clause indices as unreachable under the current branch of the tree: "/utf8>>/binary, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--show_Show_(SortedSet $k)'({'Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V31, V32)) end end}, V28))/binary>> end)) end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', V28} end), V39 end(V34)) end end end end end end.
'case--identifyUnreachableDefaults,dropRep-18046'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Builtin.MkPair', V14, V15} -> begin (V17 = ('Idris.Idris2.Prelude.Types':'un--listBind'(V15, fun (V16) -> ('un--findReachedAlts'(V16)) end))), case ('nested--23903-17985--in--un--dropRep'(V0, V1, V2, V3, V4, V5, V14, ('Idris.Idris2.Libraries.Data.SortedSet':'un--fromList'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V20, V21)) end end}, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V34, V35)) end end}, V17)))) of {'Builtin.MkPair', V36, V37} -> {'Builtin.MkPair', [V10 | V36], ('Idris.Idris2.Libraries.Data.SortedSet':'un--union'(V12, V37))} end end end.
'case--patCompile-17256'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Builtin.DPair.MkDPair', V9, V10} -> begin (V11 = ('nested--22954-17129--in--un--mkPatClausesFrom'(V0, V1, V2, V3, V4, V5, V6, V7, 0, V9, [V0 | V1]))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V72 = begin (V36 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V7, <<"compile.casetree"/utf8>>, 5, begin (V21 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V16) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V7, {'Core.Context.dn--un--__mkHasNames', fun (V17) -> fun (V18) -> ('dn--un--full_HasNames_((PatClause $vars) $todo)'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('dn--un--resolved_HasNames_((PatClause $vars) $todo)'(V19, V20)) end end}, V16)) end, V15, []))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V35 = fun (V26) -> {'Prelude.Types.Right', <<<<"Pattern clauses:\x{a}"/utf8>>/binary, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V27) -> ('dn--un--pretty_Pretty_IdrisSyntax_((PatClause $vars) $todo)'(V9, V9, V27)) end))(V25))))))))/binary>>} end), V35 end(V22)) end end end end))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V71 = begin (V44 = ('Idris.Idris2.Core.Context.Log':'un--log'(V7, <<"compile.casetree"/utf8>>, 10, fun () -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V41) -> ('dn--un--show_Show_((PatClause $vars) $todo)'(V9, V9, V41)) end, fun (V42) -> fun (V43) -> ('dn--un--showPrec_Show_((PatClause $vars) $todo)'(V9, V9, V42, V43)) end end}, V15)) end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V70 = begin (V49 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Case.CaseBuilder.PName'}, 0))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V69 = begin (V62 = ('un--match'(V9, V9, V53, V7, V6, V5, V4, V15, ((begin (V59 = fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V57, V58)) end end end end), fun (V60) -> fun (V61) -> ((((V59('erased'))('erased'))(V60))(V61)) end end end(fun (V54) -> ('Idris.Idris2.Core.Case.CaseTree':'dn--un--weakenNs_Weaken_CaseTree'(V10, V54)) end))(V2))))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V68 = fun (V67) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V9, V66}} end), V68 end(V63)) end end end end), V69 end(V50)) end end end end), V70 end(V45)) end end end end), V71 end(V37)) end end end end), V72 end(V12)) end end end end end.
'case--match-15366'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Builtin.DPair.MkDPair', V13, V14} -> begin (V15 = V14), begin (V24 = ((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V16) -> ('un--shuffleVars'(V15, V16)) end))(V4))), begin (V33 = ('un--pickNextViable'(V13, V0, ('Idris.Idris2.Core.TT':'un--dropVar'([V2 | V1], V15)), V9, V8, V7, V5, V6, ((begin (V30 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V28, V29)) end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V25) -> ('un--getNPs'(V25)) end))(V24))))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V131 = case V37 of {'Builtin.DPair.MkDPair', V38, V39} -> begin (V40 = V39), begin (V47 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, (begin (V42 = fun (V41) -> V41 end), fun (V43) -> (V42(V43)) end end(<<"compile.casetree.pick"/utf8>>)), 25, fun () -> <<<<"Picked "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V38))/binary, (begin (V45 = fun (V44) -> V44 end), fun (V46) -> (V45(V46)) end end(<<" as the next split"/utf8>>))/binary>>/binary>> end))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V130 = begin (V60 = ((begin (V57 = fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V55, V56)) end end end end), fun (V58) -> fun (V59) -> ((((V57('erased'))('erased'))(V58))(V59)) end end end(fun (V52) -> ('un--shuffleVars'(V40, V52)) end))(V24))), begin (V75 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, (begin (V62 = fun (V61) -> V61 end), fun (V63) -> (V62(V63)) end end(<<"compile.casetree.clauses"/utf8>>)), 25, fun () -> ('Idris.Idris2.Data.String':'un--fastUnlines'([(begin (V65 = fun (V64) -> V64 end), fun (V66) -> (V65(V66)) end end(<<"Using clauses:"/utf8>>)) | ((begin (V72 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V70, V71)) end end end end), fun (V73) -> fun (V74) -> ((((V72('erased'))('erased'))(V73))(V74)) end end end(fun (V67) -> <<<<"  "/utf8>>/binary, ('dn--un--show_Show_((PatClause $vars) $todo)'(V0, [V38 | ('Idris.Idris2.Core.TT':'un--dropVar'([V13 | ('Idris.Idris2.Core.TT':'un--dropVar'([V2 | V1], V15))], V40))], V67))/binary>> end))(V60))])) end))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V129 = begin (V80 = ('un--partition'(V38, ('Idris.Idris2.Core.TT':'un--dropVar'([V13 | ('Idris.Idris2.Core.TT':'un--dropVar'([V2 | V1], V15))], V40)), V0, V5, V60))), begin (V87 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, (begin (V82 = fun (V81) -> V81 end), fun (V83) -> (V82(V83)) end end(<<"compile.casetree.partition"/utf8>>)), 25, fun () -> <<(begin (V85 = fun (V84) -> V84 end), fun (V86) -> (V85(V86)) end end(<<"Got Partition:\x{a}"/utf8>>))/binary, ('dn--un--show_Show_(Partitions $ps)'(V60, V80))/binary>> end))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V128 = begin (V92 = ('un--mixture'(V38, V0, ('Idris.Idris2.Core.TT':'un--dropVar'([V13 | ('Idris.Idris2.Core.TT':'un--dropVar'([V2 | V1], V15))], V40)), V9, V8, V60, V7, V6, V5, V80, V3))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V127 = case V96 of {'Prelude.Types.Nothing'} -> begin (V103 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, (begin (V98 = fun (V97) -> V97 end), fun (V99) -> (V98(V99)) end end(<<"compile.casetree.intermediate"/utf8>>)), 25, fun () -> (begin (V101 = fun (V100) -> V100 end), fun (V102) -> (V101(V102)) end end(<<"match: No clauses"/utf8>>)) end))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V112 = fun (V108) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.Unmatched', (begin (V110 = fun (V109) -> V109 end), fun (V111) -> (V110(V111)) end end(<<"No clauses"/utf8>>))}} end), V112 end(V104)) end end end end; {'Prelude.Types.Just', V113} -> begin (V120 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, (begin (V115 = fun (V114) -> V114 end), fun (V116) -> (V115(V116)) end end(<<"compile.casetree.intermediate"/utf8>>)), 25, fun () -> <<(begin (V118 = fun (V117) -> V117 end), fun (V119) -> (V118(V119)) end end(<<"match: new case tree "/utf8>>))/binary, ('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V0, V113))/binary>> end))), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V126 = fun (V125) -> {'Prelude.Types.Right', V113} end), V126 end(V121)) end end end end end), V127 end(V93)) end end end end), V128 end(V88)) end end end end end), V129 end(V76)) end end end end end), V130 end(V48)) end end end end end end), V131 end(V34)) end end end end end end end.
'case--weakenNs-7451'(V0, V1, V2) -> begin (V3 = V1), case V3 of 0 -> case V2 of {'Core.TT.SizedView.Z'} -> V0; _ -> case V2 of {'Core.TT.SizedView.S', V4} -> ('dn--un--weaken_Weaken_(PatInfo $p)'(('dn--un--weakenNs_Weaken_(PatInfo $p)'(V4, V0)))) end end; _ -> case V2 of {'Core.TT.SizedView.S', V5} -> ('dn--un--weaken_Weaken_(PatInfo $p)'(('dn--un--weakenNs_Weaken_(PatInfo $p)'(V5, V0)))) end end end.
'case--substInPatInfo-6227'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Case.CaseBuilder.Known', V10, V11} -> begin (V17 = begin (V12 = V8), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V36 = begin (V22 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V8, V1, V21, ('Idris.Idris2.Core.Env':'un--mkEnv'(V7, V1)), V11))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V35 = fun (V27) -> case V26 of {'Core.Value.NApp', V28, V29, V30} -> {'Prelude.Types.Right', {'Builtin.MkPair', case V4 of {'Core.Case.CaseBuilder.MkInfo', V31, V32, V33, V34} -> {'Core.Case.CaseBuilder.MkInfo', V31, V32, V33, {'Core.Case.CaseBuilder.Known', V10, ('Idris.Idris2.Core.TT':'un--substName'(V6, V5, V11))}} end, V2}}; _ -> {'Prelude.Types.Right', {'Builtin.MkPair', V4, V2}} end end), V35 end(V23)) end end end end), V36 end(V18)) end end end end; {'Core.Case.CaseBuilder.Stuck', V37} -> begin (V43 = begin (V38 = V8), fun (V39) -> begin (V42 = (begin (V40 = V38), fun (V41) -> ('erlang':'get'(V40)) end end(V39))), {'Prelude.Types.Right', V42} end end end), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V95 = begin (V49 = fun (V48) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V47, V48)) end), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V94 = begin (V54 = ('Idris.Idris2.Core.Env':'un--mkEnv'(V7, V1))), begin (V55 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V8, V1, V47, V54, ('Idris.Idris2.Core.TT':'un--substName'(V6, V5, V37))))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V93 = case V59 of {'Core.Value.NBind', V60, V61, V62, V63} -> case V62 of {'Core.TT.Pi', V64, V65, V66, V67} -> begin (V68 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V8, V1, V53, V54, V67))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V90 = begin (V73 = ((V63(V47))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V54, {'Core.TT.Ref', V60, {'Core.TT.Bound'}, V3}))))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V89 = begin (V78 = ('un--updatePats'(V1, V0, V8, V54, V77, V2))), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V88 = fun (V83) -> {'Prelude.Types.Right', {'Builtin.MkPair', case V4 of {'Core.Case.CaseBuilder.MkInfo', V84, V85, V86, V87} -> {'Core.Case.CaseBuilder.MkInfo', V84, V85, V86, {'Core.Case.CaseBuilder.Known', V65, V72}} end, V82}} end), V88 end(V79)) end end end end), V89 end(V74)) end end end end), V90 end(V69)) end end end end; _ -> fun (V91) -> {'Prelude.Types.Right', {'Builtin.MkPair', V4, V2}} end end; _ -> fun (V92) -> {'Prelude.Types.Right', {'Builtin.MkPair', V4, V2}} end end), V93 end(V56)) end end end end end), V94 end(V50)) end end end end), V95 end(V44)) end end end end; {'Core.Case.CaseBuilder.Unknown'} -> fun (V96) -> {'Prelude.Types.Right', {'Builtin.MkPair', V4, V2}} end end.
'nested--20946-16107--in--un--updateVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Core.Case.CaseBuilder.MkPatClause', V11, V12, V13, V14} -> case V12 of {'Core.Case.CaseBuilder.::', V15, V16} -> case V15 of {'Core.Case.CaseBuilder.MkInfo', V17, V18, V19, V20} -> case V19 of {'Core.Case.CaseTree.PLoc', V21, V22} -> begin (V23 = ('un--substInPats'(V1, V0, V8, V7, V3, {'Core.TT.Local', V21, {'Prelude.Types.Just', 0}, V17}, V16))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V29 = fun (V28) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.MkPatClause', [V22 | V11], V27, V13, ('Idris.Idris2.Core.TT':'un--substName'(V22, {'Core.TT.Local', V21, {'Prelude.Types.Just', 0}, V17}, V14))}} end), V29 end(V24)) end end end end; {'Core.Case.CaseTree.PAs', V30, V31, V32} -> begin (V33 = ('un--substInPats'(V1, V0, V8, V7, V3, ('Idris.Idris2.Core.Case.CaseTree':'un--mkTerm'(V1, V32)), V16))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = begin (V38 = ('Idris.Idris2.Core.TT':'un--substName'(V31, {'Core.TT.Local', V30, {'Prelude.Types.Just', 1}, V17}, V14))), ('nested--20946-16107--in--un--updateVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, {'Core.Case.CaseBuilder.MkPatClause', V11, {'Core.Case.CaseBuilder.::', {'Core.Case.CaseBuilder.MkInfo', V17, V18, V32, V20}, V37}, V13, V38})) end), V39 end(V34)) end end end end; _ -> begin (V40 = ('un--substInPats'(V1, V0, V8, V7, V3, ('Idris.Idris2.Core.Case.CaseTree':'un--mkTerm'(V1, V19)), V16))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V46 = fun (V45) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.MkPatClause', V11, V44, V13, V14}} end), V46 end(V41)) end end end end end end end end.
'nested--15874-10652--in--un--update'(V0, V1, V2, V3) -> case V3 of {'Core.Case.CaseTree.PAs', V4, V5, V6} -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, V5, V2)) of {'Prelude.Types.Nothing'} -> {'Core.Case.CaseTree.PAs', V4, V5, ('nested--15874-10652--in--un--update'(V0, V1, V2, V6))}; {'Prelude.Types.Just', V11} -> {'Core.Case.CaseTree.PAs', V4, V11, ('nested--15874-10652--in--un--update'(V0, V1, V2, V6))} end; {'Core.Case.CaseTree.PCon', V12, V13, V14, V15, V16} -> {'Core.Case.CaseTree.PCon', V12, V13, V14, V15, ((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V17) -> ('nested--15874-10652--in--un--update'(V0, V1, V2, V17)) end))(V16))}; {'Core.Case.CaseTree.PTyCon', V25, V26, V27, V28} -> {'Core.Case.CaseTree.PTyCon', V25, V26, V27, ((begin (V34 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V32, V33)) end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V29) -> ('nested--15874-10652--in--un--update'(V0, V1, V2, V29)) end))(V28))}; {'Core.Case.CaseTree.PArrow', V37, V38, V39, V40} -> {'Core.Case.CaseTree.PArrow', V37, V38, ('nested--15874-10652--in--un--update'(V0, V1, V2, V39)), ('nested--15874-10652--in--un--update'(V0, V1, V2, V40))}; {'Core.Case.CaseTree.PDelay', V41, V42, V43, V44} -> {'Core.Case.CaseTree.PDelay', V41, V42, ('nested--15874-10652--in--un--update'(V0, V1, V2, V43)), ('nested--15874-10652--in--un--update'(V0, V1, V2, V44))}; {'Core.Case.CaseTree.PLoc', V45, V46} -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V49, V50)) end end}, V46, V2)) of {'Prelude.Types.Nothing'} -> {'Core.Case.CaseTree.PLoc', V45, V46}; {'Prelude.Types.Just', V51} -> {'Core.Case.CaseTree.PLoc', V45, V51} end; _ -> V3 end.
'nested--15842-10600--in--un--update'(V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> case V2 of {'Core.Case.CaseTree.PLoc', V3, V4} -> {'Prelude.Types.Just', {'Builtin.MkPair', V4, V1}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'nested--24448-18559--in--un--toClosed'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> case V9 of {'Core.Context.Context.MkClause', V10, V11, V12, V13} -> {'Builtin.MkPair', ('nested--24448-18558--in--un--close'(V0, V1, V2, V3, V4, V5, V10, V11, V8, V12)), ('nested--24448-18558--in--un--close'(V0, V1, V2, V3, V4, V5, V10, V11, V8, V13))} end end.
'nested--13445-8527--in--un--splitCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case case (V9 =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V10))) of 'false' -> 0; _ -> 1 end of 1 -> 0; 0 -> 1 end.
'nested--11818-7049--in--un--showAll'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> case V5 of {'Core.Case.CaseBuilder.Nil'} -> <<""/utf8>> end; [E0 | E1] -> (fun (V6, V7) -> case V7 of [] -> case V5 of {'Core.Case.CaseBuilder.::', V8, V9} -> case V9 of {'Core.Case.CaseBuilder.Nil'} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_Pat'(case V8 of {'Core.Case.CaseBuilder.MkInfo', V10, V11, V12, V13} -> V12 end))/binary, <<<<" ["/utf8>>/binary, <<('dn--un--show_Show_(ArgType $ns)'(V3, case V8 of {'Core.Case.CaseBuilder.MkInfo', V14, V15, V16, V17} -> V17 end))/binary, <<"]"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> case V5 of {'Core.Case.CaseBuilder.::', V18, V19} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_Pat'(case V18 of {'Core.Case.CaseBuilder.MkInfo', V20, V21, V22, V23} -> V22 end))/binary, <<<<" ["/utf8>>/binary, <<('dn--un--show_Show_(ArgType $ns)'(V3, case V18 of {'Core.Case.CaseBuilder.MkInfo', V24, V25, V26, V27} -> V27 end))/binary, <<<<"]"/utf8>>/binary, <<<<", "/utf8>>/binary, ('nested--11818-7049--in--un--showAll'(V0, V1, V2, V3, V7, V19))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end end; _ -> case V5 of {'Core.Case.CaseBuilder.::', V28, V29} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_Pat'(case V28 of {'Core.Case.CaseBuilder.MkInfo', V30, V31, V32, V33} -> V32 end))/binary, <<<<" ["/utf8>>/binary, <<('dn--un--show_Show_(ArgType $ns)'(V3, case V28 of {'Core.Case.CaseBuilder.MkInfo', V34, V35, V36, V37} -> V37 end))/binary, <<<<"]"/utf8>>/binary, <<<<", "/utf8>>/binary, ('nested--11818-7049--in--un--showAll'(V0, V1, V2, V3, V7, V29))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end end; _ -> case V5 of {'Core.Case.CaseBuilder.::', V38, V39} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_Pat'(case V38 of {'Core.Case.CaseBuilder.MkInfo', V40, V41, V42, V43} -> V42 end))/binary, <<<<" ["/utf8>>/binary, <<('dn--un--show_Show_(ArgType $ns)'(V3, case V38 of {'Core.Case.CaseBuilder.MkInfo', V44, V45, V46, V47} -> V47 end))/binary, <<<<"]"/utf8>>/binary, <<<<", "/utf8>>/binary, ('nested--11818-7049--in--un--showAll'(V0, V1, V2, V3, V7, V39))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end end end(E0, E1)) end.
'nested--18732-13230--in--un--scores'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Case.CaseBuilder.Nil'} -> {'Data.Vect.Nil'}; {'Core.Case.CaseBuilder.::', V5, V6} -> begin (V11 = case ('nested--18732-13229--in--un--isBlank'(V0, V1, V2, V3, case V5 of {'Core.Case.CaseBuilder.MkInfo', V7, V8, V9, V10} -> V9 end)) of 1 -> 0; 0 -> 1 end), {'Data.Vect.::', V11, ('nested--18732-13230--in--un--scores'(V0, V1, V2, V3, V6))} end end.
'nested--18451-12975--in--un--scoreFirstColumn'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> {'Builtin.DPair.MkDPair', [], {'Builtin.MkPair', 0, {'Data.Vect.Nil'}}}; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Core.Case.CaseBuilder.::', V9, V10} -> begin (V11 = [V0 | V1]), case ('nested--18451-12975--in--un--scoreFirstColumn'(V0, V1, V2, V3, V4, V11, V8)) of {'Builtin.DPair.MkDPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> {'Builtin.DPair.MkDPair', [V10 | V12], {'Builtin.MkPair', (V14 + 1), {'Data.Vect.::', (V4(case V9 of {'Core.Case.CaseBuilder.MkInfo', V16, V17, V18, V19} -> V18 end)), V15}}} end end end end end(E0, E1)) end.
'nested--18451-12976--in--un--scoreColumns'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Data.Vect.Nil'}; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = [V0 | V1]), case ('nested--18451-12975--in--un--scoreFirstColumn'(V0, V1, V2, V3, V4, V10, V7)) of {'Builtin.DPair.MkDPair', V11, V12} -> case V12 of {'Builtin.MkPair', V13, V14} -> {'Data.Vect.::', V14, ('nested--18451-12976--in--un--scoreColumns'(V0, V1, V2, V3, V4, V10, V9, V11))} end end end end(E0, E1)) end.
'nested--19194-13690--in--un--sameTypeAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> fun (V12) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Core.Case.CaseBuilder.Known', V15, V16} -> begin (V22 = begin (V17 = V7), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'get'(V19)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V34 = begin (V27 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V7, V0, V26, V3, V16))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = case ('nested--19194-13689--in--un--headEq'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V31, V5)) of 1 -> ('nested--19194-13690--in--un--sameTypeAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14)); 0 -> fun (V32) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CaseCompile', V6, V4, {'Core.Core.DifferingTypes'}}, V32)) end end), V33 end(V28)) end end end end), V34 end(V23)) end end end end; _ -> fun (V35) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CaseCompile', V6, V4, {'Core.Core.DifferingTypes'}}, V35)) end end end(E0, E1)); _ -> fun (V36) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CaseCompile', V6, V4, {'Core.Core.DifferingTypes'}}, V36)) end end.
'nested--19692-14112--in--un--samePatAs'(V0, V1, V2, V3) -> case V3 of [] -> 1; _ -> case V2 of {'Core.Case.CaseTree.PTyCon', V4, V5, V6, V7} -> case V3 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.Case.CaseTree.PTyCon', V10, V11, V12, V13} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V11)) of 1 -> ('nested--19692-14112--in--un--samePatAs'(V0, V1, {'Core.Case.CaseTree.PTyCon', V4, V5, V6, V7}, V9)); 0 -> 0 end; _ -> 0 end end(E0, E1)); _ -> 0 end; {'Core.Case.CaseTree.PCon', V14, V15, V16, V17, V18} -> case V3 of [E2 | E3] -> (fun (V19, V20) -> case V19 of {'Core.Case.CaseTree.PCon', V21, V22, V23, V24, V25} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V15, V22)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V16, V23)) of 1 -> ('nested--19692-14112--in--un--samePatAs'(V0, V1, {'Core.Case.CaseTree.PCon', V14, V15, V16, V17, V18}, V20)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end end(E2, E3)); _ -> 0 end; {'Core.Case.CaseTree.PConst', V26, V27} -> case V3 of [E4 | E5] -> (fun (V28, V29) -> case V28 of {'Core.Case.CaseTree.PConst', V30, V31} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V27, V31)) of 1 -> ('nested--19692-14112--in--un--samePatAs'(V0, V1, {'Core.Case.CaseTree.PConst', V26, V27}, V29)); 0 -> 0 end; _ -> 0 end end(E4, E5)); _ -> 0 end; {'Core.Case.CaseTree.PArrow', V32, V33, V34, V35} -> case V3 of [E6 | E7] -> (fun (V36, V37) -> case V36 of {'Core.Case.CaseTree.PArrow', V38, V39, V40, V41} -> ('nested--19692-14112--in--un--samePatAs'(V0, V1, {'Core.Case.CaseTree.PArrow', V32, V33, V34, V35}, V37)); _ -> 0 end end(E6, E7)); _ -> 0 end; {'Core.Case.CaseTree.PDelay', V42, V43, V44, V45} -> case V3 of [E8 | E9] -> (fun (V46, V47) -> case V46 of {'Core.Case.CaseTree.PDelay', V48, V49, V50, V51} -> ('nested--19692-14112--in--un--samePatAs'(V0, V1, {'Core.Case.CaseTree.PDelay', V42, V43, V44, V45}, V47)); _ -> 0 end end(E8, E9)); _ -> 0 end; {'Core.Case.CaseTree.PLoc', V52, V53} -> case V3 of [E10 | E11] -> (fun (V54, V55) -> case V54 of {'Core.Case.CaseTree.PLoc', V56, V57} -> ('nested--19692-14112--in--un--samePatAs'(V0, V1, {'Core.Case.CaseTree.PLoc', V52, V53}, V55)); _ -> 0 end end(E10, E11)); _ -> 0 end; _ -> 0 end end.
'nested--23903-17984--in--un--rep'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.Case.CaseTree.DefaultCase', V7} -> begin (V8 = ('Idris.Idris2.Core.Case.Util':'un--getCons'(V5, V0, V3, V2))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V22 = fun (V13) -> {'Prelude.Types.Right', ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> ('Idris.Idris2.Core.Case.Util':'un--mkAlt'(V0, V4, V7, V14)) end))(V12))} end), V22 end(V9)) end end end end; _ -> fun (V23) -> {'Prelude.Types.Right', [V6 | []]} end end.
'nested--11992-7213--in--un--prettyAll'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> case V5 of {'Core.Case.CaseBuilder.Nil'} -> [] end; [E0 | E1] -> (fun (V6, V7) -> case V5 of {'Core.Case.CaseBuilder.::', V8, V9} -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V10)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--prettyPrec_Pretty_Void_Name'(V11, V12)) end end}, V6)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty.Annotations':'un--equals'()), ('Idris.Idris2.Core.Case.CaseTree':'dn--un--pretty_Pretty_IdrisSyntax_Pat'(case V8 of {'Core.Case.CaseBuilder.MkInfo', V13, V14, V15, V16} -> V15 end)))))))) | ('nested--11992-7213--in--un--prettyAll'(V0, V1, V2, V3, V7, V9))] end end(E0, E1)) end.
'nested--24448-18557--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.Env.Nil'} -> {'Core.TT.SubstEnv.Nil'}; {'Core.Env.::', V9, V10} -> {'Core.TT.SubstEnv.::', {'Core.TT.Ref', V4, {'Core.TT.Bound'}, {'Core.Name.MN', V7, V6}}, ('nested--24448-18557--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V5, begin (V11 = (V6 + 1)), case ((V11 band 9223372036854775808) =/= 0) of 'true' -> (V11 bor -9223372036854775808); _ -> (V11 band 9223372036854775807) end end, V7, V10))} end.
'nested--22954-17129--in--un--mkPatClausesFrom'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> fun (V11) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V12, V13) -> begin (V14 = ('un--mkPatClause'(V7, V6, V5, V9, V3, V8, V12))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V27 = begin (V20 = ('nested--22954-17129--in--un--mkPatClausesFrom'(V0, V1, V2, V3, V4, V5, V6, V7, begin (V19 = (V8 + 1)), case ((V19 band 9223372036854775808) =/= 0) of 'true' -> (V19 bor -9223372036854775808); _ -> (V19 band 9223372036854775807) end end, V9, V13))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V26 = fun (V25) -> {'Prelude.Types.Right', [V18 | V24]} end), V26 end(V21)) end end end end), V27 end(V15)) end end end end end(E0, E1)) end.
'nested--22527-16689--in--un--mkNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V8 of [] -> case V9 of [] -> case V10 of 0 -> fun (V12) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.Nil'}} end; _ -> ('erlang':'throw'({'$idris_error', <<"Nat case not covered"/utf8>>})) end end; [E0 | E1] -> (fun (V13, V14) -> case V9 of [E2 | E3] -> (fun (V15, V16) -> case V10 of 0 -> ('erlang':'throw'({'$idris_error', <<"Nat case not covered"/utf8>>})); _ -> begin (V17 = (V10 - 1)), begin (V23 = begin (V18 = V7), fun (V19) -> begin (V22 = (begin (V20 = V18), fun (V21) -> ('erlang':'get'(V20)) end end(V19))), {'Prelude.Types.Right', V22} end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V85 = begin (V29 = fun (V28) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V27, V28)) end), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V84 = begin (V71 = case V11 of {'Prelude.Types.Nothing'} -> fun (V34) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'Core.Case.CaseBuilder.Unknown'}}} end; {'Prelude.Types.Just', V35} -> case V35 of {'Core.Value.NBind', V36, V37, V38, V39} -> case V38 of {'Core.TT.Pi', V40, V41, V42, V43} -> begin (V44 = ((V39(V27))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V36, {'Core.TT.Bound'}, V13}))))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V56 = begin (V49 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V7, [], V33, {'Core.Env.Nil'}, V43))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V55 = fun (V54) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Just', V48}, {'Core.Case.CaseBuilder.Known', V41, ('Idris.Idris2.Core.TT':'un--embed'(V53))}}} end), V55 end(V50)) end end end end), V56 end(V45)) end end end end; _ -> begin (V57 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, [], V33, {'Core.Env.Nil'}, V35))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V63 = fun (V62) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'Core.Case.CaseBuilder.Stuck', ('Idris.Idris2.Core.TT':'un--embed'(V61))}}} end), V63 end(V58)) end end end end end; _ -> begin (V64 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, [], V33, {'Core.Env.Nil'}, V35))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V70 = fun (V69) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'Core.Case.CaseBuilder.Stuck', ('Idris.Idris2.Core.TT':'un--embed'(V68))}}} end), V70 end(V65)) end end end end end end), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V83 = begin (V76 = ('nested--22527-16689--in--un--mkNames'(V0, V1, V2, V3, V4, V5, V6, V7, V14, V16, V17, ('Idris.Idris2.Builtin':'un--fst'(V75))))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V82 = fun (V81) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.::', {'Core.Case.CaseBuilder.MkInfo', 0, V13, V15, ('Idris.Idris2.Builtin':'un--snd'(V75))}, ('un--weaken'(V13, V14, V80))}} end), V82 end(V77)) end end end end), V83 end(V72)) end end end end), V84 end(V30)) end end end end), V85 end(V24)) end end end end end end end(E2, E3)) end end(E0, E1)) end.
'nested--24448-18556--in--un--labelPat'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> []; [E0 | E1] -> (fun (V8, V9) -> [{'Builtin.MkPair', <<<<"pat"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6))/binary, <<":"/utf8>>/binary>>/binary>>, V8} | ('nested--24448-18556--in--un--labelPat'(V0, V1, V2, V3, V4, V5, begin (V10 = (V6 + 1)), case ((V10 band 9223372036854775808) =/= 0) of 'true' -> (V10 bor -9223372036854775808); _ -> (V10 band 9223372036854775807) end end, V9))] end(E0, E1)) end.
'nested--18732-13229--in--un--isBlank'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Case.CaseTree.PLoc', V5, V6} -> 1; _ -> 0 end.
'nested--19194-13689--in--un--headEq'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of {'Core.Value.NBind', V12, V13, V14, V15} -> case V14 of {'Core.TT.Pi', V16, V17, V18, V19} -> case V10 of {'Core.Value.NBind', V20, V21, V22, V23} -> case V22 of {'Core.TT.Pi', V24, V25, V26, V27} -> 1; _ -> case V10 of {'Core.Value.NErased', V28, V29} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end; _ -> case V10 of {'Core.Value.NErased', V30, V31} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end; _ -> case V10 of {'Core.Value.NErased', V32, V33} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end; {'Core.Value.NTCon', V34, V35, V36, V37, V38} -> case V10 of {'Core.Value.NTCon', V39, V40, V41, V42, V43} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V35, V40)); _ -> case V10 of {'Core.Value.NErased', V44, V45} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end; {'Core.Value.NPrimVal', V46, V47} -> case V10 of {'Core.Value.NPrimVal', V48, V49} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V47, V49)); _ -> case V10 of {'Core.Value.NErased', V50, V51} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end; {'Core.Value.NType', V52, V53} -> case V10 of {'Core.Value.NType', V54, V55} -> 1; _ -> case V10 of {'Core.Value.NErased', V56, V57} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end; {'Core.Value.NApp', V58, V59, V60} -> case V59 of {'Core.Value.NRef', V61, V62} -> case V10 of {'Core.Value.NApp', V63, V64, V65} -> case V64 of {'Core.Value.NRef', V66, V67} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V62, V67)); _ -> case V10 of {'Core.Value.NErased', V68, V69} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end; _ -> case V10 of {'Core.Value.NErased', V70, V71} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end; _ -> case V10 of {'Core.Value.NErased', V72, V73} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end; _ -> case V10 of {'Core.Value.NErased', V74, V75} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end; {'Core.Value.NErased', V76, V77} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> case V10 of {'Core.Value.NErased', V78, V79} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end; _ -> case V10 of {'Core.Value.NErased', V80, V81} -> case V11 of {'Core.Case.CaseBuilder.RunTime'} -> 1; _ -> 0 end; _ -> 0 end end.
'nested--24448-18555--in--un--getUnreachable'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> []; [E0 | E1] -> (fun (V9, V10) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V26, V27, V28, V29)) end end end end end end end, fun (V30) -> fun (V31) -> V31 end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V34, V35, V36)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V39, V40)) end end}, V6, V7)) of 1 -> ('nested--24448-18555--in--un--getUnreachable'(V0, V1, V2, V3, V4, V5, begin (V41 = (V6 + 1)), case ((V41 band 9223372036854775808) =/= 0) of 'true' -> (V41 bor -9223372036854775808); _ -> (V41 band 9223372036854775807) end end, V7, V10)); 0 -> [V9 | ('nested--24448-18555--in--un--getUnreachable'(V0, V1, V2, V3, V4, V5, begin (V42 = (V6 + 1)), case ((V42 band 9223372036854775808) =/= 0) of 'true' -> (V42 bor -9223372036854775808); _ -> (V42 band 9223372036854775807) end end, V7, V10))] end end(E0, E1)) end.
'nested--22954-17130--in--un--getNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> {'Builtin.DPair.MkDPair', [], ('Idris.Idris2.Core.TT.SizeOf':'un--zero'())}; [E0 | E1] -> (fun (V10, V11) -> case ('nested--22954-17130--in--un--getNames'(V0, V1, V2, V3, V4, V5, V6, V7, begin (V12 = (V8 + 1)), case ((V12 band 9223372036854775808) =/= 0) of 'true' -> (V12 bor -9223372036854775808); _ -> (V12 band 9223372036854775807) end end, V11)) of {'Builtin.DPair.MkDPair', V13, V14} -> {'Builtin.DPair.MkDPair', [{'Core.Name.MN', <<"arg"/utf8>>, V8} | V13], ('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V14))} end end(E0, E1)) end.
'nested--13445-8529--in--un--getClauseType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of {'Core.Case.CaseBuilder.CompileTime', V12} -> case V10 of {'Core.Case.CaseTree.PCon', V13, V14, V15, V16, V17} -> case V11 of {'Core.Case.CaseBuilder.Known', V18, V19} -> case case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V20, V21)) end end, 0, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V22, V23)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V26, V27)) end end}}, V18)) of 1 -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V28, V29)) end end, 0, fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V30, V31)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V34, V35)) end end}}, V12)) of 1 -> 0; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V36, V37)) end end, 1}, fun (V38) -> ('un--namesIn'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V7, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V39, V40)) end end, []}, fun (V41) -> ('un--namesFrom'(V41)) end, ('un--getPatInfo'(V4)))))), V38)) end, V17)) end; 0 -> 0 end of 1 -> 1; 0 -> ('nested--13445-8527--in--un--splitCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V16, V17)) end; _ -> case V10 of {'Core.Case.CaseTree.PAs', V42, V43, V44} -> ('nested--13445-8529--in--un--getClauseType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V44, V11)); _ -> case V11 of {'Core.Case.CaseBuilder.Known', V45, V46} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V47) -> fun (V48) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V47, V48)) end end, 0, fun (V49) -> fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V49, V50)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V51) -> fun (V52) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V53, V54)) end end}}, V45)) of 1 -> 1; 0 -> ('nested--13445-8528--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)) end; _ -> ('nested--13445-8528--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)) end end end; _ -> case V10 of {'Core.Case.CaseTree.PAs', V55, V56, V57} -> ('nested--13445-8529--in--un--getClauseType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V57, V11)); _ -> case V11 of {'Core.Case.CaseBuilder.Known', V58, V59} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V60) -> fun (V61) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V60, V61)) end end, 0, fun (V62) -> fun (V63) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V62, V63)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V64) -> fun (V65) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V66, V67)) end end}}, V58)) of 1 -> 1; 0 -> ('nested--13445-8528--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)) end; _ -> ('nested--13445-8528--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)) end end end; _ -> case V10 of {'Core.Case.CaseTree.PAs', V68, V69, V70} -> ('nested--13445-8529--in--un--getClauseType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V70, V11)); _ -> case V11 of {'Core.Case.CaseBuilder.Known', V71, V72} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V73) -> fun (V74) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V73, V74)) end end, 0, fun (V75) -> fun (V76) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V75, V76)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V77) -> fun (V78) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V77, V78)) end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V79, V80)) end end}}, V71)) of 1 -> 1; 0 -> ('nested--13445-8528--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)) end; _ -> ('nested--13445-8528--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)) end end end.
'nested--24448-18440--in--un--getArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.Value.NBind', V7, V8, V9, V10} -> case V9 of {'Core.TT.Pi', V11, V12, V13, V14} -> begin (V20 = begin (V15 = V4), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V38 = begin (V25 = ((V10(V24))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V7, {'Core.TT.Placeholder'}}))))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V37 = begin (V30 = ('nested--24448-18440--in--un--getArgs'(V0, V1, V2, V3, V4, V5, V29))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V36 = fun (V35) -> {'Prelude.Types.Right', [{'Core.Name.MN', <<"arg"/utf8>>, V5} | V34]} end), V36 end(V31)) end end end end), V37 end(V26)) end end end end), V38 end(V21)) end end end end; _ -> fun (V39) -> {'Prelude.Types.Right', []} end end; _ -> fun (V40) -> {'Prelude.Types.Right', []} end end.
'nested--16110-10879--in--un--gc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [] -> fun (V14) -> {'Prelude.Types.Right', V12} end; [E0 | E1] -> (fun (V15, V16) -> case V15 of {'Core.Case.CaseBuilder.MkPatClause', V17, V18, V19, V20} -> case V18 of {'Core.Case.CaseBuilder.::', V21, V22} -> case V21 of {'Core.Case.CaseBuilder.MkInfo', V23, V24, V25, V26} -> begin (V27 = ('nested--16110-10878--in--un--addGroup'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V11, V23, V25, V22, V19, V20, V12))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V32 = ('nested--16110-10879--in--un--gc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V31, V16))), V32 end(V28)) end end end end end end end end(E0, E1)) end.
'nested--24342-18337--in--un--findExtraAlts'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Case.CaseTree.ConCase', V10, V11, V12, V13} -> ('un--findExtraDefaults'(V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V12, V0)), V7, V6, V13)); {'Core.Case.CaseTree.DelayCase', V14, V15, V16} -> ('un--findExtraDefaults'(V8, [V14 | [V15 | V0]], V7, V6, V16)); {'Core.Case.CaseTree.ConstCase', V17, V18} -> ('un--findExtraDefaults'(V8, V0, V7, V6, V18)); {'Core.Case.CaseTree.DefaultCase', V19} -> fun (V20) -> {'Prelude.Types.Right', []} end end.
'nested--23903-17985--in--un--dropRep'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Builtin.MkPair', [], V7}; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.Case.CaseTree.ConCase', V10, V11, V12, V13} -> begin (V14 = {'Core.Case.CaseTree.ConCase', V10, V11, V12, V13}), ('case--identifyUnreachableDefaults,dropRep-18046'(V0, V1, V2, V3, V4, V5, V12, V13, V11, V10, V14, V9, V7, ('Idris.Idris2.Data.List':'un--partition'(fun (V15) -> case ('Idris.Idris2.Core.Case.Util':'un--tagIs'(V11, V15)) of 1 -> 0; 0 -> 1 end end, V9)))) end; _ -> case ('nested--23903-17985--in--un--dropRep'(V0, V1, V2, V3, V4, V5, V9, V7)) of {'Builtin.MkPair', V16, V17} -> {'Builtin.MkPair', [V8 | V16], V17} end end end(E0, E1)) end.
'nested--19692-14111--in--un--dropAs'(V0, V1, V2) -> case V2 of {'Core.Case.CaseTree.PAs', V3, V4, V5} -> V5; _ -> V2 end.
'nested--24448-18558--in--un--close'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('Idris.Idris2.Core.TT.SubstEnv':'un--substs'(('nested--24448-18557--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V5, 0, V8, V7)), V9)).
'nested--13445-8528--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Case.CaseTree.PCon', V10, V11, V12, V13, V14} -> ('nested--13445-8527--in--un--splitCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V14)); {'Core.Case.CaseTree.PTyCon', V15, V16, V17, V18} -> ('nested--13445-8527--in--un--splitCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V17, V18)); {'Core.Case.CaseTree.PConst', V19, V20} -> 0; {'Core.Case.CaseTree.PArrow', V21, V22, V23, V24} -> 0; {'Core.Case.CaseTree.PDelay', V25, V26, V27, V28} -> 0; _ -> 1 end.
'nested--20855-15782--in--un--altGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V13) -> {'Prelude.Types.Right', []} end end, fun () -> fun (V14) -> fun (V15) -> {'Prelude.Types.Right', [{'Core.Case.CaseTree.DefaultCase', V14} | []]} end end end, V4)); [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Core.Case.CaseBuilder.ConGroup', V18, V19, V20, V21} -> begin (V30 = ('un--match'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V18, V3)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V18, V1)), V11, V10, V9, V8, V7, V21, ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> ('Idris.Idris2.Core.Case.CaseTree':'dn--un--weakenNs_Weaken_CaseTree'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V18)), V22)) end))(V4))))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V42 = begin (V35 = ('nested--20855-15782--in--un--altGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V17))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V41 = fun (V40) -> {'Prelude.Types.Right', [{'Core.Case.CaseTree.ConCase', V19, V20, V18, V34} | V39]} end), V41 end(V36)) end end end end), V42 end(V31)) end end end end; {'Core.Case.CaseBuilder.DelayGroup', V43, V44, V45} -> begin (V54 = ('un--match'([V43 | [V44 | V3]], [V43 | [V44 | V1]], V11, V10, V9, V8, V7, V45, ((begin (V51 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V49, V50)) end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(fun (V46) -> ('Idris.Idris2.Core.Case.CaseTree':'dn--un--weakenNs_Weaken_CaseTree'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V43 | [V44 | []]])), V46)) end))(V4))))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V66 = begin (V59 = ('nested--20855-15782--in--un--altGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V17))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V65 = fun (V64) -> {'Prelude.Types.Right', [{'Core.Case.CaseTree.DelayCase', V43, V44, V58} | V63]} end), V65 end(V60)) end end end end), V66 end(V55)) end end end end; {'Core.Case.CaseBuilder.ConstGroup', V67, V68} -> begin (V69 = ('un--match'(V3, V1, V11, V10, V9, V8, V7, V68, V4))), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V81 = begin (V74 = ('nested--20855-15782--in--un--altGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V17))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V80 = fun (V79) -> {'Prelude.Types.Right', [{'Core.Case.CaseTree.ConstCase', V67, V73} | V78]} end), V80 end(V75)) end end end end), V81 end(V70)) end end end end end end(E0, E1)) end.
'nested--16110-10878--in--un--addGroup'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V12 of {'Core.Case.CaseTree.PAs', V17, V18, V19} -> ('nested--16110-10878--in--un--addGroup'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V19, V13, V14, ('Idris.Idris2.Core.TT':'un--substName'(V18, {'Core.TT.Local', V17, {'Prelude.Types.Just', 1}, V11}, V15)), V16)); {'Core.Case.CaseTree.PCon', V20, V21, V22, V23, V24} -> case case (V23 =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V24))) of 'false' -> 0; _ -> 1 end of 1 -> ('nested--16110-10875--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V21, V22, V24, V13, V14, V15, V16)); 0 -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CaseCompile', V20, V5, {'Core.Core.NotFullyApplied', V21}}, V25)) end end; {'Core.Case.CaseTree.PTyCon', V26, V27, V28, V29} -> case case (V28 =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V29))) of 'false' -> 0; _ -> 1 end of 1 -> ('nested--16110-10875--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V27, 0, V29, V13, V14, V15, V16)); 0 -> fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CaseCompile', V26, V5, {'Core.Core.NotFullyApplied', V27}}, V30)) end end; {'Core.Case.CaseTree.PArrow', V31, V32, V33, V34} -> ('nested--16110-10875--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, {'Core.Name.UN', {'Core.Name.Basic', <<"->"/utf8>>}}, 0, [V33 | [V34 | []]], V13, V14, V15, V16)); {'Core.Case.CaseTree.PDelay', V35, V36, V37, V38} -> ('nested--16110-10876--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V37, V38, V13, V14, V15, V16)); {'Core.Case.CaseTree.PConst', V39, V40} -> ('nested--16110-10877--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V40, V13, V14, V15, V16)); _ -> fun (V41) -> {'Prelude.Types.Right', V16} end end.
'nested--16110-10876--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> begin (V33 = {'Core.Value.NBind', V6, {'Core.Name.MN', <<"a"/utf8>>, 0}, {'Core.TT.Pi', V6, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V17, V18)) end end, 0, fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V19, V20)) end end, 1})), {'Core.TT.Explicit'}, {'Core.Value.MkNFClosure', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), ('Idris.Idris2.Core.Env':'un--mkEnv'(V6, V9)), {'Core.Value.NType', V6, {'Core.Name.MN', <<"top"/utf8>>, 0}}}}, fun (V21) -> fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V7, V9, V21, V22))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V32 = fun (V28) -> {'Prelude.Types.Right', {'Core.Value.NBind', V6, {'Core.Name.MN', <<"x"/utf8>>, 0}, {'Core.TT.Pi', V6, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V22}, fun (V29) -> fun (V30) -> fun (V31) -> {'Prelude.Types.Right', {'Core.Value.NDelayed', V6, 2, V27}} end end end}} end), V32 end(V24)) end end end end end end}), begin (V34 = ('un--nextNames'(V9, V8, V7, V6, <<"e"/utf8>>, [V11 | [V12 | []]], {'Prelude.Types.Just', V33}))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V55 = case V38 of {'Builtin.DPair.MkDPair', V39, V40} -> case V39 of [E0 | E1] -> (fun (V41, V42) -> case V42 of [E2 | E3] -> (fun (V43, V44) -> case V44 of [] -> case V40 of {'Builtin.MkPair', V45, V46} -> begin (V47 = ('un--updatePatNames'(('un--updateNames'([{'Builtin.MkPair', V41, V11} | [{'Builtin.MkPair', V43, V12} | []]])), ('un--weakenNs'(V45, V13))))), begin (V48 = {'Core.Case.CaseBuilder.MkPatClause', V4, ('un--++'(V46, V47)), V14, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V45, V15))}), fun (V49) -> {'Prelude.Types.Right', [{'Core.Case.CaseBuilder.DelayGroup', V41, V43, [V48 | []]} | []]} end end end; _ -> fun (V50) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Error compiling Delay pattern match"/utf8>>}, V50)) end end; _ -> fun (V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Error compiling Delay pattern match"/utf8>>}, V51)) end end end(E2, E3)); _ -> fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Error compiling Delay pattern match"/utf8>>}, V52)) end end end(E0, E1)); _ -> fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Error compiling Delay pattern match"/utf8>>}, V53)) end end; _ -> fun (V54) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Error compiling Delay pattern match"/utf8>>}, V54)) end end), V55 end(V35)) end end end end end; [E4 | E5] -> (fun (V56, V57) -> ('with--groupCons,addDelayG-11649'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V56, ('un--checkGroupMatch'({'Core.Case.CaseBuilder.CDelay'}, [], V56)), V57, V15, V14, V13, V12, V11)) end(E4, E5)) end.
'nested--16110-10877--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of [] -> fun (V16) -> {'Prelude.Types.Right', [{'Core.Case.CaseBuilder.ConstGroup', V11, [{'Core.Case.CaseBuilder.MkPatClause', V4, V12, V13, V14} | []]} | []]} end; [E0 | E1] -> (fun (V17, V18) -> ('with--groupCons,addConstG-11850'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V17, V11, ('un--checkGroupMatch'({'Core.Case.CaseBuilder.CConst', V11}, [], V17)), V18, V14, V13, V12)) end(E0, E1)) end.
'nested--16110-10875--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of [] -> begin (V76 = case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, {'Core.Name.UN', {'Core.Name.Basic', <<"->"/utf8>>}})) of 1 -> fun (V18) -> {'Prelude.Types.Right', {'Core.Value.NBind', V6, {'Core.Name.MN', <<"_"/utf8>>, 0}, {'Core.TT.Pi', V6, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Core.Value.MkNFClosure', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), ('Idris.Idris2.Core.Env':'un--mkEnv'(V6, V9)), {'Core.Value.NType', V6, {'Core.Name.MN', <<"top"/utf8>>, 0}}}}, fun (V19) -> fun (V20) -> fun (V21) -> {'Prelude.Types.Right', {'Core.Value.NBind', V6, {'Core.Name.MN', <<"_"/utf8>>, 1}, {'Core.TT.Pi', V6, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Core.Value.MkNFClosure', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), ('Idris.Idris2.Core.Env':'un--mkEnv'(V6, V9)), {'Core.Value.NErased', V6, {'Core.TT.Placeholder'}}}}, fun (V22) -> fun (V23) -> fun (V24) -> {'Prelude.Types.Right', {'Core.Value.NType', V6, {'Core.Name.MN', <<"top"/utf8>>, 0}}} end end end}} end end end}} end; 0 -> begin (V30 = begin (V25 = V7), fun (V26) -> begin (V29 = (begin (V27 = V25), fun (V28) -> ('erlang':'get'(V27)) end end(V26))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V75 = begin (V67 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V11, case V34 of {'Core.Context.MkDefs', V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} -> V35 end))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V74 = case V71 of {'Prelude.Types.Just', V72} -> ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V7, V9, V34, ('Idris.Idris2.Core.Env':'un--mkEnv'(V6, V9)), ('Idris.Idris2.Core.TT':'un--embed'(V72)))); {'Prelude.Types.Nothing'} -> fun (V73) -> {'Prelude.Types.Right', {'Core.Value.NErased', V6, {'Core.TT.Placeholder'}}} end end), V74 end(V68)) end end end end), V75 end(V31)) end end end end end), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V94 = begin (V81 = ('un--nextNames'(V9, V8, V7, V6, <<"e"/utf8>>, V13, {'Prelude.Types.Just', V80}))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V93 = case V85 of {'Builtin.DPair.MkDPair', V86, V87} -> case V87 of {'Builtin.MkPair', V88, V89} -> begin (V90 = ('un--updatePatNames'(('un--updateNames'(('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V86, V13)))), ('un--weakenNs'(V88, V14))))), begin (V91 = {'Core.Case.CaseBuilder.MkPatClause', V4, ('un--++'(V89, V90)), V15, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V88, V16))}), fun (V92) -> {'Prelude.Types.Right', [{'Core.Case.CaseBuilder.ConGroup', V86, V11, V12, [V91 | []]} | []]} end end end end end), V93 end(V82)) end end end end), V94 end(V77)) end end end end; [E0 | E1] -> (fun (V95, V96) -> ('with--groupCons,addConG-11275'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V95, V13, V12, V11, ('un--checkGroupMatch'({'Core.Case.CaseBuilder.CName', V11, V12}, V13, V95)), V96, V16, V15, V14)) end(E0, E1)) end.
'dn--un--weaken_Weaken_ArgType'(V0) -> case V0 of {'Core.Case.CaseBuilder.Known', V1, V2} -> {'Core.Case.CaseBuilder.Known', V1, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V2))}; {'Core.Case.CaseBuilder.Stuck', V3} -> {'Core.Case.CaseBuilder.Stuck', ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V3))}; {'Core.Case.CaseBuilder.Unknown'} -> {'Core.Case.CaseBuilder.Unknown'} end.
'dn--un--weaken_Weaken_(PatInfo $p)'(V0) -> case V0 of {'Core.Case.CaseBuilder.MkInfo', V1, V2, V3, V4} -> {'Core.Case.CaseBuilder.MkInfo', (V1 + 1), V2, V3, ('dn--un--weaken_Weaken_ArgType'(V4))} end.
'dn--un--weakenNs_Weaken_(PatInfo $p)'(V0, V1) -> ('case--weakenNs-7451'(V1, V0, ('Idris.Idris2.Core.TT':'un--sizedView'(V0)))).
'dn--un--show_Show_(Partitions $ps)'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.ConClauses', V2, V3, V4, V5, V6} -> <<('Idris.Idris2.Data.String':'un--fastUnlines'([<<"CON"/utf8>> | ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> <<<<"  "/utf8>>/binary, ('dn--un--show_Show_((PatClause $vars) $todo)'(V3, V2, V7))/binary>> end))(V5))]))/binary, <<<<"\x{a}, "/utf8>>/binary, ('dn--un--show_Show_(Partitions $ps)'(V4, V6))/binary>>/binary>>; {'Core.Case.CaseBuilder.VarClauses', V15, V16, V17, V18, V19} -> <<('Idris.Idris2.Data.String':'un--fastUnlines'([<<"VAR"/utf8>> | ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V20) -> <<<<"  "/utf8>>/binary, ('dn--un--show_Show_((PatClause $vars) $todo)'(V16, V15, V20))/binary>> end))(V18))]))/binary, <<<<"\x{a}, "/utf8>>/binary, ('dn--un--show_Show_(Partitions $ps)'(V17, V19))/binary>>/binary>>; _ -> case V0 of [] -> case V1 of {'Core.Case.CaseBuilder.NoClauses'} -> <<"NONE"/utf8>> end end end.
'dn--un--show_Show_(ArgType $ns)'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.Known', V2, V3} -> <<<<"Known "/utf8>>/binary, <<('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V2))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V3))/binary>>/binary>>/binary>>; {'Core.Case.CaseBuilder.Stuck', V4} -> <<<<"Stuck "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V4))/binary>>; {'Core.Case.CaseBuilder.Unknown'} -> <<"Unknown"/utf8>> end.
'dn--un--show_Show_((PatClause $vars) $todo)'(V0, V1, V2) -> case V2 of {'Core.Case.CaseBuilder.MkPatClause', V3, V4, V5, V6} -> <<('dn--un--show_Show_((NamedPats $vars) $todo)'(V0, V1, V4))/binary, <<<<" => "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V6))/binary>>/binary>> end.
'dn--un--show_Show_((NamedPats $vars) $todo)'(V0, V1, V2) -> <<<<"["/utf8>>/binary, <<('nested--11818-7049--in--un--showAll'(V0, V1, V2, V0, V1, V2))/binary, <<"]"/utf8>>/binary>>/binary>>.
'dn--un--showPrec_Show_((PatClause $vars) $todo)'(V0, V1, V2, V3) -> ('dn--un--show_Show_((PatClause $vars) $todo)'(V0, V1, V3)).
'dn--un--resolved_HasNames_(ArgType $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.Known', V2, V3} -> begin (V4 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V0, V3))), ((begin (V20 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V12 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', (V8(V11))} end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V5) -> {'Core.Case.CaseBuilder.Known', V2, V5} end))))(V4)) end; {'Core.Case.CaseBuilder.Stuck', V23} -> begin (V24 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V0, V23))), ((begin (V40 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V37, V38, V39)) end end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end((begin (V32 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> {'Prelude.Types.Right', (V28(V31))} end end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V25) -> {'Core.Case.CaseBuilder.Stuck', V25} end))))(V24)) end; {'Core.Case.CaseBuilder.Unknown'} -> fun (V43) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.Unknown'}} end end.
'dn--un--resolved_HasNames_((PatInfo $n) $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.MkInfo', V2, V3, V4, V5} -> begin (V6 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Pat'(V0, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V18 = begin (V11 = ('dn--un--resolved_HasNames_(ArgType $vars)'(V0, V5))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.MkInfo', V2, V3, V10, V15}} end), V17 end(V12)) end end end end), V18 end(V7)) end end end end end.
'dn--un--resolved_HasNames_((PatClause $vars) $todo)'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.MkPatClause', V2, V3, V4, V5} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V6) -> {'Prelude.Types.Right', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> {'Core.Case.CaseBuilder.MkPatClause', V7, V8, V9, V10} end end end end} end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V11, V12)) end end, V2, [])))), ('dn--un--resolved_HasNames_((NamedPats $vars) $todo)'(V0, V3)))), fun (V13) -> {'Prelude.Types.Right', V4} end)), ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V0, V5)))) end.
'dn--un--resolved_HasNames_((NamedPats $vars) $todo)'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.Nil'} -> fun (V2) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.Nil'}} end; {'Core.Case.CaseBuilder.::', V3, V4} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> {'Prelude.Types.Right', fun (V6) -> fun (V7) -> {'Core.Case.CaseBuilder.::', V6, V7} end end} end, ('dn--un--resolved_HasNames_((PatInfo $n) $vars)'(V0, V3)))), ('dn--un--resolved_HasNames_((NamedPats $vars) $todo)'(V0, V4)))) end.
'dn--un--pretty_Pretty_IdrisSyntax_((PatClause $vars) $todo)'(V0, V1, V2) -> case V2 of {'Core.Case.CaseBuilder.MkPatClause', V3, V4, V5, V6} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('dn--un--pretty_Pretty_IdrisSyntax_((NamedPats $vars) $todo)'(V0, V1, V4)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty.Annotations':'un--fatArrow'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V8, V9)) end end}, V6)))))) end.
'dn--un--pretty_Pretty_IdrisSyntax_((NamedPats $vars) $todo)'(V0, V1, V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'(('nested--11992-7213--in--un--prettyAll'(V0, V1, V2, V0, V1, V2)))).
'dn--un--full_HasNames_(ArgType $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.Known', V2, V3} -> begin (V4 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V0, V3))), ((begin (V20 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V12 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', (V8(V11))} end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V5) -> {'Core.Case.CaseBuilder.Known', V2, V5} end))))(V4)) end; {'Core.Case.CaseBuilder.Stuck', V23} -> begin (V24 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V0, V23))), ((begin (V40 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V37, V38, V39)) end end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end((begin (V32 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> {'Prelude.Types.Right', (V28(V31))} end end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V25) -> {'Core.Case.CaseBuilder.Stuck', V25} end))))(V24)) end; {'Core.Case.CaseBuilder.Unknown'} -> fun (V43) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.Unknown'}} end end.
'dn--un--full_HasNames_((PatInfo $n) $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.MkInfo', V2, V3, V4, V5} -> begin (V6 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Pat'(V0, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V18 = begin (V11 = ('dn--un--full_HasNames_(ArgType $vars)'(V0, V5))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.MkInfo', V2, V3, V10, V15}} end), V17 end(V12)) end end end end), V18 end(V7)) end end end end end.
'dn--un--full_HasNames_((PatClause $vars) $todo)'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.MkPatClause', V2, V3, V4, V5} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V6) -> {'Prelude.Types.Right', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> {'Core.Case.CaseBuilder.MkPatClause', V7, V8, V9, V10} end end end end} end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V11)) end, V2, [])))), ('dn--un--full_HasNames_((NamedPats $vars) $todo)'(V0, V3)))), fun (V12) -> {'Prelude.Types.Right', V4} end)), ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V0, V5)))) end.
'dn--un--full_HasNames_((NamedPats $vars) $todo)'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.Nil'} -> fun (V2) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.Nil'}} end; {'Core.Case.CaseBuilder.::', V3, V4} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> {'Prelude.Types.Right', fun (V6) -> fun (V7) -> {'Core.Case.CaseBuilder.::', V6, V7} end end} end, ('dn--un--full_HasNames_((PatInfo $n) $vars)'(V0, V3)))), ('dn--un--full_HasNames_((NamedPats $vars) $todo)'(V0, V4)))) end.
'un--zeroedScore'(V0, V1) -> {'Core.Case.CaseBuilder.Scored', V1, ('Idris.Idris2.Data.Vect':'un--replicate'((('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)) + 1), 0))}.
'un--weakenNs'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.Nil'} -> {'Core.Case.CaseBuilder.Nil'}; {'Core.Case.CaseBuilder.::', V2, V3} -> {'Core.Case.CaseBuilder.::', ('dn--un--weakenNs_Weaken_(PatInfo $p)'(V0, V2)), ('un--weakenNs'(V0, V3))} end.
'un--weaken'(V0, V1, V2) -> case V2 of {'Core.Case.CaseBuilder.Nil'} -> {'Core.Case.CaseBuilder.Nil'}; {'Core.Case.CaseBuilder.::', V3, V4} -> {'Core.Case.CaseBuilder.::', ('dn--un--weaken_Weaken_(PatInfo $p)'(V3)), ('un--weaken'(V0, V1, V4))} end.
'un--varRule'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V11 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> ('nested--20946-16107--in--un--updateVar'(V2, V1, V9, V0, V8, V7, V6, V5, V4, V3, V10)) end, V8, []))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V16 = ('un--match'(V1, V2, V3, V4, V5, V6, V7, V15, V9))), V16 end(V12)) end end end end.
'un--updatePats'(V0, V1, V2, V3, V4, V5) -> case V1 of [] -> fun (V6) -> case V5 of {'Core.Case.CaseBuilder.Nil'} -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.Nil'}} end end; [E0 | E1] -> (fun (V7, V8) -> case V4 of {'Core.Value.NBind', V9, V10, V11, V12} -> case V11 of {'Core.TT.Pi', V13, V14, V15, V16} -> case V5 of {'Core.Case.CaseBuilder.::', V17, V18} -> case V17 of {'Core.Case.CaseBuilder.MkInfo', V19, V20, V21, V22} -> case V22 of {'Core.Case.CaseBuilder.Unknown'} -> begin (V28 = begin (V23 = V2), fun (V24) -> begin (V27 = (begin (V25 = V23), fun (V26) -> ('erlang':'get'(V25)) end end(V24))), {'Prelude.Types.Right', V27} end end end), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V63 = begin (V34 = fun (V33) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V32, V33)) end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V62 = begin (V39 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V2, V0, V38, V3, V16))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V61 = begin (V44 = ((V12(V32))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V3, {'Core.TT.Ref', V9, {'Core.TT.Bound'}, V7}))))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V60 = begin (V49 = ('un--updatePats'(V0, V8, V2, V3, V48, V18))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V59 = fun (V54) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.::', case V17 of {'Core.Case.CaseBuilder.MkInfo', V55, V56, V57, V58} -> {'Core.Case.CaseBuilder.MkInfo', V55, V56, V57, {'Core.Case.CaseBuilder.Known', V14, V43}} end, V53}} end), V59 end(V50)) end end end end), V60 end(V45)) end end end end), V61 end(V40)) end end end end), V62 end(V35)) end end end end), V63 end(V29)) end end end end; _ -> fun (V64) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.::', V17, V18}} end end end; _ -> case V5 of {'Core.Case.CaseBuilder.::', V65, V66} -> case V65 of {'Core.Case.CaseBuilder.MkInfo', V67, V68, V69, V70} -> case V70 of {'Core.Case.CaseBuilder.Unknown'} -> begin (V76 = begin (V71 = V2), fun (V72) -> begin (V75 = (begin (V73 = V71), fun (V74) -> ('erlang':'get'(V73)) end end(V72))), {'Prelude.Types.Right', V75} end end end), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V99 = begin (V82 = fun (V81) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V80, V81)) end), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V98 = begin (V87 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V86, V3, V4))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V97 = fun (V92) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.::', case V65 of {'Core.Case.CaseBuilder.MkInfo', V93, V94, V95, V96} -> {'Core.Case.CaseBuilder.MkInfo', V93, V94, V95, {'Core.Case.CaseBuilder.Stuck', V91}} end, V66}} end), V97 end(V88)) end end end end), V98 end(V83)) end end end end), V99 end(V77)) end end end end; _ -> fun (V100) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.::', V65, V66}} end end end end end; _ -> case V5 of {'Core.Case.CaseBuilder.::', V101, V102} -> case V101 of {'Core.Case.CaseBuilder.MkInfo', V103, V104, V105, V106} -> case V106 of {'Core.Case.CaseBuilder.Unknown'} -> begin (V112 = begin (V107 = V2), fun (V108) -> begin (V111 = (begin (V109 = V107), fun (V110) -> ('erlang':'get'(V109)) end end(V108))), {'Prelude.Types.Right', V111} end end end), fun (V113) -> begin (V114 = (V112(V113))), case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> (begin (V135 = begin (V118 = fun (V117) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V116, V117)) end), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V134 = begin (V123 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V122, V3, V4))), fun (V124) -> begin (V125 = (V123(V124))), case V125 of {'Prelude.Types.Left', V126} -> {'Prelude.Types.Left', V126}; {'Prelude.Types.Right', V127} -> (begin (V133 = fun (V128) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.::', case V101 of {'Core.Case.CaseBuilder.MkInfo', V129, V130, V131, V132} -> {'Core.Case.CaseBuilder.MkInfo', V129, V130, V131, {'Core.Case.CaseBuilder.Stuck', V127}} end, V102}} end), V133 end(V124)) end end end end), V134 end(V119)) end end end end), V135 end(V113)) end end end end; _ -> fun (V136) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.::', V101, V102}} end end end end end; _ -> case V5 of {'Core.Case.CaseBuilder.::', V137, V138} -> case V137 of {'Core.Case.CaseBuilder.MkInfo', V139, V140, V141, V142} -> case V142 of {'Core.Case.CaseBuilder.Unknown'} -> begin (V148 = begin (V143 = V2), fun (V144) -> begin (V147 = (begin (V145 = V143), fun (V146) -> ('erlang':'get'(V145)) end end(V144))), {'Prelude.Types.Right', V147} end end end), fun (V149) -> begin (V150 = (V148(V149))), case V150 of {'Prelude.Types.Left', V151} -> {'Prelude.Types.Left', V151}; {'Prelude.Types.Right', V152} -> (begin (V171 = begin (V154 = fun (V153) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V152, V153)) end), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V170 = begin (V159 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V158, V3, V4))), fun (V160) -> begin (V161 = (V159(V160))), case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> (begin (V169 = fun (V164) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.::', case V137 of {'Core.Case.CaseBuilder.MkInfo', V165, V166, V167, V168} -> {'Core.Case.CaseBuilder.MkInfo', V165, V166, V167, {'Core.Case.CaseBuilder.Stuck', V163}} end, V138}} end), V169 end(V160)) end end end end), V170 end(V155)) end end end end), V171 end(V149)) end end end end; _ -> fun (V172) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.::', V137, V138}} end end end end end end(E0, E1)) end.
'un--updatePatNames'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.Nil'} -> {'Core.Case.CaseBuilder.Nil'}; {'Core.Case.CaseBuilder.::', V2, V3} -> {'Core.Case.CaseBuilder.::', case V2 of {'Core.Case.CaseBuilder.MkInfo', V4, V5, V6, V7} -> {'Core.Case.CaseBuilder.MkInfo', V4, V5, ('nested--15874-10652--in--un--update'(V3, V2, V0, V6)), V7} end, ('un--updatePatNames'(V0, V3))} end.
'un--updateNames'(V0) -> ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V1) -> ('nested--15842-10600--in--un--update'(V1)) end, V0)).
'un--toPatClause'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V4)) of {'Builtin.MkPair', V6, V7} -> case V6 of {'Core.TT.Ref', V8, V9, V10} -> case V9 of {'Core.TT.Func'} -> begin (V16 = begin (V11 = V0), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V116 = begin (V53 = ('Idris.Idris2.Core.Context':'un--getPosition'(V2, case V20 of {'Core.Context.MkDefs', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} -> V21 end))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V115 = case V57 of {'Builtin.MkPair', V58, V59} -> begin (V92 = ('Idris.Idris2.Core.Context':'un--getPosition'(V10, case V20 of {'Core.Context.MkDefs', V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91} -> V60 end))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V114 = case V96 of {'Builtin.MkPair', V97, V98} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V58, V97)) of 1 -> begin (V100 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V99) -> ('un--argToPat'(V0, V99)) end, V7, []))), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V106 = fun (V105) -> {'Prelude.Types.Right', {'Builtin.MkPair', V104, V5}} end), V106 end(V101)) end end end end; 0 -> fun (V107) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V8, <<<<"Wrong function name in pattern LHS "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V109, V110)) end end}, {'Prelude.Show.MkShow', fun (V111) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V111)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V112, V113)) end end}}, {'Builtin.MkPair', V2, V10}))/binary>>}, V107)) end end end), V114 end(V93)) end end end end end), V115 end(V54)) end end end end), V116 end(V17)) end end end end; _ -> fun (V117) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<"Not a function name in pattern LHS"/utf8>>}, V117)) end end; _ -> fun (V118) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<"Not a function name in pattern LHS"/utf8>>}, V118)) end end end end.
'un--tail'(V0) -> case V0 of {'Core.Case.CaseBuilder.::', V1, V2} -> V2 end.
'un--substInPats'(V0, V1, V2, V3, V4, V5, V6) -> case V1 of [] -> fun (V7) -> case V6 of {'Core.Case.CaseBuilder.Nil'} -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.Nil'}} end end; [E0 | E1] -> (fun (V8, V9) -> case V6 of {'Core.Case.CaseBuilder.::', V10, V11} -> begin (V12 = ('un--substInPatInfo'(V8, V0, V9, V2, V3, V4, V5, V10, V11))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V26 = case V16 of {'Builtin.MkPair', V17, V18} -> begin (V19 = ('un--substInPats'(V0, V9, V2, V3, V4, V5, V18))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.::', V17, V23}} end), V25 end(V20)) end end end end end), V26 end(V13)) end end end end end end(E0, E1)) end.
'un--substInPatInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('case--substInPatInfo-6227'(V2, V1, V8, V0, V7, V6, V5, V4, V3, case V7 of {'Core.Case.CaseBuilder.MkInfo', V9, V10, V11, V12} -> V12 end)).
'un--substInClause'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.Case.CaseBuilder.MkPatClause', V6, V7, V8, V9} -> case V7 of {'Core.Case.CaseBuilder.::', V10, V11} -> case V10 of {'Core.Case.CaseBuilder.MkInfo', V12, V13, V14, V15} -> begin (V16 = ('un--substInPats'(V1, V2, V3, V4, V0, ('Idris.Idris2.Core.Case.CaseTree':'un--mkTerm'(V1, V14)), V11))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.MkPatClause', V6, {'Core.Case.CaseBuilder.::', {'Core.Case.CaseBuilder.MkInfo', V12, V13, V14, V15}, V20}, V8, V9}} end), V22 end(V17)) end end end end end end end.
'un--simpleCase'(V0, V1, V2, V3, V4, V5, V6) -> begin (V45 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, <<"compile.casetree"/utf8>>, 5, begin (V21 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V10) -> {'Prelude.Types.Right', fun (V11) -> fun (V12) -> {'Builtin.MkPair', V11, V12} end end} end, ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V15, V16)) end end}, V8)))), ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V19, V20)) end end}, V9)))) end end, V6, []))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V44 = fun (V26) -> {'Prelude.Types.Right', <<<<"simpleCase: Clauses:\x{a}"/utf8>>/binary, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Basics':'un--flip'(begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end, V25, fun (V34) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V35) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'([], V36, V37)) end end}, ('Idris.Idris2.Builtin':'un--fst'(V34)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V39 = fun (V38) -> V38 end), fun (V40) -> (V39(V40)) end end(<<"="/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'([], V42, V43)) end end}, ('Idris.Idris2.Builtin':'un--snd'(V34)))))))) end))))))))/binary>>} end), V44 end(V22)) end end end end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V68 = begin (V51 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V50) -> ('un--toPatClause'(V0, V1, V3, V50)) end, V6, []))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V67 = begin (V61 = begin (V56 = V0), fun (V57) -> begin (V60 = (begin (V58 = V56), fun (V59) -> ('erlang':'get'(V58)) end end(V57))), {'Prelude.Types.Right', V60} end end end), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V66 = ('un--patCompile'(V0, V1, V3, V2, V4, V55, V5))), V66 end(V62)) end end end end), V67 end(V52)) end end end end), V68 end(V46)) end end end end.
'un--shuffleVars'(V0, V1) -> case V0 of 0 -> case V1 of {'Core.Case.CaseBuilder.MkPatClause', V2, V3, V4, V5} -> V1; _ -> case V1 of {'Core.Case.CaseBuilder.MkPatClause', V6, V7, V8, V9} -> {'Core.Case.CaseBuilder.MkPatClause', V6, ('un--moveFirst'(V0, V7)), V8, V9} end end; _ -> case V1 of {'Core.Case.CaseBuilder.MkPatClause', V10, V11, V12, V13} -> {'Core.Case.CaseBuilder.MkPatClause', V10, ('un--moveFirst'(V0, V11)), V12, V13} end end.
'un--sameType'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V9, V10) -> begin (V16 = begin (V11 = V2), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V38 = case ('un--getFirstArgType'(V9)) of {'Core.Case.CaseBuilder.Known', V21, V22} -> begin (V23 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V2, V0, V20, V6, V22))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V36 = ('nested--19194-13690--in--un--sameTypeAs'(V0, V9, V10, V6, V5, V4, V3, V2, V1, V4, V27, ((begin (V33 = fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V31, V32)) end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end(fun (V28) -> ('un--getFirstArgType'(V28)) end))(V10))))), V36 end(V24)) end end end end; _ -> fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CaseCompile', V3, V5, {'Core.Core.DifferingTypes'}}, V37)) end end), V38 end(V17)) end end end end end(E0, E1)) end.
'un--samePat'(V0) -> case V0 of [] -> 1; [E0 | E1] -> (fun (V1, V2) -> ('nested--19692-14112--in--un--samePatAs'(V1, V2, ('nested--19692-14111--in--un--dropAs'(V1, V2, ('un--getFirstPat'(V1)))), ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('nested--19692-14111--in--un--dropAs'(V1, V2, ('un--getFirstPat'(V3)))) end))(V2)))) end(E0, E1)) end.
'un--pickNextViable'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V2 of [] -> case ('un--samePat'(V8)) of 1 -> fun (V9) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V0, 0}} end; 0 -> begin (V10 = ('un--getScore'(V1, V3, V4, V5, V6, V7, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V18 = fun (V15) -> case V14 of {'Prelude.Types.Right', V16} -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V0, 0}}; {'Prelude.Types.Left', V17} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CaseCompile', V5, V7, V17}, V15)) end end), V18 end(V11)) end end end end end; [E0 | E1] -> (fun (V19, V20) -> case ('un--samePat'(V8)) of 1 -> fun (V21) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V0, 0}} end; 0 -> begin (V22 = ('un--getScore'(V1, V3, V4, V5, V6, V7, V8))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V47 = case V26 of {'Prelude.Types.Right', V27} -> fun (V28) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V0, 0}} end; _ -> begin (V37 = ('un--pickNextViable'(V19, V1, V20, V3, V4, V5, V6, V7, ((begin (V34 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V32, V33)) end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V29) -> ('un--tail'(V29)) end))(V8))))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V46 = case V41 of {'Builtin.DPair.MkDPair', V42, V43} -> begin (V44 = V43), fun (V45) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V42, (V44 + 1)}} end end end), V46 end(V38)) end end end end end), V47 end(V23)) end end end end end end(E0, E1)) end.
'un--patCompile'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V7) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', [], {'Core.Case.CaseTree.Unmatched', <<"No definition"/utf8>>}}} end end, fun () -> fun (V8) -> fun (V9) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', [], V8}} end end end, V6)); [E0 | E1] -> (fun (V10, V11) -> ('case--patCompile-17256'(V10, V11, V6, V4, V3, V2, V1, V0, ('nested--22954-17130--in--un--getNames'(V10, V11, V6, V4, V3, V2, V1, V0, 0, ('Idris.Idris2.Builtin':'un--fst'(V10)))))) end(E0, E1)) end.
'un--partition'(V0, V1, V2, V3, V4) -> case V4 of [] -> {'Core.Case.CaseBuilder.NoClauses'}; [E0 | E1] -> (fun (V5, V6) -> ('with--partition-8935'(V0, V1, V2, V6, V3, ('un--partition'(V0, V1, V2, V3, V6)), V5)) end(E0, E1)) end.
'un--nextNames'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> fun (V7) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', [], {'Builtin.MkPair', ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), {'Core.Case.CaseBuilder.Nil'}}}} end; [E0 | E1] -> (fun (V8, V9) -> begin (V15 = begin (V10 = V2), fun (V11) -> begin (V14 = (begin (V12 = V10), fun (V13) -> ('erlang':'get'(V12)) end end(V11))), {'Prelude.Types.Right', V14} end end end), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V107 = begin (V21 = fun (V20) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V19, V20)) end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V106 = begin (V26 = ('un--nextName'(V1, V4))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V105 = begin (V31 = ('Idris.Idris2.Core.Env':'un--mkEnv'(V3, V0))), begin (V84 = case V6 of {'Prelude.Types.Nothing'} -> fun (V32) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'Core.Case.CaseBuilder.Unknown'}}} end; {'Prelude.Types.Just', V33} -> case V33 of {'Core.Value.NBind', V34, V35, V36, V37} -> case V36 of {'Core.TT.Pi', V38, V39, V40, V41} -> begin (V42 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, V0, V19, V41))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V69 = case V46 of {'Core.Value.NErased', V47, V48} -> begin (V49 = ((V37(V19))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V31, {'Core.TT.Ref', V34, {'Core.TT.Bound'}, V30}))))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V55 = fun (V54) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Just', V53}, {'Core.Case.CaseBuilder.Unknown'}}} end), V55 end(V50)) end end end end; _ -> begin (V56 = ((V37(V19))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V31, {'Core.TT.Ref', V34, {'Core.TT.Bound'}, V30}))))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V68 = begin (V61 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V25, V31, V46))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V67 = fun (V66) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Just', V60}, {'Core.Case.CaseBuilder.Known', V39, V65}}} end), V67 end(V62)) end end end end), V68 end(V57)) end end end end end), V69 end(V43)) end end end end; _ -> begin (V70 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V25, V31, V33))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V76 = fun (V75) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'Core.Case.CaseBuilder.Stuck', V74}}} end), V76 end(V71)) end end end end end; _ -> begin (V77 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V25, V31, V33))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V83 = fun (V82) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'Core.Case.CaseBuilder.Stuck', V81}}} end), V83 end(V78)) end end end end end end), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V104 = begin (V89 = ('un--nextNames'(V0, V1, V2, V3, V4, V9, ('Idris.Idris2.Builtin':'un--fst'(V88))))), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V103 = case V93 of {'Builtin.DPair.MkDPair', V94, V95} -> case V95 of {'Builtin.MkPair', V96, V97} -> begin (V101 = case ('Idris.Idris2.Builtin':'un--snd'(V88)) of {'Core.Case.CaseBuilder.Unknown'} -> {'Core.Case.CaseBuilder.Unknown'}; {'Core.Case.CaseBuilder.Known', V98, V99} -> {'Core.Case.CaseBuilder.Known', V98, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V96)), V99))}; {'Core.Case.CaseBuilder.Stuck', V100} -> {'Core.Case.CaseBuilder.Stuck', ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V96)), V100))} end), fun (V102) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', [V30 | V94], {'Builtin.MkPair', ('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V96)), {'Core.Case.CaseBuilder.::', {'Core.Case.CaseBuilder.MkInfo', 0, V30, V8, V101}, ('un--weaken'(V30, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V94, V0)), V97))}}}} end end end end), V103 end(V90)) end end end end), V104 end(V85)) end end end end end), V105 end(V27)) end end end end), V106 end(V22)) end end end end), V107 end(V16)) end end end end end(E0, E1)) end.
'un--nextName'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V25 = begin (V18 = begin (V12 = V0), fun (V13) -> begin (V17 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, begin (V16 = (V11 + 1)), case ((V16 band 9223372036854775808) =/= 0) of 'true' -> (V16 bor -9223372036854775808); _ -> (V16 band 9223372036854775807) end end)) end end(V13))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', {'Core.Name.MN', V1, V11}} end), V24 end(V19)) end end end end), V25 end(V8)) end end end end.
'un--nextIdxByScore'(V0, V1, V2, V3, V4) -> case V2 of 0 -> {'Builtin.DPair.MkDPair', V0, 0}; _ -> case V3 of {'Core.Case.CaseBuilder.CompileTime', V5} -> {'Builtin.DPair.MkDPair', V0, 0}; _ -> case V2 of 1 -> case V3 of {'Core.Case.CaseBuilder.RunTime'} -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Builtin.DPair.MkDPair', V0, 0} end, ('un--applyHeuristics'(V0, V1, ('un--zeroedScore'(V1, V4)), [fun (V6) -> ('un--heuristicF'(V1, V6)) end | [fun (V7) -> ('un--heuristicB'([V0 | V1], V7)) end | [fun (V8) -> ('un--heuristicA'([V0 | V1], V8)) end | []]]])))) end end end end.
'un--newPats'(V0, V1, V2) -> case V0 of [] -> case V1 of 0 -> {'Core.Case.CaseBuilder.Nil'}; _ -> ('erlang':'throw'({'$idris_error', <<"Nat case not covered"/utf8>>})) end; [E0 | E1] -> (fun (V3, V4) -> case V1 of 0 -> ('erlang':'throw'({'$idris_error', <<"Nat case not covered"/utf8>>})); _ -> begin (V5 = (V1 - 1)), case V2 of {'Core.Case.CaseBuilder.::', V6, V7} -> {'Core.Case.CaseBuilder.::', case V6 of {'Core.Case.CaseBuilder.MkInfo', V8, V9, V10, V11} -> {'Core.Case.CaseBuilder.MkInfo', V8, V9, V3, V11} end, ('un--newPats'(V4, V5, V7))} end end end end(E0, E1)) end.
'un--namesIn'(V0, V1) -> case V1 of {'Core.Case.CaseTree.PAs', V2, V3, V4} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V20, V21, V22, V23)) end end end end end end end, fun (V24) -> fun (V25) -> V25 end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V28, V29, V30)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V33, V34)) end end}, V3, V0)) of 1 -> ('un--namesIn'(V0, V4)); 0 -> 0 end; {'Core.Case.CaseTree.PCon', V35, V36, V37, V38, V39} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V40, V41)) end end, 1}, fun (V42) -> ('un--namesIn'(V0, V42)) end, V39)); {'Core.Case.CaseTree.PTyCon', V43, V44, V45, V46} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V47, V48)) end end, 1}, fun (V49) -> ('un--namesIn'(V0, V49)) end, V46)); {'Core.Case.CaseTree.PArrow', V50, V51, V52, V53} -> case ('un--namesIn'(V0, V52)) of 1 -> ('un--namesIn'(V0, V53)); 0 -> 0 end; {'Core.Case.CaseTree.PDelay', V54, V55, V56, V57} -> case ('un--namesIn'(V0, V56)) of 1 -> ('un--namesIn'(V0, V57)); 0 -> 0 end; {'Core.Case.CaseTree.PLoc', V58, V59} -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V62, V63, V64)) end end end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V67, V68, V69)) end end end end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V71)) end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V75, V76, V77, V78)) end end end end end end end, fun (V79) -> fun (V80) -> V80 end end, fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V83, V84, V85)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V88, V89)) end end}, V59, V0)); _ -> 1 end.
'un--namesFrom'(V0) -> case V0 of {'Core.Case.CaseTree.PAs', V1, V2, V3} -> [V2 | ('un--namesFrom'(V3))]; {'Core.Case.CaseTree.PCon', V4, V5, V6, V7, V8} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V9, V10)) end end, []}, fun (V11) -> ('un--namesFrom'(V11)) end, V8)); {'Core.Case.CaseTree.PTyCon', V12, V13, V14, V15} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, V17)) end end, []}, fun (V18) -> ('un--namesFrom'(V18)) end, V15)); {'Core.Case.CaseTree.PArrow', V19, V20, V21, V22} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--namesFrom'(V21)), ('un--namesFrom'(V22)))); {'Core.Case.CaseTree.PDelay', V23, V24, V25, V26} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--namesFrom'(V25)), ('un--namesFrom'(V26)))); {'Core.Case.CaseTree.PLoc', V27, V28} -> [V28 | []]; _ -> [] end.
'un--moveFirst'(V0, V1) -> {'Core.Case.CaseBuilder.::', ('un--getPat'(V0, V1)), ('un--dropPat'(V0, V1))}.
'un--mkPatClause'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CaseCompile', V1, V2, {'Core.Core.DifferingArgNumbers'}}, V9)) end end, fun () -> fun (V10) -> begin (V16 = begin (V11 = V0), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V43 = begin (V21 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V20, {'Core.Env.Nil'}, V4))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V42 = begin (V26 = ('nested--22527-16689--in--un--mkNames'(V7, V8, V5, V4, V3, V2, V1, V0, V3, V7, V10, {'Prelude.Types.Just', V25}))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V41 = begin (V34 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, 20, fun () -> <<<<"Make pat clause for names "/utf8>>/binary, <<('dn--un--show_Show_((NamedPats $vars) $todo)'(V3, V3, V30))/binary, <<<<" in LHS "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V31) -> ('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_Pat'(V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Case.CaseTree':'dn--un--showPrec_Show_Pat'(V32, V33)) end end}, V7))/binary>>/binary>>/binary>> end))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V40 = fun (V39) -> {'Prelude.Types.Right', {'Core.Case.CaseBuilder.MkPatClause', [], V30, V5, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V3)), V8))}} end), V40 end(V35)) end end end end), V41 end(V27)) end end end end), V42 end(V22)) end end end end), V43 end(V17)) end end end end end end, ('Idris.Idris2.Libraries.Data.LengthMatch':'un--checkLengthMatch'(V3, V7)))) end.
'un--mkPat'(V0, V1, V2, V3) -> case V3 of {'Core.TT.Ref', V4, V5, V6} -> case V5 of {'Core.TT.Bound'} -> fun (V7) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PLoc', V4, V6}} end; {'Core.TT.DataCon', V8, V9} -> fun (V10) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PCon', V4, V6, V8, V9, V1}} end; {'Core.TT.TyCon', V11, V12} -> fun (V13) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PTyCon', V4, V6, V12, V1}} end; {'Core.TT.Func'} -> begin (V14 = ('Idris.Idris2.Core.Context':'un--getPrimitiveNames'(V0))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V42 = begin (V21 = ('Idris.Idris2.Core.Normalise':'un--normalisePrims'(V0, [], fun (V19) -> 1 end, fun (V20) -> ('Idris.Idris2.Core.Case.CaseTree':'un--isPConst'(V20)) end, 1, V18, V6, V1, V2, {'Core.Env.Nil'}))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V41 = case V25 of {'Prelude.Types.Just', V26} -> case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_(Term $vars)'(V26, V2)) of 1 -> ('un--mkPat'(V0, [], V26, V26)); 0 -> fun (V27) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PUnmatchable', ('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V2}} end end; {'Prelude.Types.Nothing'} -> begin (V34 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V29 = fun (V28) -> V28 end), fun (V30) -> (V29(V30)) end end(<<"compile.casetree"/utf8>>)), 10, fun () -> <<(begin (V32 = fun (V31) -> V31 end), fun (V33) -> (V32(V33)) end end(<<"Unmatchable function: "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary>> end))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V40 = fun (V39) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PUnmatchable', ('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V2}} end), V40 end(V35)) end end end end end), V41 end(V22)) end end end end), V42 end(V15)) end end end end; _ -> begin (V43 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, 10, fun () -> <<<<"Catchall: marking "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V3))/binary, <<" as unmatchable"/utf8>>/binary>>/binary>> end))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V49 = fun (V48) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PUnmatchable', ('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V2}} end), V49 end(V44)) end end end end end; {'Core.TT.Bind', V50, V51, V52, V53} -> case V52 of {'Core.TT.Pi', V54, V55, V56, V57} -> begin (V58 = ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'({'Core.TT.Erased', V50, {'Core.TT.Placeholder'}}, V53))), begin (V59 = ('un--mkPat'(V0, [], V57, V57))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V71 = begin (V64 = ('un--mkPat'(V0, [], V58, V58))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V70 = fun (V69) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PArrow', V50, V51, V63, V68}} end), V70 end(V65)) end end end end), V71 end(V60)) end end end end end; _ -> begin (V72 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, 10, fun () -> <<<<"Catchall: marking "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V3))/binary, <<" as unmatchable"/utf8>>/binary>>/binary>> end))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V78 = fun (V77) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PUnmatchable', ('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V2}} end), V78 end(V73)) end end end end end; {'Core.TT.App', V79, V80, V81} -> begin (V82 = ('un--mkPat'(V0, [], V81, V81))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V87 = ('un--mkPat'(V0, [V86 | V1], V2, V80))), V87 end(V83)) end end end end; {'Core.TT.As', V88, V89, V90, V91} -> case V90 of {'Core.TT.Ref', V92, V93, V94} -> case V93 of {'Core.TT.Bound'} -> begin (V95 = ('un--mkPat'(V0, [], V91, V91))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V101 = fun (V100) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PAs', V88, V94, V99}} end), V101 end(V96)) end end end end; _ -> ('un--mkPat'(V0, [], V2, V91)) end; _ -> ('un--mkPat'(V0, [], V2, V91)) end; {'Core.TT.TDelay', V102, V103, V104, V105} -> begin (V106 = ('un--mkPat'(V0, [], V2, V104))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V118 = begin (V111 = ('un--mkPat'(V0, [], V2, V105))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V117 = fun (V116) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PDelay', V102, V103, V110, V115}} end), V117 end(V112)) end end end end), V118 end(V107)) end end end end; {'Core.TT.PrimVal', V119, V120} -> fun (V121) -> case V120 of {'Core.TT.PrT', V122} -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PTyCon', V119, {'Core.Name.UN', {'Core.Name.Basic', ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V122))}}, 0, []}}; _ -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PConst', V119, V120}} end end; {'Core.TT.TType', V123, V124} -> fun (V125) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PTyCon', V123, {'Core.Name.UN', {'Core.Name.Basic', <<"Type"/utf8>>}}, 0, []}} end; _ -> begin (V126 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, 10, fun () -> <<<<"Catchall: marking "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V3))/binary, <<" as unmatchable"/utf8>>/binary>>/binary>> end))), fun (V127) -> begin (V128 = (V126(V127))), case V128 of {'Prelude.Types.Left', V129} -> {'Prelude.Types.Left', V129}; {'Prelude.Types.Right', V130} -> (begin (V132 = fun (V131) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.PUnmatchable', ('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V2}} end), V132 end(V127)) end end end end end.
'un--mixture'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Core.Case.CaseBuilder.ConClauses', V11, V12, V13, V14, V15} -> case V11 of [E0 | E1] -> (fun (V16, V17) -> begin (V18 = ('un--mixture'(V0, V1, V2, V3, V4, V13, V6, V7, V8, V15, V10))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V30 = begin (V23 = ('un--conRule'(V0, V1, V2, V3, V4, V6, V7, V8, V14, V22))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V29 = fun (V28) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V27}} end), V29 end(V24)) end end end end), V30 end(V19)) end end end end end(E0, E1)); _ -> fun (V31) -> case V5 of [] -> case V9 of {'Core.Case.CaseBuilder.NoClauses'} -> {'Prelude.Types.Right', V10} end end end end; {'Core.Case.CaseBuilder.VarClauses', V32, V33, V34, V35, V36} -> case V32 of [E2 | E3] -> (fun (V37, V38) -> begin (V39 = ('un--mixture'(V0, V1, V2, V3, V4, V34, V6, V7, V8, V36, V10))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V51 = begin (V44 = ('un--varRule'(V0, V1, V2, V3, V4, V6, V7, V8, V35, V43))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V50 = fun (V49) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V48}} end), V50 end(V45)) end end end end), V51 end(V40)) end end end end end(E2, E3)); _ -> fun (V52) -> case V5 of [] -> case V9 of {'Core.Case.CaseBuilder.NoClauses'} -> {'Prelude.Types.Right', V10} end end end end; _ -> fun (V53) -> case V5 of [] -> case V9 of {'Core.Case.CaseBuilder.NoClauses'} -> {'Prelude.Types.Right', V10} end end end end.
'un--match'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V1 of [E0 | E1] -> (fun (V9, V10) -> begin (V19 = ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> ('un--getNPs'(V11)) end))(V7))), begin (V20 = ('Idris.Idris2.Core.Context':'un--getSession'(V3))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V51 = ('case--match-15366'(V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V19, V24, ('un--nextIdxByScore'(V9, V10, case V24 of {'Core.Options.MkSessionOpts', V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> V50 end, V6, V19))))), V51 end(V21)) end end end end end end(E0, E1)); [] -> case V7 of [] -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V52) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.Unmatched', <<"No patterns"/utf8>>}} end end, fun () -> fun (V53) -> fun (V54) -> {'Prelude.Types.Right', V53} end end end, V8)); [E2 | E3] -> (fun (V55, V56) -> case V55 of {'Core.Case.CaseBuilder.MkPatClause', V57, V58, V59, V60} -> case V58 of {'Core.Case.CaseBuilder.Nil'} -> fun (V61) -> case V60 of {'Core.TT.Erased', V62, V63} -> case V63 of {'Core.TT.Impossible'} -> {'Prelude.Types.Right', {'Core.Case.CaseTree.Impossible'}}; _ -> {'Prelude.Types.Right', {'Core.Case.CaseTree.STerm', V59, V60}} end; _ -> {'Prelude.Types.Right', {'Core.Case.CaseTree.STerm', V59, V60}} end end end end end(E2, E3)) end end.
'un--identifyUnreachableDefaults'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Core.Value.NPrimVal', V6, V7} -> fun (V8) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V11, V12)) end end}, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V25, V26)) end end}))} end; {'Core.Value.NType', V27, V28} -> fun (V29) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V32, V33)) end end}, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V46, V47)) end end}))} end; _ -> begin (V49 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V48) -> ('nested--23903-17984--in--un--rep'(V1, V5, V4, V3, V2, V0, V48)) end, V5, []))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V75 = ('case--identifyUnreachableDefaults-18203'(V1, V5, V4, V3, V2, V0, V53, ('nested--23903-17985--in--un--dropRep'(V1, V5, V4, V3, V2, V0, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V54, V55)) end end, []}, fun (V56) -> V56 end, V53)), ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V59, V60)) end end}, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V73, V74)) end end}))))))), V75 end(V50)) end end end end end.
'un--highScoreIdx'(V0, V1, V2) -> case V2 of {'Core.Case.CaseBuilder.Scored', V3, V4} -> case V4 of {'Data.Vect.::', V5, V6} -> ('un--highScore'([], [V0 | V1], {'Data.Vect.::', V5, V6}, begin (V7 = (V5 - 1)), case ((V7 band 9223372036854775808) =/= 0) of 'true' -> (V7 bor -9223372036854775808); _ -> (V7 band 9223372036854775807) end end, {'Builtin.DPair.MkDPair', V0, 0}, 0)) end end.
'un--highScore'(V0, V1, V2, V3, V4, V5) -> case V1 of [] -> case V2 of {'Data.Vect.Nil'} -> case V5 of 1 -> {'Prelude.Types.Nothing'}; 0 -> {'Prelude.Types.Just', V4} end end; [E0 | E1] -> (fun (V6, V7) -> case V2 of {'Data.Vect.::', V8, V9} -> begin (V13 = fun (V10) -> fun (V11) -> fun (V12) -> ('un--highScore'(('Idris.Idris2.Data.List':'un--snoc'(V0, V6)), V7, V9, V10, V11, V12)) end end end), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V8, V3)) of 0 -> (((V13(V3))(V4))(V5)); 1 -> (((V13(V3))(V4))(1)); 2 -> (((V13(V8))({'Builtin.DPair.MkDPair', V6, ('Idris.Idris2.Core.TT':'un--weakenNVar'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V0)), 0))}))(0)) end end end end(E0, E1)) end.
'un--heuristicF'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.Scored', V2, V3} -> case V2 of [] -> V1; [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ('nested--18732-13230--in--un--scores'(V0, V4, V5, V3, V4))), begin (V10 = ('Idris.Idris2.Data.Vect':'dn--un--zipWith_Zippable_(Vect $k)'(fun (V7) -> fun (V8) -> begin (V9 = (V7 + V8)), case ((V9 band 9223372036854775808) =/= 0) of 'true' -> (V9 bor -9223372036854775808); _ -> (V9 band 9223372036854775807) end end end end, V3, V6))), {'Core.Case.CaseBuilder.Scored', [V4 | V5], V10} end end end(E0, E1)) end end.
'un--heuristicB'(V0, V1) -> ('un--consScoreHeuristic'(V0, fun (V2) -> ('un--headConsPenalty'(fun (V3) -> case case (V3 =:= 0) of 'false' -> 0; _ -> 1 end of 1 -> 0; 0 -> -1 end end, V2)) end, V1)).
'un--heuristicA'(V0, V1) -> ('un--consScoreHeuristic'(V0, fun (V2) -> ('un--headConsPenalty'(fun (V3) -> begin (V5 = (0 - begin (V4 = V3), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end)), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end end, V2)) end, V1)).
'un--headConsPenalty'(V0, V1) -> case V1 of {'Core.Case.CaseTree.PAs', V2, V3, V4} -> ('un--headConsPenalty'(V0, V4)); {'Core.Case.CaseTree.PCon', V5, V6, V7, V8, V9} -> (V0(V8)); {'Core.Case.CaseTree.PTyCon', V10, V11, V12, V13} -> (V0(V12)); {'Core.Case.CaseTree.PConst', V14, V15} -> 0; {'Core.Case.CaseTree.PArrow', V16, V17, V18, V19} -> 0; {'Core.Case.CaseTree.PDelay', V20, V21, V22, V23} -> ('un--headConsPenalty'(V0, V23)); {'Core.Case.CaseTree.PLoc', V24, V25} -> 0; {'Core.Case.CaseTree.PUnmatchable', V26, V27} -> 0 end.
'un--groupCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('nested--16110-10879--in--un--gc'(V0, V1, V2, V8, V7, V6, V5, V4, V3, V0, V1, V2, [], V8)).
'un--getScore'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V7 = ('un--sameType'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.Env':'un--mkEnv'(V3, V0)), V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Right', {'Builtin.MkUnit'}}} end), V13 end(V8)) end end end end, fun (V14) -> fun (V15) -> case V14 of {'Core.Core.CaseCompile', V16, V17, V18} -> {'Prelude.Types.Right', {'Prelude.Types.Left', V18}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V14, V15)) end end end)).
'un--getPatInfo'(V0) -> case V0 of {'Core.Case.CaseBuilder.Nil'} -> []; {'Core.Case.CaseBuilder.::', V1, V2} -> [case V1 of {'Core.Case.CaseBuilder.MkInfo', V3, V4, V5, V6} -> V5 end | ('un--getPatInfo'(V2))] end.
'un--getPat'(V0, V1) -> case V0 of 0 -> case V1 of {'Core.Case.CaseBuilder.::', V2, V3} -> V2 end; _ -> begin (V4 = (V0 - 1)), case V1 of {'Core.Case.CaseBuilder.::', V5, V6} -> ('un--getPat'(V4, V6)) end end end.
'un--getPMDef'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> begin (V6 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree.getpmdef"/utf8>>, 20, fun () -> <<"getPMDef: No clauses!"/utf8>> end))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V35 = begin (V16 = begin (V11 = V0), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V34 = begin (V21 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V20, {'Core.Env.Nil'}, V4))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V33 = begin (V26 = ('nested--24448-18440--in--un--getArgs'(V4, V3, V2, V1, V0, 0, V25))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V30, {'Builtin.MkPair', {'Core.Case.CaseTree.Unmatched', <<"No clauses"/utf8>>}, []}}} end), V32 end(V27)) end end end end), V33 end(V22)) end end end end), V34 end(V17)) end end end end), V35 end(V7)) end end end end; _ -> begin (V41 = begin (V36 = V0), fun (V37) -> begin (V40 = (begin (V38 = V36), fun (V39) -> ('erlang':'get'(V38)) end end(V37))), {'Prelude.Types.Right', V40} end end end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V114 = begin (V54 = ((begin (V51 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V49, V50)) end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(fun (V46) -> ('nested--24448-18559--in--un--toClosed'(V5, V4, V3, V2, V1, V0, V45, V46)) end))(('nested--24448-18556--in--un--labelPat'(V5, V4, V3, V2, V1, V0, 0, V5))))), begin (V55 = ('un--simpleCase'(V0, V1, V2, V3, V4, {'Prelude.Types.Nothing'}, V54))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V113 = case V59 of {'Builtin.DPair.MkDPair', V60, V61} -> begin (V79 = begin (V66 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'(V64, V65)) end end}, V61))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V78 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, (begin (V72 = fun (V71) -> V71 end), fun (V73) -> (V72(V73)) end end(<<"compile.casetree.getpmdef"/utf8>>)), 20, fun (V74) -> {'Prelude.Types.Right', <<(begin (V76 = fun (V75) -> V75 end), fun (V77) -> (V76(V77)) end end(<<"Compiled to: "/utf8>>))/binary, ('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V60, V70))/binary>>} end))), V78 end(V67)) end end end end), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V112 = begin (V84 = ('un--findReached'(V61))), begin (V94 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V86 = fun (V85) -> V85 end), fun (V87) -> (V86(V87)) end end(<<"compile.casetree.clauses"/utf8>>)), 25, fun () -> <<(begin (V89 = fun (V88) -> V88 end), fun (V90) -> (V89(V90)) end end(<<"Reached clauses: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V91) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V92, V93)) end end}, V84))/binary>> end))), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V111 = begin (V99 = ('un--findExtraDefaults'(V0, V60, V1, V45, V61))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V110 = begin (V108 = ('nested--24448-18555--in--un--getUnreachable'(V5, V4, V3, V2, V1, V0, 0, ('Idris.Idris2.Data.List':'un--\x{5c}\x{5c}'({'Prelude.EqOrd.MkEq', fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V104, V105)) end end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V106, V107)) end end}, V84, V103)), V5))), fun (V109) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V60, {'Builtin.MkPair', V61, V108}}} end end), V110 end(V100)) end end end end), V111 end(V95)) end end end end end), V112 end(V80)) end end end end end), V113 end(V56)) end end end end end), V114 end(V42)) end end end end end.
'un--getNPs'(V0) -> case V0 of {'Core.Case.CaseBuilder.MkPatClause', V1, V2, V3, V4} -> V2 end.
'un--getFirstPat'(V0) -> case V0 of {'Core.Case.CaseBuilder.::', V1, V2} -> case V1 of {'Core.Case.CaseBuilder.MkInfo', V3, V4, V5, V6} -> V5 end end.
'un--getFirstArgType'(V0) -> case V0 of {'Core.Case.CaseBuilder.::', V1, V2} -> case V1 of {'Core.Case.CaseBuilder.MkInfo', V3, V4, V5, V6} -> V6 end end.
'un--findReachedAlts'(V0) -> case V0 of {'Core.Case.CaseTree.ConCase', V1, V2, V3, V4} -> ('un--findReached'(V4)); {'Core.Case.CaseTree.DelayCase', V5, V6, V7} -> ('un--findReached'(V7)); {'Core.Case.CaseTree.ConstCase', V8, V9} -> ('un--findReached'(V9)); {'Core.Case.CaseTree.DefaultCase', V10} -> ('un--findReached'(V10)) end.
'un--findReached'(V0) -> case V0 of {'Core.Case.CaseTree.Case', V1, V2, V3, V4} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V6)) end end, []}, fun (V7) -> ('un--findReachedAlts'(V7)) end, V4)); {'Core.Case.CaseTree.STerm', V8, V9} -> [V8 | []]; _ -> [] end.
'un--findExtraDefaults'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Case.CaseTree.Case', V5, V6, V7, V8} -> begin (V9 = ('Idris.Idris2.Core.Env':'un--mkEnv'(V2, V1))), begin (V10 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V3, V9, V7))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V51 = begin (V15 = ('un--identifyUnreachableDefaults'(V0, V1, V2, V3, V14, V8))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V50 = begin (V43 = begin (V21 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V20) -> ('nested--24342-18337--in--un--findExtraAlts'(V1, V8, V7, V6, V5, V4, V3, V2, V0, V20)) end, V8, []))), ((begin (V40 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V37, V38, V39)) end end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end((begin (V32 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> {'Prelude.Types.Right', (V28(V31))} end end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V23, V24)) end end, []}, fun (V25) -> V25 end, V22)) end))))(V21)) end), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V49 = fun (V48) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Libraries.Data.SortedSet':'un--toList'(V19)), V47))} end), V49 end(V44)) end end end end), V50 end(V16)) end end end end), V51 end(V11)) end end end end end; _ -> fun (V52) -> {'Prelude.Types.Right', []} end end.
'un--dropPat'(V0, V1) -> case V0 of 0 -> case V1 of {'Core.Case.CaseBuilder.::', V2, V3} -> V3 end; _ -> begin (V4 = (V0 - 1)), case V1 of {'Core.Case.CaseBuilder.::', V5, V6} -> {'Core.Case.CaseBuilder.::', V5, ('un--dropPat'(V4, V6))} end end end.
'un--consScoreHeuristic'(V0, V1, V2) -> case V0 of [E0 | E1] -> (fun (V3, V4) -> case V2 of {'Core.Case.CaseBuilder.Scored', V5, V6} -> case V5 of [] -> V2; _ -> begin (V49 = ((begin (V46 = fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(V44, V45)) end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end(fun (V7) -> ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Prelude.Num.MkNum', fun (V8) -> fun (V9) -> begin (V10 = (V8 + V9)), case ((V10 band 9223372036854775808) =/= 0) of 'true' -> (V10 bor -9223372036854775808); _ -> (V10 band 9223372036854775807) end end end end, fun (V11) -> fun (V12) -> begin (V13 = (V11 * V12)), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end end end, fun (V14) -> begin (V15 = V14), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end end}, {'Prelude.Interfaces.MkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Data.Vect':'dn--un--foldlM_Foldable_(Vect $n)'(V31, V32, V33, V34)) end end end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V36)) end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Data.Vect':'dn--un--foldMap_Foldable_(Vect $n)'(V39, V40, V41)) end end end end end}, V7)) end))(('nested--18451-12976--in--un--scoreColumns'(V3, V4, V6, V5, V1, V0, [V3 | V4], V5))))), begin (V53 = ('Idris.Idris2.Data.Vect':'dn--un--zipWith_Zippable_(Vect $k)'(fun (V50) -> fun (V51) -> begin (V52 = (V50 + V51)), case ((V52 band 9223372036854775808) =/= 0) of 'true' -> (V52 bor -9223372036854775808); _ -> (V52 band 9223372036854775807) end end end end, V6, V49))), {'Core.Case.CaseBuilder.Scored', V5, V53} end end end end end(E0, E1)) end.
'un--conRule'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V10) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.Unmatched', <<"No constructor clauses"/utf8>>}} end end, fun () -> fun (V11) -> fun (V12) -> {'Prelude.Types.Right', V11} end end end, V9)); [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Core.Case.CaseBuilder.MkPatClause', V15, V16, V17, V18} -> case V16 of {'Core.Case.CaseBuilder.::', V19, V20} -> case V19 of {'Core.Case.CaseBuilder.MkInfo', V21, V22, V23, V24} -> begin (V26 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V25) -> ('un--substInClause'(V0, V1, V2, V4, V5, V25)) end, V8, []))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V46 = begin (V31 = ('un--groupCons'(V0, V1, V2, V3, V4, V5, V6, V15, V30))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V45 = begin (V39 = fun (V36) -> case V24 of {'Core.Case.CaseBuilder.Known', V37, V38} -> {'Prelude.Types.Right', V38}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CaseCompile', V5, V6, {'Core.Core.UnknownType'}}, V36)) end end), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V44 = ('un--caseGroups'(V22, V1, V2, V3, V4, V5, V6, V7, V21, V43, V35, V9))), V44 end(V40)) end end end end), V45 end(V32)) end end end end), V46 end(V27)) end end end end end end end end(E0, E1)) end.
'un--clauseType'(V0, V1) -> case V1 of {'Core.Case.CaseBuilder.MkPatClause', V2, V3, V4, V5} -> case V3 of {'Core.Case.CaseBuilder.::', V6, V7} -> case V6 of {'Core.Case.CaseBuilder.MkInfo', V8, V9, V10, V11} -> ('nested--13445-8529--in--un--getClauseType'(V8, V9, V11, V10, V7, V5, V4, V2, V0, V0, V10, V11)) end end end.
'un--checkGroupMatch'(V0, V1, V2) -> case V0 of {'Core.Case.CaseBuilder.CName', V3, V4} -> case V2 of {'Core.Case.CaseBuilder.ConGroup', V5, V6, V7, V8} -> case V8 of [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Core.Case.CaseBuilder.MkPatClause', V11, V12, V13, V14} -> case ('Idris.Idris2.Libraries.Data.LengthMatch':'un--checkLengthMatch'(V1, V5)) of {'Prelude.Types.Nothing'} -> {'Core.Case.CaseBuilder.NoMatch'}; {'Prelude.Types.Just', V15} -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V3, V6)) of {'Prelude.Types.Just', V16} -> case ((begin (V19 = fun (V17) -> fun (V18) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'())(V17))(V18)) end end), fun (V20) -> fun (V21) -> ((V19(V20))(V21)) end end end(V4))(V7)) of {'Prelude.Types.Yes', V22} -> {'Core.Case.CaseBuilder.ConMatch', V4, V15}; _ -> {'Core.Case.CaseBuilder.NoMatch'} end; _ -> {'Core.Case.CaseBuilder.NoMatch'} end end; _ -> {'Core.Case.CaseBuilder.NoMatch'} end end(E0, E1)); _ -> {'Core.Case.CaseBuilder.NoMatch'} end; _ -> {'Core.Case.CaseBuilder.NoMatch'} end; {'Core.Case.CaseBuilder.CDelay'} -> case V1 of [] -> case V2 of {'Core.Case.CaseBuilder.DelayGroup', V23, V24, V25} -> case V25 of [E2 | E3] -> (fun (V26, V27) -> case V26 of {'Core.Case.CaseBuilder.MkPatClause', V28, V29, V30, V31} -> {'Core.Case.CaseBuilder.DelayMatch'}; _ -> {'Core.Case.CaseBuilder.NoMatch'} end end(E2, E3)); _ -> {'Core.Case.CaseBuilder.NoMatch'} end; _ -> {'Core.Case.CaseBuilder.NoMatch'} end; _ -> {'Core.Case.CaseBuilder.NoMatch'} end; {'Core.Case.CaseBuilder.CConst', V32} -> case V1 of [] -> case V2 of {'Core.Case.CaseBuilder.ConstGroup', V33, V34} -> case V34 of [E4 | E5] -> (fun (V35, V36) -> case V35 of {'Core.Case.CaseBuilder.MkPatClause', V37, V38, V39, V40} -> case ('Idris.Idris2.Core.TT':'un--constantEq'(V32, V33)) of {'Prelude.Types.Nothing'} -> {'Core.Case.CaseBuilder.NoMatch'}; {'Prelude.Types.Just', V41} -> {'Core.Case.CaseBuilder.ConstMatch'} end; _ -> {'Core.Case.CaseBuilder.NoMatch'} end end(E4, E5)); _ -> {'Core.Case.CaseBuilder.NoMatch'} end; _ -> {'Core.Case.CaseBuilder.NoMatch'} end; _ -> {'Core.Case.CaseBuilder.NoMatch'} end; _ -> {'Core.Case.CaseBuilder.NoMatch'} end.
'un--caseGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V12 = ('nested--20855-15782--in--un--altGroups'(V0, V2, V8, V1, V11, V10, V9, V7, V6, V5, V4, V3, V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = fun (V17) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.Case', V0, V8, ('Idris.Idris2.Core.TT':'un--resolveNames'(V1, V9)), V16}} end), V18 end(V13)) end end end end.
'un--argToPat'(V0, V1) -> ('un--mkPat'(V0, [], V1, V1)).
'un--applyHeuristics'(V0, V1, V2, V3) -> case V3 of [] -> ('un--highScoreIdx'(V0, V1, V2)); [E0 | E1] -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('un--highScoreIdx'(V0, V1, V2)), fun () -> ('un--applyHeuristics'(V0, V1, (V4(V2)), V5)) end)) end(E0, E1)) end.
'un--++'(V0, V1) -> case V0 of {'Core.Case.CaseBuilder.Nil'} -> V1; {'Core.Case.CaseBuilder.::', V2, V3} -> {'Core.Case.CaseBuilder.::', V2, ('un--++'(V3, V1))} end.
