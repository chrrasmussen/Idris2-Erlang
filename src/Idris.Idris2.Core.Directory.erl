-module('Idris.Idris2.Core.Directory').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8644-6327--in--un--libDirs'/2,
  'nested--8248-5958--in--un--isPureCode'/1,
  'nested--8391-6090--in--un--getPkgDir'/3,
  'nested--9828-7398--in--un--findIpkgFile\x{27}'/3,
  'dn--un--show_Show_IdrSrcExt'/1,
  'dn--un--showPrec_Show_IdrSrcExt'/2,
  'dn--un--__Impl_Show_IdrSrcExt'/0,
  'dn--un--__Impl_Eq_IdrSrcExt'/0,
  'dn--un--==_Eq_IdrSrcExt'/2,
  'dn--un--/=_Eq_IdrSrcExt'/2,
  'un--ttcInstallDirectory'/2,
  'un--ttcBuildDirectory'/1,
  'un--toLocalFile'/1,
  'un--srcInstallDirectory'/2,
  'un--splitIdrisFileName'/1,
  'un--readDataFile'/2,
  'un--pkgLocalDirectory'/1,
  'un--pkgGlobalDirectory'/1,
  'un--nsToSource'/3,
  'un--nsToPath'/3,
  'un--mkdirAll'/2,
  'un--mbPathToNS'/3,
  'un--makeBuildDirectory'/2,
  'un--listOfExtensionsStr'/0,
  'un--listOfExtensions'/0,
  'un--libInstallDirectory'/2,
  'un--getTTCFileName'/3,
  'un--getPkgDirs'/1,
  'un--getObjFileName'/3,
  'un--getExecFileName'/2,
  'un--firstAvailable'/2,
  'un--findLibraryFile'/2,
  'un--findIpkgFile'/1,
  'un--findDataFile'/2,
  'un--extraSearchDirectories'/1,
  'un--ensureDirectoryExists'/1,
  'un--ctxtPathToNS'/2,
  'un--corePathToNS'/3,
  'un--cleanPath'/1
]).
'nested--8644-6327--in--un--libDirs'(V0, V1) -> (begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, <<"lib"/utf8>>)) end)).
'nested--8248-5958--in--un--isPureCode'(V0) -> case ('Idris.Idris2.Libraries.Utils.Path':'un--splitFileName'(V0)) of {'Builtin.MkPair', V1, V2} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V5, V6)) end end end end, fun (V7) -> fun (V8) -> {'Prelude.Types.Just', V8} end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V11, V12)) end end end end}, fun (V13) -> {'Prelude.Types.Nothing'} end, fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V15, V16)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, <<"idr"/utf8>>)))), fun (V17) -> {'Prelude.Types.Just', {'Builtin.MkPair', V1, <<".idr"/utf8>>}} end)) end.
'nested--8391-6090--in--un--getPkgDir'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, V2))), begin (V36 = fun (V7) -> begin (V35 = (('Idris.Idris2.Erlang.System.Directory':'un--dirExists'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, V6))(V7))), {'Prelude.Types.Right', V35} end end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V42 = case V40 of 1 -> fun (V41) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V6}} end; 0 -> ('nested--8391-6090--in--un--getPkgDir'(V0, V5, V2)) end), V42 end(V37)) end end end end end end(E0, E1)) end.
'nested--9828-7398--in--un--findIpkgFile\x{27}'(V0, V1, V2) -> begin (V30 = (('Idris.Idris2.Erlang.System.Directory':'un--listDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V0))(V2))), case V30 of {'Prelude.Types.Right', V31} -> case ('Idris.Idris2.Data.List':'un--find'(fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V35, V36)) end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--extension'(V32)), {'Prelude.Types.Just', (begin (V38 = fun (V37) -> V37 end), fun (V39) -> (V38(V39)) end end(<<"ipkg"/utf8>>))})) end, V31)) of {'Prelude.Types.Just', V40} -> {'Prelude.Types.Just', {'Builtin.MkPair', V0, {'Builtin.MkPair', V40, V1}}}; {'Prelude.Types.Nothing'} -> case ('Idris.Idris2.Libraries.Utils.Path':'un--splitParent'(V0)) of {'Prelude.Types.Just', V41} -> case V41 of {'Builtin.MkPair', V42, V43} -> ('nested--9828-7398--in--un--findIpkgFile\x{27}'(V42, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V43, V1)), V2)) end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'} end end; {'Prelude.Types.Left', V44} -> {'Prelude.Types.Nothing'} end end.
'dn--un--show_Show_IdrSrcExt'(V0) -> case V0 of 0 -> <<"idr"/utf8>>; 1 -> <<"lidr"/utf8>>; 2 -> <<"yaff"/utf8>>; 3 -> <<"org"/utf8>>; 4 -> <<"md"/utf8>> end.
'dn--un--showPrec_Show_IdrSrcExt'(V0, V1) -> ('dn--un--show_Show_IdrSrcExt'(V1)).
'dn--un--__Impl_Show_IdrSrcExt'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_IdrSrcExt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--show_Show_IdrSrcExt'(V2)) end end}.
'dn--un--__Impl_Eq_IdrSrcExt'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_IdrSrcExt'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_IdrSrcExt'(V2, V3)) end end}.
'dn--un--==_Eq_IdrSrcExt'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; 3 -> case V1 of 3 -> 1; _ -> 0 end; 4 -> case V1 of 4 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_IdrSrcExt'(V0, V1) -> case ('dn--un--==_Eq_IdrSrcExt'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--ttcInstallDirectory'(V0, V1) -> begin (V2 = ('un--libInstallDirectory'(V0, V1))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V8 = fun (V7) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V6, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Core.Binary':'un--ttcVersion'())))))} end), V8 end(V3)) end end end end.
'un--ttcBuildDirectory'(V0) -> begin (V1 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V17 = fun (V6) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V5 of {'Core.Options.MkDirs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16} -> V9 end, <<"ttc"/utf8>>)), ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Core.Binary':'un--ttcVersion'())))))} end), V17 end(V2)) end end end end.
'un--toLocalFile'(V0) -> case V0 of {'Core.Binary.LocalFile', V1} -> {'Prelude.Types.Just', V1}; {'Core.Binary.EscriptFile', V2} -> {'Prelude.Types.Nothing'} end.
'un--srcInstallDirectory'(V0, V1) -> ('un--libInstallDirectory'(V0, V1)).
'un--splitIdrisFileName'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('Idris.Idris2.Parser.Unlit':'un--hasLitFileExt'(V0)), fun () -> ('nested--8248-5958--in--un--isPureCode'(V0)) end)).
'un--readDataFile'(V0, V1) -> begin (V2 = ('un--findDataFile'(V0, V1))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V45 = begin (V36 = fun (V7) -> begin (V35 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, V6))(V7))), {'Prelude.Types.Right', V35} end end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V44 = fun (V41) -> case V40 of {'Prelude.Types.Right', V42} -> {'Prelude.Types.Right', V42}; {'Prelude.Types.Left', V43} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V6, V43}, V41)) end end), V44 end(V37)) end end end end), V45 end(V3)) end end end end.
'un--pkgLocalDirectory'(V0) -> begin (V1 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V56 = begin (V35 = fun (V6) -> begin (V34 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}))(V6))), {'Prelude.Types.Right', V34} end end), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V55 = fun (V40) -> case V39 of {'Prelude.Types.Just', V41} -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V41, case V5 of {'Core.Options.MkDirs', V42, V43, V44, V45, V46, V47, V48, V49, V50, V51} -> V45 end))}; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V53 = fun (V52) -> V52 end), fun (V54) -> (V53(V54)) end end(<<"Can\x{27}t get current directory"/utf8>>))}, V40)) end end), V55 end(V36)) end end end end), V56 end(V2)) end end end end.
'un--pkgGlobalDirectory'(V0) -> begin (V1 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V17 = fun (V6) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V5 of {'Core.Options.MkDirs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16} -> V12 end, <<<<"idris2-"/utf8>>/binary, ('Idris.Idris2.Libraries.Data.Version':'un--showVersion'(0, ('Idris.Idris2.Idris.Version':'un--version'())))/binary>>))} end), V17 end(V2)) end end end end.
'un--nsToSource'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V38 = begin (V8 = ('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V2))), begin (V20 = ('un--cleanPath'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V8 end, fun () -> fun (V9) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V9, V8)) end end, case V7 of {'Core.Options.MkDirs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19} -> V11 end))))), begin (V29 = ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> <<V20/binary, V21/binary>> end))(('un--listOfExtensionsStr'())))), begin (V30 = ('un--firstAvailable'(V0, V29))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V37 = fun (V35) -> case V34 of {'Prelude.Types.Just', V36} -> {'Prelude.Types.Right', V36}; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.ModuleNotFound', V1, V2}, V35)) end end), V37 end(V31)) end end end end end end end), V38 end(V4)) end end end end.
'un--nsToPath'(V0, V1, V2) -> begin (V3 = ('un--getPkgDirs'(V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V154 = begin (V8 = ('un--ttcBuildDirectory'(V0))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V153 = begin (V13 = ('un--extraSearchDirectories'(V0))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V152 = begin (V18 = ('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V2))), begin (V27 = ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> ('un--cleanPath'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V19, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V18, <<"ttc"/utf8>>)))))) end))([V12 | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V7, V17))]))), begin (V28 = ('un--firstAvailable'(V0, V27))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V151 = case V32 of {'Prelude.Types.Just', V33} -> fun (V34) -> {'Prelude.Types.Right', {'Prelude.Types.Right', {'Core.Binary.LocalFile', V33}}} end; {'Prelude.Types.Nothing'} -> begin (V35 = {'Prelude.Types.Left', {'Core.Core.ModuleNotFound', V1, V2}}), begin (V38 = fun (V36) -> begin (V37 = ('Idris.Idris2.Libraries.Utils.Escript':'un--getEscriptPath'(V36))), {'Prelude.Types.Right', V37} end end), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V150 = case V42 of {'Prelude.Types.Just', V43} -> begin (V46 = fun (V44) -> begin (V45 = ('Idris.Idris2.Libraries.Utils.Escript':'un--openArchive'(V43, V44))), {'Prelude.Types.Right', V45} end end), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V148 = case V50 of {'Prelude.Types.Just', V51} -> begin (V54 = fun (V52) -> begin (V53 = (('Idris.Idris2.Libraries.Utils.Escript':'un--listFiles'(V51))(V52))), {'Prelude.Types.Right', V53} end end), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V146 = case V58 of {'Prelude.Types.Just', V59} -> begin (V62 = fun (V60) -> begin (V61 = (('Idris.Idris2.Libraries.Utils.Escript':'un--closeArchive'(V51))(V60))), {'Prelude.Types.Right', V61} end end), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V144 = begin (V67 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V143 = begin (V109 = ((begin (V106 = fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V104, V105)) end end end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V98) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'((begin (V100 = fun (V99) -> V99 end), fun (V101) -> (V100(V101)) end end(<<"idris2/priv/libs"/utf8>>)), V98)), ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Core.Binary':'un--ttcVersion'()))))), ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V18, <<"ttc"/utf8>>)))) end))(case V71 of {'Core.Options.MkSessionOpts', V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97} -> V78 end))), fun (V110) -> case ('Idris.Idris2.Data.List':'un--find'(fun (V111) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V114, V115, V116)) end end end end end, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V119, V120, V121)) end end end end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V123)) end end, fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V127, V128, V129, V130)) end end end end end end end, fun (V131) -> fun (V132) -> V132 end end, fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V135, V136, V137)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V138, V139)) end end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V140, V141)) end end}, V111, V59)) end, V109)) of {'Prelude.Types.Just', V142} -> {'Prelude.Types.Right', {'Prelude.Types.Right', {'Core.Binary.EscriptFile', V142}}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', V35} end end end), V143 end(V68)) end end end end), V144 end(V63)) end end end end; {'Prelude.Types.Nothing'} -> fun (V145) -> {'Prelude.Types.Right', V35} end end), V146 end(V55)) end end end end; {'Prelude.Types.Nothing'} -> fun (V147) -> {'Prelude.Types.Right', V35} end end), V148 end(V47)) end end end end; {'Prelude.Types.Nothing'} -> fun (V149) -> {'Prelude.Types.Right', V35} end end), V150 end(V39)) end end end end end end), V151 end(V29)) end end end end end end), V152 end(V14)) end end end end), V153 end(V9)) end end end end), V154 end(V4)) end end end end.
'un--mkdirAll'(V0, V1) -> case ('Idris.Idris2.Libraries.Utils.Path':'dn--un--==_Eq_Path'(('Idris.Idris2.Libraries.Utils.Path':'un--parse'(V0)), ('Idris.Idris2.Libraries.Utils.Path':'un--emptyPath'()))) of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> begin (V29 = (('Idris.Idris2.Erlang.System.Directory':'un--dirExists'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> begin (V31 = case ('Idris.Idris2.Libraries.Utils.Path':'un--parent'(V0)) of {'Prelude.Types.Just', V30} -> ('un--mkdirAll'(V30, V1)); {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end), case V31 of {'Prelude.Types.Right', V32} -> (('Idris.Idris2.Erlang.System.Directory':'un--createDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), ((V51(V53))(V52)) end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V55(V56))), (V57(V56)) end end end end}, fun (V58) -> fun (V59) -> V59 end end}, V0))(V1)); _ -> V31 end end end end end.
'un--mbPathToNS'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<""/utf8>> end, V1))), begin (V4 = case ('Idris.Idris2.Libraries.Utils.Path':'un--isAbsolute'(V2)) of 1 -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V0, V3)); 0 -> V3 end), ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Libraries.Utils.Path':'un--splitPath'(('Idris.Idris2.Libraries.Utils.Path':'un--dropExtension'(V8)))))) end))(('Idris.Idris2.Prelude.Basics':'un--on'(fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Utils.Path':'un--dropBase'(V5, V6)) end end, fun (V7) -> ('un--cleanPath'(V7)) end, V4, V2)))) end end.
'un--makeBuildDirectory'(V0, V1) -> begin (V2 = ('un--ttcBuildDirectory'(V0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V20 = begin (V7 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ('Idris.Idris2.Data.List':'un--tail\x{27}'(('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V1))))))))), begin (V8 = ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V7))), begin (V11 = fun (V9) -> begin (V10 = ('un--mkdirAll'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V6, V8)), V9))), {'Prelude.Types.Right', V10} end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V19 = fun (V16) -> case V15 of {'Prelude.Types.Right', V17} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; {'Prelude.Types.Left', V18} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V6, V8)), V18}, V16)) end end), V19 end(V12)) end end end end end end), V20 end(V3)) end end end end.
'un--listOfExtensionsStr'() -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Parser.Unlit':'un--listOfExtensionsLiterate'()), [<<".yaff"/utf8>> | [<<".idr"/utf8>> | []]])).
'un--listOfExtensions'() -> [0 | [1 | [2 | [3 | [4 | []]]]]].
'un--libInstallDirectory'(V0, V1) -> begin (V2 = ('un--pkgGlobalDirectory'(V0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V8 = fun (V7) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V6, V1))} end), V8 end(V3)) end end end end.
'un--getTTCFileName'(V0, V1, V2) -> begin (V3 = ('un--ctxtPathToNS'(V0, V1))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V16 = begin (V8 = ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V7)), V2))), begin (V9 = ('un--ttcBuildDirectory'(V0))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V13, V8))} end), V15 end(V10)) end end end end end), V16 end(V4)) end end end end.
'un--getPkgDirs'(V0) -> begin (V1 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V57 = begin (V6 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V56 = begin (V48 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> ('nested--8391-6090--in--un--getPkgDir'(V0, case V5 of {'Core.Options.MkDirs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21} -> V19 end, V11)) end, case V10 of {'Core.Options.MkSessionOpts', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V28 end, []))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V55 = fun (V53) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V54) -> V54 end, V52))} end), V55 end(V49)) end end end end), V56 end(V7)) end end end end), V57 end(V2)) end end end end.
'un--getObjFileName'(V0, V1, V2) -> begin (V3 = ('un--ctxtPathToNS'(V0, V1))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V10 = begin (V8 = ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V7)), V2))), fun (V9) -> {'Prelude.Types.Right', V8} end end), V10 end(V4)) end end end end.
'un--getExecFileName'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V18 = fun (V7) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V6 of {'Core.Options.MkDirs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17} -> V10 end, V1))} end), V18 end(V3)) end end end end.
'un--firstAvailable'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import.file"/utf8>>, 30, fun () -> <<<<"Attempting to read "/utf8>>/binary, V3/binary>> end))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V83 = begin (V39 = fun (V10) -> begin (V38 = (('Idris.Idris2.Erlang.System.File':'un--openFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, V3, 0))(V10))), {'Prelude.Types.Right', V38} end end), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V82 = case V43 of {'Prelude.Types.Right', V44} -> begin (V74 = fun (V45) -> begin (V73 = (('Idris.Idris2.Erlang.System.File':'un--closeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> V52 end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), begin (V60 = (V57(V58))), (V59(V60)) end end end end end end end}, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), ((V64(V66))(V65)) end end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V68(V69))), (V70(V69)) end end end end}, fun (V71) -> fun (V72) -> V72 end end}, V44))(V45))), {'Prelude.Types.Right', V73} end end), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V80 = fun (V79) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V3}} end), V80 end(V75)) end end end end; {'Prelude.Types.Left', V81} -> ('un--firstAvailable'(V0, V4)) end), V82 end(V40)) end end end end), V83 end(V6)) end end end end end(E0, E1)) end.
'un--findLibraryFile'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V55 = begin (V7 = ('un--getPkgDirs'(V0))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V54 = begin (V12 = (('nested--8644-6327--in--un--libDirs'(V1, V0))(V11))), begin (V23 = (('nested--8644-6327--in--un--libDirs'(V1, V0))(case V6 of {'Core.Options.MkDirs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22} -> V19 end))), begin (V42 = ((begin (V39 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V37, V38)) end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V34) -> ('un--cleanPath'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V34, V1)))) end))(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V6 of {'Core.Options.MkDirs', V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V32 end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V12, V23))))))), begin (V43 = ('un--firstAvailable'(V0, V42))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V53 = fun (V48) -> case V47 of {'Prelude.Types.Just', V49} -> {'Prelude.Types.Right', V49}; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<(begin (V51 = fun (V50) -> V50 end), fun (V52) -> (V51(V52)) end end(<<"Can\x{27}t find library "/utf8>>))/binary, V1/binary>>}, V48)) end end), V53 end(V44)) end end end end end end end), V54 end(V8)) end end end end), V55 end(V3)) end end end end.
'un--findIpkgFile'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}))(V0))), case V28 of {'Prelude.Types.Just', V29} -> begin (V30 = ('nested--9828-7398--in--un--findIpkgFile\x{27}'(V29, <<""/utf8>>, V0))), V30 end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'} end end.
'un--findDataFile'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V43 = begin (V25 = ((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V17) -> ('un--cleanPath'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V17, V1)))) end))(case V6 of {'Core.Options.MkDirs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16} -> V16 end))), begin (V26 = ('un--firstAvailable'(V0, V25))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V42 = fun (V31) -> case V30 of {'Prelude.Types.Just', V32} -> {'Prelude.Types.Right', V32}; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<(begin (V34 = fun (V33) -> V33 end), fun (V35) -> (V34(V35)) end end(<<"Can\x{27}t find data file "/utf8>>))/binary, <<V1/binary, <<(begin (V37 = fun (V36) -> V36 end), fun (V38) -> (V37(V38)) end end(<<" in any of "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V39)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V40, V41)) end end}, V25))/binary>>/binary>>/binary>>}, V31)) end end), V42 end(V27)) end end end end end), V43 end(V3)) end end end end.
'un--extraSearchDirectories'(V0) -> begin (V1 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V35 = fun (V6) -> {'Prelude.Types.Right', ((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V27) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V27, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Core.Binary':'un--ttcVersion'()))))) end))(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V5 of {'Core.Options.MkDirs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16} -> V13 end, case V5 of {'Core.Options.MkDirs', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> V24 end))))} end), V35 end(V2)) end end end end.
'un--ensureDirectoryExists'(V0) -> begin (V3 = fun (V1) -> begin (V2 = ('un--mkdirAll'(V0, V1))), {'Prelude.Types.Right', V2} end end), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V11 = fun (V8) -> case V7 of {'Prelude.Types.Right', V9} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; {'Prelude.Types.Left', V10} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V0, V10}, V8)) end end), V11 end(V4)) end end end end.
'un--ctxtPathToNS'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V118 = begin (V64 = case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V44 of {'Core.Options.MkDirs', V54, V55, V56, V57, V58, V59, V60, V61, V62, V63} -> V54 end end end), begin (V117 = case V11 of {'Core.Context.MkDefs', V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96} -> case V69 of {'Core.Options.MkOptions', V97, V98, V99, V100, V101, V102, V103, V104, V105, V106} -> case V97 of {'Core.Options.MkDirs', V107, V108, V109, V110, V111, V112, V113, V114, V115, V116} -> V108 end end end), ('un--corePathToNS'(V64, V117, V1)) end end), V118 end(V8)) end end end end.
'un--corePathToNS'(V0, V1, V2) -> begin (V3 = {'Core.Core.UserError', <<<<"Source file "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V2))/binary, <<<<" is not in the source directory "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V0, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<""/utf8>> end, V1))))))/binary>>/binary>>/binary>>}), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V4) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V3, V4)) end end, fun () -> fun (V5) -> fun (V6) -> {'Prelude.Types.Right', V5} end end end, ('un--mbPathToNS'(V0, V1, V2)))) end.
'un--cleanPath'(V0) -> ('Idris.Idris2.Libraries.Utils.Path':'dn--un--show_Show_Path'(case ('Idris.Idris2.Libraries.Utils.Path':'un--parse'(V0)) of {'Libraries.Utils.Path.MkPath', V1, V2, V3, V4} -> {'Libraries.Utils.Path.MkPath', V1, V2, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V5) -> ('Idris.Idris2.Libraries.Utils.Path':'dn--un--/=_Eq_Body'(V5, {'Libraries.Utils.Path.CurDir'})) end, V3)), 0} end)).
