-module('Idris.Idris2.Core.Context').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--checkTimer-29487'/3,
  'case--addTransform-23406'/5,
  'case--case block in setExternal-22581'/8,
  'case--case block in setUniqueSearch-22423'/8,
  'case--aliasName-17913'/4,
  'case--case block in case block in getSimilarNames-16859'/7,
  'case--getSimilarNames-16768'/3,
  'case--commitCtxt-7576'/2,
  'case--lookupCtxtName\x{27}-7316'/4,
  'case--lookupCtxtExact-6603'/3,
  'case--returnDef-6408'/3,
  'case--addAlias-5807'/5,
  'case--addPossible-5729'/4,
  'nested--29294-24891--in--un--visible'/3,
  'nested--13780-10145--in--un--trimNSpat'/7,
  'nested--20725-17050--in--un--showNames'/8,
  'nested--13788-10204--in--un--restoreNSpat'/7,
  'nested--13411-9955--in--un--resolvedNamesPat'/7,
  'nested--10356-6922--in--un--resn'/4,
  'nested--20199-16555--in--un--resetElab'/2,
  'nested--30973-26537--in--un--resetCtxt'/2,
  'nested--25316-21245--in--un--notHidden'/6,
  'nested--33862-29304--in--un--nano'/0,
  'nested--10356-6924--in--un--lookupPossibles'/5,
  'nested--22055-18248--in--un--isHole'/3,
  'nested--25316-21246--in--un--isDefault'/5,
  'nested--14061-10446--in--un--insertAll'/4,
  'nested--14049-10406--in--un--insertAll'/4,
  'nested--10356-6923--in--un--hlookup'/5,
  'nested--32947-28426--in--un--go'/5,
  'nested--26091-21972--in--un--getPos'/7,
  'nested--28492-24131--in--un--getDir'/3,
  'nested--13403-9799--in--un--fullNamesPat'/7,
  'nested--21619-17845--in--un--findAlias'/3,
  'nested--34126-29568--in--un--drop'/5,
  'nested--25316-21247--in--un--direct'/5,
  'nested--11045-7538--in--un--commitStaged'/4,
  'nested--34126-29567--in--un--addMod'/6,
  'dn--un--trimNS_StripNamespace_GlobalDef'/2,
  'dn--un--trimNS_StripNamespace_Def'/2,
  'dn--un--show_Show_BuiltinType'/1,
  'dn--un--showPrec_Show_BuiltinType'/2,
  'dn--un--restoreNS_StripNamespace_GlobalDef'/2,
  'dn--un--restoreNS_StripNamespace_Def'/2,
  'dn--un--resolved_HasNames_Warning'/2,
  'dn--un--resolved_HasNames_UConstraint'/2,
  'dn--un--resolved_HasNames_Transform'/2,
  'dn--un--resolved_HasNames_Totality'/2,
  'dn--un--resolved_HasNames_Terminating'/2,
  'dn--un--resolved_HasNames_SCCall'/2,
  'dn--un--resolved_HasNames_Pat'/2,
  'dn--un--resolved_HasNames_PartialReason'/2,
  'dn--un--resolved_HasNames_Name'/3,
  'dn--un--resolved_HasNames_GlobalDef'/2,
  'dn--un--resolved_HasNames_Error'/2,
  'dn--un--resolved_HasNames_Def'/2,
  'dn--un--resolved_HasNames_Covering'/2,
  'dn--un--resolved_HasNames_Clause'/2,
  'dn--un--resolved_HasNames_CaseError'/2,
  'dn--un--resolved_HasNames_(Term $vars)'/2,
  'dn--un--resolved_HasNames_(NameMap $a)'/2,
  'dn--un--resolved_HasNames_(Maybe $a)'/3,
  'dn--un--resolved_HasNames_(CaseTree $vars)'/2,
  'dn--un--resolved_HasNames_(CaseAlt $vars)'/2,
  'dn--un--resolved_HasNames_((Env Term) $vars)'/2,
  'dn--un--full_HasNames_Warning'/2,
  'dn--un--full_HasNames_UConstraint'/2,
  'dn--un--full_HasNames_Transform'/2,
  'dn--un--full_HasNames_Totality'/2,
  'dn--un--full_HasNames_Terminating'/2,
  'dn--un--full_HasNames_SCCall'/2,
  'dn--un--full_HasNames_Pat'/2,
  'dn--un--full_HasNames_PartialReason'/2,
  'dn--un--full_HasNames_Name'/2,
  'dn--un--full_HasNames_GlobalDef'/2,
  'dn--un--full_HasNames_Error'/2,
  'dn--un--full_HasNames_Def'/2,
  'dn--un--full_HasNames_Covering'/2,
  'dn--un--full_HasNames_Clause'/2,
  'dn--un--full_HasNames_CaseError'/2,
  'dn--un--full_HasNames_(Term $vars)'/2,
  'dn--un--full_HasNames_(NameMap $a)'/2,
  'dn--un--full_HasNames_(Maybe $a)'/3,
  'dn--un--full_HasNames_(CaseTree $vars)'/2,
  'dn--un--full_HasNames_(CaseAlt $vars)'/2,
  'dn--un--full_HasNames_((Env Term) $vars)'/2,
  'dn--un--__Impl_StripNamespace_GlobalDef'/0,
  'dn--un--__Impl_StripNamespace_Def'/0,
  'dn--un--__Impl_Show_BuiltinType'/0,
  'dn--un--__Impl_HasNames_Warning'/0,
  'dn--un--__Impl_HasNames_UConstraint'/0,
  'dn--un--__Impl_HasNames_Transform'/0,
  'dn--un--__Impl_HasNames_Totality'/0,
  'dn--un--__Impl_HasNames_Terminating'/0,
  'dn--un--__Impl_HasNames_SCCall'/0,
  'dn--un--__Impl_HasNames_Pat'/0,
  'dn--un--__Impl_HasNames_PartialReason'/0,
  'dn--un--__Impl_HasNames_Name'/0,
  'dn--un--__Impl_HasNames_GlobalDef'/0,
  'dn--un--__Impl_HasNames_Error'/0,
  'dn--un--__Impl_HasNames_Def'/0,
  'dn--un--__Impl_HasNames_Covering'/0,
  'dn--un--__Impl_HasNames_Clause'/0,
  'dn--un--__Impl_HasNames_CaseError'/0,
  'dn--un--__Impl_HasNames_(Term $vars)'/0,
  'dn--un--__Impl_HasNames_(Maybe $a)'/1,
  'dn--un--__Impl_HasNames_(CaseTree $vars)'/0,
  'dn--un--__Impl_HasNames_(CaseAlt $vars)'/0,
  'dn--un--__Impl_HasNames_((Env Term) $vars)'/0,
  'un--withLogLevel'/3,
  'un--withExtendedNS'/3,
  'un--withCtxt'/2,
  'un--visibleInAny'/3,
  'un--visibleIn'/3,
  'un--updateTy'/3,
  'un--updateSession'/2,
  'un--updateDef'/3,
  'un--unsetFlag'/4,
  'un--unhideName'/2,
  'un--unhide'/3,
  'un--undefinedName'/3,
  'un--toResolvedNames'/3,
  'un--toFullNames'/3,
  'un--startTimer'/3,
  'un--sndName'/1,
  'un--showSimilarNames'/4,
  'un--setWorkingDir'/2,
  'un--setVisible'/2,
  'un--setVisibility'/4,
  'un--setUniqueSearch'/4,
  'un--setUnboundImplicits'/2,
  'un--setTotality'/4,
  'un--setTerminating'/4,
  'un--setSourceDir'/2,
  'un--setSizeChange'/4,
  'un--setSession'/2,
  'un--setSearchTimeout'/2,
  'un--setRewrite'/4,
  'un--setPrefixRecordProjections'/2,
  'un--setPrefix'/2,
  'un--setPair'/5,
  'un--setPackageDirs'/2,
  'un--setPPrint'/2,
  'un--setOutputDir'/2,
  'un--setOpenHints'/2,
  'un--setNextEntry'/2,
  'un--setNestedNS'/2,
  'un--setNameFlag'/4,
  'un--setNS'/2,
  'un--setNFThreshold'/2,
  'un--setMutWith'/4,
  'un--setLogTimings'/2,
  'un--setLinearCheck'/3,
  'un--setIncData'/3,
  'un--setFromString'/2,
  'un--setFromInteger'/2,
  'un--setFromDouble'/2,
  'un--setFromChar'/2,
  'un--setFlag'/4,
  'un--setExtraDirs'/2,
  'un--setExternal'/4,
  'un--setExtension'/2,
  'un--setDetermining'/4,
  'un--setDetags'/4,
  'un--setDependsDir'/2,
  'un--setDefaultTotalityOption'/2,
  'un--setDebugElabCheck'/2,
  'un--setCtxt'/2,
  'un--setCovering'/4,
  'un--setCompiled'/3,
  'un--setCG'/2,
  'un--setBuildDir'/2,
  'un--setAutoImplicitLimit'/2,
  'un--setAmbigLimit'/2,
  'un--setAllPublic'/2,
  'un--returnDef'/3,
  'un--resolved'/3,
  'un--resolveName'/2,
  'un--resetFirstEntry'/1,
  'un--reducibleInAny'/3,
  'un--reducibleIn'/3,
  'un--recordWarning'/2,
  'un--prettyName'/2,
  'un--noDeclaration'/3,
  'un--newEntry'/2,
  'un--newDef'/7,
  'un--newAlias'/3,
  'un--namesResolvedAs'/1,
  'un--maybeMisspelling'/3,
  'un--lookupTyName'/2,
  'un--lookupTyExact'/2,
  'un--lookupNameBy'/3,
  'un--lookupHiddenCtxtName'/2,
  'un--lookupExactBy'/3,
  'un--lookupDefTyExact'/2,
  'un--lookupDefName'/2,
  'un--lookupDefExact'/2,
  'un--lookupCtxtName\x{27}'/3,
  'un--lookupCtxtName'/2,
  'un--lookupCtxtExactI'/2,
  'un--lookupCtxtExact'/2,
  'un--lookupContextEntry'/2,
  'un--lazyActive'/2,
  'un--isVisible'/2,
  'un--isUnboundImplicits'/1,
  'un--isPrimName'/2,
  'un--isPrefixRecordProjections'/1,
  'un--isPairType'/2,
  'un--isLazyActive'/1,
  'un--isHidden'/2,
  'un--isExtension'/2,
  'un--isEqualTy'/2,
  'un--isAllPublic'/1,
  'un--initSize'/0,
  'un--initHash'/1,
  'un--initDefs'/0,
  'un--initCtxtS'/1,
  'un--initCtxt'/0,
  'un--inCurrentNS'/2,
  'un--hideName'/2,
  'un--hide'/3,
  'un--hasFlag'/4,
  'un--getWorkingDir'/0,
  'un--getVisible'/1,
  'un--getVisibility'/3,
  'un--getUserHoles'/1,
  'un--getTotality'/3,
  'un--getTime'/0,
  'un--getSizeChange'/3,
  'un--getSimilarNames'/2,
  'un--getSession'/1,
  'un--getSearchData'/4,
  'un--getRewrite'/1,
  'un--getResolvedAs'/1,
  'un--getPrimitiveNames'/1,
  'un--getPrimNames'/1,
  'un--getPosition'/2,
  'un--getPPrint'/1,
  'un--getNextTypeTag'/1,
  'un--getNextEntry'/1,
  'un--getNestedNS'/1,
  'un--getNameID'/2,
  'un--getNS'/1,
  'un--getImported'/1,
  'un--getFullName'/2,
  'un--getFnName'/1,
  'un--getFieldNames'/2,
  'un--getDirs'/1,
  'un--getDirectives'/2,
  'un--getDefaultTotalityOption'/1,
  'un--getContent'/1,
  'un--getAutoImplicitLimit'/1,
  'un--getAmbigLimit'/1,
  'un--full'/3,
  'un--fstName'/1,
  'un--fromStringName'/1,
  'un--fromIntegerName'/1,
  'un--fromDoubleName'/1,
  'un--fromCharName'/1,
  'un--extendNS'/2,
  'un--dumpStaging'/1,
  'un--dropOpenHint'/2,
  'un--dropMutData'/2,
  'un--depth'/1,
  'un--decode'/4,
  'un--commitCtxt'/1,
  'un--commit'/1,
  'un--clearUserHole'/2,
  'un--clearTimer'/1,
  'un--clearSavedHints'/1,
  'un--clearDefs'/2,
  'un--clearCtxt'/1,
  'un--checkUnambig'/3,
  'un--checkTimer'/1,
  'un--canonicalName'/3,
  'un--branchCtxt'/2,
  'un--branch'/1,
  'un--ambiguousName'/4,
  'un--allNames'/1,
  'un--aliasName'/2,
  'un--addUserHole'/3,
  'un--addTransform'/3,
  'un--addToSave'/2,
  'un--addPossible'/3,
  'un--addPkg'/2,
  'un--addPackageDir'/2,
  'un--addOpenHint'/2,
  'un--addNameDirective'/4,
  'un--addName'/2,
  'un--addMutData'/2,
  'un--addLogLevel'/2,
  'un--addLocalHint'/2,
  'un--addLibDir'/2,
  'un--addImportedInc'/3,
  'un--addImported'/2,
  'un--addHintFor'/6,
  'un--addHashWithNames'/4,
  'un--addHash'/3,
  'un--addGlobalHint'/3,
  'un--addExtraDir'/2,
  'un--addEntry'/3,
  'un--addDirective'/3,
  'un--addDef'/3,
  'un--addDataDir'/2,
  'un--addCtxt'/3,
  'un--addContextEntry'/4,
  'un--addContextAlias'/3,
  'un--addBuiltin'/6,
  'un--addAlias'/4,
  'un--Grow'/0
]).
'case--checkTimer-29487'(V0, V1, V2) -> case V2 of {'Prelude.Types.Just', V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V6 = ('un--getTime'())), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V10, V4)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.Timeout', V5}, V11)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V12 end(V7)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V13) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'case--addTransform-23406'(V0, V1, V2, V3, V4) -> case V4 of {'Prelude.Types.Just', V5} -> begin (V11 = ('un--toResolvedNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V6) -> fun (V7) -> ('dn--un--full_HasNames_Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames_Name'(V8, V9, V10)) end end end}, V5))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V154 = begin (V20 = ('un--toResolvedNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V16) -> fun (V17) -> ('dn--un--full_HasNames_Transform'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('dn--un--resolved_HasNames_Transform'(V18, V19)) end end}, V0))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V153 = begin (V30 = ('un--toFullNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V25) -> fun (V26) -> ('dn--un--full_HasNames_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--resolved_HasNames_Name'(V27, V28, V29)) end end end}, V5))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V152 = begin (V39 = ('un--toFullNames'(V2, {'Core.Context.dn--un--__mkHasNames', fun (V35) -> fun (V36) -> ('dn--un--full_HasNames_Transform'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('dn--un--resolved_HasNames_Transform'(V37, V38)) end end}, V0))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V151 = case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V15, case V3 of {'Core.Context.MkDefs', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75} -> V57 end)) of {'Prelude.Types.Nothing'} -> begin (V76 = V2), fun (V77) -> begin (V112 = (begin (V78 = V76), fun (V79) -> ('erlang':'put'(V78, case V3 of {'Core.Context.MkDefs', V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111} -> {'Core.Context.MkDefs', V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V15, [V24 | []], V93)), [{'Builtin.MkPair', V34, V43} | V94], V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111} end)) end end(V77))), {'Prelude.Types.Right', V112} end end end; {'Prelude.Types.Just', V113} -> begin (V114 = V2), fun (V115) -> begin (V150 = (begin (V116 = V114), fun (V117) -> ('erlang':'put'(V116, case V3 of {'Core.Context.MkDefs', V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149} -> {'Core.Context.MkDefs', V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V15, [V24 | V113], V131)), [{'Builtin.MkPair', V34, V43} | V132], V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149} end)) end end(V115))), {'Prelude.Types.Right', V150} end end end end), V151 end(V40)) end end end end), V152 end(V31)) end end end end), V153 end(V21)) end end end end), V154 end(V12)) end end end end; {'Prelude.Types.Nothing'} -> fun (V155) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<"LHS of a transformation must be a function application"/utf8>>}, V155)) end end.
'case--case block in setExternal-22581'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.Context.Context.TCon', V8, V9, V10, V11, V12, V13, V14, V15} -> begin (V18 = case V12 of {'Core.Context.Context.MkTypeFlags', V16, V17} -> {'Core.Context.Context.MkTypeFlags', V16, V0} end), ('un--updateDef'(V3, V1, fun (V19) -> {'Prelude.Types.Just', {'Core.Context.Context.TCon', V8, V9, V10, V11, V18, V13, V14, V15}} end)) end; _ -> fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Core.Context.Context.MkGlobalDef', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> V22 end))/binary, <<" is not a type constructor [setDetermining]"/utf8>>/binary>>}, V20)) end end.
'case--case block in setUniqueSearch-22423'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.Context.Context.TCon', V8, V9, V10, V11, V12, V13, V14, V15} -> begin (V18 = case V12 of {'Core.Context.Context.MkTypeFlags', V16, V17} -> {'Core.Context.Context.MkTypeFlags', V0, V17} end), ('un--updateDef'(V3, V1, fun (V19) -> {'Prelude.Types.Just', {'Core.Context.Context.TCon', V8, V9, V10, V11, V18, V13, V14, V15}} end)) end; _ -> fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Core.Context.Context.MkGlobalDef', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> V22 end))/binary, <<" is not a type constructor [setDetermining]"/utf8>>/binary>>}, V20)) end end.
'case--aliasName-17913'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Just', V4} -> case ('Idris.Idris2.Libraries.Data.UserNameMap':'un--lookup'(V4, case V2 of {'Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} -> case V5 of {'Core.Context.Context.MkContext', V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} -> V40 end end)) of {'Prelude.Types.Just', V49} -> ('nested--21619-17845--in--un--findAlias'(V0, V1, V49)); {'Prelude.Types.Nothing'} -> fun (V50) -> {'Prelude.Types.Right', V0} end end; {'Prelude.Types.Nothing'} -> fun (V51) -> {'Prelude.Types.Right', V0} end end.
'case--case block in case block in getSimilarNames-16859'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Prelude.Types.Just', V7} -> begin (V37 = fun (V8) -> begin (V36 = (('Idris.Idris2.Libraries.Text.Distance.Levenshtein':'un--compute'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V2, V7))(V8))), {'Prelude.Types.Right', V36} end end), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V105 = case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V41, V4)) of 1 -> begin (V74 = ('un--lookupCtxtExact'(V5, case V3 of {'Core.Context.MkDefs', V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> V42 end))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V103 = fun (V79) -> case V78 of {'Prelude.Types.Just', V80} -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', case V80 of {'Core.Context.Context.MkGlobalDef', V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} -> V90 end, V41}}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V103 end(V75)) end end end end; 0 -> fun (V104) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V105 end(V38)) end end end end; _ -> fun (V106) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'case--getSimilarNames-16768'(V0, V1, V2) -> case V2 of {'Prelude.Types.Nothing'} -> fun (V3) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V4} -> case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), 1)) of 1 -> fun (V5) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V4, []}}} end; 0 -> begin (V11 = begin (V6 = V1), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V95 = begin (V16 = ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(1, ('Idris.Idris2.Data.Nat':'un--divNat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), 3))))), begin (V26 = fun (V17) -> ('case--case block in case block in getSimilarNames-16859'(V0, V1, V4, V15, V16, V17, ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_UserName'(V18)) end))(('Idris.Idris2.Core.Name':'un--userNameRoot'(V17)))))) end), begin (V88 = ('Idris.Idris2.Libraries.Data.NameMap':'un--mapMaybeM'({'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Core.Functor':'dn--un--map_Functor_CORECore'(V29, V30)) end end end end, fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Core.Applicative':'dn--un--pure_Applicative_CORECore'(V32, V33)) end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Core.Applicative':'dn--un--<*>_Applicative_CORECore'(V36, V37)) end end end end}, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Core.Monad':'dn--un-->>=_Monad_CORECore'(V40, V41)) end end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Core.Monad':'dn--un--join_Monad_CORECore'(V43)) end end}, V26, case V15 of {'Core.Context.MkDefs', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75} -> case V44 of {'Core.Context.Context.MkContext', V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} -> V78 end end))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V94 = fun (V93) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V4, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V92))}}} end), V94 end(V89)) end end end end end end), V95 end(V12)) end end end end end end.
'case--commitCtxt-7576'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Prelude.Types.Right', V0} end; _ -> begin (V3 = (V1 - 1)), case V3 of 0 -> begin (V16 = case V0 of {'Core.Context.Context.MkContext', V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15} -> V8 end), begin (V22 = begin (V17 = V16), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'get'(V19)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V60 = begin (V41 = fun (V27) -> begin (V40 = ('nested--11045-7538--in--un--commitStaged'(V0, ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V0 of {'Core.Context.Context.MkContext', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> V34 end)), V26, V27))), {'Prelude.Types.Right', V40} end end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V59 = fun (V46) -> {'Prelude.Types.Right', case V0 of {'Core.Context.Context.MkContext', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58} -> {'Core.Context.Context.MkContext', V47, V48, V49, V50, V51, 0, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), V54, V55, V56, V57, V58} end} end), V59 end(V42)) end end end end), V60 end(V23)) end end end end end; _ -> fun (V61) -> {'Prelude.Types.Right', case V0 of {'Core.Context.Context.MkContext', V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> {'Core.Context.Context.MkContext', V62, V63, V64, V65, V66, V3, V68, V69, V70, V71, V72, V73} end} end end end end.
'case--lookupCtxtName\x{27}-7316'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Nothing'} -> begin (V4 = ('un--lookupCtxtExactI'(V1, V0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V13 = fun (V9) -> case V8 of {'Prelude.Types.Just', V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> {'Prelude.Types.Right', [{'Builtin.MkPair', V1, {'Builtin.MkPair', V11, V12}} | []]} end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', []} end end), V13 end(V5)) end end end end; {'Prelude.Types.Just', V14} -> case ('Idris.Idris2.Libraries.Data.UserNameMap':'un--lookup'(V14, case V0 of {'Core.Context.Context.MkContext', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> V18 end)) of {'Prelude.Types.Just', V27} -> ('nested--10356-6924--in--un--lookupPossibles'(V0, V1, V2, [], V27)); {'Prelude.Types.Nothing'} -> fun (V28) -> {'Prelude.Types.Right', []} end end end.
'case--lookupCtxtExact-6603'(V0, V1, V2) -> case V2 of {'Prelude.Types.Just', V3} -> begin (V4 = ('un--decode'(V1, V0, 1, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V32 = fun (V9) -> {'Prelude.Types.Right', ((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V22) -> case V22 of {'Builtin.MkPair', V23, V24} -> V24 end end))(('un--returnDef'(case V1 of {'Core.Context.Context.MkContext', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21} -> V19 end, V0, V8))))} end), V32 end(V5)) end end end end; {'Prelude.Types.Nothing'} -> begin (V50 = begin (V45 = case V1 of {'Core.Context.Context.MkContext', V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V37 end), fun (V46) -> begin (V49 = (begin (V47 = V45), fun (V48) -> ('erlang':'get'(V47)) end end(V46))), {'Prelude.Types.Right', V49} end end end), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V121 = begin (V84 = fun (V55) -> begin (V83 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> V62 end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), begin (V70 = (V67(V68))), (V69(V70)) end end end end end end end}, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), ((V74(V76))(V75)) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V78(V79))), (V80(V79)) end end end end}, fun (V81) -> fun (V82) -> V82 end end}, V54, V0))(V55))), {'Prelude.Types.Right', V83} end end), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V120 = case V88 of {'Prelude.Types.Just', V89} -> begin (V90 = ('un--decode'(V1, V0, 1, V89))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V118 = fun (V95) -> {'Prelude.Types.Right', ((begin (V115 = fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V113, V114)) end end end end), fun (V116) -> fun (V117) -> ((((V115('erased'))('erased'))(V116))(V117)) end end end(fun (V108) -> case V108 of {'Builtin.MkPair', V109, V110} -> V110 end end))(('un--returnDef'(case V1 of {'Core.Context.Context.MkContext', V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107} -> V105 end, V0, V94))))} end), V118 end(V91)) end end end end; {'Prelude.Types.Nothing'} -> fun (V119) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V120 end(V85)) end end end end), V121 end(V51)) end end end end end.
'case--returnDef-6408'(V0, V1, V2) -> case V2 of {'Core.Context.Context.PMDef', V3, V4, V5, V6, V7} -> case case V3 of {'Core.Context.Context.MkPMDefInfo', V8, V9, V10} -> V9 end of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V1, V0}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'case--addAlias-5807'(V0, V1, V2, V3, V4) -> case V4 of {'Prelude.Types.Nothing'} -> V0; {'Prelude.Types.Just', V5} -> case ('Idris.Idris2.Libraries.Data.UserNameMap':'un--lookup'(V5, V0)) of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Libraries.Data.UserNameMap':'un--insert'(V5, [{'Core.Context.Context.Alias', V3, V2, V1} | []], V0)); {'Prelude.Types.Just', V6} -> ('Idris.Idris2.Libraries.Data.UserNameMap':'un--insert'(V5, [{'Core.Context.Context.Alias', V3, V2, V1} | V6], V0)) end end.
'case--addPossible-5729'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Nothing'} -> V0; {'Prelude.Types.Just', V4} -> case ('Idris.Idris2.Libraries.Data.UserNameMap':'un--lookup'(V4, V0)) of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Libraries.Data.UserNameMap':'un--insert'(V4, [{'Core.Context.Context.Direct', V2, V1} | []], V0)); {'Prelude.Types.Just', V5} -> ('Idris.Idris2.Libraries.Data.UserNameMap':'un--insert'(V4, [{'Core.Context.Context.Direct', V2, V1} | V5], V0)) end end.
'nested--29294-24891--in--un--visible'(V0, V1, V2) -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V2, V0)).
'nested--13780-10145--in--un--trimNSpat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.DPair.MkDPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> {'Builtin.DPair.MkDPair', V7, {'Builtin.MkPair', V9, {'Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--trimNS_StripNamespace_(Term $vars)'(V5, V11)), ('Idris.Idris2.Core.TT':'dn--un--trimNS_StripNamespace_(Term $vars)'(V5, V12))}}} end end end.
'nested--20725-17050--in--un--showNames'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V14 = case V6 of 1 -> (begin (V9 = fun (V8) -> V8 end), fun (V10) -> (V9(V10)) end end(<<" (not exported)"/utf8>>)); 0 -> (begin (V12 = fun (V11) -> V11 end), fun (V13) -> (V12(V13)) end end(<<""/utf8>>)) end), begin (V15 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V7))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V5, V15)) of 1 -> begin (V16 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V7))))), case case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V5, V16)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)), V16)) end of 1 -> case V6 of 1 -> 0; 0 -> 1 end; 0 -> 0 end of 1 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', <<V16/binary, V14/binary>>} end end; _ -> {'Prelude.Types.Just', <<V15/binary, V14/binary>>} end end end.
'nested--13788-10204--in--un--restoreNSpat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.DPair.MkDPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> {'Builtin.DPair.MkDPair', V7, {'Builtin.MkPair', V9, {'Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--restoreNS_StripNamespace_(Term $vars)'(V5, V11)), ('Idris.Idris2.Core.TT':'dn--un--restoreNS_StripNamespace_(Term $vars)'(V5, V12))}}} end end end.
'nested--13411-9955--in--un--resolvedNamesPat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.DPair.MkDPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> begin (V13 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V5, V9))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V31 = begin (V18 = ('dn--un--resolved_HasNames_(Term $vars)'(V5, V11))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V30 = begin (V23 = ('dn--un--resolved_HasNames_(Term $vars)'(V5, V12))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V29 = fun (V28) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V7, {'Builtin.MkPair', V17, {'Builtin.MkPair', V22, V27}}}} end), V29 end(V24)) end end end end), V30 end(V19)) end end end end), V31 end(V14)) end end end end end end end.
'nested--10356-6922--in--un--resn'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> V6 end end.
'nested--20199-16555--in--un--resetElab'(V0, V1) -> begin (V38 = case V1 of {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11} -> case V4 of {'Core.Options.MkSessionOpts', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} -> V13 end end), case V1 of {'Core.Options.MkOptions', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} -> {'Core.Options.MkOptions', V39, V40, V41, case ('Idris.Idris2.Core.Options':'un--defaultElab'()) of {'Core.Options.MkElabDirectives', V49, V50, V51, V52, V53, V54, V55} -> {'Core.Options.MkElabDirectives', V49, V50, V38, V52, V53, V54, V55} end, V43, V44, V45, V46, V47, V48} end end.
'nested--30973-26537--in--un--resetCtxt'(V0, V1) -> begin (V54 = case V1 of {'Core.Context.MkDefs', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> case V6 of {'Core.Options.MkOptions', V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V34 of {'Core.Options.MkDirs', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> V44 end end end), begin (V84 = fun (V55) -> begin (V83 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> V62 end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), begin (V70 = (V67(V68))), (V69(V70)) end end end end end end end}, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), ((V74(V76))(V75)) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V78(V79))), (V80(V79)) end end end end}, fun (V81) -> fun (V82) -> V82 end end}, V54))(V55))), {'Prelude.Types.Right', V83} end end), ((begin (V100 = fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V97, V98, V99)) end end end end end), fun (V101) -> fun (V102) -> ((((V100('erased'))('erased'))(V101))(V102)) end end end((begin (V92 = fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> {'Prelude.Types.Right', (V88(V91))} end end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end(fun (V85) -> {'Builtin.MkUnit'} end))))(V84)) end end.
'nested--25316-21245--in--un--notHidden'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> begin (V13 = ('un--toFullNames'(V3, {'Core.Context.dn--un--__mkHasNames', fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V6))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = fun (V18) -> {'Prelude.Types.Right', case ('un--isHidden'(V17, V5)) of 1 -> 0; 0 -> 1 end} end), V19 end(V14)) end end end end end.
'nested--33862-29304--in--un--nano'() -> 1000000000.
'nested--10356-6924--in--un--lookupPossibles'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V3))} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Core.Context.Context.Direct', V8, V9} -> case ('nested--10356-6923--in--un--hlookup'(V0, V1, V2, V8, case V0 of {'Core.Context.Context.MkContext', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21} -> V20 end)) of {'Prelude.Types.Nothing'} -> begin (V22 = ('un--lookupCtxtExact'({'Core.Name.Resolved', V9}, V0))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V66 = case V26 of {'Prelude.Types.Just', V27} -> case case ('Idris.Idris2.Core.Name':'un--matches'(V1, V8)) of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V39)) end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V43, V44, V45, V46)) end end end end end end end, fun (V47) -> fun (V48) -> V48 end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V51, V52, V53)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V56, V57)) end end}, V9, ((begin (V63 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V61, V62)) end end end end), fun (V64) -> fun (V65) -> ((((V63('erased'))('erased'))(V64))(V65)) end end end(fun (V58) -> ('nested--10356-6922--in--un--resn'(V0, V1, V2, V58)) end))(V3)))) of 1 -> 0; 0 -> 1 end; 0 -> 0 end of 1 -> ('nested--10356-6924--in--un--lookupPossibles'(V0, V1, V2, [{'Builtin.MkPair', V8, {'Builtin.MkPair', V9, V27}} | V3], V7)); 0 -> ('nested--10356-6924--in--un--lookupPossibles'(V0, V1, V2, V3, V7)) end; {'Prelude.Types.Nothing'} -> ('nested--10356-6924--in--un--lookupPossibles'(V0, V1, V2, V3, V7)) end), V66 end(V23)) end end end end; _ -> ('nested--10356-6924--in--un--lookupPossibles'(V0, V1, V2, V3, V7)) end; {'Core.Context.Context.Alias', V67, V68, V69} -> case ('nested--10356-6923--in--un--hlookup'(V0, V1, V2, V68, case V0 of {'Core.Context.Context.MkContext', V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81} -> V80 end)) of {'Prelude.Types.Nothing'} -> begin (V82 = ('un--lookupCtxtExact'({'Core.Name.Resolved', V69}, V0))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V126 = case V86 of {'Prelude.Types.Just', V87} -> case case ('Idris.Idris2.Core.Name':'un--matches'(V1, V67)) of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V90, V91, V92)) end end end end end, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V95, V96, V97)) end end end end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V99)) end end, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V103, V104, V105, V106)) end end end end end end end, fun (V107) -> fun (V108) -> V108 end end, fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V111, V112, V113)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V116, V117)) end end}, V69, ((begin (V123 = fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V121, V122)) end end end end), fun (V124) -> fun (V125) -> ((((V123('erased'))('erased'))(V124))(V125)) end end end(fun (V118) -> ('nested--10356-6922--in--un--resn'(V0, V1, V2, V118)) end))(V3)))) of 1 -> 0; 0 -> 1 end; 0 -> 0 end of 1 -> ('nested--10356-6924--in--un--lookupPossibles'(V0, V1, V2, [{'Builtin.MkPair', V68, {'Builtin.MkPair', V69, V87}} | V3], V7)); 0 -> ('nested--10356-6924--in--un--lookupPossibles'(V0, V1, V2, V3, V7)) end; {'Prelude.Types.Nothing'} -> ('nested--10356-6924--in--un--lookupPossibles'(V0, V1, V2, V3, V7)) end), V126 end(V83)) end end end end; _ -> ('nested--10356-6924--in--un--lookupPossibles'(V0, V1, V2, V3, V7)) end end end(E0, E1)) end.
'nested--22055-18248--in--un--isHole'(V0, V1, V2) -> begin (V35 = ('un--lookupCtxtExact'(V2, case V1 of {'Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} -> V3 end))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V66 = fun (V40) -> case V39 of {'Prelude.Types.Just', V41} -> {'Prelude.Types.Right', case V41 of {'Core.Context.Context.MkGlobalDef', V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63} -> case V59 of {'Core.Context.Context.None'} -> 1; {'Core.Context.Context.Hole', V64, V65} -> 1; _ -> 0 end end}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', 1} end end), V66 end(V36)) end end end end.
'nested--25316-21246--in--un--isDefault'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Builtin':'un--snd'(V4)).
'nested--14061-10446--in--un--insertAll'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Prelude.Types.Right', V2} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Builtin.MkPair', V7, V8} -> begin (V10 = fun (V9) -> ('dn--un--resolved_HasNames_Name'(V1, V7, V9)) end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V15 = ('nested--14061-10446--in--un--insertAll'(V0, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V14, V8, V2)), V6))), V15 end(V11)) end end end end end end(E0, E1)) end.
'nested--14049-10406--in--un--insertAll'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Prelude.Types.Right', V2} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Builtin.MkPair', V7, V8} -> begin (V9 = ('dn--un--full_HasNames_Name'(V1, V7))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V14 = ('nested--14049-10406--in--un--insertAll'(V0, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V13, V8, V2)), V6))), V14 end(V10)) end end end end end end(E0, E1)) end.
'nested--10356-6923--in--un--hlookup'(V0, V1, V2, V3, V4) -> case V2 of 1 -> {'Prelude.Types.Nothing'}; 0 -> ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V3, V4)) end.
'nested--32947-28426--in--un--go'(V0, V1, V2, V3, V4) -> case V4 of [] -> 0; [E0 | E1] -> (fun (V5, V6) -> case ('Idris.Idris2.Core.Name':'un--splitNS'(V5)) of {'Builtin.MkPair', V7, V8} -> case case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V8, V3)) of 1 -> ('Idris.Idris2.Core.Name.Namespace':'un--isApproximationOf'(V7, V2)); 0 -> 0 end of 1 -> 1; 0 -> ('nested--32947-28426--in--un--go'(V0, V1, V2, V3, V6)) end end end(E0, E1)) end.
'nested--26091-21972--in--un--getPos'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.TT.Bind', V7, V8, V9, V10} -> case V9 of {'Core.TT.Pi', V11, V12, V13, V14} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V30, V31, V32, V33)) end end end end end end end, fun (V34) -> fun (V35) -> V35 end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V38, V39, V40)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V43, V44)) end end}, V8, V5)) of 1 -> begin (V46 = ('nested--26091-21972--in--un--getPos'(V0, V1, V2, V3, (V4 + 1), ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V45, V8)) end, V5)), V10))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V52 = fun (V51) -> {'Prelude.Types.Right', [V4 | V50]} end), V52 end(V47)) end end end end; 0 -> ('nested--26091-21972--in--un--getPos'(V0, V1, V2, V3, (V4 + 1), V5, V10)) end; _ -> fun (V53) -> case V5 of [] -> {'Prelude.Types.Right', []}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"Unknown determining arguments: "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V59 = fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V57, V58)) end end end end), fun (V60) -> fun (V61) -> ((((V59('erased'))('erased'))(V60))(V61)) end end end(fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V54)) end))(V5))))/binary>>}, V53)) end end end; _ -> fun (V62) -> case V5 of [] -> {'Prelude.Types.Right', []}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"Unknown determining arguments: "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V68 = fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V66, V67)) end end end end), fun (V69) -> fun (V70) -> ((((V68('erased'))('erased'))(V69))(V70)) end end end(fun (V63) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V63)) end))(V5))))/binary>>}, V62)) end end end.
'nested--28492-24131--in--un--getDir'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> case ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V0, V5)) of 1 -> {'Prelude.Types.Just', {'Builtin.MkPair', V3, V6}}; 0 -> {'Prelude.Types.Nothing'} end end end.
'nested--13403-9799--in--un--fullNamesPat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.DPair.MkDPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> begin (V13 = ('dn--un--full_HasNames_((Env Term) $vars)'(V5, V9))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V31 = begin (V18 = ('dn--un--full_HasNames_(Term $vars)'(V5, V11))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V30 = begin (V23 = ('dn--un--full_HasNames_(Term $vars)'(V5, V12))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V29 = fun (V28) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V7, {'Builtin.MkPair', V17, {'Builtin.MkPair', V22, V27}}}} end), V29 end(V24)) end end end end), V30 end(V19)) end end end end), V31 end(V14)) end end end end end end end.
'nested--21619-17845--in--un--findAlias'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Prelude.Types.Right', V0} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Core.Context.Context.Alias', V6, V7, V8} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V0)) of 1 -> fun (V9) -> {'Prelude.Types.Right', V6} end; 0 -> ('nested--21619-17845--in--un--findAlias'(V0, V1, V5)) end; _ -> ('nested--21619-17845--in--un--findAlias'(V0, V1, V5)) end end(E0, E1)) end.
'nested--34126-29568--in--un--drop'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Builtin.MkPair', V7, V8} -> case ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V3, V7)) of 1 -> V6; 0 -> [{'Builtin.MkPair', V7, V8} | ('nested--34126-29568--in--un--drop'(V0, V1, V2, V3, V6))] end end end(E0, E1)) end.
'nested--25316-21247--in--un--direct'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Builtin':'un--snd'(V4)).
'nested--11045-7538--in--un--commitStaged'(V0, V1, V2, V3) -> case V1 of [] -> {'Builtin.MkUnit'}; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> begin (V35 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, V2, V6, V7))(V3))), ('nested--11045-7538--in--un--commitStaged'(V0, V5, V2, V3)) end end end(E0, E1)) end.
'nested--34126-29567--in--un--addMod'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> case V5 of [] -> [{'Builtin.MkPair', V3, {'Builtin.MkPair', [V6 | []], V7}} | []]; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> case ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V3, V10)) of 1 -> [{'Builtin.MkPair', V3, {'Builtin.MkPair', [V6 | V12], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V13, V7))}} | V9]; 0 -> [{'Builtin.MkPair', V10, {'Builtin.MkPair', V12, V13}} | ('nested--34126-29567--in--un--addMod'(V0, V1, V2, V3, {'Builtin.MkPair', V6, V7}, V9))] end end end end(E0, E1)) end end.
'dn--un--trimNS_StripNamespace_GlobalDef'(V0, V1) -> case V1 of {'Core.Context.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23} -> {'Core.Context.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('dn--un--trimNS_StripNamespace_Def'(V0, V19)), V20, V21, V22, V23} end.
'dn--un--trimNS_StripNamespace_Def'(V0, V1) -> case V1 of {'Core.Context.Context.PMDef', V2, V3, V4, V5, V6} -> {'Core.Context.Context.PMDef', V2, V3, ('Idris.Idris2.Core.Case.CaseTree':'dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V4)), V5, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('nested--13780-10145--in--un--trimNSpat'(V6, V3, V5, V4, V2, V0, V7)) end))(V6))}; _ -> V1 end.
'dn--un--show_Show_BuiltinType'(V0) -> case V0 of 0 -> <<"Natural"/utf8>>; 1 -> <<"NaturalToInteger"/utf8>>; 2 -> <<"IntegerToNatural"/utf8>> end.
'dn--un--showPrec_Show_BuiltinType'(V0, V1) -> ('dn--un--show_Show_BuiltinType'(V1)).
'dn--un--restoreNS_StripNamespace_GlobalDef'(V0, V1) -> case V1 of {'Core.Context.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23} -> {'Core.Context.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('dn--un--restoreNS_StripNamespace_Def'(V0, V19)), V20, V21, V22, V23} end.
'dn--un--restoreNS_StripNamespace_Def'(V0, V1) -> case V1 of {'Core.Context.Context.PMDef', V2, V3, V4, V5, V6} -> {'Core.Context.Context.PMDef', V2, V3, ('Idris.Idris2.Core.Case.CaseTree':'dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V4)), V5, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('nested--13788-10204--in--un--restoreNSpat'(V6, V3, V5, V4, V2, V0, V7)) end))(V6))}; _ -> V1 end.
'dn--un--resolved_HasNames_Warning'(V0, V1) -> case V1 of {'Core.Core.ParserWarning', V2, V3} -> fun (V4) -> {'Prelude.Types.Right', {'Core.Core.ParserWarning', V2, V3}} end; {'Core.Core.UnreachableClause', V5, V6, V7, V8} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V9 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V7))), ((begin (V26 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V23, V24, V25)) end end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end((begin (V18 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> {'Prelude.Types.Right', (V14(V17))} end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V10) -> fun (V11) -> {'Core.Core.UnreachableClause', V5, V6, V10, V11} end end))))(V9)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V0, V8)))); {'Core.Core.ShadowingGlobalDefs', V29, V30} -> begin (V35 = ('Idris.Idris2.Core.Core':'un--traverseList1'(fun (V31) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V32) -> ('Idris.Idris2.Core.Core':'un--traverseList1'(fun (V33) -> fun (V34) -> ('dn--un--resolved_HasNames_Name'(V0, V33, V34)) end end, V32)) end, V31)) end, V30))), ((begin (V51 = fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V48, V49, V50)) end end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end((begin (V43 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> {'Prelude.Types.Right', (V39(V42))} end end end end end), fun (V44) -> fun (V45) -> ((((V43('erased'))('erased'))(V44))(V45)) end end end(fun (V36) -> {'Core.Core.ShadowingGlobalDefs', V29, V36} end))))(V35)) end; {'Core.Core.ShadowingLocalBindings', V54, V55} -> fun (V56) -> {'Prelude.Types.Right', V1} end; {'Core.Core.Deprecated', V57, V58} -> begin (V82 = case V58 of {'Prelude.Types.Nothing'} -> fun (V59) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V60} -> begin (V63 = ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V61) -> fun (V62) -> ('dn--un--resolved_HasNames_Name'(V0, V61, V62)) end end, V60))), ((begin (V79 = fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V76, V77, V78)) end end end end end), fun (V80) -> fun (V81) -> ((((V79('erased'))('erased'))(V80))(V81)) end end end((begin (V71 = fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> {'Prelude.Types.Right', (V67(V70))} end end end end end), fun (V72) -> fun (V73) -> ((((V71('erased'))('erased'))(V72))(V73)) end end end(fun (V64) -> {'Prelude.Types.Just', V64} end))))(V63)) end end), ((begin (V98 = fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V95, V96, V97)) end end end end end), fun (V99) -> fun (V100) -> ((((V98('erased'))('erased'))(V99))(V100)) end end end((begin (V90 = fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> {'Prelude.Types.Right', (V86(V89))} end end end end end), fun (V91) -> fun (V92) -> ((((V90('erased'))('erased'))(V91))(V92)) end end end(fun (V83) -> {'Core.Core.Deprecated', V57, V83} end))))(V82)) end; {'Core.Core.GenericWarn', V101} -> fun (V102) -> {'Prelude.Types.Right', {'Core.Core.GenericWarn', V101}} end end.
'dn--un--resolved_HasNames_UConstraint'(V0, V1) -> case V1 of {'Core.Context.Context.ULT', V2, V3} -> begin (V5 = fun (V4) -> ('dn--un--resolved_HasNames_Name'(V0, V2, V4)) end), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V18 = begin (V11 = fun (V10) -> ('dn--un--resolved_HasNames_Name'(V0, V3, V10)) end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Core.Context.Context.ULT', V9, V15}} end), V17 end(V12)) end end end end), V18 end(V6)) end end end end; {'Core.Context.Context.ULE', V19, V20} -> begin (V22 = fun (V21) -> ('dn--un--resolved_HasNames_Name'(V0, V19, V21)) end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V35 = begin (V28 = fun (V27) -> ('dn--un--resolved_HasNames_Name'(V0, V20, V27)) end), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V34 = fun (V33) -> {'Prelude.Types.Right', {'Core.Context.Context.ULE', V26, V32}} end), V34 end(V29)) end end end end), V35 end(V23)) end end end end end.
'dn--un--resolved_HasNames_Transform'(V0, V1) -> case V1 of {'Core.Context.MkTransform', V2, V3, V4, V5, V6} -> begin (V8 = fun (V7) -> ('dn--un--resolved_HasNames_Name'(V0, V3, V7)) end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V32 = begin (V13 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V4))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V31 = begin (V18 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V5))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V30 = begin (V23 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V6))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V29 = fun (V28) -> {'Prelude.Types.Right', {'Core.Context.MkTransform', V2, V12, V17, V22, V27}} end), V29 end(V24)) end end end end), V30 end(V19)) end end end end), V31 end(V14)) end end end end), V32 end(V9)) end end end end end.
'dn--un--resolved_HasNames_Totality'(V0, V1) -> case V1 of {'Core.TT.MkTotality', V2, V3} -> begin (V4 = ('dn--un--resolved_HasNames_Terminating'(V0, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V16 = begin (V9 = ('dn--un--resolved_HasNames_Covering'(V0, V3))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', {'Core.TT.MkTotality', V8, V13}} end), V15 end(V10)) end end end end), V16 end(V5)) end end end end end.
'dn--un--resolved_HasNames_Terminating'(V0, V1) -> case V1 of {'Core.TT.NotTerminating', V2} -> begin (V3 = ('dn--un--resolved_HasNames_PartialReason'(V0, V2))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V9 = fun (V8) -> {'Prelude.Types.Right', {'Core.TT.NotTerminating', V7}} end), V9 end(V4)) end end end end; _ -> fun (V10) -> {'Prelude.Types.Right', V1} end end.
'dn--un--resolved_HasNames_SCCall'(V0, V1) -> begin (V5 = fun (V2) -> ('dn--un--resolved_HasNames_Name'(V0, case V1 of {'Core.Context.Context.MkSCCall', V3, V4} -> V3 end, V2)) end), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V13 = fun (V10) -> {'Prelude.Types.Right', case V1 of {'Core.Context.Context.MkSCCall', V11, V12} -> {'Core.Context.Context.MkSCCall', V9, V12} end} end), V13 end(V6)) end end end end.
'dn--un--resolved_HasNames_Pat'(V0, V1) -> case V1 of {'Core.Case.CaseTree.PAs', V2, V3, V4} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> {'Prelude.Types.Right', fun (V6) -> fun (V7) -> fun (V8) -> {'Core.Case.CaseTree.PAs', V6, V7, V8} end end end} end, fun (V9) -> {'Prelude.Types.Right', V2} end)), fun (V10) -> ('dn--un--resolved_HasNames_Name'(V0, V3, V10)) end)), ('dn--un--resolved_HasNames_Pat'(V0, V4)))); {'Core.Case.CaseTree.PCon', V11, V12, V13, V14, V15} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V16) -> {'Prelude.Types.Right', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> {'Core.Case.CaseTree.PCon', V17, V18, V19, V20, V21} end end end end end} end, fun (V22) -> {'Prelude.Types.Right', V11} end)), fun (V23) -> ('dn--un--resolved_HasNames_Name'(V0, V12, V23)) end)), fun (V24) -> {'Prelude.Types.Right', V13} end)), fun (V25) -> {'Prelude.Types.Right', V14} end)), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> ('dn--un--resolved_HasNames_Pat'(V0, V26)) end, V15, [])))); {'Core.Case.CaseTree.PTyCon', V27, V28, V29, V30} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V31) -> {'Prelude.Types.Right', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> {'Core.Case.CaseTree.PTyCon', V32, V33, V34, V35} end end end end} end, fun (V36) -> {'Prelude.Types.Right', V27} end)), fun (V37) -> ('dn--un--resolved_HasNames_Name'(V0, V28, V37)) end)), fun (V38) -> {'Prelude.Types.Right', V29} end)), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V39) -> ('dn--un--resolved_HasNames_Pat'(V0, V39)) end, V30, [])))); {'Core.Case.CaseTree.PConst', V40, V41} -> fun (V42) -> {'Prelude.Types.Right', V1} end; {'Core.Case.CaseTree.PArrow', V43, V44, V45, V46} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V47) -> {'Prelude.Types.Right', fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> {'Core.Case.CaseTree.PArrow', V48, V49, V50, V51} end end end end} end, fun (V52) -> {'Prelude.Types.Right', V43} end)), fun (V53) -> ('dn--un--resolved_HasNames_Name'(V0, V44, V53)) end)), ('dn--un--resolved_HasNames_Pat'(V0, V45)))), ('dn--un--resolved_HasNames_Pat'(V0, V46)))); {'Core.Case.CaseTree.PDelay', V54, V55, V56, V57} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V58) -> {'Prelude.Types.Right', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> {'Core.Case.CaseTree.PDelay', V59, V60, V61, V62} end end end end} end, fun (V63) -> {'Prelude.Types.Right', V54} end)), fun (V64) -> {'Prelude.Types.Right', V55} end)), ('dn--un--resolved_HasNames_Pat'(V0, V56)))), ('dn--un--resolved_HasNames_Pat'(V0, V57)))); {'Core.Case.CaseTree.PLoc', V65, V66} -> begin (V68 = fun (V67) -> ('dn--un--resolved_HasNames_Name'(V0, V66, V67)) end), ((begin (V84 = fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V81, V82, V83)) end end end end end), fun (V85) -> fun (V86) -> ((((V84('erased'))('erased'))(V85))(V86)) end end end((begin (V76 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> {'Prelude.Types.Right', (V72(V75))} end end end end end), fun (V77) -> fun (V78) -> ((((V76('erased'))('erased'))(V77))(V78)) end end end(fun (V69) -> {'Core.Case.CaseTree.PLoc', V65, V69} end))))(V68)) end; {'Core.Case.CaseTree.PUnmatchable', V87, V88} -> begin (V89 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V88))), ((begin (V105 = fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V102, V103, V104)) end end end end end), fun (V106) -> fun (V107) -> ((((V105('erased'))('erased'))(V106))(V107)) end end end((begin (V97 = fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> {'Prelude.Types.Right', (V93(V96))} end end end end end), fun (V98) -> fun (V99) -> ((((V97('erased'))('erased'))(V98))(V99)) end end end(fun (V90) -> {'Core.Case.CaseTree.PUnmatchable', V87, V90} end))))(V89)) end end.
'dn--un--resolved_HasNames_PartialReason'(V0, V1) -> case V1 of {'Core.TT.NotStrictlyPositive'} -> fun (V2) -> {'Prelude.Types.Right', {'Core.TT.NotStrictlyPositive'}} end; {'Core.TT.BadCall', V3} -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Name'(V0, V4, V5)) end end, V3, []))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> {'Prelude.Types.Right', {'Core.TT.BadCall', V10}} end), V12 end(V7)) end end end end; {'Core.TT.RecPath', V13} -> begin (V16 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> fun (V15) -> ('dn--un--resolved_HasNames_Name'(V0, V14, V15)) end end, V13, []))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Core.TT.RecPath', V20}} end), V22 end(V17)) end end end end end.
'dn--un--resolved_HasNames_Name'(V0, V1, V2) -> case V1 of {'Core.Name.Resolved', V3} -> {'Prelude.Types.Right', {'Core.Name.Resolved', V3}}; _ -> case ('un--getNameID'(V1, V0)) of {'Prelude.Types.Just', V4} -> {'Prelude.Types.Right', {'Core.Name.Resolved', V4}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', V1} end end.
'dn--un--resolved_HasNames_GlobalDef'(V0, V1) -> begin (V24 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, case V1 of {'Core.Context.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23} -> V4 end))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V201 = begin (V51 = ('dn--un--resolved_HasNames_Def'(V0, case V1 of {'Core.Context.Context.MkGlobalDef', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> V46 end))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V200 = begin (V78 = ('dn--un--resolved_HasNames_Totality'(V0, case V1 of {'Core.Context.Context.MkGlobalDef', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77} -> V66 end))), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V199 = begin (V109 = ('dn--un--resolved_HasNames_(Maybe $a)'({'Core.Context.dn--un--__mkHasNames', fun (V83) -> fun (V84) -> ('dn--un--full_HasNames_(NameMap $a)'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V85, V86)) end end}, V0, case V1 of {'Core.Context.Context.MkGlobalDef', V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108} -> V99 end))), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V198 = begin (V140 = ('dn--un--resolved_HasNames_(Maybe $a)'({'Core.Context.dn--un--__mkHasNames', fun (V114) -> fun (V115) -> ('dn--un--full_HasNames_(NameMap $a)'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V116, V117)) end end}, V0, case V1 of {'Core.Context.Context.MkGlobalDef', V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139} -> V131 end))), fun (V141) -> begin (V142 = (V140(V141))), case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> (begin (V197 = begin (V168 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V145) -> ('dn--un--resolved_HasNames_SCCall'(V0, V145)) end, case V1 of {'Core.Context.Context.MkGlobalDef', V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167} -> V166 end, []))), fun (V169) -> begin (V170 = (V168(V169))), case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> (begin (V196 = fun (V173) -> {'Prelude.Types.Right', case V1 of {'Core.Context.Context.MkGlobalDef', V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195} -> {'Core.Context.Context.MkGlobalDef', V174, V175, V28, V177, V178, V179, V180, V181, V182, V183, V82, V185, V113, V144, V188, V189, V190, V55, V192, V193, V172, V195} end} end), V196 end(V169)) end end end end), V197 end(V141)) end end end end), V198 end(V110)) end end end end), V199 end(V79)) end end end end), V200 end(V52)) end end end end), V201 end(V25)) end end end end.
'dn--un--resolved_HasNames_Error'(V0, V1) -> case V1 of {'Core.Core.Fatal', V2} -> begin (V3 = ('dn--un--resolved_HasNames_Error'(V0, V2))), ((begin (V19 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V16, V17, V18)) end end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end((begin (V11 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> {'Prelude.Types.Right', (V7(V10))} end end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V4) -> {'Core.Core.Fatal', V4} end))))(V3)) end; {'Core.Core.CantConvert', V22, V23, V24, V25, V26, V27} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V28 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V24, V25))), ((begin (V46 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V43, V44, V45)) end end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end((begin (V38 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> {'Prelude.Types.Right', (V34(V37))} end end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V29) -> fun (V30) -> fun (V31) -> {'Core.Core.CantConvert', V22, V23, V24, V29, V30, V31} end end end))))(V28)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V24, V26)))), ('dn--un--resolved_HasNames_(Term $vars)'(V24, V27)))); {'Core.Core.CantSolveEq', V49, V50, V51, V52, V53, V54} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V55 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V51, V52))), ((begin (V73 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V70, V71, V72)) end end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end((begin (V65 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> {'Prelude.Types.Right', (V61(V64))} end end end end end), fun (V66) -> fun (V67) -> ((((V65('erased'))('erased'))(V66))(V67)) end end end(fun (V56) -> fun (V57) -> fun (V58) -> {'Core.Core.CantSolveEq', V49, V50, V51, V56, V57, V58} end end end))))(V55)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V51, V53)))), ('dn--un--resolved_HasNames_(Term $vars)'(V51, V54)))); {'Core.Core.PatternVariableUnifies', V76, V77, V78, V79, V80, V81} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V82 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V79))), ((begin (V100 = fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V97, V98, V99)) end end end end end), fun (V101) -> fun (V102) -> ((((V100('erased'))('erased'))(V101))(V102)) end end end((begin (V92 = fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> {'Prelude.Types.Right', (V88(V91))} end end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end(fun (V83) -> fun (V84) -> fun (V85) -> {'Core.Core.PatternVariableUnifies', V76, V77, V78, V83, V84, V85} end end end))))(V82)) end, fun (V103) -> ('dn--un--resolved_HasNames_Name'(V0, V80, V103)) end)), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V81)))); {'Core.Core.CyclicMeta', V104, V105, V106, V107, V108} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V109 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V106))), ((begin (V127 = fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V124, V125, V126)) end end end end end), fun (V128) -> fun (V129) -> ((((V127('erased'))('erased'))(V128))(V129)) end end end((begin (V119 = fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> {'Prelude.Types.Right', (V115(V118))} end end end end end), fun (V120) -> fun (V121) -> ((((V119('erased'))('erased'))(V120))(V121)) end end end(fun (V110) -> fun (V111) -> fun (V112) -> {'Core.Core.CyclicMeta', V104, V105, V110, V111, V112} end end end))))(V109)) end, fun (V130) -> ('dn--un--resolved_HasNames_Name'(V0, V107, V130)) end)), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V108)))); {'Core.Core.WhenUnifying', V131, V132, V133, V134, V135, V136, V137} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V138 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V133, V134))), ((begin (V157 = fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V154, V155, V156)) end end end end end), fun (V158) -> fun (V159) -> ((((V157('erased'))('erased'))(V158))(V159)) end end end((begin (V149 = fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> case V146 of {'Prelude.Types.Left', V147} -> {'Prelude.Types.Left', V147}; {'Prelude.Types.Right', V148} -> {'Prelude.Types.Right', (V145(V148))} end end end end end), fun (V150) -> fun (V151) -> ((((V149('erased'))('erased'))(V150))(V151)) end end end(fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> {'Core.Core.WhenUnifying', V131, V132, V133, V139, V140, V141, V142} end end end end))))(V138)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V133, V135)))), ('dn--un--resolved_HasNames_(Term $vars)'(V133, V136)))), ('dn--un--resolved_HasNames_Error'(V133, V137)))); {'Core.Core.ValidCase', V160, V161, V162, V163} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V164 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V162))), ((begin (V181 = fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V178, V179, V180)) end end end end end), fun (V182) -> fun (V183) -> ((((V181('erased'))('erased'))(V182))(V183)) end end end((begin (V173 = fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> {'Prelude.Types.Right', (V169(V172))} end end end end end), fun (V174) -> fun (V175) -> ((((V173('erased'))('erased'))(V174))(V175)) end end end(fun (V165) -> fun (V166) -> {'Core.Core.ValidCase', V160, V161, V165, V166} end end))))(V164)) end, ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V184) -> begin (V185 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V184))), ((begin (V201 = fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V198, V199, V200)) end end end end end), fun (V202) -> fun (V203) -> ((((V201('erased'))('erased'))(V202))(V203)) end end end((begin (V193 = fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> case V190 of {'Prelude.Types.Left', V191} -> {'Prelude.Types.Left', V191}; {'Prelude.Types.Right', V192} -> {'Prelude.Types.Right', (V189(V192))} end end end end end), fun (V194) -> fun (V195) -> ((((V193('erased'))('erased'))(V194))(V195)) end end end(fun (V186) -> {'Prelude.Types.Left', V186} end))))(V185)) end end end, fun () -> fun (V204) -> begin (V205 = ('dn--un--resolved_HasNames_Error'(V0, V204))), ((begin (V221 = fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V218, V219, V220)) end end end end end), fun (V222) -> fun (V223) -> ((((V221('erased'))('erased'))(V222))(V223)) end end end((begin (V213 = fun (V207) -> fun (V208) -> fun (V209) -> fun (V210) -> case V210 of {'Prelude.Types.Left', V211} -> {'Prelude.Types.Left', V211}; {'Prelude.Types.Right', V212} -> {'Prelude.Types.Right', (V209(V212))} end end end end end), fun (V214) -> fun (V215) -> ((((V213('erased'))('erased'))(V214))(V215)) end end end(fun (V206) -> {'Prelude.Types.Right', V206} end))))(V205)) end end end, V163)))); {'Core.Core.UndefinedName', V224, V225} -> begin (V227 = fun (V226) -> ('dn--un--resolved_HasNames_Name'(V0, V225, V226)) end), ((begin (V243 = fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V240, V241, V242)) end end end end end), fun (V244) -> fun (V245) -> ((((V243('erased'))('erased'))(V244))(V245)) end end end((begin (V235 = fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> case V232 of {'Prelude.Types.Left', V233} -> {'Prelude.Types.Left', V233}; {'Prelude.Types.Right', V234} -> {'Prelude.Types.Right', (V231(V234))} end end end end end), fun (V236) -> fun (V237) -> ((((V235('erased'))('erased'))(V236))(V237)) end end end(fun (V228) -> {'Core.Core.UndefinedName', V224, V228} end))))(V227)) end; {'Core.Core.InvisibleName', V246, V247, V248} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V250 = fun (V249) -> ('dn--un--resolved_HasNames_Name'(V0, V247, V249)) end), ((begin (V267 = fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> fun (V266) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V264, V265, V266)) end end end end end), fun (V268) -> fun (V269) -> ((((V267('erased'))('erased'))(V268))(V269)) end end end((begin (V259 = fun (V253) -> fun (V254) -> fun (V255) -> fun (V256) -> case V256 of {'Prelude.Types.Left', V257} -> {'Prelude.Types.Left', V257}; {'Prelude.Types.Right', V258} -> {'Prelude.Types.Right', (V255(V258))} end end end end end), fun (V260) -> fun (V261) -> ((((V259('erased'))('erased'))(V260))(V261)) end end end(fun (V251) -> fun (V252) -> {'Core.Core.InvisibleName', V246, V251, V252} end end))))(V250)) end, fun (V270) -> {'Prelude.Types.Right', V248} end)); {'Core.Core.BadTypeConType', V271, V272} -> begin (V274 = fun (V273) -> ('dn--un--resolved_HasNames_Name'(V0, V272, V273)) end), ((begin (V290 = fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V287, V288, V289)) end end end end end), fun (V291) -> fun (V292) -> ((((V290('erased'))('erased'))(V291))(V292)) end end end((begin (V282 = fun (V276) -> fun (V277) -> fun (V278) -> fun (V279) -> case V279 of {'Prelude.Types.Left', V280} -> {'Prelude.Types.Left', V280}; {'Prelude.Types.Right', V281} -> {'Prelude.Types.Right', (V278(V281))} end end end end end), fun (V283) -> fun (V284) -> ((((V282('erased'))('erased'))(V283))(V284)) end end end(fun (V275) -> {'Core.Core.BadTypeConType', V271, V275} end))))(V274)) end; {'Core.Core.BadDataConType', V293, V294, V295} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V297 = fun (V296) -> ('dn--un--resolved_HasNames_Name'(V0, V294, V296)) end), ((begin (V314 = fun (V309) -> fun (V310) -> fun (V311) -> fun (V312) -> fun (V313) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V311, V312, V313)) end end end end end), fun (V315) -> fun (V316) -> ((((V314('erased'))('erased'))(V315))(V316)) end end end((begin (V306 = fun (V300) -> fun (V301) -> fun (V302) -> fun (V303) -> case V303 of {'Prelude.Types.Left', V304} -> {'Prelude.Types.Left', V304}; {'Prelude.Types.Right', V305} -> {'Prelude.Types.Right', (V302(V305))} end end end end end), fun (V307) -> fun (V308) -> ((((V306('erased'))('erased'))(V307))(V308)) end end end(fun (V298) -> fun (V299) -> {'Core.Core.BadDataConType', V293, V298, V299} end end))))(V297)) end, fun (V317) -> ('dn--un--resolved_HasNames_Name'(V0, V295, V317)) end)); {'Core.Core.NotCovering', V318, V319, V320} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V322 = fun (V321) -> ('dn--un--resolved_HasNames_Name'(V0, V319, V321)) end), ((begin (V339 = fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> fun (V338) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V336, V337, V338)) end end end end end), fun (V340) -> fun (V341) -> ((((V339('erased'))('erased'))(V340))(V341)) end end end((begin (V331 = fun (V325) -> fun (V326) -> fun (V327) -> fun (V328) -> case V328 of {'Prelude.Types.Left', V329} -> {'Prelude.Types.Left', V329}; {'Prelude.Types.Right', V330} -> {'Prelude.Types.Right', (V327(V330))} end end end end end), fun (V332) -> fun (V333) -> ((((V331('erased'))('erased'))(V332))(V333)) end end end(fun (V323) -> fun (V324) -> {'Core.Core.NotCovering', V318, V323, V324} end end))))(V322)) end, ('dn--un--resolved_HasNames_Covering'(V0, V320)))); {'Core.Core.NotTotal', V342, V343, V344} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V346 = fun (V345) -> ('dn--un--resolved_HasNames_Name'(V0, V343, V345)) end), ((begin (V363 = fun (V358) -> fun (V359) -> fun (V360) -> fun (V361) -> fun (V362) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V360, V361, V362)) end end end end end), fun (V364) -> fun (V365) -> ((((V363('erased'))('erased'))(V364))(V365)) end end end((begin (V355 = fun (V349) -> fun (V350) -> fun (V351) -> fun (V352) -> case V352 of {'Prelude.Types.Left', V353} -> {'Prelude.Types.Left', V353}; {'Prelude.Types.Right', V354} -> {'Prelude.Types.Right', (V351(V354))} end end end end end), fun (V356) -> fun (V357) -> ((((V355('erased'))('erased'))(V356))(V357)) end end end(fun (V347) -> fun (V348) -> {'Core.Core.NotTotal', V342, V347, V348} end end))))(V346)) end, ('dn--un--resolved_HasNames_PartialReason'(V0, V344)))); {'Core.Core.LinearUsed', V366, V367, V368} -> begin (V370 = fun (V369) -> ('dn--un--resolved_HasNames_Name'(V0, V368, V369)) end), ((begin (V386 = fun (V381) -> fun (V382) -> fun (V383) -> fun (V384) -> fun (V385) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V383, V384, V385)) end end end end end), fun (V387) -> fun (V388) -> ((((V386('erased'))('erased'))(V387))(V388)) end end end((begin (V378 = fun (V372) -> fun (V373) -> fun (V374) -> fun (V375) -> case V375 of {'Prelude.Types.Left', V376} -> {'Prelude.Types.Left', V376}; {'Prelude.Types.Right', V377} -> {'Prelude.Types.Right', (V374(V377))} end end end end end), fun (V379) -> fun (V380) -> ((((V378('erased'))('erased'))(V379))(V380)) end end end(fun (V371) -> {'Core.Core.LinearUsed', V366, V367, V371} end))))(V370)) end; {'Core.Core.LinearMisuse', V389, V390, V391, V392} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V394 = fun (V393) -> ('dn--un--resolved_HasNames_Name'(V0, V390, V393)) end), ((begin (V412 = fun (V407) -> fun (V408) -> fun (V409) -> fun (V410) -> fun (V411) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V409, V410, V411)) end end end end end), fun (V413) -> fun (V414) -> ((((V412('erased'))('erased'))(V413))(V414)) end end end((begin (V404 = fun (V398) -> fun (V399) -> fun (V400) -> fun (V401) -> case V401 of {'Prelude.Types.Left', V402} -> {'Prelude.Types.Left', V402}; {'Prelude.Types.Right', V403} -> {'Prelude.Types.Right', (V400(V403))} end end end end end), fun (V405) -> fun (V406) -> ((((V404('erased'))('erased'))(V405))(V406)) end end end(fun (V395) -> fun (V396) -> fun (V397) -> {'Core.Core.LinearMisuse', V389, V395, V396, V397} end end end))))(V394)) end, fun (V415) -> {'Prelude.Types.Right', V391} end)), fun (V416) -> {'Prelude.Types.Right', V392} end)); {'Core.Core.BorrowPartial', V417, V418, V419, V420, V421} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V422 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V419))), ((begin (V440 = fun (V435) -> fun (V436) -> fun (V437) -> fun (V438) -> fun (V439) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V437, V438, V439)) end end end end end), fun (V441) -> fun (V442) -> ((((V440('erased'))('erased'))(V441))(V442)) end end end((begin (V432 = fun (V426) -> fun (V427) -> fun (V428) -> fun (V429) -> case V429 of {'Prelude.Types.Left', V430} -> {'Prelude.Types.Left', V430}; {'Prelude.Types.Right', V431} -> {'Prelude.Types.Right', (V428(V431))} end end end end end), fun (V433) -> fun (V434) -> ((((V432('erased'))('erased'))(V433))(V434)) end end end(fun (V423) -> fun (V424) -> fun (V425) -> {'Core.Core.BorrowPartial', V417, V418, V423, V424, V425} end end end))))(V422)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V0, V420)))), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V421)))); {'Core.Core.BorrowPartialType', V443, V444, V445, V446} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V447 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V445))), ((begin (V464 = fun (V459) -> fun (V460) -> fun (V461) -> fun (V462) -> fun (V463) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V461, V462, V463)) end end end end end), fun (V465) -> fun (V466) -> ((((V464('erased'))('erased'))(V465))(V466)) end end end((begin (V456 = fun (V450) -> fun (V451) -> fun (V452) -> fun (V453) -> case V453 of {'Prelude.Types.Left', V454} -> {'Prelude.Types.Left', V454}; {'Prelude.Types.Right', V455} -> {'Prelude.Types.Right', (V452(V455))} end end end end end), fun (V457) -> fun (V458) -> ((((V456('erased'))('erased'))(V457))(V458)) end end end(fun (V448) -> fun (V449) -> {'Core.Core.BorrowPartialType', V443, V444, V448, V449} end end))))(V447)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V0, V446)))); {'Core.Core.AmbiguousName', V467, V468} -> begin (V471 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V469) -> fun (V470) -> ('dn--un--resolved_HasNames_Name'(V0, V469, V470)) end end, V468, []))), ((begin (V487 = fun (V482) -> fun (V483) -> fun (V484) -> fun (V485) -> fun (V486) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V484, V485, V486)) end end end end end), fun (V488) -> fun (V489) -> ((((V487('erased'))('erased'))(V488))(V489)) end end end((begin (V479 = fun (V473) -> fun (V474) -> fun (V475) -> fun (V476) -> case V476 of {'Prelude.Types.Left', V477} -> {'Prelude.Types.Left', V477}; {'Prelude.Types.Right', V478} -> {'Prelude.Types.Right', (V475(V478))} end end end end end), fun (V480) -> fun (V481) -> ((((V479('erased'))('erased'))(V480))(V481)) end end end(fun (V472) -> {'Core.Core.AmbiguousName', V467, V472} end))))(V471)) end; {'Core.Core.AmbiguousElab', V490, V491, V492, V493} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V494 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V492))), ((begin (V511 = fun (V506) -> fun (V507) -> fun (V508) -> fun (V509) -> fun (V510) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V508, V509, V510)) end end end end end), fun (V512) -> fun (V513) -> ((((V511('erased'))('erased'))(V512))(V513)) end end end((begin (V503 = fun (V497) -> fun (V498) -> fun (V499) -> fun (V500) -> case V500 of {'Prelude.Types.Left', V501} -> {'Prelude.Types.Left', V501}; {'Prelude.Types.Right', V502} -> {'Prelude.Types.Right', (V499(V502))} end end end end end), fun (V504) -> fun (V505) -> ((((V503('erased'))('erased'))(V504))(V505)) end end end(fun (V495) -> fun (V496) -> {'Core.Core.AmbiguousElab', V490, V491, V495, V496} end end))))(V494)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V514) -> case V514 of {'Builtin.MkPair', V515, V516} -> begin (V517 = ('dn--un--resolved_HasNames_(Term $vars)'(V515, V516))), ((begin (V533 = fun (V528) -> fun (V529) -> fun (V530) -> fun (V531) -> fun (V532) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V530, V531, V532)) end end end end end), fun (V534) -> fun (V535) -> ((((V533('erased'))('erased'))(V534))(V535)) end end end((begin (V525 = fun (V519) -> fun (V520) -> fun (V521) -> fun (V522) -> case V522 of {'Prelude.Types.Left', V523} -> {'Prelude.Types.Left', V523}; {'Prelude.Types.Right', V524} -> {'Prelude.Types.Right', (V521(V524))} end end end end end), fun (V526) -> fun (V527) -> ((((V525('erased'))('erased'))(V526))(V527)) end end end(fun (V518) -> {'Builtin.MkPair', V515, V518} end))))(V517)) end end end, V493, [])))); {'Core.Core.AmbiguousSearch', V536, V537, V538, V539, V540} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V541 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V538))), ((begin (V559 = fun (V554) -> fun (V555) -> fun (V556) -> fun (V557) -> fun (V558) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V556, V557, V558)) end end end end end), fun (V560) -> fun (V561) -> ((((V559('erased'))('erased'))(V560))(V561)) end end end((begin (V551 = fun (V545) -> fun (V546) -> fun (V547) -> fun (V548) -> case V548 of {'Prelude.Types.Left', V549} -> {'Prelude.Types.Left', V549}; {'Prelude.Types.Right', V550} -> {'Prelude.Types.Right', (V547(V550))} end end end end end), fun (V552) -> fun (V553) -> ((((V551('erased'))('erased'))(V552))(V553)) end end end(fun (V542) -> fun (V543) -> fun (V544) -> {'Core.Core.AmbiguousSearch', V536, V537, V542, V543, V544} end end end))))(V541)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V0, V539)))), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V562) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V562)) end, V540, [])))); {'Core.Core.AmbiguityTooDeep', V563, V564, V565} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V567 = fun (V566) -> ('dn--un--resolved_HasNames_Name'(V0, V564, V566)) end), ((begin (V584 = fun (V579) -> fun (V580) -> fun (V581) -> fun (V582) -> fun (V583) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V581, V582, V583)) end end end end end), fun (V585) -> fun (V586) -> ((((V584('erased'))('erased'))(V585))(V586)) end end end((begin (V576 = fun (V570) -> fun (V571) -> fun (V572) -> fun (V573) -> case V573 of {'Prelude.Types.Left', V574} -> {'Prelude.Types.Left', V574}; {'Prelude.Types.Right', V575} -> {'Prelude.Types.Right', (V572(V575))} end end end end end), fun (V577) -> fun (V578) -> ((((V576('erased'))('erased'))(V577))(V578)) end end end(fun (V568) -> fun (V569) -> {'Core.Core.AmbiguityTooDeep', V563, V568, V569} end end))))(V567)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V587) -> fun (V588) -> ('dn--un--resolved_HasNames_Name'(V0, V587, V588)) end end, V565, [])))); {'Core.Core.AllFailed', V589} -> begin (V637 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V590) -> fun (V591) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V590, V591, [])) end end, V589, fun (V592) -> case V592 of {'Builtin.MkPair', V593, V594} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V617 = case V593 of {'Prelude.Types.Nothing'} -> fun (V595) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V596} -> begin (V598 = fun (V597) -> ('dn--un--resolved_HasNames_Name'(V0, V596, V597)) end), ((begin (V614 = fun (V609) -> fun (V610) -> fun (V611) -> fun (V612) -> fun (V613) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V611, V612, V613)) end end end end end), fun (V615) -> fun (V616) -> ((((V614('erased'))('erased'))(V615))(V616)) end end end((begin (V606 = fun (V600) -> fun (V601) -> fun (V602) -> fun (V603) -> case V603 of {'Prelude.Types.Left', V604} -> {'Prelude.Types.Left', V604}; {'Prelude.Types.Right', V605} -> {'Prelude.Types.Right', (V602(V605))} end end end end end), fun (V607) -> fun (V608) -> ((((V606('erased'))('erased'))(V607))(V608)) end end end(fun (V599) -> {'Prelude.Types.Just', V599} end))))(V598)) end end), ((begin (V634 = fun (V629) -> fun (V630) -> fun (V631) -> fun (V632) -> fun (V633) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V631, V632, V633)) end end end end end), fun (V635) -> fun (V636) -> ((((V634('erased'))('erased'))(V635))(V636)) end end end((begin (V626 = fun (V620) -> fun (V621) -> fun (V622) -> fun (V623) -> case V623 of {'Prelude.Types.Left', V624} -> {'Prelude.Types.Left', V624}; {'Prelude.Types.Right', V625} -> {'Prelude.Types.Right', (V622(V625))} end end end end end), fun (V627) -> fun (V628) -> ((((V626('erased'))('erased'))(V627))(V628)) end end end(fun (V618) -> fun (V619) -> {'Builtin.MkPair', V618, V619} end end))))(V617)) end, ('dn--un--resolved_HasNames_Error'(V0, V594)))) end end))), ((begin (V653 = fun (V648) -> fun (V649) -> fun (V650) -> fun (V651) -> fun (V652) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V650, V651, V652)) end end end end end), fun (V654) -> fun (V655) -> ((((V653('erased'))('erased'))(V654))(V655)) end end end((begin (V645 = fun (V639) -> fun (V640) -> fun (V641) -> fun (V642) -> case V642 of {'Prelude.Types.Left', V643} -> {'Prelude.Types.Left', V643}; {'Prelude.Types.Right', V644} -> {'Prelude.Types.Right', (V641(V644))} end end end end end), fun (V646) -> fun (V647) -> ((((V645('erased'))('erased'))(V646))(V647)) end end end(fun (V638) -> {'Core.Core.AllFailed', V638} end))))(V637)) end; {'Core.Core.RecordTypeNeeded', V656, V657, V658} -> begin (V659 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V658))), ((begin (V675 = fun (V670) -> fun (V671) -> fun (V672) -> fun (V673) -> fun (V674) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V672, V673, V674)) end end end end end), fun (V676) -> fun (V677) -> ((((V675('erased'))('erased'))(V676))(V677)) end end end((begin (V667 = fun (V661) -> fun (V662) -> fun (V663) -> fun (V664) -> case V664 of {'Prelude.Types.Left', V665} -> {'Prelude.Types.Left', V665}; {'Prelude.Types.Right', V666} -> {'Prelude.Types.Right', (V663(V666))} end end end end end), fun (V668) -> fun (V669) -> ((((V667('erased'))('erased'))(V668))(V669)) end end end(fun (V660) -> {'Core.Core.RecordTypeNeeded', V656, V657, V660} end))))(V659)) end; {'Core.Core.DuplicatedRecordUpdatePath', V678, V679} -> fun (V680) -> {'Prelude.Types.Right', {'Core.Core.DuplicatedRecordUpdatePath', V678, V679}} end; {'Core.Core.NotRecordField', V681, V682, V683} -> begin (V706 = case V683 of {'Prelude.Types.Nothing'} -> fun (V684) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V685} -> begin (V687 = fun (V686) -> ('dn--un--resolved_HasNames_Name'(V0, V685, V686)) end), ((begin (V703 = fun (V698) -> fun (V699) -> fun (V700) -> fun (V701) -> fun (V702) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V700, V701, V702)) end end end end end), fun (V704) -> fun (V705) -> ((((V703('erased'))('erased'))(V704))(V705)) end end end((begin (V695 = fun (V689) -> fun (V690) -> fun (V691) -> fun (V692) -> case V692 of {'Prelude.Types.Left', V693} -> {'Prelude.Types.Left', V693}; {'Prelude.Types.Right', V694} -> {'Prelude.Types.Right', (V691(V694))} end end end end end), fun (V696) -> fun (V697) -> ((((V695('erased'))('erased'))(V696))(V697)) end end end(fun (V688) -> {'Prelude.Types.Just', V688} end))))(V687)) end end), ((begin (V722 = fun (V717) -> fun (V718) -> fun (V719) -> fun (V720) -> fun (V721) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V719, V720, V721)) end end end end end), fun (V723) -> fun (V724) -> ((((V722('erased'))('erased'))(V723))(V724)) end end end((begin (V714 = fun (V708) -> fun (V709) -> fun (V710) -> fun (V711) -> case V711 of {'Prelude.Types.Left', V712} -> {'Prelude.Types.Left', V712}; {'Prelude.Types.Right', V713} -> {'Prelude.Types.Right', (V710(V713))} end end end end end), fun (V715) -> fun (V716) -> ((((V714('erased'))('erased'))(V715))(V716)) end end end(fun (V707) -> {'Core.Core.NotRecordField', V681, V682, V707} end))))(V706)) end; {'Core.Core.NotRecordType', V725, V726} -> begin (V728 = fun (V727) -> ('dn--un--resolved_HasNames_Name'(V0, V726, V727)) end), ((begin (V744 = fun (V739) -> fun (V740) -> fun (V741) -> fun (V742) -> fun (V743) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V741, V742, V743)) end end end end end), fun (V745) -> fun (V746) -> ((((V744('erased'))('erased'))(V745))(V746)) end end end((begin (V736 = fun (V730) -> fun (V731) -> fun (V732) -> fun (V733) -> case V733 of {'Prelude.Types.Left', V734} -> {'Prelude.Types.Left', V734}; {'Prelude.Types.Right', V735} -> {'Prelude.Types.Right', (V732(V735))} end end end end end), fun (V737) -> fun (V738) -> ((((V736('erased'))('erased'))(V737))(V738)) end end end(fun (V729) -> {'Core.Core.NotRecordType', V725, V729} end))))(V728)) end; {'Core.Core.IncompatibleFieldUpdate', V747, V748} -> fun (V749) -> {'Prelude.Types.Right', {'Core.Core.IncompatibleFieldUpdate', V747, V748}} end; {'Core.Core.InvalidArgs', V750, V751, V752, V753, V754} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V755 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V752))), ((begin (V773 = fun (V768) -> fun (V769) -> fun (V770) -> fun (V771) -> fun (V772) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V770, V771, V772)) end end end end end), fun (V774) -> fun (V775) -> ((((V773('erased'))('erased'))(V774))(V775)) end end end((begin (V765 = fun (V759) -> fun (V760) -> fun (V761) -> fun (V762) -> case V762 of {'Prelude.Types.Left', V763} -> {'Prelude.Types.Left', V763}; {'Prelude.Types.Right', V764} -> {'Prelude.Types.Right', (V761(V764))} end end end end end), fun (V766) -> fun (V767) -> ((((V765('erased'))('erased'))(V766))(V767)) end end end(fun (V756) -> fun (V757) -> fun (V758) -> {'Core.Core.InvalidArgs', V750, V751, V756, V757, V758} end end end))))(V755)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V776) -> fun (V777) -> ('dn--un--resolved_HasNames_Name'(V0, V776, V777)) end end, V753, [])))), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V754)))); {'Core.Core.TryWithImplicits', V778, V779, V780, V781} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V782 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V780))), ((begin (V799 = fun (V794) -> fun (V795) -> fun (V796) -> fun (V797) -> fun (V798) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V796, V797, V798)) end end end end end), fun (V800) -> fun (V801) -> ((((V799('erased'))('erased'))(V800))(V801)) end end end((begin (V791 = fun (V785) -> fun (V786) -> fun (V787) -> fun (V788) -> case V788 of {'Prelude.Types.Left', V789} -> {'Prelude.Types.Left', V789}; {'Prelude.Types.Right', V790} -> {'Prelude.Types.Right', (V787(V790))} end end end end end), fun (V792) -> fun (V793) -> ((((V791('erased'))('erased'))(V792))(V793)) end end end(fun (V783) -> fun (V784) -> {'Core.Core.TryWithImplicits', V778, V779, V783, V784} end end))))(V782)) end, ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V802) -> fun (V803) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V802, V803, [])) end end, V781, fun (V804) -> case V804 of {'Builtin.MkPair', V805, V806} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V808 = fun (V807) -> ('dn--un--resolved_HasNames_Name'(V0, V805, V807)) end), ((begin (V825 = fun (V820) -> fun (V821) -> fun (V822) -> fun (V823) -> fun (V824) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V822, V823, V824)) end end end end end), fun (V826) -> fun (V827) -> ((((V825('erased'))('erased'))(V826))(V827)) end end end((begin (V817 = fun (V811) -> fun (V812) -> fun (V813) -> fun (V814) -> case V814 of {'Prelude.Types.Left', V815} -> {'Prelude.Types.Left', V815}; {'Prelude.Types.Right', V816} -> {'Prelude.Types.Right', (V813(V816))} end end end end end), fun (V818) -> fun (V819) -> ((((V817('erased'))('erased'))(V818))(V819)) end end end(fun (V809) -> fun (V810) -> {'Builtin.MkPair', V809, V810} end end))))(V808)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V0, V806)))) end end)))); {'Core.Core.BadUnboundImplicit', V828, V829, V830, V831, V832} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V833 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V830))), ((begin (V851 = fun (V846) -> fun (V847) -> fun (V848) -> fun (V849) -> fun (V850) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V848, V849, V850)) end end end end end), fun (V852) -> fun (V853) -> ((((V851('erased'))('erased'))(V852))(V853)) end end end((begin (V843 = fun (V837) -> fun (V838) -> fun (V839) -> fun (V840) -> case V840 of {'Prelude.Types.Left', V841} -> {'Prelude.Types.Left', V841}; {'Prelude.Types.Right', V842} -> {'Prelude.Types.Right', (V839(V842))} end end end end end), fun (V844) -> fun (V845) -> ((((V843('erased'))('erased'))(V844))(V845)) end end end(fun (V834) -> fun (V835) -> fun (V836) -> {'Core.Core.BadUnboundImplicit', V828, V829, V834, V835, V836} end end end))))(V833)) end, fun (V854) -> ('dn--un--resolved_HasNames_Name'(V0, V831, V854)) end)), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V832)))); {'Core.Core.CantSolveGoal', V855, V856, V857, V858, V859, V860} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V861 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V857, V858))), ((begin (V879 = fun (V874) -> fun (V875) -> fun (V876) -> fun (V877) -> fun (V878) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V876, V877, V878)) end end end end end), fun (V880) -> fun (V881) -> ((((V879('erased'))('erased'))(V880))(V881)) end end end((begin (V871 = fun (V865) -> fun (V866) -> fun (V867) -> fun (V868) -> case V868 of {'Prelude.Types.Left', V869} -> {'Prelude.Types.Left', V869}; {'Prelude.Types.Right', V870} -> {'Prelude.Types.Right', (V867(V870))} end end end end end), fun (V872) -> fun (V873) -> ((((V871('erased'))('erased'))(V872))(V873)) end end end(fun (V862) -> fun (V863) -> fun (V864) -> {'Core.Core.CantSolveGoal', V855, V856, V857, V862, V863, V864} end end end))))(V861)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V857, V859)))), case V860 of {'Prelude.Types.Nothing'} -> fun (V882) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V883} -> begin (V884 = ('dn--un--resolved_HasNames_Error'(V857, V883))), ((begin (V900 = fun (V895) -> fun (V896) -> fun (V897) -> fun (V898) -> fun (V899) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V897, V898, V899)) end end end end end), fun (V901) -> fun (V902) -> ((((V900('erased'))('erased'))(V901))(V902)) end end end((begin (V892 = fun (V886) -> fun (V887) -> fun (V888) -> fun (V889) -> case V889 of {'Prelude.Types.Left', V890} -> {'Prelude.Types.Left', V890}; {'Prelude.Types.Right', V891} -> {'Prelude.Types.Right', (V888(V891))} end end end end end), fun (V893) -> fun (V894) -> ((((V892('erased'))('erased'))(V893))(V894)) end end end(fun (V885) -> {'Prelude.Types.Just', V885} end))))(V884)) end end)); {'Core.Core.DeterminingArg', V903, V904, V905, V906, V907, V908} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V910 = fun (V909) -> ('dn--un--resolved_HasNames_Name'(V0, V905, V909)) end), ((begin (V929 = fun (V924) -> fun (V925) -> fun (V926) -> fun (V927) -> fun (V928) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V926, V927, V928)) end end end end end), fun (V930) -> fun (V931) -> ((((V929('erased'))('erased'))(V930))(V931)) end end end((begin (V921 = fun (V915) -> fun (V916) -> fun (V917) -> fun (V918) -> case V918 of {'Prelude.Types.Left', V919} -> {'Prelude.Types.Left', V919}; {'Prelude.Types.Right', V920} -> {'Prelude.Types.Right', (V917(V920))} end end end end end), fun (V922) -> fun (V923) -> ((((V921('erased'))('erased'))(V922))(V923)) end end end(fun (V911) -> fun (V912) -> fun (V913) -> fun (V914) -> {'Core.Core.DeterminingArg', V903, V904, V911, V912, V913, V914} end end end end))))(V910)) end, fun (V932) -> {'Prelude.Types.Right', V906} end)), ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V907)))), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V908)))); {'Core.Core.UnsolvedHoles', V933} -> begin (V937 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V934) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V935) -> fun (V936) -> ('dn--un--resolved_HasNames_Name'(V0, V935, V936)) end end, V934)) end, V933, []))), ((begin (V953 = fun (V948) -> fun (V949) -> fun (V950) -> fun (V951) -> fun (V952) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V950, V951, V952)) end end end end end), fun (V954) -> fun (V955) -> ((((V953('erased'))('erased'))(V954))(V955)) end end end((begin (V945 = fun (V939) -> fun (V940) -> fun (V941) -> fun (V942) -> case V942 of {'Prelude.Types.Left', V943} -> {'Prelude.Types.Left', V943}; {'Prelude.Types.Right', V944} -> {'Prelude.Types.Right', (V941(V944))} end end end end end), fun (V946) -> fun (V947) -> ((((V945('erased'))('erased'))(V946))(V947)) end end end(fun (V938) -> {'Core.Core.UnsolvedHoles', V938} end))))(V937)) end; {'Core.Core.CantInferArgType', V956, V957, V958, V959, V960, V961} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V962 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V958))), ((begin (V981 = fun (V976) -> fun (V977) -> fun (V978) -> fun (V979) -> fun (V980) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V978, V979, V980)) end end end end end), fun (V982) -> fun (V983) -> ((((V981('erased'))('erased'))(V982))(V983)) end end end((begin (V973 = fun (V967) -> fun (V968) -> fun (V969) -> fun (V970) -> case V970 of {'Prelude.Types.Left', V971} -> {'Prelude.Types.Left', V971}; {'Prelude.Types.Right', V972} -> {'Prelude.Types.Right', (V969(V972))} end end end end end), fun (V974) -> fun (V975) -> ((((V973('erased'))('erased'))(V974))(V975)) end end end(fun (V963) -> fun (V964) -> fun (V965) -> fun (V966) -> {'Core.Core.CantInferArgType', V956, V957, V963, V964, V965, V966} end end end end))))(V962)) end, fun (V984) -> ('dn--un--resolved_HasNames_Name'(V0, V959, V984)) end)), fun (V985) -> ('dn--un--resolved_HasNames_Name'(V0, V960, V985)) end)), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V961)))); {'Core.Core.SolvedNamedHole', V986, V987, V988, V989, V990} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V991 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V988))), ((begin (V1009 = fun (V1004) -> fun (V1005) -> fun (V1006) -> fun (V1007) -> fun (V1008) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1006, V1007, V1008)) end end end end end), fun (V1010) -> fun (V1011) -> ((((V1009('erased'))('erased'))(V1010))(V1011)) end end end((begin (V1001 = fun (V995) -> fun (V996) -> fun (V997) -> fun (V998) -> case V998 of {'Prelude.Types.Left', V999} -> {'Prelude.Types.Left', V999}; {'Prelude.Types.Right', V1000} -> {'Prelude.Types.Right', (V997(V1000))} end end end end end), fun (V1002) -> fun (V1003) -> ((((V1001('erased'))('erased'))(V1002))(V1003)) end end end(fun (V992) -> fun (V993) -> fun (V994) -> {'Core.Core.SolvedNamedHole', V986, V987, V992, V993, V994} end end end))))(V991)) end, fun (V1012) -> ('dn--un--resolved_HasNames_Name'(V0, V989, V1012)) end)), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V990)))); {'Core.Core.VisibilityError', V1013, V1014, V1015, V1016, V1017} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V1019 = fun (V1018) -> ('dn--un--resolved_HasNames_Name'(V0, V1015, V1018)) end), ((begin (V1037 = fun (V1032) -> fun (V1033) -> fun (V1034) -> fun (V1035) -> fun (V1036) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1034, V1035, V1036)) end end end end end), fun (V1038) -> fun (V1039) -> ((((V1037('erased'))('erased'))(V1038))(V1039)) end end end((begin (V1029 = fun (V1023) -> fun (V1024) -> fun (V1025) -> fun (V1026) -> case V1026 of {'Prelude.Types.Left', V1027} -> {'Prelude.Types.Left', V1027}; {'Prelude.Types.Right', V1028} -> {'Prelude.Types.Right', (V1025(V1028))} end end end end end), fun (V1030) -> fun (V1031) -> ((((V1029('erased'))('erased'))(V1030))(V1031)) end end end(fun (V1020) -> fun (V1021) -> fun (V1022) -> {'Core.Core.VisibilityError', V1013, V1014, V1020, V1021, V1022} end end end))))(V1019)) end, fun (V1040) -> {'Prelude.Types.Right', V1016} end)), fun (V1041) -> ('dn--un--resolved_HasNames_Name'(V0, V1017, V1041)) end)); {'Core.Core.NonLinearPattern', V1042, V1043} -> begin (V1045 = fun (V1044) -> ('dn--un--resolved_HasNames_Name'(V0, V1043, V1044)) end), ((begin (V1061 = fun (V1056) -> fun (V1057) -> fun (V1058) -> fun (V1059) -> fun (V1060) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1058, V1059, V1060)) end end end end end), fun (V1062) -> fun (V1063) -> ((((V1061('erased'))('erased'))(V1062))(V1063)) end end end((begin (V1053 = fun (V1047) -> fun (V1048) -> fun (V1049) -> fun (V1050) -> case V1050 of {'Prelude.Types.Left', V1051} -> {'Prelude.Types.Left', V1051}; {'Prelude.Types.Right', V1052} -> {'Prelude.Types.Right', (V1049(V1052))} end end end end end), fun (V1054) -> fun (V1055) -> ((((V1053('erased'))('erased'))(V1054))(V1055)) end end end(fun (V1046) -> {'Core.Core.NonLinearPattern', V1042, V1046} end))))(V1045)) end; {'Core.Core.BadPattern', V1064, V1065} -> begin (V1067 = fun (V1066) -> ('dn--un--resolved_HasNames_Name'(V0, V1065, V1066)) end), ((begin (V1083 = fun (V1078) -> fun (V1079) -> fun (V1080) -> fun (V1081) -> fun (V1082) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1080, V1081, V1082)) end end end end end), fun (V1084) -> fun (V1085) -> ((((V1083('erased'))('erased'))(V1084))(V1085)) end end end((begin (V1075 = fun (V1069) -> fun (V1070) -> fun (V1071) -> fun (V1072) -> case V1072 of {'Prelude.Types.Left', V1073} -> {'Prelude.Types.Left', V1073}; {'Prelude.Types.Right', V1074} -> {'Prelude.Types.Right', (V1071(V1074))} end end end end end), fun (V1076) -> fun (V1077) -> ((((V1075('erased'))('erased'))(V1076))(V1077)) end end end(fun (V1068) -> {'Core.Core.BadPattern', V1064, V1068} end))))(V1067)) end; {'Core.Core.NoDeclaration', V1086, V1087} -> begin (V1089 = fun (V1088) -> ('dn--un--resolved_HasNames_Name'(V0, V1087, V1088)) end), ((begin (V1105 = fun (V1100) -> fun (V1101) -> fun (V1102) -> fun (V1103) -> fun (V1104) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1102, V1103, V1104)) end end end end end), fun (V1106) -> fun (V1107) -> ((((V1105('erased'))('erased'))(V1106))(V1107)) end end end((begin (V1097 = fun (V1091) -> fun (V1092) -> fun (V1093) -> fun (V1094) -> case V1094 of {'Prelude.Types.Left', V1095} -> {'Prelude.Types.Left', V1095}; {'Prelude.Types.Right', V1096} -> {'Prelude.Types.Right', (V1093(V1096))} end end end end end), fun (V1098) -> fun (V1099) -> ((((V1097('erased'))('erased'))(V1098))(V1099)) end end end(fun (V1090) -> {'Core.Core.NoDeclaration', V1086, V1090} end))))(V1089)) end; {'Core.Core.AlreadyDefined', V1108, V1109} -> begin (V1111 = fun (V1110) -> ('dn--un--resolved_HasNames_Name'(V0, V1109, V1110)) end), ((begin (V1127 = fun (V1122) -> fun (V1123) -> fun (V1124) -> fun (V1125) -> fun (V1126) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1124, V1125, V1126)) end end end end end), fun (V1128) -> fun (V1129) -> ((((V1127('erased'))('erased'))(V1128))(V1129)) end end end((begin (V1119 = fun (V1113) -> fun (V1114) -> fun (V1115) -> fun (V1116) -> case V1116 of {'Prelude.Types.Left', V1117} -> {'Prelude.Types.Left', V1117}; {'Prelude.Types.Right', V1118} -> {'Prelude.Types.Right', (V1115(V1118))} end end end end end), fun (V1120) -> fun (V1121) -> ((((V1119('erased'))('erased'))(V1120))(V1121)) end end end(fun (V1112) -> {'Core.Core.AlreadyDefined', V1108, V1112} end))))(V1111)) end; {'Core.Core.NotFunctionType', V1130, V1131, V1132, V1133} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1134 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V1132))), ((begin (V1151 = fun (V1146) -> fun (V1147) -> fun (V1148) -> fun (V1149) -> fun (V1150) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1148, V1149, V1150)) end end end end end), fun (V1152) -> fun (V1153) -> ((((V1151('erased'))('erased'))(V1152))(V1153)) end end end((begin (V1143 = fun (V1137) -> fun (V1138) -> fun (V1139) -> fun (V1140) -> case V1140 of {'Prelude.Types.Left', V1141} -> {'Prelude.Types.Left', V1141}; {'Prelude.Types.Right', V1142} -> {'Prelude.Types.Right', (V1139(V1142))} end end end end end), fun (V1144) -> fun (V1145) -> ((((V1143('erased'))('erased'))(V1144))(V1145)) end end end(fun (V1135) -> fun (V1136) -> {'Core.Core.NotFunctionType', V1130, V1131, V1135, V1136} end end))))(V1134)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V0, V1133)))); {'Core.Core.RewriteNoChange', V1154, V1155, V1156, V1157, V1158} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V1159 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V1156))), ((begin (V1177 = fun (V1172) -> fun (V1173) -> fun (V1174) -> fun (V1175) -> fun (V1176) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1174, V1175, V1176)) end end end end end), fun (V1178) -> fun (V1179) -> ((((V1177('erased'))('erased'))(V1178))(V1179)) end end end((begin (V1169 = fun (V1163) -> fun (V1164) -> fun (V1165) -> fun (V1166) -> case V1166 of {'Prelude.Types.Left', V1167} -> {'Prelude.Types.Left', V1167}; {'Prelude.Types.Right', V1168} -> {'Prelude.Types.Right', (V1165(V1168))} end end end end end), fun (V1170) -> fun (V1171) -> ((((V1169('erased'))('erased'))(V1170))(V1171)) end end end(fun (V1160) -> fun (V1161) -> fun (V1162) -> {'Core.Core.RewriteNoChange', V1154, V1155, V1160, V1161, V1162} end end end))))(V1159)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V0, V1157)))), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V1158)))); {'Core.Core.NotRewriteRule', V1180, V1181, V1182, V1183} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1184 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V1182))), ((begin (V1201 = fun (V1196) -> fun (V1197) -> fun (V1198) -> fun (V1199) -> fun (V1200) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1198, V1199, V1200)) end end end end end), fun (V1202) -> fun (V1203) -> ((((V1201('erased'))('erased'))(V1202))(V1203)) end end end((begin (V1193 = fun (V1187) -> fun (V1188) -> fun (V1189) -> fun (V1190) -> case V1190 of {'Prelude.Types.Left', V1191} -> {'Prelude.Types.Left', V1191}; {'Prelude.Types.Right', V1192} -> {'Prelude.Types.Right', (V1189(V1192))} end end end end end), fun (V1194) -> fun (V1195) -> ((((V1193('erased'))('erased'))(V1194))(V1195)) end end end(fun (V1185) -> fun (V1186) -> {'Core.Core.NotRewriteRule', V1180, V1181, V1185, V1186} end end))))(V1184)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V0, V1183)))); {'Core.Core.CaseCompile', V1204, V1205, V1206} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1208 = fun (V1207) -> ('dn--un--resolved_HasNames_Name'(V0, V1205, V1207)) end), ((begin (V1225 = fun (V1220) -> fun (V1221) -> fun (V1222) -> fun (V1223) -> fun (V1224) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1222, V1223, V1224)) end end end end end), fun (V1226) -> fun (V1227) -> ((((V1225('erased'))('erased'))(V1226))(V1227)) end end end((begin (V1217 = fun (V1211) -> fun (V1212) -> fun (V1213) -> fun (V1214) -> case V1214 of {'Prelude.Types.Left', V1215} -> {'Prelude.Types.Left', V1215}; {'Prelude.Types.Right', V1216} -> {'Prelude.Types.Right', (V1213(V1216))} end end end end end), fun (V1218) -> fun (V1219) -> ((((V1217('erased'))('erased'))(V1218))(V1219)) end end end(fun (V1209) -> fun (V1210) -> {'Core.Core.CaseCompile', V1204, V1209, V1210} end end))))(V1208)) end, ('dn--un--resolved_HasNames_CaseError'(V0, V1206)))); {'Core.Core.MatchTooSpecific', V1228, V1229, V1230, V1231} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1232 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V1230))), ((begin (V1249 = fun (V1244) -> fun (V1245) -> fun (V1246) -> fun (V1247) -> fun (V1248) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1246, V1247, V1248)) end end end end end), fun (V1250) -> fun (V1251) -> ((((V1249('erased'))('erased'))(V1250))(V1251)) end end end((begin (V1241 = fun (V1235) -> fun (V1236) -> fun (V1237) -> fun (V1238) -> case V1238 of {'Prelude.Types.Left', V1239} -> {'Prelude.Types.Left', V1239}; {'Prelude.Types.Right', V1240} -> {'Prelude.Types.Right', (V1237(V1240))} end end end end end), fun (V1242) -> fun (V1243) -> ((((V1241('erased'))('erased'))(V1242))(V1243)) end end end(fun (V1233) -> fun (V1234) -> {'Core.Core.MatchTooSpecific', V1228, V1229, V1233, V1234} end end))))(V1232)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V0, V1231)))); {'Core.Core.BadDotPattern', V1252, V1253, V1254, V1255, V1256, V1257} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V1258 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V1254))), ((begin (V1277 = fun (V1272) -> fun (V1273) -> fun (V1274) -> fun (V1275) -> fun (V1276) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1274, V1275, V1276)) end end end end end), fun (V1278) -> fun (V1279) -> ((((V1277('erased'))('erased'))(V1278))(V1279)) end end end((begin (V1269 = fun (V1263) -> fun (V1264) -> fun (V1265) -> fun (V1266) -> case V1266 of {'Prelude.Types.Left', V1267} -> {'Prelude.Types.Left', V1267}; {'Prelude.Types.Right', V1268} -> {'Prelude.Types.Right', (V1265(V1268))} end end end end end), fun (V1270) -> fun (V1271) -> ((((V1269('erased'))('erased'))(V1270))(V1271)) end end end(fun (V1259) -> fun (V1260) -> fun (V1261) -> fun (V1262) -> {'Core.Core.BadDotPattern', V1252, V1253, V1259, V1260, V1261, V1262} end end end end))))(V1258)) end, fun (V1280) -> {'Prelude.Types.Right', V1255} end)), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V1256)))), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V1257)))); {'Core.Core.BadImplicit', V1281, V1282} -> fun (V1283) -> {'Prelude.Types.Right', {'Core.Core.BadImplicit', V1281, V1282}} end; {'Core.Core.BadRunElab', V1284, V1285, V1286, V1287, V1288} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V1289 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V1286))), ((begin (V1307 = fun (V1302) -> fun (V1303) -> fun (V1304) -> fun (V1305) -> fun (V1306) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1304, V1305, V1306)) end end end end end), fun (V1308) -> fun (V1309) -> ((((V1307('erased'))('erased'))(V1308))(V1309)) end end end((begin (V1299 = fun (V1293) -> fun (V1294) -> fun (V1295) -> fun (V1296) -> case V1296 of {'Prelude.Types.Left', V1297} -> {'Prelude.Types.Left', V1297}; {'Prelude.Types.Right', V1298} -> {'Prelude.Types.Right', (V1295(V1298))} end end end end end), fun (V1300) -> fun (V1301) -> ((((V1299('erased'))('erased'))(V1300))(V1301)) end end end(fun (V1290) -> fun (V1291) -> fun (V1292) -> {'Core.Core.BadRunElab', V1284, V1285, V1290, V1291, V1292} end end end))))(V1289)) end, ('dn--un--resolved_HasNames_(Term $vars)'(V0, V1287)))), fun (V1310) -> {'Prelude.Types.Right', V1288} end)); {'Core.Core.RunElabFail', V1311} -> begin (V1312 = ('dn--un--resolved_HasNames_Error'(V0, V1311))), ((begin (V1328 = fun (V1323) -> fun (V1324) -> fun (V1325) -> fun (V1326) -> fun (V1327) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1325, V1326, V1327)) end end end end end), fun (V1329) -> fun (V1330) -> ((((V1328('erased'))('erased'))(V1329))(V1330)) end end end((begin (V1320 = fun (V1314) -> fun (V1315) -> fun (V1316) -> fun (V1317) -> case V1317 of {'Prelude.Types.Left', V1318} -> {'Prelude.Types.Left', V1318}; {'Prelude.Types.Right', V1319} -> {'Prelude.Types.Right', (V1316(V1319))} end end end end end), fun (V1321) -> fun (V1322) -> ((((V1320('erased'))('erased'))(V1321))(V1322)) end end end(fun (V1313) -> {'Core.Core.RunElabFail', V1313} end))))(V1312)) end; {'Core.Core.GenericMsg', V1331, V1332} -> fun (V1333) -> {'Prelude.Types.Right', {'Core.Core.GenericMsg', V1331, V1332}} end; {'Core.Core.TTCError', V1334} -> fun (V1335) -> {'Prelude.Types.Right', {'Core.Core.TTCError', V1334}} end; {'Core.Core.FileErr', V1336, V1337} -> fun (V1338) -> {'Prelude.Types.Right', {'Core.Core.FileErr', V1336, V1337}} end; {'Core.Core.CantFindPackage', V1339} -> fun (V1340) -> {'Prelude.Types.Right', {'Core.Core.CantFindPackage', V1339}} end; {'Core.Core.LitFail', V1341} -> fun (V1342) -> {'Prelude.Types.Right', {'Core.Core.LitFail', V1341}} end; {'Core.Core.LexFail', V1343, V1344} -> fun (V1345) -> {'Prelude.Types.Right', {'Core.Core.LexFail', V1343, V1344}} end; {'Core.Core.ParseFail', V1346} -> fun (V1347) -> {'Prelude.Types.Right', {'Core.Core.ParseFail', V1346}} end; {'Core.Core.ModuleNotFound', V1348, V1349} -> fun (V1350) -> {'Prelude.Types.Right', {'Core.Core.ModuleNotFound', V1348, V1349}} end; {'Core.Core.CyclicImports', V1351} -> fun (V1352) -> {'Prelude.Types.Right', {'Core.Core.CyclicImports', V1351}} end; {'Core.Core.ForceNeeded'} -> fun (V1353) -> {'Prelude.Types.Right', {'Core.Core.ForceNeeded'}} end; {'Core.Core.InternalError', V1354} -> fun (V1355) -> {'Prelude.Types.Right', {'Core.Core.InternalError', V1354}} end; {'Core.Core.UserError', V1356} -> fun (V1357) -> {'Prelude.Types.Right', {'Core.Core.UserError', V1356}} end; {'Core.Core.NoForeignCC', V1358, V1359} -> fun (V1360) -> {'Prelude.Types.Right', {'Core.Core.NoForeignCC', V1358, V1359}} end; {'Core.Core.BadMultiline', V1361, V1362} -> fun (V1363) -> {'Prelude.Types.Right', {'Core.Core.BadMultiline', V1361, V1362}} end; {'Core.Core.Timeout', V1364} -> fun (V1365) -> {'Prelude.Types.Right', {'Core.Core.Timeout', V1364}} end; {'Core.Core.FailingDidNotFail', V1366} -> fun (V1367) -> {'Prelude.Types.Right', {'Core.Core.FailingDidNotFail', V1366}} end; {'Core.Core.FailingWrongError', V1368, V1369, V1370} -> begin (V1372 = ('Idris.Idris2.Core.Core':'un--traverseList1'(fun (V1371) -> ('dn--un--resolved_HasNames_Error'(V0, V1371)) end, V1370))), ((begin (V1388 = fun (V1383) -> fun (V1384) -> fun (V1385) -> fun (V1386) -> fun (V1387) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1385, V1386, V1387)) end end end end end), fun (V1389) -> fun (V1390) -> ((((V1388('erased'))('erased'))(V1389))(V1390)) end end end((begin (V1380 = fun (V1374) -> fun (V1375) -> fun (V1376) -> fun (V1377) -> case V1377 of {'Prelude.Types.Left', V1378} -> {'Prelude.Types.Left', V1378}; {'Prelude.Types.Right', V1379} -> {'Prelude.Types.Right', (V1376(V1379))} end end end end end), fun (V1381) -> fun (V1382) -> ((((V1380('erased'))('erased'))(V1381))(V1382)) end end end(fun (V1373) -> {'Core.Core.FailingWrongError', V1368, V1369, V1373} end))))(V1372)) end; {'Core.Core.InType', V1391, V1392, V1393} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1395 = fun (V1394) -> ('dn--un--resolved_HasNames_Name'(V0, V1392, V1394)) end), ((begin (V1412 = fun (V1407) -> fun (V1408) -> fun (V1409) -> fun (V1410) -> fun (V1411) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1409, V1410, V1411)) end end end end end), fun (V1413) -> fun (V1414) -> ((((V1412('erased'))('erased'))(V1413))(V1414)) end end end((begin (V1404 = fun (V1398) -> fun (V1399) -> fun (V1400) -> fun (V1401) -> case V1401 of {'Prelude.Types.Left', V1402} -> {'Prelude.Types.Left', V1402}; {'Prelude.Types.Right', V1403} -> {'Prelude.Types.Right', (V1400(V1403))} end end end end end), fun (V1405) -> fun (V1406) -> ((((V1404('erased'))('erased'))(V1405))(V1406)) end end end(fun (V1396) -> fun (V1397) -> {'Core.Core.InType', V1391, V1396, V1397} end end))))(V1395)) end, ('dn--un--resolved_HasNames_Error'(V0, V1393)))); {'Core.Core.InCon', V1415, V1416, V1417} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1419 = fun (V1418) -> ('dn--un--resolved_HasNames_Name'(V0, V1416, V1418)) end), ((begin (V1436 = fun (V1431) -> fun (V1432) -> fun (V1433) -> fun (V1434) -> fun (V1435) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1433, V1434, V1435)) end end end end end), fun (V1437) -> fun (V1438) -> ((((V1436('erased'))('erased'))(V1437))(V1438)) end end end((begin (V1428 = fun (V1422) -> fun (V1423) -> fun (V1424) -> fun (V1425) -> case V1425 of {'Prelude.Types.Left', V1426} -> {'Prelude.Types.Left', V1426}; {'Prelude.Types.Right', V1427} -> {'Prelude.Types.Right', (V1424(V1427))} end end end end end), fun (V1429) -> fun (V1430) -> ((((V1428('erased'))('erased'))(V1429))(V1430)) end end end(fun (V1420) -> fun (V1421) -> {'Core.Core.InCon', V1415, V1420, V1421} end end))))(V1419)) end, ('dn--un--resolved_HasNames_Error'(V0, V1417)))); {'Core.Core.InLHS', V1439, V1440, V1441} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1443 = fun (V1442) -> ('dn--un--resolved_HasNames_Name'(V0, V1440, V1442)) end), ((begin (V1460 = fun (V1455) -> fun (V1456) -> fun (V1457) -> fun (V1458) -> fun (V1459) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1457, V1458, V1459)) end end end end end), fun (V1461) -> fun (V1462) -> ((((V1460('erased'))('erased'))(V1461))(V1462)) end end end((begin (V1452 = fun (V1446) -> fun (V1447) -> fun (V1448) -> fun (V1449) -> case V1449 of {'Prelude.Types.Left', V1450} -> {'Prelude.Types.Left', V1450}; {'Prelude.Types.Right', V1451} -> {'Prelude.Types.Right', (V1448(V1451))} end end end end end), fun (V1453) -> fun (V1454) -> ((((V1452('erased'))('erased'))(V1453))(V1454)) end end end(fun (V1444) -> fun (V1445) -> {'Core.Core.InLHS', V1439, V1444, V1445} end end))))(V1443)) end, ('dn--un--resolved_HasNames_Error'(V0, V1441)))); {'Core.Core.InRHS', V1463, V1464, V1465} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1467 = fun (V1466) -> ('dn--un--resolved_HasNames_Name'(V0, V1464, V1466)) end), ((begin (V1484 = fun (V1479) -> fun (V1480) -> fun (V1481) -> fun (V1482) -> fun (V1483) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1481, V1482, V1483)) end end end end end), fun (V1485) -> fun (V1486) -> ((((V1484('erased'))('erased'))(V1485))(V1486)) end end end((begin (V1476 = fun (V1470) -> fun (V1471) -> fun (V1472) -> fun (V1473) -> case V1473 of {'Prelude.Types.Left', V1474} -> {'Prelude.Types.Left', V1474}; {'Prelude.Types.Right', V1475} -> {'Prelude.Types.Right', (V1472(V1475))} end end end end end), fun (V1477) -> fun (V1478) -> ((((V1476('erased'))('erased'))(V1477))(V1478)) end end end(fun (V1468) -> fun (V1469) -> {'Core.Core.InRHS', V1463, V1468, V1469} end end))))(V1467)) end, ('dn--un--resolved_HasNames_Error'(V0, V1465)))); {'Core.Core.MaybeMisspelling', V1487, V1488} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1489 = ('dn--un--resolved_HasNames_Error'(V0, V1487))), ((begin (V1506 = fun (V1501) -> fun (V1502) -> fun (V1503) -> fun (V1504) -> fun (V1505) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1503, V1504, V1505)) end end end end end), fun (V1507) -> fun (V1508) -> ((((V1506('erased'))('erased'))(V1507))(V1508)) end end end((begin (V1498 = fun (V1492) -> fun (V1493) -> fun (V1494) -> fun (V1495) -> case V1495 of {'Prelude.Types.Left', V1496} -> {'Prelude.Types.Left', V1496}; {'Prelude.Types.Right', V1497} -> {'Prelude.Types.Right', (V1494(V1497))} end end end end end), fun (V1499) -> fun (V1500) -> ((((V1498('erased'))('erased'))(V1499))(V1500)) end end end(fun (V1490) -> fun (V1491) -> {'Core.Core.MaybeMisspelling', V1490, V1491} end end))))(V1489)) end, fun (V1509) -> {'Prelude.Types.Right', V1488} end)); {'Core.Core.WarningAsError', V1510} -> begin (V1511 = ('dn--un--resolved_HasNames_Warning'(V0, V1510))), ((begin (V1527 = fun (V1522) -> fun (V1523) -> fun (V1524) -> fun (V1525) -> fun (V1526) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1524, V1525, V1526)) end end end end end), fun (V1528) -> fun (V1529) -> ((((V1527('erased'))('erased'))(V1528))(V1529)) end end end((begin (V1519 = fun (V1513) -> fun (V1514) -> fun (V1515) -> fun (V1516) -> case V1516 of {'Prelude.Types.Left', V1517} -> {'Prelude.Types.Left', V1517}; {'Prelude.Types.Right', V1518} -> {'Prelude.Types.Right', (V1515(V1518))} end end end end end), fun (V1520) -> fun (V1521) -> ((((V1519('erased'))('erased'))(V1520))(V1521)) end end end(fun (V1512) -> {'Core.Core.WarningAsError', V1512} end))))(V1511)) end end.
'dn--un--resolved_HasNames_Def'(V0, V1) -> case V1 of {'Core.Context.Context.PMDef', V2, V3, V4, V5, V6} -> begin (V7 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V4))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V26 = begin (V12 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V5))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V25 = begin (V18 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V17) -> ('nested--13411-9955--in--un--resolvedNamesPat'(V6, V3, V5, V4, V2, V0, V17)) end, V6, []))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', {'Core.Context.Context.PMDef', V2, V3, V11, V16, V22}} end), V24 end(V19)) end end end end), V25 end(V13)) end end end end), V26 end(V8)) end end end end; {'Core.Context.Context.TCon', V27, V28, V29, V30, V31, V32, V33, V34} -> begin (V37 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V35) -> fun (V36) -> ('dn--un--resolved_HasNames_Name'(V0, V35, V36)) end end, V32, []))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V51 = begin (V44 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V42) -> fun (V43) -> ('dn--un--resolved_HasNames_Name'(V0, V42, V43)) end end, V33, []))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V50 = fun (V49) -> {'Prelude.Types.Right', {'Core.Context.Context.TCon', V27, V28, V29, V30, V31, V41, V48, V34}} end), V50 end(V45)) end end end end), V51 end(V38)) end end end end; {'Core.Context.Context.BySearch', V52, V53, V54} -> begin (V56 = fun (V55) -> ('dn--un--resolved_HasNames_Name'(V0, V54, V55)) end), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V62 = fun (V61) -> {'Prelude.Types.Right', {'Core.Context.Context.BySearch', V52, V53, V60}} end), V62 end(V57)) end end end end; {'Core.Context.Context.Guess', V63, V64, V65} -> begin (V66 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V63))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V72 = fun (V71) -> {'Prelude.Types.Right', {'Core.Context.Context.Guess', V70, V64, V65}} end), V72 end(V67)) end end end end; _ -> fun (V73) -> {'Prelude.Types.Right', V1} end end.
'dn--un--resolved_HasNames_Covering'(V0, V1) -> case V1 of {'Core.TT.IsCovering'} -> fun (V2) -> {'Prelude.Types.Right', {'Core.TT.IsCovering'}} end; {'Core.TT.MissingCases', V3} -> begin (V5 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V4)) end, V3, []))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', {'Core.TT.MissingCases', V9}} end), V11 end(V6)) end end end end; {'Core.TT.NonCoveringCall', V12} -> begin (V15 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V13) -> fun (V14) -> ('dn--un--resolved_HasNames_Name'(V0, V13, V14)) end end, V12, []))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = fun (V20) -> {'Prelude.Types.Right', {'Core.TT.NonCoveringCall', V19}} end), V21 end(V16)) end end end end end.
'dn--un--resolved_HasNames_Clause'(V0, V1) -> case V1 of {'Core.Context.Context.MkClause', V2, V3, V4, V5} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V6) -> {'Prelude.Types.Right', fun (V7) -> fun (V8) -> fun (V9) -> {'Core.Context.Context.MkClause', V2, V7, V8, V9} end end end} end, ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V3)))), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V4)))), ('dn--un--resolved_HasNames_(Term $vars)'(V0, V5)))) end.
'dn--un--resolved_HasNames_CaseError'(V0, V1) -> case V1 of {'Core.Core.DifferingArgNumbers'} -> fun (V2) -> {'Prelude.Types.Right', {'Core.Core.DifferingArgNumbers'}} end; {'Core.Core.DifferingTypes'} -> fun (V3) -> {'Prelude.Types.Right', {'Core.Core.DifferingTypes'}} end; {'Core.Core.MatchErased', V4} -> case V4 of {'Builtin.DPair.MkDPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> begin (V9 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V7))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V21 = begin (V14 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V8))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', {'Core.Core.MatchErased', {'Builtin.DPair.MkDPair', V5, {'Builtin.MkPair', V13, V18}}}} end), V20 end(V15)) end end end end), V21 end(V10)) end end end end end end; {'Core.Core.NotFullyApplied', V22} -> begin (V24 = fun (V23) -> ('dn--un--resolved_HasNames_Name'(V0, V22, V23)) end), ((begin (V40 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V37, V38, V39)) end end end end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end((begin (V32 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> {'Prelude.Types.Right', (V28(V31))} end end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V25) -> {'Core.Core.NotFullyApplied', V25} end))))(V24)) end; {'Core.Core.UnknownType'} -> fun (V43) -> {'Prelude.Types.Right', {'Core.Core.UnknownType'}} end end.
'dn--un--resolved_HasNames_(Term $vars)'(V0, V1) -> case V1 of {'Core.TT.Ref', V2, V3, V4} -> fun (V5) -> case ('un--getNameID'(V4, V0)) of {'Prelude.Types.Just', V6} -> {'Prelude.Types.Right', {'Core.TT.Ref', V2, V3, {'Core.Name.Resolved', V6}}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Core.TT.Ref', V2, V3, V4}} end end; {'Core.TT.Meta', V7, V8, V9, V10} -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V11)) end, V10, []))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V19 = fun (V17) -> case ('un--getNameID'(V8, V0)) of {'Prelude.Types.Just', V18} -> {'Prelude.Types.Right', {'Core.TT.Meta', V7, V8, V18, V16}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Core.TT.Meta', V7, V8, V9, V16}} end end), V19 end(V13)) end end end end; {'Core.TT.Bind', V20, V21, V22, V23} -> begin (V25 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V24) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V24)) end, V22))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V37 = begin (V30 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V23))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V36 = fun (V35) -> {'Prelude.Types.Right', {'Core.TT.Bind', V20, V21, V29, V34}} end), V36 end(V31)) end end end end), V37 end(V26)) end end end end; {'Core.TT.App', V38, V39, V40} -> begin (V41 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V39))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V53 = begin (V46 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V40))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V52 = fun (V51) -> {'Prelude.Types.Right', {'Core.TT.App', V38, V45, V50}} end), V52 end(V47)) end end end end), V53 end(V42)) end end end end; {'Core.TT.As', V54, V55, V56, V57} -> begin (V58 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V56))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V70 = begin (V63 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V57))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V69 = fun (V68) -> {'Prelude.Types.Right', {'Core.TT.As', V54, V55, V62, V67}} end), V69 end(V64)) end end end end), V70 end(V59)) end end end end; {'Core.TT.TDelayed', V71, V72, V73} -> begin (V74 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V73))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V80 = fun (V79) -> {'Prelude.Types.Right', {'Core.TT.TDelayed', V71, V72, V78}} end), V80 end(V75)) end end end end; {'Core.TT.TDelay', V81, V82, V83, V84} -> begin (V85 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V83))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V97 = begin (V90 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V84))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V96 = fun (V95) -> {'Prelude.Types.Right', {'Core.TT.TDelay', V81, V82, V89, V94}} end), V96 end(V91)) end end end end), V97 end(V86)) end end end end; {'Core.TT.TForce', V98, V99, V100} -> begin (V101 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V100))), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V107 = fun (V106) -> {'Prelude.Types.Right', {'Core.TT.TForce', V98, V99, V105}} end), V107 end(V102)) end end end end; {'Core.TT.TType', V108, V109} -> fun (V110) -> case ('un--getNameID'(V109, V0)) of {'Prelude.Types.Just', V111} -> {'Prelude.Types.Right', {'Core.TT.TType', V108, {'Core.Name.Resolved', V111}}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Core.TT.TType', V108, V109}} end end; _ -> fun (V112) -> {'Prelude.Types.Right', V1} end end.
'dn--un--resolved_HasNames_(NameMap $a)'(V0, V1) -> ('nested--14061-10446--in--un--insertAll'(V1, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V1)))).
'dn--un--resolved_HasNames_(Maybe $a)'(V0, V1, V2) -> case V2 of {'Prelude.Types.Nothing'} -> fun (V3) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V4} -> begin (V7 = case V0 of {'Core.Context.dn--un--__mkHasNames', V5, V6} -> ((V6(V1))(V4)) end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V11}} end), V13 end(V8)) end end end end end.
'dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseTree.Case', V2, V3, V4, V5} -> begin (V6 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V19 = begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> ('dn--un--resolved_HasNames_(CaseAlt $vars)'(V0, V11)) end, V5, []))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = fun (V17) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.Case', V2, V3, V10, V16}} end), V18 end(V13)) end end end end), V19 end(V7)) end end end end; {'Core.Case.CaseTree.STerm', V20, V21} -> begin (V22 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V21))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V28 = fun (V27) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.STerm', V20, V26}} end), V28 end(V23)) end end end end; _ -> fun (V29) -> {'Prelude.Types.Right', V1} end end.
'dn--un--resolved_HasNames_(CaseAlt $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseTree.ConCase', V2, V3, V4, V5} -> begin (V6 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V13 = fun (V11) -> case ('un--getNameID'(V2, V0)) of {'Prelude.Types.Just', V12} -> {'Prelude.Types.Right', {'Core.Case.CaseTree.ConCase', {'Core.Name.Resolved', V12}, V3, V4, V10}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Core.Case.CaseTree.ConCase', V2, V3, V4, V10}} end end), V13 end(V7)) end end end end; {'Core.Case.CaseTree.DelayCase', V14, V15, V16} -> begin (V17 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V16))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V23 = fun (V22) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.DelayCase', V14, V15, V21}} end), V23 end(V18)) end end end end; {'Core.Case.CaseTree.ConstCase', V24, V25} -> begin (V26 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V25))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.ConstCase', V24, V30}} end), V32 end(V27)) end end end end; {'Core.Case.CaseTree.DefaultCase', V33} -> begin (V34 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V33))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V40 = fun (V39) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.DefaultCase', V38}} end), V40 end(V35)) end end end end end.
'dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V1) -> case V1 of {'Core.Env.Nil'} -> fun (V2) -> {'Prelude.Types.Right', {'Core.Env.Nil'}} end; {'Core.Env.::', V3, V4} -> begin (V6 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V5) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V5)) end, V3))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V18 = begin (V11 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V4))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Core.Env.::', V10, V15}} end), V17 end(V12)) end end end end), V18 end(V7)) end end end end end.
'dn--un--full_HasNames_Warning'(V0, V1) -> case V1 of {'Core.Core.ParserWarning', V2, V3} -> fun (V4) -> {'Prelude.Types.Right', {'Core.Core.ParserWarning', V2, V3}} end; {'Core.Core.UnreachableClause', V5, V6, V7, V8} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V9 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V7))), ((begin (V26 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V23, V24, V25)) end end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end((begin (V18 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> {'Prelude.Types.Right', (V14(V17))} end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V10) -> fun (V11) -> {'Core.Core.UnreachableClause', V5, V6, V10, V11} end end))))(V9)) end, ('dn--un--full_HasNames_(Term $vars)'(V0, V8)))); {'Core.Core.ShadowingGlobalDefs', V29, V30} -> begin (V34 = ('Idris.Idris2.Core.Core':'un--traverseList1'(fun (V31) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V32) -> ('Idris.Idris2.Core.Core':'un--traverseList1'(fun (V33) -> ('dn--un--full_HasNames_Name'(V0, V33)) end, V32)) end, V31)) end, V30))), ((begin (V50 = fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V47, V48, V49)) end end end end end), fun (V51) -> fun (V52) -> ((((V50('erased'))('erased'))(V51))(V52)) end end end((begin (V42 = fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> {'Prelude.Types.Right', (V38(V41))} end end end end end), fun (V43) -> fun (V44) -> ((((V42('erased'))('erased'))(V43))(V44)) end end end(fun (V35) -> {'Core.Core.ShadowingGlobalDefs', V29, V35} end))))(V34)) end; {'Core.Core.ShadowingLocalBindings', V53, V54} -> fun (V55) -> {'Prelude.Types.Right', V1} end; {'Core.Core.Deprecated', V56, V57} -> begin (V80 = case V57 of {'Prelude.Types.Nothing'} -> fun (V58) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V59} -> begin (V61 = ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V60) -> ('dn--un--full_HasNames_Name'(V0, V60)) end, V59))), ((begin (V77 = fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V74, V75, V76)) end end end end end), fun (V78) -> fun (V79) -> ((((V77('erased'))('erased'))(V78))(V79)) end end end((begin (V69 = fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> {'Prelude.Types.Right', (V65(V68))} end end end end end), fun (V70) -> fun (V71) -> ((((V69('erased'))('erased'))(V70))(V71)) end end end(fun (V62) -> {'Prelude.Types.Just', V62} end))))(V61)) end end), ((begin (V96 = fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V93, V94, V95)) end end end end end), fun (V97) -> fun (V98) -> ((((V96('erased'))('erased'))(V97))(V98)) end end end((begin (V88 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> {'Prelude.Types.Right', (V84(V87))} end end end end end), fun (V89) -> fun (V90) -> ((((V88('erased'))('erased'))(V89))(V90)) end end end(fun (V81) -> {'Core.Core.Deprecated', V56, V81} end))))(V80)) end; {'Core.Core.GenericWarn', V99} -> fun (V100) -> {'Prelude.Types.Right', {'Core.Core.GenericWarn', V99}} end end.
'dn--un--full_HasNames_UConstraint'(V0, V1) -> case V1 of {'Core.Context.Context.ULT', V2, V3} -> begin (V4 = ('dn--un--full_HasNames_Name'(V0, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V16 = begin (V9 = ('dn--un--full_HasNames_Name'(V0, V3))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', {'Core.Context.Context.ULT', V8, V13}} end), V15 end(V10)) end end end end), V16 end(V5)) end end end end; {'Core.Context.Context.ULE', V17, V18} -> begin (V19 = ('dn--un--full_HasNames_Name'(V0, V17))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V31 = begin (V24 = ('dn--un--full_HasNames_Name'(V0, V18))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', {'Core.Context.Context.ULE', V23, V28}} end), V30 end(V25)) end end end end), V31 end(V20)) end end end end end.
'dn--un--full_HasNames_Transform'(V0, V1) -> case V1 of {'Core.Context.MkTransform', V2, V3, V4, V5, V6} -> begin (V7 = ('dn--un--full_HasNames_Name'(V0, V3))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V31 = begin (V12 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V4))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V30 = begin (V17 = ('dn--un--full_HasNames_(Term $vars)'(V0, V5))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V29 = begin (V22 = ('dn--un--full_HasNames_(Term $vars)'(V0, V6))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V28 = fun (V27) -> {'Prelude.Types.Right', {'Core.Context.MkTransform', V2, V11, V16, V21, V26}} end), V28 end(V23)) end end end end), V29 end(V18)) end end end end), V30 end(V13)) end end end end), V31 end(V8)) end end end end end.
'dn--un--full_HasNames_Totality'(V0, V1) -> case V1 of {'Core.TT.MkTotality', V2, V3} -> begin (V4 = ('dn--un--full_HasNames_Terminating'(V0, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V16 = begin (V9 = ('dn--un--full_HasNames_Covering'(V0, V3))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', {'Core.TT.MkTotality', V8, V13}} end), V15 end(V10)) end end end end), V16 end(V5)) end end end end end.
'dn--un--full_HasNames_Terminating'(V0, V1) -> case V1 of {'Core.TT.NotTerminating', V2} -> begin (V3 = ('dn--un--full_HasNames_PartialReason'(V0, V2))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V9 = fun (V8) -> {'Prelude.Types.Right', {'Core.TT.NotTerminating', V7}} end), V9 end(V4)) end end end end; _ -> fun (V10) -> {'Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames_SCCall'(V0, V1) -> begin (V4 = ('dn--un--full_HasNames_Name'(V0, case V1 of {'Core.Context.Context.MkSCCall', V2, V3} -> V2 end))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V12 = fun (V9) -> {'Prelude.Types.Right', case V1 of {'Core.Context.Context.MkSCCall', V10, V11} -> {'Core.Context.Context.MkSCCall', V8, V11} end} end), V12 end(V5)) end end end end.
'dn--un--full_HasNames_Pat'(V0, V1) -> case V1 of {'Core.Case.CaseTree.PAs', V2, V3, V4} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> {'Prelude.Types.Right', fun (V6) -> fun (V7) -> fun (V8) -> {'Core.Case.CaseTree.PAs', V6, V7, V8} end end end} end, fun (V9) -> {'Prelude.Types.Right', V2} end)), ('dn--un--full_HasNames_Name'(V0, V3)))), ('dn--un--full_HasNames_Pat'(V0, V4)))); {'Core.Case.CaseTree.PCon', V10, V11, V12, V13, V14} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V15) -> {'Prelude.Types.Right', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> {'Core.Case.CaseTree.PCon', V16, V17, V18, V19, V20} end end end end end} end, fun (V21) -> {'Prelude.Types.Right', V10} end)), ('dn--un--full_HasNames_Name'(V0, V11)))), fun (V22) -> {'Prelude.Types.Right', V12} end)), fun (V23) -> {'Prelude.Types.Right', V13} end)), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V24) -> ('dn--un--full_HasNames_Pat'(V0, V24)) end, V14, [])))); {'Core.Case.CaseTree.PTyCon', V25, V26, V27, V28} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V29) -> {'Prelude.Types.Right', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> {'Core.Case.CaseTree.PTyCon', V30, V31, V32, V33} end end end end} end, fun (V34) -> {'Prelude.Types.Right', V25} end)), ('dn--un--full_HasNames_Name'(V0, V26)))), fun (V35) -> {'Prelude.Types.Right', V27} end)), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V36) -> ('dn--un--full_HasNames_Pat'(V0, V36)) end, V28, [])))); {'Core.Case.CaseTree.PConst', V37, V38} -> fun (V39) -> {'Prelude.Types.Right', V1} end; {'Core.Case.CaseTree.PArrow', V40, V41, V42, V43} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V44) -> {'Prelude.Types.Right', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> {'Core.Case.CaseTree.PArrow', V45, V46, V47, V48} end end end end} end, fun (V49) -> {'Prelude.Types.Right', V40} end)), ('dn--un--full_HasNames_Name'(V0, V41)))), ('dn--un--full_HasNames_Pat'(V0, V42)))), ('dn--un--full_HasNames_Pat'(V0, V43)))); {'Core.Case.CaseTree.PDelay', V50, V51, V52, V53} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V54) -> {'Prelude.Types.Right', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> {'Core.Case.CaseTree.PDelay', V55, V56, V57, V58} end end end end} end, fun (V59) -> {'Prelude.Types.Right', V50} end)), fun (V60) -> {'Prelude.Types.Right', V51} end)), ('dn--un--full_HasNames_Pat'(V0, V52)))), ('dn--un--full_HasNames_Pat'(V0, V53)))); {'Core.Case.CaseTree.PLoc', V61, V62} -> begin (V63 = ('dn--un--full_HasNames_Name'(V0, V62))), ((begin (V79 = fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V76, V77, V78)) end end end end end), fun (V80) -> fun (V81) -> ((((V79('erased'))('erased'))(V80))(V81)) end end end((begin (V71 = fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> {'Prelude.Types.Right', (V67(V70))} end end end end end), fun (V72) -> fun (V73) -> ((((V71('erased'))('erased'))(V72))(V73)) end end end(fun (V64) -> {'Core.Case.CaseTree.PLoc', V61, V64} end))))(V63)) end; {'Core.Case.CaseTree.PUnmatchable', V82, V83} -> begin (V84 = ('dn--un--full_HasNames_(Term $vars)'(V0, V83))), ((begin (V100 = fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V97, V98, V99)) end end end end end), fun (V101) -> fun (V102) -> ((((V100('erased'))('erased'))(V101))(V102)) end end end((begin (V92 = fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> {'Prelude.Types.Right', (V88(V91))} end end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end(fun (V85) -> {'Core.Case.CaseTree.PUnmatchable', V82, V85} end))))(V84)) end end.
'dn--un--full_HasNames_PartialReason'(V0, V1) -> case V1 of {'Core.TT.NotStrictlyPositive'} -> fun (V2) -> {'Prelude.Types.Right', {'Core.TT.NotStrictlyPositive'}} end; {'Core.TT.BadCall', V3} -> begin (V5 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> ('dn--un--full_HasNames_Name'(V0, V4)) end, V3, []))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', {'Core.TT.BadCall', V9}} end), V11 end(V6)) end end end end; {'Core.TT.RecPath', V12} -> begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V13) -> ('dn--un--full_HasNames_Name'(V0, V13)) end, V12, []))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', {'Core.TT.RecPath', V18}} end), V20 end(V15)) end end end end end.
'dn--un--full_HasNames_Name'(V0, V1) -> case V1 of {'Core.Name.Resolved', V2} -> begin (V3 = ('un--lookupCtxtExact'({'Core.Name.Resolved', V2}, V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V32 = fun (V8) -> case V7 of {'Prelude.Types.Just', V9} -> {'Prelude.Types.Right', case V9 of {'Core.Context.Context.MkGlobalDef', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} -> V11 end}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Core.Name.Resolved', V2}} end end), V32 end(V4)) end end end end; _ -> fun (V33) -> {'Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames_GlobalDef'(V0, V1) -> begin (V24 = ('dn--un--full_HasNames_(Term $vars)'(V0, case V1 of {'Core.Context.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23} -> V4 end))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V201 = begin (V51 = ('dn--un--full_HasNames_Def'(V0, case V1 of {'Core.Context.Context.MkGlobalDef', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> V46 end))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V200 = begin (V78 = ('dn--un--full_HasNames_Totality'(V0, case V1 of {'Core.Context.Context.MkGlobalDef', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77} -> V66 end))), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V199 = begin (V109 = ('dn--un--full_HasNames_(Maybe $a)'({'Core.Context.dn--un--__mkHasNames', fun (V83) -> fun (V84) -> ('dn--un--full_HasNames_(NameMap $a)'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V85, V86)) end end}, V0, case V1 of {'Core.Context.Context.MkGlobalDef', V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108} -> V99 end))), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V198 = begin (V140 = ('dn--un--full_HasNames_(Maybe $a)'({'Core.Context.dn--un--__mkHasNames', fun (V114) -> fun (V115) -> ('dn--un--full_HasNames_(NameMap $a)'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V116, V117)) end end}, V0, case V1 of {'Core.Context.Context.MkGlobalDef', V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139} -> V131 end))), fun (V141) -> begin (V142 = (V140(V141))), case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> (begin (V197 = begin (V168 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V145) -> ('dn--un--full_HasNames_SCCall'(V0, V145)) end, case V1 of {'Core.Context.Context.MkGlobalDef', V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167} -> V166 end, []))), fun (V169) -> begin (V170 = (V168(V169))), case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> (begin (V196 = fun (V173) -> {'Prelude.Types.Right', case V1 of {'Core.Context.Context.MkGlobalDef', V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195} -> {'Core.Context.Context.MkGlobalDef', V174, V175, V28, V177, V178, V179, V180, V181, V182, V183, V82, V185, V113, V144, V188, V189, V190, V55, V192, V193, V172, V195} end} end), V196 end(V169)) end end end end), V197 end(V141)) end end end end), V198 end(V110)) end end end end), V199 end(V79)) end end end end), V200 end(V52)) end end end end), V201 end(V25)) end end end end.
'dn--un--full_HasNames_Error'(V0, V1) -> case V1 of {'Core.Core.Fatal', V2} -> begin (V3 = ('dn--un--full_HasNames_Error'(V0, V2))), ((begin (V19 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V16, V17, V18)) end end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end((begin (V11 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> {'Prelude.Types.Right', (V7(V10))} end end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V4) -> {'Core.Core.Fatal', V4} end))))(V3)) end; {'Core.Core.CantConvert', V22, V23, V24, V25, V26, V27} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V28 = ('dn--un--full_HasNames_((Env Term) $vars)'(V24, V25))), ((begin (V46 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V43, V44, V45)) end end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end((begin (V38 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> {'Prelude.Types.Right', (V34(V37))} end end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V29) -> fun (V30) -> fun (V31) -> {'Core.Core.CantConvert', V22, V23, V24, V29, V30, V31} end end end))))(V28)) end, ('dn--un--full_HasNames_(Term $vars)'(V24, V26)))), ('dn--un--full_HasNames_(Term $vars)'(V24, V27)))); {'Core.Core.CantSolveEq', V49, V50, V51, V52, V53, V54} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V55 = ('dn--un--full_HasNames_((Env Term) $vars)'(V51, V52))), ((begin (V73 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V70, V71, V72)) end end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end((begin (V65 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> {'Prelude.Types.Right', (V61(V64))} end end end end end), fun (V66) -> fun (V67) -> ((((V65('erased'))('erased'))(V66))(V67)) end end end(fun (V56) -> fun (V57) -> fun (V58) -> {'Core.Core.CantSolveEq', V49, V50, V51, V56, V57, V58} end end end))))(V55)) end, ('dn--un--full_HasNames_(Term $vars)'(V51, V53)))), ('dn--un--full_HasNames_(Term $vars)'(V51, V54)))); {'Core.Core.PatternVariableUnifies', V76, V77, V78, V79, V80, V81} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V82 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V79))), ((begin (V100 = fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V97, V98, V99)) end end end end end), fun (V101) -> fun (V102) -> ((((V100('erased'))('erased'))(V101))(V102)) end end end((begin (V92 = fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> {'Prelude.Types.Right', (V88(V91))} end end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end(fun (V83) -> fun (V84) -> fun (V85) -> {'Core.Core.PatternVariableUnifies', V76, V77, V78, V83, V84, V85} end end end))))(V82)) end, ('dn--un--full_HasNames_Name'(V0, V80)))), ('dn--un--full_HasNames_(Term $vars)'(V0, V81)))); {'Core.Core.CyclicMeta', V103, V104, V105, V106, V107} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V108 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V105))), ((begin (V126 = fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V123, V124, V125)) end end end end end), fun (V127) -> fun (V128) -> ((((V126('erased'))('erased'))(V127))(V128)) end end end((begin (V118 = fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> {'Prelude.Types.Right', (V114(V117))} end end end end end), fun (V119) -> fun (V120) -> ((((V118('erased'))('erased'))(V119))(V120)) end end end(fun (V109) -> fun (V110) -> fun (V111) -> {'Core.Core.CyclicMeta', V103, V104, V109, V110, V111} end end end))))(V108)) end, ('dn--un--full_HasNames_Name'(V0, V106)))), ('dn--un--full_HasNames_(Term $vars)'(V0, V107)))); {'Core.Core.WhenUnifying', V129, V130, V131, V132, V133, V134, V135} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V136 = ('dn--un--full_HasNames_((Env Term) $vars)'(V131, V132))), ((begin (V155 = fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V152, V153, V154)) end end end end end), fun (V156) -> fun (V157) -> ((((V155('erased'))('erased'))(V156))(V157)) end end end((begin (V147 = fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> {'Prelude.Types.Right', (V143(V146))} end end end end end), fun (V148) -> fun (V149) -> ((((V147('erased'))('erased'))(V148))(V149)) end end end(fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> {'Core.Core.WhenUnifying', V129, V130, V131, V137, V138, V139, V140} end end end end))))(V136)) end, ('dn--un--full_HasNames_(Term $vars)'(V131, V133)))), ('dn--un--full_HasNames_(Term $vars)'(V131, V134)))), ('dn--un--full_HasNames_Error'(V131, V135)))); {'Core.Core.ValidCase', V158, V159, V160, V161} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V162 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V160))), ((begin (V179 = fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V176, V177, V178)) end end end end end), fun (V180) -> fun (V181) -> ((((V179('erased'))('erased'))(V180))(V181)) end end end((begin (V171 = fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> case V168 of {'Prelude.Types.Left', V169} -> {'Prelude.Types.Left', V169}; {'Prelude.Types.Right', V170} -> {'Prelude.Types.Right', (V167(V170))} end end end end end), fun (V172) -> fun (V173) -> ((((V171('erased'))('erased'))(V172))(V173)) end end end(fun (V163) -> fun (V164) -> {'Core.Core.ValidCase', V158, V159, V163, V164} end end))))(V162)) end, ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V182) -> begin (V183 = ('dn--un--full_HasNames_(Term $vars)'(V0, V182))), ((begin (V199 = fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V196, V197, V198)) end end end end end), fun (V200) -> fun (V201) -> ((((V199('erased'))('erased'))(V200))(V201)) end end end((begin (V191 = fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> case V188 of {'Prelude.Types.Left', V189} -> {'Prelude.Types.Left', V189}; {'Prelude.Types.Right', V190} -> {'Prelude.Types.Right', (V187(V190))} end end end end end), fun (V192) -> fun (V193) -> ((((V191('erased'))('erased'))(V192))(V193)) end end end(fun (V184) -> {'Prelude.Types.Left', V184} end))))(V183)) end end end, fun () -> fun (V202) -> begin (V203 = ('dn--un--full_HasNames_Error'(V0, V202))), ((begin (V219 = fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V216, V217, V218)) end end end end end), fun (V220) -> fun (V221) -> ((((V219('erased'))('erased'))(V220))(V221)) end end end((begin (V211 = fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> case V208 of {'Prelude.Types.Left', V209} -> {'Prelude.Types.Left', V209}; {'Prelude.Types.Right', V210} -> {'Prelude.Types.Right', (V207(V210))} end end end end end), fun (V212) -> fun (V213) -> ((((V211('erased'))('erased'))(V212))(V213)) end end end(fun (V204) -> {'Prelude.Types.Right', V204} end))))(V203)) end end end, V161)))); {'Core.Core.UndefinedName', V222, V223} -> begin (V224 = ('dn--un--full_HasNames_Name'(V0, V223))), ((begin (V240 = fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V237, V238, V239)) end end end end end), fun (V241) -> fun (V242) -> ((((V240('erased'))('erased'))(V241))(V242)) end end end((begin (V232 = fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> case V229 of {'Prelude.Types.Left', V230} -> {'Prelude.Types.Left', V230}; {'Prelude.Types.Right', V231} -> {'Prelude.Types.Right', (V228(V231))} end end end end end), fun (V233) -> fun (V234) -> ((((V232('erased'))('erased'))(V233))(V234)) end end end(fun (V225) -> {'Core.Core.UndefinedName', V222, V225} end))))(V224)) end; {'Core.Core.InvisibleName', V243, V244, V245} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V246 = ('dn--un--full_HasNames_Name'(V0, V244))), ((begin (V263 = fun (V258) -> fun (V259) -> fun (V260) -> fun (V261) -> fun (V262) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V260, V261, V262)) end end end end end), fun (V264) -> fun (V265) -> ((((V263('erased'))('erased'))(V264))(V265)) end end end((begin (V255 = fun (V249) -> fun (V250) -> fun (V251) -> fun (V252) -> case V252 of {'Prelude.Types.Left', V253} -> {'Prelude.Types.Left', V253}; {'Prelude.Types.Right', V254} -> {'Prelude.Types.Right', (V251(V254))} end end end end end), fun (V256) -> fun (V257) -> ((((V255('erased'))('erased'))(V256))(V257)) end end end(fun (V247) -> fun (V248) -> {'Core.Core.InvisibleName', V243, V247, V248} end end))))(V246)) end, fun (V266) -> {'Prelude.Types.Right', V245} end)); {'Core.Core.BadTypeConType', V267, V268} -> begin (V269 = ('dn--un--full_HasNames_Name'(V0, V268))), ((begin (V285 = fun (V280) -> fun (V281) -> fun (V282) -> fun (V283) -> fun (V284) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V282, V283, V284)) end end end end end), fun (V286) -> fun (V287) -> ((((V285('erased'))('erased'))(V286))(V287)) end end end((begin (V277 = fun (V271) -> fun (V272) -> fun (V273) -> fun (V274) -> case V274 of {'Prelude.Types.Left', V275} -> {'Prelude.Types.Left', V275}; {'Prelude.Types.Right', V276} -> {'Prelude.Types.Right', (V273(V276))} end end end end end), fun (V278) -> fun (V279) -> ((((V277('erased'))('erased'))(V278))(V279)) end end end(fun (V270) -> {'Core.Core.BadTypeConType', V267, V270} end))))(V269)) end; {'Core.Core.BadDataConType', V288, V289, V290} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V291 = ('dn--un--full_HasNames_Name'(V0, V289))), ((begin (V308 = fun (V303) -> fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V305, V306, V307)) end end end end end), fun (V309) -> fun (V310) -> ((((V308('erased'))('erased'))(V309))(V310)) end end end((begin (V300 = fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> case V297 of {'Prelude.Types.Left', V298} -> {'Prelude.Types.Left', V298}; {'Prelude.Types.Right', V299} -> {'Prelude.Types.Right', (V296(V299))} end end end end end), fun (V301) -> fun (V302) -> ((((V300('erased'))('erased'))(V301))(V302)) end end end(fun (V292) -> fun (V293) -> {'Core.Core.BadDataConType', V288, V292, V293} end end))))(V291)) end, ('dn--un--full_HasNames_Name'(V0, V290)))); {'Core.Core.NotCovering', V311, V312, V313} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V314 = ('dn--un--full_HasNames_Name'(V0, V312))), ((begin (V331 = fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> fun (V330) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V328, V329, V330)) end end end end end), fun (V332) -> fun (V333) -> ((((V331('erased'))('erased'))(V332))(V333)) end end end((begin (V323 = fun (V317) -> fun (V318) -> fun (V319) -> fun (V320) -> case V320 of {'Prelude.Types.Left', V321} -> {'Prelude.Types.Left', V321}; {'Prelude.Types.Right', V322} -> {'Prelude.Types.Right', (V319(V322))} end end end end end), fun (V324) -> fun (V325) -> ((((V323('erased'))('erased'))(V324))(V325)) end end end(fun (V315) -> fun (V316) -> {'Core.Core.NotCovering', V311, V315, V316} end end))))(V314)) end, ('dn--un--full_HasNames_Covering'(V0, V313)))); {'Core.Core.NotTotal', V334, V335, V336} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V337 = ('dn--un--full_HasNames_Name'(V0, V335))), ((begin (V354 = fun (V349) -> fun (V350) -> fun (V351) -> fun (V352) -> fun (V353) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V351, V352, V353)) end end end end end), fun (V355) -> fun (V356) -> ((((V354('erased'))('erased'))(V355))(V356)) end end end((begin (V346 = fun (V340) -> fun (V341) -> fun (V342) -> fun (V343) -> case V343 of {'Prelude.Types.Left', V344} -> {'Prelude.Types.Left', V344}; {'Prelude.Types.Right', V345} -> {'Prelude.Types.Right', (V342(V345))} end end end end end), fun (V347) -> fun (V348) -> ((((V346('erased'))('erased'))(V347))(V348)) end end end(fun (V338) -> fun (V339) -> {'Core.Core.NotTotal', V334, V338, V339} end end))))(V337)) end, ('dn--un--full_HasNames_PartialReason'(V0, V336)))); {'Core.Core.LinearUsed', V357, V358, V359} -> begin (V360 = ('dn--un--full_HasNames_Name'(V0, V359))), ((begin (V376 = fun (V371) -> fun (V372) -> fun (V373) -> fun (V374) -> fun (V375) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V373, V374, V375)) end end end end end), fun (V377) -> fun (V378) -> ((((V376('erased'))('erased'))(V377))(V378)) end end end((begin (V368 = fun (V362) -> fun (V363) -> fun (V364) -> fun (V365) -> case V365 of {'Prelude.Types.Left', V366} -> {'Prelude.Types.Left', V366}; {'Prelude.Types.Right', V367} -> {'Prelude.Types.Right', (V364(V367))} end end end end end), fun (V369) -> fun (V370) -> ((((V368('erased'))('erased'))(V369))(V370)) end end end(fun (V361) -> {'Core.Core.LinearUsed', V357, V358, V361} end))))(V360)) end; {'Core.Core.LinearMisuse', V379, V380, V381, V382} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V383 = ('dn--un--full_HasNames_Name'(V0, V380))), ((begin (V401 = fun (V396) -> fun (V397) -> fun (V398) -> fun (V399) -> fun (V400) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V398, V399, V400)) end end end end end), fun (V402) -> fun (V403) -> ((((V401('erased'))('erased'))(V402))(V403)) end end end((begin (V393 = fun (V387) -> fun (V388) -> fun (V389) -> fun (V390) -> case V390 of {'Prelude.Types.Left', V391} -> {'Prelude.Types.Left', V391}; {'Prelude.Types.Right', V392} -> {'Prelude.Types.Right', (V389(V392))} end end end end end), fun (V394) -> fun (V395) -> ((((V393('erased'))('erased'))(V394))(V395)) end end end(fun (V384) -> fun (V385) -> fun (V386) -> {'Core.Core.LinearMisuse', V379, V384, V385, V386} end end end))))(V383)) end, fun (V404) -> {'Prelude.Types.Right', V381} end)), fun (V405) -> {'Prelude.Types.Right', V382} end)); {'Core.Core.BorrowPartial', V406, V407, V408, V409, V410} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V411 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V408))), ((begin (V429 = fun (V424) -> fun (V425) -> fun (V426) -> fun (V427) -> fun (V428) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V426, V427, V428)) end end end end end), fun (V430) -> fun (V431) -> ((((V429('erased'))('erased'))(V430))(V431)) end end end((begin (V421 = fun (V415) -> fun (V416) -> fun (V417) -> fun (V418) -> case V418 of {'Prelude.Types.Left', V419} -> {'Prelude.Types.Left', V419}; {'Prelude.Types.Right', V420} -> {'Prelude.Types.Right', (V417(V420))} end end end end end), fun (V422) -> fun (V423) -> ((((V421('erased'))('erased'))(V422))(V423)) end end end(fun (V412) -> fun (V413) -> fun (V414) -> {'Core.Core.BorrowPartial', V406, V407, V412, V413, V414} end end end))))(V411)) end, ('dn--un--full_HasNames_(Term $vars)'(V0, V409)))), ('dn--un--full_HasNames_(Term $vars)'(V0, V410)))); {'Core.Core.BorrowPartialType', V432, V433, V434, V435} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V436 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V434))), ((begin (V453 = fun (V448) -> fun (V449) -> fun (V450) -> fun (V451) -> fun (V452) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V450, V451, V452)) end end end end end), fun (V454) -> fun (V455) -> ((((V453('erased'))('erased'))(V454))(V455)) end end end((begin (V445 = fun (V439) -> fun (V440) -> fun (V441) -> fun (V442) -> case V442 of {'Prelude.Types.Left', V443} -> {'Prelude.Types.Left', V443}; {'Prelude.Types.Right', V444} -> {'Prelude.Types.Right', (V441(V444))} end end end end end), fun (V446) -> fun (V447) -> ((((V445('erased'))('erased'))(V446))(V447)) end end end(fun (V437) -> fun (V438) -> {'Core.Core.BorrowPartialType', V432, V433, V437, V438} end end))))(V436)) end, ('dn--un--full_HasNames_(Term $vars)'(V0, V435)))); {'Core.Core.AmbiguousName', V456, V457} -> begin (V459 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V458) -> ('dn--un--full_HasNames_Name'(V0, V458)) end, V457, []))), ((begin (V475 = fun (V470) -> fun (V471) -> fun (V472) -> fun (V473) -> fun (V474) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V472, V473, V474)) end end end end end), fun (V476) -> fun (V477) -> ((((V475('erased'))('erased'))(V476))(V477)) end end end((begin (V467 = fun (V461) -> fun (V462) -> fun (V463) -> fun (V464) -> case V464 of {'Prelude.Types.Left', V465} -> {'Prelude.Types.Left', V465}; {'Prelude.Types.Right', V466} -> {'Prelude.Types.Right', (V463(V466))} end end end end end), fun (V468) -> fun (V469) -> ((((V467('erased'))('erased'))(V468))(V469)) end end end(fun (V460) -> {'Core.Core.AmbiguousName', V456, V460} end))))(V459)) end; {'Core.Core.AmbiguousElab', V478, V479, V480, V481} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V482 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V480))), ((begin (V499 = fun (V494) -> fun (V495) -> fun (V496) -> fun (V497) -> fun (V498) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V496, V497, V498)) end end end end end), fun (V500) -> fun (V501) -> ((((V499('erased'))('erased'))(V500))(V501)) end end end((begin (V491 = fun (V485) -> fun (V486) -> fun (V487) -> fun (V488) -> case V488 of {'Prelude.Types.Left', V489} -> {'Prelude.Types.Left', V489}; {'Prelude.Types.Right', V490} -> {'Prelude.Types.Right', (V487(V490))} end end end end end), fun (V492) -> fun (V493) -> ((((V491('erased'))('erased'))(V492))(V493)) end end end(fun (V483) -> fun (V484) -> {'Core.Core.AmbiguousElab', V478, V479, V483, V484} end end))))(V482)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V502) -> case V502 of {'Builtin.MkPair', V503, V504} -> begin (V505 = ('dn--un--full_HasNames_(Term $vars)'(V503, V504))), ((begin (V521 = fun (V516) -> fun (V517) -> fun (V518) -> fun (V519) -> fun (V520) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V518, V519, V520)) end end end end end), fun (V522) -> fun (V523) -> ((((V521('erased'))('erased'))(V522))(V523)) end end end((begin (V513 = fun (V507) -> fun (V508) -> fun (V509) -> fun (V510) -> case V510 of {'Prelude.Types.Left', V511} -> {'Prelude.Types.Left', V511}; {'Prelude.Types.Right', V512} -> {'Prelude.Types.Right', (V509(V512))} end end end end end), fun (V514) -> fun (V515) -> ((((V513('erased'))('erased'))(V514))(V515)) end end end(fun (V506) -> {'Builtin.MkPair', V503, V506} end))))(V505)) end end end, V481, [])))); {'Core.Core.AmbiguousSearch', V524, V525, V526, V527, V528} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V529 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V526))), ((begin (V547 = fun (V542) -> fun (V543) -> fun (V544) -> fun (V545) -> fun (V546) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V544, V545, V546)) end end end end end), fun (V548) -> fun (V549) -> ((((V547('erased'))('erased'))(V548))(V549)) end end end((begin (V539 = fun (V533) -> fun (V534) -> fun (V535) -> fun (V536) -> case V536 of {'Prelude.Types.Left', V537} -> {'Prelude.Types.Left', V537}; {'Prelude.Types.Right', V538} -> {'Prelude.Types.Right', (V535(V538))} end end end end end), fun (V540) -> fun (V541) -> ((((V539('erased'))('erased'))(V540))(V541)) end end end(fun (V530) -> fun (V531) -> fun (V532) -> {'Core.Core.AmbiguousSearch', V524, V525, V530, V531, V532} end end end))))(V529)) end, ('dn--un--full_HasNames_(Term $vars)'(V0, V527)))), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V550) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V550)) end, V528, [])))); {'Core.Core.AmbiguityTooDeep', V551, V552, V553} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V554 = ('dn--un--full_HasNames_Name'(V0, V552))), ((begin (V571 = fun (V566) -> fun (V567) -> fun (V568) -> fun (V569) -> fun (V570) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V568, V569, V570)) end end end end end), fun (V572) -> fun (V573) -> ((((V571('erased'))('erased'))(V572))(V573)) end end end((begin (V563 = fun (V557) -> fun (V558) -> fun (V559) -> fun (V560) -> case V560 of {'Prelude.Types.Left', V561} -> {'Prelude.Types.Left', V561}; {'Prelude.Types.Right', V562} -> {'Prelude.Types.Right', (V559(V562))} end end end end end), fun (V564) -> fun (V565) -> ((((V563('erased'))('erased'))(V564))(V565)) end end end(fun (V555) -> fun (V556) -> {'Core.Core.AmbiguityTooDeep', V551, V555, V556} end end))))(V554)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V574) -> ('dn--un--full_HasNames_Name'(V0, V574)) end, V553, [])))); {'Core.Core.AllFailed', V575} -> begin (V622 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V576) -> fun (V577) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V576, V577, [])) end end, V575, fun (V578) -> case V578 of {'Builtin.MkPair', V579, V580} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V602 = case V579 of {'Prelude.Types.Nothing'} -> fun (V581) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V582} -> begin (V583 = ('dn--un--full_HasNames_Name'(V0, V582))), ((begin (V599 = fun (V594) -> fun (V595) -> fun (V596) -> fun (V597) -> fun (V598) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V596, V597, V598)) end end end end end), fun (V600) -> fun (V601) -> ((((V599('erased'))('erased'))(V600))(V601)) end end end((begin (V591 = fun (V585) -> fun (V586) -> fun (V587) -> fun (V588) -> case V588 of {'Prelude.Types.Left', V589} -> {'Prelude.Types.Left', V589}; {'Prelude.Types.Right', V590} -> {'Prelude.Types.Right', (V587(V590))} end end end end end), fun (V592) -> fun (V593) -> ((((V591('erased'))('erased'))(V592))(V593)) end end end(fun (V584) -> {'Prelude.Types.Just', V584} end))))(V583)) end end), ((begin (V619 = fun (V614) -> fun (V615) -> fun (V616) -> fun (V617) -> fun (V618) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V616, V617, V618)) end end end end end), fun (V620) -> fun (V621) -> ((((V619('erased'))('erased'))(V620))(V621)) end end end((begin (V611 = fun (V605) -> fun (V606) -> fun (V607) -> fun (V608) -> case V608 of {'Prelude.Types.Left', V609} -> {'Prelude.Types.Left', V609}; {'Prelude.Types.Right', V610} -> {'Prelude.Types.Right', (V607(V610))} end end end end end), fun (V612) -> fun (V613) -> ((((V611('erased'))('erased'))(V612))(V613)) end end end(fun (V603) -> fun (V604) -> {'Builtin.MkPair', V603, V604} end end))))(V602)) end, ('dn--un--full_HasNames_Error'(V0, V580)))) end end))), ((begin (V638 = fun (V633) -> fun (V634) -> fun (V635) -> fun (V636) -> fun (V637) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V635, V636, V637)) end end end end end), fun (V639) -> fun (V640) -> ((((V638('erased'))('erased'))(V639))(V640)) end end end((begin (V630 = fun (V624) -> fun (V625) -> fun (V626) -> fun (V627) -> case V627 of {'Prelude.Types.Left', V628} -> {'Prelude.Types.Left', V628}; {'Prelude.Types.Right', V629} -> {'Prelude.Types.Right', (V626(V629))} end end end end end), fun (V631) -> fun (V632) -> ((((V630('erased'))('erased'))(V631))(V632)) end end end(fun (V623) -> {'Core.Core.AllFailed', V623} end))))(V622)) end; {'Core.Core.RecordTypeNeeded', V641, V642, V643} -> begin (V644 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V643))), ((begin (V660 = fun (V655) -> fun (V656) -> fun (V657) -> fun (V658) -> fun (V659) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V657, V658, V659)) end end end end end), fun (V661) -> fun (V662) -> ((((V660('erased'))('erased'))(V661))(V662)) end end end((begin (V652 = fun (V646) -> fun (V647) -> fun (V648) -> fun (V649) -> case V649 of {'Prelude.Types.Left', V650} -> {'Prelude.Types.Left', V650}; {'Prelude.Types.Right', V651} -> {'Prelude.Types.Right', (V648(V651))} end end end end end), fun (V653) -> fun (V654) -> ((((V652('erased'))('erased'))(V653))(V654)) end end end(fun (V645) -> {'Core.Core.RecordTypeNeeded', V641, V642, V645} end))))(V644)) end; {'Core.Core.DuplicatedRecordUpdatePath', V663, V664} -> fun (V665) -> {'Prelude.Types.Right', {'Core.Core.DuplicatedRecordUpdatePath', V663, V664}} end; {'Core.Core.NotRecordField', V666, V667, V668} -> begin (V690 = case V668 of {'Prelude.Types.Nothing'} -> fun (V669) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V670} -> begin (V671 = ('dn--un--full_HasNames_Name'(V0, V670))), ((begin (V687 = fun (V682) -> fun (V683) -> fun (V684) -> fun (V685) -> fun (V686) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V684, V685, V686)) end end end end end), fun (V688) -> fun (V689) -> ((((V687('erased'))('erased'))(V688))(V689)) end end end((begin (V679 = fun (V673) -> fun (V674) -> fun (V675) -> fun (V676) -> case V676 of {'Prelude.Types.Left', V677} -> {'Prelude.Types.Left', V677}; {'Prelude.Types.Right', V678} -> {'Prelude.Types.Right', (V675(V678))} end end end end end), fun (V680) -> fun (V681) -> ((((V679('erased'))('erased'))(V680))(V681)) end end end(fun (V672) -> {'Prelude.Types.Just', V672} end))))(V671)) end end), ((begin (V706 = fun (V701) -> fun (V702) -> fun (V703) -> fun (V704) -> fun (V705) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V703, V704, V705)) end end end end end), fun (V707) -> fun (V708) -> ((((V706('erased'))('erased'))(V707))(V708)) end end end((begin (V698 = fun (V692) -> fun (V693) -> fun (V694) -> fun (V695) -> case V695 of {'Prelude.Types.Left', V696} -> {'Prelude.Types.Left', V696}; {'Prelude.Types.Right', V697} -> {'Prelude.Types.Right', (V694(V697))} end end end end end), fun (V699) -> fun (V700) -> ((((V698('erased'))('erased'))(V699))(V700)) end end end(fun (V691) -> {'Core.Core.NotRecordField', V666, V667, V691} end))))(V690)) end; {'Core.Core.NotRecordType', V709, V710} -> begin (V711 = ('dn--un--full_HasNames_Name'(V0, V710))), ((begin (V727 = fun (V722) -> fun (V723) -> fun (V724) -> fun (V725) -> fun (V726) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V724, V725, V726)) end end end end end), fun (V728) -> fun (V729) -> ((((V727('erased'))('erased'))(V728))(V729)) end end end((begin (V719 = fun (V713) -> fun (V714) -> fun (V715) -> fun (V716) -> case V716 of {'Prelude.Types.Left', V717} -> {'Prelude.Types.Left', V717}; {'Prelude.Types.Right', V718} -> {'Prelude.Types.Right', (V715(V718))} end end end end end), fun (V720) -> fun (V721) -> ((((V719('erased'))('erased'))(V720))(V721)) end end end(fun (V712) -> {'Core.Core.NotRecordType', V709, V712} end))))(V711)) end; {'Core.Core.IncompatibleFieldUpdate', V730, V731} -> fun (V732) -> {'Prelude.Types.Right', {'Core.Core.IncompatibleFieldUpdate', V730, V731}} end; {'Core.Core.InvalidArgs', V733, V734, V735, V736, V737} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V738 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V735))), ((begin (V756 = fun (V751) -> fun (V752) -> fun (V753) -> fun (V754) -> fun (V755) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V753, V754, V755)) end end end end end), fun (V757) -> fun (V758) -> ((((V756('erased'))('erased'))(V757))(V758)) end end end((begin (V748 = fun (V742) -> fun (V743) -> fun (V744) -> fun (V745) -> case V745 of {'Prelude.Types.Left', V746} -> {'Prelude.Types.Left', V746}; {'Prelude.Types.Right', V747} -> {'Prelude.Types.Right', (V744(V747))} end end end end end), fun (V749) -> fun (V750) -> ((((V748('erased'))('erased'))(V749))(V750)) end end end(fun (V739) -> fun (V740) -> fun (V741) -> {'Core.Core.InvalidArgs', V733, V734, V739, V740, V741} end end end))))(V738)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V759) -> ('dn--un--full_HasNames_Name'(V0, V759)) end, V736, [])))), ('dn--un--full_HasNames_(Term $vars)'(V0, V737)))); {'Core.Core.TryWithImplicits', V760, V761, V762, V763} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V764 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V762))), ((begin (V781 = fun (V776) -> fun (V777) -> fun (V778) -> fun (V779) -> fun (V780) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V778, V779, V780)) end end end end end), fun (V782) -> fun (V783) -> ((((V781('erased'))('erased'))(V782))(V783)) end end end((begin (V773 = fun (V767) -> fun (V768) -> fun (V769) -> fun (V770) -> case V770 of {'Prelude.Types.Left', V771} -> {'Prelude.Types.Left', V771}; {'Prelude.Types.Right', V772} -> {'Prelude.Types.Right', (V769(V772))} end end end end end), fun (V774) -> fun (V775) -> ((((V773('erased'))('erased'))(V774))(V775)) end end end(fun (V765) -> fun (V766) -> {'Core.Core.TryWithImplicits', V760, V761, V765, V766} end end))))(V764)) end, ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V784) -> fun (V785) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V784, V785, [])) end end, V763, fun (V786) -> case V786 of {'Builtin.MkPair', V787, V788} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V789 = ('dn--un--full_HasNames_Name'(V0, V787))), ((begin (V806 = fun (V801) -> fun (V802) -> fun (V803) -> fun (V804) -> fun (V805) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V803, V804, V805)) end end end end end), fun (V807) -> fun (V808) -> ((((V806('erased'))('erased'))(V807))(V808)) end end end((begin (V798 = fun (V792) -> fun (V793) -> fun (V794) -> fun (V795) -> case V795 of {'Prelude.Types.Left', V796} -> {'Prelude.Types.Left', V796}; {'Prelude.Types.Right', V797} -> {'Prelude.Types.Right', (V794(V797))} end end end end end), fun (V799) -> fun (V800) -> ((((V798('erased'))('erased'))(V799))(V800)) end end end(fun (V790) -> fun (V791) -> {'Builtin.MkPair', V790, V791} end end))))(V789)) end, ('dn--un--full_HasNames_(Term $vars)'(V0, V788)))) end end)))); {'Core.Core.BadUnboundImplicit', V809, V810, V811, V812, V813} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V814 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V811))), ((begin (V832 = fun (V827) -> fun (V828) -> fun (V829) -> fun (V830) -> fun (V831) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V829, V830, V831)) end end end end end), fun (V833) -> fun (V834) -> ((((V832('erased'))('erased'))(V833))(V834)) end end end((begin (V824 = fun (V818) -> fun (V819) -> fun (V820) -> fun (V821) -> case V821 of {'Prelude.Types.Left', V822} -> {'Prelude.Types.Left', V822}; {'Prelude.Types.Right', V823} -> {'Prelude.Types.Right', (V820(V823))} end end end end end), fun (V825) -> fun (V826) -> ((((V824('erased'))('erased'))(V825))(V826)) end end end(fun (V815) -> fun (V816) -> fun (V817) -> {'Core.Core.BadUnboundImplicit', V809, V810, V815, V816, V817} end end end))))(V814)) end, ('dn--un--full_HasNames_Name'(V0, V812)))), ('dn--un--full_HasNames_(Term $vars)'(V0, V813)))); {'Core.Core.CantSolveGoal', V835, V836, V837, V838, V839, V840} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V841 = ('dn--un--full_HasNames_((Env Term) $vars)'(V837, V838))), ((begin (V859 = fun (V854) -> fun (V855) -> fun (V856) -> fun (V857) -> fun (V858) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V856, V857, V858)) end end end end end), fun (V860) -> fun (V861) -> ((((V859('erased'))('erased'))(V860))(V861)) end end end((begin (V851 = fun (V845) -> fun (V846) -> fun (V847) -> fun (V848) -> case V848 of {'Prelude.Types.Left', V849} -> {'Prelude.Types.Left', V849}; {'Prelude.Types.Right', V850} -> {'Prelude.Types.Right', (V847(V850))} end end end end end), fun (V852) -> fun (V853) -> ((((V851('erased'))('erased'))(V852))(V853)) end end end(fun (V842) -> fun (V843) -> fun (V844) -> {'Core.Core.CantSolveGoal', V835, V836, V837, V842, V843, V844} end end end))))(V841)) end, ('dn--un--full_HasNames_(Term $vars)'(V837, V839)))), case V840 of {'Prelude.Types.Nothing'} -> fun (V862) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V863} -> begin (V864 = ('dn--un--full_HasNames_Error'(V837, V863))), ((begin (V880 = fun (V875) -> fun (V876) -> fun (V877) -> fun (V878) -> fun (V879) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V877, V878, V879)) end end end end end), fun (V881) -> fun (V882) -> ((((V880('erased'))('erased'))(V881))(V882)) end end end((begin (V872 = fun (V866) -> fun (V867) -> fun (V868) -> fun (V869) -> case V869 of {'Prelude.Types.Left', V870} -> {'Prelude.Types.Left', V870}; {'Prelude.Types.Right', V871} -> {'Prelude.Types.Right', (V868(V871))} end end end end end), fun (V873) -> fun (V874) -> ((((V872('erased'))('erased'))(V873))(V874)) end end end(fun (V865) -> {'Prelude.Types.Just', V865} end))))(V864)) end end)); {'Core.Core.DeterminingArg', V883, V884, V885, V886, V887, V888} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V889 = ('dn--un--full_HasNames_Name'(V0, V885))), ((begin (V908 = fun (V903) -> fun (V904) -> fun (V905) -> fun (V906) -> fun (V907) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V905, V906, V907)) end end end end end), fun (V909) -> fun (V910) -> ((((V908('erased'))('erased'))(V909))(V910)) end end end((begin (V900 = fun (V894) -> fun (V895) -> fun (V896) -> fun (V897) -> case V897 of {'Prelude.Types.Left', V898} -> {'Prelude.Types.Left', V898}; {'Prelude.Types.Right', V899} -> {'Prelude.Types.Right', (V896(V899))} end end end end end), fun (V901) -> fun (V902) -> ((((V900('erased'))('erased'))(V901))(V902)) end end end(fun (V890) -> fun (V891) -> fun (V892) -> fun (V893) -> {'Core.Core.DeterminingArg', V883, V884, V890, V891, V892, V893} end end end end))))(V889)) end, fun (V911) -> {'Prelude.Types.Right', V886} end)), ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V887)))), ('dn--un--full_HasNames_(Term $vars)'(V0, V888)))); {'Core.Core.UnsolvedHoles', V912} -> begin (V915 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V913) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V914) -> ('dn--un--full_HasNames_Name'(V0, V914)) end, V913)) end, V912, []))), ((begin (V931 = fun (V926) -> fun (V927) -> fun (V928) -> fun (V929) -> fun (V930) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V928, V929, V930)) end end end end end), fun (V932) -> fun (V933) -> ((((V931('erased'))('erased'))(V932))(V933)) end end end((begin (V923 = fun (V917) -> fun (V918) -> fun (V919) -> fun (V920) -> case V920 of {'Prelude.Types.Left', V921} -> {'Prelude.Types.Left', V921}; {'Prelude.Types.Right', V922} -> {'Prelude.Types.Right', (V919(V922))} end end end end end), fun (V924) -> fun (V925) -> ((((V923('erased'))('erased'))(V924))(V925)) end end end(fun (V916) -> {'Core.Core.UnsolvedHoles', V916} end))))(V915)) end; {'Core.Core.CantInferArgType', V934, V935, V936, V937, V938, V939} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V940 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V936))), ((begin (V959 = fun (V954) -> fun (V955) -> fun (V956) -> fun (V957) -> fun (V958) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V956, V957, V958)) end end end end end), fun (V960) -> fun (V961) -> ((((V959('erased'))('erased'))(V960))(V961)) end end end((begin (V951 = fun (V945) -> fun (V946) -> fun (V947) -> fun (V948) -> case V948 of {'Prelude.Types.Left', V949} -> {'Prelude.Types.Left', V949}; {'Prelude.Types.Right', V950} -> {'Prelude.Types.Right', (V947(V950))} end end end end end), fun (V952) -> fun (V953) -> ((((V951('erased'))('erased'))(V952))(V953)) end end end(fun (V941) -> fun (V942) -> fun (V943) -> fun (V944) -> {'Core.Core.CantInferArgType', V934, V935, V941, V942, V943, V944} end end end end))))(V940)) end, ('dn--un--full_HasNames_Name'(V0, V937)))), ('dn--un--full_HasNames_Name'(V0, V938)))), ('dn--un--full_HasNames_(Term $vars)'(V0, V939)))); {'Core.Core.SolvedNamedHole', V962, V963, V964, V965, V966} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V967 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V964))), ((begin (V985 = fun (V980) -> fun (V981) -> fun (V982) -> fun (V983) -> fun (V984) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V982, V983, V984)) end end end end end), fun (V986) -> fun (V987) -> ((((V985('erased'))('erased'))(V986))(V987)) end end end((begin (V977 = fun (V971) -> fun (V972) -> fun (V973) -> fun (V974) -> case V974 of {'Prelude.Types.Left', V975} -> {'Prelude.Types.Left', V975}; {'Prelude.Types.Right', V976} -> {'Prelude.Types.Right', (V973(V976))} end end end end end), fun (V978) -> fun (V979) -> ((((V977('erased'))('erased'))(V978))(V979)) end end end(fun (V968) -> fun (V969) -> fun (V970) -> {'Core.Core.SolvedNamedHole', V962, V963, V968, V969, V970} end end end))))(V967)) end, ('dn--un--full_HasNames_Name'(V0, V965)))), ('dn--un--full_HasNames_(Term $vars)'(V0, V966)))); {'Core.Core.VisibilityError', V988, V989, V990, V991, V992} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V993 = ('dn--un--full_HasNames_Name'(V0, V990))), ((begin (V1011 = fun (V1006) -> fun (V1007) -> fun (V1008) -> fun (V1009) -> fun (V1010) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1008, V1009, V1010)) end end end end end), fun (V1012) -> fun (V1013) -> ((((V1011('erased'))('erased'))(V1012))(V1013)) end end end((begin (V1003 = fun (V997) -> fun (V998) -> fun (V999) -> fun (V1000) -> case V1000 of {'Prelude.Types.Left', V1001} -> {'Prelude.Types.Left', V1001}; {'Prelude.Types.Right', V1002} -> {'Prelude.Types.Right', (V999(V1002))} end end end end end), fun (V1004) -> fun (V1005) -> ((((V1003('erased'))('erased'))(V1004))(V1005)) end end end(fun (V994) -> fun (V995) -> fun (V996) -> {'Core.Core.VisibilityError', V988, V989, V994, V995, V996} end end end))))(V993)) end, fun (V1014) -> {'Prelude.Types.Right', V991} end)), ('dn--un--full_HasNames_Name'(V0, V992)))); {'Core.Core.NonLinearPattern', V1015, V1016} -> begin (V1017 = ('dn--un--full_HasNames_Name'(V0, V1016))), ((begin (V1033 = fun (V1028) -> fun (V1029) -> fun (V1030) -> fun (V1031) -> fun (V1032) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1030, V1031, V1032)) end end end end end), fun (V1034) -> fun (V1035) -> ((((V1033('erased'))('erased'))(V1034))(V1035)) end end end((begin (V1025 = fun (V1019) -> fun (V1020) -> fun (V1021) -> fun (V1022) -> case V1022 of {'Prelude.Types.Left', V1023} -> {'Prelude.Types.Left', V1023}; {'Prelude.Types.Right', V1024} -> {'Prelude.Types.Right', (V1021(V1024))} end end end end end), fun (V1026) -> fun (V1027) -> ((((V1025('erased'))('erased'))(V1026))(V1027)) end end end(fun (V1018) -> {'Core.Core.NonLinearPattern', V1015, V1018} end))))(V1017)) end; {'Core.Core.BadPattern', V1036, V1037} -> begin (V1038 = ('dn--un--full_HasNames_Name'(V0, V1037))), ((begin (V1054 = fun (V1049) -> fun (V1050) -> fun (V1051) -> fun (V1052) -> fun (V1053) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1051, V1052, V1053)) end end end end end), fun (V1055) -> fun (V1056) -> ((((V1054('erased'))('erased'))(V1055))(V1056)) end end end((begin (V1046 = fun (V1040) -> fun (V1041) -> fun (V1042) -> fun (V1043) -> case V1043 of {'Prelude.Types.Left', V1044} -> {'Prelude.Types.Left', V1044}; {'Prelude.Types.Right', V1045} -> {'Prelude.Types.Right', (V1042(V1045))} end end end end end), fun (V1047) -> fun (V1048) -> ((((V1046('erased'))('erased'))(V1047))(V1048)) end end end(fun (V1039) -> {'Core.Core.BadPattern', V1036, V1039} end))))(V1038)) end; {'Core.Core.NoDeclaration', V1057, V1058} -> begin (V1059 = ('dn--un--full_HasNames_Name'(V0, V1058))), ((begin (V1075 = fun (V1070) -> fun (V1071) -> fun (V1072) -> fun (V1073) -> fun (V1074) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1072, V1073, V1074)) end end end end end), fun (V1076) -> fun (V1077) -> ((((V1075('erased'))('erased'))(V1076))(V1077)) end end end((begin (V1067 = fun (V1061) -> fun (V1062) -> fun (V1063) -> fun (V1064) -> case V1064 of {'Prelude.Types.Left', V1065} -> {'Prelude.Types.Left', V1065}; {'Prelude.Types.Right', V1066} -> {'Prelude.Types.Right', (V1063(V1066))} end end end end end), fun (V1068) -> fun (V1069) -> ((((V1067('erased'))('erased'))(V1068))(V1069)) end end end(fun (V1060) -> {'Core.Core.NoDeclaration', V1057, V1060} end))))(V1059)) end; {'Core.Core.AlreadyDefined', V1078, V1079} -> begin (V1080 = ('dn--un--full_HasNames_Name'(V0, V1079))), ((begin (V1096 = fun (V1091) -> fun (V1092) -> fun (V1093) -> fun (V1094) -> fun (V1095) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1093, V1094, V1095)) end end end end end), fun (V1097) -> fun (V1098) -> ((((V1096('erased'))('erased'))(V1097))(V1098)) end end end((begin (V1088 = fun (V1082) -> fun (V1083) -> fun (V1084) -> fun (V1085) -> case V1085 of {'Prelude.Types.Left', V1086} -> {'Prelude.Types.Left', V1086}; {'Prelude.Types.Right', V1087} -> {'Prelude.Types.Right', (V1084(V1087))} end end end end end), fun (V1089) -> fun (V1090) -> ((((V1088('erased'))('erased'))(V1089))(V1090)) end end end(fun (V1081) -> {'Core.Core.AlreadyDefined', V1078, V1081} end))))(V1080)) end; {'Core.Core.NotFunctionType', V1099, V1100, V1101, V1102} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1103 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V1101))), ((begin (V1120 = fun (V1115) -> fun (V1116) -> fun (V1117) -> fun (V1118) -> fun (V1119) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1117, V1118, V1119)) end end end end end), fun (V1121) -> fun (V1122) -> ((((V1120('erased'))('erased'))(V1121))(V1122)) end end end((begin (V1112 = fun (V1106) -> fun (V1107) -> fun (V1108) -> fun (V1109) -> case V1109 of {'Prelude.Types.Left', V1110} -> {'Prelude.Types.Left', V1110}; {'Prelude.Types.Right', V1111} -> {'Prelude.Types.Right', (V1108(V1111))} end end end end end), fun (V1113) -> fun (V1114) -> ((((V1112('erased'))('erased'))(V1113))(V1114)) end end end(fun (V1104) -> fun (V1105) -> {'Core.Core.NotFunctionType', V1099, V1100, V1104, V1105} end end))))(V1103)) end, ('dn--un--full_HasNames_(Term $vars)'(V0, V1102)))); {'Core.Core.RewriteNoChange', V1123, V1124, V1125, V1126, V1127} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V1128 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V1125))), ((begin (V1146 = fun (V1141) -> fun (V1142) -> fun (V1143) -> fun (V1144) -> fun (V1145) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1143, V1144, V1145)) end end end end end), fun (V1147) -> fun (V1148) -> ((((V1146('erased'))('erased'))(V1147))(V1148)) end end end((begin (V1138 = fun (V1132) -> fun (V1133) -> fun (V1134) -> fun (V1135) -> case V1135 of {'Prelude.Types.Left', V1136} -> {'Prelude.Types.Left', V1136}; {'Prelude.Types.Right', V1137} -> {'Prelude.Types.Right', (V1134(V1137))} end end end end end), fun (V1139) -> fun (V1140) -> ((((V1138('erased'))('erased'))(V1139))(V1140)) end end end(fun (V1129) -> fun (V1130) -> fun (V1131) -> {'Core.Core.RewriteNoChange', V1123, V1124, V1129, V1130, V1131} end end end))))(V1128)) end, ('dn--un--full_HasNames_(Term $vars)'(V0, V1126)))), ('dn--un--full_HasNames_(Term $vars)'(V0, V1127)))); {'Core.Core.NotRewriteRule', V1149, V1150, V1151, V1152} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1153 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V1151))), ((begin (V1170 = fun (V1165) -> fun (V1166) -> fun (V1167) -> fun (V1168) -> fun (V1169) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1167, V1168, V1169)) end end end end end), fun (V1171) -> fun (V1172) -> ((((V1170('erased'))('erased'))(V1171))(V1172)) end end end((begin (V1162 = fun (V1156) -> fun (V1157) -> fun (V1158) -> fun (V1159) -> case V1159 of {'Prelude.Types.Left', V1160} -> {'Prelude.Types.Left', V1160}; {'Prelude.Types.Right', V1161} -> {'Prelude.Types.Right', (V1158(V1161))} end end end end end), fun (V1163) -> fun (V1164) -> ((((V1162('erased'))('erased'))(V1163))(V1164)) end end end(fun (V1154) -> fun (V1155) -> {'Core.Core.NotRewriteRule', V1149, V1150, V1154, V1155} end end))))(V1153)) end, ('dn--un--full_HasNames_(Term $vars)'(V0, V1152)))); {'Core.Core.CaseCompile', V1173, V1174, V1175} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1176 = ('dn--un--full_HasNames_Name'(V0, V1174))), ((begin (V1193 = fun (V1188) -> fun (V1189) -> fun (V1190) -> fun (V1191) -> fun (V1192) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1190, V1191, V1192)) end end end end end), fun (V1194) -> fun (V1195) -> ((((V1193('erased'))('erased'))(V1194))(V1195)) end end end((begin (V1185 = fun (V1179) -> fun (V1180) -> fun (V1181) -> fun (V1182) -> case V1182 of {'Prelude.Types.Left', V1183} -> {'Prelude.Types.Left', V1183}; {'Prelude.Types.Right', V1184} -> {'Prelude.Types.Right', (V1181(V1184))} end end end end end), fun (V1186) -> fun (V1187) -> ((((V1185('erased'))('erased'))(V1186))(V1187)) end end end(fun (V1177) -> fun (V1178) -> {'Core.Core.CaseCompile', V1173, V1177, V1178} end end))))(V1176)) end, ('dn--un--full_HasNames_CaseError'(V0, V1175)))); {'Core.Core.MatchTooSpecific', V1196, V1197, V1198, V1199} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1200 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V1198))), ((begin (V1217 = fun (V1212) -> fun (V1213) -> fun (V1214) -> fun (V1215) -> fun (V1216) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1214, V1215, V1216)) end end end end end), fun (V1218) -> fun (V1219) -> ((((V1217('erased'))('erased'))(V1218))(V1219)) end end end((begin (V1209 = fun (V1203) -> fun (V1204) -> fun (V1205) -> fun (V1206) -> case V1206 of {'Prelude.Types.Left', V1207} -> {'Prelude.Types.Left', V1207}; {'Prelude.Types.Right', V1208} -> {'Prelude.Types.Right', (V1205(V1208))} end end end end end), fun (V1210) -> fun (V1211) -> ((((V1209('erased'))('erased'))(V1210))(V1211)) end end end(fun (V1201) -> fun (V1202) -> {'Core.Core.MatchTooSpecific', V1196, V1197, V1201, V1202} end end))))(V1200)) end, ('dn--un--full_HasNames_(Term $vars)'(V0, V1199)))); {'Core.Core.BadDotPattern', V1220, V1221, V1222, V1223, V1224, V1225} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V1226 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V1222))), ((begin (V1245 = fun (V1240) -> fun (V1241) -> fun (V1242) -> fun (V1243) -> fun (V1244) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1242, V1243, V1244)) end end end end end), fun (V1246) -> fun (V1247) -> ((((V1245('erased'))('erased'))(V1246))(V1247)) end end end((begin (V1237 = fun (V1231) -> fun (V1232) -> fun (V1233) -> fun (V1234) -> case V1234 of {'Prelude.Types.Left', V1235} -> {'Prelude.Types.Left', V1235}; {'Prelude.Types.Right', V1236} -> {'Prelude.Types.Right', (V1233(V1236))} end end end end end), fun (V1238) -> fun (V1239) -> ((((V1237('erased'))('erased'))(V1238))(V1239)) end end end(fun (V1227) -> fun (V1228) -> fun (V1229) -> fun (V1230) -> {'Core.Core.BadDotPattern', V1220, V1221, V1227, V1228, V1229, V1230} end end end end))))(V1226)) end, fun (V1248) -> {'Prelude.Types.Right', V1223} end)), ('dn--un--full_HasNames_(Term $vars)'(V0, V1224)))), ('dn--un--full_HasNames_(Term $vars)'(V0, V1225)))); {'Core.Core.BadImplicit', V1249, V1250} -> fun (V1251) -> {'Prelude.Types.Right', {'Core.Core.BadImplicit', V1249, V1250}} end; {'Core.Core.BadRunElab', V1252, V1253, V1254, V1255, V1256} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(begin (V1257 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V1254))), ((begin (V1275 = fun (V1270) -> fun (V1271) -> fun (V1272) -> fun (V1273) -> fun (V1274) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1272, V1273, V1274)) end end end end end), fun (V1276) -> fun (V1277) -> ((((V1275('erased'))('erased'))(V1276))(V1277)) end end end((begin (V1267 = fun (V1261) -> fun (V1262) -> fun (V1263) -> fun (V1264) -> case V1264 of {'Prelude.Types.Left', V1265} -> {'Prelude.Types.Left', V1265}; {'Prelude.Types.Right', V1266} -> {'Prelude.Types.Right', (V1263(V1266))} end end end end end), fun (V1268) -> fun (V1269) -> ((((V1267('erased'))('erased'))(V1268))(V1269)) end end end(fun (V1258) -> fun (V1259) -> fun (V1260) -> {'Core.Core.BadRunElab', V1252, V1253, V1258, V1259, V1260} end end end))))(V1257)) end, ('dn--un--full_HasNames_(Term $vars)'(V0, V1255)))), fun (V1278) -> {'Prelude.Types.Right', V1256} end)); {'Core.Core.RunElabFail', V1279} -> begin (V1280 = ('dn--un--full_HasNames_Error'(V0, V1279))), ((begin (V1296 = fun (V1291) -> fun (V1292) -> fun (V1293) -> fun (V1294) -> fun (V1295) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1293, V1294, V1295)) end end end end end), fun (V1297) -> fun (V1298) -> ((((V1296('erased'))('erased'))(V1297))(V1298)) end end end((begin (V1288 = fun (V1282) -> fun (V1283) -> fun (V1284) -> fun (V1285) -> case V1285 of {'Prelude.Types.Left', V1286} -> {'Prelude.Types.Left', V1286}; {'Prelude.Types.Right', V1287} -> {'Prelude.Types.Right', (V1284(V1287))} end end end end end), fun (V1289) -> fun (V1290) -> ((((V1288('erased'))('erased'))(V1289))(V1290)) end end end(fun (V1281) -> {'Core.Core.RunElabFail', V1281} end))))(V1280)) end; {'Core.Core.GenericMsg', V1299, V1300} -> fun (V1301) -> {'Prelude.Types.Right', {'Core.Core.GenericMsg', V1299, V1300}} end; {'Core.Core.TTCError', V1302} -> fun (V1303) -> {'Prelude.Types.Right', {'Core.Core.TTCError', V1302}} end; {'Core.Core.FileErr', V1304, V1305} -> fun (V1306) -> {'Prelude.Types.Right', {'Core.Core.FileErr', V1304, V1305}} end; {'Core.Core.CantFindPackage', V1307} -> fun (V1308) -> {'Prelude.Types.Right', {'Core.Core.CantFindPackage', V1307}} end; {'Core.Core.LitFail', V1309} -> fun (V1310) -> {'Prelude.Types.Right', {'Core.Core.LitFail', V1309}} end; {'Core.Core.LexFail', V1311, V1312} -> fun (V1313) -> {'Prelude.Types.Right', {'Core.Core.LexFail', V1311, V1312}} end; {'Core.Core.ParseFail', V1314} -> fun (V1315) -> {'Prelude.Types.Right', {'Core.Core.ParseFail', V1314}} end; {'Core.Core.ModuleNotFound', V1316, V1317} -> fun (V1318) -> {'Prelude.Types.Right', {'Core.Core.ModuleNotFound', V1316, V1317}} end; {'Core.Core.CyclicImports', V1319} -> fun (V1320) -> {'Prelude.Types.Right', {'Core.Core.CyclicImports', V1319}} end; {'Core.Core.ForceNeeded'} -> fun (V1321) -> {'Prelude.Types.Right', {'Core.Core.ForceNeeded'}} end; {'Core.Core.InternalError', V1322} -> fun (V1323) -> {'Prelude.Types.Right', {'Core.Core.InternalError', V1322}} end; {'Core.Core.UserError', V1324} -> fun (V1325) -> {'Prelude.Types.Right', {'Core.Core.UserError', V1324}} end; {'Core.Core.NoForeignCC', V1326, V1327} -> fun (V1328) -> {'Prelude.Types.Right', {'Core.Core.NoForeignCC', V1326, V1327}} end; {'Core.Core.BadMultiline', V1329, V1330} -> fun (V1331) -> {'Prelude.Types.Right', {'Core.Core.BadMultiline', V1329, V1330}} end; {'Core.Core.Timeout', V1332} -> fun (V1333) -> {'Prelude.Types.Right', {'Core.Core.Timeout', V1332}} end; {'Core.Core.FailingDidNotFail', V1334} -> fun (V1335) -> {'Prelude.Types.Right', {'Core.Core.FailingDidNotFail', V1334}} end; {'Core.Core.FailingWrongError', V1336, V1337, V1338} -> begin (V1340 = ('Idris.Idris2.Core.Core':'un--traverseList1'(fun (V1339) -> ('dn--un--full_HasNames_Error'(V0, V1339)) end, V1338))), ((begin (V1356 = fun (V1351) -> fun (V1352) -> fun (V1353) -> fun (V1354) -> fun (V1355) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1353, V1354, V1355)) end end end end end), fun (V1357) -> fun (V1358) -> ((((V1356('erased'))('erased'))(V1357))(V1358)) end end end((begin (V1348 = fun (V1342) -> fun (V1343) -> fun (V1344) -> fun (V1345) -> case V1345 of {'Prelude.Types.Left', V1346} -> {'Prelude.Types.Left', V1346}; {'Prelude.Types.Right', V1347} -> {'Prelude.Types.Right', (V1344(V1347))} end end end end end), fun (V1349) -> fun (V1350) -> ((((V1348('erased'))('erased'))(V1349))(V1350)) end end end(fun (V1341) -> {'Core.Core.FailingWrongError', V1336, V1337, V1341} end))))(V1340)) end; {'Core.Core.InType', V1359, V1360, V1361} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1362 = ('dn--un--full_HasNames_Name'(V0, V1360))), ((begin (V1379 = fun (V1374) -> fun (V1375) -> fun (V1376) -> fun (V1377) -> fun (V1378) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1376, V1377, V1378)) end end end end end), fun (V1380) -> fun (V1381) -> ((((V1379('erased'))('erased'))(V1380))(V1381)) end end end((begin (V1371 = fun (V1365) -> fun (V1366) -> fun (V1367) -> fun (V1368) -> case V1368 of {'Prelude.Types.Left', V1369} -> {'Prelude.Types.Left', V1369}; {'Prelude.Types.Right', V1370} -> {'Prelude.Types.Right', (V1367(V1370))} end end end end end), fun (V1372) -> fun (V1373) -> ((((V1371('erased'))('erased'))(V1372))(V1373)) end end end(fun (V1363) -> fun (V1364) -> {'Core.Core.InType', V1359, V1363, V1364} end end))))(V1362)) end, ('dn--un--full_HasNames_Error'(V0, V1361)))); {'Core.Core.InCon', V1382, V1383, V1384} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1385 = ('dn--un--full_HasNames_Name'(V0, V1383))), ((begin (V1402 = fun (V1397) -> fun (V1398) -> fun (V1399) -> fun (V1400) -> fun (V1401) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1399, V1400, V1401)) end end end end end), fun (V1403) -> fun (V1404) -> ((((V1402('erased'))('erased'))(V1403))(V1404)) end end end((begin (V1394 = fun (V1388) -> fun (V1389) -> fun (V1390) -> fun (V1391) -> case V1391 of {'Prelude.Types.Left', V1392} -> {'Prelude.Types.Left', V1392}; {'Prelude.Types.Right', V1393} -> {'Prelude.Types.Right', (V1390(V1393))} end end end end end), fun (V1395) -> fun (V1396) -> ((((V1394('erased'))('erased'))(V1395))(V1396)) end end end(fun (V1386) -> fun (V1387) -> {'Core.Core.InCon', V1382, V1386, V1387} end end))))(V1385)) end, ('dn--un--full_HasNames_Error'(V0, V1384)))); {'Core.Core.InLHS', V1405, V1406, V1407} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1408 = ('dn--un--full_HasNames_Name'(V0, V1406))), ((begin (V1425 = fun (V1420) -> fun (V1421) -> fun (V1422) -> fun (V1423) -> fun (V1424) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1422, V1423, V1424)) end end end end end), fun (V1426) -> fun (V1427) -> ((((V1425('erased'))('erased'))(V1426))(V1427)) end end end((begin (V1417 = fun (V1411) -> fun (V1412) -> fun (V1413) -> fun (V1414) -> case V1414 of {'Prelude.Types.Left', V1415} -> {'Prelude.Types.Left', V1415}; {'Prelude.Types.Right', V1416} -> {'Prelude.Types.Right', (V1413(V1416))} end end end end end), fun (V1418) -> fun (V1419) -> ((((V1417('erased'))('erased'))(V1418))(V1419)) end end end(fun (V1409) -> fun (V1410) -> {'Core.Core.InLHS', V1405, V1409, V1410} end end))))(V1408)) end, ('dn--un--full_HasNames_Error'(V0, V1407)))); {'Core.Core.InRHS', V1428, V1429, V1430} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1431 = ('dn--un--full_HasNames_Name'(V0, V1429))), ((begin (V1448 = fun (V1443) -> fun (V1444) -> fun (V1445) -> fun (V1446) -> fun (V1447) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1445, V1446, V1447)) end end end end end), fun (V1449) -> fun (V1450) -> ((((V1448('erased'))('erased'))(V1449))(V1450)) end end end((begin (V1440 = fun (V1434) -> fun (V1435) -> fun (V1436) -> fun (V1437) -> case V1437 of {'Prelude.Types.Left', V1438} -> {'Prelude.Types.Left', V1438}; {'Prelude.Types.Right', V1439} -> {'Prelude.Types.Right', (V1436(V1439))} end end end end end), fun (V1441) -> fun (V1442) -> ((((V1440('erased'))('erased'))(V1441))(V1442)) end end end(fun (V1432) -> fun (V1433) -> {'Core.Core.InRHS', V1428, V1432, V1433} end end))))(V1431)) end, ('dn--un--full_HasNames_Error'(V0, V1430)))); {'Core.Core.MaybeMisspelling', V1451, V1452} -> ('Idris.Idris2.Core.Core':'un--<*>'(begin (V1453 = ('dn--un--full_HasNames_Error'(V0, V1451))), ((begin (V1470 = fun (V1465) -> fun (V1466) -> fun (V1467) -> fun (V1468) -> fun (V1469) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1467, V1468, V1469)) end end end end end), fun (V1471) -> fun (V1472) -> ((((V1470('erased'))('erased'))(V1471))(V1472)) end end end((begin (V1462 = fun (V1456) -> fun (V1457) -> fun (V1458) -> fun (V1459) -> case V1459 of {'Prelude.Types.Left', V1460} -> {'Prelude.Types.Left', V1460}; {'Prelude.Types.Right', V1461} -> {'Prelude.Types.Right', (V1458(V1461))} end end end end end), fun (V1463) -> fun (V1464) -> ((((V1462('erased'))('erased'))(V1463))(V1464)) end end end(fun (V1454) -> fun (V1455) -> {'Core.Core.MaybeMisspelling', V1454, V1455} end end))))(V1453)) end, fun (V1473) -> {'Prelude.Types.Right', V1452} end)); {'Core.Core.WarningAsError', V1474} -> begin (V1475 = ('dn--un--full_HasNames_Warning'(V0, V1474))), ((begin (V1491 = fun (V1486) -> fun (V1487) -> fun (V1488) -> fun (V1489) -> fun (V1490) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1488, V1489, V1490)) end end end end end), fun (V1492) -> fun (V1493) -> ((((V1491('erased'))('erased'))(V1492))(V1493)) end end end((begin (V1483 = fun (V1477) -> fun (V1478) -> fun (V1479) -> fun (V1480) -> case V1480 of {'Prelude.Types.Left', V1481} -> {'Prelude.Types.Left', V1481}; {'Prelude.Types.Right', V1482} -> {'Prelude.Types.Right', (V1479(V1482))} end end end end end), fun (V1484) -> fun (V1485) -> ((((V1483('erased'))('erased'))(V1484))(V1485)) end end end(fun (V1476) -> {'Core.Core.WarningAsError', V1476} end))))(V1475)) end end.
'dn--un--full_HasNames_Def'(V0, V1) -> case V1 of {'Core.Context.Context.PMDef', V2, V3, V4, V5, V6} -> begin (V7 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V4))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V26 = begin (V12 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V5))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V25 = begin (V18 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V17) -> ('nested--13403-9799--in--un--fullNamesPat'(V6, V3, V5, V4, V2, V0, V17)) end, V6, []))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', {'Core.Context.Context.PMDef', V2, V3, V11, V16, V22}} end), V24 end(V19)) end end end end), V25 end(V13)) end end end end), V26 end(V8)) end end end end; {'Core.Context.Context.TCon', V27, V28, V29, V30, V31, V32, V33, V34} -> begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V35) -> ('dn--un--full_HasNames_Name'(V0, V35)) end, V32, []))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V49 = begin (V42 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V41) -> ('dn--un--full_HasNames_Name'(V0, V41)) end, V33, []))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V48 = fun (V47) -> {'Prelude.Types.Right', {'Core.Context.Context.TCon', V27, V28, V29, V30, V31, V40, V46, V34}} end), V48 end(V43)) end end end end), V49 end(V37)) end end end end; {'Core.Context.Context.BySearch', V50, V51, V52} -> begin (V53 = ('dn--un--full_HasNames_Name'(V0, V52))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V59 = fun (V58) -> {'Prelude.Types.Right', {'Core.Context.Context.BySearch', V50, V51, V57}} end), V59 end(V54)) end end end end; {'Core.Context.Context.Guess', V60, V61, V62} -> begin (V63 = ('dn--un--full_HasNames_(Term $vars)'(V0, V60))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V69 = fun (V68) -> {'Prelude.Types.Right', {'Core.Context.Context.Guess', V67, V61, V62}} end), V69 end(V64)) end end end end; _ -> fun (V70) -> {'Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames_Covering'(V0, V1) -> case V1 of {'Core.TT.IsCovering'} -> fun (V2) -> {'Prelude.Types.Right', {'Core.TT.IsCovering'}} end; {'Core.TT.MissingCases', V3} -> begin (V5 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V4)) end, V3, []))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', {'Core.TT.MissingCases', V9}} end), V11 end(V6)) end end end end; {'Core.TT.NonCoveringCall', V12} -> begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V13) -> ('dn--un--full_HasNames_Name'(V0, V13)) end, V12, []))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', {'Core.TT.NonCoveringCall', V18}} end), V20 end(V15)) end end end end end.
'dn--un--full_HasNames_Clause'(V0, V1) -> case V1 of {'Core.Context.Context.MkClause', V2, V3, V4, V5} -> begin (V6 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V3))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V24 = begin (V11 = ('dn--un--full_HasNames_(Term $vars)'(V0, V4))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V23 = begin (V16 = ('dn--un--full_HasNames_(Term $vars)'(V0, V5))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Core.Context.Context.MkClause', V2, V10, V15, V20}} end), V22 end(V17)) end end end end), V23 end(V12)) end end end end), V24 end(V7)) end end end end end.
'dn--un--full_HasNames_CaseError'(V0, V1) -> case V1 of {'Core.Core.DifferingArgNumbers'} -> fun (V2) -> {'Prelude.Types.Right', {'Core.Core.DifferingArgNumbers'}} end; {'Core.Core.DifferingTypes'} -> fun (V3) -> {'Prelude.Types.Right', {'Core.Core.DifferingTypes'}} end; {'Core.Core.MatchErased', V4} -> case V4 of {'Builtin.DPair.MkDPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> begin (V9 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V7))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V21 = begin (V14 = ('dn--un--full_HasNames_(Term $vars)'(V0, V8))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', {'Core.Core.MatchErased', {'Builtin.DPair.MkDPair', V5, {'Builtin.MkPair', V13, V18}}}} end), V20 end(V15)) end end end end), V21 end(V10)) end end end end end end; {'Core.Core.NotFullyApplied', V22} -> begin (V23 = ('dn--un--full_HasNames_Name'(V0, V22))), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V24) -> {'Core.Core.NotFullyApplied', V24} end))))(V23)) end; {'Core.Core.UnknownType'} -> fun (V42) -> {'Prelude.Types.Right', {'Core.Core.UnknownType'}} end end.
'dn--un--full_HasNames_(Term $vars)'(V0, V1) -> case V1 of {'Core.TT.Ref', V2, V3, V4} -> case V4 of {'Core.Name.Resolved', V5} -> begin (V6 = ('un--lookupCtxtExact'({'Core.Name.Resolved', V5}, V0))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V35 = fun (V11) -> case V10 of {'Prelude.Types.Just', V12} -> {'Prelude.Types.Right', {'Core.TT.Ref', V2, V3, case V12 of {'Core.Context.Context.MkGlobalDef', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} -> V14 end}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Core.TT.Ref', V2, V3, {'Core.Name.Resolved', V5}}} end end), V35 end(V7)) end end end end; _ -> fun (V36) -> {'Prelude.Types.Right', V1} end end; {'Core.TT.Meta', V37, V38, V39, V40} -> begin (V42 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V41) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V41)) end, V40, []))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V77 = begin (V47 = ('un--lookupCtxtExact'({'Core.Name.Resolved', V39}, V0))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V76 = fun (V52) -> {'Prelude.Types.Right', case V51 of {'Prelude.Types.Nothing'} -> {'Core.TT.Meta', V37, V38, V39, V46}; {'Prelude.Types.Just', V53} -> {'Core.TT.Meta', V37, case V53 of {'Core.Context.Context.MkGlobalDef', V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75} -> V55 end, V39, V46} end} end), V76 end(V48)) end end end end), V77 end(V43)) end end end end; {'Core.TT.Bind', V78, V79, V80, V81} -> begin (V83 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V82) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V82)) end, V80))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V95 = begin (V88 = ('dn--un--full_HasNames_(Term $vars)'(V0, V81))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V94 = fun (V93) -> {'Prelude.Types.Right', {'Core.TT.Bind', V78, V79, V87, V92}} end), V94 end(V89)) end end end end), V95 end(V84)) end end end end; {'Core.TT.App', V96, V97, V98} -> begin (V99 = ('dn--un--full_HasNames_(Term $vars)'(V0, V97))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V111 = begin (V104 = ('dn--un--full_HasNames_(Term $vars)'(V0, V98))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V110 = fun (V109) -> {'Prelude.Types.Right', {'Core.TT.App', V96, V103, V108}} end), V110 end(V105)) end end end end), V111 end(V100)) end end end end; {'Core.TT.As', V112, V113, V114, V115} -> begin (V116 = ('dn--un--full_HasNames_(Term $vars)'(V0, V114))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V128 = begin (V121 = ('dn--un--full_HasNames_(Term $vars)'(V0, V115))), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V127 = fun (V126) -> {'Prelude.Types.Right', {'Core.TT.As', V112, V113, V120, V125}} end), V127 end(V122)) end end end end), V128 end(V117)) end end end end; {'Core.TT.TDelayed', V129, V130, V131} -> begin (V132 = ('dn--un--full_HasNames_(Term $vars)'(V0, V131))), fun (V133) -> begin (V134 = (V132(V133))), case V134 of {'Prelude.Types.Left', V135} -> {'Prelude.Types.Left', V135}; {'Prelude.Types.Right', V136} -> (begin (V138 = fun (V137) -> {'Prelude.Types.Right', {'Core.TT.TDelayed', V129, V130, V136}} end), V138 end(V133)) end end end end; {'Core.TT.TDelay', V139, V140, V141, V142} -> begin (V143 = ('dn--un--full_HasNames_(Term $vars)'(V0, V141))), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V155 = begin (V148 = ('dn--un--full_HasNames_(Term $vars)'(V0, V142))), fun (V149) -> begin (V150 = (V148(V149))), case V150 of {'Prelude.Types.Left', V151} -> {'Prelude.Types.Left', V151}; {'Prelude.Types.Right', V152} -> (begin (V154 = fun (V153) -> {'Prelude.Types.Right', {'Core.TT.TDelay', V139, V140, V147, V152}} end), V154 end(V149)) end end end end), V155 end(V144)) end end end end; {'Core.TT.TForce', V156, V157, V158} -> begin (V159 = ('dn--un--full_HasNames_(Term $vars)'(V0, V158))), fun (V160) -> begin (V161 = (V159(V160))), case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> (begin (V165 = fun (V164) -> {'Prelude.Types.Right', {'Core.TT.TForce', V156, V157, V163}} end), V165 end(V160)) end end end end; {'Core.TT.TType', V166, V167} -> case V167 of {'Core.Name.Resolved', V168} -> begin (V169 = ('un--lookupCtxtExact'({'Core.Name.Resolved', V168}, V0))), fun (V170) -> begin (V171 = (V169(V170))), case V171 of {'Prelude.Types.Left', V172} -> {'Prelude.Types.Left', V172}; {'Prelude.Types.Right', V173} -> (begin (V198 = fun (V174) -> case V173 of {'Prelude.Types.Just', V175} -> {'Prelude.Types.Right', {'Core.TT.TType', V166, case V175 of {'Core.Context.Context.MkGlobalDef', V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197} -> V177 end}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Core.TT.TType', V166, {'Core.Name.Resolved', V168}}} end end), V198 end(V170)) end end end end; _ -> fun (V199) -> {'Prelude.Types.Right', V1} end end; _ -> fun (V200) -> {'Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames_(NameMap $a)'(V0, V1) -> ('nested--14049-10406--in--un--insertAll'(V1, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V1)))).
'dn--un--full_HasNames_(Maybe $a)'(V0, V1, V2) -> case V2 of {'Prelude.Types.Nothing'} -> fun (V3) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V4} -> begin (V7 = case V0 of {'Core.Context.dn--un--__mkHasNames', V5, V6} -> ((V5(V1))(V4)) end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V11}} end), V13 end(V8)) end end end end end.
'dn--un--full_HasNames_(CaseTree $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseTree.Case', V2, V3, V4, V5} -> begin (V6 = ('dn--un--full_HasNames_(Term $vars)'(V0, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V19 = begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> ('dn--un--full_HasNames_(CaseAlt $vars)'(V0, V11)) end, V5, []))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = fun (V17) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.Case', V2, V3, V10, V16}} end), V18 end(V13)) end end end end), V19 end(V7)) end end end end; {'Core.Case.CaseTree.STerm', V20, V21} -> begin (V22 = ('dn--un--full_HasNames_(Term $vars)'(V0, V21))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V28 = fun (V27) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.STerm', V20, V26}} end), V28 end(V23)) end end end end; _ -> fun (V29) -> {'Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames_(CaseAlt $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseTree.ConCase', V2, V3, V4, V5} -> begin (V6 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V41 = begin (V11 = ('un--lookupCtxtExact'(V2, V0))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V40 = fun (V16) -> case V15 of {'Prelude.Types.Just', V17} -> {'Prelude.Types.Right', {'Core.Case.CaseTree.ConCase', case V17 of {'Core.Context.Context.MkGlobalDef', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> V19 end, V3, V4, V10}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Core.Case.CaseTree.ConCase', V2, V3, V4, V10}} end end), V40 end(V12)) end end end end), V41 end(V7)) end end end end; {'Core.Case.CaseTree.DelayCase', V42, V43, V44} -> begin (V45 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V44))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V51 = fun (V50) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.DelayCase', V42, V43, V49}} end), V51 end(V46)) end end end end; {'Core.Case.CaseTree.ConstCase', V52, V53} -> begin (V54 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V53))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V60 = fun (V59) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.ConstCase', V52, V58}} end), V60 end(V55)) end end end end; {'Core.Case.CaseTree.DefaultCase', V61} -> begin (V62 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V61))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V68 = fun (V67) -> {'Prelude.Types.Right', {'Core.Case.CaseTree.DefaultCase', V66}} end), V68 end(V63)) end end end end end.
'dn--un--full_HasNames_((Env Term) $vars)'(V0, V1) -> case V1 of {'Core.Env.Nil'} -> fun (V2) -> {'Prelude.Types.Right', {'Core.Env.Nil'}} end; {'Core.Env.::', V3, V4} -> begin (V6 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V5) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V5)) end, V3))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V18 = begin (V11 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V4))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Core.Env.::', V10, V15}} end), V17 end(V12)) end end end end), V18 end(V7)) end end end end end.
'dn--un--__Impl_StripNamespace_GlobalDef'() -> {'Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_GlobalDef'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_GlobalDef'(V2, V3)) end end}.
'dn--un--__Impl_StripNamespace_Def'() -> {'Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_Def'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_Def'(V2, V3)) end end}.
'dn--un--__Impl_Show_BuiltinType'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_BuiltinType'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_BuiltinType'(V1, V2)) end end}.
'dn--un--__Impl_HasNames_Warning'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Warning'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Warning'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_UConstraint'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_UConstraint'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_UConstraint'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Transform'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Transform'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Transform'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Totality'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Totality'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Totality'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Terminating'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Terminating'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Terminating'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_SCCall'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_SCCall'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_SCCall'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Pat'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Pat'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Pat'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_PartialReason'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_PartialReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_PartialReason'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Name'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Name'(V0, V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames_Name'(V2, V3, V4)) end end end}.
'dn--un--__Impl_HasNames_GlobalDef'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_GlobalDef'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_GlobalDef'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Error'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Error'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Error'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Def'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Def'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Def'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Covering'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Covering'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Covering'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Clause'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Clause'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Clause'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_CaseError'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_CaseError'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_CaseError'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_(Term $vars)'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_(Term $vars)'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_(Maybe $a)'(V0) -> {'Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(Maybe $a)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames_(Maybe $a)'(V0, V3, V4)) end end}.
'dn--un--__Impl_HasNames_(CaseTree $vars)'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_(CaseTree $vars)'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_(CaseAlt $vars)'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_(CaseAlt $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_(CaseAlt $vars)'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_((Env Term) $vars)'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_((Env Term) $vars)'(V2, V3)) end end}.
'un--withLogLevel'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V258 = begin (V81 = case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> case V17 of {'Core.Options.MkOptions', V45, V46, V47, V48, V49, V50, V51, V52, V53, V54} -> case V47 of {'Core.Options.MkSessionOpts', V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80} -> V66 end end end), begin (V155 = begin (V82 = V0), fun (V83) -> begin (V154 = (begin (V84 = V82), fun (V85) -> ('erlang':'put'(V84, case V12 of {'Core.Context.MkDefs', V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117} -> case V90 of {'Core.Options.MkOptions', V118, V119, V120, V121, V122, V123, V124, V125, V126, V127} -> case V120 of {'Core.Options.MkSessionOpts', V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153} -> {'Core.Context.MkDefs', V86, V87, V88, V89, {'Core.Options.MkOptions', V118, V119, {'Core.Options.MkSessionOpts', V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, ('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V1, V81)), V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153}, V121, V122, V123, V124, V125, V126, V127}, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117} end end end)) end end(V83))), {'Prelude.Types.Right', V154} end end end), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V257 = begin (V160 = V2), fun (V161) -> begin (V162 = (V160(V161))), case V162 of {'Prelude.Types.Left', V163} -> {'Prelude.Types.Left', V163}; {'Prelude.Types.Right', V164} -> (begin (V256 = begin (V170 = begin (V165 = V0), fun (V166) -> begin (V169 = (begin (V167 = V165), fun (V168) -> ('erlang':'get'(V167)) end end(V166))), {'Prelude.Types.Right', V169} end end end), fun (V171) -> begin (V172 = (V170(V171))), case V172 of {'Prelude.Types.Left', V173} -> {'Prelude.Types.Left', V173}; {'Prelude.Types.Right', V174} -> (begin (V255 = begin (V248 = begin (V175 = V0), fun (V176) -> begin (V247 = (begin (V177 = V175), fun (V178) -> ('erlang':'put'(V177, case V174 of {'Core.Context.MkDefs', V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210} -> case V183 of {'Core.Options.MkOptions', V211, V212, V213, V214, V215, V216, V217, V218, V219, V220} -> case V213 of {'Core.Options.MkSessionOpts', V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246} -> {'Core.Context.MkDefs', V179, V180, V181, V182, {'Core.Options.MkOptions', V211, V212, {'Core.Options.MkSessionOpts', V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V81, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246}, V214, V215, V216, V217, V218, V219, V220}, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210} end end end)) end end(V176))), {'Prelude.Types.Right', V247} end end end), fun (V249) -> begin (V250 = (V248(V249))), case V250 of {'Prelude.Types.Left', V251} -> {'Prelude.Types.Left', V251}; {'Prelude.Types.Right', V252} -> (begin (V254 = fun (V253) -> {'Prelude.Types.Right', V164} end), V254 end(V249)) end end end end), V255 end(V171)) end end end end), V256 end(V161)) end end end end), V257 end(V156)) end end end end end), V258 end(V9)) end end end end.
'un--withExtendedNS'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V173 = begin (V45 = case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V15 end), begin (V83 = begin (V46 = V0), fun (V47) -> begin (V82 = (begin (V48 = V46), fun (V49) -> ('erlang':'put'(V48, case V12 of {'Core.Context.MkDefs', V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81} -> {'Core.Context.MkDefs', V50, V51, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V45, V1)), V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81} end)) end end(V47))), {'Prelude.Types.Right', V82} end end end), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V172 = begin (V109 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V88 = V2), ((begin (V104 = fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V101, V102, V103)) end end end end end), fun (V105) -> fun (V106) -> ((((V104('erased'))('erased'))(V105))(V106)) end end end((begin (V96 = fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> {'Prelude.Types.Right', (V92(V95))} end end end end end), fun (V97) -> fun (V98) -> ((((V96('erased'))('erased'))(V97))(V98)) end end end(fun (V89) -> {'Prelude.Types.Right', V89} end))))(V88)) end, fun (V107) -> fun (V108) -> {'Prelude.Types.Right', {'Prelude.Types.Left', V107}} end end))), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V171 = begin (V119 = begin (V114 = V0), fun (V115) -> begin (V118 = (begin (V116 = V114), fun (V117) -> ('erlang':'get'(V116)) end end(V115))), {'Prelude.Types.Right', V118} end end end), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V170 = begin (V161 = begin (V124 = V0), fun (V125) -> begin (V160 = (begin (V126 = V124), fun (V127) -> ('erlang':'put'(V126, case V123 of {'Core.Context.MkDefs', V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159} -> {'Core.Context.MkDefs', V128, V129, V45, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159} end)) end end(V125))), {'Prelude.Types.Right', V160} end end end), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V169 = fun (V166) -> case V113 of {'Prelude.Types.Left', V167} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V167, V166)); {'Prelude.Types.Right', V168} -> {'Prelude.Types.Right', V168} end end), V169 end(V162)) end end end end), V170 end(V120)) end end end end), V171 end(V110)) end end end end), V172 end(V84)) end end end end end), V173 end(V9)) end end end end.
'un--withCtxt'(V0, V1) -> ('Idris.Idris2.Core.Core':'un--wrapRef'({'Core.Context.Ctxt'}, V0, fun (V2) -> ('nested--30973-26537--in--un--resetCtxt'(V0, V2)) end, V1)).
'un--visibleInAny'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V3, V4)) end end, 0}, fun (V5) -> ('un--visibleIn'(V5, V1, V2)) end, V0)).
'un--visibleIn'(V0, V1, V2) -> case V1 of {'Core.Name.NS', V3, V4} -> case V2 of 0 -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)); _ -> 1 end; _ -> 1 end.
'un--updateTy'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V94 = begin (V45 = ('un--lookupCtxtExact'({'Core.Name.Resolved', V1}, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V93 = case V49 of {'Prelude.Types.Just', V50} -> begin (V73 = ('un--addDef'(V0, {'Core.Name.Resolved', V1}, case V50 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> {'Core.Context.Context.MkGlobalDef', V51, V52, V2, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} end))), ((begin (V89 = fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V86, V87, V88)) end end end end end), fun (V90) -> fun (V91) -> ((((V89('erased'))('erased'))(V90))(V91)) end end end((begin (V81 = fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> {'Prelude.Types.Right', (V77(V80))} end end end end end), fun (V82) -> fun (V83) -> ((((V81('erased'))('erased'))(V82))(V83)) end end end(fun (V74) -> {'Builtin.MkUnit'} end))))(V73)) end; {'Prelude.Types.Nothing'} -> fun (V92) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V93 end(V46)) end end end end), V94 end(V9)) end end end end.
'un--updateSession'(V0, V1) -> begin (V2 = ('un--getSession'(V0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V7 = ('un--setSession'(V0, (V1(V6))))), V7 end(V3)) end end end end.
'un--updateDef'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V118 = begin (V45 = ('un--lookupCtxtExact'(V1, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V117 = case V49 of {'Prelude.Types.Just', V50} -> case (V2(case V50 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> V68 end)) of {'Prelude.Types.Nothing'} -> fun (V73) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Prelude.Types.Just', V74} -> begin (V97 = ('un--addDef'(V0, V1, case V50 of {'Core.Context.Context.MkGlobalDef', V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96} -> {'Core.Context.Context.MkGlobalDef', V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V74, V93, V94, V95, {'Prelude.Types.Nothing'}} end))), ((begin (V113 = fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V110, V111, V112)) end end end end end), fun (V114) -> fun (V115) -> ((((V113('erased'))('erased'))(V114))(V115)) end end end((begin (V105 = fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> {'Prelude.Types.Right', (V101(V104))} end end end end end), fun (V106) -> fun (V107) -> ((((V105('erased'))('erased'))(V106))(V107)) end end end(fun (V98) -> {'Builtin.MkUnit'} end))))(V97)) end end; {'Prelude.Types.Nothing'} -> fun (V116) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V117 end(V46)) end end end end), V118 end(V9)) end end end end.
'un--unsetFlag'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V118 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V117 = case V50 of {'Prelude.Types.Just', V51} -> begin (V75 = ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V52) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V52, V3)) end, case V51 of {'Core.Context.Context.MkGlobalDef', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74} -> V64 end))), begin (V98 = ('un--addDef'(V0, V2, case V51 of {'Core.Context.Context.MkGlobalDef', V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97} -> {'Core.Context.Context.MkGlobalDef', V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V75, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97} end))), ((begin (V114 = fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V111, V112, V113)) end end end end end), fun (V115) -> fun (V116) -> ((((V114('erased'))('erased'))(V115))(V116)) end end end((begin (V106 = fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> {'Prelude.Types.Right', (V102(V105))} end end end end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V99) -> {'Builtin.MkUnit'} end))))(V98)) end end; {'Prelude.Types.Nothing'} -> ('un--undefinedName'(V0, V1, V2)) end), V117 end(V47)) end end end end), V118 end(V10)) end end end end.
'un--unhideName'(V0, V1) -> case V1 of {'Core.Context.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13} -> {'Core.Context.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'(V0, V12)), V13} end.
'un--unhide'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V161 = begin (V45 = ('un--lookupHiddenCtxtName'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V160 = case V49 of [E0 | E1] -> (fun (V50, V51) -> case V50 of {'Builtin.MkPair', V52, V53} -> case V51 of [] -> begin (V91 = begin (V54 = V0), fun (V55) -> begin (V90 = (begin (V56 = V54), fun (V57) -> ('erlang':'put'(V56, case V12 of {'Core.Context.MkDefs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89} -> {'Core.Context.MkDefs', ('un--unhideName'(V52, V58)), V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89} end)) end end(V55))), {'Prelude.Types.Right', V90} end end end), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V135 = case ('un--isHidden'(V52, case V12 of {'Core.Context.MkDefs', V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127} -> V96 end)) of 1 -> fun (V128) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('un--recordWarning'(V0, {'Core.Core.GenericWarn', <<(begin (V130 = fun (V129) -> V129 end), fun (V131) -> (V130(V131)) end end(<<"Trying to %unhide `"/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V52))/binary, (begin (V133 = fun (V132) -> V132 end), fun (V134) -> (V133(V134)) end end(<<"`, which was not hidden in the first place"/utf8>>))/binary>>/binary>>})) end), V135 end(V92)) end end end end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V141 = fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V139, V140)) end end end end), fun (V142) -> fun (V143) -> ((((V141('erased'))('erased'))(V142))(V143)) end end end(fun (V136) -> ('Idris.Idris2.Builtin':'un--fst'(V136)) end))(V49)))) end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V149 = fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V147, V148)) end end end end), fun (V150) -> fun (V151) -> ((((V149('erased'))('erased'))(V150))(V151)) end end end(fun (V144) -> ('Idris.Idris2.Builtin':'un--fst'(V144)) end))(V49)))) end end(E0, E1)); _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V157 = fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V155, V156)) end end end end), fun (V158) -> fun (V159) -> ((((V157('erased'))('erased'))(V158))(V159)) end end end(fun (V152) -> ('Idris.Idris2.Builtin':'un--fst'(V152)) end))(V49)))) end), V160 end(V46)) end end end end), V161 end(V9)) end end end end.
'un--undefinedName'(V0, V1, V2) -> ('un--maybeMisspelling'(V0, {'Core.Core.UndefinedName', V1, V2}, V2)).
'un--toResolvedNames'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V47 = case V1 of {'Core.Context.dn--un--__mkHasNames', V13, V14} -> ((V14(case V12 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> V15 end))(V2)) end), V47 end(V9)) end end end end.
'un--toFullNames'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V47 = case V1 of {'Core.Context.dn--un--__mkHasNames', V13, V14} -> ((V13(case V12 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> V15 end))(V2)) end), V47 end(V9)) end end end end.
'un--startTimer'(V0, V1, V2) -> begin (V3 = ('un--getTime'())), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V56 = begin (V13 = begin (V8 = V0), fun (V9) -> begin (V12 = (begin (V10 = V8), fun (V11) -> ('erlang':'get'(V10)) end end(V9))), {'Prelude.Types.Right', V12} end end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V55 = begin (V18 = V0), fun (V19) -> begin (V54 = (begin (V20 = V18), fun (V21) -> ('erlang':'put'(V20, case V17 of {'Core.Context.MkDefs', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> {'Core.Context.MkDefs', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, {'Prelude.Types.Just', {'Builtin.MkPair', (V7 + (V1 * 1000000)), V2}}, V51, V52, V53} end)) end end(V19))), {'Prelude.Types.Right', V54} end end end), V55 end(V14)) end end end end), V56 end(V4)) end end end end.
'un--sndName'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V58 = fun (V11) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Prelude.Types.Nothing'} end, fun () -> fun (V12) -> {'Prelude.Types.Just', case V12 of {'Core.Options.MkPairNs', V13, V14, V15} -> V15 end} end end, case V10 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> V52 end end))} end), V58 end(V7)) end end end end.
'un--showSimilarNames'(V0, V1, V2, V3) -> case ('Idris.Idris2.Data.Either':'un--partitionEithers'(((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> case ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Core.Name':'un--splitNS'(V5)))), V0)) of 0 -> case V7 of 0 -> {'Prelude.Types.Right', {'Builtin.MkPair', V5, V8}}; _ -> {'Prelude.Types.Left', {'Builtin.MkPair', V5, V8}} end; _ -> {'Prelude.Types.Left', {'Builtin.MkPair', V5, V8}} end end end end))(V3)))) of {'Builtin.MkPair', V16, V17} -> begin (V24 = fun (V18) -> ('Idris.Idris2.Data.List':'un--sortBy'(fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Basics':'un--on'(fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V21, V22)) end end, fun (V23) -> ('Idris.Idris2.Builtin':'un--snd'(V23)) end, V19, V20)) end end, V18)) end), begin (V26 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V25) -> ('nested--20725-17050--in--un--showNames'(V3, V2, V1, V0, V1, V2, 0, ('Idris.Idris2.Builtin':'un--fst'(V25)))) end, (V24(V16))))), begin (V28 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V27) -> ('nested--20725-17050--in--un--showNames'(V3, V2, V1, V0, V1, V2, 1, ('Idris.Idris2.Builtin':'un--fst'(V27)))) end, (V24(V17))))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V31, V32)) end end}, V26)), ('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V35, V36)) end end}, V28)))) end end end end.
'un--setWorkingDir'(V0, V1) -> begin (V50 = begin (V31 = fun (V2) -> begin (V30 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Prelude.Types.Right', V30} end end), ((begin (V47 = fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V44, V45, V46)) end end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end((begin (V39 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> {'Prelude.Types.Right', (V35(V38))} end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V32) -> {'Builtin.MkUnit'} end))))(V31)) end), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V163 = begin (V84 = fun (V55) -> begin (V83 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> V62 end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), begin (V70 = (V67(V68))), (V69(V70)) end end end end end end end}, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), ((V74(V76))(V75)) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V78(V79))), (V80(V79)) end end end end}, fun (V81) -> fun (V82) -> V82 end end}))(V55))), {'Prelude.Types.Right', V83} end end), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V162 = case V88 of {'Prelude.Types.Just', V89} -> begin (V95 = begin (V90 = V0), fun (V91) -> begin (V94 = (begin (V92 = V90), fun (V93) -> ('erlang':'get'(V92)) end end(V91))), {'Prelude.Types.Right', V94} end end end), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V157 = begin (V100 = V0), fun (V101) -> begin (V156 = (begin (V102 = V100), fun (V103) -> ('erlang':'put'(V102, case V99 of {'Core.Context.MkDefs', V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135} -> case V108 of {'Core.Options.MkOptions', V136, V137, V138, V139, V140, V141, V142, V143, V144, V145} -> case V136 of {'Core.Options.MkDirs', V146, V147, V148, V149, V150, V151, V152, V153, V154, V155} -> {'Core.Context.MkDefs', V104, V105, V106, V107, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V89, V147, V148, V149, V150, V151, V152, V153, V154, V155}, V137, V138, V139, V140, V141, V142, V143, V144, V145}, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135} end end end)) end end(V101))), {'Prelude.Types.Right', V156} end end end), V157 end(V96)) end end end end; {'Prelude.Types.Nothing'} -> fun (V158) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V160 = fun (V159) -> V159 end), fun (V161) -> (V160(V161)) end end(<<"Can\x{27}t get current directory"/utf8>>))}, V158)) end end), V162 end(V85)) end end end end), V163 end(V51)) end end end end.
'un--setVisible'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V61 = begin (V12 = V0), fun (V13) -> begin (V60 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V16 of {'Core.Context.Context.MkContext', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> {'Core.Context.MkDefs', {'Core.Context.Context.MkContext', V48, V49, V50, V51, V52, V53, V54, [V1 | V55], V56, V57, V58, V59}, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end)) end end(V13))), {'Prelude.Types.Right', V60} end end end), V61 end(V8)) end end end end.
'un--setVisibility'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V94 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V93 = case V50 of {'Prelude.Types.Just', V51} -> begin (V74 = ('un--addDef'(V0, V2, case V51 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V3, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} end))), ((begin (V90 = fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V87, V88, V89)) end end end end end), fun (V91) -> fun (V92) -> ((((V90('erased'))('erased'))(V91))(V92)) end end end((begin (V82 = fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> {'Prelude.Types.Right', (V78(V81))} end end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V75) -> {'Builtin.MkUnit'} end))))(V74)) end; {'Prelude.Types.Nothing'} -> ('un--undefinedName'(V0, V1, V2)) end), V93 end(V47)) end end end end), V94 end(V10)) end end end end.
'un--setUniqueSearch'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V76 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V75 = case V50 of {'Prelude.Types.Just', V51} -> begin (V52 = {'Prelude.Types.Just', V51}), ('case--case block in setUniqueSearch-22423'(V3, V2, V1, V0, V13, V51, V52, case V51 of {'Core.Context.Context.MkGlobalDef', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74} -> V70 end)) end; _ -> ('un--undefinedName'(V0, V1, V2)) end), V75 end(V47)) end end end end), V76 end(V10)) end end end end.
'un--setUnboundImplicits'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V66 = begin (V12 = V0), fun (V13) -> begin (V65 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V51 of {'Core.Options.MkElabDirectives', V58, V59, V60, V61, V62, V63, V64} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, V50, {'Core.Options.MkElabDirectives', V58, V1, V60, V61, V62, V63, V64}, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V65} end end end), V66 end(V8)) end end end end.
'un--setTotality'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V94 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V93 = case V50 of {'Prelude.Types.Just', V51} -> begin (V74 = ('un--addDef'(V0, V2, case V51 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V3, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} end))), ((begin (V90 = fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V87, V88, V89)) end end end end end), fun (V91) -> fun (V92) -> ((((V90('erased'))('erased'))(V91))(V92)) end end end((begin (V82 = fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> {'Prelude.Types.Right', (V78(V81))} end end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V75) -> {'Builtin.MkUnit'} end))))(V74)) end; {'Prelude.Types.Nothing'} -> ('un--undefinedName'(V0, V1, V2)) end), V93 end(V47)) end end end end), V94 end(V10)) end end end end.
'un--setTerminating'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V96 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V95 = case V50 of {'Prelude.Types.Just', V51} -> begin (V76 = ('un--addDef'(V0, V2, case V51 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> case V62 of {'Core.TT.MkTotality', V74, V75} -> {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, {'Core.TT.MkTotality', V3, V75}, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} end end))), ((begin (V92 = fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V89, V90, V91)) end end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end((begin (V84 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> {'Prelude.Types.Right', (V80(V83))} end end end end end), fun (V85) -> fun (V86) -> ((((V84('erased'))('erased'))(V85))(V86)) end end end(fun (V77) -> {'Builtin.MkUnit'} end))))(V76)) end; {'Prelude.Types.Nothing'} -> ('un--undefinedName'(V0, V1, V2)) end), V95 end(V47)) end end end end), V96 end(V10)) end end end end.
'un--setSourceDir'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V69 = begin (V12 = V0), fun (V13) -> begin (V68 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V48 of {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V58, V1, V60, V61, V62, V63, V64, V65, V66, V67}, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V68} end end end), V69 end(V8)) end end end end.
'un--setSizeChange'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V94 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V93 = case V50 of {'Prelude.Types.Just', V51} -> begin (V74 = ('un--addDef'(V0, V2, case V51 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V3, V73} end))), ((begin (V90 = fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V87, V88, V89)) end end end end end), fun (V91) -> fun (V92) -> ((((V90('erased'))('erased'))(V91))(V92)) end end end((begin (V82 = fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> {'Prelude.Types.Right', (V78(V81))} end end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V75) -> {'Builtin.MkUnit'} end))))(V74)) end; {'Prelude.Types.Nothing'} -> ('un--undefinedName'(V0, V1, V2)) end), V93 end(V47)) end end end end), V94 end(V10)) end end end end.
'un--setSession'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V59 = begin (V12 = V0), fun (V13) -> begin (V58 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, V1, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end)) end end(V13))), {'Prelude.Types.Right', V58} end end end), V59 end(V8)) end end end end.
'un--setSearchTimeout'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V85 = begin (V12 = V0), fun (V13) -> begin (V84 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V50 of {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V62, V63, V64, V65, V1, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83}, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V84} end end end), V85 end(V8)) end end end end.
'un--setRewrite'(V0, V1, V2, V3) -> begin (V4 = ('un--checkUnambig'(V0, V1, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V63 = begin (V9 = ('un--checkUnambig'(V0, V1, V2))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V62 = begin (V19 = begin (V14 = V0), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V61 = begin (V24 = V0), fun (V25) -> begin (V60 = (begin (V26 = V24), fun (V27) -> ('erlang':'put'(V26, case V23 of {'Core.Context.MkDefs', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> {'Core.Context.MkDefs', V28, V29, V30, V31, ('Idris.Idris2.Core.Options':'un--setRewrite'(V13, V8, V32)), V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} end)) end end(V25))), {'Prelude.Types.Right', V60} end end end), V61 end(V20)) end end end end), V62 end(V10)) end end end end), V63 end(V5)) end end end end.
'un--setPrefixRecordProjections'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V66 = begin (V12 = V0), fun (V13) -> begin (V65 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V51 of {'Core.Options.MkElabDirectives', V58, V59, V60, V61, V62, V63, V64} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, V50, {'Core.Options.MkElabDirectives', V58, V59, V60, V61, V62, V63, V1}, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V65} end end end), V66 end(V8)) end end end end.
'un--setPrefix'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V69 = begin (V12 = V0), fun (V13) -> begin (V68 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V48 of {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V1, V64, V65, V66, V67}, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V68} end end end), V69 end(V8)) end end end end.
'un--setPair'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--checkUnambig'(V0, V1, V2))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V70 = begin (V10 = ('un--checkUnambig'(V0, V1, V3))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V69 = begin (V15 = ('un--checkUnambig'(V0, V1, V4))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V68 = begin (V25 = begin (V20 = V0), fun (V21) -> begin (V24 = (begin (V22 = V20), fun (V23) -> ('erlang':'get'(V22)) end end(V21))), {'Prelude.Types.Right', V24} end end end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V67 = begin (V30 = V0), fun (V31) -> begin (V66 = (begin (V32 = V30), fun (V33) -> ('erlang':'put'(V32, case V29 of {'Core.Context.MkDefs', V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} -> {'Core.Context.MkDefs', V34, V35, V36, V37, ('Idris.Idris2.Core.Options':'un--setPair'(V9, V14, V19, V38)), V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} end)) end end(V31))), {'Prelude.Types.Right', V66} end end end), V67 end(V26)) end end end end), V68 end(V16)) end end end end), V69 end(V11)) end end end end), V70 end(V6)) end end end end.
'un--setPackageDirs'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V69 = begin (V12 = V0), fun (V13) -> begin (V68 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V48 of {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V1, V66, V67}, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V68} end end end), V69 end(V8)) end end end end.
'un--setPPrint'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V59 = begin (V12 = V0), fun (V13) -> begin (V58 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V1, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end)) end end(V13))), {'Prelude.Types.Right', V58} end end end), V59 end(V8)) end end end end.
'un--setOutputDir'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V69 = begin (V12 = V0), fun (V13) -> begin (V68 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V48 of {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V58, V59, V60, V61, V1, V63, V64, V65, V66, V67}, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V68} end end end), V69 end(V8)) end end end end.
'un--setOpenHints'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V1, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--setNextEntry'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V61 = begin (V12 = V0), fun (V13) -> begin (V60 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V16 of {'Core.Context.Context.MkContext', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> {'Core.Context.MkDefs', {'Core.Context.Context.MkContext', V48, V1, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59}, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end)) end end(V13))), {'Prelude.Types.Right', V60} end end end), V61 end(V8)) end end end end.
'un--setNestedNS'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, V18, V1, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--setNameFlag'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V155 = begin (V46 = ('un--lookupCtxtName'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V154 = case V50 of [E0 | E1] -> (fun (V51, V52) -> case V51 of {'Builtin.MkPair', V53, V54} -> case V54 of {'Builtin.MkPair', V55, V56} -> case V52 of [] -> begin (V80 = [V3 | ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V57) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V57, V3)) end, case V56 of {'Core.Context.Context.MkGlobalDef', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79} -> V69 end))]), begin (V103 = ('un--addDef'(V0, {'Core.Name.Resolved', V55}, case V56 of {'Core.Context.Context.MkGlobalDef', V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} -> {'Core.Context.Context.MkGlobalDef', V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V80, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} end))), ((begin (V119 = fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V116, V117, V118)) end end end end end), fun (V120) -> fun (V121) -> ((((V119('erased'))('erased'))(V120))(V121)) end end end((begin (V111 = fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> {'Prelude.Types.Right', (V107(V110))} end end end end end), fun (V112) -> fun (V113) -> ((((V111('erased'))('erased'))(V112))(V113)) end end end(fun (V104) -> {'Builtin.MkUnit'} end))))(V103)) end end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V127 = fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V125, V126)) end end end end), fun (V128) -> fun (V129) -> ((((V127('erased'))('erased'))(V128))(V129)) end end end(fun (V122) -> ('Idris.Idris2.Builtin':'un--fst'(V122)) end))(V50)))) end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V135 = fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V133, V134)) end end end end), fun (V136) -> fun (V137) -> ((((V135('erased'))('erased'))(V136))(V137)) end end end(fun (V130) -> ('Idris.Idris2.Builtin':'un--fst'(V130)) end))(V50)))) end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V143 = fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V141, V142)) end end end end), fun (V144) -> fun (V145) -> ((((V143('erased'))('erased'))(V144))(V145)) end end end(fun (V138) -> ('Idris.Idris2.Builtin':'un--fst'(V138)) end))(V50)))) end end(E0, E1)); _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V151 = fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V149, V150)) end end end end), fun (V152) -> fun (V153) -> ((((V151('erased'))('erased'))(V152))(V153)) end end end(fun (V146) -> ('Idris.Idris2.Builtin':'un--fst'(V146)) end))(V50)))) end), V154 end(V47)) end end end end), V155 end(V10)) end end end end.
'un--setNS'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, V1, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--setNFThreshold'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V66 = begin (V12 = V0), fun (V13) -> begin (V65 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V51 of {'Core.Options.MkElabDirectives', V58, V59, V60, V61, V62, V63, V64} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, V50, {'Core.Options.MkElabDirectives', V58, V59, V60, V61, V62, V1, V64}, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V65} end end end), V66 end(V8)) end end end end.
'un--setMutWith'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V107 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V106 = case V50 of {'Prelude.Types.Just', V51} -> case V51 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> case V69 of {'Core.Context.Context.TCon', V74, V75, V76, V77, V78, V79, V80, V81} -> ('un--updateDef'(V0, V2, fun (V82) -> {'Prelude.Types.Just', {'Core.Context.Context.TCon', V74, V75, V76, V77, V78, V3, V80, V81}} end)); _ -> fun (V83) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V51 of {'Core.Context.Context.MkGlobalDef', V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105} -> V85 end))/binary, <<" is not a type constructor [setMutWith]"/utf8>>/binary>>}, V83)) end end end; _ -> ('un--undefinedName'(V0, V1, V2)) end), V106 end(V47)) end end end end), V107 end(V10)) end end end end.
'un--setLogTimings'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V85 = begin (V12 = V0), fun (V13) -> begin (V84 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V50 of {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, {'Prelude.Types.Just', V1}, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83}, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V84} end end end), V85 end(V8)) end end end end.
'un--setLinearCheck'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V94 = begin (V45 = ('un--lookupCtxtExact'({'Core.Name.Resolved', V1}, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V93 = case V49 of {'Prelude.Types.Just', V50} -> begin (V73 = ('un--addDef'(V0, {'Core.Name.Resolved', V1}, case V50 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V2, V68, V69, V70, V71, V72} end))), ((begin (V89 = fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V86, V87, V88)) end end end end end), fun (V90) -> fun (V91) -> ((((V89('erased'))('erased'))(V90))(V91)) end end end((begin (V81 = fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> {'Prelude.Types.Right', (V77(V80))} end end end end end), fun (V82) -> fun (V83) -> ((((V81('erased'))('erased'))(V82))(V83)) end end end(fun (V74) -> {'Builtin.MkUnit'} end))))(V73)) end; {'Prelude.Types.Nothing'} -> fun (V92) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V93 end(V46)) end end end end), V94 end(V9)) end end end end.
'un--setIncData'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V50 = begin (V13 = V0), fun (V14) -> begin (V49 = (begin (V15 = V13), fun (V16) -> ('erlang':'put'(V15, case V12 of {'Core.Context.MkDefs', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} -> {'Core.Context.MkDefs', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, [{'Builtin.MkPair', V1, V2} | V39], V40, V41, V42, V43, V44, V45, V46, V47, V48} end)) end end(V14))), {'Prelude.Types.Right', V49} end end end), V50 end(V9)) end end end end.
'un--setFromString'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, V18, V19, ('Idris.Idris2.Core.Options':'un--setFromString'(V1, V20)), V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--setFromInteger'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, V18, V19, ('Idris.Idris2.Core.Options':'un--setFromInteger'(V1, V20)), V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--setFromDouble'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, V18, V19, ('Idris.Idris2.Core.Options':'un--setFromDouble'(V1, V20)), V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--setFromChar'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, V18, V19, ('Idris.Idris2.Core.Options':'un--setFromChar'(V1, V20)), V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--setFlag'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V118 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V117 = case V50 of {'Prelude.Types.Just', V51} -> begin (V75 = [V3 | ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V52) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V52, V3)) end, case V51 of {'Core.Context.Context.MkGlobalDef', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74} -> V64 end))]), begin (V98 = ('un--addDef'(V0, V2, case V51 of {'Core.Context.Context.MkGlobalDef', V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97} -> {'Core.Context.Context.MkGlobalDef', V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V75, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97} end))), ((begin (V114 = fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V111, V112, V113)) end end end end end), fun (V115) -> fun (V116) -> ((((V114('erased'))('erased'))(V115))(V116)) end end end((begin (V106 = fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> {'Prelude.Types.Right', (V102(V105))} end end end end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V99) -> {'Builtin.MkUnit'} end))))(V98)) end end; {'Prelude.Types.Nothing'} -> ('un--undefinedName'(V0, V1, V2)) end), V117 end(V47)) end end end end), V118 end(V10)) end end end end.
'un--setExtraDirs'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V69 = begin (V12 = V0), fun (V13) -> begin (V68 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V48 of {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V1, V65, V66, V67}, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V68} end end end), V69 end(V8)) end end end end.
'un--setExternal'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V76 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V75 = case V50 of {'Prelude.Types.Just', V51} -> begin (V52 = {'Prelude.Types.Just', V51}), ('case--case block in setExternal-22581'(V3, V2, V1, V0, V13, V51, V52, case V51 of {'Core.Context.Context.MkGlobalDef', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74} -> V70 end)) end; _ -> ('un--undefinedName'(V0, V1, V2)) end), V75 end(V47)) end end end end), V76 end(V10)) end end end end.
'un--setExtension'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, V18, V19, ('Idris.Idris2.Core.Options':'un--setExtension'(V1, V20)), V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--setDetermining'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V135 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V134 = case V50 of {'Prelude.Types.Just', V51} -> case V51 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> case V69 of {'Core.Context.Context.TCon', V74, V75, V76, V77, V78, V79, V80, V81} -> begin (V104 = ('nested--26091-21972--in--un--getPos'(V3, V2, V1, V0, 0, V3, case V51 of {'Core.Context.Context.MkGlobalDef', V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103} -> V84 end))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V110 = ('un--updateDef'(V0, V2, fun (V109) -> {'Prelude.Types.Just', {'Core.Context.Context.TCon', V74, V75, V76, V108, V78, V79, V80, V81}} end))), V110 end(V105)) end end end end; _ -> fun (V111) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V51 of {'Core.Context.Context.MkGlobalDef', V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133} -> V113 end))/binary, <<" is not a type constructor [setDetermining]"/utf8>>/binary>>}, V111)) end end end; _ -> ('un--undefinedName'(V0, V1, V2)) end), V134 end(V47)) end end end end), V135 end(V10)) end end end end.
'un--setDetags'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V107 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V106 = case V50 of {'Prelude.Types.Just', V51} -> case V51 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> case V69 of {'Core.Context.Context.TCon', V74, V75, V76, V77, V78, V79, V80, V81} -> ('un--updateDef'(V0, V2, fun (V82) -> {'Prelude.Types.Just', {'Core.Context.Context.TCon', V74, V75, V76, V77, V78, V79, V80, V3}} end)); _ -> fun (V83) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V51 of {'Core.Context.Context.MkGlobalDef', V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105} -> V85 end))/binary, <<" is not a type constructor [setDetermining]"/utf8>>/binary>>}, V83)) end end end; _ -> ('un--undefinedName'(V0, V1, V2)) end), V106 end(V47)) end end end end), V107 end(V10)) end end end end.
'un--setDependsDir'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V69 = begin (V12 = V0), fun (V13) -> begin (V68 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V48 of {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V58, V59, V60, V1, V62, V63, V64, V65, V66, V67}, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V68} end end end), V69 end(V8)) end end end end.
'un--setDefaultTotalityOption'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V66 = begin (V12 = V0), fun (V13) -> begin (V65 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V51 of {'Core.Options.MkElabDirectives', V58, V59, V60, V61, V62, V63, V64} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, V50, {'Core.Options.MkElabDirectives', V58, V59, V1, V61, V62, V63, V64}, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V65} end end end), V66 end(V8)) end end end end.
'un--setDebugElabCheck'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V85 = begin (V12 = V0), fun (V13) -> begin (V84 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V50 of {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V1, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83}, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V84} end end end), V85 end(V8)) end end end end.
'un--setCtxt'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V1, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--setCovering'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V96 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V95 = case V50 of {'Prelude.Types.Just', V51} -> begin (V76 = ('un--addDef'(V0, V2, case V51 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> case V62 of {'Core.TT.MkTotality', V74, V75} -> {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, {'Core.TT.MkTotality', V74, V3}, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} end end))), ((begin (V92 = fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V89, V90, V91)) end end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end((begin (V84 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> {'Prelude.Types.Right', (V80(V83))} end end end end end), fun (V85) -> fun (V86) -> ((((V84('erased'))('erased'))(V85))(V86)) end end end(fun (V77) -> {'Builtin.MkUnit'} end))))(V76)) end; {'Prelude.Types.Nothing'} -> ('un--undefinedName'(V0, V1, V2)) end), V95 end(V47)) end end end end), V96 end(V10)) end end end end.
'un--setCompiled'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V94 = begin (V45 = ('un--lookupCtxtExact'(V1, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V93 = case V49 of {'Prelude.Types.Just', V50} -> begin (V73 = ('un--addDef'(V0, V1, case V50 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, {'Prelude.Types.Just', V2}, V70, V71, V72} end))), ((begin (V89 = fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V86, V87, V88)) end end end end end), fun (V90) -> fun (V91) -> ((((V89('erased'))('erased'))(V90))(V91)) end end end((begin (V81 = fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> {'Prelude.Types.Right', (V77(V80))} end end end end end), fun (V82) -> fun (V83) -> ((((V81('erased'))('erased'))(V82))(V83)) end end end(fun (V74) -> {'Builtin.MkUnit'} end))))(V73)) end; {'Prelude.Types.Nothing'} -> fun (V92) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V93 end(V46)) end end end end), V94 end(V9)) end end end end.
'un--setCG'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V85 = begin (V12 = V0), fun (V13) -> begin (V84 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V50 of {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V1, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83}, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V84} end end end), V85 end(V8)) end end end end.
'un--setBuildDir'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V69 = begin (V12 = V0), fun (V13) -> begin (V68 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V48 of {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V58, V59, V1, V61, V62, V63, V64, V65, V66, V67}, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V68} end end end), V69 end(V8)) end end end end.
'un--setAutoImplicitLimit'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V66 = begin (V12 = V0), fun (V13) -> begin (V65 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V51 of {'Core.Options.MkElabDirectives', V58, V59, V60, V61, V62, V63, V64} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, V50, {'Core.Options.MkElabDirectives', V58, V59, V60, V61, V1, V63, V64}, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V65} end end end), V66 end(V8)) end end end end.
'un--setAmbigLimit'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V66 = begin (V12 = V0), fun (V13) -> begin (V65 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V51 of {'Core.Options.MkElabDirectives', V58, V59, V60, V61, V62, V63, V64} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, V50, {'Core.Options.MkElabDirectives', V58, V59, V60, V1, V62, V63, V64}, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V65} end end end), V66 end(V8)) end end end end.
'un--setAllPublic'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V61 = begin (V12 = V0), fun (V13) -> begin (V60 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V16 of {'Core.Context.Context.MkContext', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> {'Core.Context.MkDefs', {'Core.Context.Context.MkContext', V48, V49, V50, V51, V52, V53, V54, V55, V1, V57, V58, V59}, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end)) end end(V13))), {'Prelude.Types.Right', V60} end end end), V61 end(V8)) end end end end.
'un--returnDef'(V0, V1, V2) -> case V0 of 0 -> {'Prelude.Types.Just', {'Builtin.MkPair', V1, V2}}; 1 -> ('case--returnDef-6408'(V2, V1, case V2 of {'Core.Context.Context.MkGlobalDef', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V20 end)) end.
'un--resolved'(V0, V1, V2) -> case V0 of {'Core.Context.dn--un--__mkHasNames', V3, V4} -> ((V4(V1))(V2)) end.
'un--resolveName'(V0, V1) -> case V1 of {'Core.Name.Resolved', V2} -> fun (V3) -> {'Prelude.Types.Right', V2} end; _ -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V61 = begin (V46 = ('un--getPosition'(V1, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V60 = case V50 of {'Builtin.MkPair', V51, V52} -> begin (V53 = ('un--setCtxt'(V0, V52))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V59 = fun (V58) -> {'Prelude.Types.Right', V51} end), V59 end(V54)) end end end end end), V60 end(V47)) end end end end), V61 end(V10)) end end end end end.
'un--resetFirstEntry'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V104 = begin (V11 = V0), fun (V12) -> begin (V103 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, case V10 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> case V15 of {'Core.Context.Context.MkContext', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58} -> {'Core.Context.MkDefs', {'Core.Context.Context.MkContext', case V10 of {'Core.Context.MkDefs', V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90} -> case V59 of {'Core.Context.Context.MkContext', V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} -> V92 end end, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58}, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} end end)) end end(V12))), {'Prelude.Types.Right', V103} end end end), V104 end(V7)) end end end end.
'un--reducibleInAny'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V3, V4)) end end, 0}, fun (V5) -> ('un--reducibleIn'(V5, V1, V2)) end, V0)).
'un--reducibleIn'(V0, V1, V2) -> case V1 of {'Core.Name.NS', V3, V4} -> case V4 of {'Core.Name.UN', V5} -> case V2 of 1 -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)); 0 -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)); _ -> 1 end; _ -> 1 end; _ -> 1 end.
'un--recordWarning'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, [V1 | V45], V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--prettyName'(V0, V1) -> case V1 of {'Core.Name.Nested', V2, V3} -> case V2 of {'Builtin.MkPair', V4, V5} -> begin (V11 = ('un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V6) -> fun (V7) -> ('dn--un--full_HasNames_Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames_Name'(V8, V9, V10)) end end end}, {'Core.Name.Resolved', V4}))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V29 = begin (V16 = ('un--prettyName'(V0, V15))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V28 = begin (V21 = ('un--prettyName'(V0, V3))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', <<V20/binary, <<<<","/utf8>>/binary, V25/binary>>/binary>>} end), V27 end(V22)) end end end end), V28 end(V17)) end end end end), V29 end(V12)) end end end end; _ -> fun (V30) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))} end end; {'Core.Name.CaseBlock', V31, V32} -> fun (V33) -> {'Prelude.Types.Right', <<<<"case block in "/utf8>>/binary, V31/binary>>} end; {'Core.Name.WithBlock', V34, V35} -> fun (V36) -> {'Prelude.Types.Right', <<<<"with block in "/utf8>>/binary, V34/binary>>} end; {'Core.Name.NS', V37, V38} -> ('un--prettyName'(V0, V38)); _ -> fun (V39) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))} end end.
'un--noDeclaration'(V0, V1, V2) -> ('un--maybeMisspelling'(V0, {'Core.Core.NoDeclaration', V1, V2}, V2)).
'un--newEntry'(V0, V1) -> begin (V14 = case V1 of {'Core.Context.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13} -> V3 end), begin (V27 = case V1 of {'Core.Context.Context.MkContext', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> V19 end), begin (V33 = begin (V28 = V27), fun (V29) -> begin (V32 = (begin (V30 = V28), fun (V31) -> ('erlang':'get'(V30)) end end(V29))), {'Prelude.Types.Right', V32} end end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V100 = begin (V80 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V14, ('Idris.Idris2.Erlang.Data.IOArray':'un--max'(V37)))) of 1 -> begin (V68 = fun (V38) -> begin (V67 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArrayCopy'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> V45 end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), begin (V53 = (V50(V51))), (V52(V53)) end end end end end end end}, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), ((V57(V59))(V58)) end end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V61(V62))), (V63(V62)) end end end end}, fun (V64) -> fun (V65) -> V65 end end}, begin (V66 = (('Idris.Idris2.Erlang.Data.IOArray':'un--max'(V37)) + ('un--Grow'()))), case ((V66 band 9223372036854775808) =/= 0) of 'true' -> (V66 bor -9223372036854775808); _ -> (V66 band 9223372036854775807) end end, V37))(V38))), {'Prelude.Types.Right', V67} end end), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V78 = begin (V73 = V27), fun (V74) -> begin (V77 = (begin (V75 = V73), fun (V76) -> ('erlang':'put'(V75, V72)) end end(V74))), {'Prelude.Types.Right', V77} end end end), V78 end(V69)) end end end end; 0 -> fun (V79) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V99 = fun (V85) -> {'Prelude.Types.Right', {'Builtin.MkPair', V14, case V1 of {'Core.Context.Context.MkContext', V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97} -> {'Core.Context.Context.MkContext', V86, begin (V98 = (V14 + 1)), case ((V98 band 9223372036854775808) =/= 0) of 'true' -> (V98 bor -9223372036854775808); _ -> (V98 band 9223372036854775807) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V0, V14, V88)), ('un--addPossible'(V0, V14, V89)), V90, V91, V92, V93, V94, V95, V96, V97} end}} end), V99 end(V81)) end end end end), V100 end(V34)) end end end end end end.
'un--newDef'(V0, V1, V2, V3, V4, V5, V6) -> {'Core.Context.Context.MkGlobalDef', V0, V1, V4, [], [], [], [], V2, V3, V5, ('Idris.Idris2.Core.TT':'un--unchecked'()), [], {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, 0, 0, 0, V6, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, [], {'Prelude.Types.Nothing'}}.
'un--newAlias'(V0, V1, V2) -> begin (V3 = ('un--getPosition'(V1, V2))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V23 = fun (V8) -> case V7 of {'Builtin.MkPair', V9, V10} -> {'Prelude.Types.Right', case V10 of {'Core.Context.Context.MkContext', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22} -> {'Core.Context.Context.MkContext', V11, V12, V13, ('un--addAlias'(V0, V1, V9, V14)), V15, V16, V17, V18, V19, V20, V21, V22} end} end end), V23 end(V4)) end end end end.
'un--namesResolvedAs'(V0) -> ('Idris.Idris2.Libraries.Data.NameMap':'dn--un--map_Functor_NameMap'(fun (V1) -> {'Core.Name.Resolved', V1} end, case V0 of {'Core.Context.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13} -> V4 end)).
'un--maybeMisspelling'(V0, V1, V2) -> begin (V59 = begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), ((begin (V56 = fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V53, V54, V55)) end end end end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end((begin (V48 = fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> {'Prelude.Types.Right', (V44(V47))} end end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end(fun (V9) -> case V9 of {'Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V12 end end))))(V8)) end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V78 = begin (V64 = ('un--getSimilarNames'(V0, V2))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V77 = case V68 of {'Prelude.Types.Just', V69} -> case V69 of {'Builtin.MkPair', V70, V71} -> begin (V72 = ('un--showSimilarNames'(V63, V2, V70, V71))), fun (V73) -> case V72 of [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V1, V73)); [E0 | E1] -> (fun (V74, V75) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.MaybeMisspelling', V1, {'Data.List1.:::', V74, V75}}, V73)) end(E0, E1)) end end end end; {'Prelude.Types.Nothing'} -> fun (V76) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V1, V76)) end end), V77 end(V65)) end end end end), V78 end(V60)) end end end end.
'un--lookupTyName'(V0, V1) -> ('un--lookupNameBy'(fun (V2) -> case V2 of {'Core.Context.Context.MkGlobalDef', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V5 end end, V0, V1)).
'un--lookupTyExact'(V0, V1) -> ('un--lookupExactBy'(fun (V2) -> case V2 of {'Core.Context.Context.MkGlobalDef', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V5 end end, V0, V1)).
'un--lookupNameBy'(V0, V1, V2) -> begin (V3 = ('un--lookupCtxtName'(V1, V2))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V21 = fun (V8) -> {'Prelude.Types.Right', ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Builtin.MkPair', V10, {'Builtin.MkPair', V12, (V0(V13))}} end end end))(V7))} end), V21 end(V4)) end end end end.
'un--lookupHiddenCtxtName'(V0, V1) -> ('un--lookupCtxtName\x{27}'(1, V0, V1)).
'un--lookupExactBy'(V0, V1, V2) -> begin (V3 = ('un--lookupCtxtExact'(V1, V2))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V10 = fun (V8) -> case V7 of {'Prelude.Types.Just', V9} -> {'Prelude.Types.Right', {'Prelude.Types.Just', (V0(V9))}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V10 end(V4)) end end end end.
'un--lookupDefTyExact'(V0, V1) -> ('un--lookupExactBy'(fun (V2) -> {'Builtin.MkPair', case V2 of {'Core.Context.Context.MkGlobalDef', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V20 end, case V2 of {'Core.Context.Context.MkGlobalDef', V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> V27 end} end, V0, V1)).
'un--lookupDefName'(V0, V1) -> ('un--lookupNameBy'(fun (V2) -> case V2 of {'Core.Context.Context.MkGlobalDef', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V20 end end, V0, V1)).
'un--lookupDefExact'(V0, V1) -> ('un--lookupExactBy'(fun (V2) -> case V2 of {'Core.Context.Context.MkGlobalDef', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V20 end end, V0, V1)).
'un--lookupCtxtName\x{27}'(V0, V1, V2) -> ('case--lookupCtxtName\x{27}-7316'(V2, V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V1)))).
'un--lookupCtxtName'(V0, V1) -> ('un--lookupCtxtName\x{27}'(0, V0, V1)).
'un--lookupCtxtExactI'(V0, V1) -> case V0 of {'Core.Name.Resolved', V2} -> case ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V2, case V1 of {'Core.Context.Context.MkContext', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14} -> V9 end)) of {'Prelude.Types.Just', V15} -> begin (V16 = ('un--decode'(V1, V2, 1, V15))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V34 = fun (V21) -> {'Prelude.Types.Right', ('un--returnDef'(case V1 of {'Core.Context.Context.MkContext', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V31 end, V2, V20))} end), V34 end(V17)) end end end end; {'Prelude.Types.Nothing'} -> begin (V52 = begin (V47 = case V1 of {'Core.Context.Context.MkContext', V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> V39 end), fun (V48) -> begin (V51 = (begin (V49 = V47), fun (V50) -> ('erlang':'get'(V49)) end end(V48))), {'Prelude.Types.Right', V51} end end end), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V113 = begin (V86 = fun (V57) -> begin (V85 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> V64 end end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), begin (V72 = (V69(V70))), (V71(V72)) end end end end end end end}, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), ((V76(V78))(V77)) end end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V80(V81))), (V82(V81)) end end end end}, fun (V83) -> fun (V84) -> V84 end end}, V56, V2))(V57))), {'Prelude.Types.Right', V85} end end), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V112 = case V90 of {'Prelude.Types.Just', V91} -> begin (V92 = ('un--decode'(V1, V2, 1, V91))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V110 = fun (V97) -> {'Prelude.Types.Right', ('un--returnDef'(case V1 of {'Core.Context.Context.MkContext', V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109} -> V107 end, V2, V96))} end), V110 end(V93)) end end end end; {'Prelude.Types.Nothing'} -> fun (V111) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V112 end(V87)) end end end end), V113 end(V53)) end end end end end; _ -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Core.Context.Context.MkContext', V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125} -> V116 end)) of {'Prelude.Types.Just', V126} -> ('un--lookupCtxtExactI'({'Core.Name.Resolved', V126}, V1)); {'Prelude.Types.Nothing'} -> fun (V127) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end.
'un--lookupCtxtExact'(V0, V1) -> case V0 of {'Core.Name.Resolved', V2} -> ('case--lookupCtxtExact-6603'(V2, V1, ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V2, case V1 of {'Core.Context.Context.MkContext', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14} -> V9 end)))); _ -> begin (V15 = ('un--lookupCtxtExactI'(V0, V1))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V24 = fun (V20) -> case V19 of {'Prelude.Types.Just', V21} -> case V21 of {'Builtin.MkPair', V22, V23} -> {'Prelude.Types.Right', {'Prelude.Types.Just', V23}} end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V24 end(V16)) end end end end end.
'un--lookupContextEntry'(V0, V1) -> case V0 of {'Core.Name.Resolved', V2} -> case ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V2, case V1 of {'Core.Context.Context.MkContext', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14} -> V9 end)) of {'Prelude.Types.Just', V15} -> fun (V16) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V2, V15}}} end; {'Prelude.Types.Nothing'} -> begin (V29 = case V1 of {'Core.Context.Context.MkContext', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} -> V21 end), begin (V35 = begin (V30 = V29), fun (V31) -> begin (V34 = (begin (V32 = V30), fun (V33) -> ('erlang':'get'(V32)) end end(V31))), {'Prelude.Types.Right', V34} end end end), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V77 = begin (V69 = fun (V40) -> begin (V68 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> V47 end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V51(V53))), begin (V55 = (V52(V53))), (V54(V55)) end end end end end end end}, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V58(V60))), ((V59(V61))(V60)) end end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V63(V64))), (V65(V64)) end end end end}, fun (V66) -> fun (V67) -> V67 end end}, V39, V2))(V40))), {'Prelude.Types.Right', V68} end end), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V76 = fun (V74) -> case V73 of {'Prelude.Types.Just', V75} -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V2, V75}}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V76 end(V70)) end end end end), V77 end(V36)) end end end end end end; _ -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Core.Context.Context.MkContext', V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89} -> V80 end)) of {'Prelude.Types.Just', V90} -> ('un--lookupContextEntry'({'Core.Name.Resolved', V90}, V1)); {'Prelude.Types.Nothing'} -> fun (V91) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end.
'un--lazyActive'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V66 = begin (V12 = V0), fun (V13) -> begin (V65 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V51 of {'Core.Options.MkElabDirectives', V58, V59, V60, V61, V62, V63, V64} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, V50, {'Core.Options.MkElabDirectives', V1, V59, V60, V61, V62, V63, V64}, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V65} end end end), V66 end(V8)) end end end end.
'un--isVisible'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V124 = fun (V12) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V13, V14)) end end, 0}, fun (V15) -> ('nested--29294-24891--in--un--visible'(V1, V0, V15)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Core.Name.Namespace':'un--allParents'(case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V18 end)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V11 of {'Core.Context.MkDefs', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79} -> V51 end, case V11 of {'Core.Context.MkDefs', V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111} -> case V80 of {'Core.Context.Context.MkContext', V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123} -> V119 end end))))))} end), V124 end(V8)) end end end end.
'un--isUnboundImplicits'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V61 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V47 of {'Core.Options.MkElabDirectives', V54, V55, V56, V57, V58, V59, V60} -> V55 end end end} end), V61 end(V7)) end end end end.
'un--isPrimName'(V0, V1) -> case ('Idris.Idris2.Core.Name':'un--splitNS'(V1)) of {'Builtin.MkPair', V2, V3} -> ('nested--32947-28426--in--un--go'(V1, V0, V2, V3, V0)) end.
'un--isPrefixRecordProjections'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V71 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V68, V69, V70)) end end end end end), fun (V72) -> fun (V73) -> ((((V71('erased'))('erased'))(V72))(V73)) end end end((begin (V63 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> {'Prelude.Types.Right', (V59(V62))} end end end end end), fun (V64) -> fun (V65) -> ((((V63('erased'))('erased'))(V64))(V65)) end end end(fun (V7) -> case V7 of {'Core.Context.MkDefs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> case V12 of {'Core.Options.MkOptions', V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} -> case V43 of {'Core.Options.MkElabDirectives', V50, V51, V52, V53, V54, V55, V56} -> V56 end end end end))))(V6)) end.
'un--isPairType'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V72 = case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V48 of {'Prelude.Types.Nothing'} -> fun (V54) -> {'Prelude.Types.Right', 0} end; {'Prelude.Types.Just', V55} -> begin (V56 = ('un--getFullName'(V0, V1))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V71 = begin (V64 = ('un--getFullName'(V0, case V55 of {'Core.Options.MkPairNs', V61, V62, V63} -> V61 end))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V70 = fun (V69) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V60, V68))} end), V70 end(V65)) end end end end), V71 end(V57)) end end end end end end end), V72 end(V8)) end end end end.
'un--isLazyActive'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V61 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V47 of {'Core.Options.MkElabDirectives', V54, V55, V56, V57, V58, V59, V60} -> V54 end end end} end), V61 end(V7)) end end end end.
'un--isHidden'(V0, V1) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Core.Context.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13} -> V12 end)))).
'un--isExtension'(V0, V1) -> ('Idris.Idris2.Core.Options':'un--isExtension'(V0, case V1 of {'Core.Context.MkDefs', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V6 end)).
'un--isEqualTy'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V71 = case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V49 of {'Prelude.Types.Nothing'} -> fun (V54) -> {'Prelude.Types.Right', 0} end; {'Prelude.Types.Just', V55} -> begin (V56 = ('un--getFullName'(V0, V1))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V70 = begin (V63 = ('un--getFullName'(V0, case V55 of {'Core.Options.MkRewriteNs', V61, V62} -> V61 end))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V69 = fun (V68) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V60, V67))} end), V69 end(V64)) end end end end), V70 end(V57)) end end end end end end end), V71 end(V8)) end end end end.
'un--isAllPublic'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V56 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V12 of {'Core.Context.Context.MkContext', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55} -> V52 end end} end), V56 end(V7)) end end end end.
'un--initSize'() -> begin (V0 = 10000), case ((V0 band 9223372036854775808) =/= 0) of 'true' -> (V0 bor -9223372036854775808); _ -> (V0 band 9223372036854775807) end end.
'un--initHash'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V49 = begin (V11 = V0), fun (V12) -> begin (V48 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, case V10 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, begin (V47 = 5381), case ((V47 band 9223372036854775808) =/= 0) of 'true' -> (V47 bor -9223372036854775808); _ -> (V47 band 9223372036854775807) end end, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} end)) end end(V12))), {'Prelude.Types.Right', V48} end end end), V49 end(V7)) end end end end.
'un--initDefs'() -> begin (V0 = ('un--initCtxt'())), fun (V1) -> begin (V2 = (V0(V1))), case V2 of {'Prelude.Types.Left', V3} -> {'Prelude.Types.Left', V3}; {'Prelude.Types.Right', V4} -> (begin (V15 = begin (V6 = fun (V5) -> ('Idris.Idris2.Core.Options':'un--defaults'(V5)) end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V14 = fun (V11) -> {'Prelude.Types.Right', {'Core.Context.MkDefs', V4, [], ('Idris.Idris2.Core.Name.Namespace':'un--mainNS'()), [], V10, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), begin (V12 = 100), case ((V12 band 9223372036854775808) =/= 0) of 'true' -> (V12 bor -9223372036854775808); _ -> (V12 band 9223372036854775807) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), [], [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), begin (V13 = 5381), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end, [], [], [], [], [], [], [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'()), {'Prelude.Types.Nothing'}, [], 0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'())}} end), V14 end(V7)) end end end end), V15 end(V1)) end end end end.
'un--initCtxtS'(V0) -> begin (V30 = fun (V1) -> begin (V29 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Prelude.Types.Right', V29} end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V42 = begin (V35 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Context.Context.Arr'}, V34))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V41 = fun (V40) -> {'Prelude.Types.Right', {'Core.Context.Context.MkContext', 0, 0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.UserNameMap':'un--empty'()), V39, 0, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), [('Idris.Idris2.Core.Name.Namespace':'un--partialEvalNS'()) | []], 0, 0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), []}} end), V41 end(V36)) end end end end), V42 end(V31)) end end end end.
'un--initCtxt'() -> ('un--initCtxtS'(('un--initSize'()))).
'un--inCurrentNS'(V0, V1) -> case V1 of {'Core.Name.UN', V2} -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V46 = fun (V13) -> {'Prelude.Types.Right', {'Core.Name.NS', case V12 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V16 end, {'Core.Name.UN', V2}}} end), V46 end(V9)) end end end end; {'Core.Name.CaseBlock', V47, V48} -> begin (V54 = begin (V49 = V0), fun (V50) -> begin (V53 = (begin (V51 = V49), fun (V52) -> ('erlang':'get'(V51)) end end(V50))), {'Prelude.Types.Right', V53} end end end), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V92 = fun (V59) -> {'Prelude.Types.Right', {'Core.Name.NS', case V58 of {'Core.Context.MkDefs', V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91} -> V62 end, V1}} end), V92 end(V55)) end end end end; {'Core.Name.WithBlock', V93, V94} -> begin (V100 = begin (V95 = V0), fun (V96) -> begin (V99 = (begin (V97 = V95), fun (V98) -> ('erlang':'get'(V97)) end end(V96))), {'Prelude.Types.Right', V99} end end end), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V138 = fun (V105) -> {'Prelude.Types.Right', {'Core.Name.NS', case V104 of {'Core.Context.MkDefs', V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137} -> V108 end, V1}} end), V138 end(V101)) end end end end; {'Core.Name.Nested', V139, V140} -> begin (V146 = begin (V141 = V0), fun (V142) -> begin (V145 = (begin (V143 = V141), fun (V144) -> ('erlang':'get'(V143)) end end(V142))), {'Prelude.Types.Right', V145} end end end), fun (V147) -> begin (V148 = (V146(V147))), case V148 of {'Prelude.Types.Left', V149} -> {'Prelude.Types.Left', V149}; {'Prelude.Types.Right', V150} -> (begin (V184 = fun (V151) -> {'Prelude.Types.Right', {'Core.Name.NS', case V150 of {'Core.Context.MkDefs', V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183} -> V154 end, V1}} end), V184 end(V147)) end end end end; {'Core.Name.MN', V185, V186} -> begin (V192 = begin (V187 = V0), fun (V188) -> begin (V191 = (begin (V189 = V187), fun (V190) -> ('erlang':'get'(V189)) end end(V188))), {'Prelude.Types.Right', V191} end end end), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V230 = fun (V197) -> {'Prelude.Types.Right', {'Core.Name.NS', case V196 of {'Core.Context.MkDefs', V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229} -> V200 end, V1}} end), V230 end(V193)) end end end end; {'Core.Name.DN', V231, V232} -> begin (V238 = begin (V233 = V0), fun (V234) -> begin (V237 = (begin (V235 = V233), fun (V236) -> ('erlang':'get'(V235)) end end(V234))), {'Prelude.Types.Right', V237} end end end), fun (V239) -> begin (V240 = (V238(V239))), case V240 of {'Prelude.Types.Left', V241} -> {'Prelude.Types.Left', V241}; {'Prelude.Types.Right', V242} -> (begin (V276 = fun (V243) -> {'Prelude.Types.Right', {'Core.Name.NS', case V242 of {'Core.Context.MkDefs', V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275} -> V246 end, V1}} end), V276 end(V239)) end end end end; _ -> fun (V277) -> {'Prelude.Types.Right', V1} end end.
'un--hideName'(V0, V1) -> case V1 of {'Core.Context.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13} -> {'Core.Context.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V0, {'Builtin.MkUnit'}, V12)), V13} end.
'un--hide'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V116 = begin (V45 = ('un--lookupCtxtName'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V115 = case V49 of [E0 | E1] -> (fun (V50, V51) -> case V50 of {'Builtin.MkPair', V52, V53} -> case V51 of [] -> begin (V54 = V0), fun (V55) -> begin (V90 = (begin (V56 = V54), fun (V57) -> ('erlang':'put'(V56, case V12 of {'Core.Context.MkDefs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89} -> {'Core.Context.MkDefs', ('un--hideName'(V52, V58)), V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89} end)) end end(V55))), {'Prelude.Types.Right', V90} end end end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V96 = fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V94, V95)) end end end end), fun (V97) -> fun (V98) -> ((((V96('erased'))('erased'))(V97))(V98)) end end end(fun (V91) -> ('Idris.Idris2.Builtin':'un--fst'(V91)) end))(V49)))) end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V104 = fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V102, V103)) end end end end), fun (V105) -> fun (V106) -> ((((V104('erased'))('erased'))(V105))(V106)) end end end(fun (V99) -> ('Idris.Idris2.Builtin':'un--fst'(V99)) end))(V49)))) end end(E0, E1)); _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V112 = fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V110, V111)) end end end end), fun (V113) -> fun (V114) -> ((((V112('erased'))('erased'))(V113))(V114)) end end end(fun (V107) -> ('Idris.Idris2.Builtin':'un--fst'(V107)) end))(V49)))) end), V115 end(V46)) end end end end), V116 end(V9)) end end end end.
'un--hasFlag'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V106 = begin (V46 = ('un--lookupCtxtExact'(V2, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V105 = case V50 of {'Prelude.Types.Just', V51} -> fun (V52) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V64)) end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V68, V69, V70, V71)) end end end end end end end, fun (V72) -> fun (V73) -> V73 end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V76, V77, V78)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V79, V80)) end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V81, V82)) end end}, V3, case V51 of {'Core.Context.Context.MkGlobalDef', V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104} -> V94 end))} end; {'Prelude.Types.Nothing'} -> ('un--undefinedName'(V0, V1, V2)) end), V105 end(V47)) end end end end), V106 end(V10)) end end end end.
'un--getWorkingDir'() -> begin (V29 = fun (V0) -> begin (V28 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}))(V0))), {'Prelude.Types.Right', V28} end end), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V39 = fun (V34) -> case V33 of {'Prelude.Types.Just', V35} -> {'Prelude.Types.Right', V35}; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V37 = fun (V36) -> V36 end), fun (V38) -> (V37(V38)) end end(<<"Can\x{27}t get current directory"/utf8>>))}, V34)) end end), V39 end(V30)) end end end end.
'un--getVisible'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V56 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V12 of {'Core.Context.Context.MkContext', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55} -> V51 end end} end), V56 end(V7)) end end end end.
'un--getVisibility'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V75 = begin (V45 = ('un--lookupCtxtExact'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V74 = fun (V50) -> case V49 of {'Prelude.Types.Just', V51} -> {'Prelude.Types.Right', case V51 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> V61 end}; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.UndefinedName', V1, V2}, V50)) end end), V74 end(V46)) end end end end), V75 end(V9)) end end end end.
'un--getUserHoles'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V63 = begin (V61 = ('Idris.Idris2.Data.List':'un--sort'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V27, V28)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V10 of {'Core.Context.MkDefs', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60} -> V54 end))))), ('Idris.Idris2.Core.Core':'un--filterM'(fun (V62) -> ('nested--22055-18248--in--un--isHole'(V0, V10, V62)) end, V61)) end), V63 end(V7)) end end end end.
'un--getTotality'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V75 = begin (V45 = ('un--lookupCtxtExact'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V74 = case V49 of {'Prelude.Types.Just', V50} -> fun (V51) -> {'Prelude.Types.Right', case V50 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> V62 end} end; {'Prelude.Types.Nothing'} -> ('un--undefinedName'(V0, V1, V2)) end), V74 end(V46)) end end end end), V75 end(V9)) end end end end.
'un--getTime'() -> begin (V2 = fun (V0) -> begin (V1 = ('Idris.Idris2.System.Clock':'un--clockTime'(1, V0))), {'Prelude.Types.Right', V1} end end), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V8 = fun (V7) -> {'Prelude.Types.Right', ((('Idris.Idris2.System.Clock':'un--seconds'(V6)) * ('nested--33862-29304--in--un--nano'())) + ('Idris.Idris2.System.Clock':'un--nanoseconds'(V6)))} end), V8 end(V3)) end end end end.
'un--getSizeChange'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V75 = begin (V45 = ('un--lookupCtxtExact'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V74 = case V49 of {'Prelude.Types.Just', V50} -> fun (V51) -> {'Prelude.Types.Right', case V50 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> V72 end} end; {'Prelude.Types.Nothing'} -> ('un--undefinedName'(V0, V1, V2)) end), V74 end(V46)) end end end end), V75 end(V9)) end end end end.
'un--getSimilarNames'(V0, V1) -> ('case--getSimilarNames-16768'(V1, V0, ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_UserName'(V2)) end))(('Idris.Idris2.Core.Name':'un--userNameRoot'(V1)))))).
'un--getSession'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V54 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> V46 end end} end), V54 end(V7)) end end end end.
'un--getSearchData'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V424 = begin (V46 = ('un--lookupDefExact'(V3, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V423 = case V50 of {'Prelude.Types.Just', V51} -> case V51 of {'Core.Context.Context.TCon', V52, V53, V54, V55, V56, V57, V58, V59} -> begin (V138 = begin (V65 = ('un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V60) -> fun (V61) -> ('dn--un--full_HasNames_Name'(V60, V61)) end end, fun (V62) -> fun (V63) -> fun (V64) -> ('dn--un--resolved_HasNames_Name'(V62, V63, V64)) end end end}, V3))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V137 = case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V69, case V13 of {'Core.Context.MkDefs', V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101} -> V77 end)) of {'Prelude.Types.Just', V102} -> ('Idris.Idris2.Core.Core':'un--filterM'(fun (V103) -> ('nested--25316-21245--in--un--notHidden'(V3, V2, V1, V0, V103, case V13 of {'Core.Context.MkDefs', V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135} -> V104 end)) end, V102)); {'Prelude.Types.Nothing'} -> fun (V136) -> {'Prelude.Types.Right', []} end end), V137 end(V66)) end end end end), fun (V139) -> begin (V140 = (V138(V139))), case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> (begin (V422 = case V2 of 1 -> begin (V215 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V143) -> begin (V176 = ('nested--25316-21245--in--un--notHidden'(V3, V2, V1, V0, V143, case V13 of {'Core.Context.MkDefs', V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175} -> V144 end))), fun (V177) -> begin (V178 = (V176(V177))), case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> (begin (V182 = fun (V181) -> {'Prelude.Types.Right', case ('nested--25316-21246--in--un--isDefault'(V3, V2, V1, V0, V143)) of 1 -> V180; 0 -> 0 end} end), V182 end(V177)) end end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V13 of {'Core.Context.MkDefs', V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214} -> V191 end))))), fun (V216) -> begin (V217 = (V215(V216))), case V217 of {'Prelude.Types.Left', V218} -> {'Prelude.Types.Left', V218}; {'Prelude.Types.Right', V219} -> (begin (V230 = begin (V228 = ((begin (V225 = fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V223, V224)) end end end end), fun (V226) -> fun (V227) -> ((((V225('erased'))('erased'))(V226))(V227)) end end end(fun (V220) -> ('Idris.Idris2.Builtin':'un--fst'(V220)) end))(V219))), fun (V229) -> {'Prelude.Types.Right', {'Core.Context.MkSearchData', [], [{'Builtin.MkPair', 0, V228} | []]}} end end), V230 end(V216)) end end end end; 0 -> begin (V296 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V231) -> ('nested--25316-21245--in--un--notHidden'(V3, V2, V1, V0, V231, case V13 of {'Core.Context.MkDefs', V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263} -> V232 end)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V13 of {'Core.Context.MkDefs', V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295} -> V273 end))))), fun (V297) -> begin (V298 = (V296(V297))), case V298 of {'Prelude.Types.Left', V299} -> {'Prelude.Types.Left', V299}; {'Prelude.Types.Right', V300} -> (begin (V421 = begin (V309 = ((begin (V306 = fun (V302) -> fun (V303) -> fun (V304) -> fun (V305) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V304, V305)) end end end end), fun (V307) -> fun (V308) -> ((((V306('erased'))('erased'))(V307))(V308)) end end end(fun (V301) -> ('Idris.Idris2.Builtin':'un--fst'(V301)) end))(V300))), begin (V382 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V310) -> begin (V343 = ('nested--25316-21245--in--un--notHidden'(V3, V2, V1, V0, V310, case V13 of {'Core.Context.MkDefs', V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342} -> V311 end))), fun (V344) -> begin (V345 = (V343(V344))), case V345 of {'Prelude.Types.Left', V346} -> {'Prelude.Types.Left', V346}; {'Prelude.Types.Right', V347} -> (begin (V349 = fun (V348) -> {'Prelude.Types.Right', case ('nested--25316-21246--in--un--isDefault'(V3, V2, V1, V0, V310)) of 1 -> 0; 0 -> V347 end} end), V349 end(V344)) end end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V13 of {'Core.Context.MkDefs', V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380, V381} -> V358 end))))), fun (V383) -> begin (V384 = (V382(V383))), case V384 of {'Prelude.Types.Left', V385} -> {'Prelude.Types.Left', V385}; {'Prelude.Types.Right', V386} -> (begin (V420 = begin (V395 = ((begin (V392 = fun (V388) -> fun (V389) -> fun (V390) -> fun (V391) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V390, V391)) end end end end), fun (V393) -> fun (V394) -> ((((V392('erased'))('erased'))(V393))(V394)) end end end(fun (V387) -> ('Idris.Idris2.Builtin':'un--fst'(V387)) end))(V386))), begin (V405 = ((begin (V402 = fun (V398) -> fun (V399) -> fun (V400) -> fun (V401) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V400, V401)) end end end end), fun (V403) -> fun (V404) -> ((((V402('erased'))('erased'))(V403))(V404)) end end end(fun (V397) -> ('Idris.Idris2.Builtin':'un--fst'(V397)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V396) -> ('nested--25316-21247--in--un--direct'(V3, V2, V1, V0, V396)) end, V142))))), begin (V415 = ((begin (V412 = fun (V408) -> fun (V409) -> fun (V410) -> fun (V411) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V410, V411)) end end end end), fun (V413) -> fun (V414) -> ((((V412('erased'))('erased'))(V413))(V414)) end end end(fun (V407) -> ('Idris.Idris2.Builtin':'un--fst'(V407)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V406) -> case ('nested--25316-21247--in--un--direct'(V3, V2, V1, V0, V406)) of 1 -> 0; 0 -> 1 end end, V142))))), fun (V416) -> {'Prelude.Types.Right', {'Core.Context.MkSearchData', V55, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V417) -> ('Idris.Idris2.Data.List':'un--isCons'(('Idris.Idris2.Builtin':'un--snd'(V417)))) end, [{'Builtin.MkPair', 0, V309} | [{'Builtin.MkPair', 0, V395} | [{'Builtin.MkPair', case case V56 of {'Core.Context.Context.MkTypeFlags', V418, V419} -> V418 end of 1 -> 0; 0 -> 1 end, V405} | [{'Builtin.MkPair', 1, V415} | []]]]]))}} end end end end), V420 end(V383)) end end end end end), V421 end(V297)) end end end end end), V422 end(V139)) end end end end; _ -> ('un--undefinedName'(V0, V1, V3)) end; _ -> ('un--undefinedName'(V0, V1, V3)) end), V423 end(V47)) end end end end), V424 end(V10)) end end end end.
'un--getRewrite'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V57 = fun (V11) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Prelude.Types.Nothing'} end, fun () -> fun (V12) -> {'Prelude.Types.Just', case V12 of {'Core.Options.MkRewriteNs', V13, V14} -> V14 end} end end, case V10 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> case V19 of {'Core.Options.MkOptions', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56} -> V52 end end))} end), V57 end(V7)) end end end end.
'un--getResolvedAs'(V0) -> case V0 of {'Core.Context.Context.MkContext', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12} -> V3 end.
'un--getPrimitiveNames'(V0) -> begin (V1 = ('un--getPrimNames'(V0))), ((begin (V17 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V14, V15, V16)) end end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end((begin (V9 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> {'Prelude.Types.Right', (V5(V8))} end end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V2) -> ('Idris.Idris2.Core.Options':'un--primNamesToList'(V2)) end))))(V1)) end.
'un--getPrimNames'(V0) -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V1) -> {'Prelude.Types.Right', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> {'Core.Options.MkPrimNs', V2, V3, V4, V5} end end end end} end, ('un--fromIntegerName'(V0)))), ('un--fromStringName'(V0)))), ('un--fromCharName'(V0)))), ('un--fromDoubleName'(V0)))).
'un--getPosition'(V0, V1) -> case V0 of {'Core.Name.Resolved', V2} -> fun (V3) -> {'Prelude.Types.Right', {'Builtin.MkPair', V2, V1}} end; _ -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Core.Context.Context.MkContext', V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15} -> V6 end)) of {'Prelude.Types.Just', V16} -> fun (V17) -> {'Prelude.Types.Right', {'Builtin.MkPair', V16, V1}} end; {'Prelude.Types.Nothing'} -> ('un--newEntry'(V0, V1)) end end.
'un--getPPrint'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V54 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> V45 end end} end), V54 end(V7)) end end end end.
'un--getNextTypeTag'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V88 = begin (V49 = begin (V11 = V0), fun (V12) -> begin (V48 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, case V10 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, begin (V47 = (V21 + 1)), case ((V47 band 9223372036854775808) =/= 0) of 'true' -> (V47 bor -9223372036854775808); _ -> (V47 band 9223372036854775807) end end, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} end)) end end(V12))), {'Prelude.Types.Right', V48} end end end), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V87 = fun (V54) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86} -> V61 end} end), V87 end(V50)) end end end end), V88 end(V7)) end end end end.
'un--getNextEntry'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V56 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V12 of {'Core.Context.Context.MkContext', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55} -> V45 end end} end), V56 end(V7)) end end end end.
'un--getNestedNS'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V44 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V15 end} end), V44 end(V7)) end end end end.
'un--getNameID'(V0, V1) -> case V0 of {'Core.Name.Resolved', V2} -> {'Prelude.Types.Just', V2}; _ -> ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Core.Context.Context.MkContext', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14} -> V5 end)) end.
'un--getNS'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V44 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V14 end} end), V44 end(V7)) end end end end.
'un--getImported'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V44 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V30 end} end), V44 end(V7)) end end end end.
'un--getFullName'(V0, V1) -> case V1 of {'Core.Name.Resolved', V2} -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V75 = begin (V45 = ('un--lookupCtxtExact'({'Core.Name.Resolved', V2}, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V74 = fun (V50) -> case V49 of {'Prelude.Types.Just', V51} -> {'Prelude.Types.Right', case V51 of {'Core.Context.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> V53 end}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Core.Name.Resolved', V2}} end end), V74 end(V46)) end end end end), V75 end(V9)) end end end end; _ -> fun (V76) -> {'Prelude.Types.Right', V1} end end.
'un--getFnName'(V0) -> case V0 of {'Core.Context.MkTransform', V1, V2, V3, V4, V5} -> case ('Idris.Idris2.Core.TT':'un--getFn'(V4)) of {'Core.TT.Ref', V6, V7, V8} -> {'Prelude.Types.Just', V8}; _ -> {'Prelude.Types.Nothing'} end end.
'un--getFieldNames'(V0, V1) -> begin (V14 = case V0 of {'Core.Context.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13} -> V4 end), ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--filterBy'(V15, V16)) end end, V14, fun (V17) -> case ('Idris.Idris2.Core.Name':'un--isRF'(V17)) of {'Prelude.Types.Nothing'} -> 0; {'Prelude.Types.Just', V18} -> case V18 of {'Builtin.MkPair', V19, V20} -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V19, V1)) end end end)))) end.
'un--getDirs'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V54 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> V44 end end} end), V54 end(V7)) end end end end.
'un--getDirectives'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V122 = fun (V12) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V86 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V84, V85)) end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(fun (V81) -> {'Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V81} end))(case V11 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> case V17 of {'Core.Options.MkOptions', V45, V46, V47, V48, V49, V50, V51, V52, V53, V54} -> case V47 of {'Core.Options.MkSessionOpts', V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80} -> V60 end end end)), ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V89) -> ('nested--28492-24131--in--un--getDir'(V1, V0, V89)) end, case V11 of {'Core.Context.MkDefs', V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121} -> V110 end))))} end), V122 end(V8)) end end end end.
'un--getDefaultTotalityOption'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V61 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V47 of {'Core.Options.MkElabDirectives', V54, V55, V56, V57, V58, V59, V60} -> V56 end end end} end), V61 end(V7)) end end end end.
'un--getContent'(V0) -> case V0 of {'Core.Context.Context.MkContext', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12} -> V5 end.
'un--getAutoImplicitLimit'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V61 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V47 of {'Core.Options.MkElabDirectives', V54, V55, V56, V57, V58, V59, V60} -> V58 end end end} end), V61 end(V7)) end end end end.
'un--getAmbigLimit'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V61 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V47 of {'Core.Options.MkElabDirectives', V54, V55, V56, V57, V58, V59, V60} -> V57 end end end} end), V61 end(V7)) end end end end.
'un--full'(V0, V1, V2) -> case V0 of {'Core.Context.dn--un--__mkHasNames', V3, V4} -> ((V3(V1))(V2)) end.
'un--fstName'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V58 = fun (V11) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Prelude.Types.Nothing'} end, fun () -> fun (V12) -> {'Prelude.Types.Just', case V12 of {'Core.Options.MkPairNs', V13, V14, V15} -> V14 end} end end, case V10 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> V52 end end))} end), V58 end(V7)) end end end end.
'un--fromStringName'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V58 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V50 of {'Core.Options.MkPrimNs', V54, V55, V56, V57} -> V55 end end end} end), V58 end(V7)) end end end end.
'un--fromIntegerName'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V58 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V50 of {'Core.Options.MkPrimNs', V54, V55, V56, V57} -> V54 end end end} end), V58 end(V7)) end end end end.
'un--fromDoubleName'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V58 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V50 of {'Core.Options.MkPrimNs', V54, V55, V56, V57} -> V57 end end end} end), V58 end(V7)) end end end end.
'un--fromCharName'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V58 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V16 of {'Core.Options.MkOptions', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V50 of {'Core.Options.MkPrimNs', V54, V55, V56, V57} -> V56 end end end} end), V58 end(V7)) end end end end.
'un--extendNS'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V18, V1)), V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--dumpStaging'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V60 = fun (V11) -> begin (V59 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"Staging area: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V13, V14)) end end}, ('Idris.Idris2.Libraries.Data.IntMap':'un--keys'(case V10 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> case V15 of {'Core.Context.Context.MkContext', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58} -> V53 end end))))/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V11))), {'Prelude.Types.Right', V59} end end), V60 end(V7)) end end end end.
'un--dropOpenHint'(V0, V1) -> begin (V7 = ('un--toResolvedNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> ('dn--un--full_HasNames_Name'(V2, V3)) end end, fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--resolved_HasNames_Name'(V4, V5, V6)) end end end}, V1))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V60 = begin (V17 = begin (V12 = V0), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V59 = begin (V22 = V0), fun (V23) -> begin (V58 = (begin (V24 = V22), fun (V25) -> ('erlang':'put'(V24, case V21 of {'Core.Context.MkDefs', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> {'Core.Context.MkDefs', V26, V27, V28, V29, V30, V31, V32, V33, V34, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'(V11, V35)), V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} end)) end end(V23))), {'Prelude.Types.Right', V58} end end end), V59 end(V18)) end end end end), V60 end(V8)) end end end end.
'un--dropMutData'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V50 = begin (V12 = V0), fun (V13) -> begin (V49 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V48, V1)) end, V17)), V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V49} end end end), V50 end(V8)) end end end end.
'un--depth'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V56 = fun (V11) -> {'Prelude.Types.Right', case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> case V12 of {'Core.Context.Context.MkContext', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55} -> V49 end end} end), V56 end(V7)) end end end end.
'un--decode'(V0, V1, V2, V3) -> case V3 of {'Core.Context.Context.Coded', V4, V5} -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Binary.Prims.Bin'}, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V71 = begin (V11 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_GlobalDef'(V10))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V70 = begin (V16 = ('un--getContent'(V0))), begin (V22 = begin (V17 = V16), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'get'(V19)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V69 = begin (V27 = ('dn--un--resolved_HasNames_GlobalDef'(V0, ('dn--un--restoreNS_StripNamespace_GlobalDef'(V4, V15))))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V68 = begin (V61 = fun (V32) -> case V2 of 1 -> begin (V60 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), ((V51(V53))(V52)) end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V55(V56))), (V57(V56)) end end end end}, fun (V58) -> fun (V59) -> V59 end end}, V26, V1, {'Core.Context.Context.Decoded', V31}))(V32))), {'Prelude.Types.Right', V60} end; 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V67 = fun (V66) -> {'Prelude.Types.Right', V31} end), V67 end(V62)) end end end end), V68 end(V28)) end end end end), V69 end(V23)) end end end end end), V70 end(V12)) end end end end), V71 end(V7)) end end end end; {'Core.Context.Context.Decoded', V72} -> fun (V73) -> {'Prelude.Types.Right', V72} end end.
'un--commitCtxt'(V0) -> ('case--commitCtxt-7576'(V0, case V0 of {'Core.Context.Context.MkContext', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12} -> V6 end)).
'un--commit'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V49 = begin (V43 = ('un--commitCtxt'(case V10 of {'Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> V11 end))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V48 = ('un--setCtxt'(V0, V47))), V48 end(V44)) end end end end), V49 end(V7)) end end end end.
'un--clearUserHole'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'(V1, V41)), V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--clearTimer'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V48 = begin (V11 = V0), fun (V12) -> begin (V47 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, case V10 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, {'Prelude.Types.Nothing'}, V44, V45, V46} end)) end end(V12))), {'Prelude.Types.Right', V47} end end end), V48 end(V7)) end end end end.
'un--clearSavedHints'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V48 = begin (V11 = V0), fun (V12) -> begin (V47 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, case V10 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, [], [], V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} end)) end end(V12))), {'Prelude.Types.Right', V47} end end end), V48 end(V7)) end end end end.
'un--clearDefs'(V0, V1) -> {'Prelude.Types.Right', case V0 of {'Core.Context.MkDefs', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> case V2 of {'Core.Context.Context.MkContext', V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> {'Core.Context.MkDefs', {'Core.Context.Context.MkContext', V34, V35, V36, V37, V38, V39, V40, V41, V42, 1, V44, V45}, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end end}.
'un--clearCtxt'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V118 = begin (V11 = ('un--initDefs'())), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V117 = begin (V16 = V0), fun (V17) -> begin (V116 = (begin (V18 = V16), fun (V19) -> ('erlang':'put'(V18, case V15 of {'Core.Context.MkDefs', V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51} -> {'Core.Context.MkDefs', V20, V21, V22, V23, ('nested--20199-16555--in--un--resetElab'(V0, case V10 of {'Core.Context.MkDefs', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> V56 end)), V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, case V10 of {'Core.Context.MkDefs', V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115} -> V111 end, V48, V49, V50, V51} end)) end end(V17))), {'Prelude.Types.Right', V116} end end end), V117 end(V12)) end end end end), V118 end(V7)) end end end end.
'un--checkUnambig'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V90 = begin (V45 = ('un--lookupDefName'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V89 = case V49 of [E0 | E1] -> (fun (V50, V51) -> case V50 of {'Builtin.MkPair', V52, V53} -> case V53 of {'Builtin.MkPair', V54, V55} -> case V51 of [] -> fun (V56) -> {'Prelude.Types.Right', {'Core.Name.Resolved', V54}} end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V62 = fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V60, V61)) end end end end), fun (V63) -> fun (V64) -> ((((V62('erased'))('erased'))(V63))(V64)) end end end(fun (V57) -> ('Idris.Idris2.Builtin':'un--fst'(V57)) end))(V49)))) end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V65) -> ('Idris.Idris2.Builtin':'un--fst'(V65)) end))(V49)))) end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V78 = fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V76, V77)) end end end end), fun (V79) -> fun (V80) -> ((((V78('erased'))('erased'))(V79))(V80)) end end end(fun (V73) -> ('Idris.Idris2.Builtin':'un--fst'(V73)) end))(V49)))) end end(E0, E1)); _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V86 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V84, V85)) end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(fun (V81) -> ('Idris.Idris2.Builtin':'un--fst'(V81)) end))(V49)))) end), V89 end(V46)) end end end end), V90 end(V9)) end end end end.
'un--checkTimer'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V43 = ('case--checkTimer-29487'(V0, V10, case V10 of {'Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> V39 end))), V43 end(V7)) end end end end.
'un--canonicalName'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V90 = begin (V45 = ('un--lookupCtxtName'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V89 = case V49 of [E0 | E1] -> (fun (V50, V51) -> case V50 of {'Builtin.MkPair', V52, V53} -> case V53 of {'Builtin.MkPair', V54, V55} -> case V51 of [] -> fun (V56) -> {'Prelude.Types.Right', V52} end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V62 = fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V60, V61)) end end end end), fun (V63) -> fun (V64) -> ((((V62('erased'))('erased'))(V63))(V64)) end end end(fun (V57) -> ('Idris.Idris2.Builtin':'un--fst'(V57)) end))(V49)))) end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V65) -> ('Idris.Idris2.Builtin':'un--fst'(V65)) end))(V49)))) end; _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V78 = fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V76, V77)) end end end end), fun (V79) -> fun (V80) -> ((((V78('erased'))('erased'))(V79))(V80)) end end end(fun (V73) -> ('Idris.Idris2.Builtin':'un--fst'(V73)) end))(V49)))) end end(E0, E1)); _ -> ('un--ambiguousName'(V0, V1, V2, ((begin (V86 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V84, V85)) end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(fun (V81) -> ('Idris.Idris2.Builtin':'un--fst'(V81)) end))(V49)))) end), V89 end(V46)) end end end end), V90 end(V9)) end end end end.
'un--branchCtxt'(V0, V1) -> {'Prelude.Types.Right', case V0 of {'Core.Context.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13} -> {'Core.Context.Context.MkContext', V2, V3, V4, V5, V6, (V7 + 1), V8, V9, V10, V11, V12, V13} end}.
'un--branch'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V57 = begin (V44 = fun (V11) -> ('un--branchCtxt'(case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end, V11)) end), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V56 = begin (V49 = ('un--setCtxt'(V0, V48))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V55 = fun (V54) -> {'Prelude.Types.Right', V10} end), V55 end(V50)) end end end end), V56 end(V45)) end end end end), V57 end(V7)) end end end end.
'un--ambiguousName'(V0, V1, V2, V3) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V4) -> begin (V5 = ('un--getVisibility'(V0, V1, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(V9, 0))} end), V11 end(V6)) end end end end end, V3))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = case V16 of [] -> ('un--undefinedName'(V0, V1, V2)); _ -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AmbiguousName', V1, V16}, V17)) end end), V18 end(V13)) end end end end.
'un--allNames'(V0) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V1) -> ('dn--un--full_HasNames_Name'(V0, V1)) end, ((begin (V63 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V61, V62)) end end end end), fun (V64) -> fun (V65) -> ((((V63('erased'))('erased'))(V64))(V65)) end end end(fun (V58) -> {'Core.Name.Resolved', V58} end))(('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_$a'({'Builtin.MkPair', {'Prelude.Num.MkIntegral', {'Prelude.Num.MkNum', fun (V2) -> fun (V3) -> begin (V4 = (V2 + V3)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end end end, fun (V5) -> fun (V6) -> begin (V7 = (V5 * V6)), case ((V7 band 9223372036854775808) =/= 0) of 'true' -> (V7 bor -9223372036854775808); _ -> (V7 band 9223372036854775807) end end end end, fun (V8) -> begin (V9 = V8), case ((V9 band 9223372036854775808) =/= 0) of 'true' -> (V9 bor -9223372036854775808); _ -> (V9 band 9223372036854775807) end end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V12, V13)) end end}, {'Builtin.MkPair', {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V16, V17)) end end}, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V30, V31)) end end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V32) -> fun (V33) -> begin (V34 = (V32 + V33)), case ((V34 band 9223372036854775808) =/= 0) of 'true' -> (V34 bor -9223372036854775808); _ -> (V34 band 9223372036854775807) end end end end, fun (V35) -> fun (V36) -> begin (V37 = (V35 * V36)), case ((V37 band 9223372036854775808) =/= 0) of 'true' -> (V37 bor -9223372036854775808); _ -> (V37 band 9223372036854775807) end end end end, fun (V38) -> begin (V39 = V38), case ((V39 band 9223372036854775808) =/= 0) of 'true' -> (V39 bor -9223372036854775808); _ -> (V39 band 9223372036854775807) end end end}, fun (V40) -> begin (V41 = (0 - V40)), case ((V41 band 9223372036854775808) =/= 0) of 'true' -> (V41 bor -9223372036854775808); _ -> (V41 band 9223372036854775807) end end end, fun (V42) -> fun (V43) -> begin (V44 = (V42 - V43)), case ((V44 band 9223372036854775808) =/= 0) of 'true' -> (V44 bor -9223372036854775808); _ -> (V44 band 9223372036854775807) end end end end}}}, 1, begin (V57 = (case V0 of {'Core.Context.Context.MkContext', V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56} -> V46 end - 1)), case ((V57 band 9223372036854775808) =/= 0) of 'true' -> (V57 bor -9223372036854775808); _ -> (V57 band 9223372036854775807) end end)))), [])).
'un--aliasName'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('case--aliasName-17913'(V1, V0, V11, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V1))))), V12 end(V8)) end end end end.
'un--addUserHole'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V50 = begin (V13 = V0), fun (V14) -> begin (V49 = (begin (V15 = V13), fun (V16) -> ('erlang':'put'(V15, case V12 of {'Core.Context.MkDefs', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} -> {'Core.Context.MkDefs', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V2, V1, V42)), V43, V44, V45, V46, V47, V48} end)) end end(V14))), {'Prelude.Types.Right', V49} end end end), V50 end(V9)) end end end end.
'un--addTransform'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V13 = ('case--addTransform-23406'(V2, V1, V0, V12, ('un--getFnName'(V2))))), V13 end(V9)) end end end end.
'un--addToSave'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V87 = begin (V44 = ('dn--un--full_HasNames_Name'(case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end, V1))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V86 = begin (V49 = V0), fun (V50) -> begin (V85 = (begin (V51 = V49), fun (V52) -> ('erlang':'put'(V51, case V11 of {'Core.Context.MkDefs', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84} -> {'Core.Context.MkDefs', V53, V54, V55, V56, V57, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V48, {'Builtin.MkUnit'}, V58)), V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V48, {'Builtin.MkUnit'}, V77)), V78, V79, V80, V81, V82, V83, V84} end)) end end(V50))), {'Prelude.Types.Right', V85} end end end), V86 end(V45)) end end end end), V87 end(V8)) end end end end.
'un--addPossible'(V0, V1, V2) -> ('case--addPossible-5729'(V2, V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--addPkg'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V85 = begin (V12 = V0), fun (V13) -> begin (V84 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V50 of {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V62, V63, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V64, [V1 | []])), V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83}, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V84} end end end), V85 end(V8)) end end end end.
'un--addPackageDir'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V70 = begin (V12 = V0), fun (V13) -> begin (V69 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V48 of {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, [V1 | ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V68) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V68, V1)) end, V65))], V66, V67}, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V69} end end end), V70 end(V8)) end end end end.
'un--addOpenHint'(V0, V1) -> begin (V7 = ('un--toResolvedNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> ('dn--un--full_HasNames_Name'(V2, V3)) end end, fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--resolved_HasNames_Name'(V4, V5, V6)) end end end}, V1))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V60 = begin (V17 = begin (V12 = V0), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V59 = begin (V22 = V0), fun (V23) -> begin (V58 = (begin (V24 = V22), fun (V25) -> ('erlang':'put'(V24, case V21 of {'Core.Context.MkDefs', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> {'Core.Context.MkDefs', V26, V27, V28, V29, V30, V31, V32, V33, V34, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V11, {'Builtin.MkUnit'}, V35)), V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} end)) end end(V23))), {'Prelude.Types.Right', V58} end end end), V59 end(V18)) end end end end), V60 end(V8)) end end end end.
'un--addNameDirective'(V0, V1, V2, V3) -> begin (V4 = ('un--checkUnambig'(V0, V1, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V57 = begin (V14 = begin (V9 = V0), fun (V10) -> begin (V13 = (begin (V11 = V9), fun (V12) -> ('erlang':'get'(V11)) end end(V10))), {'Prelude.Types.Right', V13} end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V56 = begin (V19 = V0), fun (V20) -> begin (V55 = (begin (V21 = V19), fun (V22) -> ('erlang':'put'(V21, case V18 of {'Core.Context.MkDefs', V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54} -> {'Core.Context.MkDefs', V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V8, V3, V38)), V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54} end)) end end(V20))), {'Prelude.Types.Right', V55} end end end), V56 end(V15)) end end end end), V57 end(V5)) end end end end.
'un--addName'(V0, V1) -> case V1 of {'Core.Name.Resolved', V2} -> fun (V3) -> {'Prelude.Types.Right', V2} end; _ -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V61 = begin (V46 = ('un--newEntry'(V1, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V60 = case V50 of {'Builtin.MkPair', V51, V52} -> begin (V53 = ('un--setCtxt'(V0, V52))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V59 = fun (V58) -> {'Prelude.Types.Right', V51} end), V59 end(V54)) end end end end end), V60 end(V47)) end end end end), V61 end(V10)) end end end end end.
'un--addMutData'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, [V1 | V17], V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--addLogLevel'(V0, V1) -> case V1 of {'Prelude.Types.Nothing'} -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V85 = begin (V12 = V0), fun (V13) -> begin (V84 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V50 of {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', V48, V49, {'Core.Options.MkSessionOpts', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, 0, ('Idris.Idris2.Core.Options.Log':'un--defaultLogLevel'()), V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83}, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V84} end end end), V85 end(V8)) end end end end; {'Prelude.Types.Just', V86} -> begin (V92 = begin (V87 = V0), fun (V88) -> begin (V91 = (begin (V89 = V87), fun (V90) -> ('erlang':'get'(V89)) end end(V88))), {'Prelude.Types.Right', V91} end end end), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V170 = begin (V97 = V0), fun (V98) -> begin (V169 = (begin (V99 = V97), fun (V100) -> ('erlang':'put'(V99, case V96 of {'Core.Context.MkDefs', V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132} -> case V105 of {'Core.Options.MkOptions', V133, V134, V135, V136, V137, V138, V139, V140, V141, V142} -> case V135 of {'Core.Options.MkSessionOpts', V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168} -> {'Core.Context.MkDefs', V101, V102, V103, V104, {'Core.Options.MkOptions', V133, V134, {'Core.Options.MkSessionOpts', V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, 1, ('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V86, V154)), V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168}, V136, V137, V138, V139, V140, V141, V142}, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132} end end end)) end end(V98))), {'Prelude.Types.Right', V169} end end end), V170 end(V93)) end end end end end.
'un--addLocalHint'(V0, V1) -> begin (V7 = ('un--toResolvedNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> ('dn--un--full_HasNames_Name'(V2, V3)) end end, fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--resolved_HasNames_Name'(V4, V5, V6)) end end end}, V1))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V60 = begin (V17 = begin (V12 = V0), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V59 = begin (V22 = V0), fun (V23) -> begin (V58 = (begin (V24 = V22), fun (V25) -> ('erlang':'put'(V24, case V21 of {'Core.Context.MkDefs', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> {'Core.Context.MkDefs', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V11, {'Builtin.MkUnit'}, V36)), V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} end)) end end(V23))), {'Prelude.Types.Right', V58} end end end), V59 end(V18)) end end end end), V60 end(V8)) end end end end.
'un--addLibDir'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V69 = begin (V12 = V0), fun (V13) -> begin (V68 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V48 of {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V66, [V1 | []])), V67}, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V68} end end end), V69 end(V8)) end end end end.
'un--addImportedInc'(V0, V1, V2) -> begin (V3 = ('un--getSession'(V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V244 = begin (V34 = case V7 of {'Core.Options.MkSessionOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V12 end), begin (V40 = begin (V35 = V0), fun (V36) -> begin (V39 = (begin (V37 = V35), fun (V38) -> ('erlang':'get'(V37)) end end(V36))), {'Prelude.Types.Right', V39} end end end), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V243 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V56)) end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V60, V61, V62, V63)) end end end end end end end, fun (V64) -> fun (V65) -> V65 end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V68, V69, V70)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V73, V74)) end end}, V34, case V7 of {'Core.Options.MkSessionOpts', V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100} -> V98 end)) of 1 -> (case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V103, V104)) end end}, V34, V2)) of {'Prelude.Types.Nothing'} -> fun () -> begin (V105 = ('un--recordWarning'(V0, {'Core.Core.GenericWarn', <<<<"No incremental compile data for "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V1))/binary>>}))), fun (V106) -> begin (V107 = (V105(V106))), case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> (begin (V201 = begin (V115 = begin (V110 = V0), fun (V111) -> begin (V114 = (begin (V112 = V110), fun (V113) -> ('erlang':'get'(V112)) end end(V111))), {'Prelude.Types.Right', V114} end end end), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V200 = begin (V157 = begin (V120 = V0), fun (V121) -> begin (V156 = (begin (V122 = V120), fun (V123) -> ('erlang':'put'(V122, case V119 of {'Core.Context.MkDefs', V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155} -> {'Core.Context.MkDefs', V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, ('nested--34126-29568--in--un--drop'(V2, V1, V0, V34, V147)), V148, V149, V150, V151, V152, V153, V154, V155} end)) end end(V121))), {'Prelude.Types.Right', V156} end end end), fun (V158) -> begin (V159 = (V157(V158))), case V159 of {'Prelude.Types.Left', V160} -> {'Prelude.Types.Left', V160}; {'Prelude.Types.Right', V161} -> (begin (V199 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V1)), <<""/utf8>>)) of 1 -> begin (V162 = ('un--getSession'(V0))), fun (V163) -> begin (V164 = (V162(V163))), case V164 of {'Prelude.Types.Left', V165} -> {'Prelude.Types.Left', V165}; {'Prelude.Types.Right', V166} -> (begin (V197 = ('un--setSession'(V0, case V166 of {'Core.Options.MkSessionOpts', V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192} -> {'Core.Options.MkSessionOpts', V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, ('Idris.Idris2.Data.List':'un--delete'({'Prelude.EqOrd.MkEq', fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V193, V194)) end end, fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V195, V196)) end end}, V34, V190)), V191, V192} end))), V197 end(V163)) end end end end; 0 -> fun (V198) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V199 end(V158)) end end end end), V200 end(V116)) end end end end), V201 end(V106)) end end end end end; {'Prelude.Types.Just', V202} -> case V202 of {'Builtin.MkPair', V203, V204} -> fun () -> begin (V205 = V0), fun (V206) -> begin (V241 = (begin (V207 = V205), fun (V208) -> ('erlang':'put'(V207, case V44 of {'Core.Context.MkDefs', V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240} -> {'Core.Context.MkDefs', V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, ('nested--34126-29567--in--un--addMod'(V2, V1, V0, V34, {'Builtin.MkPair', V203, V204}, V232)), V233, V234, V235, V236, V237, V238, V239, V240} end)) end end(V206))), {'Prelude.Types.Right', V241} end end end end end end()); 0 -> fun (V242) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V243 end(V41)) end end end end end), V244 end(V4)) end end end end.
'un--addImported'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = V0), fun (V13) -> begin (V48 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, [V1 | V34], V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end)) end end(V13))), {'Prelude.Types.Right', V48} end end end), V49 end(V8)) end end end end.
'un--addHintFor'(V0, V1, V2, V3, V4, V5) -> begin (V11 = begin (V6 = V0), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V146 = begin (V21 = ('un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V16) -> fun (V17) -> ('dn--un--full_HasNames_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--resolved_HasNames_Name'(V18, V19, V20)) end end end}, V2))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V145 = begin (V31 = ('un--toResolvedNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V26) -> fun (V27) -> ('dn--un--full_HasNames_Name'(V26, V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> ('dn--un--resolved_HasNames_Name'(V28, V29, V30)) end end end}, V3))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V144 = begin (V69 = case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V25, case V15 of {'Core.Context.MkDefs', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> V43 end)) of {'Prelude.Types.Just', V68} -> V68; {'Prelude.Types.Nothing'} -> [] end), case V5 of 1 -> begin (V70 = V0), fun (V71) -> begin (V106 = (begin (V72 = V70), fun (V73) -> ('erlang':'put'(V72, case V15 of {'Core.Context.MkDefs', V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105} -> {'Core.Context.MkDefs', V74, V75, V76, V77, V78, V79, V80, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V25, [{'Builtin.MkPair', V35, V4} | V69], V81)), V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105} end)) end end(V71))), {'Prelude.Types.Right', V106} end end end; 0 -> begin (V107 = V0), fun (V108) -> begin (V143 = (begin (V109 = V107), fun (V110) -> ('erlang':'put'(V109, case V15 of {'Core.Context.MkDefs', V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142} -> {'Core.Context.MkDefs', V111, V112, V113, V114, V115, V116, V117, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V25, [{'Builtin.MkPair', V35, V4} | V69], V118)), V119, V120, V121, [{'Builtin.MkPair', V25, {'Builtin.MkPair', V35, V4}} | V122], V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142} end)) end end(V108))), {'Prelude.Types.Right', V143} end end end end end), V144 end(V32)) end end end end), V145 end(V22)) end end end end), V146 end(V12)) end end end end.
'un--addHashWithNames'(V0, V1, V2, V3) -> begin (V4 = ('un--toFullNames'(V0, V2, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V9 = ('un--addHash'(V0, V1, V8))), V9 end(V5)) end end end end.
'un--addHash'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V54 = begin (V13 = V0), fun (V14) -> begin (V53 = (begin (V15 = V13), fun (V16) -> ('erlang':'put'(V15, case V12 of {'Core.Context.MkDefs', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} -> {'Core.Context.MkDefs', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V49) -> fun (V50) -> case V1 of {'Core.Hash.dn--un--__mkHashable', V51, V52} -> ((V52(V49))(V50)) end end end, V2, V33)), V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} end)) end end(V14))), {'Prelude.Types.Right', V53} end end end), V54 end(V9)) end end end end.
'un--addGlobalHint'(V0, V1, V2) -> begin (V8 = ('un--toResolvedNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> ('dn--un--full_HasNames_Name'(V3, V4)) end end, fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--resolved_HasNames_Name'(V5, V6, V7)) end end end}, V1))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V61 = begin (V18 = begin (V13 = V0), fun (V14) -> begin (V17 = (begin (V15 = V13), fun (V16) -> ('erlang':'get'(V15)) end end(V14))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V60 = begin (V23 = V0), fun (V24) -> begin (V59 = (begin (V25 = V23), fun (V26) -> ('erlang':'put'(V25, case V22 of {'Core.Context.MkDefs', V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58} -> {'Core.Context.MkDefs', V27, V28, V29, V30, V31, V32, V33, V34, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V12, V2, V35)), V36, V37, V38, [{'Builtin.MkPair', V12, V2} | V39], V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58} end)) end end(V24))), {'Prelude.Types.Right', V59} end end end), V60 end(V19)) end end end end), V61 end(V9)) end end end end.
'un--addExtraDir'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V70 = begin (V12 = V0), fun (V13) -> begin (V69 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V48 of {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, [V1 | ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V68) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V68, V1)) end, V64))], V65, V66, V67}, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V69} end end end), V70 end(V8)) end end end end.
'un--addEntry'(V0, V1, V2) -> case case (case V2 of {'Core.Context.Context.MkContext', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14} -> V8 end =:= 0) of 'false' -> 0; _ -> 1 end of 1 -> begin (V15 = ('un--getPosition'(V0, V2))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V82 = case V19 of {'Builtin.MkPair', V20, V21} -> begin (V34 = case V21 of {'Core.Context.Context.MkContext', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V26 end), begin (V40 = begin (V35 = V34), fun (V36) -> begin (V39 = (begin (V37 = V35), fun (V38) -> ('erlang':'get'(V37)) end end(V36))), {'Prelude.Types.Right', V39} end end end), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V81 = begin (V74 = fun (V45) -> begin (V73 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> V52 end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), begin (V60 = (V57(V58))), (V59(V60)) end end end end end end end}, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), ((V64(V66))(V65)) end end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V68(V69))), (V70(V69)) end end end end}, fun (V71) -> fun (V72) -> V72 end end}, V44, V20, V1))(V45))), {'Prelude.Types.Right', V73} end end), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V80 = fun (V79) -> {'Prelude.Types.Right', {'Builtin.MkPair', V20, V21}} end), V80 end(V75)) end end end end), V81 end(V41)) end end end end end end), V82 end(V16)) end end end end; 0 -> begin (V83 = ('un--getPosition'(V0, V2))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V103 = fun (V88) -> case V87 of {'Builtin.MkPair', V89, V90} -> {'Prelude.Types.Right', {'Builtin.MkPair', V89, case V90 of {'Core.Context.Context.MkContext', V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} -> {'Core.Context.Context.MkContext', V91, V92, V93, V94, V95, V96, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V89, V1, V97)), V98, V99, V100, V101, V102} end}} end end), V103 end(V84)) end end end end end.
'un--addDirective'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V118 = case ('Idris.Idris2.Core.Options':'un--getCG'(case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V17 end, V1)) of {'Prelude.Types.Nothing'} -> fun (V45) -> begin (V46 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"Unknown code generator "/utf8>>/binary, V1/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V45))), {'Prelude.Types.Right', V46} end end; {'Prelude.Types.Just', V47} -> begin (V48 = V0), fun (V49) -> begin (V117 = (begin (V50 = V48), fun (V51) -> ('erlang':'put'(V50, case V12 of {'Core.Context.MkDefs', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> {'Core.Context.MkDefs', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, begin (V84 = {'Core.Context.MkDefs', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83}), [{'Builtin.MkPair', case V84 of {'Core.Context.MkDefs', V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116} -> V87 end, {'Builtin.MkPair', V47, V2}} | V72] end, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} end)) end end(V49))), {'Prelude.Types.Right', V117} end end end end), V118 end(V9)) end end end end.
'un--addDef'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V151 = begin (V45 = ('un--addCtxt'(V1, V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V150 = case V49 of {'Builtin.MkPair', V50, V51} -> begin (V89 = begin (V52 = V0), fun (V53) -> begin (V88 = (begin (V54 = V52), fun (V55) -> ('erlang':'put'(V54, case V12 of {'Core.Context.MkDefs', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} -> {'Core.Context.MkDefs', V51, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} end)) end end(V53))), {'Prelude.Types.Right', V88} end end end), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V149 = begin (V142 = case V2 of {'Core.Context.Context.MkGlobalDef', V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115} -> case V111 of {'Core.Context.Context.None'} -> fun (V116) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Core.Context.Context.Hole', V117, V118} -> fun (V119) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; _ -> ('un--clearUserHole'(V0, case V2 of {'Core.Context.Context.MkGlobalDef', V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141} -> V121 end)) end end), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V148 = fun (V147) -> {'Prelude.Types.Right', V50} end), V148 end(V143)) end end end end), V149 end(V90)) end end end end end), V150 end(V46)) end end end end), V151 end(V9)) end end end end.
'un--addDataDir'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V69 = begin (V12 = V0), fun (V13) -> begin (V68 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> case V20 of {'Core.Options.MkOptions', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> case V48 of {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Core.Context.MkDefs', V16, V17, V18, V19, {'Core.Options.MkOptions', {'Core.Options.MkDirs', V58, V59, V60, V61, V62, V63, V64, V65, V66, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V67, [V1 | []]))}, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end end end)) end end(V13))), {'Prelude.Types.Right', V68} end end end), V69 end(V8)) end end end end.
'un--addCtxt'(V0, V1, V2) -> case case (case V2 of {'Core.Context.Context.MkContext', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14} -> V8 end =:= 0) of 'false' -> 0; _ -> 1 end of 1 -> begin (V15 = ('un--getPosition'(V0, V2))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V82 = case V19 of {'Builtin.MkPair', V20, V21} -> begin (V34 = case V21 of {'Core.Context.Context.MkContext', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V26 end), begin (V40 = begin (V35 = V34), fun (V36) -> begin (V39 = (begin (V37 = V35), fun (V38) -> ('erlang':'get'(V37)) end end(V36))), {'Prelude.Types.Right', V39} end end end), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V81 = begin (V74 = fun (V45) -> begin (V73 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> V52 end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), begin (V60 = (V57(V58))), (V59(V60)) end end end end end end end}, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), ((V64(V66))(V65)) end end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V68(V69))), (V70(V69)) end end end end}, fun (V71) -> fun (V72) -> V72 end end}, V44, V20, {'Core.Context.Context.Decoded', V1}))(V45))), {'Prelude.Types.Right', V73} end end), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V80 = fun (V79) -> {'Prelude.Types.Right', {'Builtin.MkPair', V20, V21}} end), V80 end(V75)) end end end end), V81 end(V41)) end end end end end end), V82 end(V16)) end end end end; 0 -> begin (V83 = ('un--getPosition'(V0, V2))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V103 = fun (V88) -> case V87 of {'Builtin.MkPair', V89, V90} -> {'Prelude.Types.Right', {'Builtin.MkPair', V89, case V90 of {'Core.Context.Context.MkContext', V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} -> {'Core.Context.Context.MkContext', V91, V92, V93, V94, V95, V96, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V89, {'Core.Context.Context.Decoded', V1}, V97)), V98, V99, V100, V101, V102} end}} end end), V103 end(V84)) end end end end end.
'un--addContextEntry'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V98 = begin (V46 = ('un--addEntry'(V2, {'Core.Context.Context.Coded', V1, V3}, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V97 = case V50 of {'Builtin.MkPair', V51, V52} -> begin (V90 = begin (V53 = V0), fun (V54) -> begin (V89 = (begin (V55 = V53), fun (V56) -> ('erlang':'put'(V55, case V13 of {'Core.Context.MkDefs', V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88} -> {'Core.Context.MkDefs', V52, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88} end)) end end(V54))), {'Prelude.Types.Right', V89} end end end), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V96 = fun (V95) -> {'Prelude.Types.Right', V51} end), V96 end(V91)) end end end end end), V97 end(V47)) end end end end), V98 end(V10)) end end end end.
'un--addContextAlias'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V127 = begin (V45 = ('un--lookupCtxtExact'(V1, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V126 = case V49 of {'Prelude.Types.Nothing'} -> begin (V82 = ('un--newAlias'(V1, V2, case V12 of {'Core.Context.MkDefs', V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81} -> V50 end))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V124 = begin (V87 = V0), fun (V88) -> begin (V123 = (begin (V89 = V87), fun (V90) -> ('erlang':'put'(V89, case V12 of {'Core.Context.MkDefs', V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122} -> {'Core.Context.MkDefs', V86, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122} end)) end end(V88))), {'Prelude.Types.Right', V123} end end end), V124 end(V83)) end end end end; _ -> fun (V125) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V126 end(V46)) end end end end), V127 end(V9)) end end end end.
'un--addBuiltin'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--addDef'(V1, V2, {'Core.Context.Context.MkGlobalDef', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V2, V3, [], [], [], [], ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), [], 2, V4, [{'Core.Context.Context.Inline'} | []], {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, 0, 0, 1, {'Core.Context.Context.Builtin', V0, V5}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, [], {'Prelude.Types.Nothing'}}))), ((begin (V22 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V19, V20, V21)) end end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end((begin (V14 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> {'Prelude.Types.Right', (V10(V13))} end end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V7) -> {'Builtin.MkUnit'} end))))(V6)) end.
'un--addAlias'(V0, V1, V2, V3) -> ('case--addAlias-5807'(V3, V2, V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--Grow'() -> ('un--initSize'()).
