-module('Idris.Idris2.Parser.Unlit').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in hasLitFileExt-6433'/6,
  'nested--4554-6585--in--un--walk'/1,
  'nested--4554-6584--in--un--try'/2,
  'nested--4496-6528--in--un--isStyle'/2,
  'nested--4496-6527--in--un--hasSuffix'/2,
  'nested--4322-6365--in--un--err'/1,
  'un--unlit'/2,
  'un--styleTeX'/0,
  'un--styleOrg'/0,
  'un--styleCMark'/0,
  'un--styleBird'/0,
  'un--relit'/2,
  'un--listOfExtensionsLiterate'/0,
  'un--isLitLine'/1,
  'un--isLitFile'/1,
  'un--hasLitFileExt'/1
]).
'case--case block in hasLitFileExt-6433'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Data.List1.:::', V6, V7} -> case V6 of <<""/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Data.List.Extra':'un--suffixOfBy'(fun (V8) -> fun (V9) -> ((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V24) -> V8 end))(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V12, V13)) end end end end, fun (V14) -> fun (V15) -> {'Prelude.Types.Just', V15} end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V18, V19)) end end end end}, fun (V20) -> {'Prelude.Types.Nothing'} end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V22, V23)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V8, V9)))))) end end, V7, V3)), fun (V32) -> case V32 of {'Builtin.MkPair', V33, V34} -> {'Prelude.Types.Just', {'Builtin.MkPair', <<V2/binary, (V1(V33))/binary>>, (V1(V34))}} end end)); _ -> ('nested--4322-6365--in--un--err'(V0)) end; _ -> ('nested--4322-6365--in--un--err'(V0)) end.
'nested--4554-6585--in--un--walk'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('nested--4554-6584--in--un--try'(V0, ('un--styleBird'()))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('nested--4554-6584--in--un--try'(V0, ('un--styleOrg'()))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('nested--4554-6584--in--un--try'(V0, ('un--styleCMark'()))), fun () -> ('nested--4554-6584--in--un--try'(V0, ('un--styleTeX'()))) end)) end)) end)).
'nested--4554-6584--in--un--try'(V0, V1) -> case ('Idris.Idris2.Libraries.Text.Literate':'un--isLiterateLine'(V1, V0)) of {'Builtin.MkPair', V2, V3} -> case V2 of {'Prelude.Types.Just', V4} -> {'Prelude.Types.Just', {'Builtin.MkPair', {'Prelude.Types.Just', V4}, V3}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'nested--4496-6528--in--un--isStyle'(V0, V1) -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V2, V3)) end end, 0}, fun (V4) -> ('nested--4496-6527--in--un--hasSuffix'(V0, V4)) end, case V1 of {'Libraries.Text.Literate.MkLitStyle', V5, V6, V7} -> V7 end)) of 1 -> {'Prelude.Types.Just', V1}; 0 -> {'Prelude.Types.Nothing'} end.
'nested--4496-6527--in--un--hasSuffix'(V0, V1) -> ('Idris.Idris2.Data.String':'un--isSuffixOf'(V1, V0)).
'nested--4322-6365--in--un--err'(V0) -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<"Internal error: all literate extensions should start with a \x{22}.\x{22}"/utf8>>)).
'un--unlit'(V0, V1) -> case V0 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', V1}; {'Prelude.Types.Just', V2} -> ('Idris.Idris2.Libraries.Text.Literate':'un--unlit'(V2, V1)) end.
'un--styleTeX'() -> {'Libraries.Text.Literate.MkLitStyle', [{'Builtin.MkPair', <<"\x{5c}begin{code}"/utf8>>, <<"\x{5c}end{code}"/utf8>>} | [{'Builtin.MkPair', <<"\x{5c}begin{hidden}"/utf8>>, <<"\x{5c}end{hidden}"/utf8>>} | []]], [], [<<".tex"/utf8>> | [<<".ltx"/utf8>> | []]]}.
'un--styleOrg'() -> {'Libraries.Text.Literate.MkLitStyle', [{'Builtin.MkPair', <<"#+BEGIN_SRC idris"/utf8>>, <<"#+END_SRC"/utf8>>} | [{'Builtin.MkPair', <<"#+begin_src idris"/utf8>>, <<"#+end_src"/utf8>>} | [{'Builtin.MkPair', <<"#+BEGIN_COMMENT idris"/utf8>>, <<"#+END_COMMENT"/utf8>>} | [{'Builtin.MkPair', <<"#+begin_comment idris"/utf8>>, <<"#+end_comment"/utf8>>} | []]]]], [<<"#+IDRIS:"/utf8>> | []], [<<".org"/utf8>> | []]}.
'un--styleCMark'() -> {'Libraries.Text.Literate.MkLitStyle', [{'Builtin.MkPair', <<"```idris"/utf8>>, <<"```"/utf8>>} | [{'Builtin.MkPair', <<"~~~idris"/utf8>>, <<"~~~"/utf8>>} | [{'Builtin.MkPair', <<"<!-- idris"/utf8>>, <<"-->"/utf8>>} | []]]], [], [<<".md"/utf8>> | [<<".markdown"/utf8>> | []]]}.
'un--styleBird'() -> {'Libraries.Text.Literate.MkLitStyle', [], [<<">"/utf8>> | [<<"<"/utf8>> | []]], [<<".lidr"/utf8>> | []]}.
'un--relit'(V0, V1) -> case V0 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V2} -> ('Idris.Idris2.Data.String':'un--unwords'([V2 | [V1 | []]])) end.
'un--listOfExtensionsLiterate'() -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V0) -> fun (V1) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, V1)) end end, []}, fun (V2) -> case V2 of {'Libraries.Text.Literate.MkLitStyle', V3, V4, V5} -> V5 end end, [('un--styleBird'()) | [('un--styleOrg'()) | [('un--styleCMark'()) | [('un--styleTeX'()) | []]]]])).
'un--isLitLine'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Builtin.MkPair', {'Prelude.Types.Nothing'}, V0} end, ('nested--4554-6585--in--un--walk'(V0)))).
'un--isLitFile'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('nested--4496-6528--in--un--isStyle'(V0, ('un--styleBird'()))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('nested--4496-6528--in--un--isStyle'(V0, ('un--styleOrg'()))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('nested--4496-6528--in--un--isStyle'(V0, ('un--styleCMark'()))), fun () -> ('nested--4496-6528--in--un--isStyle'(V0, ('un--styleTeX'()))) end)) end)) end)).
'un--hasLitFileExt'(V0) -> begin (V5 = fun (V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> <<V2/binary, V3/binary>> end end, <<""/utf8>>}, fun (V4) -> <<<<"."/utf8>>/binary, V4/binary>> end, V1)) end), case ('Idris.Idris2.Libraries.Utils.Path':'un--splitExtensions'(V0)) of {'Builtin.MkPair', V6, V7} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Interfaces':'dn--un--<+>_Semigroup_SemigroupAlternative($f $a)'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V14, V15)) end end end end, fun (V16) -> fun (V17) -> {'Prelude.Types.Just', V17} end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V20, V21)) end end end end}, fun (V22) -> {'Prelude.Types.Nothing'} end, fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V24, V25)) end end end}, V10, V11)) end end, ('Idris.Idris2.Prelude.Interfaces':'dn--un--neutral_Monoid_MonoidAlternative($f $a)'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V28, V29)) end end end end, fun (V30) -> fun (V31) -> {'Prelude.Types.Just', V31} end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V34, V35)) end end end end}, fun (V36) -> {'Prelude.Types.Nothing'} end, fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V38, V39)) end end end}))}, V8, V9)) end end, ('un--listOfExtensionsLiterate'()), fun (V40) -> ('case--case block in hasLitFileExt-6433'(V0, V5, V6, V7, V40, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V41) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V41)) end, ('Idris.Idris2.Data.List':'un--split'(fun (V42) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'($., V42)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V40)))))))) end)) end end.
