-module('Idris.Idris2.Compiler.Erlang.Utils.PrimTerm').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--primTermToErlTerm'/1,
  'un--primTermToCS'/1
]).
'un--primTermToErlTerm'(V0) -> case V0 of {'Compiler.Erlang.Utils.PrimTerm.PAtom', V1} -> (begin (V3 = fun (V2) -> V2 end), fun (V4) -> (V3(V4)) end end(('erlang':'binary_to_atom'(V1, 'utf8')))); {'Compiler.Erlang.Utils.PrimTerm.PChar', V5} -> (begin (V7 = fun (V6) -> V6 end), fun (V8) -> (V7(V8)) end end(V5)); {'Compiler.Erlang.Utils.PrimTerm.PFloat', V9} -> (begin (V11 = fun (V10) -> V10 end), fun (V12) -> (V11(V12)) end end(V9)); {'Compiler.Erlang.Utils.PrimTerm.PInteger', V13} -> (begin (V15 = fun (V14) -> V14 end), fun (V16) -> (V15(V16)) end end(V13)); {'Compiler.Erlang.Utils.PrimTerm.PTuple', V17} -> ('erlang':'apply'('erlang', 'list_to_tuple', [((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('un--primTermToErlTerm'(V18)) end))(V17)) | []])); {'Compiler.Erlang.Utils.PrimTerm.PList', V26} -> (begin (V36 = fun (V35) -> V35 end), fun (V37) -> (V36(V37)) end end(((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V27) -> ('un--primTermToErlTerm'(V27)) end))(V26)))); {'Compiler.Erlang.Utils.PrimTerm.PCharlist', V38} -> (begin (V40 = fun (V39) -> V39 end), fun (V41) -> (V40(V41)) end end(('unicode':'characters_to_list'(V38)))) end.
'un--primTermToCS'(V0) -> case V0 of {'Compiler.Erlang.Utils.PrimTerm.PAtom', V1} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"\x{27}"/utf8>>} | [{'Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)), <<""/utf8>>))} | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"\x{27}"/utf8>>} | []]]]}; {'Compiler.Erlang.Utils.PrimTerm.PChar', V2} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"$"/utf8>>} | [{'Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeChar'(V2, <<""/utf8>>))} | []]]}; {'Compiler.Erlang.Utils.PrimTerm.PFloat', V3} -> {'Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showDouble'(V3))}; {'Compiler.Erlang.Utils.PrimTerm.PInteger', V4} -> {'Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V4))}; {'Compiler.Erlang.Utils.PrimTerm.PTuple', V5} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"{"/utf8>>} | [{'Compiler.Erlang.Utils.CompositeString.Nested', ('Idris.Idris2.Data.List':'un--intersperse'({'Compiler.Erlang.Utils.CompositeString.Str', <<","/utf8>>}, ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> ('un--primTermToCS'(V6)) end))(V5))))} | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]}; {'Compiler.Erlang.Utils.PrimTerm.PList', V14} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"["/utf8>>} | [{'Compiler.Erlang.Utils.CompositeString.Nested', ('Idris.Idris2.Data.List':'un--intersperse'({'Compiler.Erlang.Utils.CompositeString.Str', <<","/utf8>>}, ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> ('un--primTermToCS'(V15)) end))(V14))))} | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"]"/utf8>>} | []]]]}; {'Compiler.Erlang.Utils.PrimTerm.PCharlist', V23} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"\x{22}"/utf8>>} | [{'Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V23)), <<""/utf8>>))} | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"\x{22}"/utf8>>} | []]]]} end.
