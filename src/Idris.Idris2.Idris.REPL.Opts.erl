-module('Idris.Idris2.Idris.REPL.Opts').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--10205-8632--in--un--litStyle'/4,
  'un--withROpts'/2,
  'un--setSynHighlightOn'/2,
  'un--setSource'/2,
  'un--setOutput'/2,
  'un--setMainFile'/2,
  'un--setEvalTiming'/2,
  'un--setCurrentElabSource'/2,
  'un--setConsoleWidth'/2,
  'un--setColor'/2,
  'un--resetProofState'/1,
  'un--litStyle'/1,
  'un--getSynHighlightOn'/1,
  'un--getSourceLine'/2,
  'un--getSource'/1,
  'un--getOutput'/1,
  'un--getLitStyle'/1,
  'un--getEvalTiming'/1,
  'un--getCurrentElabSource'/1,
  'un--getConsoleWidth'/1,
  'un--getColor'/1,
  'un--getCodegen'/2,
  'un--defaultOpts'/3
]).
'nested--10205-8632--in--un--litStyle'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V4} -> ('Idris.Idris2.Parser.Unlit':'un--isLitFile'(V4)) end.
'un--withROpts'(V0, V1) -> ('Idris.Idris2.Core.Core':'un--wrapRef'({'Idris.REPL.Opts.ROpts'}, V0, fun (V2) -> fun (V3) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end, V1)).
'un--setSynHighlightOn'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V34 = begin (V12 = V0), fun (V13) -> begin (V33 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V1} end)) end end(V13))), {'Prelude.Types.Right', V33} end end end), V34 end(V8)) end end end end.
'un--setSource'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V34 = begin (V12 = V0), fun (V13) -> begin (V33 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V1, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end)) end end(V13))), {'Prelude.Types.Right', V33} end end end), V34 end(V8)) end end end end.
'un--setOutput'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V34 = begin (V12 = V0), fun (V13) -> begin (V33 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V1, V25, V26, V27, V28, V29, V30, V31, V32} end)) end end(V13))), {'Prelude.Types.Right', V33} end end end), V34 end(V8)) end end end end.
'un--setMainFile'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V34 = begin (V12 = V0), fun (V13) -> begin (V33 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V1, ('un--litStyle'(V1)), V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end)) end end(V13))), {'Prelude.Types.Right', V33} end end end), V34 end(V8)) end end end end.
'un--setEvalTiming'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V34 = begin (V12 = V0), fun (V13) -> begin (V33 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V1, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end)) end end(V13))), {'Prelude.Types.Right', V33} end end end), V34 end(V8)) end end end end.
'un--setCurrentElabSource'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V34 = begin (V12 = V0), fun (V13) -> begin (V33 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V1, V26, V27, V28, V29, V30, V31, V32} end)) end end(V13))), {'Prelude.Types.Right', V33} end end end), V34 end(V8)) end end end end.
'un--setConsoleWidth'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V34 = begin (V12 = V0), fun (V13) -> begin (V33 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V1, V31, V32} end)) end end(V13))), {'Prelude.Types.Right', V33} end end end), V34 end(V8)) end end end end.
'un--setColor'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V34 = begin (V12 = V0), fun (V13) -> begin (V33 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V1, V32} end)) end end(V13))), {'Prelude.Types.Right', V33} end end end), V34 end(V8)) end end end end.
'un--resetProofState'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V33 = begin (V11 = V0), fun (V12) -> begin (V32 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, case V10 of {'Idris.REPL.Opts.MkREPLOpts', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} -> {'Idris.REPL.Opts.MkREPLOpts', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V27, V28, V29, V30, V31} end)) end end(V12))), {'Prelude.Types.Right', V32} end end end), V33 end(V7)) end end end end.
'un--litStyle'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Parser.Unlit':'un--isLitFile'(V1)) end))(V0)))).
'un--getSynHighlightOn'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V7) -> case V7 of {'Idris.REPL.Opts.MkREPLOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V24 end end))))(V6)) end.
'un--getSourceLine'(V0, V1) -> begin (V2 = ('un--getSource'(V0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V9 = fun (V7) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.List.Extra':'un--elemAt'(('Idris.Idris2.Data.String':'un--lines'(V6)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(begin (V8 = (V1 - 1)), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end))))} end), V9 end(V3)) end end end end.
'un--getSource'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V7) -> case V7 of {'Idris.REPL.Opts.MkREPLOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V13 end end))))(V6)) end.
'un--getOutput'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V7) -> case V7 of {'Idris.REPL.Opts.MkREPLOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V16 end end))))(V6)) end.
'un--getLitStyle'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V7) -> case V7 of {'Idris.REPL.Opts.MkREPLOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V12 end end))))(V6)) end.
'un--getEvalTiming'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V7) -> case V7 of {'Idris.REPL.Opts.MkREPLOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V10 end end))))(V6)) end.
'un--getCurrentElabSource'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V7) -> case V7 of {'Idris.REPL.Opts.MkREPLOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V17 end end))))(V6)) end.
'un--getConsoleWidth'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V7) -> case V7 of {'Idris.REPL.Opts.MkREPLOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V22 end end))))(V6)) end.
'un--getColor'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V7) -> case V7 of {'Idris.REPL.Opts.MkREPLOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V23 end end))))(V6)) end.
'un--getCodegen'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), ((begin (V44 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V41, V42, V43)) end end end end end), fun (V45) -> fun (V46) -> ((((V44('erased'))('erased'))(V45))(V46)) end end end((begin (V36 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> {'Prelude.Types.Right', (V32(V35))} end end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end(fun (V8) -> ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V11, V12)) end end}, V1, case V8 of {'Idris.REPL.Opts.MkREPLOpts', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> V26 end)) end))))(V7)) end.
'un--defaultOpts'(V0, V1, V2) -> {'Idris.REPL.Opts.MkREPLOpts', 0, 1, 0, V0, ('nested--10205-8632--in--un--litStyle'(V2, V1, V0, V0)), <<""/utf8>>, <<"vim"/utf8>>, {'Prelude.Types.Nothing'}, V1, <<""/utf8>>, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, V2, {'Prelude.Types.Nothing'}, 1, 1}.
