-module('Idris.Idris2.Core.Case.CaseTree').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7486-9465--in--un--getSet'/5,
  'nested--7486-9464--in--un--getAltSets'/5,
  'nested--7486-9463--in--un--getAltSet'/5,
  'dn--un--weaken_Weaken_CaseTree'/1,
  'dn--un--weakenNs_Weaken_CaseTree'/2,
  'dn--un--trimNS_StripNamespace_(CaseTree $vars)'/2,
  'dn--un--trimNS_StripNamespace_(CaseAlt $vars)'/2,
  'dn--un--show_Show_Pat'/1,
  'dn--un--show_Show_(CaseTree $vars)'/2,
  'dn--un--show_Show_(CaseAlt $vars)'/2,
  'dn--un--showPrec_Show_Pat'/2,
  'dn--un--showPrec_Show_(CaseTree $vars)'/3,
  'dn--un--showPrec_Show_(CaseAlt $vars)'/3,
  'dn--un--restoreNS_StripNamespace_(CaseTree $vars)'/2,
  'dn--un--restoreNS_StripNamespace_(CaseAlt $vars)'/2,
  'dn--un--pretty_Pretty_IdrisSyntax_Pat'/1,
  'dn--un--prettyPrec_Pretty_IdrisSyntax_Pat'/2,
  'dn--un--__Impl_Weaken_CaseTree'/0,
  'dn--un--__Impl_StripNamespace_(CaseTree $vars)'/0,
  'dn--un--__Impl_StripNamespace_(CaseAlt $vars)'/0,
  'dn--un--__Impl_Show_Pat'/0,
  'dn--un--__Impl_Show_(CaseTree $vars)'/1,
  'dn--un--__Impl_Show_(CaseAlt $vars)'/1,
  'dn--un--__Impl_Pretty_IdrisSyntax_Pat'/0,
  'un--showCT'/3,
  'un--showCA'/3,
  'un--mkTerm'/2,
  'un--measureAlts'/1,
  'un--measure'/1,
  'un--isPConst'/1,
  'un--isDefault'/1,
  'un--insertCaseNames'/3,
  'un--insertCaseAltNames'/3,
  'un--getRefs'/2,
  'un--getNames'/3,
  'un--getMetas'/1,
  'un--eqTree'/2,
  'un--eqAlt'/2,
  'un--addRefs'/3
]).
'nested--7486-9465--in--un--getSet'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Case.CaseTree.Case', V5, V6, V7, V8} -> ('nested--7486-9464--in--un--getAltSets'(V0, V1, V2, V3, V8)); {'Core.Case.CaseTree.STerm', V9, V10} -> (((V2('erased'))(V3))(V10)); {'Core.Case.CaseTree.Unmatched', V11} -> V3; {'Core.Case.CaseTree.Impossible'} -> V3 end.
'nested--7486-9464--in--un--getAltSets'(V0, V1, V2, V3, V4) -> case V4 of [] -> V3; [E0 | E1] -> (fun (V5, V6) -> ('nested--7486-9464--in--un--getAltSets'(V0, V1, V2, ('nested--7486-9463--in--un--getAltSet'(V0, V1, V2, V3, V5)), V6)) end(E0, E1)) end.
'nested--7486-9463--in--un--getAltSet'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Case.CaseTree.ConCase', V5, V6, V7, V8} -> ('nested--7486-9465--in--un--getSet'(V0, V1, V2, V3, V8)); {'Core.Case.CaseTree.DelayCase', V9, V10, V11} -> ('nested--7486-9465--in--un--getSet'(V0, V1, V2, V3, V11)); {'Core.Case.CaseTree.ConstCase', V12, V13} -> ('nested--7486-9465--in--un--getSet'(V0, V1, V2, V3, V13)); {'Core.Case.CaseTree.DefaultCase', V14} -> ('nested--7486-9465--in--un--getSet'(V0, V1, V2, V3, V14)) end.
'dn--un--weaken_Weaken_CaseTree'(V0) -> ('dn--un--weakenNs_Weaken_CaseTree'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()))), V0)).
'dn--un--weakenNs_Weaken_CaseTree'(V0, V1) -> ('un--insertCaseNames'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)).
'dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseTree.Case', V2, V3, V4, V5} -> {'Core.Case.CaseTree.Case', V2, V3, ('Idris.Idris2.Core.TT':'dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V4)), ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> ('dn--un--trimNS_StripNamespace_(CaseAlt $vars)'(V0, V6)) end))(V5))}; {'Core.Case.CaseTree.STerm', V14, V15} -> {'Core.Case.CaseTree.STerm', V14, ('Idris.Idris2.Core.TT':'dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V15))}; _ -> V1 end.
'dn--un--trimNS_StripNamespace_(CaseAlt $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseTree.ConCase', V2, V3, V4, V5} -> {'Core.Case.CaseTree.ConCase', V2, V3, V4, ('dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V5))}; {'Core.Case.CaseTree.DelayCase', V6, V7, V8} -> {'Core.Case.CaseTree.DelayCase', V6, V7, ('dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V8))}; {'Core.Case.CaseTree.ConstCase', V9, V10} -> {'Core.Case.CaseTree.ConstCase', V9, ('dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V10))}; {'Core.Case.CaseTree.DefaultCase', V11} -> {'Core.Case.CaseTree.DefaultCase', ('dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V11))} end.
'dn--un--show_Show_Pat'(V0) -> case V0 of {'Core.Case.CaseTree.PAs', V1, V2, V3} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary, <<<<"@("/utf8>>/binary, <<('dn--un--show_Show_Pat'(V3))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>; {'Core.Case.CaseTree.PCon', V4, V5, V6, V7, V8} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V9) -> ('dn--un--show_Show_Pat'(V9)) end, fun (V10) -> fun (V11) -> ('dn--un--showPrec_Show_Pat'(V10, V11)) end end}, V8))/binary>>/binary>>/binary>>/binary>>; {'Core.Case.CaseTree.PTyCon', V12, V13, V14, V15} -> <<<<"<TyCon>"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V16) -> ('dn--un--show_Show_Pat'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--showPrec_Show_Pat'(V17, V18)) end end}, V15))/binary>>/binary>>/binary>>; {'Core.Case.CaseTree.PConst', V19, V20} -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V20)); {'Core.Case.CaseTree.PArrow', V21, V22, V23, V24} -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_Pat'(V23))/binary, <<<<" -> "/utf8>>/binary, <<('dn--un--show_Show_Pat'(V24))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Core.Case.CaseTree.PDelay', V25, V26, V27, V28} -> <<<<"(Delay "/utf8>>/binary, <<('dn--un--show_Show_Pat'(V28))/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.Case.CaseTree.PLoc', V29, V30} -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V30)); {'Core.Case.CaseTree.PUnmatchable', V31, V32} -> <<<<".("/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V32))/binary, <<")"/utf8>>/binary>>/binary>> end.
'dn--un--show_Show_(CaseTree $vars)'(V0, V1) -> ('un--showCT'(V0, <<""/utf8>>, V1)).
'dn--un--show_Show_(CaseAlt $vars)'(V0, V1) -> ('un--showCA'(V0, <<""/utf8>>, V1)).
'dn--un--showPrec_Show_Pat'(V0, V1) -> ('dn--un--show_Show_Pat'(V1)).
'dn--un--showPrec_Show_(CaseTree $vars)'(V0, V1, V2) -> ('dn--un--show_Show_(CaseTree $vars)'(V0, V2)).
'dn--un--showPrec_Show_(CaseAlt $vars)'(V0, V1, V2) -> ('dn--un--show_Show_(CaseAlt $vars)'(V0, V2)).
'dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseTree.Case', V2, V3, V4, V5} -> {'Core.Case.CaseTree.Case', V2, V3, ('Idris.Idris2.Core.TT':'dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V4)), ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> ('dn--un--restoreNS_StripNamespace_(CaseAlt $vars)'(V0, V6)) end))(V5))}; {'Core.Case.CaseTree.STerm', V14, V15} -> {'Core.Case.CaseTree.STerm', V14, ('Idris.Idris2.Core.TT':'dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V15))}; _ -> V1 end.
'dn--un--restoreNS_StripNamespace_(CaseAlt $vars)'(V0, V1) -> case V1 of {'Core.Case.CaseTree.ConCase', V2, V3, V4, V5} -> {'Core.Case.CaseTree.ConCase', V2, V3, V4, ('dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V5))}; {'Core.Case.CaseTree.DelayCase', V6, V7, V8} -> {'Core.Case.CaseTree.DelayCase', V6, V7, ('dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V8))}; {'Core.Case.CaseTree.ConstCase', V9, V10} -> {'Core.Case.CaseTree.ConstCase', V9, ('dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V10))}; {'Core.Case.CaseTree.DefaultCase', V11} -> {'Core.Case.CaseTree.DefaultCase', ('dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V11))} end.
'dn--un--pretty_Pretty_IdrisSyntax_Pat'(V0) -> ('dn--un--prettyPrec_Pretty_IdrisSyntax_Pat'({'Prelude.Show.Open'}, V0)).
'dn--un--prettyPrec_Pretty_IdrisSyntax_Pat'(V0, V1) -> case V1 of {'Core.Case.CaseTree.PAs', V2, V3, V4} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--prettyPrec_Pretty_Void_Name'(V6, V7)) end end}, V3)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Idris.Pretty.Annotations':'un--keyword'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V8) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V9)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V10) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V10)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V11) -> fun (V12) -> case case (V11 =:= V12) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V8)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> [V14 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V15))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V8)); 0 -> V8 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> [V17 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V18))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V19) -> fun (V20) -> case case (V19 =:= V20) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V8)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V21} -> case V21 of {'Builtin.MkPair', V22, V23} -> [V22 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V23))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V8)); 0 -> V8 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V24} -> case V24 of {'Builtin.MkPair', V25, V26} -> [V25 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V26))] end end)))))))) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V29) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V29)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V30) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V30)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V31) -> fun (V32) -> case case (V31 =:= V32) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V28)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V33} -> case V33 of {'Builtin.MkPair', V34, V35} -> [V34 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V35))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V28)); 0 -> V28 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V36} -> case V36 of {'Builtin.MkPair', V37, V38} -> [V37 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V38))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V39) -> fun (V40) -> case case (V39 =:= V40) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V28)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V41} -> case V41 of {'Builtin.MkPair', V42, V43} -> [V42 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V43))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V28)); 0 -> V28 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V44} -> case V44 of {'Builtin.MkPair', V45, V46} -> [V45 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V46))] end end)))))))) end end}, <<"@"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('dn--un--pretty_Pretty_IdrisSyntax_Pat'(V4)))))))); {'Core.Case.CaseTree.PCon', V47, V48, V49, V50, V51} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parenthesise'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--prettyPrec_Pretty_Void_Name'(V53, V54)) end end}, V48)) | ((begin (V60 = fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V58, V59)) end end end end), fun (V61) -> fun (V62) -> ((((V60('erased'))('erased'))(V61))(V62)) end end end(fun (V55) -> ('dn--un--prettyPrec_Pretty_IdrisSyntax_Pat'({'Prelude.Show.App'}, V55)) end))(V51))])))); {'Core.Case.CaseTree.PTyCon', V63, V64, V65, V66} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parenthesise'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Name':'dn--un--prettyPrec_Pretty_Void_Name'(V68, V69)) end end}, V64)) | ((begin (V75 = fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V73, V74)) end end end end), fun (V76) -> fun (V77) -> ((((V75('erased'))('erased'))(V76))(V77)) end end end(fun (V70) -> ('dn--un--prettyPrec_Pretty_IdrisSyntax_Pat'({'Prelude.Show.App'}, V70)) end))(V66))])))); {'Core.Case.CaseTree.PConst', V78, V79} -> ('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_IdrisSyntax_Constant'(V79)); {'Core.Case.CaseTree.PArrow', V80, V81, V82, V83} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parenthesise'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('dn--un--pretty_Pretty_IdrisSyntax_Pat'(V82)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty.Annotations':'un--arrow'()), ('dn--un--pretty_Pretty_IdrisSyntax_Pat'(V83)))))))); {'Core.Case.CaseTree.PDelay', V84, V85, V86, V87} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Delay"/utf8>>)), ('dn--un--pretty_Pretty_IdrisSyntax_Pat'(V87)))))); {'Core.Case.CaseTree.PLoc', V88, V89} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V90)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--prettyPrec_Pretty_Void_Name'(V91, V92)) end end}, V89)); {'Core.Case.CaseTree.PUnmatchable', V93, V94} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Idris.Pretty.Annotations':'un--keyword'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V95) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V96) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V96)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V97) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V97)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V98) -> fun (V99) -> case case (V98 =:= V99) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V95)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V100} -> case V100 of {'Builtin.MkPair', V101, V102} -> [V101 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V102))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V95)); 0 -> V95 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V103} -> case V103 of {'Builtin.MkPair', V104, V105} -> [V104 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V105))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V106) -> fun (V107) -> case case (V106 =:= V107) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V95)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V108} -> case V108 of {'Builtin.MkPair', V109, V110} -> [V109 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V110))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V95)); 0 -> V95 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V111} -> case V111 of {'Builtin.MkPair', V112, V113} -> [V112 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V113))] end end)))))))) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V116) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V116)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V117) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V117)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V118) -> fun (V119) -> case case (V118 =:= V119) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V115)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V120} -> case V120 of {'Builtin.MkPair', V121, V122} -> [V121 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V122))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V115)); 0 -> V115 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V123} -> case V123 of {'Builtin.MkPair', V124, V125} -> [V124 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V125))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V126) -> fun (V127) -> case case (V126 =:= V127) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V115)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V128} -> case V128 of {'Builtin.MkPair', V129, V130} -> [V129 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V130))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V115)); 0 -> V115 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V131} -> case V131 of {'Builtin.MkPair', V132, V133} -> [V132 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V133))] end end)))))))) end end}, <<"."/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V134) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V134)) end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'([], V135, V136)) end end}, V94)))))) end.
'dn--un--__Impl_Weaken_CaseTree'() -> {'Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_CaseTree'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_CaseTree'(V5, V6)) end end end end}.
'dn--un--__Impl_StripNamespace_(CaseTree $vars)'() -> {'Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V2, V3)) end end}.
'dn--un--__Impl_StripNamespace_(CaseAlt $vars)'() -> {'Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_(CaseAlt $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_(CaseAlt $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Show_Pat'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Pat'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Pat'(V1, V2)) end end}.
'dn--un--__Impl_Show_(CaseTree $vars)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(CaseTree $vars)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(CaseTree $vars)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(CaseAlt $vars)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(CaseAlt $vars)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(CaseAlt $vars)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Pretty_IdrisSyntax_Pat'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_IdrisSyntax_Pat'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_IdrisSyntax_Pat'(V1, V2)) end end}.
'un--showCT'(V0, V1, V2) -> case V2 of {'Core.Case.CaseTree.Case', V3, V4, V5, V6} -> <<<<"case "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary, <<<<"["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4))/binary, <<<<"] : "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V5))/binary, <<<<" of"/utf8>>/binary, <<<<"\x{a}"/utf8>>/binary, <<V1/binary, <<<<" { "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<<<"\x{a}"/utf8>>/binary, <<V1/binary, <<" | "/utf8>>/binary>>/binary>>, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('un--showCA'(V0, <<<<"  "/utf8>>/binary, V1/binary>>, V7)) end))(V6))))/binary, <<<<"\x{a}"/utf8>>/binary, <<V1/binary, <<" }"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Case.CaseTree.STerm', V15, V16} -> <<<<"["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15))/binary, <<<<"] "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V16))/binary>>/binary>>/binary>>; {'Core.Case.CaseTree.Unmatched', V17} -> <<<<"Error: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V17))/binary>>; {'Core.Case.CaseTree.Impossible'} -> <<"Impossible"/utf8>> end.
'un--showCA'(V0, V1, V2) -> case V2 of {'Core.Case.CaseTree.ConCase', V3, V4, V5, V6} -> <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end))([V3 | V5]))))/binary, <<<<" => "/utf8>>/binary, ('un--showCT'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V0)), V1, V6))/binary>>/binary>>; {'Core.Case.CaseTree.DelayCase', V15, V16, V17} -> <<<<"Delay "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16))/binary, <<<<" => "/utf8>>/binary, ('un--showCT'([V15 | [V16 | V0]], V1, V17))/binary>>/binary>>/binary>>; {'Core.Case.CaseTree.ConstCase', V18, V19} -> <<<<"Constant "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V18))/binary, <<<<" => "/utf8>>/binary, ('un--showCT'(V0, V1, V19))/binary>>/binary>>/binary>>; {'Core.Case.CaseTree.DefaultCase', V20} -> <<<<"_ => "/utf8>>/binary, ('un--showCT'(V0, V1, V20))/binary>> end.
'un--mkTerm'(V0, V1) -> case V1 of {'Core.Case.CaseTree.PAs', V2, V3, V4} -> ('un--mkTerm'(V0, V4)); {'Core.Case.CaseTree.PCon', V5, V6, V7, V8, V9} -> ('Idris.Idris2.Core.TT':'un--apply'(V5, {'Core.TT.Ref', V5, {'Core.TT.DataCon', V7, V8}, V6}, ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('un--mkTerm'(V0, V10)) end))(V9)))); {'Core.Case.CaseTree.PTyCon', V18, V19, V20, V21} -> ('Idris.Idris2.Core.TT':'un--apply'(V18, {'Core.TT.Ref', V18, {'Core.TT.TyCon', 0, V20}, V19}, ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> ('un--mkTerm'(V0, V22)) end))(V21)))); {'Core.Case.CaseTree.PConst', V30, V31} -> {'Core.TT.PrimVal', V30, V31}; {'Core.Case.CaseTree.PArrow', V32, V33, V34, V35} -> {'Core.TT.Bind', V32, V33, {'Core.TT.Pi', V32, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, ('un--mkTerm'(V0, V34))}, ('un--mkTerm'([V33 | V0], V35))}; {'Core.Case.CaseTree.PDelay', V36, V37, V38, V39} -> {'Core.TT.TDelay', V36, V37, ('un--mkTerm'(V0, V38)), ('un--mkTerm'(V0, V39))}; {'Core.Case.CaseTree.PLoc', V40, V41} -> case ('Idris.Idris2.Core.TT':'un--isVar'(V41, V0)) of {'Prelude.Types.Just', V42} -> begin (V43 = V42), {'Core.TT.Local', V40, {'Prelude.Types.Nothing'}, V43} end; _ -> {'Core.TT.Ref', V40, {'Core.TT.Bound'}, V41} end; {'Core.Case.CaseTree.PUnmatchable', V44, V45} -> ('Idris.Idris2.Core.TT':'un--embed'(V45)) end.
'un--measureAlts'(V0) -> case V0 of {'Core.Case.CaseTree.ConCase', V1, V2, V3, V4} -> (('un--measure'(V4)) + 1); {'Core.Case.CaseTree.DelayCase', V5, V6, V7} -> (('un--measure'(V7)) + 1); {'Core.Case.CaseTree.ConstCase', V8, V9} -> (('un--measure'(V9)) + 1); {'Core.Case.CaseTree.DefaultCase', V10} -> (('un--measure'(V10)) + 1) end.
'un--measure'(V0) -> case V0 of {'Core.Case.CaseTree.Case', V1, V2, V3, V4} -> ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Prelude.Num.MkNum', fun (V5) -> fun (V6) -> (V5 + V6) end end, fun (V7) -> fun (V8) -> (V7 * V8) end end, fun (V9) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V9)) end}, {'Prelude.Interfaces.MkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V25, V26, V27, V28)) end end end end end end end, fun (V29) -> fun (V30) -> V30 end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V33, V34, V35)) end end end end end}, ((begin (V41 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V39, V40)) end end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end(fun (V36) -> ('un--measureAlts'(V36)) end))(V4)))); {'Core.Case.CaseTree.STerm', V44, V45} -> 0; {'Core.Case.CaseTree.Unmatched', V46} -> 0; {'Core.Case.CaseTree.Impossible'} -> 0 end.
'un--isPConst'(V0) -> case V0 of {'Core.Case.CaseTree.PConst', V1, V2} -> {'Prelude.Types.Just', V2}; _ -> {'Prelude.Types.Nothing'} end.
'un--isDefault'(V0) -> case V0 of {'Core.Case.CaseTree.DefaultCase', V1} -> 1; _ -> 0 end.
'un--insertCaseNames'(V0, V1, V2) -> case V2 of {'Core.Case.CaseTree.Case', V3, V4, V5, V6} -> begin (V7 = ('Idris.Idris2.Core.TT':'un--insertNVarNames'(V0, V1, V4))), {'Core.Case.CaseTree.Case', V3, V7, ('Idris.Idris2.Core.TT':'un--insertNames'(V0, V1, V5)), ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('un--insertCaseAltNames'(V0, V1, V8)) end))(V6))} end; {'Core.Case.CaseTree.STerm', V16, V17} -> {'Core.Case.CaseTree.STerm', V16, ('Idris.Idris2.Core.TT':'un--insertNames'(V0, V1, V17))}; {'Core.Case.CaseTree.Unmatched', V18} -> {'Core.Case.CaseTree.Unmatched', V18}; {'Core.Case.CaseTree.Impossible'} -> {'Core.Case.CaseTree.Impossible'} end.
'un--insertCaseAltNames'(V0, V1, V2) -> case V2 of {'Core.Case.CaseTree.ConCase', V3, V4, V5, V6} -> {'Core.Case.CaseTree.ConCase', V3, V4, V5, ('un--insertCaseNames'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V5)), V0)), V1, V6))}; {'Core.Case.CaseTree.DelayCase', V7, V8, V9} -> {'Core.Case.CaseTree.DelayCase', V7, V8, ('un--insertCaseNames'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)))), V1, V9))}; {'Core.Case.CaseTree.ConstCase', V10, V11} -> {'Core.Case.CaseTree.ConstCase', V10, ('un--insertCaseNames'(V0, V1, V11))}; {'Core.Case.CaseTree.DefaultCase', V12} -> {'Core.Case.CaseTree.DefaultCase', ('un--insertCaseNames'(V0, V1, V12))} end.
'un--getRefs'(V0, V1) -> ('un--getNames'(fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.TT':'un--addRefs'(0, V0, V3, V4)) end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V1)).
'un--getNames'(V0, V1, V2) -> ('nested--7486-9465--in--un--getSet'(V2, V1, V0, V1, V2)).
'un--getMetas'(V0) -> ('un--getNames'(fun (V1) -> fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.TT':'un--addMetas'(0, V2, V3)) end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V0)).
'un--eqTree'(V0, V1) -> case V0 of {'Core.Case.CaseTree.Case', V2, V3, V4, V5} -> case V1 of {'Core.Case.CaseTree.Case', V6, V7, V8, V9} -> case case (V3 =:= V7) of 'false' -> 0; _ -> 1 end of 1 -> case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V5)) =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V9))) of 'false' -> 0; _ -> 1 end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V10, V11)) end end, 1}, fun (V12) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V13) -> fun (V14) -> ('un--eqAlt'(V13, V14)) end end, V12)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V5, V9)))); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Core.Case.CaseTree.STerm', V15, V16} -> case V1 of {'Core.Case.CaseTree.STerm', V17, V18} -> ('Idris.Idris2.Core.TT':'un--eqTerm'(V16, V18)); _ -> 0 end; {'Core.Case.CaseTree.Unmatched', V19} -> case V1 of {'Core.Case.CaseTree.Unmatched', V20} -> 1; _ -> 0 end; {'Core.Case.CaseTree.Impossible'} -> case V1 of {'Core.Case.CaseTree.Impossible'} -> 1; _ -> 0 end; _ -> 0 end.
'un--eqAlt'(V0, V1) -> case V0 of {'Core.Case.CaseTree.ConCase', V2, V3, V4, V5} -> case V1 of {'Core.Case.CaseTree.ConCase', V6, V7, V8, V9} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, V6)) of 1 -> ('un--eqTree'(V5, V9)); 0 -> 0 end; _ -> 0 end; {'Core.Case.CaseTree.DelayCase', V10, V11, V12} -> case V1 of {'Core.Case.CaseTree.DelayCase', V13, V14, V15} -> ('un--eqTree'(V12, V15)); _ -> 0 end; {'Core.Case.CaseTree.ConstCase', V16, V17} -> case V1 of {'Core.Case.CaseTree.ConstCase', V18, V19} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V16, V18)) of 1 -> ('un--eqTree'(V17, V19)); 0 -> 0 end; _ -> 0 end; {'Core.Case.CaseTree.DefaultCase', V20} -> case V1 of {'Core.Case.CaseTree.DefaultCase', V21} -> ('un--eqTree'(V20, V21)); _ -> 0 end; _ -> 0 end.
'un--addRefs'(V0, V1, V2) -> ('un--getNames'(fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.TT':'un--addRefs'(0, V0, V4, V5)) end end end, V1, V2)).
