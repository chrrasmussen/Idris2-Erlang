-module('Idris.Idris2.Compiler.ES.ToAst').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7617-7884--in--un--go'/5,
  'un--tag'/2,
  'un--stmt'/3,
  'un--liftMinimal'/2,
  'un--liftFun'/2,
  'un--liftArgsVect'/2,
  'un--liftArgs'/2,
  'un--liftArg'/2,
  'un--lift'/4,
  'un--lambda'/3,
  'un--integerArith'/1,
  'un--getInteger'/1,
  'un--constAlt'/3,
  'un--conAlt'/4,
  'un--assign'/2
]).
'nested--7617-7884--in--un--go'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.NmLam', V5, V6, V7} -> ('nested--7617-7884--in--un--go'(V0, V1, V2, [V6 | V3], V7)); _ -> begin (V9 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V8) -> ('Idris.Idris2.Compiler.ES.State':'un--registerLocal'(V2, V8)) end, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V3)), []))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V33 = begin (V14 = ('un--stmt'(V2, {'Compiler.ES.Ast.Returns'}, V4))), ((begin (V30 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V27, V28, V29)) end end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end((begin (V22 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> {'Prelude.Types.Right', (V18(V21))} end end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V15) -> {'Compiler.ES.Ast.ELam', V13, V15} end))))(V14)) end), V33 end(V10)) end end end end end.
'un--tag'(V0, V1) -> case V1 of {'Prelude.Types.Nothing'} -> {'Compiler.ES.Ast.TypeCon', V0}; {'Prelude.Types.Just', V2} -> {'Compiler.ES.Ast.DataCon', V2, V0} end.
'un--stmt'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.NmLocal', V3, V4} -> begin (V5 = ('Idris.Idris2.Compiler.ES.State':'un--getOrRegisterLocal'(V0, V4))), ((begin (V21 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end((begin (V13 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> {'Prelude.Types.Right', (V9(V12))} end end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V6) -> ('un--assign'(V1, {'Compiler.ES.Ast.EMinimal', V6})) end))))(V5)) end; {'Core.CompileExpr.NmRef', V24, V25} -> begin (V26 = ('Idris.Idris2.Compiler.ES.State':'un--getOrRegisterRef'(V0, V25))), ((begin (V42 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V39, V40, V41)) end end end end end), fun (V43) -> fun (V44) -> ((((V42('erased'))('erased'))(V43))(V44)) end end end((begin (V34 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> {'Prelude.Types.Right', (V30(V33))} end end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V27) -> ('un--assign'(V1, {'Compiler.ES.Ast.EMinimal', {'Compiler.ES.Ast.MVar', V27}})) end))))(V26)) end; {'Core.CompileExpr.NmLam', V45, V46, V47} -> begin (V48 = ('un--lambda'(V0, V46, V47))), ((begin (V64 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V61, V62, V63)) end end end end end), fun (V65) -> fun (V66) -> ((((V64('erased'))('erased'))(V65))(V66)) end end end((begin (V56 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> {'Prelude.Types.Right', (V52(V55))} end end end end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end(fun (V49) -> ('un--assign'(V1, V49)) end))))(V48)) end; {'Core.CompileExpr.NmLet', V67, V68, V69, V70} -> begin (V71 = ('Idris.Idris2.Compiler.ES.State':'un--nextLocal'(V0))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V95 = begin (V76 = ('un--stmt'(V0, {'Compiler.ES.Ast.ErrorWithout', V75}, V69))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V94 = begin (V81 = ('Idris.Idris2.Compiler.ES.State':'un--addLocal'(V0, V68, {'Compiler.ES.Ast.MVar', V75}))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V93 = begin (V86 = ('un--stmt'(V0, V1, V70))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V92 = fun (V91) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'([('Idris.Idris2.Compiler.ES.Ast':'un--declare'(V75, V80)) | []], V90))} end), V92 end(V87)) end end end end), V93 end(V82)) end end end end), V94 end(V77)) end end end end), V95 end(V72)) end end end end; {'Core.CompileExpr.NmApp', V96, V97, V98} -> begin (V99 = ('un--liftFun'(V0, V97))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V115 = case V103 of {'Builtin.MkPair', V104, V105} -> begin (V106 = ('un--liftArgs'(V0, V98))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V114 = fun (V111) -> case V110 of {'Builtin.MkPair', V112, V113} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V104, V112)), ('un--assign'(V1, {'Compiler.ES.Ast.EApp', V105, V113}))))} end end), V114 end(V107)) end end end end end), V115 end(V100)) end end end end; {'Core.CompileExpr.NmCon', V116, V117, V118, V119, V120} -> begin (V121 = ('un--liftArgs'(V0, V120))), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V129 = fun (V126) -> case V125 of {'Builtin.MkPair', V127, V128} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V127, ('un--assign'(V1, {'Compiler.ES.Ast.ECon', ('un--tag'(V117, V119)), V118, V128}))))} end end), V129 end(V122)) end end end end; {'Core.CompileExpr.NmOp', V130, V131, V132, V133} -> begin (V134 = {'Core.CompileExpr.NmOp', V130, V131, V132, V133}), case ('un--integerArith'(V134)) of {'Prelude.Types.Just', V135} -> fun (V136) -> {'Prelude.Types.Right', ('un--assign'(V1, {'Compiler.ES.Ast.EPrimVal', {'Core.TT.BI', V135}}))} end; {'Prelude.Types.Nothing'} -> begin (V137 = ('un--liftArgsVect'(V0, V133))), fun (V138) -> begin (V139 = (V137(V138))), case V139 of {'Prelude.Types.Left', V140} -> {'Prelude.Types.Left', V140}; {'Prelude.Types.Right', V141} -> (begin (V145 = fun (V142) -> case V141 of {'Builtin.MkPair', V143, V144} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V143, ('un--assign'(V1, {'Compiler.ES.Ast.EOp', V132, V144}))))} end end), V145 end(V138)) end end end end end end; {'Core.CompileExpr.NmExtPrim', V146, V147, V148} -> begin (V149 = ('un--liftArgs'(V0, V148))), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V157 = fun (V154) -> case V153 of {'Builtin.MkPair', V155, V156} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V155, ('un--assign'(V1, {'Compiler.ES.Ast.EExtPrim', V147, V156}))))} end end), V157 end(V150)) end end end end; {'Core.CompileExpr.NmForce', V158, V159, V160} -> begin (V161 = ('un--liftFun'(V0, V160))), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V169 = fun (V166) -> case V165 of {'Builtin.MkPair', V167, V168} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V167, ('un--assign'(V1, {'Compiler.ES.Ast.EApp', V168, []}))))} end end), V169 end(V162)) end end end end; {'Core.CompileExpr.NmDelay', V170, V171, V172} -> begin (V173 = ('un--stmt'(V0, {'Compiler.ES.Ast.Returns'}, V172))), ((begin (V189 = fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V186, V187, V188)) end end end end end), fun (V190) -> fun (V191) -> ((((V189('erased'))('erased'))(V190))(V191)) end end end((begin (V181 = fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> {'Prelude.Types.Right', (V177(V180))} end end end end end), fun (V182) -> fun (V183) -> ((((V181('erased'))('erased'))(V182))(V183)) end end end(fun (V174) -> ('un--assign'(V1, {'Compiler.ES.Ast.ELam', [], V174})) end))))(V173)) end; {'Core.CompileExpr.NmConCase', V192, V193, V194, V195} -> case V194 of [E0 | E1] -> (fun (V196, V197) -> case V197 of [] -> case V195 of {'Prelude.Types.Nothing'} -> begin (V198 = ('un--liftMinimal'(V0, V193))), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V234 = case V202 of {'Builtin.MkPair', V203, V204} -> begin (V227 = begin (V205 = ('un--conAlt'(V0, V1, V204, V196))), ((begin (V224 = fun (V219) -> fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V221, V222, V223)) end end end end end), fun (V225) -> fun (V226) -> ((((V224('erased'))('erased'))(V225))(V226)) end end end((begin (V216 = fun (V210) -> fun (V211) -> fun (V212) -> fun (V213) -> case V213 of {'Prelude.Types.Left', V214} -> {'Prelude.Types.Left', V214}; {'Prelude.Types.Right', V215} -> {'Prelude.Types.Right', (V212(V215))} end end end end end), fun (V217) -> fun (V218) -> ((((V216('erased'))('erased'))(V217))(V218)) end end end(fun (V206) -> case V206 of {'Compiler.ES.Ast.MkEConAlt', V207, V208, V209} -> V209 end end))))(V205)) end), fun (V228) -> begin (V229 = (V227(V228))), case V229 of {'Prelude.Types.Left', V230} -> {'Prelude.Types.Left', V230}; {'Prelude.Types.Right', V231} -> (begin (V233 = fun (V232) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V203, V231))} end), V233 end(V228)) end end end end end), V234 end(V199)) end end end end; _ -> begin (V235 = ('un--liftMinimal'(V0, V193))), fun (V236) -> begin (V237 = (V235(V236))), case V237 of {'Prelude.Types.Left', V238} -> {'Prelude.Types.Left', V238}; {'Prelude.Types.Right', V239} -> (begin (V277 = case V239 of {'Builtin.MkPair', V240, V241} -> begin (V243 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V242) -> ('un--conAlt'(V0, V1, V241, V242)) end, V194, []))), fun (V244) -> begin (V245 = (V243(V244))), case V245 of {'Prelude.Types.Left', V246} -> {'Prelude.Types.Left', V246}; {'Prelude.Types.Right', V247} -> (begin (V276 = begin (V269 = case V195 of {'Prelude.Types.Nothing'} -> fun (V248) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V249} -> begin (V250 = ('un--stmt'(V0, V1, V249))), ((begin (V266 = fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V263, V264, V265)) end end end end end), fun (V267) -> fun (V268) -> ((((V266('erased'))('erased'))(V267))(V268)) end end end((begin (V258 = fun (V252) -> fun (V253) -> fun (V254) -> fun (V255) -> case V255 of {'Prelude.Types.Left', V256} -> {'Prelude.Types.Left', V256}; {'Prelude.Types.Right', V257} -> {'Prelude.Types.Right', (V254(V257))} end end end end end), fun (V259) -> fun (V260) -> ((((V258('erased'))('erased'))(V259))(V260)) end end end(fun (V251) -> {'Prelude.Types.Just', V251} end))))(V250)) end end), fun (V270) -> begin (V271 = (V269(V270))), case V271 of {'Prelude.Types.Left', V272} -> {'Prelude.Types.Left', V272}; {'Prelude.Types.Right', V273} -> (begin (V275 = fun (V274) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V240, {'Compiler.ES.Ast.ConSwitch', V1, V241, V247, V273}))} end), V275 end(V270)) end end end end), V276 end(V244)) end end end end end), V277 end(V236)) end end end end end; _ -> begin (V278 = ('un--liftMinimal'(V0, V193))), fun (V279) -> begin (V280 = (V278(V279))), case V280 of {'Prelude.Types.Left', V281} -> {'Prelude.Types.Left', V281}; {'Prelude.Types.Right', V282} -> (begin (V320 = case V282 of {'Builtin.MkPair', V283, V284} -> begin (V286 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V285) -> ('un--conAlt'(V0, V1, V284, V285)) end, V194, []))), fun (V287) -> begin (V288 = (V286(V287))), case V288 of {'Prelude.Types.Left', V289} -> {'Prelude.Types.Left', V289}; {'Prelude.Types.Right', V290} -> (begin (V319 = begin (V312 = case V195 of {'Prelude.Types.Nothing'} -> fun (V291) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V292} -> begin (V293 = ('un--stmt'(V0, V1, V292))), ((begin (V309 = fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V306, V307, V308)) end end end end end), fun (V310) -> fun (V311) -> ((((V309('erased'))('erased'))(V310))(V311)) end end end((begin (V301 = fun (V295) -> fun (V296) -> fun (V297) -> fun (V298) -> case V298 of {'Prelude.Types.Left', V299} -> {'Prelude.Types.Left', V299}; {'Prelude.Types.Right', V300} -> {'Prelude.Types.Right', (V297(V300))} end end end end end), fun (V302) -> fun (V303) -> ((((V301('erased'))('erased'))(V302))(V303)) end end end(fun (V294) -> {'Prelude.Types.Just', V294} end))))(V293)) end end), fun (V313) -> begin (V314 = (V312(V313))), case V314 of {'Prelude.Types.Left', V315} -> {'Prelude.Types.Left', V315}; {'Prelude.Types.Right', V316} -> (begin (V318 = fun (V317) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V283, {'Compiler.ES.Ast.ConSwitch', V1, V284, V290, V316}))} end), V318 end(V313)) end end end end), V319 end(V287)) end end end end end), V320 end(V279)) end end end end end end(E0, E1)); [] -> case V195 of {'Prelude.Types.Just', V321} -> ('un--stmt'(V0, V1, V321)); _ -> begin (V322 = ('un--liftMinimal'(V0, V193))), fun (V323) -> begin (V324 = (V322(V323))), case V324 of {'Prelude.Types.Left', V325} -> {'Prelude.Types.Left', V325}; {'Prelude.Types.Right', V326} -> (begin (V364 = case V326 of {'Builtin.MkPair', V327, V328} -> begin (V330 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V329) -> ('un--conAlt'(V0, V1, V328, V329)) end, V194, []))), fun (V331) -> begin (V332 = (V330(V331))), case V332 of {'Prelude.Types.Left', V333} -> {'Prelude.Types.Left', V333}; {'Prelude.Types.Right', V334} -> (begin (V363 = begin (V356 = case V195 of {'Prelude.Types.Nothing'} -> fun (V335) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V336} -> begin (V337 = ('un--stmt'(V0, V1, V336))), ((begin (V353 = fun (V348) -> fun (V349) -> fun (V350) -> fun (V351) -> fun (V352) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V350, V351, V352)) end end end end end), fun (V354) -> fun (V355) -> ((((V353('erased'))('erased'))(V354))(V355)) end end end((begin (V345 = fun (V339) -> fun (V340) -> fun (V341) -> fun (V342) -> case V342 of {'Prelude.Types.Left', V343} -> {'Prelude.Types.Left', V343}; {'Prelude.Types.Right', V344} -> {'Prelude.Types.Right', (V341(V344))} end end end end end), fun (V346) -> fun (V347) -> ((((V345('erased'))('erased'))(V346))(V347)) end end end(fun (V338) -> {'Prelude.Types.Just', V338} end))))(V337)) end end), fun (V357) -> begin (V358 = (V356(V357))), case V358 of {'Prelude.Types.Left', V359} -> {'Prelude.Types.Left', V359}; {'Prelude.Types.Right', V360} -> (begin (V362 = fun (V361) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V327, {'Compiler.ES.Ast.ConSwitch', V1, V328, V334, V360}))} end), V362 end(V357)) end end end end), V363 end(V331)) end end end end end), V364 end(V323)) end end end end end; _ -> begin (V365 = ('un--liftMinimal'(V0, V193))), fun (V366) -> begin (V367 = (V365(V366))), case V367 of {'Prelude.Types.Left', V368} -> {'Prelude.Types.Left', V368}; {'Prelude.Types.Right', V369} -> (begin (V407 = case V369 of {'Builtin.MkPair', V370, V371} -> begin (V373 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V372) -> ('un--conAlt'(V0, V1, V371, V372)) end, V194, []))), fun (V374) -> begin (V375 = (V373(V374))), case V375 of {'Prelude.Types.Left', V376} -> {'Prelude.Types.Left', V376}; {'Prelude.Types.Right', V377} -> (begin (V406 = begin (V399 = case V195 of {'Prelude.Types.Nothing'} -> fun (V378) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V379} -> begin (V380 = ('un--stmt'(V0, V1, V379))), ((begin (V396 = fun (V391) -> fun (V392) -> fun (V393) -> fun (V394) -> fun (V395) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V393, V394, V395)) end end end end end), fun (V397) -> fun (V398) -> ((((V396('erased'))('erased'))(V397))(V398)) end end end((begin (V388 = fun (V382) -> fun (V383) -> fun (V384) -> fun (V385) -> case V385 of {'Prelude.Types.Left', V386} -> {'Prelude.Types.Left', V386}; {'Prelude.Types.Right', V387} -> {'Prelude.Types.Right', (V384(V387))} end end end end end), fun (V389) -> fun (V390) -> ((((V388('erased'))('erased'))(V389))(V390)) end end end(fun (V381) -> {'Prelude.Types.Just', V381} end))))(V380)) end end), fun (V400) -> begin (V401 = (V399(V400))), case V401 of {'Prelude.Types.Left', V402} -> {'Prelude.Types.Left', V402}; {'Prelude.Types.Right', V403} -> (begin (V405 = fun (V404) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V370, {'Compiler.ES.Ast.ConSwitch', V1, V371, V377, V403}))} end), V405 end(V400)) end end end end), V406 end(V374)) end end end end end), V407 end(V366)) end end end end end; {'Core.CompileExpr.NmConstCase', V408, V409, V410, V411} -> case V410 of [E2 | E3] -> (fun (V412, V413) -> case V413 of [] -> case V411 of {'Prelude.Types.Nothing'} -> begin (V414 = ('un--constAlt'(V0, V1, V412))), ((begin (V432 = fun (V427) -> fun (V428) -> fun (V429) -> fun (V430) -> fun (V431) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V429, V430, V431)) end end end end end), fun (V433) -> fun (V434) -> ((((V432('erased'))('erased'))(V433))(V434)) end end end((begin (V424 = fun (V418) -> fun (V419) -> fun (V420) -> fun (V421) -> case V421 of {'Prelude.Types.Left', V422} -> {'Prelude.Types.Left', V422}; {'Prelude.Types.Right', V423} -> {'Prelude.Types.Right', (V420(V423))} end end end end end), fun (V425) -> fun (V426) -> ((((V424('erased'))('erased'))(V425))(V426)) end end end(fun (V415) -> case V415 of {'Compiler.ES.Ast.MkEConstAlt', V416, V417} -> V417 end end))))(V414)) end; _ -> begin (V435 = ('un--liftArg'(V0, V409))), fun (V436) -> begin (V437 = (V435(V436))), case V437 of {'Prelude.Types.Left', V438} -> {'Prelude.Types.Left', V438}; {'Prelude.Types.Right', V439} -> (begin (V477 = case V439 of {'Builtin.MkPair', V440, V441} -> begin (V443 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V442) -> ('un--constAlt'(V0, V1, V442)) end, V410, []))), fun (V444) -> begin (V445 = (V443(V444))), case V445 of {'Prelude.Types.Left', V446} -> {'Prelude.Types.Left', V446}; {'Prelude.Types.Right', V447} -> (begin (V476 = begin (V469 = case V411 of {'Prelude.Types.Nothing'} -> fun (V448) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V449} -> begin (V450 = ('un--stmt'(V0, V1, V449))), ((begin (V466 = fun (V461) -> fun (V462) -> fun (V463) -> fun (V464) -> fun (V465) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V463, V464, V465)) end end end end end), fun (V467) -> fun (V468) -> ((((V466('erased'))('erased'))(V467))(V468)) end end end((begin (V458 = fun (V452) -> fun (V453) -> fun (V454) -> fun (V455) -> case V455 of {'Prelude.Types.Left', V456} -> {'Prelude.Types.Left', V456}; {'Prelude.Types.Right', V457} -> {'Prelude.Types.Right', (V454(V457))} end end end end end), fun (V459) -> fun (V460) -> ((((V458('erased'))('erased'))(V459))(V460)) end end end(fun (V451) -> {'Prelude.Types.Just', V451} end))))(V450)) end end), fun (V470) -> begin (V471 = (V469(V470))), case V471 of {'Prelude.Types.Left', V472} -> {'Prelude.Types.Left', V472}; {'Prelude.Types.Right', V473} -> (begin (V475 = fun (V474) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V440, {'Compiler.ES.Ast.ConstSwitch', V1, V441, V447, V473}))} end), V475 end(V470)) end end end end), V476 end(V444)) end end end end end), V477 end(V436)) end end end end end; _ -> begin (V478 = ('un--liftArg'(V0, V409))), fun (V479) -> begin (V480 = (V478(V479))), case V480 of {'Prelude.Types.Left', V481} -> {'Prelude.Types.Left', V481}; {'Prelude.Types.Right', V482} -> (begin (V520 = case V482 of {'Builtin.MkPair', V483, V484} -> begin (V486 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V485) -> ('un--constAlt'(V0, V1, V485)) end, V410, []))), fun (V487) -> begin (V488 = (V486(V487))), case V488 of {'Prelude.Types.Left', V489} -> {'Prelude.Types.Left', V489}; {'Prelude.Types.Right', V490} -> (begin (V519 = begin (V512 = case V411 of {'Prelude.Types.Nothing'} -> fun (V491) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V492} -> begin (V493 = ('un--stmt'(V0, V1, V492))), ((begin (V509 = fun (V504) -> fun (V505) -> fun (V506) -> fun (V507) -> fun (V508) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V506, V507, V508)) end end end end end), fun (V510) -> fun (V511) -> ((((V509('erased'))('erased'))(V510))(V511)) end end end((begin (V501 = fun (V495) -> fun (V496) -> fun (V497) -> fun (V498) -> case V498 of {'Prelude.Types.Left', V499} -> {'Prelude.Types.Left', V499}; {'Prelude.Types.Right', V500} -> {'Prelude.Types.Right', (V497(V500))} end end end end end), fun (V502) -> fun (V503) -> ((((V501('erased'))('erased'))(V502))(V503)) end end end(fun (V494) -> {'Prelude.Types.Just', V494} end))))(V493)) end end), fun (V513) -> begin (V514 = (V512(V513))), case V514 of {'Prelude.Types.Left', V515} -> {'Prelude.Types.Left', V515}; {'Prelude.Types.Right', V516} -> (begin (V518 = fun (V517) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V483, {'Compiler.ES.Ast.ConstSwitch', V1, V484, V490, V516}))} end), V518 end(V513)) end end end end), V519 end(V487)) end end end end end), V520 end(V479)) end end end end end end(E2, E3)); [] -> case V411 of {'Prelude.Types.Just', V521} -> ('un--stmt'(V0, V1, V521)); _ -> begin (V522 = ('un--liftArg'(V0, V409))), fun (V523) -> begin (V524 = (V522(V523))), case V524 of {'Prelude.Types.Left', V525} -> {'Prelude.Types.Left', V525}; {'Prelude.Types.Right', V526} -> (begin (V564 = case V526 of {'Builtin.MkPair', V527, V528} -> begin (V530 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V529) -> ('un--constAlt'(V0, V1, V529)) end, V410, []))), fun (V531) -> begin (V532 = (V530(V531))), case V532 of {'Prelude.Types.Left', V533} -> {'Prelude.Types.Left', V533}; {'Prelude.Types.Right', V534} -> (begin (V563 = begin (V556 = case V411 of {'Prelude.Types.Nothing'} -> fun (V535) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V536} -> begin (V537 = ('un--stmt'(V0, V1, V536))), ((begin (V553 = fun (V548) -> fun (V549) -> fun (V550) -> fun (V551) -> fun (V552) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V550, V551, V552)) end end end end end), fun (V554) -> fun (V555) -> ((((V553('erased'))('erased'))(V554))(V555)) end end end((begin (V545 = fun (V539) -> fun (V540) -> fun (V541) -> fun (V542) -> case V542 of {'Prelude.Types.Left', V543} -> {'Prelude.Types.Left', V543}; {'Prelude.Types.Right', V544} -> {'Prelude.Types.Right', (V541(V544))} end end end end end), fun (V546) -> fun (V547) -> ((((V545('erased'))('erased'))(V546))(V547)) end end end(fun (V538) -> {'Prelude.Types.Just', V538} end))))(V537)) end end), fun (V557) -> begin (V558 = (V556(V557))), case V558 of {'Prelude.Types.Left', V559} -> {'Prelude.Types.Left', V559}; {'Prelude.Types.Right', V560} -> (begin (V562 = fun (V561) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V527, {'Compiler.ES.Ast.ConstSwitch', V1, V528, V534, V560}))} end), V562 end(V557)) end end end end), V563 end(V531)) end end end end end), V564 end(V523)) end end end end end; _ -> begin (V565 = ('un--liftArg'(V0, V409))), fun (V566) -> begin (V567 = (V565(V566))), case V567 of {'Prelude.Types.Left', V568} -> {'Prelude.Types.Left', V568}; {'Prelude.Types.Right', V569} -> (begin (V607 = case V569 of {'Builtin.MkPair', V570, V571} -> begin (V573 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V572) -> ('un--constAlt'(V0, V1, V572)) end, V410, []))), fun (V574) -> begin (V575 = (V573(V574))), case V575 of {'Prelude.Types.Left', V576} -> {'Prelude.Types.Left', V576}; {'Prelude.Types.Right', V577} -> (begin (V606 = begin (V599 = case V411 of {'Prelude.Types.Nothing'} -> fun (V578) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V579} -> begin (V580 = ('un--stmt'(V0, V1, V579))), ((begin (V596 = fun (V591) -> fun (V592) -> fun (V593) -> fun (V594) -> fun (V595) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V593, V594, V595)) end end end end end), fun (V597) -> fun (V598) -> ((((V596('erased'))('erased'))(V597))(V598)) end end end((begin (V588 = fun (V582) -> fun (V583) -> fun (V584) -> fun (V585) -> case V585 of {'Prelude.Types.Left', V586} -> {'Prelude.Types.Left', V586}; {'Prelude.Types.Right', V587} -> {'Prelude.Types.Right', (V584(V587))} end end end end end), fun (V589) -> fun (V590) -> ((((V588('erased'))('erased'))(V589))(V590)) end end end(fun (V581) -> {'Prelude.Types.Just', V581} end))))(V580)) end end), fun (V600) -> begin (V601 = (V599(V600))), case V601 of {'Prelude.Types.Left', V602} -> {'Prelude.Types.Left', V602}; {'Prelude.Types.Right', V603} -> (begin (V605 = fun (V604) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V570, {'Compiler.ES.Ast.ConstSwitch', V1, V571, V577, V603}))} end), V605 end(V600)) end end end end), V606 end(V574)) end end end end end), V607 end(V566)) end end end end end; {'Core.CompileExpr.NmPrimVal', V608, V609} -> fun (V610) -> {'Prelude.Types.Right', ('un--assign'(V1, {'Compiler.ES.Ast.EPrimVal', V609}))} end; {'Core.CompileExpr.NmErased', V611} -> fun (V612) -> {'Prelude.Types.Right', ('un--assign'(V1, {'Compiler.ES.Ast.EErased'}))} end; {'Core.CompileExpr.NmCrash', V613, V614} -> fun (V615) -> {'Prelude.Types.Right', {'Compiler.ES.Ast.Error', V614}} end end.
'un--liftMinimal'(V0, V1) -> ('un--lift'(V0, V1, fun (V2) -> ('Idris.Idris2.Compiler.ES.Ast':'un--toMinimal'(V2)) end, fun (V3) -> {'Compiler.ES.Ast.MVar', V3} end)).
'un--liftFun'(V0, V1) -> begin (V36 = begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), ((begin (V33 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V30, V31, V32)) end end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end((begin (V25 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> {'Prelude.Types.Right', (V21(V24))} end end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V8) -> case V8 of {'Compiler.ES.State.MkESSt', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18} -> V11 end end))))(V7)) end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V65 = ('un--lift'(V0, V1, fun (V41) -> ((begin (V61 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V59, V60)) end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end(fun (V56) -> V41 end))(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V44, V45)) end end end end, fun (V46) -> fun (V47) -> {'Prelude.Types.Just', V47} end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V50, V51)) end end end end}, fun (V52) -> {'Prelude.Types.Nothing'} end, fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V54, V55)) end end end}, (V40(V41)))))) end, fun (V64) -> {'Compiler.ES.Ast.EMinimal', {'Compiler.ES.Ast.MVar', V64}} end))), V65 end(V37)) end end end end.
'un--liftArgsVect'(V0, V1) -> begin (V3 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V2) -> ('un--liftArg'(V0, V2)) end, V1))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V13 = fun (V8) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Data.Vect':'dn--un--foldMap_Foldable_(Vect $n)'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V9, V10)) end end, []}, fun (V11) -> ('Idris.Idris2.Builtin':'un--fst'(V11)) end, V7)), ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V12) -> ('Idris.Idris2.Builtin':'un--snd'(V12)) end, V7))}} end), V13 end(V4)) end end end end.
'un--liftArgs'(V0, V1) -> begin (V3 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V2) -> ('un--liftArg'(V0, V2)) end, V1, []))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V20 = fun (V8) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V9, V10)) end end, []}, fun (V11) -> ('Idris.Idris2.Builtin':'un--fst'(V11)) end, V7)), ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('Idris.Idris2.Builtin':'un--snd'(V12)) end))(V7))}} end), V20 end(V4)) end end end end.
'un--liftArg'(V0, V1) -> begin (V36 = begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), ((begin (V33 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V30, V31, V32)) end end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end((begin (V25 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> {'Prelude.Types.Right', (V21(V24))} end end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V8) -> case V8 of {'Compiler.ES.State.MkESSt', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18} -> V10 end end))))(V7)) end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V65 = ('un--lift'(V0, V1, fun (V41) -> ((begin (V61 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V59, V60)) end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end(fun (V56) -> V41 end))(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V44, V45)) end end end end, fun (V46) -> fun (V47) -> {'Prelude.Types.Just', V47} end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V50, V51)) end end end end}, fun (V52) -> {'Prelude.Types.Nothing'} end, fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V54, V55)) end end end}, (V40(V41)))))) end, fun (V64) -> {'Compiler.ES.Ast.EMinimal', {'Compiler.ES.Ast.MVar', V64}} end))), V65 end(V37)) end end end end.
'un--lift'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Compiler.ES.State':'un--nextLocal'(V0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V20 = begin (V9 = ('un--stmt'(V0, {'Compiler.ES.Ast.ErrorWithout', V8}, V1))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V19 = begin (V14 = {'Builtin.MkPair', [('Idris.Idris2.Compiler.ES.Ast':'un--declare'(V8, V13)) | []], (V3(V8))}), fun (V15) -> case V13 of {'Compiler.ES.Ast.Assign', V16, V17} -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V14 end, fun () -> fun (V18) -> {'Builtin.MkPair', [], V18} end end, (V2(V17))))}; _ -> {'Prelude.Types.Right', V14} end end end), V19 end(V10)) end end end end), V20 end(V5)) end end end end.
'un--lambda'(V0, V1, V2) -> ('nested--7617-7884--in--un--go'(V2, V1, V0, [V1 | []], V2)).
'un--integerArith'(V0) -> case V0 of {'Core.CompileExpr.NmOp', V1, V2, V3, V4} -> case V1 of 0 -> {'Prelude.Types.Nothing'}; _ -> begin (V5 = (V1 - 1)), case V5 of 0 -> {'Prelude.Types.Nothing'}; _ -> begin (V6 = (V5 - 1)), case V6 of 0 -> case V3 of {'Core.TT.Add', V7} -> case V7 of 5 -> case V4 of {'Data.Vect.::', V8, V9} -> case V9 of {'Data.Vect.::', V10, V11} -> case V11 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'({'Prelude.Types.Just', fun (V12) -> fun (V13) -> (V12 + V13) end end}, ('un--getInteger'(V8)))), ('un--getInteger'(V10)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Mul', V14} -> case V14 of 5 -> case V4 of {'Data.Vect.::', V15, V16} -> case V16 of {'Data.Vect.::', V17, V18} -> case V18 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'({'Prelude.Types.Just', fun (V19) -> fun (V20) -> (V19 * V20) end end}, ('un--getInteger'(V15)))), ('un--getInteger'(V17)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end end end end; _ -> {'Prelude.Types.Nothing'} end.
'un--getInteger'(V0) -> case V0 of {'Core.CompileExpr.NmPrimVal', V1, V2} -> case V2 of {'Core.TT.BI', V3} -> {'Prelude.Types.Just', V3}; _ -> ('un--integerArith'(V0)) end; _ -> ('un--integerArith'(V0)) end.
'un--constAlt'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.MkNConstAlt', V3, V4} -> begin (V5 = ('un--stmt'(V0, V1, V4))), ((begin (V21 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end((begin (V13 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> {'Prelude.Types.Right', (V9(V12))} end end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V6) -> {'Compiler.ES.Ast.MkEConstAlt', V3, V6} end))))(V5)) end end.
'un--conAlt'(V0, V1, V2, V3) -> case V3 of {'Core.CompileExpr.MkNConAlt', V4, V5, V6, V7, V8} -> begin (V9 = ('Idris.Idris2.Compiler.ES.State':'un--projections'(V0, V2, V7))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V33 = begin (V14 = ('un--stmt'(V0, V1, V8))), ((begin (V30 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V27, V28, V29)) end end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end((begin (V22 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> {'Prelude.Types.Right', (V18(V21))} end end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V15) -> {'Compiler.ES.Ast.MkEConAlt', ('un--tag'(V4, V6)), V5, V15} end))))(V14)) end), V33 end(V10)) end end end end end.
'un--assign'(V0, V1) -> case V0 of {'Compiler.ES.Ast.Returns'} -> {'Compiler.ES.Ast.Return', V1}; {'Compiler.ES.Ast.ErrorWithout', V2} -> {'Compiler.ES.Ast.Assign', V2, V1} end.
