-module('Idris.Idris2.Core.Core.Binder').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--traverse'/2
]).
'un--traverse'(V0, V1) -> case V1 of {'Core.TT.Lam', V2, V3, V4, V5} -> begin (V6 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(V0, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V18 = begin (V11 = (V0(V5))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Core.TT.Lam', V2, V3, V10, V15}} end), V17 end(V12)) end end end end), V18 end(V7)) end end end end; {'Core.TT.Let', V19, V20, V21, V22} -> begin (V23 = (V0(V21))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V35 = begin (V28 = (V0(V22))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V34 = fun (V33) -> {'Prelude.Types.Right', {'Core.TT.Let', V19, V20, V27, V32}} end), V34 end(V29)) end end end end), V35 end(V24)) end end end end; {'Core.TT.Pi', V36, V37, V38, V39} -> begin (V40 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(V0, V38))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V52 = begin (V45 = (V0(V39))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V51 = fun (V50) -> {'Prelude.Types.Right', {'Core.TT.Pi', V36, V37, V44, V49}} end), V51 end(V46)) end end end end), V52 end(V41)) end end end end; {'Core.TT.PVar', V53, V54, V55, V56} -> begin (V57 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(V0, V55))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V69 = begin (V62 = (V0(V56))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V68 = fun (V67) -> {'Prelude.Types.Right', {'Core.TT.PVar', V53, V54, V61, V66}} end), V68 end(V63)) end end end end), V69 end(V58)) end end end end; {'Core.TT.PLet', V70, V71, V72, V73} -> begin (V74 = (V0(V72))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V86 = begin (V79 = (V0(V73))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V85 = fun (V84) -> {'Prelude.Types.Right', {'Core.TT.PLet', V70, V71, V78, V83}} end), V85 end(V80)) end end end end), V86 end(V75)) end end end end; {'Core.TT.PVTy', V87, V88, V89} -> begin (V90 = (V0(V89))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V96 = fun (V95) -> {'Prelude.Types.Right', {'Core.TT.PVTy', V87, V88, V94}} end), V96 end(V91)) end end end end end.
