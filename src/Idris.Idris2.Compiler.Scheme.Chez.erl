-module('Idris.Idris2.Compiler.Scheme.Chez').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--13424-3171--in--un--showFld'/4,
  'nested--12392-2268--in--un--notWorld'/9,
  'nested--12392-2264--in--un--mkNs'/10,
  'nested--12392-2267--in--un--mkFun'/11,
  'nested--11290-1117--in--un--isLib'/3,
  'nested--12392-2269--in--un--callback'/11,
  'nested--12392-2270--in--un--buildArg'/9,
  'nested--12392-2265--in--un--applyLams'/10,
  'un--useCC'/7,
  'un--unsupportedCallingConvention'/1,
  'un--startChezWinSh'/4,
  'un--startChezPreamble'/0,
  'un--startChezCmd'/4,
  'un--startChez'/2,
  'un--showChezString'/2,
  'un--showChezChar'/2,
  'un--schemeCall'/4,
  'un--schHeader'/3,
  'un--schFooter'/2,
  'un--schFgnDef'/7,
  'un--mkStruct'/2,
  'un--mkArgs'/2,
  'un--makeShWindows'/5,
  'un--makeSh'/3,
  'un--loadSO'/3,
  'un--loadLib'/3,
  'un--incCompile'/3,
  'un--handleRet'/2,
  'un--getFgnCall'/5,
  'un--findLibs'/2,
  'un--findChez'/1,
  'un--executeExpr'/4,
  'un--compileToSSInc'/6,
  'un--compileToSS'/5,
  'un--compileToSO'/5,
  'un--compileLibrary'/5,
  'un--compileExprWhole'/7,
  'un--compileExprInc'/7,
  'un--compileExpr'/7,
  'un--codegenChez'/0,
  'un--chezVersion'/2,
  'un--chezString'/1,
  'un--chezExtPrim'/3,
  'un--cftySpec'/2,
  'un--cCall'/8
]).
'nested--13424-3171--in--un--showFld'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V6 = ('un--cftySpec'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> {'Prelude.Types.Right', <<<<"["/utf8>>/binary, <<V4/binary, <<<<" "/utf8>>/binary, <<V10/binary, <<"]"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V12 end(V7)) end end end end end.
'nested--12392-2268--in--un--notWorld'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.CompileExpr.CFWorld'} -> 0; _ -> 1 end.
'nested--12392-2264--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> []; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Core.CompileExpr.CFWorld'} -> [{'Prelude.Types.Nothing'} | ('nested--12392-2264--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11))]; _ -> [{'Prelude.Types.Just', <<<<"cb"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8))/binary>>} | ('nested--12392-2264--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, begin (V12 = (V8 + 1)), case ((V12 band 9223372036854775808) =/= 0) of 'true' -> (V12 bor -9223372036854775808); _ -> (V12 band 9223372036854775807) end end, V11))] end end(E0, E1)) end.
'nested--12392-2267--in--un--mkFun'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('nested--12392-2264--in--un--mkNs'(V0, V1, V2, V3, V4, V5, V6, V7, 0, V8))), <<<<"(lambda ("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V12) -> V12 end, V11))))/binary, <<<<") "/utf8>>/binary, <<('nested--12392-2265--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, V10, V11))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end.
'nested--11290-1117--in--un--isLib'(V0, V1, V2) -> case ('Idris.Idris2.Data.String':'un--isPrefixOf'(<<"lib"/utf8>>, V2)) of 1 -> {'Prelude.Types.Just', ('Idris.Idris2.Data.String':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'(3, ('Idris.Idris2.Prelude.Types.String':'un--length'(V2)), V2))))}; 0 -> {'Prelude.Types.Nothing'} end.
'nested--12392-2269--in--un--callback'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Core.CompileExpr.CFFun', V11, V12} -> ('nested--12392-2269--in--un--callback'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V11 | V9], V12)); _ -> begin (V13 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V9))), begin (V16 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> ('un--cftySpec'(V5, V14)) end, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V15) -> ('nested--12392-2268--in--un--notWorld'(V0, V1, V2, V3, V4, V5, V6, V7, V15)) end, V13)), []))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V28 = begin (V21 = ('un--cftySpec'(V5, V10))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', <<<<"(let ([c-code (foreign-callable #f "/utf8>>/binary, <<('nested--12392-2267--in--un--mkFun'(V0, V1, V2, V3, V4, V5, V6, V7, V13, V10, V8))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V20))/binary, <<<<") "/utf8>>/binary, <<V25/binary, <<")]) (lock-object c-code) (foreign-callable-entry-point c-code))"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V27 end(V22)) end end end end), V28 end(V17)) end end end end end end.
'nested--12392-2270--in--un--buildArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Core.CompileExpr.CFFun', V11, V12} -> ('nested--12392-2269--in--un--callback'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V9)), [V11 | []], V12)); {'Core.CompileExpr.CFGCPtr'} -> fun (V13) -> {'Prelude.Types.Right', <<<<"(car "/utf8>>/binary, <<('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V9))/binary, <<")"/utf8>>/binary>>/binary>>} end; _ -> fun (V14) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V9))} end end end.
'nested--12392-2265--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> V8; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Prelude.Types.Nothing'} -> ('nested--12392-2265--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, <<<<"("/utf8>>/binary, <<V8/binary, <<" #f)"/utf8>>/binary>>/binary>>, V11)); {'Prelude.Types.Just', V12} -> ('nested--12392-2265--in--un--applyLams'(V0, V1, V2, V3, V4, V5, V6, V7, <<<<"("/utf8>>/binary, <<V8/binary, <<<<" "/utf8>>/binary, <<V12/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>, V11)) end end(E0, E1)) end.
'un--useCC'(V0, V1, V2, V3, V4, V5, V6) -> case ('Idris.Idris2.Compiler.Common':'un--parseCC'([<<"scheme,chez"/utf8>> | [<<"scheme"/utf8>> | [<<"C__collect_safe"/utf8>> | [<<"C"/utf8>> | []]]]], V3)) of {'Prelude.Types.Just', V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> case V8 of <<"scheme,chez"/utf8>> -> case V9 of [E0 | E1] -> (fun (V10, V11) -> case V11 of [] -> begin (V20 = ('un--schemeCall'(V2, V10, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('Idris.Idris2.Builtin':'un--fst'(V12)) end))(V4)), V5))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V26 = fun (V25) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, V24}} end), V26 end(V21)) end end end end; _ -> fun (V27) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V2, V3}, V27)) end end end(E0, E1)); _ -> fun (V28) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V2, V3}, V28)) end end; <<"scheme"/utf8>> -> case V9 of [E2 | E3] -> (fun (V29, V30) -> case V30 of [] -> begin (V39 = ('un--schemeCall'(V2, V29, ((begin (V36 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V34, V35)) end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end(fun (V31) -> ('Idris.Idris2.Builtin':'un--fst'(V31)) end))(V4)), V5))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V45 = fun (V44) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, V43}} end), V45 end(V40)) end end end end; _ -> fun (V46) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V2, V3}, V46)) end end end(E2, E3)); _ -> fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V2, V3}, V47)) end end; <<"C__collect_safe"/utf8>> -> case V9 of [E4 | E5] -> (fun (V48, V49) -> case V49 of [E6 | E7] -> (fun (V50, V51) -> case ('un--unsupportedCallingConvention'(V6)) of 1 -> ('un--cCall'(V0, V1, V2, V48, V50, V4, V5, 0)); 0 -> ('un--cCall'(V0, V1, V2, V48, V50, V4, V5, 1)) end end(E6, E7)); _ -> fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V2, V3}, V52)) end end end(E4, E5)); _ -> fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V2, V3}, V53)) end end; <<"C"/utf8>> -> case V9 of [E8 | E9] -> (fun (V54, V55) -> case V55 of [E10 | E11] -> (fun (V56, V57) -> ('un--cCall'(V0, V1, V2, V54, V56, V4, V5, 0)) end(E10, E11)); _ -> fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V2, V3}, V58)) end end end(E8, E9)); _ -> fun (V59) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V2, V3}, V59)) end end; _ -> fun (V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V2, V3}, V60)) end end; _ -> fun (V61) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V2, V3}, V61)) end end; _ -> fun (V62) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NoForeignCC', V2, V3}, V62)) end end.
'un--unsupportedCallingConvention'(V0) -> case V0 of {'Prelude.Types.Nothing'} -> 1; {'Prelude.Types.Just', V1} -> ('Idris.Idris2.Libraries.Data.Version':'dn--un--<_Ord_Version'(V1, {'Libraries.Data.Version.MkVersion', {'Builtin.MkPair', 9, {'Builtin.MkPair', 5, 0}}, {'Prelude.Types.Nothing'}})) end.
'un--startChezWinSh'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> <<V4/binary, V5/binary>> end end, <<""/utf8>>}, fun (V6) -> V6 end, [<<"#!/bin/sh\x{a}# "/utf8>> | [('Idris.Idris2.Compiler.Generated':'un--generatedString'(<<"Chez"/utf8>>)) | [<<"\x{a}\x{a}set -e # exit on any error\x{a}\x{a}DIR=$(dirname \x{22}$(readlink -f -- \x{22}$0\x{22} || cygpath -a -- \x{22}$0\x{22})\x{22})\x{a}PATH=\x{22}$DIR/"/utf8>> | [V1 | [<<":$PATH\x{22}\x{a}\x{a}export IDRIS2_INC_SRC=\x{22}$DIR/"/utf8>> | [V1 | [<<"\x{22}\x{a}\x{a}\x{22}"/utf8>> | [V0 | [<<"\x{22} "/utf8>> | [V3 | [<<" \x{22}$DIR/"/utf8>> | [V2 | [<<"\x{22} \x{22}$@\x{22}"/utf8>> | []]]]]]]]]]]]]])).
'un--startChezPreamble'() -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V0) -> fun (V1) -> <<V0/binary, V1/binary>> end end, <<""/utf8>>}, fun (V2) -> V2 end, [<<"#!/bin/sh\x{a}# "/utf8>> | [('Idris.Idris2.Compiler.Generated':'un--generatedString'(<<"Chez"/utf8>>)) | [<<"\x{a}\x{a}set -e # exit on any error\x{a}\x{a}if [ \x{22}$(uname)\x{22} = Darwin ]; then\x{a}  DIR=$(zsh -c \x{27}printf %s \x{22}$0:A:h\x{22}\x{27} \x{22}$0\x{22})\x{a}else\x{a}  DIR=$(dirname \x{22}$(readlink -f -- \x{22}$0\x{22})\x{22})\x{a}fi\x{a}"/utf8>> | []]]])).
'un--startChezCmd'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> <<V4/binary, V5/binary>> end end, <<""/utf8>>}, fun (V6) -> V6 end, [<<"@echo off\x{a}\x{a}rem "/utf8>> | [('Idris.Idris2.Compiler.Generated':'un--generatedString'(<<"Chez"/utf8>>)) | [<<"\x{a}\x{a}set APPDIR=%~dp0\x{a}set PATH=%APPDIR%"/utf8>> | [V1 | [<<";%PATH%\x{a}set IDRIS2_INC_SRC=%APPDIR%"/utf8>> | [V1 | [<<"\x{a}\x{a}\x{22}"/utf8>> | [V0 | [<<"\x{22} "/utf8>> | [V3 | [<<" \x{22}%APPDIR%"/utf8>> | [V2 | [<<"\x{22} %*"/utf8>> | []]]]]]]]]]]]]])).
'un--startChez'(V0, V1) -> <<('un--startChezPreamble'())/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> <<V2/binary, V3/binary>> end end, <<""/utf8>>}, fun (V4) -> V4 end, [<<"export LD_LIBRARY_PATH=\x{22}$DIR/"/utf8>> | [V0 | [<<":$LD_LIBRARY_PATH\x{22}\x{a}export DYLD_LIBRARY_PATH=\x{22}$DIR/"/utf8>> | [V0 | [<<":$DYLD_LIBRARY_PATH\x{22}\x{a}export IDRIS2_INC_SRC=\x{22}$DIR/"/utf8>> | [V0 | [<<"\x{22}\x{a}\x{a}\x{22}$DIR/"/utf8>> | [V1 | [<<"\x{22} \x{22}$@\x{22}"/utf8>> | []]]]]]]]]]))/binary>>.
'un--showChezString'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V2 of $\x{22} -> <<<<"\x{5c}\x{22}"/utf8>>/binary, ('un--showChezString'(V3, V1))/binary>>; _ -> ('un--showChezChar'(V2, ('un--showChezString'(V3, V1)))) end end(E0, E1)) end.
'un--showChezChar'(V0, V1) -> case V0 of $\x{5c} -> <<<<"\x{5c}\x{5c}"/utf8>>/binary, V1/binary>>; _ -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V0, case 32 of E2 when ((erlang:'is_integer'(E2)) andalso (((E2 >= 0) andalso (E2 =< 55295)) orelse ((E2 >= 57344) andalso (E2 =< 1114111)))) -> E2; _ -> 65533 end)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V0, case begin (V2 = 126), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end)) end of 1 -> <<<<<<"\x{5c}x"/utf8>>/binary, <<('Idris.Idris2.Protocol.Hex':'un--asHex'(case V0 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end))/binary, <<";"/utf8>>/binary>>/binary>>/binary, V1/binary>>; 0 -> <<('unicode':'characters_to_binary'([V0 | []]))/binary, V1/binary>> end end.
'un--schemeCall'(V0, V1, V2, V3) -> begin (V12 = <<<<"("/utf8>>/binary, <<V1/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V4)) end))(V2))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>), fun (V13) -> case V3 of {'Core.CompileExpr.CFIORes', V14} -> {'Prelude.Types.Right', V12}; _ -> {'Prelude.Types.Right', V12} end end end.
'un--schHeader'(V0, V1, V2) -> <<case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(('Idris.Idris2.System.Info':'un--os'()), <<"windows"/utf8>>)) of 1 -> <<<<"#!"/utf8>>/binary, <<V0/binary, case V2 of 1 -> (begin (V4 = fun (V3) -> V3 end), fun (V5) -> (V4(V5)) end end(<<" --program\x{a}\x{a}"/utf8>>)); 0 -> (begin (V7 = fun (V6) -> V6 end), fun (V8) -> (V7(V8)) end end(<<" --script\x{a}\x{a}"/utf8>>)) end/binary>>/binary>>; 0 -> <<""/utf8>> end/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> <<V9/binary, V10/binary>> end end, <<""/utf8>>}, fun (V11) -> V11 end, [<<";; "/utf8>> | [('Idris.Idris2.Compiler.Generated':'un--generatedString'(<<"Chez"/utf8>>)) | [<<"\x{a}(import (chezscheme))\x{a}(case (machine-type)\x{a}  [(i3fb ti3fb a6fb ta6fb) #f]\x{a}  [(i3le ti3le a6le ta6le tarm64le) (load-shared-object \x{22}libc.so.6\x{22})]\x{a}  [(i3osx ti3osx a6osx ta6osx tarm64osx) (load-shared-object \x{22}libc.dylib\x{22})]\x{a}  [(i3nt ti3nt a6nt ta6nt) (load-shared-object \x{22}msvcrt.dll\x{22})]\x{a}  [else (load-shared-object \x{22}libc.so\x{22})])\x{a}\x{a}"/utf8>> | [('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> <<<<"(load-shared-object \x{22}"/utf8>>/binary, <<('Idris.Idris2.Libraries.Utils.String':'un--escapeStringChez'(V12))/binary, <<"\x{22})"/utf8>>/binary>>/binary>> end))(V1)))) | [<<"\x{a}\x{a}"/utf8>> | [case V2 of 1 -> (begin (V21 = fun (V20) -> V20 end), fun (V22) -> (V21(V22)) end end(<<"(let ()"/utf8>>)); 0 -> (begin (V24 = fun (V23) -> V23 end), fun (V25) -> (V24(V25)) end end(<<"(source-directories (cons (getenv \x{22}IDRIS2_INC_SRC\x{22}) (source-directories)))"/utf8>>)) end | [<<"\x{a}"/utf8>> | []]]]]]]]))/binary>>.
'un--schFooter'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> <<V2/binary, V3/binary>> end end, <<""/utf8>>}, fun (V4) -> V4 end, [<<"\x{a}  (collect 4)\x{a}  (blodwen-run-finalisers)\x{a}  "/utf8>> | [case V0 of 1 -> (begin (V6 = fun (V5) -> V5 end), fun (V7) -> (V6(V7)) end end(<<"(profile-dump-html)"/utf8>>)); 0 -> (begin (V9 = fun (V8) -> V8 end), fun (V10) -> (V9(V10)) end end(<<""/utf8>>)) end | [<<"\x{a}  "/utf8>> | [case V1 of 1 -> (begin (V12 = fun (V11) -> V11 end), fun (V13) -> (V12(V13)) end end(<<")"/utf8>>)); 0 -> (begin (V15 = fun (V14) -> V14 end), fun (V16) -> (V15(V16)) end end(<<""/utf8>>)) end | []]]]])).
'un--schFgnDef'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Core.CompileExpr.MkNmForeign', V7, V8, V9} -> begin (V10 = ('un--mkArgs'(0, V8))), begin (V19 = ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> ('Idris.Idris2.Builtin':'un--fst'(V11)) end))(V10))), begin (V29 = ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('Idris.Idris2.Builtin':'un--fst'(V21)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V20) -> ('Idris.Idris2.Builtin':'un--snd'(V20)) end, V10))))), begin (V31 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V30) -> ('un--mkStruct'(V2, V30)) end, V8, []))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V114 = begin (V36 = ('un--mkStruct'(V2, V9))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V113 = begin (V41 = ('un--useCC'(V0, V1, V3, V7, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V29, V8)), V9, V6))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V112 = case V45 of {'Builtin.MkPair', V46, V47} -> begin (V53 = begin (V48 = V0), fun (V49) -> begin (V52 = (begin (V50 = V48), fun (V51) -> ('erlang':'get'(V50)) end end(V49))), {'Prelude.Types.Right', V52} end end end), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V111 = begin (V90 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V57 of {'Core.Context.MkDefs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89} -> V58 end, V4))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V110 = fun (V95) -> {'Prelude.Types.Right', {'Builtin.MkPair', V46, <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V96) -> fun (V97) -> <<V96/binary, V97/binary>> end end, <<""/utf8>>}, fun (V98) -> V98 end, V35))/binary, <<V40/binary, <<<<"(define "/utf8>>/binary, <<('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V94))/binary, <<(begin (V100 = fun (V99) -> V99 end), fun (V101) -> (V100(V101)) end end(<<" (lambda ("/utf8>>))/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V107 = fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V105, V106)) end end end end), fun (V108) -> fun (V109) -> ((((V107('erased'))('erased'))(V108))(V109)) end end end(fun (V102) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V102)) end))(V19))))/binary, <<<<") "/utf8>>/binary, <<V47/binary, <<"))\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>}} end), V110 end(V91)) end end end end), V111 end(V54)) end end end end end), V112 end(V42)) end end end end), V113 end(V37)) end end end end), V114 end(V32)) end end end end end end end; _ -> fun (V115) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, <<""/utf8>>}} end end.
'un--mkStruct'(V0, V1) -> case V1 of {'Core.CompileExpr.CFStruct', V2, V3} -> begin (V13 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> ('un--mkStruct'(V0, V4)) end, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('Idris.Idris2.Builtin':'un--snd'(V5)) end))(V3)), []))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V85 = begin (V23 = begin (V18 = V0), fun (V19) -> begin (V22 = (begin (V20 = V18), fun (V21) -> ('erlang':'get'(V20)) end end(V19))), {'Prelude.Types.Right', V22} end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V84 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V39)) end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V43, V44, V45, V46)) end end end end end end end, fun (V47) -> fun (V48) -> V48 end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V51, V52, V53)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V56, V57)) end end}, V2, V27)) of 1 -> fun (V58) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V59) -> fun (V60) -> <<V59/binary, V60/binary>> end end, <<""/utf8>>}, fun (V61) -> V61 end, V17))} end; 0 -> begin (V67 = begin (V62 = V0), fun (V63) -> begin (V66 = (begin (V64 = V62), fun (V65) -> ('erlang':'put'(V64, [V2 | V27])) end end(V63))), {'Prelude.Types.Right', V66} end end end), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V83 = begin (V73 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V72) -> ('nested--13424-3171--in--un--showFld'(V3, V2, V0, V72)) end, V3, []))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V82 = fun (V78) -> {'Prelude.Types.Right', <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V79) -> fun (V80) -> <<V79/binary, V80/binary>> end end, <<""/utf8>>}, fun (V81) -> V81 end, V17))/binary, <<<<"(define-ftype "/utf8>>/binary, <<V2/binary, <<<<" (struct\x{a}\x{9}"/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}\x{9}"/utf8>>, V77))/binary, <<"))\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V82 end(V74)) end end end end), V83 end(V68)) end end end end end), V84 end(V24)) end end end end), V85 end(V14)) end end end end; {'Core.CompileExpr.CFIORes', V86} -> ('un--mkStruct'(V0, V86)); {'Core.CompileExpr.CFFun', V87, V88} -> begin (V108 = begin (V89 = ('un--mkStruct'(V0, V87))), ((begin (V105 = fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V102, V103, V104)) end end end end end), fun (V106) -> fun (V107) -> ((((V105('erased'))('erased'))(V106))(V107)) end end end((begin (V97 = fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> {'Prelude.Types.Right', (V93(V96))} end end end end end), fun (V98) -> fun (V99) -> ((((V97('erased'))('erased'))(V98))(V99)) end end end(fun (V90) -> {'Builtin.MkUnit'} end))))(V89)) end), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V113 = ('un--mkStruct'(V0, V88))), V113 end(V109)) end end end end; _ -> fun (V114) -> {'Prelude.Types.Right', <<""/utf8>>} end end.
'un--mkArgs'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Core.CompileExpr.CFWorld'} -> [{'Builtin.MkPair', {'Core.Name.MN', <<"farg"/utf8>>, V0}, 0} | ('un--mkArgs'(V0, V3))]; _ -> [{'Builtin.MkPair', {'Core.Name.MN', <<"farg"/utf8>>, V0}, 1} | ('un--mkArgs'(begin (V4 = (V0 + 1)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end, V3))] end end(E0, E1)) end.
'un--makeShWindows'(V0, V1, V2, V3, V4) -> begin (V5 = <<V1/binary, <<".cmd"/utf8>>/binary>>), begin (V35 = fun (V6) -> begin (V34 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, V5, ('un--startChezCmd'(V0, V2, V3, V4))))(V6))), {'Prelude.Types.Right', V34} end end), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V81 = case V39 of {'Prelude.Types.Right', V40} -> begin (V70 = fun (V41) -> begin (V69 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> V48 end end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), begin (V56 = (V53(V54))), (V55(V56)) end end end end end end end}, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), ((V60(V62))(V61)) end end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V64(V65))), (V66(V65)) end end end end}, fun (V67) -> fun (V68) -> V68 end end}, V1, ('un--startChezWinSh'(V0, V2, V3, V4))))(V41))), {'Prelude.Types.Right', V69} end end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V78 = fun (V75) -> case V74 of {'Prelude.Types.Right', V76} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; {'Prelude.Types.Left', V77} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V1, V77}, V75)) end end), V78 end(V71)) end end end end; {'Prelude.Types.Left', V79} -> fun (V80) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V5, V79}, V80)) end end), V81 end(V36)) end end end end end.
'un--makeSh'(V0, V1, V2) -> begin (V32 = fun (V3) -> begin (V31 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V0, ('un--startChez'(V1, V2))))(V3))), {'Prelude.Types.Right', V31} end end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V40 = fun (V37) -> case V36 of {'Prelude.Types.Right', V38} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; {'Prelude.Types.Left', V39} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V0, V39}, V37)) end end), V40 end(V33)) end end end end.
'un--loadSO'(V0, V1, V2) -> case V2 of <<""/utf8>> -> fun (V3) -> {'Prelude.Types.Right', <<""/utf8>>} end; _ -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V49 = begin (V9 = ('Idris.Idris2.Core.Directory':'un--ttcBuildDirectory'(V0))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V48 = begin (V14 = ('Idris.Idris2.Core.Directory':'un--extraSearchDirectories'(V0))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V47 = begin (V27 = ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V19, V2)) end))([V13 | V18]))), begin (V28 = ('Idris.Idris2.Core.Directory':'un--firstAvailable'(V0, V27))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V46 = case V32 of {'Prelude.Types.Just', V33} -> begin (V34 = ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Data.List':'un--intersperse'(<<"-"/utf8>>, ('Idris.Idris2.Libraries.Utils.Path':'un--splitPath'(V2))))))), begin (V35 = ('Idris.Idris2.Compiler.Common':'un--copyLib'({'Builtin.MkPair', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V1, V34)), V33}))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V41 = fun (V40) -> {'Prelude.Types.Right', <<<<"(load \x{22}"/utf8>>/binary, <<('Idris.Idris2.Libraries.Utils.String':'un--escapeStringChez'(V34))/binary, <<"\x{22})\x{a}"/utf8>>/binary>>/binary>>} end), V41 end(V36)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V42) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<(begin (V44 = fun (V43) -> V43 end), fun (V45) -> (V44(V45)) end end(<<"Missing .so:"/utf8>>))/binary, V2/binary>>}, V42)) end end), V46 end(V29)) end end end end end), V47 end(V15)) end end end end), V48 end(V10)) end end end end), V49 end(V5)) end end end end end.
'un--loadLib'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Compiler.Common':'un--locate'(V0, V2))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V20 = case V7 of {'Builtin.MkPair', V8, V9} -> begin (V10 = ('Idris.Idris2.Compiler.Common':'un--copyLib'({'Builtin.MkPair', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V1, V8)), V9}))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V19 = fun (V15) -> {'Prelude.Types.Right', <<(begin (V17 = fun (V16) -> V16 end), fun (V18) -> (V17(V18)) end end(<<"(load-shared-object \x{22}"/utf8>>))/binary, <<('Idris.Idris2.Libraries.Utils.String':'un--escapeStringChez'(V8))/binary, <<"\x{22})\x{a}"/utf8>>/binary>>/binary>>} end), V19 end(V11)) end end end end end), V20 end(V4)) end end end end.
'un--incCompile'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V2, <<"ss"/utf8>>))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V244 = begin (V8 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V2, <<"so"/utf8>>))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V243 = begin (V13 = ('Idris.Idris2.Core.Directory':'un--getObjFileName'(V0, V2, <<"so"/utf8>>))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V242 = begin (V18 = ('Idris.Idris2.Compiler.Common':'un--getIncCompileData'(V0, 0, 0))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V241 = begin (V23 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V240 = begin (V28 = ('Idris.Idris2.Core.Directory':'un--ttcBuildDirectory'(V0))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V239 = begin (V39 = case V22 of {'Compiler.Common.MkCompileData', V33, V34, V35, V36, V37, V38} -> V35 end), case ('Idris.Idris2.Data.List':'un--isNil'(V39)) of 1 -> fun (V40) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', <<""/utf8>>, []}}} end; 0 -> begin (V41 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Scheme.Chez.Loaded'}, [<<"libc"/utf8>> | [<<"libc 6"/utf8>> | []]]))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V238 = begin (V46 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Scheme.Chez.Structs'}, []))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V237 = begin (V53 = fun (V51) -> begin (V52 = ('un--findChez'(V51))), {'Prelude.Types.Right', V52} end end), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V236 = begin (V60 = fun (V58) -> begin (V59 = ('un--chezVersion'(V57, V58))), {'Prelude.Types.Right', V59} end end), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V235 = begin (V66 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V65) -> ('un--getFgnCall'(V0, V45, V50, V64, V65)) end, V39, []))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V234 = begin (V76 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V71) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--getScheme'(V0, fun (V72) -> fun (V73) -> fun (V74) -> ('un--chezExtPrim'(V72, V73, V74)) end end end, fun (V75) -> ('un--chezString'(V75)) end, V71)) end, V39, []))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V233 = begin (V89 = ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V86 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V84, V85)) end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(fun (V81) -> ('Idris.Idris2.Builtin':'un--snd'(V81)) end))(V70)), V80))))), begin (V119 = fun (V90) -> begin (V118 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V93, V94, V95)) end end end end end, fun (V96) -> fun (V97) -> fun (V98) -> V97 end end end, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), begin (V105 = (V102(V103))), (V104(V105)) end end end end end end end}, fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> begin (V111 = (V108(V110))), ((V109(V111))(V110)) end end end end end end, fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V113(V114))), (V115(V114)) end end end end}, fun (V116) -> fun (V117) -> V117 end end}, V7, V89))(V90))), {'Prelude.Types.Right', V118} end end), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V232 = case V123 of {'Prelude.Types.Right', V124} -> begin (V128 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V32, (begin (V126 = fun (V125) -> V125 end), fun (V127) -> (V126(V127)) end end(<<"compileChez"/utf8>>))))), begin (V135 = <<(begin (V130 = fun (V129) -> V129 end), fun (V131) -> (V130(V131)) end end(<<"(parameterize ([optimize-level 3] "/utf8>>))/binary, <<(begin (V133 = fun (V132) -> V132 end), fun (V134) -> (V133(V134)) end end(<<"[compile-file-message #f]) (compile-file "/utf8>>))/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V7))/binary, <<"))"/utf8>>/binary>>/binary>>/binary>>), begin (V165 = fun (V136) -> begin (V164 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V139, V140, V141)) end end end end end, fun (V142) -> fun (V143) -> fun (V144) -> V143 end end end, fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> begin (V150 = (V147(V149))), begin (V151 = (V148(V149))), (V150(V151)) end end end end end end end}, fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> begin (V157 = (V154(V156))), ((V155(V157))(V156)) end end end end end end, fun (V158) -> fun (V159) -> fun (V160) -> begin (V161 = (V159(V160))), (V161(V160)) end end end end}, fun (V162) -> fun (V163) -> V163 end end}, V128, V135))(V136))), {'Prelude.Types.Right', V164} end end), fun (V166) -> begin (V167 = (V165(V166))), case V167 of {'Prelude.Types.Left', V168} -> {'Prelude.Types.Left', V168}; {'Prelude.Types.Right', V169} -> (begin (V229 = case V169 of {'Prelude.Types.Right', V170} -> begin (V219 = begin (V200 = fun (V171) -> begin (V199 = (('Idris.Idris2.Erlang.System.Escaped':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V174, V175, V176)) end end end end end, fun (V177) -> fun (V178) -> fun (V179) -> V178 end end end, fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> begin (V185 = (V182(V184))), begin (V186 = (V183(V184))), (V185(V186)) end end end end end end end}, fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> begin (V192 = (V189(V191))), ((V190(V192))(V191)) end end end end end end, fun (V193) -> fun (V194) -> fun (V195) -> begin (V196 = (V194(V195))), (V196(V195)) end end end end}, fun (V197) -> fun (V198) -> V198 end end}, [V57 | [<<"--script"/utf8>> | [V128 | []]]]))(V171))), {'Prelude.Types.Right', V199} end end), ((begin (V216 = fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V213, V214, V215)) end end end end end), fun (V217) -> fun (V218) -> ((((V216('erased'))('erased'))(V217))(V218)) end end end((begin (V208 = fun (V202) -> fun (V203) -> fun (V204) -> fun (V205) -> case V205 of {'Prelude.Types.Left', V206} -> {'Prelude.Types.Left', V206}; {'Prelude.Types.Right', V207} -> {'Prelude.Types.Right', (V204(V207))} end end end end end), fun (V209) -> fun (V210) -> ((((V208('erased'))('erased'))(V209))(V210)) end end end(fun (V201) -> {'Builtin.MkUnit'} end))))(V200)) end), fun (V220) -> begin (V221 = (V219(V220))), case V221 of {'Prelude.Types.Left', V222} -> {'Prelude.Types.Left', V222}; {'Prelude.Types.Right', V223} -> (begin (V226 = fun (V224) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V17, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V225) -> ('Idris.Idris2.Builtin':'un--fst'(V225)) end, V70))}}} end), V226 end(V220)) end end end end; {'Prelude.Types.Left', V227} -> fun (V228) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V128, V227}, V228)) end end), V229 end(V166)) end end end end end end; {'Prelude.Types.Left', V230} -> fun (V231) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V7, V230}, V231)) end end), V232 end(V120)) end end end end end), V233 end(V77)) end end end end), V234 end(V67)) end end end end), V235 end(V61)) end end end end), V236 end(V54)) end end end end), V237 end(V47)) end end end end), V238 end(V42)) end end end end end end), V239 end(V29)) end end end end), V240 end(V24)) end end end end), V241 end(V19)) end end end end), V242 end(V14)) end end end end), V243 end(V9)) end end end end), V244 end(V4)) end end end end.
'un--handleRet'(V0, V1) -> case V0 of <<"void"/utf8>> -> <<V1/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Compiler.Scheme.Common':'un--schConstructor'(fun (V2) -> ('un--chezString'(V2)) end, {'Core.Name.UN', {'Core.Name.Basic', <<""/utf8>>}}, {'Prelude.Types.Just', 0}, []))/binary>>/binary>>; _ -> V1 end.
'un--getFgnCall'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> ('un--schFgnDef'(V0, V1, V2, V7, V5, V8, V3)) end end.
'un--findLibs'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V2) -> ('nested--11290-1117--in--un--isLib'(V1, V0, ('Idris.Idris2.Data.String':'un--trim'(V2)))) end, V1))), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> ('Idris.Idris2.Compiler.Common':'un--locate'(V0, V4)) end, ('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V7, V8)) end end}, V3)), [])) end.
'un--findChez'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"CHEZ"/utf8>>))(V0))), case V28 of {'Prelude.Types.Nothing'} -> begin (V38 = ('Idris.Idris2.Libraries.Utils.Path':'un--pathLookup'([<<"chez"/utf8>> | [(begin (V30 = fun (V29) -> V29 end), fun (V31) -> (V30(V31)) end end(<<"chezscheme"/utf8>>)) | [(begin (V33 = fun (V32) -> V32 end), fun (V34) -> (V33(V34)) end end(<<"chez-scheme"/utf8>>)) | [(begin (V36 = fun (V35) -> V35 end), fun (V37) -> (V36(V37)) end end(<<"chezscheme9.5"/utf8>>)) | [<<"scheme"/utf8>> | []]]]]], V0))), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> (begin (V40 = fun (V39) -> V39 end), fun (V41) -> (V40(V41)) end end(<<"/usr/bin/env scheme"/utf8>>)) end, V38)) end; {'Prelude.Types.Just', V42} -> V42 end end.
'un--executeExpr'(V0, V1, V2, V3) -> begin (V4 = ('un--compileExpr'(0, V0, V1, V2, V2, V3, <<"_tmpchez"/utf8>>))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V62 = case V8 of {'Prelude.Types.Just', V9} -> begin (V39 = fun (V10) -> begin (V38 = (('Idris.Idris2.Erlang.System.Escaped':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, [V9 | []]))(V10))), {'Prelude.Types.Right', V38} end end), ((begin (V55 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V52, V53, V54)) end end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end((begin (V47 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> {'Prelude.Types.Right', (V43(V46))} end end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V40) -> {'Builtin.MkUnit'} end))))(V39)) end; {'Prelude.Types.Nothing'} -> fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V60 = fun (V59) -> V59 end), fun (V61) -> (V60(V61)) end end(<<"compileExpr returned Nothing"/utf8>>))}, V58)) end end), V62 end(V5)) end end end end.
'un--compileToSSInc'(V0, V1, V2, V3, V4, V5) -> begin (V8 = fun (V6) -> begin (V7 = ('un--findChez'(V6))), {'Prelude.Types.Right', V7} end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V159 = begin (V13 = ('Idris.Idris2.Compiler.Common':'un--compileTerm'(V0, V4))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V158 = begin (V18 = ('Idris.Idris2.Core.CompileExpr':'un--forget'([], V17))), begin (V24 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V19) -> ('un--loadLib'(V0, V3, V19)) end, ('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V22, V23)) end end}, V2)), []))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V157 = begin (V34 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V29) -> ('un--loadSO'(V0, V3, V29)) end, ('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V32, V33)) end end}, V1)), []))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V156 = begin (V43 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V39) -> fun (V40) -> fun (V41) -> ('un--chezExtPrim'(V39, V40, V41)) end end end, fun (V42) -> ('un--chezString'(V42)) end, 0, V18))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V155 = begin (V48 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"chez/support.ss"/utf8>>))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V154 = begin (V59 = <<('un--schHeader'(V12, [], 0))/binary, <<V52/binary, <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V53) -> fun (V54) -> <<V53/binary, V54/binary>> end end, <<""/utf8>>}, fun (V55) -> V55 end, V28))/binary, <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V56) -> fun (V57) -> <<V56/binary, V57/binary>> end end, <<""/utf8>>}, fun (V58) -> V58 end, V38))/binary, <<<<"(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))\x{a}"/utf8>>/binary, <<V47/binary, ('un--schFooter'(0, 0))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>), begin (V89 = fun (V60) -> begin (V88 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V63, V64, V65)) end end end end end, fun (V66) -> fun (V67) -> fun (V68) -> V67 end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V71(V73))), begin (V75 = (V72(V73))), (V74(V75)) end end end end end end end}, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V78(V80))), ((V79(V81))(V80)) end end end end end end, fun (V82) -> fun (V83) -> fun (V84) -> begin (V85 = (V83(V84))), (V85(V84)) end end end end}, fun (V86) -> fun (V87) -> V87 end end}, V5, V59))(V60))), {'Prelude.Types.Right', V88} end end), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V153 = case V93 of {'Prelude.Types.Right', V94} -> begin (V144 = begin (V125 = fun (V95) -> begin (V124 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V98, V99, V100)) end end end end end, fun (V101) -> fun (V102) -> fun (V103) -> V102 end end end, fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> begin (V109 = (V106(V108))), begin (V110 = (V107(V108))), (V109(V110)) end end end end end end end}, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> begin (V116 = (V113(V115))), ((V114(V116))(V115)) end end end end end end, fun (V117) -> fun (V118) -> fun (V119) -> begin (V120 = (V118(V119))), (V120(V119)) end end end end}, fun (V121) -> fun (V122) -> V122 end end}, V5, begin (V123 = 493), case ((V123 band 9223372036854775808) =/= 0) of 'true' -> (V123 bor -9223372036854775808); _ -> (V123 band 9223372036854775807) end end))(V95))), {'Prelude.Types.Right', V124} end end), ((begin (V141 = fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V138, V139, V140)) end end end end end), fun (V142) -> fun (V143) -> ((((V141('erased'))('erased'))(V142))(V143)) end end end((begin (V133 = fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> {'Prelude.Types.Right', (V129(V132))} end end end end end), fun (V134) -> fun (V135) -> ((((V133('erased'))('erased'))(V134))(V135)) end end end(fun (V126) -> {'Builtin.MkUnit'} end))))(V125)) end), fun (V145) -> begin (V146 = (V144(V145))), case V146 of {'Prelude.Types.Left', V147} -> {'Prelude.Types.Left', V147}; {'Prelude.Types.Right', V148} -> (begin (V150 = fun (V149) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end), V150 end(V145)) end end end end; {'Prelude.Types.Left', V151} -> fun (V152) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V5, V151}, V152)) end end), V153 end(V90)) end end end end end), V154 end(V49)) end end end end), V155 end(V44)) end end end end), V156 end(V35)) end end end end), V157 end(V25)) end end end end end), V158 end(V14)) end end end end), V159 end(V9)) end end end end.
'un--compileToSS'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirectives'(V0, {'Core.Options.Chez'}))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V254 = begin (V18 = ('un--findLibs'(V0, ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('Idris.Idris2.Builtin':'un--snd'(V10)) end))(V9))))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V253 = begin (V24 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V23) -> ('Idris.Idris2.Compiler.Common':'un--copyLib'(V23)) end, V22))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V252 = begin (V29 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V0, 0, 0, V3))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V251 = begin (V40 = case V33 of {'Compiler.Common.MkCompileData', V34, V35, V36, V37, V38, V39} -> V36 end), begin (V47 = ('Idris.Idris2.Core.CompileExpr':'un--forget'([], case V33 of {'Compiler.Common.MkCompileData', V41, V42, V43, V44, V45, V46} -> V41 end))), begin (V53 = begin (V48 = V0), fun (V49) -> begin (V52 = (begin (V50 = V48), fun (V51) -> ('erlang':'get'(V50)) end end(V49))), {'Prelude.Types.Right', V52} end end end), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V250 = begin (V58 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Scheme.Chez.Loaded'}, [<<"libc"/utf8>> | [<<"libc 6"/utf8>> | []]]))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V249 = begin (V63 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Scheme.Chez.Structs'}, []))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V248 = begin (V70 = fun (V68) -> begin (V69 = ('un--findChez'(V68))), {'Prelude.Types.Right', V69} end end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V247 = begin (V77 = fun (V75) -> begin (V76 = ('un--chezVersion'(V74, V75))), {'Prelude.Types.Right', V76} end end), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V246 = begin (V83 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V82) -> ('un--getFgnCall'(V0, V62, V67, V81, V82)) end, V40, []))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V245 = begin (V90 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V88) -> ('un--loadLib'(V0, V2, V88)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V89) -> ('Idris.Idris2.Builtin':'un--fst'(V89)) end, V87)), []))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V244 = begin (V100 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V95) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--getScheme'(V0, fun (V96) -> fun (V97) -> fun (V98) -> ('un--chezExtPrim'(V96, V97, V98)) end end end, fun (V99) -> ('un--chezString'(V99)) end, V95)) end, V40, []))), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V243 = begin (V113 = ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V110 = fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V108, V109)) end end end end), fun (V111) -> fun (V112) -> ((((V110('erased'))('erased'))(V111))(V112)) end end end(fun (V105) -> ('Idris.Idris2.Builtin':'un--snd'(V105)) end))(V87)), V104))))), begin (V118 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V114) -> fun (V115) -> fun (V116) -> ('un--chezExtPrim'(V114, V115, V116)) end end end, fun (V117) -> ('un--chezString'(V117)) end, 0, V47))), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V242 = begin (V123 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"chez/support.ss"/utf8>>))), fun (V124) -> begin (V125 = (V123(V124))), case V125 of {'Prelude.Types.Left', V126} -> {'Prelude.Types.Left', V126}; {'Prelude.Types.Right', V127} -> (begin (V241 = begin (V136 = ('Idris.Idris2.Compiler.Common':'un--getExtraRuntime'(((begin (V133 = fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V131, V132)) end end end end), fun (V134) -> fun (V135) -> ((((V133('erased'))('erased'))(V134))(V135)) end end end(fun (V128) -> ('Idris.Idris2.Builtin':'un--snd'(V128)) end))(V9))))), fun (V137) -> begin (V138 = (V136(V137))), case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> (begin (V240 = begin (V152 = <<('un--schHeader'(V74, ((begin (V146 = fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V144, V145)) end end end end), fun (V147) -> fun (V148) -> ((((V146('erased'))('erased'))(V147))(V148)) end end end(fun (V141) -> ('Idris.Idris2.Builtin':'un--snd'(V141)) end))(V22)), 1))/binary, <<V127/binary, <<V140/binary, <<V113/binary, <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V149) -> fun (V150) -> <<V149/binary, V150/binary>> end end, <<""/utf8>>}, fun (V151) -> V151 end, V94))/binary, <<<<"(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))\x{a}"/utf8>>/binary, <<V122/binary, ('un--schFooter'(V1, 1))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>), begin (V182 = fun (V153) -> begin (V181 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V154) -> fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V156, V157, V158)) end end end end end, fun (V159) -> fun (V160) -> fun (V161) -> V160 end end end, fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> begin (V167 = (V164(V166))), begin (V168 = (V165(V166))), (V167(V168)) end end end end end end end}, fun (V169) -> fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> begin (V174 = (V171(V173))), ((V172(V174))(V173)) end end end end end end, fun (V175) -> fun (V176) -> fun (V177) -> begin (V178 = (V176(V177))), (V178(V177)) end end end end}, fun (V179) -> fun (V180) -> V180 end end}, V4, V152))(V153))), {'Prelude.Types.Right', V181} end end), fun (V183) -> begin (V184 = (V182(V183))), case V184 of {'Prelude.Types.Left', V185} -> {'Prelude.Types.Left', V185}; {'Prelude.Types.Right', V186} -> (begin (V239 = case V186 of {'Prelude.Types.Right', V187} -> begin (V218 = fun (V188) -> begin (V217 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V191, V192, V193)) end end end end end, fun (V194) -> fun (V195) -> fun (V196) -> V195 end end end, fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> begin (V202 = (V199(V201))), begin (V203 = (V200(V201))), (V202(V203)) end end end end end end end}, fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> begin (V209 = (V206(V208))), ((V207(V209))(V208)) end end end end end end, fun (V210) -> fun (V211) -> fun (V212) -> begin (V213 = (V211(V212))), (V213(V212)) end end end end}, fun (V214) -> fun (V215) -> V215 end end}, V4, begin (V216 = 493), case ((V216 band 9223372036854775808) =/= 0) of 'true' -> (V216 bor -9223372036854775808); _ -> (V216 band 9223372036854775807) end end))(V188))), {'Prelude.Types.Right', V217} end end), ((begin (V234 = fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V231, V232, V233)) end end end end end), fun (V235) -> fun (V236) -> ((((V234('erased'))('erased'))(V235))(V236)) end end end((begin (V226 = fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> case V223 of {'Prelude.Types.Left', V224} -> {'Prelude.Types.Left', V224}; {'Prelude.Types.Right', V225} -> {'Prelude.Types.Right', (V222(V225))} end end end end end), fun (V227) -> fun (V228) -> ((((V226('erased'))('erased'))(V227))(V228)) end end end(fun (V219) -> {'Builtin.MkUnit'} end))))(V218)) end; {'Prelude.Types.Left', V237} -> fun (V238) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V4, V237}, V238)) end end), V239 end(V183)) end end end end end), V240 end(V137)) end end end end), V241 end(V124)) end end end end), V242 end(V119)) end end end end end), V243 end(V101)) end end end end), V244 end(V91)) end end end end), V245 end(V84)) end end end end), V246 end(V78)) end end end end), V247 end(V71)) end end end end), V248 end(V64)) end end end end), V249 end(V59)) end end end end), V250 end(V54)) end end end end end end), V251 end(V30)) end end end end), V252 end(V25)) end end end end), V253 end(V19)) end end end end), V254 end(V6)) end end end end.
'un--compileToSO'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, <<"compileChez"/utf8>>))), begin (V9 = <<<<"(parameterize ([optimize-level 3] "/utf8>>/binary, <<case V1 of 1 -> (begin (V7 = fun (V6) -> V6 end), fun (V8) -> (V7(V8)) end end(<<"[compile-profile #t] "/utf8>>)); 0 -> <<""/utf8>> end/binary, <<<<"[compile-file-message #f]) (compile-program "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V4))/binary, <<"))"/utf8>>/binary>>/binary>>/binary>>/binary>>), begin (V39 = fun (V10) -> begin (V38 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, V5, V9))(V10))), {'Prelude.Types.Right', V38} end end), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V157 = case V43 of {'Prelude.Types.Right', V44} -> begin (V94 = begin (V75 = fun (V45) -> begin (V74 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> V52 end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), begin (V60 = (V57(V58))), (V59(V60)) end end end end end end end}, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), ((V64(V66))(V65)) end end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V68(V69))), (V70(V69)) end end end end}, fun (V71) -> fun (V72) -> V72 end end}, V5, begin (V73 = 493), case ((V73 band 9223372036854775808) =/= 0) of 'true' -> (V73 bor -9223372036854775808); _ -> (V73 band 9223372036854775807) end end))(V45))), {'Prelude.Types.Right', V74} end end), ((begin (V91 = fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V88, V89, V90)) end end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end((begin (V83 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> {'Prelude.Types.Right', (V79(V82))} end end end end end), fun (V84) -> fun (V85) -> ((((V83('erased'))('erased'))(V84))(V85)) end end end(fun (V76) -> {'Builtin.MkUnit'} end))))(V75)) end), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V154 = begin (V147 = begin (V128 = fun (V99) -> begin (V127 = (('Idris.Idris2.Erlang.System.Escaped':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V102, V103, V104)) end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> V106 end end end, fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> begin (V113 = (V110(V112))), begin (V114 = (V111(V112))), (V113(V114)) end end end end end end end}, fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> begin (V120 = (V117(V119))), ((V118(V120))(V119)) end end end end end end, fun (V121) -> fun (V122) -> fun (V123) -> begin (V124 = (V122(V123))), (V124(V123)) end end end end}, fun (V125) -> fun (V126) -> V126 end end}, [V2 | [<<"--script"/utf8>> | [V5 | []]]]))(V99))), {'Prelude.Types.Right', V127} end end), ((begin (V144 = fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V141, V142, V143)) end end end end end), fun (V145) -> fun (V146) -> ((((V144('erased'))('erased'))(V145))(V146)) end end end((begin (V136 = fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> case V133 of {'Prelude.Types.Left', V134} -> {'Prelude.Types.Left', V134}; {'Prelude.Types.Right', V135} -> {'Prelude.Types.Right', (V132(V135))} end end end end end), fun (V137) -> fun (V138) -> ((((V136('erased'))('erased'))(V137))(V138)) end end end(fun (V129) -> {'Builtin.MkUnit'} end))))(V128)) end), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V153 = fun (V152) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end), V153 end(V148)) end end end end), V154 end(V95)) end end end end; {'Prelude.Types.Left', V155} -> fun (V156) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V5, V155}, V156)) end end), V157 end(V40)) end end end end end end.
'un--compileLibrary'(V0, V1, V2, V3, V4) -> begin (V7 = fun (V5) -> begin (V6 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Compiling to library is not supported.\x{a}"/utf8>>, V5))), {'Prelude.Types.Right', V6} end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V13 end(V8)) end end end end.
'un--compileExprWhole'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = <<V6/binary, <<"_app"/utf8>>/binary>>), begin (V8 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, V7))), begin (V30 = begin (V11 = fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V8, V9))), {'Prelude.Types.Right', V10} end end), ((begin (V27 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V24, V25, V26)) end end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end((begin (V19 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> {'Prelude.Types.Right', (V15(V18))} end end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V12) -> {'Builtin.MkUnit'} end))))(V11)) end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V198 = begin (V64 = fun (V35) -> begin (V63 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}))(V35))), {'Prelude.Types.Right', V63} end end), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V197 = case V68 of {'Prelude.Types.Just', V69} -> begin (V70 = ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V7, V6)), <<"ss"/utf8>>))), begin (V71 = ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V7, V6)), <<"so"/utf8>>))), begin (V72 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V69, V4)), V70))), begin (V75 = fun (V73) -> begin (V74 = ('un--findChez'(V73))), {'Prelude.Types.Right', V74} end end), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V192 = begin (V80 = ('Idris.Idris2.Core.Context':'un--getSession'(V1))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V191 = begin (V111 = case V84 of {'Core.Options.MkSessionOpts', V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110} -> V103 end), begin (V112 = ('un--compileToSS'(V1, case V0 of 1 -> V111; 0 -> 0 end, V8, V5, V72))), fun (V113) -> begin (V114 = (V112(V113))), case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> (begin (V190 = begin (V121 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, 2, fun () -> (begin (V118 = fun (V117) -> V117 end), fun (V119) -> (V118(V119)) end end(<<"Make SO"/utf8>>)) end, case V0 of 1 -> ('un--compileToSO'(V1, V111, V79, V8, V72)); 0 -> fun (V120) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end))), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V189 = begin (V126 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, V6))), begin (V127 = case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> ('un--makeShWindows'(V79, V126, V7, case V0 of 1 -> V71; 0 -> V70 end, <<"--program"/utf8>>)); 0 -> ('un--makeSh'(V126, V7, case V0 of 1 -> V71; 0 -> V70 end)) end), fun (V128) -> begin (V129 = (V127(V128))), case V129 of {'Prelude.Types.Left', V130} -> {'Prelude.Types.Left', V130}; {'Prelude.Types.Right', V131} -> (begin (V188 = begin (V181 = begin (V162 = fun (V132) -> begin (V161 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V135, V136, V137)) end end end end end, fun (V138) -> fun (V139) -> fun (V140) -> V139 end end end, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> begin (V146 = (V143(V145))), begin (V147 = (V144(V145))), (V146(V147)) end end end end end end end}, fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> begin (V153 = (V150(V152))), ((V151(V153))(V152)) end end end end end end, fun (V154) -> fun (V155) -> fun (V156) -> begin (V157 = (V155(V156))), (V157(V156)) end end end end}, fun (V158) -> fun (V159) -> V159 end end}, V126, begin (V160 = 493), case ((V160 band 9223372036854775808) =/= 0) of 'true' -> (V160 bor -9223372036854775808); _ -> (V160 band 9223372036854775807) end end))(V132))), {'Prelude.Types.Right', V161} end end), ((begin (V178 = fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V175, V176, V177)) end end end end end), fun (V179) -> fun (V180) -> ((((V178('erased'))('erased'))(V179))(V180)) end end end((begin (V170 = fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> case V167 of {'Prelude.Types.Left', V168} -> {'Prelude.Types.Left', V168}; {'Prelude.Types.Right', V169} -> {'Prelude.Types.Right', (V166(V169))} end end end end end), fun (V171) -> fun (V172) -> ((((V170('erased'))('erased'))(V171))(V172)) end end end(fun (V163) -> {'Builtin.MkUnit'} end))))(V162)) end), fun (V182) -> begin (V183 = (V181(V182))), case V183 of {'Prelude.Types.Left', V184} -> {'Prelude.Types.Left', V184}; {'Prelude.Types.Right', V185} -> (begin (V187 = fun (V186) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V126}} end), V187 end(V182)) end end end end), V188 end(V128)) end end end end end), V189 end(V122)) end end end end), V190 end(V113)) end end end end end), V191 end(V81)) end end end end), V192 end(V76)) end end end end end end end; {'Prelude.Types.Nothing'} -> fun (V193) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V195 = fun (V194) -> V194 end), fun (V196) -> (V195(V196)) end end(<<"Can\x{27}t get current directory"/utf8>>))}, V193)) end end), V197 end(V65)) end end end end), V198 end(V31)) end end end end end end.
'un--compileExprInc'(V0, V1, V2, V3, V4, V5, V6) -> begin (V12 = begin (V7 = V1), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V212 = case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V19, V20)) end end}, {'Core.Options.Chez'}, case V16 of {'Core.Context.MkDefs', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} -> V44 end)) of {'Prelude.Types.Just', V53} -> case V53 of {'Builtin.MkPair', V54, V55} -> begin (V56 = <<V6/binary, <<"_app"/utf8>>/binary>>), begin (V57 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, V56))), begin (V79 = begin (V60 = fun (V58) -> begin (V59 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V57, V58))), {'Prelude.Types.Right', V59} end end), ((begin (V76 = fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V73, V74, V75)) end end end end end), fun (V77) -> fun (V78) -> ((((V76('erased'))('erased'))(V77))(V78)) end end end((begin (V68 = fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> {'Prelude.Types.Right', (V64(V67))} end end end end end), fun (V69) -> fun (V70) -> ((((V68('erased'))('erased'))(V69))(V70)) end end end(fun (V61) -> {'Builtin.MkUnit'} end))))(V60)) end), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V203 = begin (V113 = fun (V84) -> begin (V112 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V87, V88, V89)) end end end end end, fun (V90) -> fun (V91) -> fun (V92) -> V91 end end end, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> begin (V98 = (V95(V97))), begin (V99 = (V96(V97))), (V98(V99)) end end end end end end end}, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> begin (V105 = (V102(V104))), ((V103(V105))(V104)) end end end end end end, fun (V106) -> fun (V107) -> fun (V108) -> begin (V109 = (V107(V108))), (V109(V108)) end end end end}, fun (V110) -> fun (V111) -> V111 end end}))(V84))), {'Prelude.Types.Right', V112} end end), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V202 = case V117 of {'Prelude.Types.Just', V118} -> begin (V119 = ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V56, V6)), <<"ss"/utf8>>))), begin (V120 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V118, V4)), V119))), begin (V123 = fun (V121) -> begin (V122 = ('un--findChez'(V121))), {'Prelude.Types.Right', V122} end end), fun (V124) -> begin (V125 = (V123(V124))), case V125 of {'Prelude.Types.Left', V126} -> {'Prelude.Types.Left', V126}; {'Prelude.Types.Right', V127} -> (begin (V197 = begin (V128 = ('un--compileToSSInc'(V1, V54, V55, V57, V5, V120))), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V196 = begin (V133 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, V6))), begin (V134 = case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> ('un--makeShWindows'(V127, V133, V56, V119, <<"--script"/utf8>>)); 0 -> ('un--makeSh'(V133, V56, V119)) end), fun (V135) -> begin (V136 = (V134(V135))), case V136 of {'Prelude.Types.Left', V137} -> {'Prelude.Types.Left', V137}; {'Prelude.Types.Right', V138} -> (begin (V195 = begin (V188 = begin (V169 = fun (V139) -> begin (V168 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V142, V143, V144)) end end end end end, fun (V145) -> fun (V146) -> fun (V147) -> V146 end end end, fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> begin (V153 = (V150(V152))), begin (V154 = (V151(V152))), (V153(V154)) end end end end end end end}, fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> begin (V160 = (V157(V159))), ((V158(V160))(V159)) end end end end end end, fun (V161) -> fun (V162) -> fun (V163) -> begin (V164 = (V162(V163))), (V164(V163)) end end end end}, fun (V165) -> fun (V166) -> V166 end end}, V133, begin (V167 = 493), case ((V167 band 9223372036854775808) =/= 0) of 'true' -> (V167 bor -9223372036854775808); _ -> (V167 band 9223372036854775807) end end))(V139))), {'Prelude.Types.Right', V168} end end), ((begin (V185 = fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V182, V183, V184)) end end end end end), fun (V186) -> fun (V187) -> ((((V185('erased'))('erased'))(V186))(V187)) end end end((begin (V177 = fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> {'Prelude.Types.Right', (V173(V176))} end end end end end), fun (V178) -> fun (V179) -> ((((V177('erased'))('erased'))(V178))(V179)) end end end(fun (V170) -> {'Builtin.MkUnit'} end))))(V169)) end), fun (V189) -> begin (V190 = (V188(V189))), case V190 of {'Prelude.Types.Left', V191} -> {'Prelude.Types.Left', V191}; {'Prelude.Types.Right', V192} -> (begin (V194 = fun (V193) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V133}} end), V194 end(V189)) end end end end), V195 end(V135)) end end end end end), V196 end(V129)) end end end end), V197 end(V124)) end end end end end end; {'Prelude.Types.Nothing'} -> fun (V198) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V200 = fun (V199) -> V199 end), fun (V201) -> (V200(V201)) end end(<<"Can\x{27}t get current directory"/utf8>>))}, V198)) end end), V202 end(V114)) end end end end), V203 end(V80)) end end end end end end end; {'Prelude.Types.Nothing'} -> begin (V206 = fun (V204) -> begin (V205 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Missing incremental compile data, reverting to whole program compilation\x{a}"/utf8>>, V204))), {'Prelude.Types.Right', V205} end end), fun (V207) -> begin (V208 = (V206(V207))), case V208 of {'Prelude.Types.Left', V209} -> {'Prelude.Types.Left', V209}; {'Prelude.Types.Right', V210} -> (begin (V211 = ('un--compileExprWhole'(V0, V1, V2, V3, V4, V5, V6))), V211 end(V207)) end end end end end), V212 end(V13)) end end end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--getSession'(V1))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V94 = case case case V11 of {'Core.Options.MkSessionOpts', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} -> V36 end of 1 -> 0; 0 -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V49)) end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V53, V54, V55, V56)) end end end end end end end, fun (V57) -> fun (V58) -> V58 end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V61, V62, V63)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V66, V67)) end end}, {'Core.Options.Chez'}, case V11 of {'Core.Options.MkSessionOpts', V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93} -> V91 end)) end of 1 -> ('un--compileExprInc'(V0, V1, V2, V3, V4, V5, V6)); 0 -> ('un--compileExprWhole'(V0, V1, V2, V3, V4, V5, V6)) end), V94 end(V8)) end end end end.
'un--codegenChez'() -> {'Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('un--compileExpr'(1, V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('un--executeExpr'(V6, V7, V8, V9)) end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('un--compileLibrary'(V10, V11, V12, V13, V14)) end end end end end, {'Prelude.Types.Just', fun (V15) -> fun (V16) -> fun (V17) -> ('un--incCompile'(V15, V16, V17)) end end end}, {'Prelude.Types.Just', <<"so"/utf8>>}}.
'un--chezVersion'(V0, V1) -> ('Idris.Idris2.Libraries.Data.Version':'un--parseVersion'(<<"9.5.2"/utf8>>)).
'un--chezString'(V0) -> <<('unicode':'characters_to_binary'([$\x{22} | []]))/binary, ('un--showChezString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), <<"\x{22}"/utf8>>))/binary>>.
'un--chezExtPrim'(V0, V1, V2) -> case V1 of {'Compiler.Scheme.Common.GetField'} -> case V2 of [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Core.CompileExpr.NmPrimVal', V5, V6} -> case V6 of {'Core.TT.Str', V7} -> case V4 of [E32 | E33] -> (fun (V8, V9) -> case V9 of [E44 | E45] -> (fun (V10, V11) -> case V11 of [E56 | E57] -> (fun (V12, V13) -> case V13 of [E68 | E69] -> (fun (V14, V15) -> case V14 of {'Core.CompileExpr.NmPrimVal', V16, V17} -> case V17 of {'Core.TT.Str', V18} -> case V15 of [E100 | E101] -> (fun (V19, V20) -> case V20 of [] -> begin (V25 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V21) -> fun (V22) -> fun (V23) -> ('un--chezExtPrim'(V21, V22, V23)) end end end, fun (V24) -> ('un--chezString'(V24)) end, 0, V12))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> {'Prelude.Types.Right', <<<<"(ftype-ref "/utf8>>/binary, <<V7/binary, <<<<" ("/utf8>>/binary, <<V18/binary, <<<<") "/utf8>>/binary, <<V29/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V31 end(V26)) end end end end; _ -> case V4 of [E102 | E103] -> (fun (V32, V33) -> case V33 of [E104 | E105] -> (fun (V34, V35) -> case V35 of [E106 | E107] -> (fun (V36, V37) -> case V37 of [E108 | E109] -> (fun (V38, V39) -> case V39 of [E110 | E111] -> (fun (V40, V41) -> case V41 of [] -> fun (V42) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V43) -> fun (V44) -> fun (V45) -> ('un--chezExtPrim'(V43, V44, V45)) end end end, fun (V46) -> ('un--chezString'(V46)) end, V0, V1, V2)) end end(E110, E111)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V47) -> fun (V48) -> fun (V49) -> ('un--chezExtPrim'(V47, V48, V49)) end end end, fun (V50) -> ('un--chezString'(V50)) end, V0, V1, V2)) end end(E108, E109)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V51) -> fun (V52) -> fun (V53) -> ('un--chezExtPrim'(V51, V52, V53)) end end end, fun (V54) -> ('un--chezString'(V54)) end, V0, V1, V2)) end end(E106, E107)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V55) -> fun (V56) -> fun (V57) -> ('un--chezExtPrim'(V55, V56, V57)) end end end, fun (V58) -> ('un--chezString'(V58)) end, V0, V1, V2)) end end(E104, E105)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V59) -> fun (V60) -> fun (V61) -> ('un--chezExtPrim'(V59, V60, V61)) end end end, fun (V62) -> ('un--chezString'(V62)) end, V0, V1, V2)) end end(E102, E103)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V63) -> fun (V64) -> fun (V65) -> ('un--chezExtPrim'(V63, V64, V65)) end end end, fun (V66) -> ('un--chezString'(V66)) end, V0, V1, V2)) end end end(E100, E101)); _ -> case V4 of [E90 | E91] -> (fun (V67, V68) -> case V68 of [E92 | E93] -> (fun (V69, V70) -> case V70 of [E94 | E95] -> (fun (V71, V72) -> case V72 of [E96 | E97] -> (fun (V73, V74) -> case V74 of [E98 | E99] -> (fun (V75, V76) -> case V76 of [] -> fun (V77) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V78) -> fun (V79) -> fun (V80) -> ('un--chezExtPrim'(V78, V79, V80)) end end end, fun (V81) -> ('un--chezString'(V81)) end, V0, V1, V2)) end end(E98, E99)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V82) -> fun (V83) -> fun (V84) -> ('un--chezExtPrim'(V82, V83, V84)) end end end, fun (V85) -> ('un--chezString'(V85)) end, V0, V1, V2)) end end(E96, E97)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V86) -> fun (V87) -> fun (V88) -> ('un--chezExtPrim'(V86, V87, V88)) end end end, fun (V89) -> ('un--chezString'(V89)) end, V0, V1, V2)) end end(E94, E95)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V90) -> fun (V91) -> fun (V92) -> ('un--chezExtPrim'(V90, V91, V92)) end end end, fun (V93) -> ('un--chezString'(V93)) end, V0, V1, V2)) end end(E92, E93)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V94) -> fun (V95) -> fun (V96) -> ('un--chezExtPrim'(V94, V95, V96)) end end end, fun (V97) -> ('un--chezString'(V97)) end, V0, V1, V2)) end end(E90, E91)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V98) -> fun (V99) -> fun (V100) -> ('un--chezExtPrim'(V98, V99, V100)) end end end, fun (V101) -> ('un--chezString'(V101)) end, V0, V1, V2)) end end; _ -> case V4 of [E80 | E81] -> (fun (V102, V103) -> case V103 of [E82 | E83] -> (fun (V104, V105) -> case V105 of [E84 | E85] -> (fun (V106, V107) -> case V107 of [E86 | E87] -> (fun (V108, V109) -> case V109 of [E88 | E89] -> (fun (V110, V111) -> case V111 of [] -> fun (V112) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V113) -> fun (V114) -> fun (V115) -> ('un--chezExtPrim'(V113, V114, V115)) end end end, fun (V116) -> ('un--chezString'(V116)) end, V0, V1, V2)) end end(E88, E89)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V117) -> fun (V118) -> fun (V119) -> ('un--chezExtPrim'(V117, V118, V119)) end end end, fun (V120) -> ('un--chezString'(V120)) end, V0, V1, V2)) end end(E86, E87)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V121) -> fun (V122) -> fun (V123) -> ('un--chezExtPrim'(V121, V122, V123)) end end end, fun (V124) -> ('un--chezString'(V124)) end, V0, V1, V2)) end end(E84, E85)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V125) -> fun (V126) -> fun (V127) -> ('un--chezExtPrim'(V125, V126, V127)) end end end, fun (V128) -> ('un--chezString'(V128)) end, V0, V1, V2)) end end(E82, E83)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V129) -> fun (V130) -> fun (V131) -> ('un--chezExtPrim'(V129, V130, V131)) end end end, fun (V132) -> ('un--chezString'(V132)) end, V0, V1, V2)) end end(E80, E81)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V133) -> fun (V134) -> fun (V135) -> ('un--chezExtPrim'(V133, V134, V135)) end end end, fun (V136) -> ('un--chezString'(V136)) end, V0, V1, V2)) end end; _ -> case V4 of [E70 | E71] -> (fun (V137, V138) -> case V138 of [E72 | E73] -> (fun (V139, V140) -> case V140 of [E74 | E75] -> (fun (V141, V142) -> case V142 of [E76 | E77] -> (fun (V143, V144) -> case V144 of [E78 | E79] -> (fun (V145, V146) -> case V146 of [] -> fun (V147) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V148) -> fun (V149) -> fun (V150) -> ('un--chezExtPrim'(V148, V149, V150)) end end end, fun (V151) -> ('un--chezString'(V151)) end, V0, V1, V2)) end end(E78, E79)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V152) -> fun (V153) -> fun (V154) -> ('un--chezExtPrim'(V152, V153, V154)) end end end, fun (V155) -> ('un--chezString'(V155)) end, V0, V1, V2)) end end(E76, E77)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V156) -> fun (V157) -> fun (V158) -> ('un--chezExtPrim'(V156, V157, V158)) end end end, fun (V159) -> ('un--chezString'(V159)) end, V0, V1, V2)) end end(E74, E75)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V160) -> fun (V161) -> fun (V162) -> ('un--chezExtPrim'(V160, V161, V162)) end end end, fun (V163) -> ('un--chezString'(V163)) end, V0, V1, V2)) end end(E72, E73)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V164) -> fun (V165) -> fun (V166) -> ('un--chezExtPrim'(V164, V165, V166)) end end end, fun (V167) -> ('un--chezString'(V167)) end, V0, V1, V2)) end end(E70, E71)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V168) -> fun (V169) -> fun (V170) -> ('un--chezExtPrim'(V168, V169, V170)) end end end, fun (V171) -> ('un--chezString'(V171)) end, V0, V1, V2)) end end end(E68, E69)); _ -> case V4 of [E58 | E59] -> (fun (V172, V173) -> case V173 of [E60 | E61] -> (fun (V174, V175) -> case V175 of [E62 | E63] -> (fun (V176, V177) -> case V177 of [E64 | E65] -> (fun (V178, V179) -> case V179 of [E66 | E67] -> (fun (V180, V181) -> case V181 of [] -> fun (V182) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V183) -> fun (V184) -> fun (V185) -> ('un--chezExtPrim'(V183, V184, V185)) end end end, fun (V186) -> ('un--chezString'(V186)) end, V0, V1, V2)) end end(E66, E67)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V187) -> fun (V188) -> fun (V189) -> ('un--chezExtPrim'(V187, V188, V189)) end end end, fun (V190) -> ('un--chezString'(V190)) end, V0, V1, V2)) end end(E64, E65)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V191) -> fun (V192) -> fun (V193) -> ('un--chezExtPrim'(V191, V192, V193)) end end end, fun (V194) -> ('un--chezString'(V194)) end, V0, V1, V2)) end end(E62, E63)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V195) -> fun (V196) -> fun (V197) -> ('un--chezExtPrim'(V195, V196, V197)) end end end, fun (V198) -> ('un--chezString'(V198)) end, V0, V1, V2)) end end(E60, E61)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V199) -> fun (V200) -> fun (V201) -> ('un--chezExtPrim'(V199, V200, V201)) end end end, fun (V202) -> ('un--chezString'(V202)) end, V0, V1, V2)) end end(E58, E59)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V203) -> fun (V204) -> fun (V205) -> ('un--chezExtPrim'(V203, V204, V205)) end end end, fun (V206) -> ('un--chezString'(V206)) end, V0, V1, V2)) end end end(E56, E57)); _ -> case V4 of [E46 | E47] -> (fun (V207, V208) -> case V208 of [E48 | E49] -> (fun (V209, V210) -> case V210 of [E50 | E51] -> (fun (V211, V212) -> case V212 of [E52 | E53] -> (fun (V213, V214) -> case V214 of [E54 | E55] -> (fun (V215, V216) -> case V216 of [] -> fun (V217) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V218) -> fun (V219) -> fun (V220) -> ('un--chezExtPrim'(V218, V219, V220)) end end end, fun (V221) -> ('un--chezString'(V221)) end, V0, V1, V2)) end end(E54, E55)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V222) -> fun (V223) -> fun (V224) -> ('un--chezExtPrim'(V222, V223, V224)) end end end, fun (V225) -> ('un--chezString'(V225)) end, V0, V1, V2)) end end(E52, E53)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V226) -> fun (V227) -> fun (V228) -> ('un--chezExtPrim'(V226, V227, V228)) end end end, fun (V229) -> ('un--chezString'(V229)) end, V0, V1, V2)) end end(E50, E51)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V230) -> fun (V231) -> fun (V232) -> ('un--chezExtPrim'(V230, V231, V232)) end end end, fun (V233) -> ('un--chezString'(V233)) end, V0, V1, V2)) end end(E48, E49)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V234) -> fun (V235) -> fun (V236) -> ('un--chezExtPrim'(V234, V235, V236)) end end end, fun (V237) -> ('un--chezString'(V237)) end, V0, V1, V2)) end end(E46, E47)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V238) -> fun (V239) -> fun (V240) -> ('un--chezExtPrim'(V238, V239, V240)) end end end, fun (V241) -> ('un--chezString'(V241)) end, V0, V1, V2)) end end end(E44, E45)); _ -> case V4 of [E34 | E35] -> (fun (V242, V243) -> case V243 of [E36 | E37] -> (fun (V244, V245) -> case V245 of [E38 | E39] -> (fun (V246, V247) -> case V247 of [E40 | E41] -> (fun (V248, V249) -> case V249 of [E42 | E43] -> (fun (V250, V251) -> case V251 of [] -> fun (V252) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V253) -> fun (V254) -> fun (V255) -> ('un--chezExtPrim'(V253, V254, V255)) end end end, fun (V256) -> ('un--chezString'(V256)) end, V0, V1, V2)) end end(E42, E43)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V257) -> fun (V258) -> fun (V259) -> ('un--chezExtPrim'(V257, V258, V259)) end end end, fun (V260) -> ('un--chezString'(V260)) end, V0, V1, V2)) end end(E40, E41)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V261) -> fun (V262) -> fun (V263) -> ('un--chezExtPrim'(V261, V262, V263)) end end end, fun (V264) -> ('un--chezString'(V264)) end, V0, V1, V2)) end end(E38, E39)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V265) -> fun (V266) -> fun (V267) -> ('un--chezExtPrim'(V265, V266, V267)) end end end, fun (V268) -> ('un--chezString'(V268)) end, V0, V1, V2)) end end(E36, E37)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V269) -> fun (V270) -> fun (V271) -> ('un--chezExtPrim'(V269, V270, V271)) end end end, fun (V272) -> ('un--chezString'(V272)) end, V0, V1, V2)) end end(E34, E35)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V273) -> fun (V274) -> fun (V275) -> ('un--chezExtPrim'(V273, V274, V275)) end end end, fun (V276) -> ('un--chezString'(V276)) end, V0, V1, V2)) end end end(E32, E33)); _ -> case V4 of [E22 | E23] -> (fun (V277, V278) -> case V278 of [E24 | E25] -> (fun (V279, V280) -> case V280 of [E26 | E27] -> (fun (V281, V282) -> case V282 of [E28 | E29] -> (fun (V283, V284) -> case V284 of [E30 | E31] -> (fun (V285, V286) -> case V286 of [] -> fun (V287) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V288) -> fun (V289) -> fun (V290) -> ('un--chezExtPrim'(V288, V289, V290)) end end end, fun (V291) -> ('un--chezString'(V291)) end, V0, V1, V2)) end end(E30, E31)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V292) -> fun (V293) -> fun (V294) -> ('un--chezExtPrim'(V292, V293, V294)) end end end, fun (V295) -> ('un--chezString'(V295)) end, V0, V1, V2)) end end(E28, E29)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V296) -> fun (V297) -> fun (V298) -> ('un--chezExtPrim'(V296, V297, V298)) end end end, fun (V299) -> ('un--chezString'(V299)) end, V0, V1, V2)) end end(E26, E27)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V300) -> fun (V301) -> fun (V302) -> ('un--chezExtPrim'(V300, V301, V302)) end end end, fun (V303) -> ('un--chezString'(V303)) end, V0, V1, V2)) end end(E24, E25)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V304) -> fun (V305) -> fun (V306) -> ('un--chezExtPrim'(V304, V305, V306)) end end end, fun (V307) -> ('un--chezString'(V307)) end, V0, V1, V2)) end end(E22, E23)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V308) -> fun (V309) -> fun (V310) -> ('un--chezExtPrim'(V308, V309, V310)) end end end, fun (V311) -> ('un--chezString'(V311)) end, V0, V1, V2)) end end; _ -> case V4 of [E12 | E13] -> (fun (V312, V313) -> case V313 of [E14 | E15] -> (fun (V314, V315) -> case V315 of [E16 | E17] -> (fun (V316, V317) -> case V317 of [E18 | E19] -> (fun (V318, V319) -> case V319 of [E20 | E21] -> (fun (V320, V321) -> case V321 of [] -> fun (V322) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V323) -> fun (V324) -> fun (V325) -> ('un--chezExtPrim'(V323, V324, V325)) end end end, fun (V326) -> ('un--chezString'(V326)) end, V0, V1, V2)) end end(E20, E21)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V327) -> fun (V328) -> fun (V329) -> ('un--chezExtPrim'(V327, V328, V329)) end end end, fun (V330) -> ('un--chezString'(V330)) end, V0, V1, V2)) end end(E18, E19)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V331) -> fun (V332) -> fun (V333) -> ('un--chezExtPrim'(V331, V332, V333)) end end end, fun (V334) -> ('un--chezString'(V334)) end, V0, V1, V2)) end end(E16, E17)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V335) -> fun (V336) -> fun (V337) -> ('un--chezExtPrim'(V335, V336, V337)) end end end, fun (V338) -> ('un--chezString'(V338)) end, V0, V1, V2)) end end(E14, E15)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V339) -> fun (V340) -> fun (V341) -> ('un--chezExtPrim'(V339, V340, V341)) end end end, fun (V342) -> ('un--chezString'(V342)) end, V0, V1, V2)) end end(E12, E13)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V343) -> fun (V344) -> fun (V345) -> ('un--chezExtPrim'(V343, V344, V345)) end end end, fun (V346) -> ('un--chezString'(V346)) end, V0, V1, V2)) end end; _ -> case V4 of [E2 | E3] -> (fun (V347, V348) -> case V348 of [E4 | E5] -> (fun (V349, V350) -> case V350 of [E6 | E7] -> (fun (V351, V352) -> case V352 of [E8 | E9] -> (fun (V353, V354) -> case V354 of [E10 | E11] -> (fun (V355, V356) -> case V356 of [] -> fun (V357) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad getField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V358) -> fun (V359) -> fun (V360) -> ('un--chezExtPrim'(V358, V359, V360)) end end end, fun (V361) -> ('un--chezString'(V361)) end, V0, V1, V2)) end end(E10, E11)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V362) -> fun (V363) -> fun (V364) -> ('un--chezExtPrim'(V362, V363, V364)) end end end, fun (V365) -> ('un--chezString'(V365)) end, V0, V1, V2)) end end(E8, E9)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V366) -> fun (V367) -> fun (V368) -> ('un--chezExtPrim'(V366, V367, V368)) end end end, fun (V369) -> ('un--chezString'(V369)) end, V0, V1, V2)) end end(E6, E7)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V370) -> fun (V371) -> fun (V372) -> ('un--chezExtPrim'(V370, V371, V372)) end end end, fun (V373) -> ('un--chezString'(V373)) end, V0, V1, V2)) end end(E4, E5)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V374) -> fun (V375) -> fun (V376) -> ('un--chezExtPrim'(V374, V375, V376)) end end end, fun (V377) -> ('un--chezString'(V377)) end, V0, V1, V2)) end end(E2, E3)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V378) -> fun (V379) -> fun (V380) -> ('un--chezExtPrim'(V378, V379, V380)) end end end, fun (V381) -> ('un--chezString'(V381)) end, V0, V1, V2)) end end end(E0, E1)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V382) -> fun (V383) -> fun (V384) -> ('un--chezExtPrim'(V382, V383, V384)) end end end, fun (V385) -> ('un--chezString'(V385)) end, V0, V1, V2)) end; {'Compiler.Scheme.Common.SetField'} -> case V2 of [E112 | E113] -> (fun (V386, V387) -> case V386 of {'Core.CompileExpr.NmPrimVal', V388, V389} -> case V389 of {'Core.TT.Str', V390} -> case V387 of [E156 | E157] -> (fun (V391, V392) -> case V392 of [E172 | E173] -> (fun (V393, V394) -> case V394 of [E188 | E189] -> (fun (V395, V396) -> case V396 of [E204 | E205] -> (fun (V397, V398) -> case V397 of {'Core.CompileExpr.NmPrimVal', V399, V400} -> case V400 of {'Core.TT.Str', V401} -> case V398 of [E248 | E249] -> (fun (V402, V403) -> case V403 of [E264 | E265] -> (fun (V404, V405) -> case V405 of [E280 | E281] -> (fun (V406, V407) -> case V407 of [] -> begin (V412 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V408) -> fun (V409) -> fun (V410) -> ('un--chezExtPrim'(V408, V409, V410)) end end end, fun (V411) -> ('un--chezString'(V411)) end, 0, V395))), fun (V413) -> begin (V414 = (V412(V413))), case V414 of {'Prelude.Types.Left', V415} -> {'Prelude.Types.Left', V415}; {'Prelude.Types.Right', V416} -> (begin (V428 = begin (V421 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V417) -> fun (V418) -> fun (V419) -> ('un--chezExtPrim'(V417, V418, V419)) end end end, fun (V420) -> ('un--chezString'(V420)) end, 0, V404))), fun (V422) -> begin (V423 = (V421(V422))), case V423 of {'Prelude.Types.Left', V424} -> {'Prelude.Types.Left', V424}; {'Prelude.Types.Right', V425} -> (begin (V427 = fun (V426) -> {'Prelude.Types.Right', <<<<"(ftype-set! "/utf8>>/binary, <<V390/binary, <<<<" ("/utf8>>/binary, <<V401/binary, <<<<") "/utf8>>/binary, <<V416/binary, <<<<" "/utf8>>/binary, <<V425/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V427 end(V422)) end end end end), V428 end(V413)) end end end end; _ -> case V387 of [E282 | E283] -> (fun (V429, V430) -> case V430 of [E284 | E285] -> (fun (V431, V432) -> case V432 of [E286 | E287] -> (fun (V433, V434) -> case V434 of [E288 | E289] -> (fun (V435, V436) -> case V436 of [E290 | E291] -> (fun (V437, V438) -> case V438 of [E292 | E293] -> (fun (V439, V440) -> case V440 of [E294 | E295] -> (fun (V441, V442) -> case V442 of [] -> fun (V443) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V444) -> fun (V445) -> fun (V446) -> ('un--chezExtPrim'(V444, V445, V446)) end end end, fun (V447) -> ('un--chezString'(V447)) end, V0, V1, V2)) end end(E294, E295)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V448) -> fun (V449) -> fun (V450) -> ('un--chezExtPrim'(V448, V449, V450)) end end end, fun (V451) -> ('un--chezString'(V451)) end, V0, V1, V2)) end end(E292, E293)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V452) -> fun (V453) -> fun (V454) -> ('un--chezExtPrim'(V452, V453, V454)) end end end, fun (V455) -> ('un--chezString'(V455)) end, V0, V1, V2)) end end(E290, E291)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V456) -> fun (V457) -> fun (V458) -> ('un--chezExtPrim'(V456, V457, V458)) end end end, fun (V459) -> ('un--chezString'(V459)) end, V0, V1, V2)) end end(E288, E289)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V460) -> fun (V461) -> fun (V462) -> ('un--chezExtPrim'(V460, V461, V462)) end end end, fun (V463) -> ('un--chezString'(V463)) end, V0, V1, V2)) end end(E286, E287)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V464) -> fun (V465) -> fun (V466) -> ('un--chezExtPrim'(V464, V465, V466)) end end end, fun (V467) -> ('un--chezString'(V467)) end, V0, V1, V2)) end end(E284, E285)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V468) -> fun (V469) -> fun (V470) -> ('un--chezExtPrim'(V468, V469, V470)) end end end, fun (V471) -> ('un--chezString'(V471)) end, V0, V1, V2)) end end(E282, E283)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V472) -> fun (V473) -> fun (V474) -> ('un--chezExtPrim'(V472, V473, V474)) end end end, fun (V475) -> ('un--chezString'(V475)) end, V0, V1, V2)) end end end(E280, E281)); _ -> case V387 of [E266 | E267] -> (fun (V476, V477) -> case V477 of [E268 | E269] -> (fun (V478, V479) -> case V479 of [E270 | E271] -> (fun (V480, V481) -> case V481 of [E272 | E273] -> (fun (V482, V483) -> case V483 of [E274 | E275] -> (fun (V484, V485) -> case V485 of [E276 | E277] -> (fun (V486, V487) -> case V487 of [E278 | E279] -> (fun (V488, V489) -> case V489 of [] -> fun (V490) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V491) -> fun (V492) -> fun (V493) -> ('un--chezExtPrim'(V491, V492, V493)) end end end, fun (V494) -> ('un--chezString'(V494)) end, V0, V1, V2)) end end(E278, E279)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V495) -> fun (V496) -> fun (V497) -> ('un--chezExtPrim'(V495, V496, V497)) end end end, fun (V498) -> ('un--chezString'(V498)) end, V0, V1, V2)) end end(E276, E277)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V499) -> fun (V500) -> fun (V501) -> ('un--chezExtPrim'(V499, V500, V501)) end end end, fun (V502) -> ('un--chezString'(V502)) end, V0, V1, V2)) end end(E274, E275)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V503) -> fun (V504) -> fun (V505) -> ('un--chezExtPrim'(V503, V504, V505)) end end end, fun (V506) -> ('un--chezString'(V506)) end, V0, V1, V2)) end end(E272, E273)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V507) -> fun (V508) -> fun (V509) -> ('un--chezExtPrim'(V507, V508, V509)) end end end, fun (V510) -> ('un--chezString'(V510)) end, V0, V1, V2)) end end(E270, E271)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V511) -> fun (V512) -> fun (V513) -> ('un--chezExtPrim'(V511, V512, V513)) end end end, fun (V514) -> ('un--chezString'(V514)) end, V0, V1, V2)) end end(E268, E269)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V515) -> fun (V516) -> fun (V517) -> ('un--chezExtPrim'(V515, V516, V517)) end end end, fun (V518) -> ('un--chezString'(V518)) end, V0, V1, V2)) end end(E266, E267)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V519) -> fun (V520) -> fun (V521) -> ('un--chezExtPrim'(V519, V520, V521)) end end end, fun (V522) -> ('un--chezString'(V522)) end, V0, V1, V2)) end end end(E264, E265)); _ -> case V387 of [E250 | E251] -> (fun (V523, V524) -> case V524 of [E252 | E253] -> (fun (V525, V526) -> case V526 of [E254 | E255] -> (fun (V527, V528) -> case V528 of [E256 | E257] -> (fun (V529, V530) -> case V530 of [E258 | E259] -> (fun (V531, V532) -> case V532 of [E260 | E261] -> (fun (V533, V534) -> case V534 of [E262 | E263] -> (fun (V535, V536) -> case V536 of [] -> fun (V537) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V538) -> fun (V539) -> fun (V540) -> ('un--chezExtPrim'(V538, V539, V540)) end end end, fun (V541) -> ('un--chezString'(V541)) end, V0, V1, V2)) end end(E262, E263)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V542) -> fun (V543) -> fun (V544) -> ('un--chezExtPrim'(V542, V543, V544)) end end end, fun (V545) -> ('un--chezString'(V545)) end, V0, V1, V2)) end end(E260, E261)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V546) -> fun (V547) -> fun (V548) -> ('un--chezExtPrim'(V546, V547, V548)) end end end, fun (V549) -> ('un--chezString'(V549)) end, V0, V1, V2)) end end(E258, E259)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V550) -> fun (V551) -> fun (V552) -> ('un--chezExtPrim'(V550, V551, V552)) end end end, fun (V553) -> ('un--chezString'(V553)) end, V0, V1, V2)) end end(E256, E257)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V554) -> fun (V555) -> fun (V556) -> ('un--chezExtPrim'(V554, V555, V556)) end end end, fun (V557) -> ('un--chezString'(V557)) end, V0, V1, V2)) end end(E254, E255)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V558) -> fun (V559) -> fun (V560) -> ('un--chezExtPrim'(V558, V559, V560)) end end end, fun (V561) -> ('un--chezString'(V561)) end, V0, V1, V2)) end end(E252, E253)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V562) -> fun (V563) -> fun (V564) -> ('un--chezExtPrim'(V562, V563, V564)) end end end, fun (V565) -> ('un--chezString'(V565)) end, V0, V1, V2)) end end(E250, E251)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V566) -> fun (V567) -> fun (V568) -> ('un--chezExtPrim'(V566, V567, V568)) end end end, fun (V569) -> ('un--chezString'(V569)) end, V0, V1, V2)) end end end(E248, E249)); _ -> case V387 of [E234 | E235] -> (fun (V570, V571) -> case V571 of [E236 | E237] -> (fun (V572, V573) -> case V573 of [E238 | E239] -> (fun (V574, V575) -> case V575 of [E240 | E241] -> (fun (V576, V577) -> case V577 of [E242 | E243] -> (fun (V578, V579) -> case V579 of [E244 | E245] -> (fun (V580, V581) -> case V581 of [E246 | E247] -> (fun (V582, V583) -> case V583 of [] -> fun (V584) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V585) -> fun (V586) -> fun (V587) -> ('un--chezExtPrim'(V585, V586, V587)) end end end, fun (V588) -> ('un--chezString'(V588)) end, V0, V1, V2)) end end(E246, E247)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V589) -> fun (V590) -> fun (V591) -> ('un--chezExtPrim'(V589, V590, V591)) end end end, fun (V592) -> ('un--chezString'(V592)) end, V0, V1, V2)) end end(E244, E245)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V593) -> fun (V594) -> fun (V595) -> ('un--chezExtPrim'(V593, V594, V595)) end end end, fun (V596) -> ('un--chezString'(V596)) end, V0, V1, V2)) end end(E242, E243)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V597) -> fun (V598) -> fun (V599) -> ('un--chezExtPrim'(V597, V598, V599)) end end end, fun (V600) -> ('un--chezString'(V600)) end, V0, V1, V2)) end end(E240, E241)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V601) -> fun (V602) -> fun (V603) -> ('un--chezExtPrim'(V601, V602, V603)) end end end, fun (V604) -> ('un--chezString'(V604)) end, V0, V1, V2)) end end(E238, E239)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V605) -> fun (V606) -> fun (V607) -> ('un--chezExtPrim'(V605, V606, V607)) end end end, fun (V608) -> ('un--chezString'(V608)) end, V0, V1, V2)) end end(E236, E237)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V609) -> fun (V610) -> fun (V611) -> ('un--chezExtPrim'(V609, V610, V611)) end end end, fun (V612) -> ('un--chezString'(V612)) end, V0, V1, V2)) end end(E234, E235)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V613) -> fun (V614) -> fun (V615) -> ('un--chezExtPrim'(V613, V614, V615)) end end end, fun (V616) -> ('un--chezString'(V616)) end, V0, V1, V2)) end end; _ -> case V387 of [E220 | E221] -> (fun (V617, V618) -> case V618 of [E222 | E223] -> (fun (V619, V620) -> case V620 of [E224 | E225] -> (fun (V621, V622) -> case V622 of [E226 | E227] -> (fun (V623, V624) -> case V624 of [E228 | E229] -> (fun (V625, V626) -> case V626 of [E230 | E231] -> (fun (V627, V628) -> case V628 of [E232 | E233] -> (fun (V629, V630) -> case V630 of [] -> fun (V631) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V632) -> fun (V633) -> fun (V634) -> ('un--chezExtPrim'(V632, V633, V634)) end end end, fun (V635) -> ('un--chezString'(V635)) end, V0, V1, V2)) end end(E232, E233)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V636) -> fun (V637) -> fun (V638) -> ('un--chezExtPrim'(V636, V637, V638)) end end end, fun (V639) -> ('un--chezString'(V639)) end, V0, V1, V2)) end end(E230, E231)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V640) -> fun (V641) -> fun (V642) -> ('un--chezExtPrim'(V640, V641, V642)) end end end, fun (V643) -> ('un--chezString'(V643)) end, V0, V1, V2)) end end(E228, E229)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V644) -> fun (V645) -> fun (V646) -> ('un--chezExtPrim'(V644, V645, V646)) end end end, fun (V647) -> ('un--chezString'(V647)) end, V0, V1, V2)) end end(E226, E227)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V648) -> fun (V649) -> fun (V650) -> ('un--chezExtPrim'(V648, V649, V650)) end end end, fun (V651) -> ('un--chezString'(V651)) end, V0, V1, V2)) end end(E224, E225)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V652) -> fun (V653) -> fun (V654) -> ('un--chezExtPrim'(V652, V653, V654)) end end end, fun (V655) -> ('un--chezString'(V655)) end, V0, V1, V2)) end end(E222, E223)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V656) -> fun (V657) -> fun (V658) -> ('un--chezExtPrim'(V656, V657, V658)) end end end, fun (V659) -> ('un--chezString'(V659)) end, V0, V1, V2)) end end(E220, E221)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V660) -> fun (V661) -> fun (V662) -> ('un--chezExtPrim'(V660, V661, V662)) end end end, fun (V663) -> ('un--chezString'(V663)) end, V0, V1, V2)) end end; _ -> case V387 of [E206 | E207] -> (fun (V664, V665) -> case V665 of [E208 | E209] -> (fun (V666, V667) -> case V667 of [E210 | E211] -> (fun (V668, V669) -> case V669 of [E212 | E213] -> (fun (V670, V671) -> case V671 of [E214 | E215] -> (fun (V672, V673) -> case V673 of [E216 | E217] -> (fun (V674, V675) -> case V675 of [E218 | E219] -> (fun (V676, V677) -> case V677 of [] -> fun (V678) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V679) -> fun (V680) -> fun (V681) -> ('un--chezExtPrim'(V679, V680, V681)) end end end, fun (V682) -> ('un--chezString'(V682)) end, V0, V1, V2)) end end(E218, E219)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V683) -> fun (V684) -> fun (V685) -> ('un--chezExtPrim'(V683, V684, V685)) end end end, fun (V686) -> ('un--chezString'(V686)) end, V0, V1, V2)) end end(E216, E217)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V687) -> fun (V688) -> fun (V689) -> ('un--chezExtPrim'(V687, V688, V689)) end end end, fun (V690) -> ('un--chezString'(V690)) end, V0, V1, V2)) end end(E214, E215)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V691) -> fun (V692) -> fun (V693) -> ('un--chezExtPrim'(V691, V692, V693)) end end end, fun (V694) -> ('un--chezString'(V694)) end, V0, V1, V2)) end end(E212, E213)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V695) -> fun (V696) -> fun (V697) -> ('un--chezExtPrim'(V695, V696, V697)) end end end, fun (V698) -> ('un--chezString'(V698)) end, V0, V1, V2)) end end(E210, E211)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V699) -> fun (V700) -> fun (V701) -> ('un--chezExtPrim'(V699, V700, V701)) end end end, fun (V702) -> ('un--chezString'(V702)) end, V0, V1, V2)) end end(E208, E209)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V703) -> fun (V704) -> fun (V705) -> ('un--chezExtPrim'(V703, V704, V705)) end end end, fun (V706) -> ('un--chezString'(V706)) end, V0, V1, V2)) end end(E206, E207)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V707) -> fun (V708) -> fun (V709) -> ('un--chezExtPrim'(V707, V708, V709)) end end end, fun (V710) -> ('un--chezString'(V710)) end, V0, V1, V2)) end end end(E204, E205)); _ -> case V387 of [E190 | E191] -> (fun (V711, V712) -> case V712 of [E192 | E193] -> (fun (V713, V714) -> case V714 of [E194 | E195] -> (fun (V715, V716) -> case V716 of [E196 | E197] -> (fun (V717, V718) -> case V718 of [E198 | E199] -> (fun (V719, V720) -> case V720 of [E200 | E201] -> (fun (V721, V722) -> case V722 of [E202 | E203] -> (fun (V723, V724) -> case V724 of [] -> fun (V725) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V726) -> fun (V727) -> fun (V728) -> ('un--chezExtPrim'(V726, V727, V728)) end end end, fun (V729) -> ('un--chezString'(V729)) end, V0, V1, V2)) end end(E202, E203)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V730) -> fun (V731) -> fun (V732) -> ('un--chezExtPrim'(V730, V731, V732)) end end end, fun (V733) -> ('un--chezString'(V733)) end, V0, V1, V2)) end end(E200, E201)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V734) -> fun (V735) -> fun (V736) -> ('un--chezExtPrim'(V734, V735, V736)) end end end, fun (V737) -> ('un--chezString'(V737)) end, V0, V1, V2)) end end(E198, E199)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V738) -> fun (V739) -> fun (V740) -> ('un--chezExtPrim'(V738, V739, V740)) end end end, fun (V741) -> ('un--chezString'(V741)) end, V0, V1, V2)) end end(E196, E197)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V742) -> fun (V743) -> fun (V744) -> ('un--chezExtPrim'(V742, V743, V744)) end end end, fun (V745) -> ('un--chezString'(V745)) end, V0, V1, V2)) end end(E194, E195)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V746) -> fun (V747) -> fun (V748) -> ('un--chezExtPrim'(V746, V747, V748)) end end end, fun (V749) -> ('un--chezString'(V749)) end, V0, V1, V2)) end end(E192, E193)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V750) -> fun (V751) -> fun (V752) -> ('un--chezExtPrim'(V750, V751, V752)) end end end, fun (V753) -> ('un--chezString'(V753)) end, V0, V1, V2)) end end(E190, E191)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V754) -> fun (V755) -> fun (V756) -> ('un--chezExtPrim'(V754, V755, V756)) end end end, fun (V757) -> ('un--chezString'(V757)) end, V0, V1, V2)) end end end(E188, E189)); _ -> case V387 of [E174 | E175] -> (fun (V758, V759) -> case V759 of [E176 | E177] -> (fun (V760, V761) -> case V761 of [E178 | E179] -> (fun (V762, V763) -> case V763 of [E180 | E181] -> (fun (V764, V765) -> case V765 of [E182 | E183] -> (fun (V766, V767) -> case V767 of [E184 | E185] -> (fun (V768, V769) -> case V769 of [E186 | E187] -> (fun (V770, V771) -> case V771 of [] -> fun (V772) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V773) -> fun (V774) -> fun (V775) -> ('un--chezExtPrim'(V773, V774, V775)) end end end, fun (V776) -> ('un--chezString'(V776)) end, V0, V1, V2)) end end(E186, E187)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V777) -> fun (V778) -> fun (V779) -> ('un--chezExtPrim'(V777, V778, V779)) end end end, fun (V780) -> ('un--chezString'(V780)) end, V0, V1, V2)) end end(E184, E185)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V781) -> fun (V782) -> fun (V783) -> ('un--chezExtPrim'(V781, V782, V783)) end end end, fun (V784) -> ('un--chezString'(V784)) end, V0, V1, V2)) end end(E182, E183)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V785) -> fun (V786) -> fun (V787) -> ('un--chezExtPrim'(V785, V786, V787)) end end end, fun (V788) -> ('un--chezString'(V788)) end, V0, V1, V2)) end end(E180, E181)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V789) -> fun (V790) -> fun (V791) -> ('un--chezExtPrim'(V789, V790, V791)) end end end, fun (V792) -> ('un--chezString'(V792)) end, V0, V1, V2)) end end(E178, E179)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V793) -> fun (V794) -> fun (V795) -> ('un--chezExtPrim'(V793, V794, V795)) end end end, fun (V796) -> ('un--chezString'(V796)) end, V0, V1, V2)) end end(E176, E177)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V797) -> fun (V798) -> fun (V799) -> ('un--chezExtPrim'(V797, V798, V799)) end end end, fun (V800) -> ('un--chezString'(V800)) end, V0, V1, V2)) end end(E174, E175)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V801) -> fun (V802) -> fun (V803) -> ('un--chezExtPrim'(V801, V802, V803)) end end end, fun (V804) -> ('un--chezString'(V804)) end, V0, V1, V2)) end end end(E172, E173)); _ -> case V387 of [E158 | E159] -> (fun (V805, V806) -> case V806 of [E160 | E161] -> (fun (V807, V808) -> case V808 of [E162 | E163] -> (fun (V809, V810) -> case V810 of [E164 | E165] -> (fun (V811, V812) -> case V812 of [E166 | E167] -> (fun (V813, V814) -> case V814 of [E168 | E169] -> (fun (V815, V816) -> case V816 of [E170 | E171] -> (fun (V817, V818) -> case V818 of [] -> fun (V819) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V820) -> fun (V821) -> fun (V822) -> ('un--chezExtPrim'(V820, V821, V822)) end end end, fun (V823) -> ('un--chezString'(V823)) end, V0, V1, V2)) end end(E170, E171)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V824) -> fun (V825) -> fun (V826) -> ('un--chezExtPrim'(V824, V825, V826)) end end end, fun (V827) -> ('un--chezString'(V827)) end, V0, V1, V2)) end end(E168, E169)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V828) -> fun (V829) -> fun (V830) -> ('un--chezExtPrim'(V828, V829, V830)) end end end, fun (V831) -> ('un--chezString'(V831)) end, V0, V1, V2)) end end(E166, E167)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V832) -> fun (V833) -> fun (V834) -> ('un--chezExtPrim'(V832, V833, V834)) end end end, fun (V835) -> ('un--chezString'(V835)) end, V0, V1, V2)) end end(E164, E165)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V836) -> fun (V837) -> fun (V838) -> ('un--chezExtPrim'(V836, V837, V838)) end end end, fun (V839) -> ('un--chezString'(V839)) end, V0, V1, V2)) end end(E162, E163)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V840) -> fun (V841) -> fun (V842) -> ('un--chezExtPrim'(V840, V841, V842)) end end end, fun (V843) -> ('un--chezString'(V843)) end, V0, V1, V2)) end end(E160, E161)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V844) -> fun (V845) -> fun (V846) -> ('un--chezExtPrim'(V844, V845, V846)) end end end, fun (V847) -> ('un--chezString'(V847)) end, V0, V1, V2)) end end(E158, E159)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V848) -> fun (V849) -> fun (V850) -> ('un--chezExtPrim'(V848, V849, V850)) end end end, fun (V851) -> ('un--chezString'(V851)) end, V0, V1, V2)) end end end(E156, E157)); _ -> case V387 of [E142 | E143] -> (fun (V852, V853) -> case V853 of [E144 | E145] -> (fun (V854, V855) -> case V855 of [E146 | E147] -> (fun (V856, V857) -> case V857 of [E148 | E149] -> (fun (V858, V859) -> case V859 of [E150 | E151] -> (fun (V860, V861) -> case V861 of [E152 | E153] -> (fun (V862, V863) -> case V863 of [E154 | E155] -> (fun (V864, V865) -> case V865 of [] -> fun (V866) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V867) -> fun (V868) -> fun (V869) -> ('un--chezExtPrim'(V867, V868, V869)) end end end, fun (V870) -> ('un--chezString'(V870)) end, V0, V1, V2)) end end(E154, E155)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V871) -> fun (V872) -> fun (V873) -> ('un--chezExtPrim'(V871, V872, V873)) end end end, fun (V874) -> ('un--chezString'(V874)) end, V0, V1, V2)) end end(E152, E153)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V875) -> fun (V876) -> fun (V877) -> ('un--chezExtPrim'(V875, V876, V877)) end end end, fun (V878) -> ('un--chezString'(V878)) end, V0, V1, V2)) end end(E150, E151)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V879) -> fun (V880) -> fun (V881) -> ('un--chezExtPrim'(V879, V880, V881)) end end end, fun (V882) -> ('un--chezString'(V882)) end, V0, V1, V2)) end end(E148, E149)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V883) -> fun (V884) -> fun (V885) -> ('un--chezExtPrim'(V883, V884, V885)) end end end, fun (V886) -> ('un--chezString'(V886)) end, V0, V1, V2)) end end(E146, E147)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V887) -> fun (V888) -> fun (V889) -> ('un--chezExtPrim'(V887, V888, V889)) end end end, fun (V890) -> ('un--chezString'(V890)) end, V0, V1, V2)) end end(E144, E145)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V891) -> fun (V892) -> fun (V893) -> ('un--chezExtPrim'(V891, V892, V893)) end end end, fun (V894) -> ('un--chezString'(V894)) end, V0, V1, V2)) end end(E142, E143)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V895) -> fun (V896) -> fun (V897) -> ('un--chezExtPrim'(V895, V896, V897)) end end end, fun (V898) -> ('un--chezString'(V898)) end, V0, V1, V2)) end end; _ -> case V387 of [E128 | E129] -> (fun (V899, V900) -> case V900 of [E130 | E131] -> (fun (V901, V902) -> case V902 of [E132 | E133] -> (fun (V903, V904) -> case V904 of [E134 | E135] -> (fun (V905, V906) -> case V906 of [E136 | E137] -> (fun (V907, V908) -> case V908 of [E138 | E139] -> (fun (V909, V910) -> case V910 of [E140 | E141] -> (fun (V911, V912) -> case V912 of [] -> fun (V913) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V914) -> fun (V915) -> fun (V916) -> ('un--chezExtPrim'(V914, V915, V916)) end end end, fun (V917) -> ('un--chezString'(V917)) end, V0, V1, V2)) end end(E140, E141)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V918) -> fun (V919) -> fun (V920) -> ('un--chezExtPrim'(V918, V919, V920)) end end end, fun (V921) -> ('un--chezString'(V921)) end, V0, V1, V2)) end end(E138, E139)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V922) -> fun (V923) -> fun (V924) -> ('un--chezExtPrim'(V922, V923, V924)) end end end, fun (V925) -> ('un--chezString'(V925)) end, V0, V1, V2)) end end(E136, E137)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V926) -> fun (V927) -> fun (V928) -> ('un--chezExtPrim'(V926, V927, V928)) end end end, fun (V929) -> ('un--chezString'(V929)) end, V0, V1, V2)) end end(E134, E135)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V930) -> fun (V931) -> fun (V932) -> ('un--chezExtPrim'(V930, V931, V932)) end end end, fun (V933) -> ('un--chezString'(V933)) end, V0, V1, V2)) end end(E132, E133)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V934) -> fun (V935) -> fun (V936) -> ('un--chezExtPrim'(V934, V935, V936)) end end end, fun (V937) -> ('un--chezString'(V937)) end, V0, V1, V2)) end end(E130, E131)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V938) -> fun (V939) -> fun (V940) -> ('un--chezExtPrim'(V938, V939, V940)) end end end, fun (V941) -> ('un--chezString'(V941)) end, V0, V1, V2)) end end(E128, E129)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V942) -> fun (V943) -> fun (V944) -> ('un--chezExtPrim'(V942, V943, V944)) end end end, fun (V945) -> ('un--chezString'(V945)) end, V0, V1, V2)) end end; _ -> case V387 of [E114 | E115] -> (fun (V946, V947) -> case V947 of [E116 | E117] -> (fun (V948, V949) -> case V949 of [E118 | E119] -> (fun (V950, V951) -> case V951 of [E120 | E121] -> (fun (V952, V953) -> case V953 of [E122 | E123] -> (fun (V954, V955) -> case V955 of [E124 | E125] -> (fun (V956, V957) -> case V957 of [E126 | E127] -> (fun (V958, V959) -> case V959 of [] -> fun (V960) -> {'Prelude.Types.Right', <<"(blodwen-error-quit \x{22}bad setField\x{22})"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V961) -> fun (V962) -> fun (V963) -> ('un--chezExtPrim'(V961, V962, V963)) end end end, fun (V964) -> ('un--chezString'(V964)) end, V0, V1, V2)) end end(E126, E127)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V965) -> fun (V966) -> fun (V967) -> ('un--chezExtPrim'(V965, V966, V967)) end end end, fun (V968) -> ('un--chezString'(V968)) end, V0, V1, V2)) end end(E124, E125)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V969) -> fun (V970) -> fun (V971) -> ('un--chezExtPrim'(V969, V970, V971)) end end end, fun (V972) -> ('un--chezString'(V972)) end, V0, V1, V2)) end end(E122, E123)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V973) -> fun (V974) -> fun (V975) -> ('un--chezExtPrim'(V973, V974, V975)) end end end, fun (V976) -> ('un--chezString'(V976)) end, V0, V1, V2)) end end(E120, E121)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V977) -> fun (V978) -> fun (V979) -> ('un--chezExtPrim'(V977, V978, V979)) end end end, fun (V980) -> ('un--chezString'(V980)) end, V0, V1, V2)) end end(E118, E119)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V981) -> fun (V982) -> fun (V983) -> ('un--chezExtPrim'(V981, V982, V983)) end end end, fun (V984) -> ('un--chezString'(V984)) end, V0, V1, V2)) end end(E116, E117)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V985) -> fun (V986) -> fun (V987) -> ('un--chezExtPrim'(V985, V986, V987)) end end end, fun (V988) -> ('un--chezString'(V988)) end, V0, V1, V2)) end end(E114, E115)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V989) -> fun (V990) -> fun (V991) -> ('un--chezExtPrim'(V989, V990, V991)) end end end, fun (V992) -> ('un--chezString'(V992)) end, V0, V1, V2)) end end end(E112, E113)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V993) -> fun (V994) -> fun (V995) -> ('un--chezExtPrim'(V993, V994, V995)) end end end, fun (V996) -> ('un--chezString'(V996)) end, V0, V1, V2)) end; {'Compiler.Scheme.Common.SysCodegen'} -> case V2 of [] -> fun (V997) -> {'Prelude.Types.Right', <<"\x{22}chez\x{22}"/utf8>>} end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V998) -> fun (V999) -> fun (V1000) -> ('un--chezExtPrim'(V998, V999, V1000)) end end end, fun (V1001) -> ('un--chezString'(V1001)) end, V0, V1, V2)) end; {'Compiler.Scheme.Common.OnCollect'} -> case V2 of [E296 | E297] -> (fun (V1002, V1003) -> case V1003 of [E298 | E299] -> (fun (V1004, V1005) -> case V1005 of [E300 | E301] -> (fun (V1006, V1007) -> case V1007 of [E302 | E303] -> (fun (V1008, V1009) -> case V1009 of [] -> begin (V1014 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V1010) -> fun (V1011) -> fun (V1012) -> ('un--chezExtPrim'(V1010, V1011, V1012)) end end end, fun (V1013) -> ('un--chezString'(V1013)) end, 0, V1004))), fun (V1015) -> begin (V1016 = (V1014(V1015))), case V1016 of {'Prelude.Types.Left', V1017} -> {'Prelude.Types.Left', V1017}; {'Prelude.Types.Right', V1018} -> (begin (V1030 = begin (V1023 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V1019) -> fun (V1020) -> fun (V1021) -> ('un--chezExtPrim'(V1019, V1020, V1021)) end end end, fun (V1022) -> ('un--chezString'(V1022)) end, 0, V1006))), fun (V1024) -> begin (V1025 = (V1023(V1024))), case V1025 of {'Prelude.Types.Left', V1026} -> {'Prelude.Types.Left', V1026}; {'Prelude.Types.Right', V1027} -> (begin (V1029 = fun (V1028) -> {'Prelude.Types.Right', <<<<"(blodwen-register-object "/utf8>>/binary, <<V1018/binary, <<<<" "/utf8>>/binary, <<V1027/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V1029 end(V1024)) end end end end), V1030 end(V1015)) end end end end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1031) -> fun (V1032) -> fun (V1033) -> ('un--chezExtPrim'(V1031, V1032, V1033)) end end end, fun (V1034) -> ('un--chezString'(V1034)) end, V0, V1, V2)) end end(E302, E303)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1035) -> fun (V1036) -> fun (V1037) -> ('un--chezExtPrim'(V1035, V1036, V1037)) end end end, fun (V1038) -> ('un--chezString'(V1038)) end, V0, V1, V2)) end end(E300, E301)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1039) -> fun (V1040) -> fun (V1041) -> ('un--chezExtPrim'(V1039, V1040, V1041)) end end end, fun (V1042) -> ('un--chezString'(V1042)) end, V0, V1, V2)) end end(E298, E299)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1043) -> fun (V1044) -> fun (V1045) -> ('un--chezExtPrim'(V1043, V1044, V1045)) end end end, fun (V1046) -> ('un--chezString'(V1046)) end, V0, V1, V2)) end end(E296, E297)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1047) -> fun (V1048) -> fun (V1049) -> ('un--chezExtPrim'(V1047, V1048, V1049)) end end end, fun (V1050) -> ('un--chezString'(V1050)) end, V0, V1, V2)) end; {'Compiler.Scheme.Common.OnCollectAny'} -> case V2 of [E304 | E305] -> (fun (V1051, V1052) -> case V1052 of [E306 | E307] -> (fun (V1053, V1054) -> case V1054 of [E308 | E309] -> (fun (V1055, V1056) -> case V1056 of [] -> begin (V1061 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V1057) -> fun (V1058) -> fun (V1059) -> ('un--chezExtPrim'(V1057, V1058, V1059)) end end end, fun (V1060) -> ('un--chezString'(V1060)) end, 0, V1051))), fun (V1062) -> begin (V1063 = (V1061(V1062))), case V1063 of {'Prelude.Types.Left', V1064} -> {'Prelude.Types.Left', V1064}; {'Prelude.Types.Right', V1065} -> (begin (V1077 = begin (V1070 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V1066) -> fun (V1067) -> fun (V1068) -> ('un--chezExtPrim'(V1066, V1067, V1068)) end end end, fun (V1069) -> ('un--chezString'(V1069)) end, 0, V1053))), fun (V1071) -> begin (V1072 = (V1070(V1071))), case V1072 of {'Prelude.Types.Left', V1073} -> {'Prelude.Types.Left', V1073}; {'Prelude.Types.Right', V1074} -> (begin (V1076 = fun (V1075) -> {'Prelude.Types.Right', <<<<"(blodwen-register-object "/utf8>>/binary, <<V1065/binary, <<<<" "/utf8>>/binary, <<V1074/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V1076 end(V1071)) end end end end), V1077 end(V1062)) end end end end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1078) -> fun (V1079) -> fun (V1080) -> ('un--chezExtPrim'(V1078, V1079, V1080)) end end end, fun (V1081) -> ('un--chezString'(V1081)) end, V0, V1, V2)) end end(E308, E309)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1082) -> fun (V1083) -> fun (V1084) -> ('un--chezExtPrim'(V1082, V1083, V1084)) end end end, fun (V1085) -> ('un--chezString'(V1085)) end, V0, V1, V2)) end end(E306, E307)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1086) -> fun (V1087) -> fun (V1088) -> ('un--chezExtPrim'(V1086, V1087, V1088)) end end end, fun (V1089) -> ('un--chezString'(V1089)) end, V0, V1, V2)) end end(E304, E305)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1090) -> fun (V1091) -> fun (V1092) -> ('un--chezExtPrim'(V1090, V1091, V1092)) end end end, fun (V1093) -> ('un--chezString'(V1093)) end, V0, V1, V2)) end; {'Compiler.Scheme.Common.MakeFuture'} -> case V2 of [E310 | E311] -> (fun (V1094, V1095) -> case V1095 of [E312 | E313] -> (fun (V1096, V1097) -> case V1097 of [] -> begin (V1102 = ('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V1098) -> fun (V1099) -> fun (V1100) -> ('un--chezExtPrim'(V1098, V1099, V1100)) end end end, fun (V1101) -> ('un--chezString'(V1101)) end, 0, V1096))), fun (V1103) -> begin (V1104 = (V1102(V1103))), case V1104 of {'Prelude.Types.Left', V1105} -> {'Prelude.Types.Left', V1105}; {'Prelude.Types.Right', V1106} -> (begin (V1108 = fun (V1107) -> {'Prelude.Types.Right', <<<<"(blodwen-make-future "/utf8>>/binary, <<V1106/binary, <<")"/utf8>>/binary>>/binary>>} end), V1108 end(V1103)) end end end end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1109) -> fun (V1110) -> fun (V1111) -> ('un--chezExtPrim'(V1109, V1110, V1111)) end end end, fun (V1112) -> ('un--chezString'(V1112)) end, V0, V1, V2)) end end(E312, E313)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1113) -> fun (V1114) -> fun (V1115) -> ('un--chezExtPrim'(V1113, V1114, V1115)) end end end, fun (V1116) -> ('un--chezString'(V1116)) end, V0, V1, V2)) end end(E310, E311)); _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1117) -> fun (V1118) -> fun (V1119) -> ('un--chezExtPrim'(V1117, V1118, V1119)) end end end, fun (V1120) -> ('un--chezString'(V1120)) end, V0, V1, V2)) end; _ -> ('Idris.Idris2.Compiler.Scheme.Common':'un--schExtCommon'(fun (V1121) -> fun (V1122) -> fun (V1123) -> ('un--chezExtPrim'(V1121, V1122, V1123)) end end end, fun (V1124) -> ('un--chezString'(V1124)) end, V0, V1, V2)) end.
'un--cftySpec'(V0, V1) -> case V1 of {'Core.CompileExpr.CFUnit'} -> fun (V2) -> {'Prelude.Types.Right', <<"void"/utf8>>} end; {'Core.CompileExpr.CFInt'} -> fun (V3) -> {'Prelude.Types.Right', <<"int"/utf8>>} end; {'Core.CompileExpr.CFInt8'} -> fun (V4) -> {'Prelude.Types.Right', <<"integer-8"/utf8>>} end; {'Core.CompileExpr.CFInt16'} -> fun (V5) -> {'Prelude.Types.Right', <<"integer-16"/utf8>>} end; {'Core.CompileExpr.CFInt32'} -> fun (V6) -> {'Prelude.Types.Right', <<"integer-32"/utf8>>} end; {'Core.CompileExpr.CFInt64'} -> fun (V7) -> {'Prelude.Types.Right', <<"integer-64"/utf8>>} end; {'Core.CompileExpr.CFUnsigned8'} -> fun (V8) -> {'Prelude.Types.Right', <<"unsigned-8"/utf8>>} end; {'Core.CompileExpr.CFUnsigned16'} -> fun (V9) -> {'Prelude.Types.Right', <<"unsigned-16"/utf8>>} end; {'Core.CompileExpr.CFUnsigned32'} -> fun (V10) -> {'Prelude.Types.Right', <<"unsigned-32"/utf8>>} end; {'Core.CompileExpr.CFUnsigned64'} -> fun (V11) -> {'Prelude.Types.Right', <<"unsigned-64"/utf8>>} end; {'Core.CompileExpr.CFString'} -> fun (V12) -> {'Prelude.Types.Right', <<"string"/utf8>>} end; {'Core.CompileExpr.CFDouble'} -> fun (V13) -> {'Prelude.Types.Right', <<"double"/utf8>>} end; {'Core.CompileExpr.CFChar'} -> fun (V14) -> {'Prelude.Types.Right', <<"char"/utf8>>} end; {'Core.CompileExpr.CFPtr'} -> fun (V15) -> {'Prelude.Types.Right', <<"void*"/utf8>>} end; {'Core.CompileExpr.CFGCPtr'} -> fun (V16) -> {'Prelude.Types.Right', <<"void*"/utf8>>} end; {'Core.CompileExpr.CFBuffer'} -> fun (V17) -> {'Prelude.Types.Right', <<"u8*"/utf8>>} end; {'Core.CompileExpr.CFFun', V18, V19} -> fun (V20) -> {'Prelude.Types.Right', <<"void*"/utf8>>} end; {'Core.CompileExpr.CFIORes', V21} -> ('un--cftySpec'(V0, V21)); {'Core.CompileExpr.CFStruct', V22, V23} -> fun (V24) -> {'Prelude.Types.Right', <<<<"(* "/utf8>>/binary, <<V22/binary, <<")"/utf8>>/binary>>/binary>>} end; _ -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V0, <<<<"Can\x{27}t pass argument of type "/utf8>>/binary, <<('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V1))/binary, <<" to foreign function"/utf8>>/binary>>/binary>>}, V25)) end end.
'un--cCall'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Core.CompileExpr.CFIORes', V8} -> case V8 of {'Core.CompileExpr.CFGCPtr'} -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<"Can\x{27}t return GCPtr from a foreign function"/utf8>>}, V9)) end; {'Core.CompileExpr.CFBuffer'} -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<"Can\x{27}t return Buffer from a foreign function"/utf8>>}, V10)) end; _ -> begin (V16 = begin (V11 = V1), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V100 = begin (V64 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V32)) end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V36, V37, V38, V39)) end end end end end end end, fun (V40) -> fun (V41) -> V41 end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V44, V45, V46)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V49, V50)) end end}, V4, V20)) of 1 -> fun (V51) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; 0 -> begin (V57 = begin (V52 = V1), fun (V53) -> begin (V56 = (begin (V54 = V52), fun (V55) -> ('erlang':'put'(V54, [V4 | V20])) end end(V53))), {'Prelude.Types.Right', V56} end end end), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V63 = fun (V62) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V4}} end), V63 end(V58)) end end end end end), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V99 = begin (V70 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V69) -> ('un--cftySpec'(V2, ('Idris.Idris2.Builtin':'un--snd'(V69)))) end, V5, []))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V98 = begin (V75 = ('un--cftySpec'(V2, V6))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V97 = begin (V86 = case V7 of 1 -> (begin (V81 = fun (V80) -> V80 end), fun (V82) -> (V81(V82)) end end(<<" __collect_safe"/utf8>>)); 0 -> (begin (V84 = fun (V83) -> V83 end), fun (V85) -> (V84(V85)) end end(<<""/utf8>>)) end), begin (V88 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V87) -> ('nested--12392-2270--in--un--buildArg'(V7, V6, V5, V4, V3, V2, V1, V0, V87)) end, V5, []))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V96 = begin (V93 = <<<<"((foreign-procedure"/utf8>>/binary, <<V86/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V3))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V74))/binary, <<<<") "/utf8>>/binary, <<V79/binary, <<<<") "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V92))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>), fun (V94) -> {'Prelude.Types.Right', {'Builtin.MkPair', V68, case V6 of {'Core.CompileExpr.CFIORes', V95} -> ('un--handleRet'(V79, V93)); _ -> V93 end}} end end), V96 end(V89)) end end end end end), V97 end(V76)) end end end end), V98 end(V71)) end end end end), V99 end(V65)) end end end end), V100 end(V17)) end end end end end; {'Core.CompileExpr.CFGCPtr'} -> fun (V101) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<"Can\x{27}t return GCPtr from a foreign function"/utf8>>}, V101)) end; {'Core.CompileExpr.CFBuffer'} -> fun (V102) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<"Can\x{27}t return Buffer from a foreign function"/utf8>>}, V102)) end; _ -> begin (V108 = begin (V103 = V1), fun (V104) -> begin (V107 = (begin (V105 = V103), fun (V106) -> ('erlang':'get'(V105)) end end(V104))), {'Prelude.Types.Right', V107} end end end), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V192 = begin (V156 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V115, V116, V117)) end end end end end, fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V120, V121, V122)) end end end end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V124)) end end, fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V128, V129, V130, V131)) end end end end end end end, fun (V132) -> fun (V133) -> V133 end end, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V136, V137, V138)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V139, V140)) end end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V141, V142)) end end}, V4, V112)) of 1 -> fun (V143) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; 0 -> begin (V149 = begin (V144 = V1), fun (V145) -> begin (V148 = (begin (V146 = V144), fun (V147) -> ('erlang':'put'(V146, [V4 | V112])) end end(V145))), {'Prelude.Types.Right', V148} end end end), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V155 = fun (V154) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V4}} end), V155 end(V150)) end end end end end), fun (V157) -> begin (V158 = (V156(V157))), case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> (begin (V191 = begin (V162 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V161) -> ('un--cftySpec'(V2, ('Idris.Idris2.Builtin':'un--snd'(V161)))) end, V5, []))), fun (V163) -> begin (V164 = (V162(V163))), case V164 of {'Prelude.Types.Left', V165} -> {'Prelude.Types.Left', V165}; {'Prelude.Types.Right', V166} -> (begin (V190 = begin (V167 = ('un--cftySpec'(V2, V6))), fun (V168) -> begin (V169 = (V167(V168))), case V169 of {'Prelude.Types.Left', V170} -> {'Prelude.Types.Left', V170}; {'Prelude.Types.Right', V171} -> (begin (V189 = begin (V178 = case V7 of 1 -> (begin (V173 = fun (V172) -> V172 end), fun (V174) -> (V173(V174)) end end(<<" __collect_safe"/utf8>>)); 0 -> (begin (V176 = fun (V175) -> V175 end), fun (V177) -> (V176(V177)) end end(<<""/utf8>>)) end), begin (V180 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V179) -> ('nested--12392-2270--in--un--buildArg'(V7, V6, V5, V4, V3, V2, V1, V0, V179)) end, V5, []))), fun (V181) -> begin (V182 = (V180(V181))), case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> (begin (V188 = begin (V185 = <<<<"((foreign-procedure"/utf8>>/binary, <<V178/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V3))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V166))/binary, <<<<") "/utf8>>/binary, <<V171/binary, <<<<") "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V184))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>), fun (V186) -> {'Prelude.Types.Right', {'Builtin.MkPair', V160, case V6 of {'Core.CompileExpr.CFIORes', V187} -> ('un--handleRet'(V171, V185)); _ -> V185 end}} end end), V188 end(V181)) end end end end end), V189 end(V168)) end end end end), V190 end(V163)) end end end end), V191 end(V157)) end end end end), V192 end(V109)) end end end end end.
