-module('Idris.Idris2.Libraries.Data.StringMap').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--5233-3210--in--un--treeToList\x{27}'/2,
  'nested--5805-3792--in--un--inserted'/3,
  'dn--un--show_Show_(StringMap $v)'/2,
  'dn--un--showPrec_Show_(StringMap $v)'/3,
  'dn--un--neutral_Monoid_(StringMap $v)'/1,
  'dn--un--map_Functor_StringMap'/2,
  'dn--un--__Impl_Show_(StringMap $v)'/1,
  'dn--un--__Impl_Semigroup_(StringMap $v)'/3,
  'dn--un--__Impl_Monoid_(StringMap $v)'/1,
  'dn--un--__Impl_Functor_StringMap'/4,
  'dn--un--<+>_Semigroup_(StringMap $v)'/3,
  'un--values'/1,
  'un--treeToList'/1,
  'un--treeMap'/2,
  'un--treeLookup'/2,
  'un--treeInsert\x{27}'/3,
  'un--treeInsert'/3,
  'un--treeDelete'/3,
  'un--toList'/1,
  'un--singleton'/2,
  'un--mergeWith'/3,
  'un--mergeLeft'/2,
  'un--merge3'/5,
  'un--merge2'/5,
  'un--merge1'/5,
  'un--merge'/3,
  'un--lookup'/2,
  'un--keys'/1,
  'un--insertFrom'/2,
  'un--insert'/3,
  'un--fromList'/1,
  'un--empty'/0,
  'un--delete'/2,
  'un--branch7'/13,
  'un--branch6'/11,
  'un--branch5'/9,
  'un--branch4'/7,
  'un--adjust'/3
]).
'nested--5233-3210--in--un--treeToList\x{27}'(V0, V1) -> case V1 of {'Libraries.Data.StringMap.Leaf', V2, V3} -> (V0({'Builtin.MkPair', V2, V3})); {'Libraries.Data.StringMap.Branch2', V4, V5, V6} -> ('nested--5233-3210--in--un--treeToList\x{27}'(fun (V7) -> [V7 | ('nested--5233-3210--in--un--treeToList\x{27}'(V0, V6))] end, V4)); {'Libraries.Data.StringMap.Branch3', V8, V9, V10, V11, V12} -> ('nested--5233-3210--in--un--treeToList\x{27}'(fun (V13) -> [V13 | ('nested--5233-3210--in--un--treeToList\x{27}'(fun (V14) -> [V14 | ('nested--5233-3210--in--un--treeToList\x{27}'(V0, V12))] end, V10))] end, V8)) end.
'nested--5805-3792--in--un--inserted'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(('un--toList'(V0)), fun (V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V7 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V6) -> V6 end end, fun () -> V2 end, ('un--lookup'(V4, V1))))(V5))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'({'Builtin.MkPair', V4, V7})) end end end)).
'dn--un--show_Show_(StringMap $v)'(V0, V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V2)) end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V3, V4)) end end}, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V5) -> case V5 of {'Builtin.MkPair', V6, V7} -> <<V6/binary, <<<<"->"/utf8>>/binary, case V0 of {'Prelude.Show.MkShow', V8, V9} -> (V8(V7)) end/binary>>/binary>> end end))(('un--toList'(V1)))))).
'dn--un--showPrec_Show_(StringMap $v)'(V0, V1, V2) -> ('dn--un--show_Show_(StringMap $v)'(V0, V2)).
'dn--un--neutral_Monoid_(StringMap $v)'(V0) -> ('un--empty'()).
'dn--un--map_Functor_StringMap'(V0, V1) -> case V1 of {'Libraries.Data.StringMap.Empty'} -> {'Libraries.Data.StringMap.Empty'}; {'Libraries.Data.StringMap.M', V2, V3} -> {'Libraries.Data.StringMap.M', V2, ('un--treeMap'(V0, V3))} end.
'dn--un--__Impl_Show_(StringMap $v)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(StringMap $v)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(StringMap $v)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Semigroup_(StringMap $v)'(V0, V1, V2) -> ('dn--un--<+>_Semigroup_(StringMap $v)'(V0, V1, V2)).
'dn--un--__Impl_Monoid_(StringMap $v)'(V0) -> {'Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> ('dn--un--<+>_Semigroup_(StringMap $v)'(V0, V1, V2)) end end, ('dn--un--neutral_Monoid_(StringMap $v)'(V0))}.
'dn--un--__Impl_Functor_StringMap'(V0, V1, V2, V3) -> ('dn--un--map_Functor_StringMap'(V2, V3)).
'dn--un--<+>_Semigroup_(StringMap $v)'(V0, V1, V2) -> ('un--merge'(V0, V1, V2)).
'un--values'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Builtin':'un--snd'(V1)) end))(('un--toList'(V0)))).
'un--treeToList'(V0) -> ('nested--5233-3210--in--un--treeToList\x{27}'(fun (V1) -> [V1 | []] end, V0)).
'un--treeMap'(V0, V1) -> case V1 of {'Libraries.Data.StringMap.Leaf', V2, V3} -> {'Libraries.Data.StringMap.Leaf', V2, (V0(V3))}; {'Libraries.Data.StringMap.Branch2', V4, V5, V6} -> {'Libraries.Data.StringMap.Branch2', ('un--treeMap'(V0, V4)), V5, ('un--treeMap'(V0, V6))}; {'Libraries.Data.StringMap.Branch3', V7, V8, V9, V10, V11} -> {'Libraries.Data.StringMap.Branch3', ('un--treeMap'(V0, V7)), V8, ('un--treeMap'(V0, V9)), V10, ('un--treeMap'(V0, V11))} end.
'un--treeLookup'(V0, V1) -> case V1 of {'Libraries.Data.StringMap.Leaf', V2, V3} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V0, V2)) of 1 -> {'Prelude.Types.Just', V3}; 0 -> {'Prelude.Types.Nothing'} end; {'Libraries.Data.StringMap.Branch2', V4, V5, V6} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V0, V5)) of 1 -> ('un--treeLookup'(V0, V4)); 0 -> ('un--treeLookup'(V0, V6)) end; {'Libraries.Data.StringMap.Branch3', V7, V8, V9, V10, V11} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V0, V8)) of 1 -> ('un--treeLookup'(V0, V7)); 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V0, V10)) of 1 -> ('un--treeLookup'(V0, V9)); 0 -> ('un--treeLookup'(V0, V11)) end end end.
'un--treeInsert\x{27}'(V0, V1, V2) -> case V2 of {'Libraries.Data.StringMap.Leaf', V3, V4} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V0, V3)) of 0 -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Libraries.Data.StringMap.Leaf', V0, V1}, {'Builtin.MkPair', V0, {'Libraries.Data.StringMap.Leaf', V3, V4}}}}; 1 -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Leaf', V0, V1}}; 2 -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Libraries.Data.StringMap.Leaf', V3, V4}, {'Builtin.MkPair', V3, {'Libraries.Data.StringMap.Leaf', V0, V1}}}} end; {'Libraries.Data.StringMap.Branch2', V5, V6, V7} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V0, V6)) of 1 -> case ('un--treeInsert\x{27}'(V0, V1, V5)) of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch2', V8, V6, V7}}; {'Prelude.Types.Right', V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch3', V10, V12, V13, V6, V7}} end end end; 0 -> case ('un--treeInsert\x{27}'(V0, V1, V7)) of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch2', V5, V6, V14}}; {'Prelude.Types.Right', V15} -> case V15 of {'Builtin.MkPair', V16, V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch3', V5, V6, V16, V18, V19}} end end end end; {'Libraries.Data.StringMap.Branch3', V20, V21, V22, V23, V24} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V0, V21)) of 1 -> case ('un--treeInsert\x{27}'(V0, V1, V20)) of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch3', V25, V21, V22, V23, V24}}; {'Prelude.Types.Right', V26} -> case V26 of {'Builtin.MkPair', V27, V28} -> case V28 of {'Builtin.MkPair', V29, V30} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Libraries.Data.StringMap.Branch2', V27, V29, V30}, {'Builtin.MkPair', V21, {'Libraries.Data.StringMap.Branch2', V22, V23, V24}}}} end end end; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V0, V23)) of 1 -> case ('un--treeInsert\x{27}'(V0, V1, V22)) of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch3', V20, V21, V31, V23, V24}}; {'Prelude.Types.Right', V32} -> case V32 of {'Builtin.MkPair', V33, V34} -> case V34 of {'Builtin.MkPair', V35, V36} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Libraries.Data.StringMap.Branch2', V20, V21, V33}, {'Builtin.MkPair', V35, {'Libraries.Data.StringMap.Branch2', V36, V23, V24}}}} end end end; 0 -> case ('un--treeInsert\x{27}'(V0, V1, V24)) of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch3', V20, V21, V22, V23, V37}}; {'Prelude.Types.Right', V38} -> case V38 of {'Builtin.MkPair', V39, V40} -> case V40 of {'Builtin.MkPair', V41, V42} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Libraries.Data.StringMap.Branch2', V20, V21, V22}, {'Builtin.MkPair', V23, {'Libraries.Data.StringMap.Branch2', V39, V41, V42}}}} end end end end end end.
'un--treeInsert'(V0, V1, V2) -> case ('un--treeInsert\x{27}'(V0, V1, V2)) of {'Prelude.Types.Left', V3} -> {'Prelude.Types.Left', V3}; {'Prelude.Types.Right', V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> {'Prelude.Types.Right', {'Libraries.Data.StringMap.Branch2', V5, V7, V8}} end end end.
'un--treeDelete'(V0, V1, V2) -> case V0 of 0 -> case V2 of {'Libraries.Data.StringMap.Leaf', V3, V4} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V1, V3)) of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Leaf', V3, V4}} end end; _ -> begin (V5 = (V0 - 1)), case V5 of 0 -> case V2 of {'Libraries.Data.StringMap.Branch2', V6, V7, V8} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V1, V7)) of 1 -> case ('un--treeDelete'(0, V1, V6)) of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch2', V9, V7, V8}}; {'Prelude.Types.Right', V10} -> {'Prelude.Types.Right', V8} end; 0 -> case ('un--treeDelete'(0, V1, V8)) of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch2', V6, V7, V11}}; {'Prelude.Types.Right', V12} -> {'Prelude.Types.Right', V6} end end; {'Libraries.Data.StringMap.Branch3', V13, V14, V15, V16, V17} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V1, V14)) of 1 -> case ('un--treeDelete'(0, V1, V13)) of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch3', V18, V14, V15, V16, V17}}; {'Prelude.Types.Right', V19} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch2', V15, V16, V17}} end; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V1, V16)) of 1 -> case ('un--treeDelete'(0, V1, V15)) of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch3', V13, V14, V20, V16, V17}}; {'Prelude.Types.Right', V21} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch2', V13, V14, V17}} end; 0 -> case ('un--treeDelete'(0, V1, V17)) of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch3', V13, V14, V15, V16, V22}}; {'Prelude.Types.Right', V23} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch2', V13, V14, V15}} end end end end; _ -> begin (V24 = (V5 - 1)), case V2 of {'Libraries.Data.StringMap.Branch2', V25, V26, V27} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V1, V26)) of 1 -> case ('un--treeDelete'((V24 + 1), V1, V25)) of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch2', V28, V26, V27}}; {'Prelude.Types.Right', V29} -> case V27 of {'Libraries.Data.StringMap.Branch2', V30, V31, V32} -> {'Prelude.Types.Right', {'Libraries.Data.StringMap.Branch3', V29, V26, V30, V31, V32}}; {'Libraries.Data.StringMap.Branch3', V33, V34, V35, V36, V37} -> {'Prelude.Types.Left', ('un--branch4'(V29, V26, V33, V34, V35, V36, V37))} end end; 0 -> case ('un--treeDelete'((V24 + 1), V1, V27)) of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch2', V25, V26, V38}}; {'Prelude.Types.Right', V39} -> case V25 of {'Libraries.Data.StringMap.Branch2', V40, V41, V42} -> {'Prelude.Types.Right', {'Libraries.Data.StringMap.Branch3', V40, V41, V42, V26, V39}}; {'Libraries.Data.StringMap.Branch3', V43, V44, V45, V46, V47} -> {'Prelude.Types.Left', ('un--branch4'(V43, V44, V45, V46, V47, V26, V39))} end end end; {'Libraries.Data.StringMap.Branch3', V48, V49, V50, V51, V52} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V1, V49)) of 1 -> case ('un--treeDelete'((V24 + 1), V1, V48)) of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch3', V53, V49, V50, V51, V52}}; {'Prelude.Types.Right', V54} -> {'Prelude.Types.Left', ('un--merge1'(V54, V49, V50, V51, V52))} end; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V1, V51)) of 1 -> case ('un--treeDelete'((V24 + 1), V1, V50)) of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch3', V48, V49, V55, V51, V52}}; {'Prelude.Types.Right', V56} -> {'Prelude.Types.Left', ('un--merge2'(V48, V49, V56, V51, V52))} end; 0 -> case ('un--treeDelete'((V24 + 1), V1, V52)) of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', {'Libraries.Data.StringMap.Branch3', V48, V49, V50, V51, V57}}; {'Prelude.Types.Right', V58} -> {'Prelude.Types.Left', ('un--merge3'(V48, V49, V50, V51, V58))} end end end end end end end end.
'un--toList'(V0) -> case V0 of {'Libraries.Data.StringMap.Empty'} -> []; {'Libraries.Data.StringMap.M', V1, V2} -> ('un--treeToList'(V2)) end.
'un--singleton'(V0, V1) -> {'Libraries.Data.StringMap.M', 0, {'Libraries.Data.StringMap.Leaf', V0, V1}}.
'un--mergeWith'(V0, V1, V2) -> ('un--insertFrom'(('nested--5805-3792--in--un--inserted'(V2, V1, V0)), V1)).
'un--mergeLeft'(V0, V1) -> ('un--mergeWith'(fun (V2) -> fun (V3) -> V2 end end, V0, V1)).
'un--merge3'(V0, V1, V2, V3, V4) -> case V0 of {'Libraries.Data.StringMap.Branch2', V5, V6, V7} -> case V2 of {'Libraries.Data.StringMap.Branch2', V8, V9, V10} -> ('un--branch5'(V5, V6, V7, V1, V8, V9, V10, V3, V4)); {'Libraries.Data.StringMap.Branch3', V11, V12, V13, V14, V15} -> ('un--branch6'(V5, V6, V7, V1, V11, V12, V13, V14, V15, V3, V4)) end; {'Libraries.Data.StringMap.Branch3', V16, V17, V18, V19, V20} -> case V2 of {'Libraries.Data.StringMap.Branch2', V21, V22, V23} -> ('un--branch6'(V16, V17, V18, V19, V20, V1, V21, V22, V23, V3, V4)); {'Libraries.Data.StringMap.Branch3', V24, V25, V26, V27, V28} -> ('un--branch7'(V16, V17, V18, V19, V20, V1, V24, V25, V26, V27, V28, V3, V4)) end end.
'un--merge2'(V0, V1, V2, V3, V4) -> case V0 of {'Libraries.Data.StringMap.Branch2', V5, V6, V7} -> case V4 of {'Libraries.Data.StringMap.Branch2', V8, V9, V10} -> ('un--branch5'(V5, V6, V7, V1, V2, V3, V8, V9, V10)); {'Libraries.Data.StringMap.Branch3', V11, V12, V13, V14, V15} -> ('un--branch6'(V5, V6, V7, V1, V2, V3, V11, V12, V13, V14, V15)) end; {'Libraries.Data.StringMap.Branch3', V16, V17, V18, V19, V20} -> case V4 of {'Libraries.Data.StringMap.Branch2', V21, V22, V23} -> ('un--branch6'(V16, V17, V18, V19, V20, V1, V2, V3, V21, V22, V23)); {'Libraries.Data.StringMap.Branch3', V24, V25, V26, V27, V28} -> ('un--branch7'(V16, V17, V18, V19, V20, V1, V2, V3, V24, V25, V26, V27, V28)) end end.
'un--merge1'(V0, V1, V2, V3, V4) -> case V2 of {'Libraries.Data.StringMap.Branch2', V5, V6, V7} -> case V4 of {'Libraries.Data.StringMap.Branch2', V8, V9, V10} -> ('un--branch5'(V0, V1, V5, V6, V7, V3, V8, V9, V10)); {'Libraries.Data.StringMap.Branch3', V11, V12, V13, V14, V15} -> ('un--branch6'(V0, V1, V5, V6, V7, V3, V11, V12, V13, V14, V15)) end; {'Libraries.Data.StringMap.Branch3', V16, V17, V18, V19, V20} -> case V4 of {'Libraries.Data.StringMap.Branch2', V21, V22, V23} -> ('un--branch6'(V0, V1, V16, V17, V18, V19, V20, V3, V21, V22, V23)); {'Libraries.Data.StringMap.Branch3', V24, V25, V26, V27, V28} -> ('un--branch7'(V0, V1, V16, V17, V18, V19, V20, V3, V24, V25, V26, V27, V28)) end end.
'un--merge'(V0, V1, V2) -> ('un--mergeWith'(begin (V3 = V0), fun (V4) -> fun (V5) -> ((V3(V4))(V5)) end end end, V1, V2)).
'un--lookup'(V0, V1) -> case V1 of {'Libraries.Data.StringMap.Empty'} -> {'Prelude.Types.Nothing'}; {'Libraries.Data.StringMap.M', V2, V3} -> ('un--treeLookup'(V0, V3)) end.
'un--keys'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Builtin':'un--fst'(V1)) end))(('un--toList'(V0)))).
'un--insertFrom'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V6) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V7) -> fun (V8) -> fun (V9) -> ('un--insert'(V7, V8, V9)) end end end, V6)) end, V4, V5)) end end, V2, V3)) end end, V0, V1)).
'un--insert'(V0, V1, V2) -> case V2 of {'Libraries.Data.StringMap.Empty'} -> {'Libraries.Data.StringMap.M', 0, {'Libraries.Data.StringMap.Leaf', V0, V1}}; {'Libraries.Data.StringMap.M', V3, V4} -> case ('un--treeInsert'(V0, V1, V4)) of {'Prelude.Types.Left', V5} -> {'Libraries.Data.StringMap.M', V3, V5}; {'Prelude.Types.Right', V6} -> {'Libraries.Data.StringMap.M', (V3 + 1), V6} end end.
'un--fromList'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V3) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V4) -> fun (V5) -> fun (V6) -> ('un--insert'(V4, V5, V6)) end end end, V3)) end, V1, V2)) end end, ('un--empty'()), V0)).
'un--empty'() -> {'Libraries.Data.StringMap.Empty'}.
'un--delete'(V0, V1) -> case V1 of {'Libraries.Data.StringMap.Empty'} -> {'Libraries.Data.StringMap.Empty'}; {'Libraries.Data.StringMap.M', V2, V3} -> case V2 of 0 -> case ('un--treeDelete'(0, V0, V3)) of {'Prelude.Types.Left', V4} -> {'Libraries.Data.StringMap.M', 0, V4}; {'Prelude.Types.Right', V5} -> {'Libraries.Data.StringMap.Empty'} end; _ -> begin (V6 = (V2 - 1)), case ('un--treeDelete'((V6 + 1), V0, V3)) of {'Prelude.Types.Left', V7} -> {'Libraries.Data.StringMap.M', (V6 + 1), V7}; {'Prelude.Types.Right', V8} -> {'Libraries.Data.StringMap.M', V6, V8} end end end end.
'un--branch7'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Libraries.Data.StringMap.Branch3', {'Libraries.Data.StringMap.Branch3', V0, V1, V2, V3, V4}, V5, {'Libraries.Data.StringMap.Branch2', V6, V7, V8}, V9, {'Libraries.Data.StringMap.Branch2', V10, V11, V12}}.
'un--branch6'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Libraries.Data.StringMap.Branch3', {'Libraries.Data.StringMap.Branch2', V0, V1, V2}, V3, {'Libraries.Data.StringMap.Branch2', V4, V5, V6}, V7, {'Libraries.Data.StringMap.Branch2', V8, V9, V10}}.
'un--branch5'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> {'Libraries.Data.StringMap.Branch2', {'Libraries.Data.StringMap.Branch2', V0, V1, V2}, V3, {'Libraries.Data.StringMap.Branch3', V4, V5, V6, V7, V8}}.
'un--branch4'(V0, V1, V2, V3, V4, V5, V6) -> {'Libraries.Data.StringMap.Branch2', {'Libraries.Data.StringMap.Branch2', V0, V1, V2}, V3, {'Libraries.Data.StringMap.Branch2', V4, V5, V6}}.
'un--adjust'(V0, V1, V2) -> case ('un--lookup'(V0, V2)) of {'Prelude.Types.Nothing'} -> V2; {'Prelude.Types.Just', V3} -> ('un--insert'(V0, (V1(V3)), V2)) end.
