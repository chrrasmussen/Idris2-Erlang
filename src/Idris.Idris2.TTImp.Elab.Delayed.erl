-module('Idris.Idris2.TTImp.Elab.Delayed').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--9220-13323--in--un--newBinder'/7,
  'nested--10338-14286--in--un--mkExpected'/12,
  'nested--9514-13600--in--un--mkExpected'/13,
  'nested--13013-16650--in--un--hasPri'/8,
  'nested--12056-15847--in--un--better'/16,
  'dn--un--show_Show_RetryError'/1,
  'un--runDelays'/7,
  'un--retryDelayed\x{27}'/9,
  'un--retryDelayed'/7,
  'un--recoverable'/2,
  'un--mkClosedElab'/4,
  'un--mismatchNF'/5,
  'un--mismatch'/4,
  'un--delayOnFailure'/12,
  'un--delayElab'/11,
  'un--deeper'/2,
  'un--contra'/5,
  'un--ambiguous'/1
]).
'nested--9220-13323--in--un--newBinder'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.TT.Let', V7, V8, V9, V10} -> V6; _ -> {'Core.TT.Lam', ('Idris.Idris2.Core.TT':'un--binderLoc'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V6))} end.
'nested--10338-14286--in--un--mkExpected'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Prelude.Types.Just', V12} -> fun (V13) -> {'Prelude.Types.Right', V12} end; {'Prelude.Types.Nothing'} -> begin (V14 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V10, V8, <<"delayTy"/utf8>>))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V36 = begin (V19 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V10, V8, V6))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V35 = begin (V28 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V10, V8, V6, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V24, V25)) end end, 0, fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V26, V27)) end end, 1})), V4, V18, {'Core.TT.TType', V6, V23}))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V34 = fun (V33) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, V32))} end), V34 end(V29)) end end end end), V35 end(V20)) end end end end), V36 end(V15)) end end end end end.
'nested--9514-13600--in--un--mkExpected'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Prelude.Types.Just', V13} -> fun (V14) -> {'Prelude.Types.Right', V13} end; {'Prelude.Types.Nothing'} -> begin (V15 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V11, V9, <<"delayTy"/utf8>>))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V37 = begin (V20 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V11, V9, V7))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V36 = begin (V29 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V11, V9, V7, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V25, V26)) end end, 0, fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V27, V28)) end end, 1})), V5, V19, {'Core.TT.TType', V7, V24}))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V35 = fun (V34) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, V33))} end), V35 end(V30)) end end end end), V36 end(V21)) end end end end), V37 end(V16)) end end end end end.
'nested--13013-16650--in--un--hasPri'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> (V2(V8)) end.
'nested--12056-15847--in--un--better'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Core.Core.GenericMsg', V16, V17} -> V14; _ -> case V14 of {'Core.Core.GenericMsg', V18, V19} -> V15; _ -> V14 end end.
'dn--un--show_Show_RetryError'(V0) -> case V0 of 0 -> <<"RecoverableErrors"/utf8>>; 1 -> <<"AllErrors"/utf8>> end.
'un--runDelays'(V0, V1, V2, V3, V4, V5, V6) -> begin (V12 = begin (V7 = V3), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V174 = begin (V29 = case V16 of {'Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} -> V27 end), begin (V47 = begin (V30 = V3), fun (V31) -> begin (V46 = (begin (V32 = V30), fun (V33) -> ('erlang':'put'(V32, case V16 of {'Core.UnifyState.MkUState', V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> {'Core.UnifyState.MkUState', V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, [], V45} end)) end end(V31))), {'Prelude.Types.Right', V46} end end end), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V173 = begin (V52 = V6), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V172 = begin (V62 = begin (V57 = V3), fun (V58) -> begin (V61 = (begin (V59 = V57), fun (V60) -> ('erlang':'get'(V59)) end end(V58))), {'Prelude.Types.Right', V61} end end end), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V171 = begin (V67 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.delay"/utf8>>, 2, fun () -> <<"Rerunning delayed in elaborator"/utf8>> end))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V170 = begin (V129 = ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, begin (V85 = ('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, 1, 0, [], ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V72) -> ('nested--13013-16650--in--un--hasPri'(V0, V6, V5, V4, V3, V2, V1, V72)) end, case V66 of {'Core.UnifyState.MkUState', V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84} -> V83 end))))))), ((begin (V101 = fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V98, V99, V100)) end end end end end), fun (V102) -> fun (V103) -> ((((V101('erased'))('erased'))(V102))(V103)) end end end((begin (V93 = fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> {'Prelude.Types.Right', (V89(V92))} end end end end end), fun (V94) -> fun (V95) -> ((((V93('erased'))('erased'))(V94))(V95)) end end end(fun (V86) -> {'Builtin.MkUnit'} end))))(V85)) end, fun (V104) -> begin (V122 = begin (V105 = V3), fun (V106) -> begin (V121 = (begin (V107 = V105), fun (V108) -> ('erlang':'put'(V107, case V66 of {'Core.UnifyState.MkUState', V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120} -> {'Core.UnifyState.MkUState', V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V29, V120} end)) end end(V106))), {'Prelude.Types.Right', V121} end end end), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V128 = fun (V127) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V104, V127)) end), V128 end(V123)) end end end end end))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V169 = begin (V162 = begin (V139 = begin (V134 = V3), fun (V135) -> begin (V138 = (begin (V136 = V134), fun (V137) -> ('erlang':'get'(V136)) end end(V135))), {'Prelude.Types.Right', V138} end end end), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V161 = begin (V144 = V3), fun (V145) -> begin (V160 = (begin (V146 = V144), fun (V147) -> ('erlang':'put'(V146, case V143 of {'Core.UnifyState.MkUState', V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159} -> {'Core.UnifyState.MkUState', V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V158, V29)), V159} end)) end end(V145))), {'Prelude.Types.Right', V160} end end end), V161 end(V140)) end end end end), fun (V163) -> begin (V164 = (V162(V163))), case V164 of {'Prelude.Types.Left', V165} -> {'Prelude.Types.Left', V165}; {'Prelude.Types.Right', V166} -> (begin (V168 = fun (V167) -> {'Prelude.Types.Right', V56} end), V168 end(V163)) end end end end), V169 end(V130)) end end end end), V170 end(V68)) end end end end), V171 end(V63)) end end end end), V172 end(V53)) end end end end), V173 end(V48)) end end end end end), V174 end(V13)) end end end end.
'un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> fun (V9) -> {'Prelude.Types.Right', {'Builtin.MkPair', V6, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V7))}} end; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> case V15 of {'Builtin.MkPair', V16, V17} -> begin (V23 = begin (V18 = V1), fun (V19) -> begin (V22 = (begin (V20 = V18), fun (V21) -> ('erlang':'get'(V20)) end end(V19))), {'Prelude.Types.Right', V22} end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V317 = begin (V60 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'({'Core.Name.Resolved', V14}, case V27 of {'Core.Context.MkDefs', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> V28 end))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V316 = begin (V65 = {'Builtin.MkPair', V12, {'Builtin.MkPair', V14, {'Builtin.MkPair', V16, V17}}}), case V64 of {'Prelude.Types.Just', V66} -> case V66 of {'Core.Context.Context.Delayed'} -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, begin (V72 = begin (V67 = V4), fun (V68) -> begin (V71 = (begin (V69 = V67), fun (V70) -> ('erlang':'get'(V69)) end end(V68))), {'Prelude.Types.Right', V71} end end end), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V264 = begin (V103 = begin (V77 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Core.Name.Resolved', V14}))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V102 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V83 = fun (V82) -> V82 end), fun (V84) -> (V83(V84)) end end(<<"elab.retry"/utf8>>)), 5, fun () -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(case V76 of {'TTImp.Elab.Check.MkEState', V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98} -> V95 end))/binary, <<(begin (V100 = fun (V99) -> V99 end), fun (V101) -> (V100(V101)) end end(<<": Retrying delayed hole "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V81))/binary>>/binary>> end))), V102 end(V78)) end end end end), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V263 = begin (V136 = begin (V113 = begin (V108 = V3), fun (V109) -> begin (V112 = (begin (V110 = V108), fun (V111) -> ('erlang':'get'(V110)) end end(V109))), {'Prelude.Types.Right', V112} end end end), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V135 = begin (V118 = V3), fun (V119) -> begin (V134 = (begin (V120 = V118), fun (V121) -> ('erlang':'put'(V120, case V117 of {'Core.UnifyState.MkUState', V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133} -> {'Core.UnifyState.MkUState', V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, [], V133} end)) end end(V119))), {'Prelude.Types.Right', V134} end end end), V135 end(V114)) end end end end), fun (V137) -> begin (V138 = (V136(V137))), case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> (begin (V262 = begin (V189 = begin (V146 = begin (V141 = V1), fun (V142) -> begin (V145 = (begin (V143 = V141), fun (V144) -> ('erlang':'get'(V143)) end end(V142))), {'Prelude.Types.Right', V145} end end end), fun (V147) -> begin (V148 = (V146(V147))), case V148 of {'Prelude.Types.Left', V149} -> {'Prelude.Types.Left', V149}; {'Prelude.Types.Right', V150} -> (begin (V188 = begin (V151 = V1), fun (V152) -> begin (V187 = (begin (V153 = V151), fun (V154) -> ('erlang':'put'(V153, case V150 of {'Core.Context.MkDefs', V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186} -> {'Core.Context.MkDefs', V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V16, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186} end)) end end(V152))), {'Prelude.Types.Right', V187} end end end), V188 end(V147)) end end end end), fun (V190) -> begin (V191 = (V189(V190))), case V191 of {'Prelude.Types.Left', V192} -> {'Prelude.Types.Left', V192}; {'Prelude.Types.Right', V193} -> (begin (V261 = begin (V194 = V17), fun (V195) -> begin (V196 = (V194(V195))), case V196 of {'Prelude.Types.Left', V197} -> {'Prelude.Types.Left', V197}; {'Prelude.Types.Right', V198} -> (begin (V260 = begin (V204 = begin (V199 = V3), fun (V200) -> begin (V203 = (begin (V201 = V199), fun (V202) -> ('erlang':'get'(V201)) end end(V200))), {'Prelude.Types.Right', V203} end end end), fun (V205) -> begin (V206 = (V204(V205))), case V206 of {'Prelude.Types.Left', V207} -> {'Prelude.Types.Left', V207}; {'Prelude.Types.Right', V208} -> (begin (V259 = begin (V221 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(case V208 of {'Core.UnifyState.MkUState', V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220} -> V219 end)), V11))), begin (V223 = ('Idris.Idris2.Core.Context':'un--updateDef'(V1, {'Core.Name.Resolved', V14}, fun (V222) -> {'Prelude.Types.Just', {'Core.Context.Context.PMDef', {'Core.Context.Context.MkPMDefInfo', {'Core.Context.Context.NotHole'}, 1, 0}, [], {'Core.Case.CaseTree.STerm', 0, V198}, {'Core.Case.CaseTree.STerm', 0, V198}, []}} end))), fun (V224) -> begin (V225 = (V223(V224))), case V225 of {'Prelude.Types.Left', V226} -> {'Prelude.Types.Left', V226}; {'Prelude.Types.Right', V227} -> (begin (V258 = begin (V234 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, (begin (V229 = fun (V228) -> V228 end), fun (V230) -> (V229(V230)) end end(<<"elab.update"/utf8>>)), 5, fun () -> <<(begin (V232 = fun (V231) -> V231 end), fun (V233) -> (V232(V233)) end end(<<"Resolved delayed hole "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V14))/binary>> end, V198))), fun (V235) -> begin (V236 = (V234(V235))), case V236 of {'Prelude.Types.Left', V237} -> {'Prelude.Types.Left', V237}; {'Prelude.Types.Right', V238} -> (begin (V257 = begin (V245 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, (begin (V240 = fun (V239) -> V239 end), fun (V241) -> (V240(V241)) end end(<<"elab.update"/utf8>>)), 5, fun () -> <<(begin (V243 = fun (V242) -> V242 end), fun (V244) -> (V243(V244)) end end(<<"Resolved delayed hole NF "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V14))/binary>> end, {'Core.Env.Nil'}, V198))), fun (V246) -> begin (V247 = (V245(V246))), case V247 of {'Prelude.Types.Left', V248} -> {'Prelude.Types.Left', V248}; {'Prelude.Types.Right', V249} -> (begin (V256 = begin (V250 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V3, V14))), fun (V251) -> begin (V252 = (V250(V251))), case V252 of {'Prelude.Types.Left', V253} -> {'Prelude.Types.Left', V253}; {'Prelude.Types.Right', V254} -> (begin (V255 = ('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, 1, V7, V221))), V255 end(V251)) end end end end), V256 end(V246)) end end end end), V257 end(V235)) end end end end), V258 end(V224)) end end end end end), V259 end(V205)) end end end end), V260 end(V195)) end end end end), V261 end(V190)) end end end end), V262 end(V137)) end end end end), V263 end(V104)) end end end end), V264 end(V73)) end end end end, fun (V265) -> begin (V275 = begin (V266 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Core.Name.Resolved', V14}))), fun (V267) -> begin (V268 = (V266(V267))), case V268 of {'Prelude.Types.Left', V269} -> {'Prelude.Types.Left', V269}; {'Prelude.Types.Right', V270} -> (begin (V274 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab"/utf8>>, 5, fun () -> <<('dn--un--show_Show_RetryError'(V5))/binary, <<(begin (V272 = fun (V271) -> V271 end), fun (V273) -> (V272(V273)) end end(<<":Error in "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V270))/binary, <<<<"\x{a}"/utf8>>/binary, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V265))/binary>>/binary>>/binary>>/binary>> end))), V274 end(V267)) end end end end), fun (V276) -> begin (V277 = (V275(V276))), case V277 of {'Prelude.Types.Left', V278} -> {'Prelude.Types.Left', V278}; {'Prelude.Types.Right', V279} -> (begin (V315 = case V5 of 0 -> begin (V280 = ('un--recoverable'(V1, V265))), fun (V281) -> begin (V282 = (V280(V281))), case V282 of {'Prelude.Types.Left', V283} -> {'Prelude.Types.Left', V283}; {'Prelude.Types.Right', V284} -> (begin (V286 = case V284 of 1 -> ('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, 0, V6, [V65 | V7], V11)); 0 -> fun (V285) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V265, V285)) end end), V286 end(V281)) end end end end; 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, begin (V306 = begin (V287 = ('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, [], V11))), ((begin (V303 = fun (V298) -> fun (V299) -> fun (V300) -> fun (V301) -> fun (V302) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V300, V301, V302)) end end end end end), fun (V304) -> fun (V305) -> ((((V303('erased'))('erased'))(V304))(V305)) end end end((begin (V295 = fun (V289) -> fun (V290) -> fun (V291) -> fun (V292) -> case V292 of {'Prelude.Types.Left', V293} -> {'Prelude.Types.Left', V293}; {'Prelude.Types.Right', V294} -> {'Prelude.Types.Right', (V291(V294))} end end end end end), fun (V296) -> fun (V297) -> ((((V295('erased'))('erased'))(V296))(V297)) end end end(fun (V288) -> {'Builtin.MkUnit'} end))))(V287)) end), fun (V307) -> begin (V308 = (V306(V307))), case V308 of {'Prelude.Types.Left', V309} -> {'Prelude.Types.Left', V309}; {'Prelude.Types.Right', V310} -> (begin (V312 = fun (V311) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V265, V311)) end), V312 end(V307)) end end end end, fun (V313) -> fun (V314) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(('nested--12056-15847--in--un--better'(V0, V12, V14, V16, V17, V65, V11, V7, V6, V5, V4, V3, V2, V1, V265, V313)), V314)) end end)) end), V315 end(V276)) end end end end end)); _ -> ('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V11)) end; _ -> ('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V11)) end end), V316 end(V61)) end end end end), V317 end(V24)) end end end end end end end end(E0, E1)) end.
'un--retryDelayed'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, 0, 0, [], V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V39 = case V11 of {'Builtin.MkPair', V12, V13} -> begin (V14 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V5, 0))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V38 = case V12 of 1 -> ('un--retryDelayed'(V0, V1, V2, V3, V4, V5, V13)); 0 -> begin (V19 = ('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, 1, 0, [], V13))), ((begin (V35 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V32, V33, V34)) end end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end((begin (V27 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> {'Prelude.Types.Right', (V23(V26))} end end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V20) -> {'Builtin.MkUnit'} end))))(V19)) end end), V38 end(V15)) end end end end end), V39 end(V8)) end end end end.
'un--recoverable'(V0, V1) -> case V1 of {'Core.Core.CantConvert', V2, V3, V4, V5, V6, V7} -> begin (V13 = begin (V8 = V0), fun (V9) -> begin (V12 = (begin (V10 = V8), fun (V11) -> ('erlang':'get'(V10)) end end(V9))), {'Prelude.Types.Right', V12} end end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V70 = begin (V50 = case V17 of {'Core.Context.MkDefs', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} -> {'Core.Context.MkDefs', V4, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} end), begin (V51 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V2, V50, V5, V6))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V69 = begin (V56 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V2, V50, V5, V7))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V68 = begin (V61 = ('un--contra'(V0, V2, V50, V55, V60))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V67 = fun (V66) -> {'Prelude.Types.Right', case V65 of 1 -> 0; 0 -> 1 end} end), V67 end(V62)) end end end end), V68 end(V57)) end end end end), V69 end(V52)) end end end end end), V70 end(V14)) end end end end; {'Core.Core.CantSolveEq', V71, V72, V73, V74, V75, V76} -> begin (V82 = begin (V77 = V0), fun (V78) -> begin (V81 = (begin (V79 = V77), fun (V80) -> ('erlang':'get'(V79)) end end(V78))), {'Prelude.Types.Right', V81} end end end), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V139 = begin (V119 = case V86 of {'Core.Context.MkDefs', V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118} -> {'Core.Context.MkDefs', V73, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118} end), begin (V120 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V71, V119, V74, V75))), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V138 = begin (V125 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V71, V119, V74, V76))), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V137 = begin (V130 = ('un--contra'(V0, V71, V119, V124, V129))), fun (V131) -> begin (V132 = (V130(V131))), case V132 of {'Prelude.Types.Left', V133} -> {'Prelude.Types.Left', V133}; {'Prelude.Types.Right', V134} -> (begin (V136 = fun (V135) -> {'Prelude.Types.Right', case V134 of 1 -> 0; 0 -> 1 end} end), V136 end(V131)) end end end end), V137 end(V126)) end end end end), V138 end(V121)) end end end end end), V139 end(V83)) end end end end; {'Core.Core.UndefinedName', V140, V141} -> fun (V142) -> {'Prelude.Types.Right', 0} end; {'Core.Core.LinearMisuse', V143, V144, V145, V146} -> fun (V147) -> {'Prelude.Types.Right', 0} end; {'Core.Core.InType', V148, V149, V150} -> ('un--recoverable'(V0, V150)); {'Core.Core.InCon', V151, V152, V153} -> ('un--recoverable'(V0, V153)); {'Core.Core.InLHS', V154, V155, V156} -> ('un--recoverable'(V0, V156)); {'Core.Core.InRHS', V157, V158, V159} -> ('un--recoverable'(V0, V159)); {'Core.Core.WhenUnifying', V160, V161, V162, V163, V164, V165, V166} -> ('un--recoverable'(V0, V166)); _ -> fun (V167) -> {'Prelude.Types.Right', 1} end end.
'un--mkClosedElab'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Core.Env.Nil'} -> begin (V4 = V3), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V12 = fun (V9) -> case V8 of {'Builtin.MkPair', V10, V11} -> {'Prelude.Types.Right', V10} end end), V12 end(V5)) end end end end end; [E0 | E1] -> (fun (V13, V14) -> case V2 of {'Core.Env.::', V15, V16} -> ('un--mkClosedElab'(V14, V1, V16, begin (V17 = V3), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V26 = case V21 of {'Builtin.MkPair', V22, V23} -> begin (V24 = ('nested--9220-13323--in--un--newBinder'(V13, V14, V16, V15, V3, V1, V15))), fun (V25) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Bind', V1, V13, V24, V22}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V1))}} end end end), V26 end(V18)) end end end end)) end end(E0, E1)) end.
'un--mismatchNF'(V0, V1, V2, V3, V4) -> case V3 of {'Core.Value.NTCon', V5, V6, V7, V8, V9} -> case V4 of {'Core.Value.NTCon', V10, V11, V12, V13, V14} -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V11)) of 1 -> fun (V15) -> {'Prelude.Types.Right', 1} end; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> ('un--mismatch'(V0, V1, V2, V16)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V19) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> case V26 of {'Builtin.MkPair', V27, V28} -> {'Builtin.MkPair', (V24(V27)), (V25(V28))} end end end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> case V33 of {'Builtin.MkPair', V34, V35} -> {'Builtin.MkPair', (V32(V34)), V35} end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> case V40 of {'Builtin.MkPair', V41, V42} -> {'Builtin.MkPair', V41, (V39(V42))} end end end end end end}, fun (V43) -> ('Idris.Idris2.Builtin':'un--snd'(V43)) end, V19)) end, V17, V18)) end end, V9, V14)))) end; _ -> fun (V44) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NDCon', V45, V46, V47, V48, V49} -> case V4 of {'Core.Value.NDCon', V50, V51, V52, V53, V54} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V47, V52)) of 1 -> fun (V55) -> {'Prelude.Types.Right', 1} end; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V56) -> ('un--mismatch'(V0, V1, V2, V56)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V59) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> case V66 of {'Builtin.MkPair', V67, V68} -> {'Builtin.MkPair', (V64(V67)), (V65(V68))} end end end end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> case V73 of {'Builtin.MkPair', V74, V75} -> {'Builtin.MkPair', (V72(V74)), V75} end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> case V80 of {'Builtin.MkPair', V81, V82} -> {'Builtin.MkPair', V81, (V79(V82))} end end end end end end}, fun (V83) -> ('Idris.Idris2.Builtin':'un--snd'(V83)) end, V59)) end, V57, V58)) end end, V49, V54)))) end; _ -> fun (V84) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V85, V86} -> fun (V87) -> case V4 of {'Core.Value.NPrimVal', V88, V89} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V86, V89))}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NDelayed', V90, V91, V92} -> case V4 of {'Core.Value.NDelayed', V93, V94, V95} -> ('un--mismatchNF'(V0, V1, V2, V92, V95)); _ -> fun (V96) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NDelay', V97, V98, V99, V100} -> case V4 of {'Core.Value.NDelay', V101, V102, V103, V104} -> begin (V105 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V100))), fun (V106) -> begin (V107 = (V105(V106))), case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> (begin (V116 = begin (V110 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V104))), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V115 = ('un--mismatchNF'(V0, V1, V2, V109, V114))), V115 end(V111)) end end end end), V116 end(V106)) end end end end; _ -> fun (V117) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V118) -> {'Prelude.Types.Right', 0} end end.
'un--mismatch'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V6 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V17 = begin (V11 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V5))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V16 = ('un--mismatchNF'(V0, V1, V2, V10, V15))), V16 end(V12)) end end end end), V17 end(V7)) end end end end end.
'un--delayOnFailure'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V17 = begin (V12 = V3), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V268 = begin (V34 = case V21 of {'Core.UnifyState.MkUState', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V27 end), ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, (V11(0)), fun (V35) -> begin (V41 = begin (V36 = V4), fun (V37) -> begin (V40 = (begin (V38 = V36), fun (V39) -> ('erlang':'get'(V38)) end end(V37))), {'Prelude.Types.Right', V40} end end end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V267 = begin (V46 = ('nested--9514-13600--in--un--mkExpected'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V8))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V266 = case (V9(V35)) of 1 -> begin (V51 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"delayed"/utf8>>))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V264 = begin (V66 = begin (V56 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V50))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V65 = ('Idris.Idris2.Core.UnifyState':'un--newDelayed'(V0, V3, V1, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V61) -> fun (V62) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V61, V62)) end end, 0, fun (V63) -> fun (V64) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V63, V64)) end end, 1})), V7, V55, V60))), V65 end(V57)) end end end end), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V263 = case V70 of {'Builtin.MkPair', V71, V72} -> begin (V79 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, (begin (V74 = fun (V73) -> V73 end), fun (V75) -> (V74(V75)) end end(<<"elab.delay"/utf8>>)), 5, fun () -> <<(begin (V77 = fun (V76) -> V76 end), fun (V78) -> (V77(V78)) end end(<<"Postponing elaborator "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V55))/binary, <<<<" at "/utf8>>/binary, <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V5))/binary, <<" for"/utf8>>/binary>>/binary>>/binary>>/binary>> end, V7, V50))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V262 = begin (V90 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V85 = fun (V84) -> V84 end), fun (V86) -> (V85(V86)) end end(<<"elab.delay"/utf8>>)), 10, fun () -> <<(begin (V88 = fun (V87) -> V87 end), fun (V89) -> (V88(V89)) end end(<<"Due to error "/utf8>>))/binary, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V35))/binary>> end))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V261 = begin (V100 = begin (V95 = V1), fun (V96) -> begin (V99 = (begin (V97 = V95), fun (V98) -> ('erlang':'get'(V97)) end end(V96))), {'Prelude.Types.Right', V99} end end end), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V260 = begin (V253 = begin (V110 = begin (V105 = V3), fun (V106) -> begin (V109 = (begin (V107 = V105), fun (V108) -> ('erlang':'get'(V107)) end end(V106))), {'Prelude.Types.Right', V109} end end end), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V252 = begin (V115 = V3), fun (V116) -> begin (V251 = (begin (V117 = V115), fun (V118) -> ('erlang':'put'(V117, case V114 of {'Core.UnifyState.MkUState', V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130} -> {'Core.UnifyState.MkUState', V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, [{'Builtin.MkPair', V10, {'Builtin.MkPair', V71, {'Builtin.MkPair', case V104 of {'Core.Context.MkDefs', V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162} -> V141 end, ('un--mkClosedElab'(V0, V5, V7, ('un--deeper'(V4, begin (V168 = begin (V163 = V3), fun (V164) -> begin (V167 = (begin (V165 = V163), fun (V166) -> ('erlang':'get'(V165)) end end(V164))), {'Prelude.Types.Right', V167} end end end), fun (V169) -> begin (V170 = (V168(V169))), case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> (begin (V250 = begin (V185 = case V172 of {'Core.UnifyState.MkUState', V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184} -> V178 end), begin (V203 = begin (V186 = V3), fun (V187) -> begin (V202 = (begin (V188 = V186), fun (V189) -> ('erlang':'put'(V188, case V172 of {'Core.UnifyState.MkUState', V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201} -> {'Core.UnifyState.MkUState', V190, V191, V192, V193, V194, V34, V196, V197, V198, V199, V200, V201} end)) end end(V187))), {'Prelude.Types.Right', V202} end end end), fun (V204) -> begin (V205 = (V203(V204))), case V205 of {'Prelude.Types.Left', V206} -> {'Prelude.Types.Left', V206}; {'Prelude.Types.Right', V207} -> (begin (V249 = begin (V208 = (V11(1))), fun (V209) -> begin (V210 = (V208(V209))), case V210 of {'Prelude.Types.Left', V211} -> {'Prelude.Types.Left', V211}; {'Prelude.Types.Right', V212} -> (begin (V248 = begin (V218 = begin (V213 = V3), fun (V214) -> begin (V217 = (begin (V215 = V213), fun (V216) -> ('erlang':'get'(V215)) end end(V214))), {'Prelude.Types.Right', V217} end end end), fun (V219) -> begin (V220 = (V218(V219))), case V220 of {'Prelude.Types.Left', V221} -> {'Prelude.Types.Left', V221}; {'Prelude.Types.Right', V222} -> (begin (V247 = begin (V240 = begin (V223 = V3), fun (V224) -> begin (V239 = (begin (V225 = V223), fun (V226) -> ('erlang':'put'(V225, case V222 of {'Core.UnifyState.MkUState', V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238} -> {'Core.UnifyState.MkUState', V227, V228, V229, V230, V231, V185, V233, V234, V235, V236, V237, V238} end)) end end(V224))), {'Prelude.Types.Right', V239} end end end), fun (V241) -> begin (V242 = (V240(V241))), case V242 of {'Prelude.Types.Left', V243} -> {'Prelude.Types.Left', V243}; {'Prelude.Types.Right', V244} -> (begin (V246 = fun (V245) -> {'Prelude.Types.Right', V212} end), V246 end(V241)) end end end end), V247 end(V219)) end end end end), V248 end(V209)) end end end end), V249 end(V204)) end end end end end), V250 end(V169)) end end end end))))}}} | V129], V130} end)) end end(V116))), {'Prelude.Types.Right', V251} end end end), V252 end(V111)) end end end end), fun (V254) -> begin (V255 = (V253(V254))), case V255 of {'Prelude.Types.Left', V256} -> {'Prelude.Types.Left', V256}; {'Prelude.Types.Right', V257} -> (begin (V259 = fun (V258) -> {'Prelude.Types.Right', {'Builtin.MkPair', V72, V50}} end), V259 end(V254)) end end end end), V260 end(V101)) end end end end), V261 end(V91)) end end end end), V262 end(V80)) end end end end end), V263 end(V67)) end end end end), V264 end(V52)) end end end end; 0 -> fun (V265) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V35, V265)) end end), V266 end(V47)) end end end end), V267 end(V42)) end end end end end)) end), V268 end(V18)) end end end end.
'un--delayElab'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V16 = begin (V11 = V3), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V242 = begin (V33 = case V20 of {'Core.UnifyState.MkUState', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> V26 end), begin (V34 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"delayed"/utf8>>))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V241 = begin (V39 = ('nested--10338-14286--in--un--mkExpected'(V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V8))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V240 = begin (V54 = begin (V44 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V43))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V53 = ('Idris.Idris2.Core.UnifyState':'un--newDelayed'(V0, V3, V1, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V49) -> fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V49, V50)) end end, 0, fun (V51) -> fun (V52) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V51, V52)) end end, 1})), V7, V38, V48))), V53 end(V45)) end end end end), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V239 = case V58 of {'Builtin.MkPair', V59, V60} -> begin (V67 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, (begin (V62 = fun (V61) -> V61 end), fun (V63) -> (V62(V63)) end end(<<"elab.delay"/utf8>>)), 5, fun () -> <<(begin (V65 = fun (V64) -> V64 end), fun (V66) -> (V65(V66)) end end(<<"Postponing elaborator "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V38))/binary, <<" for"/utf8>>/binary>>/binary>> end, V7, V43))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V238 = begin (V77 = begin (V72 = V1), fun (V73) -> begin (V76 = (begin (V74 = V72), fun (V75) -> ('erlang':'get'(V74)) end end(V73))), {'Prelude.Types.Right', V76} end end end), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V237 = begin (V230 = begin (V87 = begin (V82 = V3), fun (V83) -> begin (V86 = (begin (V84 = V82), fun (V85) -> ('erlang':'get'(V84)) end end(V83))), {'Prelude.Types.Right', V86} end end end), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V229 = begin (V92 = V3), fun (V93) -> begin (V228 = (begin (V94 = V92), fun (V95) -> ('erlang':'put'(V94, case V91 of {'Core.UnifyState.MkUState', V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107} -> {'Core.UnifyState.MkUState', V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, [{'Builtin.MkPair', V9, {'Builtin.MkPair', V59, {'Builtin.MkPair', case V81 of {'Core.Context.MkDefs', V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139} -> V118 end, ('un--mkClosedElab'(V0, V5, V7, begin (V145 = begin (V140 = V3), fun (V141) -> begin (V144 = (begin (V142 = V140), fun (V143) -> ('erlang':'get'(V142)) end end(V141))), {'Prelude.Types.Right', V144} end end end), fun (V146) -> begin (V147 = (V145(V146))), case V147 of {'Prelude.Types.Left', V148} -> {'Prelude.Types.Left', V148}; {'Prelude.Types.Right', V149} -> (begin (V227 = begin (V162 = case V149 of {'Core.UnifyState.MkUState', V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161} -> V155 end), begin (V180 = begin (V163 = V3), fun (V164) -> begin (V179 = (begin (V165 = V163), fun (V166) -> ('erlang':'put'(V165, case V149 of {'Core.UnifyState.MkUState', V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178} -> {'Core.UnifyState.MkUState', V167, V168, V169, V170, V171, V33, V173, V174, V175, V176, V177, V178} end)) end end(V164))), {'Prelude.Types.Right', V179} end end end), fun (V181) -> begin (V182 = (V180(V181))), case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> (begin (V226 = begin (V185 = V10), fun (V186) -> begin (V187 = (V185(V186))), case V187 of {'Prelude.Types.Left', V188} -> {'Prelude.Types.Left', V188}; {'Prelude.Types.Right', V189} -> (begin (V225 = begin (V195 = begin (V190 = V3), fun (V191) -> begin (V194 = (begin (V192 = V190), fun (V193) -> ('erlang':'get'(V192)) end end(V191))), {'Prelude.Types.Right', V194} end end end), fun (V196) -> begin (V197 = (V195(V196))), case V197 of {'Prelude.Types.Left', V198} -> {'Prelude.Types.Left', V198}; {'Prelude.Types.Right', V199} -> (begin (V224 = begin (V217 = begin (V200 = V3), fun (V201) -> begin (V216 = (begin (V202 = V200), fun (V203) -> ('erlang':'put'(V202, case V199 of {'Core.UnifyState.MkUState', V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215} -> {'Core.UnifyState.MkUState', V204, V205, V206, V207, V208, V162, V210, V211, V212, V213, V214, V215} end)) end end(V201))), {'Prelude.Types.Right', V216} end end end), fun (V218) -> begin (V219 = (V217(V218))), case V219 of {'Prelude.Types.Left', V220} -> {'Prelude.Types.Left', V220}; {'Prelude.Types.Right', V221} -> (begin (V223 = fun (V222) -> {'Prelude.Types.Right', V189} end), V223 end(V218)) end end end end), V224 end(V196)) end end end end), V225 end(V186)) end end end end), V226 end(V181)) end end end end end), V227 end(V146)) end end end end))}}} | V106], V107} end)) end end(V93))), {'Prelude.Types.Right', V228} end end end), V229 end(V88)) end end end end), fun (V231) -> begin (V232 = (V230(V231))), case V232 of {'Prelude.Types.Left', V233} -> {'Prelude.Types.Left', V233}; {'Prelude.Types.Right', V234} -> (begin (V236 = fun (V235) -> {'Prelude.Types.Right', {'Builtin.MkPair', V60, V43}} end), V236 end(V231)) end end end end), V237 end(V78)) end end end end), V238 end(V68)) end end end end end), V239 end(V55)) end end end end), V240 end(V40)) end end end end), V241 end(V35)) end end end end end), V242 end(V17)) end end end end.
'un--deeper'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V95 = begin (V26 = case V11 of {'TTImp.Elab.Check.MkEState', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25} -> V22 end), begin (V46 = begin (V27 = V0), fun (V28) -> begin (V45 = (begin (V29 = V27), fun (V30) -> ('erlang':'put'(V29, case V11 of {'TTImp.Elab.Check.MkEState', V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> {'TTImp.Elab.Check.MkEState', V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, (V26 + 1), V42, V43, V44} end)) end end(V28))), {'Prelude.Types.Right', V45} end end end), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V94 = begin (V51 = V1), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V93 = begin (V61 = begin (V56 = V0), fun (V57) -> begin (V60 = (begin (V58 = V56), fun (V59) -> ('erlang':'get'(V58)) end end(V57))), {'Prelude.Types.Right', V60} end end end), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V92 = begin (V85 = begin (V66 = V0), fun (V67) -> begin (V84 = (begin (V68 = V66), fun (V69) -> ('erlang':'put'(V68, case V65 of {'TTImp.Elab.Check.MkEState', V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> {'TTImp.Elab.Check.MkEState', V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V26, V81, V82, V83} end)) end end(V67))), {'Prelude.Types.Right', V84} end end end), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V91 = fun (V90) -> {'Prelude.Types.Right', V55} end), V91 end(V86)) end end end end), V92 end(V62)) end end end end), V93 end(V52)) end end end end), V94 end(V47)) end end end end end), V95 end(V8)) end end end end.
'un--contra'(V0, V1, V2, V3, V4) -> case V3 of {'Core.Value.NTCon', V5, V6, V7, V8, V9} -> case V4 of {'Core.Value.NTCon', V10, V11, V12, V13, V14} -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V11)) of 1 -> fun (V15) -> {'Prelude.Types.Right', 1} end; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> ('un--mismatch'(V0, V1, V2, V16)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V19) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> case V26 of {'Builtin.MkPair', V27, V28} -> {'Builtin.MkPair', (V24(V27)), (V25(V28))} end end end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> case V33 of {'Builtin.MkPair', V34, V35} -> {'Builtin.MkPair', (V32(V34)), V35} end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> case V40 of {'Builtin.MkPair', V41, V42} -> {'Builtin.MkPair', V41, (V39(V42))} end end end end end end}, fun (V43) -> ('Idris.Idris2.Builtin':'un--snd'(V43)) end, V19)) end, V17, V18)) end end, V9, V14)))) end; _ -> fun (V44) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NDCon', V45, V46, V47, V48, V49} -> case V4 of {'Core.Value.NDCon', V50, V51, V52, V53, V54} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V47, V52)) of 1 -> fun (V55) -> {'Prelude.Types.Right', 1} end; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V56) -> ('un--mismatch'(V0, V1, V2, V56)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V59) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Prelude.Interfaces.MkBifunctor', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> case V66 of {'Builtin.MkPair', V67, V68} -> {'Builtin.MkPair', (V64(V67)), (V65(V68))} end end end end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> case V73 of {'Builtin.MkPair', V74, V75} -> {'Builtin.MkPair', (V72(V74)), V75} end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> case V80 of {'Builtin.MkPair', V81, V82} -> {'Builtin.MkPair', V81, (V79(V82))} end end end end end end}, fun (V83) -> ('Idris.Idris2.Builtin':'un--snd'(V83)) end, V59)) end, V57, V58)) end end, V49, V54)))) end; {'Core.Value.NPrimVal', V84, V85} -> fun (V86) -> {'Prelude.Types.Right', 1} end; _ -> fun (V87) -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NPrimVal', V88, V89} -> fun (V90) -> case V4 of {'Core.Value.NPrimVal', V91, V92} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V89, V92))}; {'Core.Value.NDCon', V93, V94, V95, V96, V97} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V98) -> {'Prelude.Types.Right', 0} end end.
'un--ambiguous'(V0) -> case V0 of {'Core.Core.AmbiguousElab', V1, V2, V3, V4} -> 1; {'Core.Core.AmbiguousName', V5, V6} -> 1; {'Core.Core.AmbiguityTooDeep', V7, V8, V9} -> 1; {'Core.Core.InType', V10, V11, V12} -> ('un--ambiguous'(V12)); {'Core.Core.InCon', V13, V14, V15} -> ('un--ambiguous'(V15)); {'Core.Core.InLHS', V16, V17, V18} -> ('un--ambiguous'(V18)); {'Core.Core.InRHS', V19, V20, V21} -> ('un--ambiguous'(V21)); {'Core.Core.WhenUnifying', V22, V23, V24, V25, V26, V27, V28} -> ('un--ambiguous'(V28)); _ -> 0 end.
