-module('Idris.Idris2.Compiler.ANF').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8169-3102--in--un--showArg'/6,
  'nested--8575-3468--in--un--doBind'/6,
  'nested--9307-4110--in--un--bindArgs'/6,
  'nested--8730-3962--in--un--bindArgs'/10,
  'dn--un--show_Show_AVar'/1,
  'dn--un--show_Show_ANFDef'/1,
  'dn--un--show_Show_ANF'/1,
  'dn--un--show_Show_AConstAlt'/1,
  'dn--un--show_Show_AConAlt'/1,
  'dn--un--showPrec_Show_AVar'/2,
  'dn--un--showPrec_Show_ANFDef'/2,
  'dn--un--showPrec_Show_ANF'/2,
  'dn--un--showPrec_Show_AConstAlt'/2,
  'dn--un--showPrec_Show_AConAlt'/2,
  'dn--un--__Impl_Show_AVar'/0,
  'dn--un--__Impl_Show_ANFDef'/0,
  'dn--un--__Impl_Show_ANF'/0,
  'dn--un--__Impl_Show_AConstAlt'/0,
  'dn--un--__Impl_Show_AConAlt'/0,
  'un--toANF'/1,
  'un--showLazy'/1,
  'un--nextVar'/1,
  'un--mlet'/4,
  'un--lookup'/2,
  'un--letBind'/4,
  'un--bindArgs'/2,
  'un--anfConstAlt'/4,
  'un--anfConAlt'/4,
  'un--anfArgs'/6,
  'un--anf'/4
]).
'nested--8169-3102--in--un--showArg'(V0, V1, V2, V3, V4, V5) -> <<<<"v"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5))/binary>>.
'nested--8575-3468--in--un--doBind'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> (V0(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V4)))); [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Builtin.MkPair', V8, V9} -> case V8 of {'Compiler.ANF.ALocal', V10} -> case V9 of {'Prelude.Types.Just', V11} -> {'Compiler.ANF.ALet', V2, V10, V11, ('nested--8575-3468--in--un--doBind'(V0, V1, V2, V3, [{'Compiler.ANF.ALocal', V10} | V4], V7))}; _ -> ('nested--8575-3468--in--un--doBind'(V0, V1, V2, V3, [V8 | V4], V7)) end; _ -> ('nested--8575-3468--in--un--doBind'(V0, V1, V2, V3, [V8 | V4], V7)) end end end(E0, E1)) end.
'nested--9307-4110--in--un--bindArgs'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> fun (V6) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], V5}} end; [E0 | E1] -> (fun (V7, V8) -> begin (V9 = ('un--nextVar'(V3))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V23 = begin (V14 = ('nested--9307-4110--in--un--bindArgs'(V0, V1, V2, V3, V8, V5))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V22 = fun (V19) -> case V18 of {'Builtin.MkPair', V20, V21} -> {'Prelude.Types.Right', {'Builtin.MkPair', [V13 | V20], {'Compiler.ANF.::', V13, V21}}} end end), V22 end(V15)) end end end end), V23 end(V10)) end end end end end(E0, E1)) end.
'nested--8730-3962--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> fun (V10) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], V9}} end; [E0 | E1] -> (fun (V11, V12) -> begin (V13 = ('un--nextVar'(V7))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V27 = begin (V18 = ('nested--8730-3962--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V12, V9))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V26 = fun (V23) -> case V22 of {'Builtin.MkPair', V24, V25} -> {'Prelude.Types.Right', {'Builtin.MkPair', [V17 | V24], {'Compiler.ANF.::', V17, V25}}} end end), V26 end(V19)) end end end end), V27 end(V14)) end end end end end(E0, E1)) end.
'dn--un--show_Show_AVar'(V0) -> case V0 of {'Compiler.ANF.ALocal', V1} -> <<<<"v"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1))/binary>>; {'Compiler.ANF.ANull'} -> <<"[__]"/utf8>> end.
'dn--un--show_Show_ANFDef'(V0) -> case V0 of {'Compiler.ANF.MkAFun', V1, V2} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V4, V5)) end end}, V1))/binary, <<<<": "/utf8>>/binary, ('dn--un--show_Show_ANF'(V2))/binary>>/binary>>; {'Compiler.ANF.MkACon', V6, V7, V8} -> <<<<"Constructor tag "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V10, V11)) end end}, V6))/binary, <<<<" arity "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7))/binary, <<<<" newtype by "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V13, V14)) end end}, V8))/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.ANF.MkAForeign', V15, V16, V17} -> <<<<"Foreign call "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V18)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V19, V20)) end end}, V15))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_CFType'(V22, V23)) end end}, V16))/binary, <<<<" -> "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V17))/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.ANF.MkAError', V24} -> <<<<"Error: "/utf8>>/binary, ('dn--un--show_Show_ANF'(V24))/binary>> end.
'dn--un--show_Show_ANF'(V0) -> case V0 of {'Compiler.ANF.AV', V1, V2} -> ('dn--un--show_Show_AVar'(V2)); {'Compiler.ANF.AAppName', V3, V4, V5, V6} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary, <<('un--showLazy'(V4))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('dn--un--show_Show_AVar'(V7)) end))(V6))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.ANF.AUnderApp', V15, V16, V17, V18} -> <<<<"<"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16))/binary, <<<<" underapp "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V17))/binary, <<<<">("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> ('dn--un--show_Show_AVar'(V19)) end))(V18))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.ANF.AApp', V27, V28, V29, V30} -> <<('dn--un--show_Show_AVar'(V29))/binary, <<('un--showLazy'(V28))/binary, <<<<" @ ("/utf8>>/binary, <<('dn--un--show_Show_AVar'(V30))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.ANF.ALet', V31, V32, V33, V34} -> <<<<"%let v"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V32))/binary, <<<<" = ("/utf8>>/binary, <<('dn--un--show_Show_ANF'(V33))/binary, <<<<") in ("/utf8>>/binary, <<('dn--un--show_Show_ANF'(V34))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.ANF.ACon', V35, V36, V37, V38, V39} -> <<<<"%con "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V36))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V40) -> ('dn--un--show_Show_AVar'(V40)) end))(V39))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.ANF.AOp', V48, V49, V50, V51} -> <<<<"%op "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V50))/binary, <<('un--showLazy'(V49))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V52) -> ('dn--un--show_Show_AVar'(V52)) end, V51))))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.ANF.AExtPrim', V53, V54, V55, V56} -> <<<<"%extprim "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V55))/binary, <<('un--showLazy'(V54))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V62 = fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V60, V61)) end end end end), fun (V63) -> fun (V64) -> ((((V62('erased'))('erased'))(V63))(V64)) end end end(fun (V57) -> ('dn--un--show_Show_AVar'(V57)) end))(V56))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.ANF.AConCase', V65, V66, V67, V68} -> <<<<"%case "/utf8>>/binary, <<('dn--un--show_Show_AVar'(V66))/binary, <<<<" of { "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"| "/utf8>>, ((begin (V74 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V72, V73)) end end end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V69) -> ('dn--un--show_Show_AConAlt'(V69)) end))(V67))))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V77) -> ('dn--un--show_Show_ANF'(V77)) end, fun (V78) -> fun (V79) -> ('dn--un--showPrec_Show_ANF'(V78, V79)) end end}, V68))/binary, <<" }"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.ANF.AConstCase', V80, V81, V82, V83} -> <<<<"%case "/utf8>>/binary, <<('dn--un--show_Show_AVar'(V81))/binary, <<<<" of { "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"| "/utf8>>, ((begin (V89 = fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V87, V88)) end end end end), fun (V90) -> fun (V91) -> ((((V89('erased'))('erased'))(V90))(V91)) end end end(fun (V84) -> ('dn--un--show_Show_AConstAlt'(V84)) end))(V82))))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V92) -> ('dn--un--show_Show_ANF'(V92)) end, fun (V93) -> fun (V94) -> ('dn--un--showPrec_Show_ANF'(V93, V94)) end end}, V83))/binary, <<" }"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.ANF.APrimVal', V95, V96} -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V96)); {'Compiler.ANF.AErased', V97} -> <<"___"/utf8>>; {'Compiler.ANF.ACrash', V98, V99} -> <<<<"%CRASH("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V99))/binary, <<")"/utf8>>/binary>>/binary>> end.
'dn--un--show_Show_AConstAlt'(V0) -> case V0 of {'Compiler.ANF.MkAConstAlt', V1, V2} -> <<<<"%constalt("/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))/binary, <<<<") => "/utf8>>/binary, ('dn--un--show_Show_ANF'(V2))/binary>>/binary>>/binary>> end.
'dn--un--show_Show_AConAlt'(V0) -> case V0 of {'Compiler.ANF.MkAConAlt', V1, V2, V3, V4, V5} -> <<<<"%conalt "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> ('nested--8169-3102--in--un--showArg'(V2, V5, V4, V3, V1, V6)) end))(V4))))/binary, <<<<") => "/utf8>>/binary, ('dn--un--show_Show_ANF'(V5))/binary>>/binary>>/binary>>/binary>>/binary>> end.
'dn--un--showPrec_Show_AVar'(V0, V1) -> ('dn--un--show_Show_AVar'(V1)).
'dn--un--showPrec_Show_ANFDef'(V0, V1) -> ('dn--un--show_Show_ANFDef'(V1)).
'dn--un--showPrec_Show_ANF'(V0, V1) -> ('dn--un--show_Show_ANF'(V1)).
'dn--un--showPrec_Show_AConstAlt'(V0, V1) -> ('dn--un--show_Show_AConstAlt'(V1)).
'dn--un--showPrec_Show_AConAlt'(V0, V1) -> ('dn--un--show_Show_AConAlt'(V1)).
'dn--un--__Impl_Show_AVar'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_AVar'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_AVar'(V1, V2)) end end}.
'dn--un--__Impl_Show_ANFDef'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ANFDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ANFDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_ANF'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ANF'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ANF'(V1, V2)) end end}.
'dn--un--__Impl_Show_AConstAlt'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_AConstAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_AConstAlt'(V1, V2)) end end}.
'dn--un--__Impl_Show_AConAlt'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_AConAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_AConAlt'(V1, V2)) end end}.
'un--toANF'(V0) -> case V0 of {'Compiler.LambdaLift.MkLFun', V1, V2, V3} -> begin (V4 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.ANF.Next'}, 0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V33 = begin (V9 = ('nested--9307-4110--in--un--bindArgs'(V2, V1, V3, V8, V1, {'Compiler.ANF.Nil'}))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V32 = case V13 of {'Builtin.MkPair', V14, V15} -> begin (V16 = V15), begin (V17 = ('nested--9307-4110--in--un--bindArgs'(V2, V1, V3, V8, V2, V16))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V31 = case V21 of {'Builtin.MkPair', V22, V23} -> begin (V24 = ('un--anf'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V2, V1)), V8, V23, V3))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', {'Compiler.ANF.MkAFun', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V22)))), V28}} end), V30 end(V25)) end end end end end), V31 end(V18)) end end end end end end), V32 end(V10)) end end end end), V33 end(V5)) end end end end; {'Compiler.LambdaLift.MkLCon', V34, V35, V36} -> fun (V37) -> {'Prelude.Types.Right', {'Compiler.ANF.MkACon', V34, V35, V36}} end; {'Compiler.LambdaLift.MkLForeign', V38, V39, V40} -> fun (V41) -> {'Prelude.Types.Right', {'Compiler.ANF.MkAForeign', V38, V39, V40}} end; {'Compiler.LambdaLift.MkLError', V42} -> begin (V43 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.ANF.Next'}, 0))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V55 = begin (V48 = ('un--anf'([], V47, {'Compiler.ANF.Nil'}, V42))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V54 = fun (V53) -> {'Prelude.Types.Right', {'Compiler.ANF.MkAError', V52}} end), V54 end(V49)) end end end end), V55 end(V44)) end end end end end.
'un--showLazy'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V1) -> <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_LazyReason'(V1))/binary>> end end, V0)).
'un--nextVar'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V24 = begin (V17 = begin (V11 = V0), fun (V12) -> begin (V16 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, begin (V15 = (V10 + 1)), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end)) end end(V12))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V23 = fun (V22) -> {'Prelude.Types.Right', V10} end), V23 end(V18)) end end end end), V24 end(V7)) end end end end.
'un--mlet'(V0, V1, V2, V3) -> case V2 of {'Compiler.ANF.AV', V4, V5} -> fun (V6) -> {'Prelude.Types.Right', (V3(V5))} end; _ -> begin (V7 = ('un--nextVar'(V0))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Compiler.ANF.ALet', V1, V11, V2, (V3({'Compiler.ANF.ALocal', V11}))}} end), V13 end(V8)) end end end end end.
'un--lookup'(V0, V1) -> case V0 of 0 -> case V1 of {'Compiler.ANF.::', V2, V3} -> V2 end; _ -> begin (V4 = (V0 - 1)), case V1 of {'Compiler.ANF.::', V5, V6} -> ('un--lookup'(V4, V6)) end end end.
'un--letBind'(V0, V1, V2, V3) -> begin (V4 = ('un--bindArgs'(V0, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V10 = fun (V9) -> {'Prelude.Types.Right', ('nested--8575-3468--in--un--doBind'(V3, V2, V1, V0, [], V8))} end), V10 end(V5)) end end end end.
'un--bindArgs'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Compiler.ANF.AV', V5, V6} -> begin (V7 = ('un--bindArgs'(V0, V4))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V6, {'Prelude.Types.Nothing'}} | V11]} end), V13 end(V8)) end end end end; {'Compiler.ANF.AErased', V14} -> begin (V15 = ('un--bindArgs'(V0, V4))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = fun (V20) -> {'Prelude.Types.Right', [{'Builtin.MkPair', {'Compiler.ANF.ANull'}, {'Prelude.Types.Nothing'}} | V19]} end), V21 end(V16)) end end end end; _ -> begin (V22 = ('un--nextVar'(V0))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V34 = begin (V27 = ('un--bindArgs'(V0, V4))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = fun (V32) -> {'Prelude.Types.Right', [{'Builtin.MkPair', {'Compiler.ANF.ALocal', V26}, {'Prelude.Types.Just', V3}} | V31]} end), V33 end(V28)) end end end end), V34 end(V23)) end end end end end end(E0, E1)) end.
'un--anfConstAlt'(V0, V1, V2, V3) -> case V3 of {'Compiler.LambdaLift.MkLConstAlt', V4, V5} -> begin (V6 = ('un--anf'(V0, V1, V2, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> {'Prelude.Types.Right', {'Compiler.ANF.MkAConstAlt', V4, V10}} end), V12 end(V7)) end end end end end.
'un--anfConAlt'(V0, V1, V2, V3) -> case V3 of {'Compiler.LambdaLift.MkLConAlt', V4, V5, V6, V7, V8} -> begin (V9 = ('nested--8730-3962--in--un--bindArgs'(V0, V7, V8, V6, V5, V4, V2, V1, V7, V2))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V23 = case V13 of {'Builtin.MkPair', V14, V15} -> begin (V16 = ('un--anf'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V7, V0)), V1, V15, V8))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Compiler.ANF.MkAConAlt', V4, V5, V6, V14, V20}} end), V22 end(V17)) end end end end end), V23 end(V10)) end end end end end.
'un--anfArgs'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V6) -> ('un--anf'(V0, V1, V3, V6)) end, V4, []))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('un--letBind'(V1, V2, V11, V5))), V12 end(V8)) end end end end.
'un--anf'(V0, V1, V2, V3) -> case V3 of {'Compiler.LambdaLift.LLocal', V4, V5} -> fun (V6) -> {'Prelude.Types.Right', {'Compiler.ANF.AV', V5, {'Compiler.ANF.ALocal', ('un--lookup'(V4, V2))}}} end; {'Compiler.LambdaLift.LAppName', V7, V8, V9, V10} -> ('un--anfArgs'(V0, V1, V7, V2, V10, fun (V11) -> {'Compiler.ANF.AAppName', V7, V8, V9, V11} end)); {'Compiler.LambdaLift.LUnderApp', V12, V13, V14, V15} -> ('un--anfArgs'(V0, V1, V12, V2, V15, fun (V16) -> {'Compiler.ANF.AUnderApp', V12, V13, V14, V16} end)); {'Compiler.LambdaLift.LApp', V17, V18, V19, V20} -> ('un--anfArgs'(V0, V1, V17, V2, [V19 | [V20 | []]], fun (V21) -> case V21 of [E0 | E1] -> (fun (V22, V23) -> case V23 of [E2 | E3] -> (fun (V24, V25) -> case V25 of [] -> {'Compiler.ANF.AApp', V17, V18, V22, V24}; _ -> {'Compiler.ANF.ACrash', V17, <<"Can\x{27}t happen (AApp)"/utf8>>} end end(E2, E3)); _ -> {'Compiler.ANF.ACrash', V17, <<"Can\x{27}t happen (AApp)"/utf8>>} end end(E0, E1)); _ -> {'Compiler.ANF.ACrash', V17, <<"Can\x{27}t happen (AApp)"/utf8>>} end end)); {'Compiler.LambdaLift.LLet', V26, V27, V28, V29} -> begin (V30 = ('un--nextVar'(V1))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V49 = begin (V35 = {'Compiler.ANF.::', V34, V2}), begin (V36 = ('un--anf'(V0, V1, V2, V28))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V48 = begin (V41 = ('un--anf'([V27 | V0], V1, V35, V29))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V47 = fun (V46) -> {'Prelude.Types.Right', {'Compiler.ANF.ALet', V26, V34, V40, V45}} end), V47 end(V42)) end end end end), V48 end(V37)) end end end end end), V49 end(V31)) end end end end; {'Compiler.LambdaLift.LCon', V50, V51, V52, V53, V54} -> ('un--anfArgs'(V0, V1, V50, V2, V54, fun (V55) -> {'Compiler.ANF.ACon', V50, V51, V52, V53, V55} end)); {'Compiler.LambdaLift.LOp', V56, V57, V58, V59, V60} -> begin (V62 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V61) -> ('un--anf'(V0, V1, V2, V61)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V60)), []))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V69 = ('un--letBind'(V1, V57, V66, fun (V67) -> case ('Idris.Idris2.Data.Vect':'un--toVect'(V56, V67)) of {'Prelude.Types.Nothing'} -> {'Compiler.ANF.ACrash', V57, <<"Can\x{27}t happen (AOp)"/utf8>>}; {'Prelude.Types.Just', V68} -> {'Compiler.ANF.AOp', V57, V58, V59, V68} end end))), V69 end(V63)) end end end end; {'Compiler.LambdaLift.LExtPrim', V70, V71, V72, V73} -> ('un--anfArgs'(V0, V1, V70, V2, V73, fun (V74) -> {'Compiler.ANF.AExtPrim', V70, V71, V72, V74} end)); {'Compiler.LambdaLift.LConCase', V75, V76, V77, V78} -> begin (V79 = ('un--anf'(V0, V1, V2, V76))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V119 = begin (V85 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V84) -> ('un--anfConAlt'(V0, V1, V2, V84)) end, V77, []))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V118 = begin (V111 = case V78 of {'Prelude.Types.Nothing'} -> fun (V90) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V91} -> begin (V92 = ('un--anf'(V0, V1, V2, V91))), ((begin (V108 = fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V105, V106, V107)) end end end end end), fun (V109) -> fun (V110) -> ((((V108('erased'))('erased'))(V109))(V110)) end end end((begin (V100 = fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> {'Prelude.Types.Right', (V96(V99))} end end end end end), fun (V101) -> fun (V102) -> ((((V100('erased'))('erased'))(V101))(V102)) end end end(fun (V93) -> {'Prelude.Types.Just', V93} end))))(V92)) end end), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V117 = ('un--mlet'(V1, V75, V83, fun (V116) -> {'Compiler.ANF.AConCase', V75, V116, V89, V115} end))), V117 end(V112)) end end end end), V118 end(V86)) end end end end), V119 end(V80)) end end end end; {'Compiler.LambdaLift.LConstCase', V120, V121, V122, V123} -> begin (V124 = ('un--anf'(V0, V1, V2, V121))), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V164 = begin (V130 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V129) -> ('un--anfConstAlt'(V0, V1, V2, V129)) end, V122, []))), fun (V131) -> begin (V132 = (V130(V131))), case V132 of {'Prelude.Types.Left', V133} -> {'Prelude.Types.Left', V133}; {'Prelude.Types.Right', V134} -> (begin (V163 = begin (V156 = case V123 of {'Prelude.Types.Nothing'} -> fun (V135) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V136} -> begin (V137 = ('un--anf'(V0, V1, V2, V136))), ((begin (V153 = fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V150, V151, V152)) end end end end end), fun (V154) -> fun (V155) -> ((((V153('erased'))('erased'))(V154))(V155)) end end end((begin (V145 = fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> {'Prelude.Types.Right', (V141(V144))} end end end end end), fun (V146) -> fun (V147) -> ((((V145('erased'))('erased'))(V146))(V147)) end end end(fun (V138) -> {'Prelude.Types.Just', V138} end))))(V137)) end end), fun (V157) -> begin (V158 = (V156(V157))), case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> (begin (V162 = ('un--mlet'(V1, V120, V128, fun (V161) -> {'Compiler.ANF.AConstCase', V120, V161, V134, V160} end))), V162 end(V157)) end end end end), V163 end(V131)) end end end end), V164 end(V125)) end end end end; {'Compiler.LambdaLift.LPrimVal', V165, V166} -> fun (V167) -> {'Prelude.Types.Right', {'Compiler.ANF.APrimVal', V165, V166}} end; {'Compiler.LambdaLift.LErased', V168} -> fun (V169) -> {'Prelude.Types.Right', {'Compiler.ANF.AErased', V168}} end; {'Compiler.LambdaLift.LCrash', V170, V171} -> fun (V172) -> {'Prelude.Types.Right', {'Compiler.ANF.ACrash', V170, V171}} end end.
