-module('Idris.Idris2.Libraries.Data.StringTrie').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--foldWithKeysM,go-4541'/8,
  'nested--2960-4374--in--un--rec'/5,
  'nested--3087-4486--in--un--go'/5,
  'nested--2960-4373--in--un--end'/4,
  'dn--un--show_Show_(StringTrie $a)'/2,
  'dn--un--showPrec_Show_(StringTrie $a)'/3,
  'dn--un--map_Functor_StringTrie'/2,
  'dn--un--__Impl_Show_(StringTrie $a)'/1,
  'dn--un--__Impl_Functor_StringTrie'/4,
  'un--singleton'/2,
  'un--insertWith'/3,
  'un--insert'/3,
  'un--foldWithKeysM'/4,
  'un--empty'/0
]).
'case--foldWithKeysM,go-4541'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> begin (V10 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, [V8 | []]))), case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> ((((V12('erased'))('erased'))(('nested--3087-4486--in--un--go'(V0, V1, V2, V10, V9))))(fun (V14) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V15, V16, V17} -> ((((V16('erased'))('erased'))((V2(V10))))(fun (V18) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V19, V20, V21} -> case V19 of {'Prelude.Interfaces.MkApplicative', V22, V23, V24} -> ((V23('erased'))(((begin (V32 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkMonoid', V30, V31} -> V30 end), fun (V33) -> fun (V34) -> ((V32(V33))(V34)) end end end(((begin (V27 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkMonoid', V25, V26} -> V25 end), fun (V28) -> fun (V29) -> ((V27(V28))(V29)) end end end(V6))(V14))))(V18)))) end end end)) end end)) end end end.
'nested--2960-4374--in--un--rec'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V0, ('nested--2960-4373--in--un--end'(V0, V1, V2, V3)), V4)) end, fun () -> fun (V5) -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V0, ('un--insertWith'(V1, V3, V5)), V4)) end end, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V0, V4)))).
'nested--3087-4486--in--un--go'(V0, V1, V2, V3, V4) -> begin (V5 = V4), ((begin (V119 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V113, V114, V115} -> case V113 of {'Prelude.Interfaces.MkApplicative', V116, V117, V118} -> V116 end end), fun (V120) -> fun (V121) -> ((((V119('erased'))('erased'))(V120))(V121)) end end end(fun (V112) -> ('Idris.Idris2.Data.These':'un--bifold'(('Idris.Idris2.Builtin':'un--snd'(V0)), V112)) end))(case V5 of {'Data.These.This', V6} -> ((begin (V14 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> case V8 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> V11 end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V7) -> {'Data.These.This', V7} end))(((V1(V3))(V6)))); {'Data.These.That', V17} -> ((begin (V56 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V50, V51, V52} -> case V50 of {'Prelude.Interfaces.MkApplicative', V53, V54, V55} -> V53 end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end(fun (V49) -> {'Data.These.That', V49} end))(('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(('Idris.Idris2.Builtin':'un--fst'(V0)), fun (V18) -> fun (V19) -> case V19 of {'Builtin.MkPair', V20, V21} -> begin (V22 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, [V20 | []]))), case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V23, V24, V25} -> ((((V24('erased'))('erased'))(('nested--3087-4486--in--un--go'(V0, V1, V2, V22, V21))))(fun (V26) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V27, V28, V29} -> ((((V28('erased'))('erased'))((V2(V22))))(fun (V30) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V31, V32, V33} -> case V31 of {'Prelude.Interfaces.MkApplicative', V34, V35, V36} -> ((V35('erased'))(((begin (V44 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkMonoid', V42, V43} -> V42 end), fun (V45) -> fun (V46) -> ((V44(V45))(V46)) end end end(((begin (V39 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkMonoid', V37, V38} -> V37 end), fun (V40) -> fun (V41) -> ((V39(V40))(V41)) end end end(V18))(V26))))(V30)))) end end end)) end end)) end end end end end, case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkMonoid', V47, V48} -> V48 end, ('Idris.Idris2.Libraries.Data.StringMap':'un--toList'(V17)))))); {'Data.These.Both', V59, V60} -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V61, V62, V63} -> case V61 of {'Prelude.Interfaces.MkApplicative', V64, V65, V66} -> ((((V66('erased'))('erased'))(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V98, V99, V100} -> case V98 of {'Prelude.Interfaces.MkApplicative', V101, V102, V103} -> ((((V103('erased'))('erased'))(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V104, V105, V106} -> case V104 of {'Prelude.Interfaces.MkApplicative', V107, V108, V109} -> ((V108('erased'))(fun (V110) -> fun (V111) -> {'Data.These.Both', V110, V111} end end)) end end))(((V1(V3))(V59)))) end end))(('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(('Idris.Idris2.Builtin':'un--fst'(V0)), fun (V67) -> fun (V68) -> case V68 of {'Builtin.MkPair', V69, V70} -> begin (V71 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, [V69 | []]))), case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V72, V73, V74} -> ((((V73('erased'))('erased'))(('nested--3087-4486--in--un--go'(V0, V1, V2, V71, V70))))(fun (V75) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V76, V77, V78} -> ((((V77('erased'))('erased'))((V2(V71))))(fun (V79) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V80, V81, V82} -> case V80 of {'Prelude.Interfaces.MkApplicative', V83, V84, V85} -> ((V84('erased'))(((begin (V93 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkMonoid', V91, V92} -> V91 end), fun (V94) -> fun (V95) -> ((V93(V94))(V95)) end end end(((begin (V88 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkMonoid', V86, V87} -> V86 end), fun (V89) -> fun (V90) -> ((V88(V89))(V90)) end end end(V67))(V75))))(V79)))) end end end)) end end)) end end end end end, case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkMonoid', V96, V97} -> V97 end, ('Idris.Idris2.Libraries.Data.StringMap':'un--toList'(V60)))))) end end end)) end.
'nested--2960-4373--in--un--end'(V0, V1, V2, V3) -> ('un--singleton'(V1, (V3({'Prelude.Types.Nothing'})))).
'dn--un--show_Show_(StringTrie $a)'(V0, V1) -> begin (V2 = V1), ('Idris.Idris2.Data.These':'dn--un--show_Show_((These $a) $b)'({'Builtin.MkPair', V0, {'Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--show_Show_(StringMap $v)'({'Prelude.Show.MkShow', fun (V4) -> ('dn--un--show_Show_(StringTrie $a)'(V0, V4)) end, fun (V5) -> fun (V6) -> ('dn--un--show_Show_(StringTrie $a)'(V0, V6)) end end}, V3)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--showPrec_Show_(StringMap $v)'({'Prelude.Show.MkShow', fun (V9) -> ('dn--un--show_Show_(StringTrie $a)'(V0, V9)) end, fun (V10) -> fun (V11) -> ('dn--un--show_Show_(StringTrie $a)'(V0, V11)) end end}, V7, V8)) end end}}, V2)) end.
'dn--un--showPrec_Show_(StringTrie $a)'(V0, V1, V2) -> ('dn--un--show_Show_(StringTrie $a)'(V0, V2)).
'dn--un--map_Functor_StringTrie'(V0, V1) -> begin (V2 = V1), case V2 of {'Data.These.This', V3} -> {'Data.These.This', (V0(V3))}; {'Data.These.That', V4} -> {'Data.These.That', ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--map_Functor_StringMap'((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--map_Functor_StringTrie'(V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(V0)), V4))}; {'Data.These.Both', V12, V13} -> {'Data.These.Both', (V0(V12)), ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--map_Functor_StringMap'((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('dn--un--map_Functor_StringTrie'(V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(V0)), V13))} end end.
'dn--un--__Impl_Show_(StringTrie $a)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(StringTrie $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--show_Show_(StringTrie $a)'(V0, V3)) end end}.
'dn--un--__Impl_Functor_StringTrie'(V0, V1, V2, V3) -> ('dn--un--map_Functor_StringTrie'(V2, V3)).
'un--singleton'(V0, V1) -> case V0 of [] -> {'Data.These.This', V1}; [E0 | E1] -> (fun (V2, V3) -> {'Data.These.That', ('Idris.Idris2.Libraries.Data.StringMap':'un--singleton'(V2, ('un--singleton'(V3, V1))))} end(E0, E1)) end.
'un--insertWith'(V0, V1, V2) -> case V0 of [] -> begin (V3 = V2), ('Idris.Idris2.Data.These':'un--these'(fun (V4) -> {'Data.These.This', (V1({'Prelude.Types.Just', V4}))} end, fun (V5) -> {'Data.These.Both', (V1({'Prelude.Types.Nothing'})), V5} end, fun (V6) -> fun (V7) -> {'Data.These.Both', (V1({'Prelude.Types.Just', V6})), V7} end end, V3)) end; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = V2), ('Idris.Idris2.Data.These':'un--these'(fun (V11) -> {'Data.These.Both', V11, ('Idris.Idris2.Libraries.Data.StringMap':'un--singleton'(V8, ('nested--2960-4373--in--un--end'(V8, V9, V10, V1))))} end, fun (V12) -> {'Data.These.That', ('nested--2960-4374--in--un--rec'(V8, V9, V10, V1, V12))} end, fun (V13) -> fun (V14) -> {'Data.These.Both', V13, ('nested--2960-4374--in--un--rec'(V8, V9, V10, V1, V14))} end end, V10)) end end(E0, E1)) end.
'un--insert'(V0, V1, V2) -> ('un--insertWith'(V0, fun (V3) -> V1 end, V2)).
'un--foldWithKeysM'(V0, V1, V2, V3) -> ('nested--3087-4486--in--un--go'(V0, V2, V1, [], V3)).
'un--empty'() -> {'Data.These.That', ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'())}.
