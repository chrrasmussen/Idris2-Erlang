-module('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--9483-6899--in--un--genErrorProgram'/4,
  'nested--8149-5625--in--un--curry'/10,
  'un--runTimeErrorTag'/0,
  'un--newLocalVars'/2,
  'un--newLocalVar'/1,
  'un--integerPower'/2,
  'un--genValidChar'/2,
  'un--genUnsafeStringToAtom'/2,
  'un--genUnsafePerformIO'/3,
  'un--genUnicodeStringTail'/3,
  'un--genUnicodeStringSubstr'/4,
  'un--genUnicodeStringReverse'/2,
  'un--genUnicodeStringOp'/4,
  'un--genUnicodeStringLength'/2,
  'un--genUnicodeStringLTE'/3,
  'un--genUnicodeStringLT'/3,
  'un--genUnicodeStringIndex'/3,
  'un--genUnicodeStringHead'/2,
  'un--genUnicodeStringGTE'/3,
  'un--genUnicodeStringGT'/3,
  'un--genUnicodeStringEQ'/3,
  'un--genUnicodeStringCons'/3,
  'un--genUnicodeStringAppend'/3,
  'un--genUnicodePutStr'/2,
  'un--genUnicodeGetStr'/2,
  'un--genUncurry'/5,
  'un--genToBoundedUnsignedInt'/4,
  'un--genToBoundedSignedInt'/4,
  'un--genThrowMsg'/2,
  'un--genThrowBinary'/2,
  'un--genStringToInteger'/3,
  'un--genStringToDouble'/3,
  'un--genRight'/2,
  'un--genRef'/3,
  'un--genProcessDictWriteIORef'/3,
  'un--genProcessDictReadIORef'/2,
  'un--genProcessDictNewIORef'/3,
  'un--genProcessDictFreeIORef'/2,
  'un--genOsType'/2,
  'un--genNothing'/1,
  'un--genMod'/4,
  'un--genMkUnit'/1,
  'un--genMkIORes'/2,
  'un--genMkIO'/3,
  'un--genList'/2,
  'un--genLeft'/2,
  'un--genJust'/2,
  'un--genIntToChar'/2,
  'un--genHalt'/2,
  'un--genFunCall'/4,
  'un--genFC'/1,
  'un--genEscriptMain'/3,
  'un--genErlMain'/3,
  'un--genDoubleToString'/2,
  'un--genDisplay'/2,
  'un--genCurry'/5,
  'un--genCharToString'/2,
  'un--genCharToInt'/2,
  'un--genBoolToInt'/2,
  'un--genAtomToString'/2,
  'un--genArgsToLocals'/2,
  'un--genAppendNewline'/2,
  'un--genAppCurriedFun'/3,
  'un--addLocalVars'/3,
  'un--addLocalVar'/3
]).
'nested--9483-6899--in--un--genErrorProgram'(V0, V1, V2, V3) -> begin (V4 = ('un--newLocalVar'(V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V34 = begin (V9 = ('un--newLocalVar'(V2))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V33 = begin (V14 = ('un--newLocalVar'(V2))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V32 = begin (V19 = ('un--newLocalVar'(V2))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V31 = begin (V24 = ('un--newLocalVar'(V2))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESequence', V1, {'Data.List1.:::', {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V3}, ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.ErlExpr.MTuple', [{'Builtin.MkPair', V8, {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"throw"/utf8>>}}} | [{'Builtin.MkPair', V13, {'Compiler.Erlang.IR.ErlExpr.MTuple', [{'Builtin.MkPair', V23, {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, ('un--runTimeErrorTag'())}}} | [{'Builtin.MkPair', V28, {'Compiler.Erlang.IR.ErlExpr.MBinary'}} | []]], {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V28}}} | [{'Builtin.MkPair', V18, {'Compiler.Erlang.IR.ErlExpr.MAny'}} | []]]], ('un--genUnicodePutStr'(V1, ('un--genAppendNewline'(V1, {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V13}))))})), {'Prelude.Types.Just', ('un--genDisplay'(V1, {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V3}))}}, [('un--genHalt'(V1, 127)) | []]}}} end), V30 end(V25)) end end end end), V31 end(V20)) end end end end), V32 end(V15)) end end end end), V33 end(V10)) end end end end), V34 end(V5)) end end end end.
'nested--8149-5625--in--un--curry'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V6 of 0 -> fun (V10) -> {'Prelude.Types.Right', (V7({'Compiler.Erlang.IR.ErlExpr.EApp', V5, V8, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V9))}))} end; _ -> begin (V11 = (V6 - 1)), begin (V12 = ('un--newLocalVar'(V4))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V24 = begin (V17 = ('nested--8149-5625--in--un--curry'(V0, V1, V2, V3, V4, V5, V11, V7, V8, [{'Compiler.Erlang.IR.ErlExpr.ELocal', V5, V16} | V9]))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V23 = fun (V22) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ELam', V5, [V16 | []], V21}} end), V23 end(V18)) end end end end), V24 end(V13)) end end end end end end.
'un--runTimeErrorTag'() -> <<"$idris_error"/utf8>>.
'un--newLocalVars'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Prelude.Types.Right', []} end; _ -> begin (V3 = (V1 - 1)), begin (V4 = ('un--newLocalVar'(V0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V16 = begin (V9 = ('un--newLocalVars'(V0, V3))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', [V8 | V13]} end), V15 end(V10)) end end end end), V16 end(V5)) end end end end end end.
'un--newLocalVar'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V26 = case V10 of {'Compiler.Erlang.IR.ErlExpr.LocalVars.MkLocalVars', V11, V12} -> begin (V19 = begin (V13 = V0), fun (V14) -> begin (V18 = (begin (V15 = V13), fun (V16) -> ('erlang':'put'(V15, {'Compiler.Erlang.IR.ErlExpr.LocalVars.MkLocalVars', V11, begin (V17 = (V12 + 1)), case ((V17 band 9223372036854775808) =/= 0) of 'true' -> (V17 bor -9223372036854775808); _ -> (V17 band 9223372036854775807) end end})) end end(V14))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.LocalVars.MkLocalVar', V11, V12}} end), V25 end(V20)) end end end end end), V26 end(V7)) end end end end.
'un--integerPower'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--product'({'Prelude.Num.MkNum', fun (V2) -> fun (V3) -> (V2 + V3) end end, fun (V4) -> fun (V5) -> (V4 * V5) end end, fun (V6) -> V6 end}, {'Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> V27 end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, ('Idris.Idris2.Prelude.Types':'un--take'(V1, ('Idris.Idris2.Data.Stream':'un--repeat'(V0)))))).
'un--genValidChar'(V0, V1) -> {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V0, V1, ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.ErlExpr.MCodepoint'})), {'Prelude.Types.Just', {'Compiler.Erlang.IR.ErlExpr.EInteger', V0, 65533}}}.
'un--genUnsafeStringToAtom'(V0, V1) -> case V1 of {'Compiler.Erlang.IR.ErlExpr.EIdrisConstant', V2, V3} -> case V3 of {'Compiler.Erlang.IR.ErlExpr.IString', V4} -> {'Compiler.Erlang.IR.ErlExpr.EAtom', V0, V4}; _ -> ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"binary_to_atom"/utf8>>, [V1 | [{'Compiler.Erlang.IR.ErlExpr.EAtom', V0, <<"utf8"/utf8>>} | []]])) end; _ -> ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"binary_to_atom"/utf8>>, [V1 | [{'Compiler.Erlang.IR.ErlExpr.EAtom', V0, <<"utf8"/utf8>>} | []]])) end.
'un--genUnsafePerformIO'(V0, V1, V2) -> {'Compiler.Erlang.IR.ErlExpr.EApp', V1, ('un--genRef'(V0, V1, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--primIONS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"unsafePerformIO"/utf8>>}}})), [V2 | []]}.
'un--genUnicodeStringTail'(V0, V1, V2) -> begin (V3 = ('un--newLocalVar'(V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V16 = begin (V8 = ('un--newLocalVar'(V0))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V15 = begin (V13 = ('un--genFunCall'(V1, <<"string"/utf8>>, <<"next_grapheme"/utf8>>, [V2 | []]))), fun (V14) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, V13, ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.ErlExpr.MCons', {'Compiler.Erlang.IR.ErlExpr.MAny'}, {'Compiler.Erlang.IR.ErlExpr.MBinary'}, V7, V12, {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V12}})), {'Prelude.Types.Just', {'Compiler.Erlang.IR.ErlExpr.EBinary', V1, <<""/utf8>>}}}} end end), V15 end(V9)) end end end end), V16 end(V4)) end end end end.
'un--genUnicodeStringSubstr'(V0, V1, V2, V3) -> ('un--genFunCall'(V0, <<"string"/utf8>>, <<"slice"/utf8>>, [V3 | [V1 | [V2 | []]]])).
'un--genUnicodeStringReverse'(V0, V1) -> begin (V2 = ('un--genFunCall'(V0, <<"string"/utf8>>, <<"reverse"/utf8>>, [V1 | []]))), ('un--genFunCall'(V0, <<"unicode"/utf8>>, <<"characters_to_binary"/utf8>>, [V2 | []])) end.
'un--genUnicodeStringOp'(V0, V1, V2, V3) -> ('un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, V0, V2, V3})).
'un--genUnicodeStringLength'(V0, V1) -> ('un--genFunCall'(V0, <<"string"/utf8>>, <<"length"/utf8>>, [V1 | []])).
'un--genUnicodeStringLTE'(V0, V1, V2) -> ('un--genUnicodeStringOp'(<<"=<"/utf8>>, V0, V1, V2)).
'un--genUnicodeStringLT'(V0, V1, V2) -> ('un--genUnicodeStringOp'(<<"<"/utf8>>, V0, V1, V2)).
'un--genUnicodeStringIndex'(V0, V1, V2) -> begin (V3 = ('un--genFunCall'(V0, <<"string"/utf8>>, <<"slice"/utf8>>, [V1 | [V2 | [{'Compiler.Erlang.IR.ErlExpr.EInteger', V0, 1} | []]]]))), begin (V4 = ('un--genFunCall'(V0, <<"string"/utf8>>, <<"next_grapheme"/utf8>>, [V3 | []]))), ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"hd"/utf8>>, [V4 | []])) end end.
'un--genUnicodeStringHead'(V0, V1) -> begin (V2 = ('un--genFunCall'(V0, <<"string"/utf8>>, <<"next_grapheme"/utf8>>, [V1 | []]))), ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"hd"/utf8>>, [V2 | []])) end.
'un--genUnicodeStringGTE'(V0, V1, V2) -> ('un--genUnicodeStringOp'(<<">="/utf8>>, V0, V1, V2)).
'un--genUnicodeStringGT'(V0, V1, V2) -> ('un--genUnicodeStringOp'(<<">"/utf8>>, V0, V1, V2)).
'un--genUnicodeStringEQ'(V0, V1, V2) -> ('un--genUnicodeStringOp'(<<"=:="/utf8>>, V0, V1, V2)).
'un--genUnicodeStringCons'(V0, V1, V2) -> begin (V3 = ('un--genFunCall'(V0, <<"unicode"/utf8>>, <<"characters_to_binary"/utf8>>, [('un--genList'(V0, [V1 | []])) | []]))), {'Compiler.Erlang.IR.ErlExpr.EBinaryConcat', V0, V3, V2} end.
'un--genUnicodeStringAppend'(V0, V1, V2) -> {'Compiler.Erlang.IR.ErlExpr.EBinaryConcat', V0, V1, V2}.
'un--genUnicodePutStr'(V0, V1) -> ('un--genFunCall'(V0, <<"io"/utf8>>, <<"format"/utf8>>, [{'Compiler.Erlang.IR.ErlExpr.ECharlist', V0, <<"~ts"/utf8>>} | [('un--genList'(V0, [V1 | []])) | []]])).
'un--genUnicodeGetStr'(V0, V1) -> begin (V2 = ('un--genFunCall'(V0, <<"io"/utf8>>, <<"get_line"/utf8>>, [V1 | []]))), begin (V3 = ('un--genFunCall'(V0, <<"string"/utf8>>, <<"chomp"/utf8>>, [V2 | []]))), ('un--genFunCall'(V0, <<"unicode"/utf8>>, <<"characters_to_binary"/utf8>>, [V3 | []])) end end.
'un--genUncurry'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--newLocalVars'(V0, V2))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ELam', V1, V9, (V3(('un--genAppCurriedFun'(V1, V4, ('un--genArgsToLocals'(V1, V9))))))}} end), V11 end(V6)) end end end end.
'un--genToBoundedUnsignedInt'(V0, V1, V2, V3) -> ('un--genMod'(V0, V1, V3, {'Compiler.Erlang.IR.ErlExpr.EInteger', V1, ('un--integerPower'(2, V2))})).
'un--genToBoundedSignedInt'(V0, V1, V2, V3) -> begin (V6 = fun (V4) -> fun (V5) -> {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=/="/utf8>>, V4, V5} end end), begin (V9 = fun (V7) -> fun (V8) -> {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"band"/utf8>>, V7, V8} end end), begin (V12 = fun (V10) -> fun (V11) -> {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bor"/utf8>>, V10, V11} end end), begin (V13 = ('un--integerPower'(2, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V2 - 1)))))), begin (V14 = ('un--newLocalVar'(V0))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V21 = begin (V19 = ((V6(((V9({'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V18}))({'Compiler.Erlang.IR.ErlExpr.EInteger', V1, V13}))))({'Compiler.Erlang.IR.ErlExpr.EInteger', V1, 0}))), fun (V20) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ELet', V1, V18, V3, {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, V19, ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.ErlExpr.MConst', {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"true"/utf8>>}}, ((V12({'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V18}))({'Compiler.Erlang.IR.ErlExpr.EInteger', V1, (0 - V13)}))})), {'Prelude.Types.Just', ((V9({'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V18}))({'Compiler.Erlang.IR.ErlExpr.EInteger', V1, (V13 - 1)}))}}}} end end), V21 end(V15)) end end end end end end end end.
'un--genThrowMsg'(V0, V1) -> ('un--genThrowBinary'(V0, {'Compiler.Erlang.IR.ErlExpr.EBinary', V0, V1})).
'un--genThrowBinary'(V0, V1) -> ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"throw"/utf8>>, [{'Compiler.Erlang.IR.ErlExpr.ETuple', V0, [{'Compiler.Erlang.IR.ErlExpr.EAtom', V0, ('un--runTimeErrorTag'())} | [V1 | []]]} | []])).
'un--genStringToInteger'(V0, V1, V2) -> begin (V3 = ('un--newLocalVar'(V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V16 = begin (V8 = ('un--newLocalVar'(V0))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V15 = begin (V13 = ('un--genFunCall'(V1, <<"string"/utf8>>, <<"to_integer"/utf8>>, [V2 | []]))), fun (V14) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, V13, ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.ErlExpr.MTuple', [{'Builtin.MkPair', V7, {'Compiler.Erlang.IR.ErlExpr.MInteger'}} | [{'Builtin.MkPair', V12, {'Compiler.Erlang.IR.ErlExpr.MAny'}} | []]], {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, ('un--genFunCall'(V1, <<"string"/utf8>>, <<"is_empty"/utf8>>, [{'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V12} | []])), ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.ErlExpr.MConst', {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"true"/utf8>>}}, {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V7}})), {'Prelude.Types.Just', {'Compiler.Erlang.IR.ErlExpr.EInteger', V1, 0}}}})), {'Prelude.Types.Just', {'Compiler.Erlang.IR.ErlExpr.EInteger', V1, 0}}}} end end), V15 end(V9)) end end end end), V16 end(V4)) end end end end.
'un--genStringToDouble'(V0, V1, V2) -> begin (V3 = ('un--newLocalVar'(V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V34 = begin (V8 = ('un--newLocalVar'(V0))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V33 = begin (V13 = ('un--newLocalVar'(V0))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V32 = begin (V18 = ('un--newLocalVar'(V0))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V31 = begin (V23 = ('un--genFunCall'(V1, <<"string"/utf8>>, <<"to_float"/utf8>>, [V2 | []]))), begin (V24 = ('un--genStringToInteger'(V0, V1, V2))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, V23, {'Data.List1.:::', {'Compiler.Erlang.IR.ErlExpr.MTuple', [{'Builtin.MkPair', V7, {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"error"/utf8>>}}} | [{'Builtin.MkPair', V12, {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"no_float"/utf8>>}}} | []]], ('un--genFunCall'(V1, <<"erlang"/utf8>>, <<"float"/utf8>>, [V28 | []]))}, [{'Compiler.Erlang.IR.ErlExpr.MTuple', [{'Builtin.MkPair', V17, {'Compiler.Erlang.IR.ErlExpr.MFloat'}} | [{'Builtin.MkPair', V22, {'Compiler.Erlang.IR.ErlExpr.MAny'}} | []]], {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, ('un--genFunCall'(V1, <<"string"/utf8>>, <<"is_empty"/utf8>>, [{'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V22} | []])), ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.ErlExpr.MConst', {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"true"/utf8>>}}, {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V17}})), {'Prelude.Types.Just', {'Compiler.Erlang.IR.ErlExpr.EFloat', V1, 0.0}}}} | []]}, {'Prelude.Types.Just', {'Compiler.Erlang.IR.ErlExpr.EFloat', V1, 0.0}}}} end), V30 end(V25)) end end end end end), V31 end(V19)) end end end end), V32 end(V14)) end end end end), V33 end(V9)) end end end end), V34 end(V4)) end end end end.
'un--genRight'(V0, V1) -> {'Compiler.Erlang.IR.ErlExpr.ECon', V0, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'({'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"Right"/utf8>>}}})), [V1 | []]}.
'un--genRef'(V0, V1, V2) -> case ('Idris.Idris2.Compiler.Erlang.Name':'un--moduleNameFunctionName'(V0, V2)) of {'Builtin.MkPair', V3, V4} -> case ('Idris.Idris2.Compiler.Erlang.Name':'un--isNameInCurrentModule'(V0, V2)) of 1 -> {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, V4}; 0 -> {'Compiler.Erlang.IR.ErlExpr.ERef', V1, {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, V3}, {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, V4}} end end.
'un--genProcessDictWriteIORef'(V0, V1, V2) -> ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"put"/utf8>>, [V1 | [V2 | []]])).
'un--genProcessDictReadIORef'(V0, V1) -> ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"get"/utf8>>, [V1 | []])).
'un--genProcessDictNewIORef'(V0, V1, V2) -> begin (V3 = ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"make_ref"/utf8>>, []))), begin (V4 = ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"put"/utf8>>, [{'Compiler.Erlang.IR.ErlExpr.ELocal', V0, V1} | [V2 | []]]))), {'Compiler.Erlang.IR.ErlExpr.ELet', V0, V1, V3, {'Compiler.Erlang.IR.ErlExpr.ESequence', V0, {'Data.List1.:::', V4, [{'Compiler.Erlang.IR.ErlExpr.ELocal', V0, V1} | []]}}} end end.
'un--genProcessDictFreeIORef'(V0, V1) -> ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"erase"/utf8>>, [V1 | []])).
'un--genOsType'(V0, V1) -> begin (V2 = ('un--newLocalVar'(V0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V28 = begin (V7 = ('un--newLocalVar'(V0))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V27 = begin (V12 = ('un--newLocalVar'(V0))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V26 = begin (V17 = ('un--newLocalVar'(V0))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V25 = begin (V22 = ('un--genFunCall'(V1, <<"os"/utf8>>, <<"type"/utf8>>, []))), begin (V23 = {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V11}, ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.ErlExpr.MConst', {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"darwin"/utf8>>}}, {'Compiler.Erlang.IR.ErlExpr.EBinary', V1, <<"darwin"/utf8>>}})), {'Prelude.Types.Just', {'Compiler.Erlang.IR.ErlExpr.EBinary', V1, <<"unix"/utf8>>}}}), fun (V24) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, V22, {'Data.List1.:::', {'Compiler.Erlang.IR.ErlExpr.MTuple', [{'Builtin.MkPair', V6, {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"unix"/utf8>>}}} | [{'Builtin.MkPair', V11, {'Compiler.Erlang.IR.ErlExpr.MAny'}} | []]], V23}, [{'Compiler.Erlang.IR.ErlExpr.MTuple', [{'Builtin.MkPair', V16, {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"win32"/utf8>>}}} | [{'Builtin.MkPair', V21, {'Compiler.Erlang.IR.ErlExpr.MAny'}} | []]], {'Compiler.Erlang.IR.ErlExpr.EBinary', V1, <<"windows"/utf8>>}} | []]}, {'Prelude.Types.Just', {'Compiler.Erlang.IR.ErlExpr.EBinary', V1, <<"unknown"/utf8>>}}}} end end end), V25 end(V18)) end end end end), V26 end(V13)) end end end end), V27 end(V8)) end end end end), V28 end(V3)) end end end end.
'un--genNothing'(V0) -> {'Compiler.Erlang.IR.ErlExpr.ECon', V0, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'({'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"Nothing"/utf8>>}}})), []}.
'un--genMod'(V0, V1, V2, V3) -> begin (V6 = fun (V4) -> fun (V5) -> {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"rem"/utf8>>, V4, V5} end end), begin (V9 = fun (V7) -> fun (V8) -> {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V7, V8} end end), begin (V12 = fun (V10) -> fun (V11) -> {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"<"/utf8>>, V10, V11} end end), begin (V15 = fun (V13) -> fun (V14) -> {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V13, V14} end end), begin (V16 = ('un--newLocalVar'(V0))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V34 = begin (V21 = ('un--newLocalVar'(V0))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V33 = begin (V26 = ('un--newLocalVar'(V0))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ELet', V1, V20, V2, {'Compiler.Erlang.IR.ErlExpr.ELet', V1, V25, V3, {'Compiler.Erlang.IR.ErlExpr.ELet', V1, V30, ((V6({'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V20}))({'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V25})), {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, ((V12(((V9({'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V30}))({'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V25}))))({'Compiler.Erlang.IR.ErlExpr.EInteger', V1, 0})), ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.ErlExpr.MConst', {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"true"/utf8>>}}, ((V15({'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V30}))({'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V25}))})), {'Prelude.Types.Just', {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V30}}}}}}} end), V32 end(V27)) end end end end), V33 end(V22)) end end end end), V34 end(V17)) end end end end end end end end.
'un--genMkUnit'(V0) -> {'Compiler.Erlang.IR.ErlExpr.ECon', V0, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'({'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"MkUnit"/utf8>>}}})), []}.
'un--genMkIORes'(V0, V1) -> V1.
'un--genMkIO'(V0, V1, V2) -> begin (V3 = {'Compiler.Erlang.IR.ErlExpr.ELam', V0, [V1 | []], V2}), V3 end.
'un--genList'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V2) -> fun (V3) -> {'Compiler.Erlang.IR.ErlExpr.ECons', V0, V2, V3} end end, {'Compiler.Erlang.IR.ErlExpr.ENil', V0}, V1)).
'un--genLeft'(V0, V1) -> {'Compiler.Erlang.IR.ErlExpr.ECon', V0, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'({'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"Left"/utf8>>}}})), [V1 | []]}.
'un--genJust'(V0, V1) -> {'Compiler.Erlang.IR.ErlExpr.ECon', V0, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'({'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"Just"/utf8>>}}})), [V1 | []]}.
'un--genIntToChar'(V0, V1) -> ('un--genValidChar'(V0, V1)).
'un--genHalt'(V0, V1) -> ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"halt"/utf8>>, [{'Compiler.Erlang.IR.ErlExpr.EInteger', V0, V1} | []])).
'un--genFunCall'(V0, V1, V2, V3) -> {'Compiler.Erlang.IR.ErlExpr.EApp', V0, {'Compiler.Erlang.IR.ErlExpr.ERef', V0, {'Compiler.Erlang.IR.ErlExpr.EAtom', V0, V1}, {'Compiler.Erlang.IR.ErlExpr.EAtom', V0, V2}}, V3}.
'un--genFC'(V0) -> case V0 of {'Core.FC.MkFC', V1, V2, V3} -> case V2 of {'Builtin.MkPair', V4, V5} -> case V3 of {'Builtin.MkPair', V6, V7} -> V4 end end; {'Core.FC.MkVirtualFC', V8, V9, V10} -> case V9 of {'Builtin.MkPair', V11, V12} -> case V10 of {'Builtin.MkPair', V13, V14} -> V11 end end; {'Core.FC.EmptyFC'} -> 1 end.
'un--genEscriptMain'(V0, V1, V2) -> begin (V3 = ('un--genFunCall'(V1, <<"io"/utf8>>, <<"setopts"/utf8>>, [('un--genList'(V1, [{'Compiler.Erlang.IR.ErlExpr.ETuple', V1, [{'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"encoding"/utf8>>} | [{'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"unicode"/utf8>>} | []]]} | []])) | []]))), begin (V4 = {'Compiler.Erlang.IR.ErlExpr.ESequence', V1, {'Data.List1.:::', V3, [V2 | []]}}), begin (V5 = ('un--newLocalVar'(V0))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V23 = begin (V10 = ('un--newLocalVar'(V0))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V22 = begin (V15 = ('nested--9483-6899--in--un--genErrorProgram'(V2, V1, V0, V14))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = fun (V20) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ETryCatch', V1, V4, V9, {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V9}, V14, V19}} end), V21 end(V16)) end end end end), V22 end(V11)) end end end end), V23 end(V6)) end end end end end end.
'un--genErlMain'(V0, V1, V2) -> begin (V3 = ('un--genFunCall'(V1, <<"erlang"/utf8>>, <<"process_flag"/utf8>>, [{'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"trap_exit"/utf8>>} | [{'Compiler.Erlang.IR.ErlExpr.EAtom', V1, <<"false"/utf8>>} | []]]))), begin (V4 = ('un--genEscriptMain'(V0, V1, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V10 = fun (V9) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESequence', V1, {'Data.List1.:::', V3, [V8 | [('un--genHalt'(V1, 0)) | []]]}}} end), V10 end(V5)) end end end end end.
'un--genDoubleToString'(V0, V1) -> begin (V2 = ('un--genList'(V0, [{'Compiler.Erlang.IR.ErlExpr.ETuple', V0, [{'Compiler.Erlang.IR.ErlExpr.EAtom', V0, <<"decimals"/utf8>>} | [{'Compiler.Erlang.IR.ErlExpr.EInteger', V0, 10} | []]]} | [{'Compiler.Erlang.IR.ErlExpr.EAtom', V0, <<"compact"/utf8>>} | []]]))), ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"float_to_binary"/utf8>>, [V1 | [V2 | []]])) end.
'un--genDisplay'(V0, V1) -> ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"display"/utf8>>, [V1 | []])).
'un--genCurry'(V0, V1, V2, V3, V4) -> ('nested--8149-5625--in--un--curry'(V4, V3, V2, V1, V0, V1, V2, V3, V4, [])).
'un--genCharToString'(V0, V1) -> ('un--genFunCall'(V0, <<"unicode"/utf8>>, <<"characters_to_binary"/utf8>>, [('un--genList'(V0, [V1 | []])) | []])).
'un--genCharToInt'(V0, V1) -> ('un--genValidChar'(V0, V1)).
'un--genBoolToInt'(V0, V1) -> {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V0, V1, ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.ErlExpr.MConst', {'Compiler.Erlang.IR.ErlExpr.MExact', {'Compiler.Erlang.IR.ErlExpr.EAtom', V0, <<"false"/utf8>>}}, {'Compiler.Erlang.IR.ErlExpr.EInteger', V0, 0}})), {'Prelude.Types.Just', {'Compiler.Erlang.IR.ErlExpr.EInteger', V0, 1}}}.
'un--genAtomToString'(V0, V1) -> ('un--genFunCall'(V0, <<"erlang"/utf8>>, <<"atom_to_binary"/utf8>>, [V1 | [{'Compiler.Erlang.IR.ErlExpr.EAtom', V0, <<"utf8"/utf8>>} | []]])).
'un--genArgsToLocals'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> [{'Compiler.Erlang.IR.ErlExpr.ELocal', V0, V2} | ('un--genArgsToLocals'(V0, V3))] end(E0, E1)) end.
'un--genAppendNewline'(V0, V1) -> {'Compiler.Erlang.IR.ErlExpr.EBinaryConcat', V0, V1, {'Compiler.Erlang.IR.ErlExpr.EBinary', V0, <<"\x{a}"/utf8>>}}.
'un--genAppCurriedFun'(V0, V1, V2) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V3, V4) -> ('un--genAppCurriedFun'(V0, {'Compiler.Erlang.IR.ErlExpr.EApp', V0, V1, [V3 | []]}, V4)) end(E0, E1)) end.
'un--addLocalVars'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> {'Prelude.Types.Right', {'Builtin.MkPair', V2, []}} end; [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ('un--addLocalVar'(V0, V4, V2))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V22 = case V10 of {'Builtin.MkPair', V11, V12} -> begin (V13 = ('un--addLocalVars'(V0, V5, V11))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V21 = fun (V18) -> case V17 of {'Builtin.MkPair', V19, V20} -> {'Prelude.Types.Right', {'Builtin.MkPair', V19, [V12 | V20]}} end end), V21 end(V14)) end end end end end), V22 end(V7)) end end end end end(E0, E1)) end.
'un--addLocalVar'(V0, V1, V2) -> begin (V3 = ('un--newLocalVar'(V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V9 = fun (V8) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V1, V7, V2)), V7}} end), V9 end(V4)) end end end end.
