-module('Idris.Idris2.Protocol.IDE.Result').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--toSExp_SExpable_Result'/1,
  'dn--un--toSExp_SExpable_REPLOption'/1,
  'dn--un--toSExp_SExpable_MetaVarLemma'/1,
  'dn--un--toSExp_SExpable_IdrisVersion'/1,
  'dn--un--fromSExp_FromSExpable_Result'/1,
  'dn--un--fromSExp_FromSExpable_REPLOption'/1,
  'dn--un--fromSExp_FromSExpable_MetaVarLemma'/1,
  'dn--un--fromSExp_FromSExpable_IdrisVersion'/1,
  'dn--un--__Impl_SExpable_Result'/1,
  'dn--un--__Impl_SExpable_REPLOption'/1,
  'dn--un--__Impl_SExpable_MetaVarLemma'/1,
  'dn--un--__Impl_SExpable_IdrisVersion'/1,
  'dn--un--__Impl_FromSExpable_Result'/1,
  'dn--un--__Impl_FromSExpable_REPLOption'/1,
  'dn--un--__Impl_FromSExpable_MetaVarLemma'/1,
  'dn--un--__Impl_FromSExpable_IdrisVersion'/1,
  'un--.sem'/1,
  'un--sexpOptionVal'/1
]).
'dn--un--toSExp_SExpable_Result'(V0) -> case V0 of {'Protocol.IDE.Result.AString', V1} -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_String'(V1)); {'Protocol.IDE.Result.AUnit'} -> (begin (V4 = fun (V2) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(List $a)'(fun (V3) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Int'(V3)) end, V2)) end), fun (V5) -> (V4(V5)) end end([])); {'Protocol.IDE.Result.AVersion', V6} -> ('dn--un--toSExp_SExpable_IdrisVersion'(V6)); {'Protocol.IDE.Result.AMetaVarLemma', V7} -> ('dn--un--toSExp_SExpable_MetaVarLemma'(V7)); {'Protocol.IDE.Result.ANameLocList', V8} -> (begin (V13 = fun (V9) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(List $a)'(fun (V10) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V11) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_String'(V11)) end, fun (V12) -> ('Idris.Idris2.Protocol.IDE.FileContext':'dn--un--toSExp_SExpable_FileContext'(V12)) end}, V10)) end, V9)) end), fun (V14) -> (V13(V14)) end end(V8)); {'Protocol.IDE.Result.AHoleList', V15} -> (begin (V18 = fun (V16) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(List $a)'(fun (V17) -> ('Idris.Idris2.Protocol.IDE.Holes':'dn--un--toSExp_SExpable_HoleData'(V17)) end, V16)) end), fun (V19) -> (V18(V19)) end end(V15)); {'Protocol.IDE.Result.ANameList', V20} -> {'Protocol.SExp.SExpList', ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> {'Protocol.SExp.StringAtom', V21} end))(V20))}; {'Protocol.IDE.Result.ACompletionList', V29, V30} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SExpList', ((begin (V36 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V34, V35)) end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end(fun (V31) -> {'Protocol.SExp.StringAtom', V31} end))(V29))} | [{'Protocol.SExp.StringAtom', V30} | []]]}; {'Protocol.IDE.Result.AnOptionList', V39} -> (begin (V42 = fun (V40) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(List $a)'(fun (V41) -> ('dn--un--toSExp_SExpable_REPLOption'(V41)) end, V40)) end), fun (V43) -> (V42(V43)) end end(V39)); {'Protocol.IDE.Result.AnIntroList', V44} -> (begin (V47 = fun (V45) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(List1 $a)'(fun (V46) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_String'(V46)) end, V45)) end), fun (V48) -> (V47(V48)) end end(V44)) end.
'dn--un--toSExp_SExpable_REPLOption'(V0) -> case V0 of {'Protocol.IDE.Result.MkOption', V1, V2, V3} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', case V0 of {'Protocol.IDE.Result.MkOption', V4, V5, V6} -> V4 end} | [(('un--sexpOptionVal'(V2))(case V0 of {'Protocol.IDE.Result.MkOption', V7, V8, V9} -> V9 end)) | []]]} end.
'dn--un--toSExp_SExpable_MetaVarLemma'(V0) -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"metavariable-lemma"/utf8>>} | [{'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"replace-metavariable"/utf8>>} | [{'Protocol.SExp.StringAtom', case V0 of {'Protocol.IDE.Result.MkMetaVarLemma', V1, V2} -> V1 end} | []]]} | [{'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"definition-type"/utf8>>} | [{'Protocol.SExp.StringAtom', case V0 of {'Protocol.IDE.Result.MkMetaVarLemma', V3, V4} -> V4 end} | []]]} | []]]]}.
'dn--un--toSExp_SExpable_IdrisVersion'(V0) -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SExpList', ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Nat'(V13)) end))([case V0 of {'Protocol.IDE.Result.MkIdrisVersion', V1, V2, V3, V4} -> V1 end | [case V0 of {'Protocol.IDE.Result.MkIdrisVersion', V5, V6, V7, V8} -> V6 end | [case V0 of {'Protocol.IDE.Result.MkIdrisVersion', V9, V10, V11, V12} -> V11 end | []]]]))} | [{'Protocol.SExp.SExpList', [{'Protocol.SExp.StringAtom', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<""/utf8>> end, case V0 of {'Protocol.IDE.Result.MkIdrisVersion', V21, V22, V23, V24} -> V24 end))} | []]} | []]]}.
'dn--un--fromSExp_FromSExpable_Result'(V0) -> case V0 of {'Protocol.SExp.SExpList', V1} -> case V1 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AUnit'}}; _ -> case ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V0)) of {'Prelude.Types.Nothing'} -> case ('dn--un--fromSExp_FromSExpable_IdrisVersion'(V0)) of {'Prelude.Types.Nothing'} -> case ('dn--un--fromSExp_FromSExpable_MetaVarLemma'(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V6 = fun (V2) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V3) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V4) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V4)) end, fun (V5) -> ('Idris.Idris2.Protocol.IDE.FileContext':'dn--un--fromSExp_FromSExpable_FileContext'(V5)) end}, V3)) end, V2)) end), fun (V7) -> (V6(V7)) end end(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V10 = fun (V8) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V9) -> ('Idris.Idris2.Protocol.IDE.Holes':'dn--un--fromSExp_FromSExpable_HoleData'(V9)) end, V8)) end), fun (V11) -> (V10(V11)) end end(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V14 = fun (V12) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V13) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V13)) end, V12)) end), fun (V15) -> (V14(V15)) end end(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V20 = fun (V16) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V17) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V18) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V18)) end, V17)) end, fun (V19) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V19)) end}, V16)) end), fun (V21) -> (V20(V21)) end end(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V24 = fun (V22) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V23) -> ('dn--un--fromSExp_FromSExpable_REPLOption'(V23)) end, V22)) end), fun (V25) -> (V24(V25)) end end(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V28 = fun (V26) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List1 $a)'(fun (V27) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V27)) end, V26)) end), fun (V29) -> (V28(V29)) end end(V0)) of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V30} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AnIntroList', V30}} end; {'Prelude.Types.Just', V31} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AnOptionList', V31}} end; {'Prelude.Types.Just', V32} -> {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V33) -> fun (V34) -> {'Protocol.IDE.Result.ACompletionList', V33, V34} end end, V32))} end; {'Prelude.Types.Just', V35} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.ANameList', V35}} end; {'Prelude.Types.Just', V36} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AHoleList', V36}} end; {'Prelude.Types.Just', V37} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.ANameLocList', V37}} end; {'Prelude.Types.Just', V38} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AMetaVarLemma', V38}} end; {'Prelude.Types.Just', V39} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AVersion', V39}} end; {'Prelude.Types.Just', V40} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AString', V40}} end end; _ -> case ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V0)) of {'Prelude.Types.Nothing'} -> case ('dn--un--fromSExp_FromSExpable_IdrisVersion'(V0)) of {'Prelude.Types.Nothing'} -> case ('dn--un--fromSExp_FromSExpable_MetaVarLemma'(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V45 = fun (V41) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V42) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V43) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V43)) end, fun (V44) -> ('Idris.Idris2.Protocol.IDE.FileContext':'dn--un--fromSExp_FromSExpable_FileContext'(V44)) end}, V42)) end, V41)) end), fun (V46) -> (V45(V46)) end end(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V49 = fun (V47) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V48) -> ('Idris.Idris2.Protocol.IDE.Holes':'dn--un--fromSExp_FromSExpable_HoleData'(V48)) end, V47)) end), fun (V50) -> (V49(V50)) end end(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V53 = fun (V51) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V52) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V52)) end, V51)) end), fun (V54) -> (V53(V54)) end end(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V59 = fun (V55) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V56) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V57) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V57)) end, V56)) end, fun (V58) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V58)) end}, V55)) end), fun (V60) -> (V59(V60)) end end(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V63 = fun (V61) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V62) -> ('dn--un--fromSExp_FromSExpable_REPLOption'(V62)) end, V61)) end), fun (V64) -> (V63(V64)) end end(V0)) of {'Prelude.Types.Nothing'} -> case (begin (V67 = fun (V65) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List1 $a)'(fun (V66) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V66)) end, V65)) end), fun (V68) -> (V67(V68)) end end(V0)) of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V69} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AnIntroList', V69}} end; {'Prelude.Types.Just', V70} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AnOptionList', V70}} end; {'Prelude.Types.Just', V71} -> {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V72) -> fun (V73) -> {'Protocol.IDE.Result.ACompletionList', V72, V73} end end, V71))} end; {'Prelude.Types.Just', V74} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.ANameList', V74}} end; {'Prelude.Types.Just', V75} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AHoleList', V75}} end; {'Prelude.Types.Just', V76} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.ANameLocList', V76}} end; {'Prelude.Types.Just', V77} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AMetaVarLemma', V77}} end; {'Prelude.Types.Just', V78} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AVersion', V78}} end; {'Prelude.Types.Just', V79} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.AString', V79}} end end.
'dn--un--fromSExp_FromSExpable_REPLOption'(V0) -> case V0 of {'Protocol.SExp.SExpList', V1} -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Protocol.SExp.SymbolAtom', V4} -> case V3 of [E2 | E3] -> (fun (V5, V6) -> case V6 of [] -> case ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Bool'(V5)) of {'Prelude.Types.Nothing'} -> case ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V5)) of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V5)), fun (V7) -> {'Prelude.Types.Just', {'Protocol.IDE.Result.MkOption', V4, 2, V7}} end)); {'Prelude.Types.Just', V8} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.MkOption', V4, 1, V8}} end; {'Prelude.Types.Just', V9} -> {'Prelude.Types.Just', {'Protocol.IDE.Result.MkOption', V4, 0, V9}} end; _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'dn--un--fromSExp_FromSExpable_MetaVarLemma'(V0) -> case V0 of {'Protocol.SExp.SExpList', V1} -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Protocol.SExp.SymbolAtom', V4} -> case V4 of <<"metavariable-lemma"/utf8>> -> case V3 of [E2 | E3] -> (fun (V5, V6) -> case V5 of {'Protocol.SExp.SExpList', V7} -> case V7 of [E4 | E5] -> (fun (V8, V9) -> case V8 of {'Protocol.SExp.SymbolAtom', V10} -> case V10 of <<"replace-metavariable"/utf8>> -> case V9 of [E6 | E7] -> (fun (V11, V12) -> case V11 of {'Protocol.SExp.StringAtom', V13} -> case V12 of [] -> case V6 of [E8 | E9] -> (fun (V14, V15) -> case V14 of {'Protocol.SExp.SExpList', V16} -> case V16 of [E10 | E11] -> (fun (V17, V18) -> case V17 of {'Protocol.SExp.SymbolAtom', V19} -> case V19 of <<"definition-type"/utf8>> -> case V18 of [E12 | E13] -> (fun (V20, V21) -> case V20 of {'Protocol.SExp.StringAtom', V22} -> case V21 of [] -> case V15 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Result.MkMetaVarLemma', V13, V22}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E12, E13)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E8, E9)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E6, E7)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'dn--un--fromSExp_FromSExpable_IdrisVersion'(V0) -> case V0 of {'Protocol.SExp.SExpList', V1} -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Protocol.SExp.SExpList', V4} -> case V4 of [E2 | E3] -> (fun (V5, V6) -> case V6 of [E4 | E5] -> (fun (V7, V8) -> case V8 of [E6 | E7] -> (fun (V9, V10) -> case V10 of [] -> case V3 of [E8 | E9] -> (fun (V11, V12) -> case V11 of {'Protocol.SExp.SExpList', V13} -> case V13 of [E10 | E11] -> (fun (V14, V15) -> case V14 of {'Protocol.SExp.StringAtom', V16} -> case V15 of [] -> case V12 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Nat'(V5)), fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Nat'(V7)), fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_Nat'(V9)), fun (V19) -> {'Prelude.Types.Just', {'Protocol.IDE.Result.MkIdrisVersion', V17, V18, V19, case V16 of <<""/utf8>> -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', V16} end}} end)) end)) end)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E8, E9)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E6, E7)); _ -> {'Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'dn--un--__Impl_SExpable_Result'(V0) -> ('dn--un--toSExp_SExpable_Result'(V0)).
'dn--un--__Impl_SExpable_REPLOption'(V0) -> ('dn--un--toSExp_SExpable_REPLOption'(V0)).
'dn--un--__Impl_SExpable_MetaVarLemma'(V0) -> ('dn--un--toSExp_SExpable_MetaVarLemma'(V0)).
'dn--un--__Impl_SExpable_IdrisVersion'(V0) -> ('dn--un--toSExp_SExpable_IdrisVersion'(V0)).
'dn--un--__Impl_FromSExpable_Result'(V0) -> ('dn--un--fromSExp_FromSExpable_Result'(V0)).
'dn--un--__Impl_FromSExpable_REPLOption'(V0) -> ('dn--un--fromSExp_FromSExpable_REPLOption'(V0)).
'dn--un--__Impl_FromSExpable_MetaVarLemma'(V0) -> ('dn--un--fromSExp_FromSExpable_MetaVarLemma'(V0)).
'dn--un--__Impl_FromSExpable_IdrisVersion'(V0) -> ('dn--un--fromSExp_FromSExpable_IdrisVersion'(V0)).
'un--.sem'(V0) -> case V0 of 0 -> {'Prelude.Basics.Bool'}; 1 -> {'.String'}; 2 -> {'.String'} end.
'un--sexpOptionVal'(V0) -> case V0 of 0 -> begin (V2 = fun (V1) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_Bool'(V1)) end), fun (V3) -> (V2(V3)) end end; 1 -> begin (V5 = fun (V4) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_String'(V4)) end), fun (V6) -> (V5(V6)) end end; 2 -> begin (V8 = fun (V7) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_String'(V7)) end), fun (V9) -> (V8(V9)) end end end.
