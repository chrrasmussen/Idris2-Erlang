-module('Idris.Idris2.TTImp.Elab.Lazy').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--10209-11735--in--un--delayError'/15,
  'un--checkForce'/14,
  'un--checkDelayed'/15,
  'un--checkDelay'/14
]).
'nested--10209-11735--in--un--delayError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Core.Core.GenericMsg', V15, V16} -> 1; _ -> 0 end.
'un--checkForce'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V19 = begin (V14 = V1), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V57 = begin (V33 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V24) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end, fun () -> fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V25))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V23, V10, {'Core.Value.NDelayed', V11, 2, V30}))}} end), V32 end(V27)) end end end end end end, V13))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V56 = begin (V38 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, V37))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V55 = case V42 of {'Builtin.MkPair', V43, V44} -> begin (V45 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V44))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V54 = fun (V50) -> case V49 of {'Core.Value.NDelayed', V51, V52, V53} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.TForce', V11, V52, V43}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V23, V10, V53))}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V11, <<"Forcing a non-delayed type"/utf8>>}, V50)) end end), V54 end(V46)) end end end end end), V55 end(V39)) end end end end), V56 end(V34)) end end end end), V57 end(V20)) end end end end.
'un--checkDelayed'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V15 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V29 = begin (V20 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V11, V19))}))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V28 = fun (V25) -> case V24 of {'Builtin.MkPair', V26, V27} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.TDelayed', V11, V12, V26}, V27}} end end), V28 end(V21)) end end end end), V29 end(V16)) end end end end.
'un--checkDelay'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V39 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> begin (V14 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"delayTy"/utf8>>))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V36 = begin (V19 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V35 = begin (V28 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V24, V25)) end end, 0, fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V26, V27)) end end, 1})), V10, V18, {'Core.TT.TType', V11, V23}))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V34 = fun (V33) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V32))} end), V34 end(V29)) end end end end), V35 end(V20)) end end end end), V36 end(V15)) end end end end end, fun () -> fun (V37) -> fun (V38) -> {'Prelude.Types.Right', V37} end end end, V13))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V117 = begin (V51 = case V8 of {'TTImp.Elab.Check.MkElabInfo', V44, V45, V46, V47, V48, V49} -> case V44 of {'TTImp.Elab.Check.InLHS', V50} -> ('Idris.Idris2.Core.Unify':'un--inLHS'()); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end end), begin (V52 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V51, 0))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V116 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V1, V2, V3, V4, V11, V7, V10, {'Prelude.Types.Just', V43}, fun (V57) -> ('nested--10209-11735--in--un--delayError'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V57)) end, 4, fun (V58) -> begin (V59 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V43))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V115 = case V63 of {'Core.Value.NDelayed', V64, V65, V66} -> begin (V72 = begin (V67 = V1), fun (V68) -> begin (V71 = (begin (V69 = V67), fun (V70) -> ('erlang':'get'(V69)) end end(V68))), {'Prelude.Types.Right', V71} end end end), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V98 = begin (V77 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V76, V10, V66))}))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V97 = case V81 of {'Builtin.MkPair', V82, V83} -> begin (V84 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V83))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V96 = begin (V89 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V83))), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V95 = fun (V94) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.TDelay', V11, V65, V93, V82}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V76, V10, {'Core.Value.NDelayed', V11, V65, V88}))}} end), V95 end(V90)) end end end end), V96 end(V85)) end end end end end), V97 end(V78)) end end end end), V98 end(V73)) end end end end; _ -> begin (V105 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, (begin (V100 = fun (V99) -> V99 end), fun (V101) -> (V100(V101)) end end(<<"elab.delay"/utf8>>)), 5, fun () -> (begin (V103 = fun (V102) -> V102 end), fun (V104) -> (V103(V104)) end end(<<"Expected delay type"/utf8>>)) end, V10, V63))), fun (V106) -> begin (V107 = (V105(V106))), case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> (begin (V114 = fun (V110) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V11, (begin (V112 = fun (V111) -> V111 end), fun (V113) -> (V112(V113)) end end(<<"Can\x{27}t infer delay type"/utf8>>))}, V110)) end), V114 end(V106)) end end end end end), V115 end(V60)) end end end end end))), V116 end(V53)) end end end end end), V117 end(V40)) end end end end.
