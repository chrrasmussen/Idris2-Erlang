-module('Idris.Idris2.Compiler.Opts.ConstantFold').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in constantFold-4368'/8,
  'case--case block in constantFold-4347'/7,
  'case--case block in constFold-3555'/7,
  'case--lookup,go-3067'/7,
  'nested--8814-3712--in--un--toNF'/7,
  'nested--8410-2982--in--un--go'/5,
  'nested--8814-3713--in--un--fromNF'/7,
  'nested--8814-4119--in--un--foldAlt'/7,
  'nested--8814-4080--in--un--foldAlt'/7,
  'nested--8814-3715--in--un--constRight'/10,
  'nested--8814-3714--in--un--commutative'/7,
  'dn--un--weaken_Weaken_WkCExp'/1,
  'un--wk'/2,
  'un--lookup'/3,
  'un--initSubst'/1,
  'un--foldableOp'/1,
  'un--findConstAlt'/3,
  'un--constantFold'/2,
  'un--constFoldCDef'/1,
  'un--constFold'/3
]).
'case--case block in case block in constantFold-4368'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Prelude.Types.Just', V8} -> begin (V15 = begin (V9 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V14 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.const-fold"/utf8>>, 50, fun () -> <<<<"constant folding "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13))/binary, <<<<"\x{a}\x{9}old def: "/utf8>>/binary, <<('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CDef'(V6))/binary, <<<<"\x{a}\x{9}new def: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CDef'(V8))/binary>>/binary>>/binary>>/binary>>/binary>> end))), V14 end(V10)) end end end end), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V20 = ('Idris.Idris2.Core.Context':'un--setCompiled'(V0, {'Core.Name.Resolved', V3}, V8))), V20 end(V16)) end end end end; {'Prelude.Types.Nothing'} -> fun (V21) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'case--case block in constantFold-4347'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Prelude.Types.Just', V7} -> ('case--case block in case block in constantFold-4368'(V0, V1, V2, V3, V4, V5, V7, ('un--constFoldCDef'(V7)))); {'Prelude.Types.Nothing'} -> fun (V8) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'case--case block in constFold-3555'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.CompileExpr.CPrimVal', V7, V8} -> case V8 of {'Core.TT.BI', V9} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V9, 0)) of 1 -> {'Core.CompileExpr.CPrimVal', V7, {'Core.TT.BI', V9}}; 0 -> {'Core.CompileExpr.CPrimVal', V7, {'Core.TT.BI', 0}} end; _ -> {'Core.CompileExpr.CApp', V4, {'Core.CompileExpr.CRef', V2, V1}, [V6 | []]} end; _ -> {'Core.CompileExpr.CApp', V4, {'Core.CompileExpr.CRef', V2, V1}, [V6 | []]} end.
'case--lookup,go-3067'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = V5), case V7 of 0 -> case V6 of {'Core.TT.SizedView.Z'} -> ('nested--8410-2982--in--un--go'(V0, V1, V2, V3, V4)); _ -> case V6 of {'Core.TT.SizedView.S', V8} -> case V3 of 0 -> {'Prelude.Types.Left', 0}; _ -> begin (V9 = (V3 - 1)), case ('nested--8410-2982--in--un--go'(V0, V1, V2, V9, {'Compiler.Opts.ConstantFold.Wk', V8, V4})) of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', ('Idris.Idris2.Core.TT.Var':'un--later'(V10))}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', ('dn--un--weaken_Weaken_WkCExp'(V11))} end end end end end; _ -> case V6 of {'Core.TT.SizedView.S', V12} -> case V3 of 0 -> {'Prelude.Types.Left', 0}; _ -> begin (V13 = (V3 - 1)), case ('nested--8410-2982--in--un--go'(V0, V1, V2, V13, {'Compiler.Opts.ConstantFold.Wk', V12, V4})) of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', ('Idris.Idris2.Core.TT.Var':'un--later'(V14))}; {'Prelude.Types.Right', V15} -> {'Prelude.Types.Right', ('dn--un--weaken_Weaken_WkCExp'(V15))} end end end end end end.
'nested--8814-3712--in--un--toNF'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.CompileExpr.CPrimVal', V7, V8} -> case V8 of {'Core.TT.I', V9} -> {'Prelude.Types.Nothing'}; {'Core.TT.Db', V10} -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V7, V8}} end; _ -> {'Prelude.Types.Nothing'} end.
'nested--8410-2982--in--un--go'(V0, V1, V2, V3, V4) -> case V3 of 0 -> case V4 of {'Compiler.Opts.ConstantFold.::', V5, V6} -> {'Prelude.Types.Right', {'Compiler.Opts.ConstantFold.MkWkCExp', ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V5}}; _ -> case V4 of {'Compiler.Opts.ConstantFold.Wk', V7, V8} -> ('case--lookup,go-3067'(V0, V1, V2, V3, V8, V7, ('Idris.Idris2.Core.TT':'un--sizedView'(V7)))) end end; _ -> begin (V9 = (V3 - 1)), case V4 of {'Compiler.Opts.ConstantFold.::', V10, V11} -> ('nested--8410-2982--in--un--go'(V0, V1, V2, V9, V11)); _ -> case V4 of {'Compiler.Opts.ConstantFold.Wk', V12, V13} -> ('case--lookup,go-3067'(V0, V1, V2, V3, V13, V12, ('Idris.Idris2.Core.TT':'un--sizedView'(V12)))) end end end end.
'nested--8814-3713--in--un--fromNF'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.Value.NPrimVal', V7, V8} -> {'Prelude.Types.Just', {'Core.CompileExpr.CPrimVal', V7, V8}}; _ -> {'Prelude.Types.Nothing'} end.
'nested--8814-4119--in--un--foldAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.CompileExpr.MkConstAlt', V7, V8} -> {'Core.CompileExpr.MkConstAlt', V7, ('un--constFold'(V0, V5, V8))} end.
'nested--8814-4080--in--un--foldAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.CompileExpr.MkConAlt', V7, V8, V9, V10, V11} -> {'Core.CompileExpr.MkConAlt', V7, V8, V9, V10, ('un--constFold'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V10, V0)), ('un--wk'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V10)), V5)), V11))} end.
'nested--8814-3715--in--un--constRight'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V6 of 0 -> {'Core.CompileExpr.COp', V6, V7, V8, V9}; _ -> begin (V10 = (V6 - 1)), case V10 of 0 -> {'Core.CompileExpr.COp', V6, V7, V8, V9}; _ -> begin (V11 = (V10 - 1)), case V11 of 0 -> case V8 of {'Core.TT.Add', V12} -> case V9 of {'Data.Vect.::', V13, V14} -> case V13 of {'Core.CompileExpr.CPrimVal', V15, V16} -> case V14 of {'Data.Vect.::', V17, V18} -> case V18 of {'Data.Vect.Nil'} -> begin (V19 = {'Core.CompileExpr.CPrimVal', V15, V16}), case ('nested--8814-3714--in--un--commutative'(V0, V1, V2, V3, V4, V5, V12)) of 1 -> {'Core.CompileExpr.COp', 2, V7, {'Core.TT.Add', V12}, {'Data.Vect.::', V17, {'Data.Vect.::', V19, {'Data.Vect.Nil'}}}}; 0 -> {'Core.CompileExpr.COp', 2, V7, {'Core.TT.Add', V12}, {'Data.Vect.::', V19, {'Data.Vect.::', V17, {'Data.Vect.Nil'}}}} end end; _ -> {'Core.CompileExpr.COp', V6, V7, V8, V9} end; _ -> {'Core.CompileExpr.COp', V6, V7, V8, V9} end; _ -> {'Core.CompileExpr.COp', V6, V7, V8, V9} end; _ -> {'Core.CompileExpr.COp', V6, V7, V8, V9} end; {'Core.TT.Mul', V20} -> case V9 of {'Data.Vect.::', V21, V22} -> case V21 of {'Core.CompileExpr.CPrimVal', V23, V24} -> case V22 of {'Data.Vect.::', V25, V26} -> case V26 of {'Data.Vect.Nil'} -> begin (V27 = {'Core.CompileExpr.CPrimVal', V23, V24}), case ('nested--8814-3714--in--un--commutative'(V0, V1, V2, V3, V4, V5, V20)) of 1 -> {'Core.CompileExpr.COp', 2, V7, {'Core.TT.Mul', V20}, {'Data.Vect.::', V25, {'Data.Vect.::', V27, {'Data.Vect.Nil'}}}}; 0 -> {'Core.CompileExpr.COp', 2, V7, {'Core.TT.Mul', V20}, {'Data.Vect.::', V27, {'Data.Vect.::', V25, {'Data.Vect.Nil'}}}} end end; _ -> {'Core.CompileExpr.COp', V6, V7, V8, V9} end; _ -> {'Core.CompileExpr.COp', V6, V7, V8, V9} end; _ -> {'Core.CompileExpr.COp', V6, V7, V8, V9} end; _ -> {'Core.CompileExpr.COp', V6, V7, V8, V9} end; _ -> {'Core.CompileExpr.COp', V6, V7, V8, V9} end; _ -> {'Core.CompileExpr.COp', V6, V7, V8, V9} end end end end end.
'nested--8814-3714--in--un--commutative'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 12 -> 0; _ -> 1 end.
'dn--un--weaken_Weaken_WkCExp'(V0) -> case V0 of {'Compiler.Opts.ConstantFold.MkWkCExp', V1, V2} -> {'Compiler.Opts.ConstantFold.MkWkCExp', ('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V1)), V2} end.
'un--wk'(V0, V1) -> case V1 of {'Compiler.Opts.ConstantFold.Wk', V2, V3} -> {'Compiler.Opts.ConstantFold.Wk', ('Idris.Idris2.Core.TT.SizeOf':'un--+'(V0, V2)), V3}; _ -> {'Compiler.Opts.ConstantFold.Wk', V0, V1} end.
'un--lookup'(V0, V1, V2) -> begin (V3 = V1), case ('nested--8410-2982--in--un--go'(V3, V2, V0, V3, V2)) of {'Prelude.Types.Left', V4} -> begin (V5 = V4), {'Core.CompileExpr.CLocal', V5, V0} end; {'Prelude.Types.Right', V6} -> case V6 of {'Compiler.Opts.ConstantFold.MkWkCExp', V7, V8} -> ('Idris.Idris2.Core.CompileExpr':'dn--un--weakenNs_Weaken_CExp'(V7, V8)) end end end.
'un--initSubst'(V0) -> {'Compiler.Opts.ConstantFold.Wk', ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V0)), {'Compiler.Opts.ConstantFold.Nil'}}.
'un--foldableOp'(V0) -> case V0 of {'Core.TT.BelieveMe'} -> 0; {'Core.TT.Cast', V1, V2} -> case V1 of 0 -> 0; _ -> case V2 of 0 -> 0; _ -> case ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--intKind'(V1)))) of 1 -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--intKind'(V2)))); 0 -> 0 end end end; _ -> 1 end.
'un--findConstAlt'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Core.CompileExpr.MkConstAlt', V5, V6} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V0, V5)) of 1 -> {'Prelude.Types.Just', V6}; 0 -> ('un--findConstAlt'(V0, V4, V2)) end end end(E0, E1)) end.
'un--constantFold'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V77 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExactI'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V76 = case V48 of {'Prelude.Types.Just', V49} -> case V49 of {'Builtin.MkPair', V50, V51} -> begin (V52 = {'Prelude.Types.Just', {'Builtin.MkPair', V50, V51}}), ('case--case block in constantFold-4347'(V0, V1, V11, V50, V51, V52, case V51 of {'Core.Context.Context.MkGlobalDef', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74} -> V71 end)) end end; {'Prelude.Types.Nothing'} -> fun (V75) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V76 end(V45)) end end end end), V77 end(V8)) end end end end.
'un--constFoldCDef'(V0) -> case V0 of {'Core.CompileExpr.MkFun', V1, V2} -> {'Prelude.Types.Just', {'Core.CompileExpr.MkFun', V1, ('un--constFold'(V1, ('un--initSubst'(V1)), V2))}}; _ -> {'Prelude.Types.Nothing'} end.
'un--constFold'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.CLocal', V3, V4} -> ('un--lookup'(V4, V3, V1)); {'Core.CompileExpr.CRef', V5, V6} -> {'Core.CompileExpr.CRef', V5, V6}; {'Core.CompileExpr.CLam', V7, V8, V9} -> {'Core.CompileExpr.CLam', V7, V8, ('un--constFold'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V8 | []], V0)), ('un--wk'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V8 | []])), V1)), V9))}; {'Core.CompileExpr.CLet', V10, V11, V12, V13, V14} -> begin (V15 = ('un--constFold'(V0, V1, V13))), case V15 of {'Core.CompileExpr.CPrimVal', V16, V17} -> begin (V18 = {'Core.CompileExpr.CPrimVal', V16, V17}), case ('Idris.Idris2.Core.CompileExpr':'dn--un--==_Eq_InlineOk'(V12, 0)) of 1 -> ('un--constFold'(V0, {'Compiler.Opts.ConstantFold.::', V18, V1}, V14)); 0 -> {'Core.CompileExpr.CLet', V10, V11, V12, V18, ('un--constFold'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V11 | []], V0)), ('un--wk'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V11 | []])), V1)), V14))} end end; _ -> {'Core.CompileExpr.CLet', V10, V11, V12, V15, ('un--constFold'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V11 | []], V0)), ('un--wk'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V11 | []])), V1)), V14))} end end; {'Core.CompileExpr.CApp', V19, V20, V21} -> case V20 of {'Core.CompileExpr.CRef', V22, V23} -> case V21 of [E0 | E1] -> (fun (V24, V25) -> case V25 of [] -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V23, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"prim__integerToNat"/utf8>>}}})) of 1 -> ('case--case block in constFold-3555'(V0, V23, V22, V24, V19, V1, ('un--constFold'(V0, V1, V24)))); 0 -> {'Core.CompileExpr.CApp', V19, {'Core.CompileExpr.CRef', V22, V23}, [('un--constFold'(V0, V1, V24)) | []]} end; _ -> {'Core.CompileExpr.CApp', V19, ('un--constFold'(V0, V1, V20)), ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V26) -> ('un--constFold'(V0, V1, V26)) end))(V21))} end end(E0, E1)); _ -> {'Core.CompileExpr.CApp', V19, ('un--constFold'(V0, V1, V20)), ((begin (V39 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V37, V38)) end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V34) -> ('un--constFold'(V0, V1, V34)) end))(V21))} end; _ -> {'Core.CompileExpr.CApp', V19, ('un--constFold'(V0, V1, V20)), ((begin (V47 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V45, V46)) end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V42) -> ('un--constFold'(V0, V1, V42)) end))(V21))} end; {'Core.CompileExpr.CCon', V50, V51, V52, V53, V54} -> {'Core.CompileExpr.CCon', V50, V51, V52, V53, ((begin (V60 = fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V58, V59)) end end end end), fun (V61) -> fun (V62) -> ((((V60('erased'))('erased'))(V61))(V62)) end end end(fun (V55) -> ('un--constFold'(V0, V1, V55)) end))(V54))}; {'Core.CompileExpr.COp', V63, V64, V65, V66} -> begin (V68 = ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V67) -> ('un--constFold'(V0, V1, V67)) end, V66))), begin (V69 = ('nested--8814-3715--in--un--constRight'(V0, V63, V66, V65, V64, V1, V63, V64, V65, V68))), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V69 end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V72, V73)) end end end end, fun (V74) -> fun (V75) -> {'Prelude.Types.Just', V75} end end, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V78, V79)) end end end end}, fun (V80) -> {'Prelude.Types.Nothing'} end, fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V82, V83)) end end end}, ('un--foldableOp'(V65)))), fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Prelude.Interfaces.MkApplicative', fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V87, V88)) end end end end, fun (V89) -> fun (V90) -> {'Prelude.Types.Just', V90} end end, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V93, V94)) end end end end}, fun (V95) -> ('nested--8814-3712--in--un--toNF'(V0, V63, V66, V65, V64, V1, V95)) end, V68)), fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'((('Idris.Idris2.Core.Primitives':'un--getOp'(V65, V0))(V96)), fun (V97) -> ('nested--8814-3713--in--un--fromNF'(V0, V63, V66, V65, V64, V1, V97)) end)) end)) end)))) end end; {'Core.CompileExpr.CExtPrim', V98, V99, V100} -> {'Core.CompileExpr.CExtPrim', V98, V99, ((begin (V106 = fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V104, V105)) end end end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V101) -> ('un--constFold'(V0, V1, V101)) end))(V100))}; {'Core.CompileExpr.CForce', V109, V110, V111} -> {'Core.CompileExpr.CForce', V109, V110, ('un--constFold'(V0, V1, V111))}; {'Core.CompileExpr.CDelay', V112, V113, V114} -> {'Core.CompileExpr.CDelay', V112, V113, ('un--constFold'(V0, V1, V114))}; {'Core.CompileExpr.CConCase', V115, V116, V117, V118} -> {'Core.CompileExpr.CConCase', V115, ('un--constFold'(V0, V1, V116)), ((begin (V124 = fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V122, V123)) end end end end), fun (V125) -> fun (V126) -> ((((V124('erased'))('erased'))(V125))(V126)) end end end(fun (V119) -> ('nested--8814-4080--in--un--foldAlt'(V0, V118, V117, V116, V115, V1, V119)) end))(V117)), ((begin (V132 = fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V130, V131)) end end end end), fun (V133) -> fun (V134) -> ((((V132('erased'))('erased'))(V133))(V134)) end end end(fun (V127) -> ('un--constFold'(V0, V1, V127)) end))(V118))}; {'Core.CompileExpr.CConstCase', V135, V136, V137, V138} -> begin (V139 = ('un--constFold'(V0, V1, V136))), case V139 of {'Core.CompileExpr.CPrimVal', V140, V141} -> case ('un--findConstAlt'(V141, V137, V138)) of {'Prelude.Types.Just', V142} -> ('un--constFold'(V0, V1, V142)); {'Prelude.Types.Nothing'} -> {'Core.CompileExpr.CConstCase', V135, ('un--constFold'(V0, V1, V136)), ((begin (V148 = fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V146, V147)) end end end end), fun (V149) -> fun (V150) -> ((((V148('erased'))('erased'))(V149))(V150)) end end end(fun (V143) -> ('nested--8814-4119--in--un--foldAlt'(V0, V138, V137, V136, V135, V1, V143)) end))(V137)), ((begin (V156 = fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V154, V155)) end end end end), fun (V157) -> fun (V158) -> ((((V156('erased'))('erased'))(V157))(V158)) end end end(fun (V151) -> ('un--constFold'(V0, V1, V151)) end))(V138))} end; _ -> {'Core.CompileExpr.CConstCase', V135, ('un--constFold'(V0, V1, V136)), ((begin (V164 = fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V162, V163)) end end end end), fun (V165) -> fun (V166) -> ((((V164('erased'))('erased'))(V165))(V166)) end end end(fun (V159) -> ('nested--8814-4119--in--un--foldAlt'(V0, V138, V137, V136, V135, V1, V159)) end))(V137)), ((begin (V172 = fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V170, V171)) end end end end), fun (V173) -> fun (V174) -> ((((V172('erased'))('erased'))(V173))(V174)) end end end(fun (V167) -> ('un--constFold'(V0, V1, V167)) end))(V138))} end end; {'Core.CompileExpr.CPrimVal', V175, V176} -> {'Core.CompileExpr.CPrimVal', V175, V176}; {'Core.CompileExpr.CErased', V177} -> {'Core.CompileExpr.CErased', V177}; {'Core.CompileExpr.CCrash', V178, V179} -> {'Core.CompileExpr.CCrash', V178, V179} end.
