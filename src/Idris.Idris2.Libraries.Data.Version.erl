-module('Idris.Idris2.Libraries.Data.Version').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--compare-3405'/5,
  'nested--4249-3065--in--un--showTag'/5,
  'dn--un--tokValue_TokenKind_VersionTokenKind'/2,
  'dn--un--show_Show_Version'/1,
  'dn--un--showPrec_Show_Version'/2,
  'dn--un--min_Ord_Version'/2,
  'dn--un--max_Ord_Version'/2,
  'dn--un--compare_Ord_Version'/2,
  'dn--un--__Impl_Show_Version'/0,
  'dn--un--__Impl_Ord_Version'/0,
  'dn--un--__Impl_Eq_Version'/0,
  'dn--un--TokType_TokenKind_VersionTokenKind'/1,
  'dn--un-->_Ord_Version'/2,
  'dn--un-->=_Ord_Version'/2,
  'dn--un--==_Eq_VersionTokenKind'/2,
  'dn--un--==_Eq_Version'/2,
  'dn--un--<_Ord_Version'/2,
  'dn--un--<=_Ord_Version'/2,
  'dn--un--/=_Eq_VersionTokenKind'/2,
  'dn--un--/=_Eq_Version'/2,
  'un--versionTokenMap'/0,
  'un--versionParser'/0,
  'un--showVersion'/2,
  'un--parseVersion'/1,
  'un--lexVersion'/1
]).
'case--compare-3405'(V0, V1, V2, V3, V4) -> case V4 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V7, V8)) end end}, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V21, V22)) end end}, V0, V2)); _ -> V4 end.
'nested--4249-3065--in--un--showTag'(V0, V1, V2, V3, V4) -> case V3 of {'Prelude.Types.Nothing'} -> <<""/utf8>>; {'Prelude.Types.Just', V5} -> <<<<"-"/utf8>>/binary, V5/binary>> end.
'dn--un--tokValue_TokenKind_VersionTokenKind'(V0, V1) -> case V0 of 0 -> V1; 2 -> {'Builtin.MkUnit'}; 3 -> {'Builtin.MkUnit'}; 1 -> ('Idris.Idris2.Data.String':'un--stringToNatOrZ'(V1)) end.
'dn--un--show_Show_Version'(V0) -> ('un--showVersion'(1, V0)).
'dn--un--showPrec_Show_Version'(V0, V1) -> ('dn--un--show_Show_Version'(V1)).
'dn--un--min_Ord_Version'(V0, V1) -> case ('dn--un--<_Ord_Version'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_Version'(V0, V1) -> case ('dn--un-->_Ord_Version'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--compare_Ord_Version'(V0, V1) -> case V0 of {'Libraries.Data.Version.MkVersion', V2, V3} -> case V1 of {'Libraries.Data.Version.MkVersion', V4, V5} -> ('case--compare-3405'(V3, V2, V5, V4, ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> case (V6 =:= V7) of 'false' -> 0; _ -> 1 end end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V8, V9)) end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V22, V23)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V26) -> fun (V27) -> case (V26 =:= V27) of 'false' -> 0; _ -> 1 end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V28, V29)) end end}, {'Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> case (V30 =:= V31) of 'false' -> 0; _ -> 1 end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V32, V33)) end end}, V24, V25)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V36) -> fun (V37) -> case (V36 =:= V37) of 'false' -> 0; _ -> 1 end end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V38, V39)) end end}, {'Prelude.EqOrd.MkEq', fun (V40) -> fun (V41) -> case (V40 =:= V41) of 'false' -> 0; _ -> 1 end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V42, V43)) end end}, V34, V35)) end end}, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V46) -> fun (V47) -> case (V46 =:= V47) of 'false' -> 0; _ -> 1 end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V48, V49)) end end}, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V62, V63)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V64) -> fun (V65) -> case (V64 =:= V65) of 'false' -> 0; _ -> 1 end end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V66, V67)) end end}, fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V80, V81)) end end}, V44, V45)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V84) -> fun (V85) -> case (V84 =:= V85) of 'false' -> 0; _ -> 1 end end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V86, V87)) end end}, fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V88, V89)) end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V90, V91)) end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V94, V95)) end end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V96, V97)) end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V98, V99)) end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V100, V101)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V102) -> fun (V103) -> case (V102 =:= V103) of 'false' -> 0; _ -> 1 end end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V104, V105)) end end}, fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V106, V107)) end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V108, V109)) end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V110, V111)) end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V112, V113)) end end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V116, V117)) end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V118, V119)) end end}, V82, V83)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V122) -> fun (V123) -> case (V122 =:= V123) of 'false' -> 0; _ -> 1 end end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V124, V125)) end end}, fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V130, V131)) end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V132, V133)) end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V134, V135)) end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V136, V137)) end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V138, V139)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V140) -> fun (V141) -> case (V140 =:= V141) of 'false' -> 0; _ -> 1 end end end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V142, V143)) end end}, fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V144, V145)) end end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V146, V147)) end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V148, V149)) end end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V150, V151)) end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V152, V153)) end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V154, V155)) end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V156, V157)) end end}, V120, V121)) end end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V160) -> fun (V161) -> case (V160 =:= V161) of 'false' -> 0; _ -> 1 end end end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V162, V163)) end end}, fun (V164) -> fun (V165) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V164, V165)) end end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V166, V167)) end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V168, V169)) end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V170, V171)) end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V172, V173)) end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V174, V175)) end end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V176, V177)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V178) -> fun (V179) -> case (V178 =:= V179) of 'false' -> 0; _ -> 1 end end end, fun (V180) -> fun (V181) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V180, V181)) end end}, fun (V182) -> fun (V183) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V182, V183)) end end, fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V184, V185)) end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V186, V187)) end end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V188, V189)) end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V190, V191)) end end, fun (V192) -> fun (V193) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V192, V193)) end end, fun (V194) -> fun (V195) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V194, V195)) end end}, V158, V159)) end end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V198) -> fun (V199) -> case (V198 =:= V199) of 'false' -> 0; _ -> 1 end end end, fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V200, V201)) end end}, fun (V202) -> fun (V203) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V202, V203)) end end, fun (V204) -> fun (V205) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V204, V205)) end end, fun (V206) -> fun (V207) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V206, V207)) end end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V208, V209)) end end, fun (V210) -> fun (V211) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V210, V211)) end end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V212, V213)) end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V214, V215)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V216) -> fun (V217) -> case (V216 =:= V217) of 'false' -> 0; _ -> 1 end end end, fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V218, V219)) end end}, fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V220, V221)) end end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V222, V223)) end end, fun (V224) -> fun (V225) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V224, V225)) end end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V226, V227)) end end, fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V228, V229)) end end, fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V230, V231)) end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V232, V233)) end end}, V196, V197)) end end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V236) -> fun (V237) -> case (V236 =:= V237) of 'false' -> 0; _ -> 1 end end end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V238, V239)) end end}, fun (V240) -> fun (V241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V240, V241)) end end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V242, V243)) end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V244, V245)) end end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V246, V247)) end end, fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V248, V249)) end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V250, V251)) end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V252, V253)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V254) -> fun (V255) -> case (V254 =:= V255) of 'false' -> 0; _ -> 1 end end end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V256, V257)) end end}, fun (V258) -> fun (V259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V258, V259)) end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V260, V261)) end end, fun (V262) -> fun (V263) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V262, V263)) end end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V264, V265)) end end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V266, V267)) end end, fun (V268) -> fun (V269) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V268, V269)) end end, fun (V270) -> fun (V271) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V270, V271)) end end}, V234, V235)) end end, fun (V272) -> fun (V273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V274) -> fun (V275) -> case (V274 =:= V275) of 'false' -> 0; _ -> 1 end end end, fun (V276) -> fun (V277) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V276, V277)) end end}, fun (V278) -> fun (V279) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V278, V279)) end end, fun (V280) -> fun (V281) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V280, V281)) end end, fun (V282) -> fun (V283) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V282, V283)) end end, fun (V284) -> fun (V285) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V284, V285)) end end, fun (V286) -> fun (V287) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V286, V287)) end end, fun (V288) -> fun (V289) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V288, V289)) end end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V290, V291)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V292) -> fun (V293) -> case (V292 =:= V293) of 'false' -> 0; _ -> 1 end end end, fun (V294) -> fun (V295) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V294, V295)) end end}, fun (V296) -> fun (V297) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V296, V297)) end end, fun (V298) -> fun (V299) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V298, V299)) end end, fun (V300) -> fun (V301) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V300, V301)) end end, fun (V302) -> fun (V303) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V302, V303)) end end, fun (V304) -> fun (V305) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V304, V305)) end end, fun (V306) -> fun (V307) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V306, V307)) end end, fun (V308) -> fun (V309) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V308, V309)) end end}, V272, V273)) end end}, V2, V4)))) end end.
'dn--un--__Impl_Show_Version'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Version'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Version'(V1, V2)) end end}.
'dn--un--__Impl_Ord_Version'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Version'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Version'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_Version'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_Version'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_Version'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_Version'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_Version'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_Version'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_Version'(V16, V17)) end end}.
'dn--un--__Impl_Eq_Version'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Version'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Version'(V2, V3)) end end}.
'dn--un--TokType_TokenKind_VersionTokenKind'(V0) -> case V0 of 0 -> {'.String'}; 2 -> {'Builtin.Unit'}; 3 -> {'Builtin.Unit'}; 1 -> {'Prelude.Types.Nat'} end.
'dn--un-->_Ord_Version'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Version'(V0, V1)), 2)).
'dn--un-->=_Ord_Version'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Version'(V0, V1)), 0)).
'dn--un--==_Eq_VersionTokenKind'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; 3 -> case V1 of 3 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_Version'(V0, V1) -> case V0 of {'Libraries.Data.Version.MkVersion', V2, V3} -> case V1 of {'Libraries.Data.Version.MkVersion', V4, V5} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> case (V6 =:= V7) of 'false' -> 0; _ -> 1 end end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V8, V9)) end end}, {'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> case (V12 =:= V13) of 'false' -> 0; _ -> 1 end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V14, V15)) end end}, {'Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> case (V16 =:= V17) of 'false' -> 0; _ -> 1 end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V18, V19)) end end}, V10, V11)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> case (V22 =:= V23) of 'false' -> 0; _ -> 1 end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V24, V25)) end end}, {'Prelude.EqOrd.MkEq', fun (V26) -> fun (V27) -> case (V26 =:= V27) of 'false' -> 0; _ -> 1 end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V28, V29)) end end}, V20, V21)) end end}, V2, V4)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V32, V33)) end end}, V3, V5)); 0 -> 0 end end end.
'dn--un--<_Ord_Version'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Version'(V0, V1)), 0)).
'dn--un--<=_Ord_Version'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Version'(V0, V1)), 2)).
'dn--un--/=_Eq_VersionTokenKind'(V0, V1) -> case ('dn--un--==_Eq_VersionTokenKind'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_Version'(V0, V1) -> case ('dn--un--==_Eq_Version'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--versionTokenMap'() -> (('Idris.Idris2.Libraries.Text.Lexer':'un--toTokenMap'())([{'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($.)), 2} | [{'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)), 3} | [{'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--digits'()), 1} | [{'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer':'un--alphaNum'()))), 0} | []]]]])).
'un--versionParser'() -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_VersionTokenKind'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_VersionTokenKind'(V2, V3)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V4) -> ('dn--un--TokType_TokenKind_VersionTokenKind'(V4)) end, fun (V5) -> fun (V6) -> ('dn--un--tokValue_TokenKind_VersionTokenKind'(V5, V6)) end end}}, 1)), fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('dn--un--==_Eq_VersionTokenKind'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--/=_Eq_VersionTokenKind'(V10, V11)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V12) -> ('dn--un--TokType_TokenKind_VersionTokenKind'(V12)) end, fun (V13) -> fun (V14) -> ('dn--un--tokValue_TokenKind_VersionTokenKind'(V13, V14)) end end}}, 2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('dn--un--==_Eq_VersionTokenKind'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('dn--un--/=_Eq_VersionTokenKind'(V17, V18)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V19) -> ('dn--un--TokType_TokenKind_VersionTokenKind'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--tokValue_TokenKind_VersionTokenKind'(V20, V21)) end end}}, 1)), fun () -> fun (V22) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V23) -> fun (V24) -> ('dn--un--==_Eq_VersionTokenKind'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('dn--un--/=_Eq_VersionTokenKind'(V25, V26)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V27) -> ('dn--un--TokType_TokenKind_VersionTokenKind'(V27)) end, fun (V28) -> fun (V29) -> ('dn--un--tokValue_TokenKind_VersionTokenKind'(V28, V29)) end end}}, 2)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('dn--un--==_Eq_VersionTokenKind'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('dn--un--/=_Eq_VersionTokenKind'(V32, V33)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V34) -> ('dn--un--TokType_TokenKind_VersionTokenKind'(V34)) end, fun (V35) -> fun (V36) -> ('dn--un--tokValue_TokenKind_VersionTokenKind'(V35, V36)) end end}}, 1)), fun () -> fun (V37) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V51 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V49, V50)) end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(fun (V45) -> fun (V46) -> V46 end end))(('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V38) -> fun (V39) -> ('dn--un--==_Eq_VersionTokenKind'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('dn--un--/=_Eq_VersionTokenKind'(V40, V41)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V42) -> ('dn--un--TokType_TokenKind_VersionTokenKind'(V42)) end, fun (V43) -> fun (V44) -> ('dn--un--tokValue_TokenKind_VersionTokenKind'(V43, V44)) end end}}, 3)))), fun (V54) -> ((begin (V66 = fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V64, V65)) end end end end), fun (V67) -> fun (V68) -> ((((V66('erased'))('erased'))(V67))(V68)) end end end(V54))(('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V55) -> fun (V56) -> ('dn--un--==_Eq_VersionTokenKind'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('dn--un--/=_Eq_VersionTokenKind'(V57, V58)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V59) -> ('dn--un--TokType_TokenKind_VersionTokenKind'(V59)) end, fun (V60) -> fun (V61) -> ('dn--un--tokValue_TokenKind_VersionTokenKind'(V60, V61)) end end}}, 0)))) end})), fun (V69) -> {'Libraries.Text.Parser.Core.Empty', {'Libraries.Data.Version.MkVersion', {'Builtin.MkPair', V7, {'Builtin.MkPair', V22, V37}}, V69}} end} end end} end} end end} end} end end}.
'un--showVersion'(V0, V1) -> case V1 of {'Libraries.Data.Version.MkVersion', V2, V3} -> case V2 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V8) -> fun (V9) -> <<V8/binary, V9/binary>> end end, <<""/utf8>>}, fun (V10) -> V10 end, ('Idris.Idris2.Data.List':'un--intersperse'(<<"."/utf8>>, ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V11)) end))([V4 | [V6 | [V7 | []]]]))))))/binary, case V0 of 1 -> ('nested--4249-3065--in--un--showTag'(V4, V6, V7, V3, V0)); 0 -> <<""/utf8>> end/binary>> end end end.
'un--parseVersion'(V0) -> case ('Idris.Idris2.Libraries.Text.Parser.Core':'un--parse'(1, ('un--versionParser'()), ('un--lexVersion'(V0)))) of {'Prelude.Types.Right', V1} -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of [] -> {'Prelude.Types.Just', V4}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--lexVersion'(V0) -> case ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--lex'(('un--versionTokenMap'()), V0)) of {'Builtin.MkPair', V1, V2} -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> V1 end end end.
