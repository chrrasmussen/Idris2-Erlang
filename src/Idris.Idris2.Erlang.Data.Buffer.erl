-module('Idris.Idris2.Erlang.Data.Buffer').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--createBufferFromFile-6889'/4,
  'nested--5050-6744--in--un--unpackTo'/4,
  'un--writeBufferToFile'/4,
  'un--stringByteLength'/1,
  'un--setString'/4,
  'un--setInt32'/4,
  'un--setInt'/4,
  'un--setDouble'/4,
  'un--setByte'/4,
  'un--setBits8'/4,
  'un--setBits64'/4,
  'un--setBits32'/4,
  'un--setBits16'/4,
  'un--resizeBuffer'/3,
  'un--rawSize'/2,
  'un--newBuffer'/2,
  'un--getString'/4,
  'un--getInt32'/3,
  'un--getInt'/3,
  'un--getDouble'/3,
  'un--getByte'/3,
  'un--getBits8'/3,
  'un--getBits64'/3,
  'un--getBits32'/3,
  'un--getBits16'/3,
  'un--freeBuffer'/2,
  'un--flatten'/3,
  'un--createBufferFromFile'/2,
  'un--copyData'/6,
  'un--bufferData'/2
]).
'case--createBufferFromFile-6889'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Right', V4} -> begin (V5 = ('erlang':'apply'('erlang', 'byte_size', [V4 | []]))), case V0 of {'Prelude.IO.MkHasIO', V6, V7} -> case V6 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> ((((V9('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V46, V47} -> case V46 of {'Prelude.Interfaces.MkMonad', V48, V49, V50} -> case V48 of {'Prelude.Interfaces.MkApplicative', V51, V52, V53} -> ((V52('erased'))(('erlang':'apply'('erlang', 'make_ref', [])))) end end end))(fun (V11) -> case V0 of {'Prelude.IO.MkHasIO', V12, V13} -> case V12 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> ((((V15('erased'))('erased'))(((begin (V43 = case V0 of {'Prelude.IO.MkHasIO', V35, V36} -> case V35 of {'Prelude.Interfaces.MkMonad', V37, V38, V39} -> case V37 of {'Prelude.Interfaces.MkApplicative', V40, V41, V42} -> V40 end end end), fun (V44) -> fun (V45) -> ((((V43('erased'))('erased'))(V44))(V45)) end end end(fun (V34) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V26, V27} -> case V26 of {'Prelude.Interfaces.MkMonad', V28, V29, V30} -> case V28 of {'Prelude.Interfaces.MkApplicative', V31, V32, V33} -> ((V32('erased'))(('erlang':'apply'('erlang', 'put', [V11 | [{V4, V5} | []]])))) end end end))))(fun (V17) -> case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> case V18 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> case V20 of {'Prelude.Interfaces.MkApplicative', V23, V24, V25} -> ((V24('erased'))({'Prelude.Types.Right', V11})) end end end end)) end end end)) end end end; _ -> case V0 of {'Prelude.IO.MkHasIO', V54, V55} -> case V54 of {'Prelude.Interfaces.MkMonad', V56, V57, V58} -> case V56 of {'Prelude.Interfaces.MkApplicative', V59, V60, V61} -> ((V60('erased'))({'Prelude.Types.Left', {'Erlang.System.File.FileReadError'}})) end end end end.
'nested--5050-6744--in--un--unpackTo'(V0, V1, V2, V3) -> case V3 of 0 -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> case V6 of {'Prelude.Interfaces.MkApplicative', V9, V10, V11} -> ((V10('erased'))(V2)) end end end; _ -> case V0 of {'Prelude.IO.MkHasIO', V12, V13} -> case V12 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> ((((V15('erased'))('erased'))(('un--getByte'(V0, V1, begin (V19 = (V3 - 1)), case ((V19 band 9223372036854775808) =/= 0) of 'true' -> (V19 bor -9223372036854775808); _ -> (V19 band 9223372036854775807) end end))))(fun (V17) -> ('nested--5050-6744--in--un--unpackTo'(V0, V1, [V17 | V2], begin (V18 = (V3 - 1)), case ((V18 band 9223372036854775808) =/= 0) of 'true' -> (V18 bor -9223372036854775808); _ -> (V18 band 9223372036854775807) end end)) end)) end end end.
'un--writeBufferToFile'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(('un--flatten'(V0, V2, V3))))(fun (V9) -> case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> ((((V13('erased'))('erased'))(begin (V57 = V2), case V0 of {'Prelude.IO.MkHasIO', V58, V59} -> case V58 of {'Prelude.Interfaces.MkMonad', V60, V61, V62} -> case V60 of {'Prelude.Interfaces.MkApplicative', V63, V64, V65} -> ((V64('erased'))(('erlang':'apply'('erlang', 'get', [V57 | []])))) end end end end))(fun (V15) -> case V15 of {E0, E1} -> (fun (V16, V17) -> case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> case V18 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> ((((V21('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V46, V47} -> case V46 of {'Prelude.Interfaces.MkMonad', V48, V49, V50} -> case V48 of {'Prelude.Interfaces.MkApplicative', V51, V52, V53} -> ((V52('erased'))(('erlang':'apply'('file', ('erlang':'binary_to_atom'((begin (V55 = fun (V54) -> V54 end), fun (V56) -> (V55(V56)) end end(<<"write_file"/utf8>>)), 'utf8')), [V1 | [V16 | []]])))) end end end))(fun (V23) -> case V0 of {'Prelude.IO.MkHasIO', V24, V25} -> case V24 of {'Prelude.Interfaces.MkMonad', V26, V27, V28} -> case V26 of {'Prelude.Interfaces.MkApplicative', V29, V30, V31} -> ((V30('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Erlang.Types.ETErlTerm'}, fun () -> {'Prelude.Types.Left', {'Builtin.MkPair', {'Erlang.System.File.FileWriteError'}, begin (V32 = 0), case ((V32 band 9223372036854775808) =/= 0) of 'true' -> (V32 bor -9223372036854775808); _ -> (V32 band 9223372036854775807) end end}} end, ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V35, V36)) end end end end, fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V38, V39)) end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V42, V43)) end end end end}, fun (V44) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Erlang.Types.ETErlAtom'}, 'ok', V44)) end, fun (V45) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Prelude.Types.Right', {'Builtin.MkUnit'}}, V45)) end)), V23)))) end end end end)) end end end(E0, E1)) end end)) end end end)) end end.
'un--stringByteLength'(V0) -> ('erlang':'apply'('erlang', 'byte_size', [V0 | []])).
'un--setString'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(begin (V31 = V1), case V0 of {'Prelude.IO.MkHasIO', V32, V33} -> case V32 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((V38('erased'))(('erlang':'apply'('erlang', 'get', [V31 | []])))) end end end end))(fun (V9) -> begin (V10 = V1), ((begin (V28 = case V0 of {'Prelude.IO.MkHasIO', V20, V21} -> case V20 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> V25 end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V19) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))(('erlang':'apply'('erlang', 'put', [V10 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value/binary>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Size = ('erlang':'byte_size'(Value))), (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, Size))), (<<Start:Loc/binary-unit:8, _:Size/binary-unit:8, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value/binary, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end end end)) end end)) end end.
'un--setInt32'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(begin (V31 = V1), case V0 of {'Prelude.IO.MkHasIO', V32, V33} -> case V32 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((V38('erased'))(('erlang':'apply'('erlang', 'get', [V31 | []])))) end end end end))(fun (V9) -> begin (V10 = V1), ((begin (V28 = case V0 of {'Prelude.IO.MkHasIO', V20, V21} -> case V20 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> V25 end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V19) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))(('erlang':'apply'('erlang', 'put', [V10 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:32/integer-signed-native-unit:1>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (32 div 8)))), (<<Start:Loc/binary-unit:8, _:32/integer-signed-native-unit:1, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:32/integer-signed-native-unit:1, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end end end)) end end)) end end.
'un--setInt'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(begin (V31 = V1), case V0 of {'Prelude.IO.MkHasIO', V32, V33} -> case V32 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((V38('erased'))(('erlang':'apply'('erlang', 'get', [V31 | []])))) end end end end))(fun (V9) -> begin (V10 = V1), ((begin (V28 = case V0 of {'Prelude.IO.MkHasIO', V20, V21} -> case V20 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> V25 end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V19) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))(('erlang':'apply'('erlang', 'put', [V10 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/integer-signed-native-unit:1>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (64 div 8)))), (<<Start:Loc/binary-unit:8, _:64/integer-signed-native-unit:1, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/integer-signed-native-unit:1, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end end end)) end end)) end end.
'un--setDouble'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(begin (V31 = V1), case V0 of {'Prelude.IO.MkHasIO', V32, V33} -> case V32 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((V38('erased'))(('erlang':'apply'('erlang', 'get', [V31 | []])))) end end end end))(fun (V9) -> begin (V10 = V1), ((begin (V28 = case V0 of {'Prelude.IO.MkHasIO', V20, V21} -> case V20 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> V25 end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V19) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))(('erlang':'apply'('erlang', 'put', [V10 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/float-native-unit:1>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (64 div 8)))), (<<Start:Loc/binary-unit:8, _:64/float-native-unit:1, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/float-native-unit:1, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end end end)) end end)) end end.
'un--setByte'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(begin (V31 = V1), case V0 of {'Prelude.IO.MkHasIO', V32, V33} -> case V32 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((V38('erased'))(('erlang':'apply'('erlang', 'get', [V31 | []])))) end end end end))(fun (V9) -> begin (V10 = V1), ((begin (V28 = case V0 of {'Prelude.IO.MkHasIO', V20, V21} -> case V20 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> V25 end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V19) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))(('erlang':'apply'('erlang', 'put', [V10 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:8/integer-unsigned-native-unit:1>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (8 div 8)))), (<<Start:Loc/binary-unit:8, _:8/integer-unsigned-native-unit:1, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:8/integer-unsigned-native-unit:1, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end end end)) end end)) end end.
'un--setBits8'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(begin (V31 = V1), case V0 of {'Prelude.IO.MkHasIO', V32, V33} -> case V32 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((V38('erased'))(('erlang':'apply'('erlang', 'get', [V31 | []])))) end end end end))(fun (V9) -> begin (V10 = V1), ((begin (V28 = case V0 of {'Prelude.IO.MkHasIO', V20, V21} -> case V20 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> V25 end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V19) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))(('erlang':'apply'('erlang', 'put', [V10 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:8/integer-unsigned-native-unit:1>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (8 div 8)))), (<<Start:Loc/binary-unit:8, _:8/integer-unsigned-native-unit:1, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:8/integer-unsigned-native-unit:1, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end end end)) end end)) end end.
'un--setBits64'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(begin (V31 = V1), case V0 of {'Prelude.IO.MkHasIO', V32, V33} -> case V32 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((V38('erased'))(('erlang':'apply'('erlang', 'get', [V31 | []])))) end end end end))(fun (V9) -> begin (V10 = V1), ((begin (V28 = case V0 of {'Prelude.IO.MkHasIO', V20, V21} -> case V20 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> V25 end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V19) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))(('erlang':'apply'('erlang', 'put', [V10 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/integer-unsigned-native-unit:1>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (64 div 8)))), (<<Start:Loc/binary-unit:8, _:64/integer-unsigned-native-unit:1, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/integer-unsigned-native-unit:1, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end end end)) end end)) end end.
'un--setBits32'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(begin (V31 = V1), case V0 of {'Prelude.IO.MkHasIO', V32, V33} -> case V32 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((V38('erased'))(('erlang':'apply'('erlang', 'get', [V31 | []])))) end end end end))(fun (V9) -> begin (V10 = V1), ((begin (V28 = case V0 of {'Prelude.IO.MkHasIO', V20, V21} -> case V20 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> V25 end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V19) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))(('erlang':'apply'('erlang', 'put', [V10 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:32/integer-unsigned-native-unit:1>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (32 div 8)))), (<<Start:Loc/binary-unit:8, _:32/integer-unsigned-native-unit:1, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:32/integer-unsigned-native-unit:1, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end end end)) end end)) end end.
'un--setBits16'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(begin (V31 = V1), case V0 of {'Prelude.IO.MkHasIO', V32, V33} -> case V32 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((V38('erased'))(('erlang':'apply'('erlang', 'get', [V31 | []])))) end end end end))(fun (V9) -> begin (V10 = V1), ((begin (V28 = case V0 of {'Prelude.IO.MkHasIO', V20, V21} -> case V20 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> V25 end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V19) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))(('erlang':'apply'('erlang', 'put', [V10 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:16/integer-unsigned-native-unit:1>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (16 div 8)))), (<<Start:Loc/binary-unit:8, _:16/integer-unsigned-native-unit:1, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:16/integer-unsigned-native-unit:1, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end end end)) end end)) end end.
'un--resizeBuffer'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V17, V18} -> case V17 of {'Prelude.Interfaces.MkMonad', V19, V20, V21} -> ((((V20('erased'))('erased'))(begin (V44 = V1), case V0 of {'Prelude.IO.MkHasIO', V45, V46} -> case V45 of {'Prelude.Interfaces.MkMonad', V47, V48, V49} -> case V47 of {'Prelude.Interfaces.MkApplicative', V50, V51, V52} -> ((V51('erased'))(('erlang':'apply'('erlang', 'get', [V44 | []])))) end end end end))(fun (V22) -> begin (V23 = V1), ((begin (V41 = case V0 of {'Prelude.IO.MkHasIO', V33, V34} -> case V33 of {'Prelude.Interfaces.MkMonad', V35, V36, V37} -> case V35 of {'Prelude.Interfaces.MkApplicative', V38, V39, V40} -> V38 end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end(fun (V32) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V24, V25} -> case V24 of {'Prelude.Interfaces.MkMonad', V26, V27, V28} -> case V26 of {'Prelude.Interfaces.MkApplicative', V29, V30, V31} -> ((V30('erased'))(('erlang':'apply'('erlang', 'put', [V23 | [(fun ({Bin, BufSize}, NewSize) when ((erlang:'byte_size'(Bin)) =< NewSize) -> {Bin, NewSize}; ({Bin, BufSize}, NewSize) -> {('binary':'part'(Bin, 0, NewSize)), NewSize} end(V22, V2)) | []]])))) end end end)) end end)) end end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))({'Prelude.Types.Just', V1})) end end end end)) end end.
'un--rawSize'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(begin (V18 = V1), case V0 of {'Prelude.IO.MkHasIO', V19, V20} -> case V19 of {'Prelude.Interfaces.MkMonad', V21, V22, V23} -> case V21 of {'Prelude.Interfaces.MkApplicative', V24, V25, V26} -> ((V25('erased'))(('erlang':'apply'('erlang', 'get', [V18 | []])))) end end end end))(fun (V7) -> case V7 of {E0, E1} -> (fun (V8, V9) -> case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> case V12 of {'Prelude.Interfaces.MkApplicative', V15, V16, V17} -> ((V16('erased'))(V9)) end end end end(E0, E1)) end end)) end end.
'un--newBuffer'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V45, V46} -> case V45 of {'Prelude.Interfaces.MkMonad', V47, V48, V49} -> case V47 of {'Prelude.Interfaces.MkApplicative', V50, V51, V52} -> ((V51('erased'))(('erlang':'apply'('erlang', 'make_ref', [])))) end end end))(fun (V7) -> begin (V8 = {<<>>, V1}), begin (V9 = V7), case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> ((((V13('erased'))('erased'))(begin (V24 = V9), ((begin (V42 = case V0 of {'Prelude.IO.MkHasIO', V34, V35} -> case V34 of {'Prelude.Interfaces.MkMonad', V36, V37, V38} -> case V36 of {'Prelude.Interfaces.MkApplicative', V39, V40, V41} -> V39 end end end), fun (V43) -> fun (V44) -> ((((V42('erased'))('erased'))(V43))(V44)) end end end(fun (V33) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V25, V26} -> case V25 of {'Prelude.Interfaces.MkMonad', V27, V28, V29} -> case V27 of {'Prelude.Interfaces.MkApplicative', V30, V31, V32} -> ((V31('erased'))(('erlang':'apply'('erlang', 'put', [V24 | [V8 | []]])))) end end end)) end))(fun (V15) -> case V0 of {'Prelude.IO.MkHasIO', V16, V17} -> case V16 of {'Prelude.Interfaces.MkMonad', V18, V19, V20} -> case V18 of {'Prelude.Interfaces.MkApplicative', V21, V22, V23} -> ((V22('erased'))({'Prelude.Types.Just', V9})) end end end end)) end end end end end)) end end.
'un--getString'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(begin (V18 = V1), case V0 of {'Prelude.IO.MkHasIO', V19, V20} -> case V19 of {'Prelude.Interfaces.MkMonad', V21, V22, V23} -> case V21 of {'Prelude.Interfaces.MkApplicative', V24, V25, V26} -> ((V25('erased'))(('erlang':'apply'('erlang', 'get', [V18 | []])))) end end end end))(fun (V9) -> case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> case V12 of {'Prelude.Interfaces.MkApplicative', V15, V16, V17} -> ((V16('erased'))((fun ({Bin, BufSize}, Loc, Len) when ((Loc + Len) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary-unit:8, Value:Len/binary-unit:8, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc, Len) -> ('binary':'copy'(<<0/integer-unsigned-big>>, Len)) end(V9, V2, V3)))) end end end end)) end end.
'un--getInt32'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(begin (V17 = V1), case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> case V18 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> case V20 of {'Prelude.Interfaces.MkApplicative', V23, V24, V25} -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V17 | []])))) end end end end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (32 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary-unit:8, Value:32/integer-signed-native-unit:1, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end end end end)) end end.
'un--getInt'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(begin (V17 = V1), case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> case V18 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> case V20 of {'Prelude.Interfaces.MkApplicative', V23, V24, V25} -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V17 | []])))) end end end end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary-unit:8, Value:64/integer-signed-native-unit:1, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end end end end)) end end.
'un--getDouble'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(begin (V17 = V1), case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> case V18 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> case V20 of {'Prelude.Interfaces.MkApplicative', V23, V24, V25} -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V17 | []])))) end end end end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary-unit:8, Value:64/float-native-unit:1, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0.0 end(V8, V2)))) end end end end)) end end.
'un--getByte'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(begin (V17 = V1), case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> case V18 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> case V20 of {'Prelude.Interfaces.MkApplicative', V23, V24, V25} -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V17 | []])))) end end end end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (8 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary-unit:8, Value:8/integer-unsigned-native-unit:1, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end end end end)) end end.
'un--getBits8'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(begin (V17 = V1), case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> case V18 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> case V20 of {'Prelude.Interfaces.MkApplicative', V23, V24, V25} -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V17 | []])))) end end end end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (8 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary-unit:8, Value:8/integer-unsigned-native-unit:1, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end end end end)) end end.
'un--getBits64'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(begin (V17 = V1), case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> case V18 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> case V20 of {'Prelude.Interfaces.MkApplicative', V23, V24, V25} -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V17 | []])))) end end end end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary-unit:8, Value:64/integer-unsigned-native-unit:1, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end end end end)) end end.
'un--getBits32'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(begin (V17 = V1), case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> case V18 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> case V20 of {'Prelude.Interfaces.MkApplicative', V23, V24, V25} -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V17 | []])))) end end end end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (32 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary-unit:8, Value:32/integer-unsigned-native-unit:1, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end end end end)) end end.
'un--getBits16'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(begin (V17 = V1), case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> case V18 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> case V20 of {'Prelude.Interfaces.MkApplicative', V23, V24, V25} -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V17 | []])))) end end end end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (16 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary-unit:8, Value:16/integer-unsigned-native-unit:1, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end end end end)) end end.
'un--freeBuffer'(V0, V1) -> begin (V2 = V1), ((begin (V20 = case V0 of {'Prelude.IO.MkHasIO', V12, V13} -> case V12 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkApplicative', V17, V18, V19} -> V17 end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V11) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> case V5 of {'Prelude.Interfaces.MkApplicative', V8, V9, V10} -> ((V9('erased'))(('erlang':'apply'('erlang', 'erase', [V2 | []])))) end end end)) end.
'un--flatten'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(begin (V30 = V1), case V0 of {'Prelude.IO.MkHasIO', V31, V32} -> case V31 of {'Prelude.Interfaces.MkMonad', V33, V34, V35} -> case V33 of {'Prelude.Interfaces.MkApplicative', V36, V37, V38} -> ((V37('erased'))(('erlang':'apply'('erlang', 'get', [V30 | []])))) end end end end))(fun (V8) -> begin (V9 = V1), ((begin (V27 = case V0 of {'Prelude.IO.MkHasIO', V19, V20} -> case V19 of {'Prelude.Interfaces.MkMonad', V21, V22, V23} -> case V21 of {'Prelude.Interfaces.MkApplicative', V24, V25, V26} -> V24 end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V18) -> {'Builtin.MkUnit'} end))(case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> case V12 of {'Prelude.Interfaces.MkApplicative', V15, V16, V17} -> ((V16('erased'))(('erlang':'apply'('erlang', 'put', [V9 | [(fun ({Bin, BufSize}, MaxBytes) when ((erlang:'byte_size'(Bin)) =< MaxBytes) -> (Padding = ('binary':'copy'(<<0/integer-unsigned-big>>, (MaxBytes - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary>>, BufSize}; ({Bin, BufSize}, MaxBytes) -> {('binary':'part'(Bin, 0, BufSize)), BufSize} end(V8, V2)) | []]])))) end end end)) end end)) end end.
'un--createBufferFromFile'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> ((V15('erased'))(('erlang':'apply'('file', 'read_file', [V1 | []])))) end end end))(fun (V7) -> ('case--createBufferFromFile-6889'(V0, V1, V7, ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Erlang.Types.ETErlTerm'}, ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V8) -> ('Idris.Idris2.Erlang.Decode':'un--string'(V8)) end)), V7)))) end)) end end.
'un--copyData'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Prelude.IO.MkHasIO', V6, V7} -> case V6 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> ((((V9('erased'))('erased'))(('un--getString'(V0, V1, V2, V3))))(fun (V11) -> ('un--setString'(V0, V4, V5, V11)) end)) end end.
'un--bufferData'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(('un--rawSize'(V0, V1))))(fun (V7) -> ('nested--5050-6744--in--un--unpackTo'(V0, V1, [], V7)) end)) end end.
