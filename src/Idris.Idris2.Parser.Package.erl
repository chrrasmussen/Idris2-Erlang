-module('Idris.Idris2.Parser.Package').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--runParser'/3,
  'un--parseFile'/3
]).
'un--runParser'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('Idris.Idris2.Parser.Lexer.Package':'un--lex'(V1)) of {'Prelude.Types.Left', V3} -> {'Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromLexError'({'Core.FC.PhysicalPkgSrc', V0}, {'Builtin.MkPair', {'Libraries.Text.Lexer.Tokenizer.NoRuleApply'}, V3}))}; {'Prelude.Types.Right', V4} -> {'Prelude.Types.Right', V4} end, fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('Idris.Idris2.Libraries.Text.Parser.Core':'un--parse'(1, V2, V5)) of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromParsingErrors'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Parser.Lexer.Package':'dn--un--show_Show_Token'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Parser.Lexer.Package':'dn--un--show_Show_Token'(V9)) end end}, {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V10) -> ('Idris.Idris2.Parser.Lexer.Package':'dn--un--pretty_Pretty_Void_Token'(V10)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Parser.Lexer.Package':'dn--un--pretty_Pretty_Void_Token'(V12)) end end}}, {'Core.FC.PhysicalPkgSrc', V0}, V6))}; {'Prelude.Types.Right', V13} -> {'Prelude.Types.Right', V13} end, fun (V14) -> case V14 of {'Builtin.MkPair', V15, V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> {'Prelude.Types.Right', V17} end end end)) end)).
'un--parseFile'(V0, V1, V2) -> begin (V30 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V0))(V2))), case V30 of {'Prelude.Types.Right', V31} -> ('un--runParser'(V0, V31, V1)); {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', {'Core.Core.FileErr', V0, V32}} end end.
