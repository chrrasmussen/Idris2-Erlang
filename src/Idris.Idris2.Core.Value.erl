-module('Idris.Idris2.Core.Value').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--show_Show_(NHead $free)'/2,
  'dn--un--show_Show_(NF $free)'/2,
  'dn--un--show_Show_(Closure $free)'/1,
  'dn--un--showPrec_Show_(NHead $free)'/3,
  'dn--un--showPrec_Show_(NF $free)'/3,
  'dn--un--showPrec_Show_(Closure $free)'/2,
  'dn--un--resolved_HasNames_(NHead $free)'/2,
  'dn--un--resolved_HasNames_(NF $free)'/2,
  'dn--un--full_HasNames_(NHead $free)'/2,
  'dn--un--full_HasNames_(NF $free)'/2,
  'dn--un--__Impl_Show_(NHead $free)'/1,
  'dn--un--__Impl_Show_(NF $free)'/1,
  'dn--un--__Impl_HasNames_(NHead $free)'/0,
  'dn--un--__Impl_HasNames_(NF $free)'/0,
  'un--withHoles'/0,
  'un--withArgHoles'/0,
  'un--withAll'/0,
  'un--tcOnly'/0,
  'un--onLHS'/0,
  'un--ntCon'/5,
  'un--getLoc'/1,
  'un--defaultOpts'/0,
  'un--cbv'/0,
  'un--cbn'/0
]).
'dn--un--show_Show_(NHead $free)'(V0, V1) -> case V1 of {'Core.Value.NLocal', V2, V3} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Core.TT':'un--nameAt'(V0, V3))))/binary, <<<<"["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<"]"/utf8>>/binary>>/binary>>/binary>>; {'Core.Value.NRef', V4, V5} -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)); {'Core.Value.NMeta', V6, V7, V8} -> <<<<"?"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<"_["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V8))))/binary, <<" closures]"/utf8>>/binary>>/binary>>/binary>>/binary>> end.
'dn--un--show_Show_(NF $free)'(V0, V1) -> case V1 of {'Core.Value.NBind', V2, V3, V4, V5} -> case V4 of {'Core.TT.Lam', V6, V7, V8, V9} -> <<<<"\x{5c}"/utf8>>/binary, <<('Idris.Idris2.Core.TT':'un--withPiInfo'({'Prelude.Show.MkShow', fun (V10) -> ('dn--un--show_Show_(Closure $free)'(V10)) end, fun (V11) -> fun (V12) -> ('dn--un--showPrec_Show_(Closure $free)'(V11, V12)) end end}, V8, <<('Idris.Idris2.Algebra':'un--showCount'(V7))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary, <<<<" : "/utf8>>/binary, ('dn--un--show_Show_(Closure $free)'(V9))/binary>>/binary>>/binary>>))/binary, <<" => [closure]"/utf8>>/binary>>/binary>>; {'Core.TT.Let', V13, V14, V15, V16} -> <<<<"let "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V14))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary, <<<<" : "/utf8>>/binary, <<('dn--un--show_Show_(Closure $free)'(V16))/binary, <<<<" = "/utf8>>/binary, <<('dn--un--show_Show_(Closure $free)'(V15))/binary, <<" in [closure]"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.TT.Pi', V17, V18, V19, V20} -> <<('Idris.Idris2.Core.TT':'un--withPiInfo'({'Prelude.Show.MkShow', fun (V21) -> ('dn--un--show_Show_(Closure $free)'(V21)) end, fun (V22) -> fun (V23) -> ('dn--un--showPrec_Show_(Closure $free)'(V22, V23)) end end}, V19, <<('Idris.Idris2.Algebra':'un--showCount'(V18))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary, <<<<" : "/utf8>>/binary, ('dn--un--show_Show_(Closure $free)'(V20))/binary>>/binary>>/binary>>))/binary, <<" -> [closure]"/utf8>>/binary>>; {'Core.TT.PVar', V24, V25, V26, V27} -> <<('Idris.Idris2.Core.TT':'un--withPiInfo'({'Prelude.Show.MkShow', fun (V28) -> ('dn--un--show_Show_(Closure $free)'(V28)) end, fun (V29) -> fun (V30) -> ('dn--un--showPrec_Show_(Closure $free)'(V29, V30)) end end}, V26, <<<<"pat "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V25))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary, <<<<" : "/utf8>>/binary, ('dn--un--show_Show_(Closure $free)'(V27))/binary>>/binary>>/binary>>/binary>>))/binary, <<" => [closure]"/utf8>>/binary>>; {'Core.TT.PLet', V31, V32, V33, V34} -> <<<<"plet "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V32))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary, <<<<" : "/utf8>>/binary, <<('dn--un--show_Show_(Closure $free)'(V34))/binary, <<<<" = "/utf8>>/binary, <<('dn--un--show_Show_(Closure $free)'(V33))/binary, <<" in [closure]"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.TT.PVTy', V35, V36, V37} -> <<<<"pty "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V36))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary, <<<<" : "/utf8>>/binary, <<('dn--un--show_Show_(Closure $free)'(V37))/binary, <<" => [closure]"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Core.Value.NApp', V38, V39, V40} -> <<('dn--un--show_Show_(NHead $free)'(V0, V39))/binary, <<<<" ["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V40))))/binary, <<" closures]"/utf8>>/binary>>/binary>>/binary>>; {'Core.Value.NDCon', V41, V42, V43, V44, V45} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V42))/binary, <<<<" ["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V45))))/binary, <<" closures]"/utf8>>/binary>>/binary>>/binary>>; {'Core.Value.NTCon', V46, V47, V48, V49, V50} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V47))/binary, <<<<" ["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V50))))/binary, <<" closures]"/utf8>>/binary>>/binary>>/binary>>; {'Core.Value.NAs', V51, V52, V53, V54} -> <<('dn--un--show_Show_(NF $free)'(V0, V53))/binary, <<<<"@"/utf8>>/binary, ('dn--un--show_Show_(NF $free)'(V0, V54))/binary>>/binary>>; {'Core.Value.NDelayed', V55, V56, V57} -> <<<<"%Delayed "/utf8>>/binary, ('dn--un--show_Show_(NF $free)'(V0, V57))/binary>>; {'Core.Value.NDelay', V58, V59, V60, V61} -> <<"%Delay [closure]"/utf8>>; {'Core.Value.NForce', V62, V63, V64, V65} -> <<<<"%Force "/utf8>>/binary, <<('dn--un--show_Show_(NF $free)'(V0, V64))/binary, <<<<" ["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V65))))/binary, <<" closures]"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Core.Value.NPrimVal', V66, V67} -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V67)); {'Core.Value.NErased', V68, V69} -> <<"[__]"/utf8>>; {'Core.Value.NType', V70, V71} -> <<"Type"/utf8>> end.
'dn--un--show_Show_(Closure $free)'(V0) -> <<"[closure]"/utf8>>.
'dn--un--showPrec_Show_(NHead $free)'(V0, V1, V2) -> ('dn--un--show_Show_(NHead $free)'(V0, V2)).
'dn--un--showPrec_Show_(NF $free)'(V0, V1, V2) -> ('dn--un--show_Show_(NF $free)'(V0, V2)).
'dn--un--showPrec_Show_(Closure $free)'(V0, V1) -> ('dn--un--show_Show_(Closure $free)'(V1)).
'dn--un--resolved_HasNames_(NHead $free)'(V0, V1) -> case V1 of {'Core.Value.NRef', V2, V3} -> begin (V5 = fun (V4) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V3, V4)) end), ((begin (V21 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end((begin (V13 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> {'Prelude.Types.Right', (V9(V12))} end end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V6) -> {'Core.Value.NRef', V2, V6} end))))(V5)) end; _ -> fun (V24) -> {'Prelude.Types.Right', V1} end end.
'dn--un--resolved_HasNames_(NF $free)'(V0, V1) -> case V1 of {'Core.Value.NBind', V2, V3, V4, V5} -> fun (V6) -> {'Prelude.Types.Right', {'Core.Value.NBind', V2, V3, V4, V5}} end; {'Core.Value.NApp', V7, V8, V9} -> begin (V10 = ('dn--un--resolved_HasNames_(NHead $free)'(V0, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', {'Core.Value.NApp', V7, V14, V9}} end), V16 end(V11)) end end end end; {'Core.Value.NDCon', V17, V18, V19, V20, V21} -> begin (V23 = fun (V22) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V18, V22)) end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V29 = fun (V28) -> {'Prelude.Types.Right', {'Core.Value.NDCon', V17, V27, V19, V20, V21}} end), V29 end(V24)) end end end end; {'Core.Value.NTCon', V30, V31, V32, V33, V34} -> begin (V36 = fun (V35) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V31, V35)) end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V42 = fun (V41) -> {'Prelude.Types.Right', {'Core.Value.NTCon', V30, V40, V32, V33, V34}} end), V42 end(V37)) end end end end; {'Core.Value.NAs', V43, V44, V45, V46} -> begin (V47 = ('dn--un--resolved_HasNames_(NF $free)'(V0, V45))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V59 = begin (V52 = ('dn--un--resolved_HasNames_(NF $free)'(V0, V46))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V58 = fun (V57) -> {'Prelude.Types.Right', {'Core.Value.NAs', V43, V44, V51, V56}} end), V58 end(V53)) end end end end), V59 end(V48)) end end end end; {'Core.Value.NDelayed', V60, V61, V62} -> begin (V63 = ('dn--un--resolved_HasNames_(NF $free)'(V0, V62))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V69 = fun (V68) -> {'Prelude.Types.Right', {'Core.Value.NDelayed', V60, V61, V67}} end), V69 end(V64)) end end end end; {'Core.Value.NDelay', V70, V71, V72, V73} -> fun (V74) -> {'Prelude.Types.Right', {'Core.Value.NDelay', V70, V71, V72, V73}} end; {'Core.Value.NForce', V75, V76, V77, V78} -> begin (V79 = ('dn--un--resolved_HasNames_(NF $free)'(V0, V77))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V85 = fun (V84) -> {'Prelude.Types.Right', {'Core.Value.NForce', V75, V76, V83, V78}} end), V85 end(V80)) end end end end; {'Core.Value.NPrimVal', V86, V87} -> fun (V88) -> {'Prelude.Types.Right', {'Core.Value.NPrimVal', V86, V87}} end; {'Core.Value.NErased', V89, V90} -> fun (V91) -> {'Prelude.Types.Right', {'Core.Value.NErased', V89, V90}} end; {'Core.Value.NType', V92, V93} -> begin (V95 = fun (V94) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V93, V94)) end), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V101 = fun (V100) -> {'Prelude.Types.Right', {'Core.Value.NType', V92, V99}} end), V101 end(V96)) end end end end end.
'dn--un--full_HasNames_(NHead $free)'(V0, V1) -> case V1 of {'Core.Value.NRef', V2, V3} -> begin (V4 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V3))), ((begin (V20 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V12 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', (V8(V11))} end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V5) -> {'Core.Value.NRef', V2, V5} end))))(V4)) end; _ -> fun (V23) -> {'Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames_(NF $free)'(V0, V1) -> case V1 of {'Core.Value.NBind', V2, V3, V4, V5} -> fun (V6) -> {'Prelude.Types.Right', {'Core.Value.NBind', V2, V3, V4, V5}} end; {'Core.Value.NApp', V7, V8, V9} -> begin (V10 = ('dn--un--full_HasNames_(NHead $free)'(V0, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', {'Core.Value.NApp', V7, V14, V9}} end), V16 end(V11)) end end end end; {'Core.Value.NDCon', V17, V18, V19, V20, V21} -> begin (V22 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V18))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V28 = fun (V27) -> {'Prelude.Types.Right', {'Core.Value.NDCon', V17, V26, V19, V20, V21}} end), V28 end(V23)) end end end end; {'Core.Value.NTCon', V29, V30, V31, V32, V33} -> begin (V34 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V30))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V40 = fun (V39) -> {'Prelude.Types.Right', {'Core.Value.NTCon', V29, V38, V31, V32, V33}} end), V40 end(V35)) end end end end; {'Core.Value.NAs', V41, V42, V43, V44} -> begin (V45 = ('dn--un--full_HasNames_(NF $free)'(V0, V43))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V57 = begin (V50 = ('dn--un--full_HasNames_(NF $free)'(V0, V44))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V56 = fun (V55) -> {'Prelude.Types.Right', {'Core.Value.NAs', V41, V42, V49, V54}} end), V56 end(V51)) end end end end), V57 end(V46)) end end end end; {'Core.Value.NDelayed', V58, V59, V60} -> begin (V61 = ('dn--un--full_HasNames_(NF $free)'(V0, V60))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V67 = fun (V66) -> {'Prelude.Types.Right', {'Core.Value.NDelayed', V58, V59, V65}} end), V67 end(V62)) end end end end; {'Core.Value.NDelay', V68, V69, V70, V71} -> fun (V72) -> {'Prelude.Types.Right', {'Core.Value.NDelay', V68, V69, V70, V71}} end; {'Core.Value.NForce', V73, V74, V75, V76} -> begin (V77 = ('dn--un--full_HasNames_(NF $free)'(V0, V75))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V83 = fun (V82) -> {'Prelude.Types.Right', {'Core.Value.NForce', V73, V74, V81, V76}} end), V83 end(V78)) end end end end; {'Core.Value.NPrimVal', V84, V85} -> fun (V86) -> {'Prelude.Types.Right', {'Core.Value.NPrimVal', V84, V85}} end; {'Core.Value.NErased', V87, V88} -> fun (V89) -> {'Prelude.Types.Right', {'Core.Value.NErased', V87, V88}} end; {'Core.Value.NType', V90, V91} -> begin (V92 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V91))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V98 = fun (V97) -> {'Prelude.Types.Right', {'Core.Value.NType', V90, V96}} end), V98 end(V93)) end end end end end.
'dn--un--__Impl_Show_(NHead $free)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(NHead $free)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(NHead $free)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(NF $free)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(NF $free)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(NF $free)'(V0, V2, V3)) end end}.
'dn--un--__Impl_HasNames_(NHead $free)'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_(NHead $free)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_(NHead $free)'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_(NF $free)'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_(NF $free)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_(NF $free)'(V2, V3)) end end}.
'un--withHoles'() -> {'Core.Value.MkEvalOpts', 1, 1, 0, 0, 0, {'Prelude.Types.Nothing'}, [], 1}.
'un--withArgHoles'() -> {'Core.Value.MkEvalOpts', 0, 1, 0, 0, 0, {'Prelude.Types.Nothing'}, [], 1}.
'un--withAll'() -> {'Core.Value.MkEvalOpts', 0, 0, 1, 1, 0, {'Prelude.Types.Nothing'}, [], 1}.
'un--tcOnly'() -> case ('un--withArgHoles'()) of {'Core.Value.MkEvalOpts', V0, V1, V2, V3, V4, V5, V6, V7} -> {'Core.Value.MkEvalOpts', V0, V1, V2, V3, 1, V5, V6, V7} end.
'un--onLHS'() -> case ('un--defaultOpts'()) of {'Core.Value.MkEvalOpts', V0, V1, V2, V3, V4, V5, V6, V7} -> {'Core.Value.MkEvalOpts', V0, V1, 0, V3, V4, V5, V6, V7} end.
'un--ntCon'(V0, V1, V2, V3, V4) -> case V1 of {'Core.Name.UN', V5} -> case V5 of {'Core.Name.Basic', V6} -> case V6 of <<"Type"/utf8>> -> case V3 of 0 -> case V4 of [] -> {'Core.Value.NType', V0, {'Core.Name.MN', <<"top"/utf8>>, 0}}; _ -> case V3 of 0 -> case V4 of [] -> case ('Idris.Idris2.Core.TT':'un--isConstantType'(V1)) of {'Prelude.Types.Just', V7} -> {'Core.Value.NPrimVal', V0, {'Core.TT.PrT', V7}}; {'Prelude.Types.Nothing'} -> {'Core.Value.NTCon', V0, V1, V2, 0, []} end; _ -> {'Core.Value.NTCon', V0, V1, V2, V3, V4} end; _ -> {'Core.Value.NTCon', V0, V1, V2, V3, V4} end end; _ -> case V3 of 0 -> case V4 of [] -> case ('Idris.Idris2.Core.TT':'un--isConstantType'(V1)) of {'Prelude.Types.Just', V8} -> {'Core.Value.NPrimVal', V0, {'Core.TT.PrT', V8}}; {'Prelude.Types.Nothing'} -> {'Core.Value.NTCon', V0, V1, V2, 0, []} end; _ -> {'Core.Value.NTCon', V0, V1, V2, V3, V4} end; _ -> {'Core.Value.NTCon', V0, V1, V2, V3, V4} end end; _ -> case V3 of 0 -> case V4 of [] -> case ('Idris.Idris2.Core.TT':'un--isConstantType'(V1)) of {'Prelude.Types.Just', V9} -> {'Core.Value.NPrimVal', V0, {'Core.TT.PrT', V9}}; {'Prelude.Types.Nothing'} -> {'Core.Value.NTCon', V0, V1, V2, 0, []} end; _ -> {'Core.Value.NTCon', V0, V1, V2, V3, V4} end; _ -> {'Core.Value.NTCon', V0, V1, V2, V3, V4} end end; _ -> case V3 of 0 -> case V4 of [] -> case ('Idris.Idris2.Core.TT':'un--isConstantType'(V1)) of {'Prelude.Types.Just', V10} -> {'Core.Value.NPrimVal', V0, {'Core.TT.PrT', V10}}; {'Prelude.Types.Nothing'} -> {'Core.Value.NTCon', V0, V1, V2, 0, []} end; _ -> {'Core.Value.NTCon', V0, V1, V2, V3, V4} end; _ -> {'Core.Value.NTCon', V0, V1, V2, V3, V4} end end; _ -> case V3 of 0 -> case V4 of [] -> case ('Idris.Idris2.Core.TT':'un--isConstantType'(V1)) of {'Prelude.Types.Just', V11} -> {'Core.Value.NPrimVal', V0, {'Core.TT.PrT', V11}}; {'Prelude.Types.Nothing'} -> {'Core.Value.NTCon', V0, V1, V2, 0, []} end; _ -> {'Core.Value.NTCon', V0, V1, V2, V3, V4} end; _ -> {'Core.Value.NTCon', V0, V1, V2, V3, V4} end end.
'un--getLoc'(V0) -> case V0 of {'Core.Value.NBind', V1, V2, V3, V4} -> V1; {'Core.Value.NApp', V5, V6, V7} -> V5; {'Core.Value.NDCon', V8, V9, V10, V11, V12} -> V8; {'Core.Value.NTCon', V13, V14, V15, V16, V17} -> V13; {'Core.Value.NAs', V18, V19, V20, V21} -> V18; {'Core.Value.NDelayed', V22, V23, V24} -> V22; {'Core.Value.NDelay', V25, V26, V27, V28} -> V25; {'Core.Value.NForce', V29, V30, V31, V32} -> V29; {'Core.Value.NPrimVal', V33, V34} -> V33; {'Core.Value.NErased', V35, V36} -> V35; {'Core.Value.NType', V37, V38} -> V37 end.
'un--defaultOpts'() -> {'Core.Value.MkEvalOpts', 0, 0, 1, 0, 0, {'Prelude.Types.Nothing'}, [], 1}.
'un--cbv'() -> case ('un--defaultOpts'()) of {'Core.Value.MkEvalOpts', V0, V1, V2, V3, V4, V5, V6, V7} -> {'Core.Value.MkEvalOpts', V0, V1, V2, V3, V4, V5, V6, 0} end.
'un--cbn'() -> ('un--defaultOpts'()).
