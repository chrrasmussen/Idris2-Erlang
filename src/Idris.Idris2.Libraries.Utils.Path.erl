-module('Idris.Idris2.Libraries.Utils.Path').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--<.>-7949'/6,
  'case--case block in dropBase-7666'/7,
  'case--splitExtensions-7334'/2,
  'case--splitFileName-7254'/2,
  'case--splitParent\x{27}-7103'/2,
  'nested--6531-6993--in--un--splitRoot'/2,
  'nested--6531-6994--in--un--iterateBody'/3,
  'nested--6735-7187--in--un--findNormal'/2,
  'nested--7382-7792--in--un--filter'/3,
  'nested--7150-7594--in--un--dropBody'/4,
  'dn--un--tokValue_TokenKind_PathTokenKind'/2,
  'dn--un--show_Show_Volume'/1,
  'dn--un--show_Show_Path'/1,
  'dn--un--show_Show_Body'/1,
  'dn--un--showPrec_Show_Volume'/2,
  'dn--un--showPrec_Show_Path'/2,
  'dn--un--showPrec_Show_Body'/2,
  'dn--un--__Impl_Show_Volume'/0,
  'dn--un--__Impl_Show_Path'/0,
  'dn--un--__Impl_Show_Body'/0,
  'dn--un--__Impl_Eq_Volume'/0,
  'dn--un--__Impl_Eq_Path'/0,
  'dn--un--__Impl_Eq_Body'/0,
  'dn--un--TokType_TokenKind_PathTokenKind'/1,
  'dn--un--==_Eq_Volume'/2,
  'dn--un--==_Eq_PathTokenKind'/2,
  'dn--un--==_Eq_Path'/2,
  'dn--un--==_Eq_Body'/2,
  'dn--un--/=_Eq_Volume'/2,
  'dn--un--/=_Eq_PathTokenKind'/2,
  'dn--un--/=_Eq_Path'/2,
  'dn--un--/=_Eq_Body'/2,
  'un--verbatimUnc'/0,
  'un--verbatimDisk'/0,
  'un--verbatim'/0,
  'un--unc'/0,
  'un--splitPath\x{27}'/1,
  'un--splitPath'/1,
  'un--splitParent\x{27}'/1,
  'un--splitParent'/1,
  'un--splitFileName'/1,
  'un--splitExtensions'/1,
  'un--setFileName\x{27}'/2,
  'un--setFileName'/2,
  'un--pathTokenMap'/0,
  'un--pathSeparator'/0,
  'un--pathLookup'/2,
  'un--parseVolume'/0,
  'un--parsePath'/0,
  'un--parseBody'/0,
  'un--parse'/1,
  'un--parents'/1,
  'un--parent\x{27}'/1,
  'un--parent'/1,
  'un--lexPath'/1,
  'un--joinPath'/1,
  'un--isRelative'/1,
  'un--isBaseOf'/2,
  'un--isAbsolute\x{27}'/1,
  'un--isAbsolute'/1,
  'un--fileStem'/1,
  'un--fileName\x{27}'/1,
  'un--fileName'/1,
  'un--extensions'/1,
  'un--extension'/1,
  'un--emptyPath'/0,
  'un--dropExtension'/1,
  'un--dropBase'/2,
  'un--disk'/0,
  'un--dirSeparator'/0,
  'un--bodySeparator'/0,
  'un--append\x{27}'/2,
  'un--</>'/2,
  'un--<.>'/2,
  'un--/>'/2
]).
'case--<.>-7949'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Prelude.Types.Just', V6} -> case ('un--splitFileName'(V6)) of {'Builtin.MkPair', V7, V8} -> ('dn--un--show_Show_Path'(('un--setFileName\x{27}'(<<V7/binary, V4/binary>>, V2)))) end; {'Prelude.Types.Nothing'} -> V1 end.
'case--case block in dropBase-7666'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Libraries.Utils.Path.MkPath', V7, V8, V9, V10} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(case case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('dn--un--==_Eq_Volume'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('dn--un--/=_Eq_Volume'(V13, V14)) end end}, V5, V7)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V4, V8)); 0 -> 0 end of 1 -> {'Prelude.Types.Just', {'Builtin.MkUnit'}}; 0 -> {'Prelude.Types.Nothing'} end, fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7150-7594--in--un--dropBody'(V0, V1, V3, V9)), fun (V16) -> {'Prelude.Types.Just', ('dn--un--show_Show_Path'({'Libraries.Utils.Path.MkPath', {'Prelude.Types.Nothing'}, 0, V16, V10}))} end)) end)) end.
'case--splitExtensions-7334'(V0, V1) -> case V1 of {'Data.List1.:::', V2, V3} -> case V2 of <<""/utf8>> -> case V3 of [E0 | E1] -> (fun (V4, V5) -> {'Builtin.MkPair', <<<<"."/utf8>>/binary, V4/binary>>, V5} end(E0, E1)); _ -> {'Builtin.MkPair', V2, V3} end; _ -> {'Builtin.MkPair', V2, V3} end end.
'case--splitFileName-7254'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of [] -> {'Builtin.MkPair', V0, <<""/utf8>>}; [E0 | E1] -> (fun (V4, V5) -> case V4 of $. -> case V5 of [] -> {'Builtin.MkPair', V0, <<""/utf8>>}; _ -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V5)))), ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2))))} end; _ -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V5)))), ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2))))} end end(E0, E1)) end end.
'case--splitParent\x{27}-7103'(V0, V1) -> case V1 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> begin (V8 = case V0 of {'Libraries.Utils.Path.MkPath', V4, V5, V6, V7} -> {'Libraries.Utils.Path.MkPath', V4, V5, ('Idris.Idris2.Data.List':'un--init'([V2 | V3])), 0} end), begin (V13 = {'Libraries.Utils.Path.MkPath', {'Prelude.Types.Nothing'}, 0, [('Idris.Idris2.Data.List':'un--last'([V2 | V3])) | []], case V0 of {'Libraries.Utils.Path.MkPath', V9, V10, V11, V12} -> V12 end}), {'Prelude.Types.Just', {'Builtin.MkPair', V8, V13}} end end end(E0, E1)) end.
'nested--6531-6993--in--un--splitRoot'(V0, V1) -> case V1 of {'Libraries.Utils.Path.MkPath', V2, V3, V4, V5} -> case V2 of {'Prelude.Types.Nothing'} -> case V3 of 0 -> {'Builtin.MkPair', {'Prelude.Types.Nothing'}, V1}; _ -> {'Builtin.MkPair', {'Prelude.Types.Just', {'Libraries.Utils.Path.MkPath', V2, V3, [], 0}}, {'Libraries.Utils.Path.MkPath', {'Prelude.Types.Nothing'}, 0, V4, V5}} end; _ -> {'Builtin.MkPair', {'Prelude.Types.Just', {'Libraries.Utils.Path.MkPath', V2, V3, [], 0}}, {'Libraries.Utils.Path.MkPath', {'Prelude.Types.Nothing'}, 0, V4, V5}} end end.
'nested--6531-6994--in--un--iterateBody'(V0, V1, V2) -> case V1 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> [{'Libraries.Utils.Path.MkPath', {'Prelude.Types.Nothing'}, 0, [V3 | []], V2} | []]; [E2 | E3] -> (fun (V5, V6) -> [{'Libraries.Utils.Path.MkPath', {'Prelude.Types.Nothing'}, 0, [V3 | []], 0} | ('nested--6531-6994--in--un--iterateBody'(V0, [V5 | V6], V2))] end(E2, E3)) end end(E0, E1)) end.
'nested--6735-7187--in--un--findNormal'(V0, V1) -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Libraries.Utils.Path.Normal', V4} -> {'Prelude.Types.Just', V4}; {'Libraries.Utils.Path.CurDir'} -> ('nested--6735-7187--in--un--findNormal'(V0, V3)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end.
'nested--7382-7792--in--un--filter'(V0, V1, V2) -> case V2 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V3} -> ('Idris.Idris2.Data.Maybe':'un--toMaybe'((V1(V3)), fun () -> V3 end)) end.
'nested--7150-7594--in--un--dropBody'(V0, V1, V2, V3) -> case V2 of [] -> {'Prelude.Types.Just', V3}; _ -> case V3 of [] -> {'Prelude.Types.Nothing'}; _ -> case V2 of [E0 | E1] -> (fun (V4, V5) -> case V3 of [E2 | E3] -> (fun (V6, V7) -> case ('dn--un--==_Eq_Body'(V4, V6)) of 1 -> ('nested--7150-7594--in--un--dropBody'(V0, V1, V5, V7)); 0 -> {'Prelude.Types.Nothing'} end end(E2, E3)) end end(E0, E1)) end end end.
'dn--un--tokValue_TokenKind_PathTokenKind'(V0, V1) -> case V0 of {'Libraries.Utils.Path.PTText'} -> V1; {'Libraries.Utils.Path.PTPunct', V2} -> {'Builtin.MkUnit'} end.
'dn--un--show_Show_Volume'(V0) -> case V0 of {'Libraries.Utils.Path.UNC', V1, V2} -> <<<<"\x{5c}\x{5c}"/utf8>>/binary, <<V1/binary, <<<<"\x{5c}"/utf8>>/binary, V2/binary>>/binary>>/binary>>; {'Libraries.Utils.Path.Disk', V3} -> <<('Idris.Idris2.Data.String':'un--singleton'(V3))/binary, <<":"/utf8>>/binary>> end.
'dn--un--show_Show_Path'(V0) -> begin (V1 = ('Idris.Idris2.Data.String':'un--singleton'(('un--dirSeparator'())))), begin (V7 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V2) -> ('dn--un--show_Show_Volume'(V2)) end end, case V0 of {'Libraries.Utils.Path.MkPath', V3, V4, V5, V6} -> V3 end))), begin (V12 = case case V0 of {'Libraries.Utils.Path.MkPath', V8, V9, V10, V11} -> V9 end of 1 -> V1; 0 -> <<""/utf8>> end), begin (V51 = ('Idris.Idris2.Libraries.Data.String.Extra':'un--join'(V1, {'Prelude.Interfaces.MkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V28, V29, V30, V31)) end end end end end end end, fun (V32) -> fun (V33) -> V33 end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V36, V37, V38)) end end end end end}, ((begin (V48 = fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V46, V47)) end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end(fun (V43) -> ('dn--un--show_Show_Body'(V43)) end))(case V0 of {'Libraries.Utils.Path.MkPath', V39, V40, V41, V42} -> V41 end))))), begin (V56 = case case V0 of {'Libraries.Utils.Path.MkPath', V52, V53, V54, V55} -> V55 end of 1 -> V1; 0 -> <<""/utf8>> end), <<V7/binary, <<V12/binary, <<V51/binary, V56/binary>>/binary>>/binary>> end end end end end.
'dn--un--show_Show_Body'(V0) -> case V0 of {'Libraries.Utils.Path.CurDir'} -> <<"."/utf8>>; {'Libraries.Utils.Path.ParentDir'} -> <<".."/utf8>>; {'Libraries.Utils.Path.Normal', V1} -> V1 end.
'dn--un--showPrec_Show_Volume'(V0, V1) -> ('dn--un--show_Show_Volume'(V1)).
'dn--un--showPrec_Show_Path'(V0, V1) -> ('dn--un--show_Show_Path'(V1)).
'dn--un--showPrec_Show_Body'(V0, V1) -> ('dn--un--show_Show_Body'(V1)).
'dn--un--__Impl_Show_Volume'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Volume'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Volume'(V1, V2)) end end}.
'dn--un--__Impl_Show_Path'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Path'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Path'(V1, V2)) end end}.
'dn--un--__Impl_Show_Body'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Body'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Body'(V1, V2)) end end}.
'dn--un--__Impl_Eq_Volume'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Volume'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Volume'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Path'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Path'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Path'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Body'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Body'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Body'(V2, V3)) end end}.
'dn--un--TokType_TokenKind_PathTokenKind'(V0) -> case V0 of {'Libraries.Utils.Path.PTText'} -> {'.String'}; {'Libraries.Utils.Path.PTPunct', V1} -> {'Builtin.Unit'} end.
'dn--un--==_Eq_Volume'(V0, V1) -> case V0 of {'Libraries.Utils.Path.UNC', V2, V3} -> case V1 of {'Libraries.Utils.Path.UNC', V4, V5} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V4)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, V5)); 0 -> 0 end; _ -> 0 end; {'Libraries.Utils.Path.Disk', V6} -> case V1 of {'Libraries.Utils.Path.Disk', V7} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V6, V7)); _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_PathTokenKind'(V0, V1) -> case V0 of {'Libraries.Utils.Path.PTText'} -> case V1 of {'Libraries.Utils.Path.PTText'} -> 1; _ -> 0 end; {'Libraries.Utils.Path.PTPunct', V2} -> case V1 of {'Libraries.Utils.Path.PTPunct', V3} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, V3)); _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_Path'(V0, V1) -> case V0 of {'Libraries.Utils.Path.MkPath', V2, V3, V4, V5} -> case V1 of {'Libraries.Utils.Path.MkPath', V6, V7, V8, V9} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('dn--un--==_Eq_Volume'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un--/=_Eq_Volume'(V12, V13)) end end}, V2, V6)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V3, V7)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('dn--un--==_Eq_Body'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--/=_Eq_Body'(V16, V17)) end end}, V4, V8)); 0 -> 0 end; 0 -> 0 end end end.
'dn--un--==_Eq_Body'(V0, V1) -> case V0 of {'Libraries.Utils.Path.CurDir'} -> case V1 of {'Libraries.Utils.Path.CurDir'} -> 1; _ -> 0 end; {'Libraries.Utils.Path.ParentDir'} -> case V1 of {'Libraries.Utils.Path.ParentDir'} -> 1; _ -> 0 end; {'Libraries.Utils.Path.Normal', V2} -> case V1 of {'Libraries.Utils.Path.Normal', V3} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)); _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_Volume'(V0, V1) -> case ('dn--un--==_Eq_Volume'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_PathTokenKind'(V0, V1) -> case ('dn--un--==_Eq_PathTokenKind'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_Path'(V0, V1) -> case ('dn--un--==_Eq_Path'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_Body'(V0, V1) -> case ('dn--un--==_Eq_Body'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--verbatimUnc'() -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--verbatim'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PathTokenKind'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PathTokenKind'(V2, V3)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V4) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V4)) end, fun (V5) -> fun (V6) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V5, V6)) end end}}, {'Libraries.Utils.Path.PTText'})), fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--bodySeparator'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('dn--un--==_Eq_PathTokenKind'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--/=_Eq_PathTokenKind'(V10, V11)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V12) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V12)) end, fun (V13) -> fun (V14) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V13, V14)) end end}}, {'Libraries.Utils.Path.PTText'})), fun () -> fun (V15) -> {'Libraries.Text.Parser.Core.Empty', {'Libraries.Utils.Path.UNC', V7, V15}} end end} end} end end} end}.
'un--verbatimDisk'() -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--verbatim'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--disk'()), fun () -> fun (V0) -> {'Libraries.Text.Parser.Core.Empty', V0} end end} end}.
'un--verbatim'() -> case ('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'(2)) of {'Libraries.Text.Quantity.Qty', V0, V1} -> V0 end)) of 0 -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ((begin (V16 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'(2)) of {'Libraries.Text.Quantity.Qty', V14, V15} -> V14 end)), V12, V13)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V9) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Libraries.Text.Parser':'un--count'(('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'(2)), ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('dn--un--==_Eq_PathTokenKind'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('dn--un--/=_Eq_PathTokenKind'(V4, V5)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V6) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V6)) end, fun (V7) -> fun (V8) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V7, V8)) end end}}, {'Libraries.Utils.Path.PTPunct', $\x{5c}})))))), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('dn--un--==_Eq_PathTokenKind'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('dn--un--/=_Eq_PathTokenKind'(V21, V22)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V23) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V23)) end, fun (V24) -> fun (V25) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V24, V25)) end end}}, {'Libraries.Utils.Path.PTPunct', $?})), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V26) -> fun (V27) -> ('dn--un--==_Eq_PathTokenKind'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('dn--un--/=_Eq_PathTokenKind'(V28, V29)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V30) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V30)) end, fun (V31) -> fun (V32) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V31, V32)) end end}}, {'Libraries.Utils.Path.PTPunct', $\x{5c}})), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkUnit'}} end} end} end}; 1 -> {'Libraries.Text.Parser.Core.ThenEat', 1, ((begin (V47 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'(2)) of {'Libraries.Text.Quantity.Qty', V45, V46} -> V45 end)), V43, V44)) end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V40) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Libraries.Text.Parser':'un--count'(('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'(2)), ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> ('dn--un--==_Eq_PathTokenKind'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('dn--un--/=_Eq_PathTokenKind'(V35, V36)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V37) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V37)) end, fun (V38) -> fun (V39) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V38, V39)) end end}}, {'Libraries.Utils.Path.PTPunct', $\x{5c}})))))), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V50) -> fun (V51) -> ('dn--un--==_Eq_PathTokenKind'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('dn--un--/=_Eq_PathTokenKind'(V52, V53)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V54) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V54)) end, fun (V55) -> fun (V56) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V55, V56)) end end}}, {'Libraries.Utils.Path.PTPunct', $?})), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V57) -> fun (V58) -> ('dn--un--==_Eq_PathTokenKind'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('dn--un--/=_Eq_PathTokenKind'(V59, V60)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V61) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V61)) end, fun (V62) -> fun (V63) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V62, V63)) end end}}, {'Libraries.Utils.Path.PTPunct', $\x{5c}})), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkUnit'}} end} end} end} end.
'un--unc'() -> case ('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'(2)) of {'Libraries.Text.Quantity.Qty', V0, V1} -> V0 end)) of 0 -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ((begin (V16 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'(2)) of {'Libraries.Text.Quantity.Qty', V14, V15} -> V14 end)), V12, V13)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V9) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Libraries.Text.Parser':'un--count'(('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'(2)), ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('dn--un--==_Eq_PathTokenKind'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('dn--un--/=_Eq_PathTokenKind'(V4, V5)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V6) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V6)) end, fun (V7) -> fun (V8) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V7, V8)) end end}}, {'Libraries.Utils.Path.PTPunct', $\x{5c}})))))), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('dn--un--==_Eq_PathTokenKind'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('dn--un--/=_Eq_PathTokenKind'(V21, V22)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V23) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V23)) end, fun (V24) -> fun (V25) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V24, V25)) end end}}, {'Libraries.Utils.Path.PTText'})), fun () -> fun (V26) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--bodySeparator'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V27) -> fun (V28) -> ('dn--un--==_Eq_PathTokenKind'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('dn--un--/=_Eq_PathTokenKind'(V29, V30)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V31) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V31)) end, fun (V32) -> fun (V33) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V32, V33)) end end}}, {'Libraries.Utils.Path.PTText'})), fun () -> fun (V34) -> {'Libraries.Text.Parser.Core.Empty', {'Libraries.Utils.Path.UNC', V26, V34}} end end} end} end end} end}; 1 -> {'Libraries.Text.Parser.Core.ThenEat', 1, ((begin (V49 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'(2)) of {'Libraries.Text.Quantity.Qty', V47, V48} -> V47 end)), V45, V46)) end end end end), fun (V50) -> fun (V51) -> ((((V49('erased'))('erased'))(V50))(V51)) end end end(fun (V42) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Libraries.Text.Parser':'un--count'(('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'(2)), ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> ('dn--un--==_Eq_PathTokenKind'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('dn--un--/=_Eq_PathTokenKind'(V37, V38)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V39) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V39)) end, fun (V40) -> fun (V41) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V40, V41)) end end}}, {'Libraries.Utils.Path.PTPunct', $\x{5c}})))))), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V52) -> fun (V53) -> ('dn--un--==_Eq_PathTokenKind'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('dn--un--/=_Eq_PathTokenKind'(V54, V55)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V56) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V56)) end, fun (V57) -> fun (V58) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V57, V58)) end end}}, {'Libraries.Utils.Path.PTText'})), fun () -> fun (V59) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('un--bodySeparator'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V60) -> fun (V61) -> ('dn--un--==_Eq_PathTokenKind'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('dn--un--/=_Eq_PathTokenKind'(V62, V63)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V64) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V64)) end, fun (V65) -> fun (V66) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V65, V66)) end end}}, {'Libraries.Utils.Path.PTText'})), fun () -> fun (V67) -> {'Libraries.Text.Parser.Core.Empty', {'Libraries.Utils.Path.UNC', V59, V67}} end end} end} end end} end} end.
'un--splitPath\x{27}'(V0) -> case ('nested--6531-6993--in--un--splitRoot'(V0, V0)) of {'Builtin.MkPair', V1, V2} -> case V1 of {'Prelude.Types.Just', V3} -> [V3 | ('nested--6531-6994--in--un--iterateBody'(V0, case V0 of {'Libraries.Utils.Path.MkPath', V4, V5, V6, V7} -> V6 end, case V0 of {'Libraries.Utils.Path.MkPath', V8, V9, V10, V11} -> V11 end))]; {'Prelude.Types.Nothing'} -> ('nested--6531-6994--in--un--iterateBody'(V0, case V0 of {'Libraries.Utils.Path.MkPath', V12, V13, V14, V15} -> V14 end, case V0 of {'Libraries.Utils.Path.MkPath', V16, V17, V18, V19} -> V19 end)) end end.
'un--splitPath'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('dn--un--show_Show_Path'(V1)) end))(('un--splitPath\x{27}'(('un--parse'(V0)))))).
'un--splitParent\x{27}'(V0) -> ('case--splitParent\x{27}-7103'(V0, case V0 of {'Libraries.Utils.Path.MkPath', V1, V2, V3, V4} -> V3 end)).
'un--splitParent'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--splitParent\x{27}'(('un--parse'(V0)))), fun (V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> {'Prelude.Types.Just', {'Builtin.MkPair', ('dn--un--show_Show_Path'(V2)), ('dn--un--show_Show_Path'(V3))}} end end)).
'un--splitFileName'(V0) -> ('case--splitFileName-7254'(V0, ('Idris.Idris2.Data.List':'un--break'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $.)) end, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))))).
'un--splitExtensions'(V0) -> ('case--splitExtensions-7334'(V0, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V1)) end, ('Idris.Idris2.Data.List':'un--split'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, $.)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))))).
'un--setFileName\x{27}'(V0, V1) -> case ('Idris.Idris2.Data.Maybe':'un--isJust'(('un--fileName\x{27}'(V1)))) of 1 -> ('un--append\x{27}'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('un--emptyPath'()) end, ('un--parent\x{27}'(V1)))), ('un--parse'(V0)))); 0 -> ('un--append\x{27}'(V1, ('un--parse'(V0)))) end.
'un--setFileName'(V0, V1) -> ('dn--un--show_Show_Path'(('un--setFileName\x{27}'(V0, ('un--parse'(V1)))))).
'un--pathTokenMap'() -> (('Idris.Idris2.Libraries.Text.Lexer':'un--toTokenMap'())([{'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($/)), {'Libraries.Utils.Path.PTPunct', $/}} | [{'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{5c})), {'Libraries.Utils.Path.PTPunct', $\x{5c}}} | [{'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($:)), {'Libraries.Utils.Path.PTPunct', $:}} | [{'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($?)), {'Libraries.Utils.Path.PTPunct', $?}} | [{'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer':'un--non'(('Idris.Idris2.Libraries.Text.Lexer':'un--oneOf'(<<"/\x{5c}:?"/utf8>>)))))), {'Libraries.Utils.Path.PTText'}} | []]]]]])).
'un--pathSeparator'() -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> $;; 0 -> $: end.
'un--pathLookup'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, <<"PATH"/utf8>>))(V1))), begin (V45 = case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> [(begin (V31 = fun (V30) -> V30 end), fun (V32) -> (V31(V32)) end end(<<".exe"/utf8>>)) | [(begin (V34 = fun (V33) -> V33 end), fun (V35) -> (V34(V35)) end end(<<".cmd"/utf8>>)) | [(begin (V37 = fun (V36) -> V36 end), fun (V38) -> (V37(V38)) end end(<<".bat"/utf8>>)) | [(begin (V40 = fun (V39) -> V39 end), fun (V41) -> (V40(V41)) end end(<<""/utf8>>)) | []]]]]; 0 -> [(begin (V43 = fun (V42) -> V42 end), fun (V44) -> (V43(V44)) end end(<<""/utf8>>)) | []] end), begin (V47 = ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Data.String':'un--split'(fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V46, ('un--pathSeparator'()))) end, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<"/usr/bin:/usr/local/bin"/utf8>> end, V29))))))), begin (V51 = ('Idris.Idris2.Prelude.Types':'un--listBind'(V47, fun (V48) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V0, fun (V49) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V45, fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(<<V48/binary, <<<<"/"/utf8>>/binary, <<V49/binary, V50/binary>>/binary>>/binary>>)) end)) end)) end))), (('Idris.Idris2.Erlang.System.File':'un--firstExists'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V54, V55, V56)) end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> V58 end end end, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V62(V64))), begin (V66 = (V63(V64))), (V65(V66)) end end end end end end end}, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V69(V71))), ((V70(V72))(V71)) end end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V74(V75))), (V76(V75)) end end end end}, fun (V77) -> fun (V78) -> V78 end end}, V51))(V1)) end end end end.
'un--parseVolume'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--verbatimUnc'()), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--verbatimDisk'()), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--unc'()), fun () -> ('un--disk'()) end} end} end}.
'un--parsePath'() -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('un--parseVolume'()))), fun (V0) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('Idris.Idris2.Libraries.Text.Parser':'un--some'(('un--bodySeparator'()))))), fun (V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('Idris.Idris2.Libraries.Text.Parser':'un--some'(('un--bodySeparator'()))), ('un--parseBody'()))), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('Idris.Idris2.Libraries.Text.Parser':'un--some'(('un--bodySeparator'()))))), fun (V3) -> begin (V9 = ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V4) -> case V4 of {'Libraries.Utils.Path.Normal', V5} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(('Idris.Idris2.Data.String':'un--ltrim'(V5)), (begin (V7 = fun (V6) -> V6 end), fun (V8) -> (V7(V8)) end end(<<""/utf8>>)))); _ -> 1 end end, V2))), begin (V16 = case V9 of [] -> []; [E0 | E1] -> (fun (V10, V11) -> [V10 | ('Idris.Idris2.Data.List':'un--delete'({'Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('dn--un--==_Eq_Body'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--/=_Eq_Body'(V14, V15)) end end}, {'Libraries.Utils.Path.CurDir'}, V11))] end(E0, E1)) end), {'Libraries.Text.Parser.Core.Empty', {'Libraries.Utils.Path.MkPath', V0, ('Idris.Idris2.Data.Maybe':'un--isJust'(V1)), V16, ('Idris.Idris2.Data.Maybe':'un--isJust'(V3))}} end end end} end} end} end}.
'un--parseBody'() -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PathTokenKind'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PathTokenKind'(V2, V3)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V4) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V4)) end, fun (V5) -> fun (V6) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V5, V6)) end end}}, {'Libraries.Utils.Path.PTText'})), fun () -> fun (V7) -> case V7 of <<".."/utf8>> -> {'Libraries.Text.Parser.Core.Empty', {'Libraries.Utils.Path.ParentDir'}}; <<"."/utf8>> -> {'Libraries.Text.Parser.Core.Empty', {'Libraries.Utils.Path.CurDir'}}; _ -> {'Libraries.Text.Parser.Core.Empty', {'Libraries.Utils.Path.Normal', V7}} end end end}.
'un--parse'(V0) -> case ('Idris.Idris2.Libraries.Text.Parser.Core':'un--parse'(0, ('un--parsePath'()), ('un--lexPath'(V0)))) of {'Prelude.Types.Right', V1} -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> V4; _ -> ('un--emptyPath'()) end; _ -> ('un--emptyPath'()) end; _ -> ('un--emptyPath'()) end.
'un--parents'(V0) -> ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('dn--un--show_Show_Path'(V2)) end))(('Idris.Idris2.Data.List':'un--iterate'(fun (V1) -> ('un--parent\x{27}'(V1)) end, ('un--parse'(V0)))))).
'un--parent\x{27}'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Builtin':'un--fst'(V1)) end))(('un--splitParent\x{27}'(V0)))).
'un--parent'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('dn--un--show_Show_Path'(V1)) end))(('un--parent\x{27}'(('un--parse'(V0)))))).
'un--lexPath'(V0) -> case ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--lex'(('un--pathTokenMap'()), V0)) of {'Builtin.MkPair', V1, V2} -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> V1 end end end.
'un--joinPath'(V0) -> ('dn--un--show_Show_Path'(('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V1) -> fun (V2) -> ('un--/>'(V1, V2)) end end, ('un--parse'(<<""/utf8>>)), V0)))).
'un--isRelative'(V0) -> case ('un--isAbsolute'(V0)) of 1 -> 0; 0 -> 1 end.
'un--isBaseOf'(V0, V1) -> case ('un--parse'(V0)) of {'Libraries.Utils.Path.MkPath', V2, V3, V4, V5} -> case ('un--parse'(V1)) of {'Libraries.Utils.Path.MkPath', V6, V7, V8, V9} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('dn--un--==_Eq_Volume'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un--/=_Eq_Volume'(V12, V13)) end end}, V2, V6)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V3, V7)) of 1 -> ('Idris.Idris2.Data.List':'un--isPrefixOf'({'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('dn--un--==_Eq_Body'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--/=_Eq_Body'(V16, V17)) end end}, V4, V8)); 0 -> 0 end; 0 -> 0 end end end.
'un--isAbsolute\x{27}'(V0) -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> case V0 of {'Libraries.Utils.Path.MkPath', V1, V2, V3, V4} -> case V1 of {'Prelude.Types.Just', V5} -> case V5 of {'Libraries.Utils.Path.UNC', V6, V7} -> 1; {'Libraries.Utils.Path.Disk', V8} -> case V0 of {'Libraries.Utils.Path.MkPath', V9, V10, V11, V12} -> V10 end end; {'Prelude.Types.Nothing'} -> 0 end end; 0 -> case V0 of {'Libraries.Utils.Path.MkPath', V13, V14, V15, V16} -> V14 end end.
'un--isAbsolute'(V0) -> ('un--isAbsolute\x{27}'(('un--parse'(V0)))).
'un--fileStem'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--fileName'(V0)), fun (V1) -> {'Prelude.Types.Just', ('Idris.Idris2.Builtin':'un--fst'(('un--splitFileName'(V1))))} end)).
'un--fileName\x{27}'(V0) -> ('nested--6735-7187--in--un--findNormal'(V0, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(case V0 of {'Libraries.Utils.Path.MkPath', V1, V2, V3, V4} -> V3 end)))).
'un--fileName'(V0) -> ('un--fileName\x{27}'(('un--parse'(V0)))).
'un--extensions'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Builtin':'un--snd'(('un--splitExtensions'(V1)))) end))(('un--fileName'(V0)))).
'un--extension'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--fileName'(V0)), fun (V1) -> ('nested--7382-7792--in--un--filter'(V0, fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V2, <<""/utf8>>)) end, {'Prelude.Types.Just', ('Idris.Idris2.Builtin':'un--snd'(('un--splitFileName'(V1))))})) end)).
'un--emptyPath'() -> {'Libraries.Utils.Path.MkPath', {'Prelude.Types.Nothing'}, 0, [], 0}.
'un--dropExtension'(V0) -> ('un--<.>'(V0, <<""/utf8>>)).
'un--dropBase'(V0, V1) -> case ('un--parse'(V0)) of {'Libraries.Utils.Path.MkPath', V2, V3, V4, V5} -> ('case--case block in dropBase-7666'(V1, V0, V5, V4, V3, V2, ('un--parse'(V1)))) end.
'un--disk'() -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PathTokenKind'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PathTokenKind'(V2, V3)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V4) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V4)) end, fun (V5) -> fun (V6) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V5, V6)) end end}}, {'Libraries.Utils.Path.PTText'})), fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, case ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V7)) of [E0 | E1] -> (fun (V8, V9) -> {'Libraries.Text.Parser.Core.Empty', V8} end(E0, E1)); [] -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Expects disk"/utf8>>} end, fun (V10) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('dn--un--==_Eq_PathTokenKind'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('dn--un--/=_Eq_PathTokenKind'(V13, V14)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V15) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V15)) end, fun (V16) -> fun (V17) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V16, V17)) end end}}, {'Libraries.Utils.Path.PTPunct', $:})), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Libraries.Utils.Path.Disk', ('Idris.Idris2.Prelude.Types':'un--toUpper'(V10))}} end} end} end end}.
'un--dirSeparator'() -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> $\x{5c}; 0 -> $/ end.
'un--bodySeparator'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PathTokenKind'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PathTokenKind'(V2, V3)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V4) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V4)) end, fun (V5) -> fun (V6) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V5, V6)) end end}}, {'Libraries.Utils.Path.PTPunct', $\x{5c}})), fun () -> ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Builtin.MkPair', {'Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('dn--un--==_Eq_PathTokenKind'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--/=_Eq_PathTokenKind'(V9, V10)) end end}, {'Libraries.Text.Token.dn--un--__mkTokenKind', fun (V11) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V11)) end, fun (V12) -> fun (V13) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V12, V13)) end end}}, {'Libraries.Utils.Path.PTPunct', $/})) end}.
'un--append\x{27}'(V0, V1) -> case case ('un--isAbsolute\x{27}'(V1)) of 1 -> 1; 0 -> ('Idris.Idris2.Data.Maybe':'un--isJust'(case V1 of {'Libraries.Utils.Path.MkPath', V2, V3, V4, V5} -> V2 end)) end of 1 -> V1; 0 -> case case V1 of {'Libraries.Utils.Path.MkPath', V6, V7, V8, V9} -> V7 end of 1 -> case V1 of {'Libraries.Utils.Path.MkPath', V10, V11, V12, V13} -> {'Libraries.Utils.Path.MkPath', case V0 of {'Libraries.Utils.Path.MkPath', V14, V15, V16, V17} -> V14 end, V11, V12, V13} end; 0 -> case V0 of {'Libraries.Utils.Path.MkPath', V18, V19, V20, V21} -> {'Libraries.Utils.Path.MkPath', V18, V19, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V0 of {'Libraries.Utils.Path.MkPath', V22, V23, V24, V25} -> V24 end, case V1 of {'Libraries.Utils.Path.MkPath', V26, V27, V28, V29} -> V28 end)), case V1 of {'Libraries.Utils.Path.MkPath', V30, V31, V32, V33} -> V33 end} end end end.
'un--</>'(V0, V1) -> ('dn--un--show_Show_Path'(('un--/>'(('un--parse'(V0)), V1)))).
'un--<.>'(V0, V1) -> begin (V2 = ('un--parse'(V0))), begin (V4 = ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--dropWhile'(fun (V3) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V3, $.)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V3)) end end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1))))))), begin (V8 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, <<""/utf8>>)) of 1 -> (begin (V6 = fun (V5) -> V5 end), fun (V7) -> (V6(V7)) end end(<<""/utf8>>)); 0 -> <<<<"."/utf8>>/binary, V4/binary>> end), ('case--<.>-7949'(V1, V0, V2, V4, V8, ('un--fileName\x{27}'(V2)))) end end end.
'un--/>'(V0, V1) -> ('un--append\x{27}'(V0, ('un--parse'(V1)))).
