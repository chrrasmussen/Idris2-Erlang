-module('Idris.Idris2.Idris.Syntax').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--13202-5012--in--un--showCase'/6,
  'nested--15785-7106--in--un--insertAll'/5,
  'nested--15770-7056--in--un--insertAll'/5,
  'nested--16062-7288--in--un--initSaveDocStrings'/0,
  'nested--16062-7286--in--un--initPrefix'/0,
  'nested--16062-7285--in--un--initInfix'/0,
  'nested--16062-7287--in--un--initDocStrings'/0,
  'nested--12013-3468--in--un--getName'/6,
  'nested--13202-5758--in--un--dePure'/6,
  'nested--13202-5759--in--un--deGuard'/6,
  'dn--un--show_Show_REPLOpt'/1,
  'dn--un--show_Show_REPLEval'/1,
  'dn--un--show_Show_PTypeDecl'/1,
  'dn--un--show_Show_PTerm'/1,
  'dn--un--show_Show_PDecl'/1,
  'dn--un--show_Show_PClause'/1,
  'dn--un--show_Show_Method'/1,
  'dn--un--show_Show_Import'/1,
  'dn--un--show_Show_IPTerm'/1,
  'dn--un--show_Show_Fixity'/1,
  'dn--un--showPrec_Show_REPLOpt'/2,
  'dn--un--showPrec_Show_REPLEval'/2,
  'dn--un--showPrec_Show_PTypeDecl'/2,
  'dn--un--showPrec_Show_PTerm'/2,
  'dn--un--showPrec_Show_PDecl'/2,
  'dn--un--showPrec_Show_PClause'/2,
  'dn--un--showPrec_Show_Method'/2,
  'dn--un--showPrec_Show_Import'/2,
  'dn--un--showPrec_Show_IPTerm'/2,
  'dn--un--showPrec_Show_Fixity'/2,
  'dn--un--resolved_HasNames_SyntaxInfo'/2,
  'dn--un--resolved_HasNames_IFaceInfo'/3,
  'dn--un--resolved_HasNames_(ANameMap $a)'/3,
  'dn--un--pretty_Pretty_Void_REPLOpt'/1,
  'dn--un--pretty_Pretty_Void_REPLEval'/1,
  'dn--un--prettyPrec_Pretty_Void_REPLOpt'/2,
  'dn--un--prettyPrec_Pretty_Void_REPLEval'/2,
  'dn--un--full_HasNames_SyntaxInfo'/2,
  'dn--un--full_HasNames_IFaceInfo'/3,
  'dn--un--full_HasNames_(ANameMap $a)'/3,
  'dn--un--__Impl_Show_REPLOpt'/0,
  'dn--un--__Impl_Show_REPLEval'/0,
  'dn--un--__Impl_Show_PTypeDecl'/0,
  'dn--un--__Impl_Show_PTerm'/0,
  'dn--un--__Impl_Show_PDecl'/0,
  'dn--un--__Impl_Show_PClause'/0,
  'dn--un--__Impl_Show_Method'/0,
  'dn--un--__Impl_Show_Import'/0,
  'dn--un--__Impl_Show_IPTerm'/0,
  'dn--un--__Impl_Show_Fixity'/0,
  'dn--un--__Impl_Pretty_Void_REPLOpt'/0,
  'dn--un--__Impl_Pretty_Void_REPLEval'/0,
  'dn--un--__Impl_HasNames_SyntaxInfo'/0,
  'dn--un--__Impl_Eq_Pass'/0,
  'dn--un--==_Eq_Pass'/2,
  'dn--un--/=_Eq_Pass'/2,
  'un--withSyn'/2,
  'un--typePass'/1,
  'un--showUpdate'/2,
  'un--showPTermPrec'/3,
  'un--showPTerm'/2,
  'un--showPStr'/2,
  'un--showOpPrec'/3,
  'un--showDo'/2,
  'un--showAlt'/2,
  'un--papply'/3,
  'un--isStrLiteral'/1,
  'un--isStrInterp'/1,
  'un--isPDef'/1,
  'un--initSyntax'/0,
  'un--getPTypeDeclLoc'/1,
  'un--getPTermLoc'/1,
  'un--getPDeclLoc'/1,
  'un--getPDataDeclLoc'/1,
  'un--getPClauseLoc'/1,
  'un--getLoc'/1,
  'un--definedInData'/1,
  'un--definedIn'/1,
  'un--defPass'/1,
  'un--applyArgs'/2,
  'un--addModDocInfo'/4,
  'un--PWithProblem'/0,
  'un--PTypeDecl'/0,
  'un--PTerm'/0,
  'un--PStr'/0,
  'un--PFnOpt'/0,
  'un--PFieldUpdate'/0,
  'un--PField'/0,
  'un--PDo'/0,
  'un--PDecl'/0,
  'un--PDataDecl'/0,
  'un--PClause'/0,
  'un--OpStr\x{27}'/1,
  'un--OpStr'/0,
  'un--IPTerm'/0
]).
'nested--13202-5012--in--un--showCase'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Syntax.MkPatClause', V6, V7, V8, V9} -> <<('un--showPTerm'(V0, V7))/binary, <<<<" => "/utf8>>/binary, ('un--showPTerm'(V0, V8))/binary>>/binary>>; {'Idris.Syntax.MkWithClause', V10, V11, V12, V13, V14} -> <<" | <<with alts not possible>>"/utf8>>; {'Idris.Syntax.MkImpossible', V15, V16} -> <<('un--showPTerm'(V0, V16))/binary, <<" impossible"/utf8>>/binary>> end.
'nested--15785-7106--in--un--insertAll'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', V3} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Builtin.MkPair', V8, V9} -> begin (V11 = fun (V10) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V2, V8, V10)) end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V24 = begin (V18 = case V0 of {'Core.Context.dn--un--__mkHasNames', V16, V17} -> ((V17(V2))(V9)) end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V23 = ('nested--15785-7106--in--un--insertAll'(V0, V1, V2, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'(V15, V22, V3)), V7))), V23 end(V19)) end end end end), V24 end(V12)) end end end end end end(E0, E1)) end.
'nested--15770-7056--in--un--insertAll'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', V3} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Builtin.MkPair', V8, V9} -> begin (V10 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V2, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V23 = begin (V17 = case V0 of {'Core.Context.dn--un--__mkHasNames', V15, V16} -> ((V15(V2))(V9)) end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V22 = ('nested--15770-7056--in--un--insertAll'(V0, V1, V2, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'(V14, V21, V3)), V7))), V22 end(V18)) end end end end), V23 end(V11)) end end end end end end(E0, E1)) end.
'nested--16062-7288--in--un--initSaveDocStrings'() -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()).
'nested--16062-7286--in--un--initPrefix'() -> ('Idris.Idris2.Libraries.Data.StringMap':'un--fromList'([{'Builtin.MkPair', <<"-"/utf8>>, {'Builtin.MkPair', {'Core.FC.EmptyFC'}, 10}} | [{'Builtin.MkPair', <<"negate"/utf8>>, {'Builtin.MkPair', {'Core.FC.EmptyFC'}, 10}} | []]])).
'nested--16062-7285--in--un--initInfix'() -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(<<"="/utf8>>, {'Builtin.MkPair', {'Core.FC.EmptyFC'}, {'Builtin.MkPair', 2, 0}}, ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'()))).
'nested--16062-7287--in--un--initDocStrings'() -> ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'()).
'nested--12013-3468--in--un--getName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Syntax.MkPTy', V6, V7, V8, V9, V10} -> V8 end.
'nested--13202-5758--in--un--dePure'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Syntax.PApp', V6, V7, V8} -> case V7 of {'Idris.Syntax.PRef', V9, V10} -> begin (V11 = {'Idris.Syntax.PApp', V6, {'Idris.Syntax.PRef', V9, V10}, V8}), case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'((V0(V10)))), {'Core.Name.UN', {'Core.Name.Basic', <<"pure"/utf8>>}})) of 1 -> V8; 0 -> V11 end end; _ -> V5 end; _ -> V5 end.
'nested--13202-5759--in--un--deGuard'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Syntax.DoExp', V6, V7} -> case V7 of {'Idris.Syntax.PApp', V8, V9, V10} -> case V9 of {'Idris.Syntax.PRef', V11, V12} -> begin (V13 = {'Idris.Syntax.DoExp', V6, {'Idris.Syntax.PApp', V8, {'Idris.Syntax.PRef', V11, V12}, V10}}), case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'((V0(V12)))), {'Core.Name.UN', {'Core.Name.Basic', <<"guard"/utf8>>}})) of 1 -> {'Idris.Syntax.DoExp', V6, V10}; 0 -> V13 end end; _ -> V5 end; _ -> V5 end; _ -> V5 end.
'dn--un--show_Show_REPLOpt'(V0) -> case V0 of {'Idris.Syntax.ShowImplicits', V1} -> <<<<"showimplicits = "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V1))/binary>>; {'Idris.Syntax.ShowNamespace', V2} -> <<<<"shownamespace = "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V2))/binary>>; {'Idris.Syntax.ShowMachineNames', V3} -> <<<<"showmachinenames = "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V3))/binary>>; {'Idris.Syntax.ShowTypes', V4} -> <<<<"showtypes = "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V4))/binary>>; {'Idris.Syntax.EvalMode', V5} -> <<<<"eval = "/utf8>>/binary, ('dn--un--show_Show_REPLEval'(V5))/binary>>; {'Idris.Syntax.Editor', V6} -> <<<<"editor = "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V6))/binary>>; {'Idris.Syntax.CG', V7} -> <<<<"cg = "/utf8>>/binary, V7/binary>>; {'Idris.Syntax.Profile', V8} -> <<<<"profile = "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V8))/binary>>; {'Idris.Syntax.EvalTiming', V9} -> <<<<"evaltiming = "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V9))/binary>> end.
'dn--un--show_Show_REPLEval'(V0) -> case V0 of 0 -> <<"typecheck"/utf8>>; 1 -> <<"normalise"/utf8>>; 2 -> <<"execute"/utf8>>; 3 -> <<"scheme"/utf8>> end.
'dn--un--show_Show_PTypeDecl'(V0) -> case V0 of {'Idris.Syntax.MkPTy', V1, V2, V3, V4, V5} -> ('Idris.Idris2.Data.String':'un--unwords'([('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)) | [<<":"/utf8>> | [('dn--un--show_Show_PTerm'(V5)) | []]]])) end.
'dn--un--show_Show_PTerm'(V0) -> ('dn--un--showPrec_Show_PTerm'({'Prelude.Show.Open'}, V0)).
'dn--un--show_Show_PDecl'(V0) -> case V0 of {'Idris.Syntax.PClaim', V1, V2, V3, V4, V5} -> <<('Idris.Idris2.Algebra':'un--showCount'(V2))/binary, ('dn--un--show_Show_PTypeDecl'(V5))/binary>>; {'Idris.Syntax.PDef', V6, V7} -> ('Idris.Idris2.Data.String':'un--fastUnlines'(((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('dn--un--show_Show_PClause'(V8)) end))(V7)))); {'Idris.Syntax.PData', V16, V17, V18, V19, V20} -> <<"PData"/utf8>>; {'Idris.Syntax.PParameters', V21, V22, V23} -> <<"PParameters"/utf8>>; {'Idris.Syntax.PUsing', V24, V25, V26} -> <<"PUsing"/utf8>>; {'Idris.Syntax.PReflect', V27, V28} -> <<"PReflect"/utf8>>; {'Idris.Syntax.PInterface', V29, V30, V31, V32, V33, V34, V35, V36, V37} -> <<"PInterface"/utf8>>; {'Idris.Syntax.PImplementation', V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} -> <<"PImplementation"/utf8>>; {'Idris.Syntax.PRecord', V49, V50, V51, V52, V53} -> <<"PRecord"/utf8>>; {'Idris.Syntax.PFail', V54, V55, V56} -> ('Idris.Idris2.Data.String':'un--fastUnlines'([('Idris.Idris2.Data.String':'un--unwords'([<<"failing"/utf8>> | ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [] end, fun () -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V57)))) end end, V55))])) | ((begin (V63 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V61, V62)) end end end end), fun (V64) -> fun (V65) -> ((((V63('erased'))('erased'))(V64))(V65)) end end end(fun (V58) -> ('dn--un--show_Show_PDecl'(V58)) end))(V56))])); {'Idris.Syntax.PMutual', V66, V67} -> <<"PMutual"/utf8>>; {'Idris.Syntax.PFixity', V68, V69, V70, V71} -> <<"PFixity"/utf8>>; {'Idris.Syntax.PNamespace', V72, V73, V74} -> <<"PNamespace"/utf8>>; {'Idris.Syntax.PTransform', V75, V76, V77, V78} -> <<"PTransform"/utf8>>; {'Idris.Syntax.PRunElabDecl', V79, V80} -> <<"PRunElabDecl"/utf8>>; {'Idris.Syntax.PDirective', V81, V82} -> <<"PDirective"/utf8>>; {'Idris.Syntax.PBuiltin', V83, V84, V85} -> <<"PBuiltin"/utf8>> end.
'dn--un--show_Show_PClause'(V0) -> case V0 of {'Idris.Syntax.MkPatClause', V1, V2, V3, V4} -> case V4 of [] -> ('Idris.Idris2.Data.String':'un--unwords'([('dn--un--show_Show_PTerm'(V2)) | [<<"="/utf8>> | [('dn--un--show_Show_PTerm'(V3)) | []]]])); _ -> <<"MkPatClause"/utf8>> end; {'Idris.Syntax.MkWithClause', V5, V6, V7, V8, V9} -> <<"MkWithClause"/utf8>>; {'Idris.Syntax.MkImpossible', V10, V11} -> ('Idris.Idris2.Data.String':'un--unwords'([('dn--un--show_Show_PTerm'(V11)) | [<<"impossible"/utf8>> | []]])) end.
'dn--un--show_Show_Method'(V0) -> case V0 of {'Idris.Syntax.MkMethod', V1, V2, V3, V4} -> <<<<"["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V5) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_TotalReq'(V6, V7)) end end}, V3))/binary, <<<<"] "/utf8>>/binary, <<('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V2))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)) end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V9, V10)) end end}, V4))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end.
'dn--un--show_Show_Import'(V0) -> case V0 of {'Idris.Syntax.MkImport', V1, V2, V3, V4} -> ('Idris.Idris2.Data.String':'un--unwords'(('Idris.Idris2.Data.List':'un--catMaybes'([{'Prelude.Types.Just', <<"import"/utf8>>} | [((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> <<"public"/utf8>> end))(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V7, V8)) end end end end, fun (V9) -> fun (V10) -> {'Prelude.Types.Just', V10} end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V13, V14)) end end end end}, fun (V15) -> {'Prelude.Types.Nothing'} end, fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V17, V18)) end end end}, V2)))) | [{'Prelude.Types.Just', ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V3))} | [((begin (V46 = fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V44, V45)) end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end(fun (V41) -> <<<<"as "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V4))/binary>> end))(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V29, V30)) end end end end, fun (V31) -> fun (V32) -> {'Prelude.Types.Just', V32} end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V35, V36)) end end end end}, fun (V37) -> {'Prelude.Types.Nothing'} end, fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V39, V40)) end end end}, ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V3)), V4)))))) | []]]]])))) end.
'dn--un--show_Show_IPTerm'(V0) -> ('dn--un--showPrec_Show_IPTerm'({'Prelude.Show.Open'}, V0)).
'dn--un--show_Show_Fixity'(V0) -> case V0 of 0 -> <<"infixl"/utf8>>; 1 -> <<"infixr"/utf8>>; 2 -> <<"infix"/utf8>>; 3 -> <<"prefix"/utf8>> end.
'dn--un--showPrec_Show_REPLOpt'(V0, V1) -> ('dn--un--show_Show_REPLOpt'(V1)).
'dn--un--showPrec_Show_REPLEval'(V0, V1) -> ('dn--un--show_Show_REPLEval'(V1)).
'dn--un--showPrec_Show_PTypeDecl'(V0, V1) -> ('dn--un--show_Show_PTypeDecl'(V1)).
'dn--un--showPrec_Show_PTerm'(V0, V1) -> ('un--showPTermPrec'(fun (V2) -> V2 end, V0, V1)).
'dn--un--showPrec_Show_PDecl'(V0, V1) -> ('dn--un--show_Show_PDecl'(V1)).
'dn--un--showPrec_Show_PClause'(V0, V1) -> ('dn--un--show_Show_PClause'(V1)).
'dn--un--showPrec_Show_Method'(V0, V1) -> ('dn--un--show_Show_Method'(V1)).
'dn--un--showPrec_Show_Import'(V0, V1) -> ('dn--un--show_Show_Import'(V1)).
'dn--un--showPrec_Show_IPTerm'(V0, V1) -> ('un--showPTermPrec'(fun (V2) -> case V2 of {'Core.TT.MkKindedName', V3, V4, V5} -> V5 end end, V0, V1)).
'dn--un--showPrec_Show_Fixity'(V0, V1) -> ('dn--un--show_Show_Fixity'(V1)).
'dn--un--resolved_HasNames_SyntaxInfo'(V0, V1) -> begin (V21 = ('dn--un--resolved_HasNames_(ANameMap $a)'({'Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--full_HasNames_IFaceInfo'(V2, V3, V4)) end end end, fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--resolved_HasNames_IFaceInfo'(V5, V6, V7)) end end end}, V0, case V1 of {'Idris.Syntax.MkSyntax', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20} -> V14 end))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V61 = begin (V41 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V26, V27)) end end, case V1 of {'Idris.Syntax.MkSyntax', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V37 end, []))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V60 = fun (V46) -> {'Prelude.Types.Right', case V1 of {'Idris.Syntax.MkSyntax', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> {'Idris.Syntax.MkSyntax', V47, V48, V49, V50, V51, V52, V25, V54, V55, V45, V57, V58, V59} end} end), V60 end(V42)) end end end end), V61 end(V22)) end end end end.
'dn--un--resolved_HasNames_IFaceInfo'(V0, V1, V2) -> {'Prelude.Types.Right', V1}.
'dn--un--resolved_HasNames_(ANameMap $a)'(V0, V1, V2) -> ('nested--15785-7106--in--un--insertAll'(V0, V2, V1, ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.ANameMap':'un--toList'(V2)))).
'dn--un--pretty_Pretty_Void_REPLOpt'(V0) -> case V0 of {'Idris.Syntax.ShowImplicits', V1} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'((begin (V3 = fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V2)) end), fun (V4) -> (V3(V4)) end end(<<"showimplicits"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V1)))))))); {'Idris.Syntax.ShowNamespace', V5} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'((begin (V7 = fun (V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V6)) end), fun (V8) -> (V7(V8)) end end(<<"shownamespace"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V5)))))))); {'Idris.Syntax.ShowMachineNames', V9} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'((begin (V11 = fun (V10) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V10)) end), fun (V12) -> (V11(V12)) end end(<<"showmachinenames"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V9)))))))); {'Idris.Syntax.ShowTypes', V13} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"showtypes"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V13)))))))); {'Idris.Syntax.EvalMode', V14} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"eval"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('dn--un--pretty_Pretty_Void_REPLEval'(V14)))))); {'Idris.Syntax.Editor', V15} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"editor"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V15)))))); {'Idris.Syntax.CG', V16} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"cg"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V16)))))); {'Idris.Syntax.Profile', V17} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"profile"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V17)))))))); {'Idris.Syntax.EvalTiming', V18} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'((begin (V20 = fun (V19) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V19)) end), fun (V21) -> (V20(V21)) end end(<<"evaltiming"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V18)))))))) end.
'dn--un--pretty_Pretty_Void_REPLEval'(V0) -> case V0 of 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V2 = fun (V1) -> V1 end), fun (V3) -> (V2(V3)) end end(<<"typecheck"/utf8>>)))); 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V5 = fun (V4) -> V4 end), fun (V6) -> (V5(V6)) end end(<<"normalise"/utf8>>)))); 2 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V8 = fun (V7) -> V7 end), fun (V9) -> (V8(V9)) end end(<<"execute"/utf8>>)))); 3 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V11 = fun (V10) -> V10 end), fun (V12) -> (V11(V12)) end end(<<"scheme"/utf8>>)))) end.
'dn--un--prettyPrec_Pretty_Void_REPLOpt'(V0, V1) -> ('dn--un--pretty_Pretty_Void_REPLOpt'(V1)).
'dn--un--prettyPrec_Pretty_Void_REPLEval'(V0, V1) -> ('dn--un--pretty_Pretty_Void_REPLEval'(V1)).
'dn--un--full_HasNames_SyntaxInfo'(V0, V1) -> begin (V21 = ('dn--un--full_HasNames_(ANameMap $a)'({'Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--full_HasNames_IFaceInfo'(V2, V3, V4)) end end end, fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--resolved_HasNames_IFaceInfo'(V5, V6, V7)) end end end}, V0, case V1 of {'Idris.Syntax.MkSyntax', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20} -> V14 end))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V60 = begin (V40 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V26)) end, case V1 of {'Idris.Syntax.MkSyntax', V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> V36 end, []))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V59 = fun (V45) -> {'Prelude.Types.Right', case V1 of {'Idris.Syntax.MkSyntax', V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58} -> {'Idris.Syntax.MkSyntax', V46, V47, V48, V49, V50, V51, V25, V53, V54, V44, V56, V57, V58} end} end), V59 end(V41)) end end end end), V60 end(V22)) end end end end.
'dn--un--full_HasNames_IFaceInfo'(V0, V1, V2) -> {'Prelude.Types.Right', V1}.
'dn--un--full_HasNames_(ANameMap $a)'(V0, V1, V2) -> ('nested--15770-7056--in--un--insertAll'(V0, V2, V1, ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.ANameMap':'un--toList'(V2)))).
'dn--un--__Impl_Show_REPLOpt'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_REPLOpt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_REPLOpt'(V1, V2)) end end}.
'dn--un--__Impl_Show_REPLEval'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_REPLEval'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_REPLEval'(V1, V2)) end end}.
'dn--un--__Impl_Show_PTypeDecl'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PTypeDecl'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PTypeDecl'(V1, V2)) end end}.
'dn--un--__Impl_Show_PTerm'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PTerm'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PTerm'(V1, V2)) end end}.
'dn--un--__Impl_Show_PDecl'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PDecl'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PDecl'(V1, V2)) end end}.
'dn--un--__Impl_Show_PClause'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PClause'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PClause'(V1, V2)) end end}.
'dn--un--__Impl_Show_Method'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Method'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Method'(V1, V2)) end end}.
'dn--un--__Impl_Show_Import'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Import'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Import'(V1, V2)) end end}.
'dn--un--__Impl_Show_IPTerm'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_IPTerm'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_IPTerm'(V1, V2)) end end}.
'dn--un--__Impl_Show_Fixity'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Fixity'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Fixity'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_REPLOpt'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_REPLOpt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_REPLOpt'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_REPLEval'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_REPLEval'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_REPLEval'(V1, V2)) end end}.
'dn--un--__Impl_HasNames_SyntaxInfo'() -> {'Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_SyntaxInfo'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_SyntaxInfo'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Pass'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Pass'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Pass'(V2, V3)) end end}.
'dn--un--==_Eq_Pass'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_Pass'(V0, V1) -> case ('dn--un--==_Eq_Pass'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--withSyn'(V0, V1) -> ('Idris.Idris2.Core.Core':'un--wrapRef'({'Idris.Syntax.Syn'}, V0, fun (V2) -> fun (V3) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end, V1)).
'un--typePass'(V0) -> case ('dn--un--==_Eq_Pass'(V0, 0)) of 1 -> 1; 0 -> ('dn--un--==_Eq_Pass'(V0, 1)) end.
'un--showUpdate'(V0, V1) -> case V1 of {'Idris.Syntax.PSetField', V2, V3} -> <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"."/utf8>>, V2))/binary, <<<<" = "/utf8>>/binary, ('un--showPTerm'(V0, V3))/binary>>/binary>>; {'Idris.Syntax.PSetFieldApp', V4, V5} -> <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"."/utf8>>, V4))/binary, <<<<" $= "/utf8>>/binary, ('un--showPTerm'(V0, V5))/binary>>/binary>> end.
'un--showPTermPrec'(V0, V1, V2) -> case V2 of {'Idris.Syntax.PRef', V3, V4} -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, (V0(V4)))); {'Idris.Syntax.PPi', V5, V6, V7, V8, V9, V10} -> case V7 of {'Core.TT.Explicit'} -> case V8 of {'Prelude.Types.Nothing'} -> <<('un--showPTermPrec'(V0, V1, V9))/binary, <<<<" -> "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V10))/binary>>/binary>>; {'Prelude.Types.Just', V11} -> <<<<"("/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V6))/binary, <<('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V11))/binary, <<<<" : "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V9))/binary, <<<<") -> "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V10))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Core.TT.Implicit'} -> case V8 of {'Prelude.Types.Nothing'} -> <<<<"{"/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V6))/binary, <<<<"_ : "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V9))/binary, <<<<"} -> "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V10))/binary>>/binary>>/binary>>/binary>>/binary>>; {'Prelude.Types.Just', V12} -> <<<<"{"/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V6))/binary, <<('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V12))/binary, <<<<" : "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V9))/binary, <<<<"} -> "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V10))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Core.TT.AutoImplicit'} -> case V8 of {'Prelude.Types.Nothing'} -> <<('un--showPTermPrec'(V0, V1, V9))/binary, <<<<" => "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V10))/binary>>/binary>>; {'Prelude.Types.Just', V13} -> <<<<"{auto "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V6))/binary, <<('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V13))/binary, <<<<" : "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V9))/binary, <<<<"} -> "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V10))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Core.TT.DefImplicit', V14} -> case V8 of {'Prelude.Types.Nothing'} -> <<<<"{default "/utf8>>/binary, <<('un--showPTermPrec'(V0, {'Prelude.Show.App'}, V14))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V6))/binary, <<<<"_ : "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V9))/binary, <<<<"} -> "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V10))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Prelude.Types.Just', V15} -> <<<<"{default "/utf8>>/binary, <<('un--showPTermPrec'(V0, {'Prelude.Show.App'}, V14))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V6))/binary, <<('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V15))/binary, <<<<" : "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V9))/binary, <<<<"} -> "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V10))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end end; {'Idris.Syntax.PLam', V16, V17, V18, V19, V20, V21} -> case V20 of {'Idris.Syntax.PImplicit', V22} -> <<<<"\x{5c}"/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V17))/binary, <<('un--showPTermPrec'(V0, V1, V19))/binary, <<<<" => "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V21))/binary>>/binary>>/binary>>/binary>>; _ -> <<<<"\x{5c}"/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V17))/binary, <<('un--showPTermPrec'(V0, V1, V19))/binary, <<<<" : "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V20))/binary, <<<<" => "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V21))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Idris.Syntax.PLet', V23, V24, V25, V26, V27, V28, V29} -> case V26 of {'Idris.Syntax.PImplicit', V30} -> <<<<"let "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V24))/binary, <<('un--showPTermPrec'(V0, V1, V25))/binary, <<<<" = "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V27))/binary, <<<<" in "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V28))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> <<<<"let "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V24))/binary, <<('un--showPTermPrec'(V0, V1, V25))/binary, <<<<" : "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V26))/binary, <<<<" = "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V27))/binary, <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V31) -> fun (V32) -> <<V31/binary, V32/binary>> end end, <<""/utf8>>}, fun (V33) -> ('un--showAlt'(V0, V33)) end, V29))/binary, <<<<" in "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V28))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Idris.Syntax.PCase', V34, V35, V36} -> <<<<"case "/utf8>>/binary, <<('un--showPTerm'(V0, V35))/binary, <<<<" of { "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" ; "/utf8>>, ((begin (V42 = fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V40, V41)) end end end end), fun (V43) -> fun (V44) -> ((((V42('erased'))('erased'))(V43))(V44)) end end end(fun (V37) -> ('nested--13202-5012--in--un--showCase'(V0, V1, V34, V36, V35, V37)) end))(V36))))/binary, <<" }"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Idris.Syntax.PLocal', V45, V46, V47} -> <<<<"let { << definitions >>  } in "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V47))/binary>>; {'Idris.Syntax.PUpdate', V48, V49} -> <<<<"record { "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V55 = fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V53, V54)) end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end(fun (V50) -> ('un--showUpdate'(V0, V50)) end))(V49))))/binary, <<" }"/utf8>>/binary>>/binary>>; {'Idris.Syntax.PApp', V58, V59, V60} -> begin (V61 = fun () -> <<('un--showPTermPrec'(V0, {'Prelude.Show.App'}, V59))/binary, <<<<" "/utf8>>/binary, ('un--showPTermPrec'(V0, {'Prelude.Show.App'}, V60))/binary>>/binary>> end), case V59 of {'Idris.Syntax.PRef', V62, V63} -> begin (V64 = {'Idris.Syntax.PRef', V62, V63}), case ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.Name':'un--isRF'((V0(V63)))))) of 1 -> <<('un--showPTermPrec'(V0, {'Prelude.Show.App'}, V60))/binary, <<<<" "/utf8>>/binary, ('un--showPTermPrec'(V0, {'Prelude.Show.App'}, V64))/binary>>/binary>>; 0 -> (V61()) end end; _ -> (V61()) end end; {'Idris.Syntax.PWithApp', V65, V66, V67} -> <<('un--showPTermPrec'(V0, V1, V66))/binary, <<<<" | "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V67))/binary>>/binary>>; {'Idris.Syntax.PAutoApp', V68, V69, V70} -> <<('un--showPTermPrec'(V0, V1, V69))/binary, <<<<" @{"/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V70))/binary, <<"}"/utf8>>/binary>>/binary>>/binary>>; {'Idris.Syntax.PDelayed', V71, V72, V73} -> case V72 of 0 -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V1, {'Prelude.Show.App'})), <<<<"Inf "/utf8>>/binary, ('un--showPTermPrec'(V0, {'Prelude.Show.App'}, V73))/binary>>)); _ -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V1, {'Prelude.Show.App'})), <<<<"Lazy "/utf8>>/binary, ('un--showPTermPrec'(V0, {'Prelude.Show.App'}, V73))/binary>>)) end; {'Idris.Syntax.PDelay', V74, V75} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V1, {'Prelude.Show.App'})), <<<<"Delay "/utf8>>/binary, ('un--showPTermPrec'(V0, {'Prelude.Show.App'}, V75))/binary>>)); {'Idris.Syntax.PForce', V76, V77} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V1, {'Prelude.Show.App'})), <<<<"Force "/utf8>>/binary, ('un--showPTermPrec'(V0, {'Prelude.Show.App'}, V77))/binary>>)); {'Idris.Syntax.PNamedApp', V78, V79, V80, V81} -> case V81 of {'Idris.Syntax.PRef', V82, V83} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V80, (V0(V83)))) of 1 -> <<('un--showPTermPrec'(V0, V1, V79))/binary, <<<<" {"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V80))/binary, <<"}"/utf8>>/binary>>/binary>>/binary>>; 0 -> <<('un--showPTermPrec'(V0, V1, V79))/binary, <<<<" {"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V80))/binary, <<<<" = "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, (V0(V83))))/binary, <<"}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>> end; _ -> <<('un--showPTermPrec'(V0, V1, V79))/binary, <<<<" {"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V80))/binary, <<<<" = "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V81))/binary, <<"}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Idris.Syntax.PSearch', V84, V85} -> <<"%search"/utf8>>; {'Idris.Syntax.PQuote', V86, V87} -> <<<<"`("/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V87))/binary, <<")"/utf8>>/binary>>/binary>>; {'Idris.Syntax.PQuoteName', V88, V89} -> <<<<"`{"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V89))/binary, <<"}"/utf8>>/binary>>/binary>>; {'Idris.Syntax.PQuoteDecl', V90, V91} -> <<"`[ <<declaration>> ]"/utf8>>; {'Idris.Syntax.PUnquote', V92, V93} -> <<<<"~("/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V93))/binary, <<")"/utf8>>/binary>>/binary>>; {'Idris.Syntax.PRunElab', V94, V95} -> <<<<"%runElab "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V95))/binary>>; {'Idris.Syntax.PPrimVal', V96, V97} -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V1, V97)); {'Idris.Syntax.PHole', V98, V99, V100} -> <<<<"?"/utf8>>/binary, V100/binary>>; {'Idris.Syntax.PType', V101} -> <<"Type"/utf8>>; {'Idris.Syntax.PAs', V102, V103, V104, V105} -> <<('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V104))/binary, <<<<"@"/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V105))/binary>>/binary>>; {'Idris.Syntax.PDotted', V106, V107} -> <<<<"."/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V107))/binary>>; {'Idris.Syntax.PImplicit', V108} -> <<"_"/utf8>>; {'Idris.Syntax.PInfer', V109} -> <<"?"/utf8>>; {'Idris.Syntax.POp', V110, V111, V112, V113, V114} -> <<('un--showPTermPrec'(V0, V1, V113))/binary, <<<<" "/utf8>>/binary, <<('un--showOpPrec'(V0, V1, V112))/binary, <<<<" "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V114))/binary>>/binary>>/binary>>/binary>>; {'Idris.Syntax.PPrefixOp', V115, V116, V117, V118} -> <<('un--showOpPrec'(V0, V1, V117))/binary, ('un--showPTermPrec'(V0, V1, V118))/binary>>; {'Idris.Syntax.PSectionL', V119, V120, V121, V122} -> <<<<"("/utf8>>/binary, <<('un--showOpPrec'(V0, V1, V121))/binary, <<<<" "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V122))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Idris.Syntax.PSectionR', V123, V124, V125, V126} -> <<<<"("/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V125))/binary, <<<<" "/utf8>>/binary, <<('un--showOpPrec'(V0, V1, V126))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Idris.Syntax.PEq', V127, V128, V129} -> <<('un--showPTermPrec'(V0, V1, V128))/binary, <<<<" = "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V129))/binary>>/binary>>; {'Idris.Syntax.PBracketed', V130, V131} -> <<<<"("/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V131))/binary, <<")"/utf8>>/binary>>/binary>>; {'Idris.Syntax.PString', V132, V133} -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--join'(<<" ++ "/utf8>>, {'Prelude.Interfaces.MkFoldable', fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V136, V137, V138)) end end end end end, fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V141, V142, V143)) end end end end end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V145)) end end, fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V149, V150, V151, V152)) end end end end end end end, fun (V153) -> fun (V154) -> V154 end end, fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V157, V158, V159)) end end end end end}, ((begin (V165 = fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V163, V164)) end end end end), fun (V166) -> fun (V167) -> ((((V165('erased'))('erased'))(V166))(V167)) end end end(fun (V160) -> ('un--showPStr'(V0, V160)) end))(V133)))); {'Idris.Syntax.PMultiline', V168, V169, V170} -> <<<<"multiline ("/utf8>>/binary, <<('Idris.Idris2.Libraries.Data.String.Extra':'un--join'(<<" ++ "/utf8>>, {'Prelude.Interfaces.MkFoldable', fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V173, V174, V175)) end end end end end, fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V178, V179, V180)) end end end end end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V182)) end end, fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V186, V187, V188, V189)) end end end end end end end, fun (V190) -> fun (V191) -> V191 end end, fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V194, V195, V196)) end end end end end}, ((begin (V205 = fun (V201) -> fun (V202) -> fun (V203) -> fun (V204) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V203, V204)) end end end end), fun (V206) -> fun (V207) -> ((((V205('erased'))('erased'))(V206))(V207)) end end end(fun (V200) -> ('un--showPStr'(V0, V200)) end))(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V197) -> fun (V198) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V197, V198)) end end, []}, fun (V199) -> V199 end, V170))))))/binary, <<")"/utf8>>/binary>>/binary>>; {'Idris.Syntax.PDoBlock', V208, V209, V210} -> <<<<"do "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" ; "/utf8>>, ((begin (V216 = fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V214, V215)) end end end end), fun (V217) -> fun (V218) -> ((((V216('erased'))('erased'))(V217))(V218)) end end end(fun (V211) -> ('un--showDo'(V0, V211)) end))(V210))))/binary>>; {'Idris.Syntax.PBang', V219, V220} -> <<<<"!"/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V220))/binary>>; {'Idris.Syntax.PIdiom', V221, V222, V223} -> case V222 of {'Prelude.Types.Nothing'} -> <<<<"[|"/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V223))/binary, <<"|]"/utf8>>/binary>>/binary>>; {'Prelude.Types.Just', V224} -> <<('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V224))/binary, <<<<".[|"/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V223))/binary, <<"|]"/utf8>>/binary>>/binary>>/binary>> end; {'Idris.Syntax.PList', V225, V226, V227} -> <<<<"["/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V233 = fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V231, V232)) end end end end), fun (V234) -> fun (V235) -> ((((V233('erased'))('erased'))(V234))(V235)) end end end(fun (V228) -> ('un--showPTermPrec'(V0, V1, ('Idris.Idris2.Builtin':'un--snd'(V228)))) end))(V227))))/binary, <<"]"/utf8>>/binary>>/binary>>; {'Idris.Syntax.PSnocList', V236, V237, V238} -> <<<<"[<"/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V244 = fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V242, V243)) end end end end), fun (V245) -> fun (V246) -> ((((V244('erased'))('erased'))(V245))(V246)) end end end(fun (V239) -> ('un--showPTermPrec'(V0, V1, ('Idris.Idris2.Builtin':'un--snd'(V239)))) end))(('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V238, []))))))/binary, <<"]"/utf8>>/binary>>/binary>>; {'Idris.Syntax.PPair', V247, V248, V249} -> <<<<"("/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V248))/binary, <<<<", "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V249))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Idris.Syntax.PDPair', V250, V251, V252, V253, V254} -> case V253 of {'Idris.Syntax.PImplicit', V255} -> <<<<"("/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V252))/binary, <<<<" ** "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V254))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; _ -> <<<<"("/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V252))/binary, <<<<" : "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V253))/binary, <<<<" ** "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V254))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Idris.Syntax.PUnit', V256} -> <<"()"/utf8>>; {'Idris.Syntax.PIfThenElse', V257, V258, V259, V260} -> <<<<"if "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V258))/binary, <<<<" then "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V259))/binary, <<<<" else "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V260))/binary>>/binary>>/binary>>/binary>>/binary>>; {'Idris.Syntax.PComprehension', V261, V262, V263} -> <<<<"["/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, ('nested--13202-5758--in--un--dePure'(V0, V261, V263, V262, V1, V262))))/binary, <<<<" | "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V269 = fun (V265) -> fun (V266) -> fun (V267) -> fun (V268) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V267, V268)) end end end end), fun (V270) -> fun (V271) -> ((((V269('erased'))('erased'))(V270))(V271)) end end end(fun (V264) -> ('un--showDo'(V0, ('nested--13202-5759--in--un--deGuard'(V0, V261, V263, V262, V1, V264)))) end))(V263))))/binary, <<"]"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Idris.Syntax.PRewrite', V272, V273, V274} -> <<<<"rewrite "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V273))/binary, <<<<" in "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V274))/binary>>/binary>>/binary>>; {'Idris.Syntax.PRange', V275, V276, V277, V278} -> case V277 of {'Prelude.Types.Nothing'} -> <<<<"["/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V276))/binary, <<<<" .. "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V278))/binary, <<"]"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Prelude.Types.Just', V279} -> <<<<"["/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V276))/binary, <<<<", "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V279))/binary, <<<<" .. "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V278))/binary, <<"]"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Idris.Syntax.PRangeStream', V280, V281, V282} -> case V282 of {'Prelude.Types.Nothing'} -> <<<<"["/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V281))/binary, <<" .. ]"/utf8>>/binary>>/binary>>; {'Prelude.Types.Just', V283} -> <<<<"["/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V281))/binary, <<<<", "/utf8>>/binary, <<('un--showPTermPrec'(V0, V1, V283))/binary, <<" .. ]"/utf8>>/binary>>/binary>>/binary>>/binary>> end; {'Idris.Syntax.PUnifyLog', V284, V285, V286} -> ('un--showPTermPrec'(V0, V1, V286)); {'Idris.Syntax.PPostfixApp', V287, V288, V289} -> <<('un--showPTermPrec'(V0, V1, V288))/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V290) -> fun (V291) -> <<V290/binary, V291/binary>> end end, <<""/utf8>>}, fun (V292) -> <<<<"."/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V293) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V293)) end, fun (V294) -> fun (V295) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V294, V295)) end end}, {'Prelude.Show.MkShow', fun (V296) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V296)) end, fun (V297) -> fun (V298) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V297, V298)) end end}}, V292))/binary>> end, V289))/binary>>; {'Idris.Syntax.PPostfixAppPartial', V299, V300} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V301) -> fun (V302) -> <<V301/binary, V302/binary>> end end, <<""/utf8>>}, fun (V303) -> <<<<"."/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V304) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V304)) end, fun (V305) -> fun (V306) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V305, V306)) end end}, {'Prelude.Show.MkShow', fun (V307) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V307)) end, fun (V308) -> fun (V309) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V308, V309)) end end}}, V303))/binary>> end, V300)); {'Idris.Syntax.PWithUnambigNames', V310, V311, V312} -> <<<<"with "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V313) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V314) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V314)) end, fun (V315) -> fun (V316) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V315, V316)) end end}, {'Prelude.Show.MkShow', fun (V317) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V317)) end, fun (V318) -> fun (V319) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V318, V319)) end end}}, V313)) end, fun (V320) -> fun (V321) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V322) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V322)) end, fun (V323) -> fun (V324) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V323, V324)) end end}, {'Prelude.Show.MkShow', fun (V325) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V325)) end, fun (V326) -> fun (V327) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V326, V327)) end end}}, V320, V321)) end end}, V311))/binary, <<<<" "/utf8>>/binary, ('un--showPTermPrec'(V0, V1, V312))/binary>>/binary>>/binary>> end.
'un--showPTerm'(V0, V1) -> ('un--showPTermPrec'(V0, {'Prelude.Show.Open'}, V1)).
'un--showPStr'(V0, V1) -> case V1 of {'Idris.Syntax.StrLiteral', V2, V3} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V3)); {'Idris.Syntax.StrInterp', V4, V5} -> ('un--showPTerm'(V0, V5)) end.
'un--showOpPrec'(V0, V1, V2) -> begin (V3 = (V0(V2))), case ('Idris.Idris2.Core.Name':'un--isOpName'(V3)) of 1 -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V3)); 0 -> <<<<"`"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V3))/binary, <<"`"/utf8>>/binary>>/binary>> end end.
'un--showDo'(V0, V1) -> case V1 of {'Idris.Syntax.DoExp', V2, V3} -> ('un--showPTerm'(V0, V3)); {'Idris.Syntax.DoBind', V4, V5, V6, V7} -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<" <- "/utf8>>/binary, ('un--showPTerm'(V0, V7))/binary>>/binary>>; {'Idris.Syntax.DoBindPat', V8, V9, V10, V11} -> <<('un--showPTerm'(V0, V9))/binary, <<<<" <- "/utf8>>/binary, <<('un--showPTerm'(V0, V10))/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V12) -> fun (V13) -> <<V12/binary, V13/binary>> end end, <<""/utf8>>}, fun (V14) -> ('un--showAlt'(V0, V14)) end, V11))/binary>>/binary>>/binary>>; {'Idris.Syntax.DoLet', V15, V16, V17, V18, V19, V20} -> <<<<"let "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17))/binary, <<<<" = "/utf8>>/binary, ('un--showPTerm'(V0, V20))/binary>>/binary>>/binary>>; {'Idris.Syntax.DoLetPat', V21, V22, V23, V24, V25} -> <<<<"let "/utf8>>/binary, <<('un--showPTerm'(V0, V22))/binary, <<<<" = "/utf8>>/binary, <<('un--showPTerm'(V0, V24))/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V26) -> fun (V27) -> <<V26/binary, V27/binary>> end end, <<""/utf8>>}, fun (V28) -> ('un--showAlt'(V0, V28)) end, V25))/binary>>/binary>>/binary>>/binary>>; {'Idris.Syntax.DoLetLocal', V29, V30} -> <<"let { << definitions >>  }"/utf8>>; {'Idris.Syntax.DoRewrite', V31, V32} -> <<<<"rewrite "/utf8>>/binary, ('un--showPTerm'(V0, V32))/binary>> end.
'un--showAlt'(V0, V1) -> case V1 of {'Idris.Syntax.MkPatClause', V2, V3, V4, V5} -> <<<<" | "/utf8>>/binary, <<('un--showPTerm'(V0, V3))/binary, <<<<" => "/utf8>>/binary, <<('un--showPTerm'(V0, V4))/binary, <<";"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Idris.Syntax.MkWithClause', V6, V7, V8, V9, V10} -> <<" | <<with alts not possible>>;"/utf8>>; {'Idris.Syntax.MkImpossible', V11, V12} -> <<<<" | "/utf8>>/binary, <<('un--showPTerm'(V0, V12))/binary, <<" impossible;"/utf8>>/binary>>/binary>> end.
'un--papply'(V0, V1, V2) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V3, V4) -> ('un--papply'(V0, {'Idris.Syntax.PApp', V0, V1, V3}, V4)) end(E0, E1)) end.
'un--isStrLiteral'(V0) -> case V0 of {'Idris.Syntax.StrInterp', V1, V2} -> {'Prelude.Types.Nothing'}; {'Idris.Syntax.StrLiteral', V3, V4} -> {'Prelude.Types.Just', {'Builtin.MkPair', V3, V4}} end.
'un--isStrInterp'(V0) -> case V0 of {'Idris.Syntax.StrInterp', V1, V2} -> {'Prelude.Types.Just', V1}; {'Idris.Syntax.StrLiteral', V3, V4} -> {'Prelude.Types.Nothing'} end.
'un--isPDef'(V0) -> case V0 of {'Idris.Syntax.PDef', V1, V2} -> {'Prelude.Types.Just', {'Builtin.MkPair', V1, V2}}; _ -> {'Prelude.Types.Nothing'} end.
'un--initSyntax'() -> {'Idris.Syntax.MkSyntax', ('nested--16062-7285--in--un--initInfix'()), ('nested--16062-7286--in--un--initPrefix'()), [], ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--compare_Ord_ModuleIdent'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<_Ord_ModuleIdent'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->_Ord_ModuleIdent'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<=_Ord_ModuleIdent'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->=_Ord_ModuleIdent'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--max_Ord_ModuleIdent'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--min_Ord_ModuleIdent'(V16, V17)) end end})), ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V20, V21)) end end}, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--compare_Ord_ModuleIdent'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<_Ord_ModuleIdent'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->_Ord_ModuleIdent'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<=_Ord_ModuleIdent'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->=_Ord_ModuleIdent'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--max_Ord_ModuleIdent'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--min_Ord_ModuleIdent'(V34, V35)) end end})), [], ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'()), ('nested--16062-7288--in--un--initSaveDocStrings'()), ('nested--16062-7287--in--un--initDocStrings'()), [], [], {'TTImp.TTImp.IVar', {'Core.FC.EmptyFC'}, {'Core.Name.UN', {'Core.Name.Basic', <<"main"/utf8>>}}}, []}.
'un--getPTypeDeclLoc'(V0) -> case V0 of {'Idris.Syntax.MkPTy', V1, V2, V3, V4, V5} -> V1 end.
'un--getPTermLoc'(V0) -> case V0 of {'Idris.Syntax.PRef', V1, V2} -> V1; {'Idris.Syntax.PPi', V3, V4, V5, V6, V7, V8} -> V3; {'Idris.Syntax.PLam', V9, V10, V11, V12, V13, V14} -> V9; {'Idris.Syntax.PLet', V15, V16, V17, V18, V19, V20, V21} -> V15; {'Idris.Syntax.PCase', V22, V23, V24} -> V22; {'Idris.Syntax.PLocal', V25, V26, V27} -> V25; {'Idris.Syntax.PUpdate', V28, V29} -> V28; {'Idris.Syntax.PApp', V30, V31, V32} -> V30; {'Idris.Syntax.PWithApp', V33, V34, V35} -> V33; {'Idris.Syntax.PAutoApp', V36, V37, V38} -> V36; {'Idris.Syntax.PNamedApp', V39, V40, V41, V42} -> V39; {'Idris.Syntax.PDelayed', V43, V44, V45} -> V43; {'Idris.Syntax.PDelay', V46, V47} -> V46; {'Idris.Syntax.PForce', V48, V49} -> V48; {'Idris.Syntax.PSearch', V50, V51} -> V50; {'Idris.Syntax.PPrimVal', V52, V53} -> V52; {'Idris.Syntax.PQuote', V54, V55} -> V54; {'Idris.Syntax.PQuoteName', V56, V57} -> V56; {'Idris.Syntax.PQuoteDecl', V58, V59} -> V58; {'Idris.Syntax.PUnquote', V60, V61} -> V60; {'Idris.Syntax.PRunElab', V62, V63} -> V62; {'Idris.Syntax.PHole', V64, V65, V66} -> V64; {'Idris.Syntax.PType', V67} -> V67; {'Idris.Syntax.PAs', V68, V69, V70, V71} -> V68; {'Idris.Syntax.PDotted', V72, V73} -> V72; {'Idris.Syntax.PImplicit', V74} -> V74; {'Idris.Syntax.PInfer', V75} -> V75; {'Idris.Syntax.POp', V76, V77, V78, V79, V80} -> V76; {'Idris.Syntax.PPrefixOp', V81, V82, V83, V84} -> V81; {'Idris.Syntax.PSectionL', V85, V86, V87, V88} -> V85; {'Idris.Syntax.PSectionR', V89, V90, V91, V92} -> V89; {'Idris.Syntax.PEq', V93, V94, V95} -> V93; {'Idris.Syntax.PBracketed', V96, V97} -> V96; {'Idris.Syntax.PString', V98, V99} -> V98; {'Idris.Syntax.PMultiline', V100, V101, V102} -> V100; {'Idris.Syntax.PDoBlock', V103, V104, V105} -> V103; {'Idris.Syntax.PBang', V106, V107} -> V106; {'Idris.Syntax.PIdiom', V108, V109, V110} -> V108; {'Idris.Syntax.PList', V111, V112, V113} -> V111; {'Idris.Syntax.PSnocList', V114, V115, V116} -> V114; {'Idris.Syntax.PPair', V117, V118, V119} -> V117; {'Idris.Syntax.PDPair', V120, V121, V122, V123, V124} -> V120; {'Idris.Syntax.PUnit', V125} -> V125; {'Idris.Syntax.PIfThenElse', V126, V127, V128, V129} -> V126; {'Idris.Syntax.PComprehension', V130, V131, V132} -> V130; {'Idris.Syntax.PRewrite', V133, V134, V135} -> V133; {'Idris.Syntax.PRange', V136, V137, V138, V139} -> V136; {'Idris.Syntax.PRangeStream', V140, V141, V142} -> V140; {'Idris.Syntax.PPostfixApp', V143, V144, V145} -> V143; {'Idris.Syntax.PPostfixAppPartial', V146, V147} -> V146; {'Idris.Syntax.PUnifyLog', V148, V149, V150} -> V148; {'Idris.Syntax.PWithUnambigNames', V151, V152, V153} -> V151 end.
'un--getPDeclLoc'(V0) -> case V0 of {'Idris.Syntax.PClaim', V1, V2, V3, V4, V5} -> V1; {'Idris.Syntax.PDef', V6, V7} -> V6; {'Idris.Syntax.PData', V8, V9, V10, V11, V12} -> V8; {'Idris.Syntax.PParameters', V13, V14, V15} -> V13; {'Idris.Syntax.PUsing', V16, V17, V18} -> V16; {'Idris.Syntax.PReflect', V19, V20} -> V19; {'Idris.Syntax.PInterface', V21, V22, V23, V24, V25, V26, V27, V28, V29} -> V21; {'Idris.Syntax.PImplementation', V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V30; {'Idris.Syntax.PRecord', V41, V42, V43, V44, V45} -> V41; {'Idris.Syntax.PMutual', V46, V47} -> V46; {'Idris.Syntax.PFail', V48, V49, V50} -> V48; {'Idris.Syntax.PFixity', V51, V52, V53, V54} -> V51; {'Idris.Syntax.PNamespace', V55, V56, V57} -> V55; {'Idris.Syntax.PTransform', V58, V59, V60, V61} -> V58; {'Idris.Syntax.PRunElabDecl', V62, V63} -> V62; {'Idris.Syntax.PDirective', V64, V65} -> V64; {'Idris.Syntax.PBuiltin', V66, V67, V68} -> V66 end.
'un--getPDataDeclLoc'(V0) -> case V0 of {'Idris.Syntax.MkPData', V1, V2, V3, V4, V5} -> V1; {'Idris.Syntax.MkPLater', V6, V7, V8} -> V6 end.
'un--getPClauseLoc'(V0) -> case V0 of {'Idris.Syntax.MkPatClause', V1, V2, V3, V4} -> V1; {'Idris.Syntax.MkWithClause', V5, V6, V7, V8, V9} -> V5; {'Idris.Syntax.MkImpossible', V10, V11} -> V10 end.
'un--getLoc'(V0) -> case V0 of {'Idris.Syntax.DoExp', V1, V2} -> V1; {'Idris.Syntax.DoBind', V3, V4, V5, V6} -> V3; {'Idris.Syntax.DoBindPat', V7, V8, V9, V10} -> V7; {'Idris.Syntax.DoLet', V11, V12, V13, V14, V15, V16} -> V11; {'Idris.Syntax.DoLetPat', V17, V18, V19, V20, V21} -> V17; {'Idris.Syntax.DoLetLocal', V22, V23} -> V22; {'Idris.Syntax.DoRewrite', V24, V25} -> V24 end.
'un--definedInData'(V0) -> case V0 of {'Idris.Syntax.MkPData', V1, V2, V3, V4, V5} -> [V2 | ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> ('nested--12013-3468--in--un--getName'(V1, V3, V4, V5, V2, V6)) end))(V5))]; {'Idris.Syntax.MkPLater', V14, V15, V16} -> [V15 | []] end.
'un--definedIn'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Syntax.PClaim', V3, V4, V5, V6, V7} -> case V7 of {'Idris.Syntax.MkPTy', V8, V9, V10, V11, V12} -> [V10 | ('un--definedIn'(V2))]; _ -> ('un--definedIn'(V2)) end; {'Idris.Syntax.PData', V13, V14, V15, V16, V17} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--definedInData'(V17)), ('un--definedIn'(V2)))); {'Idris.Syntax.PParameters', V18, V19, V20} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--definedIn'(V20)), ('un--definedIn'(V2)))); {'Idris.Syntax.PUsing', V21, V22, V23} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--definedIn'(V23)), ('un--definedIn'(V2)))); {'Idris.Syntax.PNamespace', V24, V25, V26} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--definedIn'(V26)), ('un--definedIn'(V2)))); _ -> ('un--definedIn'(V2)) end end(E0, E1)) end.
'un--defPass'(V0) -> case ('dn--un--==_Eq_Pass'(V0, 0)) of 1 -> 1; 0 -> ('dn--un--==_Eq_Pass'(V0, 2)) end.
'un--applyArgs'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Builtin.MkPair', V4, V5} -> ('un--applyArgs'({'Idris.Syntax.PApp', V4, V0, V5}, V3)) end end(E0, E1)) end.
'un--addModDocInfo'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V32 = begin (V14 = V0), fun (V15) -> begin (V31 = (begin (V16 = V14), fun (V17) -> ('erlang':'put'(V16, case V13 of {'Idris.Syntax.MkSyntax', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} -> {'Idris.Syntax.MkSyntax', V18, V19, [V1 | V20], ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V1, V2, V21)), ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V1, V3, V22)), V23, V24, V25, V26, V27, V28, V29, V30} end)) end end(V15))), {'Prelude.Types.Right', V31} end end end), V32 end(V10)) end end end end.
'un--PWithProblem'() -> {'Idris.Syntax.PWithProblem\x{27}', {'Core.Name.Name'}}.
'un--PTypeDecl'() -> {'Idris.Syntax.PTypeDecl\x{27}', {'Core.Name.Name'}}.
'un--PTerm'() -> {'Idris.Syntax.PTerm\x{27}', {'Core.Name.Name'}}.
'un--PStr'() -> {'Idris.Syntax.PStr\x{27}', {'Core.Name.Name'}}.
'un--PFnOpt'() -> {'Idris.Syntax.PFnOpt\x{27}', {'Core.Name.Name'}}.
'un--PFieldUpdate'() -> {'Idris.Syntax.PFieldUpdate\x{27}', {'Core.Name.Name'}}.
'un--PField'() -> {'Idris.Syntax.PField\x{27}', {'Core.Name.Name'}}.
'un--PDo'() -> {'Idris.Syntax.PDo\x{27}', {'Core.Name.Name'}}.
'un--PDecl'() -> {'Idris.Syntax.PDecl\x{27}', {'Core.Name.Name'}}.
'un--PDataDecl'() -> {'Idris.Syntax.PDataDecl\x{27}', {'Core.Name.Name'}}.
'un--PClause'() -> {'Idris.Syntax.PClause\x{27}', {'Core.Name.Name'}}.
'un--OpStr\x{27}'(V0) -> V0.
'un--OpStr'() -> {'Core.Name.Name'}.
'un--IPTerm'() -> {'Idris.Syntax.PTerm\x{27}', {'Core.TT.KindedName'}}.
