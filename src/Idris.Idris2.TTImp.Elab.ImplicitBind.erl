-module('Idris.Idris2.TTImp.Elab.ImplicitBind').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in checkBindVar-17560'/19,
  'case--getToBind,normImps-16431'/16,
  'case--bindUnsolved,makeBoundVar-14027'/17,
  'case--mkPatternHole-13774'/15,
  'case--mkOuterHole-13339'/13,
  'nested--12678-15404--in--un--tidyName'/8,
  'nested--11825-14657--in--un--swapP'/3,
  'nested--13403-16037--in--un--normImps'/12,
  'nested--13403-16036--in--un--normBindingTy'/11,
  'nested--11077-13978--in--un--mkImplicit'/12,
  'nested--10633-13637--in--un--mkArgs'/12,
  'nested--11077-13977--in--un--makeBoundVar'/16,
  'nested--12588-15309--in--un--liftImps\x{27}'/7,
  'nested--14564-17091--in--un--isIncompatible'/16,
  'nested--13403-16038--in--un--insert'/13,
  'nested--12678-15405--in--un--getBinds'/11,
  'nested--13403-16039--in--un--depSort'/11,
  'nested--14564-17092--in--un--combine'/18,
  'nested--10633-13638--in--un--bindInner'/14,
  'un--swapVars'/2,
  'un--swapIsVarH'/1,
  'un--swapIsVar'/2,
  'un--solvePolyConstraint'/3,
  'un--push'/5,
  'un--normaliseType'/5,
  'un--mkPatternHole'/10,
  'un--mkOuterHole'/9,
  'un--liftImps'/3,
  'un--implicitBind'/3,
  'un--getToBind'/9,
  'un--checkPolyConstraint'/2,
  'un--checkBindVar'/14,
  'un--checkBindHere'/15,
  'un--bindUnsolved'/7,
  'un--bindImplicits'/10,
  'un--bindImplVars'/7
]).
'case--case block in checkBindVar-17560'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Prelude.Types.Nothing'} -> begin (V25 = ('un--mkPatternHole'(V0, V10, V13, V11, V3, V7, V16, V4, case V6 of {'TTImp.Elab.Check.MkElabInfo', V19, V20, V21, V22, V23, V24} -> V20 end, V1))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V210 = case V29 of {'Builtin.MkPair', V30, V31} -> case V31 of {'Builtin.MkPair', V32, V33} -> begin (V42 = case V6 of {'TTImp.Elab.Check.MkElabInfo', V34, V35, V36, V37, V38, V39} -> case V35 of {'TTImp.TTImp.PI', V40} -> ('Idris.Idris2.Core.Unify':'un--setInvertible'(V13, V3, V16)); _ -> fun (V41) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V209 = begin (V143 = ('Idris.Idris2.Core.Context.Log':'un--log'(V13, (begin (V48 = fun (V47) -> V47 end), fun (V49) -> (V48(V49)) end end(<<"elab.implicits"/utf8>>)), 5, fun () -> <<(begin (V51 = fun (V50) -> V50 end), fun (V52) -> (V51(V52)) end end(<<"Added Bound implicit "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V53)) end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V54, V55)) end end}, {'Prelude.Show.MkShow', fun (V56) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V57) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V57)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V58, V59)) end end}, {'Prelude.Show.MkShow', fun (V60) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V61) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V61)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V62, V63)) end end}, {'Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V65) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V65)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V66, V67)) end end}, {'Prelude.Show.MkShow', fun (V68) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V69, V70)) end end}}, V64)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V73) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V73)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V74, V75)) end end}, {'Prelude.Show.MkShow', fun (V76) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V76)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V77, V78)) end end}}, V71, V72)) end end}}, V60)) end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V81) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V81)) end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V82, V83)) end end}, {'Prelude.Show.MkShow', fun (V84) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V85) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V86, V87)) end end}, {'Prelude.Show.MkShow', fun (V88) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V89, V90)) end end}}, V84)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V93) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V93)) end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V94, V95)) end end}, {'Prelude.Show.MkShow', fun (V96) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V96)) end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V97, V98)) end end}}, V91, V92)) end end}}, V79, V80)) end end}}, V56)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V101) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V102, V103)) end end}, {'Prelude.Show.MkShow', fun (V104) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V105) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V105)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V106, V107)) end end}, {'Prelude.Show.MkShow', fun (V108) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V109) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V110, V111)) end end}, {'Prelude.Show.MkShow', fun (V112) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V113, V114)) end end}}, V108)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V117) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V117)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V118, V119)) end end}, {'Prelude.Show.MkShow', fun (V120) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V120)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V121, V122)) end end}}, V115, V116)) end end}}, V104)) end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V125) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V125)) end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V126, V127)) end end}, {'Prelude.Show.MkShow', fun (V128) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V129) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V129)) end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V130, V131)) end end}, {'Prelude.Show.MkShow', fun (V132) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V132)) end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V133, V134)) end end}}, V128)) end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V137) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V137)) end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V138, V139)) end end}, {'Prelude.Show.MkShow', fun (V140) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V140)) end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V141, V142)) end end}}, V135, V136)) end end}}, V123, V124)) end end}}, V99, V100)) end end}}, {'Builtin.MkPair', V16, {'Builtin.MkPair', V7, {'Builtin.MkPair', V30, {'Builtin.MkPair', V32, V33}}}}))/binary>> end))), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V208 = begin (V178 = begin (V153 = begin (V148 = V10), fun (V149) -> begin (V152 = (begin (V150 = V148), fun (V151) -> ('erlang':'get'(V150)) end end(V149))), {'Prelude.Types.Right', V152} end end end), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V177 = begin (V158 = V10), fun (V159) -> begin (V176 = (begin (V160 = V158), fun (V161) -> ('erlang':'put'(V160, case V157 of {'TTImp.Elab.Check.MkEState', V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175} -> {'TTImp.Elab.Check.MkEState', V162, V163, V164, V165, [{'Builtin.MkPair', V16, {'TTImp.Elab.Check.NameBinding', V0, V7, {'Core.TT.Explicit'}, V30, V32}} | V166], [{'Builtin.MkPair', V16, {'TTImp.Elab.Check.NameBinding', V0, V7, {'Core.TT.Explicit'}, V30, V33}} | V167], V168, V169, V170, V171, V172, V173, V174, V175} end)) end end(V159))), {'Prelude.Types.Right', V176} end end end), V177 end(V154)) end end end end), fun (V179) -> begin (V180 = (V178(V179))), case V180 of {'Prelude.Types.Left', V181} -> {'Prelude.Types.Left', V181}; {'Prelude.Types.Right', V182} -> (begin (V207 = begin (V189 = ('Idris.Idris2.Core.Context.Log':'un--log'(V13, (begin (V184 = fun (V183) -> V183 end), fun (V185) -> (V184(V185)) end end(<<"metadata.names"/utf8>>)), 7, fun () -> (begin (V187 = fun (V186) -> V186 end), fun (V188) -> (V187(V188)) end end(<<"checkBindVar is adding \x{2193}"/utf8>>)) end))), fun (V190) -> begin (V191 = (V189(V190))), case V191 of {'Prelude.Types.Left', V192} -> {'Prelude.Types.Left', V192}; {'Prelude.Types.Right', V193} -> (begin (V206 = begin (V194 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V13, V12, V3, {'Core.Name.UN', V2}, V4, V32))), fun (V195) -> begin (V196 = (V194(V195))), case V196 of {'Prelude.Types.Left', V197} -> {'Prelude.Types.Left', V197}; {'Prelude.Types.Right', V198} -> (begin (V205 = begin (V199 = ('Idris.Idris2.Core.Metadata':'un--addNameLoc'(V12, V13, V3, {'Core.Name.UN', V2}))), fun (V200) -> begin (V201 = (V199(V200))), case V201 of {'Prelude.Types.Left', V202} -> {'Prelude.Types.Left', V202}; {'Prelude.Types.Right', V203} -> (begin (V204 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V13, V11, V10, V7, V6, V4, V3, V30, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, V32)), V1))), V204 end(V200)) end end end end), V205 end(V195)) end end end end), V206 end(V190)) end end end end), V207 end(V179)) end end end end), V208 end(V144)) end end end end), V209 end(V43)) end end end end end end), V210 end(V26)) end end end end; {'Prelude.Types.Just', V211} -> begin (V213 = fun (V212) -> ('nested--14564-17092--in--un--combine'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, {'Core.Name.UN', V2}, V7, ('Idris.Idris2.TTImp.Elab.Check':'un--bindingRig'(V211)), V212)) end), fun (V214) -> begin (V215 = (V213(V214))), case V215 of {'Prelude.Types.Left', V216} -> {'Prelude.Types.Left', V216}; {'Prelude.Types.Right', V217} -> (begin (V238 = begin (V218 = ('Idris.Idris2.TTImp.Elab.Check':'un--bindingTerm'(V211))), begin (V219 = ('Idris.Idris2.TTImp.Elab.Check':'un--bindingType'(V211))), begin (V220 = ('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"metadata.names"/utf8>>, 7, fun () -> <<"checkBindVar is adding \x{2193}"/utf8>> end))), fun (V221) -> begin (V222 = (V220(V221))), case V222 of {'Prelude.Types.Left', V223} -> {'Prelude.Types.Left', V223}; {'Prelude.Types.Right', V224} -> (begin (V237 = begin (V225 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V13, V12, V3, {'Core.Name.UN', V2}, V4, V219))), fun (V226) -> begin (V227 = (V225(V226))), case V227 of {'Prelude.Types.Left', V228} -> {'Prelude.Types.Left', V228}; {'Prelude.Types.Right', V229} -> (begin (V236 = begin (V230 = ('Idris.Idris2.Core.Metadata':'un--addNameLoc'(V12, V13, V3, {'Core.Name.UN', V2}))), fun (V231) -> begin (V232 = (V230(V231))), case V232 of {'Prelude.Types.Left', V233} -> {'Prelude.Types.Left', V233}; {'Prelude.Types.Right', V234} -> (begin (V235 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V13, V11, V10, V7, V6, V4, V3, V218, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, V219)), V1))), V235 end(V231)) end end end end), V236 end(V226)) end end end end), V237 end(V221)) end end end end end end), V238 end(V214)) end end end end end.
'case--getToBind,normImps-16431'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Builtin.MkPair', V16, V17} -> case V16 of {'Core.TT.Meta', V18, V19, V20, V21} -> begin (V22 = ('Idris.Idris2.Core.UnifyState':'un--isCurrentHole'(V6, V20))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V70 = case case V26 of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V38)) end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V42, V43, V44, V45)) end end end end end end end, fun (V46) -> fun (V47) -> V47 end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V50, V51, V52)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V53, V54)) end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V55, V56)) end end}, V19, V12)) of 1 -> 0; 0 -> 1 end; 0 -> 0 end of 1 -> begin (V57 = ('nested--13403-16037--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, [V19 | V12], V11))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V69 = begin (V62 = ('nested--13403-16036--in--un--normBindingTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V10))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V68 = fun (V67) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V19, V66} | V61]} end), V68 end(V63)) end end end end), V69 end(V58)) end end end end; 0 -> ('nested--13403-16037--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V12, V11)) end), V70 end(V23)) end end end end; _ -> ('nested--13403-16037--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V12, V11)) end; _ -> ('nested--13403-16037--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V12, V11)) end.
'case--bindUnsolved,makeBoundVar-14027'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Prelude.Types.Nothing'} -> begin (V21 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Core.Context.dn--un--__mkHasNames', fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V19, V20)) end end}, V9))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V2, <<<<"Can\x{27}t bind implicit "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15))/binary, <<<<" of type "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V8, V25))/binary>>/binary>>/binary>>}, V26)) end), V27 end(V22)) end end end end; {'Prelude.Types.Just', V28} -> begin (V29 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V6, V3, ('Idris.Idris2.Core.Name':'un--nameRoot'(V15))))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V78 = begin (V34 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V7, V6, V3, V2, V14, V12, V33, V28))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V77 = begin (V39 = ('Idris.Idris2.Core.TT':'un--forgetDef'(V13))), begin (V70 = begin (V45 = begin (V40 = V5), fun (V41) -> begin (V44 = (begin (V42 = V40), fun (V43) -> ('erlang':'get'(V42)) end end(V41))), {'Prelude.Types.Right', V44} end end end), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V69 = begin (V50 = V5), fun (V51) -> begin (V68 = (begin (V52 = V50), fun (V53) -> ('erlang':'put'(V52, case V49 of {'TTImp.Elab.Check.MkEState', V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'TTImp.Elab.Check.MkEState', V54, V55, V56, V57, V58, [{'Builtin.MkPair', V33, {'TTImp.Elab.Check.NameBinding', V4, V14, V39, ('Idris.Idris2.Core.TT':'un--embedSub'(V10, V38)), ('Idris.Idris2.Core.TT':'un--embedSub'(V10, V28))}} | V59], V60, V61, V62, V63, V64, V65, V66, V67} end)) end end(V51))), {'Prelude.Types.Right', V68} end end end), V69 end(V46)) end end end end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V76 = fun (V75) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--embedSub'(V11, V38))} end), V76 end(V71)) end end end end end), V77 end(V35)) end end end end), V78 end(V30)) end end end end end.
'case--mkPatternHole-13774'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Prelude.Types.Nothing'} -> ('un--mkPatternHole'(V0, V9, V8, V7, V6, V5, V4, V3, V2, {'Prelude.Types.Nothing'})); {'Prelude.Types.Just', V15} -> begin (V30 = ('Idris.Idris2.TTImp.Elab.Check':'un--implBindVar'(case V10 of {'TTImp.Elab.Check.MkEState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> V16 end, V8, V7, V6, V5, V12, V4, V15))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V36 = fun (V35) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--apply'(V6, ('Idris.Idris2.Core.TT':'un--embedSub'(V11, V34)), ('nested--10633-13637--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V0, V11)))), {'Builtin.MkPair', V13, ('Idris.Idris2.Core.TT':'un--embedSub'(V11, V15))}}} end), V36 end(V31)) end end end end end.
'case--mkOuterHole-13339'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Prelude.Types.Nothing'} -> ('un--mkOuterHole'(V0, V8, V7, V6, V5, V4, V3, V2, {'Prelude.Types.Nothing'})); {'Prelude.Types.Just', V13} -> begin (V28 = case V9 of {'TTImp.Elab.Check.MkEState', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} -> V16 end), begin (V43 = ('Idris.Idris2.TTImp.Elab.Check':'un--implBindVar'(case V9 of {'TTImp.Elab.Check.MkEState', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> V29 end, V7, V6, V5, V4, V28, V3, V13))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V49 = fun (V48) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--embedSub'(V10, V47)), ('Idris.Idris2.Core.TT':'un--embedSub'(V10, V13))}} end), V49 end(V44)) end end end end end end.
'nested--12678-15404--in--un--tidyName'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.Name.NS', V8, V9} -> ('nested--12678-15404--in--un--tidyName'(V0, V1, V2, V3, V4, V5, V6, V9)); {'Core.Name.PV', V10, V11} -> ('nested--12678-15404--in--un--tidyName'(V0, V1, V2, V3, V4, V5, V6, V10)); {'Core.Name.Nested', V12, V13} -> ('nested--12678-15404--in--un--tidyName'(V0, V1, V2, V3, V4, V5, V6, V13)); _ -> V7 end.
'nested--11825-14657--in--un--swapP'(V0, V1, V2) -> case V2 of 0 -> 0; _ -> begin (V3 = (V2 - 1)), ((V3 + 1) + 1) end end.
'nested--13403-16037--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> fun (V12) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Builtin.MkPair', V15, V16} -> case V15 of {'Core.Name.PV', V17, V18} -> begin (V19 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V1, V8, <<"elab.implicits"/utf8>>, 10, fun () -> <<<<"Implicit pattern var "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'({'Core.Name.PV', V17, V18}))/binary>> end, V2, ('Idris.Idris2.TTImp.Elab.Check':'un--bindingType'(V16))))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V67 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V35)) end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V39, V40, V41, V42)) end end end end end end end, fun (V43) -> fun (V44) -> V44 end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V47, V48, V49)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V52, V53)) end end}, {'Core.Name.PV', V17, V18}, V10)) of 1 -> ('nested--13403-16037--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14)); 0 -> begin (V54 = ('nested--13403-16037--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, [{'Core.Name.PV', V17, V18} | V10], V14))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V66 = begin (V59 = ('nested--13403-16036--in--un--normBindingTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V16))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V65 = fun (V64) -> {'Prelude.Types.Right', [{'Builtin.MkPair', {'Core.Name.PV', V17, V18}, V63} | V58]} end), V65 end(V60)) end end end end), V66 end(V55)) end end end end end), V67 end(V20)) end end end end; _ -> begin (V68 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V1, V9, V2, ('Idris.Idris2.TTImp.Elab.Check':'un--bindingTerm'(V16))))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V79 = begin (V73 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V8, <<"elab.implicits"/utf8>>, 10, fun () -> <<<<"Normalising implicit "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15))/binary>> end, V72))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V78 = ('case--getToBind,normImps-16431'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15, V16, V14, V10, V9, V72, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V72))))), V78 end(V74)) end end end end), V79 end(V69)) end end end end end end end(E0, E1)) end.
'nested--13403-16036--in--un--normBindingTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'TTImp.Elab.Check.NameBinding', V11, V12, V13, V14, V15} -> begin (V33 = case V3 of {'TTImp.TTImp.COVERAGE'} -> begin (V16 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V8, V1, V9, V2, V15))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V31 = begin (V21 = ('Idris.Idris2.Core.Coverage':'un--isEmpty'(V1, V8, V9, V2, V20))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V30 = fun (V26) -> case V25 of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V28 = fun (V27) -> V27 end), fun (V29) -> (V28(V29)) end end(<<"Empty pattern in coverage check"/utf8>>))}, V26)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V30 end(V22)) end end end end), V31 end(V17)) end end end end; _ -> fun (V32) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V45 = begin (V38 = ('un--normaliseType'(V8, V1, V9, V2, V15))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V44 = fun (V43) -> {'Prelude.Types.Right', {'TTImp.Elab.Check.NameBinding', V1, V12, V13, V14, V42}} end), V44 end(V39)) end end end end), V45 end(V34)) end end end end; {'TTImp.Elab.Check.AsBinding', V46, V47, V48, V49, V50, V51} -> begin (V69 = case V3 of {'TTImp.TTImp.COVERAGE'} -> begin (V52 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V8, V1, V9, V2, V50))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V67 = begin (V57 = ('Idris.Idris2.Core.Coverage':'un--isEmpty'(V1, V8, V9, V2, V56))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V66 = fun (V62) -> case V61 of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V64 = fun (V63) -> V63 end), fun (V65) -> (V64(V65)) end end(<<"Empty pattern in coverage check"/utf8>>))}, V62)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V66 end(V58)) end end end end), V67 end(V53)) end end end end; _ -> fun (V68) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V87 = begin (V74 = ('un--normaliseType'(V8, V1, V9, V2, V50))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V86 = begin (V79 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V1, V9, V2, V51))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V85 = fun (V84) -> {'Prelude.Types.Right', {'TTImp.Elab.Check.AsBinding', V1, V47, V48, V49, V78, V83}} end), V85 end(V80)) end end end end), V86 end(V75)) end end end end), V87 end(V70)) end end end end end.
'nested--11077-13978--in--un--mkImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> case V15 of {'Builtin.DPair.MkDPair', V16, V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> case V19 of {'Builtin.MkPair', V20, V21} -> case V21 of {'Builtin.MkPair', V22, V23} -> case V23 of {'Builtin.MkPair', V24, V25} -> begin (V58 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V12, case V8 of {'Core.Context.MkDefs', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> V26 end))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V128 = case V62 of {'Prelude.Types.Just', V63} -> case V63 of {'Core.Context.Context.Hole', V64, V65} -> begin (V72 = begin (V66 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V6, V16, V8, V18, V24))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V71 = ('nested--11077-13977--in--un--makeBoundVar'(V0, V1, V2, V3, V4, V5, V6, V7, V16, V12, V14, V20, V9, V25, V10, V70))), V71 end(V67)) end end end end), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V125 = begin (V83 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V16, V6, (begin (V78 = fun (V77) -> V77 end), fun (V79) -> (V78(V79)) end end(<<"elab.implicits"/utf8>>)), 5, fun () -> (begin (V81 = fun (V80) -> V80 end), fun (V82) -> (V81(V82)) end end(<<"Added unbound implicit"/utf8>>)) end, V76))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V124 = begin (V105 = ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V88, V89, V90, V91, V92, V93, V94, V95)) end end end end end end end end, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V96, V97, V98, V99, V100, V101, V102, V103)) end end end end end end end end}, V16, V6, V3, case V1 of {'TTImp.Elab.Check.InLHS', V104} -> ('Idris.Idris2.Core.Unify':'un--inLHS'()); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end, V2, V18))(V22))(V76))), ((begin (V121 = fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V118, V119, V120)) end end end end end), fun (V122) -> fun (V123) -> ((((V121('erased'))('erased'))(V122))(V123)) end end end((begin (V113 = fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> {'Prelude.Types.Right', (V109(V112))} end end end end end), fun (V114) -> fun (V115) -> ((((V113('erased'))('erased'))(V114))(V115)) end end end(fun (V106) -> {'Builtin.MkUnit'} end))))(V105)) end), V124 end(V84)) end end end end), V125 end(V73)) end end end end; _ -> fun (V126) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; _ -> fun (V127) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V128 end(V59)) end end end end end end end end end end end.
'nested--10633-13637--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Core.TT.SubRefl'} -> []; _ -> case V10 of [E0 | E1] -> (fun (V12, V13) -> case V11 of {'Core.TT.DropCons', V14} -> [{'Core.TT.Local', V6, {'Prelude.Types.Nothing'}, 0} | ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V15)) end))(('nested--10633-13637--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V14))))]; _ -> [] end end(E0, E1)); _ -> [] end end.
'nested--11077-13977--in--un--makeBoundVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> ('case--bindUnsolved,makeBoundVar-14027'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15, V14, V13, V12, V11, V10, V9, ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V15, V13)))).
'nested--12588-15309--in--un--liftImps\x{27}'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.TT.Bind', V7, V8, V9, V10} -> case V8 of {'Core.Name.PV', V11, V12} -> case V9 of {'Core.TT.Pi', V13, V14, V15, V16} -> case V15 of {'Core.TT.Implicit'} -> {'Core.TT.Bind', V7, {'Core.Name.PV', V11, V12}, V9, ('nested--12588-15309--in--un--liftImps\x{27}'(V0, V1, V2, V3, V4, [{'Core.Name.PV', V11, V12} | V5], V10))}; _ -> case V9 of {'Core.TT.Pi', V17, V18, V19, V20} -> ('un--push'(V5, V7, V8, V9, ('nested--12588-15309--in--un--liftImps\x{27}'(V0, V1, V2, V3, V4, [V8 | V5], V10)))); _ -> V6 end end; _ -> case V9 of {'Core.TT.Pi', V21, V22, V23, V24} -> ('un--push'(V5, V7, V8, V9, ('nested--12588-15309--in--un--liftImps\x{27}'(V0, V1, V2, V3, V4, [V8 | V5], V10)))); _ -> V6 end end; _ -> case V9 of {'Core.TT.Pi', V25, V26, V27, V28} -> ('un--push'(V5, V7, V8, V9, ('nested--12588-15309--in--un--liftImps\x{27}'(V0, V1, V2, V3, V4, [V8 | V5], V10)))); _ -> V6 end end; _ -> V6 end.
'nested--14564-17091--in--un--isIncompatible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V16, V17)) end end, 0, fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V18, V19)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V22, V23)) end end}}, V14)) of 1 -> 1; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V24, V25)) end end, 0, fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V26, V27)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V30, V31)) end end}}, V15)) end of 1 -> ('Idris.Idris2.Algebra.Preorder':'un--<'({'Builtin.MkPair', {'Algebra.Preorder.dn--un--__mkPreorder', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V32, V33)) end end, fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V34)) end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V35, V36, V37, V38, V39)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V42, V43)) end end}}, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V44, V45)) end end, 0, fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V46, V47)) end end, 1})), ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V14, V15)))); 0 -> 0 end.
'nested--13403-16038--in--un--insert'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> [V9 | []]; _ -> case V9 of {'Builtin.MkPair', V13, V14} -> case V12 of [E0 | E1] -> (fun (V15, V16) -> case V15 of {'Builtin.MkPair', V17, V18} -> begin (V50 = ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V19) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V31)) end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V35, V36, V37, V38)) end end end end end end end, fun (V39) -> fun (V40) -> V40 end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V43, V44, V45)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V48, V49)) end end}, V19, V10)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.TTImp.Elab.Check':'un--bindingMetas'(V18))))))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V53, V54, V55)) end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V62)) end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V66, V67, V68, V69)) end end end end end end end, fun (V70) -> fun (V71) -> V71 end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V74, V75, V76)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V77, V78)) end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V79, V80)) end end}, V13, V50)) of 1 -> [{'Builtin.MkPair', V13, V14} | [{'Builtin.MkPair', V17, V18} | V16]]; 0 -> [{'Builtin.MkPair', V17, V18} | ('nested--13403-16038--in--un--insert'(V0, V1, V2, V3, V4, V5, V6, V7, V8, {'Builtin.MkPair', V13, V14}, V10, [V17 | V11], V16))] end end end end(E0, E1)) end end end.
'nested--12678-15405--in--un--getBinds'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V7 of [] -> {'Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--refsToLocals'(V8, V9)), ('Idris.Idris2.Core.TT':'un--refsToLocals'(V8, V10))}; [E0 | E1] -> (fun (V11, V12) -> case V11 of {'Builtin.MkPair', V13, V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> case V16 of {'TTImp.Elab.Check.NameBinding', V17, V18, V19, V20, V21} -> case ('nested--12678-15405--in--un--getBinds'(V0, V1, V2, V3, V4, V5, V6, V12, {'Core.TT.Bounds.Add', V13, V15, V8}, V9, V10)) of {'Builtin.MkPair', V22, V23} -> begin (V24 = ('Idris.Idris2.Core.TT':'un--refsToLocals'(V8, V21))), case V5 of {'TTImp.TTImp.PI', V25} -> {'Builtin.MkPair', {'Core.TT.Bind', V6, V13, {'Core.TT.Pi', V6, V25, {'Core.TT.Implicit'}, V24}, V22}, {'Core.TT.TType', V6, {'Core.Name.MN', <<"top"/utf8>>, 0}}}; _ -> {'Builtin.MkPair', {'Core.TT.Bind', V6, V13, {'Core.TT.PVar', V6, V18, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_PiInfo'(fun (V26) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.Bounds':'un--sizeOf'(V8)), V26)) end, V19)), V24}, V22}, {'Core.TT.Bind', V6, V13, {'Core.TT.PVTy', V6, V18, V24}, V23}} end end end; {'TTImp.Elab.Check.AsBinding', V27, V28, V29, V30, V31, V32} -> case ('nested--12678-15405--in--un--getBinds'(V0, V1, V2, V3, V4, V5, V6, V12, {'Core.TT.Bounds.Add', V13, V15, V8}, V9, V10)) of {'Builtin.MkPair', V33, V34} -> begin (V35 = ('Idris.Idris2.Core.TT':'un--refsToLocals'(V8, V31))), begin (V36 = ('Idris.Idris2.Core.TT':'un--refsToLocals'(V8, V32))), {'Builtin.MkPair', {'Core.TT.Bind', V6, V13, {'Core.TT.PLet', V6, V28, V36, V35}, V33}, {'Core.TT.Bind', V6, V13, {'Core.TT.PLet', V6, V28, V36, V35}, V34}} end end end end end end end(E0, E1)) end.
'nested--13403-16039--in--un--depSort'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> []; [E0 | E1] -> (fun (V11, V12) -> ('nested--13403-16038--in--un--insert'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V9, [], ('nested--13403-16039--in--un--depSort'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12)))) end(E0, E1)) end.
'nested--14564-17092--in--un--combine'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case ('nested--14564-17091--in--un--isIncompatible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V15, V16)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.LinearUsed', V3, 2, V14}, V17)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end.
'nested--10633-13638--in--un--bindInner'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Core.TT.SubRefl'} -> {'Prelude.Types.Just', V12}; _ -> case V10 of [E0 | E1] -> (fun (V14, V15) -> case V11 of {'Core.Env.::', V16, V17} -> case V13 of {'Core.TT.DropCons', V18} -> ('nested--10633-13638--in--un--bindInner'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V15, V17, {'Core.TT.Bind', V6, V14, V16, V12}, V18)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end end.
'un--swapVars'(V0, V1) -> case V1 of {'Core.TT.Local', V2, V3, V4} -> begin (V5 = ('un--swapIsVar'(V0, V4))), {'Core.TT.Local', V2, V3, V5} end; {'Core.TT.Ref', V6, V7, V8} -> {'Core.TT.Ref', V6, V7, V8}; {'Core.TT.Meta', V9, V10, V11, V12} -> {'Core.TT.Meta', V9, V10, V11, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('un--swapVars'(V0, V13)) end))(V12))}; {'Core.TT.Bind', V21, V22, V23, V24} -> {'Core.TT.Bind', V21, V22, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V25) -> ('un--swapVars'(V0, V25)) end, V23)), ('un--swapVars'([V22 | V0], V24))}; {'Core.TT.App', V26, V27, V28} -> {'Core.TT.App', V26, ('un--swapVars'(V0, V27)), ('un--swapVars'(V0, V28))}; {'Core.TT.As', V29, V30, V31, V32} -> {'Core.TT.As', V29, V30, ('un--swapVars'(V0, V31)), ('un--swapVars'(V0, V32))}; {'Core.TT.TDelayed', V33, V34, V35} -> {'Core.TT.TDelayed', V33, V34, ('un--swapVars'(V0, V35))}; {'Core.TT.TDelay', V36, V37, V38, V39} -> {'Core.TT.TDelay', V36, V37, ('un--swapVars'(V0, V38)), ('un--swapVars'(V0, V39))}; {'Core.TT.TForce', V40, V41, V42} -> {'Core.TT.TForce', V40, V41, ('un--swapVars'(V0, V42))}; {'Core.TT.PrimVal', V43, V44} -> {'Core.TT.PrimVal', V43, V44}; {'Core.TT.Erased', V45, V46} -> case V46 of {'Core.TT.Impossible'} -> {'Core.TT.Erased', V45, {'Core.TT.Impossible'}}; {'Core.TT.Placeholder'} -> {'Core.TT.Erased', V45, {'Core.TT.Placeholder'}}; {'Core.TT.Dotted', V47} -> {'Core.TT.Erased', V45, {'Core.TT.Dotted', ('un--swapVars'(V0, V47))}} end; {'Core.TT.TType', V48, V49} -> {'Core.TT.TType', V48, V49} end.
'un--swapIsVarH'(V0) -> case V0 of 0 -> 1; _ -> begin (V1 = (V0 - 1)), ('nested--11825-14657--in--un--swapP'(V1, V0, V1)) end end.
'un--swapIsVar'(V0, V1) -> case V0 of [] -> ('un--swapIsVarH'(V1)); [E0 | E1] -> (fun (V2, V3) -> case V1 of 0 -> 0; _ -> begin (V4 = (V1 - 1)), begin (V5 = ('un--swapIsVar'(V3, V4))), (V5 + 1) end end end end(E0, E1)) end.
'un--solvePolyConstraint'(V0, V1, V2) -> case V2 of {'Core.UnifyState.MkPolyConstraint', V3, V4, V5, V6, V7, V8} -> begin (V14 = begin (V9 = V0), fun (V10) -> begin (V13 = (begin (V11 = V9), fun (V12) -> ('erlang':'get'(V11)) end end(V10))), {'Prelude.Types.Right', V13} end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V90 = begin (V19 = ('Idris.Idris2.Core.Normalise.Eval':'un--continueNF'(V0, V3, V18, V5, V7))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V89 = case V23 of {'Core.Value.NApp', V24, V25, V26} -> case V25 of {'Core.Value.NMeta', V27, V28, V29} -> fun (V30) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; _ -> begin (V53 = begin (V31 = ('Idris.Idris2.Core.Normalise.Eval':'un--continueNF'(V0, V3, V18, V5, V8))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V52 = ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V36, V37, V38, V39, V40, V41, V42, V43)) end end end end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V44, V45, V46, V47, V48, V49, V50, V51)) end end end end end end end end}, V3, V0, V1, ('Idris.Idris2.Core.Unify':'un--inLHS'()), V4, V5))(V23))(V35))), V52 end(V32)) end end end end), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V59 = fun (V58) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end), V59 end(V54)) end end end end end; _ -> begin (V82 = begin (V60 = ('Idris.Idris2.Core.Normalise.Eval':'un--continueNF'(V0, V3, V18, V5, V8))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V81 = ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V65, V66, V67, V68, V69, V70, V71, V72)) end end end end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V73, V74, V75, V76, V77, V78, V79, V80)) end end end end end end end end}, V3, V0, V1, ('Idris.Idris2.Core.Unify':'un--inLHS'()), V4, V5))(V23))(V64))), V81 end(V61)) end end end end), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V88 = fun (V87) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end), V88 end(V83)) end end end end end), V89 end(V20)) end end end end), V90 end(V15)) end end end end end.
'un--push'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Bind', V5, V6, V7, V8} -> case V6 of {'Core.Name.PV', V9, V10} -> case V7 of {'Core.TT.Pi', V11, V12, V13, V14} -> case V13 of {'Core.TT.Implicit'} -> begin (V15 = {'Core.TT.Bind', V5, {'Core.Name.PV', V9, V10}, {'Core.TT.Pi', V11, V12, {'Core.TT.Implicit'}, V14}, V8}), case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V14, {'Core.TT.DropCons', {'Core.TT.SubRefl'}})) of {'Prelude.Types.Nothing'} -> {'Core.TT.Bind', V1, V2, V3, V15}; {'Prelude.Types.Just', V16} -> {'Core.TT.Bind', V5, {'Core.Name.PV', V9, V10}, {'Core.TT.Pi', V11, V12, {'Core.TT.Implicit'}, V16}, ('un--push'([{'Core.Name.PV', V9, V10} | V0], V1, V2, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V17) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V17)) end, V3)), ('un--swapVars'([], V8))))} end end; _ -> {'Core.TT.Bind', V1, V2, V3, V4} end; _ -> {'Core.TT.Bind', V1, V2, V3, V4} end; _ -> {'Core.TT.Bind', V1, V2, V3, V4} end; _ -> {'Core.TT.Bind', V1, V2, V3, V4} end.
'un--normaliseType'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V5 = ('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--withHoles'()), V2, V3, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V10 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quoteOpts_Quote_NF'(V0, V1, {'Core.Normalise.Quote.MkQuoteOpts', 0, 0, {'Prelude.Types.Just', 5}}, V2, V3, V9))), V10 end(V6)) end end end end, fun (V11) -> ('Idris.Idris2.Core.Normalise':'un--normalise'(V0, V1, V2, V3, V4)) end)).
'un--mkPatternHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'TTImp.TTImp.PI', V10} -> begin (V11 = ('un--mkOuterHole'(V0, V1, V2, V3, V4, V5, V6, V7, V9))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V19 = fun (V16) -> case V15 of {'Builtin.MkPair', V17, V18} -> {'Prelude.Types.Right', {'Builtin.MkPair', V17, {'Builtin.MkPair', V18, V18}}} end end), V19 end(V12)) end end end end; _ -> case V9 of {'Prelude.Types.Just', V20} -> begin (V26 = begin (V21 = V1), fun (V22) -> begin (V25 = (begin (V23 = V21), fun (V24) -> ('erlang':'get'(V23)) end end(V22))), {'Prelude.Types.Right', V25} end end end), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V67 = begin (V45 = case V30 of {'TTImp.Elab.Check.MkEState', V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V34 end), begin (V60 = case V30 of {'TTImp.Elab.Check.MkEState', V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> V48 end), begin (V61 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V20))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V66 = ('case--mkPatternHole-13774'(V0, V20, V8, V7, V6, V5, V4, V3, V2, V1, V30, V45, V60, V65, ('nested--10633-13638--in--un--bindInner'(V0, V20, V8, V7, V6, V5, V4, V3, V2, V1, V0, V7, V65, V45))))), V66 end(V62)) end end end end end end), V67 end(V27)) end end end end; _ -> fun (V68) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V4, <<<<"Unknown type for pattern variable "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary>>}, V68)) end end end.
'un--mkOuterHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Prelude.Types.Just', V9} -> begin (V15 = begin (V10 = V1), fun (V11) -> begin (V14 = (begin (V12 = V10), fun (V13) -> ('erlang':'get'(V12)) end end(V11))), {'Prelude.Types.Right', V14} end end end), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V41 = begin (V34 = case V19 of {'TTImp.Elab.Check.MkEState', V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V23 end), begin (V35 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V9))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V40 = ('case--mkOuterHole-13339'(V0, V9, V7, V6, V5, V4, V3, V2, V1, V19, V34, V39, ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V39, V34))))), V40 end(V36)) end end end end end), V41 end(V16)) end end end end; {'Prelude.Types.Nothing'} -> begin (V47 = begin (V42 = V1), fun (V43) -> begin (V46 = (begin (V44 = V42), fun (V45) -> ('erlang':'get'(V44)) end end(V43))), {'Prelude.Types.Right', V46} end end end), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V156 = begin (V66 = case V51 of {'TTImp.Elab.Check.MkEState', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} -> V55 end), begin (V81 = case V51 of {'TTImp.Elab.Check.MkEState', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80} -> V69 end), begin (V82 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V2, V3, <<<<"type_of_"/utf8>>/binary, ('Idris.Idris2.Core.Name':'un--nameRoot'(V6))/binary>>))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V155 = begin (V87 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V2, V3, V4))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V154 = begin (V110 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(case V51 of {'TTImp.Elab.Check.MkEState', V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105} -> V92 end, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V106) -> fun (V107) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V106, V107)) end end, 0, fun (V108) -> fun (V109) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V108, V109)) end end, 1})), V81, V86, {'Core.TT.TType', V4, V91}))), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V153 = begin (V115 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"elab.implicits"/utf8>>, 10, fun () -> <<<<"Made metavariable for type of "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V86))/binary>>/binary>>/binary>> end))), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V152 = begin (V125 = begin (V120 = V1), fun (V121) -> begin (V124 = (begin (V122 = V120), fun (V123) -> ('erlang':'put'(V122, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V86, V5, {'Core.TT.Explicit'}, V7, ('Idris.Idris2.Core.TT':'un--embedSub'(V66, V114)), {'Core.TT.TType', V4, V91}, V51)))) end end(V121))), {'Prelude.Types.Right', V124} end end end), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V151 = begin (V144 = ('Idris.Idris2.TTImp.Elab.Check':'un--implBindVar'(case V51 of {'TTImp.Elab.Check.MkEState', V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143} -> V130 end, V2, V3, V4, V5, V81, V6, V114))), fun (V145) -> begin (V146 = (V144(V145))), case V146 of {'Prelude.Types.Left', V147} -> {'Prelude.Types.Left', V147}; {'Prelude.Types.Right', V148} -> (begin (V150 = fun (V149) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--embedSub'(V66, V148)), ('Idris.Idris2.Core.TT':'un--embedSub'(V66, V114))}} end), V150 end(V145)) end end end end), V151 end(V126)) end end end end), V152 end(V116)) end end end end), V153 end(V111)) end end end end), V154 end(V88)) end end end end), V155 end(V83)) end end end end end end), V156 end(V48)) end end end end end.
'un--liftImps'(V0, V1, V2) -> case V1 of {'TTImp.TTImp.PI', V3} -> case V2 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Core.TT.TType', V6, V7} -> {'Builtin.MkPair', ('nested--12588-15309--in--un--liftImps\x{27}'(V0, V3, V4, V7, V6, V0, V4)), {'Core.TT.TType', V6, V7}}; _ -> V2 end; _ -> V2 end; _ -> V2 end.
'un--implicitBind'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V63 = begin (V45 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V62 = case V49 of {'Prelude.Types.Just', V50} -> case V50 of {'Core.Context.Context.Hole', V51, V52} -> begin (V54 = ('Idris.Idris2.Core.Context':'un--updateDef'(V0, V2, fun (V53) -> {'Prelude.Types.Just', {'Core.Context.Context.ImpBind'}} end))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V59 = ('Idris.Idris2.Core.UnifyState':'un--removeHoleName'(V0, V1, V2))), V59 end(V55)) end end end end; _ -> fun (V60) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; _ -> fun (V61) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V62 end(V46)) end end end end), V63 end(V9)) end end end end.
'un--getToBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V6 of {'TTImp.TTImp.NONE'} -> fun (V9) -> {'Prelude.Types.Right', []} end; _ -> begin (V11 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, case V5 of {'TTImp.Elab.Check.InLHS', V10} -> ('Idris.Idris2.Core.Unify':'un--inLHS'()); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end, 0))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V156 = begin (V16 = ('un--bindUnsolved'(V0, V1, V2, V3, V4, V5, V6))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V155 = begin (V22 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, case V5 of {'TTImp.Elab.Check.InLHS', V21} -> ('Idris.Idris2.Core.Unify':'un--inLHS'()); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end, 0))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V154 = begin (V32 = begin (V27 = V1), fun (V28) -> begin (V31 = (begin (V29 = V27), fun (V30) -> ('erlang':'get'(V29)) end end(V28))), {'Prelude.Types.Right', V31} end end end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V153 = begin (V42 = begin (V37 = V2), fun (V38) -> begin (V41 = (begin (V39 = V37), fun (V40) -> ('erlang':'get'(V39)) end end(V38))), {'Prelude.Types.Right', V41} end end end), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V152 = begin (V92 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V47) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V50, V51, V52)) end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V59)) end end, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V63, V64, V65, V66)) end end end end end end end, fun (V67) -> fun (V68) -> V68 end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V71, V72, V73)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V76, V77)) end end}, ('Idris.Idris2.Builtin':'un--fst'(V47)), V8)) of 1 -> 0; 0 -> 1 end end, case V46 of {'TTImp.Elab.Check.MkEState', V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91} -> V83 end))))), begin (V93 = ('nested--13403-16037--in--un--normImps'(V8, V0, V7, V6, V5, V4, V3, V2, V1, V36, [], V92))), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V151 = begin (V106 = ((begin (V103 = fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V101, V102)) end end end end), fun (V104) -> fun (V105) -> ((((V103('erased'))('erased'))(V104))(V105)) end end end(fun (V98) -> ('Idris.Idris2.Builtin':'un--fst'(V98)) end))(V97))), begin (V107 = ('nested--13403-16039--in--un--depSort'(V8, V0, V7, V6, V5, V4, V3, V2, V1, V106, V97))), begin (V123 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.implicits"/utf8>>, 10, fun () -> <<<<"Bound names: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V108) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V109) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V110, V111)) end end}, {'Prelude.Show.MkShow', fun (V112) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V113, V114)) end end}}, V108)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V117) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V117)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V118, V119)) end end}, {'Prelude.Show.MkShow', fun (V120) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V120)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V121, V122)) end end}}, V115, V116)) end end}, V97))/binary>> end))), fun (V124) -> begin (V125 = (V123(V124))), case V125 of {'Prelude.Types.Left', V126} -> {'Prelude.Types.Left', V126}; {'Prelude.Types.Right', V127} -> (begin (V150 = begin (V143 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.implicits"/utf8>>, 10, fun () -> <<<<"Sorted: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V128) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V129) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V129)) end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V130, V131)) end end}, {'Prelude.Show.MkShow', fun (V132) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V132)) end, fun (V133) -> fun (V134) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V133, V134)) end end}}, V128)) end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V137) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V137)) end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V138, V139)) end end}, {'Prelude.Show.MkShow', fun (V140) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V140)) end, fun (V141) -> fun (V142) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V141, V142)) end end}}, V135, V136)) end end}, V107))/binary>> end))), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V149 = fun (V148) -> {'Prelude.Types.Right', V107} end), V149 end(V144)) end end end end), V150 end(V124)) end end end end end end), V151 end(V94)) end end end end end), V152 end(V43)) end end end end), V153 end(V33)) end end end end), V154 end(V23)) end end end end), V155 end(V17)) end end end end), V156 end(V12)) end end end end end.
'un--checkPolyConstraint'(V0, V1) -> case V1 of {'Core.UnifyState.MkPolyConstraint', V2, V3, V4, V5, V6, V7} -> begin (V13 = begin (V8 = V0), fun (V9) -> begin (V12 = (begin (V10 = V8), fun (V11) -> ('erlang':'get'(V10)) end end(V9))), {'Prelude.Types.Right', V12} end end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V53 = begin (V18 = ('Idris.Idris2.Core.Normalise.Eval':'un--continueNF'(V0, V2, V17, V4, V6))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V52 = case V22 of {'Core.Value.NApp', V23, V24, V25} -> case V24 of {'Core.Value.NMeta', V26, V27, V28} -> begin (V29 = ('Idris.Idris2.Core.Normalise.Eval':'un--continueNF'(V0, V2, V17, V4, V7))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V49 = begin (V34 = ('Idris.Idris2.TTImp.Elab.Check':'un--concrete'(V17, V4, V33))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V48 = case V38 of 1 -> begin (V40 = fun (V39) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V17, V39)) end), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V46 = fun (V45) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.MatchTooSpecific', V2, V3, V4, V5}, V45)) end), V46 end(V41)) end end end end; 0 -> fun (V47) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V48 end(V35)) end end end end), V49 end(V30)) end end end end; _ -> fun (V50) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; _ -> fun (V51) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V52 end(V19)) end end end end), V53 end(V14)) end end end end end.
'un--checkBindVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V20 = case V8 of {'TTImp.Elab.Check.MkElabInfo', V14, V15, V16, V17, V18, V19} -> V14 end), case case V8 of {'TTImp.Elab.Check.MkElabInfo', V21, V22, V23, V24, V25, V26} -> case V22 of {'TTImp.TTImp.PI', V27} -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V28) -> 1 end end, ('Idris.Idris2.Core.Env':'un--defined'(V0, {'Core.Name.UN', V12}, V10)))); _ -> 0 end end of 0 -> begin (V34 = begin (V29 = V4), fun (V30) -> begin (V33 = (begin (V31 = V29), fun (V32) -> ('erlang':'get'(V31)) end end(V30))), {'Prelude.Types.Right', V33} end end end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V109 = begin (V53 = {'Core.Name.PV', {'Core.Name.UN', V12}, case V38 of {'TTImp.Elab.Check.MkEState', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} -> V40 end}), begin (V54 = ('Idris.Idris2.TTImp.Elab.Check':'un--noteLHSPatVar'(V4, V20, {'Core.Name.UN', V12}))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V108 = begin (V59 = ('Idris.Idris2.TTImp.Elab.Check':'un--notePatVar'(V4, V53))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V107 = begin (V69 = begin (V64 = V4), fun (V65) -> begin (V68 = (begin (V66 = V64), fun (V67) -> ('erlang':'get'(V66)) end end(V65))), {'Prelude.Types.Right', V68} end end end), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V106 = begin (V82 = case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V11)) of {'Prelude.Types.Just', V74} -> begin (V75 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"ide-mode.highlight"/utf8>>, 7, fun () -> <<<<"getNameType is adding Bound: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V53))/binary>> end))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V80 = ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V2, V1, [{'Builtin.MkPair', V74, {'Builtin.MkPair', 5, {'Prelude.Types.Just', V53}}} | []]))), V80 end(V76)) end end end end; {'Prelude.Types.Nothing'} -> fun (V81) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V105 = ('case--case block in checkBindVar-17560'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V20, V38, V53, V73, ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V87, V88)) end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V89, V90)) end end}, V53, case V73 of {'TTImp.Elab.Check.MkEState', V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104} -> V95 end))))), V105 end(V83)) end end end end), V106 end(V70)) end end end end), V107 end(V60)) end end end end), V108 end(V55)) end end end end end), V109 end(V35)) end end end end; _ -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, {'TTImp.TTImp.IVar', V11, {'Core.Name.UN', V12}}, V13)) end end.
'un--checkBindHere'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V20 = begin (V15 = V4), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V428 = begin (V39 = case V24 of {'TTImp.Elab.Check.MkEState', V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} -> V27 end), begin (V54 = case V24 of {'TTImp.Elab.Check.MkEState', V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> V43 end), begin (V69 = case V24 of {'TTImp.Elab.Check.MkEState', V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68} -> V61 end), begin (V92 = ((begin (V89 = fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V87, V88)) end end end end), fun (V90) -> fun (V91) -> ((((V89('erased'))('erased'))(V90))(V91)) end end end(fun (V84) -> ('Idris.Idris2.Builtin':'un--fst'(V84)) end))(case V24 of {'TTImp.Elab.Check.MkEState', V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> V75 end))), begin (V98 = begin (V93 = V4), fun (V94) -> begin (V97 = (begin (V95 = V93), fun (V96) -> ('erlang':'put'(V95, ('Idris.Idris2.TTImp.Elab.Check':'un--updateEnv'(V0, V10, {'Core.TT.SubRefl'}, [], V24)))) end end(V94))), {'Prelude.Types.Right', V97} end end end), fun (V99) -> begin (V100 = (V98(V99))), case V100 of {'Prelude.Types.Left', V101} -> {'Prelude.Types.Left', V101}; {'Prelude.Types.Right', V102} -> (begin (V427 = begin (V103 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V1))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V426 = begin (V114 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, case V8 of {'TTImp.Elab.Check.MkElabInfo', V108, V109, V110, V111, V112, V113} -> {'TTImp.Elab.Check.MkElabInfo', V108, V12, V110, 1, V112, V113} end, V9, V10, V13, V14))), fun (V115) -> begin (V116 = (V114(V115))), case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> (begin (V425 = case V118 of {'Builtin.MkPair', V119, V120} -> begin (V128 = case V8 of {'TTImp.Elab.Check.MkElabInfo', V121, V122, V123, V124, V125, V126} -> case V121 of {'TTImp.Elab.Check.InLHS', V127} -> ('Idris.Idris2.Core.Unify':'un--inLHS'()); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end end), begin (V129 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V128, 0))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V424 = begin (V139 = begin (V134 = V3), fun (V135) -> begin (V138 = (begin (V136 = V134), fun (V137) -> ('erlang':'get'(V136)) end end(V135))), {'Prelude.Types.Right', V138} end end end), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V423 = begin (V192 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(('Idris.Idris2.TTImp.Elab.Delayed':'un--retryDelayed'(V0, V1, V2, V3, V4, V128, case V143 of {'Core.UnifyState.MkUState', V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155} -> V154 end)), fun (V156) -> begin (V185 = begin (V162 = begin (V157 = V3), fun (V158) -> begin (V161 = (begin (V159 = V157), fun (V160) -> ('erlang':'get'(V159)) end end(V158))), {'Prelude.Types.Right', V161} end end end), fun (V163) -> begin (V164 = (V162(V163))), case V164 of {'Prelude.Types.Left', V165} -> {'Prelude.Types.Left', V165}; {'Prelude.Types.Right', V166} -> (begin (V184 = begin (V167 = V3), fun (V168) -> begin (V183 = (begin (V169 = V167), fun (V170) -> ('erlang':'put'(V169, case V166 of {'Core.UnifyState.MkUState', V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182} -> {'Core.UnifyState.MkUState', V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, [], V182} end)) end end(V168))), {'Prelude.Types.Right', V183} end end end), V184 end(V163)) end end end end), fun (V186) -> begin (V187 = (V185(V186))), case V187 of {'Prelude.Types.Left', V188} -> {'Prelude.Types.Left', V188}; {'Prelude.Types.Right', V189} -> (begin (V191 = fun (V190) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V156, V190)) end), V191 end(V186)) end end end end end))), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V422 = begin (V202 = begin (V197 = V3), fun (V198) -> begin (V201 = (begin (V199 = V197), fun (V200) -> ('erlang':'get'(V199)) end end(V198))), {'Prelude.Types.Right', V201} end end end), fun (V203) -> begin (V204 = (V202(V203))), case V204 of {'Prelude.Types.Left', V205} -> {'Prelude.Types.Left', V205}; {'Prelude.Types.Right', V206} -> (begin (V421 = begin (V219 = case V206 of {'Core.UnifyState.MkUState', V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218} -> V213 end), begin (V237 = begin (V220 = V3), fun (V221) -> begin (V236 = (begin (V222 = V220), fun (V223) -> ('erlang':'put'(V222, case V206 of {'Core.UnifyState.MkUState', V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235} -> {'Core.UnifyState.MkUState', V224, V225, V226, V227, V228, V229, [], V231, V232, V233, V234, V235} end)) end end(V221))), {'Prelude.Types.Right', V236} end end end), fun (V238) -> begin (V239 = (V237(V238))), case V239 of {'Prelude.Types.Left', V240} -> {'Prelude.Types.Left', V240}; {'Prelude.Types.Right', V241} -> (begin (V420 = begin (V243 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V242) -> ('un--solvePolyConstraint'(V1, V3, V242)) end, V219))), fun (V244) -> begin (V245 = (V243(V244))), case V245 of {'Prelude.Types.Left', V246} -> {'Prelude.Types.Left', V246}; {'Prelude.Types.Right', V247} -> (begin (V419 = begin (V249 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V248) -> ('un--checkPolyConstraint'(V1, V248)) end, V219))), fun (V250) -> begin (V251 = (V249(V250))), case V251 of {'Prelude.Types.Left', V252} -> {'Prelude.Types.Left', V252}; {'Prelude.Types.Right', V253} -> (begin (V418 = begin (V261 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V1, V3, V107, case V8 of {'TTImp.Elab.Check.MkElabInfo', V254, V255, V256, V257, V258, V259} -> case V254 of {'TTImp.Elab.Check.InLHS', V260} -> ('Idris.Idris2.Core.Unify':'un--inLHS'()); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end end, 1))), fun (V262) -> begin (V263 = (V261(V262))), case V263 of {'Prelude.Types.Left', V264} -> {'Prelude.Types.Left', V264}; {'Prelude.Types.Right', V265} -> (begin (V417 = begin (V266 = ('Idris.Idris2.Core.Unify':'un--checkDots'(V3, V1))), fun (V267) -> begin (V268 = (V266(V267))), case V268 of {'Prelude.Types.Left', V269} -> {'Prelude.Types.Left', V269}; {'Prelude.Types.Right', V270} -> (begin (V416 = begin (V277 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, (begin (V272 = fun (V271) -> V271 end), fun (V273) -> (V272(V273)) end end(<<"elab.implicits"/utf8>>)), 5, fun () -> (begin (V275 = fun (V274) -> V274 end), fun (V276) -> (V275(V276)) end end(<<"Binding names"/utf8>>)) end, V119))), fun (V278) -> begin (V279 = (V277(V278))), case V279 of {'Prelude.Types.Left', V280} -> {'Prelude.Types.Left', V280}; {'Prelude.Types.Right', V281} -> (begin (V415 = begin (V288 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, (begin (V283 = fun (V282) -> V282 end), fun (V284) -> (V283(V284)) end end(<<"elab.implicits"/utf8>>)), 5, fun () -> (begin (V286 = fun (V285) -> V285 end), fun (V287) -> (V286(V287)) end end(<<"Normalised"/utf8>>)) end, V10, V119))), fun (V289) -> begin (V290 = (V288(V289))), case V290 of {'Prelude.Types.Left', V291} -> {'Prelude.Types.Left', V291}; {'Prelude.Types.Right', V292} -> (begin (V414 = begin (V299 = ('un--getToBind'(V0, V1, V4, V3, V11, case V8 of {'TTImp.Elab.Check.MkElabInfo', V293, V294, V295, V296, V297, V298} -> V293 end, V12, V10, V92))), fun (V300) -> begin (V301 = (V299(V300))), case V301 of {'Prelude.Types.Left', V302} -> {'Prelude.Types.Left', V302}; {'Prelude.Types.Right', V303} -> (begin (V413 = begin (V304 = ('Idris.Idris2.TTImp.Elab.Check':'un--clearToBind'(V4, V92))), fun (V305) -> begin (V306 = (V304(V305))), case V306 of {'Prelude.Types.Left', V307} -> {'Prelude.Types.Left', V307}; {'Prelude.Types.Right', V308} -> (begin (V412 = begin (V353 = begin (V314 = begin (V309 = V4), fun (V310) -> begin (V313 = (begin (V311 = V309), fun (V312) -> ('erlang':'get'(V311)) end end(V310))), {'Prelude.Types.Right', V313} end end end), fun (V315) -> begin (V316 = (V314(V315))), case V316 of {'Prelude.Types.Left', V317} -> {'Prelude.Types.Left', V317}; {'Prelude.Types.Right', V318} -> (begin (V352 = begin (V319 = V4), fun (V320) -> begin (V351 = (begin (V321 = V319), fun (V322) -> ('erlang':'put'(V321, ('Idris.Idris2.TTImp.Elab.Check':'un--updateEnv'(case V24 of {'TTImp.Elab.Check.MkEState', V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336} -> V323 end, V39, V54, V69, case V318 of {'TTImp.Elab.Check.MkEState', V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350} -> {'TTImp.Elab.Check.MkEState', V337, V338, V339, V340, [], V342, V343, V344, V345, V346, V347, V348, V349, V350} end)))) end end(V320))), {'Prelude.Types.Right', V351} end end end), V352 end(V315)) end end end end), fun (V354) -> begin (V355 = (V353(V354))), case V355 of {'Prelude.Types.Left', V356} -> {'Prelude.Types.Left', V356}; {'Prelude.Types.Right', V357} -> (begin (V411 = begin (V358 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V120))), fun (V359) -> begin (V360 = (V358(V359))), case V360 of {'Prelude.Types.Left', V361} -> {'Prelude.Types.Left', V361}; {'Prelude.Types.Right', V362} -> (begin (V410 = begin (V368 = begin (V363 = V1), fun (V364) -> begin (V367 = (begin (V365 = V363), fun (V366) -> ('erlang':'get'(V365)) end end(V364))), {'Prelude.Types.Right', V367} end end end), fun (V369) -> begin (V370 = (V368(V369))), case V370 of {'Prelude.Types.Left', V371} -> {'Prelude.Types.Left', V371}; {'Prelude.Types.Right', V372} -> (begin (V409 = begin (V386 = begin (V373 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V372, V10, V119))), fun (V374) -> begin (V375 = (V373(V374))), case V375 of {'Prelude.Types.Left', V376} -> {'Prelude.Types.Left', V376}; {'Prelude.Types.Right', V377} -> (begin (V385 = begin (V378 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V372, V10, V362))), fun (V379) -> begin (V380 = (V378(V379))), case V380 of {'Prelude.Types.Left', V381} -> {'Prelude.Types.Left', V381}; {'Prelude.Types.Right', V382} -> (begin (V384 = fun (V383) -> ('un--bindImplicits'(V1, V0, V11, V12, V372, V10, V303, V377, V382, V383)) end), V384 end(V379)) end end end end), V385 end(V374)) end end end end), fun (V387) -> begin (V388 = (V386(V387))), case V388 of {'Prelude.Types.Left', V389} -> {'Prelude.Types.Left', V389}; {'Prelude.Types.Right', V390} -> (begin (V408 = case V390 of {'Builtin.MkPair', V391, V392} -> begin (V402 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V393) -> ('un--implicitBind'(V1, V3, V393)) end, ((begin (V399 = fun (V395) -> fun (V396) -> fun (V397) -> fun (V398) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V397, V398)) end end end end), fun (V400) -> fun (V401) -> ((((V399('erased'))('erased'))(V400))(V401)) end end end(fun (V394) -> ('Idris.Idris2.Builtin':'un--fst'(V394)) end))(V303))))), fun (V403) -> begin (V404 = (V402(V403))), case V404 of {'Prelude.Types.Left', V405} -> {'Prelude.Types.Left', V405}; {'Prelude.Types.Right', V406} -> (begin (V407 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, V391, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V392)), V14))), V407 end(V403)) end end end end end), V408 end(V387)) end end end end), V409 end(V369)) end end end end), V410 end(V359)) end end end end), V411 end(V354)) end end end end), V412 end(V305)) end end end end), V413 end(V300)) end end end end), V414 end(V289)) end end end end), V415 end(V278)) end end end end), V416 end(V267)) end end end end), V417 end(V262)) end end end end), V418 end(V250)) end end end end), V419 end(V244)) end end end end), V420 end(V238)) end end end end end), V421 end(V203)) end end end end), V422 end(V193)) end end end end), V423 end(V140)) end end end end), V424 end(V130)) end end end end end end), V425 end(V115)) end end end end), V426 end(V104)) end end end end), V427 end(V99)) end end end end end end end end), V428 end(V21)) end end end end.
'un--bindUnsolved'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'TTImp.TTImp.NONE'} -> fun (V7) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; _ -> begin (V13 = begin (V8 = V2), fun (V9) -> begin (V12 = (begin (V10 = V8), fun (V11) -> ('erlang':'get'(V10)) end end(V9))), {'Prelude.Types.Right', V12} end end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V118 = begin (V23 = begin (V18 = V1), fun (V19) -> begin (V22 = (begin (V20 = V18), fun (V21) -> ('erlang':'get'(V20)) end end(V19))), {'Prelude.Types.Right', V22} end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V117 = begin (V42 = case V17 of {'TTImp.Elab.Check.MkEState', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V34 end), begin (V54 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.implicits"/utf8>>, 5, fun () -> <<<<"Bindable unsolved implicits: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V44, V45)) end end}, ((begin (V51 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V49, V50)) end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(fun (V46) -> ('Idris.Idris2.Builtin':'un--fst'(V46)) end))(V42))))/binary>> end))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V116 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V59) -> ('nested--11077-13978--in--un--mkImplicit'(V6, V5, V4, V3, V0, V2, V1, case V17 of {'TTImp.Elab.Check.MkEState', V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> V60 end, V27, case V17 of {'TTImp.Elab.Check.MkEState', V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} -> V76 end, case V17 of {'TTImp.Elab.Check.MkEState', V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101} -> V91 end, V59)) end, case V17 of {'TTImp.Elab.Check.MkEState', V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115} -> V108 end))), V116 end(V55)) end end end end end), V117 end(V24)) end end end end), V118 end(V14)) end end end end end.
'un--bindImplicits'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V3 of {'TTImp.TTImp.NONE'} -> {'Prelude.Types.Right', {'Builtin.MkPair', V7, V8}}; _ -> {'Prelude.Types.Right', ('un--liftImps'(V1, V3, ('un--bindImplVars'(V2, V3, V4, V5, V6, V7, V8))))} end.
'un--bindImplVars'(V0, V1, V2, V3, V4, V5, V6) -> case V1 of {'TTImp.TTImp.NONE'} -> {'Builtin.MkPair', V5, V6}; _ -> begin (V17 = ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', ('nested--12678-15404--in--un--tidyName'(V6, V5, V4, V3, V2, V1, V0, V8)), {'Builtin.MkPair', V8, V9}} end end))(V4))), ('nested--12678-15405--in--un--getBinds'(V6, V5, V4, V3, V2, V1, V0, V17, {'Core.TT.Bounds.None'}, V5, V6)) end end.
