-module('Idris.Idris2.Core.Context.Context').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--compare-5589'/5,
  'case--compare-5556'/5,
  'dn--un--show_Show_SizeChange'/1,
  'dn--un--show_Show_SCCall'/1,
  'dn--un--show_Show_DefFlag'/1,
  'dn--un--show_Show_Def'/1,
  'dn--un--show_Show_Clause'/1,
  'dn--un--showPrec_Show_SizeChange'/2,
  'dn--un--showPrec_Show_SCCall'/2,
  'dn--un--showPrec_Show_DefFlag'/2,
  'dn--un--showPrec_Show_Def'/2,
  'dn--un--showPrec_Show_Clause'/2,
  'dn--un--min_Ord_UConstraint'/2,
  'dn--un--max_Ord_UConstraint'/2,
  'dn--un--compare_Ord_UConstraint'/2,
  'dn--un--__Impl_Show_SizeChange'/0,
  'dn--un--__Impl_Show_SCCall'/0,
  'dn--un--__Impl_Show_DefFlag'/0,
  'dn--un--__Impl_Show_Def'/0,
  'dn--un--__Impl_Show_Clause'/0,
  'dn--un--__Impl_Ord_UConstraint'/0,
  'dn--un--__Impl_Eq_UConstraint'/0,
  'dn--un--__Impl_Eq_SizeChange'/0,
  'dn--un--__Impl_Eq_SchemeMode'/0,
  'dn--un--__Impl_Eq_SCCall'/0,
  'dn--un--__Impl_Eq_DefFlag'/0,
  'dn--un-->_Ord_UConstraint'/2,
  'dn--un-->=_Ord_UConstraint'/2,
  'dn--un--==_Eq_UConstraint'/2,
  'dn--un--==_Eq_SizeChange'/2,
  'dn--un--==_Eq_SchemeMode'/2,
  'dn--un--==_Eq_SCCall'/2,
  'dn--un--==_Eq_DefFlag'/2,
  'dn--un--<_Ord_UConstraint'/2,
  'dn--un--<=_Ord_UConstraint'/2,
  'dn--un--/=_Eq_UConstraint'/2,
  'dn--un--/=_Eq_SizeChange'/2,
  'dn--un--/=_Eq_SchemeMode'/2,
  'dn--un--/=_Eq_SCCall'/2,
  'dn--un--/=_Eq_DefFlag'/2,
  'un--refersToRuntime'/1,
  'un--refersTo'/1,
  'un--holeInit'/1,
  'un--gDefKindedName'/1,
  'un--findSetTotal'/1,
  'un--defaultPI'/0,
  'un--defaultFlags'/0,
  'un--defNameType'/1
]).
'case--compare-5589'(V0, V1, V2, V3, V4) -> case V4 of 1 -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V0, V2)); _ -> V4 end.
'case--compare-5556'(V0, V1, V2, V3, V4) -> case V4 of 1 -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V0, V2)); _ -> V4 end.
'dn--un--show_Show_SizeChange'(V0) -> case V0 of 0 -> <<"Smaller"/utf8>>; 1 -> <<"Same"/utf8>>; 2 -> <<"Unknown"/utf8>> end.
'dn--un--show_Show_SCCall'(V0) -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V0 of {'Core.Context.Context.MkSCCall', V1, V2} -> V1 end))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V6, V7)) end end}, {'Prelude.Show.MkShow', fun (V8) -> ('dn--un--show_Show_SizeChange'(V8)) end, fun (V9) -> fun (V10) -> ('dn--un--showPrec_Show_SizeChange'(V9, V10)) end end}}, V4)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V14, V15)) end end}, {'Prelude.Show.MkShow', fun (V16) -> ('dn--un--show_Show_SizeChange'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--showPrec_Show_SizeChange'(V17, V18)) end end}}, V11, V12)) end end}, V3)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V23, V24)) end end}, {'Prelude.Show.MkShow', fun (V25) -> ('dn--un--show_Show_SizeChange'(V25)) end, fun (V26) -> fun (V27) -> ('dn--un--showPrec_Show_SizeChange'(V26, V27)) end end}}, V21)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V31, V32)) end end}, {'Prelude.Show.MkShow', fun (V33) -> ('dn--un--show_Show_SizeChange'(V33)) end, fun (V34) -> fun (V35) -> ('dn--un--showPrec_Show_SizeChange'(V34, V35)) end end}}, V28, V29)) end end}, V19, V20)) end end}, case V0 of {'Core.Context.Context.MkSCCall', V36, V37} -> V37 end))/binary>>/binary>>.
'dn--un--show_Show_DefFlag'(V0) -> case V0 of {'Core.Context.Context.Inline'} -> <<"inline"/utf8>>; {'Core.Context.Context.NoInline'} -> <<"noinline"/utf8>>; {'Core.Context.Context.Deprecate'} -> <<"deprecate"/utf8>>; {'Core.Context.Context.Invertible'} -> <<"invertible"/utf8>>; {'Core.Context.Context.Overloadable'} -> <<"overloadable"/utf8>>; {'Core.Context.Context.TCInline'} -> <<"tcinline"/utf8>>; {'Core.Context.Context.SetTotal', V1} -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V1)); {'Core.Context.Context.BlockedHint'} -> <<"blockedhint"/utf8>>; {'Core.Context.Context.Macro'} -> <<"macro"/utf8>>; {'Core.Context.Context.PartialEval', V2} -> <<"partialeval"/utf8>>; {'Core.Context.Context.AllGuarded'} -> <<"allguarded"/utf8>>; {'Core.Context.Context.ConType', V3} -> <<<<"contype "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_ConInfo'(V3))/binary>>; {'Core.Context.Context.Identity', V4} -> <<<<"identity "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4))/binary>> end.
'dn--un--show_Show_Def'(V0) -> case V0 of {'Core.Context.Context.None'} -> <<"undefined"/utf8>>; {'Core.Context.Context.PMDef', V1, V2, V3, V4, V5} -> ('Idris.Idris2.Data.String':'un--fastUnlines'([<<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V7, V8)) end end}, V2))/binary, <<";"/utf8>>/binary>> | [<<<<"Compile time tree: "/utf8>>/binary, ('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V2, V3))/binary>> | [<<<<"Run time tree: "/utf8>>/binary, ('Idris.Idris2.Core.Case.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V2, V4))/binary>> | []]]])); {'Core.Context.Context.DCon', V9, V10, V11} -> <<<<"DataCon "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V10))/binary, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V12) -> <<<<" (newtype by "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Bool'(V14, V15)) end end}, {'Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V17, V18)) end end}}, V12))/binary, <<")"/utf8>>/binary>>/binary>> end end, V11))/binary>>/binary>>/binary>>/binary>>; {'Core.Context.Context.TCon', V19, V20, V21, V22, V23, V24, V25, V26} -> <<<<"TyCon "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V20))/binary, <<<<" params: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V28, V29)) end end}, V21))/binary, <<<<" constructors: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V31, V32)) end end}, V25))/binary, <<<<" mutual with: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V34, V35)) end end}, V24))/binary, <<<<" detaggable by: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V38, V39)) end end}, V36)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V43, V44)) end end}, V40, V41)) end end}, V26))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Context.Context.ExternDef', V45} -> <<<<"<external def with arity "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V45))/binary, <<">"/utf8>>/binary>>/binary>>; {'Core.Context.Context.ForeignDef', V46, V47} -> <<<<"<foreign def with arity "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V46))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V49, V50)) end end}, V47))/binary, <<">"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Core.Context.Context.Builtin', V51, V52} -> <<<<"<builtin with arith "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V51))/binary, <<">"/utf8>>/binary>>/binary>>; {'Core.Context.Context.Hole', V53, V54} -> <<<<"Hole"/utf8>>/binary, case case V54 of {'Core.Context.Context.MkHoleFlags', V55, V56} -> V55 end of 1 -> <<" [impl]"/utf8>>; 0 -> <<""/utf8>> end/binary>>; {'Core.Context.Context.BySearch', V57, V58, V59} -> <<<<"Search in "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V59))/binary>>; {'Core.Context.Context.Guess', V60, V61, V62} -> <<<<"Guess "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V60))/binary, <<<<" when "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V64, V65)) end end}, V62))/binary>>/binary>>/binary>>; {'Core.Context.Context.UniverseLevel', V66} -> <<<<"Universe level #"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V66))/binary>>; {'Core.Context.Context.ImpBind'} -> <<"Bound name"/utf8>>; {'Core.Context.Context.Delayed'} -> <<"Delayed"/utf8>> end.
'dn--un--show_Show_Clause'(V0) -> case V0 of {'Core.Context.Context.MkClause', V1, V2, V3, V4} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V6, V7)) end end}, V1))/binary, <<<<": "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V3))/binary, <<<<" = "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V4))/binary>>/binary>>/binary>>/binary>> end.
'dn--un--showPrec_Show_SizeChange'(V0, V1) -> ('dn--un--show_Show_SizeChange'(V1)).
'dn--un--showPrec_Show_SCCall'(V0, V1) -> ('dn--un--show_Show_SCCall'(V1)).
'dn--un--showPrec_Show_DefFlag'(V0, V1) -> ('dn--un--show_Show_DefFlag'(V1)).
'dn--un--showPrec_Show_Def'(V0, V1) -> ('dn--un--show_Show_Def'(V1)).
'dn--un--showPrec_Show_Clause'(V0, V1) -> ('dn--un--show_Show_Clause'(V1)).
'dn--un--min_Ord_UConstraint'(V0, V1) -> case ('dn--un--<_Ord_UConstraint'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_UConstraint'(V0, V1) -> case ('dn--un-->_Ord_UConstraint'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--compare_Ord_UConstraint'(V0, V1) -> case V0 of {'Core.Context.Context.ULE', V2, V3} -> case V1 of {'Core.Context.Context.ULT', V4, V5} -> 0; {'Core.Context.Context.ULE', V6, V7} -> ('case--compare-5556'(V3, V2, V7, V6, ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V2, V6)))) end; {'Core.Context.Context.ULT', V8, V9} -> case V1 of {'Core.Context.Context.ULE', V10, V11} -> 2; {'Core.Context.Context.ULT', V12, V13} -> ('case--compare-5589'(V9, V8, V13, V12, ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V8, V12)))) end end.
'dn--un--__Impl_Show_SizeChange'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_SizeChange'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SizeChange'(V1, V2)) end end}.
'dn--un--__Impl_Show_SCCall'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_SCCall'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SCCall'(V1, V2)) end end}.
'dn--un--__Impl_Show_DefFlag'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_DefFlag'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_DefFlag'(V1, V2)) end end}.
'dn--un--__Impl_Show_Def'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Def'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Def'(V1, V2)) end end}.
'dn--un--__Impl_Show_Clause'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Clause'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Clause'(V1, V2)) end end}.
'dn--un--__Impl_Ord_UConstraint'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_UConstraint'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_UConstraint'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_UConstraint'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_UConstraint'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_UConstraint'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_UConstraint'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_UConstraint'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_UConstraint'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_UConstraint'(V16, V17)) end end}.
'dn--un--__Impl_Eq_UConstraint'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_UConstraint'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_UConstraint'(V2, V3)) end end}.
'dn--un--__Impl_Eq_SizeChange'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_SizeChange'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_SizeChange'(V2, V3)) end end}.
'dn--un--__Impl_Eq_SchemeMode'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_SchemeMode'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_SchemeMode'(V2, V3)) end end}.
'dn--un--__Impl_Eq_SCCall'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_SCCall'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_SCCall'(V2, V3)) end end}.
'dn--un--__Impl_Eq_DefFlag'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DefFlag'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DefFlag'(V2, V3)) end end}.
'dn--un-->_Ord_UConstraint'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_UConstraint'(V0, V1)), 2)).
'dn--un-->=_Ord_UConstraint'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_UConstraint'(V0, V1)), 0)).
'dn--un--==_Eq_UConstraint'(V0, V1) -> case V0 of {'Core.Context.Context.ULE', V2, V3} -> case V1 of {'Core.Context.Context.ULE', V4, V5} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, V4)) of 1 -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V3, V5)); 0 -> 0 end; _ -> 0 end; {'Core.Context.Context.ULT', V6, V7} -> case V1 of {'Core.Context.Context.ULT', V8, V9} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6, V8)) of 1 -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V9)); 0 -> 0 end; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_SizeChange'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_SchemeMode'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_SCCall'(V0, V1) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(case V0 of {'Core.Context.Context.MkSCCall', V2, V3} -> V2 end, case V1 of {'Core.Context.Context.MkSCCall', V4, V5} -> V4 end)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> case (V10 =:= V11) of 'false' -> 0; _ -> 1 end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V12, V13)) end end}, {'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('dn--un--==_Eq_SizeChange'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--/=_Eq_SizeChange'(V16, V17)) end end}, V8, V9)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> case (V20 =:= V21) of 'false' -> 0; _ -> 1 end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V22, V23)) end end}, {'Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('dn--un--==_Eq_SizeChange'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('dn--un--/=_Eq_SizeChange'(V26, V27)) end end}, V18, V19)) end end}, V6, V7)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> case (V32 =:= V33) of 'false' -> 0; _ -> 1 end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V34, V35)) end end}, {'Prelude.EqOrd.MkEq', fun (V36) -> fun (V37) -> ('dn--un--==_Eq_SizeChange'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('dn--un--/=_Eq_SizeChange'(V38, V39)) end end}, V30, V31)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> case (V42 =:= V43) of 'false' -> 0; _ -> 1 end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V44, V45)) end end}, {'Prelude.EqOrd.MkEq', fun (V46) -> fun (V47) -> ('dn--un--==_Eq_SizeChange'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('dn--un--/=_Eq_SizeChange'(V48, V49)) end end}, V40, V41)) end end}, V28, V29)) end end}, case V0 of {'Core.Context.Context.MkSCCall', V50, V51} -> V51 end, case V1 of {'Core.Context.Context.MkSCCall', V52, V53} -> V53 end)); 0 -> 0 end.
'dn--un--==_Eq_DefFlag'(V0, V1) -> case V0 of {'Core.Context.Context.Inline'} -> case V1 of {'Core.Context.Context.Inline'} -> 1; _ -> 0 end; {'Core.Context.Context.NoInline'} -> case V1 of {'Core.Context.Context.NoInline'} -> 1; _ -> 0 end; {'Core.Context.Context.Deprecate'} -> case V1 of {'Core.Context.Context.Deprecate'} -> 1; _ -> 0 end; {'Core.Context.Context.Invertible'} -> case V1 of {'Core.Context.Context.Invertible'} -> 1; _ -> 0 end; {'Core.Context.Context.Overloadable'} -> case V1 of {'Core.Context.Context.Overloadable'} -> 1; _ -> 0 end; {'Core.Context.Context.TCInline'} -> case V1 of {'Core.Context.Context.TCInline'} -> 1; _ -> 0 end; {'Core.Context.Context.SetTotal', V2} -> case V1 of {'Core.Context.Context.SetTotal', V3} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_TotalReq'(V2, V3)); _ -> 0 end; {'Core.Context.Context.BlockedHint'} -> case V1 of {'Core.Context.Context.BlockedHint'} -> 1; _ -> 0 end; {'Core.Context.Context.Macro'} -> case V1 of {'Core.Context.Context.Macro'} -> 1; _ -> 0 end; {'Core.Context.Context.PartialEval', V4} -> case V1 of {'Core.Context.Context.PartialEval', V5} -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V10, V11)) end end}, {'Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> case (V12 =:= V13) of 'false' -> 0; _ -> 1 end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V14, V15)) end end}, V6, V7)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V20, V21)) end end}, {'Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> case (V22 =:= V23) of 'false' -> 0; _ -> 1 end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V24, V25)) end end}, V16, V17)) end end}, V4, V5)); _ -> 0 end; {'Core.Context.Context.AllGuarded'} -> case V1 of {'Core.Context.Context.AllGuarded'} -> 1; _ -> 0 end; {'Core.Context.Context.ConType', V26} -> case V1 of {'Core.Context.Context.ConType', V27} -> ('Idris.Idris2.Core.CompileExpr':'dn--un--==_Eq_ConInfo'(V26, V27)); _ -> 0 end; {'Core.Context.Context.Identity', V28} -> case V1 of {'Core.Context.Context.Identity', V29} -> case (V28 =:= V29) of 'false' -> 0; _ -> 1 end; _ -> 0 end; _ -> 0 end.
'dn--un--<_Ord_UConstraint'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_UConstraint'(V0, V1)), 0)).
'dn--un--<=_Ord_UConstraint'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_UConstraint'(V0, V1)), 2)).
'dn--un--/=_Eq_UConstraint'(V0, V1) -> case ('dn--un--==_Eq_UConstraint'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_SizeChange'(V0, V1) -> case ('dn--un--==_Eq_SizeChange'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_SchemeMode'(V0, V1) -> case ('dn--un--==_Eq_SchemeMode'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_SCCall'(V0, V1) -> case ('dn--un--==_Eq_SCCall'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_DefFlag'(V0, V1) -> case ('dn--un--==_Eq_DefFlag'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--refersToRuntime'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()) end, fun () -> fun (V1) -> V1 end end, case V0 of {'Core.Context.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23} -> V15 end)).
'un--refersTo'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()) end, fun () -> fun (V1) -> V1 end end, case V0 of {'Core.Context.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23} -> V14 end)).
'un--holeInit'(V0) -> {'Core.Context.Context.MkHoleFlags', V0, 0}.
'un--gDefKindedName'(V0) -> begin (V23 = case V0 of {'Core.Context.Context.MkGlobalDef', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22} -> V2 end), {'Core.TT.MkKindedName', ('un--defNameType'(case V0 of {'Core.Context.Context.MkGlobalDef', V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V41 end)), V23, V23} end.
'un--findSetTotal'(V0) -> case V0 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Core.Context.Context.SetTotal', V3} -> {'Prelude.Types.Just', V3}; _ -> ('un--findSetTotal'(V2)) end end(E0, E1)) end.
'un--defaultPI'() -> {'Core.Context.Context.MkPMDefInfo', {'Core.Context.Context.NotHole'}, 0, 0}.
'un--defaultFlags'() -> {'Core.Context.Context.MkTypeFlags', 0, 0}.
'un--defNameType'(V0) -> case V0 of {'Core.Context.Context.None'} -> {'Prelude.Types.Nothing'}; {'Core.Context.Context.PMDef', V1, V2, V3, V4, V5} -> {'Prelude.Types.Just', {'Core.TT.Func'}}; {'Core.Context.Context.ExternDef', V6} -> {'Prelude.Types.Just', {'Core.TT.Func'}}; {'Core.Context.Context.ForeignDef', V7, V8} -> {'Prelude.Types.Just', {'Core.TT.Func'}}; {'Core.Context.Context.Builtin', V9, V10} -> {'Prelude.Types.Just', {'Core.TT.Func'}}; {'Core.Context.Context.DCon', V11, V12, V13} -> {'Prelude.Types.Just', {'Core.TT.DataCon', V11, V12}}; {'Core.Context.Context.TCon', V14, V15, V16, V17, V18, V19, V20, V21} -> {'Prelude.Types.Just', {'Core.TT.TyCon', V14, V15}}; {'Core.Context.Context.Hole', V22, V23} -> {'Prelude.Types.Just', {'Core.TT.Func'}}; {'Core.Context.Context.BySearch', V24, V25, V26} -> {'Prelude.Types.Nothing'}; {'Core.Context.Context.Guess', V27, V28, V29} -> {'Prelude.Types.Nothing'}; {'Core.Context.Context.ImpBind'} -> {'Prelude.Types.Just', {'Core.TT.Bound'}}; {'Core.Context.Context.UniverseLevel', V30} -> {'Prelude.Types.Nothing'}; {'Core.Context.Context.Delayed'} -> {'Prelude.Types.Nothing'} end.
