-module('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--9007-2731--in--un--intToInt'/5,
  'un--traverseVect'/5,
  'un--readExports'/3,
  'un--readConAltFun'/6,
  'un--readConAlt'/7,
  'un--precToNat'/1,
  'un--internalArity'/1,
  'un--genSub'/5,
  'un--genShl'/5,
  'un--genPrimType'/1,
  'un--genOp'/4,
  'un--genNmExp'/5,
  'un--genMul'/5,
  'un--genForeign'/5,
  'un--genExtPrim'/6,
  'un--genDiv'/5,
  'un--genDef'/5,
  'un--genDecodeTuple'/4,
  'un--genDecode'/4,
  'un--genConstant'/1,
  'un--genConstAlt'/5,
  'un--genConAlt'/6,
  'un--genCon'/5,
  'un--genBoundedInt'/4,
  'un--genAdd'/5,
  'un--externalArity'/1,
  'un--constPrimitives'/2,
  'un--argsToErlMatchers'/1
]).
'nested--9007-2731--in--un--intToInt'(V0, V1, V2, V3, V4) -> case V3 of {'Core.TT.Signed', V5} -> case V5 of {'Core.TT.Unlimited'} -> fun (V6) -> {'Prelude.Types.Right', V4} end; _ -> case V2 of {'Core.TT.Signed', V7} -> case V3 of {'Core.TT.Signed', V8} -> case V8 of {'Core.TT.P', V9} -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'({'Core.TT.P', V9}, V7)) of 1 -> fun (V10) -> {'Prelude.Types.Right', V4} end; 0 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genToBoundedSignedInt'(V1, V0, ('un--precToNat'(V9)), V4)) end end; {'Core.TT.Unsigned', V11} -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genToBoundedUnsignedInt'(V1, V0, ('un--precToNat'(V11)), V4)) end; {'Core.TT.Unsigned', V12} -> case V3 of {'Core.TT.Signed', V13} -> case V13 of {'Core.TT.P', V14} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V14, V12)) of 1 -> fun (V15) -> {'Prelude.Types.Right', V4} end; 0 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genToBoundedSignedInt'(V1, V0, ('un--precToNat'(V14)), V4)) end end; {'Core.TT.Unsigned', V16} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V16, V12)) of 1 -> fun (V17) -> {'Prelude.Types.Right', V4} end; 0 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genToBoundedUnsignedInt'(V1, V0, ('un--precToNat'(V16)), V4)) end end end end; _ -> case V2 of {'Core.TT.Signed', V18} -> case V3 of {'Core.TT.Signed', V19} -> case V19 of {'Core.TT.P', V20} -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'({'Core.TT.P', V20}, V18)) of 1 -> fun (V21) -> {'Prelude.Types.Right', V4} end; 0 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genToBoundedSignedInt'(V1, V0, ('un--precToNat'(V20)), V4)) end end; {'Core.TT.Unsigned', V22} -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genToBoundedUnsignedInt'(V1, V0, ('un--precToNat'(V22)), V4)) end; {'Core.TT.Unsigned', V23} -> case V3 of {'Core.TT.Signed', V24} -> case V24 of {'Core.TT.P', V25} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V25, V23)) of 1 -> fun (V26) -> {'Prelude.Types.Right', V4} end; 0 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genToBoundedSignedInt'(V1, V0, ('un--precToNat'(V25)), V4)) end end; {'Core.TT.Unsigned', V27} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V27, V23)) of 1 -> fun (V28) -> {'Prelude.Types.Right', V4} end; 0 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genToBoundedUnsignedInt'(V1, V0, ('un--precToNat'(V27)), V4)) end end end end.
'un--traverseVect'(V0, V1, V2, V3, V4) -> case V4 of {'Data.Vect.Nil'} -> fun (V5) -> {'Prelude.Types.Right', {'Data.Vect.Nil'}} end; {'Data.Vect.::', V6, V7} -> begin (V8 = ('un--genNmExp'(V0, V1, V2, V3, V6))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V20 = begin (V13 = ('un--traverseVect'(V0, V1, V2, V3, V7))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = fun (V18) -> {'Prelude.Types.Right', {'Data.Vect.::', V12, V17}} end), V19 end(V14)) end end end end), V20 end(V9)) end end end end end.
'un--readExports'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.NmCon', V3, V4, V5, V6, V7} -> case V4 of {'Core.Name.NS', V8, V9} -> case V9 of {'Core.Name.UN', V10} -> case V10 of {'Core.Name.Basic', V11} -> case V11 of <<"Fun"/utf8>> -> case V7 of [E0 | E1] -> (fun (V12, V13) -> case V13 of [E2 | E3] -> (fun (V14, V15) -> case V14 of {'Core.CompileExpr.NmPrimVal', V16, V17} -> case V17 of {'Core.TT.Str', V18} -> case V15 of [E4 | E5] -> (fun (V19, V20) -> case V20 of [] -> begin (V21 = {'Core.CompileExpr.NmCon', V3, {'Core.Name.NS', V8, {'Core.Name.UN', {'Core.Name.Basic', <<"Fun"/utf8>>}}}, V5, V6, [V12 | [{'Core.CompileExpr.NmPrimVal', V16, {'Core.TT.Str', V18}} | [V19 | []]]]}), case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V8, ('Idris.Idris2.Compiler.Erlang.Name':'un--erlangIONS'()))) of 1 -> begin (V22 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport.LV'}, ('Idris.Idris2.Compiler.Erlang.IR.ErlExpr.LocalVars':'un--initLocalVars'(<<"V"/utf8>>))))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V45 = begin (V27 = ('un--genNmExp'(V26, 0, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V19))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V44 = begin (V32 = ('un--internalArity'(V12))), begin (V33 = ('un--externalArity'(V32))), begin (V34 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVars'(V26, V33))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V43 = begin (V40 = case V32 of {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} -> V31; {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', V39} -> {'Compiler.Erlang.IR.ErlExpr.EApp', V1, V31, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genArgsToLocals'(V1, V38))} end), begin (V41 = {'Compiler.Erlang.IR.ErlExpr.MkFunDecl', V1, 1, V18, V38, V40}), fun (V42) -> {'Prelude.Types.Right', [V41 | []]} end end end), V43 end(V35)) end end end end end end), V44 end(V28)) end end end end), V45 end(V23)) end end end end; 0 -> fun (V46) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V21))/binary>>}, V46)) end end end; _ -> fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V47)) end end end(E4, E5)); _ -> fun (V48) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V48)) end end; _ -> fun (V49) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V49)) end end; _ -> fun (V50) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V50)) end end end(E2, E3)); _ -> fun (V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V51)) end end end(E0, E1)); _ -> fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V52)) end end; <<"Combine"/utf8>> -> case V7 of [E6 | E7] -> (fun (V53, V54) -> case V54 of [E8 | E9] -> (fun (V55, V56) -> case V56 of [] -> begin (V57 = {'Core.CompileExpr.NmCon', V3, {'Core.Name.NS', V8, {'Core.Name.UN', {'Core.Name.Basic', <<"Combine"/utf8>>}}}, V5, V6, [V53 | [V55 | []]]}), case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V8, ('Idris.Idris2.Compiler.Erlang.Name':'un--erlangIONS'()))) of 1 -> begin (V58 = ('un--readExports'(V0, V1, V53))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V70 = begin (V63 = ('un--readExports'(V0, V1, V55))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V69 = fun (V68) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V62, V67))} end), V69 end(V64)) end end end end), V70 end(V59)) end end end end; 0 -> fun (V71) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V57))/binary>>}, V71)) end end end; _ -> fun (V72) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V72)) end end end(E8, E9)); _ -> fun (V73) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V73)) end end end(E6, E7)); _ -> fun (V74) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V74)) end end; _ -> fun (V75) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V75)) end end; _ -> fun (V76) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V76)) end end; _ -> fun (V77) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V77)) end end; _ -> fun (V78) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V78)) end end; _ -> fun (V79) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Invalid export: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))/binary>>}, V79)) end end.
'un--readConAltFun'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V19 = begin (V11 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genCurry'(V0, V1, V2, V5, {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V10}))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V18 = begin (V16 = {'Compiler.Erlang.IR.ErlExpr.MTransform', {'Compiler.Erlang.IR.ErlExpr.MAny'}, V10, V15}), fun (V17) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTransform', V16, V3, V4}} end end), V18 end(V12)) end end end end), V19 end(V7)) end end end end.
'un--readConAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Core.Name.NS', V7, V8} -> case V8 of {'Core.Name.UN', V9} -> case V9 of {'Core.Name.Basic', V10} -> begin (V11 = {'Core.Name.NS', V7, {'Core.Name.UN', {'Core.Name.Basic', V10}}}), case ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V7)) of [E0 | E1] -> (fun (V12, V13) -> case V12 of <<"Basics"/utf8>> -> case V13 of [E2 | E3] -> (fun (V14, V15) -> case V14 of <<"Prelude"/utf8>> -> case V15 of [] -> case V10 of <<"Nil"/utf8>> -> fun (V16) -> case V5 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MConst', {'Compiler.Erlang.IR.ErlExpr.MNil'}, V6}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"::"/utf8>> -> case V5 of [E4 | E5] -> (fun (V17, V18) -> fun (V19) -> case V18 of [E6 | E7] -> (fun (V20, V21) -> case V21 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MCons', {'Compiler.Erlang.IR.ErlExpr.MAny'}, {'Compiler.Erlang.IR.ErlExpr.MAny'}, V17, V20, V6}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end(E6, E7)); _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E4, E5)); _ -> fun (V22) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V23) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V24) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V25) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E2, E3)); _ -> fun (V26) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"Types"/utf8>> -> case V13 of [E8 | E9] -> (fun (V27, V28) -> case V27 of <<"Erlang"/utf8>> -> case V28 of [] -> case V10 of <<"MkAtom"/utf8>> -> case V5 of [E10 | E11] -> (fun (V29, V30) -> case V30 of [] -> begin (V31 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V38 = begin (V36 = {'Compiler.Erlang.IR.ErlExpr.MTransform', {'Compiler.Erlang.IR.ErlExpr.MAny'}, V35, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genAtomToString'(V3, {'Compiler.Erlang.IR.ErlExpr.ELocal', V3, V35}))}), fun (V37) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTransform', V36, V29, V6}} end end), V38 end(V32)) end end end end; _ -> fun (V39) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E10, E11)); _ -> fun (V40) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkCharlist"/utf8>> -> case V5 of [E12 | E13] -> (fun (V41, V42) -> case V42 of [] -> begin (V43 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V50 = begin (V48 = {'Compiler.Erlang.IR.ErlExpr.MTransform', {'Compiler.Erlang.IR.ErlExpr.MAny'}, V47, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V3, <<"unicode"/utf8>>, <<"characters_to_binary"/utf8>>, [{'Compiler.Erlang.IR.ErlExpr.ELocal', V3, V47} | []]))}), fun (V49) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTransform', V48, V41, V6}} end end), V50 end(V44)) end end end end; _ -> fun (V51) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E12, E13)); _ -> fun (V52) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkTuple0"/utf8>> -> fun (V53) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple1"/utf8>> -> fun (V54) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple2"/utf8>> -> fun (V55) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple3"/utf8>> -> fun (V56) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple4"/utf8>> -> fun (V57) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple5"/utf8>> -> fun (V58) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple6"/utf8>> -> fun (V59) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple7"/utf8>> -> fun (V60) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple8"/utf8>> -> fun (V61) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkFun0"/utf8>> -> case V5 of [E14 | E15] -> (fun (V62, V63) -> case V63 of [] -> ('un--readConAltFun'(V0, V3, 0, V62, V6, fun (V64) -> V64 end)); _ -> fun (V65) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E14, E15)); _ -> fun (V66) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkFun1"/utf8>> -> case V5 of [E16 | E17] -> (fun (V67, V68) -> case V68 of [] -> ('un--readConAltFun'(V0, V3, 1, V67, V6, fun (V69) -> V69 end)); _ -> fun (V70) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E16, E17)); _ -> fun (V71) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkFun2"/utf8>> -> case V5 of [E18 | E19] -> (fun (V72, V73) -> case V73 of [] -> ('un--readConAltFun'(V0, V3, 2, V72, V6, fun (V74) -> V74 end)); _ -> fun (V75) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E18, E19)); _ -> fun (V76) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkFun3"/utf8>> -> case V5 of [E20 | E21] -> (fun (V77, V78) -> case V78 of [] -> ('un--readConAltFun'(V0, V3, 3, V77, V6, fun (V79) -> V79 end)); _ -> fun (V80) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E20, E21)); _ -> fun (V81) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkFun4"/utf8>> -> case V5 of [E22 | E23] -> (fun (V82, V83) -> case V83 of [] -> ('un--readConAltFun'(V0, V3, 4, V82, V6, fun (V84) -> V84 end)); _ -> fun (V85) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E22, E23)); _ -> fun (V86) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkFun5"/utf8>> -> case V5 of [E24 | E25] -> (fun (V87, V88) -> case V88 of [] -> ('un--readConAltFun'(V0, V3, 5, V87, V6, fun (V89) -> V89 end)); _ -> fun (V90) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E24, E25)); _ -> fun (V91) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkFun6"/utf8>> -> case V5 of [E26 | E27] -> (fun (V92, V93) -> case V93 of [] -> ('un--readConAltFun'(V0, V3, 6, V92, V6, fun (V94) -> V94 end)); _ -> fun (V95) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E26, E27)); _ -> fun (V96) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkFun7"/utf8>> -> case V5 of [E28 | E29] -> (fun (V97, V98) -> case V98 of [] -> ('un--readConAltFun'(V0, V3, 7, V97, V6, fun (V99) -> V99 end)); _ -> fun (V100) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E28, E29)); _ -> fun (V101) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkFun8"/utf8>> -> case V5 of [E30 | E31] -> (fun (V102, V103) -> case V103 of [] -> ('un--readConAltFun'(V0, V3, 8, V102, V6, fun (V104) -> V104 end)); _ -> fun (V105) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E30, E31)); _ -> fun (V106) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkIOFun0"/utf8>> -> case V5 of [E32 | E33] -> (fun (V107, V108) -> case V108 of [] -> begin (V109 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V115 = ('un--readConAltFun'(V0, V3, 0, V107, V6, fun (V114) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V113, V114)) end))), V115 end(V110)) end end end end; _ -> fun (V116) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E32, E33)); _ -> fun (V117) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkIOFun1"/utf8>> -> case V5 of [E34 | E35] -> (fun (V118, V119) -> case V119 of [] -> begin (V120 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V126 = ('un--readConAltFun'(V0, V3, 1, V118, V6, fun (V125) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V124, V125)) end))), V126 end(V121)) end end end end; _ -> fun (V127) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E34, E35)); _ -> fun (V128) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkIOFun2"/utf8>> -> case V5 of [E36 | E37] -> (fun (V129, V130) -> case V130 of [] -> begin (V131 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V132) -> begin (V133 = (V131(V132))), case V133 of {'Prelude.Types.Left', V134} -> {'Prelude.Types.Left', V134}; {'Prelude.Types.Right', V135} -> (begin (V137 = ('un--readConAltFun'(V0, V3, 2, V129, V6, fun (V136) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V135, V136)) end))), V137 end(V132)) end end end end; _ -> fun (V138) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E36, E37)); _ -> fun (V139) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkIOFun3"/utf8>> -> case V5 of [E38 | E39] -> (fun (V140, V141) -> case V141 of [] -> begin (V142 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V148 = ('un--readConAltFun'(V0, V3, 3, V140, V6, fun (V147) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V146, V147)) end))), V148 end(V143)) end end end end; _ -> fun (V149) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E38, E39)); _ -> fun (V150) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkIOFun4"/utf8>> -> case V5 of [E40 | E41] -> (fun (V151, V152) -> case V152 of [] -> begin (V153 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V159 = ('un--readConAltFun'(V0, V3, 4, V151, V6, fun (V158) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V157, V158)) end))), V159 end(V154)) end end end end; _ -> fun (V160) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E40, E41)); _ -> fun (V161) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkIOFun5"/utf8>> -> case V5 of [E42 | E43] -> (fun (V162, V163) -> case V163 of [] -> begin (V164 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V165) -> begin (V166 = (V164(V165))), case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> (begin (V170 = ('un--readConAltFun'(V0, V3, 5, V162, V6, fun (V169) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V168, V169)) end))), V170 end(V165)) end end end end; _ -> fun (V171) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E42, E43)); _ -> fun (V172) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkIOFun6"/utf8>> -> case V5 of [E44 | E45] -> (fun (V173, V174) -> case V174 of [] -> begin (V175 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V176) -> begin (V177 = (V175(V176))), case V177 of {'Prelude.Types.Left', V178} -> {'Prelude.Types.Left', V178}; {'Prelude.Types.Right', V179} -> (begin (V181 = ('un--readConAltFun'(V0, V3, 6, V173, V6, fun (V180) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V179, V180)) end))), V181 end(V176)) end end end end; _ -> fun (V182) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E44, E45)); _ -> fun (V183) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkIOFun7"/utf8>> -> case V5 of [E46 | E47] -> (fun (V184, V185) -> case V185 of [] -> begin (V186 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V187) -> begin (V188 = (V186(V187))), case V188 of {'Prelude.Types.Left', V189} -> {'Prelude.Types.Left', V189}; {'Prelude.Types.Right', V190} -> (begin (V192 = ('un--readConAltFun'(V0, V3, 7, V184, V6, fun (V191) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V190, V191)) end))), V192 end(V187)) end end end end; _ -> fun (V193) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E46, E47)); _ -> fun (V194) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MkIOFun8"/utf8>> -> case V5 of [E48 | E49] -> (fun (V195, V196) -> case V196 of [] -> begin (V197 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V198) -> begin (V199 = (V197(V198))), case V199 of {'Prelude.Types.Left', V200} -> {'Prelude.Types.Left', V200}; {'Prelude.Types.Right', V201} -> (begin (V203 = ('un--readConAltFun'(V0, V3, 8, V195, V6, fun (V202) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V201, V202)) end))), V203 end(V198)) end end end end; _ -> fun (V204) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E48, E49)); _ -> fun (V205) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V206) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V207) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V208) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E8, E9)); _ -> fun (V209) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"MaybeImproperList"/utf8>> -> case V13 of [E50 | E51] -> (fun (V210, V211) -> case V210 of <<"Types"/utf8>> -> case V211 of [E52 | E53] -> (fun (V212, V213) -> case V212 of <<"Erlang"/utf8>> -> case V213 of [] -> case V10 of <<"Nil"/utf8>> -> fun (V214) -> case V5 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MConst', {'Compiler.Erlang.IR.ErlExpr.MNil'}, V6}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"::"/utf8>> -> case V5 of [E54 | E55] -> (fun (V215, V216) -> fun (V217) -> case V216 of [E56 | E57] -> (fun (V218, V219) -> case V219 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MCons', {'Compiler.Erlang.IR.ErlExpr.MAny'}, {'Compiler.Erlang.IR.ErlExpr.MAny'}, V215, V218, V6}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end(E56, E57)); _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E54, E55)); _ -> fun (V220) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V221) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V222) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V223) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E52, E53)); _ -> fun (V224) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V225) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E50, E51)); _ -> fun (V226) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"ProperList"/utf8>> -> case V13 of [E58 | E59] -> (fun (V227, V228) -> case V227 of <<"Types"/utf8>> -> case V228 of [E60 | E61] -> (fun (V229, V230) -> case V229 of <<"Erlang"/utf8>> -> case V230 of [] -> case V10 of <<"Nil"/utf8>> -> fun (V231) -> case V5 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MConst', {'Compiler.Erlang.IR.ErlExpr.MNil'}, V6}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; <<"::"/utf8>> -> case V5 of [E62 | E63] -> (fun (V232, V233) -> fun (V234) -> case V233 of [E64 | E65] -> (fun (V235, V236) -> case V236 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MCons', {'Compiler.Erlang.IR.ErlExpr.MAny'}, {'Compiler.Erlang.IR.ErlExpr.MAny'}, V232, V235, V6}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end(E64, E65)); _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E62, E63)); _ -> fun (V237) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V238) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V239) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V240) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E60, E61)); _ -> fun (V241) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V242) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E58, E59)); _ -> fun (V243) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end; _ -> fun (V244) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end(E0, E1)); _ -> fun (V245) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V11)), V5, V6}} end end end; _ -> fun (V246) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V4)), V5, V6}} end end; _ -> fun (V247) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V4)), V5, V6}} end end; _ -> fun (V248) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V4)), V5, V6}} end end.
'un--precToNat'(V0) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V0)).
'un--internalArity'(V0) -> case V0 of {'Core.CompileExpr.NmCon', V1, V2, V3, V4, V5} -> case V2 of {'Core.Name.NS', V6, V7} -> case V7 of {'Core.Name.UN', V8} -> case V8 of {'Core.Name.Basic', V9} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V6, ('Idris.Idris2.Compiler.Erlang.Name':'un--erlangTypesNS'()))) of 1 -> case V9 of <<"ETFun"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 1}; <<"ETErlFun0"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 0}; <<"ETErlFun1"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 1}; <<"ETErlFun2"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 2}; <<"ETErlFun3"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 3}; <<"ETErlFun4"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 4}; <<"ETErlFun5"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 5}; <<"ETErlFun6"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 6}; <<"ETErlFun7"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 7}; <<"ETErlFun8"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 8}; <<"ETErlIOFun0"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 0}; <<"ETErlIOFun1"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 1}; <<"ETErlIOFun2"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 2}; <<"ETErlIOFun3"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 3}; <<"ETErlIOFun4"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 4}; <<"ETErlIOFun5"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 5}; <<"ETErlIOFun6"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 6}; <<"ETErlIOFun7"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 7}; <<"ETErlIOFun8"/utf8>> -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 8}; _ -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} end; 0 -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} end; _ -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} end; _ -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} end; _ -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} end; _ -> {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} end.
'un--genSub'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.Just', V5} -> ('un--genBoundedInt'(V0, V1, V5, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V3, V4})); _ -> fun (V6) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V3, V4}} end end.
'un--genShl'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.Just', V5} -> ('un--genBoundedInt'(V0, V1, V5, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V3, V4})); _ -> fun (V6) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V3, V4}} end end.
'un--genPrimType'(V0) -> case V0 of 0 -> {'Compiler.Erlang.IR.ErlExpr.IIntType'}; 1 -> {'Compiler.Erlang.IR.ErlExpr.IInt8Type'}; 2 -> {'Compiler.Erlang.IR.ErlExpr.IInt16Type'}; 3 -> {'Compiler.Erlang.IR.ErlExpr.IInt32Type'}; 4 -> {'Compiler.Erlang.IR.ErlExpr.IInt64Type'}; 5 -> {'Compiler.Erlang.IR.ErlExpr.IIntegerType'}; 6 -> {'Compiler.Erlang.IR.ErlExpr.IBits8Type'}; 7 -> {'Compiler.Erlang.IR.ErlExpr.IBits16Type'}; 8 -> {'Compiler.Erlang.IR.ErlExpr.IBits32Type'}; 9 -> {'Compiler.Erlang.IR.ErlExpr.IBits64Type'}; 10 -> {'Compiler.Erlang.IR.ErlExpr.IStringType'}; 11 -> {'Compiler.Erlang.IR.ErlExpr.ICharType'}; 12 -> {'Compiler.Erlang.IR.ErlExpr.IDoubleType'}; 13 -> {'Compiler.Erlang.IR.ErlExpr.IWorldType'} end.
'un--genOp'(V0, V1, V2, V3) -> case V2 of {'Core.TT.Add', V4} -> case V3 of {'Data.Vect.::', V5, V6} -> case V6 of {'Data.Vect.::', V7, V8} -> case V8 of {'Data.Vect.Nil'} -> ('un--genAdd'(V0, V1, ('Idris.Idris2.Core.TT':'un--intKind'(V4)), V5, V7)) end end end; {'Core.TT.Sub', V9} -> case V3 of {'Data.Vect.::', V10, V11} -> case V11 of {'Data.Vect.::', V12, V13} -> case V13 of {'Data.Vect.Nil'} -> ('un--genSub'(V0, V1, ('Idris.Idris2.Core.TT':'un--intKind'(V9)), V10, V12)) end end end; {'Core.TT.Mul', V14} -> case V3 of {'Data.Vect.::', V15, V16} -> case V16 of {'Data.Vect.::', V17, V18} -> case V18 of {'Data.Vect.Nil'} -> ('un--genMul'(V0, V1, ('Idris.Idris2.Core.TT':'un--intKind'(V14)), V15, V17)) end end end; {'Core.TT.Div', V19} -> case V3 of {'Data.Vect.::', V20, V21} -> case V21 of {'Data.Vect.::', V22, V23} -> case V23 of {'Data.Vect.Nil'} -> ('un--genDiv'(V0, V1, ('Idris.Idris2.Core.TT':'un--intKind'(V19)), V20, V22)) end end end; {'Core.TT.Mod', V24} -> case V3 of {'Data.Vect.::', V25, V26} -> fun (V27) -> case V26 of {'Data.Vect.::', V28, V29} -> case V29 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"rem"/utf8>>, V25, V28}} end end end end; {'Core.TT.Neg', V30} -> fun (V31) -> case V3 of {'Data.Vect.::', V32, V33} -> case V33 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"erlang"/utf8>>, <<"-"/utf8>>, [V32 | []]))} end end end; {'Core.TT.ShiftL', V34} -> case V3 of {'Data.Vect.::', V35, V36} -> case V36 of {'Data.Vect.::', V37, V38} -> case V38 of {'Data.Vect.Nil'} -> ('un--genShl'(V0, V1, ('Idris.Idris2.Core.TT':'un--intKind'(V34)), V35, V37)) end end end; {'Core.TT.ShiftR', V39} -> case V3 of {'Data.Vect.::', V40, V41} -> fun (V42) -> case V41 of {'Data.Vect.::', V43, V44} -> case V44 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsr"/utf8>>, V40, V43}} end end end end; {'Core.TT.BAnd', V45} -> case V3 of {'Data.Vect.::', V46, V47} -> fun (V48) -> case V47 of {'Data.Vect.::', V49, V50} -> case V50 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"band"/utf8>>, V46, V49}} end end end end; {'Core.TT.BOr', V51} -> case V3 of {'Data.Vect.::', V52, V53} -> fun (V54) -> case V53 of {'Data.Vect.::', V55, V56} -> case V56 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bor"/utf8>>, V52, V55}} end end end end; {'Core.TT.BXOr', V57} -> case V3 of {'Data.Vect.::', V58, V59} -> fun (V60) -> case V59 of {'Data.Vect.::', V61, V62} -> case V62 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bxor"/utf8>>, V58, V61}} end end end end; {'Core.TT.LT', V63} -> case V63 of 10 -> case V3 of {'Data.Vect.::', V64, V65} -> case V65 of {'Data.Vect.::', V66, V67} -> case V67 of {'Data.Vect.Nil'} -> fun (V68) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringLT'(V1, V64, V66))} end; _ -> case V3 of {'Data.Vect.::', V69, V70} -> fun (V71) -> case V70 of {'Data.Vect.::', V72, V73} -> case V73 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"<"/utf8>>, V69, V72}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V74, V75} -> fun (V76) -> case V75 of {'Data.Vect.::', V77, V78} -> case V78 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"<"/utf8>>, V74, V77}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V79, V80} -> fun (V81) -> case V80 of {'Data.Vect.::', V82, V83} -> case V83 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"<"/utf8>>, V79, V82}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V84, V85} -> fun (V86) -> case V85 of {'Data.Vect.::', V87, V88} -> case V88 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"<"/utf8>>, V84, V87}))} end end end end end; {'Core.TT.LTE', V89} -> case V89 of 10 -> case V3 of {'Data.Vect.::', V90, V91} -> case V91 of {'Data.Vect.::', V92, V93} -> case V93 of {'Data.Vect.Nil'} -> fun (V94) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringLTE'(V1, V90, V92))} end; _ -> case V3 of {'Data.Vect.::', V95, V96} -> fun (V97) -> case V96 of {'Data.Vect.::', V98, V99} -> case V99 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=<"/utf8>>, V95, V98}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V100, V101} -> fun (V102) -> case V101 of {'Data.Vect.::', V103, V104} -> case V104 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=<"/utf8>>, V100, V103}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V105, V106} -> fun (V107) -> case V106 of {'Data.Vect.::', V108, V109} -> case V109 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=<"/utf8>>, V105, V108}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V110, V111} -> fun (V112) -> case V111 of {'Data.Vect.::', V113, V114} -> case V114 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=<"/utf8>>, V110, V113}))} end end end end end; {'Core.TT.EQ', V115} -> case V115 of 10 -> case V3 of {'Data.Vect.::', V116, V117} -> case V117 of {'Data.Vect.::', V118, V119} -> case V119 of {'Data.Vect.Nil'} -> fun (V120) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringEQ'(V1, V116, V118))} end; _ -> case V3 of {'Data.Vect.::', V121, V122} -> fun (V123) -> case V122 of {'Data.Vect.::', V124, V125} -> case V125 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=:="/utf8>>, V121, V124}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V126, V127} -> fun (V128) -> case V127 of {'Data.Vect.::', V129, V130} -> case V130 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=:="/utf8>>, V126, V129}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V131, V132} -> fun (V133) -> case V132 of {'Data.Vect.::', V134, V135} -> case V135 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=:="/utf8>>, V131, V134}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V136, V137} -> fun (V138) -> case V137 of {'Data.Vect.::', V139, V140} -> case V140 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=:="/utf8>>, V136, V139}))} end end end end end; {'Core.TT.GTE', V141} -> case V141 of 10 -> case V3 of {'Data.Vect.::', V142, V143} -> case V143 of {'Data.Vect.::', V144, V145} -> case V145 of {'Data.Vect.Nil'} -> fun (V146) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringGTE'(V1, V142, V144))} end; _ -> case V3 of {'Data.Vect.::', V147, V148} -> fun (V149) -> case V148 of {'Data.Vect.::', V150, V151} -> case V151 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">="/utf8>>, V147, V150}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V152, V153} -> fun (V154) -> case V153 of {'Data.Vect.::', V155, V156} -> case V156 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">="/utf8>>, V152, V155}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V157, V158} -> fun (V159) -> case V158 of {'Data.Vect.::', V160, V161} -> case V161 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">="/utf8>>, V157, V160}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V162, V163} -> fun (V164) -> case V163 of {'Data.Vect.::', V165, V166} -> case V166 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">="/utf8>>, V162, V165}))} end end end end end; {'Core.TT.GT', V167} -> case V167 of 10 -> case V3 of {'Data.Vect.::', V168, V169} -> case V169 of {'Data.Vect.::', V170, V171} -> case V171 of {'Data.Vect.Nil'} -> fun (V172) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringGT'(V1, V168, V170))} end; _ -> case V3 of {'Data.Vect.::', V173, V174} -> fun (V175) -> case V174 of {'Data.Vect.::', V176, V177} -> case V177 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">"/utf8>>, V173, V176}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V178, V179} -> fun (V180) -> case V179 of {'Data.Vect.::', V181, V182} -> case V182 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">"/utf8>>, V178, V181}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V183, V184} -> fun (V185) -> case V184 of {'Data.Vect.::', V186, V187} -> case V187 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">"/utf8>>, V183, V186}))} end end end end end; _ -> case V3 of {'Data.Vect.::', V188, V189} -> fun (V190) -> case V189 of {'Data.Vect.::', V191, V192} -> case V192 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">"/utf8>>, V188, V191}))} end end end end end; {'Core.TT.StrLength'} -> fun (V193) -> case V3 of {'Data.Vect.::', V194, V195} -> case V195 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringLength'(V1, V194))} end end end; {'Core.TT.StrHead'} -> fun (V196) -> case V3 of {'Data.Vect.::', V197, V198} -> case V198 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringHead'(V1, V197))} end end end; {'Core.TT.StrTail'} -> case V3 of {'Data.Vect.::', V199, V200} -> case V200 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringTail'(V0, V1, V199)) end end; {'Core.TT.StrIndex'} -> case V3 of {'Data.Vect.::', V201, V202} -> fun (V203) -> case V202 of {'Data.Vect.::', V204, V205} -> case V205 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringIndex'(V1, V201, V204))} end end end end; {'Core.TT.StrCons'} -> case V3 of {'Data.Vect.::', V206, V207} -> fun (V208) -> case V207 of {'Data.Vect.::', V209, V210} -> case V210 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringCons'(V1, V206, V209))} end end end end; {'Core.TT.StrAppend'} -> case V3 of {'Data.Vect.::', V211, V212} -> fun (V213) -> case V212 of {'Data.Vect.::', V214, V215} -> case V215 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringAppend'(V1, V211, V214))} end end end end; {'Core.TT.StrReverse'} -> fun (V216) -> case V3 of {'Data.Vect.::', V217, V218} -> case V218 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringReverse'(V1, V217))} end end end; {'Core.TT.StrSubstr'} -> case V3 of {'Data.Vect.::', V219, V220} -> case V220 of {'Data.Vect.::', V221, V222} -> fun (V223) -> case V222 of {'Data.Vect.::', V224, V225} -> case V225 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringSubstr'(V1, V219, V221, V224))} end end end end end; {'Core.TT.DoubleExp'} -> fun (V226) -> case V3 of {'Data.Vect.::', V227, V228} -> case V228 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"pow"/utf8>>, [{'Compiler.Erlang.IR.ErlExpr.EFloat', V1, 2.718281828459045} | [V227 | []]]))} end end end; {'Core.TT.DoubleLog'} -> fun (V229) -> case V3 of {'Data.Vect.::', V230, V231} -> case V231 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"log"/utf8>>, [V230 | []]))} end end end; {'Core.TT.DoublePow'} -> case V3 of {'Data.Vect.::', V232, V233} -> fun (V234) -> case V233 of {'Data.Vect.::', V235, V236} -> case V236 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"pow"/utf8>>, [V232 | [V235 | []]]))} end end end end; {'Core.TT.DoubleSin'} -> fun (V237) -> case V3 of {'Data.Vect.::', V238, V239} -> case V239 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"sin"/utf8>>, [V238 | []]))} end end end; {'Core.TT.DoubleCos'} -> fun (V240) -> case V3 of {'Data.Vect.::', V241, V242} -> case V242 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"cos"/utf8>>, [V241 | []]))} end end end; {'Core.TT.DoubleTan'} -> fun (V243) -> case V3 of {'Data.Vect.::', V244, V245} -> case V245 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"tan"/utf8>>, [V244 | []]))} end end end; {'Core.TT.DoubleASin'} -> fun (V246) -> case V3 of {'Data.Vect.::', V247, V248} -> case V248 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"asin"/utf8>>, [V247 | []]))} end end end; {'Core.TT.DoubleACos'} -> fun (V249) -> case V3 of {'Data.Vect.::', V250, V251} -> case V251 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"acos"/utf8>>, [V250 | []]))} end end end; {'Core.TT.DoubleATan'} -> fun (V252) -> case V3 of {'Data.Vect.::', V253, V254} -> case V254 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"atan"/utf8>>, [V253 | []]))} end end end; {'Core.TT.DoubleSqrt'} -> fun (V255) -> case V3 of {'Data.Vect.::', V256, V257} -> case V257 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"sqrt"/utf8>>, [V256 | []]))} end end end; {'Core.TT.DoubleFloor'} -> fun (V258) -> case V3 of {'Data.Vect.::', V259, V260} -> case V260 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"erlang"/utf8>>, <<"floor"/utf8>>, [V259 | []]))} end end end; {'Core.TT.DoubleCeiling'} -> fun (V261) -> case V3 of {'Data.Vect.::', V262, V263} -> case V263 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"erlang"/utf8>>, <<"ceil"/utf8>>, [V262 | []]))} end end end; {'Core.TT.Cast', V264, V265} -> case V264 of 12 -> case V265 of 10 -> case V3 of {'Data.Vect.::', V266, V267} -> case V267 of {'Data.Vect.Nil'} -> fun (V268) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genDoubleToString'(V1, V266))} end; _ -> case V3 of {'Data.Vect.::', V269, V270} -> case V270 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0, V1)), V264, V265, V269)) end end end; _ -> case V3 of {'Data.Vect.::', V271, V272} -> case V272 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0, V1)), V264, V265, V271)) end end end; _ -> case V3 of {'Data.Vect.::', V273, V274} -> case V274 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0, V1)), V264, V265, V273)) end end end; 11 -> case V265 of 10 -> case V3 of {'Data.Vect.::', V275, V276} -> case V276 of {'Data.Vect.Nil'} -> fun (V277) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genCharToString'(V1, V275))} end; _ -> case V3 of {'Data.Vect.::', V278, V279} -> case V279 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0, V1)), V264, V265, V278)) end end end; _ -> case V3 of {'Data.Vect.::', V280, V281} -> case V281 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0, V1)), V264, V265, V280)) end end end; _ -> case V3 of {'Data.Vect.::', V282, V283} -> case V283 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0, V1)), V264, V265, V282)) end end end; 10 -> case V265 of 12 -> case V3 of {'Data.Vect.::', V284, V285} -> case V285 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genStringToDouble'(V0, V1, V284)); _ -> case V3 of {'Data.Vect.::', V286, V287} -> case V287 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0, V1)), V264, V265, V286)) end end end; _ -> case V3 of {'Data.Vect.::', V288, V289} -> case V289 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0, V1)), V264, V265, V288)) end end end; _ -> case V3 of {'Data.Vect.::', V290, V291} -> case V291 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0, V1)), V264, V265, V290)) end end end; _ -> case V3 of {'Data.Vect.::', V292, V293} -> case V293 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0, V1)), V264, V265, V292)) end end end; {'Core.TT.BelieveMe'} -> case V3 of {'Data.Vect.::', V294, V295} -> case V295 of {'Data.Vect.::', V296, V297} -> fun (V298) -> case V297 of {'Data.Vect.::', V299, V300} -> case V300 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', V299} end end end end end; {'Core.TT.Crash'} -> case V3 of {'Data.Vect.::', V301, V302} -> case V302 of {'Data.Vect.::', V303, V304} -> case V304 of {'Data.Vect.Nil'} -> begin (V305 = {'Compiler.Erlang.IR.ErlExpr.EBinaryConcat', V1, {'Compiler.Erlang.IR.ErlExpr.EBinary', V1, <<"Crash: "/utf8>>}, V303}), fun (V306) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowBinary'(V1, V305))} end end end end end end.
'un--genNmExp'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.NmLocal', V5, V6} -> begin (V7 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V5))), fun (V8) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V6, V3)) of {'Prelude.Types.Just', V9} -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ELocal', V7, V9}}; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Missing variable name: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary>>}, V8)) end end end; {'Core.CompileExpr.NmRef', V10, V11} -> begin (V12 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V10))), fun (V13) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genRef'(V2, V12, V11))} end end; {'Core.CompileExpr.NmLam', V14, V15, V16} -> begin (V17 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V14))), begin (V18 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--addLocalVars'(V0, [V15 | []], V3))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V32 = case V22 of {'Builtin.MkPair', V23, V24} -> begin (V25 = ('un--genNmExp'(V0, V1, V2, V23, V16))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ELam', V17, V24, V29}} end), V31 end(V26)) end end end end end), V32 end(V19)) end end end end end; {'Core.CompileExpr.NmLet', V33, V34, V35, V36} -> begin (V37 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V33))), begin (V38 = ('un--genNmExp'(V0, V1, V2, V3, V35))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V58 = begin (V43 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--addLocalVar'(V0, V34, V3))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V57 = case V47 of {'Builtin.MkPair', V48, V49} -> begin (V50 = ('un--genNmExp'(V0, V1, V2, V48, V36))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V56 = fun (V55) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ELet', V37, V49, V42, V54}} end), V56 end(V51)) end end end end end), V57 end(V44)) end end end end), V58 end(V39)) end end end end end; {'Core.CompileExpr.NmApp', V59, V60, V61} -> begin (V62 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V59))), begin (V64 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V63) -> ('un--genNmExp'(V0, V1, V2, V3, V63)) end, V61, []))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V76 = begin (V69 = ('un--genNmExp'(V0, V1, V2, V3, V60))), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V75 = fun (V74) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EApp', V62, V73, V68}} end), V75 end(V70)) end end end end), V76 end(V65)) end end end end end; {'Core.CompileExpr.NmCon', V77, V78, V79, V80, V81} -> begin (V82 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V77))), begin (V84 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V83) -> ('un--genNmExp'(V0, V1, V2, V3, V83)) end, V81, []))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V89 = ('un--genCon'(V0, V2, V82, V78, V88))), V89 end(V85)) end end end end end; {'Core.CompileExpr.NmOp', V90, V91, V92, V93} -> begin (V94 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V91))), begin (V95 = ('un--traverseVect'(V0, V1, V2, V3, V93))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V100 = ('un--genOp'(V0, V94, V92, V99))), V100 end(V96)) end end end end end; {'Core.CompileExpr.NmExtPrim', V101, V102, V103} -> begin (V104 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V101))), begin (V106 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V105) -> ('un--genNmExp'(V0, V1, V2, V3, V105)) end, V103, []))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V111 = ('un--genExtPrim'(V0, V1, V2, V104, V102, V110))), V111 end(V107)) end end end end end; {'Core.CompileExpr.NmForce', V112, V113, V114} -> begin (V115 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V112))), begin (V116 = ('un--genNmExp'(V0, V1, V2, V3, V114))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V122 = fun (V121) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EApp', V115, V120, []}} end), V122 end(V117)) end end end end end; {'Core.CompileExpr.NmDelay', V123, V124, V125} -> begin (V126 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V123))), begin (V127 = ('un--genNmExp'(V0, V1, V2, V3, V125))), fun (V128) -> begin (V129 = (V127(V128))), case V129 of {'Prelude.Types.Left', V130} -> {'Prelude.Types.Left', V130}; {'Prelude.Types.Right', V131} -> (begin (V133 = fun (V132) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ELam', V126, [], V131}} end), V133 end(V128)) end end end end end; {'Core.CompileExpr.NmConCase', V134, V135, V136, V137} -> case V136 of [] -> fun (V138) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"ConCase has no clauses"/utf8>>}, V138)) end; [E0 | E1] -> (fun (V139, V140) -> begin (V141 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V134))), begin (V142 = ('un--genNmExp'(V0, V1, V2, V3, V135))), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V182 = begin (V148 = ('Idris.Idris2.Core.Core':'un--traverseList1'(fun (V147) -> ('un--genConAlt'(V0, V1, V2, V3, V141, V147)) end, {'Data.List1.:::', V139, V140}))), fun (V149) -> begin (V150 = (V148(V149))), case V150 of {'Prelude.Types.Left', V151} -> {'Prelude.Types.Left', V151}; {'Prelude.Types.Right', V152} -> (begin (V181 = begin (V174 = case V137 of {'Prelude.Types.Nothing'} -> fun (V153) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V154} -> begin (V155 = ('un--genNmExp'(V0, V1, V2, V3, V154))), ((begin (V171 = fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V168, V169, V170)) end end end end end), fun (V172) -> fun (V173) -> ((((V171('erased'))('erased'))(V172))(V173)) end end end((begin (V163 = fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> case V160 of {'Prelude.Types.Left', V161} -> {'Prelude.Types.Left', V161}; {'Prelude.Types.Right', V162} -> {'Prelude.Types.Right', (V159(V162))} end end end end end), fun (V164) -> fun (V165) -> ((((V163('erased'))('erased'))(V164))(V165)) end end end(fun (V156) -> {'Prelude.Types.Just', V156} end))))(V155)) end end), fun (V175) -> begin (V176 = (V174(V175))), case V176 of {'Prelude.Types.Left', V177} -> {'Prelude.Types.Left', V177}; {'Prelude.Types.Right', V178} -> (begin (V180 = fun (V179) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V141, V146, V152, V178}} end), V180 end(V175)) end end end end), V181 end(V149)) end end end end), V182 end(V143)) end end end end end end(E0, E1)) end; {'Core.CompileExpr.NmConstCase', V183, V184, V185, V186} -> case V185 of [] -> fun (V187) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"ConstCase has no clauses"/utf8>>}, V187)) end; [E2 | E3] -> (fun (V188, V189) -> begin (V190 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V183))), begin (V191 = ('un--genNmExp'(V0, V1, V2, V3, V184))), fun (V192) -> begin (V193 = (V191(V192))), case V193 of {'Prelude.Types.Left', V194} -> {'Prelude.Types.Left', V194}; {'Prelude.Types.Right', V195} -> (begin (V231 = begin (V197 = ('Idris.Idris2.Core.Core':'un--traverseList1'(fun (V196) -> ('un--genConstAlt'(V0, V1, V2, V3, V196)) end, {'Data.List1.:::', V188, V189}))), fun (V198) -> begin (V199 = (V197(V198))), case V199 of {'Prelude.Types.Left', V200} -> {'Prelude.Types.Left', V200}; {'Prelude.Types.Right', V201} -> (begin (V230 = begin (V223 = case V186 of {'Prelude.Types.Nothing'} -> fun (V202) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V203} -> begin (V204 = ('un--genNmExp'(V0, V1, V2, V3, V203))), ((begin (V220 = fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V217, V218, V219)) end end end end end), fun (V221) -> fun (V222) -> ((((V220('erased'))('erased'))(V221))(V222)) end end end((begin (V212 = fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> case V209 of {'Prelude.Types.Left', V210} -> {'Prelude.Types.Left', V210}; {'Prelude.Types.Right', V211} -> {'Prelude.Types.Right', (V208(V211))} end end end end end), fun (V213) -> fun (V214) -> ((((V212('erased'))('erased'))(V213))(V214)) end end end(fun (V205) -> {'Prelude.Types.Just', V205} end))))(V204)) end end), fun (V224) -> begin (V225 = (V223(V224))), case V225 of {'Prelude.Types.Left', V226} -> {'Prelude.Types.Left', V226}; {'Prelude.Types.Right', V227} -> (begin (V229 = fun (V228) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EConstCase', V190, V195, V201, V227}} end), V229 end(V224)) end end end end), V230 end(V198)) end end end end), V231 end(V192)) end end end end end end(E2, E3)) end; {'Core.CompileExpr.NmPrimVal', V232, V233} -> begin (V234 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V232))), fun (V235) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EIdrisConstant', V234, ('un--genConstant'(V233))}} end end; {'Core.CompileExpr.NmErased', V236} -> begin (V237 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V236))), fun (V238) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EAtom', V237, <<"erased"/utf8>>}} end end; {'Core.CompileExpr.NmCrash', V239, V240} -> begin (V241 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V239))), fun (V242) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V241, V240))} end end end.
'un--genMul'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.Just', V5} -> ('un--genBoundedInt'(V0, V1, V5, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V3, V4})); _ -> fun (V6) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V3, V4}} end end.
'un--genForeign'(V0, V1, V2, V3, V4) -> case V3 of {'Core.Name.NS', V5, V6} -> case V6 of {'Core.Name.UN', V7} -> case V7 of {'Core.Name.Basic', V8} -> case V8 of <<"prim__putStr"/utf8>> -> case V4 of [E0 | E1] -> (fun (V9, V10) -> case V10 of [E2 | E3] -> (fun (V11, V12) -> case V12 of [] -> begin (V13 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodePutStr'(V2, V9))), begin (V14 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkUnit'(V2))), fun (V15) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESequence', V2, {'Data.List1.:::', V13, [V14 | []]}}} end end end; _ -> fun (V16) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end end(E2, E3)); _ -> fun (V17) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end end(E0, E1)); _ -> fun (V18) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end; <<"prim__getStr"/utf8>> -> case V4 of [E4 | E5] -> (fun (V19, V20) -> case V20 of [] -> begin (V21 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeGetStr'(V2, {'Compiler.Erlang.IR.ErlExpr.ECharlist', V2, <<""/utf8>>}))), fun (V22) -> {'Prelude.Types.Right', V21} end end; _ -> fun (V23) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end end(E4, E5)); _ -> fun (V24) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end; <<"fastPack"/utf8>> -> fun (V25) -> case V4 of [E6 | E7] -> (fun (V26, V27) -> case V27 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V2, <<"unicode"/utf8>>, <<"characters_to_binary"/utf8>>, [V26 | []]))}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end(E6, E7)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end; <<"fastUnpack"/utf8>> -> fun (V28) -> case V4 of [E8 | E9] -> (fun (V29, V30) -> case V30 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V2, <<"string"/utf8>>, <<"to_graphemes"/utf8>>, [V29 | []]))}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end(E8, E9)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end; <<"fastConcat"/utf8>> -> fun (V31) -> case V4 of [E10 | E11] -> (fun (V32, V33) -> case V33 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V2, <<"unicode"/utf8>>, <<"characters_to_binary"/utf8>>, [V32 | []]))}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end(E10, E11)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end; _ -> fun (V34) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end; _ -> fun (V35) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end; _ -> fun (V36) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end; _ -> fun (V37) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V2, <<<<"Error: Unsupported %foreign primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>))} end end.
'un--genExtPrim'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Core.Name.NS', V6, V7} -> case V7 of {'Core.Name.UN', V8} -> case V8 of {'Core.Name.Basic', V9} -> case V9 of <<"void"/utf8>> -> case V5 of [E0 | E1] -> (fun (V10, V11) -> fun (V12) -> case V11 of [E2 | E3] -> (fun (V13, V14) -> case V14 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<"Error: Executed \x{27}void\x{27}"/utf8>>))}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E2, E3)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E0, E1)); _ -> fun (V15) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__os"/utf8>> -> case V5 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genOsType'(V0, V3)); _ -> fun (V16) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__codegen"/utf8>> -> fun (V17) -> case V5 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBinary', V3, <<"erlang"/utf8>>}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__newIORef"/utf8>> -> case V5 of [E4 | E5] -> (fun (V18, V19) -> case V19 of [E6 | E7] -> (fun (V20, V21) -> case V21 of [E8 | E9] -> (fun (V22, V23) -> case V23 of [] -> begin (V33 = case begin (V24 = V1), V24 end of 1 -> fun (V25) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V3, <<"mutable_storage"/utf8>>, <<"term_new"/utf8>>, [V20 | []]))} end; 0 -> begin (V26 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genProcessDictNewIORef'(V3, V30, V20))} end), V32 end(V27)) end end end end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', V37} end), V39 end(V34)) end end end end; _ -> fun (V40) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E8, E9)); _ -> fun (V41) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E6, E7)); _ -> fun (V42) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E4, E5)); _ -> fun (V43) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readIORef"/utf8>> -> case V5 of [E10 | E11] -> (fun (V44, V45) -> case V45 of [E12 | E13] -> (fun (V46, V47) -> case V47 of [E14 | E15] -> (fun (V48, V49) -> case V49 of [] -> begin (V51 = case begin (V50 = V1), V50 end of 1 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V3, <<"mutable_storage"/utf8>>, <<"term_get"/utf8>>, [V46 | []])); 0 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genProcessDictReadIORef'(V3, V46)) end), fun (V52) -> {'Prelude.Types.Right', V51} end end; _ -> fun (V53) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E14, E15)); _ -> fun (V54) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E12, E13)); _ -> fun (V55) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E10, E11)); _ -> fun (V56) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeIORef"/utf8>> -> case V5 of [E16 | E17] -> (fun (V57, V58) -> case V58 of [E18 | E19] -> (fun (V59, V60) -> case V60 of [E20 | E21] -> (fun (V61, V62) -> case V62 of [E22 | E23] -> (fun (V63, V64) -> case V64 of [] -> begin (V66 = case begin (V65 = V1), V65 end of 1 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V3, <<"mutable_storage"/utf8>>, <<"term_set"/utf8>>, [V59 | [V61 | []]])); 0 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genProcessDictWriteIORef'(V3, V59, V61)) end), fun (V67) -> {'Prelude.Types.Right', V66} end end; _ -> fun (V68) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E22, E23)); _ -> fun (V69) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E20, E21)); _ -> fun (V70) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E18, E19)); _ -> fun (V71) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E16, E17)); _ -> fun (V72) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__freeIORef"/utf8>> -> case V5 of [E24 | E25] -> (fun (V73, V74) -> case V74 of [E26 | E27] -> (fun (V75, V76) -> case V76 of [E28 | E29] -> (fun (V77, V78) -> case V78 of [] -> begin (V79 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genProcessDictFreeIORef'(V3, V75))), fun (V80) -> {'Prelude.Types.Right', V79} end end; _ -> fun (V81) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E28, E29)); _ -> fun (V82) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E26, E27)); _ -> fun (V83) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E24, E25)); _ -> fun (V84) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlUnsafeCall"/utf8>> -> case V5 of [E30 | E31] -> (fun (V85, V86) -> case V86 of [E32 | E33] -> (fun (V87, V88) -> case V88 of [E34 | E35] -> (fun (V89, V90) -> case V90 of [E36 | E37] -> (fun (V91, V92) -> fun (V93) -> case V92 of [E38 | E39] -> (fun (V94, V95) -> case V95 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V3, <<"erlang"/utf8>>, <<"apply"/utf8>>, [('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafeStringToAtom'(V3, V89)) | [('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafeStringToAtom'(V3, V91)) | [V94 | []]]]))}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E38, E39)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E36, E37)); _ -> fun (V96) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E34, E35)); _ -> fun (V97) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E32, E33)); _ -> fun (V98) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E30, E31)); _ -> fun (V99) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlTryCatch"/utf8>> -> case V5 of [E40 | E41] -> (fun (V100, V101) -> case V101 of [E42 | E43] -> (fun (V102, V103) -> case V103 of [E44 | E45] -> (fun (V104, V105) -> case V105 of [] -> begin (V106 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V120 = begin (V111 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V119 = begin (V116 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V2, V3, V102))), begin (V117 = {'Compiler.Erlang.IR.ErlExpr.ETryCatch', V3, V116, V110, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genRight'(V3, {'Compiler.Erlang.IR.ErlExpr.ELocal', V3, V110})), V115, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genLeft'(V3, {'Compiler.Erlang.IR.ErlExpr.ELocal', V3, V115}))}), fun (V118) -> {'Prelude.Types.Right', V117} end end end), V119 end(V112)) end end end end), V120 end(V107)) end end end end; _ -> fun (V121) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E44, E45)); _ -> fun (V122) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E42, E43)); _ -> fun (V123) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E40, E41)); _ -> fun (V124) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlReceive"/utf8>> -> case V5 of [E46 | E47] -> (fun (V125, V126) -> case V126 of [E48 | E49] -> (fun (V127, V128) -> case V128 of [] -> begin (V129 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V136 = begin (V134 = {'Compiler.Erlang.IR.ErlExpr.EReceive', V3, [{'Compiler.Erlang.IR.ErlExpr.MTransform', {'Compiler.Erlang.IR.ErlExpr.MAny'}, V133, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genJust'(V3, {'Compiler.Erlang.IR.ErlExpr.ELocal', V3, V133}))} | []], V125, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genNothing'(V3))}), fun (V135) -> {'Prelude.Types.Right', V134} end end), V136 end(V130)) end end end end; _ -> fun (V137) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E48, E49)); _ -> fun (V138) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E46, E47)); _ -> fun (V139) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlModule"/utf8>> -> fun (V140) -> case V5 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EAtom', V3, ('Idris.Idris2.Compiler.Erlang.Name':'un--currentModuleName'(V2))}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlMatchExact"/utf8>> -> case V5 of [E50 | E51] -> (fun (V141, V142) -> fun (V143) -> case V142 of [E52 | E53] -> (fun (V144, V145) -> case V145 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V3, {'Compiler.Erlang.IR.ErlExpr.EOp', V3, <<"=:="/utf8>>, V141, V144}))}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E52, E53)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E50, E51)); _ -> fun (V146) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeCodepoint"/utf8>> -> case V5 of [E54 | E55] -> (fun (V147, V148) -> case V148 of [] -> ('un--genDecode'(V0, V3, V147, {'Compiler.Erlang.IR.ErlExpr.MCodepoint'})); _ -> fun (V149) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E54, E55)); _ -> fun (V150) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeInteger"/utf8>> -> case V5 of [E56 | E57] -> (fun (V151, V152) -> case V152 of [] -> ('un--genDecode'(V0, V3, V151, {'Compiler.Erlang.IR.ErlExpr.MInteger'})); _ -> fun (V153) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E56, E57)); _ -> fun (V154) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeDouble"/utf8>> -> case V5 of [E58 | E59] -> (fun (V155, V156) -> case V156 of [] -> ('un--genDecode'(V0, V3, V155, {'Compiler.Erlang.IR.ErlExpr.MFloat'})); _ -> fun (V157) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E58, E59)); _ -> fun (V158) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeAtom"/utf8>> -> case V5 of [E60 | E61] -> (fun (V159, V160) -> case V160 of [] -> ('un--genDecode'(V0, V3, V159, {'Compiler.Erlang.IR.ErlExpr.MAtom'})); _ -> fun (V161) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E60, E61)); _ -> fun (V162) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeBinary"/utf8>> -> case V5 of [E62 | E63] -> (fun (V163, V164) -> case V164 of [] -> ('un--genDecode'(V0, V3, V163, {'Compiler.Erlang.IR.ErlExpr.MBinary'})); _ -> fun (V165) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E62, E63)); _ -> fun (V166) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodePid"/utf8>> -> case V5 of [E64 | E65] -> (fun (V167, V168) -> case V168 of [] -> ('un--genDecode'(V0, V3, V167, {'Compiler.Erlang.IR.ErlExpr.MPid'})); _ -> fun (V169) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E64, E65)); _ -> fun (V170) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erldecodeReference"/utf8>> -> case V5 of [E66 | E67] -> (fun (V171, V172) -> case V172 of [] -> ('un--genDecode'(V0, V3, V171, {'Compiler.Erlang.IR.ErlExpr.MRef'})); _ -> fun (V173) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E66, E67)); _ -> fun (V174) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodePort"/utf8>> -> case V5 of [E68 | E69] -> (fun (V175, V176) -> case V176 of [] -> ('un--genDecode'(V0, V3, V175, {'Compiler.Erlang.IR.ErlExpr.MPort'})); _ -> fun (V177) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E68, E69)); _ -> fun (V178) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeAnyMap"/utf8>> -> case V5 of [E70 | E71] -> (fun (V179, V180) -> case V180 of [] -> ('un--genDecode'(V0, V3, V179, {'Compiler.Erlang.IR.ErlExpr.MMap'})); _ -> fun (V181) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E70, E71)); _ -> fun (V182) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeAnyList"/utf8>> -> case V5 of [E72 | E73] -> (fun (V183, V184) -> case V184 of [] -> ('un--genDecode'(V0, V3, V183, {'Compiler.Erlang.IR.ErlExpr.MAnyList'})); _ -> fun (V185) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E72, E73)); _ -> fun (V186) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeNil"/utf8>> -> case V5 of [E74 | E75] -> (fun (V187, V188) -> case V188 of [] -> ('un--genDecode'(V0, V3, V187, {'Compiler.Erlang.IR.ErlExpr.MNil'})); _ -> fun (V189) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E74, E75)); _ -> fun (V190) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeCons"/utf8>> -> case V5 of [E76 | E77] -> (fun (V191, V192) -> case V192 of [] -> begin (V193 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V204 = begin (V198 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V203 = ('un--genDecode'(V0, V3, V191, {'Compiler.Erlang.IR.ErlExpr.MCons', {'Compiler.Erlang.IR.ErlExpr.MAny'}, {'Compiler.Erlang.IR.ErlExpr.MAny'}, V197, V202, {'Compiler.Erlang.IR.ErlExpr.ECons', V3, {'Compiler.Erlang.IR.ErlExpr.ELocal', V3, V197}, {'Compiler.Erlang.IR.ErlExpr.ELocal', V3, V202}}}))), V203 end(V199)) end end end end), V204 end(V194)) end end end end; _ -> fun (V205) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E76, E77)); _ -> fun (V206) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeTuple0"/utf8>> -> case V5 of [E78 | E79] -> (fun (V207, V208) -> case V208 of [] -> ('un--genDecodeTuple'(V0, V3, V207, 0)); _ -> fun (V209) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E78, E79)); _ -> fun (V210) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeTuple1"/utf8>> -> case V5 of [E80 | E81] -> (fun (V211, V212) -> case V212 of [] -> ('un--genDecodeTuple'(V0, V3, V211, 1)); _ -> fun (V213) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E80, E81)); _ -> fun (V214) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeTuple2"/utf8>> -> case V5 of [E82 | E83] -> (fun (V215, V216) -> case V216 of [] -> ('un--genDecodeTuple'(V0, V3, V215, 2)); _ -> fun (V217) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E82, E83)); _ -> fun (V218) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeTuple3"/utf8>> -> case V5 of [E84 | E85] -> (fun (V219, V220) -> case V220 of [] -> ('un--genDecodeTuple'(V0, V3, V219, 3)); _ -> fun (V221) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E84, E85)); _ -> fun (V222) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeTuple4"/utf8>> -> case V5 of [E86 | E87] -> (fun (V223, V224) -> case V224 of [] -> ('un--genDecodeTuple'(V0, V3, V223, 4)); _ -> fun (V225) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E86, E87)); _ -> fun (V226) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeTuple5"/utf8>> -> case V5 of [E88 | E89] -> (fun (V227, V228) -> case V228 of [] -> ('un--genDecodeTuple'(V0, V3, V227, 5)); _ -> fun (V229) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E88, E89)); _ -> fun (V230) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeTuple6"/utf8>> -> case V5 of [E90 | E91] -> (fun (V231, V232) -> case V232 of [] -> ('un--genDecodeTuple'(V0, V3, V231, 6)); _ -> fun (V233) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E90, E91)); _ -> fun (V234) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeTuple7"/utf8>> -> case V5 of [E92 | E93] -> (fun (V235, V236) -> case V236 of [] -> ('un--genDecodeTuple'(V0, V3, V235, 7)); _ -> fun (V237) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E92, E93)); _ -> fun (V238) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeTuple8"/utf8>> -> case V5 of [E94 | E95] -> (fun (V239, V240) -> case V240 of [] -> ('un--genDecodeTuple'(V0, V3, V239, 8)); _ -> fun (V241) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E94, E95)); _ -> fun (V242) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeFun0"/utf8>> -> case V5 of [E96 | E97] -> (fun (V243, V244) -> case V244 of [] -> ('un--genDecode'(V0, V3, V243, {'Compiler.Erlang.IR.ErlExpr.MFun', 0})); _ -> fun (V245) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E96, E97)); _ -> fun (V246) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeFun1"/utf8>> -> case V5 of [E98 | E99] -> (fun (V247, V248) -> case V248 of [E100 | E101] -> (fun (V249, V250) -> case V250 of [] -> ('un--genDecode'(V0, V3, V249, {'Compiler.Erlang.IR.ErlExpr.MFun', 1})); _ -> fun (V251) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E100, E101)); _ -> fun (V252) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E98, E99)); _ -> fun (V253) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeFun2"/utf8>> -> case V5 of [E102 | E103] -> (fun (V254, V255) -> case V255 of [E104 | E105] -> (fun (V256, V257) -> case V257 of [E106 | E107] -> (fun (V258, V259) -> case V259 of [] -> ('un--genDecode'(V0, V3, V258, {'Compiler.Erlang.IR.ErlExpr.MFun', 2})); _ -> fun (V260) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E106, E107)); _ -> fun (V261) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E104, E105)); _ -> fun (V262) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E102, E103)); _ -> fun (V263) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeFun3"/utf8>> -> case V5 of [E108 | E109] -> (fun (V264, V265) -> case V265 of [E110 | E111] -> (fun (V266, V267) -> case V267 of [E112 | E113] -> (fun (V268, V269) -> case V269 of [E114 | E115] -> (fun (V270, V271) -> case V271 of [] -> ('un--genDecode'(V0, V3, V270, {'Compiler.Erlang.IR.ErlExpr.MFun', 3})); _ -> fun (V272) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E114, E115)); _ -> fun (V273) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E112, E113)); _ -> fun (V274) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E110, E111)); _ -> fun (V275) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E108, E109)); _ -> fun (V276) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeFun4"/utf8>> -> case V5 of [E116 | E117] -> (fun (V277, V278) -> case V278 of [E118 | E119] -> (fun (V279, V280) -> case V280 of [E120 | E121] -> (fun (V281, V282) -> case V282 of [E122 | E123] -> (fun (V283, V284) -> case V284 of [E124 | E125] -> (fun (V285, V286) -> case V286 of [] -> ('un--genDecode'(V0, V3, V285, {'Compiler.Erlang.IR.ErlExpr.MFun', 4})); _ -> fun (V287) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E124, E125)); _ -> fun (V288) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E122, E123)); _ -> fun (V289) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E120, E121)); _ -> fun (V290) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E118, E119)); _ -> fun (V291) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E116, E117)); _ -> fun (V292) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeFun5"/utf8>> -> case V5 of [E126 | E127] -> (fun (V293, V294) -> case V294 of [E128 | E129] -> (fun (V295, V296) -> case V296 of [E130 | E131] -> (fun (V297, V298) -> case V298 of [E132 | E133] -> (fun (V299, V300) -> case V300 of [E134 | E135] -> (fun (V301, V302) -> case V302 of [E136 | E137] -> (fun (V303, V304) -> case V304 of [] -> ('un--genDecode'(V0, V3, V303, {'Compiler.Erlang.IR.ErlExpr.MFun', 5})); _ -> fun (V305) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E136, E137)); _ -> fun (V306) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E134, E135)); _ -> fun (V307) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E132, E133)); _ -> fun (V308) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E130, E131)); _ -> fun (V309) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E128, E129)); _ -> fun (V310) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E126, E127)); _ -> fun (V311) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeFun6"/utf8>> -> case V5 of [E138 | E139] -> (fun (V312, V313) -> case V313 of [E140 | E141] -> (fun (V314, V315) -> case V315 of [E142 | E143] -> (fun (V316, V317) -> case V317 of [E144 | E145] -> (fun (V318, V319) -> case V319 of [E146 | E147] -> (fun (V320, V321) -> case V321 of [E148 | E149] -> (fun (V322, V323) -> case V323 of [E150 | E151] -> (fun (V324, V325) -> case V325 of [] -> ('un--genDecode'(V0, V3, V324, {'Compiler.Erlang.IR.ErlExpr.MFun', 6})); _ -> fun (V326) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E150, E151)); _ -> fun (V327) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E148, E149)); _ -> fun (V328) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E146, E147)); _ -> fun (V329) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E144, E145)); _ -> fun (V330) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E142, E143)); _ -> fun (V331) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E140, E141)); _ -> fun (V332) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E138, E139)); _ -> fun (V333) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeFun7"/utf8>> -> case V5 of [E152 | E153] -> (fun (V334, V335) -> case V335 of [E154 | E155] -> (fun (V336, V337) -> case V337 of [E156 | E157] -> (fun (V338, V339) -> case V339 of [E158 | E159] -> (fun (V340, V341) -> case V341 of [E160 | E161] -> (fun (V342, V343) -> case V343 of [E162 | E163] -> (fun (V344, V345) -> case V345 of [E164 | E165] -> (fun (V346, V347) -> case V347 of [E166 | E167] -> (fun (V348, V349) -> case V349 of [] -> ('un--genDecode'(V0, V3, V348, {'Compiler.Erlang.IR.ErlExpr.MFun', 7})); _ -> fun (V350) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E166, E167)); _ -> fun (V351) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E164, E165)); _ -> fun (V352) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E162, E163)); _ -> fun (V353) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E160, E161)); _ -> fun (V354) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E158, E159)); _ -> fun (V355) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E156, E157)); _ -> fun (V356) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E154, E155)); _ -> fun (V357) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E152, E153)); _ -> fun (V358) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlDecodeFun8"/utf8>> -> case V5 of [E168 | E169] -> (fun (V359, V360) -> case V360 of [E170 | E171] -> (fun (V361, V362) -> case V362 of [E172 | E173] -> (fun (V363, V364) -> case V364 of [E174 | E175] -> (fun (V365, V366) -> case V366 of [E176 | E177] -> (fun (V367, V368) -> case V368 of [E178 | E179] -> (fun (V369, V370) -> case V370 of [E180 | E181] -> (fun (V371, V372) -> case V372 of [E182 | E183] -> (fun (V373, V374) -> case V374 of [E184 | E185] -> (fun (V375, V376) -> case V376 of [] -> ('un--genDecode'(V0, V3, V375, {'Compiler.Erlang.IR.ErlExpr.MFun', 8})); _ -> fun (V377) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E184, E185)); _ -> fun (V378) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E182, E183)); _ -> fun (V379) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E180, E181)); _ -> fun (V380) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E178, E179)); _ -> fun (V381) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E176, E177)); _ -> fun (V382) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E174, E175)); _ -> fun (V383) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E172, E173)); _ -> fun (V384) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E170, E171)); _ -> fun (V385) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E168, E169)); _ -> fun (V386) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferNew"/utf8>> -> fun (V387) -> case V5 of [E186 | E187] -> (fun (V388, V389) -> case V389 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferNew', V3, V388}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E186, E187)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferResize"/utf8>> -> case V5 of [E188 | E189] -> (fun (V390, V391) -> fun (V392) -> case V391 of [E190 | E191] -> (fun (V393, V394) -> case V394 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferResize', V3, V390, V393}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E190, E191)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E188, E189)); _ -> fun (V395) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferFlatten"/utf8>> -> case V5 of [E192 | E193] -> (fun (V396, V397) -> fun (V398) -> case V397 of [E194 | E195] -> (fun (V399, V400) -> case V400 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferFlatten', V3, V396, V399}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E194, E195)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E192, E193)); _ -> fun (V401) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferSetByte"/utf8>> -> case V5 of [E196 | E197] -> (fun (V402, V403) -> case V403 of [E198 | E199] -> (fun (V404, V405) -> fun (V406) -> case V405 of [E200 | E201] -> (fun (V407, V408) -> case V408 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferSetBits8', V3, V402, V404, V407}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E200, E201)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E198, E199)); _ -> fun (V409) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E196, E197)); _ -> fun (V410) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferGetByte"/utf8>> -> case V5 of [E202 | E203] -> (fun (V411, V412) -> fun (V413) -> case V412 of [E204 | E205] -> (fun (V414, V415) -> case V415 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferGetBits8', V3, V411, V414}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E204, E205)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E202, E203)); _ -> fun (V416) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferSetBits8"/utf8>> -> case V5 of [E206 | E207] -> (fun (V417, V418) -> case V418 of [E208 | E209] -> (fun (V419, V420) -> fun (V421) -> case V420 of [E210 | E211] -> (fun (V422, V423) -> case V423 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferSetBits8', V3, V417, V419, V422}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E210, E211)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E208, E209)); _ -> fun (V424) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E206, E207)); _ -> fun (V425) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferGetBits8"/utf8>> -> case V5 of [E212 | E213] -> (fun (V426, V427) -> fun (V428) -> case V427 of [E214 | E215] -> (fun (V429, V430) -> case V430 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferGetBits8', V3, V426, V429}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E214, E215)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E212, E213)); _ -> fun (V431) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferSetBits16"/utf8>> -> case V5 of [E216 | E217] -> (fun (V432, V433) -> case V433 of [E218 | E219] -> (fun (V434, V435) -> fun (V436) -> case V435 of [E220 | E221] -> (fun (V437, V438) -> case V438 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferSetBits16', V3, V432, V434, V437}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E220, E221)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E218, E219)); _ -> fun (V439) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E216, E217)); _ -> fun (V440) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferGetBits16"/utf8>> -> case V5 of [E222 | E223] -> (fun (V441, V442) -> fun (V443) -> case V442 of [E224 | E225] -> (fun (V444, V445) -> case V445 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferGetBits16', V3, V441, V444}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E224, E225)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E222, E223)); _ -> fun (V446) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferSetBits32"/utf8>> -> case V5 of [E226 | E227] -> (fun (V447, V448) -> case V448 of [E228 | E229] -> (fun (V449, V450) -> fun (V451) -> case V450 of [E230 | E231] -> (fun (V452, V453) -> case V453 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferSetBits32', V3, V447, V449, V452}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E230, E231)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E228, E229)); _ -> fun (V454) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E226, E227)); _ -> fun (V455) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferGetBits32"/utf8>> -> case V5 of [E232 | E233] -> (fun (V456, V457) -> fun (V458) -> case V457 of [E234 | E235] -> (fun (V459, V460) -> case V460 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferGetBits32', V3, V456, V459}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E234, E235)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E232, E233)); _ -> fun (V461) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferSetBits64"/utf8>> -> case V5 of [E236 | E237] -> (fun (V462, V463) -> case V463 of [E238 | E239] -> (fun (V464, V465) -> fun (V466) -> case V465 of [E240 | E241] -> (fun (V467, V468) -> case V468 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferSetBits64', V3, V462, V464, V467}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E240, E241)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E238, E239)); _ -> fun (V469) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E236, E237)); _ -> fun (V470) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferGetBits64"/utf8>> -> case V5 of [E242 | E243] -> (fun (V471, V472) -> fun (V473) -> case V472 of [E244 | E245] -> (fun (V474, V475) -> case V475 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferGetBits64', V3, V471, V474}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E244, E245)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E242, E243)); _ -> fun (V476) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferSetInt32"/utf8>> -> case V5 of [E246 | E247] -> (fun (V477, V478) -> case V478 of [E248 | E249] -> (fun (V479, V480) -> fun (V481) -> case V480 of [E250 | E251] -> (fun (V482, V483) -> case V483 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferSetInt32', V3, V477, V479, V482}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E250, E251)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E248, E249)); _ -> fun (V484) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E246, E247)); _ -> fun (V485) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferGetInt32"/utf8>> -> case V5 of [E252 | E253] -> (fun (V486, V487) -> fun (V488) -> case V487 of [E254 | E255] -> (fun (V489, V490) -> case V490 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferGetInt32', V3, V486, V489}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E254, E255)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E252, E253)); _ -> fun (V491) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferSetInt64"/utf8>> -> case V5 of [E256 | E257] -> (fun (V492, V493) -> case V493 of [E258 | E259] -> (fun (V494, V495) -> fun (V496) -> case V495 of [E260 | E261] -> (fun (V497, V498) -> case V498 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferSetInt64', V3, V492, V494, V497}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E260, E261)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E258, E259)); _ -> fun (V499) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E256, E257)); _ -> fun (V500) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferGetInt64"/utf8>> -> case V5 of [E262 | E263] -> (fun (V501, V502) -> fun (V503) -> case V502 of [E264 | E265] -> (fun (V504, V505) -> case V505 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferGetInt64', V3, V501, V504}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E264, E265)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E262, E263)); _ -> fun (V506) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferSetDouble"/utf8>> -> case V5 of [E266 | E267] -> (fun (V507, V508) -> case V508 of [E268 | E269] -> (fun (V509, V510) -> fun (V511) -> case V510 of [E270 | E271] -> (fun (V512, V513) -> case V513 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferSetDouble', V3, V507, V509, V512}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E270, E271)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E268, E269)); _ -> fun (V514) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E266, E267)); _ -> fun (V515) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferGetDouble"/utf8>> -> case V5 of [E272 | E273] -> (fun (V516, V517) -> fun (V518) -> case V517 of [E274 | E275] -> (fun (V519, V520) -> case V520 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferGetDouble', V3, V516, V519}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E274, E275)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E272, E273)); _ -> fun (V521) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferSetString"/utf8>> -> case V5 of [E276 | E277] -> (fun (V522, V523) -> case V523 of [E278 | E279] -> (fun (V524, V525) -> fun (V526) -> case V525 of [E280 | E281] -> (fun (V527, V528) -> case V528 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferSetString', V3, V522, V524, V527}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E280, E281)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E278, E279)); _ -> fun (V529) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E276, E277)); _ -> fun (V530) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__erlBufferGetString"/utf8>> -> case V5 of [E282 | E283] -> (fun (V531, V532) -> case V532 of [E284 | E285] -> (fun (V533, V534) -> fun (V535) -> case V534 of [E286 | E287] -> (fun (V536, V537) -> case V537 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBufferGetString', V3, V531, V533, V536}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E286, E287)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E284, E285)); _ -> fun (V538) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E282, E283)); _ -> fun (V539) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__newBuilder"/utf8>> -> fun (V540) -> case V5 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EBinary', V3, <<""/utf8>>}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__builderToByteString"/utf8>> -> fun (V541) -> case V5 of [E288 | E289] -> (fun (V542, V543) -> case V543 of [] -> {'Prelude.Types.Right', V542}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E288, E289)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__byteStringToIterator"/utf8>> -> fun (V544) -> case V5 of [E290 | E291] -> (fun (V545, V546) -> case V546 of [] -> {'Prelude.Types.Right', V545}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E290, E291)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__freeIterator"/utf8>> -> fun (V547) -> case V5 of [E292 | E293] -> (fun (V548, V549) -> case V549 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkUnit'(V3))}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E292, E293)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeInt8"/utf8>> -> case V5 of [E294 | E295] -> (fun (V550, V551) -> fun (V552) -> case V551 of [E296 | E297] -> (fun (V553, V554) -> case V554 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseWriteInt', 8, V3, V553, V550}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E296, E297)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E294, E295)); _ -> fun (V555) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readInt8"/utf8>> -> fun (V556) -> case V5 of [E298 | E299] -> (fun (V557, V558) -> case V558 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseReadInt', 8, V3, V557}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E298, E299)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeInt16"/utf8>> -> case V5 of [E300 | E301] -> (fun (V559, V560) -> fun (V561) -> case V560 of [E302 | E303] -> (fun (V562, V563) -> case V563 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseWriteInt', 16, V3, V562, V559}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E302, E303)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E300, E301)); _ -> fun (V564) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readInt16"/utf8>> -> fun (V565) -> case V5 of [E304 | E305] -> (fun (V566, V567) -> case V567 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseReadInt', 16, V3, V566}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E304, E305)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeInt32"/utf8>> -> case V5 of [E306 | E307] -> (fun (V568, V569) -> fun (V570) -> case V569 of [E308 | E309] -> (fun (V571, V572) -> case V572 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseWriteInt', 32, V3, V571, V568}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E308, E309)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E306, E307)); _ -> fun (V573) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readInt32"/utf8>> -> fun (V574) -> case V5 of [E310 | E311] -> (fun (V575, V576) -> case V576 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseReadInt', 32, V3, V575}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E310, E311)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeInt64"/utf8>> -> case V5 of [E312 | E313] -> (fun (V577, V578) -> fun (V579) -> case V578 of [E314 | E315] -> (fun (V580, V581) -> case V581 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseWriteInt', 64, V3, V580, V577}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E314, E315)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E312, E313)); _ -> fun (V582) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readInt64"/utf8>> -> fun (V583) -> case V5 of [E316 | E317] -> (fun (V584, V585) -> case V585 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseReadInt', 64, V3, V584}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E316, E317)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeBits8"/utf8>> -> case V5 of [E318 | E319] -> (fun (V586, V587) -> fun (V588) -> case V587 of [E320 | E321] -> (fun (V589, V590) -> case V590 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseWriteBits', 8, V3, V589, V586}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E320, E321)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E318, E319)); _ -> fun (V591) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readBits8"/utf8>> -> fun (V592) -> case V5 of [E322 | E323] -> (fun (V593, V594) -> case V594 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseReadBits', 8, V3, V593}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E322, E323)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeBits16"/utf8>> -> case V5 of [E324 | E325] -> (fun (V595, V596) -> fun (V597) -> case V596 of [E326 | E327] -> (fun (V598, V599) -> case V599 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseWriteBits', 16, V3, V598, V595}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E326, E327)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E324, E325)); _ -> fun (V600) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readBits16"/utf8>> -> fun (V601) -> case V5 of [E328 | E329] -> (fun (V602, V603) -> case V603 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseReadBits', 16, V3, V602}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E328, E329)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeBits32"/utf8>> -> case V5 of [E330 | E331] -> (fun (V604, V605) -> fun (V606) -> case V605 of [E332 | E333] -> (fun (V607, V608) -> case V608 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseWriteBits', 32, V3, V607, V604}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E332, E333)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E330, E331)); _ -> fun (V609) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readBits32"/utf8>> -> fun (V610) -> case V5 of [E334 | E335] -> (fun (V611, V612) -> case V612 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseReadBits', 32, V3, V611}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E334, E335)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeBits64"/utf8>> -> case V5 of [E336 | E337] -> (fun (V613, V614) -> fun (V615) -> case V614 of [E338 | E339] -> (fun (V616, V617) -> case V617 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseWriteBits', 64, V3, V616, V613}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E338, E339)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E336, E337)); _ -> fun (V618) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readBits64"/utf8>> -> fun (V619) -> case V5 of [E340 | E341] -> (fun (V620, V621) -> case V621 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseReadBits', 64, V3, V620}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E340, E341)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeString"/utf8>> -> case V5 of [E342 | E343] -> (fun (V622, V623) -> fun (V624) -> case V623 of [E344 | E345] -> (fun (V625, V626) -> case V626 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseWriteBinary', V3, V625, V622}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E344, E345)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E342, E343)); _ -> fun (V627) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readString"/utf8>> -> fun (V628) -> case V5 of [E346 | E347] -> (fun (V629, V630) -> case V630 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseReadBinary', V3, V629}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E346, E347)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeChar"/utf8>> -> case V5 of [E348 | E349] -> (fun (V631, V632) -> fun (V633) -> case V632 of [E350 | E351] -> (fun (V634, V635) -> case V635 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseWriteChar', V3, V634, V631}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E350, E351)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E348, E349)); _ -> fun (V636) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readChar"/utf8>> -> fun (V637) -> case V5 of [E352 | E353] -> (fun (V638, V639) -> case V639 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseReadChar', V3, V638}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E352, E353)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__writeDouble"/utf8>> -> case V5 of [E354 | E355] -> (fun (V640, V641) -> fun (V642) -> case V641 of [E356 | E357] -> (fun (V643, V644) -> case V644 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseWriteDouble', V3, V643, V640}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E356, E357)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end end(E354, E355)); _ -> fun (V645) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; <<"prim__readDouble"/utf8>> -> fun (V646) -> case V5 of [E358 | E359] -> (fun (V647, V648) -> case V648 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ESerialiseReadDouble', V3, V647}}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end(E358, E359)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; _ -> fun (V649) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; _ -> fun (V650) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; _ -> fun (V651) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end; _ -> fun (V652) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrowMsg'(V3, <<<<"Error: Badly formed external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))/binary>>))} end end.
'un--genDiv'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.Just', V5} -> ('un--genBoundedInt'(V0, V1, V5, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"div"/utf8>>, V3, V4})); _ -> fun (V6) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V3, V4}} end end.
'un--genDef'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.MkNmFun', V5, V6} -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport.LV'}, ('Idris.Idris2.Compiler.Erlang.IR.ErlExpr.LocalVars':'un--initLocalVars'(<<"V"/utf8>>))))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V30 = case ('Idris.Idris2.Compiler.Erlang.Name':'un--moduleNameFunctionName'(V1, V3)) of {'Builtin.MkPair', V12, V13} -> begin (V14 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--addLocalVars'(V11, V5, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'())))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V29 = case V18 of {'Builtin.MkPair', V19, V20} -> begin (V21 = ('un--genNmExp'(V11, V0, V1, V19, V6))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V28 = begin (V26 = {'Compiler.Erlang.IR.ErlExpr.MkFunDecl', V2, 1, V13, V20, V25}), fun (V27) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V26}} end end), V28 end(V22)) end end end end end), V29 end(V15)) end end end end end), V30 end(V8)) end end end end; {'Core.CompileExpr.MkNmCon', V31, V32, V33} -> fun (V34) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Core.CompileExpr.MkNmForeign', V35, V36, V37} -> begin (V38 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport.LV'}, ('Idris.Idris2.Compiler.Erlang.IR.ErlExpr.LocalVars':'un--initLocalVars'(<<"V"/utf8>>))))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V67 = case ('Idris.Idris2.Compiler.Erlang.Name':'un--moduleNameFunctionName'(V1, V3)) of {'Builtin.MkPair', V43, V44} -> begin (V45 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVars'(V42, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V36))))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V66 = begin (V58 = ('un--genForeign'(V42, V1, V2, V3, ((begin (V55 = fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V53, V54)) end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end(fun (V50) -> {'Compiler.Erlang.IR.ErlExpr.ELocal', V2, V50} end))(V49))))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V65 = begin (V63 = {'Compiler.Erlang.IR.ErlExpr.MkFunDecl', V2, 1, V44, V49, V62}), fun (V64) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V63}} end end), V65 end(V59)) end end end end), V66 end(V46)) end end end end end), V67 end(V39)) end end end end; {'Core.CompileExpr.MkNmError', V68} -> begin (V69 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport.LV'}, ('Idris.Idris2.Compiler.Erlang.IR.ErlExpr.LocalVars':'un--initLocalVars'(<<"V"/utf8>>))))), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V84 = case ('Idris.Idris2.Compiler.Erlang.Name':'un--moduleNameFunctionName'(V1, V3)) of {'Builtin.MkPair', V74, V75} -> begin (V76 = ('un--genNmExp'(V73, V0, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V68))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V83 = begin (V81 = {'Compiler.Erlang.IR.ErlExpr.MkFunDecl', V2, 0, V75, [], V80}), fun (V82) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V81}} end end), V83 end(V77)) end end end end end), V84 end(V70)) end end end end end.
'un--genDecodeTuple'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVars'(V0, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V17 = ('un--genDecode'(V0, V1, V2, {'Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V8)), {'Compiler.Erlang.IR.ErlExpr.ETuple', V1, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V9} end))(V8))}}))), V17 end(V5)) end end end end.
'un--genDecode'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V10 = fun (V9) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, V2, ('Idris.Idris2.Data.List1':'un--singleton'({'Compiler.Erlang.IR.ErlExpr.MTransform', V3, V8, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genJust'(V1, {'Compiler.Erlang.IR.ErlExpr.ELocal', V1, V8}))})), {'Prelude.Types.Just', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genNothing'(V1))}}} end), V10 end(V5)) end end end end.
'un--genConstant'(V0) -> case V0 of {'Core.TT.I', V1} -> {'Compiler.Erlang.IR.ErlExpr.IInt', V1}; {'Core.TT.I8', V2} -> {'Compiler.Erlang.IR.ErlExpr.IInt8', V2}; {'Core.TT.I16', V3} -> {'Compiler.Erlang.IR.ErlExpr.IInt16', V3}; {'Core.TT.I32', V4} -> {'Compiler.Erlang.IR.ErlExpr.IInt32', V4}; {'Core.TT.I64', V5} -> {'Compiler.Erlang.IR.ErlExpr.IInt64', V5}; {'Core.TT.BI', V6} -> {'Compiler.Erlang.IR.ErlExpr.IInteger', V6}; {'Core.TT.B8', V7} -> {'Compiler.Erlang.IR.ErlExpr.IB8', V7}; {'Core.TT.B16', V8} -> {'Compiler.Erlang.IR.ErlExpr.IB16', V8}; {'Core.TT.B32', V9} -> {'Compiler.Erlang.IR.ErlExpr.IB32', V9}; {'Core.TT.B64', V10} -> {'Compiler.Erlang.IR.ErlExpr.IB64', V10}; {'Core.TT.Str', V11} -> {'Compiler.Erlang.IR.ErlExpr.IString', V11}; {'Core.TT.Ch', V12} -> {'Compiler.Erlang.IR.ErlExpr.IChar', V12}; {'Core.TT.Db', V13} -> {'Compiler.Erlang.IR.ErlExpr.IDouble', V13}; {'Core.TT.WorldVal'} -> {'Compiler.Erlang.IR.ErlExpr.IWorldVal'}; {'Core.TT.PrT', V14} -> ('un--genPrimType'(V14)) end.
'un--genConstAlt'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.MkNConstAlt', V5, V6} -> begin (V7 = ('un--genNmExp'(V0, V1, V2, V3, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.MkConstAlt', ('un--genConstant'(V5)), V11}} end), V13 end(V8)) end end end end end.
'un--genConAlt'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.CompileExpr.MkNConAlt', V6, V7, V8, V9, V10} -> begin (V11 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--addLocalVars'(V0, V9, V3))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V24 = case V15 of {'Builtin.MkPair', V16, V17} -> begin (V18 = ('un--genNmExp'(V0, V1, V2, V16, V10))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V23 = ('un--readConAlt'(V0, V1, V2, V4, V6, V17, V22))), V23 end(V19)) end end end end end), V24 end(V12)) end end end end end.
'un--genCon'(V0, V1, V2, V3, V4) -> case V3 of {'Core.Name.NS', V5, V6} -> case V6 of {'Core.Name.UN', V7} -> case V7 of {'Core.Name.Basic', V8} -> begin (V9 = {'Core.Name.NS', V5, {'Core.Name.UN', {'Core.Name.Basic', V8}}}), case ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V5)) of [E0 | E1] -> (fun (V10, V11) -> case V10 of <<"Basics"/utf8>> -> case V11 of [E2 | E3] -> (fun (V12, V13) -> case V12 of <<"Prelude"/utf8>> -> case V13 of [] -> case V8 of <<"Nil"/utf8>> -> fun (V14) -> case V4 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ENil', V2}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"::"/utf8>> -> case V4 of [E4 | E5] -> (fun (V15, V16) -> fun (V17) -> case V16 of [E6 | E7] -> (fun (V18, V19) -> case V19 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECons', V2, V15, V18}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end(E6, E7)); _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E4, E5)); _ -> fun (V20) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V21) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V22) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V23) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E2, E3)); _ -> fun (V24) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"Types"/utf8>> -> case V11 of [E8 | E9] -> (fun (V25, V26) -> case V25 of <<"Erlang"/utf8>> -> case V26 of [] -> case V8 of <<"MkAtom"/utf8>> -> fun (V27) -> case V4 of [E10 | E11] -> (fun (V28, V29) -> case V29 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafeStringToAtom'(V2, V28))}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end(E10, E11)); _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkCharlist"/utf8>> -> fun (V30) -> case V4 of [E12 | E13] -> (fun (V31, V32) -> case V32 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V2, <<"unicode"/utf8>>, <<"characters_to_list"/utf8>>, [V31 | []]))}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end(E12, E13)); _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkTuple0"/utf8>> -> fun (V33) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple1"/utf8>> -> fun (V34) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple2"/utf8>> -> fun (V35) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple3"/utf8>> -> fun (V36) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple4"/utf8>> -> fun (V37) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple5"/utf8>> -> fun (V38) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple6"/utf8>> -> fun (V39) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple7"/utf8>> -> fun (V40) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple8"/utf8>> -> fun (V41) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkFun0"/utf8>> -> case V4 of [E14 | E15] -> (fun (V42, V43) -> case V43 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 0, fun (V44) -> V44 end, V42)); _ -> fun (V45) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E14, E15)); _ -> fun (V46) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkFun1"/utf8>> -> case V4 of [E16 | E17] -> (fun (V47, V48) -> case V48 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 1, fun (V49) -> V49 end, V47)); _ -> fun (V50) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E16, E17)); _ -> fun (V51) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkFun2"/utf8>> -> case V4 of [E18 | E19] -> (fun (V52, V53) -> case V53 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 2, fun (V54) -> V54 end, V52)); _ -> fun (V55) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E18, E19)); _ -> fun (V56) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkFun3"/utf8>> -> case V4 of [E20 | E21] -> (fun (V57, V58) -> case V58 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 3, fun (V59) -> V59 end, V57)); _ -> fun (V60) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E20, E21)); _ -> fun (V61) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkFun4"/utf8>> -> case V4 of [E22 | E23] -> (fun (V62, V63) -> case V63 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 4, fun (V64) -> V64 end, V62)); _ -> fun (V65) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E22, E23)); _ -> fun (V66) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkFun5"/utf8>> -> case V4 of [E24 | E25] -> (fun (V67, V68) -> case V68 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 5, fun (V69) -> V69 end, V67)); _ -> fun (V70) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E24, E25)); _ -> fun (V71) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkFun6"/utf8>> -> case V4 of [E26 | E27] -> (fun (V72, V73) -> case V73 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 6, fun (V74) -> V74 end, V72)); _ -> fun (V75) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E26, E27)); _ -> fun (V76) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkFun7"/utf8>> -> case V4 of [E28 | E29] -> (fun (V77, V78) -> case V78 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 7, fun (V79) -> V79 end, V77)); _ -> fun (V80) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E28, E29)); _ -> fun (V81) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkFun8"/utf8>> -> case V4 of [E30 | E31] -> (fun (V82, V83) -> case V83 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 8, fun (V84) -> V84 end, V82)); _ -> fun (V85) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E30, E31)); _ -> fun (V86) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkIOFun0"/utf8>> -> case V4 of [E32 | E33] -> (fun (V87, V88) -> case V88 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 0, fun (V89) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V89)) end, V87)); _ -> fun (V90) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E32, E33)); _ -> fun (V91) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkIOFun1"/utf8>> -> case V4 of [E34 | E35] -> (fun (V92, V93) -> case V93 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 1, fun (V94) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V94)) end, V92)); _ -> fun (V95) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E34, E35)); _ -> fun (V96) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkIOFun2"/utf8>> -> case V4 of [E36 | E37] -> (fun (V97, V98) -> case V98 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 2, fun (V99) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V99)) end, V97)); _ -> fun (V100) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E36, E37)); _ -> fun (V101) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkIOFun3"/utf8>> -> case V4 of [E38 | E39] -> (fun (V102, V103) -> case V103 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 3, fun (V104) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V104)) end, V102)); _ -> fun (V105) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E38, E39)); _ -> fun (V106) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkIOFun4"/utf8>> -> case V4 of [E40 | E41] -> (fun (V107, V108) -> case V108 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 4, fun (V109) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V109)) end, V107)); _ -> fun (V110) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E40, E41)); _ -> fun (V111) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkIOFun5"/utf8>> -> case V4 of [E42 | E43] -> (fun (V112, V113) -> case V113 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 5, fun (V114) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V114)) end, V112)); _ -> fun (V115) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E42, E43)); _ -> fun (V116) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkIOFun6"/utf8>> -> case V4 of [E44 | E45] -> (fun (V117, V118) -> case V118 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 6, fun (V119) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V119)) end, V117)); _ -> fun (V120) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E44, E45)); _ -> fun (V121) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkIOFun7"/utf8>> -> case V4 of [E46 | E47] -> (fun (V122, V123) -> case V123 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 7, fun (V124) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V124)) end, V122)); _ -> fun (V125) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E46, E47)); _ -> fun (V126) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MkIOFun8"/utf8>> -> case V4 of [E48 | E49] -> (fun (V127, V128) -> case V128 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 8, fun (V129) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V129)) end, V127)); _ -> fun (V130) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E48, E49)); _ -> fun (V131) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V132) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V133) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V134) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E8, E9)); _ -> fun (V135) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"MaybeImproperList"/utf8>> -> case V11 of [E50 | E51] -> (fun (V136, V137) -> case V136 of <<"Types"/utf8>> -> case V137 of [E52 | E53] -> (fun (V138, V139) -> case V138 of <<"Erlang"/utf8>> -> case V139 of [] -> case V8 of <<"Nil"/utf8>> -> fun (V140) -> case V4 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ENil', V2}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"::"/utf8>> -> case V4 of [E54 | E55] -> (fun (V141, V142) -> fun (V143) -> case V142 of [E56 | E57] -> (fun (V144, V145) -> case V145 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECons', V2, V141, V144}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end(E56, E57)); _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E54, E55)); _ -> fun (V146) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V147) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V148) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V149) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E52, E53)); _ -> fun (V150) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V151) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E50, E51)); _ -> fun (V152) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"ProperList"/utf8>> -> case V11 of [E58 | E59] -> (fun (V153, V154) -> case V153 of <<"Types"/utf8>> -> case V154 of [E60 | E61] -> (fun (V155, V156) -> case V155 of <<"Erlang"/utf8>> -> case V156 of [] -> case V8 of <<"Nil"/utf8>> -> fun (V157) -> case V4 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ENil', V2}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; <<"::"/utf8>> -> case V4 of [E62 | E63] -> (fun (V158, V159) -> fun (V160) -> case V159 of [E64 | E65] -> (fun (V161, V162) -> case V162 of [] -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECons', V2, V158, V161}}; _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end(E64, E65)); _ -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E62, E63)); _ -> fun (V163) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V164) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V165) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V166) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E60, E61)); _ -> fun (V167) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V168) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E58, E59)); _ -> fun (V169) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end; _ -> fun (V170) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end(E0, E1)); _ -> fun (V171) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V9)), V4}} end end end; _ -> fun (V172) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V3)), V4}} end end; _ -> fun (V173) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V3)), V4}} end end; _ -> fun (V174) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V3)), V4}} end end.
'un--genBoundedInt'(V0, V1, V2, V3) -> case V2 of {'Core.TT.Signed', V4} -> case V4 of {'Core.TT.Unlimited'} -> fun (V5) -> {'Prelude.Types.Right', V3} end; {'Core.TT.P', V6} -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genToBoundedSignedInt'(V0, V1, ('un--precToNat'(V6)), V3)) end; {'Core.TT.Unsigned', V7} -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genToBoundedUnsignedInt'(V0, V1, ('un--precToNat'(V7)), V3)) end.
'un--genAdd'(V0, V1, V2, V3, V4) -> case V2 of {'Prelude.Types.Just', V5} -> ('un--genBoundedInt'(V0, V1, V5, {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V3, V4})); _ -> fun (V6) -> {'Prelude.Types.Right', {'Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V3, V4}} end end.
'un--externalArity'(V0) -> case V0 of {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} -> 0; {'Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', V1} -> V1 end.
'un--constPrimitives'(V0, V1) -> {'Compiler.Common.MkConstantPrimitives', fun (V2) -> fun (V3) -> fun (V4) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genCharToInt'(V1, V3))} end end end, fun (V5) -> fun (V6) -> fun (V7) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntToChar'(V1, V6))} end end end, fun (V8) -> fun (V9) -> begin (V10 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genStringToInteger'(V0, V1, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V15 = ('un--genBoundedInt'(V0, V1, V8, V14))), V15 end(V11)) end end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"erlang"/utf8>>, <<"integer_to_binary"/utf8>>, [V17 | []]))} end end end, fun (V19) -> fun (V20) -> ('un--genBoundedInt'(V0, V1, V19, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"erlang"/utf8>>, <<"trunc"/utf8>>, [V20 | []])))) end end, fun (V21) -> fun (V22) -> fun (V23) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"erlang"/utf8>>, <<"float"/utf8>>, [V22 | []]))} end end end, fun (V24) -> fun (V25) -> fun (V26) -> ('nested--9007-2731--in--un--intToInt'(V1, V0, V24, V25, V26)) end end end}.
'un--argsToErlMatchers'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> {'Builtin.MkPair', V1, {'Compiler.Erlang.IR.ErlExpr.MAny'}} end))(V0)).
