-module('Idris.Idris2.Parser.Lexer.Source').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--lexTo-11143'/3,
  'nested--6740-11068--in--un--spotComment'/3,
  'nested--6372-10705--in--un--removeUnderscores'/1,
  'nested--6372-10704--in--un--removeOptionalLeadingSpace'/1,
  'nested--6372-10702--in--un--parseNamespace'/1,
  'nested--6372-10701--in--un--parseIdent'/1,
  'nested--6740-11067--in--un--isNotSpace'/3,
  'nested--6210-10463--in--un--fromBin'/2,
  'nested--6372-10703--in--un--countHashtag'/1,
  'nested--6210-10462--in--un--castBin'/2,
  'dn--un--show_Show_Token'/1,
  'dn--un--showPrec_Show_Token'/2,
  'dn--un--pretty_Pretty_Void_Token'/1,
  'dn--un--prettyPrec_Pretty_Void_Token'/2,
  'dn--un--__Impl_Show_Token'/0,
  'dn--un--__Impl_Pretty_Void_Token'/0,
  'un--validSymbol'/0,
  'un--toEndComment'/1,
  'un--symbols'/0,
  'un--stringTokens'/2,
  'un--stringEnd'/1,
  'un--stringBegin'/0,
  'un--singleDash'/1,
  'un--singleBrace'/1,
  'un--reservedSymbols'/0,
  'un--reservedInfixSymbols'/0,
  'un--rawTokens'/0,
  'un--pragma'/0,
  'un--multilineEnd'/1,
  'un--multilineBegin'/0,
  'un--mkDirective'/1,
  'un--lexTo'/2,
  'un--lex'/1,
  'un--keywords'/0,
  'un--holeIdent'/0,
  'un--groupSymbols'/0,
  'un--groupClose'/1,
  'un--fromOctLit'/1,
  'un--fromHexLit'/1,
  'un--fromBinLit'/1,
  'un--doubleLit'/0,
  'un--doubleDash'/1,
  'un--dotIdent'/0,
  'un--docComment'/0,
  'un--cgDirective'/0,
  'un--blockComment'/0
]).
'case--lexTo-11143'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> case V5 of {'Libraries.Text.Lexer.Tokenizer.EndInput'} -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> begin (V11 = [{'Libraries.Text.Bounded.MkBounded', {'Parser.Lexer.Source.EndInput'}, 0, {'Libraries.Text.Bounded.MkBounds', V7, V9, V7, V9}} | []]), {'Prelude.Types.Right', ((begin (V28 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> case V25 of {'Builtin.MkPair', V26, V27} -> {'Builtin.MkPair', V26, (V24(V27))} end end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V21) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V21, V11)) end))(('Idris.Idris2.Data.Either':'un--partitionEithers'(((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('nested--6740-11068--in--un--spotComment'(V0, V1, V13)) end))(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V12) -> ('nested--6740-11067--in--un--isNotSpace'(V0, V1, V12)) end, V3))))))))} end; _ -> {'Prelude.Types.Left', V4} end; _ -> {'Prelude.Types.Left', V4} end; _ -> {'Prelude.Types.Left', V4} end; _ -> {'Prelude.Types.Left', V4} end end.
'nested--6740-11068--in--un--spotComment'(V0, V1, V2) -> case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> case V3 of {'Parser.Lexer.Source.Comment'} -> {'Prelude.Types.Left', ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> {'Builtin.MkUnit'} end))(V2))}; _ -> {'Prelude.Types.Right', V2} end end.
'nested--6372-10705--in--un--removeUnderscores'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $_)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))).
'nested--6372-10704--in--un--removeOptionalLeadingSpace'(V0) -> case ('Idris.Idris2.Data.String':'un--strM'(V0)) of {'Data.String.StrCons', V1, V2} -> case V1 of $  -> V2; _ -> V0 end; _ -> V0 end.
'nested--6372-10702--in--un--parseNamespace'(V0) -> case ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespacedIdent'(V0)) of {'Builtin.MkPair', V1, V2} -> case V1 of {'Prelude.Types.Nothing'} -> ('nested--6372-10701--in--un--parseIdent'(V2)); {'Prelude.Types.Just', V3} -> {'Parser.Lexer.Source.DotSepIdent', V3, V2} end end.
'nested--6372-10701--in--un--parseIdent'(V0) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> V21 end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V29, V30)) end end}, V0, ('un--keywords'()))) of 1 -> {'Parser.Lexer.Source.Keyword', V0}; 0 -> {'Parser.Lexer.Source.Ident', V0} end.
'nested--6740-11067--in--un--isNotSpace'(V0, V1, V2) -> case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> case V3 of {'Parser.Lexer.Source.Space'} -> 0; _ -> 1 end end.
'nested--6210-10463--in--un--fromBin'(V0, V1) -> case V1 of [] -> 0; [E0 | E1] -> (fun (V2, V3) -> case V2 of 0 -> (('nested--6210-10463--in--un--fromBin'(V0, V3)) * 2); _ -> (V2 + (('nested--6210-10463--in--un--fromBin'(V0, V3)) * 2)) end end(E0, E1)) end.
'nested--6372-10703--in--un--countHashtag'(V0) -> ('Idris.Idris2.Prelude.Types':'un--count'({'Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> V21 end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V27, $#)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))).
'nested--6210-10462--in--un--castBin'(V0, V1) -> case V1 of $1 -> 1; _ -> 0 end.
'dn--un--show_Show_Token'(V0) -> case V0 of {'Parser.Lexer.Source.CharLit', V1} -> <<<<"character "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V1))/binary>>; {'Parser.Lexer.Source.DoubleLit', V2} -> <<<<"double "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V2))/binary>>; {'Parser.Lexer.Source.IntegerLit', V3} -> <<<<"literal "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V3))/binary>>; {'Parser.Lexer.Source.StringBegin', V4} -> case V4 of 1 -> <<"string begin"/utf8>>; 0 -> <<"multiline string begin"/utf8>> end; {'Parser.Lexer.Source.StringEnd'} -> <<"string end"/utf8>>; {'Parser.Lexer.Source.InterpBegin'} -> <<"string interp begin"/utf8>>; {'Parser.Lexer.Source.InterpEnd'} -> <<"string interp end"/utf8>>; {'Parser.Lexer.Source.StringLit', V5, V6} -> <<<<"string"/utf8>>/binary, <<('Idris.Idris2.Data.String':'un--replicate'(V5, $#))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V6))/binary>>/binary>>/binary>>; {'Parser.Lexer.Source.HoleIdent', V7} -> <<<<"hole identifier "/utf8>>/binary, V7/binary>>; {'Parser.Lexer.Source.Ident', V8} -> <<<<"identifier "/utf8>>/binary, V8/binary>>; {'Parser.Lexer.Source.DotSepIdent', V9, V10} -> <<<<"namespaced identifier "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V9))/binary, <<<<"."/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V10))/binary>>/binary>>/binary>>; {'Parser.Lexer.Source.DotIdent', V11} -> <<<<"dot+identifier "/utf8>>/binary, V11/binary>>; {'Parser.Lexer.Source.Symbol', V12} -> <<<<"symbol "/utf8>>/binary, V12/binary>>; {'Parser.Lexer.Source.Space'} -> <<"whitespace"/utf8>>; {'Parser.Lexer.Source.Comment'} -> <<"comment"/utf8>>; {'Parser.Lexer.Source.DocComment', V13} -> <<<<"doc comment: \x{22}"/utf8>>/binary, <<V13/binary, <<"\x{22}"/utf8>>/binary>>/binary>>; {'Parser.Lexer.Source.CGDirective', V14} -> <<<<"CGDirective "/utf8>>/binary, V14/binary>>; {'Parser.Lexer.Source.EndInput'} -> <<"end of input"/utf8>>; {'Parser.Lexer.Source.Keyword', V15} -> V15; {'Parser.Lexer.Source.Pragma', V16} -> <<<<"pragma "/utf8>>/binary, V16/binary>>; {'Parser.Lexer.Source.Unrecognised', V17} -> <<<<"Unrecognised "/utf8>>/binary, V17/binary>> end.
'dn--un--showPrec_Show_Token'(V0, V1) -> ('dn--un--show_Show_Token'(V1)).
'dn--un--pretty_Pretty_Void_Token'(V0) -> case V0 of {'Parser.Lexer.Source.CharLit', V1} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V3 = fun (V2) -> V2 end), fun (V4) -> (V3(V4)) end end(<<"character"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--squotes'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V1)))))); {'Parser.Lexer.Source.DoubleLit', V5} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V7 = fun (V6) -> V6 end), fun (V8) -> (V7(V8)) end end(<<"double"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V5)))))); {'Parser.Lexer.Source.IntegerLit', V9} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V11 = fun (V10) -> V10 end), fun (V12) -> (V11(V12)) end end(<<"literal"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V9)))))); {'Parser.Lexer.Source.StringBegin', V13} -> case V13 of 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"string begin"/utf8>>)); 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"multiline string begin"/utf8>>)) end; {'Parser.Lexer.Source.StringEnd'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"string end"/utf8>>)); {'Parser.Lexer.Source.InterpBegin'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"string interp begin"/utf8>>)); {'Parser.Lexer.Source.InterpEnd'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"string interp end"/utf8>>)); {'Parser.Lexer.Source.StringLit', V14, V15} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(<<<<"string"/utf8>>/binary, ('Idris.Idris2.Data.String':'un--replicate'(V14, $#))/binary>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dquotes'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V15)))))); {'Parser.Lexer.Source.HoleIdent', V16} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"hole identifier"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V16)))); {'Parser.Lexer.Source.Ident', V17} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V19 = fun (V18) -> V18 end), fun (V20) -> (V19(V20)) end end(<<"identifier"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V17)))); {'Parser.Lexer.Source.DotSepIdent', V21, V22} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"namespaced identifier"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(((begin (V25 = fun (V23) -> fun (V24) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V23, V24)) end end), fun (V26) -> fun (V27) -> ((V25(V26))(V27)) end end end(('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_Void_Namespace'(V21))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dot'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V22)))))); {'Parser.Lexer.Source.DotIdent', V28} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V30 = fun (V29) -> V29 end), fun (V31) -> (V30(V31)) end end(<<"dot+identifier"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V28)))); {'Parser.Lexer.Source.Symbol', V32} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V34 = fun (V33) -> V33 end), fun (V35) -> (V34(V35)) end end(<<"symbol"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V32)))); {'Parser.Lexer.Source.Space'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V37 = fun (V36) -> V36 end), fun (V38) -> (V37(V38)) end end(<<"space"/utf8>>)))); {'Parser.Lexer.Source.Comment'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V40 = fun (V39) -> V39 end), fun (V41) -> (V40(V41)) end end(<<"comment"/utf8>>)))); {'Parser.Lexer.Source.DocComment', V42} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"doc comment:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dquotes'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V42)))))); {'Parser.Lexer.Source.CGDirective', V43} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V45 = fun (V44) -> V44 end), fun (V46) -> (V45(V46)) end end(<<"CGDirective"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V43)))); {'Parser.Lexer.Source.EndInput'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"end of input"/utf8>>)); {'Parser.Lexer.Source.Keyword', V47} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V47)); {'Parser.Lexer.Source.Pragma', V48} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V50 = fun (V49) -> V49 end), fun (V51) -> (V50(V51)) end end(<<"pragma"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V48)))); {'Parser.Lexer.Source.Unrecognised', V52} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V54 = fun (V53) -> V53 end), fun (V55) -> (V54(V55)) end end(<<"Unrecognised"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V52)))) end.
'dn--un--prettyPrec_Pretty_Void_Token'(V0, V1) -> ('dn--un--pretty_Pretty_Void_Token'(V1)).
'dn--un--__Impl_Show_Token'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Token'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Token'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_Token'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_Token'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_Token'(V1, V2)) end end}.
'un--validSymbol'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V0) -> ('Idris.Idris2.Core.Name':'un--isOpChar'(V0)) end)))).
'un--toEndComment'(V0) -> case V0 of 0 -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--empty'()); _ -> begin (V1 = (V0 - 1)), ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V2) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V2, $-)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V2, ${)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V2, $\x{22})); 0 -> 0 end; 0 -> 0 end end)))), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--eof'()), ('un--toEndComment'((V1 + 1))))) end}, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'(${)), fun () -> ('un--singleBrace'(V1)) end}, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)), fun () -> ('un--singleDash'(V1)) end}, {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--stringLit'()), fun () -> ('un--toEndComment'((V1 + 1))) end})))))) end end.
'un--symbols'() -> [<<","/utf8>> | [<<";"/utf8>> | [<<"_"/utf8>> | [<<"`"/utf8>> | []]]]].
'un--stringTokens'(V0, V1) -> begin (V2 = <<<<"\x{5c}"/utf8>>/binary, ('Idris.Idris2.Data.String':'un--replicate'(V1, $#))/binary>>), begin (V3 = <<V2/binary, <<"{"/utf8>>/binary>>), begin (V4 = ('Idris.Idris2.Libraries.Text.Lexer':'un--escape'(('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V2)), ('Idris.Idris2.Libraries.Text.Lexer':'un--any'())))), begin (V5 = ('Idris.Idris2.Libraries.Text.Lexer':'un--non'(('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(case V0 of 1 -> ('un--multilineEnd'(V1)); 0 -> ('un--stringEnd'(V1)) end))))), ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--someUntil'(('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V3)), ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'(V4, V5)))), fun (V6) -> {'Parser.Lexer.Source.StringLit', V1, V6} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--compose'(('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V3)), fun (V7) -> {'Parser.Lexer.Source.InterpBegin'} end, fun (V8) -> {'Builtin.MkUnit'} end, fun () -> fun (V9) -> ('un--rawTokens'()) end end, fun (V10) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($})) end, fun (V11) -> {'Parser.Lexer.Source.InterpEnd'} end)) end)) end end end end.
'un--stringEnd'(V0) -> <<<<"\x{22}"/utf8>>/binary, ('Idris.Idris2.Data.String':'un--replicate'(V0, $#))/binary>>.
'un--stringBegin'() -> {'Libraries.Text.Lexer.Core.SeqEmpty', ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($#)))), ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{22}))}.
'un--singleDash'(V0) -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)), fun () -> ('un--doubleDash'(V0)) end}, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($})), fun () -> ('un--toEndComment'(V0)) end}, ('un--toEndComment'((V0 + 1))))))).
'un--singleBrace'(V0) -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--eof'()), ('un--singleDash'((V0 + 1))))) end}, ('un--toEndComment'((V0 + 1))))).
'un--reservedSymbols'() -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--symbols'()), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--groupSymbols'()), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> ('un--groupClose'(V0)) end))(('un--groupSymbols'()))), ('un--reservedInfixSymbols'()))))))).
'un--reservedInfixSymbols'() -> [<<"%"/utf8>> | [<<"\x{5c}"/utf8>> | [<<":"/utf8>> | [<<"="/utf8>> | [<<":="/utf8>> | [<<"$="/utf8>> | [<<"|"/utf8>> | [<<"|||"/utf8>> | [<<"<-"/utf8>> | [<<"->"/utf8>> | [<<"=>"/utf8>> | [<<"?"/utf8>> | [<<"!"/utf8>> | [<<"&"/utf8>> | [<<"**"/utf8>> | [<<".."/utf8>> | [<<"~"/utf8>> | [<<"@"/utf8>> | []]]]]]]]]]]]]]]]]]].
'un--rawTokens'() -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Parser.Lexer.Common':'un--comment'()), fun (V0) -> {'Parser.Lexer.Source.Comment'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--blockComment'()), fun (V1) -> {'Parser.Lexer.Source.Comment'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--docComment'()), fun (V2) -> {'Parser.Lexer.Source.DocComment', ('nested--6372-10704--in--un--removeOptionalLeadingSpace'(('Idris.Idris2.Libraries.Data.String.Extra':'un--drop'(3, V2))))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--cgDirective'()), fun (V3) -> ('un--mkDirective'(V3)) end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--holeIdent'()), fun (V4) -> {'Parser.Lexer.Source.HoleIdent', case ('string':'next_grapheme'(V4)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V5, V6) -> V6 end(E0, E1)); _ -> <<""/utf8>> end} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--compose'(('Idris.Idris2.Libraries.Text.Lexer':'un--choice'(1, {'Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> V27 end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, ((begin (V38 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V36, V37)) end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V33) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V33)) end))(('un--groupSymbols'()))))), fun (V41) -> {'Parser.Lexer.Source.Symbol', V41} end, fun (V42) -> V42 end, fun () -> fun (V43) -> ('un--rawTokens'()) end end, fun (V44) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(('un--groupClose'(V44)))) end, fun (V45) -> {'Parser.Lexer.Source.Symbol', V45} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--choice'(1, {'Prelude.Interfaces.MkFoldable', fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V53, V54, V55)) end end end end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V57)) end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V61, V62, V63, V64)) end end end end end end end, fun (V65) -> fun (V66) -> V66 end end, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V69, V70, V71)) end end end end end}, ((begin (V77 = fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V75, V76)) end end end end), fun (V78) -> fun (V79) -> ((((V77('erased'))('erased'))(V78))(V79)) end end end(fun (V72) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V72)) end))(('un--symbols'()))))), fun (V80) -> {'Parser.Lexer.Source.Symbol', V80} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--doubleLit'()), fun (V81) -> {'Parser.Lexer.Source.DoubleLit', case ('string':'to_float'(V81)) of {'error', 'no_float'} -> (fun (V82, V83) -> ('erlang':'float'(case ('string':'to_integer'(V81)) of {E2, E3} when (erlang:'is_integer'(E2)) -> (fun (V86, V87) -> case ('string':'is_empty'(V87)) of 'true' -> V86; _ -> 0 end end(E2, E3)); _ -> 0 end)) end('error', 'no_float')); {E4, E5} when (erlang:'is_float'(E4)) -> (fun (V84, V85) -> case ('string':'is_empty'(V85)) of 'true' -> V84; _ -> 0.0 end end(E4, E5)); _ -> 0.0 end} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--binUnderscoredLit'()), fun (V88) -> {'Parser.Lexer.Source.IntegerLit', ('un--fromBinLit'(('nested--6372-10705--in--un--removeUnderscores'(V88))))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--hexUnderscoredLit'()), fun (V89) -> {'Parser.Lexer.Source.IntegerLit', ('un--fromHexLit'(('nested--6372-10705--in--un--removeUnderscores'(V89))))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--octUnderscoredLit'()), fun (V90) -> {'Parser.Lexer.Source.IntegerLit', ('un--fromOctLit'(('nested--6372-10705--in--un--removeUnderscores'(V90))))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--digitsUnderscoredLit'()), fun (V91) -> {'Parser.Lexer.Source.IntegerLit', case ('string':'to_integer'(('nested--6372-10705--in--un--removeUnderscores'(V91)))) of {E6, E7} when (erlang:'is_integer'(E6)) -> (fun (V92, V93) -> case ('string':'is_empty'(V93)) of 'true' -> V92; _ -> 0 end end(E6, E7)); _ -> 0 end} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--compose'(('un--multilineBegin'()), fun (V94) -> {'Parser.Lexer.Source.StringBegin', 0} end, fun (V95) -> ('nested--6372-10703--in--un--countHashtag'(V95)) end, fun () -> fun (V96) -> ('un--stringTokens'(1, V96)) end end, fun (V97) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(('un--multilineEnd'(V97)))) end, fun (V98) -> {'Parser.Lexer.Source.StringEnd'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--compose'(('un--stringBegin'()), fun (V99) -> {'Parser.Lexer.Source.StringBegin', 1} end, fun (V100) -> ('nested--6372-10703--in--un--countHashtag'(V100)) end, fun () -> fun (V101) -> ('un--stringTokens'(0, V101)) end end, fun (V102) -> {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(('un--stringEnd'(V102)))), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--reject'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{22})))) end} end, fun (V103) -> {'Parser.Lexer.Source.StringEnd'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--charLit'()), fun (V104) -> {'Parser.Lexer.Source.CharLit', ('Idris.Idris2.Libraries.Utils.String':'un--stripQuotes'(V104))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--dotIdent'()), fun (V105) -> {'Parser.Lexer.Source.DotIdent', case ('string':'next_grapheme'(V105)) of [E8 | E9] when (erlang:'is_binary'(E9)) -> (fun (V106, V107) -> V107 end(E8, E9)); _ -> <<""/utf8>> end} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Parser.Lexer.Common':'un--namespacedIdent'()), fun (V108) -> ('nested--6372-10702--in--un--parseNamespace'(V108)) end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()), fun (V109) -> ('nested--6372-10701--in--un--parseIdent'(V109)) end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--pragma'()), fun (V110) -> {'Parser.Lexer.Source.Pragma', case ('string':'next_grapheme'(V110)) of [E10 | E11] when (erlang:'is_binary'(E11)) -> (fun (V111, V112) -> V112 end(E10, E11)); _ -> <<""/utf8>> end} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--space'()), fun (V113) -> {'Parser.Lexer.Source.Space'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--validSymbol'()), fun (V114) -> {'Parser.Lexer.Source.Symbol', V114} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--symbol'()), fun (V115) -> {'Parser.Lexer.Source.Unrecognised', V115} end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)).
'un--pragma'() -> {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($%)), fun () -> ('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()) end}.
'un--multilineEnd'(V0) -> <<<<"\x{22}\x{22}\x{22}"/utf8>>/binary, ('Idris.Idris2.Data.String':'un--replicate'(V0, $#))/binary>>.
'un--multilineBegin'() -> {'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEmpty', ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($#)))), ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(<<"\x{22}\x{22}\x{22}"/utf8>>))}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--manyUntil'(('Idris.Idris2.Libraries.Text.Lexer':'un--newline'()), ('Idris.Idris2.Libraries.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--newline'()) end}.
'un--mkDirective'(V0) -> {'Parser.Lexer.Source.CGDirective', ('Idris.Idris2.Data.String':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'(3, ('Idris.Idris2.Prelude.Types.String':'un--length'(V0)), V0))))}.
'un--lexTo'(V0, V1) -> ('case--lexTo-11143'(V1, V0, ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--lexTo'(V0, ('un--rawTokens'()), V1)))).
'un--lex'(V0) -> ('un--lexTo'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V1) -> 0 end)), V0)).
'un--keywords'() -> [<<"data"/utf8>> | [<<"module"/utf8>> | [<<"where"/utf8>> | [<<"let"/utf8>> | [<<"in"/utf8>> | [<<"do"/utf8>> | [<<"record"/utf8>> | [<<"auto"/utf8>> | [<<"default"/utf8>> | [<<"implicit"/utf8>> | [<<"failing"/utf8>> | [<<"mutual"/utf8>> | [<<"namespace"/utf8>> | [<<"parameters"/utf8>> | [<<"with"/utf8>> | [<<"proof"/utf8>> | [<<"impossible"/utf8>> | [<<"case"/utf8>> | [<<"of"/utf8>> | [<<"if"/utf8>> | [<<"then"/utf8>> | [<<"else"/utf8>> | [<<"forall"/utf8>> | [<<"rewrite"/utf8>> | [<<"using"/utf8>> | [<<"interface"/utf8>> | [<<"implementation"/utf8>> | [<<"open"/utf8>> | [<<"import"/utf8>> | [<<"public"/utf8>> | [<<"export"/utf8>> | [<<"private"/utf8>> | [<<"infixl"/utf8>> | [<<"infixr"/utf8>> | [<<"infix"/utf8>> | [<<"prefix"/utf8>> | [<<"total"/utf8>> | [<<"partial"/utf8>> | [<<"covering"/utf8>> | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]].
'un--holeIdent'() -> {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($?)), fun () -> ('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()) end}.
'un--groupSymbols'() -> [<<".("/utf8>> | [<<".[|"/utf8>> | [<<"@{"/utf8>> | [<<"[|"/utf8>> | [<<"("/utf8>> | [<<"{"/utf8>> | [<<"[<"/utf8>> | [<<"[>"/utf8>> | [<<"["/utf8>> | [<<"`("/utf8>> | [<<"`{"/utf8>> | [<<"`["/utf8>> | []]]]]]]]]]]]].
'un--groupClose'(V0) -> case V0 of <<".("/utf8>> -> <<")"/utf8>>; <<"@{"/utf8>> -> <<"}"/utf8>>; <<"[|"/utf8>> -> <<"|]"/utf8>>; <<".[|"/utf8>> -> <<"|]"/utf8>>; <<"("/utf8>> -> <<")"/utf8>>; <<"["/utf8>> -> <<"]"/utf8>>; <<"[<"/utf8>> -> <<"]"/utf8>>; <<"[>"/utf8>> -> <<"]"/utf8>>; <<"{"/utf8>> -> <<"}"/utf8>>; <<"`("/utf8>> -> <<")"/utf8>>; <<"`{"/utf8>> -> <<"}"/utf8>>; <<"`["/utf8>> -> <<"]"/utf8>>; _ -> <<""/utf8>> end.
'un--fromOctLit'(V0) -> case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V0)), 2)) of 1 -> 0; 0 -> begin (V5 = case ('string':'next_grapheme'(case ('string':'next_grapheme'(V0)) of [E2 | E3] when (erlang:'is_binary'(E3)) -> (fun (V1, V2) -> V2 end(E2, E3)); _ -> <<""/utf8>> end)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V3, V4) -> V4 end(E0, E1)); _ -> <<""/utf8>> end), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 0 end, ('Idris.Idris2.Libraries.Utils.Octal':'un--fromOct'(('unicode':'characters_to_binary'(('string':'reverse'(V5)))))))) end end.
'un--fromHexLit'(V0) -> case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V0)), 2)) of 1 -> 0; 0 -> begin (V5 = case ('string':'next_grapheme'(case ('string':'next_grapheme'(V0)) of [E2 | E3] when (erlang:'is_binary'(E3)) -> (fun (V1, V2) -> V2 end(E2, E3)); _ -> <<""/utf8>> end)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V3, V4) -> V4 end(E0, E1)); _ -> <<""/utf8>> end), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 0 end, ('Idris.Idris2.Protocol.Hex':'un--fromHex'(('unicode':'characters_to_binary'(('string':'reverse'(V5)))))))) end end.
'un--fromBinLit'(V0) -> case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V0)), 2)) of 1 -> 0; 0 -> begin (V5 = case ('string':'next_grapheme'(case ('string':'next_grapheme'(V0)) of [E2 | E3] when (erlang:'is_binary'(E3)) -> (fun (V1, V2) -> V2 end(E2, E3)); _ -> <<""/utf8>> end)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V3, V4) -> V4 end(E0, E1)); _ -> <<""/utf8>> end), ('nested--6210-10463--in--un--fromBin'(V0, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> ('nested--6210-10462--in--un--castBin'(V0, V6)) end))(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V5)))))))) end end.
'un--doubleLit'() -> {'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--digits'()), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($.)) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--digits'()) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--opt'({'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($e)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--opt'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)), ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($+)))))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--digits'()) end})) end}.
'un--doubleDash'(V0) -> {'Libraries.Text.Lexer.Core.SeqEmpty', ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)))), ('Idris.Idris2.Libraries.Text.Lexer':'un--choice'(1, {'Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> V21 end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, [{'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($})), fun () -> ('un--toEndComment'(V0)) end} | [{'Libraries.Text.Lexer.Core.SeqEmpty', ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--isNot'($\x{a})))), ('un--toEndComment'((V0 + 1)))} | []]]))}.
'un--dotIdent'() -> {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($.)), fun () -> ('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()) end}.
'un--docComment'() -> {'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($|)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($|)) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($|)) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--isNot'($\x{a})))) end}.
'un--cgDirective'() -> {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(<<"%cg"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer':'un--space'()))), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V0) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V0)) end)))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'(${)) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--isNot'($})))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($})) end}, ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--isNot'($\x{a})))))) end}.
'un--blockComment'() -> {'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'(${)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--eof'()), ('un--toEndComment'(1)))) end}.
