-module('Idris.Idris2.Libraries.Data.SortedMap').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6479-4348--in--un--treeToList\x{27}'/2,
  'nested--8012-5915--in--un--inserted'/3,
  'dn--un--traverse_Traversable_(SortedMap $k)'/3,
  'dn--un--toList_Foldable_(SortedMap $k)'/1,
  'dn--un--show_Show_((SortedMap $k) $v)'/2,
  'dn--un--showPrec_Show_((SortedMap $k) $v)'/3,
  'dn--un--null_Foldable_(SortedMap $k)'/1,
  'dn--un--neutral_Monoid_((SortedMap $k) $v)'/1,
  'dn--un--map_Functor_(SortedMap $k)'/2,
  'dn--un--foldr_Foldable_(SortedMap $k)'/3,
  'dn--un--foldl_Foldable_(SortedMap $k)'/3,
  'dn--un--foldlM_Foldable_(SortedMap $k)'/4,
  'dn--un--foldMap_Foldable_(SortedMap $k)'/3,
  'dn--un--__Impl_Traversable_(SortedMap $k)'/0,
  'dn--un--__Impl_Show_((SortedMap $k) $v)'/1,
  'dn--un--__Impl_Semigroup_((SortedMap $k) $v)'/3,
  'dn--un--__Impl_Monoid_((SortedMap $k) $v)'/1,
  'dn--un--__Impl_Functor_(SortedMap $k)'/4,
  'dn--un--__Impl_Foldable_(SortedMap $k)'/0,
  'dn--un--<+>_Semigroup_((SortedMap $k) $v)'/3,
  'un--values'/1,
  'un--treeTraverse'/3,
  'un--treeToList'/1,
  'un--treeMap'/2,
  'un--treeLookup'/3,
  'un--treeInsert\x{27}'/4,
  'un--treeInsert'/4,
  'un--treeDelete'/4,
  'un--toList'/1,
  'un--singleton'/3,
  'un--mergeWith'/3,
  'un--mergeLeft'/2,
  'un--merge3'/5,
  'un--merge2'/5,
  'un--merge1'/5,
  'un--merge'/3,
  'un--lookup'/2,
  'un--keys'/1,
  'un--insertFrom'/3,
  'un--insert'/3,
  'un--fromList'/2,
  'un--empty'/1,
  'un--delete'/2,
  'un--branch7'/13,
  'un--branch6'/11,
  'un--branch5'/9,
  'un--branch4'/7,
  'un--adjust'/3
]).
'nested--6479-4348--in--un--treeToList\x{27}'(V0, V1) -> case V1 of {'Libraries.Data.SortedMap.Leaf', V2, V3} -> (V0({'Builtin.MkPair', V2, V3})); {'Libraries.Data.SortedMap.Branch2', V4, V5, V6} -> ('nested--6479-4348--in--un--treeToList\x{27}'(fun (V7) -> [V7 | ('nested--6479-4348--in--un--treeToList\x{27}'(V0, V6))] end, V4)); {'Libraries.Data.SortedMap.Branch3', V8, V9, V10, V11, V12} -> ('nested--6479-4348--in--un--treeToList\x{27}'(fun (V13) -> [V13 | ('nested--6479-4348--in--un--treeToList\x{27}'(fun (V14) -> [V14 | ('nested--6479-4348--in--un--treeToList\x{27}'(V0, V12))] end, V10))] end, V8)) end.
'nested--8012-5915--in--un--inserted'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(('un--toList'(V0)), fun (V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V7 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V6) -> V6 end end, fun () -> V2 end, ('un--lookup'(V4, V1))))(V5))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'({'Builtin.MkPair', V4, V7})) end end end)).
'dn--un--traverse_Traversable_(SortedMap $k)'(V0, V1, V2) -> case V2 of {'Libraries.Data.SortedMap.Empty', V3} -> case V0 of {'Prelude.Interfaces.MkApplicative', V4, V5, V6} -> ((V5('erased'))({'Libraries.Data.SortedMap.Empty', V3})) end; {'Libraries.Data.SortedMap.M', V7, V8, V9} -> ((begin (V14 = case V0 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> V11 end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V10) -> {'Libraries.Data.SortedMap.M', V7, V8, V10} end))(('un--treeTraverse'(V0, V1, V9)))) end.
'dn--un--toList_Foldable_(SortedMap $k)'(V0) -> ('dn--un--foldr_Foldable_(SortedMap $k)'(fun (V1) -> fun (V2) -> [V1 | V2] end end, [], V0)).
'dn--un--show_Show_((SortedMap $k) $v)'(V0, V1) -> <<<<"fromList "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V2)) end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V3, V4)) end end}, ('un--toList'(V1))))/binary>>.
'dn--un--showPrec_Show_((SortedMap $k) $v)'(V0, V1, V2) -> ('dn--un--show_Show_((SortedMap $k) $v)'(V0, V2)).
'dn--un--null_Foldable_(SortedMap $k)'(V0) -> case V0 of {'Libraries.Data.SortedMap.Empty', V1} -> 1; {'Libraries.Data.SortedMap.M', V2, V3, V4} -> 0 end.
'dn--un--neutral_Monoid_((SortedMap $k) $v)'(V0) -> ('un--empty'(('Idris.Idris2.Builtin':'un--fst'(V0)))).
'dn--un--map_Functor_(SortedMap $k)'(V0, V1) -> case V1 of {'Libraries.Data.SortedMap.Empty', V2} -> {'Libraries.Data.SortedMap.Empty', V2}; {'Libraries.Data.SortedMap.M', V3, V4, V5} -> {'Libraries.Data.SortedMap.M', V3, V4, ('un--treeMap'(V0, V5))} end.
'dn--un--foldr_Foldable_(SortedMap $k)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V0, V1, ('un--values'(V2)))).
'dn--un--foldl_Foldable_(SortedMap $k)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V0, V1, ('un--values'(V2)))).
'dn--un--foldlM_Foldable_(SortedMap $k)'(V0, V1, V2, V3) -> ('dn--un--foldl_Foldable_(SortedMap $k)'(fun (V4) -> fun (V5) -> case V0 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V5, V9)) end)) end end end, case V0 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> ((V14('erased'))(V2)) end end, V3)).
'dn--un--foldMap_Foldable_(SortedMap $k)'(V0, V1, V2) -> ('dn--un--foldr_Foldable_(SortedMap $k)'(fun (V3) -> (begin (V6 = case V0 of {'Prelude.Interfaces.MkMonoid', V4, V5} -> V4 end), fun (V7) -> fun (V8) -> ((V6(V7))(V8)) end end end((V1(V3)))) end, case V0 of {'Prelude.Interfaces.MkMonoid', V9, V10} -> V10 end, V2)).
'dn--un--__Impl_Traversable_(SortedMap $k)'() -> {'Prelude.Interfaces.MkTraversable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_(SortedMap $k)'(V2, V3)) end end end end, {'Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--foldr_Foldable_(SortedMap $k)'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--foldl_Foldable_(SortedMap $k)'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('dn--un--null_Foldable_(SortedMap $k)'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--foldlM_Foldable_(SortedMap $k)'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('dn--un--toList_Foldable_(SortedMap $k)'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--foldMap_Foldable_(SortedMap $k)'(V27, V28, V29)) end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--traverse_Traversable_(SortedMap $k)'(V33, V34, V35)) end end end end end end}.
'dn--un--__Impl_Show_((SortedMap $k) $v)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_((SortedMap $k) $v)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_((SortedMap $k) $v)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Semigroup_((SortedMap $k) $v)'(V0, V1, V2) -> ('dn--un--<+>_Semigroup_((SortedMap $k) $v)'(V0, V1, V2)).
'dn--un--__Impl_Monoid_((SortedMap $k) $v)'(V0) -> {'Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> ('dn--un--<+>_Semigroup_((SortedMap $k) $v)'(('Idris.Idris2.Builtin':'un--snd'(V0)), V1, V2)) end end, ('dn--un--neutral_Monoid_((SortedMap $k) $v)'(V0))}.
'dn--un--__Impl_Functor_(SortedMap $k)'(V0, V1, V2, V3) -> ('dn--un--map_Functor_(SortedMap $k)'(V2, V3)).
'dn--un--__Impl_Foldable_(SortedMap $k)'() -> {'Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--foldr_Foldable_(SortedMap $k)'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--foldl_Foldable_(SortedMap $k)'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('dn--un--null_Foldable_(SortedMap $k)'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--foldlM_Foldable_(SortedMap $k)'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('dn--un--toList_Foldable_(SortedMap $k)'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--foldMap_Foldable_(SortedMap $k)'(V23, V24, V25)) end end end end end}.
'dn--un--<+>_Semigroup_((SortedMap $k) $v)'(V0, V1, V2) -> ('un--merge'(V0, V1, V2)).
'un--values'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Builtin':'un--snd'(V1)) end))(('un--toList'(V0)))).
'un--treeTraverse'(V0, V1, V2) -> case V2 of {'Libraries.Data.SortedMap.Leaf', V3, V4} -> ((begin (V9 = case V0 of {'Prelude.Interfaces.MkApplicative', V6, V7, V8} -> V6 end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V5) -> {'Libraries.Data.SortedMap.Leaf', V3, V5} end))((V1(V4)))); {'Libraries.Data.SortedMap.Branch2', V12, V13, V14} -> case V0 of {'Prelude.Interfaces.MkApplicative', V15, V16, V17} -> ((((V17('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkApplicative', V18, V19, V20} -> ((((V20('erased'))('erased'))(((begin (V30 = case V0 of {'Prelude.Interfaces.MkApplicative', V27, V28, V29} -> V27 end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V24) -> fun (V25) -> fun (V26) -> {'Libraries.Data.SortedMap.Branch2', V24, V25, V26} end end end))(('un--treeTraverse'(V0, V1, V12))))))(case V0 of {'Prelude.Interfaces.MkApplicative', V21, V22, V23} -> ((V22('erased'))(V13)) end)) end))(('un--treeTraverse'(V0, V1, V14)))) end; {'Libraries.Data.SortedMap.Branch3', V33, V34, V35, V36, V37} -> case V0 of {'Prelude.Interfaces.MkApplicative', V38, V39, V40} -> ((((V40('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkApplicative', V41, V42, V43} -> ((((V43('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkApplicative', V47, V48, V49} -> ((((V49('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkApplicative', V50, V51, V52} -> ((((V52('erased'))('erased'))(((begin (V64 = case V0 of {'Prelude.Interfaces.MkApplicative', V61, V62, V63} -> V61 end), fun (V65) -> fun (V66) -> ((((V64('erased'))('erased'))(V65))(V66)) end end end(fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> {'Libraries.Data.SortedMap.Branch3', V56, V57, V58, V59, V60} end end end end end))(('un--treeTraverse'(V0, V1, V33))))))(case V0 of {'Prelude.Interfaces.MkApplicative', V53, V54, V55} -> ((V54('erased'))(V34)) end)) end))(('un--treeTraverse'(V0, V1, V35)))) end))(case V0 of {'Prelude.Interfaces.MkApplicative', V44, V45, V46} -> ((V45('erased'))(V36)) end)) end))(('un--treeTraverse'(V0, V1, V37)))) end end.
'un--treeToList'(V0) -> ('nested--6479-4348--in--un--treeToList\x{27}'(fun (V1) -> [V1 | []] end, V0)).
'un--treeMap'(V0, V1) -> case V1 of {'Libraries.Data.SortedMap.Leaf', V2, V3} -> {'Libraries.Data.SortedMap.Leaf', V2, (V0(V3))}; {'Libraries.Data.SortedMap.Branch2', V4, V5, V6} -> {'Libraries.Data.SortedMap.Branch2', ('un--treeMap'(V0, V4)), V5, ('un--treeMap'(V0, V6))}; {'Libraries.Data.SortedMap.Branch3', V7, V8, V9, V10, V11} -> {'Libraries.Data.SortedMap.Branch3', ('un--treeMap'(V0, V7)), V8, ('un--treeMap'(V0, V9)), V10, ('un--treeMap'(V0, V11))} end.
'un--treeLookup'(V0, V1, V2) -> case V2 of {'Libraries.Data.SortedMap.Leaf', V3, V4} -> case case V0 of {'Prelude.EqOrd.MkOrd', V5, V6, V7, V8, V9, V10, V11, V12} -> case V5 of {'Prelude.EqOrd.MkEq', V13, V14} -> ((V13(V1))(V3)) end end of 1 -> {'Prelude.Types.Just', V4}; 0 -> {'Prelude.Types.Nothing'} end; {'Libraries.Data.SortedMap.Branch2', V15, V16, V17} -> case case V0 of {'Prelude.EqOrd.MkOrd', V18, V19, V20, V21, V22, V23, V24, V25} -> ((V22(V1))(V16)) end of 1 -> ('un--treeLookup'(V0, V1, V15)); 0 -> ('un--treeLookup'(V0, V1, V17)) end; {'Libraries.Data.SortedMap.Branch3', V26, V27, V28, V29, V30} -> case case V0 of {'Prelude.EqOrd.MkOrd', V31, V32, V33, V34, V35, V36, V37, V38} -> ((V35(V1))(V27)) end of 1 -> ('un--treeLookup'(V0, V1, V26)); 0 -> case case V0 of {'Prelude.EqOrd.MkOrd', V39, V40, V41, V42, V43, V44, V45, V46} -> ((V43(V1))(V29)) end of 1 -> ('un--treeLookup'(V0, V1, V28)); 0 -> ('un--treeLookup'(V0, V1, V30)) end end end.
'un--treeInsert\x{27}'(V0, V1, V2, V3) -> case V3 of {'Libraries.Data.SortedMap.Leaf', V4, V5} -> case case V0 of {'Prelude.EqOrd.MkOrd', V6, V7, V8, V9, V10, V11, V12, V13} -> ((V7(V1))(V4)) end of 0 -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Libraries.Data.SortedMap.Leaf', V1, V2}, {'Builtin.MkPair', V1, {'Libraries.Data.SortedMap.Leaf', V4, V5}}}}; 1 -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Leaf', V1, V2}}; 2 -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Libraries.Data.SortedMap.Leaf', V4, V5}, {'Builtin.MkPair', V4, {'Libraries.Data.SortedMap.Leaf', V1, V2}}}} end; {'Libraries.Data.SortedMap.Branch2', V14, V15, V16} -> case case V0 of {'Prelude.EqOrd.MkOrd', V17, V18, V19, V20, V21, V22, V23, V24} -> ((V21(V1))(V15)) end of 1 -> case ('un--treeInsert\x{27}'(V0, V1, V2, V14)) of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch2', V25, V15, V16}}; {'Prelude.Types.Right', V26} -> case V26 of {'Builtin.MkPair', V27, V28} -> case V28 of {'Builtin.MkPair', V29, V30} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch3', V27, V29, V30, V15, V16}} end end end; 0 -> case ('un--treeInsert\x{27}'(V0, V1, V2, V16)) of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch2', V14, V15, V31}}; {'Prelude.Types.Right', V32} -> case V32 of {'Builtin.MkPair', V33, V34} -> case V34 of {'Builtin.MkPair', V35, V36} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch3', V14, V15, V33, V35, V36}} end end end end; {'Libraries.Data.SortedMap.Branch3', V37, V38, V39, V40, V41} -> case case V0 of {'Prelude.EqOrd.MkOrd', V42, V43, V44, V45, V46, V47, V48, V49} -> ((V46(V1))(V38)) end of 1 -> case ('un--treeInsert\x{27}'(V0, V1, V2, V37)) of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch3', V50, V38, V39, V40, V41}}; {'Prelude.Types.Right', V51} -> case V51 of {'Builtin.MkPair', V52, V53} -> case V53 of {'Builtin.MkPair', V54, V55} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Libraries.Data.SortedMap.Branch2', V52, V54, V55}, {'Builtin.MkPair', V38, {'Libraries.Data.SortedMap.Branch2', V39, V40, V41}}}} end end end; 0 -> case case V0 of {'Prelude.EqOrd.MkOrd', V56, V57, V58, V59, V60, V61, V62, V63} -> ((V60(V1))(V40)) end of 1 -> case ('un--treeInsert\x{27}'(V0, V1, V2, V39)) of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch3', V37, V38, V64, V40, V41}}; {'Prelude.Types.Right', V65} -> case V65 of {'Builtin.MkPair', V66, V67} -> case V67 of {'Builtin.MkPair', V68, V69} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Libraries.Data.SortedMap.Branch2', V37, V38, V66}, {'Builtin.MkPair', V68, {'Libraries.Data.SortedMap.Branch2', V69, V40, V41}}}} end end end; 0 -> case ('un--treeInsert\x{27}'(V0, V1, V2, V41)) of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch3', V37, V38, V39, V40, V70}}; {'Prelude.Types.Right', V71} -> case V71 of {'Builtin.MkPair', V72, V73} -> case V73 of {'Builtin.MkPair', V74, V75} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Libraries.Data.SortedMap.Branch2', V37, V38, V39}, {'Builtin.MkPair', V40, {'Libraries.Data.SortedMap.Branch2', V72, V74, V75}}}} end end end end end end.
'un--treeInsert'(V0, V1, V2, V3) -> case ('un--treeInsert\x{27}'(V0, V1, V2, V3)) of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Prelude.Types.Right', {'Libraries.Data.SortedMap.Branch2', V6, V8, V9}} end end end.
'un--treeDelete'(V0, V1, V2, V3) -> case V1 of 0 -> case V3 of {'Libraries.Data.SortedMap.Leaf', V4, V5} -> case case V0 of {'Prelude.EqOrd.MkOrd', V6, V7, V8, V9, V10, V11, V12, V13} -> case V6 of {'Prelude.EqOrd.MkEq', V14, V15} -> ((V14(V2))(V4)) end end of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Leaf', V4, V5}} end end; _ -> begin (V16 = (V1 - 1)), case V16 of 0 -> case V3 of {'Libraries.Data.SortedMap.Branch2', V17, V18, V19} -> case case V0 of {'Prelude.EqOrd.MkOrd', V20, V21, V22, V23, V24, V25, V26, V27} -> ((V24(V2))(V18)) end of 1 -> case ('un--treeDelete'(V0, 0, V2, V17)) of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch2', V28, V18, V19}}; {'Prelude.Types.Right', V29} -> {'Prelude.Types.Right', V19} end; 0 -> case ('un--treeDelete'(V0, 0, V2, V19)) of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch2', V17, V18, V30}}; {'Prelude.Types.Right', V31} -> {'Prelude.Types.Right', V17} end end; {'Libraries.Data.SortedMap.Branch3', V32, V33, V34, V35, V36} -> case case V0 of {'Prelude.EqOrd.MkOrd', V37, V38, V39, V40, V41, V42, V43, V44} -> ((V41(V2))(V33)) end of 1 -> case ('un--treeDelete'(V0, 0, V2, V32)) of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch3', V45, V33, V34, V35, V36}}; {'Prelude.Types.Right', V46} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch2', V34, V35, V36}} end; 0 -> case case V0 of {'Prelude.EqOrd.MkOrd', V47, V48, V49, V50, V51, V52, V53, V54} -> ((V51(V2))(V35)) end of 1 -> case ('un--treeDelete'(V0, 0, V2, V34)) of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch3', V32, V33, V55, V35, V36}}; {'Prelude.Types.Right', V56} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch2', V32, V33, V36}} end; 0 -> case ('un--treeDelete'(V0, 0, V2, V36)) of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch3', V32, V33, V34, V35, V57}}; {'Prelude.Types.Right', V58} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch2', V32, V33, V34}} end end end end; _ -> begin (V59 = (V16 - 1)), case V3 of {'Libraries.Data.SortedMap.Branch2', V60, V61, V62} -> case case V0 of {'Prelude.EqOrd.MkOrd', V63, V64, V65, V66, V67, V68, V69, V70} -> ((V67(V2))(V61)) end of 1 -> case ('un--treeDelete'(V0, (V59 + 1), V2, V60)) of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch2', V71, V61, V62}}; {'Prelude.Types.Right', V72} -> case V62 of {'Libraries.Data.SortedMap.Branch2', V73, V74, V75} -> {'Prelude.Types.Right', {'Libraries.Data.SortedMap.Branch3', V72, V61, V73, V74, V75}}; {'Libraries.Data.SortedMap.Branch3', V76, V77, V78, V79, V80} -> {'Prelude.Types.Left', ('un--branch4'(V72, V61, V76, V77, V78, V79, V80))} end end; 0 -> case ('un--treeDelete'(V0, (V59 + 1), V2, V62)) of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch2', V60, V61, V81}}; {'Prelude.Types.Right', V82} -> case V60 of {'Libraries.Data.SortedMap.Branch2', V83, V84, V85} -> {'Prelude.Types.Right', {'Libraries.Data.SortedMap.Branch3', V83, V84, V85, V61, V82}}; {'Libraries.Data.SortedMap.Branch3', V86, V87, V88, V89, V90} -> {'Prelude.Types.Left', ('un--branch4'(V86, V87, V88, V89, V90, V61, V82))} end end end; {'Libraries.Data.SortedMap.Branch3', V91, V92, V93, V94, V95} -> case case V0 of {'Prelude.EqOrd.MkOrd', V96, V97, V98, V99, V100, V101, V102, V103} -> ((V100(V2))(V92)) end of 1 -> case ('un--treeDelete'(V0, (V59 + 1), V2, V91)) of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch3', V104, V92, V93, V94, V95}}; {'Prelude.Types.Right', V105} -> {'Prelude.Types.Left', ('un--merge1'(V105, V92, V93, V94, V95))} end; 0 -> case case V0 of {'Prelude.EqOrd.MkOrd', V106, V107, V108, V109, V110, V111, V112, V113} -> ((V110(V2))(V94)) end of 1 -> case ('un--treeDelete'(V0, (V59 + 1), V2, V93)) of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch3', V91, V92, V114, V94, V95}}; {'Prelude.Types.Right', V115} -> {'Prelude.Types.Left', ('un--merge2'(V91, V92, V115, V94, V95))} end; 0 -> case ('un--treeDelete'(V0, (V59 + 1), V2, V95)) of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', {'Libraries.Data.SortedMap.Branch3', V91, V92, V93, V94, V116}}; {'Prelude.Types.Right', V117} -> {'Prelude.Types.Left', ('un--merge3'(V91, V92, V93, V94, V117))} end end end end end end end end.
'un--toList'(V0) -> case V0 of {'Libraries.Data.SortedMap.Empty', V1} -> []; {'Libraries.Data.SortedMap.M', V2, V3, V4} -> ('un--treeToList'(V4)) end.
'un--singleton'(V0, V1, V2) -> ('un--insert'(V1, V2, ('un--empty'(V0)))).
'un--mergeWith'(V0, V1, V2) -> ('un--insertFrom'({'Prelude.Interfaces.MkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V18, V19, V20, V21)) end end end end end end end, fun (V22) -> fun (V23) -> V23 end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V26, V27, V28)) end end end end end}, ('nested--8012-5915--in--un--inserted'(V2, V1, V0)), V1)).
'un--mergeLeft'(V0, V1) -> ('un--mergeWith'(fun (V2) -> fun (V3) -> V2 end end, V0, V1)).
'un--merge3'(V0, V1, V2, V3, V4) -> case V0 of {'Libraries.Data.SortedMap.Branch2', V5, V6, V7} -> case V2 of {'Libraries.Data.SortedMap.Branch2', V8, V9, V10} -> ('un--branch5'(V5, V6, V7, V1, V8, V9, V10, V3, V4)); {'Libraries.Data.SortedMap.Branch3', V11, V12, V13, V14, V15} -> ('un--branch6'(V5, V6, V7, V1, V11, V12, V13, V14, V15, V3, V4)) end; {'Libraries.Data.SortedMap.Branch3', V16, V17, V18, V19, V20} -> case V2 of {'Libraries.Data.SortedMap.Branch2', V21, V22, V23} -> ('un--branch6'(V16, V17, V18, V19, V20, V1, V21, V22, V23, V3, V4)); {'Libraries.Data.SortedMap.Branch3', V24, V25, V26, V27, V28} -> ('un--branch7'(V16, V17, V18, V19, V20, V1, V24, V25, V26, V27, V28, V3, V4)) end end.
'un--merge2'(V0, V1, V2, V3, V4) -> case V0 of {'Libraries.Data.SortedMap.Branch2', V5, V6, V7} -> case V4 of {'Libraries.Data.SortedMap.Branch2', V8, V9, V10} -> ('un--branch5'(V5, V6, V7, V1, V2, V3, V8, V9, V10)); {'Libraries.Data.SortedMap.Branch3', V11, V12, V13, V14, V15} -> ('un--branch6'(V5, V6, V7, V1, V2, V3, V11, V12, V13, V14, V15)) end; {'Libraries.Data.SortedMap.Branch3', V16, V17, V18, V19, V20} -> case V4 of {'Libraries.Data.SortedMap.Branch2', V21, V22, V23} -> ('un--branch6'(V16, V17, V18, V19, V20, V1, V2, V3, V21, V22, V23)); {'Libraries.Data.SortedMap.Branch3', V24, V25, V26, V27, V28} -> ('un--branch7'(V16, V17, V18, V19, V20, V1, V2, V3, V24, V25, V26, V27, V28)) end end.
'un--merge1'(V0, V1, V2, V3, V4) -> case V2 of {'Libraries.Data.SortedMap.Branch2', V5, V6, V7} -> case V4 of {'Libraries.Data.SortedMap.Branch2', V8, V9, V10} -> ('un--branch5'(V0, V1, V5, V6, V7, V3, V8, V9, V10)); {'Libraries.Data.SortedMap.Branch3', V11, V12, V13, V14, V15} -> ('un--branch6'(V0, V1, V5, V6, V7, V3, V11, V12, V13, V14, V15)) end; {'Libraries.Data.SortedMap.Branch3', V16, V17, V18, V19, V20} -> case V4 of {'Libraries.Data.SortedMap.Branch2', V21, V22, V23} -> ('un--branch6'(V0, V1, V16, V17, V18, V19, V20, V3, V21, V22, V23)); {'Libraries.Data.SortedMap.Branch3', V24, V25, V26, V27, V28} -> ('un--branch7'(V0, V1, V16, V17, V18, V19, V20, V3, V24, V25, V26, V27, V28)) end end.
'un--merge'(V0, V1, V2) -> ('un--mergeWith'(begin (V3 = V0), fun (V4) -> fun (V5) -> ((V3(V4))(V5)) end end end, V1, V2)).
'un--lookup'(V0, V1) -> case V1 of {'Libraries.Data.SortedMap.Empty', V2} -> {'Prelude.Types.Nothing'}; {'Libraries.Data.SortedMap.M', V3, V4, V5} -> ('un--treeLookup'(V3, V0, V5)) end.
'un--keys'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Builtin':'un--fst'(V1)) end))(('un--toList'(V0)))).
'un--insertFrom'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V3) -> fun (V4) -> case V0 of {'Prelude.Interfaces.MkFoldable', V5, V6, V7, V8, V9, V10} -> (((((V6('erased'))('erased'))(fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V13) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V14) -> fun (V15) -> fun (V16) -> ('un--insert'(V14, V15, V16)) end end end, V13)) end, V11, V12)) end end))(V3))(V4)) end end end, V1, V2)).
'un--insert'(V0, V1, V2) -> case V2 of {'Libraries.Data.SortedMap.Empty', V3} -> {'Libraries.Data.SortedMap.M', V3, 0, {'Libraries.Data.SortedMap.Leaf', V0, V1}}; {'Libraries.Data.SortedMap.M', V4, V5, V6} -> case ('un--treeInsert'(V4, V0, V1, V6)) of {'Prelude.Types.Left', V7} -> {'Libraries.Data.SortedMap.M', V4, V5, V7}; {'Prelude.Types.Right', V8} -> {'Libraries.Data.SortedMap.M', V4, (V5 + 1), V8} end end.
'un--fromList'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V5) -> fun (V6) -> fun (V7) -> ('un--insert'(V5, V6, V7)) end end end, V4)) end, V2, V3)) end end, ('un--empty'(V0)), V1)).
'un--empty'(V0) -> {'Libraries.Data.SortedMap.Empty', V0}.
'un--delete'(V0, V1) -> case V1 of {'Libraries.Data.SortedMap.Empty', V2} -> {'Libraries.Data.SortedMap.Empty', V2}; {'Libraries.Data.SortedMap.M', V3, V4, V5} -> case V4 of 0 -> case ('un--treeDelete'(V3, 0, V0, V5)) of {'Prelude.Types.Left', V6} -> {'Libraries.Data.SortedMap.M', V3, 0, V6}; {'Prelude.Types.Right', V7} -> {'Libraries.Data.SortedMap.Empty', V3} end; _ -> begin (V8 = (V4 - 1)), case ('un--treeDelete'(V3, (V8 + 1), V0, V5)) of {'Prelude.Types.Left', V9} -> {'Libraries.Data.SortedMap.M', V3, (V8 + 1), V9}; {'Prelude.Types.Right', V10} -> {'Libraries.Data.SortedMap.M', V3, V8, V10} end end end end.
'un--branch7'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Libraries.Data.SortedMap.Branch3', {'Libraries.Data.SortedMap.Branch3', V0, V1, V2, V3, V4}, V5, {'Libraries.Data.SortedMap.Branch2', V6, V7, V8}, V9, {'Libraries.Data.SortedMap.Branch2', V10, V11, V12}}.
'un--branch6'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Libraries.Data.SortedMap.Branch3', {'Libraries.Data.SortedMap.Branch2', V0, V1, V2}, V3, {'Libraries.Data.SortedMap.Branch2', V4, V5, V6}, V7, {'Libraries.Data.SortedMap.Branch2', V8, V9, V10}}.
'un--branch5'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> {'Libraries.Data.SortedMap.Branch2', {'Libraries.Data.SortedMap.Branch2', V0, V1, V2}, V3, {'Libraries.Data.SortedMap.Branch3', V4, V5, V6, V7, V8}}.
'un--branch4'(V0, V1, V2, V3, V4, V5, V6) -> {'Libraries.Data.SortedMap.Branch2', {'Libraries.Data.SortedMap.Branch2', V0, V1, V2}, V3, {'Libraries.Data.SortedMap.Branch2', V4, V5, V6}}.
'un--adjust'(V0, V1, V2) -> case ('un--lookup'(V0, V2)) of {'Prelude.Types.Nothing'} -> V2; {'Prelude.Types.Just', V3} -> ('un--insert'(V0, (V1(V3)), V2)) end.
