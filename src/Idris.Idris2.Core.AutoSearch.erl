-module('Idris.Idris2.Core.AutoSearch').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in getUsableEnv-4242'/9,
  'case--exactlyOne-3999'/10,
  'case--case block in searchIfHole-3062'/18,
  'nested--12731-6558--in--un--visible'/18,
  'nested--10380-4413--in--un--usableLocalArg'/13,
  'nested--8225-7876--in--un--tryGroups'/16,
  'nested--9838-3965--in--un--normRes'/9,
  'nested--8745-2880--in--un--impl'/2,
  'nested--10869-4871--in--un--findPos'/19,
  'nested--10869-4870--in--un--findDirect'/19,
  'nested--13212-6946--in--un--drop'/14,
  'nested--13212-6947--in--un--concrete'/14,
  'nested--10869-4868--in--un--clearEnvType'/17,
  'nested--10869-4869--in--un--clearEnv'/16,
  'nested--10869-4867--in--un--ambig'/15,
  'nested--8225-7875--in--un--ambig'/14,
  'un--usableLocal'/6,
  'un--successful'/4,
  'un--searchType'/13,
  'un--searchNames'/14,
  'un--searchName'/13,
  'un--searchLocalWith'/13,
  'un--searchLocalVars'/12,
  'un--searchIfHole'/12,
  'un--mkArgs'/7,
  'un--isPairNF'/4,
  'un--impLast'/1,
  'un--getUsableEnv'/5,
  'un--exactlyOne'/8,
  'un--concreteDets'/10,
  'un--checkConcreteDets'/8,
  'un--anyOne'/7,
  'un--abandonIfCycle'/5
]).
'case--case block in getUsableEnv-4242'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = V8), [{'Builtin.MkPair', {'Core.TT.Local', ('Idris.Idris2.Core.TT':'un--binderLoc'(V3)), {'Prelude.Types.Nothing'}, V9}, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V4)), ('Idris.Idris2.Core.TT':'un--binderType'(V3))))} | V7] end.
'case--exactlyOne-3999'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> case V11 of [] -> begin (V21 = begin (V16 = V6), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'put'(V18, V15)) end end(V17))), {'Prelude.Types.Right', V20} end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V44 = begin (V31 = begin (V26 = V7), fun (V27) -> begin (V30 = (begin (V28 = V26), fun (V29) -> ('erlang':'put'(V28, V14)) end end(V27))), {'Prelude.Types.Right', V30} end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V43 = begin (V36 = ('Idris.Idris2.Core.Context':'un--commit'(V7))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V42 = fun (V41) -> {'Prelude.Types.Right', V12} end), V42 end(V37)) end end end end), V43 end(V32)) end end end end), V44 end(V22)) end end end end; _ -> begin (V50 = begin (V45 = V7), fun (V46) -> begin (V49 = (begin (V47 = V45), fun (V48) -> ('erlang':'get'(V47)) end end(V46))), {'Prelude.Types.Right', V49} end end end), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V69 = begin (V55 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V54, V4, V2))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V68 = begin (V61 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V60) -> ('nested--9838-3965--in--un--normRes'(V0, V1, V2, V3, V4, V5, V6, V7, V60)) end, V9, []))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V67 = fun (V66) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AmbiguousSearch', V0, V5, V4, V59, V65}, V66)) end), V67 end(V62)) end end end end), V68 end(V56)) end end end end), V69 end(V51)) end end end end end; _ -> begin (V75 = begin (V70 = V7), fun (V71) -> begin (V74 = (begin (V72 = V70), fun (V73) -> ('erlang':'get'(V72)) end end(V71))), {'Prelude.Types.Right', V74} end end end), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V94 = begin (V80 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V79, V4, V2))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V93 = begin (V86 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V85) -> ('nested--9838-3965--in--un--normRes'(V0, V1, V2, V3, V4, V5, V6, V7, V85)) end, V9, []))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V92 = fun (V91) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AmbiguousSearch', V0, V5, V4, V84, V90}, V91)) end), V92 end(V87)) end end end end), V93 end(V81)) end end end end), V94 end(V76)) end end end end end; _ -> begin (V100 = begin (V95 = V7), fun (V96) -> begin (V99 = (begin (V97 = V95), fun (V98) -> ('erlang':'get'(V97)) end end(V96))), {'Prelude.Types.Right', V99} end end end), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V119 = begin (V105 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V104, V4, V2))), fun (V106) -> begin (V107 = (V105(V106))), case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> (begin (V118 = begin (V111 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V110) -> ('nested--9838-3965--in--un--normRes'(V0, V1, V2, V3, V4, V5, V6, V7, V110)) end, V9, []))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V117 = fun (V116) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AmbiguousSearch', V0, V5, V4, V109, V115}, V116)) end), V117 end(V112)) end end end end), V118 end(V106)) end end end end), V119 end(V101)) end end end end end end(E0, E1)); [] -> begin (V125 = begin (V120 = V7), fun (V121) -> begin (V124 = (begin (V122 = V120), fun (V123) -> ('erlang':'get'(V122)) end end(V121))), {'Prelude.Types.Right', V124} end end end), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V163 = fun (V130) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V5, case V129 of {'Core.Context.MkDefs', V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162} -> V131 end, {'Core.Env.Nil'}, V3, {'Prelude.Types.Nothing'}}, V130)) end), V163 end(V126)) end end end end; _ -> begin (V169 = begin (V164 = V7), fun (V165) -> begin (V168 = (begin (V166 = V164), fun (V167) -> ('erlang':'get'(V166)) end end(V165))), {'Prelude.Types.Right', V168} end end end), fun (V170) -> begin (V171 = (V169(V170))), case V171 of {'Prelude.Types.Left', V172} -> {'Prelude.Types.Left', V172}; {'Prelude.Types.Right', V173} -> (begin (V188 = begin (V174 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V173, V4, V2))), fun (V175) -> begin (V176 = (V174(V175))), case V176 of {'Prelude.Types.Left', V177} -> {'Prelude.Types.Left', V177}; {'Prelude.Types.Right', V178} -> (begin (V187 = begin (V180 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V179) -> ('nested--9838-3965--in--un--normRes'(V0, V1, V2, V3, V4, V5, V6, V7, V179)) end, V9, []))), fun (V181) -> begin (V182 = (V180(V181))), case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> (begin (V186 = fun (V185) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AmbiguousSearch', V0, V5, V4, V178, V184}, V185)) end), V186 end(V181)) end end end end), V187 end(V175)) end end end end), V188 end(V170)) end end end end end.
'case--case block in searchIfHole-3062'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Core.Context.Context.Hole', V18, V19} -> begin (V43 = case V6 of 1 -> ('Idris.Idris2.Core.Normalise':'un--normaliseScope'(V11, [], V14, {'Core.Env.Nil'}, case V15 of {'Core.Context.Context.MkGlobalDef', V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V22 end)); 0 -> fun (V42) -> {'Prelude.Types.Right', V4} end end), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V158 = begin (V59 = begin (V53 = ('Idris.Idris2.Core.Normalise':'un--normaliseScope'(V11, V0, V14, V3, case V2 of {'Core.AutoSearch.MkArgInfo', V48, V49, V50, V51, V52} -> V52 end))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V58 = ('un--searchType'(V0, V11, V10, V9, V13, V8, V7, V1, V5, 0, V47, V3, V57))), V58 end(V54)) end end end end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V157 = begin (V64 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V11, <<"auto"/utf8>>, 5, fun () -> <<"Solved arg"/utf8>> end, V3, V63))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V156 = begin (V74 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V11, <<"auto"/utf8>>, 5, fun () -> <<"Arg meta"/utf8>> end, V3, case V2 of {'Core.AutoSearch.MkArgInfo', V69, V70, V71, V72, V73} -> V72 end))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V155 = begin (V84 = ('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V11, V10, V3, case V2 of {'Core.AutoSearch.MkArgInfo', V79, V80, V81, V82, V83} -> V82 end, V63))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V154 = case V88 of 1 -> fun (V89) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> begin (V111 = ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V95, V96, V97, V98, V99, V100, V101, V102)) end end end end end end end end, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V103, V104, V105, V106, V107, V108, V109, V110)) end end end end end end end end}, V0, V11, V10, ('Idris.Idris2.Core.Unify':'un--inTerm'()), V9, V3))(case V2 of {'Core.AutoSearch.MkArgInfo', V90, V91, V92, V93, V94} -> V93 end))(V63))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V153 = fun (V116) -> case V115 of {'Core.Unify.MkUnifyResult', V117, V118, V119, V120} -> case V117 of [] -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V9, case V14 of {'Core.Context.MkDefs', V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152} -> V121 end, {'Core.Env.Nil'}, V4, {'Prelude.Types.Nothing'}}, V116)) end end end), V153 end(V112)) end end end end end), V154 end(V85)) end end end end), V155 end(V75)) end end end end), V156 end(V65)) end end end end), V157 end(V60)) end end end end), V158 end(V44)) end end end end; _ -> fun (V159) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'nested--12731-6558--in--un--visible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V17, V15))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V47 = fun (V23) -> case V22 of {'Prelude.Types.Just', V24} -> case ('Idris.Idris2.Core.Context':'un--visibleInAny'(V16, V17, case V24 of {'Core.Context.Context.MkGlobalDef', V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> V34 end)) of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V17, V24}}}; 0 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V47 end(V19)) end end end end.
'nested--10380-4413--in--un--usableLocalArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> fun (V13) -> {'Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V14, V15) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V31, V32, V33, V34)) end end end end end end end, fun (V35) -> fun (V36) -> V36 end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V39, V40, V41)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> case (V42 =:= V43) of 'false' -> 0; _ -> 1 end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V44, V45)) end end}, V10, V11)) of 1 -> begin (V51 = begin (V46 = V9), fun (V47) -> begin (V50 = (begin (V48 = V46), fun (V49) -> ('erlang':'get'(V48)) end end(V47))), {'Prelude.Types.Right', V50} end end end), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V69 = begin (V62 = begin (V56 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V9, V3, V55, V14))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V61 = ('un--usableLocal'(V3, V9, V8, V7, V6, V60))), V61 end(V57)) end end end end), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V68 = case V66 of 1 -> ('nested--10380-4413--in--un--usableLocalArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, (V10 + 1), V11, V15)); 0 -> fun (V67) -> {'Prelude.Types.Right', 0} end end), V68 end(V63)) end end end end), V69 end(V52)) end end end end; 0 -> ('nested--10380-4413--in--un--usableLocalArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, (V10 + 1), V11, V15)) end end(E0, E1)) end.
'nested--8225-7876--in--un--tryGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V13 of {'Prelude.Types.Just', V16} -> case V15 of [] -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V16, V17)) end; _ -> case V15 of [E2 | E3] -> (fun (V18, V19) -> case V18 of {'Builtin.MkPair', V20, V21} -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V12, V11, begin (V33 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V12, <<"auto"/utf8>>, 5, begin (V23 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V22) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V12, V22)) end, V21, []))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V32 = fun (V28) -> {'Prelude.Types.Right', <<<<"Search: Trying "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V27))))/binary, <<<<" names "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V29)) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V30, V31)) end end}, V27))/binary>>/binary>>/binary>>} end), V32 end(V24)) end end end end))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V44 = begin (V38 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V12, <<"auto"/utf8>>, 5, fun () -> <<"For target"/utf8>> end, V2, V14))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V43 = ('un--searchNames'(V0, V12, V11, V10, V9, V8, [V1 | V7], V6, V5, V3, V2, V20, V21, V14))), V43 end(V39)) end end end end), V44 end(V34)) end end end end, fun (V45) -> case ('nested--8225-7875--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V45)) of 1 -> fun (V46) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V45, V46)) end; 0 -> ('nested--8225-7876--in--un--tryGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, {'Prelude.Types.Just', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V45 end, V13))}, V14, V19)) end end)) end end(E2, E3)) end end; {'Prelude.Types.Nothing'} -> case V15 of [] -> begin (V52 = begin (V47 = V12), fun (V48) -> begin (V51 = (begin (V49 = V47), fun (V50) -> ('erlang':'get'(V49)) end end(V48))), {'Prelude.Types.Right', V51} end end end), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V90 = fun (V57) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V10, case V56 of {'Core.Context.MkDefs', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89} -> V58 end, {'Core.Env.Nil'}, V3, {'Prelude.Types.Nothing'}}, V57)) end), V90 end(V53)) end end end end; _ -> case V15 of [E4 | E5] -> (fun (V91, V92) -> case V91 of {'Builtin.MkPair', V93, V94} -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V12, V11, begin (V106 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V12, <<"auto"/utf8>>, 5, begin (V96 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V95) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V12, V95)) end, V94, []))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V105 = fun (V101) -> {'Prelude.Types.Right', <<<<"Search: Trying "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V100))))/binary, <<<<" names "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V102)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V103, V104)) end end}, V100))/binary>>/binary>>/binary>>} end), V105 end(V97)) end end end end))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V117 = begin (V111 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V12, <<"auto"/utf8>>, 5, fun () -> <<"For target"/utf8>> end, V2, V14))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V116 = ('un--searchNames'(V0, V12, V11, V10, V9, V8, [V1 | V7], V6, V5, V3, V2, V93, V94, V14))), V116 end(V112)) end end end end), V117 end(V107)) end end end end, fun (V118) -> case ('nested--8225-7875--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V118)) of 1 -> fun (V119) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V118, V119)) end; 0 -> ('nested--8225-7876--in--un--tryGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, {'Prelude.Types.Just', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V118 end, V13))}, V14, V92)) end end)) end end(E4, E5)) end end; _ -> case V15 of [E0 | E1] -> (fun (V120, V121) -> case V120 of {'Builtin.MkPair', V122, V123} -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V12, V11, begin (V135 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V12, <<"auto"/utf8>>, 5, begin (V125 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V124) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V12, V124)) end, V123, []))), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V134 = fun (V130) -> {'Prelude.Types.Right', <<<<"Search: Trying "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V129))))/binary, <<<<" names "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V131) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V131)) end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V132, V133)) end end}, V129))/binary>>/binary>>/binary>>} end), V134 end(V126)) end end end end))), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V146 = begin (V140 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V12, <<"auto"/utf8>>, 5, fun () -> <<"For target"/utf8>> end, V2, V14))), fun (V141) -> begin (V142 = (V140(V141))), case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> (begin (V145 = ('un--searchNames'(V0, V12, V11, V10, V9, V8, [V1 | V7], V6, V5, V3, V2, V122, V123, V14))), V145 end(V141)) end end end end), V146 end(V136)) end end end end, fun (V147) -> case ('nested--8225-7875--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V147)) of 1 -> fun (V148) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V147, V148)) end; 0 -> ('nested--8225-7876--in--un--tryGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, {'Prelude.Types.Just', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V147 end, V13))}, V14, V121)) end end)) end end(E0, E1)) end end.
'nested--9838-3965--in--un--normRes'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V7, V0, V11, V4, V9)) end end.
'nested--8745-2880--in--un--impl'(V0, V1) -> case V1 of {'Core.AutoSearch.MkArgInfo', V2, V3, V4, V5, V6} -> case V4 of {'Core.TT.Explicit'} -> 0; _ -> 1 end end.
'nested--10869-4871--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V17 of {'Core.Value.NTCon', V19, V20, V21, V22, V23} -> case V23 of [E0 | E1] -> (fun (V24, V25) -> case V24 of {'Builtin.MkPair', V26, V27} -> case V25 of [E2 | E3] -> (fun (V28, V29) -> case V28 of {'Builtin.MkPair', V30, V31} -> case V29 of [] -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V13, V12, ('nested--10869-4870--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V1, V16, V17, V18)), fun (V32) -> case ('nested--10869-4867--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V32)) of 1 -> fun (V33) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V32, V33)) end; 0 -> begin (V75 = begin (V34 = ('Idris.Idris2.Core.Context':'un--fstName'(V13))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V74 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V39) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V11, case V14 of {'Core.Context.MkDefs', V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71} -> V40 end, {'Core.Env.Nil'}, V5, {'Prelude.Types.Nothing'}}, V39)) end end, fun () -> fun (V72) -> fun (V73) -> {'Prelude.Types.Right', V72} end end end, V38))), V74 end(V35)) end end end end), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V199 = begin (V121 = begin (V80 = ('Idris.Idris2.Core.Context':'un--sndName'(V13))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V120 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V85) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V11, case V14 of {'Core.Context.MkDefs', V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117} -> V86 end, {'Core.Env.Nil'}, V5, {'Prelude.Types.Nothing'}}, V85)) end end, fun () -> fun (V118) -> fun (V119) -> {'Prelude.Types.Right', V118} end end end, V84))), V120 end(V81)) end end end end), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V198 = begin (V126 = ('Idris.Idris2.Core.Context':'un--isPairType'(V13, V20))), fun (V127) -> begin (V128 = (V126(V127))), case V128 of {'Prelude.Types.Left', V129} -> {'Prelude.Types.Left', V129}; {'Prelude.Types.Right', V130} -> (begin (V197 = case V130 of 1 -> begin (V132 = fun (V131) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V131)) end), fun (V133) -> begin (V134 = (V132(V133))), case V134 of {'Prelude.Types.Left', V135} -> {'Prelude.Types.Left', V135}; {'Prelude.Types.Right', V136} -> (begin (V163 = begin (V137 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V13, V0, V136, V4, V27))), fun (V138) -> begin (V139 = (V137(V138))), case V139 of {'Prelude.Types.Left', V140} -> {'Prelude.Types.Left', V140}; {'Prelude.Types.Right', V141} -> (begin (V162 = begin (V142 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V13, V0, V136, V4, V31))), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V161 = ('un--exactlyOne'(V0, V13, V12, V11, V4, V5, V18, [begin (V147 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V27))), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V153 = ('nested--10869-4871--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, fun (V152) -> ('Idris.Idris2.Core.TT':'un--apply'(V11, {'Core.TT.Ref', V11, {'Core.TT.Func'}, V79}, [V141 | [V146 | [(V16(V152)) | []]]])) end, V151, V18))), V153 end(V148)) end end end end | [begin (V154 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V31))), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V160 = ('nested--10869-4871--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, fun (V159) -> ('Idris.Idris2.Core.TT':'un--apply'(V11, {'Core.TT.Ref', V11, {'Core.TT.Func'}, V125}, [V141 | [V146 | [(V16(V159)) | []]]])) end, V158, V18))), V160 end(V155)) end end end end | []]]))), V161 end(V143)) end end end end), V162 end(V138)) end end end end), V163 end(V133)) end end end end; 0 -> fun (V164) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V11, case V14 of {'Core.Context.MkDefs', V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196} -> V165 end, {'Core.Env.Nil'}, V5, {'Prelude.Types.Nothing'}}, V164)) end end), V197 end(V127)) end end end end), V198 end(V122)) end end end end), V199 end(V76)) end end end end end end)); _ -> ('nested--10869-4870--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18)) end; _ -> ('nested--10869-4870--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18)) end end(E2, E3)); _ -> ('nested--10869-4870--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18)) end; _ -> ('nested--10869-4870--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18)) end end(E0, E1)); _ -> ('nested--10869-4870--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18)) end; _ -> ('nested--10869-4870--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18)) end.
'nested--10869-4870--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V19 = ('un--mkArgs'(V0, V13, V12, V11, V10, V4, V17))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V192 = case V23 of {'Builtin.MkPair', V24, V25} -> begin (V29 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V13, <<"auto"/utf8>>, 10, fun () -> (begin (V27 = fun (V26) -> V26 end), fun (V28) -> (V27(V28)) end end(<<"Trying"/utf8>>)) end, V4, (V16(V1))))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V191 = begin (V37 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V13, <<"auto"/utf8>>, 10, fun () -> (begin (V35 = fun (V34) -> V34 end), fun (V36) -> (V35(V36)) end end(<<"Type"/utf8>>)) end, V4, V17))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V190 = begin (V45 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V13, <<"auto"/utf8>>, 10, fun () -> (begin (V43 = fun (V42) -> V42 end), fun (V44) -> (V43(V44)) end end(<<"For target"/utf8>>)) end, V4, V18))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V189 = begin (V66 = ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V50, V51, V52, V53, V54, V55, V56, V57)) end end end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V58, V59, V60, V61, V62, V63, V64, V65)) end end end end end end end end}, V0, V13, V12, ('Idris.Idris2.Core.Unify':'un--inTerm'()), V11, V4))(V18))(V25))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V188 = case V70 of {'Core.Unify.MkUnifyResult', V71, V72, V73, V74} -> case V71 of [] -> begin (V75 = ('un--usableLocal'(V0, V13, V11, V9, V4, V17))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V154 = case V79 of 1 -> begin (V93 = ('Idris.Idris2.Core.TT':'un--apply'(V11, (V16(V1)), ((begin (V90 = fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V88, V89)) end end end end), fun (V91) -> fun (V92) -> ((((V90('erased'))('erased'))(V91))(V92)) end end end(fun (V80) -> case V80 of {'Core.AutoSearch.MkArgInfo', V81, V82, V83, V84, V85} -> V84 end end))(V24))))), begin (V97 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V13, <<"auto"/utf8>>, 10, fun () -> (begin (V95 = fun (V94) -> V94 end), fun (V96) -> (V95(V96)) end end(<<"Local var candidate "/utf8>>)) end, V4, V93))), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V111 = begin (V102 = ('nested--10869-4869--in--un--clearEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V1, V4))), begin (V104 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V103) -> ('un--searchIfHole'(V0, V13, V12, V11, V9, V8, 0, V7, V6, V5, V102, V103)) end, ('un--impLast'(V24))))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V110 = fun (V109) -> {'Prelude.Types.Right', V93} end), V110 end(V105)) end end end end end), V111 end(V98)) end end end end end; 0 -> begin (V115 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V13, <<"auto"/utf8>>, 10, fun () -> (begin (V113 = fun (V112) -> V112 end), fun (V114) -> (V113(V114)) end end(<<"Can\x{27}t use "/utf8>>)) end, V4, V17))), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V153 = fun (V120) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V11, case V14 of {'Core.Context.MkDefs', V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152} -> V121 end, {'Core.Env.Nil'}, V5, {'Prelude.Types.Nothing'}}, V120)) end), V153 end(V116)) end end end end end), V154 end(V76)) end end end end; _ -> fun (V155) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V11, case V14 of {'Core.Context.MkDefs', V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187} -> V156 end, {'Core.Env.Nil'}, V5, {'Prelude.Types.Nothing'}}, V155)) end end end), V188 end(V67)) end end end end), V189 end(V46)) end end end end), V190 end(V38)) end end end end), V191 end(V30)) end end end end end), V192 end(V20)) end end end end.
'nested--13212-6946--in--un--drop'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [] -> []; [E0 | E1] -> (fun (V14, V15) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V31, V32, V33, V34)) end end end end end end end, fun (V35) -> fun (V36) -> V36 end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V39, V40, V41)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> case (V42 =:= V43) of 'false' -> 0; _ -> 1 end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V44, V45)) end end}, V11, V12)) of 1 -> [V14 | ('nested--13212-6946--in--un--drop'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, (V11 + 1), V12, V15))]; 0 -> ('nested--13212-6946--in--un--drop'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, (V11 + 1), V12, V15)) end end(E0, E1)) end.
'nested--13212-6947--in--un--concrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Core.Value.NBind', V14, V15, V16, V17} -> begin (V18 = ((V17(V11))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V6, {'Core.TT.Erased', V14, {'Core.TT.Placeholder'}}))))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V23 = ('nested--13212-6947--in--un--concrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V22, 0))), V23 end(V19)) end end end end; {'Core.Value.NTCon', V24, V25, V26, V27, V28} -> begin (V29 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V10, V24, 0, V25))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V52 = begin (V36 = ('nested--13212-6946--in--un--drop'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, 0, case V33 of {'Core.Context.MkSearchData', V34, V35} -> V34 end, V28))), ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V10, V0, V11, V37))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V43 = ('nested--13212-6947--in--un--concrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V42, 0))), V43 end(V39)) end end end end end, ((begin (V49 = fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V47, V48)) end end end end), fun (V50) -> fun (V51) -> ((((V49('erased'))('erased'))(V50))(V51)) end end end(fun (V44) -> ('Idris.Idris2.Builtin':'un--snd'(V44)) end))(V36)))) end), V52 end(V30)) end end end end; {'Core.Value.NDCon', V53, V54, V55, V56, V57} -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V58) -> begin (V59 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V10, V0, V11, V58))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V64 = ('nested--13212-6947--in--un--concrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V63, 0))), V64 end(V60)) end end end end end, ((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V65) -> ('Idris.Idris2.Builtin':'un--snd'(V65)) end))(V57)))); {'Core.Value.NApp', V73, V74, V75} -> case V74 of {'Core.Value.NMeta', V76, V77, V78} -> case V13 of 1 -> begin (V111 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V76, case V11 of {'Core.Context.MkDefs', V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110} -> V79 end))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V122 = fun (V116) -> case V115 of {'Prelude.Types.Just', V117} -> case V117 of {'Core.Context.Context.Hole', V118, V119} -> case case V119 of {'Core.Context.Context.MkHoleFlags', V120, V121} -> V120 end of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.DeterminingArg', [], V8, V76, V77, {'Core.Env.Nil'}, V5}, V116)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.DeterminingArg', [], V8, V76, V77, {'Core.Env.Nil'}, V5}, V116)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.DeterminingArg', [], V8, V76, V77, {'Core.Env.Nil'}, V5}, V116)) end end), V122 end(V112)) end end end end; 0 -> begin (V155 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V76, case V11 of {'Core.Context.MkDefs', V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154} -> V123 end))), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V262 = fun (V160) -> case V159 of {'Prelude.Types.Just', V161} -> case V161 of {'Core.Context.Context.Hole', V162, V163} -> case case V163 of {'Core.Context.Context.MkHoleFlags', V164, V165} -> V164 end of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V8, case V11 of {'Core.Context.MkDefs', V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197} -> V166 end, {'Core.Env.Nil'}, V5, {'Prelude.Types.Nothing'}}, V160)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V8, case V11 of {'Core.Context.MkDefs', V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229} -> V198 end, {'Core.Env.Nil'}, V5, {'Prelude.Types.Nothing'}}, V160)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V8, case V11 of {'Core.Context.MkDefs', V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261} -> V230 end, {'Core.Env.Nil'}, V5, {'Prelude.Types.Nothing'}}, V160)) end end), V262 end(V156)) end end end end; _ -> fun (V263) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; _ -> fun (V264) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; _ -> fun (V265) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'nested--10869-4868--in--un--clearEnvType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V14 of 0 -> case V16 of {'Core.Env.::', V17, V18} -> {'Core.Env.::', {'Core.TT.Lam', ('Idris.Idris2.Core.TT':'un--binderLoc'(V17)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V17)), {'Core.TT.Explicit'}, {'Core.TT.Erased', V15, {'Core.TT.Placeholder'}}}, V18} end; _ -> begin (V19 = (V14 - 1)), case V16 of {'Core.Env.::', V20, V21} -> {'Core.Env.::', V20, ('nested--10869-4868--in--un--clearEnvType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V19, V15, V21))} end end end.
'nested--10869-4869--in--un--clearEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of {'Core.TT.Local', V16, V17, V18} -> ('nested--10869-4868--in--un--clearEnvType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V18, V16, V15)); _ -> V15 end.
'nested--10869-4867--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Core.Core.AmbiguousSearch', V15, V16, V17, V18, V19} -> 1; _ -> 0 end.
'nested--8225-7875--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Core.Core.AmbiguousSearch', V14, V15, V16, V17, V18} -> 1; _ -> 0 end.
'un--usableLocal'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.Value.NApp', V6, V7, V8} -> case V7 of {'Core.Value.NMeta', V9, V10, V11} -> fun (V12) -> case V9 of {'Core.Name.PV', V13, V14} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NLocal', V15, V16} -> begin (V22 = begin (V17 = V1), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'get'(V19)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V53 = begin (V43 = begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V27) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V26, V27)) end, ((begin (V33 = fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V31, V32)) end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end(fun (V28) -> ('Idris.Idris2.Builtin':'un--snd'(V28)) end))(V8)), []))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V42 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V41) -> ('un--usableLocal'(V0, V1, V2, V3, V4, V41)) end, V40, []))), V42 end(V37)) end end end end), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V52 = fun (V48) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V49, V50)) end end, 1}, fun (V51) -> V51 end, V47))} end), V52 end(V44)) end end end end), V53 end(V23)) end end end end; _ -> fun (V54) -> {'Prelude.Types.Right', 1} end end; {'Core.Value.NTCon', V55, V56, V57, V58, V59} -> begin (V60 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V2, case V3 of 1 -> 0; 0 -> 1 end, V56))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V75 = ('nested--10380-4413--in--un--usableLocalArg'(V55, V57, V58, V0, V59, V56, V4, V3, V2, V1, 0, case V64 of {'Core.Context.MkSearchData', V65, V66} -> V65 end, ((begin (V72 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V70, V71)) end end end end), fun (V73) -> fun (V74) -> ((((V72('erased'))('erased'))(V73))(V74)) end end end(fun (V67) -> ('Idris.Idris2.Builtin':'un--snd'(V67)) end))(V59))))), V75 end(V61)) end end end end; {'Core.Value.NDCon', V76, V77, V78, V79, V80} -> begin (V86 = begin (V81 = V1), fun (V82) -> begin (V85 = (begin (V83 = V81), fun (V84) -> ('erlang':'get'(V83)) end end(V82))), {'Prelude.Types.Right', V85} end end end), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V117 = begin (V107 = begin (V100 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V91) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V90, V91)) end, ((begin (V97 = fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V95, V96)) end end end end), fun (V98) -> fun (V99) -> ((((V97('erased'))('erased'))(V98))(V99)) end end end(fun (V92) -> ('Idris.Idris2.Builtin':'un--snd'(V92)) end))(V80)), []))), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V106 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V105) -> ('un--usableLocal'(V0, V1, V2, V3, V4, V105)) end, V104, []))), V106 end(V101)) end end end end), fun (V108) -> begin (V109 = (V107(V108))), case V109 of {'Prelude.Types.Left', V110} -> {'Prelude.Types.Left', V110}; {'Prelude.Types.Right', V111} -> (begin (V116 = fun (V112) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V113, V114)) end end, 1}, fun (V115) -> V115 end, V111))} end), V116 end(V108)) end end end end), V117 end(V87)) end end end end; {'Core.Value.NBind', V118, V119, V120, V121} -> case V120 of {'Core.TT.Pi', V122, V123, V124, V125} -> begin (V131 = begin (V126 = V1), fun (V127) -> begin (V130 = (begin (V128 = V126), fun (V129) -> ('erlang':'get'(V128)) end end(V127))), {'Prelude.Types.Right', V130} end end end), fun (V132) -> begin (V133 = (V131(V132))), case V133 of {'Prelude.Types.Left', V134} -> {'Prelude.Types.Left', V134}; {'Prelude.Types.Right', V135} -> (begin (V142 = begin (V136 = ((V121(V135))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, {'Core.TT.Erased', V118, {'Core.TT.Placeholder'}}))))), fun (V137) -> begin (V138 = (V136(V137))), case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> (begin (V141 = ('un--usableLocal'(V0, V1, V2, V3, V4, V140))), V141 end(V137)) end end end end), V142 end(V132)) end end end end; _ -> fun (V143) -> {'Prelude.Types.Right', 1} end end; {'Core.Value.NErased', V144, V145} -> fun (V146) -> {'Prelude.Types.Right', 0} end; _ -> fun (V147) -> {'Prelude.Types.Right', 1} end end.
'un--successful'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V5, V6) -> begin (V12 = begin (V7 = V2), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V110 = begin (V17 = ('Idris.Idris2.Core.Context':'un--branch'(V1))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V109 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V22 = V5), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V78 = begin (V32 = begin (V27 = V2), fun (V28) -> begin (V31 = (begin (V29 = V27), fun (V30) -> ('erlang':'get'(V29)) end end(V28))), {'Prelude.Types.Right', V31} end end end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V77 = begin (V42 = begin (V37 = V1), fun (V38) -> begin (V41 = (begin (V39 = V37), fun (V40) -> ('erlang':'get'(V39)) end end(V38))), {'Prelude.Types.Right', V41} end end end), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V76 = begin (V52 = begin (V47 = V2), fun (V48) -> begin (V51 = (begin (V49 = V47), fun (V50) -> ('erlang':'put'(V49, V16)) end end(V48))), {'Prelude.Types.Right', V51} end end end), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V75 = begin (V62 = begin (V57 = V1), fun (V58) -> begin (V61 = (begin (V59 = V57), fun (V60) -> ('erlang':'put'(V59, V21)) end end(V58))), {'Prelude.Types.Right', V61} end end end), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V74 = begin (V67 = ('un--successful'(V0, V1, V2, V6))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V73 = fun (V72) -> {'Prelude.Types.Right', [{'Prelude.Types.Right', {'Builtin.MkPair', V26, {'Builtin.MkPair', V46, V36}}} | V71]} end), V73 end(V68)) end end end end), V74 end(V63)) end end end end), V75 end(V53)) end end end end), V76 end(V43)) end end end end), V77 end(V33)) end end end end), V78 end(V23)) end end end end, fun (V79) -> begin (V85 = begin (V80 = V2), fun (V81) -> begin (V84 = (begin (V82 = V80), fun (V83) -> ('erlang':'put'(V82, V16)) end end(V81))), {'Prelude.Types.Right', V84} end end end), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V108 = begin (V95 = begin (V90 = V1), fun (V91) -> begin (V94 = (begin (V92 = V90), fun (V93) -> ('erlang':'put'(V92, V21)) end end(V91))), {'Prelude.Types.Right', V94} end end end), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V107 = begin (V100 = ('un--successful'(V0, V1, V2, V6))), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V106 = fun (V105) -> {'Prelude.Types.Right', [{'Prelude.Types.Left', V79} | V104]} end), V106 end(V101)) end end end end), V107 end(V96)) end end end end), V108 end(V86)) end end end end end))), V109 end(V18)) end end end end), V110 end(V13)) end end end end end(E0, E1)) end.
'un--searchType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Core.TT.Bind', V13, V14, V15, V16} -> case V15 of {'Core.TT.Pi', V17, V18, V19, V20} -> begin (V21 = ('un--searchType'([V14 | V0], V1, V2, V3, V4, V5, [], V7, V8, V9, V10, {'Core.Env.::', V15, V11}, V16))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', {'Core.TT.Bind', V13, V14, {'Core.TT.Lam', V17, V18, V19, V20}, V25}} end), V27 end(V22)) end end end end; {'Core.TT.Let', V28, V29, V30, V31} -> begin (V32 = ('un--searchType'([V14 | V0], V1, V2, V3, V4, V5, [], V7, V8, V9, V10, {'Core.Env.::', V15, V11}, V16))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V38 = fun (V37) -> {'Prelude.Types.Right', {'Core.TT.Bind', V13, V14, V15, V36}} end), V38 end(V33)) end end end end; _ -> begin (V44 = begin (V39 = V1), fun (V40) -> begin (V43 = (begin (V41 = V39), fun (V42) -> ('erlang':'get'(V41)) end end(V40))), {'Prelude.Types.Right', V43} end end end), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V132 = begin (V49 = ('un--abandonIfCycle'(V0, V1, V11, V12, V6))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V131 = begin (V54 = [V12 | V6]), begin (V55 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V48, V11, V12))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V130 = case V59 of {'Core.Value.NTCon', V60, V61, V62, V63, V64} -> begin (V65 = {'Core.Value.NTCon', V60, V61, V62, V63, V64}), case case (V63 =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V64))) of 'false' -> 0; _ -> 1 end of 1 -> begin (V66 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"auto"/utf8>>, 10, fun () -> <<"Next target"/utf8>> end, V11, V65))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V90 = begin (V71 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V5, V61))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V89 = begin (V77 = case V9 of 1 -> ('un--checkConcreteDets'(V0, V1, V2, V3, V5, V11, V10, {'Core.Value.NTCon', V60, V61, V62, V63, V64})); 0 -> fun (V76) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V88 = case case V5 of 1 -> V9; 0 -> 0 end of 1 -> ('nested--8225-7876--in--un--tryGroups'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, {'Prelude.Types.Nothing'}, V65, case V75 of {'Core.Context.MkSearchData', V82, V83} -> V83 end)); 0 -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V1, V2, ('un--searchLocalVars'(V0, V1, V2, V3, V4, V5, V54, V7, V8, V10, V11, V65)), fun (V84) -> case ('nested--8225-7875--in--un--ambig'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V84)) of 1 -> fun (V85) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V84, V85)) end; 0 -> ('nested--8225-7876--in--un--tryGroups'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, {'Prelude.Types.Nothing'}, V65, case V75 of {'Core.Context.MkSearchData', V86, V87} -> V87 end)) end end)) end), V88 end(V78)) end end end end), V89 end(V72)) end end end end), V90 end(V67)) end end end end; 0 -> fun (V91) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V3, case V48 of {'Core.Context.MkDefs', V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123} -> V92 end, {'Core.Env.Nil'}, V10, {'Prelude.Types.Nothing'}}, V91)) end end end; _ -> begin (V124 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"auto"/utf8>>, 10, fun () -> <<"Next target: "/utf8>> end, V11, V59))), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V129 = ('un--searchLocalVars'(V0, V1, V2, V3, V4, V5, V54, V7, V8, V10, V11, V59))), V129 end(V125)) end end end end end), V130 end(V56)) end end end end end), V131 end(V50)) end end end end), V132 end(V45)) end end end end end; _ -> begin (V138 = begin (V133 = V1), fun (V134) -> begin (V137 = (begin (V135 = V133), fun (V136) -> ('erlang':'get'(V135)) end end(V134))), {'Prelude.Types.Right', V137} end end end), fun (V139) -> begin (V140 = (V138(V139))), case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> (begin (V226 = begin (V143 = ('un--abandonIfCycle'(V0, V1, V11, V12, V6))), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V225 = begin (V148 = [V12 | V6]), begin (V149 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V142, V11, V12))), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V224 = case V153 of {'Core.Value.NTCon', V154, V155, V156, V157, V158} -> begin (V159 = {'Core.Value.NTCon', V154, V155, V156, V157, V158}), case case (V157 =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V158))) of 'false' -> 0; _ -> 1 end of 1 -> begin (V160 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"auto"/utf8>>, 10, fun () -> <<"Next target"/utf8>> end, V11, V159))), fun (V161) -> begin (V162 = (V160(V161))), case V162 of {'Prelude.Types.Left', V163} -> {'Prelude.Types.Left', V163}; {'Prelude.Types.Right', V164} -> (begin (V184 = begin (V165 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V5, V155))), fun (V166) -> begin (V167 = (V165(V166))), case V167 of {'Prelude.Types.Left', V168} -> {'Prelude.Types.Left', V168}; {'Prelude.Types.Right', V169} -> (begin (V183 = begin (V171 = case V9 of 1 -> ('un--checkConcreteDets'(V0, V1, V2, V3, V5, V11, V10, {'Core.Value.NTCon', V154, V155, V156, V157, V158})); 0 -> fun (V170) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V172) -> begin (V173 = (V171(V172))), case V173 of {'Prelude.Types.Left', V174} -> {'Prelude.Types.Left', V174}; {'Prelude.Types.Right', V175} -> (begin (V182 = case case V5 of 1 -> V9; 0 -> 0 end of 1 -> ('nested--8225-7876--in--un--tryGroups'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, {'Prelude.Types.Nothing'}, V159, case V169 of {'Core.Context.MkSearchData', V176, V177} -> V177 end)); 0 -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V1, V2, ('un--searchLocalVars'(V0, V1, V2, V3, V4, V5, V148, V7, V8, V10, V11, V159)), fun (V178) -> case ('nested--8225-7875--in--un--ambig'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V178)) of 1 -> fun (V179) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V178, V179)) end; 0 -> ('nested--8225-7876--in--un--tryGroups'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, {'Prelude.Types.Nothing'}, V159, case V169 of {'Core.Context.MkSearchData', V180, V181} -> V181 end)) end end)) end), V182 end(V172)) end end end end), V183 end(V166)) end end end end), V184 end(V161)) end end end end; 0 -> fun (V185) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V3, case V142 of {'Core.Context.MkDefs', V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217} -> V186 end, {'Core.Env.Nil'}, V10, {'Prelude.Types.Nothing'}}, V185)) end end end; _ -> begin (V218 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"auto"/utf8>>, 10, fun () -> <<"Next target: "/utf8>> end, V11, V153))), fun (V219) -> begin (V220 = (V218(V219))), case V220 of {'Prelude.Types.Left', V221} -> {'Prelude.Types.Left', V221}; {'Prelude.Types.Right', V222} -> (begin (V223 = ('un--searchLocalVars'(V0, V1, V2, V3, V4, V5, V148, V7, V8, V10, V11, V153))), V223 end(V219)) end end end end end), V224 end(V150)) end end end end end), V225 end(V144)) end end end end), V226 end(V139)) end end end end end.
'un--searchNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of [] -> begin (V19 = begin (V14 = V1), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V57 = fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V3, case V23 of {'Core.Context.MkDefs', V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56} -> V25 end, {'Core.Env.Nil'}, V9, {'Prelude.Types.Nothing'}}, V24)) end), V57 end(V20)) end end end end; [E0 | E1] -> (fun (V58, V59) -> begin (V65 = begin (V60 = V1), fun (V61) -> begin (V64 = (begin (V62 = V60), fun (V63) -> ('erlang':'get'(V62)) end end(V61))), {'Prelude.Types.Right', V64} end end end), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V184 = begin (V167 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V70) -> ('nested--12731-6558--in--un--visible'(V0, V58, V59, V13, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V69 of {'Core.Context.MkDefs', V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} -> V71 end, [case V69 of {'Core.Context.MkDefs', V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134} -> V105 end | case V69 of {'Core.Context.MkDefs', V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166} -> V138 end], V70)) end, [V58 | V59], []))), fun (V168) -> begin (V169 = (V167(V168))), case V169 of {'Prelude.Types.Left', V170} -> {'Prelude.Types.Left', V170}; {'Prelude.Types.Right', V171} -> (begin (V183 = begin (V173 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V172) -> V172 end, V171))), begin (V182 = ((begin (V179 = fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V177, V178)) end end end end), fun (V180) -> fun (V181) -> ((((V179('erased'))('erased'))(V180))(V181)) end end end(fun (V174) -> ('un--searchName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, V174)) end))(V173))), case V11 of 1 -> ('un--anyOne'(V0, V1, V2, V3, V10, V9, V182)); 0 -> ('un--exactlyOne'(V0, V1, V2, V3, V10, V9, V13, V182)) end end end), V183 end(V168)) end end end end), V184 end(V66)) end end end end end(E0, E1)) end.
'un--searchName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Builtin.MkPair', V13, V14} -> begin (V20 = begin (V15 = V1), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V381 = begin (V114 = begin (V25 = ('Idris.Idris2.Core.Context':'un--getNS'(V1))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V113 = begin (V30 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V1))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V112 = fun (V35) -> case ('Idris.Idris2.Core.Context':'un--visibleInAny'([V29 | V34], case V14 of {'Core.Context.Context.MkGlobalDef', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> V37 end, case V14 of {'Core.Context.Context.MkGlobalDef', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79} -> V67 end)) of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V3, case V24 of {'Core.Context.MkDefs', V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111} -> V80 end, {'Core.Env.Nil'}, V9, {'Prelude.Types.Nothing'}}, V35)) end end), V112 end(V31)) end end end end), V113 end(V26)) end end end end), fun (V115) -> begin (V116 = (V114(V115))), case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> (begin (V380 = begin (V204 = fun (V119) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V122, V123, V124)) end end end end end, fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V127, V128, V129)) end end end end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V131)) end end, fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V135, V136, V137, V138)) end end end end end end end, fun (V139) -> fun (V140) -> V140 end end, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V143, V144, V145)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V146, V147)) end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V148, V149)) end end}, {'Core.Context.Context.BlockedHint'}, case V14 of {'Core.Context.Context.MkGlobalDef', V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171} -> V161 end)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V3, case V24 of {'Core.Context.MkDefs', V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203} -> V172 end, {'Core.Env.Nil'}, V9, {'Prelude.Types.Nothing'}}, V119)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V205) -> begin (V206 = (V204(V205))), case V206 of {'Prelude.Types.Left', V207} -> {'Prelude.Types.Left', V207}; {'Prelude.Types.Right', V208} -> (begin (V379 = begin (V231 = case V14 of {'Core.Context.Context.MkGlobalDef', V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230} -> V211 end), begin (V265 = case V14 of {'Core.Context.Context.MkGlobalDef', V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253} -> case V249 of {'Core.Context.Context.DCon', V254, V255, V256} -> {'Core.TT.DataCon', V254, V255}; {'Core.Context.Context.TCon', V257, V258, V259, V260, V261, V262, V263, V264} -> {'Core.TT.TyCon', V257, V258}; _ -> {'Core.TT.Func'} end end), begin (V266 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V24, V10, ('Idris.Idris2.Core.TT':'un--embed'(V231))))), fun (V267) -> begin (V268 = (V266(V267))), case V268 of {'Prelude.Types.Left', V269} -> {'Prelude.Types.Left', V269}; {'Prelude.Types.Right', V270} -> (begin (V378 = begin (V271 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"auto"/utf8>>, 10, fun () -> <<<<"Searching Name "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13))/binary>> end, V10, V270))), fun (V272) -> begin (V273 = (V271(V272))), case V273 of {'Prelude.Types.Left', V274} -> {'Prelude.Types.Left', V274}; {'Prelude.Types.Right', V275} -> (begin (V377 = begin (V276 = ('un--mkArgs'(V0, V1, V2, V3, V4, V10, V270))), fun (V277) -> begin (V278 = (V276(V277))), case V278 of {'Prelude.Types.Left', V279} -> {'Prelude.Types.Left', V279}; {'Prelude.Types.Right', V280} -> (begin (V376 = case V280 of {'Builtin.MkPair', V281, V282} -> begin (V299 = ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> fun (V290) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V283, V284, V285, V286, V287, V288, V289, V290)) end end end end end end end end, fun (V291) -> fun (V292) -> fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> fun (V298) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V291, V292, V293, V294, V295, V296, V297, V298)) end end end end end end end end}, V0, V1, V2, ('Idris.Idris2.Core.Unify':'un--inTerm'()), V3, V10))(V11))(V282))), fun (V300) -> begin (V301 = (V299(V300))), case V301 of {'Prelude.Types.Left', V302} -> {'Prelude.Types.Left', V302}; {'Prelude.Types.Right', V303} -> (begin (V375 = case V303 of {'Core.Unify.MkUnifyResult', V304, V305, V306, V307} -> case V304 of [] -> begin (V308 = ('un--isPairNF'(V1, V10, V270, V24))), fun (V309) -> begin (V310 = (V308(V309))), case V310 of {'Prelude.Types.Left', V311} -> {'Prelude.Types.Left', V311}; {'Prelude.Types.Right', V312} -> (begin (V341 = begin (V326 = ('Idris.Idris2.Core.TT':'un--apply'(V3, {'Core.TT.Ref', V3, V265, V13}, ((begin (V323 = fun (V319) -> fun (V320) -> fun (V321) -> fun (V322) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V321, V322)) end end end end), fun (V324) -> fun (V325) -> ((((V323('erased'))('erased'))(V324))(V325)) end end end(fun (V313) -> case V313 of {'Core.AutoSearch.MkArgInfo', V314, V315, V316, V317, V318} -> V317 end end))(V281))))), begin (V327 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"auto"/utf8>>, 10, fun () -> <<"Candidate "/utf8>> end, V10, V326))), fun (V328) -> begin (V329 = (V327(V328))), case V329 of {'Prelude.Types.Left', V330} -> {'Prelude.Types.Left', V330}; {'Prelude.Types.Right', V331} -> (begin (V340 = begin (V333 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V332) -> ('un--searchIfHole'(V0, V1, V2, V3, V5, V6, V312, V7, V8, V9, V10, V332)) end, ('un--impLast'(V281))))), fun (V334) -> begin (V335 = (V333(V334))), case V335 of {'Prelude.Types.Left', V336} -> {'Prelude.Types.Left', V336}; {'Prelude.Types.Right', V337} -> (begin (V339 = fun (V338) -> {'Prelude.Types.Right', V326} end), V339 end(V334)) end end end end), V340 end(V328)) end end end end end), V341 end(V309)) end end end end; _ -> fun (V342) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V3, case V24 of {'Core.Context.MkDefs', V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374} -> V343 end, {'Core.Env.Nil'}, V9, {'Prelude.Types.Nothing'}}, V342)) end end end), V375 end(V300)) end end end end end), V376 end(V277)) end end end end), V377 end(V272)) end end end end), V378 end(V267)) end end end end end end), V379 end(V205)) end end end end), V380 end(V115)) end end end end), V381 end(V21)) end end end end end.
'un--searchLocalWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Builtin.MkPair', V13, V14} -> begin (V20 = begin (V15 = V1), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V32 = begin (V25 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V24, V10, V14))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = ('nested--10869-4871--in--un--findPos'(V0, V13, V14, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V24, V13, fun (V30) -> V30 end, V29, V12))), V31 end(V26)) end end end end), V32 end(V21)) end end end end end.
'un--searchLocalVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V20 = ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('un--searchLocalWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, V11)) end))(('un--getUsableEnv'(V0, V3, V4, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V10))))), ('un--exactlyOne'(V0, V1, V2, V3, V10, V9, V11, V20)) end.
'un--searchIfHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V7 of 0 -> begin (V17 = begin (V12 = V1), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V55 = fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V3, case V21 of {'Core.Context.MkDefs', V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54} -> V23 end, {'Core.Env.Nil'}, V9, {'Prelude.Types.Nothing'}}, V22)) end), V55 end(V18)) end end end end; _ -> begin (V56 = (V7 - 1)), begin (V62 = case V11 of {'Core.AutoSearch.MkArgInfo', V57, V58, V59, V60, V61} -> V57 end), begin (V68 = case V11 of {'Core.AutoSearch.MkArgInfo', V63, V64, V65, V66, V67} -> V64 end), begin (V74 = begin (V69 = V1), fun (V70) -> begin (V73 = (begin (V71 = V69), fun (V72) -> ('erlang':'get'(V71)) end end(V70))), {'Prelude.Types.Right', V73} end end end), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V185 = begin (V111 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', V62}, case V78 of {'Core.Context.MkDefs', V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110} -> V79 end))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V184 = case V115 of {'Prelude.Types.Just', V116} -> begin (V117 = {'Prelude.Types.Just', V116}), ('case--case block in searchIfHole-3062'(V0, V56, V11, V10, V9, V8, V6, V5, V4, V3, V2, V1, V62, V68, V78, V116, V117, case V116 of {'Core.Context.Context.MkGlobalDef', V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139} -> V135 end)) end; {'Prelude.Types.Nothing'} -> begin (V145 = begin (V140 = V1), fun (V141) -> begin (V144 = (begin (V142 = V140), fun (V143) -> ('erlang':'get'(V142)) end end(V141))), {'Prelude.Types.Right', V144} end end end), fun (V146) -> begin (V147 = (V145(V146))), case V147 of {'Prelude.Types.Left', V148} -> {'Prelude.Types.Left', V148}; {'Prelude.Types.Right', V149} -> (begin (V183 = fun (V150) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V3, case V149 of {'Core.Context.MkDefs', V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182} -> V151 end, {'Core.Env.Nil'}, V9, {'Prelude.Types.Nothing'}}, V150)) end), V183 end(V146)) end end end end end), V184 end(V112)) end end end end), V185 end(V75)) end end end end end end end end.
'un--mkArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.Value.NBind', V7, V8, V9, V10} -> case V9 of {'Core.TT.Pi', V11, V12, V13, V14} -> begin (V20 = begin (V15 = V1), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V74 = begin (V26 = fun (V25) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V24, V25)) end), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V73 = begin (V31 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V2, <<"sa"/utf8>>))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V72 = begin (V36 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V30, V5, V14))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V71 = begin (V41 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V4, V12))), begin (V42 = ('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V2, V11, V41, V5, V35, V40, {'Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V5)), ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0))}, 0))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V70 = case V46 of {'Builtin.MkPair', V47, V48} -> begin (V49 = ('Idris.Idris2.Core.Unify':'un--setInvertible'(V1, V3, {'Core.Name.Resolved', V47}))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V69 = begin (V60 = begin (V54 = ((V10(V24))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V5, V48))))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V59 = ('un--mkArgs'(V0, V1, V2, V3, V4, V5, V58))), V59 end(V55)) end end end end), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V68 = fun (V65) -> case V64 of {'Builtin.MkPair', V66, V67} -> {'Prelude.Types.Right', {'Builtin.MkPair', [{'Core.AutoSearch.MkArgInfo', V47, V41, V13, V48, V40} | V66], V67}} end end), V68 end(V61)) end end end end), V69 end(V50)) end end end end end), V70 end(V43)) end end end end end), V71 end(V37)) end end end end), V72 end(V32)) end end end end), V73 end(V27)) end end end end), V74 end(V21)) end end end end; _ -> fun (V75) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], V6}} end end; _ -> fun (V76) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], V6}} end end.
'un--isPairNF'(V0, V1, V2, V3) -> case V2 of {'Core.Value.NTCon', V4, V5, V6, V7, V8} -> ('Idris.Idris2.Core.Context':'un--isPairType'(V0, V5)); {'Core.Value.NBind', V9, V10, V11, V12} -> case V11 of {'Core.TT.Pi', V13, V14, V15, V16} -> begin (V17 = ((V12(V3))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V1, {'Core.TT.Erased', V9, {'Core.TT.Placeholder'}}))))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V22 = ('un--isPairNF'(V0, V1, V21, V3))), V22 end(V18)) end end end end; _ -> fun (V23) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V24) -> {'Prelude.Types.Right', 0} end end.
'un--impLast'(V0) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1) -> case ('nested--8745-2880--in--un--impl'(V0, V1)) of 1 -> 0; 0 -> 1 end end, V0)), ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V2) -> ('nested--8745-2880--in--un--impl'(V0, V2)) end, V0)))).
'un--getUsableEnv'(V0, V1, V2, V3, V4) -> case V0 of [] -> case V4 of {'Core.Env.Nil'} -> [] end; [E0 | E1] -> (fun (V5, V6) -> case V4 of {'Core.Env.::', V7, V8} -> begin (V9 = ('un--getUsableEnv'(V6, V1, V2, ('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V3)), V8))), case case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V7)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> 1; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V10, V11)) end end, 0, fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V12, V13)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V16, V17)) end end}}, V2)) end of 1 -> ('case--case block in getUsableEnv-4242'(V5, V6, V8, V7, V3, V2, V1, V9, ('Idris.Idris2.Core.TT':'un--weakenVar'(V3, 0)))); 0 -> V9 end end end end(E0, E1)) end.
'un--exactlyOne'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V9 of [] -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(V8, fun (V10) -> case V10 of {'Core.Core.CantSolveGoal', V11, V12, V13, V14, V15, V16} -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V10, V17)) end; _ -> begin (V23 = begin (V18 = V1), fun (V19) -> begin (V22 = (begin (V20 = V18), fun (V21) -> ('erlang':'get'(V20)) end end(V19))), {'Prelude.Types.Right', V22} end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V61 = fun (V28) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V3, case V27 of {'Core.Context.MkDefs', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60} -> V29 end, {'Core.Env.Nil'}, V5, {'Prelude.Types.Nothing'}}, V28)) end), V61 end(V24)) end end end end end end)); _ -> begin (V62 = ('un--successful'(V0, V1, V2, V7))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V67 = ('case--exactlyOne-3999'(V0, V7, V6, V5, V4, V3, V2, V1, V66, ('Idris.Idris2.Data.Either':'un--rights'(V66))))), V67 end(V63)) end end end end end end(E0, E1)); _ -> begin (V68 = ('un--successful'(V0, V1, V2, V7))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V73 = ('case--exactlyOne-3999'(V0, V7, V6, V5, V4, V3, V2, V1, V72, ('Idris.Idris2.Data.Either':'un--rights'(V72))))), V73 end(V69)) end end end end end.
'un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> fun (V10) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V11, V12) -> begin (V67 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V28, V29, V30, V31)) end end end end end end end, fun (V32) -> fun (V33) -> V33 end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V36, V37, V38)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V39) -> fun (V40) -> case (V39 =:= V40) of 'false' -> 0; _ -> 1 end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V41, V42)) end end}, V7, V8)) of 1 -> begin (V48 = begin (V43 = V1), fun (V44) -> begin (V47 = (begin (V45 = V43), fun (V46) -> ('erlang':'get'(V45)) end end(V44))), {'Prelude.Types.Right', V47} end end end), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V65 = begin (V53 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V52, V11))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V64 = begin (V58 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"auto.determining"/utf8>>, 10, fun () -> <<"Checking that the following argument is concrete"/utf8>> end, V5, V57))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V63 = ('nested--13212-6947--in--un--concrete'(V0, V11, V12, V8, V7, V6, V5, V4, V3, V2, V1, V52, V57, 1))), V63 end(V59)) end end end end), V64 end(V54)) end end end end), V65 end(V49)) end end end end; 0 -> fun (V66) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V72 = ('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, (V7 + 1), V8, V12))), V72 end(V68)) end end end end end(E0, E1)) end.
'un--checkConcreteDets'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.Value.NTCon', V8, V9, V10, V11, V12} -> begin (V18 = begin (V13 = V1), fun (V14) -> begin (V17 = (begin (V15 = V13), fun (V16) -> ('erlang':'get'(V15)) end end(V14))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V179 = begin (V23 = ('Idris.Idris2.Core.Context':'un--isPairType'(V1, V9))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V178 = case V27 of 1 -> case V12 of [E0 | E1] -> (fun (V28, V29) -> case V28 of {'Builtin.MkPair', V30, V31} -> case V29 of [E2 | E3] -> (fun (V32, V33) -> case V32 of {'Builtin.MkPair', V34, V35} -> case V33 of [] -> begin (V36 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V22, V31))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V53 = begin (V41 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V22, V35))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V52 = begin (V46 = ('un--checkConcreteDets'(V0, V1, V2, V3, V4, V5, V6, V40))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V51 = ('un--checkConcreteDets'(V0, V1, V2, V3, V4, V5, V6, V45))), V51 end(V47)) end end end end), V52 end(V42)) end end end end), V53 end(V37)) end end end end; _ -> begin (V54 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V9))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V69 = ('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V58 of {'Core.Context.MkSearchData', V59, V60} -> V59 end, ((begin (V66 = fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V64, V65)) end end end end), fun (V67) -> fun (V68) -> ((((V66('erased'))('erased'))(V67))(V68)) end end end(fun (V61) -> ('Idris.Idris2.Builtin':'un--snd'(V61)) end))(V12))))), V69 end(V55)) end end end end end; _ -> begin (V70 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V9))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V85 = ('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V74 of {'Core.Context.MkSearchData', V75, V76} -> V75 end, ((begin (V82 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V80, V81)) end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V77) -> ('Idris.Idris2.Builtin':'un--snd'(V77)) end))(V12))))), V85 end(V71)) end end end end end end(E2, E3)); _ -> begin (V86 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V9))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V101 = ('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V90 of {'Core.Context.MkSearchData', V91, V92} -> V91 end, ((begin (V98 = fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V96, V97)) end end end end), fun (V99) -> fun (V100) -> ((((V98('erased'))('erased'))(V99))(V100)) end end end(fun (V93) -> ('Idris.Idris2.Builtin':'un--snd'(V93)) end))(V12))))), V101 end(V87)) end end end end end; _ -> begin (V102 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V9))), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V117 = ('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V106 of {'Core.Context.MkSearchData', V107, V108} -> V107 end, ((begin (V114 = fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V112, V113)) end end end end), fun (V115) -> fun (V116) -> ((((V114('erased'))('erased'))(V115))(V116)) end end end(fun (V109) -> ('Idris.Idris2.Builtin':'un--snd'(V109)) end))(V12))))), V117 end(V103)) end end end end end end(E0, E1)); _ -> begin (V118 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V9))), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V133 = ('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V122 of {'Core.Context.MkSearchData', V123, V124} -> V123 end, ((begin (V130 = fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V128, V129)) end end end end), fun (V131) -> fun (V132) -> ((((V130('erased'))('erased'))(V131))(V132)) end end end(fun (V125) -> ('Idris.Idris2.Builtin':'un--snd'(V125)) end))(V12))))), V133 end(V119)) end end end end end; 0 -> begin (V134 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V9))), fun (V135) -> begin (V136 = (V134(V135))), case V136 of {'Prelude.Types.Left', V137} -> {'Prelude.Types.Left', V137}; {'Prelude.Types.Right', V138} -> (begin (V177 = begin (V161 = begin (V144 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V139) -> fun (V140) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V139, V140)) end end, fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V141, V142, V143)) end end end}, V9))), fun (V145) -> begin (V146 = (V144(V145))), case V146 of {'Prelude.Types.Left', V147} -> {'Prelude.Types.Left', V147}; {'Prelude.Types.Right', V148} -> (begin (V160 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V150 = fun (V149) -> V149 end), fun (V151) -> (V150(V151)) end end(<<"auto.determining"/utf8>>)), 10, fun () -> <<(begin (V153 = fun (V152) -> V152 end), fun (V154) -> (V153(V154)) end end(<<"Determining arguments for "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V148))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V155) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V155)) end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V156, V157)) end end}, case V138 of {'Core.Context.MkSearchData', V158, V159} -> V158 end))/binary>>/binary>>/binary>> end))), V160 end(V145)) end end end end), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V176 = ('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V138 of {'Core.Context.MkSearchData', V166, V167} -> V166 end, ((begin (V173 = fun (V169) -> fun (V170) -> fun (V171) -> fun (V172) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V171, V172)) end end end end), fun (V174) -> fun (V175) -> ((((V173('erased'))('erased'))(V174))(V175)) end end end(fun (V168) -> ('Idris.Idris2.Builtin':'un--snd'(V168)) end))(V12))))), V176 end(V162)) end end end end), V177 end(V135)) end end end end end), V178 end(V24)) end end end end), V179 end(V19)) end end end end; _ -> fun (V180) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'un--anyOne'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> begin (V12 = begin (V7 = V1), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V50 = fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V3, case V16 of {'Core.Context.MkDefs', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} -> V18 end, {'Core.Env.Nil'}, V5, {'Prelude.Types.Nothing'}}, V17)) end), V50 end(V13)) end end end end; [E0 | E1] -> (fun (V51, V52) -> case V52 of [] -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(V51, fun (V53) -> case V53 of {'Core.Core.CantSolveGoal', V54, V55, V56, V57, V58, V59} -> fun (V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V53, V60)) end; _ -> begin (V66 = begin (V61 = V1), fun (V62) -> begin (V65 = (begin (V63 = V61), fun (V64) -> ('erlang':'get'(V63)) end end(V62))), {'Prelude.Types.Right', V65} end end end), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V104 = fun (V71) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V3, case V70 of {'Core.Context.MkDefs', V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103} -> V72 end, {'Core.Env.Nil'}, V5, {'Prelude.Types.Nothing'}}, V71)) end), V104 end(V67)) end end end end end end)); _ -> ('Idris.Idris2.Core.UnifyState':'un--tryUnify'(V1, V2, V51, ('un--anyOne'(V0, V1, V2, V3, V4, V5, V52)))) end end(E0, E1)) end.
'un--abandonIfCycle'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V6, V7) -> begin (V13 = begin (V8 = V1), fun (V9) -> begin (V12 = (begin (V10 = V8), fun (V11) -> ('erlang':'get'(V10)) end end(V9))), {'Prelude.Types.Right', V12} end end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V28 = begin (V18 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_Term'(V1, V0, V17, V2, V3, V6))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V27 = case V22 of 1 -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V25 = fun (V24) -> V24 end), fun (V26) -> (V25(V26)) end end(<<"Cycle in search"/utf8>>))}, V23)) end; 0 -> ('un--abandonIfCycle'(V0, V1, V2, V3, V7)) end), V27 end(V19)) end end end end), V28 end(V14)) end end end end end(E0, E1)) end.
