-module('Idris.Idris2.Control.Monad.RWS.CPS').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case-->>=-2833'/7,
  'case--case block in <*>-2422'/11,
  'case--<*>-2371'/7,
  'case--map-2118'/7,
  'case--mapRWS-1952'/3,
  'case--execRWS-1862'/5,
  'case--evalRWS-1787'/5,
  'case--rws-1702'/6,
  'case--mapRWST-1485'/7,
  'case--execRWST-1366'/6,
  'case--evalRWST-1272'/6,
  'case--rwsT-1170'/7,
  'dn--un--pure_Applicative_((((RWST $r) $w) $s) $m)'/5,
  'dn--un--map_Functor_((((RWST $r) $w) $s) $m)'/6,
  'dn--un--lift_MonadTrans_(((RWST $r) $w) $s)'/5,
  'dn--un--liftIO_HasIO_((((RWST $r) $w) $s) $m)'/5,
  'dn--un--join_Monad_((((RWST $r) $w) $s) $m)'/5,
  'dn--un--empty_Alternative_((((RWST $r) $w) $s) $m)'/4,
  'dn--un--__Impl_Monad_((((RWST $r) $w) $s) $m)'/1,
  'dn--un--__Impl_MonadTrans_(((RWST $r) $w) $s)'/7,
  'dn--un--__Impl_HasIO_((((RWST $r) $w) $s) $m)'/1,
  'dn--un--__Impl_Functor_((((RWST $r) $w) $s) $m)'/8,
  'dn--un--__Impl_Applicative_((((RWST $r) $w) $s) $m)'/1,
  'dn--un--__Impl_Alternative_((((RWST $r) $w) $s) $m)'/1,
  'dn--un-->>=_Monad_((((RWST $r) $w) $s) $m)'/6,
  'dn--un--<|>_Alternative_((((RWST $r) $w) $s) $m)'/3,
  'dn--un--<*>_Applicative_((((RWST $r) $w) $s) $m)'/3,
  'un--withRWST'/4,
  'un--withRWS'/4,
  'un--rwsT'/6,
  'un--rws'/5,
  'un--runRWST'/4,
  'un--runRWS'/4,
  'un--mapRWST'/6,
  'un--mapRWS'/6,
  'un--execRWST'/5,
  'un--execRWS'/4,
  'un--evalRWST'/5,
  'un--evalRWS'/4,
  'un--RWS'/4
]).
'case-->>=-2833'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> (((begin (V11 = (V1(V7))), V11 end(V3))(V9))(V10)) end end.
'case--case block in <*>-2422'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Builtin.MkPair', V11, V12} -> case V12 of {'Builtin.MkPair', V13, V14} -> case V0 of {'Prelude.Interfaces.MkMonad', V15, V16, V17} -> case V15 of {'Prelude.Interfaces.MkApplicative', V18, V19, V20} -> ((V19('erased'))({'Builtin.MkPair', (V6(V11)), {'Builtin.MkPair', V13, V14}})) end end end end.
'case--<*>-2371'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V0 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> ((((V12('erased'))('erased'))((((V2(V3))(V9))(V10))))(fun (V14) -> case V14 of {'Builtin.MkPair', V15, V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> case V0 of {'Prelude.Interfaces.MkMonad', V19, V20, V21} -> case V19 of {'Prelude.Interfaces.MkApplicative', V22, V23, V24} -> ((V23('erased'))({'Builtin.MkPair', (V7(V15)), {'Builtin.MkPair', V17, V18}})) end end end end end)) end end end.
'case--map-2118'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Builtin.MkPair', (V2(V7)), {'Builtin.MkPair', V9, V10}} end end.
'case--mapRWS-1952'(V0, V1, V2) -> begin (V3 = V2), (V1(V3)) end.
'case--execRWS-1862'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> {'Builtin.MkPair', V7, V8} end end.
'case--evalRWS-1787'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> {'Builtin.MkPair', V5, V8} end end.
'case--rws-1702'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', V6, {'Builtin.MkPair', V8, ((begin (V10 = V0), fun (V11) -> fun (V12) -> ((V10(V11))(V12)) end end end(V4))(V9))}} end end.
'case--mapRWST-1485'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Builtin.MkPair', V7, {'Builtin.MkPair', V9, ((begin (V11 = ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0))))), fun (V12) -> fun (V13) -> ((V11(V12))(V13)) end end end(V5))(V10))}} end end.
'case--execRWST-1366'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', V8, V9} end end.
'case--evalRWST-1272'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', V6, V9} end end.
'case--rwsT-1170'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Builtin.MkPair', V7, {'Builtin.MkPair', V9, ((begin (V11 = V0), fun (V12) -> fun (V13) -> ((V11(V12))(V13)) end end end(V5))(V10))}} end end.
'dn--un--pure_Applicative_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4) -> case V0 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> case V5 of {'Prelude.Interfaces.MkApplicative', V8, V9, V10} -> ((V9('erased'))({'Builtin.MkPair', V1, {'Builtin.MkPair', V3, V4}})) end end.
'dn--un--map_Functor_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4, V5) -> ((begin (V12 = V0), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> {'Builtin.MkPair', (V1(V8)), {'Builtin.MkPair', V10, V11}} end end end))((((begin (V6 = V2), V6 end(V3))(V4))(V5)))).
'dn--un--lift_MonadTrans_(((RWST $r) $w) $s)'(V0, V1, V2, V3, V4) -> ((begin (V12 = case V0 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> case V6 of {'Prelude.Interfaces.MkApplicative', V9, V10, V11} -> V9 end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V5) -> {'Builtin.MkPair', V5, {'Builtin.MkPair', V3, V4}} end))(V1)).
'dn--un--liftIO_HasIO_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4) -> ((begin (V16 = case V0 of {'Prelude.IO.MkHasIO', V8, V9} -> case V8 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> V13 end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V7) -> {'Builtin.MkPair', V7, {'Builtin.MkPair', V3, V4}} end))(case V0 of {'Prelude.IO.MkHasIO', V5, V6} -> ((V6('erased'))(V1)) end)).
'dn--un--join_Monad_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4) -> case V0 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))((((begin (V14 = V1), V14 end(V2))(V3))(V4))))(fun (V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> (((begin (V13 = V9), V13 end(V2))(V11))(V12)) end end end)) end.
'dn--un--empty_Alternative_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkAlternative', V4, V5, V6} -> (V5('erased')) end.
'dn--un--__Impl_Monad_((((RWST $r) $w) $s) $m)'(V0) -> {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ((begin (V20 = case V0 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkApplicative', V17, V18, V19} -> V17 end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Builtin.MkPair', (V3(V10)), {'Builtin.MkPair', V12, V13}} end end end))((((begin (V8 = V4), V8 end(V5))(V6))(V7)))) end end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V0 of {'Prelude.Interfaces.MkMonad', V28, V29, V30} -> case V28 of {'Prelude.Interfaces.MkApplicative', V31, V32, V33} -> ((V32('erased'))({'Builtin.MkPair', V24, {'Builtin.MkPair', V26, V27}})) end end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = V36), begin (V39 = V37), fun (V40) -> fun (V41) -> fun (V42) -> case V0 of {'Prelude.Interfaces.MkMonad', V43, V44, V45} -> ((((V44('erased'))('erased'))((((V38(V40))(V41))(V42))))(fun (V46) -> case V46 of {'Builtin.MkPair', V47, V48} -> case V48 of {'Builtin.MkPair', V49, V50} -> case V0 of {'Prelude.Interfaces.MkMonad', V51, V52, V53} -> ((((V52('erased'))('erased'))((((V39(V40))(V49))(V50))))(fun (V54) -> case V54 of {'Builtin.MkPair', V55, V56} -> case V56 of {'Builtin.MkPair', V57, V58} -> case V0 of {'Prelude.Interfaces.MkMonad', V59, V60, V61} -> case V59 of {'Prelude.Interfaces.MkApplicative', V62, V63, V64} -> ((V63('erased'))({'Builtin.MkPair', (V47(V55)), {'Builtin.MkPair', V57, V58}})) end end end end end)) end end end end)) end end end end end end end end end end}, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> case V0 of {'Prelude.Interfaces.MkMonad', V72, V73, V74} -> ((((V73('erased'))('erased'))((((begin (V81 = V67), V81 end(V69))(V70))(V71))))(fun (V75) -> case V75 of {'Builtin.MkPair', V76, V77} -> case V77 of {'Builtin.MkPair', V78, V79} -> (((begin (V80 = (V68(V76))), V80 end(V69))(V78))(V79)) end end end)) end end end end end end end end, fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> case V0 of {'Prelude.Interfaces.MkMonad', V87, V88, V89} -> ((((V88('erased'))('erased'))((((begin (V96 = V83), V96 end(V84))(V85))(V86))))(fun (V90) -> case V90 of {'Builtin.MkPair', V91, V92} -> case V92 of {'Builtin.MkPair', V93, V94} -> (((begin (V95 = V91), V95 end(V84))(V93))(V94)) end end end)) end end end end end end}.
'dn--un--__Impl_MonadTrans_(((RWST $r) $w) $s)'(V0, V1, V2, V3, V4, V5, V6) -> ((begin (V14 = case V2 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> case V8 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> V11 end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V7) -> {'Builtin.MkPair', V7, {'Builtin.MkPair', V5, V6}} end))(V3)).
'dn--un--__Impl_HasIO_((((RWST $r) $w) $s) $m)'(V0) -> {'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ((begin (V22 = case V0 of {'Prelude.IO.MkHasIO', V14, V15} -> case V14 of {'Prelude.Interfaces.MkMonad', V16, V17, V18} -> case V16 of {'Prelude.Interfaces.MkApplicative', V19, V20, V21} -> V19 end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Builtin.MkPair', (V3(V10)), {'Builtin.MkPair', V12, V13}} end end end))((((begin (V8 = V4), V8 end(V5))(V6))(V7)))) end end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> case V0 of {'Prelude.IO.MkHasIO', V30, V31} -> case V30 of {'Prelude.Interfaces.MkMonad', V32, V33, V34} -> case V32 of {'Prelude.Interfaces.MkApplicative', V35, V36, V37} -> ((V36('erased'))({'Builtin.MkPair', V26, {'Builtin.MkPair', V28, V29}})) end end end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = V40), begin (V43 = V41), fun (V44) -> fun (V45) -> fun (V46) -> case V0 of {'Prelude.IO.MkHasIO', V47, V48} -> case V47 of {'Prelude.Interfaces.MkMonad', V49, V50, V51} -> ((((V50('erased'))('erased'))((((V42(V44))(V45))(V46))))(fun (V52) -> case V52 of {'Builtin.MkPair', V53, V54} -> case V54 of {'Builtin.MkPair', V55, V56} -> case V0 of {'Prelude.IO.MkHasIO', V57, V58} -> case V57 of {'Prelude.Interfaces.MkMonad', V59, V60, V61} -> ((((V60('erased'))('erased'))((((V43(V44))(V55))(V56))))(fun (V62) -> case V62 of {'Builtin.MkPair', V63, V64} -> case V64 of {'Builtin.MkPair', V65, V66} -> case V0 of {'Prelude.IO.MkHasIO', V67, V68} -> case V67 of {'Prelude.Interfaces.MkMonad', V69, V70, V71} -> case V69 of {'Prelude.Interfaces.MkApplicative', V72, V73, V74} -> ((V73('erased'))({'Builtin.MkPair', (V53(V63)), {'Builtin.MkPair', V65, V66}})) end end end end end end)) end end end end end)) end end end end end end end end end end end}, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> case V0 of {'Prelude.IO.MkHasIO', V82, V83} -> case V82 of {'Prelude.Interfaces.MkMonad', V84, V85, V86} -> ((((V85('erased'))('erased'))((((begin (V93 = V77), V93 end(V79))(V80))(V81))))(fun (V87) -> case V87 of {'Builtin.MkPair', V88, V89} -> case V89 of {'Builtin.MkPair', V90, V91} -> (((begin (V92 = (V78(V88))), V92 end(V79))(V90))(V91)) end end end)) end end end end end end end end end, fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> case V0 of {'Prelude.IO.MkHasIO', V99, V100} -> case V99 of {'Prelude.Interfaces.MkMonad', V101, V102, V103} -> ((((V102('erased'))('erased'))((((begin (V110 = V95), V110 end(V96))(V97))(V98))))(fun (V104) -> case V104 of {'Builtin.MkPair', V105, V106} -> case V106 of {'Builtin.MkPair', V107, V108} -> (((begin (V109 = V105), V109 end(V96))(V107))(V108)) end end end)) end end end end end end end}, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> ((begin (V127 = case V0 of {'Prelude.IO.MkHasIO', V119, V120} -> case V119 of {'Prelude.Interfaces.MkMonad', V121, V122, V123} -> case V121 of {'Prelude.Interfaces.MkApplicative', V124, V125, V126} -> V124 end end end), fun (V128) -> fun (V129) -> ((((V127('erased'))('erased'))(V128))(V129)) end end end(fun (V118) -> {'Builtin.MkPair', V118, {'Builtin.MkPair', V114, V115}} end))(case V0 of {'Prelude.IO.MkHasIO', V116, V117} -> ((V117('erased'))(V112)) end)) end end end end end}.
'dn--un--__Impl_Functor_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4, V5, V6, V7) -> ((begin (V14 = V0), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Builtin.MkPair', (V3(V10)), {'Builtin.MkPair', V12, V13}} end end end))((((begin (V8 = V4), V8 end(V5))(V6))(V7)))).
'dn--un--__Impl_Applicative_((((RWST $r) $w) $s) $m)'(V0) -> {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ((begin (V20 = case V0 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkApplicative', V17, V18, V19} -> V17 end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Builtin.MkPair', (V3(V10)), {'Builtin.MkPair', V12, V13}} end end end))((((begin (V8 = V4), V8 end(V5))(V6))(V7)))) end end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V0 of {'Prelude.Interfaces.MkMonad', V28, V29, V30} -> case V28 of {'Prelude.Interfaces.MkApplicative', V31, V32, V33} -> ((V32('erased'))({'Builtin.MkPair', V24, {'Builtin.MkPair', V26, V27}})) end end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = V36), begin (V39 = V37), fun (V40) -> fun (V41) -> fun (V42) -> case V0 of {'Prelude.Interfaces.MkMonad', V43, V44, V45} -> ((((V44('erased'))('erased'))((((V38(V40))(V41))(V42))))(fun (V46) -> case V46 of {'Builtin.MkPair', V47, V48} -> case V48 of {'Builtin.MkPair', V49, V50} -> case V0 of {'Prelude.Interfaces.MkMonad', V51, V52, V53} -> ((((V52('erased'))('erased'))((((V39(V40))(V49))(V50))))(fun (V54) -> case V54 of {'Builtin.MkPair', V55, V56} -> case V56 of {'Builtin.MkPair', V57, V58} -> case V0 of {'Prelude.Interfaces.MkMonad', V59, V60, V61} -> case V59 of {'Prelude.Interfaces.MkApplicative', V62, V63, V64} -> ((V63('erased'))({'Builtin.MkPair', (V47(V55)), {'Builtin.MkPair', V57, V58}})) end end end end end)) end end end end)) end end end end end end end end end end}.
'dn--un--__Impl_Alternative_((((RWST $r) $w) $s) $m)'(V0) -> {'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ((begin (V20 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkApplicative', V17, V18, V19} -> V17 end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Builtin.MkPair', (V3(V10)), {'Builtin.MkPair', V12, V13}} end end end))((((begin (V8 = V4), V8 end(V5))(V6))(V7)))) end end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V28, V29, V30} -> case V28 of {'Prelude.Interfaces.MkApplicative', V31, V32, V33} -> ((V32('erased'))({'Builtin.MkPair', V24, {'Builtin.MkPair', V26, V27}})) end end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = V36), begin (V39 = V37), fun (V40) -> fun (V41) -> fun (V42) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V43, V44, V45} -> ((((V44('erased'))('erased'))((((V38(V40))(V41))(V42))))(fun (V46) -> case V46 of {'Builtin.MkPair', V47, V48} -> case V48 of {'Builtin.MkPair', V49, V50} -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V51, V52, V53} -> ((((V52('erased'))('erased'))((((V39(V40))(V49))(V50))))(fun (V54) -> case V54 of {'Builtin.MkPair', V55, V56} -> case V56 of {'Builtin.MkPair', V57, V58} -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V59, V60, V61} -> case V59 of {'Prelude.Interfaces.MkApplicative', V62, V63, V64} -> ((V63('erased'))({'Builtin.MkPair', (V47(V55)), {'Builtin.MkPair', V57, V58}})) end end end end end)) end end end end)) end end end end end end end end end end}, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkAlternative', V69, V70, V71} -> (V70('erased')) end end end end end, fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = V73), fun (V76) -> fun (V77) -> fun (V78) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkAlternative', V79, V80, V81} -> (((V81('erased'))((((V75(V76))(V77))(V78))))(fun () -> (((begin (V82 = (V74())), V82 end(V76))(V77))(V78)) end)) end end end end end end end end}.
'dn--un-->>=_Monad_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))((((begin (V15 = V1), V15 end(V3))(V4))(V5))))(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> (((begin (V14 = (V2(V10))), V14 end(V3))(V12))(V13)) end end end)) end.
'dn--un--<|>_Alternative_((((RWST $r) $w) $s) $m)'(V0, V1, V2) -> begin (V3 = V1), fun (V4) -> fun (V5) -> fun (V6) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkAlternative', V7, V8, V9} -> (((V9('erased'))((((V3(V4))(V5))(V6))))(fun () -> (((begin (V10 = (V2())), V10 end(V4))(V5))(V6)) end)) end end end end end.
'dn--un--<*>_Applicative_((((RWST $r) $w) $s) $m)'(V0, V1, V2) -> begin (V3 = V1), begin (V4 = V2), fun (V5) -> fun (V6) -> fun (V7) -> case V0 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> ((((V9('erased'))('erased'))((((V3(V5))(V6))(V7))))(fun (V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> case V0 of {'Prelude.Interfaces.MkMonad', V16, V17, V18} -> ((((V17('erased'))('erased'))((((V4(V5))(V14))(V15))))(fun (V19) -> case V19 of {'Builtin.MkPair', V20, V21} -> case V21 of {'Builtin.MkPair', V22, V23} -> case V0 of {'Prelude.Interfaces.MkMonad', V24, V25, V26} -> case V24 of {'Prelude.Interfaces.MkApplicative', V27, V28, V29} -> ((V28('erased'))({'Builtin.MkPair', (V12(V20)), {'Builtin.MkPair', V22, V23}})) end end end end end)) end end end end)) end end end end end end.
'un--withRWST'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(begin (V4 = V1), V4 end, ((V0(V2))(V3)))).
'un--withRWS'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(begin (V4 = V1), V4 end, ((V0(V2))(V3)))).
'un--rwsT'(V0, V1, V2, V3, V4, V5) -> ((begin (V14 = V1), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Builtin.MkPair', V7, {'Builtin.MkPair', V9, ((begin (V11 = V0), fun (V12) -> fun (V13) -> ((V11(V12))(V13)) end end end(V5))(V10))}} end end end))(((V2(V3))(V4)))).
'un--rws'(V0, V1, V2, V3, V4) -> case ((V1(V2))(V3)) of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> {'Builtin.MkPair', V5, {'Builtin.MkPair', V7, ((begin (V9 = V0), fun (V10) -> fun (V11) -> ((V9(V10))(V11)) end end end(V4))(V8))}} end end.
'un--runRWST'(V0, V1, V2, V3) -> (((begin (V6 = V3), V6 end(V1))(V2))(case V0 of {'Prelude.Interfaces.MkMonoid', V4, V5} -> V5 end)).
'un--runRWS'(V0, V1, V2, V3) -> begin (V7 = (((begin (V6 = V3), V6 end(V1))(V2))(case V0 of {'Prelude.Interfaces.MkMonoid', V4, V5} -> V5 end))), V7 end.
'un--mapRWST'(V0, V1, V2, V3, V4, V5) -> ((begin (V17 = ('Idris.Idris2.Builtin':'un--fst'(V0))), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Builtin.MkPair', V10, {'Builtin.MkPair', V12, ((begin (V14 = ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0))))), fun (V15) -> fun (V16) -> ((V14(V15))(V16)) end end end(V5))(V13))}} end end end))((V1((((begin (V8 = V2), V8 end(V3))(V4))(case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Prelude.Interfaces.MkMonoid', V6, V7} -> V7 end)))))).
'un--mapRWS'(V0, V1, V2, V3, V4, V5) -> ((begin (V30 = ('Idris.Idris2.Builtin':'un--fst'({'Builtin.MkPair', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V28, V29)) end end end end, V0}))), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V14) -> case V14 of {'Builtin.MkPair', V15, V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> {'Builtin.MkPair', V15, {'Builtin.MkPair', V17, ((begin (V23 = ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'({'Builtin.MkPair', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V21, V22)) end end end end, V0}))))), fun (V24) -> fun (V25) -> ((V23(V24))(V25)) end end end(V5))(V18))}} end end end))(begin (V13 = (((begin (V12 = V2), V12 end(V3))(V4))(case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'({'Builtin.MkPair', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V8, V9)) end end end end, V0})))) of {'Prelude.Interfaces.MkMonoid', V10, V11} -> V11 end))), (V1(V13)) end)).
'un--execRWST'(V0, V1, V2, V3, V4) -> ((begin (V13 = V1), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> {'Builtin.MkPair', V11, V12} end end end))((((begin (V7 = V4), V7 end(V2))(V3))(case V0 of {'Prelude.Interfaces.MkMonoid', V5, V6} -> V6 end)))).
'un--execRWS'(V0, V1, V2, V3) -> case begin (V7 = (((begin (V6 = V3), V6 end(V1))(V2))(case V0 of {'Prelude.Interfaces.MkMonoid', V4, V5} -> V5 end))), V7 end of {'Builtin.MkPair', V8, V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> {'Builtin.MkPair', V10, V11} end end.
'un--evalRWST'(V0, V1, V2, V3, V4) -> ((begin (V13 = V1), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> {'Builtin.MkPair', V9, V12} end end end))((((begin (V7 = V4), V7 end(V2))(V3))(case V0 of {'Prelude.Interfaces.MkMonoid', V5, V6} -> V6 end)))).
'un--evalRWS'(V0, V1, V2, V3) -> case begin (V7 = (((begin (V6 = V3), V6 end(V1))(V2))(case V0 of {'Prelude.Interfaces.MkMonoid', V4, V5} -> V5 end))), V7 end of {'Builtin.MkPair', V8, V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> {'Builtin.MkPair', V8, V11} end end.
'un--RWS'(V0, V1, V2, V3) -> {'Control.Monad.RWS.CPS.RWST', V0, V1, V2, fun (V4) -> {'Control.Monad.Identity.Identity', V4} end, V3}.
