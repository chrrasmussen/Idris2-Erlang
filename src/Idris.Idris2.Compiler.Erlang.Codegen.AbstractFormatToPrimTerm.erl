-module('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormatToPrimTerm').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--genTypeSpecifierList'/2,
  'un--genPattern'/1,
  'un--genMapFieldExact'/2,
  'un--genMapFieldAssoc'/2,
  'un--genLiteral'/1,
  'un--genLine'/1,
  'un--genGuardAlt'/1,
  'un--genGuard'/1,
  'un--genFunClause'/1,
  'un--genExpr'/1,
  'un--genExportFun'/1,
  'un--genDecl'/1,
  'un--genCatchClause'/1,
  'un--genCaseClause'/1,
  'un--genBitUnit'/1,
  'un--genBitSize'/1,
  'un--genBitSegment'/2,
  'un--genBitPattern'/1
]).
'un--genTypeSpecifierList'(V0, V1) -> {'Compiler.Erlang.Utils.PrimTerm.PList', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', ('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormat.Helpers':'un--showBitType'(V1))} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> {'Compiler.Erlang.Utils.PrimTerm.PAtom', ('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormat.Helpers':'un--showBitSignedness'(V2))} end))(('Idris.Idris2.Compiler.Erlang.IR.AbstractFormat':'un--getBitSignedness'(V1)))))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> {'Compiler.Erlang.Utils.PrimTerm.PAtom', ('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormat.Helpers':'un--showBitEndianness'(V10))} end))(('Idris.Idris2.Compiler.Erlang.IR.AbstractFormat':'un--getBitEndianness'(V1)))))), ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('un--genBitUnit'(V18)) end))(('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(('Idris.Idris2.Data.Maybe':'un--toMaybe'(('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormat.Helpers':'un--isAllowedToSpecifyBitUnit'(V0)), fun () -> ('Idris.Idris2.Compiler.Erlang.IR.AbstractFormat':'un--getBitUnit'(V1)) end))))))))))))]}.
'un--genPattern'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.APLiteral', V1} -> ('un--genLiteral'(V1)); {'Compiler.Erlang.IR.AbstractFormat.APBitstring', V2, V3} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"bin"/utf8>>} | [('un--genLine'(V2)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V4) -> ('un--genBitSegment'(fun (V5) -> ('un--genBitPattern'(V5)) end, V4)) end))(V3))} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.APCons', V13, V14, V15} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"cons"/utf8>>} | [('un--genLine'(V13)) | [('un--genPattern'(V14)) | [('un--genPattern'(V15)) | []]]]]}; {'Compiler.Erlang.IR.AbstractFormat.APMap', V16, V17} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map"/utf8>>} | [('un--genLine'(V16)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V18) -> ('un--genMapFieldExact'(fun (V19) -> ('un--genPattern'(V19)) end, V18)) end))(V17))} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.APNil', V27} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"nil"/utf8>>} | [('un--genLine'(V27)) | []]]}; {'Compiler.Erlang.IR.AbstractFormat.APTuple', V28, V29} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"tuple"/utf8>>} | [('un--genLine'(V28)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(fun (V30) -> ('un--genPattern'(V30)) end))(V29))} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.APUniversal', V38} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V38)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"_"/utf8>>} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.APVar', V39, V40} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V39)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V40} | []]]]} end.
'un--genMapFieldExact'(V0, V1) -> case V1 of {'Compiler.Erlang.IR.AbstractFormat.MkExact', V2, V3, V4} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map_field_exact"/utf8>>} | [('un--genLine'(V2)) | [(V0(V3)) | [(V0(V4)) | []]]]]} end.
'un--genMapFieldAssoc'(V0, V1) -> case V1 of {'Compiler.Erlang.IR.AbstractFormat.MkAssoc', V2, V3, V4} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map_field_assoc"/utf8>>} | [('un--genLine'(V2)) | [(V0(V3)) | [(V0(V4)) | []]]]]} end.
'un--genLiteral'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.ALAtom', V1, V2} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"atom"/utf8>>} | [('un--genLine'(V1)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V2} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.ALChar', V3, V4} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"char"/utf8>>} | [('un--genLine'(V3)) | [{'Compiler.Erlang.Utils.PrimTerm.PChar', V4} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.ALFloat', V5, V6} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"float"/utf8>>} | [('un--genLine'(V5)) | [{'Compiler.Erlang.Utils.PrimTerm.PFloat', V6} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.ALInteger', V7, V8} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"integer"/utf8>>} | [('un--genLine'(V7)) | [{'Compiler.Erlang.Utils.PrimTerm.PInteger', V8} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.ALCharlist', V9, V10} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"string"/utf8>>} | [('un--genLine'(V9)) | [{'Compiler.Erlang.Utils.PrimTerm.PCharlist', V10} | []]]]} end.
'un--genLine'(V0) -> {'Compiler.Erlang.Utils.PrimTerm.PInteger', V0}.
'un--genGuardAlt'(V0) -> begin (V1 = V0), {'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('un--genGuard'(V2)) end))(('Idris.Idris2.Data.List1':'un--forget'(V1))))} end.
'un--genGuard'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.AGLiteral', V1} -> ('un--genLiteral'(V1)); {'Compiler.Erlang.IR.AbstractFormat.AGCons', V2, V3, V4} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"cons"/utf8>>} | [('un--genLine'(V2)) | [('un--genGuard'(V3)) | [('un--genGuard'(V4)) | []]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AGFunCall', V5, V6, V7} -> begin (V8 = {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"remote"/utf8>>} | [('un--genLine'(V5)) | [('un--genLiteral'({'Compiler.Erlang.IR.AbstractFormat.ALAtom', V5, <<"erlang"/utf8>>})) | [('un--genLiteral'({'Compiler.Erlang.IR.AbstractFormat.ALAtom', V5, V6})) | []]]]]}), {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"call"/utf8>>} | [('un--genLine'(V5)) | [V8 | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> ('un--genGuard'(V9)) end))(V7))} | []]]]]} end; {'Compiler.Erlang.IR.AbstractFormat.AGNil', V17} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"nil"/utf8>>} | [('un--genLine'(V17)) | []]]}; {'Compiler.Erlang.IR.AbstractFormat.AGOp', V18, V19, V20, V21} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"op"/utf8>>} | [('un--genLine'(V18)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V19} | [('un--genGuard'(V20)) | [('un--genGuard'(V21)) | []]]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AGTuple', V22, V23} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"tuple"/utf8>>} | [('un--genLine'(V22)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V24) -> ('un--genGuard'(V24)) end))(V23))} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.AGVar', V32, V33} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V32)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V33} | []]]]} end.
'un--genFunClause'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.MkFunClause', V1, V2, V3, V4} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clause"/utf8>>} | [('un--genLine'(V1)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V5) -> ('un--genPattern'(V5)) end, V2))))} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> ('un--genGuardAlt'(V6)) end))(V3))} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> ('un--genExpr'(V14)) end))(('Idris.Idris2.Data.List1':'un--forget'(V4))))} | []]]]]]} end.
'un--genExpr'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.AELiteral', V1} -> ('un--genLiteral'(V1)); {'Compiler.Erlang.IR.AbstractFormat.AEBitstring', V2, V3} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"bin"/utf8>>} | [('un--genLine'(V2)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V4) -> ('un--genBitSegment'(fun (V5) -> ('un--genExpr'(V5)) end, V4)) end))(V3))} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.AEBlock', V13, V14} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"block"/utf8>>} | [('un--genLine'(V13)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> ('un--genExpr'(V15)) end))(('Idris.Idris2.Data.List1':'un--forget'(V14))))} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.AECase', V23, V24, V25} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"case"/utf8>>} | [('un--genLine'(V23)) | [('un--genExpr'(V24)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V26) -> ('un--genCaseClause'(V26)) end))(('Idris.Idris2.Data.List1':'un--forget'(V25))))} | []]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AECons', V34, V35, V36} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"cons"/utf8>>} | [('un--genLine'(V34)) | [('un--genExpr'(V35)) | [('un--genExpr'(V36)) | []]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AEFun', V37, V38, V39} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"fun"/utf8>>} | [('un--genLine'(V37)) | [{'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clauses"/utf8>>} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V40) -> ('un--genFunClause'(V40)) end))(('Idris.Idris2.Data.List1':'un--forget'(V39))))} | []]]} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.AEFunCall', V48, V49, V50} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"call"/utf8>>} | [('un--genLine'(V48)) | [('un--genExpr'(V49)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V56 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V54, V55)) end end end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end(fun (V51) -> ('un--genExpr'(V51)) end))(V50))} | []]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AERemoteRef', V59, V60, V61} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"remote"/utf8>>} | [('un--genLine'(V59)) | [('un--genExpr'(V60)) | [('un--genExpr'(V61)) | []]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AEMapNew', V62, V63} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map"/utf8>>} | [('un--genLine'(V62)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V64) -> ('un--genMapFieldAssoc'(fun (V65) -> ('un--genExpr'(V65)) end, V64)) end))(V63))} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.AEMatch', V73, V74, V75} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"match"/utf8>>} | [('un--genLine'(V73)) | [('un--genPattern'(V74)) | [('un--genExpr'(V75)) | []]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AENil', V76} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"nil"/utf8>>} | [('un--genLine'(V76)) | []]]}; {'Compiler.Erlang.IR.AbstractFormat.AEOp', V77, V78, V79, V80} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"op"/utf8>>} | [('un--genLine'(V77)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V78} | [('un--genExpr'(V79)) | [('un--genExpr'(V80)) | []]]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AEReceive', V81, V82, V83} -> case V83 of {'Compiler.Erlang.IR.AbstractFormat.NoTimeout'} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"receive"/utf8>>} | [('un--genLine'(V81)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V89 = fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V87, V88)) end end end end), fun (V90) -> fun (V91) -> ((((V89('erased'))('erased'))(V90))(V91)) end end end(fun (V84) -> ('un--genCaseClause'(V84)) end))(V82))} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.TimeoutAfter', V92, V93} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"receive"/utf8>>} | [('un--genLine'(V81)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V99 = fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V97, V98)) end end end end), fun (V100) -> fun (V101) -> ((((V99('erased'))('erased'))(V100))(V101)) end end end(fun (V94) -> ('un--genCaseClause'(V94)) end))(V82))} | [('un--genExpr'(V92)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V107 = fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V105, V106)) end end end end), fun (V108) -> fun (V109) -> ((((V107('erased'))('erased'))(V108))(V109)) end end end(fun (V102) -> ('un--genExpr'(V102)) end))(('Idris.Idris2.Data.List1':'un--forget'(V93))))} | []]]]]]} end; {'Compiler.Erlang.IR.AbstractFormat.AETuple', V110, V111} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"tuple"/utf8>>} | [('un--genLine'(V110)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V117 = fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V115, V116)) end end end end), fun (V118) -> fun (V119) -> ((((V117('erased'))('erased'))(V118))(V119)) end end end(fun (V112) -> ('un--genExpr'(V112)) end))(V111))} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.AETry', V120, V121, V122, V123, V124} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"try"/utf8>>} | [('un--genLine'(V120)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V130 = fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V128, V129)) end end end end), fun (V131) -> fun (V132) -> ((((V130('erased'))('erased'))(V131))(V132)) end end end(fun (V125) -> ('un--genExpr'(V125)) end))(('Idris.Idris2.Data.List1':'un--forget'(V121))))} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V138 = fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V136, V137)) end end end end), fun (V139) -> fun (V140) -> ((((V138('erased'))('erased'))(V139))(V140)) end end end(fun (V133) -> ('un--genCaseClause'(V133)) end))(V122))} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V146 = fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V144, V145)) end end end end), fun (V147) -> fun (V148) -> ((((V146('erased'))('erased'))(V147))(V148)) end end end(fun (V141) -> ('un--genCatchClause'(V141)) end))(V123))} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V154 = fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V152, V153)) end end end end), fun (V155) -> fun (V156) -> ((((V154('erased'))('erased'))(V155))(V156)) end end end(fun (V149) -> ('un--genExpr'(V149)) end))(V124))} | []]]]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AEVar', V157, V158} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V157)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V158} | []]]]} end.
'un--genExportFun'(V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V1} | [{'Compiler.Erlang.Utils.PrimTerm.PInteger', V2} | []]]} end.
'un--genDecl'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.ADExport', V1, V2} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"attribute"/utf8>>} | [('un--genLine'(V1)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"export"/utf8>>} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('un--genExportFun'(V3)) end))(V2))} | []]]]]}; {'Compiler.Erlang.IR.AbstractFormat.ADModule', V11, V12} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"attribute"/utf8>>} | [('un--genLine'(V11)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"module"/utf8>>} | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V12} | []]]]]}; {'Compiler.Erlang.IR.AbstractFormat.ADFunDef', V13, V14, V15, V16} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"function"/utf8>>} | [('un--genLine'(V13)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V14} | [{'Compiler.Erlang.Utils.PrimTerm.PInteger', V15} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V17) -> ('un--genFunClause'(V17)) end))(('Idris.Idris2.Data.List1':'un--forget'(V16))))} | []]]]]]}; {'Compiler.Erlang.IR.AbstractFormat.ADAttribute', V25, V26, V27} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"attribute"/utf8>>} | [('un--genLine'(V25)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V26} | [V27 | []]]]]} end.
'un--genCatchClause'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.MkCatchClause', V1, V2, V3, V4, V5, V6} -> begin (V7 = ('un--genPattern'({'Compiler.Erlang.IR.AbstractFormat.APTuple', V1, [V2 | [V3 | [V4 | []]]]}))), {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clause"/utf8>>} | [('un--genLine'(V1)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', [V7 | []]} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('un--genGuardAlt'(V8)) end))(V5))} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V16) -> ('un--genExpr'(V16)) end))(('Idris.Idris2.Data.List1':'un--forget'(V6))))} | []]]]]]} end end.
'un--genCaseClause'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.MkCaseClause', V1, V2, V3, V4} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clause"/utf8>>} | [('un--genLine'(V1)) | [{'Compiler.Erlang.Utils.PrimTerm.PList', [('un--genPattern'(V2)) | []]} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('un--genGuardAlt'(V5)) end))(V3))} | [{'Compiler.Erlang.Utils.PrimTerm.PList', ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('un--genExpr'(V13)) end))(('Idris.Idris2.Data.List1':'un--forget'(V4))))} | []]]]]]} end.
'un--genBitUnit'(V0) -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"unit"/utf8>>} | [{'Compiler.Erlang.Utils.PrimTerm.PInteger', ('Idris.Idris2.Compiler.Erlang.IR.AbstractFormat':'un--bitUnitToNat'(V0))} | []]]}.
'un--genBitSize'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.ABSDefault'} -> {'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"default"/utf8>>}; {'Compiler.Erlang.IR.AbstractFormat.ABSInteger', V1, V2} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"integer"/utf8>>} | [('un--genLine'(V1)) | [{'Compiler.Erlang.Utils.PrimTerm.PInteger', V2} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.ABSVar', V3, V4} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V3)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V4} | []]]]} end.
'un--genBitSegment'(V0, V1) -> case V1 of {'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, V3, V4, V5} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"bin_element"/utf8>>} | [('un--genLine'(V2)) | [(V0(V3)) | [('un--genBitSize'(V4)) | [('un--genTypeSpecifierList'(V4, V5)) | []]]]]]} end.
'un--genBitPattern'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.ABPInteger', V1, V2} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"integer"/utf8>>} | [('un--genLine'(V1)) | [{'Compiler.Erlang.Utils.PrimTerm.PInteger', V2} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.ABPFloat', V3, V4} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"float"/utf8>>} | [('un--genLine'(V3)) | [{'Compiler.Erlang.Utils.PrimTerm.PFloat', V4} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.ABPCharlist', V5, V6} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"string"/utf8>>} | [('un--genLine'(V5)) | [{'Compiler.Erlang.Utils.PrimTerm.PCharlist', V6} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.ABPUniversal', V7} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V7)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"_"/utf8>>} | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.ABPVar', V8, V9} -> {'Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V8)) | [{'Compiler.Erlang.Utils.PrimTerm.PAtom', V9} | []]]]} end.
