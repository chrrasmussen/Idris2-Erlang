-module('Idris.Idris2.Idris.IDEMode.MakeClause').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--makeWith-7802'/3,
  'nested--4922-7868--in--un--replaceStr'/7,
  'nested--4729-7679--in--un--readLHS'/4,
  'nested--4729-7680--in--un--pref'/4,
  'nested--4922-7869--in--un--newLines'/4,
  'nested--4729-7682--in--un--mkWithPat'/5,
  'nested--4729-7681--in--un--mkWithArg'/5,
  'nested--4922-7867--in--un--addCase'/5,
  'nested--4922-7866--in--un--addBrackets'/5,
  'un--showRHSName'/1,
  'un--makeWith'/2,
  'un--makeCase'/3
]).
'case--makeWith-7802'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> begin (V8 = case ('Idris.Idris2.Data.String':'un--span'(fun (V5) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V5)) end, V4)) of {'Builtin.MkPair', V6, V7} -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.String':'un--length'(V6)), V7} end), begin (V9 = ('Idris.Idris2.Builtin':'un--fst'(V8))), begin (V10 = ('Idris.Idris2.Builtin':'un--snd'(V8))), begin (V11 = ('Idris.Idris2.Prelude.Types':'un--fastPack'(('nested--4729-7679--in--un--readLHS'(V0, V1, 0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V10))))))), <<('nested--4729-7681--in--un--mkWithArg'(V0, V1, V3, V9, V11))/binary, <<<<"\x{a}"/utf8>>/binary, ('nested--4729-7682--in--un--mkWithPat'(V0, V1, V3, V9, V11))/binary>>/binary>> end end end end end.
'nested--4922-7868--in--un--replaceStr'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of <<""/utf8>> -> <<""/utf8>>; _ -> case ('Idris.Idris2.Data.String':'un--isPrefixOf'(V4, V6)) of 1 -> <<('nested--4922-7867--in--un--addCase'(V0, V1, V2, V3, V5))/binary, ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--drop'(('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V6))))))/binary>>; 0 -> <<('unicode':'characters_to_binary'([('erlang':'hd'(('string':'next_grapheme'(V6)))) | []]))/binary, ('nested--4922-7868--in--un--replaceStr'(V0, V1, V2, (V3 + 1), V4, V5, case ('string':'next_grapheme'(V6)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V7, V8) -> V8 end(E0, E1)); _ -> <<""/utf8>> end))/binary>> end end.
'nested--4729-7679--in--un--readLHS'(V0, V1, V2, V3) -> case V2 of 0 -> case V3 of [E4 | E5] -> (fun (V4, V5) -> case V4 of $= -> []; _ -> case V3 of [E6 | E7] -> (fun (V6, V7) -> case V6 of $( -> [$( | ('nested--4729-7679--in--un--readLHS'(V0, V1, (V2 + 1), V7))]; ${ -> [${ | ('nested--4729-7679--in--un--readLHS'(V0, V1, (V2 + 1), V7))]; $) -> [$) | ('nested--4729-7679--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V7))]; $} -> [$} | ('nested--4729-7679--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V7))]; _ -> [V6 | ('nested--4729-7679--in--un--readLHS'(V0, V1, V2, V7))] end end(E6, E7)); [] -> [] end end end(E4, E5)); _ -> case V3 of [E2 | E3] -> (fun (V8, V9) -> case V8 of $( -> [$( | ('nested--4729-7679--in--un--readLHS'(V0, V1, (V2 + 1), V9))]; ${ -> [${ | ('nested--4729-7679--in--un--readLHS'(V0, V1, (V2 + 1), V9))]; $) -> [$) | ('nested--4729-7679--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V9))]; $} -> [$} | ('nested--4729-7679--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V9))]; _ -> [V8 | ('nested--4729-7679--in--un--readLHS'(V0, V1, V2, V9))] end end(E2, E3)); [] -> [] end end; _ -> case V3 of [E0 | E1] -> (fun (V10, V11) -> case V10 of $( -> [$( | ('nested--4729-7679--in--un--readLHS'(V0, V1, (V2 + 1), V11))]; ${ -> [${ | ('nested--4729-7679--in--un--readLHS'(V0, V1, (V2 + 1), V11))]; $) -> [$) | ('nested--4729-7679--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V11))]; $} -> [$} | ('nested--4729-7679--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V11))]; _ -> [V10 | ('nested--4729-7679--in--un--readLHS'(V0, V1, V2, V11))] end end(E0, E1)); [] -> [] end end.
'nested--4729-7680--in--un--pref'(V0, V1, V2, V3) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V2, ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicateTR'([], V3, $ )))))).
'nested--4922-7869--in--un--newLines'(V0, V1, V2, V3) -> ('nested--4922-7868--in--un--replaceStr'(V0, V1, V2, 0, <<<<"?"/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>, V3, V0)).
'nested--4729-7682--in--un--mkWithPat'(V0, V1, V2, V3, V4) -> <<('nested--4729-7680--in--un--pref'(V0, V1, V2, (V3 + 2)))/binary, <<V4/binary, <<<<"| with_pat = ?"/utf8>>/binary, <<('un--showRHSName'(V1))/binary, <<"_rhs"/utf8>>/binary>>/binary>>/binary>>/binary>>.
'nested--4729-7681--in--un--mkWithArg'(V0, V1, V2, V3, V4) -> <<('nested--4729-7680--in--un--pref'(V0, V1, V2, V3))/binary, <<V4/binary, <<"with (_)"/utf8>>/binary>>/binary>>.
'nested--4922-7867--in--un--addCase'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> ('nested--4922-7866--in--un--addBrackets'(V0, V1, V2, V2, <<V5/binary, <<<<"\x{a}"/utf8>>/binary, <<('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicateTR'([], (V3 + case V2 of 1 -> 6; 0 -> 5 end), $ ))))/binary, V6/binary>>/binary>>/binary>>)) end.
'nested--4922-7866--in--un--addBrackets'(V0, V1, V2, V3, V4) -> case V3 of 0 -> V4; 1 -> <<<<"("/utf8>>/binary, <<V4/binary, <<")"/utf8>>/binary>>/binary>> end.
'un--showRHSName'(V0) -> begin (V1 = ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V0))))), case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V2, V3)) end end, 0}, fun (V4) -> ('Idris.Idris2.Core.Name':'un--isOpChar'(V4)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))) of 1 -> <<"op"/utf8>>; 0 -> V1 end end.
'un--makeWith'(V0, V1) -> ('case--makeWith-7802'(V1, V0, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V1)))).
'un--makeCase'(V0, V1, V2) -> begin (V3 = {'Builtin.MkPair', <<"case _ of"/utf8>>, <<<<"case_val => ?"/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}), ('nested--4922-7869--in--un--newLines'(V2, V1, V0, V3)) end.
