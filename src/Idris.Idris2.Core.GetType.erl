-module('Idris.Idris2.Core.GetType').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--getType'/4,
  'un--discharge'/5,
  'un--chkMeta'/6,
  'un--chkConstant'/2,
  'un--chkBinder'/4,
  'un--chk'/4
]).
'un--getType'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, V3)).
'un--discharge'(V0, V1, V2, V3, V4) -> case V2 of {'Core.TT.Lam', V5, V6, V7, V8} -> {'Core.TT.Bind', V0, V1, {'Core.TT.Pi', V5, V6, V7, V8}, V4}; {'Core.TT.Let', V9, V10, V11, V12} -> {'Core.TT.Bind', V0, V1, {'Core.TT.Let', V9, V10, V11, V12}, V4}; {'Core.TT.Pi', V13, V14, V15, V16} -> V3; {'Core.TT.PVar', V17, V18, V19, V20} -> {'Core.TT.Bind', V0, V1, {'Core.TT.PVTy', V17, V18, V20}, V4}; {'Core.TT.PLet', V21, V22, V23, V24} -> {'Core.TT.Bind', V0, V1, {'Core.TT.PLet', V21, V22, V23, V24}, V4}; {'Core.TT.PVTy', V25, V26, V27} -> V3 end.
'un--chkMeta'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> begin (V11 = begin (V6 = V1), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V15, V3, V4))} end), V17 end(V12)) end end end end; _ -> case V4 of {'Core.Value.NBind', V18, V19, V20, V21} -> case V20 of {'Core.TT.Pi', V22, V23, V24, V25} -> case V5 of [E0 | E1] -> (fun (V26, V27) -> begin (V33 = begin (V28 = V1), fun (V29) -> begin (V32 = (begin (V30 = V28), fun (V31) -> ('erlang':'get'(V30)) end end(V29))), {'Prelude.Types.Right', V32} end end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V50 = begin (V38 = ('un--chk'(V0, V1, V3, V26))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V49 = begin (V43 = ((V21(V37))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V3, V26))))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V48 = ('un--chkMeta'(V0, V1, V2, V3, V47, V27))), V48 end(V44)) end end end end), V49 end(V39)) end end end end), V50 end(V34)) end end end end end(E0, E1)); _ -> begin (V56 = begin (V51 = V1), fun (V52) -> begin (V55 = (begin (V53 = V51), fun (V54) -> ('erlang':'get'(V53)) end end(V52))), {'Prelude.Types.Right', V55} end end end), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V68 = begin (V61 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V60, V3, V4))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V67 = fun (V66) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotFunctionType', V0, V2, V3, V65}, V66)) end), V67 end(V62)) end end end end), V68 end(V57)) end end end end end; _ -> begin (V74 = begin (V69 = V1), fun (V70) -> begin (V73 = (begin (V71 = V69), fun (V72) -> ('erlang':'get'(V71)) end end(V70))), {'Prelude.Types.Right', V73} end end end), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V86 = begin (V79 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V78, V3, V4))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V85 = fun (V84) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotFunctionType', V0, V2, V3, V83}, V84)) end), V85 end(V80)) end end end end), V86 end(V75)) end end end end end; _ -> begin (V92 = begin (V87 = V1), fun (V88) -> begin (V91 = (begin (V89 = V87), fun (V90) -> ('erlang':'get'(V89)) end end(V88))), {'Prelude.Types.Right', V91} end end end), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V104 = begin (V97 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V96, V3, V4))), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V103 = fun (V102) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotFunctionType', V0, V2, V3, V101}, V102)) end), V103 end(V98)) end end end end), V104 end(V93)) end end end end end end.
'un--chkConstant'(V0, V1) -> case V1 of {'Core.TT.I', V2} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 0}}; {'Core.TT.I8', V3} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 1}}; {'Core.TT.I16', V4} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 2}}; {'Core.TT.I32', V5} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 3}}; {'Core.TT.I64', V6} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 4}}; {'Core.TT.BI', V7} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 5}}; {'Core.TT.B8', V8} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 6}}; {'Core.TT.B16', V9} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 7}}; {'Core.TT.B32', V10} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 8}}; {'Core.TT.B64', V11} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 9}}; {'Core.TT.Str', V12} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 10}}; {'Core.TT.Ch', V13} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 11}}; {'Core.TT.Db', V14} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 12}}; {'Core.TT.WorldVal'} -> {'Core.TT.PrimVal', V0, {'Core.TT.PrT', 13}}; _ -> {'Core.TT.TType', V0, {'Core.Name.MN', <<"top"/utf8>>, 0}} end.
'un--chkBinder'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, ('Idris.Idris2.Core.TT':'un--binderType'(V3)))).
'un--chk'(V0, V1, V2, V3) -> case V3 of {'Core.TT.Local', V4, V5, V6} -> fun (V7) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--binderType'(('Idris.Idris2.Core.Env':'un--getBinder'({'Core.TT.dn--un--__mkWeaken', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V10)) end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V13, V14)) end end end end}, V0, V6, V2))))))} end; {'Core.TT.Ref', V15, V16, V17} -> begin (V23 = begin (V18 = V1), fun (V19) -> begin (V22 = (begin (V20 = V18), fun (V21) -> ('erlang':'get'(V20)) end end(V19))), {'Prelude.Types.Right', V22} end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V68 = begin (V60 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V17, case V27 of {'Core.Context.MkDefs', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> V28 end))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V67 = case V64 of {'Prelude.Types.Just', V65} -> fun (V66) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--embed'(V65))))} end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V15, V17)) end), V67 end(V61)) end end end end), V68 end(V24)) end end end end; {'Core.TT.Meta', V69, V70, V71, V72} -> begin (V78 = begin (V73 = V1), fun (V74) -> begin (V77 = (begin (V75 = V73), fun (V76) -> ('erlang':'get'(V75)) end end(V74))), {'Prelude.Types.Right', V77} end end end), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V128 = begin (V115 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Core.Name.Resolved', V71}, case V82 of {'Core.Context.MkDefs', V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114} -> V83 end))), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V127 = case V119 of {'Prelude.Types.Just', V120} -> begin (V121 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V82, V2, ('Idris.Idris2.Core.TT':'un--embed'(V120))))), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V126 = ('un--chkMeta'(V0, V1, V69, V2, V125, V72))), V126 end(V122)) end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V69, V70)) end), V127 end(V116)) end end end end), V128 end(V79)) end end end end; {'Core.TT.Bind', V129, V130, V131, V132} -> begin (V133 = ('un--chkBinder'(V0, V1, V2, V131))), fun (V134) -> begin (V135 = (V133(V134))), case V135 of {'Prelude.Types.Left', V136} -> {'Prelude.Types.Left', V136}; {'Prelude.Types.Right', V137} -> (begin (V157 = begin (V138 = ('un--chk'([V130 | V0], V1, {'Core.Env.::', V131, V2}, V132))), fun (V139) -> begin (V140 = (V138(V139))), case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> (begin (V156 = begin (V143 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V137))), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V155 = begin (V148 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V142))), fun (V149) -> begin (V150 = (V148(V149))), case V150 of {'Prelude.Types.Left', V151} -> {'Prelude.Types.Left', V151}; {'Prelude.Types.Right', V152} -> (begin (V154 = fun (V153) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, ('un--discharge'(V129, V130, V131, V147, V152))))} end), V154 end(V149)) end end end end), V155 end(V144)) end end end end), V156 end(V139)) end end end end), V157 end(V134)) end end end end; {'Core.TT.App', V158, V159, V160} -> begin (V161 = ('un--chk'(V0, V1, V2, V159))), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V218 = begin (V166 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V165))), fun (V167) -> begin (V168 = (V166(V167))), case V168 of {'Prelude.Types.Left', V169} -> {'Prelude.Types.Left', V169}; {'Prelude.Types.Right', V170} -> (begin (V217 = case V170 of {'Core.Value.NBind', V171, V172, V173, V174} -> case V173 of {'Core.TT.Pi', V175, V176, V177, V178} -> begin (V184 = begin (V179 = V1), fun (V180) -> begin (V183 = (begin (V181 = V179), fun (V182) -> ('erlang':'get'(V181)) end end(V180))), {'Prelude.Types.Right', V183} end end end), fun (V185) -> begin (V186 = (V184(V185))), case V186 of {'Prelude.Types.Left', V187} -> {'Prelude.Types.Left', V187}; {'Prelude.Types.Right', V188} -> (begin (V202 = begin (V189 = ('un--chk'(V0, V1, V2, V160))), fun (V190) -> begin (V191 = (V189(V190))), case V191 of {'Prelude.Types.Left', V192} -> {'Prelude.Types.Left', V192}; {'Prelude.Types.Right', V193} -> (begin (V201 = begin (V194 = ((V174(V188))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V2, V160))))), fun (V195) -> begin (V196 = (V194(V195))), case V196 of {'Prelude.Types.Left', V197} -> {'Prelude.Types.Left', V197}; {'Prelude.Types.Right', V198} -> (begin (V200 = fun (V199) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V188, V2, V198))} end), V200 end(V195)) end end end end), V201 end(V190)) end end end end), V202 end(V185)) end end end end; _ -> begin (V203 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V165))), fun (V204) -> begin (V205 = (V203(V204))), case V205 of {'Prelude.Types.Left', V206} -> {'Prelude.Types.Left', V206}; {'Prelude.Types.Right', V207} -> (begin (V209 = fun (V208) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotFunctionType', V0, V158, V2, V207}, V208)) end), V209 end(V204)) end end end end end; _ -> begin (V210 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V165))), fun (V211) -> begin (V212 = (V210(V211))), case V212 of {'Prelude.Types.Left', V213} -> {'Prelude.Types.Left', V213}; {'Prelude.Types.Right', V214} -> (begin (V216 = fun (V215) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotFunctionType', V0, V158, V2, V214}, V215)) end), V216 end(V211)) end end end end end), V217 end(V167)) end end end end), V218 end(V162)) end end end end; {'Core.TT.As', V219, V220, V221, V222} -> ('un--chk'(V0, V1, V2, V222)); {'Core.TT.TDelayed', V223, V224, V225} -> fun (V226) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V223, {'Core.Name.MN', <<"top"/utf8>>, 0}))} end; {'Core.TT.TDelay', V227, V228, V229, V230} -> begin (V231 = ('un--chk'(V0, V1, V2, V230))), fun (V232) -> begin (V233 = (V231(V232))), case V233 of {'Prelude.Types.Left', V234} -> {'Prelude.Types.Left', V234}; {'Prelude.Types.Right', V235} -> (begin (V254 = begin (V236 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V235))), fun (V237) -> begin (V238 = (V236(V237))), case V238 of {'Prelude.Types.Left', V239} -> {'Prelude.Types.Left', V239}; {'Prelude.Types.Right', V240} -> (begin (V253 = begin (V246 = begin (V241 = V1), fun (V242) -> begin (V245 = (begin (V243 = V241), fun (V244) -> ('erlang':'get'(V243)) end end(V242))), {'Prelude.Types.Right', V245} end end end), fun (V247) -> begin (V248 = (V246(V247))), case V248 of {'Prelude.Types.Left', V249} -> {'Prelude.Types.Left', V249}; {'Prelude.Types.Right', V250} -> (begin (V252 = fun (V251) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V250, V2, {'Core.Value.NDelayed', V227, V228, V240}))} end), V252 end(V247)) end end end end), V253 end(V237)) end end end end), V254 end(V232)) end end end end; {'Core.TT.TForce', V255, V256, V257} -> begin (V258 = ('un--chk'(V0, V1, V2, V257))), fun (V259) -> begin (V260 = (V258(V259))), case V260 of {'Prelude.Types.Left', V261} -> {'Prelude.Types.Left', V261}; {'Prelude.Types.Right', V262} -> (begin (V285 = begin (V263 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V262))), fun (V264) -> begin (V265 = (V263(V264))), case V265 of {'Prelude.Types.Left', V266} -> {'Prelude.Types.Left', V266}; {'Prelude.Types.Right', V267} -> (begin (V284 = case V267 of {'Core.Value.NDelayed', V268, V269, V270} -> begin (V276 = begin (V271 = V1), fun (V272) -> begin (V275 = (begin (V273 = V271), fun (V274) -> ('erlang':'get'(V273)) end end(V272))), {'Prelude.Types.Right', V275} end end end), fun (V277) -> begin (V278 = (V276(V277))), case V278 of {'Prelude.Types.Left', V279} -> {'Prelude.Types.Left', V279}; {'Prelude.Types.Right', V280} -> (begin (V282 = fun (V281) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V280, V2, V270))} end), V282 end(V277)) end end end end; _ -> fun (V283) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V255, <<"Not a delayed type"/utf8>>}, V283)) end end), V284 end(V264)) end end end end), V285 end(V259)) end end end end; {'Core.TT.PrimVal', V286, V287} -> fun (V288) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, ('un--chkConstant'(V286, V287))))} end; {'Core.TT.TType', V289, V290} -> fun (V291) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V289, {'Core.Name.MN', <<"top"/utf8>>, 0}))} end; {'Core.TT.Erased', V292, V293} -> fun (V294) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V292))} end end.
