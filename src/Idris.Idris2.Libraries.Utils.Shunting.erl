-module('Idris.Idris2.Libraries.Utils.Shunting').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7055-7057--in--un--mkOp'/4,
  'dn--un--show_Show_OpPrec'/1,
  'dn--un--show_Show_((Tree $op) $a)'/2,
  'dn--un--show_Show_((Tok $op) $a)'/2,
  'dn--un--showPrec_Show_((Tree $op) $a)'/3,
  'dn--un--showPrec_Show_((Tok $op) $a)'/3,
  'dn--un--__Impl_Show_((Tree $op) $a)'/1,
  'dn--un--__Impl_Show_((Tok $op) $a)'/1,
  'un--shunt'/4,
  'un--processStack'/5,
  'un--parseOps'/2,
  'un--output'/2,
  'un--isLAssoc'/1,
  'un--higher'/6,
  'un--getPrec'/1,
  'un--emit'/2
]).
'nested--7055-7057--in--un--mkOp'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Libraries.Utils.Shunting.Op', V4, V6, V8, V9} end end end.
'dn--un--show_Show_OpPrec'(V0) -> case V0 of {'Libraries.Utils.Shunting.AssocL', V1} -> <<<<"infixl "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V1))/binary>>; {'Libraries.Utils.Shunting.AssocR', V2} -> <<<<"infixr "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary>>; {'Libraries.Utils.Shunting.NonAssoc', V3} -> <<<<"infix "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary>>; {'Libraries.Utils.Shunting.Prefix', V4} -> <<<<"prefix "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4))/binary>> end.
'dn--un--show_Show_((Tree $op) $a)'(V0, V1) -> case V1 of {'Libraries.Utils.Shunting.Infix', V2, V3, V4, V5, V6} -> <<<<"("/utf8>>/binary, <<case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Show.MkShow', V7, V8} -> (V7(V4)) end/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_((Tree $op) $a)'(V0, V5))/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_((Tree $op) $a)'(V0, V6))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Libraries.Utils.Shunting.Pre', V9, V10, V11, V12} -> <<<<"("/utf8>>/binary, <<case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Show.MkShow', V13, V14} -> (V13(V11)) end/binary, <<<<" "/utf8>>/binary, <<('dn--un--show_Show_((Tree $op) $a)'(V0, V12))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Libraries.Utils.Shunting.Leaf', V15} -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Show.MkShow', V16, V17} -> (V16(V15)) end end.
'dn--un--show_Show_((Tok $op) $a)'(V0, V1) -> case V1 of {'Libraries.Utils.Shunting.Op', V2, V3, V4, V5} -> <<case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Show.MkShow', V6, V7} -> (V6(V4)) end/binary, <<<<" "/utf8>>/binary, ('dn--un--show_Show_OpPrec'(V5))/binary>>/binary>>; {'Libraries.Utils.Shunting.Expr', V8} -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Show.MkShow', V9, V10} -> (V9(V8)) end end.
'dn--un--showPrec_Show_((Tree $op) $a)'(V0, V1, V2) -> ('dn--un--show_Show_((Tree $op) $a)'(V0, V2)).
'dn--un--showPrec_Show_((Tok $op) $a)'(V0, V1, V2) -> ('dn--un--show_Show_((Tok $op) $a)'(V0, V2)).
'dn--un--__Impl_Show_((Tree $op) $a)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_((Tree $op) $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_((Tree $op) $a)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_((Tok $op) $a)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_((Tok $op) $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_((Tok $op) $a)'(V0, V2, V3)) end end}.
'un--shunt'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Libraries.Utils.Shunting.Expr', V6} -> begin (V7 = ('un--emit'(V1, {'Libraries.Utils.Shunting.Expr', V6}))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('un--shunt'(V0, V1, V2, V5))), V12 end(V8)) end end end end; {'Libraries.Utils.Shunting.Op', V13, V14, V15, V16} -> begin (V17 = ('un--processStack'(V0, V1, V2, V15, V16))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V22 = ('un--shunt'(V0, V1, [{'Builtin.MkPair', V13, {'Builtin.MkPair', V14, {'Builtin.MkPair', V15, V16}}} | V21], V5))), V22 end(V18)) end end end end end end(E0, E1)); [] -> begin (V24 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V23) -> ('un--emit'(V1, ('nested--7055-7057--in--un--mkOp'(V0, V2, V1, V23)))) end, V2))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V49 = begin (V34 = begin (V29 = V1), fun (V30) -> begin (V33 = (begin (V31 = V29), fun (V32) -> ('erlang':'get'(V31)) end end(V30))), {'Prelude.Types.Right', V33} end end end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V48 = fun (V39) -> case V38 of [E2 | E3] -> (fun (V40, V41) -> case V41 of [] -> {'Prelude.Types.Right', V40}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V43 = fun (V42) -> V42 end), fun (V44) -> (V43(V44)) end end(<<"Invalid input to shunting"/utf8>>))}, V39)) end end(E2, E3)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V46 = fun (V45) -> V45 end), fun (V47) -> (V46(V47)) end end(<<"Invalid input to shunting"/utf8>>))}, V39)) end end), V48 end(V35)) end end end end), V49 end(V25)) end end end end end.
'un--processStack'(V0, V1, V2, V3, V4) -> case V2 of [] -> fun (V5) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Builtin.MkPair', V8, V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> begin (V14 = ('un--higher'(V0, V8, V12, V13, V3, V4))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V27 = begin (V19 = {'Builtin.MkPair', V8, {'Builtin.MkPair', V10, {'Builtin.MkPair', V12, V13}}}), case V18 of 1 -> begin (V20 = ('un--emit'(V1, {'Libraries.Utils.Shunting.Op', V8, V10, V12, V13}))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V25 = ('un--processStack'(V0, V1, V7, V3, V4))), V25 end(V21)) end end end end; 0 -> fun (V26) -> {'Prelude.Types.Right', [V19 | V7]} end end end), V27 end(V15)) end end end end end end end end(E0, E1)) end.
'un--parseOps'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Core':'un--newRef'({'Libraries.Utils.Shunting.Out'}, []))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V7 = ('un--shunt'(V0, V6, [], V1))), V7 end(V3)) end end end end.
'un--output'(V0, V1) -> case V0 of [] -> fun (V2) -> case V1 of {'Libraries.Utils.Shunting.Op', V3, V4, V5, V6} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V2)); _ -> case V1 of {'Libraries.Utils.Shunting.Expr', V7} -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Leaf', V7} | V0]}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V2)) end end end; [E0 | E1] -> (fun (V8, V9) -> case V1 of {'Libraries.Utils.Shunting.Op', V10, V11, V12, V13} -> case V13 of {'Libraries.Utils.Shunting.Prefix', V14} -> fun (V15) -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Pre', V10, V11, V12, V8} | V9]} end; _ -> case V9 of [E4 | E5] -> (fun (V16, V17) -> fun (V18) -> case V1 of {'Libraries.Utils.Shunting.Op', V19, V20, V21, V22} -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Infix', V19, V20, V21, V16, V8} | V17]}; _ -> case V1 of {'Libraries.Utils.Shunting.Expr', V23} -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Leaf', V23} | V0]}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V18)) end end end end(E4, E5)); _ -> fun (V24) -> case V1 of {'Libraries.Utils.Shunting.Expr', V25} -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Leaf', V25} | V0]}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V24)) end end end end; _ -> case V9 of [E2 | E3] -> (fun (V26, V27) -> fun (V28) -> case V1 of {'Libraries.Utils.Shunting.Op', V29, V30, V31, V32} -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Infix', V29, V30, V31, V26, V8} | V27]}; _ -> case V1 of {'Libraries.Utils.Shunting.Expr', V33} -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Leaf', V33} | V0]}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V28)) end end end end(E2, E3)); _ -> fun (V34) -> case V1 of {'Libraries.Utils.Shunting.Expr', V35} -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Leaf', V35} | V0]}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V34)) end end end end end(E0, E1)); _ -> fun (V36) -> case V1 of {'Libraries.Utils.Shunting.Expr', V37} -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Leaf', V37} | V0]}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Invalid input to shunting"/utf8>>}, V36)) end end end.
'un--isLAssoc'(V0) -> case V0 of {'Libraries.Utils.Shunting.AssocL', V1} -> 1; _ -> 0 end.
'un--higher'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Libraries.Utils.Shunting.Prefix', V6} -> fun (V7) -> {'Prelude.Types.Right', 0} end; _ -> case V3 of {'Libraries.Utils.Shunting.NonAssoc', V8} -> fun (V9) -> case case (V8 =:= ('un--getPrec'(V5))) of 'false' -> 0; _ -> 1 end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<<<"Operator \x{27}"/utf8>>/binary, <<case V0 of {'Prelude.Show.MkShow', V10, V11} -> (V10(V2)) end/binary, <<"\x{27} is non-associative"/utf8>>/binary>>/binary>>}, V9)); 0 -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V8, ('un--getPrec'(V5))))} end end; _ -> fun (V12) -> case V5 of {'Libraries.Utils.Shunting.NonAssoc', V13} -> case case (('un--getPrec'(V3)) =:= V13) of 'false' -> 0; _ -> 1 end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<<<"Operator \x{27}"/utf8>>/binary, <<case V0 of {'Prelude.Show.MkShow', V14, V15} -> (V14(V4)) end/binary, <<"\x{27} is non-associative"/utf8>>/binary>>/binary>>}, V12)); 0 -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(('un--getPrec'(V3)), V13))} end; _ -> {'Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(('un--getPrec'(V3)), ('un--getPrec'(V5)))) of 1 -> 1; 0 -> case case (('un--getPrec'(V3)) =:= ('un--getPrec'(V5))) of 'false' -> 0; _ -> 1 end of 1 -> ('un--isLAssoc'(V3)); 0 -> 0 end end} end end end end.
'un--getPrec'(V0) -> case V0 of {'Libraries.Utils.Shunting.AssocL', V1} -> V1; {'Libraries.Utils.Shunting.AssocR', V2} -> V2; {'Libraries.Utils.Shunting.NonAssoc', V3} -> V3; {'Libraries.Utils.Shunting.Prefix', V4} -> V4 end.
'un--emit'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V23 = begin (V12 = ('un--output'(V11, V1))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V22 = begin (V17 = V0), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'put'(V19, V16)) end end(V18))), {'Prelude.Types.Right', V21} end end end), V22 end(V13)) end end end end), V23 end(V8)) end end end end.
