-module('Idris.Idris2.TTImp.ProcessType').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--findInferrable,findInf-6235'/9,
  'case--processFnOpt,insertDeps-4421'/10,
  'nested--10859-4884--in--un--splitPs'/15,
  'nested--13576-6956--in--un--isNested'/33,
  'nested--10636-4388--in--un--insertDeps'/8,
  'nested--10636-4393--in--un--getNamePos'/7,
  'nested--10636-4390--in--un--getDepsArgs'/8,
  'nested--10636-4391--in--un--getDeps'/8,
  'nested--12432-5942--in--un--getConvention'/13,
  'nested--12816-6184--in--un--findInfs'/6,
  'nested--12816-6183--in--un--findInf'/6,
  'nested--12816-6185--in--un--fi'/8,
  'nested--10636-4392--in--un--collectSpec'/9,
  'nested--10636-4389--in--un--collectDDeps'/6,
  'un--throwIfHasFlag'/5,
  'un--processType'/14,
  'un--processFnOpt'/5,
  'un--initDef'/11,
  'un--getRetTy'/2,
  'un--getFnString'/6,
  'un--findInferrable'/3,
  'un--checkForShadowing'/2
]).
'case--findInferrable,findInf-6235'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', V6}; {'Prelude.Types.Just', V9} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V25, V26, V27, V28)) end end end end end end end, fun (V29) -> fun (V30) -> V30 end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V33, V34, V35)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V36) -> fun (V37) -> case (V36 =:= V37) of 'false' -> 0; _ -> 1 end end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V38, V39)) end end}, V9, V6)) of 1 -> {'Prelude.Types.Right', V6}; 0 -> {'Prelude.Types.Right', [V9 | V6]} end end.
'case--processFnOpt,insertDeps-4421'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Prelude.Types.Nothing'} -> ('nested--10636-4388--in--un--insertDeps'(V0, V1, V2, V3, V4, V8, V7, V6)); {'Prelude.Types.Just', V10} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V26, V27, V28, V29)) end end end end end end end, fun (V30) -> fun (V31) -> V31 end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V34, V35, V36)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> case (V37 =:= V38) of 'false' -> 0; _ -> 1 end end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V39, V40)) end end}, V10, V8)) of 1 -> ('nested--10636-4388--in--un--insertDeps'(V0, V1, V2, V3, V4, V8, V7, V6)); 0 -> ('nested--10636-4388--in--un--insertDeps'(V0, V1, V2, V3, V4, [V10 | V8], V7, V6)) end end.
'nested--10859-4884--in--un--splitPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [] -> {'Builtin.MkPair', [], []}; [E0 | E1] -> (fun (V15, V16) -> case ('nested--10859-4884--in--un--splitPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, (V12 + 1), V13, V16)) of {'Builtin.MkPair', V17, V18} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V30)) end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V34, V35, V36, V37)) end end end end end end end, fun (V38) -> fun (V39) -> V39 end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V42, V43, V44)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V45) -> fun (V46) -> case (V45 =:= V46) of 'false' -> 0; _ -> 1 end end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V47, V48)) end end}, V12, V13)) of 1 -> {'Builtin.MkPair', [V15 | V17], V18}; 0 -> {'Builtin.MkPair', V17, [V15 | V18]} end end end(E0, E1)) end.
'nested--13576-6956--in--un--isNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V32 of {'Core.Name.Nested', V33, V34} -> 1; {'Core.Name.NS', V35, V36} -> ('nested--13576-6956--in--un--isNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V36)); _ -> 0 end.
'nested--10636-4388--in--un--insertDeps'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> V5; [E0 | E1] -> (fun (V8, V9) -> ('case--processFnOpt,insertDeps-4421'(V0, V1, V2, V3, V4, V8, V9, V6, V5, ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, V8, V6)))) end(E0, E1)) end.
'nested--10636-4393--in--un--getNamePos'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.Value.NBind', V7, V8, V9, V10} -> case V9 of {'Core.TT.Pi', V11, V12, V13, V14} -> begin (V20 = begin (V15 = V4), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V38 = begin (V31 = begin (V25 = ((V10(V24))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V7, {'Core.TT.Placeholder'}}))))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V30 = ('nested--10636-4393--in--un--getNamePos'(V0, V1, V2, V3, V4, (V5 + 1), V29))), V30 end(V26)) end end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V37 = fun (V36) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V8, V5} | V35]} end), V37 end(V32)) end end end end), V38 end(V21)) end end end end; _ -> fun (V39) -> {'Prelude.Types.Right', []} end end; _ -> fun (V40) -> {'Prelude.Types.Right', []} end end.
'nested--10636-4390--in--un--getDepsArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> fun (V8) -> {'Prelude.Types.Right', V7} end; [E0 | E1] -> (fun (V9, V10) -> begin (V11 = ('nested--10636-4391--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V9, V7))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V16 = ('nested--10636-4390--in--un--getDepsArgs'(V0, V1, V2, V3, V4, V5, V10, V15))), V16 end(V12)) end end end end end(E0, E1)) end.
'nested--10636-4391--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Core.Value.NBind', V8, V9, V10, V11} -> case V10 of {'Core.TT.Pi', V12, V13, V14, V15} -> begin (V21 = begin (V16 = V4), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'get'(V18)) end end(V17))), {'Prelude.Types.Right', V20} end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V44 = begin (V32 = begin (V26 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V25, V15))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V31 = ('nested--10636-4391--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V30, V7))), V31 end(V27)) end end end end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V43 = begin (V37 = ((V11(V25))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V3, {'Core.TT.Placeholder'}}))))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V42 = ('nested--10636-4391--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V41, V36))), V42 end(V38)) end end end end), V43 end(V33)) end end end end), V44 end(V22)) end end end end; _ -> begin (V50 = begin (V45 = V4), fun (V46) -> begin (V49 = (begin (V47 = V45), fun (V48) -> ('erlang':'get'(V47)) end end(V46))), {'Prelude.Types.Right', V49} end end end), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V73 = begin (V61 = begin (V55 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V54, ('Idris.Idris2.Core.TT':'un--binderType'(V10))))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V60 = ('nested--10636-4391--in--un--getDeps'(V0, V1, V2, V3, V4, 0, V59, V7))), V60 end(V56)) end end end end), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V72 = begin (V66 = ((V11(V54))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V3, {'Core.TT.Placeholder'}}))))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V71 = ('nested--10636-4391--in--un--getDeps'(V0, V1, V2, V3, V4, 0, V70, V7))), V71 end(V67)) end end end end), V72 end(V62)) end end end end), V73 end(V51)) end end end end end; {'Core.Value.NApp', V74, V75, V76} -> case V75 of {'Core.Value.NRef', V77, V78} -> case V77 of {'Core.TT.Bound'} -> begin (V84 = begin (V79 = V4), fun (V80) -> begin (V83 = (begin (V81 = V79), fun (V82) -> ('erlang':'get'(V81)) end end(V80))), {'Prelude.Types.Right', V83} end end end), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V103 = begin (V96 = begin (V90 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V89) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V88, ('Idris.Idris2.Builtin':'un--snd'(V89)))) end, V76, []))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V95 = ('nested--10636-4390--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 0, V94, V7))), V95 end(V91)) end end end end), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V102 = fun (V101) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V78, V5, V100))} end), V102 end(V97)) end end end end), V103 end(V85)) end end end end; _ -> fun (V104) -> {'Prelude.Types.Right', V7} end end; _ -> fun (V105) -> {'Prelude.Types.Right', V7} end end; {'Core.Value.NDCon', V106, V107, V108, V109, V110} -> begin (V116 = begin (V111 = V4), fun (V112) -> begin (V115 = (begin (V113 = V111), fun (V114) -> ('erlang':'get'(V113)) end end(V112))), {'Prelude.Types.Right', V115} end end end), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V128 = begin (V122 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V121) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V120, ('Idris.Idris2.Builtin':'un--snd'(V121)))) end, V110, []))), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V127 = ('nested--10636-4390--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 0, V126, V7))), V127 end(V123)) end end end end), V128 end(V117)) end end end end; {'Core.Value.NTCon', V129, V130, V131, V132, V133} -> begin (V139 = begin (V134 = V4), fun (V135) -> begin (V138 = (begin (V136 = V134), fun (V137) -> ('erlang':'get'(V136)) end end(V135))), {'Prelude.Types.Right', V138} end end end), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V228 = begin (V192 = begin (V176 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V130, case V143 of {'Core.Context.MkDefs', V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175} -> V144 end))), fun (V177) -> begin (V178 = (V176(V177))), case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> (begin (V191 = fun (V181) -> case V180 of {'Prelude.Types.Just', V182} -> case V182 of {'Core.Context.Context.TCon', V183, V184, V185, V186, V187, V188, V189, V190} -> {'Prelude.Types.Right', V185}; _ -> {'Prelude.Types.Right', []} end; _ -> {'Prelude.Types.Right', []} end end), V191 end(V177)) end end end end), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V227 = case ('nested--10859-4884--in--un--splitPs'(V0, V1, V2, V3, V4, V129, V133, V132, V131, V130, V7, V5, 0, V196, ((begin (V202 = fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V200, V201)) end end end end), fun (V203) -> fun (V204) -> ((((V202('erased'))('erased'))(V203))(V204)) end end end(fun (V197) -> ('Idris.Idris2.Builtin':'un--snd'(V197)) end))(V133)))) of {'Builtin.MkPair', V205, V206} -> begin (V214 = begin (V208 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V207) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V143, V207)) end, V205, []))), fun (V209) -> begin (V210 = (V208(V209))), case V210 of {'Prelude.Types.Left', V211} -> {'Prelude.Types.Left', V211}; {'Prelude.Types.Right', V212} -> (begin (V213 = ('nested--10636-4390--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 1, V212, V7))), V213 end(V209)) end end end end), fun (V215) -> begin (V216 = (V214(V215))), case V216 of {'Prelude.Types.Left', V217} -> {'Prelude.Types.Left', V217}; {'Prelude.Types.Right', V218} -> (begin (V226 = begin (V220 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V219) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V143, V219)) end, V206, []))), fun (V221) -> begin (V222 = (V220(V221))), case V222 of {'Prelude.Types.Left', V223} -> {'Prelude.Types.Left', V223}; {'Prelude.Types.Right', V224} -> (begin (V225 = ('nested--10636-4390--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 0, V224, V218))), V225 end(V221)) end end end end), V226 end(V215)) end end end end end), V227 end(V193)) end end end end), V228 end(V140)) end end end end; {'Core.Value.NDelayed', V229, V230, V231} -> ('nested--10636-4391--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V231, V7)); _ -> fun (V232) -> {'Prelude.Types.Right', V7} end end.
'nested--12432-5942--in--un--getConvention'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case ('Idris.Idris2.Data.String':'un--split'(fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V13, $:)) end, V12)) of {'Data.List1.:::', V14, V15} -> fun (V16) -> case V15 of [E0 | E1] -> (fun (V17, V18) -> case V18 of [] -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Data.String':'un--trim'(V14)), ('Idris.Idris2.Data.String':'un--trim'(V17))}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V6, <<"Invalid calling convention"/utf8>>}, V16)) end end(E0, E1)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V6, <<"Invalid calling convention"/utf8>>}, V16)) end end; _ -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V6, <<"Invalid calling convention"/utf8>>}, V19)) end end.
'nested--12816-6184--in--un--findInfs'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Prelude.Types.Right', V3} end; [E0 | E1] -> (fun (V7, V8) -> begin (V9 = ('nested--12816-6184--in--un--findInfs'(V0, V1, V2, V3, V4, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V14 = ('nested--12816-6183--in--un--findInf'(V0, V1, V2, V13, V4, V7))), V14 end(V10)) end end end end end(E0, E1)) end.
'nested--12816-6183--in--un--findInf'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.Value.NApp', V6, V7, V8} -> case V7 of {'Core.Value.NRef', V9, V10} -> case V9 of {'Core.TT.Bound'} -> case V8 of [] -> fun (V11) -> ('case--findInferrable,findInf-6235'(V0, V1, V2, V6, V10, V4, V3, ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V14, V15)) end end}, V10, V4)), V11)) end; _ -> fun (V16) -> {'Prelude.Types.Right', V3} end end; _ -> fun (V17) -> {'Prelude.Types.Right', V3} end end; _ -> fun (V18) -> {'Prelude.Types.Right', V3} end end; {'Core.Value.NDCon', V19, V20, V21, V22, V23} -> begin (V25 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V24) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V24)))) end, V23, []))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V30 = ('nested--12816-6184--in--un--findInfs'(V0, V1, V2, V3, V4, V29))), V30 end(V26)) end end end end; {'Core.Value.NTCon', V31, V32, V33, V34, V35} -> begin (V37 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V36) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V36)))) end, V35, []))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V42 = ('nested--12816-6184--in--un--findInfs'(V0, V1, V2, V3, V4, V41))), V42 end(V38)) end end end end; {'Core.Value.NDelayed', V43, V44, V45} -> ('nested--12816-6183--in--un--findInf'(V0, V1, V2, V3, V4, V45)); _ -> fun (V46) -> {'Prelude.Types.Right', V3} end end.
'nested--12816-6185--in--un--fi'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.Value.NBind', V8, V9, V10, V11} -> case V10 of {'Core.TT.Pi', V12, V13, V14, V15} -> begin (V16 = {'Core.Name.MN', <<"inf"/utf8>>, V4}), begin (V17 = ((V11(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V8, {'Core.TT.Bound'}, V16}))))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V43 = begin (V28 = begin (V22 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V1, V15))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V27 = ('nested--12816-6183--in--un--findInf'(V0, V1, V2, V6, V5, V26))), V27 end(V23)) end end end end), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V42 = begin (V35 = ('nested--12816-6185--in--un--fi'(V0, V1, V2, (V3 + 1), begin (V34 = (begin (V33 = 1), case ((V33 band 9223372036854775808) =/= 0) of 'true' -> (V33 bor -9223372036854775808); _ -> (V33 band 9223372036854775807) end end + V4)), case ((V34 band 9223372036854775808) =/= 0) of 'true' -> (V34 bor -9223372036854775808); _ -> (V34 band 9223372036854775807) end end, [{'Builtin.MkPair', V16, V3} | V5], V32, V21))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V41 = fun (V40) -> {'Prelude.Types.Right', V39} end), V41 end(V36)) end end end end), V42 end(V29)) end end end end), V43 end(V18)) end end end end end; _ -> ('nested--12816-6183--in--un--findInf'(V0, V1, V2, V6, V5, V7)) end; _ -> ('nested--12816-6183--in--un--findInf'(V0, V1, V2, V6, V5, V7)) end.
'nested--10636-4392--in--un--collectSpec'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.Value.NBind', V9, V10, V11, V12} -> case V11 of {'Core.TT.Pi', V13, V14, V15, V16} -> begin (V22 = begin (V17 = V4), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'get'(V19)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V123 = begin (V28 = fun (V27) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V26, V27)) end), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V122 = begin (V33 = ((V12(V26))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V9, {'Core.TT.Bound'}, V10}))))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V121 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V49)) end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V53, V54, V55, V56)) end end end end end end end, fun (V57) -> fun (V58) -> V58 end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V61, V62, V63)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V66, V67)) end end}, V10, V1)) of 1 -> begin (V74 = begin (V68 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V26, V16))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V73 = ('nested--10636-4391--in--un--getDeps'(V0, V1, V2, V3, V4, 1, V72, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'())))), V73 end(V69)) end end end end), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V120 = begin (V110 = ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V79) -> case ('Idris.Idris2.Builtin':'un--snd'(V79)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V82, V83, V84)) end end end end end, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V87, V88, V89)) end end end end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V91)) end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V95, V96, V97, V98)) end end end end end end end, fun (V99) -> fun (V100) -> V100 end end, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V103, V104, V105)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V106, V107)) end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V108, V109)) end end}, ('Idris.Idris2.Builtin':'un--fst'(V79)), V6)) of 1 -> 0; 0 -> 1 end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V78))))), begin (V119 = ('nested--10636-4388--in--un--insertDeps'(V0, V1, V2, V3, V4, V5, V7, [V10 | ((begin (V116 = fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V114, V115)) end end end end), fun (V117) -> fun (V118) -> ((((V116('erased'))('erased'))(V117))(V118)) end end end(fun (V111) -> ('Idris.Idris2.Builtin':'un--fst'(V111)) end))(V110))]))), ('nested--10636-4392--in--un--collectSpec'(V0, V1, V2, V3, V4, V119, V6, V7, V37)) end end), V120 end(V75)) end end end end; 0 -> ('nested--10636-4392--in--un--collectSpec'(V0, V1, V2, V3, V4, V5, V6, V7, V37)) end), V121 end(V34)) end end end end), V122 end(V29)) end end end end), V123 end(V23)) end end end end; _ -> fun (V124) -> {'Prelude.Types.Right', V5} end end; _ -> fun (V125) -> {'Prelude.Types.Right', V5} end end.
'nested--10636-4389--in--un--collectDDeps'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.Value.NBind', V6, V7, V8, V9} -> case V8 of {'Core.TT.Pi', V10, V11, V12, V13} -> begin (V19 = begin (V14 = V4), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V81 = begin (V25 = fun (V24) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V23, V24)) end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V80 = begin (V30 = ((V9(V23))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V6, {'Core.TT.Bound'}, V7}))))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V79 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V46)) end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V50, V51, V52, V53)) end end end end end end end, fun (V54) -> fun (V55) -> V55 end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V58, V59, V60)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V63, V64)) end end}, V7, V1)) of 1 -> ('nested--10636-4389--in--un--collectDDeps'(V0, V1, V2, V3, V4, V34)); 0 -> begin (V65 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V4, [], V29, {'Core.Env.Nil'}, V13))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V78 = begin (V70 = ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getRefs'({'Core.Name.UN', {'Core.Name.Underscore'}}, V69))))), begin (V71 = ('nested--10636-4389--in--un--collectDDeps'(V0, V1, V2, V3, V4, V34))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V77 = fun (V76) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V75, V70))} end), V77 end(V72)) end end end end end), V78 end(V66)) end end end end end), V79 end(V31)) end end end end), V80 end(V26)) end end end end), V81 end(V20)) end end end end; _ -> fun (V82) -> {'Prelude.Types.Right', []} end end; _ -> fun (V83) -> {'Prelude.Types.Right', []} end end.
'un--throwIfHasFlag'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--hasFlag'(V0, V1, V2, V3))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> case V9 of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, V4}, V10)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V11 end(V6)) end end end end.
'un--processType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'TTImp.TTImp.MkImpTy', V14, V15, V16, V17} -> begin (V18 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V16))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V435 = begin (V23 = ('Idris.Idris2.Core.Metadata':'un--addNameLoc'(V2, V1, V15, V22))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V434 = begin (V28 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, 1, fun () -> <<<<"Processing "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22))/binary>> end))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V433 = begin (V36 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, 5, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Checking type decl:"/utf8>> | [('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V10)) | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22)) | [<<":"/utf8>> | [('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V34, V35)) end end}, V17)) | []]]]]])) end))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V432 = begin (V41 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V22))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V431 = begin (V51 = begin (V46 = V1), fun (V47) -> begin (V50 = (begin (V48 = V46), fun (V49) -> ('erlang':'get'(V48)) end end(V47))), {'Prelude.Types.Right', V50} end end end), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V430 = begin (V88 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', V45}, case V55 of {'Core.Context.MkDefs', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} -> V56 end))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V429 = case V92 of {'Prelude.Types.Nothing'} -> begin (V93 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V9))), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V426 = begin (V103 = ('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V6, fun (V98) -> {'Core.Core.InType', V9, V22, V98} end, ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V4, V5, V45, {'TTImp.Elab.Check.InType'}, [0 | V6], V7, V8, {'TTImp.TTImp.IBindHere', V9, {'TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V99) -> fun (V100) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V99, V100)) end end, 0, fun (V101) -> fun (V102) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V101, V102)) end end, 1}))}, V17}, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V9, V97))))))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V425 = begin (V111 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, (begin (V109 = fun (V108) -> V108 end), fun (V110) -> (V109(V110)) end end(<<"declare.type"/utf8>>)), 3, fun () -> <<<<"Type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22))/binary>> end, {'Core.Env.Nil'}, ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V14, V8, V107))))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V424 = begin (V116 = ('un--initDef'(V0, V1, V2, V3, V4, V5, V9, V22, V8, V107, V12))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V423 = begin (V121 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V14, V8, V107))), begin (V122 = ('Idris.Idris2.TTImp.Elab.Utils':'un--findErased'(V1, V121))), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V422 = begin (V127 = {'Prelude.Types.Nothing'}), case V126 of {'Builtin.MkPair', V128, V129} -> begin (V135 = begin (V130 = V1), fun (V131) -> begin (V134 = (begin (V132 = V130), fun (V133) -> ('erlang':'get'(V132)) end end(V131))), {'Prelude.Types.Right', V134} end end end), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V421 = begin (V141 = fun (V140) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V139, V140)) end), fun (V142) -> begin (V143 = (V141(V142))), case V143 of {'Prelude.Types.Left', V144} -> {'Prelude.Types.Left', V144}; {'Prelude.Types.Right', V145} -> (begin (V420 = begin (V152 = begin (V146 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, [], V139, {'Core.Env.Nil'}, V121))), fun (V147) -> begin (V148 = (V146(V147))), case V148 of {'Prelude.Types.Left', V149} -> {'Prelude.Types.Left', V149}; {'Prelude.Types.Right', V150} -> (begin (V151 = ('un--findInferrable'(V1, V145, V150))), V151 end(V147)) end end end end), fun (V153) -> begin (V154 = (V152(V153))), case V154 of {'Prelude.Types.Left', V155} -> {'Prelude.Types.Left', V155}; {'Prelude.Types.Right', V156} -> (begin (V419 = begin (V198 = begin (V179 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, {'Core.Name.Resolved', V45}, case ('Idris.Idris2.Core.Context':'un--newDef'(V9, V22, V10, V0, V121, V11, V120)) of {'Core.Context.Context.MkGlobalDef', V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178} -> {'Core.Context.Context.MkGlobalDef', V157, V158, V159, V128, V129, V162, V156, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178} end))), ((begin (V195 = fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V192, V193, V194)) end end end end end), fun (V196) -> fun (V197) -> ((((V195('erased'))('erased'))(V196))(V197)) end end end((begin (V187 = fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> case V184 of {'Prelude.Types.Left', V185} -> {'Prelude.Types.Left', V185}; {'Prelude.Types.Right', V186} -> {'Prelude.Types.Right', (V183(V186))} end end end end end), fun (V188) -> fun (V189) -> ((((V187('erased'))('erased'))(V188))(V189)) end end end(fun (V180) -> {'Builtin.MkUnit'} end))))(V179)) end), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V418 = begin (V234 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V205, V206, V207)) end end end end end, fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> fun (V212) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V210, V211, V212)) end end end end end, fun (V213) -> fun (V214) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V214)) end end, fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V218, V219, V220, V221)) end end end end end end end, fun (V222) -> fun (V223) -> V223 end end, fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V226, V227, V228)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V229) -> fun (V230) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V229, V230)) end end, fun (V231) -> fun (V232) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V231, V232)) end end}, 1, V6)) of 1 -> fun (V233) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('Idris.Idris2.Core.Context':'un--setLinearCheck'(V1, V45, 1)) end), fun (V235) -> begin (V236 = (V234(V235))), case V236 of {'Prelude.Types.Left', V237} -> {'Prelude.Types.Left', V237}; {'Prelude.Types.Right', V238} -> (begin (V417 = begin (V254 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V240 = fun (V239) -> V239 end), fun (V241) -> (V240(V241)) end end(<<"declare.type"/utf8>>)), 2, fun () -> <<(begin (V243 = fun (V242) -> V242 end), fun (V244) -> (V243(V244)) end end(<<"Setting options for "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V245) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(FnOpt\x{27} $nm)'({'Prelude.Show.MkShow', fun (V246) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V246)) end, fun (V247) -> fun (V248) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V247, V248)) end end}, V245)) end, fun (V249) -> fun (V250) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(FnOpt\x{27} $nm)'({'Prelude.Show.MkShow', fun (V251) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V251)) end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V252, V253)) end end}, V249, V250)) end end}, V12))/binary>>/binary>>/binary>> end))), fun (V255) -> begin (V256 = (V254(V255))), case V256 of {'Prelude.Types.Left', V257} -> {'Prelude.Types.Left', V257}; {'Prelude.Types.Right', V258} -> (begin (V416 = begin (V259 = {'Core.Name.Resolved', V45}), begin (V261 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V260) -> ('un--processFnOpt'(V1, V9, case ('nested--13576-6956--in--un--isNested'(V17, V16, V15, V14, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1, V22, V45, V55, V127, V97, V107, V120, V121, V128, V129, V126, V139, V145, V156, V259, V22)) of 1 -> 0; 0 -> 1 end, V259, V260)) end, V12))), fun (V262) -> begin (V263 = (V261(V262))), case V263 of {'Prelude.Types.Left', V264} -> {'Prelude.Types.Left', V264}; {'Prelude.Types.Right', V265} -> (begin (V415 = begin (V276 = begin (V266 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V1))), fun (V267) -> begin (V268 = (V266(V267))), case V268 of {'Prelude.Types.Left', V269} -> {'Prelude.Types.Left', V269}; {'Prelude.Types.Right', V270} -> (begin (V275 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V271) -> fun (V272) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V271, V272)) end end, 0}, fun (V273) -> ('Idris.Idris2.TTImp.TTImp':'un--isTotalityReq'(V273)) end, V12)) of 1 -> fun (V274) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V9, V259, {'Core.Context.Context.SetTotal', V270})) end), V275 end(V267)) end end end end), fun (V277) -> begin (V278 = (V276(V277))), case V278 of {'Prelude.Types.Left', V279} -> {'Prelude.Types.Left', V279}; {'Prelude.Types.Right', V280} -> (begin (V414 = begin (V281 = ('Idris.Idris2.Core.Metadata':'un--addTyDecl'(V0, V1, V2, V9, {'Core.Name.Resolved', V45}, V8, V107))), fun (V282) -> begin (V283 = (V281(V282))), case V283 of {'Prelude.Types.Left', V284} -> {'Prelude.Types.Left', V284}; {'Prelude.Types.Right', V285} -> (begin (V413 = begin (V292 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V287 = fun (V286) -> V286 end), fun (V288) -> (V287(V288)) end end(<<"metadata.names"/utf8>>)), 7, fun () -> (begin (V290 = fun (V289) -> V289 end), fun (V291) -> (V290(V291)) end end(<<"processType is adding \x{2193}"/utf8>>)) end))), fun (V293) -> begin (V294 = (V292(V293))), case V294 of {'Prelude.Types.Left', V295} -> {'Prelude.Types.Left', V295}; {'Prelude.Types.Right', V296} -> (begin (V412 = begin (V297 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V1, V2, V15, {'Core.Name.Resolved', V45}, V8, V107))), fun (V298) -> begin (V299 = (V297(V298))), case V299 of {'Prelude.Types.Left', V300} -> {'Prelude.Types.Left', V300}; {'Prelude.Types.Right', V301} -> (begin (V411 = begin (V303 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V302) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V302)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V107))))))), fun (V304) -> begin (V305 = (V303(V304))), case V305 of {'Prelude.Types.Left', V306} -> {'Prelude.Types.Left', V306}; {'Prelude.Types.Right', V307} -> (begin (V410 = begin (V308 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V22))), fun (V309) -> begin (V310 = (V308(V309))), case V310 of {'Prelude.Types.Left', V311} -> {'Prelude.Types.Left', V311}; {'Prelude.Types.Right', V312} -> (begin (V409 = begin (V322 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V314 = fun (V313) -> V313 end), fun (V315) -> (V314(V315)) end end(<<"declare.type"/utf8>>)), 10, fun () -> <<(begin (V317 = fun (V316) -> V316 end), fun (V318) -> (V317(V318)) end end(<<"Saving from "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V319) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V319)) end, fun (V320) -> fun (V321) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V320, V321)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V107))))))/binary>>/binary>>/binary>> end))), fun (V323) -> begin (V324 = (V322(V323))), case V324 of {'Prelude.Types.Left', V325} -> {'Prelude.Types.Left', V325}; {'Prelude.Types.Right', V326} -> (begin (V408 = begin (V367 = case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(V11, 0)) of 1 -> begin (V335 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Core.Hash.dn--un--__mkHashable', fun (V327) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V327)) end, fun (V328) -> fun (V329) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V328, V329)) end end}, {'Core.Context.dn--un--__mkHasNames', fun (V330) -> fun (V331) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V330, V331)) end end, fun (V332) -> fun (V333) -> fun (V334) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V332, V333, V334)) end end end}, V22))), fun (V336) -> begin (V337 = (V335(V336))), case V337 of {'Prelude.Types.Left', V338} -> {'Prelude.Types.Left', V338}; {'Prelude.Types.Right', V339} -> (begin (V365 = begin (V347 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Core.Hash.dn--un--__mkHashable', fun (V340) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V340)) end, fun (V341) -> fun (V342) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V341, V342)) end end}, {'Core.Context.dn--un--__mkHasNames', fun (V343) -> fun (V344) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V343, V344)) end end, fun (V345) -> fun (V346) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V345, V346)) end end}, V107))), fun (V348) -> begin (V349 = (V347(V348))), case V349 of {'Prelude.Types.Left', V350} -> {'Prelude.Types.Left', V350}; {'Prelude.Types.Right', V351} -> (begin (V364 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V353 = fun (V352) -> V352 end), fun (V354) -> (V353(V354)) end end(<<"module.hash"/utf8>>)), 15, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V355) -> fun (V356) -> <<V355/binary, V356/binary>> end end, <<""/utf8>>}, fun (V357) -> V357 end, [(begin (V359 = fun (V358) -> V358 end), fun (V360) -> (V359(V360)) end end(<<"Adding hash for type with name "/utf8>>)) | [(begin (V362 = fun (V361) -> V361 end), fun (V363) -> (V362(V363)) end end(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22)))) | []]])) end))), V364 end(V348)) end end end end), V365 end(V336)) end end end end; 0 -> fun (V366) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V368) -> begin (V369 = (V367(V368))), case V369 of {'Prelude.Types.Left', V370} -> {'Prelude.Types.Left', V370}; {'Prelude.Types.Right', V371} -> (begin (V407 = begin (V372 = ('Idris.Idris2.Core.Context':'un--getSession'(V1))), fun (V373) -> begin (V374 = (V372(V373))), case V374 of {'Prelude.Types.Left', V375} -> {'Prelude.Types.Left', V375}; {'Prelude.Types.Right', V376} -> (begin (V406 = case case V376 of {'Core.Options.MkSessionOpts', V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402} -> V398 end of 1 -> case ('Idris.Idris2.Data.List1':'un--fromList'(('un--checkForShadowing'(('Idris.Idris2.Libraries.Data.StringMap':'un--empty'()), V17)))) of {'Prelude.Types.Just', V403} -> ('Idris.Idris2.Core.Context':'un--recordWarning'(V1, {'Core.Core.ShadowingLocalBindings', V9, V403})); {'Prelude.Types.Nothing'} -> fun (V404) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; 0 -> fun (V405) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V406 end(V373)) end end end end), V407 end(V368)) end end end end), V408 end(V323)) end end end end), V409 end(V309)) end end end end), V410 end(V304)) end end end end), V411 end(V298)) end end end end), V412 end(V293)) end end end end), V413 end(V282)) end end end end), V414 end(V277)) end end end end), V415 end(V262)) end end end end end), V416 end(V255)) end end end end), V417 end(V235)) end end end end), V418 end(V199)) end end end end), V419 end(V153)) end end end end), V420 end(V142)) end end end end), V421 end(V136)) end end end end end end), V422 end(V123)) end end end end end), V423 end(V117)) end end end end), V424 end(V112)) end end end end), V425 end(V104)) end end end end), V426 end(V94)) end end end end; {'Prelude.Types.Just', V427} -> fun (V428) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.AlreadyDefined', V9, V22}, V428)) end end), V429 end(V89)) end end end end), V430 end(V52)) end end end end), V431 end(V42)) end end end end), V432 end(V37)) end end end end), V433 end(V29)) end end end end), V434 end(V24)) end end end end), V435 end(V19)) end end end end end.
'un--processFnOpt'(V0, V1, V2, V3, V4) -> case V4 of {'TTImp.TTImp.Inline'} -> begin (V5 = ('un--throwIfHasFlag'(V0, V1, V3, {'Core.Context.Context.NoInline'}, <<"%noinline and %inline are mutually exclusive"/utf8>>))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V10 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Inline'}))), V10 end(V6)) end end end end; {'TTImp.TTImp.NoInline'} -> begin (V11 = ('un--throwIfHasFlag'(V0, V1, V3, {'Core.Context.Context.Inline'}, <<"%inline and %noinline are mutually exclusive"/utf8>>))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V16 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.NoInline'}))), V16 end(V12)) end end end end; {'TTImp.TTImp.Deprecate'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Deprecate'})); {'TTImp.TTImp.TCInline'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.TCInline'})); _ -> case V2 of 1 -> case V4 of {'TTImp.TTImp.Hint', V17} -> begin (V23 = begin (V18 = V0), fun (V19) -> begin (V22 = (begin (V20 = V18), fun (V21) -> ('erlang':'get'(V20)) end end(V19))), {'Prelude.Types.Right', V22} end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V79 = begin (V60 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V3, case V27 of {'Core.Context.MkDefs', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> V28 end))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V78 = case V64 of {'Prelude.Types.Just', V65} -> begin (V72 = begin (V66 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V27, {'Core.Env.Nil'}, V65))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V71 = ('un--getRetTy'(V27, V70))), V71 end(V67)) end end end end), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V77 = ('Idris.Idris2.Core.Context':'un--addHintFor'(V0, V1, V76, V3, V17, 0))), V77 end(V73)) end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3)) end), V78 end(V61)) end end end end), V79 end(V24)) end end end end; _ -> case V4 of {'TTImp.TTImp.Hint', V80} -> begin (V92 = begin (V86 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V81, V82)) end end, fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V83, V84, V85)) end end end}, V3))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V91 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"elab"/utf8>>, 5, fun () -> <<<<"Adding local hint "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V90))/binary>> end))), V91 end(V87)) end end end end), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V97 = ('Idris.Idris2.Core.Context':'un--addLocalHint'(V0, V3))), V97 end(V93)) end end end end; _ -> case V2 of 1 -> case V4 of {'TTImp.TTImp.GlobalHint', V98} -> ('Idris.Idris2.Core.Context':'un--addGlobalHint'(V0, V3, V98)); _ -> case V4 of {'TTImp.TTImp.GlobalHint', V99} -> fun (V100) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V100)) end; {'TTImp.TTImp.ExternFn'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Inline'})); {'TTImp.TTImp.ForeignFn', V101} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Inline'})); {'TTImp.TTImp.ForeignExport', V102} -> fun (V103) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'TTImp.TTImp.Invertible'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Invertible'})); {'TTImp.TTImp.Totality', V104} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.SetTotal', V104})); {'TTImp.TTImp.Macro'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Macro'})); {'TTImp.TTImp.SpecArgs', V105} -> begin (V111 = begin (V106 = V0), fun (V107) -> begin (V110 = (begin (V108 = V106), fun (V109) -> ('erlang':'get'(V108)) end end(V107))), {'Prelude.Types.Right', V110} end end end), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V242 = begin (V148 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V115 of {'Core.Context.MkDefs', V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147} -> V116 end))), fun (V149) -> begin (V150 = (V148(V149))), case V150 of {'Prelude.Types.Left', V151} -> {'Prelude.Types.Left', V151}; {'Prelude.Types.Right', V152} -> (begin (V241 = case V152 of {'Prelude.Types.Just', V153} -> begin (V176 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V115, {'Core.Env.Nil'}, case V153 of {'Core.Context.Context.MkGlobalDef', V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175} -> V156 end))), fun (V177) -> begin (V178 = (V176(V177))), case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> (begin (V240 = begin (V181 = ('nested--10636-4393--in--un--getNamePos'(V2, V105, V3, V1, V0, 0, V180))), fun (V182) -> begin (V183 = (V181(V182))), case V183 of {'Prelude.Types.Left', V184} -> {'Prelude.Types.Left', V184}; {'Prelude.Types.Right', V185} -> (begin (V239 = begin (V186 = ('nested--10636-4389--in--un--collectDDeps'(V2, V105, V3, V1, V0, V180))), fun (V187) -> begin (V188 = (V186(V187))), case V188 of {'Prelude.Types.Left', V189} -> {'Prelude.Types.Left', V189}; {'Prelude.Types.Right', V190} -> (begin (V238 = begin (V191 = ('nested--10636-4392--in--un--collectSpec'(V2, V105, V3, V1, V0, [], V190, V185, V180))), fun (V192) -> begin (V193 = (V191(V192))), case V193 of {'Prelude.Types.Left', V194} -> {'Prelude.Types.Left', V194}; {'Prelude.Types.Right', V195} -> (begin (V237 = begin (V218 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V153 of {'Core.Context.Context.MkGlobalDef', V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217} -> {'Core.Context.Context.MkGlobalDef', V196, V197, V198, V199, V200, V195, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217} end))), ((begin (V234 = fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V231, V232, V233)) end end end end end), fun (V235) -> fun (V236) -> ((((V234('erased'))('erased'))(V235))(V236)) end end end((begin (V226 = fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> case V223 of {'Prelude.Types.Left', V224} -> {'Prelude.Types.Left', V224}; {'Prelude.Types.Right', V225} -> {'Prelude.Types.Right', (V222(V225))} end end end end end), fun (V227) -> fun (V228) -> ((((V226('erased'))('erased'))(V227))(V228)) end end end(fun (V219) -> {'Builtin.MkUnit'} end))))(V218)) end), V237 end(V192)) end end end end), V238 end(V187)) end end end end), V239 end(V182)) end end end end), V240 end(V177)) end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3)) end), V241 end(V149)) end end end end), V242 end(V112)) end end end end end end; _ -> case V4 of {'TTImp.TTImp.GlobalHint', V243} -> fun (V244) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V244)) end; {'TTImp.TTImp.ExternFn'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Inline'})); {'TTImp.TTImp.ForeignFn', V245} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Inline'})); {'TTImp.TTImp.ForeignExport', V246} -> fun (V247) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'TTImp.TTImp.Invertible'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Invertible'})); {'TTImp.TTImp.Totality', V248} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.SetTotal', V248})); {'TTImp.TTImp.Macro'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Macro'})); {'TTImp.TTImp.SpecArgs', V249} -> begin (V255 = begin (V250 = V0), fun (V251) -> begin (V254 = (begin (V252 = V250), fun (V253) -> ('erlang':'get'(V252)) end end(V251))), {'Prelude.Types.Right', V254} end end end), fun (V256) -> begin (V257 = (V255(V256))), case V257 of {'Prelude.Types.Left', V258} -> {'Prelude.Types.Left', V258}; {'Prelude.Types.Right', V259} -> (begin (V386 = begin (V292 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V259 of {'Core.Context.MkDefs', V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291} -> V260 end))), fun (V293) -> begin (V294 = (V292(V293))), case V294 of {'Prelude.Types.Left', V295} -> {'Prelude.Types.Left', V295}; {'Prelude.Types.Right', V296} -> (begin (V385 = case V296 of {'Prelude.Types.Just', V297} -> begin (V320 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V259, {'Core.Env.Nil'}, case V297 of {'Core.Context.Context.MkGlobalDef', V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319} -> V300 end))), fun (V321) -> begin (V322 = (V320(V321))), case V322 of {'Prelude.Types.Left', V323} -> {'Prelude.Types.Left', V323}; {'Prelude.Types.Right', V324} -> (begin (V384 = begin (V325 = ('nested--10636-4393--in--un--getNamePos'(V2, V249, V3, V1, V0, 0, V324))), fun (V326) -> begin (V327 = (V325(V326))), case V327 of {'Prelude.Types.Left', V328} -> {'Prelude.Types.Left', V328}; {'Prelude.Types.Right', V329} -> (begin (V383 = begin (V330 = ('nested--10636-4389--in--un--collectDDeps'(V2, V249, V3, V1, V0, V324))), fun (V331) -> begin (V332 = (V330(V331))), case V332 of {'Prelude.Types.Left', V333} -> {'Prelude.Types.Left', V333}; {'Prelude.Types.Right', V334} -> (begin (V382 = begin (V335 = ('nested--10636-4392--in--un--collectSpec'(V2, V249, V3, V1, V0, [], V334, V329, V324))), fun (V336) -> begin (V337 = (V335(V336))), case V337 of {'Prelude.Types.Left', V338} -> {'Prelude.Types.Left', V338}; {'Prelude.Types.Right', V339} -> (begin (V381 = begin (V362 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V297 of {'Core.Context.Context.MkGlobalDef', V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361} -> {'Core.Context.Context.MkGlobalDef', V340, V341, V342, V343, V344, V339, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361} end))), ((begin (V378 = fun (V373) -> fun (V374) -> fun (V375) -> fun (V376) -> fun (V377) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V375, V376, V377)) end end end end end), fun (V379) -> fun (V380) -> ((((V378('erased'))('erased'))(V379))(V380)) end end end((begin (V370 = fun (V364) -> fun (V365) -> fun (V366) -> fun (V367) -> case V367 of {'Prelude.Types.Left', V368} -> {'Prelude.Types.Left', V368}; {'Prelude.Types.Right', V369} -> {'Prelude.Types.Right', (V366(V369))} end end end end end), fun (V371) -> fun (V372) -> ((((V370('erased'))('erased'))(V371))(V372)) end end end(fun (V363) -> {'Builtin.MkUnit'} end))))(V362)) end), V381 end(V336)) end end end end), V382 end(V331)) end end end end), V383 end(V326)) end end end end), V384 end(V321)) end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3)) end), V385 end(V293)) end end end end), V386 end(V256)) end end end end end end end end; _ -> case V4 of {'TTImp.TTImp.Hint', V387} -> begin (V399 = begin (V393 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V388) -> fun (V389) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V388, V389)) end end, fun (V390) -> fun (V391) -> fun (V392) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V390, V391, V392)) end end end}, V3))), fun (V394) -> begin (V395 = (V393(V394))), case V395 of {'Prelude.Types.Left', V396} -> {'Prelude.Types.Left', V396}; {'Prelude.Types.Right', V397} -> (begin (V398 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"elab"/utf8>>, 5, fun () -> <<<<"Adding local hint "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V397))/binary>> end))), V398 end(V394)) end end end end), fun (V400) -> begin (V401 = (V399(V400))), case V401 of {'Prelude.Types.Left', V402} -> {'Prelude.Types.Left', V402}; {'Prelude.Types.Right', V403} -> (begin (V404 = ('Idris.Idris2.Core.Context':'un--addLocalHint'(V0, V3))), V404 end(V400)) end end end end; _ -> case V2 of 1 -> case V4 of {'TTImp.TTImp.GlobalHint', V405} -> ('Idris.Idris2.Core.Context':'un--addGlobalHint'(V0, V3, V405)); _ -> case V4 of {'TTImp.TTImp.GlobalHint', V406} -> fun (V407) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V407)) end; {'TTImp.TTImp.ExternFn'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Inline'})); {'TTImp.TTImp.ForeignFn', V408} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Inline'})); {'TTImp.TTImp.ForeignExport', V409} -> fun (V410) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'TTImp.TTImp.Invertible'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Invertible'})); {'TTImp.TTImp.Totality', V411} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.SetTotal', V411})); {'TTImp.TTImp.Macro'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Macro'})); {'TTImp.TTImp.SpecArgs', V412} -> begin (V418 = begin (V413 = V0), fun (V414) -> begin (V417 = (begin (V415 = V413), fun (V416) -> ('erlang':'get'(V415)) end end(V414))), {'Prelude.Types.Right', V417} end end end), fun (V419) -> begin (V420 = (V418(V419))), case V420 of {'Prelude.Types.Left', V421} -> {'Prelude.Types.Left', V421}; {'Prelude.Types.Right', V422} -> (begin (V549 = begin (V455 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V422 of {'Core.Context.MkDefs', V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V452, V453, V454} -> V423 end))), fun (V456) -> begin (V457 = (V455(V456))), case V457 of {'Prelude.Types.Left', V458} -> {'Prelude.Types.Left', V458}; {'Prelude.Types.Right', V459} -> (begin (V548 = case V459 of {'Prelude.Types.Just', V460} -> begin (V483 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V422, {'Core.Env.Nil'}, case V460 of {'Core.Context.Context.MkGlobalDef', V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480, V481, V482} -> V463 end))), fun (V484) -> begin (V485 = (V483(V484))), case V485 of {'Prelude.Types.Left', V486} -> {'Prelude.Types.Left', V486}; {'Prelude.Types.Right', V487} -> (begin (V547 = begin (V488 = ('nested--10636-4393--in--un--getNamePos'(V2, V412, V3, V1, V0, 0, V487))), fun (V489) -> begin (V490 = (V488(V489))), case V490 of {'Prelude.Types.Left', V491} -> {'Prelude.Types.Left', V491}; {'Prelude.Types.Right', V492} -> (begin (V546 = begin (V493 = ('nested--10636-4389--in--un--collectDDeps'(V2, V412, V3, V1, V0, V487))), fun (V494) -> begin (V495 = (V493(V494))), case V495 of {'Prelude.Types.Left', V496} -> {'Prelude.Types.Left', V496}; {'Prelude.Types.Right', V497} -> (begin (V545 = begin (V498 = ('nested--10636-4392--in--un--collectSpec'(V2, V412, V3, V1, V0, [], V497, V492, V487))), fun (V499) -> begin (V500 = (V498(V499))), case V500 of {'Prelude.Types.Left', V501} -> {'Prelude.Types.Left', V501}; {'Prelude.Types.Right', V502} -> (begin (V544 = begin (V525 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V460 of {'Core.Context.Context.MkGlobalDef', V503, V504, V505, V506, V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524} -> {'Core.Context.Context.MkGlobalDef', V503, V504, V505, V506, V507, V502, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524} end))), ((begin (V541 = fun (V536) -> fun (V537) -> fun (V538) -> fun (V539) -> fun (V540) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V538, V539, V540)) end end end end end), fun (V542) -> fun (V543) -> ((((V541('erased'))('erased'))(V542))(V543)) end end end((begin (V533 = fun (V527) -> fun (V528) -> fun (V529) -> fun (V530) -> case V530 of {'Prelude.Types.Left', V531} -> {'Prelude.Types.Left', V531}; {'Prelude.Types.Right', V532} -> {'Prelude.Types.Right', (V529(V532))} end end end end end), fun (V534) -> fun (V535) -> ((((V533('erased'))('erased'))(V534))(V535)) end end end(fun (V526) -> {'Builtin.MkUnit'} end))))(V525)) end), V544 end(V499)) end end end end), V545 end(V494)) end end end end), V546 end(V489)) end end end end), V547 end(V484)) end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3)) end), V548 end(V456)) end end end end), V549 end(V419)) end end end end end end; _ -> case V4 of {'TTImp.TTImp.GlobalHint', V550} -> fun (V551) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V551)) end; {'TTImp.TTImp.ExternFn'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Inline'})); {'TTImp.TTImp.ForeignFn', V552} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Inline'})); {'TTImp.TTImp.ForeignExport', V553} -> fun (V554) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'TTImp.TTImp.Invertible'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Invertible'})); {'TTImp.TTImp.Totality', V555} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.SetTotal', V555})); {'TTImp.TTImp.Macro'} -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Core.Context.Context.Macro'})); {'TTImp.TTImp.SpecArgs', V556} -> begin (V562 = begin (V557 = V0), fun (V558) -> begin (V561 = (begin (V559 = V557), fun (V560) -> ('erlang':'get'(V559)) end end(V558))), {'Prelude.Types.Right', V561} end end end), fun (V563) -> begin (V564 = (V562(V563))), case V564 of {'Prelude.Types.Left', V565} -> {'Prelude.Types.Left', V565}; {'Prelude.Types.Right', V566} -> (begin (V693 = begin (V599 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V566 of {'Core.Context.MkDefs', V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, V586, V587, V588, V589, V590, V591, V592, V593, V594, V595, V596, V597, V598} -> V567 end))), fun (V600) -> begin (V601 = (V599(V600))), case V601 of {'Prelude.Types.Left', V602} -> {'Prelude.Types.Left', V602}; {'Prelude.Types.Right', V603} -> (begin (V692 = case V603 of {'Prelude.Types.Just', V604} -> begin (V627 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V566, {'Core.Env.Nil'}, case V604 of {'Core.Context.Context.MkGlobalDef', V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626} -> V607 end))), fun (V628) -> begin (V629 = (V627(V628))), case V629 of {'Prelude.Types.Left', V630} -> {'Prelude.Types.Left', V630}; {'Prelude.Types.Right', V631} -> (begin (V691 = begin (V632 = ('nested--10636-4393--in--un--getNamePos'(V2, V556, V3, V1, V0, 0, V631))), fun (V633) -> begin (V634 = (V632(V633))), case V634 of {'Prelude.Types.Left', V635} -> {'Prelude.Types.Left', V635}; {'Prelude.Types.Right', V636} -> (begin (V690 = begin (V637 = ('nested--10636-4389--in--un--collectDDeps'(V2, V556, V3, V1, V0, V631))), fun (V638) -> begin (V639 = (V637(V638))), case V639 of {'Prelude.Types.Left', V640} -> {'Prelude.Types.Left', V640}; {'Prelude.Types.Right', V641} -> (begin (V689 = begin (V642 = ('nested--10636-4392--in--un--collectSpec'(V2, V556, V3, V1, V0, [], V641, V636, V631))), fun (V643) -> begin (V644 = (V642(V643))), case V644 of {'Prelude.Types.Left', V645} -> {'Prelude.Types.Left', V645}; {'Prelude.Types.Right', V646} -> (begin (V688 = begin (V669 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V604 of {'Core.Context.Context.MkGlobalDef', V647, V648, V649, V650, V651, V652, V653, V654, V655, V656, V657, V658, V659, V660, V661, V662, V663, V664, V665, V666, V667, V668} -> {'Core.Context.Context.MkGlobalDef', V647, V648, V649, V650, V651, V646, V653, V654, V655, V656, V657, V658, V659, V660, V661, V662, V663, V664, V665, V666, V667, V668} end))), ((begin (V685 = fun (V680) -> fun (V681) -> fun (V682) -> fun (V683) -> fun (V684) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V682, V683, V684)) end end end end end), fun (V686) -> fun (V687) -> ((((V685('erased'))('erased'))(V686))(V687)) end end end((begin (V677 = fun (V671) -> fun (V672) -> fun (V673) -> fun (V674) -> case V674 of {'Prelude.Types.Left', V675} -> {'Prelude.Types.Left', V675}; {'Prelude.Types.Right', V676} -> {'Prelude.Types.Right', (V673(V676))} end end end end end), fun (V678) -> fun (V679) -> ((((V677('erased'))('erased'))(V678))(V679)) end end end(fun (V670) -> {'Builtin.MkUnit'} end))))(V669)) end), V688 end(V643)) end end end end), V689 end(V638)) end end end end), V690 end(V633)) end end end end), V691 end(V628)) end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3)) end), V692 end(V600)) end end end end), V693 end(V563)) end end end end end end end end end.
'un--initDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> begin (V11 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, 0, V7))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Core.Context.Context.None'}} end), V17 end(V12)) end end end end; [E0 | E1] -> (fun (V18, V19) -> case V18 of {'TTImp.TTImp.ExternFn'} -> begin (V25 = begin (V20 = V1), fun (V21) -> begin (V24 = (begin (V22 = V20), fun (V23) -> ('erlang':'get'(V22)) end end(V21))), {'Prelude.Types.Right', V24} end end end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V37 = begin (V30 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, V0, V29, V8, V9))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V36 = fun (V35) -> {'Prelude.Types.Right', {'Core.Context.Context.ExternDef', V34}} end), V36 end(V31)) end end end end), V37 end(V26)) end end end end; {'TTImp.TTImp.ForeignFn', V38} -> begin (V44 = begin (V39 = V1), fun (V40) -> begin (V43 = (begin (V41 = V39), fun (V42) -> ('erlang':'get'(V41)) end end(V40))), {'Prelude.Types.Right', V43} end end end), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V63 = begin (V49 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, V0, V48, V8, V9))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V62 = begin (V55 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V54) -> ('un--getFnString'(V1, V2, V3, V4, V5, V54)) end, V38, []))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V61 = fun (V60) -> {'Prelude.Types.Right', {'Core.Context.Context.ForeignDef', V53, V59}} end), V61 end(V56)) end end end end), V62 end(V50)) end end end end), V63 end(V45)) end end end end; {'TTImp.TTImp.ForeignExport', V64} -> begin (V66 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V65) -> ('un--getFnString'(V1, V2, V3, V4, V5, V65)) end, V64, []))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V132 = begin (V72 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V71) -> ('nested--12432-5942--in--un--getConvention'(V0, V64, V19, V9, V8, V7, V6, V5, V4, V3, V2, V1, V71)) end, V70, []))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V131 = begin (V82 = begin (V77 = V1), fun (V78) -> begin (V81 = (begin (V79 = V77), fun (V80) -> ('erlang':'get'(V79)) end end(V78))), {'Prelude.Types.Right', V81} end end end), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V130 = begin (V124 = begin (V87 = V1), fun (V88) -> begin (V123 = (begin (V89 = V87), fun (V90) -> ('erlang':'put'(V89, case V86 of {'Core.Context.MkDefs', V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122} -> {'Core.Context.MkDefs', V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V7, V76, V122))} end)) end end(V88))), {'Prelude.Types.Right', V123} end end end), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V129 = ('un--initDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V19))), V129 end(V125)) end end end end), V130 end(V83)) end end end end), V131 end(V73)) end end end end), V132 end(V67)) end end end end; _ -> ('un--initDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V19)) end end(E0, E1)) end.
'un--getRetTy'(V0, V1) -> case V1 of {'Core.Value.NBind', V2, V3, V4, V5} -> case V4 of {'Core.TT.Pi', V6, V7, V8, V9} -> begin (V10 = ((V5(V0))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V2, {'Core.TT.Placeholder'}}))))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V15 = ('un--getRetTy'(V0, V14))), V15 end(V11)) end end end end; _ -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'(V1)), <<"Can only add hints for concrete return types"/utf8>>}, V16)) end end; {'Core.Value.NTCon', V17, V18, V19, V20, V21} -> fun (V22) -> {'Prelude.Types.Right', V18} end; _ -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'(V1)), <<"Can only add hints for concrete return types"/utf8>>}, V23)) end end.
'un--getFnString'(V0, V1, V2, V3, V4, V5) -> case V5 of {'TTImp.TTImp.IPrimVal', V6, V7} -> case V7 of {'Core.TT.Str', V8} -> fun (V9) -> {'Prelude.Types.Right', V8} end; _ -> begin (V10 = ('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Core.Name.UN', {'Core.Name.Basic', <<"[foreign]"/utf8>>}}))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V44 = begin (V15 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V5))), begin (V16 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'([], {'Core.Env.Nil'}, {'Core.TT.PrimVal', V15, {'Core.TT.PrT', 10}}))), begin (V17 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'([], V0, V1, V2, V3, V4, V14, {'TTImp.Elab.Check.InExpr'}, [], [], {'Core.Env.Nil'}, V5, V16))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V43 = begin (V27 = begin (V22 = V0), fun (V23) -> begin (V26 = (begin (V24 = V22), fun (V25) -> ('erlang':'get'(V24)) end end(V23))), {'Prelude.Types.Right', V26} end end end), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V42 = begin (V32 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V31, {'Core.Env.Nil'}, V21))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V41 = fun (V37) -> case V36 of {'Core.Value.NPrimVal', V38, V39} -> case V39 of {'Core.TT.Str', V40} -> {'Prelude.Types.Right', V40}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V15, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V37)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V15, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V37)) end end), V41 end(V33)) end end end end), V42 end(V28)) end end end end), V43 end(V18)) end end end end end end), V44 end(V11)) end end end end end; _ -> begin (V45 = ('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Core.Name.UN', {'Core.Name.Basic', <<"[foreign]"/utf8>>}}))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V79 = begin (V50 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V5))), begin (V51 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'([], {'Core.Env.Nil'}, {'Core.TT.PrimVal', V50, {'Core.TT.PrT', 10}}))), begin (V52 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'([], V0, V1, V2, V3, V4, V49, {'TTImp.Elab.Check.InExpr'}, [], [], {'Core.Env.Nil'}, V5, V51))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V78 = begin (V62 = begin (V57 = V0), fun (V58) -> begin (V61 = (begin (V59 = V57), fun (V60) -> ('erlang':'get'(V59)) end end(V58))), {'Prelude.Types.Right', V61} end end end), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V77 = begin (V67 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V66, {'Core.Env.Nil'}, V56))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V76 = fun (V72) -> case V71 of {'Core.Value.NPrimVal', V73, V74} -> case V74 of {'Core.TT.Str', V75} -> {'Prelude.Types.Right', V75}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V50, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V72)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V50, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V72)) end end), V76 end(V68)) end end end end), V77 end(V63)) end end end end), V78 end(V53)) end end end end end end), V79 end(V46)) end end end end end.
'un--findInferrable'(V0, V1, V2) -> ('nested--12816-6185--in--un--fi'(V2, V1, V0, 0, 0, [], [], V2)).
'un--checkForShadowing'(V0, V1) -> case V1 of {'TTImp.TTImp.IPi', V2, V3, V4, V5, V6, V7} -> case V5 of {'Prelude.Types.Just', V8} -> case V8 of {'Core.Name.UN', V9} -> case V9 of {'Core.Name.Basic', V10} -> begin (V11 = ('un--checkForShadowing'(('Idris.Idris2.Libraries.Data.StringMap':'un--empty'()), V6))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V10, V0)) of {'Prelude.Types.Just', V12} -> [{'Builtin.MkPair', V10, {'Builtin.MkPair', V12, V2}} | ('un--checkForShadowing'(V0, V7))]; {'Prelude.Types.Nothing'} -> ('un--checkForShadowing'(('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V10, V2, V0)), V7)) end, V11)) end; _ -> [] end; _ -> [] end; _ -> [] end; _ -> [] end.
