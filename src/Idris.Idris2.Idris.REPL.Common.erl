-module('Idris.Idris2.Idris.REPL.Common').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in docsOrSignature-7230'/12,
  'case--case block in emitProblem-6058'/14,
  'case--printWithStatus-5769'/6,
  'nested--14040-7064--in--un--typeSummary'/6,
  'un--updateErrorLine'/2,
  'un--resetContext'/5,
  'un--printWithStatus'/4,
  'un--printResult'/2,
  'un--printError'/2,
  'un--printDocResult'/2,
  'un--iputStrLn'/3,
  'un--getFCLine'/1,
  'un--equivTypes'/3,
  'un--emitWarningsAndErrors'/4,
  'un--emitWarnings'/3,
  'un--emitWarning'/4,
  'un--emitProblem'/8,
  'un--emitError'/4,
  'un--docsOrSignature'/5,
  'un--doPrint'/2
]).
'case--case block in docsOrSignature-7230'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [E0 | E1] -> (fun (V12, V13) -> ('Idris.Idris2.Idris.Doc.String':'un--getDocsForName'(V4, V3, V2, V1, V0, {'Idris.Doc.String.MkConfig', 1, 1, 0, 1})) end(E0, E1)); [] -> ('nested--14040-7064--in--un--typeSummary'(V0, V1, V2, V3, V4, V6)) end.
'case--case block in emitProblem-6058'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Prelude.Types.Nothing'} -> ('un--iputStrLn'(V6, V5, V12)); {'Prelude.Types.Just', V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> begin (V33 = case V15 of {'Core.FC.PhysicalIdrSrc', V19} -> begin (V20 = {'Core.FC.MkFC', {'Core.FC.PhysicalIdrSrc', V19}, V17, V18}), ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(('Idris.Idris2.Core.Directory':'un--nsToSource'(V6, V20, V19)), fun (V21) -> fun (V22) -> {'Prelude.Types.Right', (begin (V24 = fun (V23) -> V23 end), fun (V25) -> (V24(V25)) end end(<<"(File-Not-Found)"/utf8>>))} end end)) end; {'Core.FC.PhysicalPkgSrc', V26} -> fun (V27) -> {'Prelude.Types.Right', V26} end; {'Core.FC.Virtual', V28} -> fun (V29) -> {'Prelude.Types.Right', (begin (V31 = fun (V30) -> V30 end), fun (V32) -> (V31(V32)) end end(<<"(Interactive)"/utf8>>))} end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V51 = begin (V39 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V6, V5, fun (V38) -> ('Idris.Idris2.Idris.IDEMode.Pretty':'un--annToProperties'(V38)) end, V12))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V50 = begin (V44 = {'Builtin.MkPair', V15, {'Builtin.MkPair', V17, V18}}), case V43 of {'Builtin.MkPair', V45, V46} -> ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V6, V10, {'Protocol.IDE.Warning', (begin (V48 = fun (V47) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--cast_Cast_(|((Builtin.Pair FileName) NonEmptyFC),((Builtin.MkPair FileName) NonEmptyFC)|)_FileContext'(V47)) end), fun (V49) -> (V48(V49)) end end({'Builtin.MkPair', V37, V44})), V45, V46, V11})) end end), V50 end(V40)) end end end end), V51 end(V34)) end end end end end end end.
'case--printWithStatus-5769'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.REPL.Opts.REPL', V6} -> case ('un--doPrint'(V0, V6)) of 1 -> begin (V7 = (V2(V1))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V14 = fun (V12) -> begin (V13 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<V11/binary, <<"\x{a}"/utf8>>/binary>>, V12))), {'Prelude.Types.Right', V13} end end), V14 end(V8)) end end end end; 0 -> fun (V15) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; {'Idris.REPL.Opts.IDEMode', V16, V17, V18} -> fun (V19) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'nested--14040-7064--in--un--typeSummary'(V0, V1, V2, V3, V4, V5) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V0, case V5 of {'Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} -> V6 end))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V129 = case V42 of {'Prelude.Types.Just', V43} -> begin (V72 = begin (V66 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V5, {'Core.Env.Nil'}, case V43 of {'Core.Context.Context.MkGlobalDef', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} -> V46 end))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V71 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Core.Env.Nil'}, V70))), V71 end(V67)) end end end end), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V88 = fun (V77) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V78) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V78)) end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Name':'dn--un--prettyPrec_Pretty_Void_Name'(V79, V80)) end end}, V0)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'((begin (V82 = fun (V81) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V81)) end), fun (V83) -> (V82(V83)) end end(<<":"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--prettyBy'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V84) -> ('Idris.Idris2.Idris.Pretty':'dn--un--pretty_Pretty_IdrisSyntax_IPTerm'(V84)) end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Idris.Pretty':'dn--un--prettyPrec_Pretty_IdrisSyntax_IPTerm'(V85, V86)) end end}, fun (V87) -> {'Idris.Doc.Annotations.Syntax', V87} end, V76))))))} end), V88 end(V73)) end end end end; {'Prelude.Types.Nothing'} -> fun (V89) -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V90) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V91) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V91)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V92) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V92)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V93) -> fun (V94) -> case case (V93 =:= V94) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V90)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V95} -> case V95 of {'Builtin.MkPair', V96, V97} -> [V96 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V97))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V90)); 0 -> V90 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V98} -> case V98 of {'Builtin.MkPair', V99, V100} -> [V99 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V100))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V101) -> fun (V102) -> case case (V101 =:= V102) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V90)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V103} -> case V103 of {'Builtin.MkPair', V104, V105} -> [V104 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V105))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V90)); 0 -> V90 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V106} -> case V106 of {'Builtin.MkPair', V107, V108} -> [V107 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V108))] end end)))))))) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V111) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V111)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V112) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V112)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V113) -> fun (V114) -> case case (V113 =:= V114) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V110)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V115} -> case V115 of {'Builtin.MkPair', V116, V117} -> [V116 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V117))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V110)); 0 -> V110 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V118} -> case V118 of {'Builtin.MkPair', V119, V120} -> [V119 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V120))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V121) -> fun (V122) -> case case (V121 =:= V122) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V110)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V123} -> case V123 of {'Builtin.MkPair', V124, V125} -> [V124 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V125))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V110)); 0 -> V110 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V126} -> case V126 of {'Builtin.MkPair', V127, V128} -> [V127 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V128))] end end)))))))) end end}, <<""/utf8>>))} end end), V129 end(V39)) end end end end.
'un--updateErrorLine'(V0, V1) -> case V1 of [] -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V34 = begin (V12 = V0), fun (V13) -> begin (V33 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, {'Prelude.Types.Nothing'}, V24, V25, V26, V27, V28, V29, V30, V31, V32} end)) end end(V13))), {'Prelude.Types.Right', V33} end end end), V34 end(V8)) end end end end; [E0 | E1] -> (fun (V35, V36) -> begin (V42 = begin (V37 = V0), fun (V38) -> begin (V41 = (begin (V39 = V37), fun (V40) -> ('erlang':'get'(V39)) end end(V38))), {'Prelude.Types.Right', V41} end end end), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V70 = begin (V47 = V0), fun (V48) -> begin (V69 = (begin (V49 = V47), fun (V50) -> ('erlang':'put'(V49, case V46 of {'Idris.REPL.Opts.MkREPLOpts', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> {'Idris.REPL.Opts.MkREPLOpts', V51, V52, V53, V54, V55, V56, V57, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Core.Core':'un--getErrorLoc'(V35)), fun (V68) -> ('un--getFCLine'(V68)) end)), V59, V60, V61, V62, V63, V64, V65, V66, V67} end)) end end(V48))), {'Prelude.Types.Right', V69} end end end), V70 end(V43)) end end end end end(E0, E1)) end.
'un--resetContext'(V0, V1, V2, V3, V4) -> begin (V10 = begin (V5 = V0), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V129 = begin (V90 = begin (V15 = ('Idris.Idris2.Core.Context':'un--initDefs'())), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V89 = begin (V20 = V0), fun (V21) -> begin (V88 = (begin (V22 = V20), fun (V23) -> ('erlang':'put'(V22, case V19 of {'Core.Context.MkDefs', V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55} -> {'Core.Context.MkDefs', V24, V25, V26, V27, ('Idris.Idris2.Core.Options':'un--clearNames'(case V14 of {'Core.Context.MkDefs', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} -> V60 end)), V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55} end)) end end(V21))), {'Prelude.Types.Right', V88} end end end), V89 end(V16)) end end end end), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V128 = begin (V95 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V127 = begin (V105 = begin (V100 = V1), fun (V101) -> begin (V104 = (begin (V102 = V100), fun (V103) -> ('erlang':'put'(V102, ('Idris.Idris2.Core.UnifyState':'un--initUState'()))) end end(V101))), {'Prelude.Types.Right', V104} end end end), fun (V106) -> begin (V107 = (V105(V106))), case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> (begin (V126 = begin (V115 = begin (V110 = V2), fun (V111) -> begin (V114 = (begin (V112 = V110), fun (V113) -> ('erlang':'put'(V112, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'()))) end end(V111))), {'Prelude.Types.Right', V114} end end end), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V125 = begin (V120 = V3), fun (V121) -> begin (V124 = (begin (V122 = V120), fun (V123) -> ('erlang':'put'(V122, ('Idris.Idris2.Core.Metadata':'un--initMetadata'(V4)))) end end(V121))), {'Prelude.Types.Right', V124} end end end), V125 end(V116)) end end end end), V126 end(V106)) end end end end), V127 end(V96)) end end end end), V128 end(V91)) end end end end), V129 end(V11)) end end end end.
'un--printWithStatus'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V31 = ('case--printWithStatus-5769'(V3, V2, V1, V0, V13, case V13 of {'Idris.REPL.Opts.MkREPLOpts', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} -> V22 end))), V31 end(V10)) end end end end.
'un--printResult'(V0, V1) -> ('un--printWithStatus'(V0, fun (V2) -> ('Idris.Idris2.Idris.Pretty':'un--render'(V0, V2)) end, V1, 0)).
'un--printError'(V0, V1) -> ('un--printWithStatus'(V0, fun (V2) -> ('Idris.Idris2.Idris.Pretty':'un--render'(V0, V2)) end, V1, 1)).
'un--printDocResult'(V0, V1) -> ('un--printWithStatus'(V0, fun (V2) -> ('Idris.Idris2.Idris.Pretty.Render':'un--render'(V0, fun (V3) -> ('Idris.Idris2.Idris.Doc.Annotations':'un--styleAnn'(V3)) end, V2)) end, V1, 0)).
'un--iputStrLn'(V0, V1, V2) -> begin (V8 = begin (V3 = V1), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V49 = case V12 of {'Idris.REPL.Opts.MkREPLOpts', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> case V21 of {'Idris.REPL.Opts.REPL', V30} -> case V30 of 2 -> begin (V31 = ('Idris.Idris2.Idris.Pretty':'un--render'(V1, V2))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V38 = fun (V36) -> begin (V37 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<V35/binary, <<"\x{a}"/utf8>>/binary>>, V36))), {'Prelude.Types.Right', V37} end end), V38 end(V32)) end end end end; _ -> fun (V39) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; {'Idris.REPL.Opts.IDEMode', V40, V41, V42} -> begin (V43 = ('Idris.Idris2.Idris.Pretty.Render':'un--renderWithoutColor'(V1, V2))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V48 = ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V0, V42, {'Protocol.IDE.WriteString', V47, V40}))), V48 end(V44)) end end end end end end), V49 end(V9)) end end end end.
'un--getFCLine'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Core.FC':'un--startLine'(V1)) end))(('Idris.Idris2.Core.FC':'un--isNonEmptyFC'(V0)))).
'un--equivTypes'(V0, V1, V2) -> case ('Idris.Idris2.Core.TT':'un--isErased'(V1)) of 0 -> begin (V3 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"typesearch.equiv"/utf8>>, 10, fun () -> <<"Candidate: "/utf8>> end, V1))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V96 = begin (V13 = begin (V8 = V0), fun (V9) -> begin (V12 = (begin (V10 = V8), fun (V11) -> ('erlang':'get'(V10)) end end(V9))), {'Prelude.Types.Right', V12} end end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V95 = begin (V31 = begin (V18 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V0, [], V17, {'Core.Env.Nil'}, V1))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V30 = begin (V23 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V0, [], V17, {'Core.Env.Nil'}, V2))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V29 = fun (V28) -> {'Prelude.Types.Right', case (V22 =:= V27) of 'false' -> 0; _ -> 1 end} end), V29 end(V24)) end end end end), V30 end(V19)) end end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V94 = case V35 of 1 -> begin (V36 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'())))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V92 = begin (V72 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V57 = ((('Idris.Idris2.Core.Unify':'un--unify'({'Core.Unify.dn--un--__mkUnify', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V41, V42, V43, V44, V45, V46, V47, V48)) end end end end end end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V49, V50, V51, V52, V53, V54, V55, V56)) end end end end end end end end}, [], V0, V40, ('Idris.Idris2.Core.Unify':'un--inTerm'()), {'Core.FC.EmptyFC'}, {'Core.Env.Nil'}))(V1))(V2))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V69 = case V61 of {'Core.Unify.MkUnifyResult', V62, V63, V64, V65} -> case V62 of [] -> fun (V66) -> case V64 of [] -> case V65 of {'Core.Unify.NoLazy'} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end; _ -> fun (V67) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V68) -> {'Prelude.Types.Right', 0} end end), V69 end(V58)) end end end end, fun (V70) -> fun (V71) -> {'Prelude.Types.Right', 0} end end))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V91 = begin (V84 = case V76 of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, (begin (V78 = fun (V77) -> V77 end), fun (V79) -> (V78(V79)) end end(<<"typesearch.equiv"/utf8>>)), 20, fun () -> (begin (V81 = fun (V80) -> V80 end), fun (V82) -> (V81(V82)) end end(<<"Accepted: "/utf8>>)) end, V1)); 0 -> fun (V83) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V90 = fun (V89) -> {'Prelude.Types.Right', V76} end), V90 end(V85)) end end end end), V91 end(V73)) end end end end), V92 end(V37)) end end end end; 0 -> fun (V93) -> {'Prelude.Types.Right', 0} end end), V94 end(V32)) end end end end), V95 end(V14)) end end end end), V96 end(V4)) end end end end; _ -> fun (V97) -> {'Prelude.Types.Right', 0} end end.
'un--emitWarningsAndErrors'(V0, V1, V2, V3) -> begin (V4 = ('un--emitWarnings'(V0, V1, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V17 = begin (V10 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V9) -> ('un--emitError'(V0, V1, V2, V9)) end, V3))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', V8} end), V16 end(V11)) end end end end), V17 end(V5)) end end end end.
'un--emitWarnings'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V127 = begin (V45 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V42 end))), begin (V46 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V126 = case case V50 of {'Core.Options.MkSessionOpts', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76} -> V71 end of 1 -> begin (V85 = ((begin (V82 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V80, V81)) end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V77) -> {'Core.Core.WarningAsError', V77} end))(V45))), begin (V87 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V86) -> ('un--emitError'(V0, V1, V2, V86)) end, V85))), ((begin (V103 = fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V100, V101, V102)) end end end end end), fun (V104) -> fun (V105) -> ((((V103('erased'))('erased'))(V104))(V105)) end end end((begin (V95 = fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> {'Prelude.Types.Right', (V91(V94))} end end end end end), fun (V96) -> fun (V97) -> ((((V95('erased'))('erased'))(V96))(V97)) end end end(fun (V88) -> V85 end))))(V87)) end end; 0 -> begin (V107 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V106) -> ('un--emitWarning'(V0, V1, V2, V106)) end, V45))), ((begin (V123 = fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V120, V121, V122)) end end end end end), fun (V124) -> fun (V125) -> ((((V123('erased'))('erased'))(V124))(V125)) end end end((begin (V115 = fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> {'Prelude.Types.Right', (V111(V114))} end end end end end), fun (V116) -> fun (V117) -> ((((V115('erased'))('erased'))(V116))(V117)) end end end(fun (V108) -> [] end))))(V107)) end end), V126 end(V47)) end end end end end), V127 end(V9)) end end end end.
'un--emitWarning'(V0, V1, V2, V3) -> ('un--emitProblem'(V0, V1, V2, V3, fun (V4) -> ('Idris.Idris2.Idris.Error':'un--displayWarning'(V0, V2, V1, V4)) end, fun (V5) -> ('Idris.Idris2.Idris.Error':'un--pwarning'(V0, V2, V1, V5)) end, fun (V6) -> ('Idris.Idris2.Core.Core':'un--getWarningLoc'(V6)) end, 2)).
'un--emitProblem'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V13 = begin (V8 = V1), fun (V9) -> begin (V12 = (begin (V10 = V8), fun (V11) -> ('erlang':'get'(V10)) end end(V9))), {'Prelude.Types.Right', V12} end end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V60 = case V17 of {'Idris.REPL.Opts.MkREPLOpts', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} -> case V26 of {'Idris.REPL.Opts.REPL', V35} -> begin (V36 = (V4(V3))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V42 = ('un--printWithStatus'(V1, fun (V41) -> ('Idris.Idris2.Idris.Pretty':'un--render'(V1, V41)) end, V40, V7))), V42 end(V37)) end end end end; {'Idris.REPL.Opts.IDEMode', V43, V44, V45} -> begin (V46 = (V5(V3))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V59 = ('case--case block in emitProblem-6058'(V7, V6, V5, V4, V2, V1, V0, V17, V44, V3, V45, V43, V50, ((begin (V56 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V54, V55)) end end end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end(fun (V51) -> ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V51)) end))((V6(V3))))))), V59 end(V47)) end end end end end end), V60 end(V14)) end end end end.
'un--emitError'(V0, V1, V2, V3) -> ('un--emitProblem'(V0, V1, V2, V3, fun (V4) -> ('Idris.Idris2.Idris.Error':'un--display'(V0, V2, V1, V4)) end, fun (V5) -> ('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V1, V5)) end, fun (V6) -> ('Idris.Idris2.Core.Core':'un--getErrorLoc'(V6)) end, 1)).
'un--docsOrSignature'(V0, V1, V2, V3, V4) -> begin (V10 = begin (V5 = V2), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V92 = begin (V20 = begin (V15 = V1), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V91 = begin (V57 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V4, case V24 of {'Core.Context.MkDefs', V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56} -> V25 end))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V90 = case V61 of [E0 | E1] -> (fun (V62, V63) -> begin (V64 = [V62 | V63]), begin (V65 = [V62 | V63]), ('case--case block in docsOrSignature-7230'(V4, V3, V2, V1, V0, V14, V24, V63, V62, V64, V65, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V66, V67)) end end, []}, fun (V68) -> ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(V68, case V14 of {'Idris.Syntax.MkSyntax', V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81} -> V77 end)) end, ((begin (V87 = fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V85, V86)) end end end end), fun (V88) -> fun (V89) -> ((((V87('erased'))('erased'))(V88))(V89)) end end end(fun (V82) -> ('Idris.Idris2.Builtin':'un--fst'(V82)) end))(V65)))))) end end end(E0, E1)); _ -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V3, V4)) end), V90 end(V58)) end end end end), V91 end(V21)) end end end end), V92 end(V11)) end end end end.
'un--doPrint'(V0, V1) -> case V0 of 0 -> case V1 of 2 -> 1; 1 -> 1; 0 -> 1 end; 1 -> case V1 of 2 -> 1; 1 -> 1; 0 -> 0 end; 2 -> case V1 of 2 -> 1; 1 -> 0; 0 -> 0 end end.
