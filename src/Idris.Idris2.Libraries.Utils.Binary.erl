-module('Idris.Idris2.Libraries.Utils.Binary').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--writeToFile'/3,
  'un--toRead'/1,
  'un--readFromFile'/2,
  'un--nonEmptyRev'/1,
  'un--newBinary'/2,
  'un--incLoc'/2,
  'un--fromBuffer'/2,
  'un--dumpBin'/2,
  'un--blockSize'/0,
  'un--avail'/1,
  'un--appended'/2
]).
'un--writeToFile'(V0, V1, V2) -> begin (V39 = (('Idris.Idris2.Erlang.Data.Buffer':'un--writeBufferToFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V0, case V1 of {'Libraries.Utils.Binary.MkBin', V30, V31, V32, V33} -> V30 end, begin (V38 = case V1 of {'Libraries.Utils.Binary.MkBin', V34, V35, V36, V37} -> V37 end), case ((V38 band 9223372036854775808) =/= 0) of 'true' -> (V38 bor -9223372036854775808); _ -> (V38 band 9223372036854775807) end end))(V2))), case V39 of {'Prelude.Types.Right', V40} -> {'Prelude.Types.Right', V40}; {'Prelude.Types.Left', V41} -> case V41 of {'Builtin.MkPair', V42, V43} -> {'Prelude.Types.Left', V42} end end end.
'un--toRead'(V0) -> (case V0 of {'Libraries.Utils.Binary.MkBin', V1, V2, V3, V4} -> V4 end - case V0 of {'Libraries.Utils.Binary.MkBin', V5, V6, V7, V8} -> V6 end).
'un--readFromFile'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.Data.Buffer':'un--createBufferFromFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Prelude.Types.Right', V30} -> begin (V58 = (('Idris.Idris2.Erlang.Data.Buffer':'un--rawSize'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, fun (V56) -> fun (V57) -> V57 end end}, V30))(V1))), begin (V62 = (begin (V60 = fun (V59) -> V59 end), fun (V61) -> (V60(V61)) end end(V58))), {'Prelude.Types.Right', {'Libraries.Utils.Binary.MkBin', V30, 0, V62, V62}} end end; {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63} end end.
'un--nonEmptyRev'(V0) -> case V0 of [] -> {'Data.List.IsNonEmpty'}; [E0 | E1] -> (fun (V1, V2) -> {'Data.List.IsNonEmpty'} end(E0, E1)) end.
'un--newBinary'(V0, V1) -> {'Libraries.Utils.Binary.MkBin', V0, 0, V1, 0}.
'un--incLoc'(V0, V1) -> case V1 of {'Libraries.Utils.Binary.MkBin', V2, V3, V4, V5} -> {'Libraries.Utils.Binary.MkBin', V2, (V3 + V0), V4, V5} end.
'un--fromBuffer'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.Data.Buffer':'un--rawSize'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), begin (V30 = V29), {'Libraries.Utils.Binary.MkBin', V0, 0, V30, V30} end end.
'un--dumpBin'(V0, V1) -> begin (V33 = (('Idris.Idris2.Erlang.Data.Buffer':'un--bufferData'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, case V0 of {'Libraries.Utils.Binary.MkBin', V29, V30, V31, V32} -> V29 end))(V1))), ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V35, V36)) end end}, V33))/binary, <<"\x{a}"/utf8>>/binary>>, V1)) end.
'un--blockSize'() -> begin (V0 = 655360), case ((V0 band 9223372036854775808) =/= 0) of 'true' -> (V0 bor -9223372036854775808); _ -> (V0 band 9223372036854775807) end end.
'un--avail'(V0) -> ((case V0 of {'Libraries.Utils.Binary.MkBin', V1, V2, V3, V4} -> V3 end - case V0 of {'Libraries.Utils.Binary.MkBin', V5, V6, V7, V8} -> V6 end) - 1).
'un--appended'(V0, V1) -> case V1 of {'Libraries.Utils.Binary.MkBin', V2, V3, V4, V5} -> {'Libraries.Utils.Binary.MkBin', V2, (V3 + V0), V4, (V5 + V0)} end.
