-module('Idris.Idris2.Idris.IDEMode.Holes').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--isHole-8194'/2,
  'nested--10219-8110--in--un--prettyHole'/2,
  'nested--10736-8620--in--un--dropShadows'/9,
  'dn--un--show_Show_Holes.Premise'/1,
  'dn--un--showPrec_Show_Holes.Premise'/2,
  'dn--un--pretty_Pretty_IdrisSyntax_Holes.Premise'/1,
  'dn--un--prettyPrec_Pretty_IdrisSyntax_Holes.Premise'/2,
  'dn--un--__Impl_Show_Holes.Premise'/0,
  'dn--un--__Impl_Pretty_IdrisSyntax_Holes.Premise'/0,
  'un--showName'/1,
  'un--showHole'/8,
  'un--prettyRigHole'/1,
  'un--prettyImpBracket'/2,
  'un--prettyHoles'/1,
  'un--prettyHole'/8,
  'un--premiseIDE'/1,
  'un--isHole'/1,
  'un--impBracket'/2,
  'un--holeIDE'/1,
  'un--holeData'/8,
  'un--getUserHolesData'/2,
  'un--extractHoleData'/8
]).
'case--isHole-8194'(V0, V1) -> case V1 of {'Core.Context.Context.Hole', V2, V3} -> {'Prelude.Types.Just', V2}; {'Core.Context.Context.PMDef', V4, V5, V6, V7, V8} -> case V4 of {'Core.Context.Context.MkPMDefInfo', V9, V10, V11} -> case V9 of {'Core.Context.Context.NotHole'} -> {'Prelude.Types.Nothing'}; {'Core.Context.Context.SolvedHole', V12} -> {'Prelude.Types.Just', V12} end end; {'Core.Context.Context.None'} -> {'Prelude.Types.Just', 0}; _ -> {'Prelude.Types.Nothing'} end.
'nested--10219-8110--in--un--prettyHole'(V0, V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V2)) end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--prettyPrec_Pretty_Void_Name'(V3, V4)) end end}, case V1 of {'Idris.IDEMode.Holes.MkHoleData', V5, V6, V7} -> V5 end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('Idris.Idris2.Idris.Pretty':'dn--un--pretty_Pretty_IdrisSyntax_IPTerm'(case V1 of {'Idris.IDEMode.Holes.MkHoleData', V8, V9, V10} -> V9 end)))))).
'nested--10736-8620--in--un--dropShadows'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> []; [E0 | E1] -> (fun (V9, V10) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V26, V27, V28, V29)) end end end end end end end, fun (V30) -> fun (V31) -> V31 end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V34, V35, V36)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V39, V40)) end end}, case V9 of {'Idris.IDEMode.Holes.MkHolePremise', V41, V42, V43, V44} -> V41 end, ((begin (V54 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V52, V53)) end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V45) -> case V45 of {'Idris.IDEMode.Holes.MkHolePremise', V46, V47, V48, V49} -> V46 end end))(V10)))) of 1 -> ('nested--10736-8620--in--un--dropShadows'(V0, V1, V2, V3, V4, V5, V6, V7, V10)); 0 -> [V9 | ('nested--10736-8620--in--un--dropShadows'(V0, V1, V2, V3, V4, V5, V6, V7, V10))] end end(E0, E1)) end.
'dn--un--show_Show_Holes.Premise'(V0) -> <<<<" "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V1, V2, V3, V4} -> V3 end))/binary, <<<<" "/utf8>>/binary, ('un--impBracket'(case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V5, V6, V7, V8} -> V8 end, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V9, V10, V11, V12} -> V9 end))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V13, V14, V15, V16} -> V14 end))/binary>>/binary>>))/binary>>/binary>>/binary>>.
'dn--un--showPrec_Show_Holes.Premise'(V0, V1) -> ('dn--un--show_Show_Holes.Premise'(V1)).
'dn--un--pretty_Pretty_IdrisSyntax_Holes.Premise'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('un--prettyRigHole'(case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V1, V2, V3, V4} -> V3 end)), ('un--prettyImpBracket'(case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V5, V6, V7, V8} -> V8 end, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--prettyPrec_Pretty_Void_Name'(V10, V11)) end end}, case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V12, V13, V14, V15} -> V12 end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('Idris.Idris2.Idris.Pretty':'dn--un--pretty_Pretty_IdrisSyntax_IPTerm'(case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V16, V17, V18, V19} -> V17 end)))))))))).
'dn--un--prettyPrec_Pretty_IdrisSyntax_Holes.Premise'(V0, V1) -> ('dn--un--pretty_Pretty_IdrisSyntax_Holes.Premise'(V1)).
'dn--un--__Impl_Show_Holes.Premise'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Holes.Premise'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Holes.Premise'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_IdrisSyntax_Holes.Premise'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_IdrisSyntax_Holes.Premise'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_IdrisSyntax_Holes.Premise'(V1, V2)) end end}.
'un--showName'(V0) -> case V0 of {'Core.Name.UN', V1} -> case V1 of {'Core.Name.Underscore'} -> 0; _ -> 1 end; {'Core.Name.MN', V2, V3} -> 0; _ -> 1 end.
'un--showHole'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('un--holeData'(V0, V1, V2, V3, V4, V5, V6, V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V40 = fun (V13) -> case V12 of {'Idris.IDEMode.Holes.MkHoleData', V14, V15, V16} -> case V16 of [] -> {'Prelude.Types.Right', <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V12 of {'Idris.IDEMode.Holes.MkHoleData', V17, V18, V19} -> V17 end))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(case V12 of {'Idris.IDEMode.Holes.MkHoleData', V20, V21, V22} -> V21 end))/binary>>/binary>>}; _ -> {'Prelude.Types.Right', <<('Idris.Idris2.Data.String':'un--fastUnlines'(((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V26) -> ('dn--un--show_Show_Holes.Premise'(V26)) end))(case V12 of {'Idris.IDEMode.Holes.MkHoleData', V23, V24, V25} -> V25 end))))/binary, <<<<"-------------------------------------\x{a}"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'un--nameRoot'(case V12 of {'Idris.IDEMode.Holes.MkHoleData', V34, V35, V36} -> V34 end))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(case V12 of {'Idris.IDEMode.Holes.MkHoleData', V37, V38, V39} -> V38 end))/binary>>/binary>>/binary>>/binary>>} end end end), V40 end(V9)) end end end end.
'un--prettyRigHole'(V0) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V1) -> fun (V2) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1, V2)) end end, 0, fun (V3) -> fun (V4) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V3, V4)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V7, V8)) end end}}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Idris.Pretty.Annotations':'un--keyword'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_Char'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_Char'(V10, V11)) end end}, (begin (V13 = fun (V12) -> V12 end), fun (V14) -> (V13(V14)) end end($0)))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Idris.Pretty.Annotations':'un--keyword'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V15) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_Char'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_Char'(V16, V17)) end end}, (begin (V19 = fun (V18) -> V18 end), fun (V20) -> (V19(V20)) end end($1)))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), fun (V21) -> ((begin (V24 = fun (V22) -> fun (V23) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V22, V23)) end end), fun (V25) -> fun (V26) -> ((V24(V25))(V26)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'())))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))) end, V0)).
'un--prettyImpBracket'(V0, V1) -> case V0 of 0 -> V1; 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--braces'(V1)) end.
'un--prettyHoles'(V0) -> case V0 of [] -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V2)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V3)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V4) -> fun (V5) -> case case (V4 =:= V5) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V1)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> [V7 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V8))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V1)); 0 -> V1 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> [V10 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V11))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V12) -> fun (V13) -> case case (V12 =:= V13) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V1)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> [V15 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V16))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V1)); 0 -> V1 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> [V18 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V19))] end end)))))))) end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V22) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V22)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V23) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V23)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V24) -> fun (V25) -> case case (V24 =:= V25) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V21)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V26} -> case V26 of {'Builtin.MkPair', V27, V28} -> [V27 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V28))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V21)); 0 -> V21 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V29} -> case V29 of {'Builtin.MkPair', V30, V31} -> [V30 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V31))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V32) -> fun (V33) -> case case (V32 =:= V33) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V21)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V34} -> case V34 of {'Builtin.MkPair', V35, V36} -> [V35 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V36))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V21)); 0 -> V21 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V37} -> case V37 of {'Builtin.MkPair', V38, V39} -> [V38 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V39))] end end)))))))) end end}, <<"No holes"/utf8>>)); [E0 | E1] -> (fun (V40, V41) -> case V41 of [] -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(((begin (V47 = fun (V45) -> fun (V46) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V45, V46)) end end), fun (V48) -> fun (V49) -> ((V47(V48))(V49)) end end end((begin (V43 = fun (V42) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V42)) end), fun (V44) -> (V43(V44)) end end(<<"1 hole"/utf8>>))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('nested--10219-8110--in--un--prettyHole'(V0, V40)))); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V50) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V50)) end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V51, V52)) end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)))))), ((begin (V58 = fun (V56) -> fun (V57) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V56, V57)) end end), fun (V59) -> fun (V60) -> ((V58(V59))(V60)) end end end((begin (V54 = fun (V53) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V53)) end), fun (V55) -> (V54(V55)) end end(<<"holes"/utf8>>))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))))) | ((begin (V66 = fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V64, V65)) end end end end), fun (V67) -> fun (V68) -> ((((V66('erased'))('erased'))(V67))(V68)) end end end(fun (V61) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('nested--10219-8110--in--un--prettyHole'(V0, V61)))) end))(V0))])) end end(E0, E1)); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V69) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V69)) end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V70, V71)) end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)))))), ((begin (V77 = fun (V75) -> fun (V76) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V75, V76)) end end), fun (V78) -> fun (V79) -> ((V77(V78))(V79)) end end end((begin (V73 = fun (V72) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V72)) end), fun (V74) -> (V73(V74)) end end(<<"holes"/utf8>>))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))))) | ((begin (V85 = fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V83, V84)) end end end end), fun (V86) -> fun (V87) -> ((((V85('erased'))('erased'))(V86))(V87)) end end end(fun (V80) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('nested--10219-8110--in--un--prettyHole'(V0, V80)))) end))(V0))])) end.
'un--prettyHole'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('un--holeData'(V0, V1, V2, V3, V4, V5, V6, V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V49 = fun (V13) -> case V12 of {'Idris.IDEMode.Holes.MkHoleData', V14, V15, V16} -> case V16 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V17)) end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--prettyPrec_Pretty_Void_Name'(V18, V19)) end end}, case V12 of {'Idris.IDEMode.Holes.MkHoleData', V20, V21, V22} -> V20 end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('Idris.Idris2.Idris.Pretty':'dn--un--pretty_Pretty_IdrisSyntax_IPTerm'(case V12 of {'Idris.IDEMode.Holes.MkHoleData', V23, V24, V25} -> V24 end))))))}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(1, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(((begin (V34 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V32, V33)) end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V29) -> ('dn--un--pretty_Pretty_IdrisSyntax_Holes.Premise'(V29)) end))(case V12 of {'Idris.IDEMode.Holes.MkHoleData', V26, V27, V28} -> V28 end)))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hardline'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V37) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V38, V39)) end end}, ('Idris.Idris2.Data.String':'un--replicate'(30, $-)))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hardline'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V40) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V41, V42)) end end}, ('Idris.Idris2.Core.Name':'un--nameRoot'(case V12 of {'Idris.IDEMode.Holes.MkHoleData', V43, V44, V45} -> V43 end)))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('Idris.Idris2.Idris.Pretty':'dn--un--pretty_Pretty_IdrisSyntax_IPTerm'(case V12 of {'Idris.IDEMode.Holes.MkHoleData', V46, V47, V48} -> V47 end))))))} end end end), V49 end(V9)) end end end end.
'un--premiseIDE'(V0) -> {'Protocol.IDE.Holes.MkHolePremise', <<<<" "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V1, V2, V3, V4} -> V3 end))/binary, <<<<" "/utf8>>/binary, ('un--impBracket'(case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V5, V6, V7, V8} -> V8 end, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V9, V10, V11, V12} -> V9 end))))/binary>>/binary>>/binary>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(case V0 of {'Idris.IDEMode.Holes.MkHolePremise', V13, V14, V15, V16} -> V14 end))}.
'un--isHole'(V0) -> ('case--isHole-8194'(V0, case V0 of {'Core.Context.Context.MkGlobalDef', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22} -> V18 end)).
'un--impBracket'(V0, V1) -> case V0 of 0 -> V1; 1 -> <<<<"{"/utf8>>/binary, <<V1/binary, <<"}"/utf8>>/binary>>/binary>> end.
'un--holeIDE'(V0) -> {'Protocol.IDE.Holes.MkHoleData', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V0 of {'Idris.IDEMode.Holes.MkHoleData', V1, V2, V3} -> V1 end)), ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(case V0 of {'Idris.IDEMode.Holes.MkHoleData', V4, V5, V6} -> V5 end)), ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('un--premiseIDE'(V10)) end))(case V0 of {'Idris.IDEMode.Holes.MkHoleData', V7, V8, V9} -> V9 end))}.
'un--holeData'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('un--extractHoleData'(V0, V1, V2, V3, V4, V5, V6, V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V27 = begin (V13 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V1))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V26 = fun (V18) -> {'Prelude.Types.Right', case case V17 of {'Core.Options.MkPPOpts', V19, V20, V21, V22} -> V19 end of 1 -> V12; 0 -> case V12 of {'Idris.IDEMode.Holes.MkHoleData', V23, V24, V25} -> {'Idris.IDEMode.Holes.MkHoleData', V23, V24, ('nested--10736-8620--in--un--dropShadows'(V0, V7, V6, V5, V4, V3, V2, V1, V25))} end end} end), V26 end(V14)) end end end end), V27 end(V9)) end end end end.
'un--getUserHolesData'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V96 = begin (V44 = case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end), begin (V45 = ('Idris.Idris2.Core.Context':'un--getUserHoles'(V0))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V95 = begin (V51 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V50) -> ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V50, V44)) end, V49, []))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V94 = begin (V59 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V56, V57)) end end, []}, fun (V58) -> V58 end, V55))), begin (V66 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V60) -> case V60 of {'Builtin.MkPair', V61, V62} -> case V62 of {'Builtin.MkPair', V63, V64} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--isHole'(V64)), fun (V65) -> {'Prelude.Types.Just', {'Builtin.MkPair', V61, {'Builtin.MkPair', V64, V65}}} end)) end end end, V59))), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V67) -> case V67 of {'Builtin.MkPair', V68, V69} -> case V69 of {'Builtin.MkPair', V70, V71} -> ('un--holeData'([], V0, V1, V11, {'Core.Env.Nil'}, V68, V71, case V70 of {'Core.Context.Context.MkGlobalDef', V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93} -> V74 end)) end end end, V66, [])) end end), V94 end(V52)) end end end end), V95 end(V46)) end end end end end), V96 end(V8)) end end end end.
'un--extractHoleData'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of 0 -> begin (V8 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V3, V4, V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V46 = begin (V13 = ('Idris.Idris2.Idris.Resugar':'un--resugar'(V0, V1, V2, V4, V12))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V45 = begin (V38 = begin (V22 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V20, V21)) end end}, V7))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V37 = begin (V31 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V29, V30)) end end}, V12))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V36 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"ide-mode.hole"/utf8>>, 20, fun () -> <<<<"Return type: "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V26))/binary, <<<<"\x{a}  Evaluated to: "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V35))/binary, <<<<"\x{a}  Resugared to: "/utf8>>/binary, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V17))/binary>>/binary>>/binary>>/binary>>/binary>> end))), V36 end(V32)) end end end end), V37 end(V23)) end end end end), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V44 = fun (V43) -> {'Prelude.Types.Right', {'Idris.IDEMode.Holes.MkHoleData', V5, V17, []}} end), V44 end(V39)) end end end end), V45 end(V14)) end end end end), V46 end(V9)) end end end end; _ -> begin (V47 = (V6 - 1)), case V7 of {'Core.TT.Bind', V48, V49, V50, V51} -> case V50 of {'Core.TT.Let', V52, V53, V54, V55} -> ('un--extractHoleData'(V0, V1, V2, V3, V4, V5, V47, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V54, V51)))); _ -> begin (V56 = ('un--extractHoleData'([V49 | V0], V1, V2, V3, {'Core.Env.::', V50, V4}, V5, V47, V51))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V91 = case ('un--showName'(V49)) of 1 -> begin (V61 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"ide-mode.hole"/utf8>>, 10, fun () -> <<<<"Showing name: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V49))/binary>> end))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V83 = begin (V72 = begin (V66 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V3, V4, ('Idris.Idris2.Core.TT':'un--binderType'(V50))))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V71 = ('Idris.Idris2.Idris.Resugar':'un--resugar'(V0, V1, V2, V4, V70))), V71 end(V67)) end end end end), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V82 = begin (V77 = {'Idris.IDEMode.Holes.MkHolePremise', V49, V76, ('Idris.Idris2.Core.TT':'un--multiplicity'(V50)), ('Idris.Idris2.Core.TT':'un--isImplicit'(V50))}), fun (V78) -> {'Prelude.Types.Right', case V60 of {'Idris.IDEMode.Holes.MkHoleData', V79, V80, V81} -> {'Idris.IDEMode.Holes.MkHoleData', V79, V80, [V77 | V81]} end} end end), V82 end(V73)) end end end end), V83 end(V62)) end end end end; 0 -> begin (V84 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"ide-mode.hole"/utf8>>, 10, fun () -> <<<<"Not showing name: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V49))/binary>> end))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V90 = fun (V89) -> {'Prelude.Types.Right', V60} end), V90 end(V85)) end end end end end), V91 end(V57)) end end end end end; _ -> begin (V92 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V3, V4, V7))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V130 = begin (V97 = ('Idris.Idris2.Idris.Resugar':'un--resugar'(V0, V1, V2, V4, V96))), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V129 = begin (V122 = begin (V106 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V102, V103)) end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V104, V105)) end end}, V7))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V121 = begin (V115 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V111, V112)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V113, V114)) end end}, V96))), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V120 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"ide-mode.hole"/utf8>>, 20, fun () -> <<<<"Return type: "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V110))/binary, <<<<"\x{a}  Evaluated to: "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V119))/binary, <<<<"\x{a}  Resugared to: "/utf8>>/binary, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V101))/binary>>/binary>>/binary>>/binary>>/binary>> end))), V120 end(V116)) end end end end), V121 end(V107)) end end end end), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V128 = fun (V127) -> {'Prelude.Types.Right', {'Idris.IDEMode.Holes.MkHoleData', V5, V101, []}} end), V128 end(V123)) end end end end), V129 end(V98)) end end end end), V130 end(V93)) end end end end end end end.
