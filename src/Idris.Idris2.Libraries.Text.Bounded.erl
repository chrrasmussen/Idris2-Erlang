-module('Idris.Idris2.Libraries.Text.Bounded').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--traverse_Traversable_WithBounds'/3,
  'dn--un--toList_Foldable_WithBounds'/1,
  'dn--un--show_Show_Bounds'/1,
  'dn--un--show_Show_(WithBounds $ty)'/2,
  'dn--un--showPrec_Show_Bounds'/2,
  'dn--un--showPrec_Show_(WithBounds $ty)'/3,
  'dn--un--null_Foldable_WithBounds'/1,
  'dn--un--map_Functor_WithBounds'/2,
  'dn--un--foldr_Foldable_WithBounds'/3,
  'dn--un--foldl_Foldable_WithBounds'/3,
  'dn--un--foldlM_Foldable_WithBounds'/4,
  'dn--un--foldMap_Foldable_WithBounds'/3,
  'dn--un--__Impl_Traversable_WithBounds'/0,
  'dn--un--__Impl_Show_(WithBounds $ty)'/1,
  'dn--un--__Impl_Functor_WithBounds'/4,
  'dn--un--__Impl_Foldable_WithBounds'/0,
  'dn--un--__Impl_Eq_Bounds'/0,
  'dn--un--__Impl_Eq_(WithBounds $ty)'/1,
  'dn--un--==_Eq_Bounds'/2,
  'dn--un--==_Eq_(WithBounds $ty)'/3,
  'dn--un--/=_Eq_Bounds'/2,
  'dn--un--/=_Eq_(WithBounds $ty)'/3,
  'un--startBounds'/1,
  'un--start'/1,
  'un--removeIrrelevance'/1,
  'un--mergeBounds'/2,
  'un--joinBounds'/1,
  'un--irrelevantBounds'/1,
  'un--endBounds'/1,
  'un--end'/1
]).
'dn--un--traverse_Traversable_WithBounds'(V0, V1, V2) -> case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> ((begin (V10 = case V0 of {'Prelude.Interfaces.MkApplicative', V7, V8, V9} -> V7 end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V6) -> {'Libraries.Text.Bounded.MkBounded', V6, V4, V5} end))((V1(V3)))) end.
'dn--un--toList_Foldable_WithBounds'(V0) -> ('dn--un--foldr_Foldable_WithBounds'(fun (V1) -> fun (V2) -> [V1 | V2] end end, [], V0)).
'dn--un--show_Show_Bounds'(V0) -> ('dn--un--showPrec_Show_Bounds'({'Prelude.Show.Open'}, V0)).
'dn--un--show_Show_(WithBounds $ty)'(V0, V1) -> ('dn--un--showPrec_Show_(WithBounds $ty)'(V0, {'Prelude.Show.Open'}, V1)).
'dn--un--showPrec_Show_Bounds'(V0, V1) -> case V1 of {'Libraries.Text.Bounded.MkBounds', V2, V3, V4, V5} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"MkBounds"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V6) -> fun (V7) -> <<V6/binary, V7/binary>> end end, <<""/utf8>>}, fun (V8) -> V8 end, [('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V10, V11)) end end}, V2)) | [('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V13, V14)) end end}, V3)) | [('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V16, V17)) end end}, V4)) | [('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V19, V20)) end end}, V5)) | []]]]])))) end.
'dn--un--showPrec_Show_(WithBounds $ty)'(V0, V1, V2) -> case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V1, <<"MkBounded"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V6) -> fun (V7) -> <<V6/binary, V7/binary>> end end, <<""/utf8>>}, fun (V8) -> V8 end, [('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Bool'(V10, V11)) end end}, V4)) | [('Idris.Idris2.Prelude.Show':'un--showArg'(V0, V3)) | [('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V12) -> ('dn--un--show_Show_Bounds'(V12)) end, fun (V13) -> fun (V14) -> ('dn--un--showPrec_Show_Bounds'(V13, V14)) end end}, V5)) | []]]])))) end.
'dn--un--null_Foldable_WithBounds'(V0) -> (('dn--un--foldr_Foldable_WithBounds'(fun (V1) -> fun (V2) -> fun () -> 0 end end end, fun () -> 1 end, V0))()).
'dn--un--map_Functor_WithBounds'(V0, V1) -> case V1 of {'Libraries.Text.Bounded.MkBounded', V2, V3, V4} -> {'Libraries.Text.Bounded.MkBounded', (V0(V2)), V3, V4} end.
'dn--un--foldr_Foldable_WithBounds'(V0, V1, V2) -> ((V0(case V2 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> V3 end))(V1)).
'dn--un--foldl_Foldable_WithBounds'(V0, V1, V2) -> (('dn--un--foldr_Foldable_WithBounds'(fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> fun (V7) -> (V5((V6(V7)))) end end end, fun (V8) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V0, V3, V8)) end, V4)) end end, fun (V9) -> V9 end, V2))(V1)).
'dn--un--foldlM_Foldable_WithBounds'(V0, V1, V2, V3) -> ('dn--un--foldl_Foldable_WithBounds'(fun (V4) -> fun (V5) -> case V0 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V5, V9)) end)) end end end, case V0 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> ((V14('erased'))(V2)) end end, V3)).
'dn--un--foldMap_Foldable_WithBounds'(V0, V1, V2) -> ('dn--un--foldr_Foldable_WithBounds'(fun (V3) -> (begin (V6 = case V0 of {'Prelude.Interfaces.MkMonoid', V4, V5} -> V4 end), fun (V7) -> fun (V8) -> ((V6(V7))(V8)) end end end((V1(V3)))) end, case V0 of {'Prelude.Interfaces.MkMonoid', V9, V10} -> V10 end, V2)).
'dn--un--__Impl_Traversable_WithBounds'() -> {'Prelude.Interfaces.MkTraversable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_WithBounds'(V2, V3)) end end end end, {'Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--foldr_Foldable_WithBounds'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--foldl_Foldable_WithBounds'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('dn--un--null_Foldable_WithBounds'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--foldlM_Foldable_WithBounds'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('dn--un--toList_Foldable_WithBounds'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--foldMap_Foldable_WithBounds'(V27, V28, V29)) end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--traverse_Traversable_WithBounds'(V33, V34, V35)) end end end end end end}.
'dn--un--__Impl_Show_(WithBounds $ty)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(WithBounds $ty)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(WithBounds $ty)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Functor_WithBounds'(V0, V1, V2, V3) -> ('dn--un--map_Functor_WithBounds'(V2, V3)).
'dn--un--__Impl_Foldable_WithBounds'() -> {'Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--foldr_Foldable_WithBounds'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--foldl_Foldable_WithBounds'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('dn--un--null_Foldable_WithBounds'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--foldlM_Foldable_WithBounds'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('dn--un--toList_Foldable_WithBounds'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--foldMap_Foldable_WithBounds'(V23, V24, V25)) end end end end end}.
'dn--un--__Impl_Eq_Bounds'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Bounds'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Bounds'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(WithBounds $ty)'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(WithBounds $ty)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_(WithBounds $ty)'(V0, V3, V4)) end end}.
'dn--un--==_Eq_Bounds'(V0, V1) -> case V0 of {'Libraries.Text.Bounded.MkBounds', V2, V3, V4, V5} -> case V1 of {'Libraries.Text.Bounded.MkBounds', V6, V7, V8, V9} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V6)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3, V7)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4, V8)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5, V9)); 0 -> 0 end; 0 -> 0 end; 0 -> 0 end end end.
'dn--un--==_Eq_(WithBounds $ty)'(V0, V1, V2) -> case V1 of {'Libraries.Text.Bounded.MkBounded', V3, V4, V5} -> case V2 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> case case V0 of {'Prelude.EqOrd.MkEq', V9, V10} -> ((V9(V3))(V6)) end of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V4, V7)) of 1 -> ('dn--un--==_Eq_Bounds'(V5, V8)); 0 -> 0 end; 0 -> 0 end end end.
'dn--un--/=_Eq_Bounds'(V0, V1) -> case ('dn--un--==_Eq_Bounds'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_(WithBounds $ty)'(V0, V1, V2) -> case ('dn--un--==_Eq_(WithBounds $ty)'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'un--startBounds'(V0) -> {'Builtin.MkPair', case V0 of {'Libraries.Text.Bounded.MkBounds', V1, V2, V3, V4} -> V1 end, case V0 of {'Libraries.Text.Bounded.MkBounds', V5, V6, V7, V8} -> V6 end}.
'un--start'(V0) -> ('un--startBounds'(case V0 of {'Libraries.Text.Bounded.MkBounded', V1, V2, V3} -> V3 end)).
'un--removeIrrelevance'(V0) -> case V0 of {'Libraries.Text.Bounded.MkBounded', V1, V2, V3} -> {'Libraries.Text.Bounded.MkBounded', V1, 1, V3} end.
'un--mergeBounds'(V0, V1) -> case V0 of {'Libraries.Text.Bounded.MkBounded', V2, V3, V4} -> case V3 of 1 -> case V1 of {'Libraries.Text.Bounded.MkBounded', V5, V6, V7} -> case V6 of 1 -> ('un--irrelevantBounds'(V5)); _ -> V1 end; _ -> V1 end; _ -> case V1 of {'Libraries.Text.Bounded.MkBounded', V8, V9, V10} -> case V9 of 1 -> ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--map_Functor_WithBounds'(V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> V8 end))(V0)); _ -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V21, V22)) end end}, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V35, V36)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V39, V40)) end end}, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V53, V54)) end end}, ('un--start'(V0)), ('un--start'(V1)))) of {'Builtin.MkPair', V55, V56} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V59, V60)) end end}, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V73, V74)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V75, V76)) end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V77, V78)) end end}, fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V79, V80)) end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V81, V82)) end end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V85, V86)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V87, V88)) end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V89, V90)) end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V91, V92)) end end}, ('un--end'(V0)), ('un--end'(V1)))) of {'Builtin.MkPair', V93, V94} -> {'Libraries.Text.Bounded.MkBounded', case V1 of {'Libraries.Text.Bounded.MkBounded', V95, V96, V97} -> V95 end, 0, {'Libraries.Text.Bounded.MkBounds', V55, V56, V93, V94}} end end end; _ -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V98, V99)) end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V100, V101)) end end}, fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V102, V103)) end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V104, V105)) end end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V106, V107)) end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V108, V109)) end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V110, V111)) end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V112, V113)) end end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V114, V115)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V116, V117)) end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V118, V119)) end end}, fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V120, V121)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V122, V123)) end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V124, V125)) end end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V130, V131)) end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V132, V133)) end end}, ('un--start'(V0)), ('un--start'(V1)))) of {'Builtin.MkPair', V134, V135} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V136, V137)) end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V138, V139)) end end}, fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V140, V141)) end end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V142, V143)) end end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V144, V145)) end end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V146, V147)) end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V148, V149)) end end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V150, V151)) end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V152, V153)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V154, V155)) end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V156, V157)) end end}, fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V158, V159)) end end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V160, V161)) end end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V162, V163)) end end, fun (V164) -> fun (V165) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V164, V165)) end end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V166, V167)) end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V168, V169)) end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V170, V171)) end end}, ('un--end'(V0)), ('un--end'(V1)))) of {'Builtin.MkPair', V172, V173} -> {'Libraries.Text.Bounded.MkBounded', case V1 of {'Libraries.Text.Bounded.MkBounded', V174, V175, V176} -> V174 end, 0, {'Libraries.Text.Bounded.MkBounds', V134, V135, V172, V173}} end end end end; _ -> case V1 of {'Libraries.Text.Bounded.MkBounded', V177, V178, V179} -> case V178 of 1 -> ((begin (V185 = fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> ('dn--un--map_Functor_WithBounds'(V183, V184)) end end end end), fun (V186) -> fun (V187) -> ((((V185('erased'))('erased'))(V186))(V187)) end end end(fun (V180) -> V177 end))(V0)); _ -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V188, V189)) end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V190, V191)) end end}, fun (V192) -> fun (V193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V192, V193)) end end, fun (V194) -> fun (V195) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V194, V195)) end end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V196, V197)) end end, fun (V198) -> fun (V199) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V198, V199)) end end, fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V200, V201)) end end, fun (V202) -> fun (V203) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V202, V203)) end end, fun (V204) -> fun (V205) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V204, V205)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V206) -> fun (V207) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V206, V207)) end end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V208, V209)) end end}, fun (V210) -> fun (V211) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V210, V211)) end end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V212, V213)) end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V214, V215)) end end, fun (V216) -> fun (V217) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V216, V217)) end end, fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V218, V219)) end end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V220, V221)) end end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V222, V223)) end end}, ('un--start'(V0)), ('un--start'(V1)))) of {'Builtin.MkPair', V224, V225} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V226, V227)) end end, fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V228, V229)) end end}, fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V230, V231)) end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V232, V233)) end end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V234, V235)) end end, fun (V236) -> fun (V237) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V236, V237)) end end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V238, V239)) end end, fun (V240) -> fun (V241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V240, V241)) end end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V242, V243)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V244, V245)) end end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V246, V247)) end end}, fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V248, V249)) end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V250, V251)) end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V252, V253)) end end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V254, V255)) end end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V256, V257)) end end, fun (V258) -> fun (V259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V258, V259)) end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V260, V261)) end end}, ('un--end'(V0)), ('un--end'(V1)))) of {'Builtin.MkPair', V262, V263} -> {'Libraries.Text.Bounded.MkBounded', case V1 of {'Libraries.Text.Bounded.MkBounded', V264, V265, V266} -> V264 end, 0, {'Libraries.Text.Bounded.MkBounds', V224, V225, V262, V263}} end end end; _ -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V267) -> fun (V268) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V267, V268)) end end, fun (V269) -> fun (V270) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V269, V270)) end end}, fun (V271) -> fun (V272) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V271, V272)) end end, fun (V273) -> fun (V274) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V273, V274)) end end, fun (V275) -> fun (V276) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V275, V276)) end end, fun (V277) -> fun (V278) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V277, V278)) end end, fun (V279) -> fun (V280) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V279, V280)) end end, fun (V281) -> fun (V282) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V281, V282)) end end, fun (V283) -> fun (V284) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V283, V284)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V285) -> fun (V286) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V285, V286)) end end, fun (V287) -> fun (V288) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V287, V288)) end end}, fun (V289) -> fun (V290) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V289, V290)) end end, fun (V291) -> fun (V292) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V291, V292)) end end, fun (V293) -> fun (V294) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V293, V294)) end end, fun (V295) -> fun (V296) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V295, V296)) end end, fun (V297) -> fun (V298) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V297, V298)) end end, fun (V299) -> fun (V300) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V299, V300)) end end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V301, V302)) end end}, ('un--start'(V0)), ('un--start'(V1)))) of {'Builtin.MkPair', V303, V304} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V305) -> fun (V306) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V305, V306)) end end, fun (V307) -> fun (V308) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V307, V308)) end end}, fun (V309) -> fun (V310) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V309, V310)) end end, fun (V311) -> fun (V312) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V311, V312)) end end, fun (V313) -> fun (V314) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V313, V314)) end end, fun (V315) -> fun (V316) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V315, V316)) end end, fun (V317) -> fun (V318) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V317, V318)) end end, fun (V319) -> fun (V320) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V319, V320)) end end, fun (V321) -> fun (V322) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V321, V322)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V323) -> fun (V324) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V323, V324)) end end, fun (V325) -> fun (V326) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V325, V326)) end end}, fun (V327) -> fun (V328) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V327, V328)) end end, fun (V329) -> fun (V330) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V329, V330)) end end, fun (V331) -> fun (V332) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V331, V332)) end end, fun (V333) -> fun (V334) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V333, V334)) end end, fun (V335) -> fun (V336) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V335, V336)) end end, fun (V337) -> fun (V338) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V337, V338)) end end, fun (V339) -> fun (V340) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V339, V340)) end end}, ('un--end'(V0)), ('un--end'(V1)))) of {'Builtin.MkPair', V341, V342} -> {'Libraries.Text.Bounded.MkBounded', case V1 of {'Libraries.Text.Bounded.MkBounded', V343, V344, V345} -> V343 end, 0, {'Libraries.Text.Bounded.MkBounds', V303, V304, V341, V342}} end end end end.
'un--joinBounds'(V0) -> ('un--mergeBounds'(V0, case V0 of {'Libraries.Text.Bounded.MkBounded', V1, V2, V3} -> V1 end)).
'un--irrelevantBounds'(V0) -> {'Libraries.Text.Bounded.MkBounded', V0, 1, {'Libraries.Text.Bounded.MkBounds', -1, -1, -1, -1}}.
'un--endBounds'(V0) -> {'Builtin.MkPair', case V0 of {'Libraries.Text.Bounded.MkBounds', V1, V2, V3, V4} -> V3 end, case V0 of {'Libraries.Text.Bounded.MkBounds', V5, V6, V7, V8} -> V8 end}.
'un--end'(V0) -> ('un--endBounds'(case V0 of {'Libraries.Text.Bounded.MkBounded', V1, V2, V3} -> V3 end)).
