-module('Idris.Idris2.TTImp.Interactive.MakeLemma').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--9528-5741--in--un--getArg'/4,
  'un--used'/1,
  'un--mkType'/3,
  'un--mkApp'/3,
  'un--makeLemma'/7,
  'un--hiddenName'/1,
  'un--getArgs'/6,
  'un--bindableArg'/2,
  'un--bindable'/2
]).
'nested--9528-5741--in--un--getArg'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> case V8 of {'Core.TT.Explicit'} -> case V9 of {'Builtin.MkPair', V10, V11} -> {'Prelude.Types.Just', {'TTImp.TTImp.IVar', V2, V4}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--used'(V0) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V1) -> fun (V2) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1, V2)) end end, 0, fun (V3) -> fun (V4) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V3, V4)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V7, V8)) end end}}, V0)) of 1 -> 0; 0 -> 1 end.
'un--mkType'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> {'TTImp.TTImp.IPi', V0, V11, V9, V7, V12, ('un--mkType'(V0, V4, V2))} end end end end end(E0, E1)) end.
'un--mkApp'(V0, V1, V2) -> ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V0, V1}, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V3) -> ('nested--9528-5741--in--un--getArg'(V2, V1, V0, V3)) end, V2)))).
'un--makeLemma'(V0, V1, V2, V3, V4, V5, V6) -> begin (V12 = begin (V7 = V1), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V32 = begin (V23 = begin (V17 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, [], V16, {'Core.Env.Nil'}, V6))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V22 = ('un--getArgs'([], V1, V2, {'Core.Env.Nil'}, V5, V21))), V22 end(V18)) end end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V31 = fun (V28) -> case V27 of {'Builtin.MkPair', V29, V30} -> {'Prelude.Types.Right', {'Builtin.MkPair', ('un--mkType'(V3, V29, V30)), ('un--mkApp'(V3, V4, V29))}} end end), V31 end(V24)) end end end end), V32 end(V13)) end end end end.
'un--hiddenName'(V0) -> case V0 of {'Core.Name.MN', V1, V2} -> case V1 of <<"_"/utf8>> -> 1; _ -> 0 end; _ -> 0 end.
'un--getArgs'(V0, V1, V2, V3, V4, V5) -> case V4 of 0 -> begin (V11 = begin (V6 = V1), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V52 = begin (V45 = begin (V16 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V15, V3, V5))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V44 = begin (V21 = ('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V3, V20))), ((begin (V41 = fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end((begin (V33 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> {'Prelude.Types.Right', (V29(V32))} end end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end(fun (V22) -> ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V23) -> case V23 of {'Core.TT.MkKindedName', V24, V25, V26} -> V26 end end, V22)) end))))(V21)) end), V44 end(V17)) end end end end), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V51 = fun (V50) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], V49}} end), V51 end(V46)) end end end end), V52 end(V12)) end end end end; _ -> begin (V53 = (V4 - 1)), case V5 of {'Core.TT.Bind', V54, V55, V56, V57} -> case V56 of {'Core.TT.Pi', V58, V59, V60, V61} -> begin (V67 = begin (V62 = V1), fun (V63) -> begin (V66 = (begin (V64 = V62), fun (V65) -> ('erlang':'get'(V64)) end end(V63))), {'Prelude.Types.Right', V66} end end end), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V139 = begin (V107 = begin (V72 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V71, V3, V61))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V106 = begin (V77 = ('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V3, V76))), ((begin (V103 = fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V100, V101, V102)) end end end end end), fun (V104) -> fun (V105) -> ((((V103('erased'))('erased'))(V104))(V105)) end end end((begin (V95 = fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> {'Prelude.Types.Right', (V91(V94))} end end end end end), fun (V96) -> fun (V97) -> ((((V95('erased'))('erased'))(V96))(V97)) end end end((begin (V86 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(V84, V85)) end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(fun (V78) -> case V78 of {'Core.TT.MkKindedName', V79, V80, V81} -> V81 end end))))))(V77)) end), V106 end(V73)) end end end end), fun (V108) -> begin (V109 = (V107(V108))), case V109 of {'Prelude.Types.Left', V110} -> {'Prelude.Types.Left', V110}; {'Prelude.Types.Right', V111} -> (begin (V138 = begin (V120 = ('Idris.Idris2.TTImp.Utils':'un--uniqueBasicName'(V71, ((begin (V117 = fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V115, V116)) end end end end), fun (V118) -> fun (V119) -> ((((V117('erased'))('erased'))(V118))(V119)) end end end(fun (V112) -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V112)) end))(V0)), ('Idris.Idris2.Core.Name':'un--nameRoot'(V55))))), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V137 = begin (V125 = {'Core.Name.UN', {'Core.Name.Basic', V124}}), begin (V126 = ('un--getArgs'([V125 | V0], V1, V2, {'Core.Env.::', V56, V3}, V53, ('Idris.Idris2.Core.TT':'un--renameTop'(V125, V57))))), fun (V127) -> begin (V128 = (V126(V127))), case V128 of {'Prelude.Types.Left', V129} -> {'Prelude.Types.Left', V129}; {'Prelude.Types.Right', V130} -> (begin (V136 = case V130 of {'Builtin.MkPair', V131, V132} -> begin (V133 = case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V59, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V57, {'Core.TT.DropCons', {'Core.TT.SubRefl'}})) of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Just', V125}; _ -> {'Prelude.Types.Nothing'} end; 0 -> {'Prelude.Types.Just', V125} end), begin (V134 = case case ('un--used'(V59)) of 1 -> case ('un--bindableArg'(0, V57)) of 1 -> 0; 0 -> case ('un--hiddenName'(V55)) of 1 -> 0; 0 -> 1 end end; 0 -> 0 end of 1 -> {'Core.TT.Explicit'}; 0 -> {'Core.TT.Implicit'} end), fun (V135) -> {'Prelude.Types.Right', {'Builtin.MkPair', [{'Builtin.MkPair', V55, {'Builtin.MkPair', V133, {'Builtin.MkPair', V134, {'Builtin.MkPair', V59, V111}}}} | V131], V132}} end end end end), V136 end(V127)) end end end end end), V137 end(V121)) end end end end), V138 end(V108)) end end end end), V139 end(V68)) end end end end; _ -> begin (V145 = begin (V140 = V1), fun (V141) -> begin (V144 = (begin (V142 = V140), fun (V143) -> ('erlang':'get'(V142)) end end(V141))), {'Prelude.Types.Right', V144} end end end), fun (V146) -> begin (V147 = (V145(V146))), case V147 of {'Prelude.Types.Left', V148} -> {'Prelude.Types.Left', V148}; {'Prelude.Types.Right', V149} -> (begin (V186 = begin (V179 = begin (V150 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V149, V3, V5))), fun (V151) -> begin (V152 = (V150(V151))), case V152 of {'Prelude.Types.Left', V153} -> {'Prelude.Types.Left', V153}; {'Prelude.Types.Right', V154} -> (begin (V178 = begin (V155 = ('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V3, V154))), ((begin (V175 = fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V172, V173, V174)) end end end end end), fun (V176) -> fun (V177) -> ((((V175('erased'))('erased'))(V176))(V177)) end end end((begin (V167 = fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> case V164 of {'Prelude.Types.Left', V165} -> {'Prelude.Types.Left', V165}; {'Prelude.Types.Right', V166} -> {'Prelude.Types.Right', (V163(V166))} end end end end end), fun (V168) -> fun (V169) -> ((((V167('erased'))('erased'))(V168))(V169)) end end end(fun (V156) -> ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V157) -> case V157 of {'Core.TT.MkKindedName', V158, V159, V160} -> V160 end end, V156)) end))))(V155)) end), V178 end(V151)) end end end end), fun (V180) -> begin (V181 = (V179(V180))), case V181 of {'Prelude.Types.Left', V182} -> {'Prelude.Types.Left', V182}; {'Prelude.Types.Right', V183} -> (begin (V185 = fun (V184) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], V183}} end), V185 end(V180)) end end end end), V186 end(V146)) end end end end end; _ -> begin (V192 = begin (V187 = V1), fun (V188) -> begin (V191 = (begin (V189 = V187), fun (V190) -> ('erlang':'get'(V189)) end end(V188))), {'Prelude.Types.Right', V191} end end end), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V233 = begin (V226 = begin (V197 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V196, V3, V5))), fun (V198) -> begin (V199 = (V197(V198))), case V199 of {'Prelude.Types.Left', V200} -> {'Prelude.Types.Left', V200}; {'Prelude.Types.Right', V201} -> (begin (V225 = begin (V202 = ('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V3, V201))), ((begin (V222 = fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V219, V220, V221)) end end end end end), fun (V223) -> fun (V224) -> ((((V222('erased'))('erased'))(V223))(V224)) end end end((begin (V214 = fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> case V211 of {'Prelude.Types.Left', V212} -> {'Prelude.Types.Left', V212}; {'Prelude.Types.Right', V213} -> {'Prelude.Types.Right', (V210(V213))} end end end end end), fun (V215) -> fun (V216) -> ((((V214('erased'))('erased'))(V215))(V216)) end end end(fun (V203) -> ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V204) -> case V204 of {'Core.TT.MkKindedName', V205, V206, V207} -> V207 end end, V203)) end))))(V202)) end), V225 end(V198)) end end end end), fun (V227) -> begin (V228 = (V226(V227))), case V228 of {'Prelude.Types.Left', V229} -> {'Prelude.Types.Left', V229}; {'Prelude.Types.Right', V230} -> (begin (V232 = fun (V231) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], V230}} end), V232 end(V227)) end end end end), V233 end(V193)) end end end end end end end.
'un--bindableArg'(V0, V1) -> case V1 of {'Core.TT.Bind', V2, V3, V4, V5} -> case V4 of {'Core.TT.Pi', V6, V7, V8, V9} -> case ('un--bindable'(V0, V9)) of 1 -> 1; 0 -> ('un--bindableArg'((V0 + 1), V5)) end; _ -> 0 end; _ -> 0 end.
'un--bindable'(V0, V1) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V1)) of {'Builtin.MkPair', V2, V3} -> case V2 of {'Core.TT.Ref', V4, V5, V6} -> case V5 of {'Core.TT.TyCon', V7, V8} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V9, V10)) end end, 0}, fun (V11) -> ('un--bindable'(V0, V11)) end, V3)); {'Core.TT.DataCon', V12, V13} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V14, V15)) end end, 0}, fun (V16) -> ('un--bindable'(V0, V16)) end, V3)); _ -> 0 end; {'Core.TT.TDelayed', V17, V18, V19} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V20, V21)) end end, 0}, fun (V22) -> ('un--bindable'(V0, V22)) end, [V19 | V3])); {'Core.TT.TDelay', V23, V24, V25, V26} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V27, V28)) end end, 0}, fun (V29) -> ('un--bindable'(V0, V29)) end, [V26 | V3])); {'Core.TT.TForce', V30, V31, V32} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V33, V34)) end end, 0}, fun (V35) -> ('un--bindable'(V0, V35)) end, [V32 | V3])); {'Core.TT.Local', V36, V37, V38} -> case V3 of [] -> case (V0 =:= V38) of 'false' -> 0; _ -> 1 end; _ -> 0 end; _ -> 0 end; _ -> 0 end.
