-module('Idris.Idris2.Compiler.Erlang.Utils.String').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--showDouble'/1,
  'un--escapeString'/2,
  'un--escapeChar'/2
]).
'un--showDouble'(V0) -> begin (V1 = ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V0))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> V22 end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V30, V31)) end end}, $., ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))) of 1 -> V1; 0 -> <<V1/binary, <<".0"/utf8>>/binary>> end end.
'un--escapeString'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> ('un--escapeChar'(V2, ('un--escapeString'(V3, V1)))) end(E0, E1)) end.
'un--escapeChar'(V0, V1) -> begin (V2 = case V0 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end), case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V2, 32)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V2, 126)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V2, 92)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V2, 34)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V2, 39)) end end end end of 1 -> <<<<"\x{5c}x{"/utf8>>/binary, <<('Idris.Idris2.Protocol.Hex':'un--asHex'(case V0 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end))/binary, <<<<"}"/utf8>>/binary, V1/binary>>/binary>>/binary>>; 0 -> <<('unicode':'characters_to_binary'([V0 | []]))/binary, V1/binary>> end end.
