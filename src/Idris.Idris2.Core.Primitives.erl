-module('Idris.Idris2.Core.Primitives').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--10791-6212--in--un--pow\x{27}'/3,
  'un--unaryOp'/3,
  'un--toInt'/1,
  'un--sub'/2,
  'un--strTail'/1,
  'un--strSubstr'/1,
  'un--strReverse'/1,
  'un--strLength'/1,
  'un--strIndex'/1,
  'un--strHead'/1,
  'un--strCons'/1,
  'un--strAppend'/1,
  'un--shiftr'/2,
  'un--shiftl'/2,
  'un--primTypes'/0,
  'un--primTyVal'/1,
  'un--prim'/1,
  'un--predTy'/2,
  'un--pi'/5,
  'un--opName'/1,
  'un--numTypes'/0,
  'un--neg'/1,
  'un--mul'/2,
  'un--mod'/2,
  'un--lte'/2,
  'un--lt'/2,
  'un--integralTypes'/0,
  'un--gte'/2,
  'un--gt'/2,
  'un--getOp'/2,
  'un--eq'/2,
  'un--doubleTy'/0,
  'un--doubleTan'/1,
  'un--doubleSqrt'/1,
  'un--doubleSin'/1,
  'un--doublePow'/2,
  'un--doubleOp'/2,
  'un--doubleLog'/1,
  'un--doubleFloor'/1,
  'un--doubleExp'/1,
  'un--doubleCos'/1,
  'un--doubleCeiling'/1,
  'un--doubleATan'/1,
  'un--doubleASin'/1,
  'un--doubleACos'/1,
  'un--div'/2,
  'un--crashTy'/0,
  'un--constantIntegerValue'/1,
  'un--constTy3'/4,
  'un--constTy'/3,
  'un--cmpTy'/1,
  'un--castTo'/2,
  'un--castString'/1,
  'un--castInteger'/1,
  'un--castInt8'/1,
  'un--castInt64'/1,
  'un--castInt32'/1,
  'un--castInt16'/1,
  'un--castInt'/1,
  'un--castDouble'/1,
  'un--castChar'/1,
  'un--castBits8'/1,
  'un--castBits64'/1,
  'un--castBits32'/1,
  'un--castBits16'/1,
  'un--bxor'/2,
  'un--bor'/2,
  'un--binOp'/3,
  'un--believeMeTy'/0,
  'un--believeMe'/1,
  'un--band'/2,
  'un--arithTy'/1,
  'un--allPrimitives'/0,
  'un--add'/2
]).
'nested--10791-6212--in--un--pow\x{27}'(V0, V1, V2) -> case V1 of {'Core.TT.Db', V3} -> case V2 of {'Core.TT.Db', V4} -> {'Prelude.Types.Just', {'Core.TT.Db', ('math':'pow'(V3, V4))}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--unaryOp'(V0, V1, V2) -> case V2 of {'Data.Vect.::', V3, V4} -> case V3 of {'Core.Value.NPrimVal', V5, V6} -> case V4 of {'Data.Vect.Nil'} -> ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> {'Core.Value.NPrimVal', V5, V7} end))((V0(V6)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--toInt'(V0) -> case V0 of 1 -> {'Core.TT.I', 1}; 0 -> {'Core.TT.I', 0} end.
'un--sub'(V0, V1) -> case V0 of {'Core.TT.BI', V2} -> case V1 of {'Core.TT.BI', V3} -> {'Prelude.Types.Just', {'Core.TT.BI', (V2 - V3)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I', V4} -> case V1 of {'Core.TT.I', V5} -> {'Prelude.Types.Just', {'Core.TT.I', begin (V6 = (V4 - V5)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V7} -> case V1 of {'Core.TT.I8', V8} -> {'Prelude.Types.Just', {'Core.TT.I8', begin (V9 = (V7 - V8)), case ((V9 band 128) =/= 0) of 'true' -> (V9 bor -128); _ -> (V9 band 127) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V10} -> case V1 of {'Core.TT.I16', V11} -> {'Prelude.Types.Just', {'Core.TT.I16', begin (V12 = (V10 - V11)), case ((V12 band 32768) =/= 0) of 'true' -> (V12 bor -32768); _ -> (V12 band 32767) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V13} -> case V1 of {'Core.TT.I32', V14} -> {'Prelude.Types.Just', {'Core.TT.I32', begin (V15 = (V13 - V14)), case ((V15 band 2147483648) =/= 0) of 'true' -> (V15 bor -2147483648); _ -> (V15 band 2147483647) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V16} -> case V1 of {'Core.TT.I64', V17} -> {'Prelude.Types.Just', {'Core.TT.I64', begin (V18 = (V16 - V17)), case ((V18 band 9223372036854775808) =/= 0) of 'true' -> (V18 bor -9223372036854775808); _ -> (V18 band 9223372036854775807) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V19} -> case V1 of {'Core.TT.B8', V20} -> {'Prelude.Types.Just', {'Core.TT.B8', begin (V21 = (V19 - V20)), begin (V22 = 256), begin (V23 = (V21 rem V22)), case ((V23 * V22) < 0) of 'true' -> (V23 + V22); _ -> V23 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V24} -> case V1 of {'Core.TT.B16', V25} -> {'Prelude.Types.Just', {'Core.TT.B16', begin (V26 = (V24 - V25)), begin (V27 = 65536), begin (V28 = (V26 rem V27)), case ((V28 * V27) < 0) of 'true' -> (V28 + V27); _ -> V28 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V29} -> case V1 of {'Core.TT.B32', V30} -> {'Prelude.Types.Just', {'Core.TT.B32', begin (V31 = (V29 - V30)), begin (V32 = 4294967296), begin (V33 = (V31 rem V32)), case ((V33 * V32) < 0) of 'true' -> (V33 + V32); _ -> V33 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V34} -> case V1 of {'Core.TT.B64', V35} -> {'Prelude.Types.Just', {'Core.TT.B64', begin (V36 = (V34 - V35)), begin (V37 = 18446744073709551616), begin (V38 = (V36 rem V37)), case ((V38 * V37) < 0) of 'true' -> (V38 + V37); _ -> V38 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Ch', V39} -> case V1 of {'Core.TT.Ch', V40} -> {'Prelude.Types.Just', {'Core.TT.Ch', case begin (V41 = (case V39 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end - case V40 of E2 when ((erlang:'is_integer'(E2)) andalso (((E2 >= 0) andalso (E2 =< 55295)) orelse ((E2 >= 57344) andalso (E2 =< 1114111)))) -> E2; _ -> 65533 end)), case ((V41 band 9223372036854775808) =/= 0) of 'true' -> (V41 bor -9223372036854775808); _ -> (V41 band 9223372036854775807) end end of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V42} -> case V1 of {'Core.TT.Db', V43} -> {'Prelude.Types.Just', {'Core.TT.Db', (V42 - V43)}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--strTail'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.Str', V5} -> case V5 of <<""/utf8>> -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Nothing'}; _ -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', case ('string':'next_grapheme'(V5)) of [E2 | E3] when (erlang:'is_binary'(E3)) -> (fun (V6, V7) -> V7 end(E2, E3)); _ -> <<""/utf8>> end}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', case ('string':'next_grapheme'(V5)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V8, V9) -> V9 end(E0, E1)); _ -> <<""/utf8>> end}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--strSubstr'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.I', V5} -> case V2 of {'Data.Vect.::', V6, V7} -> case V6 of {'Core.Value.NPrimVal', V8, V9} -> case V9 of {'Core.TT.I', V10} -> case V7 of {'Data.Vect.::', V11, V12} -> case V11 of {'Core.Value.NPrimVal', V13, V14} -> case V14 of {'Core.TT.Str', V15} -> case V12 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('string':'slice'(V15, V5, V10))}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--strReverse'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.Str', V5} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('unicode':'characters_to_binary'(('string':'reverse'(V5))))}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--strLength'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.Str', V5} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', begin (V6 = ('Idris.Idris2.Prelude.Types.String':'un--length'(V5))), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--strIndex'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.Str', V5} -> case V2 of {'Data.Vect.::', V6, V7} -> case V6 of {'Core.Value.NPrimVal', V8, V9} -> case V9 of {'Core.TT.I', V10} -> case V7 of {'Data.Vect.Nil'} -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V10, 0)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--length'(V5)))); 0 -> 0 end of 1 -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', ('erlang':'hd'(('string':'next_grapheme'(('string':'slice'(V5, V10, 1))))))}}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--strHead'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.Str', V5} -> case V5 of <<""/utf8>> -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Nothing'}; _ -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', ('erlang':'hd'(('string':'next_grapheme'(V5))))}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', ('erlang':'hd'(('string':'next_grapheme'(V5))))}}}; _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--strCons'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.Ch', V5} -> case V2 of {'Data.Vect.::', V6, V7} -> case V6 of {'Core.Value.NPrimVal', V8, V9} -> case V9 of {'Core.TT.Str', V10} -> case V7 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', <<('unicode':'characters_to_binary'([V5 | []]))/binary, V10/binary>>}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--strAppend'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.Str', V5} -> case V2 of {'Data.Vect.::', V6, V7} -> case V6 of {'Core.Value.NPrimVal', V8, V9} -> case V9 of {'Core.TT.Str', V10} -> case V7 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', <<V5/binary, V10/binary>>}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--shiftr'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> {'Prelude.Types.Just', {'Core.TT.I', (V2 bsr V3)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V4} -> case V1 of {'Core.TT.I8', V5} -> {'Prelude.Types.Just', {'Core.TT.I8', (V4 bsr V5)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V6} -> case V1 of {'Core.TT.I16', V7} -> {'Prelude.Types.Just', {'Core.TT.I16', (V6 bsr V7)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V1 of {'Core.TT.I32', V9} -> {'Prelude.Types.Just', {'Core.TT.I32', (V8 bsr V9)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V10} -> case V1 of {'Core.TT.I64', V11} -> {'Prelude.Types.Just', {'Core.TT.I64', (V10 bsr V11)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V12} -> case V1 of {'Core.TT.BI', V13} -> {'Prelude.Types.Just', {'Core.TT.BI', (V12 bsr V13)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> {'Prelude.Types.Just', {'Core.TT.B8', (V14 bsr V15)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> {'Prelude.Types.Just', {'Core.TT.B16', (V16 bsr V17)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> {'Prelude.Types.Just', {'Core.TT.B32', (V18 bsr V19)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> {'Prelude.Types.Just', {'Core.TT.B64', (V20 bsr V21)}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--shiftl'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> {'Prelude.Types.Just', {'Core.TT.I', begin (V4 = (V2 bsl V3)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V5} -> case V1 of {'Core.TT.I8', V6} -> {'Prelude.Types.Just', {'Core.TT.I8', begin (V7 = (V5 bsl V6)), case ((V7 band 128) =/= 0) of 'true' -> (V7 bor -128); _ -> (V7 band 127) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V8} -> case V1 of {'Core.TT.I16', V9} -> {'Prelude.Types.Just', {'Core.TT.I16', begin (V10 = (V8 bsl V9)), case ((V10 band 32768) =/= 0) of 'true' -> (V10 bor -32768); _ -> (V10 band 32767) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V11} -> case V1 of {'Core.TT.I32', V12} -> {'Prelude.Types.Just', {'Core.TT.I32', begin (V13 = (V11 bsl V12)), case ((V13 band 2147483648) =/= 0) of 'true' -> (V13 bor -2147483648); _ -> (V13 band 2147483647) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V14} -> case V1 of {'Core.TT.I64', V15} -> {'Prelude.Types.Just', {'Core.TT.I64', begin (V16 = (V14 bsl V15)), case ((V16 band 9223372036854775808) =/= 0) of 'true' -> (V16 bor -9223372036854775808); _ -> (V16 band 9223372036854775807) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V17} -> case V1 of {'Core.TT.BI', V18} -> {'Prelude.Types.Just', {'Core.TT.BI', (V17 bsl V18)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V19} -> case V1 of {'Core.TT.B8', V20} -> {'Prelude.Types.Just', {'Core.TT.B8', begin (V21 = (V19 bsl V20)), begin (V22 = 256), begin (V23 = (V21 rem V22)), case ((V23 * V22) < 0) of 'true' -> (V23 + V22); _ -> V23 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V24} -> case V1 of {'Core.TT.B16', V25} -> {'Prelude.Types.Just', {'Core.TT.B16', begin (V26 = (V24 bsl V25)), begin (V27 = 65536), begin (V28 = (V26 rem V27)), case ((V28 * V27) < 0) of 'true' -> (V28 + V27); _ -> V28 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V29} -> case V1 of {'Core.TT.B32', V30} -> {'Prelude.Types.Just', {'Core.TT.B32', begin (V31 = (V29 bsl V30)), begin (V32 = 4294967296), begin (V33 = (V31 rem V32)), case ((V33 * V32) < 0) of 'true' -> (V33 + V32); _ -> V33 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V34} -> case V1 of {'Core.TT.B64', V35} -> {'Prelude.Types.Just', {'Core.TT.B64', begin (V36 = (V34 bsl V35)), begin (V37 = 18446744073709551616), begin (V38 = (V36 rem V37)), case ((V38 * V37) < 0) of 'true' -> (V38 + V37); _ -> V38 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--primTypes'() -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--numTypes'()), [10 | [11 | []]])).
'un--primTyVal'(V0) -> {'Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Core.TT.PrT', V0}}.
'un--prim'(V0) -> {'Core.Name.UN', {'Core.Name.Basic', <<<<"prim__"/utf8>>/binary, V0/binary>>}}.
'un--predTy'(V0, V1) -> begin (V4 = fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.TT':'un--fnType'([], ('Idris.Idris2.Core.FC':'un--emptyFC'()), V2, V3)) end end), ((V4(('un--primTyVal'(V0))))(('un--primTyVal'(V1)))) end.
'un--pi'(V0, V1, V2, V3, V4) -> {'Core.TT.Bind', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Core.Name.UN', {'Core.Name.Basic', V0}}, {'Core.TT.Pi', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V1, V2, V3}, V4}.
'un--opName'(V0) -> case V0 of {'Core.TT.Add', V1} -> ('un--prim'(<<<<"add_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>)); {'Core.TT.Sub', V2} -> ('un--prim'(<<<<"sub_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary>>)); {'Core.TT.Mul', V3} -> ('un--prim'(<<<<"mul_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V3))/binary>>)); {'Core.TT.Div', V4} -> ('un--prim'(<<<<"div_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V4))/binary>>)); {'Core.TT.Mod', V5} -> ('un--prim'(<<<<"mod_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V5))/binary>>)); {'Core.TT.Neg', V6} -> ('un--prim'(<<<<"negate_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V6))/binary>>)); {'Core.TT.ShiftL', V7} -> ('un--prim'(<<<<"shl_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V7))/binary>>)); {'Core.TT.ShiftR', V8} -> ('un--prim'(<<<<"shr_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V8))/binary>>)); {'Core.TT.BAnd', V9} -> ('un--prim'(<<<<"and_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V9))/binary>>)); {'Core.TT.BOr', V10} -> ('un--prim'(<<<<"or_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V10))/binary>>)); {'Core.TT.BXOr', V11} -> ('un--prim'(<<<<"xor_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V11))/binary>>)); {'Core.TT.LT', V12} -> ('un--prim'(<<<<"lt_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V12))/binary>>)); {'Core.TT.LTE', V13} -> ('un--prim'(<<<<"lte_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V13))/binary>>)); {'Core.TT.EQ', V14} -> ('un--prim'(<<<<"eq_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V14))/binary>>)); {'Core.TT.GTE', V15} -> ('un--prim'(<<<<"gte_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V15))/binary>>)); {'Core.TT.GT', V16} -> ('un--prim'(<<<<"gt_"/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V16))/binary>>)); {'Core.TT.StrLength'} -> ('un--prim'(<<"strLength"/utf8>>)); {'Core.TT.StrHead'} -> ('un--prim'(<<"strHead"/utf8>>)); {'Core.TT.StrTail'} -> ('un--prim'(<<"strTail"/utf8>>)); {'Core.TT.StrIndex'} -> ('un--prim'(<<"strIndex"/utf8>>)); {'Core.TT.StrCons'} -> ('un--prim'(<<"strCons"/utf8>>)); {'Core.TT.StrAppend'} -> ('un--prim'(<<"strAppend"/utf8>>)); {'Core.TT.StrReverse'} -> ('un--prim'((begin (V18 = fun (V17) -> V17 end), fun (V19) -> (V18(V19)) end end(<<"strReverse"/utf8>>)))); {'Core.TT.StrSubstr'} -> ('un--prim'(<<"strSubstr"/utf8>>)); {'Core.TT.DoubleExp'} -> ('un--prim'(<<"doubleExp"/utf8>>)); {'Core.TT.DoubleLog'} -> ('un--prim'(<<"doubleLog"/utf8>>)); {'Core.TT.DoublePow'} -> ('un--prim'(<<"doublePow"/utf8>>)); {'Core.TT.DoubleSin'} -> ('un--prim'(<<"doubleSin"/utf8>>)); {'Core.TT.DoubleCos'} -> ('un--prim'(<<"doubleCos"/utf8>>)); {'Core.TT.DoubleTan'} -> ('un--prim'(<<"doubleTan"/utf8>>)); {'Core.TT.DoubleASin'} -> ('un--prim'((begin (V21 = fun (V20) -> V20 end), fun (V22) -> (V21(V22)) end end(<<"doubleASin"/utf8>>)))); {'Core.TT.DoubleACos'} -> ('un--prim'((begin (V24 = fun (V23) -> V23 end), fun (V25) -> (V24(V25)) end end(<<"doubleACos"/utf8>>)))); {'Core.TT.DoubleATan'} -> ('un--prim'((begin (V27 = fun (V26) -> V26 end), fun (V28) -> (V27(V28)) end end(<<"doubleATan"/utf8>>)))); {'Core.TT.DoubleSqrt'} -> ('un--prim'((begin (V30 = fun (V29) -> V29 end), fun (V31) -> (V30(V31)) end end(<<"doubleSqrt"/utf8>>)))); {'Core.TT.DoubleFloor'} -> ('un--prim'((begin (V33 = fun (V32) -> V32 end), fun (V34) -> (V33(V34)) end end(<<"doubleFloor"/utf8>>)))); {'Core.TT.DoubleCeiling'} -> ('un--prim'((begin (V36 = fun (V35) -> V35 end), fun (V37) -> (V36(V37)) end end(<<"doubleCeiling"/utf8>>)))); {'Core.TT.Cast', V38, V39} -> ('un--prim'(<<<<"cast_"/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V38))/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V39))/binary>>/binary>>)); {'Core.TT.BelieveMe'} -> ('un--prim'((begin (V41 = fun (V40) -> V40 end), fun (V42) -> (V41(V42)) end end(<<"believe_me"/utf8>>)))); {'Core.TT.Crash'} -> ('un--prim'(<<"crash"/utf8>>)) end.
'un--numTypes'() -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--integralTypes'()), [12 | []])).
'un--neg'(V0) -> case V0 of {'Core.TT.BI', V1} -> {'Prelude.Types.Just', {'Core.TT.BI', (0 - V1)}}; {'Core.TT.I', V2} -> {'Prelude.Types.Just', {'Core.TT.I', begin (V3 = (0 - V2)), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end}}; {'Core.TT.I8', V4} -> {'Prelude.Types.Just', {'Core.TT.I8', begin (V5 = (0 - V4)), case ((V5 band 128) =/= 0) of 'true' -> (V5 bor -128); _ -> (V5 band 127) end end}}; {'Core.TT.I16', V6} -> {'Prelude.Types.Just', {'Core.TT.I16', begin (V7 = (0 - V6)), case ((V7 band 32768) =/= 0) of 'true' -> (V7 bor -32768); _ -> (V7 band 32767) end end}}; {'Core.TT.I32', V8} -> {'Prelude.Types.Just', {'Core.TT.I32', begin (V9 = (0 - V8)), case ((V9 band 2147483648) =/= 0) of 'true' -> (V9 bor -2147483648); _ -> (V9 band 2147483647) end end}}; {'Core.TT.I64', V10} -> {'Prelude.Types.Just', {'Core.TT.I64', begin (V11 = (0 - V10)), case ((V11 band 9223372036854775808) =/= 0) of 'true' -> (V11 bor -9223372036854775808); _ -> (V11 band 9223372036854775807) end end}}; {'Core.TT.B8', V12} -> {'Prelude.Types.Just', {'Core.TT.B8', begin (V13 = (0 - V12)), begin (V14 = 256), begin (V15 = (V13 rem V14)), case ((V15 * V14) < 0) of 'true' -> (V15 + V14); _ -> V15 end end end end}}; {'Core.TT.B16', V16} -> {'Prelude.Types.Just', {'Core.TT.B16', begin (V17 = (0 - V16)), begin (V18 = 65536), begin (V19 = (V17 rem V18)), case ((V19 * V18) < 0) of 'true' -> (V19 + V18); _ -> V19 end end end end}}; {'Core.TT.B32', V20} -> {'Prelude.Types.Just', {'Core.TT.B32', begin (V21 = (0 - V20)), begin (V22 = 4294967296), begin (V23 = (V21 rem V22)), case ((V23 * V22) < 0) of 'true' -> (V23 + V22); _ -> V23 end end end end}}; {'Core.TT.B64', V24} -> {'Prelude.Types.Just', {'Core.TT.B64', begin (V25 = (0 - V24)), begin (V26 = 18446744073709551616), begin (V27 = (V25 rem V26)), case ((V27 * V26) < 0) of 'true' -> (V27 + V26); _ -> V27 end end end end}}; {'Core.TT.Db', V28} -> {'Prelude.Types.Just', {'Core.TT.Db', ('erlang':'-'(V28))}}; _ -> {'Prelude.Types.Nothing'} end.
'un--mul'(V0, V1) -> case V0 of {'Core.TT.BI', V2} -> case V1 of {'Core.TT.BI', V3} -> {'Prelude.Types.Just', {'Core.TT.BI', (V2 * V3)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V4} -> case V1 of {'Core.TT.B8', V5} -> {'Prelude.Types.Just', {'Core.TT.B8', begin (V6 = (V4 * V5)), begin (V7 = 256), begin (V8 = (V6 rem V7)), case ((V8 * V7) < 0) of 'true' -> (V8 + V7); _ -> V8 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V9} -> case V1 of {'Core.TT.B16', V10} -> {'Prelude.Types.Just', {'Core.TT.B16', begin (V11 = (V9 * V10)), begin (V12 = 65536), begin (V13 = (V11 rem V12)), case ((V13 * V12) < 0) of 'true' -> (V13 + V12); _ -> V13 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V14} -> case V1 of {'Core.TT.B32', V15} -> {'Prelude.Types.Just', {'Core.TT.B32', begin (V16 = (V14 * V15)), begin (V17 = 4294967296), begin (V18 = (V16 rem V17)), case ((V18 * V17) < 0) of 'true' -> (V18 + V17); _ -> V18 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V19} -> case V1 of {'Core.TT.B64', V20} -> {'Prelude.Types.Just', {'Core.TT.B64', begin (V21 = (V19 * V20)), begin (V22 = 18446744073709551616), begin (V23 = (V21 rem V22)), case ((V23 * V22) < 0) of 'true' -> (V23 + V22); _ -> V23 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I', V24} -> case V1 of {'Core.TT.I', V25} -> {'Prelude.Types.Just', {'Core.TT.I', begin (V26 = (V24 * V25)), case ((V26 band 9223372036854775808) =/= 0) of 'true' -> (V26 bor -9223372036854775808); _ -> (V26 band 9223372036854775807) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V27} -> case V1 of {'Core.TT.I8', V28} -> {'Prelude.Types.Just', {'Core.TT.I8', begin (V29 = (V27 * V28)), case ((V29 band 128) =/= 0) of 'true' -> (V29 bor -128); _ -> (V29 band 127) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V30} -> case V1 of {'Core.TT.I16', V31} -> {'Prelude.Types.Just', {'Core.TT.I16', begin (V32 = (V30 * V31)), case ((V32 band 32768) =/= 0) of 'true' -> (V32 bor -32768); _ -> (V32 band 32767) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V33} -> case V1 of {'Core.TT.I32', V34} -> {'Prelude.Types.Just', {'Core.TT.I32', begin (V35 = (V33 * V34)), case ((V35 band 2147483648) =/= 0) of 'true' -> (V35 bor -2147483648); _ -> (V35 band 2147483647) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V36} -> case V1 of {'Core.TT.I64', V37} -> {'Prelude.Types.Just', {'Core.TT.I64', begin (V38 = (V36 * V37)), case ((V38 band 9223372036854775808) =/= 0) of 'true' -> (V38 bor -9223372036854775808); _ -> (V38 band 9223372036854775807) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V39} -> case V1 of {'Core.TT.Db', V40} -> {'Prelude.Types.Just', {'Core.TT.Db', (V39 * V40)}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--mod'(V0, V1) -> case V0 of {'Core.TT.BI', V2} -> case V1 of {'Core.TT.BI', V3} -> case V3 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.BI', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V2, V3))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I', V4} -> case V1 of {'Core.TT.I', V5} -> case V5 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.I', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V4, V5))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V6} -> case V1 of {'Core.TT.I8', V7} -> case V7 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.I8', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int8'(V6, V7))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V8} -> case V1 of {'Core.TT.I16', V9} -> case V9 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.I16', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int16'(V8, V9))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V10} -> case V1 of {'Core.TT.I32', V11} -> case V11 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.I32', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int32'(V10, V11))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V12} -> case V1 of {'Core.TT.I64', V13} -> case V13 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.I64', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int64'(V12, V13))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> case V15 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.B8', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Bits8'(V14, V15))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> case V17 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.B16', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Bits16'(V16, V17))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> case V19 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.B32', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Bits32'(V18, V19))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> case V21 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.B64', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Bits64'(V20, V21))}} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--lte'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2, V3))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V4} -> case V1 of {'Core.TT.I8', V5} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int8'(V4, V5))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V6} -> case V1 of {'Core.TT.I16', V7} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int16'(V6, V7))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V1 of {'Core.TT.I32', V9} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int32'(V8, V9))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V10} -> case V1 of {'Core.TT.I64', V11} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int64'(V10, V11))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V12} -> case V1 of {'Core.TT.BI', V13} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V12, V13))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Bits8'(V14, V15))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Bits16'(V16, V17))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Bits32'(V18, V19))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Bits64'(V20, V21))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Str', V22} -> case V1 of {'Core.TT.Str', V23} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V22, V23))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Ch', V24} -> case V1 of {'Core.TT.Ch', V25} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V24, V25))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V26} -> case V1 of {'Core.TT.Db', V27} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Double'(V26, V27))))}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--lt'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, V3))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V4} -> case V1 of {'Core.TT.I8', V5} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int8'(V4, V5))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V6} -> case V1 of {'Core.TT.I16', V7} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int16'(V6, V7))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V1 of {'Core.TT.I32', V9} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int32'(V8, V9))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V10} -> case V1 of {'Core.TT.I64', V11} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int64'(V10, V11))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V12} -> case V1 of {'Core.TT.BI', V13} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V12, V13))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Bits8'(V14, V15))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Bits16'(V16, V17))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Bits32'(V18, V19))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Bits64'(V20, V21))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Str', V22} -> case V1 of {'Core.TT.Str', V23} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V22, V23))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Ch', V24} -> case V1 of {'Core.TT.Ch', V25} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V24, V25))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V26} -> case V1 of {'Core.TT.Db', V27} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V26, V27))))}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--integralTypes'() -> [0 | [1 | [2 | [3 | [4 | [5 | [6 | [7 | [8 | [9 | []]]]]]]]]]].
'un--gte'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2, V3))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V4} -> case V1 of {'Core.TT.I8', V5} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int8'(V4, V5))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V6} -> case V1 of {'Core.TT.I16', V7} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int16'(V6, V7))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V1 of {'Core.TT.I32', V9} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int32'(V8, V9))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V10} -> case V1 of {'Core.TT.I64', V11} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int64'(V10, V11))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V12} -> case V1 of {'Core.TT.BI', V13} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V12, V13))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Bits8'(V14, V15))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Bits16'(V16, V17))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Bits32'(V18, V19))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Bits64'(V20, V21))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Str', V22} -> case V1 of {'Core.TT.Str', V23} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V22, V23))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Ch', V24} -> case V1 of {'Core.TT.Ch', V25} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V24, V25))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V26} -> case V1 of {'Core.TT.Db', V27} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Double'(V26, V27))))}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--gt'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2, V3))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V4} -> case V1 of {'Core.TT.I8', V5} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int8'(V4, V5))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V6} -> case V1 of {'Core.TT.I16', V7} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int16'(V6, V7))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V1 of {'Core.TT.I32', V9} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int32'(V8, V9))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V10} -> case V1 of {'Core.TT.I64', V11} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int64'(V10, V11))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V12} -> case V1 of {'Core.TT.BI', V13} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V12, V13))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Bits8'(V14, V15))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Bits16'(V16, V17))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Bits32'(V18, V19))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Bits64'(V20, V21))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Str', V22} -> case V1 of {'Core.TT.Str', V23} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V22, V23))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Ch', V24} -> case V1 of {'Core.TT.Ch', V25} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V24, V25))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V26} -> case V1 of {'Core.TT.Db', V27} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Double'(V26, V27))))}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--getOp'(V0, V1) -> case V0 of {'Core.TT.Add', V2} -> fun (V3) -> ('un--binOp'(fun (V4) -> fun (V5) -> ('un--add'(V4, V5)) end end, V1, V3)) end; {'Core.TT.Sub', V6} -> fun (V7) -> ('un--binOp'(fun (V8) -> fun (V9) -> ('un--sub'(V8, V9)) end end, V1, V7)) end; {'Core.TT.Mul', V10} -> fun (V11) -> ('un--binOp'(fun (V12) -> fun (V13) -> ('un--mul'(V12, V13)) end end, V1, V11)) end; {'Core.TT.Div', V14} -> fun (V15) -> ('un--binOp'(fun (V16) -> fun (V17) -> ('un--div'(V16, V17)) end end, V1, V15)) end; {'Core.TT.Mod', V18} -> fun (V19) -> ('un--binOp'(fun (V20) -> fun (V21) -> ('un--mod'(V20, V21)) end end, V1, V19)) end; {'Core.TT.Neg', V22} -> fun (V23) -> ('un--unaryOp'(fun (V24) -> ('un--neg'(V24)) end, V1, V23)) end; {'Core.TT.ShiftL', V25} -> fun (V26) -> ('un--binOp'(fun (V27) -> fun (V28) -> ('un--shiftl'(V27, V28)) end end, V1, V26)) end; {'Core.TT.ShiftR', V29} -> fun (V30) -> ('un--binOp'(fun (V31) -> fun (V32) -> ('un--shiftr'(V31, V32)) end end, V1, V30)) end; {'Core.TT.BAnd', V33} -> fun (V34) -> ('un--binOp'(fun (V35) -> fun (V36) -> ('un--band'(V35, V36)) end end, V1, V34)) end; {'Core.TT.BOr', V37} -> fun (V38) -> ('un--binOp'(fun (V39) -> fun (V40) -> ('un--bor'(V39, V40)) end end, V1, V38)) end; {'Core.TT.BXOr', V41} -> fun (V42) -> ('un--binOp'(fun (V43) -> fun (V44) -> ('un--bxor'(V43, V44)) end end, V1, V42)) end; {'Core.TT.LT', V45} -> fun (V46) -> ('un--binOp'(fun (V47) -> fun (V48) -> ('un--lt'(V47, V48)) end end, V1, V46)) end; {'Core.TT.LTE', V49} -> fun (V50) -> ('un--binOp'(fun (V51) -> fun (V52) -> ('un--lte'(V51, V52)) end end, V1, V50)) end; {'Core.TT.EQ', V53} -> fun (V54) -> ('un--binOp'(fun (V55) -> fun (V56) -> ('un--eq'(V55, V56)) end end, V1, V54)) end; {'Core.TT.GTE', V57} -> fun (V58) -> ('un--binOp'(fun (V59) -> fun (V60) -> ('un--gte'(V59, V60)) end end, V1, V58)) end; {'Core.TT.GT', V61} -> fun (V62) -> ('un--binOp'(fun (V63) -> fun (V64) -> ('un--gt'(V63, V64)) end end, V1, V62)) end; {'Core.TT.StrLength'} -> fun (V65) -> ('un--strLength'(V65)) end; {'Core.TT.StrHead'} -> fun (V66) -> ('un--strHead'(V66)) end; {'Core.TT.StrTail'} -> fun (V67) -> ('un--strTail'(V67)) end; {'Core.TT.StrIndex'} -> fun (V68) -> ('un--strIndex'(V68)) end; {'Core.TT.StrCons'} -> fun (V69) -> ('un--strCons'(V69)) end; {'Core.TT.StrAppend'} -> fun (V70) -> ('un--strAppend'(V70)) end; {'Core.TT.StrReverse'} -> fun (V71) -> ('un--strReverse'(V71)) end; {'Core.TT.StrSubstr'} -> fun (V72) -> ('un--strSubstr'(V72)) end; {'Core.TT.DoubleExp'} -> fun (V73) -> ('un--doubleExp'(V73)) end; {'Core.TT.DoubleLog'} -> fun (V74) -> ('un--doubleLog'(V74)) end; {'Core.TT.DoublePow'} -> fun (V75) -> ('un--doublePow'(V1, V75)) end; {'Core.TT.DoubleSin'} -> fun (V76) -> ('un--doubleSin'(V76)) end; {'Core.TT.DoubleCos'} -> fun (V77) -> ('un--doubleCos'(V77)) end; {'Core.TT.DoubleTan'} -> fun (V78) -> ('un--doubleTan'(V78)) end; {'Core.TT.DoubleASin'} -> fun (V79) -> ('un--doubleASin'(V79)) end; {'Core.TT.DoubleACos'} -> fun (V80) -> ('un--doubleACos'(V80)) end; {'Core.TT.DoubleATan'} -> fun (V81) -> ('un--doubleATan'(V81)) end; {'Core.TT.DoubleSqrt'} -> fun (V82) -> ('un--doubleSqrt'(V82)) end; {'Core.TT.DoubleFloor'} -> fun (V83) -> ('un--doubleFloor'(V83)) end; {'Core.TT.DoubleCeiling'} -> fun (V84) -> ('un--doubleCeiling'(V84)) end; {'Core.TT.Cast', V85, V86} -> fun (V87) -> ('un--castTo'(V86, V87)) end; {'Core.TT.BelieveMe'} -> fun (V88) -> ('un--believeMe'(V88)) end; _ -> fun (V89) -> {'Prelude.Types.Nothing'} end end.
'un--eq'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V3))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V4} -> case V1 of {'Core.TT.I8', V5} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int8'(V4, V5))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V6} -> case V1 of {'Core.TT.I16', V7} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int16'(V6, V7))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V1 of {'Core.TT.I32', V9} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int32'(V8, V9))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V10} -> case V1 of {'Core.TT.I64', V11} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int64'(V10, V11))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V12} -> case V1 of {'Core.TT.BI', V13} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V12, V13))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bits8'(V14, V15))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bits16'(V16, V17))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bits32'(V18, V19))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bits64'(V20, V21))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Str', V22} -> case V1 of {'Core.TT.Str', V23} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V22, V23))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Ch', V24} -> case V1 of {'Core.TT.Ch', V25} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V24, V25))))}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V26} -> case V1 of {'Core.TT.Db', V27} -> {'Prelude.Types.Just', ('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Double'(V26, V27))))}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--doubleTy'() -> ('un--predTy'(12, 12)).
'un--doubleTan'(V0) -> ('un--doubleOp'(fun (V1) -> ('math':'tan'(V1)) end, V0)).
'un--doubleSqrt'(V0) -> ('un--doubleOp'(fun (V1) -> ('math':'sqrt'(V1)) end, V0)).
'un--doubleSin'(V0) -> ('un--doubleOp'(fun (V1) -> ('math':'sin'(V1)) end, V0)).
'un--doublePow'(V0, V1) -> ('un--binOp'(fun (V2) -> fun (V3) -> ('nested--10791-6212--in--un--pow\x{27}'(V0, V2, V3)) end end, V0, V1)).
'un--doubleOp'(V0, V1) -> case V1 of {'Data.Vect.::', V2, V3} -> case V2 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.Db', V6} -> case V3 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V4, {'Core.TT.Db', (V0(V6))}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--doubleLog'(V0) -> ('un--doubleOp'(fun (V1) -> ('math':'log'(V1)) end, V0)).
'un--doubleFloor'(V0) -> ('un--doubleOp'(fun (V1) -> ('erlang':'floor'(V1)) end, V0)).
'un--doubleExp'(V0) -> ('un--doubleOp'(fun (V1) -> ('math':'pow'(2.718281828459045, V1)) end, V0)).
'un--doubleCos'(V0) -> ('un--doubleOp'(fun (V1) -> ('math':'cos'(V1)) end, V0)).
'un--doubleCeiling'(V0) -> ('un--doubleOp'(fun (V1) -> ('erlang':'ceil'(V1)) end, V0)).
'un--doubleATan'(V0) -> ('un--doubleOp'(fun (V1) -> ('math':'atan'(V1)) end, V0)).
'un--doubleASin'(V0) -> ('un--doubleOp'(fun (V1) -> ('math':'asin'(V1)) end, V0)).
'un--doubleACos'(V0) -> ('un--doubleOp'(fun (V1) -> ('math':'acos'(V1)) end, V0)).
'un--div'(V0, V1) -> case V0 of {'Core.TT.BI', V2} -> case V1 of {'Core.TT.BI', V3} -> case V3 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.BI', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V2, V3))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I', V4} -> case V1 of {'Core.TT.I', V5} -> case V5 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.I', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V4, V5))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V6} -> case V1 of {'Core.TT.I8', V7} -> case V7 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.I8', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int8'(V6, V7))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V8} -> case V1 of {'Core.TT.I16', V9} -> case V9 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.I16', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int16'(V8, V9))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V10} -> case V1 of {'Core.TT.I32', V11} -> case V11 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.I32', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int32'(V10, V11))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V12} -> case V1 of {'Core.TT.I64', V13} -> case V13 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.I64', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int64'(V12, V13))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> case V15 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.B8', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Bits8'(V14, V15))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> case V17 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.B16', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Bits16'(V16, V17))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> case V19 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.B32', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Bits32'(V18, V19))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> case V21 of 0 -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Core.TT.B64', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Bits64'(V20, V21))}} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V22} -> case V1 of {'Core.TT.Db', V23} -> {'Prelude.Types.Just', {'Core.TT.Db', (V22 / V23)}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--crashTy'() -> ('un--pi'(<<"a"/utf8>>, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V0) -> fun (V1) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V0, V1)) end end, 0, fun (V2) -> fun (V3) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V2, V3)) end end, 1})), {'Core.TT.Explicit'}, {'Core.TT.TType', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Core.Name.MN', <<"top"/utf8>>, 0}}, ('un--pi'(<<"msg"/utf8>>, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Core.TT.PrT', 10}}, {'Core.TT.Local', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Prelude.Types.Nothing'}, 1})))).
'un--constantIntegerValue'(V0) -> case V0 of {'Core.TT.I', V1} -> {'Prelude.Types.Just', V1}; {'Core.TT.I8', V2} -> {'Prelude.Types.Just', V2}; {'Core.TT.I16', V3} -> {'Prelude.Types.Just', V3}; {'Core.TT.I32', V4} -> {'Prelude.Types.Just', V4}; {'Core.TT.I64', V5} -> {'Prelude.Types.Just', V5}; {'Core.TT.BI', V6} -> {'Prelude.Types.Just', V6}; {'Core.TT.B8', V7} -> {'Prelude.Types.Just', V7}; {'Core.TT.B16', V8} -> {'Prelude.Types.Just', V8}; {'Core.TT.B32', V9} -> {'Prelude.Types.Just', V9}; {'Core.TT.B64', V10} -> {'Prelude.Types.Just', V10}; _ -> {'Prelude.Types.Nothing'} end.
'un--constTy3'(V0, V1, V2, V3) -> begin (V6 = fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.TT':'un--fnType'([], ('Idris.Idris2.Core.FC':'un--emptyFC'()), V4, V5)) end end), ((V6(('un--primTyVal'(V0))))(((V6(('un--primTyVal'(V1))))(((V6(('un--primTyVal'(V2))))(('un--primTyVal'(V3)))))))) end.
'un--constTy'(V0, V1, V2) -> begin (V5 = fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.TT':'un--fnType'([], ('Idris.Idris2.Core.FC':'un--emptyFC'()), V3, V4)) end end), ((V5(('un--primTyVal'(V0))))(((V5(('un--primTyVal'(V1))))(('un--primTyVal'(V2)))))) end.
'un--cmpTy'(V0) -> ('un--constTy'(V0, V0, 0)).
'un--castTo'(V0, V1) -> case V0 of 0 -> ('un--castInt'(V1)); 1 -> ('un--castInt8'(V1)); 2 -> ('un--castInt16'(V1)); 3 -> ('un--castInt32'(V1)); 4 -> ('un--castInt64'(V1)); 5 -> ('un--castInteger'(V1)); 6 -> ('un--castBits8'(V1)); 7 -> ('un--castBits16'(V1)); 8 -> ('un--castBits32'(V1)); 9 -> ('un--castBits64'(V1)); 10 -> ('un--castString'(V1)); 11 -> ('un--castChar'(V1)); 12 -> ('un--castDouble'(V1)); 13 -> {'Prelude.Types.Nothing'} end.
'un--castString'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.I', V5} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V6} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int8'(V6))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V7} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int16'(V7))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int32'(V8))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V9} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int64'(V9))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V10} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V10))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V11} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits8'(V11))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V12} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits16'(V12))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V13} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits32'(V13))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V14} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits64'(V14))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Ch', V15} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Libraries.Utils.String':'un--stripQuotes'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Char'(V15))))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V16} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V16))}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castInteger'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.I', V5} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', V5}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V6} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', V6}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V7} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', V7}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', V8}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V9} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', V9}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V10} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', V10}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V11} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', V11}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V12} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', V12}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V13} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', V13}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Ch', V14} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', case V14 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V15} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', ('erlang':'trunc'(V15))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Str', V16} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.BI', case ('string':'to_integer'(V16)) of {E1, E2} when (erlang:'is_integer'(E1)) -> (fun (V17, V18) -> case ('string':'is_empty'(V18)) of 'true' -> V17; _ -> 0 end end(E1, E2)); _ -> 0 end}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castInt8'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V2 of {'Data.Vect.Nil'} -> ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V5) -> {'Core.Value.NPrimVal', V3, {'Core.TT.I8', begin (V6 = V5), case ((V6 band 128) =/= 0) of 'true' -> (V6 bor -128); _ -> (V6 band 127) end end}} end))(('un--constantIntegerValue'(V4)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castInt64'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V2 of {'Data.Vect.Nil'} -> ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V5) -> {'Core.Value.NPrimVal', V3, {'Core.TT.I64', begin (V6 = V5), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end}} end))(('un--constantIntegerValue'(V4)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castInt32'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V2 of {'Data.Vect.Nil'} -> ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V5) -> {'Core.Value.NPrimVal', V3, {'Core.TT.I32', begin (V6 = V5), case ((V6 band 2147483648) =/= 0) of 'true' -> (V6 bor -2147483648); _ -> (V6 band 2147483647) end end}} end))(('un--constantIntegerValue'(V4)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castInt16'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V2 of {'Data.Vect.Nil'} -> ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V5) -> {'Core.Value.NPrimVal', V3, {'Core.TT.I16', begin (V6 = V5), case ((V6 band 32768) =/= 0) of 'true' -> (V6 bor -32768); _ -> (V6 band 32767) end end}} end))(('un--constantIntegerValue'(V4)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castInt'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.I8', V5} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', V5}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V6} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', V6}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V7} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', V7}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V8} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', V8}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V9} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', begin (V10 = V9), case ((V10 band 9223372036854775808) =/= 0) of 'true' -> (V10 bor -9223372036854775808); _ -> (V10 band 9223372036854775807) end end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V11} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', V11}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V12} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', V12}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V13} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', V13}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V14} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', begin (V15 = V14), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V16} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', begin (V17 = ('erlang':'trunc'(V16))), case ((V17 band 9223372036854775808) =/= 0) of 'true' -> (V17 bor -9223372036854775808); _ -> (V17 band 9223372036854775807) end end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Ch', V18} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', case V18 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Str', V19} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.I', begin (V22 = case ('string':'to_integer'(V19)) of {E1, E2} when (erlang:'is_integer'(E1)) -> (fun (V20, V21) -> case ('string':'is_empty'(V21)) of 'true' -> V20; _ -> 0 end end(E1, E2)); _ -> 0 end), case ((V22 band 9223372036854775808) =/= 0) of 'true' -> (V22 bor -9223372036854775808); _ -> (V22 band 9223372036854775807) end end}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castDouble'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.I', V5} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Db', ('erlang':'float'(V5))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V6} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Db', ('erlang':'float'(V6))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V7} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Db', ('erlang':'float'(V7))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Db', ('erlang':'float'(V8))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V9} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Db', ('erlang':'float'(V9))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V10} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Db', ('erlang':'float'(V10))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V11} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Db', ('erlang':'float'(V11))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V12} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Db', ('erlang':'float'(V12))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V13} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Db', ('erlang':'float'(V13))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V14} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Db', ('erlang':'float'(V14))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Str', V15} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Db', case ('string':'to_float'(V15)) of {'error', 'no_float'} -> (fun (V16, V17) -> ('erlang':'float'(case ('string':'to_integer'(V15)) of {E0, E1} when (erlang:'is_integer'(E0)) -> (fun (V20, V21) -> case ('string':'is_empty'(V21)) of 'true' -> V20; _ -> 0 end end(E0, E1)); _ -> 0 end)) end('error', 'no_float')); {E2, E3} when (erlang:'is_float'(E2)) -> (fun (V18, V19) -> case ('string':'is_empty'(V19)) of 'true' -> V18; _ -> 0.0 end end(E2, E3)); _ -> 0.0 end}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castChar'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V4 of {'Core.TT.I', V5} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', case V5 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V6} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', case V6 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V7} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', case V7 of E2 when ((erlang:'is_integer'(E2)) andalso (((E2 >= 0) andalso (E2 =< 55295)) orelse ((E2 >= 57344) andalso (E2 =< 1114111)))) -> E2; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', case V8 of E3 when ((erlang:'is_integer'(E3)) andalso (((E3 >= 0) andalso (E3 =< 55295)) orelse ((E3 >= 57344) andalso (E3 =< 1114111)))) -> E3; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V9} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', case V9 of E4 when ((erlang:'is_integer'(E4)) andalso (((E4 >= 0) andalso (E4 =< 55295)) orelse ((E4 >= 57344) andalso (E4 =< 1114111)))) -> E4; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V10} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', case V10 of E5 when ((erlang:'is_integer'(E5)) andalso (((E5 >= 0) andalso (E5 =< 55295)) orelse ((E5 >= 57344) andalso (E5 =< 1114111)))) -> E5; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V11} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', case V11 of E6 when ((erlang:'is_integer'(E6)) andalso (((E6 >= 0) andalso (E6 =< 55295)) orelse ((E6 >= 57344) andalso (E6 =< 1114111)))) -> E6; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V12} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', case V12 of E7 when ((erlang:'is_integer'(E7)) andalso (((E7 >= 0) andalso (E7 =< 55295)) orelse ((E7 >= 57344) andalso (E7 =< 1114111)))) -> E7; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V13} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', case V13 of E8 when ((erlang:'is_integer'(E8)) andalso (((E8 >= 0) andalso (E8 =< 55295)) orelse ((E8 >= 57344) andalso (E8 =< 1114111)))) -> E8; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V14} -> case V2 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NPrimVal', V3, {'Core.TT.Ch', case V14 of E9 when ((erlang:'is_integer'(E9)) andalso (((E9 >= 0) andalso (E9 =< 55295)) orelse ((E9 >= 57344) andalso (E9 =< 1114111)))) -> E9; _ -> 65533 end}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castBits8'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V2 of {'Data.Vect.Nil'} -> ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V5) -> {'Core.Value.NPrimVal', V3, {'Core.TT.B8', begin (V6 = V5), begin (V7 = 256), begin (V8 = (V6 rem V7)), case ((V8 * V7) < 0) of 'true' -> (V8 + V7); _ -> V8 end end end end}} end))(('un--constantIntegerValue'(V4)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castBits64'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V2 of {'Data.Vect.Nil'} -> ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V5) -> {'Core.Value.NPrimVal', V3, {'Core.TT.B64', begin (V6 = V5), begin (V7 = 18446744073709551616), begin (V8 = (V6 rem V7)), case ((V8 * V7) < 0) of 'true' -> (V8 + V7); _ -> V8 end end end end}} end))(('un--constantIntegerValue'(V4)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castBits32'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V2 of {'Data.Vect.Nil'} -> ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V5) -> {'Core.Value.NPrimVal', V3, {'Core.TT.B32', begin (V6 = V5), begin (V7 = 4294967296), begin (V8 = (V6 rem V7)), case ((V8 * V7) < 0) of 'true' -> (V8 + V7); _ -> V8 end end end end}} end))(('un--constantIntegerValue'(V4)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--castBits16'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V1 of {'Core.Value.NPrimVal', V3, V4} -> case V2 of {'Data.Vect.Nil'} -> ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V5) -> {'Core.Value.NPrimVal', V3, {'Core.TT.B16', begin (V6 = V5), begin (V7 = 65536), begin (V8 = (V6 rem V7)), case ((V8 * V7) < 0) of 'true' -> (V8 + V7); _ -> V8 end end end end}} end))(('un--constantIntegerValue'(V4)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--bxor'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> {'Prelude.Types.Just', {'Core.TT.I', (V2 bxor V3)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V4} -> case V1 of {'Core.TT.B8', V5} -> {'Prelude.Types.Just', {'Core.TT.B8', (V4 bxor V5)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V6} -> case V1 of {'Core.TT.B16', V7} -> {'Prelude.Types.Just', {'Core.TT.B16', (V6 bxor V7)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V8} -> case V1 of {'Core.TT.B32', V9} -> {'Prelude.Types.Just', {'Core.TT.B32', (V8 bxor V9)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V10} -> case V1 of {'Core.TT.B64', V11} -> {'Prelude.Types.Just', {'Core.TT.B64', (V10 bxor V11)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V12} -> case V1 of {'Core.TT.I8', V13} -> {'Prelude.Types.Just', {'Core.TT.I8', (V12 bxor V13)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V14} -> case V1 of {'Core.TT.I16', V15} -> {'Prelude.Types.Just', {'Core.TT.I16', (V14 bxor V15)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V16} -> case V1 of {'Core.TT.I32', V17} -> {'Prelude.Types.Just', {'Core.TT.I32', (V16 bxor V17)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V18} -> case V1 of {'Core.TT.I64', V19} -> {'Prelude.Types.Just', {'Core.TT.I64', (V18 bxor V19)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V20} -> case V1 of {'Core.TT.BI', V21} -> {'Prelude.Types.Just', {'Core.TT.BI', (V20 bxor V21)}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--bor'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> {'Prelude.Types.Just', {'Core.TT.I', (V2 bor V3)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V4} -> case V1 of {'Core.TT.I8', V5} -> {'Prelude.Types.Just', {'Core.TT.I8', (V4 bor V5)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V6} -> case V1 of {'Core.TT.I16', V7} -> {'Prelude.Types.Just', {'Core.TT.I16', (V6 bor V7)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V1 of {'Core.TT.I32', V9} -> {'Prelude.Types.Just', {'Core.TT.I32', (V8 bor V9)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V10} -> case V1 of {'Core.TT.I64', V11} -> {'Prelude.Types.Just', {'Core.TT.I64', (V10 bor V11)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V12} -> case V1 of {'Core.TT.BI', V13} -> {'Prelude.Types.Just', {'Core.TT.BI', (V12 bor V13)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> {'Prelude.Types.Just', {'Core.TT.B8', (V14 bor V15)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> {'Prelude.Types.Just', {'Core.TT.B16', (V16 bor V17)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> {'Prelude.Types.Just', {'Core.TT.B32', (V18 bor V19)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> {'Prelude.Types.Just', {'Core.TT.B64', (V20 bor V21)}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--binOp'(V0, V1, V2) -> case V2 of {'Data.Vect.::', V3, V4} -> case V3 of {'Core.Value.NPrimVal', V5, V6} -> case V4 of {'Data.Vect.::', V7, V8} -> case V7 of {'Core.Value.NPrimVal', V9, V10} -> case V8 of {'Data.Vect.Nil'} -> ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> {'Core.Value.NPrimVal', V5, V11} end))(((V0(V6))(V10)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--believeMeTy'() -> ('un--pi'(<<"a"/utf8>>, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V0) -> fun (V1) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V0, V1)) end end, 0, fun (V2) -> fun (V3) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V2, V3)) end end, 1})), {'Core.TT.Explicit'}, {'Core.TT.TType', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Core.Name.MN', <<"top"/utf8>>, 0}}, ('un--pi'(<<"b"/utf8>>, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V4, V5)) end end, 0, fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V6, V7)) end end, 1})), {'Core.TT.Explicit'}, {'Core.TT.TType', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Core.Name.MN', <<"top"/utf8>>, 0}}, ('un--pi'(<<"x"/utf8>>, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V8, V9)) end end, 0, fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V10, V11)) end end, 1})), {'Core.TT.Explicit'}, {'Core.TT.Local', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Prelude.Types.Nothing'}, 1}, {'Core.TT.Local', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Prelude.Types.Nothing'}, 1})))))).
'un--believeMe'(V0) -> case V0 of {'Data.Vect.::', V1, V2} -> case V2 of {'Data.Vect.::', V3, V4} -> case V4 of {'Data.Vect.::', V5, V6} -> case V5 of {'Core.Value.NDCon', V7, V8, V9, V10, V11} -> case V6 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', V5}; _ -> case V6 of {'Data.Vect.Nil'} -> {'Prelude.Types.Nothing'} end end; {'Core.Value.NTCon', V12, V13, V14, V15, V16} -> case V6 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', V5}; _ -> case V6 of {'Data.Vect.Nil'} -> {'Prelude.Types.Nothing'} end end; {'Core.Value.NPrimVal', V17, V18} -> case V6 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', V5}; _ -> case V6 of {'Data.Vect.Nil'} -> {'Prelude.Types.Nothing'} end end; {'Core.Value.NType', V19, V20} -> case V6 of {'Data.Vect.Nil'} -> {'Prelude.Types.Just', {'Core.Value.NType', V19, V20}}; _ -> case V6 of {'Data.Vect.Nil'} -> {'Prelude.Types.Nothing'} end end; _ -> case V6 of {'Data.Vect.Nil'} -> {'Prelude.Types.Nothing'} end end end end end.
'un--band'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> {'Prelude.Types.Just', {'Core.TT.I', (V2 band V3)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V4} -> case V1 of {'Core.TT.I8', V5} -> {'Prelude.Types.Just', {'Core.TT.I8', (V4 band V5)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V6} -> case V1 of {'Core.TT.I16', V7} -> {'Prelude.Types.Just', {'Core.TT.I16', (V6 band V7)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V8} -> case V1 of {'Core.TT.I32', V9} -> {'Prelude.Types.Just', {'Core.TT.I32', (V8 band V9)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V10} -> case V1 of {'Core.TT.I64', V11} -> {'Prelude.Types.Just', {'Core.TT.I64', (V10 band V11)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V12} -> case V1 of {'Core.TT.BI', V13} -> {'Prelude.Types.Just', {'Core.TT.BI', (V12 band V13)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> {'Prelude.Types.Just', {'Core.TT.B8', (V14 band V15)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> {'Prelude.Types.Just', {'Core.TT.B16', (V16 band V17)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> {'Prelude.Types.Just', {'Core.TT.B32', (V18 band V19)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> {'Prelude.Types.Just', {'Core.TT.B64', (V20 band V21)}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--arithTy'(V0) -> ('un--constTy'(V0, V0, V0)).
'un--allPrimitives'() -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.Add', V0}, ('un--arithTy'(V0)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--numTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.Sub', V8}, ('un--arithTy'(V8)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--numTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V16) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.Mul', V16}, ('un--arithTy'(V16)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--numTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V24) -> {'Core.Primitives.MkPrim', 1, {'Core.TT.Neg', V24}, ('un--predTy'(V24, V24)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--numTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(fun (V32) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.Div', V32}, ('un--arithTy'(V32)), ('Idris.Idris2.Core.TT':'un--notCovering'())} end))(('un--numTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V40) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.Mod', V40}, ('un--arithTy'(V40)), ('Idris.Idris2.Core.TT':'un--notCovering'())} end))(('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V53 = fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V51, V52)) end end end end), fun (V54) -> fun (V55) -> ((((V53('erased'))('erased'))(V54))(V55)) end end end(fun (V48) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.ShiftL', V48}, ('un--arithTy'(V48)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V61 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V59, V60)) end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end(fun (V56) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.ShiftR', V56}, ('un--arithTy'(V56)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V69 = fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V67, V68)) end end end end), fun (V70) -> fun (V71) -> ((((V69('erased'))('erased'))(V70))(V71)) end end end(fun (V64) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.BAnd', V64}, ('un--arithTy'(V64)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V77 = fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V75, V76)) end end end end), fun (V78) -> fun (V79) -> ((((V77('erased'))('erased'))(V78))(V79)) end end end(fun (V72) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.BOr', V72}, ('un--arithTy'(V72)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V85 = fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V83, V84)) end end end end), fun (V86) -> fun (V87) -> ((((V85('erased'))('erased'))(V86))(V87)) end end end(fun (V80) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.BXOr', V80}, ('un--arithTy'(V80)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V93 = fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V91, V92)) end end end end), fun (V94) -> fun (V95) -> ((((V93('erased'))('erased'))(V94))(V95)) end end end(fun (V88) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.LT', V88}, ('un--cmpTy'(V88)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--primTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V101 = fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V99, V100)) end end end end), fun (V102) -> fun (V103) -> ((((V101('erased'))('erased'))(V102))(V103)) end end end(fun (V96) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.LTE', V96}, ('un--cmpTy'(V96)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--primTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V109 = fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V107, V108)) end end end end), fun (V110) -> fun (V111) -> ((((V109('erased'))('erased'))(V110))(V111)) end end end(fun (V104) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.EQ', V104}, ('un--cmpTy'(V104)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--primTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V117 = fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V115, V116)) end end end end), fun (V118) -> fun (V119) -> ((((V117('erased'))('erased'))(V118))(V119)) end end end(fun (V112) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.GTE', V112}, ('un--cmpTy'(V112)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--primTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V125 = fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V123, V124)) end end end end), fun (V126) -> fun (V127) -> ((((V125('erased'))('erased'))(V126))(V127)) end end end(fun (V120) -> {'Core.Primitives.MkPrim', 2, {'Core.TT.GT', V120}, ('un--cmpTy'(V120)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end))(('un--primTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Core.Primitives.MkPrim', 1, {'Core.TT.StrLength'}, ('un--predTy'(10, 0)), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.StrHead'}, ('un--predTy'(10, 11)), ('Idris.Idris2.Core.TT':'un--notCovering'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.StrTail'}, ('un--predTy'(10, 10)), ('Idris.Idris2.Core.TT':'un--notCovering'())} | [{'Core.Primitives.MkPrim', 2, {'Core.TT.StrIndex'}, ('un--constTy'(10, 0, 11)), ('Idris.Idris2.Core.TT':'un--notCovering'())} | [{'Core.Primitives.MkPrim', 2, {'Core.TT.StrCons'}, ('un--constTy'(11, 10, 10)), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 2, {'Core.TT.StrAppend'}, ('un--arithTy'(10)), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.StrReverse'}, ('un--predTy'(10, 10)), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 3, {'Core.TT.StrSubstr'}, ('un--constTy3'(0, 0, 10, 10)), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 3, {'Core.TT.BelieveMe'}, ('un--believeMeTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 2, {'Core.TT.Crash'}, ('un--crashTy'()), ('Idris.Idris2.Core.TT':'un--notCovering'())} | []]]]]]]]]]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Core.Primitives.MkPrim', 1, {'Core.TT.DoubleExp'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.DoubleLog'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 2, {'Core.TT.DoublePow'}, ('un--arithTy'(12)), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.DoubleSin'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.DoubleCos'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.DoubleTan'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.DoubleASin'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.DoubleACos'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.DoubleATan'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.DoubleSqrt'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.DoubleFloor'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Core.Primitives.MkPrim', 1, {'Core.TT.DoubleCeiling'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | []]]]]]]]]]]]], ('Idris.Idris2.Prelude.Types':'un--listBind'(('un--primTypes'()), fun (V128) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(('un--primTypes'()), fun (V129) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V132, V133)) end end end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V135)) end end, fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_List'(V138, V139)) end end end end}, fun (V140) -> [] end, fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V142, (V143()))) end end end}, case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_PrimType'(V128, V129)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V144) -> fun (V145) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V144, V145)) end end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_PrimType'(V146, V147)) end end}, {'Prelude.EqOrd.MkEq', fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V148, V149)) end end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_PrimType'(V150, V151)) end end}, {'Builtin.MkPair', V128, V129}, {'Builtin.MkPair', 10, 11})) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V152) -> fun (V153) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V152, V153)) end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_PrimType'(V154, V155)) end end}, {'Prelude.EqOrd.MkEq', fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V156, V157)) end end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_PrimType'(V158, V159)) end end}, {'Builtin.MkPair', V128, V129}, {'Builtin.MkPair', 12, 11})) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V160, V161)) end end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_PrimType'(V162, V163)) end end}, {'Prelude.EqOrd.MkEq', fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V164, V165)) end end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_PrimType'(V166, V167)) end end}, {'Builtin.MkPair', V128, V129}, {'Builtin.MkPair', 11, 12})); 0 -> 0 end; 0 -> 0 end; 0 -> 0 end)), fun (V168) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'({'Core.Primitives.MkPrim', 1, {'Core.TT.Cast', V128, V129}, ('un--predTy'(V128, V129)), ('Idris.Idris2.Core.TT':'un--isTotal'())})) end)) end)) end)))))))))))))))))))))))))))))))))))))).
'un--add'(V0, V1) -> case V0 of {'Core.TT.BI', V2} -> case V1 of {'Core.TT.BI', V3} -> {'Prelude.Types.Just', {'Core.TT.BI', (V2 + V3)}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I', V4} -> case V1 of {'Core.TT.I', V5} -> {'Prelude.Types.Just', {'Core.TT.I', begin (V6 = (V4 + V5)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V7} -> case V1 of {'Core.TT.I8', V8} -> {'Prelude.Types.Just', {'Core.TT.I8', begin (V9 = (V7 + V8)), case ((V9 band 128) =/= 0) of 'true' -> (V9 bor -128); _ -> (V9 band 127) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V10} -> case V1 of {'Core.TT.I16', V11} -> {'Prelude.Types.Just', {'Core.TT.I16', begin (V12 = (V10 + V11)), case ((V12 band 32768) =/= 0) of 'true' -> (V12 bor -32768); _ -> (V12 band 32767) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V13} -> case V1 of {'Core.TT.I32', V14} -> {'Prelude.Types.Just', {'Core.TT.I32', begin (V15 = (V13 + V14)), case ((V15 band 2147483648) =/= 0) of 'true' -> (V15 bor -2147483648); _ -> (V15 band 2147483647) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V16} -> case V1 of {'Core.TT.I64', V17} -> {'Prelude.Types.Just', {'Core.TT.I64', begin (V18 = (V16 + V17)), case ((V18 band 9223372036854775808) =/= 0) of 'true' -> (V18 bor -9223372036854775808); _ -> (V18 band 9223372036854775807) end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V19} -> case V1 of {'Core.TT.B8', V20} -> {'Prelude.Types.Just', {'Core.TT.B8', begin (V21 = (V19 + V20)), begin (V22 = 256), begin (V23 = (V21 rem V22)), case ((V23 * V22) < 0) of 'true' -> (V23 + V22); _ -> V23 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V24} -> case V1 of {'Core.TT.B16', V25} -> {'Prelude.Types.Just', {'Core.TT.B16', begin (V26 = (V24 + V25)), begin (V27 = 65536), begin (V28 = (V26 rem V27)), case ((V28 * V27) < 0) of 'true' -> (V28 + V27); _ -> V28 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V29} -> case V1 of {'Core.TT.B32', V30} -> {'Prelude.Types.Just', {'Core.TT.B32', begin (V31 = (V29 + V30)), begin (V32 = 4294967296), begin (V33 = (V31 rem V32)), case ((V33 * V32) < 0) of 'true' -> (V33 + V32); _ -> V33 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V34} -> case V1 of {'Core.TT.B64', V35} -> {'Prelude.Types.Just', {'Core.TT.B64', begin (V36 = (V34 + V35)), begin (V37 = 18446744073709551616), begin (V38 = (V36 rem V37)), case ((V38 * V37) < 0) of 'true' -> (V38 + V37); _ -> V38 end end end end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Ch', V39} -> case V1 of {'Core.TT.Ch', V40} -> {'Prelude.Types.Just', {'Core.TT.Ch', case begin (V41 = (case V39 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end + case V40 of E2 when ((erlang:'is_integer'(E2)) andalso (((E2 >= 0) andalso (E2 =< 55295)) orelse ((E2 >= 57344) andalso (E2 =< 1114111)))) -> E2; _ -> 65533 end)), case ((V41 band 9223372036854775808) =/= 0) of 'true' -> (V41 bor -9223372036854775808); _ -> (V41 band 9223372036854775807) end end of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V42} -> case V1 of {'Core.TT.Db', V43} -> {'Prelude.Types.Just', {'Core.TT.Db', (V42 + V43)}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
