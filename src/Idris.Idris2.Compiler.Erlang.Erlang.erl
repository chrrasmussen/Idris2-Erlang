-module('Idris.Idris2.Compiler.Erlang.Erlang').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--compileExpr-5100'/9,
  'nested--13155-4561--in--un--shouldCompileName'/6,
  'un--writeErlangModule'/7,
  'un--splitNamespaceInfo'/2,
  'un--groupBy'/4,
  'un--getGlobalOpts'/2,
  'un--getExportFunNames'/1,
  'un--getCompileExpr'/2,
  'un--getAllModuleOpts'/1,
  'un--genExports'/4,
  'un--genDeclErl'/1,
  'un--genDeclAbstr'/1,
  'un--genCompdef'/3,
  'un--findErlangExecutable'/1,
  'un--findErlangCompiler'/1,
  'un--executeExpr'/4,
  'un--defsPerModule'/1,
  'un--defLine'/0,
  'un--concatNamespaceInfo'/2,
  'un--compileMainEntrypointToModules'/4,
  'un--compileLibraryToModules'/4,
  'un--compileLibrary'/5,
  'un--compileExpr'/6,
  'un--codegenErlang'/0,
  'un--build'/7
]).
'case--compileExpr-5100'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Prelude.Types.Just', V9} -> begin (V10 = ('un--compileMainEntrypointToModules'(V5, V7, V1, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V41 = begin (V34 = begin (V15 = ('un--build'(V5, V7, [], V3, V2, {'Prelude.Types.Just', V9}, V14))), ((begin (V31 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V28, V29, V30)) end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end((begin (V23 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> {'Prelude.Types.Right', (V19(V22))} end end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V16) -> {'Builtin.MkUnit'} end))))(V15)) end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V40 = fun (V39) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V0}} end), V40 end(V35)) end end end end), V41 end(V11)) end end end end; {'Prelude.Types.Nothing'} -> fun (V42) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Expected a filename"/utf8>>}, V42)) end end.
'nested--13155-4561--in--un--shouldCompileName'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Prelude.Types.Nothing'} -> 1; {'Prelude.Types.Just', V6} -> begin (V15 = ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V7)) end))(V6))), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V16, V17)) end end, 0}, fun (V18) -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V18, ('Idris.Idris2.Compiler.Erlang.Name':'un--getNamespace'(V5)))) end, V15)) end end.
'un--writeErlangModule'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> begin (V17 = case begin (V9 = V7), V9 end of {'Compiler.Erlang.Name.Concat', V10} -> {'Prelude.Types.Nothing'}; {'Compiler.Erlang.Name.Split', V11, V12} -> ('Idris.Idris2.Data.List':'un--find'(fun (V13) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(case V13 of {'Compiler.Erlang.ModuleOpts.MkModuleOpts', V14, V15, V16} -> V14 end, V12)) end, V2)) end), begin (V24 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V18) -> {'Prelude.Types.Right', []} end end, fun () -> fun (V19) -> ('un--genExports'(V0, V7, ('un--defLine'()), V19)) end end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V17, fun (V20) -> case V20 of {'Compiler.Erlang.ModuleOpts.MkModuleOpts', V21, V22, V23} -> V22 end end))))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V93 = begin (V29 = ('Idris.Idris2.Compiler.Erlang.Name':'un--currentModuleName'(V7))), begin (V34 = ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V17, fun (V30) -> case V30 of {'Compiler.Erlang.ModuleOpts.MkModuleOpts', V31, V32, V33} -> V33 end end))), begin (V43 = case ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> case V1 of {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V35, V36, V37, V38} -> V37 end end, V34)), 0)) of 1 -> [{'Compiler.Erlang.IR.ErlExpr.Inline', ('un--defLine'())} | [{'Compiler.Erlang.IR.ErlExpr.InlineSize', ('un--defLine'()), case V1 of {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V39, V40, V41, V42} -> V41 end} | []]]; 0 -> [] end), begin (V44 = {'Compiler.Erlang.IR.ErlExpr.MkModule', {'Compiler.Erlang.IR.ErlExpr.MkModuleName', ('un--defLine'()), V29}, [{'Compiler.Erlang.IR.ErlExpr.NoAutoImport', ('un--defLine'())} | V43], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V28, V8))}), begin (V45 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, <<V29/binary, <<<<"."/utf8>>/binary, V4/binary>>/binary>>))), begin (V46 = ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat':'un--genErlModule'(('un--defLine'()), V44))), begin (V54 = ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Compiler.Erlang.Utils.CompositeString':'un--flatten'({'Compiler.Erlang.Utils.CompositeString.Nested', ((begin (V51 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V49, V50)) end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(V5))(V46))}))))), begin (V84 = fun (V55) -> begin (V83 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> V62 end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), begin (V70 = (V67(V68))), (V69(V70)) end end end end end end end}, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), ((V74(V76))(V75)) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V78(V79))), (V80(V79)) end end end end}, fun (V81) -> fun (V82) -> V82 end end}, V45, V54))(V55))), {'Prelude.Types.Right', V83} end end), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V92 = fun (V89) -> case V88 of {'Prelude.Types.Right', V90} -> {'Prelude.Types.Right', V45}; {'Prelude.Types.Left', V91} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V45, V91}, V89)) end end), V92 end(V85)) end end end end end end end end end end end), V93 end(V25)) end end end end end end.
'un--splitNamespaceInfo'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> begin (V4 = ('Idris.Idris2.Compiler.Erlang.Name':'un--getNamespace'(V2))), {'Builtin.MkPair', {'Compiler.Erlang.Name.Split', V0, V4}, V1} end end.
'un--groupBy'(V0, V1, V2, V3) -> case V3 of [] -> ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'(V0)); [E0 | E1] -> (fun (V4, V5) -> ((begin (V10 = fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Data.SortedMap':'dn--un--<+>_Semigroup_((SortedMap $k) $v)'(fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, V9)) end end, V6, V7)) end end), fun (V11) -> fun (V12) -> ((V10(V11))(V12)) end end end(('Idris.Idris2.Libraries.Data.SortedMap':'un--singleton'(V0, (V1(V4)), [(V2(V4)) | []]))))(('un--groupBy'(V0, V1, V2, V5)))) end(E0, E1)) end.
'un--getGlobalOpts'(V0, V1) -> begin (V22 = ('un--groupBy'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V4, V5)) end end}, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--compare_Ord_Namespace'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<_Ord_Namespace'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->_Ord_Namespace'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<=_Ord_Namespace'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->=_Ord_Namespace'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--max_Ord_Namespace'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--min_Ord_Namespace'(V18, V19)) end end}, fun (V20) -> ('Idris.Idris2.Builtin':'un--fst'(V20)) end, fun (V21) -> ('Idris.Idris2.Builtin':'un--snd'(V21)) end, V1))), begin (V23 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V22))))), ('Idris.Idris2.Compiler.Erlang.GlobalOpts':'un--parseOpts'(V0, V23)) end end.
'un--getExportFunNames'(V0) -> ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V1) -> ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V5) -> {'Builtin.MkPair', case V1 of {'Compiler.Erlang.ModuleOpts.MkModuleOpts', V6, V7, V8} -> V6 end, V5} end))(case V1 of {'Compiler.Erlang.ModuleOpts.MkModuleOpts', V2, V3, V4} -> V3 end)) end, V0)).
'un--getCompileExpr'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V86 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V85 = fun (V49) -> case V48 of {'Prelude.Types.Just', V50} -> case ((begin (V78 = fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V76, V77)) end end end end), fun (V79) -> fun (V80) -> ((((V78('erased'))('erased'))(V79))(V80)) end end end(fun (V73) -> ('Idris.Idris2.Core.CompileExpr':'un--forgetDef'(V73)) end))(case V50 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> V69 end)) of {'Prelude.Types.Just', V81} -> {'Prelude.Types.Right', V81}; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"No compiled definition for "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V49)) end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<(begin (V83 = fun (V82) -> V82 end), fun (V84) -> (V83(V84)) end end(<<"Compiling undefined name "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V49)) end end), V85 end(V45)) end end end end), V86 end(V8)) end end end end.
'un--getAllModuleOpts'(V0) -> begin (V21 = ('un--groupBy'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V3, V4)) end end}, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--compare_Ord_Namespace'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<_Ord_Namespace'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->_Ord_Namespace'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<=_Ord_Namespace'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->=_Ord_Namespace'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--max_Ord_Namespace'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--min_Ord_Namespace'(V17, V18)) end end}, fun (V19) -> ('Idris.Idris2.Builtin':'un--fst'(V19)) end, fun (V20) -> ('Idris.Idris2.Builtin':'un--snd'(V20)) end, V0))), begin (V22 = ('Idris.Idris2.Libraries.Data.SortedMap':'un--toList'(('Idris.Idris2.Libraries.Data.SortedMap':'un--delete'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V21))))), ((begin (V30 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V28, V29)) end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V23) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V24) -> fun (V25) -> ('Idris.Idris2.Compiler.Erlang.ModuleOpts':'un--parseModuleOpts'(V24, V25)) end end, V23)) end))(V22)) end end.
'un--genExports'(V0, V1, V2, V3) -> begin (V4 = ('un--getCompileExpr'(V0, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V13 = case V8 of {'Core.CompileExpr.MkNmFun', V9, V10} -> case V9 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr':'un--readExports'(V1, V2, V10)); _ -> fun (V11) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Expected function definition for "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>}, V11)) end end; _ -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Expected function definition for "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>}, V12)) end end), V13 end(V5)) end end end end.
'un--genDeclErl'(V0) -> {'Compiler.Erlang.Utils.CompositeString.Nested', [('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormatToErlangSource':'un--genDecl'(V0)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"\x{a}"/utf8>>} | []]]}.
'un--genDeclAbstr'(V0) -> {'Compiler.Erlang.Utils.CompositeString.Nested', [('Idris.Idris2.Compiler.Erlang.Utils.PrimTerm':'un--primTermToCS'(('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormatToPrimTerm':'un--genDecl'(V0)))) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<".\x{a}"/utf8>>} | []]]}.
'un--genCompdef'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> begin (V9 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr':'un--genDef'(V0, V3, V1, V5, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V16 = fun (V14) -> case V13 of {'Prelude.Types.Just', V15} -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V3, V15}}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V16 end(V10)) end end end end end end end.
'un--findErlangExecutable'(V0) -> <<"erl"/utf8>>.
'un--findErlangCompiler'(V0) -> <<"erlc"/utf8>>.
'un--executeExpr'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getDirectives'(V0, {'Core.Options.Other', <<"erlang"/utf8>>}))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V97 = begin (V9 = ('un--getGlobalOpts'(('Idris.Idris2.Compiler.Erlang.GlobalOpts':'un--defaultGlobalOpts'()), V8))), begin (V10 = ('un--compileMainEntrypointToModules'(V0, V9, V3, <<"main"/utf8>>))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V96 = begin (V34 = begin (V15 = ('un--build'(V0, V9, [], V2, V2, {'Prelude.Types.Just', <<"main"/utf8>>}, V14))), ((begin (V31 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V28, V29, V30)) end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end((begin (V23 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> {'Prelude.Types.Right', (V19(V22))} end end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V16) -> {'Builtin.MkUnit'} end))))(V15)) end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V95 = begin (V41 = fun (V39) -> begin (V40 = ('un--findErlangExecutable'(V39))), {'Prelude.Types.Right', V40} end end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V94 = begin (V75 = fun (V46) -> begin (V74 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V49, V50, V51)) end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> V53 end end end, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V57(V59))), begin (V61 = (V58(V59))), (V60(V61)) end end end end end end end}, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V64(V66))), ((V65(V67))(V66)) end end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V69(V70))), (V71(V70)) end end end end}, fun (V72) -> fun (V73) -> V73 end end}, ('Idris.Idris2.Compiler.Erlang.Cmd':'un--executeBeamCmd'(V45, V2, <<"main"/utf8>>))))(V46))), {'Prelude.Types.Right', V74} end end), ((begin (V91 = fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V88, V89, V90)) end end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end((begin (V83 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> {'Prelude.Types.Right', (V79(V82))} end end end end end), fun (V84) -> fun (V85) -> ((((V83('erased'))('erased'))(V84))(V85)) end end end(fun (V76) -> {'Builtin.MkUnit'} end))))(V75)) end), V94 end(V42)) end end end end), V95 end(V35)) end end end end), V96 end(V11)) end end end end end), V97 end(V5)) end end end end.
'un--defsPerModule'(V0) -> ('Idris.Idris2.Libraries.Data.SortedMap':'un--toList'(('un--groupBy'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Compiler.Erlang.Name':'dn--un--==_Eq_NamespaceInfo'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Compiler.Erlang.Name':'dn--un--/=_Eq_NamespaceInfo'(V3, V4)) end end}, fun (V5) -> fun (V6) -> ('Idris.Idris2.Compiler.Erlang.Name':'dn--un--compare_Ord_NamespaceInfo'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Compiler.Erlang.Name':'dn--un--<_Ord_NamespaceInfo'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Compiler.Erlang.Name':'dn--un-->_Ord_NamespaceInfo'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Compiler.Erlang.Name':'dn--un--<=_Ord_NamespaceInfo'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Compiler.Erlang.Name':'dn--un-->=_Ord_NamespaceInfo'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Compiler.Erlang.Name':'dn--un--max_Ord_NamespaceInfo'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Compiler.Erlang.Name':'dn--un--min_Ord_NamespaceInfo'(V17, V18)) end end}, fun (V19) -> ('Idris.Idris2.Builtin':'un--fst'(V19)) end, fun (V20) -> ('Idris.Idris2.Builtin':'un--snd'(V20)) end, V0)))).
'un--defLine'() -> begin (V0 = 4242), case ((V0 band 9223372036854775808) =/= 0) of 'true' -> (V0 bor -9223372036854775808); _ -> (V0 band 9223372036854775807) end end.
'un--concatNamespaceInfo'(V0, V1) -> {'Builtin.MkPair', {'Compiler.Erlang.Name.Concat', V0}, V1}.
'un--compileMainEntrypointToModules'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V0, 0, 0, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V69 = begin (V13 = case V1 of {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V9, V10, V11, V12} -> V12 end), begin (V21 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> ('un--genCompdef'(V13, ('un--defLine'()), ('un--concatNamespaceInfo'(V3, V14)))) end, case V8 of {'Compiler.Common.MkCompileData', V15, V16, V17, V18, V19, V20} -> V17 end, []))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V68 = begin (V26 = {'Compiler.Erlang.Name.Concat', V3}), begin (V27 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport.LV'}, ('Idris.Idris2.Compiler.Erlang.IR.ErlExpr.LocalVars':'un--initLocalVars'(<<"V"/utf8>>))))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V67 = begin (V38 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr':'un--genNmExp'(V31, V13, V26, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Core.CompileExpr':'un--forget'([], case V8 of {'Compiler.Common.MkCompileData', V32, V33, V34, V35, V36, V37} -> V32 end))))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V66 = begin (V43 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V31))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V65 = begin (V48 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genErlMain'(V31, ('un--defLine'()), V42))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V64 = begin (V53 = {'Compiler.Erlang.IR.ErlExpr.MkFunDecl', ('un--defLine'()), 1, <<"start"/utf8>>, [], V52}), begin (V54 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genEscriptMain'(V31, ('un--defLine'()), V42))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V63 = begin (V59 = {'Compiler.Erlang.IR.ErlExpr.MkFunDecl', ('un--defLine'()), 1, <<"main"/utf8>>, [V47 | []], V58}), begin (V61 = [{'Builtin.MkPair', V26, V53} | [{'Builtin.MkPair', V26, V59} | ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V60) -> V60 end, V25))]]), fun (V62) -> {'Prelude.Types.Right', ('un--defsPerModule'(V61))} end end end), V63 end(V55)) end end end end end), V64 end(V49)) end end end end), V65 end(V44)) end end end end), V66 end(V39)) end end end end), V67 end(V28)) end end end end end), V68 end(V22)) end end end end end), V69 end(V5)) end end end end.
'un--compileLibraryToModules'(V0, V1, V2, V3) -> begin (V13 = ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V4) -> ('nested--13155-4561--in--un--shouldCompileName'(V3, V2, V1, V0, V3, V4)) end, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('Idris.Idris2.Builtin':'un--snd'(V5)) end))(('un--getExportFunNames'(V2))))))), begin (V15 = ('Idris.Idris2.Compiler.Common':'un--getExportedCompileData'(V0, 0, 0, fun (V14) -> ('nested--13155-4561--in--un--shouldCompileName'(V3, V2, V1, V0, V3, V14)) end, V13))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V46 = begin (V24 = case V1 of {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V20, V21, V22, V23} -> V23 end), begin (V37 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V25) -> ('un--genCompdef'(V24, ('un--defLine'()), ('un--splitNamespaceInfo'(case V1 of {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V26, V27, V28, V29} -> V27 end, V25)))) end, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V30) -> ('nested--13155-4561--in--un--shouldCompileName'(V3, V2, V1, V0, V3, ('Idris.Idris2.Builtin':'un--fst'(V30)))) end, case V19 of {'Compiler.Common.MkCompileData', V31, V32, V33, V34, V35, V36} -> V33 end)), []))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V45 = begin (V43 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V42) -> V42 end, V41))), fun (V44) -> {'Prelude.Types.Right', ('un--defsPerModule'(V43))} end end), V45 end(V38)) end end end end end), V46 end(V16)) end end end end end.
'un--compileLibrary'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirectives'(V0, {'Core.Options.Other', <<"erlang"/utf8>>}))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V29 = begin (V14 = ('un--getGlobalOpts'(case ('Idris.Idris2.Compiler.Erlang.GlobalOpts':'un--defaultGlobalOpts'()) of {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V10, V11, V12, V13} -> {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', 3, V11, V12, V13} end, V9))), begin (V15 = ('un--getAllModuleOpts'(V9))), begin (V16 = ('un--compileLibraryToModules'(V0, V14, V15, V4))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V28 = begin (V21 = ('un--build'(V0, V14, V15, V1, V2, {'Prelude.Types.Nothing'}, V20))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V3, V25}}} end), V27 end(V22)) end end end end), V28 end(V17)) end end end end end end), V29 end(V6)) end end end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--getDirectives'(V0, {'Core.Options.Other', <<"erlang"/utf8>>}))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = begin (V11 = ('un--getGlobalOpts'(('Idris.Idris2.Compiler.Erlang.GlobalOpts':'un--defaultGlobalOpts'()), V10))), ('case--compileExpr-5100'(V5, V4, V3, V2, V1, V0, V10, V11, ('Idris.Idris2.Libraries.Utils.Path':'un--fileName'(V5)))) end), V12 end(V7)) end end end end.
'un--codegenErlang'() -> {'Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('un--compileExpr'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('un--executeExpr'(V6, V7, V8, V9)) end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('un--compileLibrary'(V10, V11, V12, V13, V14)) end end end end end, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}}.
'un--build'(V0, V1, V2, V3, V4, V5, V6) -> begin (V9 = fun (V7) -> begin (V8 = ('un--findErlangExecutable'(V7))), {'Prelude.Types.Right', V8} end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V330 = begin (V16 = fun (V14) -> begin (V15 = ('un--findErlangCompiler'(V14))), {'Prelude.Types.Right', V15} end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V329 = begin (V314 = case case V1 of {'Compiler.Erlang.GlobalOpts.MkGlobalOpts', V21, V22, V23, V24} -> V21 end of 0 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V25) -> ('un--writeErlangModule'(V0, V1, V2, V4, <<"erl"/utf8>>, fun (V26) -> ('un--genDeclErl'(V26)) end, V25)) end, V6)); 1 -> begin (V29 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V27) -> ('un--writeErlangModule'(V0, V1, V2, V3, <<"abstr"/utf8>>, fun (V28) -> ('un--genDeclAbstr'(V28)) end, V27)) end, V6, []))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V82 = begin (V63 = fun (V34) -> begin (V62 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> V41 end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), begin (V49 = (V46(V47))), (V48(V49)) end end end end end end end}, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), ((V53(V55))(V54)) end end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V57(V58))), (V59(V58)) end end end end}, fun (V60) -> fun (V61) -> V61 end end}, ('Idris.Idris2.Compiler.Erlang.Cmd':'un--compileAbstrToErlCmd'(0, V13, V33, V4))))(V34))), {'Prelude.Types.Right', V62} end end), ((begin (V79 = fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V76, V77, V78)) end end end end end), fun (V80) -> fun (V81) -> ((((V79('erased'))('erased'))(V80))(V81)) end end end((begin (V71 = fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> {'Prelude.Types.Right', (V67(V70))} end end end end end), fun (V72) -> fun (V73) -> ((((V71('erased'))('erased'))(V72))(V73)) end end end(fun (V64) -> {'Builtin.MkUnit'} end))))(V63)) end), V82 end(V30)) end end end end; 2 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V83) -> ('un--writeErlangModule'(V0, V1, V2, V4, <<"abstr"/utf8>>, fun (V84) -> ('un--genDeclAbstr'(V84)) end, V83)) end, V6)); 3 -> begin (V87 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V85) -> ('un--writeErlangModule'(V0, V1, V2, V3, <<"erl"/utf8>>, fun (V86) -> ('un--genDeclErl'(V86)) end, V85)) end, V6, []))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V140 = begin (V121 = fun (V92) -> begin (V120 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V95, V96, V97)) end end end end end, fun (V98) -> fun (V99) -> fun (V100) -> V99 end end end, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> begin (V106 = (V103(V105))), begin (V107 = (V104(V105))), (V106(V107)) end end end end end end end}, fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> begin (V113 = (V110(V112))), ((V111(V113))(V112)) end end end end end end, fun (V114) -> fun (V115) -> fun (V116) -> begin (V117 = (V115(V116))), (V117(V116)) end end end end}, fun (V118) -> fun (V119) -> V119 end end}, ('Idris.Idris2.Compiler.Erlang.Cmd':'un--compileErlToBeamCmd'(V20, V91, V4))))(V92))), {'Prelude.Types.Right', V120} end end), ((begin (V137 = fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V134, V135, V136)) end end end end end), fun (V138) -> fun (V139) -> ((((V137('erased'))('erased'))(V138))(V139)) end end end((begin (V129 = fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> {'Prelude.Types.Right', (V125(V128))} end end end end end), fun (V130) -> fun (V131) -> ((((V129('erased'))('erased'))(V130))(V131)) end end end(fun (V122) -> {'Builtin.MkUnit'} end))))(V121)) end), V140 end(V88)) end end end end; 4 -> begin (V143 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V141) -> ('un--writeErlangModule'(V0, V1, V2, V3, <<"abstr"/utf8>>, fun (V142) -> ('un--genDeclAbstr'(V142)) end, V141)) end, V6, []))), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V196 = begin (V177 = fun (V148) -> begin (V176 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V151, V152, V153)) end end end end end, fun (V154) -> fun (V155) -> fun (V156) -> V155 end end end, fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> begin (V162 = (V159(V161))), begin (V163 = (V160(V161))), (V162(V163)) end end end end end end end}, fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> begin (V169 = (V166(V168))), ((V167(V169))(V168)) end end end end end end, fun (V170) -> fun (V171) -> fun (V172) -> begin (V173 = (V171(V172))), (V173(V172)) end end end end}, fun (V174) -> fun (V175) -> V175 end end}, ('Idris.Idris2.Compiler.Erlang.Cmd':'un--compileAbstrToBeamCmd'(V13, V147, V4))))(V148))), {'Prelude.Types.Right', V176} end end), ((begin (V193 = fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V190, V191, V192)) end end end end end), fun (V194) -> fun (V195) -> ((((V193('erased'))('erased'))(V194))(V195)) end end end((begin (V185 = fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> {'Prelude.Types.Right', (V181(V184))} end end end end end), fun (V186) -> fun (V187) -> ((((V185('erased'))('erased'))(V186))(V187)) end end end(fun (V178) -> {'Builtin.MkUnit'} end))))(V177)) end), V196 end(V144)) end end end end; 5 -> case V5 of {'Prelude.Types.Just', V197} -> begin (V200 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V198) -> ('un--writeErlangModule'(V0, V1, V2, V3, <<"erl"/utf8>>, fun (V199) -> ('un--genDeclErl'(V199)) end, V198)) end, V6, []))), fun (V201) -> begin (V202 = (V200(V201))), case V202 of {'Prelude.Types.Left', V203} -> {'Prelude.Types.Left', V203}; {'Prelude.Types.Right', V204} -> (begin (V309 = begin (V253 = begin (V234 = fun (V205) -> begin (V233 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> fun (V210) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V208, V209, V210)) end end end end end, fun (V211) -> fun (V212) -> fun (V213) -> V212 end end end, fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> begin (V219 = (V216(V218))), begin (V220 = (V217(V218))), (V219(V220)) end end end end end end end}, fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> begin (V226 = (V223(V225))), ((V224(V226))(V225)) end end end end end end, fun (V227) -> fun (V228) -> fun (V229) -> begin (V230 = (V228(V229))), (V230(V229)) end end end end}, fun (V231) -> fun (V232) -> V232 end end}, ('Idris.Idris2.Compiler.Erlang.Cmd':'un--compileErlToBeamCmd'(V20, V204, V3))))(V205))), {'Prelude.Types.Right', V233} end end), ((begin (V250 = fun (V245) -> fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V247, V248, V249)) end end end end end), fun (V251) -> fun (V252) -> ((((V250('erased'))('erased'))(V251))(V252)) end end end((begin (V242 = fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> case V239 of {'Prelude.Types.Left', V240} -> {'Prelude.Types.Left', V240}; {'Prelude.Types.Right', V241} -> {'Prelude.Types.Right', (V238(V241))} end end end end end), fun (V243) -> fun (V244) -> ((((V242('erased'))('erased'))(V243))(V244)) end end end(fun (V235) -> {'Builtin.MkUnit'} end))))(V234)) end), fun (V254) -> begin (V255 = (V253(V254))), case V255 of {'Prelude.Types.Left', V256} -> {'Prelude.Types.Left', V256}; {'Prelude.Types.Right', V257} -> (begin (V308 = begin (V259 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V258) -> ('Idris.Idris2.Libraries.Utils.Path':'un--fileName'(('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V258, <<"beam"/utf8>>)))) end, V204))), begin (V289 = fun (V260) -> begin (V288 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V263, V264, V265)) end end end end end, fun (V266) -> fun (V267) -> fun (V268) -> V267 end end end, fun (V269) -> fun (V270) -> fun (V271) -> fun (V272) -> fun (V273) -> begin (V274 = (V271(V273))), begin (V275 = (V272(V273))), (V274(V275)) end end end end end end end}, fun (V276) -> fun (V277) -> fun (V278) -> fun (V279) -> fun (V280) -> begin (V281 = (V278(V280))), ((V279(V281))(V280)) end end end end end end, fun (V282) -> fun (V283) -> fun (V284) -> begin (V285 = (V283(V284))), (V285(V284)) end end end end}, fun (V286) -> fun (V287) -> V287 end end}, ('Idris.Idris2.Compiler.Erlang.Cmd':'un--archiveFilesToEscriptCmd'(V13, V3, V259, V4, V197))))(V260))), {'Prelude.Types.Right', V288} end end), ((begin (V305 = fun (V300) -> fun (V301) -> fun (V302) -> fun (V303) -> fun (V304) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V302, V303, V304)) end end end end end), fun (V306) -> fun (V307) -> ((((V305('erased'))('erased'))(V306))(V307)) end end end((begin (V297 = fun (V291) -> fun (V292) -> fun (V293) -> fun (V294) -> case V294 of {'Prelude.Types.Left', V295} -> {'Prelude.Types.Left', V295}; {'Prelude.Types.Right', V296} -> {'Prelude.Types.Right', (V293(V296))} end end end end end), fun (V298) -> fun (V299) -> ((((V297('erased'))('erased'))(V298))(V299)) end end end(fun (V290) -> {'Builtin.MkUnit'} end))))(V289)) end end), V308 end(V254)) end end end end), V309 end(V201)) end end end end; {'Prelude.Types.Nothing'} -> fun (V310) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V312 = fun (V311) -> V311 end), fun (V313) -> (V312(V313)) end end(<<"Expected a main module"/utf8>>))}, V310)) end end end), fun (V315) -> begin (V316 = (V314(V315))), case V316 of {'Prelude.Types.Left', V317} -> {'Prelude.Types.Left', V317}; {'Prelude.Types.Right', V318} -> (begin (V328 = fun (V319) -> {'Prelude.Types.Right', ((begin (V325 = fun (V321) -> fun (V322) -> fun (V323) -> fun (V324) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V323, V324)) end end end end), fun (V326) -> fun (V327) -> ((((V325('erased'))('erased'))(V326))(V327)) end end end(fun (V320) -> ('Idris.Idris2.Compiler.Erlang.Name':'un--currentModuleName'(('Idris.Idris2.Builtin':'un--fst'(V320)))) end))(V6))} end), V328 end(V315)) end end end end), V329 end(V17)) end end end end), V330 end(V10)) end end end end.
