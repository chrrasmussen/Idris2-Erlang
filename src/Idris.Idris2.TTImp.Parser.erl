-module('Idris.Idris2.TTImp.Parser').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7876-17672--in--un--spanMap'/6,
  'nested--11839-15946--in--un--parseWithArg'/3,
  'nested--9124-15328--in--un--mkPi'/6,
  'nested--7876-17673--in--un--isClause'/6,
  'nested--11821-15605--in--un--getFn'/6,
  'nested--12988-16759--in--un--fieldBody'/3,
  'nested--9038-14240--in--un--bindAll'/5,
  'nested--8902-12844--in--un--applyExpImp'/6,
  'nested--11839-15945--in--un--applyArgs'/5,
  'un--visibility'/0,
  'un--visOption'/0,
  'un--visOpt'/0,
  'un--typeExpr'/2,
  'un--tyDecl'/2,
  'un--totalityOpt'/0,
  'un--topDecl'/2,
  'un--simpleExpr'/2,
  'un--rewrite_'/2,
  'un--record_'/2,
  'un--recordParam'/2,
  'un--recordDecl'/2,
  'un--prog'/1,
  'un--pibindListName'/3,
  'un--pibindList'/3,
  'un--pibindAll'/4,
  'un--parseRHS'/5,
  'un--namespaceDecl'/0,
  'un--multiplicity'/0,
  'un--logLevel'/0,
  'un--let_'/2,
  'un--lazy'/2,
  'un--lam'/2,
  'un--implicitPi'/2,
  'un--implicitArg'/2,
  'un--getVisibility'/2,
  'un--getRight'/1,
  'un--getMult'/1,
  'un--forall_'/2,
  'un--fnOpt'/0,
  'un--fnDirectOpt'/0,
  'un--fieldDecl'/2,
  'un--field'/2,
  'un--expr'/2,
  'un--explicitPi'/2,
  'un--directive'/2,
  'un--definition'/2,
  'un--dataVisOpt'/0,
  'un--dataOpts'/0,
  'un--dataOpt'/0,
  'un--dataDecl'/2,
  'un--command'/0,
  'un--collectDefs'/1,
  'un--clause'/3,
  'un--case_'/2,
  'un--caseRHS'/4,
  'un--caseAlt'/2,
  'un--binder'/2,
  'un--bindSymbol'/0,
  'un--bindList'/3,
  'un--autoImplicitPi'/2,
  'un--atom'/1,
  'un--as'/2,
  'un--argExpr'/2,
  'un--appExpr'/2
]).
'nested--7876-17672--in--un--spanMap'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> {'Builtin.MkPair', [], []}; [E0 | E1] -> (fun (V6, V7) -> case (V4(V6)) of {'Prelude.Types.Nothing'} -> {'Builtin.MkPair', [], [V6 | V7]}; {'Prelude.Types.Just', V8} -> case ('nested--7876-17672--in--un--spanMap'(V0, V1, V2, V3, V4, V7)) of {'Builtin.MkPair', V9, V10} -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, V9)), V10} end end end(E0, E1)) end.
'nested--11839-15946--in--un--parseWithArg'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"|"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(V1, V0)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V5) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', {'Core.FC.MkFC', V1, V3, V5}, V4}} end} end end} end} end}.
'nested--9124-15328--in--un--mkPi'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> V4; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Builtin.MkPair', V8, V9} -> {'TTImp.TTImp.IPi', {'Core.FC.MkFC', V1, V2, V3}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V8, {'Prelude.Types.Nothing'}, V4, ('nested--9124-15328--in--un--mkPi'(V0, V1, V2, V3, V9, V7))} end end(E0, E1)) end.
'nested--7876-17673--in--un--isClause'(V0, V1, V2, V3, V4, V5) -> case V5 of {'TTImp.TTImp.IDef', V6, V7, V8} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V7)) of 1 -> {'Prelude.Types.Just', V8}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'nested--11821-15605--in--un--getFn'(V0, V1, V2, V3, V4, V5) -> case V5 of {'TTImp.TTImp.IVar', V6, V7} -> {'Libraries.Text.Parser.Core.Empty', V7}; {'TTImp.TTImp.IApp', V8, V9, V10} -> ('nested--11821-15605--in--un--getFn'(V0, V1, V2, V3, V4, V9)); {'TTImp.TTImp.IAutoApp', V11, V12, V13} -> ('nested--11821-15605--in--un--getFn'(V0, V1, V2, V3, V4, V12)); {'TTImp.TTImp.INamedApp', V14, V15, V16, V17} -> ('nested--11821-15605--in--un--getFn'(V0, V1, V2, V3, V4, V15)); _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Not a function application"/utf8>>} end.
'nested--12988-16759--in--un--fieldBody'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(V1, V0)), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V6) -> {'Libraries.Text.Parser.Core.Empty', ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V7) -> {'TTImp.TTImp.MkIField', {'Core.FC.MkFC', V1, V3, V6}, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V8, V9)) end end, 0, fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V10, V11)) end end, 1})), V2, {'Core.Name.UN', {'Core.Name.Basic', V7}}, V5} end))(('Idris.Idris2.Data.List1':'un--forget'(V4))))} end} end end} end} end end} end}.
'nested--9038-14240--in--un--bindAll'(V0, V1, V2, V3, V4) -> case V3 of [] -> V4; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> {'TTImp.TTImp.ILam', V2, V7, {'Core.TT.Explicit'}, {'Prelude.Types.Just', V9}, V10, ('nested--9038-14240--in--un--bindAll'(V0, V1, V2, V6, V4))} end end end(E0, E1)) end.
'nested--8902-12844--in--un--applyExpImp'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> V4; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Prelude.Types.Left', V8} -> ('nested--8902-12844--in--un--applyExpImp'(V0, V1, V2, V3, {'TTImp.TTImp.IApp', {'Core.FC.MkFC', V1, V2, V3}, V4, V8}, V7)); {'Prelude.Types.Right', V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> case V10 of {'Prelude.Types.Just', V12} -> ('nested--8902-12844--in--un--applyExpImp'(V0, V1, V2, V3, {'TTImp.TTImp.INamedApp', {'Core.FC.MkFC', V1, V2, V3}, V4, V12, V11}, V7)); {'Prelude.Types.Nothing'} -> ('nested--8902-12844--in--un--applyExpImp'(V0, V1, V2, V3, {'TTImp.TTImp.IAutoApp', {'Core.FC.MkFC', V1, V2, V3}, V4, V11}, V7)) end end end end(E0, E1)) end.
'nested--11839-15945--in--un--applyArgs'(V0, V1, V2, V3, V4) -> case V4 of [] -> V3; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Builtin.MkPair', V7, V8} -> ('nested--11839-15945--in--un--applyArgs'(V0, V1, V2, {'TTImp.TTImp.IApp', V7, V3, V8}, V6)) end end(E0, E1)) end.
'un--visibility'() -> {'Libraries.Text.Parser.Core.Alt', 1, 0, ('un--visOption'()), fun () -> {'Libraries.Text.Parser.Core.Empty', 0} end}.
'un--visOption'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"public"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"export"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 2} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"export"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 1} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"private"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 0} end} end} end}.
'un--visOpt'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--visOption'()), fun () -> fun (V0) -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Left', V0}} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--fnOpt'()), fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Right', V1}} end end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--fnDirectOpt'()), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Right', V2}} end end} end} end}.
'un--typeExpr'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--appExpr'(V0, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V1)), {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--some'({'Libraries.Text.Parser.Core.SeqEat', 1, ('un--bindSymbol'()), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--appExpr'(V0, V1)), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V4, V5}} end end} end end})), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V7) -> {'Libraries.Text.Parser.Core.Empty', ('nested--9124-15328--in--un--mkPi'(V1, V0, V2, V7, V3, ('Idris.Idris2.Data.List1':'un--forget'(V6))))} end} end end}}, fun () -> {'Libraries.Text.Parser.Core.Empty', V3} end} end end} end}.
'un--tyDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(V0, V1)), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V6) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.MkImpTy', {'Core.FC.MkFC', V0, V2, V6}, {'Core.FC.MkFC', V0, V2, V4}, V3, V5}}} end} end end} end} end} end end} end}.
'un--totalityOpt'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"partial"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 2} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"total"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 0} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"covering"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', 1} end} end} end}.
'un--topDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--dataVisOpt'()), fun (V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--dataDecl'(V0, V1)), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V7) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IData', {'Core.FC.MkFC', V0, V2, V7}, V4, V5, V6}} end} end end} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V8) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--namespaceDecl'()), fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V10) -> ('un--topDecl'(V0, V10)) end)), fun () -> fun (V11) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V12) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.INamespace', {'Core.FC.MkFC', V0, V8, V12}, V9, ('Idris.Idris2.Data.List1':'un--forget'(V11))}} end} end end} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V13) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--visOpt'()))), fun (V14) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--getVisibility'({'Prelude.Types.Nothing'}, V14)), fun (V15) -> begin (V17 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V16) -> ('un--getRight'(V16)) end, V14))), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'()), fun (V18) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--getMult'(V18)), fun (V19) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--tyDecl'(V0, V1)), fun () -> fun (V20) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V21) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IClaim', {'Core.FC.MkFC', V0, V13, V21}, V19, V15, V17, V20}} end} end end} end} end} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--recordDecl'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--directive'(V0, V1)), fun () -> ('un--definition'(V0, V1)) end} end} end} end} end}.
'un--simpleExpr'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--as'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--atom'(V0)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--binder'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--rewrite_'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--record_'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', V2} end} end end} end} end} end} end} end} end}.
'un--rewrite_'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"rewrite"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(V0, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"in"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V5) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IRewrite', {'Core.FC.MkFC', V0, V2, V5}, V3, V4}} end} end end} end} end end} end} end}.
'un--record_'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"record"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('un--field'(V0, V1)))), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V5) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IUpdate', {'Core.FC.MkFC', V0, V2, V5}, ('Idris.Idris2.Data.List1':'un--forget'(V3)), V4}} end} end end} end} end end}} end} end} end}.
'un--recordParam'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindListName'(V0, V2, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> {'Builtin.MkPair', V7, {'Builtin.MkPair', V5, {'Builtin.MkPair', {'Core.TT.Explicit'}, V8}}} end end end))(V3))} end} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V16) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V17) -> fun (V18) -> V17 end end))({'Libraries.Text.Parser.Core.Empty', {'Core.TT.AutoImplicit'}})), fun (V26) -> ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(V26))(('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"auto"/utf8>>)))) end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"default"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V0, V1)), fun () -> fun (V34) -> {'Libraries.Text.Parser.Core.Empty', {'Core.TT.DefImplicit', V34}} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Empty', {'Core.TT.Implicit'}} end} end}, fun (V35) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindListName'(V0, V16, V1)), fun () -> fun (V36) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', ((begin (V46 = fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V44, V45)) end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end(fun (V37) -> case V37 of {'Builtin.MkPair', V38, V39} -> case V39 of {'Builtin.MkPair', V40, V41} -> {'Builtin.MkPair', V40, {'Builtin.MkPair', V38, {'Builtin.MkPair', V35, V41}}} end end end))(V36))} end} end end} end} end}} end}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V49) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V50) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V51) -> {'Libraries.Text.Parser.Core.Empty', [{'Builtin.MkPair', V50, {'Builtin.MkPair', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Builtin.MkPair', {'Core.TT.Explicit'}, {'TTImp.TTImp.Implicit', {'Core.FC.MkFC', V0, V49, V51}, 0}}}} | []]} end} end end} end} end} end}.
'un--recordDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--dataVisOpt'()), fun (V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V6) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"record"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--recordParam'(V0, V1)))), fun (V8) -> begin (V12 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V9, V10)) end end, []}, fun (V11) -> V11 end, V8))), {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"where"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--dataOpts'()), fun (V13) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'((begin (V15 = fun (V14) -> V14 end), fun (V16) -> (V15(V16)) end end(<<"constructor"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V17) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'(V6, fun (V18) -> ('un--fieldDecl'(V0, V18)) end)), fun (V19) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V20) -> {'Libraries.Text.Parser.Core.Empty', begin (V21 = {'Core.FC.MkFC', V0, V2, V20}), {'TTImp.TTImp.IRecord', V21, {'Prelude.Types.Nothing'}, V4, V5, {'TTImp.TTImp.MkImpRecord', V21, V7, V12, V13, V17, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V22, V23)) end end, []}, fun (V24) -> V24 end, V19))}} end} end} end} end end} end} end} end} end end} end end}} end} end} end end} end}.
'un--prog'(V0) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V1) -> ('un--topDecl'(V0, V1)) end)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', ('un--collectDefs'(('Idris.Idris2.Data.List1':'un--forget'(V2))))} end end}.
'un--pibindListName'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'()), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(V0, V2)), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--getMult'(V3)), fun (V6) -> {'Libraries.Text.Parser.Core.Empty', ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> {'Builtin.MkPair', V6, {'Builtin.MkPair', {'Core.Name.UN', {'Core.Name.Basic', V7}}, V5}} end))(('Idris.Idris2.Data.List1':'un--forget'(V4))))} end}} end end} end} end end} end}, fun () -> ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> ('Idris.Idris2.Data.List1':'un--forget'(V19)) end))(('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'()), fun (V15) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V16) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(V0, V2)), fun () -> fun (V17) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--getMult'(V15)), fun (V18) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V18, {'Builtin.MkPair', V16, V17}}} end} end end} end} end end} end})))) end}.
'un--pibindList'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--pibindListName'(V0, V1, V2)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> {'Builtin.MkPair', V5, {'Builtin.MkPair', {'Prelude.Types.Just', V7}, V8}} end end end))(V3))} end end}.
'un--pibindAll'(V0, V1, V2, V3) -> case V2 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'TTImp.TTImp.IPi', V0, V6, V1, V8, V9, ('un--pibindAll'(V0, V1, V5, V3))} end end end(E0, E1)) end.
'un--parseRHS'(V0, V1, V2, V3, V4) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(V1, V2)), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V6) -> begin (V7 = {'Core.FC.MkFC', V1, V3, V6}), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('nested--11821-15605--in--un--getFn'(V4, V3, V2, V1, V0, V4)), fun (V8) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V8, {'TTImp.TTImp.PatClause', V7, V4, V5}}} end} end end}} end end}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"with"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'()), fun (V9) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--getMult'(V9)), fun (V10) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V11) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(V1, V2)), fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V13) -> fun (V14) -> V14 end end))(('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"proof"/utf8>>)))), fun (V22) -> ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(V22))(('Idris.Idris2.Parser.Rule.Source':'un--name'()))) end})), fun (V30) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V31) -> ('un--clause'((V0 + 1), V1, V31)) end)), fun () -> fun (V32) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V33) -> begin (V34 = {'Core.FC.MkFC', V1, V3, V33}), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('nested--11821-15605--in--un--getFn'(V4, V3, V2, V1, V0, V4)), fun (V35) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V35, {'TTImp.TTImp.WithClause', V34, V4, V10, V12, V30, [], ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V36) -> ('Idris.Idris2.Builtin':'un--snd'(V36)) end, V32))))}}} end} end end} end end} end} end} end end} end} end} end} end} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"impossible"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V37) -> begin (V38 = {'Core.FC.MkFC', V1, V3, V37}), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('nested--11821-15605--in--un--getFn'(V4, V3, V2, V1, V0, V4)), fun (V39) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V39, {'TTImp.TTImp.ImpossibleClause', V38, V4}}} end} end end}} end} end} end}.
'un--namespaceDecl'() -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"namespace"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, ('Idris.Idris2.Parser.Rule.Source':'un--namespaceId'())} end}.
'un--multiplicity'() -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V0) -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Just', V0}} end end}, fun () -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Nothing'}} end}.
'un--logLevel'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> {'Prelude.Types.Nothing'} end))(('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"off"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], {'Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V8) -> fun (V9) -> [V8 | V9] end end))(('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun (V17) -> ((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(V17))(('Idris.Idris2.Libraries.Text.Parser':'un--many'(('Idris.Idris2.Parser.Rule.Source':'un--aDotIdent'()))))) end})), fun (V25) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V26) -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Just', {'Builtin.MkPair', V25, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V26))}}} end end} end} end}.
'un--let_'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"let"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'()), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--getMult'(V3)), fun (V4) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(V0, V1)), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V1)), {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"in"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(V0, V1)), fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V8) -> {'Libraries.Text.Parser.Core.Empty', begin (V9 = {'Core.FC.MkFC', V0, V2, V8}), {'TTImp.TTImp.ILet', V9, ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V4, case V5 of {'Libraries.Text.Bounded.MkBounded', V10, V11, V12} -> V10 end, {'TTImp.TTImp.Implicit', V9, 0}, V6, V7} end} end} end end} end}} end end}} end} end end} end} end} end} end}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V13) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"let"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V14) -> ('un--topDecl'(V0, V14)) end)), fun (V15) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V1)), {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"in"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(V0, V1)), fun () -> fun (V16) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V17) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.ILocal', {'Core.FC.MkFC', V0, V13, V17}, ('un--collectDefs'(V15)), V16}} end} end end} end}} end} end} end} end}.
'un--lazy'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Lazy"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V0, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IDelayed', {'Core.FC.MkFC', V0, V2, V4}, 1, V3}} end} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V5) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Inf"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V0, V1)), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V7) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IDelayed', {'Core.FC.MkFC', V0, V5, V7}, 0, V6}} end} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V8) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Delay"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V0, V1)), fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V10) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IDelay', {'Core.FC.MkFC', V0, V8, V10}, V9}} end} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V11) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Force"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V0, V1)), fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V13) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IForce', {'Core.FC.MkFC', V0, V11, V13}, V12}} end} end end} end} end} end} end} end}.
'un--lam'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"\x{5c}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--bindList'(V0, V2, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"=>"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V1, {'Prelude.Types.Nothing'})), {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V5) -> {'Libraries.Text.Parser.Core.Empty', ('nested--9038-14240--in--un--bindAll'(V1, V0, {'Core.FC.MkFC', V0, V2, V5}, V3, V4))} end} end end}} end} end end} end} end}.
'un--implicitPi'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindList'(V0, V2, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"->"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V5) -> {'Libraries.Text.Parser.Core.Empty', ('un--pibindAll'({'Core.FC.MkFC', V0, V2, V5}, {'Core.TT.Implicit'}, V3, V4))} end} end end} end} end} end end} end} end}.
'un--implicitArg'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> {'Core.Name.UN', {'Core.Name.Basic', V3}} end))(('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun () -> fun (V11) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(V0, V1)), fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', {'Prelude.Types.Just', V11}, V12}} end} end end}} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V13) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', {'Prelude.Types.Just', V11}, {'TTImp.TTImp.IVar', {'Core.FC.MkFC', V0, V2, V13}, V11}}} end} end} end} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"@{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(V0, V1)), fun () -> fun (V14) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', {'Prelude.Types.Nothing'}, V14}} end} end end}} end} end}.
'un--getVisibility'(V0, V1) -> case V0 of {'Prelude.Types.Nothing'} -> case V1 of [] -> {'Libraries.Text.Parser.Core.Empty', 0}; [E4 | E5] -> (fun (V2, V3) -> case V2 of {'Prelude.Types.Left', V4} -> ('un--getVisibility'({'Prelude.Types.Just', V4}, V3)); _ -> case V1 of [E6 | E7] -> (fun (V5, V6) -> ('un--getVisibility'(V0, V6)) end(E6, E7)) end end end(E4, E5)); _ -> case V1 of [E2 | E3] -> (fun (V7, V8) -> ('un--getVisibility'(V0, V8)) end(E2, E3)) end end; {'Prelude.Types.Just', V9} -> case V1 of [] -> {'Libraries.Text.Parser.Core.Empty', V9}; [E10 | E11] -> (fun (V10, V11) -> case V10 of {'Prelude.Types.Left', V12} -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<"Multiple visibility modifiers"/utf8>>}; _ -> case V1 of [E12 | E13] -> (fun (V13, V14) -> ('un--getVisibility'(V0, V14)) end(E12, E13)) end end end(E10, E11)); _ -> case V1 of [E8 | E9] -> (fun (V15, V16) -> ('un--getVisibility'(V0, V16)) end(E8, E9)) end end; _ -> case V1 of [E0 | E1] -> (fun (V17, V18) -> ('un--getVisibility'(V0, V18)) end(E0, E1)) end end.
'un--getRight'(V0) -> case V0 of {'Prelude.Types.Left', V1} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Right', V2} -> {'Prelude.Types.Just', V2} end.
'un--getMult'(V0) -> case V0 of {'Prelude.Types.Just', V1} -> case V1 of 0 -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V2) -> fun (V3) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V2, V3)) end end, 0, fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V4, V5)) end end, 1}))}; 1 -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V6, V7)) end end, 0, fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V8, V9)) end end, 1}))}; _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<"Invalid multiplicity (must be 0 or 1)"/utf8>>} end; {'Prelude.Types.Nothing'} -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'())}; _ -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<"Invalid multiplicity (must be 0 or 1)"/utf8>>} end.
'un--forall_'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"forall"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V5) -> begin (V6 = {'Core.FC.MkFC', V0, V3, V5}), begin (V19 = ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V7) -> {'Builtin.MkPair', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V8, V9)) end end, 0, fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V10, V11)) end end, 1})), {'Builtin.MkPair', {'Prelude.Types.Just', {'Core.Name.UN', {'Core.Name.Basic', V7}}}, {'TTImp.TTImp.Implicit', V6, 0}}} end))(('Idris.Idris2.Data.List1':'un--forget'(V4))))), {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"."/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(V0, V1)), fun () -> fun (V20) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V21) -> {'Libraries.Text.Parser.Core.Empty', ('un--pibindAll'({'Core.FC.MkFC', V0, V2, V21}, {'Core.TT.Implicit'}, V19, V20))} end} end end} end} end end end} end end} end}} end} end}.
'un--fnOpt'() -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--totalityOpt'()), fun () -> fun (V0) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.Totality', V0}} end end}.
'un--fnDirectOpt'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"hint"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.Hint', 1}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"chaser"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.Hint', 0}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"globalhint"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.GlobalHint', 1}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"defaulthint"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.GlobalHint', 0}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"inline"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.Inline'}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"noinline"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.NoInline'}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"deprecate"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.Deprecate'}} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"extern"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.ExternFn'}} end} end} end} end} end} end} end} end}.
'un--fieldDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('nested--12988-16759--in--un--fieldBody'(V1, V0, {'Core.TT.Implicit'})), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', V2}} end} end end}} end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('nested--12988-16759--in--un--fieldBody'(V1, V0, {'Core.TT.Explicit'})), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', V3}} end end} end}.
'un--field'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"->"/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"="/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', fun (V3) -> fun (V4) -> {'TTImp.TTImp.ISetField', V3, V4} end end} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"$="/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', fun (V5) -> fun (V6) -> {'TTImp.TTImp.ISetFieldApp', V5, V6} end end} end} end}, fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--appExpr'(V0, V1)), fun () -> fun (V8) -> {'Libraries.Text.Parser.Core.Empty', ((V7(('Idris.Idris2.Data.List1':'un--forget'(V2))))(V8))} end end} end end} end end}.
'un--expr'(V0, V1) -> ('un--typeExpr'(V0, V1)).
'un--explicitPi'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindList'(V0, V2, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--bindSymbol'()), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(V0, V1)), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V6) -> {'Libraries.Text.Parser.Core.Empty', ('un--pibindAll'({'Core.FC.MkFC', V0, V2, V6}, V4, V3, V5))} end} end end} end end} end} end end} end} end}.
'un--directive'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"logging"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--logLevel'()), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.ILog', V2}}} end end}} end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Bounds', {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"builtin"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--builtinType'()), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V3, V4}} end end} end end}} end}}, fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.Empty', case V5 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end}, fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IBuiltin', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V10, V11}} end end} end end} end}.
'un--definition'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--clause'(0, V0, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IDef', {'Core.FC.MkFC', V0, V2, V4}, ('Idris.Idris2.Builtin':'un--fst'(V3)), [('Idris.Idris2.Builtin':'un--snd'(V3)) | []]}} end} end end} end}.
'un--dataVisOpt'() -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--visOption'()), fun () -> fun (V0) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('un--totalityOpt'()))), fun (V1) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V0, V1}} end} end end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 0, {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--totalityOpt'()), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--visibility'()), fun (V3) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V3, {'Prelude.Types.Just', V2}}} end} end end}, fun () -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', 0, {'Prelude.Types.Nothing'}}} end} end}.
'un--dataOpts'() -> ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"["/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), ('un--dataOpt'()))), fun () -> fun (V0) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'un--forget'(V0))} end} end end} end})).
'un--dataOpt'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"noHints"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.NoHints'}} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"uniqueSearch"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.UniqueSearch'}} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"search"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> ('Idris.Idris2.Data.List1':'un--forget'(V0)) end))(('Idris.Idris2.Libraries.Text.Parser':'un--some'(('Idris.Idris2.Parser.Rule.Source':'un--name'()))))), fun () -> fun (V8) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.SearchBy', V8}} end end} end} end} end}.
'un--dataDecl'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"data"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"where"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--dataOpts'()), fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V6) -> ('un--tyDecl'(V0, V6)) end)), fun (V7) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V8) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.MkImpData', {'Core.FC.MkFC', V0, V2, V8}, V3, V4, V5, V7}} end} end} end} end} end end} end} end end} end} end}.
'un--command'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"t"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'({'Core.FC.Virtual', {'Core.FC.Interactive'}}, ('Idris.Idris2.Parser.Rule.Source':'un--init'()))), fun () -> fun (V0) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.Check', V0}} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"s"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.ProofSearch', V1}} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"es"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.ExprSearch', V2}} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"gd"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.GenerateDef', begin (V5 = V3), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end, V4}} end end} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"missing"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V6) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.Missing', V6}} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"total"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V7) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.CheckTotal', V7}} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"di"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V8) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.DebugInfo', V8}} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"q"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.Quit'}} end} end}, fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'({'Core.FC.Virtual', {'Core.FC.Interactive'}}, ('Idris.Idris2.Parser.Rule.Source':'un--init'()))), fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.Eval', V9}} end end} end} end} end} end} end} end} end} end}.
'un--collectDefs'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'TTImp.TTImp.IDef', V3, V4, V5} -> case ('nested--7876-17672--in--un--spanMap'(V5, V4, V3, V2, fun (V6) -> ('nested--7876-17673--in--un--isClause'(V5, V4, V3, V2, V4, V6)) end, V2)) of {'Builtin.MkPair', V7, V8} -> [{'TTImp.TTImp.IDef', V3, V4, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V7))} | ('un--collectDefs'(V8))] end; {'TTImp.TTImp.INamespace', V9, V10, V11} -> [{'TTImp.TTImp.INamespace', V9, V10, ('un--collectDefs'(V11))} | ('un--collectDefs'(V2))]; {'TTImp.TTImp.IFail', V12, V13, V14} -> [{'TTImp.TTImp.IFail', V12, V13, ('un--collectDefs'(V14))} | ('un--collectDefs'(V2))]; _ -> [V1 | ('un--collectDefs'(V2))] end end(E0, E1)) end.
'un--clause'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(V1, V2)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('nested--11839-15946--in--un--parseWithArg'(V2, V1, V0)))), fun (V5) -> case ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V0, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V5)))) of 1 -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, <<"Wrong number of \x{27}with\x{27} arguments"/utf8>>}; 0 -> ('un--parseRHS'(V0, V1, V2, V3, ('nested--11839-15945--in--un--applyArgs'(V2, V1, V0, V4, V5)))) end end} end end} end}.
'un--case_'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"case"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(V0, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"of"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V4) -> ('un--caseAlt'(V0, V4)) end)), fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V6) -> {'Libraries.Text.Parser.Core.Empty', begin (V7 = {'Core.FC.MkFC', V0, V2, V6}), {'TTImp.TTImp.ICase', V7, V3, {'TTImp.TTImp.Implicit', V7, 0}, V5} end} end} end} end} end end} end} end}.
'un--caseRHS'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"=>"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V1)), {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V5) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.PatClause', {'Core.FC.MkFC', V0, V2, V5}, V3, V4}} end}} end end}} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"impossible"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V6) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.ImpossibleClause', {'Core.FC.MkFC', V0, V2, V6}, V3}} end}} end} end}.
'un--caseAlt'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--appExpr'(V0, V1)), fun () -> fun (V3) -> ('un--caseRHS'(V0, V1, V2, V3)) end end} end}.
'un--binder'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--autoImplicitPi'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--forall_'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--implicitPi'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--explicitPi'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--lam'(V0, V1)), fun () -> ('un--let_'(V0, V1)) end} end} end} end} end}.
'un--bindSymbol'() -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"->"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Core.TT.Explicit'}} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"=>"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Empty', {'Core.TT.AutoImplicit'}} end} end}.
'un--bindList'(V0, V1, V2) -> ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('Idris.Idris2.Data.List1':'un--forget'(V8)) end))(('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>)), {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'()), fun (V3) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, {'TTImp.TTImp.Implicit', {'Core.FC.MkFC', V0, V1, V5}, 0}, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> ('un--appExpr'(V0, V2)) end})), fun (V6) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--getMult'(V3)), fun (V7) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V7, {'Builtin.MkPair', {'Core.Name.UN', {'Core.Name.Basic', V4}}, V6}}} end} end} end} end end} end})))).
'un--autoImplicitPi'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"{"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"auto"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Libraries.Text.Parser.Core.Commit'}, {'Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindList'(V0, V2, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"}"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"->"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(V0, V1)), fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V5) -> {'Libraries.Text.Parser.Core.Empty', ('un--pibindAll'({'Core.FC.MkFC', V0, V2, V5}, {'Core.TT.AutoImplicit'}, V3, V4))} end} end end} end} end} end end}} end} end} end}.
'un--atom'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V1) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--constant'()), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V3) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IPrimVal', {'Core.FC.MkFC', V0, V1, V3}, V2}} end} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V4) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'()), fun () -> fun (V5) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V6) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IPrimVal', {'Core.FC.MkFC', V0, V4, V6}, {'Core.TT.Str', V5}}} end} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V7) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Type"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V8) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IType', {'Core.FC.MkFC', V0, V7, V8}}} end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V9) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"_"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V10) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.Implicit', {'Core.FC.MkFC', V0, V9, V10}, 1}} end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V11) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"?"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V12) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.Implicit', {'Core.FC.MkFC', V0, V11, V12}, 0}} end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V13) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"search"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V14) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.ISearch', {'Core.FC.MkFC', V0, V13, V14}, 1000}} end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V15) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V16) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V17) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IVar', {'Core.FC.MkFC', V0, V15, V17}, V16}} end} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V18) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"$"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V19) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V20) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IBindVar', {'Core.FC.MkFC', V0, V18, V20}, V19}} end} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V21) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--holeName'()), fun () -> fun (V22) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V23) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IHole', {'Core.FC.MkFC', V0, V21, V23}, V22}} end} end end} end} end} end} end} end} end} end} end} end}.
'un--as'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 1, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> {'Core.Name.UN', {'Core.Name.Basic', V3}} end))(('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun () -> fun (V11) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V12) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"@"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V0, V1)), fun () -> fun (V13) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V14) -> {'Libraries.Text.Parser.Core.Empty', {'TTImp.TTImp.IAs', {'Core.FC.MkFC', V0, V2, V14}, {'Core.FC.MkFC', V0, V2, V12}, 1, V11, V13}} end} end end} end} end} end end} end}.
'un--argExpr'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V1)), {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V0, V1)), fun () -> fun (V2) -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Left', V2}} end end}}, fun () -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V1)), {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--implicitArg'(V0, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.Empty', {'Prelude.Types.Right', V3}} end end}} end}.
'un--appExpr'(V0, V1) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--case_'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('un--lazy'(V0, V1)), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V0, V1)), fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--argExpr'(V0, V1)))), fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V5) -> {'Libraries.Text.Parser.Core.Empty', ('nested--8902-12844--in--un--applyExpImp'(V1, V0, V2, V5, V3, V4))} end} end} end end} end} end} end}.
