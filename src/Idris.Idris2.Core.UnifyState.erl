-module('Idris.Idris2.Core.UnifyState').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in dumpHole-18710'/10,
  'case--dumpHole,dumpConstraint-18302'/9,
  'case--case block in checkValidHole-17402'/10,
  'case--max-13515'/3,
  'case--min-13499'/3,
  'nested--7896-13551--in--un--tag'/3,
  'nested--12798-18010--in--un--nameEq'/6,
  'nested--11460-16835--in--un--envArgs'/8,
  'nested--11332-16715--in--un--envArgs'/10,
  'nested--11179-16556--in--un--envArgs'/9,
  'nested--10809-16223--in--un--envArgs'/11,
  'nested--13059-18272--in--un--dumpConstraint'/6,
  'nested--12003-17334--in--un--checkRef'/8,
  'dn--un--min_Ord_DelayReason'/2,
  'dn--un--max_Ord_DelayReason'/2,
  'dn--un--compare_Ord_DelayReason'/2,
  'dn--un--__Impl_Ord_DelayReason'/0,
  'dn--un--__Impl_Eq_DelayReason'/0,
  'dn--un-->_Ord_DelayReason'/2,
  'dn--un-->=_Ord_DelayReason'/2,
  'dn--un--==_Eq_DelayReason'/2,
  'dn--un--<_Ord_DelayReason'/2,
  'dn--un--<=_Ord_DelayReason'/2,
  'dn--un--/=_Eq_DelayReason'/2,
  'un--tryUnify'/4,
  'un--tryErrorUnify'/3,
  'un--setConstraint'/3,
  'un--saveHoles'/1,
  'un--restoreHoles'/2,
  'un--resetNextVar'/1,
  'un--removeNoSolve'/2,
  'un--removeHoleName'/3,
  'un--removeHole'/2,
  'un--removeGuess'/2,
  'un--newSearch'/10,
  'un--newMetaLets'/11,
  'un--newMeta'/10,
  'un--newDelayed'/8,
  'un--newConstant'/9,
  'un--mkConstantAppArgsSub'/6,
  'un--mkConstantAppArgsOthers'/6,
  'un--mkConstantAppArgs'/5,
  'un--mkConstant'/4,
  'un--isHole'/2,
  'un--isCurrentHole'/2,
  'un--initUState'/0,
  'un--handleUnify'/4,
  'un--getHoles'/1,
  'un--getGuesses'/1,
  'un--getCurrentHoles'/1,
  'un--genWithName'/3,
  'un--genVarName'/3,
  'un--genName'/3,
  'un--genMVName'/3,
  'un--genCaseName'/3,
  'un--dumpHole'/5,
  'un--dumpConstraints'/5,
  'un--deleteConstraint'/2,
  'un--checkValidHole'/4,
  'un--checkUserHolesAfter'/4,
  'un--checkUserHoles'/3,
  'un--checkNoGuards'/2,
  'un--checkDelayedHoles'/2,
  'un--applyToSub'/5,
  'un--applyToOthers'/5,
  'un--applyToFull'/4,
  'un--applyTo'/4,
  'un--addPolyConstraint'/7,
  'un--addNoSolve'/2,
  'un--addHoleName'/4,
  'un--addGuessName'/4,
  'un--addDot'/9,
  'un--addDelayedHoleName'/2,
  'un--addConstraint'/3
]).
'case--case block in dumpHole-18710'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V10 of {'Core.Context.Context.Guess', V12, V13, V14} -> begin (V46 = begin (V15 = ('Idris.Idris2.Core.Context':'un--getFullName'(V3, {'Core.Name.Resolved', V1}))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V45 = begin (V20 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V6, {'Core.Env.Nil'}, V11))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V44 = begin (V29 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Core.Context.dn--un--__mkHasNames', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V27, V28)) end end}, V24))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V43 = begin (V34 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V6, {'Core.Env.Nil'}, V12))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V42 = fun (V39) -> case V0 of <<""/utf8>> -> begin (V40 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<<<"!"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19))/binary, <<<<" : "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V33))/binary, <<<<"\x{a}\x{9}  = "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V38))/binary, <<"\x{a}\x{9}when"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V39))), {'Prelude.Types.Right', V40} end; _ -> begin (V41 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V0/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<<<"!"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19))/binary, <<<<" : "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V33))/binary, <<<<"\x{a}\x{9}  = "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V38))/binary, <<"\x{a}\x{9}when"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V39))), {'Prelude.Types.Right', V41} end end end), V42 end(V35)) end end end end), V43 end(V30)) end end end end), V44 end(V21)) end end end end), V45 end(V16)) end end end end), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V52 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V51) -> ('nested--13059-18272--in--un--dumpConstraint'(V0, V1, V2, V3, V4, V51)) end, V14))), V52 end(V47)) end end end end; {'Core.Context.Context.Hole', V53, V54} -> begin (V55 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V6, {'Core.Env.Nil'}, V11))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V155 = fun (V60) -> case V0 of <<""/utf8>> -> begin (V107 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<<<"?"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V7 of {'Core.Context.Context.MkGlobalDef', V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82} -> V62 end))/binary, <<<<" : "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V59))/binary, case case V54 of {'Core.Context.Context.MkHoleFlags', V83, V84} -> V83 end of 1 -> <<" (ImplBind)"/utf8>>; 0 -> <<<<""/utf8>>/binary, case case V7 of {'Core.Context.Context.MkGlobalDef', V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106} -> V99 end of 1 -> <<" (Invertible)"/utf8>>; 0 -> <<""/utf8>> end/binary>> end/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V60))), {'Prelude.Types.Right', V107} end; _ -> begin (V154 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V0/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<<<"?"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V7 of {'Core.Context.Context.MkGlobalDef', V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129} -> V109 end))/binary, <<<<" : "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V59))/binary, case case V54 of {'Core.Context.Context.MkHoleFlags', V130, V131} -> V130 end of 1 -> <<" (ImplBind)"/utf8>>; 0 -> <<<<""/utf8>>/binary, case case V7 of {'Core.Context.Context.MkGlobalDef', V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153} -> V146 end of 1 -> <<" (Invertible)"/utf8>>; 0 -> <<""/utf8>> end/binary>> end/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V60))), {'Prelude.Types.Right', V154} end end end), V155 end(V56)) end end end end; {'Core.Context.Context.BySearch', V156, V157, V158} -> begin (V159 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V6, {'Core.Env.Nil'}, V11))), fun (V160) -> begin (V161 = (V159(V160))), case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> (begin (V177 = begin (V168 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Core.Context.dn--un--__mkHasNames', fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V164, V165)) end end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V166, V167)) end end}, V163))), fun (V169) -> begin (V170 = (V168(V169))), case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> (begin (V176 = fun (V173) -> case V0 of <<""/utf8>> -> begin (V174 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<<<"Search "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V172))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V173))), {'Prelude.Types.Right', V174} end; _ -> begin (V175 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V0/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<<<"Search "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V172))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V173))), {'Prelude.Types.Right', V175} end end end), V176 end(V169)) end end end end), V177 end(V160)) end end end end; {'Core.Context.Context.PMDef', V178, V179, V180, V181, V182} -> begin (V183 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V3, [], V6, {'Core.Env.Nil'}, V11))), fun (V184) -> begin (V185 = (V183(V184))), case V185 of {'Prelude.Types.Left', V186} -> {'Prelude.Types.Left', V186}; {'Prelude.Types.Right', V187} -> (begin (V194 = begin (V188 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V3, [], V6, {'Core.Env.Nil'}, {'Core.TT.Ref', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Core.TT.Func'}, {'Core.Name.Resolved', V1}}))), fun (V189) -> begin (V190 = (V188(V189))), case V190 of {'Prelude.Types.Left', V191} -> {'Prelude.Types.Left', V191}; {'Prelude.Types.Right', V192} -> (begin (V193 = ('Idris.Idris2.Core.Context.Log':'un--log'(V3, V0, 4, fun () -> <<<<"Solved: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1))/binary, <<<<" : "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V187))/binary, <<<<" = "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V192))/binary>>/binary>>/binary>>/binary>>/binary>> end))), V193 end(V189)) end end end end), V194 end(V184)) end end end end; {'Core.Context.Context.ImpBind'} -> begin (V195 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V3, [], V6, {'Core.Env.Nil'}, V11))), fun (V196) -> begin (V197 = (V195(V196))), case V197 of {'Prelude.Types.Left', V198} -> {'Prelude.Types.Left', V198}; {'Prelude.Types.Right', V199} -> (begin (V200 = ('Idris.Idris2.Core.Context.Log':'un--log'(V3, V0, 4, fun () -> <<<<"Bound: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V199))/binary>>/binary>>/binary>> end))), V200 end(V196)) end end end end; {'Core.Context.Context.Delayed'} -> begin (V201 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V3, [], V6, {'Core.Env.Nil'}, V11))), fun (V202) -> begin (V203 = (V201(V202))), case V203 of {'Prelude.Types.Left', V204} -> {'Prelude.Types.Left', V204}; {'Prelude.Types.Right', V205} -> (begin (V206 = ('Idris.Idris2.Core.Context.Log':'un--log'(V3, V0, 4, fun () -> <<<<"Delayed elaborator : "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V205))/binary>> end))), V206 end(V202)) end end end end; _ -> fun (V207) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; _ -> fun (V208) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'case--dumpHole,dumpConstraint-18302'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Prelude.Types.Nothing'} -> fun (V9) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Prelude.Types.Just', V10} -> case V10 of {'Core.UnifyState.Resolved'} -> fun (V11) -> case V0 of <<""/utf8>> -> begin (V12 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<": \x{9}Resolved"/utf8>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V11))), {'Prelude.Types.Right', V12} end; _ -> begin (V13 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V0/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<": \x{9}Resolved"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V11))), {'Prelude.Types.Right', V13} end end end; {'Core.UnifyState.MkConstraint', V14, V15, V16, V17, V18, V19} -> begin (V55 = begin (V20 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V3, V14, V7, V17, V18))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V54 = begin (V29 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Core.Context.dn--un--__mkHasNames', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V27, V28)) end end}, V24))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V53 = begin (V34 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V3, V14, V7, V17, V19))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V52 = begin (V43 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Core.Context.dn--un--__mkHasNames', fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V41, V42)) end end}, V38))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V51 = fun (V48) -> case V0 of <<""/utf8>> -> begin (V49 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<<<"\x{9}  "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V33))/binary, <<<<" =?= "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V47))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V48))), {'Prelude.Types.Right', V49} end; _ -> begin (V50 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V0/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<<<"\x{9}  "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V33))/binary, <<<<" =?= "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V47))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V48))), {'Prelude.Types.Right', V50} end end end), V51 end(V44)) end end end end), V52 end(V35)) end end end end), V53 end(V30)) end end end end), V54 end(V21)) end end end end), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V102 = begin (V61 = fun (V60) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V7, V60)) end), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V101 = begin (V66 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V3, V14, V65, V17, V18))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V100 = begin (V75 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Core.Context.dn--un--__mkHasNames', fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V73, V74)) end end}, V70))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V99 = begin (V80 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V3, V14, V65, V17, V19))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V98 = begin (V89 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Core.Context.dn--un--__mkHasNames', fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V85, V86)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V87, V88)) end end}, V84))), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V97 = ('Idris.Idris2.Core.Context.Log':'un--log'(V3, V0, 5, fun () -> <<<<"\x{9}    from "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V79))/binary, <<<<" =?= "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V93))/binary, case V16 of 1 -> (begin (V95 = fun (V94) -> V94 end), fun (V96) -> (V95(V96)) end end(<<"\x{a}\x{9}(lazy allowed)"/utf8>>)); 0 -> <<""/utf8>> end/binary>>/binary>>/binary>>/binary>> end))), V97 end(V90)) end end end end), V98 end(V81)) end end end end), V99 end(V76)) end end end end), V100 end(V67)) end end end end), V101 end(V62)) end end end end), V102 end(V56)) end end end end; {'Core.UnifyState.MkSeqConstraint', V103, V104, V105, V106, V107} -> fun (V108) -> case V0 of <<""/utf8>> -> begin (V115 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<<<"\x{9}\x{9}"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V109) -> ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V103, V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Value':'dn--un--showPrec_Show_(NF $free)'(V103, V110, V111)) end end}, V106))/binary, <<<<" =?= "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V112) -> ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V103, V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Value':'dn--un--showPrec_Show_(NF $free)'(V103, V113, V114)) end end}, V107))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V108))), {'Prelude.Types.Right', V115} end; _ -> begin (V122 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V0/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary, <<<<": "/utf8>>/binary, <<<<"\x{9}\x{9}"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V116) -> ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V103, V116)) end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.Value':'dn--un--showPrec_Show_(NF $free)'(V103, V117, V118)) end end}, V106))/binary, <<<<" =?= "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V119) -> ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V103, V119)) end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Value':'dn--un--showPrec_Show_(NF $free)'(V103, V120, V121)) end end}, V107))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V108))), {'Prelude.Types.Right', V122} end end end end end.
'case--case block in checkValidHole-17402'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Context.Context.BySearch', V10, V11, V12} -> begin (V18 = begin (V13 = V5), fun (V14) -> begin (V17 = (begin (V15 = V13), fun (V16) -> ('erlang':'get'(V15)) end end(V14))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V95 = begin (V55 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V2, case V22 of {'Core.Context.MkDefs', V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54} -> V23 end))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V94 = fun (V60) -> case V59 of {'Prelude.Types.Just', V61} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveGoal', [], V1, case V22 of {'Core.Context.MkDefs', V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93} -> V62 end, {'Core.Env.Nil'}, V61, {'Prelude.Types.Nothing'}}, V60)); {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V94 end(V56)) end end end end), V95 end(V19)) end end end end; {'Core.Context.Context.Guess', V96, V97, V98} -> case V98 of [E0 | E1] -> (fun (V99, V100) -> begin (V106 = begin (V101 = V4), fun (V102) -> begin (V105 = (begin (V103 = V101), fun (V104) -> ('erlang':'get'(V103)) end end(V102))), {'Prelude.Types.Right', V105} end end end), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V293 = case ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V99, case V110 of {'Core.UnifyState.MkUState', V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122} -> V115 end)) of {'Prelude.Types.Just', V123} -> case V123 of {'Core.UnifyState.MkConstraint', V124, V125, V126, V127, V128, V129} -> begin (V147 = begin (V130 = V4), fun (V131) -> begin (V146 = (begin (V132 = V130), fun (V133) -> ('erlang':'put'(V132, case V110 of {'Core.UnifyState.MkUState', V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145} -> {'Core.UnifyState.MkUState', V134, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), V136, V137, V138, V139, V140, V141, V142, V143, V144, V145} end)) end end(V131))), {'Prelude.Types.Right', V146} end end end), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V204 = begin (V153 = fun (V152) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V6, V152)) end), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V203 = begin (V158 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V5, V124, V157, V127, V128))), fun (V159) -> begin (V160 = (V158(V159))), case V160 of {'Prelude.Types.Left', V161} -> {'Prelude.Types.Left', V161}; {'Prelude.Types.Right', V162} -> (begin (V202 = begin (V163 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V5, V124, V157, V127, V129))), fun (V164) -> begin (V165 = (V163(V164))), case V165 of {'Prelude.Types.Left', V166} -> {'Prelude.Types.Left', V166}; {'Prelude.Types.Right', V167} -> (begin (V201 = fun (V168) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveEq', V124, V125, case V6 of {'Core.Context.MkDefs', V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200} -> V169 end, V127, V162, V167}, V168)) end), V201 end(V164)) end end end end), V202 end(V159)) end end end end), V203 end(V154)) end end end end), V204 end(V148)) end end end end; {'Core.UnifyState.MkSeqConstraint', V205, V206, V207, V208, V209} -> case V208 of [E2 | E3] -> (fun (V210, V211) -> case V209 of [E4 | E5] -> (fun (V212, V213) -> begin (V231 = begin (V214 = V4), fun (V215) -> begin (V230 = (begin (V216 = V214), fun (V217) -> ('erlang':'put'(V216, case V110 of {'Core.UnifyState.MkUState', V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229} -> {'Core.UnifyState.MkUState', V218, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), V220, V221, V222, V223, V224, V225, V226, V227, V228, V229} end)) end end(V215))), {'Prelude.Types.Right', V230} end end end), fun (V232) -> begin (V233 = (V231(V232))), case V233 of {'Prelude.Types.Left', V234} -> {'Prelude.Types.Left', V234}; {'Prelude.Types.Right', V235} -> (begin (V288 = begin (V237 = fun (V236) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V6, V236)) end), fun (V238) -> begin (V239 = (V237(V238))), case V239 of {'Prelude.Types.Left', V240} -> {'Prelude.Types.Left', V240}; {'Prelude.Types.Right', V241} -> (begin (V287 = begin (V242 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V5, V205, V241, V207, V210))), fun (V243) -> begin (V244 = (V242(V243))), case V244 of {'Prelude.Types.Left', V245} -> {'Prelude.Types.Left', V245}; {'Prelude.Types.Right', V246} -> (begin (V286 = begin (V247 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V5, V205, V241, V207, V212))), fun (V248) -> begin (V249 = (V247(V248))), case V249 of {'Prelude.Types.Left', V250} -> {'Prelude.Types.Left', V250}; {'Prelude.Types.Right', V251} -> (begin (V285 = fun (V252) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantSolveEq', V205, V206, case V6 of {'Core.Context.MkDefs', V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284} -> V253 end, V207, V246, V251}, V252)) end), V285 end(V248)) end end end end), V286 end(V243)) end end end end), V287 end(V238)) end end end end), V288 end(V232)) end end end end end(E4, E5)); _ -> fun (V289) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end(E2, E3)); _ -> fun (V290) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; _ -> fun (V291) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; {'Prelude.Types.Nothing'} -> fun (V292) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V293 end(V107)) end end end end end(E0, E1)); _ -> begin (V317 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V294) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V5, V294)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getRefs'({'Core.Name.Resolved', -1}, case V7 of {'Core.Context.Context.MkGlobalDef', V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316} -> V297 end)))), []))), fun (V318) -> begin (V319 = (V317(V318))), case V319 of {'Prelude.Types.Left', V320} -> {'Prelude.Types.Left', V320}; {'Prelude.Types.Right', V321} -> (begin (V324 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V322) -> fun (V323) -> ('nested--12003-17334--in--un--checkRef'(V0, V1, V2, V3, V4, V5, V322, V323)) end end, V321))), V324 end(V318)) end end end end end; _ -> begin (V348 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V325) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V5, V325)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getRefs'({'Core.Name.Resolved', -1}, case V7 of {'Core.Context.Context.MkGlobalDef', V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347} -> V328 end)))), []))), fun (V349) -> begin (V350 = (V348(V349))), case V350 of {'Prelude.Types.Left', V351} -> {'Prelude.Types.Left', V351}; {'Prelude.Types.Right', V352} -> (begin (V355 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V353) -> fun (V354) -> ('nested--12003-17334--in--un--checkRef'(V0, V1, V2, V3, V4, V5, V353, V354)) end end, V352))), V355 end(V349)) end end end end end.
'case--max-13515'(V0, V1, V2) -> case V2 of 1 -> V1; 0 -> V0 end.
'case--min-13499'(V0, V1, V2) -> case V2 of 1 -> V1; 0 -> V0 end.
'nested--7896-13551--in--un--tag'(V0, V1, V2) -> case V2 of 0 -> 1; 1 -> 2; 4 -> 3; 2 -> 4; 3 -> 5 end.
'nested--12798-18010--in--un--nameEq'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> case V5 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V13)) end end end end.
'nested--11460-16835--in--un--envArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V0, 0, V5, V3, []))))), V8 end.
'nested--11332-16715--in--un--envArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V0, 0, V7, V3, []))))), V10 end.
'nested--11179-16556--in--un--envArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V1, 1, V6, V4, []))))), V9 end.
'nested--10809-16223--in--un--envArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V3, V0, V8, V6, []))))), V11 end.
'nested--13059-18272--in--un--dumpConstraint'(V0, V1, V2, V3, V4, V5) -> begin (V11 = begin (V6 = V4), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V39 = begin (V21 = begin (V16 = V3), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'get'(V18)) end end(V17))), {'Prelude.Types.Right', V20} end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V38 = ('case--dumpHole,dumpConstraint-18302'(V0, V1, V2, V3, V4, V5, V15, V25, ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V5, case V15 of {'Core.UnifyState.MkUState', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} -> V30 end))))), V38 end(V22)) end end end end), V39 end(V12)) end end end end.
'nested--12003-17334--in--un--checkRef'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Core.Name.PV', V8, V9} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V1, <<<<"Hole cannot depend on an unbound implicit "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))/binary>>}, V7)); _ -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end.
'dn--un--min_Ord_DelayReason'(V0, V1) -> case ('dn--un--<_Ord_DelayReason'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_DelayReason'(V0, V1) -> case ('dn--un-->_Ord_DelayReason'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--compare_Ord_DelayReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7896-13551--in--un--tag'(V1, V0, V0)), ('nested--7896-13551--in--un--tag'(V1, V0, V1)))).
'dn--un--__Impl_Ord_DelayReason'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DelayReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DelayReason'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_DelayReason'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_DelayReason'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_DelayReason'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_DelayReason'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_DelayReason'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_DelayReason'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_DelayReason'(V16, V17)) end end}.
'dn--un--__Impl_Eq_DelayReason'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DelayReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DelayReason'(V2, V3)) end end}.
'dn--un-->_Ord_DelayReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_DelayReason'(V0, V1)), 2)).
'dn--un-->=_Ord_DelayReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_DelayReason'(V0, V1)), 0)).
'dn--un--==_Eq_DelayReason'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; 3 -> case V1 of 3 -> 1; _ -> 0 end; 4 -> case V1 of 4 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--<_Ord_DelayReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_DelayReason'(V0, V1)), 0)).
'dn--un--<=_Ord_DelayReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_DelayReason'(V0, V1)), 2)).
'dn--un--/=_Eq_DelayReason'(V0, V1) -> case ('dn--un--==_Eq_DelayReason'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--tryUnify'(V0, V1, V2, V3) -> begin (V4 = ('un--tryErrorUnify'(V0, V1, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V12 = case V8 of {'Prelude.Types.Right', V9} -> fun (V10) -> {'Prelude.Types.Right', V9} end; {'Prelude.Types.Left', V11} -> V3 end), V12 end(V5)) end end end end.
'un--tryErrorUnify'(V0, V1, V2) -> begin (V8 = begin (V3 = V1), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V131 = begin (V13 = ('Idris.Idris2.Core.Context':'un--branch'(V0))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V130 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V18 = V2), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V30 = begin (V23 = ('Idris.Idris2.Core.Context':'un--commit'(V0))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V29 = fun (V28) -> {'Prelude.Types.Right', {'Prelude.Types.Right', V22}} end), V29 end(V24)) end end end end), V30 end(V19)) end end end end, fun (V31) -> begin (V37 = begin (V32 = V1), fun (V33) -> begin (V36 = (begin (V34 = V32), fun (V35) -> ('erlang':'put'(V34, V12)) end end(V33))), {'Prelude.Types.Right', V36} end end end), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V129 = begin (V47 = begin (V42 = V0), fun (V43) -> begin (V46 = (begin (V44 = V42), fun (V45) -> ('erlang':'get'(V44)) end end(V43))), {'Prelude.Types.Right', V46} end end end), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V128 = begin (V121 = begin (V52 = V0), fun (V53) -> begin (V120 = (begin (V54 = V52), fun (V55) -> ('erlang':'put'(V54, case V17 of {'Core.Context.MkDefs', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} -> {'Core.Context.MkDefs', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, case V51 of {'Core.Context.MkDefs', V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119} -> V115 end, V84, V85, V86, V87} end)) end end(V53))), {'Prelude.Types.Right', V120} end end end), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V127 = fun (V126) -> {'Prelude.Types.Right', {'Prelude.Types.Left', V31}} end), V127 end(V122)) end end end end), V128 end(V48)) end end end end), V129 end(V38)) end end end end end))), V130 end(V14)) end end end end), V131 end(V9)) end end end end.
'un--setConstraint'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V30 = begin (V13 = V0), fun (V14) -> begin (V29 = (begin (V15 = V13), fun (V16) -> ('erlang':'put'(V15, case V12 of {'Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} -> {'Core.UnifyState.MkUState', V17, V18, V19, V20, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V1, V2, V21)), V22, V23, V24, V25, V26, V27, V28} end)) end end(V14))), {'Prelude.Types.Right', V29} end end end), V30 end(V9)) end end end end.
'un--saveHoles'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V47 = begin (V28 = begin (V11 = V0), fun (V12) -> begin (V27 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, case V10 of {'Core.UnifyState.MkUState', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> {'Core.UnifyState.MkUState', V15, V16, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), V18, V19, V20, V21, V22, V23, V24, V25, V26} end)) end end(V12))), {'Prelude.Types.Right', V27} end end end), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V46 = fun (V33) -> {'Prelude.Types.Right', case V10 of {'Core.UnifyState.MkUState', V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V36 end} end), V46 end(V29)) end end end end), V47 end(V7)) end end end end.
'un--restoreHoles'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V29 = begin (V12 = V0), fun (V13) -> begin (V28 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.UnifyState.MkUState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} -> {'Core.UnifyState.MkUState', V16, V17, V1, V19, V20, V21, V22, V23, V24, V25, V26, V27} end)) end end(V13))), {'Prelude.Types.Right', V28} end end end), V29 end(V8)) end end end end.
'un--resetNextVar'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V28 = begin (V11 = V0), fun (V12) -> begin (V27 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, case V10 of {'Core.UnifyState.MkUState', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> {'Core.UnifyState.MkUState', V15, V16, V17, V18, V19, V20, V21, V22, 0, V24, V25, V26} end)) end end(V12))), {'Prelude.Types.Right', V27} end end end), V28 end(V7)) end end end end.
'un--removeNoSolve'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V29 = begin (V12 = V0), fun (V13) -> begin (V28 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.UnifyState.MkUState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} -> {'Core.UnifyState.MkUState', V16, V17, V18, V19, V20, ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V21)), V22, V23, V24, V25, V26, V27} end)) end end(V13))), {'Prelude.Types.Right', V28} end end end), V29 end(V8)) end end end end.
'un--removeHoleName'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V47 = case ('Idris.Idris2.Core.Context':'un--getNameID'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end)) of {'Prelude.Types.Just', V45} -> ('un--removeHole'(V1, V45)); {'Prelude.Types.Nothing'} -> fun (V46) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V47 end(V9)) end end end end.
'un--removeHole'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V29 = begin (V12 = V0), fun (V13) -> begin (V28 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.UnifyState.MkUState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} -> {'Core.UnifyState.MkUState', ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V16)), V17, ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V18)), ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V19)), V20, V21, V22, V23, V24, V25, V26, V27} end)) end end(V13))), {'Prelude.Types.Right', V28} end end end), V29 end(V8)) end end end end.
'un--removeGuess'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V29 = begin (V12 = V0), fun (V13) -> begin (V28 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.UnifyState.MkUState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} -> {'Core.UnifyState.MkUState', V16, ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V17)), V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end)) end end(V13))), {'Prelude.Types.Right', V28} end end end), V29 end(V8)) end end end end.
'un--newSearch'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V3, V7, V9))), begin (V11 = ('Idris.Idris2.Core.Context':'un--newDef'(V3, V8, V4, [], V10, 2, {'Core.Context.Context.BySearch', V4, V5, V6}))), begin (V12 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.search"/utf8>>, 10, fun () -> <<<<"Adding new search "/utf8>>/binary, <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))/binary>>/binary>>/binary>> end))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V36 = begin (V17 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"unify.search"/utf8>>, 10, fun () -> <<"New search type"/utf8>> end, {'Core.Env.Nil'}, V10))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V35 = begin (V22 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V8, V11))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V34 = begin (V27 = ('un--addGuessName'(V2, V3, V8, V26))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = fun (V32) -> {'Prelude.Types.Right', {'Builtin.MkPair', V26, {'Core.TT.Meta', V3, V8, V26, ('nested--11332-16715--in--un--envArgs'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1))}}} end), V33 end(V28)) end end end end), V34 end(V23)) end end end end), V35 end(V18)) end end end end), V36 end(V13)) end end end end end end.
'un--newMetaLets'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = case V10 of 1 -> ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V3, V5, V7)); 0 -> ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V3, V5, V7)) end), begin (V34 = case ('Idris.Idris2.Core.Context':'un--newDef'(V3, V6, V4, [], V11, 2, V8)) of {'Core.Context.Context.MkGlobalDef', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> {'Core.Context.Context.MkGlobalDef', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V9, V28, V29, V30, V31, V32, V33} end), begin (V53 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.meta"/utf8>>, 5, fun () -> <<<<"Adding new meta "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V36, V37)) end end}, {'Prelude.Show.MkShow', fun (V38) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V39) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V39)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V40, V41)) end end}, {'Prelude.Show.MkShow', fun (V42) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V43, V44)) end end}}, V38)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V47) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V48, V49)) end end}, {'Prelude.Show.MkShow', fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V50)) end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V51, V52)) end end}}, V45, V46)) end end}}, {'Builtin.MkPair', V6, {'Builtin.MkPair', V3, V4}}))/binary>> end))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V77 = begin (V58 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, <<"unify.meta"/utf8>>, 10, fun () -> <<<<"New meta type "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary>> end, V11))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V76 = begin (V63 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V6, V34))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V75 = begin (V68 = ('un--addHoleName'(V2, V3, V6, V67))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V74 = fun (V73) -> {'Prelude.Types.Right', {'Builtin.MkPair', V67, {'Core.TT.Meta', V3, V6, V67, ('nested--10809-16223--in--un--envArgs'(V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1))}}} end), V74 end(V69)) end end end end), V75 end(V64)) end end end end), V76 end(V59)) end end end end), V77 end(V54)) end end end end end end.
'un--newMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('un--newMetaLets'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, 0)).
'un--newDelayed'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V3, V5, V7))), begin (V9 = ('Idris.Idris2.Core.Context':'un--newDef'(V3, V6, V4, [], V8, 2, {'Core.Context.Context.Delayed'}))), begin (V10 = ('Idris.Idris2.Core.Context':'un--addDef'(V2, V6, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V34 = begin (V21 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"unify.delay"/utf8>>, 10, fun () -> <<<<"Added delayed elaborator "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V16, V17)) end end}, {'Prelude.Show.MkShow', fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V19, V20)) end end}}, {'Builtin.MkPair', V6, V14}))/binary>> end))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V33 = begin (V26 = ('un--addHoleName'(V1, V3, V6, V14))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', {'Builtin.MkPair', V14, {'Core.TT.Meta', V3, V6, V14, ('nested--11460-16835--in--un--envArgs'(V0, V7, V6, V5, V4, V3, V2, V1))}}} end), V32 end(V27)) end end end end), V33 end(V22)) end end end end), V34 end(V11)) end end end end end end.
'un--newConstant'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('un--mkConstant'(V0, V3, V5, V6))), begin (V10 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V3, V5, V7))), begin (V11 = ('un--genName'(V2, V1, <<"postpone"/utf8>>))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V60 = begin (V16 = ('Idris.Idris2.Core.Context':'un--newDef'(V3, V15, V4, [], V10, 2, {'Core.Context.Context.Guess', V9, ('Idris.Idris2.Core.Env':'un--length'(V5)), V8}))), begin (V35 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"unify.constant"/utf8>>, 5, fun () -> <<<<"Adding new constant "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17)) end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V18, V19)) end end}, {'Prelude.Show.MkShow', fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V22, V23)) end end}, {'Prelude.Show.MkShow', fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V24)) end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V25, V26)) end end}}, V20)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V29) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V29)) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V30, V31)) end end}, {'Prelude.Show.MkShow', fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V32)) end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V33, V34)) end end}}, V27, V28)) end end}}, {'Builtin.MkPair', V15, {'Builtin.MkPair', V3, V4}}))/binary>> end))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V59 = begin (V40 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V2, <<"unify.constant"/utf8>>, 10, fun () -> <<<<"New constant type "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15))/binary>> end, V10))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V58 = begin (V45 = ('Idris.Idris2.Core.Context':'un--addDef'(V2, V15, V16))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V57 = begin (V50 = ('un--addGuessName'(V1, V3, V15, V49))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V56 = fun (V55) -> {'Prelude.Types.Right', {'Core.TT.Meta', V3, V15, V49, ('nested--11179-16556--in--un--envArgs'(V8, V0, V7, V6, V5, V4, V3, V2, V1))}} end), V56 end(V51)) end end end end), V57 end(V46)) end end end end), V58 end(V41)) end end end end), V59 end(V36)) end end end end end), V60 end(V12)) end end end end end end.
'un--mkConstantAppArgsSub'(V0, V1, V2, V3, V4, V5) -> case V0 of [] -> case V3 of {'Core.Env.Nil'} -> [] end; [E0 | E1] -> (fun (V6, V7) -> case V3 of {'Core.Env.::', V8, V9} -> case V4 of {'Core.TT.SubRefl'} -> ('un--mkConstantAppArgs'(V7, V1, V2, V9, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []])))); {'Core.TT.DropCons', V10} -> ('un--mkConstantAppArgsSub'(V7, V1, V2, V9, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []])))); {'Core.TT.KeepCons', V11} -> begin (V12 = ('un--mkConstantAppArgsSub'(V7, V1, V2, V9, V11, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []]))))), case case V1 of 1 -> 1; 0 -> case ('Idris.Idris2.Core.TT':'un--isLet'(V8)) of 1 -> 0; 0 -> 1 end end of 1 -> [{'Core.TT.Local', V2, {'Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--isLet'(V8))}, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V5))} | V12]; 0 -> V12 end end end end end(E0, E1)) end.
'un--mkConstantAppArgsOthers'(V0, V1, V2, V3, V4, V5) -> case V0 of [] -> case V3 of {'Core.Env.Nil'} -> [] end; [E0 | E1] -> (fun (V6, V7) -> case V3 of {'Core.Env.::', V8, V9} -> case V4 of {'Core.TT.SubRefl'} -> ('un--mkConstantAppArgsOthers'(V7, V1, V2, V9, {'Core.TT.SubRefl'}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []])))); {'Core.TT.KeepCons', V10} -> ('un--mkConstantAppArgsOthers'(V7, V1, V2, V9, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []])))); {'Core.TT.DropCons', V11} -> begin (V12 = ('un--mkConstantAppArgsOthers'(V7, V1, V2, V9, V11, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []]))))), case case V1 of 1 -> 1; 0 -> case ('Idris.Idris2.Core.TT':'un--isLet'(V8)) of 1 -> 0; 0 -> 1 end end of 1 -> [{'Core.TT.Local', V2, {'Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--isLet'(V8))}, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V5))} | V12]; 0 -> V12 end end end end end(E0, E1)) end.
'un--mkConstantAppArgs'(V0, V1, V2, V3, V4) -> case V0 of [] -> case V3 of {'Core.Env.Nil'} -> [] end; [E0 | E1] -> (fun (V5, V6) -> case V3 of {'Core.Env.::', V7, V8} -> begin (V9 = ('un--mkConstantAppArgs'(V6, V1, V2, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, [V5 | []]))))), case case V1 of 1 -> 1; 0 -> case ('Idris.Idris2.Core.TT':'un--isLet'(V7)) of 1 -> 0; 0 -> 1 end end of 1 -> [{'Core.TT.Local', V2, {'Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--isLet'(V7))}, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V4))} | V9]; 0 -> V9 end end end end(E0, E1)) end.
'un--mkConstant'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Core.Env.Nil'} -> V3 end; [E0 | E1] -> (fun (V4, V5) -> case V2 of {'Core.Env.::', V6, V7} -> begin (V8 = ('Idris.Idris2.Core.TT':'un--binderType'(V6))), ('un--mkConstant'(V5, V1, V7, {'Core.TT.Bind', V1, V4, {'Core.TT.Lam', V1, ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Core.TT.Explicit'}, V8}, V3})) end end end(E0, E1)) end.
'un--isHole'(V0, V1) -> begin (V2 = ('un--getHoles'(V0))), ((begin (V18 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end((begin (V10 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> {'Prelude.Types.Right', (V6(V9))} end end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V3) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V1, V3)))) end))))(V2)) end.
'un--isCurrentHole'(V0, V1) -> begin (V2 = ('un--getCurrentHoles'(V0))), ((begin (V18 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end((begin (V10 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> {'Prelude.Types.Right', (V6(V9))} end end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V3) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V1, V3)))) end))))(V2)) end.
'un--initUState'() -> {'Core.UnifyState.MkUState', ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), [], [], 0, 0, [], 0}.
'un--handleUnify'(V0, V1, V2, V3) -> begin (V4 = ('un--tryErrorUnify'(V0, V1, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V12 = case V8 of {'Prelude.Types.Right', V9} -> fun (V10) -> {'Prelude.Types.Right', V9} end; {'Prelude.Types.Left', V11} -> (V3(V11)) end), V12 end(V5)) end end end end.
'un--getHoles'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V34 = fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V31, V32, V33)) end end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end((begin (V26 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> {'Prelude.Types.Right', (V22(V25))} end end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V7) -> case V7 of {'Core.UnifyState.MkUState', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19} -> V8 end end))))(V6)) end.
'un--getGuesses'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V34 = fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V31, V32, V33)) end end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end((begin (V26 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> {'Prelude.Types.Right', (V22(V25))} end end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V7) -> case V7 of {'Core.UnifyState.MkUState', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19} -> V9 end end))))(V6)) end.
'un--getCurrentHoles'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V34 = fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V31, V32, V33)) end end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end((begin (V26 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> {'Prelude.Types.Right', (V22(V25))} end end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V7) -> case V7 of {'Core.UnifyState.MkUState', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19} -> V10 end end))))(V6)) end.
'un--genWithName'(V0, V1, V2) -> begin (V8 = begin (V3 = V1), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V49 = begin (V31 = begin (V13 = V1), fun (V14) -> begin (V30 = (begin (V15 = V13), fun (V16) -> ('erlang':'put'(V15, case V12 of {'Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} -> {'Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, V23, V24, begin (V29 = (V25 + 1)), case ((V29 band 9223372036854775808) =/= 0) of 'true' -> (V29 bor -9223372036854775808); _ -> (V29 band 9223372036854775807) end end, V26, V27, V28} end)) end end(V14))), {'Prelude.Types.Right', V30} end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V48 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, {'Core.Name.WithBlock', V2, case V12 of {'Core.UnifyState.MkUState', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V44 end}))), V48 end(V32)) end end end end), V49 end(V9)) end end end end.
'un--genVarName'(V0, V1, V2) -> begin (V8 = begin (V3 = V1), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V50 = begin (V31 = begin (V13 = V1), fun (V14) -> begin (V30 = (begin (V15 = V13), fun (V16) -> ('erlang':'put'(V15, case V12 of {'Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} -> {'Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, V23, V24, begin (V29 = (V25 + 1)), case ((V29 band 9223372036854775808) =/= 0) of 'true' -> (V29 bor -9223372036854775808); _ -> (V29 band 9223372036854775807) end end, V26, V27, V28} end)) end end(V14))), {'Prelude.Types.Right', V30} end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V49 = fun (V36) -> {'Prelude.Types.Right', {'Core.Name.MN', V2, case V12 of {'Core.UnifyState.MkUState', V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} -> V45 end}} end), V49 end(V32)) end end end end), V50 end(V9)) end end end end.
'un--genName'(V0, V1, V2) -> begin (V8 = begin (V3 = V1), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V56 = begin (V31 = begin (V13 = V1), fun (V14) -> begin (V30 = (begin (V15 = V13), fun (V16) -> ('erlang':'put'(V15, case V12 of {'Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} -> {'Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, V23, V24, begin (V29 = (V25 + 1)), case ((V29 band 9223372036854775808) =/= 0) of 'true' -> (V29 bor -9223372036854775808); _ -> (V29 band 9223372036854775807) end end, V26, V27, V28} end)) end end(V14))), {'Prelude.Types.Right', V30} end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V55 = begin (V48 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, {'Core.Name.MN', V2, case V12 of {'Core.UnifyState.MkUState', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V44 end}))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V54 = fun (V53) -> {'Prelude.Types.Right', V52} end), V54 end(V49)) end end end end), V55 end(V32)) end end end end), V56 end(V9)) end end end end.
'un--genMVName'(V0, V1, V2) -> case V2 of {'Core.Name.UN', V3} -> ('un--genName'(V0, V1, ('Idris.Idris2.Core.Name':'un--displayUserName'(V3)))); {'Core.Name.MN', V4, V5} -> ('un--genName'(V0, V1, V4)); _ -> begin (V11 = begin (V6 = V1), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V59 = begin (V34 = begin (V16 = V1), fun (V17) -> begin (V33 = (begin (V18 = V16), fun (V19) -> ('erlang':'put'(V18, case V15 of {'Core.UnifyState.MkUState', V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} -> {'Core.UnifyState.MkUState', V20, V21, V22, V23, V24, V25, V26, V27, begin (V32 = (V28 + 1)), case ((V32 band 9223372036854775808) =/= 0) of 'true' -> (V32 bor -9223372036854775808); _ -> (V32 band 9223372036854775807) end end, V29, V30, V31} end)) end end(V17))), {'Prelude.Types.Right', V33} end end end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V58 = begin (V51 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, {'Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), case V15 of {'Core.UnifyState.MkUState', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> V47 end}))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V57 = fun (V56) -> {'Prelude.Types.Right', V55} end), V57 end(V52)) end end end end), V58 end(V35)) end end end end), V59 end(V12)) end end end end end.
'un--genCaseName'(V0, V1, V2) -> begin (V8 = begin (V3 = V1), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V49 = begin (V31 = begin (V13 = V1), fun (V14) -> begin (V30 = (begin (V15 = V13), fun (V16) -> ('erlang':'put'(V15, case V12 of {'Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} -> {'Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, V23, V24, begin (V29 = (V25 + 1)), case ((V29 band 9223372036854775808) =/= 0) of 'true' -> (V29 bor -9223372036854775808); _ -> (V29 band 9223372036854775807) end end, V26, V27, V28} end)) end end(V14))), {'Prelude.Types.Right', V30} end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V48 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, {'Core.Name.CaseBlock', V2, case V12 of {'Core.UnifyState.MkUState', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V44 end}))), V48 end(V32)) end end end end), V49 end(V9)) end end end end.
'un--dumpHole'(V0, V1, V2, V3, V4) -> begin (V10 = begin (V5 = V0), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V111 = begin (V20 = begin (V15 = V1), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V110 = begin (V57 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', V4}, case V24 of {'Core.Context.MkDefs', V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56} -> V25 end))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V109 = case V61 of {'Prelude.Types.Nothing'} -> fun (V62) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Prelude.Types.Just', V63} -> begin (V64 = {'Prelude.Types.Just', V63}), ('case--case block in dumpHole-18710'(V2, V4, V3, V1, V0, V14, V24, V63, V64, {'Builtin.MkPair', case V63 of {'Core.Context.Context.MkGlobalDef', V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86} -> V82 end, case V63 of {'Core.Context.Context.MkGlobalDef', V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108} -> V89 end})) end end), V109 end(V58)) end end end end), V110 end(V21)) end end end end), V111 end(V11)) end end end end.
'un--dumpConstraints'(V0, V1, V2, V3, V4) -> begin (V10 = begin (V5 = V0), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V89 = begin (V20 = begin (V15 = V1), fun (V16) -> begin (V19 = (begin (V17 = V15), fun (V18) -> ('erlang':'get'(V17)) end end(V16))), {'Prelude.Types.Right', V19} end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V88 = begin (V25 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V87 = case V29 of 1 -> (begin (V66 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V14 of {'Core.UnifyState.MkUState', V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V31 end)), ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V4 of 1 -> case V14 of {'Core.UnifyState.MkUState', V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> V42 end; 0 -> case V14 of {'Core.UnifyState.MkUState', V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} -> V56 end end))))), fun () -> case ('Idris.Idris2.Data.List':'un--isNil'(V66)) of 1 -> fun (V67) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> begin (V71 = fun (V68) -> case V2 of <<""/utf8>> -> begin (V69 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<": --- CONSTRAINTS AND HOLES ---"/utf8>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V68))), {'Prelude.Types.Right', V69} end; _ -> begin (V70 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"LOG "/utf8>>/binary, <<V2/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))/binary, <<": --- CONSTRAINTS AND HOLES ---"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V68))), {'Prelude.Types.Right', V70} end end end), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V85 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V76) -> ('un--dumpHole'(V0, V1, V2, V3, V76)) end, ((begin (V82 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V80, V81)) end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V77) -> ('Idris.Idris2.Builtin':'un--fst'(V77)) end))(V66))))), V85 end(V72)) end end end end end end end()); 0 -> fun (V86) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V87 end(V26)) end end end end), V88 end(V21)) end end end end), V89 end(V11)) end end end end.
'un--deleteConstraint'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V29 = begin (V12 = V0), fun (V13) -> begin (V28 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.UnifyState.MkUState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} -> {'Core.UnifyState.MkUState', V16, V17, V18, V19, ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V20)), V21, V22, V23, V24, V25, V26, V27} end)) end end(V13))), {'Prelude.Types.Right', V28} end end end), V29 end(V8)) end end end end.
'un--checkValidHole'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4, V2)) of 1 -> begin (V13 = begin (V8 = V0), fun (V9) -> begin (V12 = (begin (V10 = V8), fun (V11) -> ('erlang':'get'(V10)) end end(V9))), {'Prelude.Types.Right', V12} end end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V81 = begin (V50 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', V4}, case V17 of {'Core.Context.MkDefs', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} -> V18 end))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V80 = case V54 of {'Prelude.Types.Just', V55} -> begin (V56 = {'Prelude.Types.Just', V55}), ('case--case block in checkValidHole-17402'(V4, V6, V7, V2, V1, V0, V17, V55, V56, case V55 of {'Core.Context.Context.MkGlobalDef', V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78} -> V74 end)) end; {'Prelude.Types.Nothing'} -> fun (V79) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V80 end(V51)) end end end end), V81 end(V14)) end end end end; 0 -> fun (V82) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end end.
'un--checkUserHolesAfter'(V0, V1, V2, V3) -> begin (V4 = ('un--getGuesses'(V0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V99 = begin (V9 = ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(V8))), begin (V49 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.unsolved"/utf8>>, 10, fun () -> <<<<"Unsolved guesses "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V10) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V11)) end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V12, V13)) end end}, {'Prelude.Show.MkShow', fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V16, V17)) end end}, {'Prelude.Show.MkShow', fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V19, V20)) end end}}, V14)) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V24, V25)) end end}, {'Prelude.Show.MkShow', fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V27, V28)) end end}}, V21, V22)) end end}}, V10)) end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V31) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V32, V33)) end end}, {'Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V35) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V36, V37)) end end}, {'Prelude.Show.MkShow', fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V38)) end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V39, V40)) end end}}, V34)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V43) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V43)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V44, V45)) end end}, {'Prelude.Show.MkShow', fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V46)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V47, V48)) end end}}, V41, V42)) end end}}, V29, V30)) end end}, V9))/binary>> end))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V98 = begin (V55 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V54) -> ('un--checkValidHole'(V1, V0, V2, V54)) end, V9))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V97 = begin (V60 = ('un--getCurrentHoles'(V0))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V96 = begin (V65 = ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(V64))), begin (V77 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V66, V67)) end end, 0}, fun (V68) -> ('Idris.Idris2.Core.Name':'un--isUserName'(V68)) end, ((begin (V74 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V72, V73)) end end end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V69) -> ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V69)))) end))(V65)))) of 1 -> []; 0 -> V65 end), begin (V89 = fun (V78) -> case case V3 of 1 -> case ('Idris.Idris2.Data.List':'un--isNil'(V77)) of 1 -> 0; 0 -> 1 end; 0 -> 0 end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.UnsolvedHoles', ((begin (V86 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V84, V85)) end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(fun (V81) -> ('Idris.Idris2.Builtin':'un--snd'(V81)) end))(('Idris.Idris2.Data.List':'un--nubBy'(fun (V79) -> fun (V80) -> ('nested--12798-18010--in--un--nameEq'(V3, V2, V1, V0, V79, V80)) end end, V65))))}, V78)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V95 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V94) -> ('un--addDelayedHoleName'(V0, V94)) end, V77))), V95 end(V90)) end end end end end end), V96 end(V61)) end end end end), V97 end(V56)) end end end end), V98 end(V50)) end end end end end), V99 end(V5)) end end end end.
'un--checkUserHoles'(V0, V1, V2) -> ('un--checkUserHolesAfter'(V0, V1, 0, V2)).
'un--checkNoGuards'(V0, V1) -> ('un--checkUserHoles'(V0, V1, 0)).
'un--checkDelayedHoles'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V34 = begin (V24 = ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V11 of {'Core.UnifyState.MkUState', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23} -> V15 end))), fun (V25) -> case ('Idris.Idris2.Data.List':'un--isNil'(V24)) of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}}; 0 -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Core.Core.UnsolvedHoles', ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V26) -> ('Idris.Idris2.Builtin':'un--snd'(V26)) end))(V24))}}} end end end), V34 end(V8)) end end end end.
'un--applyToSub'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgsSub'(V0, 1, V1, V3, V4, []))))), ('Idris.Idris2.Core.TT':'un--apply'(V1, V2, V5)) end.
'un--applyToOthers'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgsOthers'(V0, 1, V1, V3, V4, []))))), ('Idris.Idris2.Core.TT':'un--apply'(V1, V2, V5)) end.
'un--applyToFull'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V0, 1, V1, V3, []))))), ('Idris.Idris2.Core.TT':'un--apply'(V1, V2, V4)) end.
'un--applyTo'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V0, 0, V1, V3, []))))), ('Idris.Idris2.Core.TT':'un--apply'(V1, V2, V4)) end.
'un--addPolyConstraint'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Core.Value.NApp', V7, V8, V9} -> case V8 of {'Core.Value.NMeta', V10, V11, V12} -> begin (V18 = begin (V13 = V1), fun (V14) -> begin (V17 = (begin (V15 = V13), fun (V16) -> ('erlang':'get'(V15)) end end(V14))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V41 = begin (V23 = V1), fun (V24) -> begin (V40 = (begin (V25 = V23), fun (V26) -> ('erlang':'put'(V25, begin (V27 = {'Core.Value.NApp', V7, {'Core.Value.NMeta', V10, V11, V12}, V9}), case V22 of {'Core.UnifyState.MkUState', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> {'Core.UnifyState.MkUState', V28, V29, V30, V31, V32, V33, [{'Core.UnifyState.MkPolyConstraint', V0, V2, V3, V4, V27, V6} | V34], V35, V36, V37, V38, V39} end end)) end end(V24))), {'Prelude.Types.Right', V40} end end end), V41 end(V19)) end end end end; _ -> fun (V42) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; _ -> fun (V43) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'un--addNoSolve'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V29 = begin (V12 = V0), fun (V13) -> begin (V28 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.UnifyState.MkUState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} -> {'Core.UnifyState.MkUState', V16, V17, V18, V19, V20, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V1, {'Builtin.MkUnit'}, V21)), V22, V23, V24, V25, V26, V27} end)) end end(V13))), {'Prelude.Types.Right', V28} end end end), V29 end(V8)) end end end end.
'un--addHoleName'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V31 = begin (V14 = V0), fun (V15) -> begin (V30 = (begin (V16 = V14), fun (V17) -> ('erlang':'put'(V16, case V13 of {'Core.UnifyState.MkUState', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> {'Core.UnifyState.MkUState', ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V3, {'Builtin.MkPair', V1, V2}, V18)), V19, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V3, {'Builtin.MkPair', V1, V2}, V20)), V21, V22, V23, V24, V25, V26, V27, V28, V29} end)) end end(V15))), {'Prelude.Types.Right', V30} end end end), V31 end(V10)) end end end end.
'un--addGuessName'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V31 = begin (V14 = V0), fun (V15) -> begin (V30 = (begin (V16 = V14), fun (V17) -> ('erlang':'put'(V16, case V13 of {'Core.UnifyState.MkUState', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> {'Core.UnifyState.MkUState', V18, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V3, {'Builtin.MkPair', V1, V2}, V19)), V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end)) end end(V15))), {'Prelude.Types.Right', V30} end end end), V31 end(V10)) end end end end.
'un--addDot'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V14 = begin (V9 = V1), fun (V10) -> begin (V13 = (begin (V11 = V9), fun (V12) -> ('erlang':'get'(V11)) end end(V10))), {'Prelude.Types.Right', V13} end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V59 = begin (V19 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V18, V4, V6))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V58 = begin (V24 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V18, V4, V8))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V57 = begin (V34 = begin (V29 = V2), fun (V30) -> begin (V33 = (begin (V31 = V29), fun (V32) -> ('erlang':'get'(V31)) end end(V30))), {'Prelude.Types.Right', V33} end end end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V56 = begin (V39 = V2), fun (V40) -> begin (V55 = (begin (V41 = V39), fun (V42) -> ('erlang':'put'(V41, case V38 of {'Core.UnifyState.MkUState', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54} -> {'Core.UnifyState.MkUState', V43, V44, V45, V46, V47, V48, V49, [{'Builtin.MkPair', V5, {'Builtin.MkPair', V7, {'Core.UnifyState.MkConstraint', V0, V3, 0, V4, V23, V28}}} | V50], V51, V52, V53, V54} end)) end end(V40))), {'Prelude.Types.Right', V55} end end end), V56 end(V35)) end end end end), V57 end(V25)) end end end end), V58 end(V20)) end end end end), V59 end(V15)) end end end end.
'un--addDelayedHoleName'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V31 = begin (V14 = V0), fun (V15) -> begin (V30 = (begin (V16 = V14), fun (V17) -> ('erlang':'put'(V16, case V13 of {'Core.UnifyState.MkUState', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> {'Core.UnifyState.MkUState', V18, V19, V20, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V2, V3, V21)), V22, V23, V24, V25, V26, V27, V28, V29} end)) end end(V15))), {'Prelude.Types.Right', V30} end end end), V31 end(V10)) end end end end end.
'un--addConstraint'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V51 = begin (V25 = case V12 of {'Core.UnifyState.MkUState', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24} -> V22 end), begin (V44 = begin (V26 = V0), fun (V27) -> begin (V43 = (begin (V28 = V26), fun (V29) -> ('erlang':'put'(V28, case V12 of {'Core.UnifyState.MkUState', V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> {'Core.UnifyState.MkUState', V30, V31, V32, V33, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V25, V2, V34)), V35, V36, V37, V38, begin (V42 = (V25 + 1)), case ((V42 band 9223372036854775808) =/= 0) of 'true' -> (V42 bor -9223372036854775808); _ -> (V42 band 9223372036854775807) end end, V40, V41} end)) end end(V27))), {'Prelude.Types.Right', V43} end end end), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V50 = fun (V49) -> {'Prelude.Types.Right', V25} end), V50 end(V45)) end end end end end), V51 end(V9)) end end end end.
