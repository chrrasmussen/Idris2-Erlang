-module('Idris.Idris2.Core.Options.Log').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6510-7328--in--un--there'/5,
  'nested--6510-7327--in--un--here'/5,
  'nested--6114-6933--in--un--helpTopic'/1,
  'nested--6492-7315--in--un--go'/5,
  'dn--un--show_Show_LogLevel'/1,
  'dn--un--showPrec_Show_LogLevel'/2,
  'dn--un--__Impl_Show_LogLevel'/0,
  'un--withVerbosity'/2,
  'un--verbosity'/1,
  'un--unsafeMkLogLevel'/2,
  'un--topics'/1,
  'un--parseLogLevel'/1,
  'un--mkUnverifiedLogLevel'/2,
  'un--mkLogLevel\x{27}'/2,
  'un--mkLogLevel'/2,
  'un--knownTopics'/0,
  'un--keepLog'/2,
  'un--insertLogLevel'/2,
  'un--helpTopics'/0,
  'un--defaultLogLevel'/0,
  'un--LogLevels'/0,
  'un--KnownTopic'/1
]).
'nested--6510-7328--in--un--there'(V0, V1, V2, V3, V4) -> case V4 of [] -> 0; [E0 | E1] -> (fun (V5, V6) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 0 end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Data.These':'un--fromThat'(V3)), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V5, V7)), fun (V8) -> {'Prelude.Types.Just', ('nested--6492-7315--in--un--go'(V0, V1, V2, V6, V8))} end)) end)))) end(E0, E1)) end.
'nested--6510-7327--in--un--here'(V0, V1, V2, V3, V4) -> case ('Idris.Idris2.Data.These':'un--fromThis'(V3)) of {'Prelude.Types.Nothing'} -> 0; {'Prelude.Types.Just', V5} -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V0, V5)) end.
'nested--6114-6933--in--un--helpTopic'(V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> begin (V3 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"+"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V1))))), begin (V5 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [] end, fun () -> fun (V4) -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(V4)))) | []] end end, V2))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V3 | V5])) end end end.
'nested--6492-7315--in--un--go'(V0, V1, V2, V3, V4) -> begin (V5 = V4), case ('nested--6510-7327--in--un--here'(V0, V1, V2, V5, V3)) of 1 -> 1; 0 -> ('nested--6510-7328--in--un--there'(V0, V1, V2, V5, V3)) end end.
'dn--un--show_Show_LogLevel'(V0) -> case V0 of {'Core.Options.Log.MkLogLevel', V1, V2} -> case V1 of [] -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)); _ -> <<('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Data.List':'un--intersperse'(<<"."/utf8>>, V1))))/binary, <<<<":"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary>>/binary>> end end.
'dn--un--showPrec_Show_LogLevel'(V0, V1) -> ('dn--un--show_Show_LogLevel'(V1)).
'dn--un--__Impl_Show_LogLevel'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_LogLevel'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_LogLevel'(V1, V2)) end end}.
'un--withVerbosity'(V0, V1) -> case V1 of {'Core.Options.Log.MkLogLevel', V2, V3} -> {'Core.Options.Log.MkLogLevel', V2, V0} end.
'un--verbosity'(V0) -> case V0 of {'Core.Options.Log.MkLogLevel', V1, V2} -> V2 end.
'un--unsafeMkLogLevel'(V0, V1) -> {'Core.Options.Log.MkLogLevel', V0, V1}.
'un--topics'(V0) -> case V0 of {'Core.Options.Log.MkLogLevel', V1, V2} -> V1 end.
'un--parseLogLevel'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(begin (V2 = ('Idris.Idris2.Data.String':'un--split'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $:)) end, V0))), begin (V5 = case V2 of {'Data.List1.:::', V3, V4} -> V3 end), begin (V8 = case V2 of {'Data.List1.:::', V6, V7} -> V7 end), case V8 of [] -> {'Prelude.Types.Just', {'Builtin.MkPair', fun (V9) -> {'Core.Options.Log.MkLogLevel', [], V9} end, V5}}; [E0 | E1] -> (fun (V10, V11) -> case V11 of [] -> {'Prelude.Types.Just', {'Builtin.MkPair', fun (V12) -> ('un--mkUnverifiedLogLevel'(V5, V12)) end, V10}}; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end end end end, fun (V13) -> case V13 of {'Builtin.MkPair', V14, V15} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Data.String':'un--parsePositive'({'Prelude.Num.MkNum', fun (V16) -> fun (V17) -> (V16 + V17) end end, fun (V18) -> fun (V19) -> (V18 * V19) end end, fun (V20) -> V20 end}, V15)), fun (V21) -> {'Prelude.Types.Just', (V14(('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V21))))} end)) end end)).
'un--mkUnverifiedLogLevel'(V0, V1) -> case V0 of <<""/utf8>> -> ('un--mkLogLevel\x{27}'({'Prelude.Types.Nothing'}, V1)); _ -> ('un--mkLogLevel\x{27}'({'Prelude.Types.Just', ('Idris.Idris2.Data.String':'un--split'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, $.)) end, V0))}, V1)) end.
'un--mkLogLevel\x{27}'(V0, V1) -> {'Core.Options.Log.MkLogLevel', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [] end, fun () -> fun (V2) -> ('Idris.Idris2.Data.List1':'un--forget'(V2)) end end, V0)), V1}.
'un--mkLogLevel'(V0, V1) -> ('un--mkUnverifiedLogLevel'(V0, V1)).
'un--knownTopics'() -> [{'Builtin.MkPair', <<"auto"/utf8>>, {'Prelude.Types.Just', <<"Auto proof search"/utf8>>}} | [{'Builtin.MkPair', <<"auto.determining"/utf8>>, {'Prelude.Types.Just', <<"Checking that interface\x{27}s determining argument are concrete"/utf8>>}} | [{'Builtin.MkPair', <<"builtin.Natural"/utf8>>, {'Prelude.Types.Just', <<"Log each encountered %builtin Natural declaration."/utf8>>}} | [{'Builtin.MkPair', <<"builtin.NaturalToInteger"/utf8>>, {'Prelude.Types.Just', <<"Log each encountered %builtin NaturalToInteger declaration."/utf8>>}} | [{'Builtin.MkPair', <<"builtin.IntegerToNatural"/utf8>>, {'Prelude.Types.Just', <<"Log each encountered %builtin IntegerToNatural declaration."/utf8>>}} | [{'Builtin.MkPair', <<"compile.execute"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"compile.export"/utf8>>, {'Prelude.Types.Just', <<"Log each name exported using %export"/utf8>>}} | [{'Builtin.MkPair', <<"compile.casetree"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"compile.casetree.clauses"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"compile.casetree.getpmdef"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"compile.casetree.intermediate"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"compile.casetree.measure"/utf8>>, {'Prelude.Types.Just', <<"Log the node counts of each runtime case tree."/utf8>>}} | [{'Builtin.MkPair', <<"compile.casetree.pick"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"compile.casetree.partition"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"compiler.const-fold"/utf8>>, {'Prelude.Types.Just', <<"Log definitions before and after constant folding."/utf8>>}} | [{'Builtin.MkPair', <<"compiler.cse"/utf8>>, {'Prelude.Types.Just', <<"Log information about common sub-expression elimination."/utf8>>}} | [{'Builtin.MkPair', <<"compiler.identity"/utf8>>, {'Prelude.Types.Just', <<"Log definitions that are equivalent to identity at runtime."/utf8>>}} | [{'Builtin.MkPair', <<"compiler.inline.eval"/utf8>>, {'Prelude.Types.Just', <<"Log function definitions before and after inlining."/utf8>>}} | [{'Builtin.MkPair', <<"compiler.inline.heuristic"/utf8>>, {'Prelude.Types.Just', <<"Log names the inlining heuristic(s) have decided to inline."/utf8>>}} | [{'Builtin.MkPair', <<"compiler.inline.io_bind"/utf8>>, {'Prelude.Types.Just', <<"Log the attempts to inline `io_bind`."/utf8>>}} | [{'Builtin.MkPair', <<"compiler.interpreter"/utf8>>, {'Prelude.Types.Just', <<"Log the call-stack of the VMCode interpreter."/utf8>>}} | [{'Builtin.MkPair', <<"compiler.javascript.doc"/utf8>>, {'Prelude.Types.Just', <<"Generating doc comments for the JS backend."/utf8>>}} | [{'Builtin.MkPair', <<"compiler.newtype.world"/utf8>>, {'Prelude.Types.Just', <<"Inlining matches on newtypes."/utf8>>}} | [{'Builtin.MkPair', <<"compiler.refc"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"compiler.refc.cc"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"compiler.scheme.chez"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"coverage"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"coverage.empty"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"coverage.missing"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"coverage.recover"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.data"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.data.constructor"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.data.parameters"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.def"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.def.alias"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.def.clause"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.def.clause.impossible"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.def.clause.with"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.def.impossible"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.def.lhs"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.def.lhs.implicits"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.param"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.record"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.record.field"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.record.projection"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.record.projection.prefix"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"declare.type"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"desugar.idiom"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"desugar.failing"/utf8>>, {'Prelude.Types.Just', <<"Log result of desugaring a `failing\x{27} block"/utf8>>}} | [{'Builtin.MkPair', <<"desugar.lhs"/utf8>>, {'Prelude.Types.Just', <<"Log result of desugaring a left hand side"/utf8>>}} | [{'Builtin.MkPair', <<"doc.data"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"doc.implementation"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"doc.record"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"doc.module"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"doc.module.definitions"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.ambiguous"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.app.var"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.app.dot"/utf8>>, {'Prelude.Types.Just', <<"Dealing with forced expressions when elaborating applications"/utf8>>}} | [{'Builtin.MkPair', <<"elab.app.lhs"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.as"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.bindnames"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.binder"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.case"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.def.local"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.delay"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.failing"/utf8>>, {'Prelude.Types.Just', <<"Elaborating a \x{27}failing\x{27} block."/utf8>>}} | [{'Builtin.MkPair', <<"elab.hole"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.implicits"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.implementation"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.interface"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.interface.default"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.local"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.prune"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.record"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.retry"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.rewrite"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.unify"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.update"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"elab.with"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"eval.casetree"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"eval.casetree.stuck"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"eval.def.underapplied"/utf8>>, {'Prelude.Types.Just', <<"Evaluating definitions (unavailable by default, edit Core.Normalise.Eval & recompile)"/utf8>>}} | [{'Builtin.MkPair', <<"eval.def.stuck"/utf8>>, {'Prelude.Types.Just', <<"Evaluating definitions (unavailable by default, edit Core.Normalise.Eval & recompile)"/utf8>>}} | [{'Builtin.MkPair', <<"eval.eta"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"eval.ref"/utf8>>, {'Prelude.Types.Just', <<"Evaluating refs (unavailable by default, edit Core.Normalise.Eval & recompile)"/utf8>>}} | [{'Builtin.MkPair', <<"eval.stuck"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"eval.stuck.outofscope"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"ide-mode.completion"/utf8>>, {'Prelude.Types.Just', <<"Autocompletion requests"/utf8>>}} | [{'Builtin.MkPair', <<"ide-mode.hole"/utf8>>, {'Prelude.Types.Just', <<"Displaying hole contexts"/utf8>>}} | [{'Builtin.MkPair', <<"ide-mode.highlight"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"ide-mode.highlight.alias"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"ide-mode.send"/utf8>>, {'Prelude.Types.Just', <<"The IDE mode\x{27}s SExp traffic"/utf8>>}} | [{'Builtin.MkPair', <<"ide-mode.recv"/utf8>>, {'Prelude.Types.Just', <<"Messages received by the IDE mode"/utf8>>}} | [{'Builtin.MkPair', <<"import"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"import.file"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"interaction.casesplit"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"interaction.generate"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"interaction.search"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"metadata.names"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"module"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"module.hash"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"package.depends"/utf8>>, {'Prelude.Types.Just', <<"Log which packages are being added"/utf8>>}} | [{'Builtin.MkPair', <<"quantity"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"quantity.hole"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"quantity.hole.update"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"reflection.reify"/utf8>>, {'Prelude.Types.Just', <<"Log what\x{27}s happening when converting an `NF` to some real value"/utf8>>}} | [{'Builtin.MkPair', <<"repl.eval"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"resugar.var"/utf8>>, {'Prelude.Types.Just', <<"Resugaring variables"/utf8>>}} | [{'Builtin.MkPair', <<"resugar.sectionL"/utf8>>, {'Prelude.Types.Just', <<"Resugaring left sections"/utf8>>}} | [{'Builtin.MkPair', <<"specialise"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.positivity"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.requirement"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.termination"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.termination.calc"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.termination.guarded"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.termination.sizechange"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.termination.sizechange.checkCall"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.termination.sizechange.checkCall.inPath"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.termination.sizechange.checkCall.inPathNot.restart"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.termination.sizechange.checkCall.inPathNot.return"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.termination.sizechange.inPath"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.termination.sizechange.isTerminating"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"totality.termination.sizechange.needsChecking"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"transform.lhs"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"transform.rhs"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"ttc.read"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"ttc.write"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"typesearch.equiv"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unelab.case"/utf8>>, {'Prelude.Types.Just', <<"Unelaborating a case block"/utf8>>}} | [{'Builtin.MkPair', <<"unelab.case.clause"/utf8>>, {'Prelude.Types.Just', <<"Unelaborating a case block\x{27}s clauses"/utf8>>}} | [{'Builtin.MkPair', <<"unelab.var"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.application"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.binder"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.constant"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.constraint"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.delay"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.equal"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.head"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.hole"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.instantiate"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.invertible"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.meta"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.noeta"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.postpone"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.retry"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.search"/utf8>>, {'Prelude.Types.Nothing'}} | [{'Builtin.MkPair', <<"unify.unsolved"/utf8>>, {'Prelude.Types.Nothing'}} | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]].
'un--keepLog'(V0, V1) -> case V0 of {'Core.Options.Log.MkLogLevel', V2, V3} -> case V3 of 0 -> 1; _ -> ('nested--6492-7315--in--un--go'(V3, V2, V1, V2, V1)) end end.
'un--insertLogLevel'(V0, V1) -> case V0 of {'Core.Options.Log.MkLogLevel', V2, V3} -> ('Idris.Idris2.Libraries.Data.StringTrie':'un--insert'(V2, V3, V1)) end.
'un--helpTopics'() -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> ('nested--6114-6933--in--un--helpTopic'(V0)) end))(('un--knownTopics'()))))))).
'un--defaultLogLevel'() -> ('Idris.Idris2.Libraries.Data.StringTrie':'un--singleton'([], 0)).
'un--LogLevels'() -> {'Libraries.Data.StringTrie.StringTrie', {'Prelude.Types.Nat'}}.
'un--KnownTopic'(V0) -> {'Data.Maybe.IsJust', 'erased', ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V3, V4)) end end}, V0, ('un--knownTopics'())))}.
