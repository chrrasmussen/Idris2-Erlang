-module('Idris.Idris2.Idris.Package.Types').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7953-8722--in--un--verSeqField'/3,
  'nested--7953-8721--in--un--verField'/3,
  'nested--4886-5746--in--un--upperBounds'/1,
  'nested--7953-8723--in--un--strField'/3,
  'nested--7953-8724--in--un--seqField'/4,
  'nested--5022-5881--in--un--operator'/6,
  'nested--4886-5744--in--un--noBounds'/1,
  'nested--4886-5745--in--un--lowerBounds'/1,
  'nested--7953-8720--in--un--field'/4,
  'nested--7953-8719--in--un--comment'/2,
  'nested--5022-5882--in--un--bounds'/7,
  'dn--un--show_Show_PkgVersionBounds'/1,
  'dn--un--show_Show_PkgVersion'/1,
  'dn--un--show_Show_PkgDesc'/1,
  'dn--un--show_Show_Depends'/1,
  'dn--un--showPrec_Show_PkgVersionBounds'/2,
  'dn--un--showPrec_Show_PkgVersion'/2,
  'dn--un--showPrec_Show_PkgDesc'/2,
  'dn--un--showPrec_Show_Depends'/2,
  'dn--un--pretty_Pretty_Void_PkgVersionBounds'/1,
  'dn--un--pretty_Pretty_Void_PkgVersion'/1,
  'dn--un--pretty_Pretty_Void_PkgDesc'/1,
  'dn--un--pretty_Pretty_Void_Depends'/1,
  'dn--un--prettyPrec_Pretty_Void_PkgVersionBounds'/2,
  'dn--un--prettyPrec_Pretty_Void_PkgVersion'/2,
  'dn--un--prettyPrec_Pretty_Void_PkgDesc'/2,
  'dn--un--prettyPrec_Pretty_Void_Depends'/2,
  'dn--un--min_Ord_PkgVersion'/2,
  'dn--un--max_Ord_PkgVersion'/2,
  'dn--un--compare_Ord_PkgVersion'/2,
  'dn--un--__Impl_Show_PkgVersionBounds'/0,
  'dn--un--__Impl_Show_PkgVersion'/0,
  'dn--un--__Impl_Show_PkgDesc'/0,
  'dn--un--__Impl_Show_Depends'/0,
  'dn--un--__Impl_Pretty_Void_PkgVersionBounds'/0,
  'dn--un--__Impl_Pretty_Void_PkgVersion'/0,
  'dn--un--__Impl_Pretty_Void_PkgDesc'/0,
  'dn--un--__Impl_Pretty_Void_Depends'/0,
  'dn--un--__Impl_Ord_PkgVersion'/0,
  'dn--un--__Impl_Eq_PkgVersion'/0,
  'dn--un-->_Ord_PkgVersion'/2,
  'dn--un-->=_Ord_PkgVersion'/2,
  'dn--un--==_Eq_PkgVersion'/2,
  'dn--un--<_Ord_PkgVersion'/2,
  'dn--un--<=_Ord_PkgVersion'/2,
  'dn--un--/=_Eq_PkgVersion'/2,
  'un--initPkgDesc'/1,
  'un--inBounds'/2,
  'un--exactBounds'/1,
  'un--defaultVersion'/0,
  'un--current'/0,
  'un--cssFiles'/0,
  'un--anyBounds'/0
]).
'nested--7953-8722--in--un--verSeqField'(V0, V1, V2) -> ('nested--7953-8720--in--un--field'(V0, 0, V1, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('dn--un--pretty_Pretty_Void_PkgVersionBounds'(V3)) end))(V2)))).
'nested--7953-8721--in--un--verField'(V0, V1, V2) -> ('nested--7953-8720--in--un--field'(V0, 1, V1, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('dn--un--pretty_Pretty_Void_PkgVersion'(V3)) end))(V2)))).
'nested--4886-5746--in--un--upperBounds'(V0) -> ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V5) -> <<case case V0 of {'Idris.Package.Types.MkPkgVersionBounds', V6, V7, V8, V9} -> V9 end of 1 -> <<"<= "/utf8>>; 0 -> <<"< "/utf8>> end/binary, ('dn--un--show_Show_PkgVersion'(V5))/binary>> end))(case V0 of {'Idris.Package.Types.MkPkgVersionBounds', V1, V2, V3, V4} -> V3 end)).
'nested--7953-8723--in--un--strField'(V0, V1, V2) -> ('nested--7953-8720--in--un--field'(V0, 1, V1, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V3)))) end))(V2)))).
'nested--7953-8724--in--un--seqField'(V0, V1, V2, V3) -> case V3 of [] -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V5 = fun (V4) -> V4 end), fun (V6) -> (V5(V6)) end end(<<"--"/utf8>>)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V2)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()) | []]]])); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V2)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--align'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--sep'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--punctuate'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'()), ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V7) -> case V1 of {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', V8, V9} -> (V8(V7)) end end))(V3)))))))))))) end.
'nested--5022-5881--in--un--operator'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(<<case V4 of 1 -> <<">"/utf8>>; 0 -> <<"<"/utf8>> end/binary, case V5 of 1 -> <<"="/utf8>>; 0 -> <<""/utf8>> end/binary>>)).
'nested--4886-5744--in--un--noBounds'(V0) -> case ('Idris.Idris2.Data.Maybe':'un--isNothing'(case V0 of {'Idris.Package.Types.MkPkgVersionBounds', V1, V2, V3, V4} -> V1 end)) of 1 -> ('Idris.Idris2.Data.Maybe':'un--isNothing'(case V0 of {'Idris.Package.Types.MkPkgVersionBounds', V5, V6, V7, V8} -> V7 end)); 0 -> 0 end.
'nested--4886-5745--in--un--lowerBounds'(V0) -> ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V5) -> <<case case V0 of {'Idris.Package.Types.MkPkgVersionBounds', V6, V7, V8, V9} -> V7 end of 1 -> <<">= "/utf8>>; 0 -> <<"> "/utf8>> end/binary, ('dn--un--show_Show_PkgVersion'(V5))/binary>> end))(case V0 of {'Idris.Package.Types.MkPkgVersionBounds', V1, V2, V3, V4} -> V1 end)).
'nested--7953-8720--in--un--field'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'(('Idris.Idris2.Data.List':'un--catMaybes'([{'Prelude.Types.Just', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V4) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V5)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V6) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V6)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V7) -> fun (V8) -> case case (V7 =:= V8) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V4)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> [V10 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V11))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V4)); 0 -> V4 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V12} -> case V12 of {'Builtin.MkPair', V13, V14} -> [V13 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V14))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V15) -> fun (V16) -> case case (V15 =:= V16) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V4)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> [V18 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V19))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V4)); 0 -> V4 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V20} -> case V20 of {'Builtin.MkPair', V21, V22} -> [V21 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V22))] end end)))))))) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V25) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V25)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V26) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V26)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V27) -> fun (V28) -> case case (V27 =:= V28) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V24)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V29} -> case V29 of {'Builtin.MkPair', V30, V31} -> [V30 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V31))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V24)); 0 -> V24 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V32} -> case V32 of {'Builtin.MkPair', V33, V34} -> [V33 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V34))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V35) -> fun (V36) -> case case (V35 =:= V36) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V24)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V37} -> case V37 of {'Builtin.MkPair', V38, V39} -> [V38 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V39))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V24)); 0 -> V24 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V40} -> case V40 of {'Builtin.MkPair', V41, V42} -> [V41 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V42))] end end)))))))) end end}, <<"--"/utf8>>))} | [{'Prelude.Types.Just', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V2))} | [('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Prelude.Interfaces.MkApplicative', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V45, V46)) end end end end, fun (V47) -> fun (V48) -> {'Prelude.Types.Just', V48} end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V51, V52)) end end end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V55, V56)) end end end end, fun (V57) -> fun (V58) -> {'Prelude.Types.Just', V58} end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V61, V62)) end end end end}, fun (V63) -> {'Prelude.Types.Nothing'} end, fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V65, V66)) end end end}, V1)), {'Prelude.Types.Just', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'())})) | []]]])))); {'Prelude.Types.Just', V67} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'(('Idris.Idris2.Data.List':'un--catMaybes'([{'Prelude.Types.Just', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V2))} | [('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Prelude.Interfaces.MkApplicative', fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V70, V71)) end end end end, fun (V72) -> fun (V73) -> {'Prelude.Types.Just', V73} end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V76, V77)) end end end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V80, V81)) end end end end, fun (V82) -> fun (V83) -> {'Prelude.Types.Just', V83} end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V86, V87)) end end end end}, fun (V88) -> {'Prelude.Types.Nothing'} end, fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V90, V91)) end end end}, V1)), {'Prelude.Types.Just', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'())})) | [{'Prelude.Types.Just', V67} | []]]])))) end.
'nested--7953-8719--in--un--comment'(V0, V1) -> begin (V2 = [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"--"/utf8>>)) | ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--words'(V1))]), begin (V3 = {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.Union', fun () -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.Chara', $ } end, fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hcat'([{'Libraries.Text.PrettyPrint.Prettyprinter.Doc.Line'} | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"-- "/utf8>>)) | []]])) end}), ((begin (V18 = fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V16, V17)) end end), fun (V19) -> fun (V20) -> ((V18(V19))(V20)) end end end({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.Line'}))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V4) -> fun (V5) -> ((begin (V13 = fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V11, V12)) end end), fun (V14) -> fun (V15) -> ((V13(V14))(V15)) end end end(((begin (V8 = fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V6, V7)) end end), fun (V9) -> fun (V10) -> ((V8(V9))(V10)) end end end(V4))(V3))))(V5)) end end, V2)))) end end.
'nested--5022-5882--in--un--bounds'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V7} -> {'Prelude.Types.Just', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('nested--5022-5881--in--un--operator'(V0, V1, V2, V3, V4, V5)), ('dn--un--pretty_Pretty_Void_PkgVersion'(V7))))} end.
'dn--un--show_Show_PkgVersionBounds'(V0) -> case ('nested--4886-5744--in--un--noBounds'(V0)) of 1 -> <<"any"/utf8>>; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> <<V1/binary, V2/binary>> end end, <<""/utf8>>}, fun (V3) -> V3 end, ('Idris.Idris2.Data.List':'un--intersperse'(<<" && "/utf8>>, ('Idris.Idris2.Data.List':'un--catMaybes'([('nested--4886-5745--in--un--lowerBounds'(V0)) | [('nested--4886-5746--in--un--upperBounds'(V0)) | []]])))))) end.
'dn--un--show_Show_PkgVersion'(V0) -> begin (V1 = V0), ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"."/utf8>>, ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)) end))(('Idris.Idris2.Data.List1':'un--forget'(V1)))))) end.
'dn--un--show_Show_PkgDesc'(V0) -> <<<<"Package: "/utf8>>/binary, <<case V0 of {'Idris.Package.Types.MkPkgDesc', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> V1 end/binary, <<<<"\x{a}"/utf8>>/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V27) -> <<<<"Version: "/utf8>>/binary, <<V27/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, ((begin (V59 = fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V57, V58)) end end end end), fun (V60) -> fun (V61) -> ((((V59('erased'))('erased'))(V60))(V61)) end end end(fun (V54) -> ('dn--un--show_Show_PkgVersion'(V54)) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> V29 end))))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V62) -> <<<<"Language Version: "/utf8>>/binary, <<V62/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, ((begin (V94 = fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V92, V93)) end end end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end(fun (V89) -> ('dn--un--show_Show_PkgVersionBounds'(V89)) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88} -> V65 end))))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V97) -> <<<<"Authors: "/utf8>>/binary, <<V97/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123} -> V101 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V124) -> <<<<"Maintainers: "/utf8>>/binary, <<V124/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150} -> V129 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V151) -> <<<<"License: "/utf8>>/binary, <<V151/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177} -> V157 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V178) -> <<<<"Brief: "/utf8>>/binary, <<V178/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204} -> V185 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V205) -> <<<<"ReadMe: "/utf8>>/binary, <<V205/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231} -> V213 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V232) -> <<<<"HomePage: "/utf8>>/binary, <<V232/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258} -> V241 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V259) -> <<<<"SourceLoc: "/utf8>>/binary, <<V259/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285} -> V269 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V286) -> <<<<"BugTracker: "/utf8>>/binary, <<V286/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312} -> V297 end))/binary, <<<<"Depends: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V313) -> ('dn--un--show_Show_Depends'(V313)) end, fun (V314) -> fun (V315) -> ('dn--un--showPrec_Show_Depends'(V314, V315)) end end}, case V0 of {'Idris.Package.Types.MkPkgDesc', V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341} -> V327 end))/binary, <<<<"\x{a}"/utf8>>/binary, <<<<"Modules: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V342) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V342)) end, fun (V343) -> fun (V344) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V343, V344)) end end}, ((begin (V376 = fun (V372) -> fun (V373) -> fun (V374) -> fun (V375) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V374, V375)) end end end end), fun (V377) -> fun (V378) -> ((((V376('erased'))('erased'))(V377))(V378)) end end end(fun (V371) -> ('Idris.Idris2.Builtin':'un--snd'(V371)) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370} -> V357 end))))/binary, <<<<"\x{a}"/utf8>>/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V379) -> <<<<"Main: "/utf8>>/binary, <<('Idris.Idris2.Builtin':'un--snd'(V379))/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405} -> V393 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V406) -> <<<<"Exec: "/utf8>>/binary, <<V406/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432} -> V421 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V433) -> <<<<"Library: "/utf8>>/binary, <<V433/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459} -> V449 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V460) -> <<<<"Opts: "/utf8>>/binary, <<('Idris.Idris2.Builtin':'un--snd'(V460))/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486} -> V477 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V487) -> <<<<"SourceDir: "/utf8>>/binary, <<V487/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503, V504, V505, V506, V507, V508, V509, V510, V511, V512, V513} -> V505 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V514) -> <<<<"BuildDir: "/utf8>>/binary, <<V514/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540} -> V533 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V541) -> <<<<"OutputDir: "/utf8>>/binary, <<V541/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, V556, V557, V558, V559, V560, V561, V562, V563, V564, V565, V566, V567} -> V561 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V568) -> <<<<"Prebuild: "/utf8>>/binary, <<('Idris.Idris2.Builtin':'un--snd'(V568))/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, V586, V587, V588, V589, V590, V591, V592, V593, V594} -> V589 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V595) -> <<<<"Postbuild: "/utf8>>/binary, <<('Idris.Idris2.Builtin':'un--snd'(V595))/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621} -> V617 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V622) -> <<<<"Preinstall: "/utf8>>/binary, <<('Idris.Idris2.Builtin':'un--snd'(V622))/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, V646, V647, V648} -> V645 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V649) -> <<<<"Postinstall: "/utf8>>/binary, <<('Idris.Idris2.Builtin':'un--snd'(V649))/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V650, V651, V652, V653, V654, V655, V656, V657, V658, V659, V660, V661, V662, V663, V664, V665, V666, V667, V668, V669, V670, V671, V672, V673, V674, V675} -> V673 end))/binary, <<('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V676) -> <<<<"Preclean: "/utf8>>/binary, <<('Idris.Idris2.Builtin':'un--snd'(V676))/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V677, V678, V679, V680, V681, V682, V683, V684, V685, V686, V687, V688, V689, V690, V691, V692, V693, V694, V695, V696, V697, V698, V699, V700, V701, V702} -> V701 end))/binary, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V703) -> <<<<"Postclean: "/utf8>>/binary, <<('Idris.Idris2.Builtin':'un--snd'(V703))/binary, <<"\x{a}"/utf8>>/binary>>/binary>> end end, case V0 of {'Idris.Package.Types.MkPkgDesc', V704, V705, V706, V707, V708, V709, V710, V711, V712, V713, V714, V715, V716, V717, V718, V719, V720, V721, V722, V723, V724, V725, V726, V727, V728, V729} -> V729 end))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>.
'dn--un--show_Show_Depends'(V0) -> <<case V0 of {'Idris.Package.Types.MkDepends', V1, V2} -> V1 end/binary, <<<<" "/utf8>>/binary, ('dn--un--show_Show_PkgVersionBounds'(case V0 of {'Idris.Package.Types.MkDepends', V3, V4} -> V4 end))/binary>>/binary>>.
'dn--un--showPrec_Show_PkgVersionBounds'(V0, V1) -> ('dn--un--show_Show_PkgVersionBounds'(V1)).
'dn--un--showPrec_Show_PkgVersion'(V0, V1) -> ('dn--un--show_Show_PkgVersion'(V1)).
'dn--un--showPrec_Show_PkgDesc'(V0, V1) -> ('dn--un--show_Show_PkgDesc'(V1)).
'dn--un--showPrec_Show_Depends'(V0, V1) -> ('dn--un--show_Show_Depends'(V1)).
'dn--un--pretty_Pretty_Void_PkgVersionBounds'(V0) -> case V0 of {'Idris.Package.Types.MkPkgVersionBounds', V1, V2, V3, V4} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<" && "/utf8>>)), V5, V6)) end end, ('Idris.Idris2.Data.List':'un--catMaybes'([('nested--5022-5882--in--un--bounds'(V4, V3, V2, V1, 1, V2, V1)) | [('nested--5022-5882--in--un--bounds'(V4, V3, V2, V1, 0, V4, V3)) | []]])))) end.
'dn--un--pretty_Pretty_Void_PkgVersion'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('dn--un--show_Show_PkgVersion'(V0)))).
'dn--un--pretty_Pretty_Void_PkgDesc'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"package"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(case V0 of {'Idris.Package.Types.MkPkgDesc', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> V1 end)))) | [('nested--7953-8721--in--un--verField'(V0, <<"version"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} -> V28 end)) | [('nested--7953-8723--in--un--strField'(V0, <<"authors"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78} -> V56 end)) | [('nested--7953-8723--in--un--strField'(V0, <<"maintainers"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104} -> V83 end)) | [('nested--7953-8723--in--un--strField'(V0, <<"license"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130} -> V110 end)) | [('nested--7953-8723--in--un--strField'(V0, <<"brief"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156} -> V137 end)) | [('nested--7953-8723--in--un--strField'(V0, <<"readme"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182} -> V164 end)) | [('nested--7953-8723--in--un--strField'(V0, <<"homepage"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208} -> V191 end)) | [('nested--7953-8723--in--un--strField'(V0, <<"sourceloc"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234} -> V218 end)) | [('nested--7953-8723--in--un--strField'(V0, <<"bugtracker"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260} -> V245 end)) | [('nested--7953-8719--in--un--comment'(V0, <<"the Idris2 version required (e.g. langversion >= 0.5.1)"/utf8>>)) | [('nested--7953-8722--in--un--verSeqField'(V0, <<"langversion"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286} -> V263 end)) | [('nested--7953-8719--in--un--comment'(V0, <<"packages to add to search path"/utf8>>)) | [('nested--7953-8724--in--un--seqField'(V0, {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V287) -> ('dn--un--pretty_Pretty_Void_Depends'(V287)) end, fun (V288) -> fun (V289) -> ('dn--un--prettyPrec_Pretty_Void_Depends'(V288, V289)) end end}, <<"depends"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315} -> V301 end)) | [('nested--7953-8719--in--un--comment'(V0, <<"modules to install"/utf8>>)) | [('nested--7953-8724--in--un--seqField'(V0, {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V316) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_Void_ModuleIdent'(V316)) end, fun (V317) -> fun (V318) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--prettyPrec_Pretty_Void_ModuleIdent'(V317, V318)) end end}, <<"modules"/utf8>>, ((begin (V350 = fun (V346) -> fun (V347) -> fun (V348) -> fun (V349) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V348, V349)) end end end end), fun (V351) -> fun (V352) -> ((((V350('erased'))('erased'))(V351))(V352)) end end end(fun (V345) -> ('Idris.Idris2.Builtin':'un--fst'(V345)) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344} -> V331 end)))) | [('nested--7953-8719--in--un--comment'(V0, <<"main file (i.e. file to load at REPL)"/utf8>>)) | [('nested--7953-8720--in--un--field'(V0, 1, <<"main"/utf8>>, ((begin (V384 = fun (V380) -> fun (V381) -> fun (V382) -> fun (V383) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V382, V383)) end end end end), fun (V385) -> fun (V386) -> ((((V384('erased'))('erased'))(V385))(V386)) end end end(fun (V379) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_Void_ModuleIdent'(('Idris.Idris2.Builtin':'un--fst'(V379)))) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378} -> V366 end)))) | [('nested--7953-8719--in--un--comment'(V0, <<"name of executable"/utf8>>)) | [('nested--7953-8723--in--un--strField'(V0, <<"executable"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412} -> V401 end)) | [('nested--7953-8723--in--un--strField'(V0, <<"opts"/utf8>>, ((begin (V444 = fun (V440) -> fun (V441) -> fun (V442) -> fun (V443) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V442, V443)) end end end end), fun (V445) -> fun (V446) -> ((((V444('erased'))('erased'))(V445))(V446)) end end end(fun (V439) -> ('Idris.Idris2.Builtin':'un--snd'(V439)) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438} -> V429 end)))) | [('nested--7953-8723--in--un--strField'(V0, <<"sourcedir"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472} -> V464 end)) | [('nested--7953-8723--in--un--strField'(V0, <<"builddir"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498} -> V491 end)) | [('nested--7953-8723--in--un--strField'(V0, <<"outputdir"/utf8>>, case V0 of {'Idris.Package.Types.MkPkgDesc', V499, V500, V501, V502, V503, V504, V505, V506, V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524} -> V518 end)) | [('nested--7953-8719--in--un--comment'(V0, <<"script to run before building"/utf8>>)) | [('nested--7953-8723--in--un--strField'(V0, <<"prebuild"/utf8>>, ((begin (V556 = fun (V552) -> fun (V553) -> fun (V554) -> fun (V555) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V554, V555)) end end end end), fun (V557) -> fun (V558) -> ((((V556('erased'))('erased'))(V557))(V558)) end end end(fun (V551) -> ('Idris.Idris2.Builtin':'un--snd'(V551)) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V525, V526, V527, V528, V529, V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550} -> V545 end)))) | [('nested--7953-8719--in--un--comment'(V0, <<"script to run after building"/utf8>>)) | [('nested--7953-8723--in--un--strField'(V0, <<"postbuild"/utf8>>, ((begin (V590 = fun (V586) -> fun (V587) -> fun (V588) -> fun (V589) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V588, V589)) end end end end), fun (V591) -> fun (V592) -> ((((V590('erased'))('erased'))(V591))(V592)) end end end(fun (V585) -> ('Idris.Idris2.Builtin':'un--snd'(V585)) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V559, V560, V561, V562, V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584} -> V580 end)))) | [('nested--7953-8719--in--un--comment'(V0, <<"script to run after building, before installing"/utf8>>)) | [('nested--7953-8723--in--un--strField'(V0, <<"preinstall"/utf8>>, ((begin (V624 = fun (V620) -> fun (V621) -> fun (V622) -> fun (V623) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V622, V623)) end end end end), fun (V625) -> fun (V626) -> ((((V624('erased'))('erased'))(V625))(V626)) end end end(fun (V619) -> ('Idris.Idris2.Builtin':'un--snd'(V619)) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618} -> V615 end)))) | [('nested--7953-8719--in--un--comment'(V0, <<"script to run after installing"/utf8>>)) | [('nested--7953-8723--in--un--strField'(V0, <<"postinstall"/utf8>>, ((begin (V658 = fun (V654) -> fun (V655) -> fun (V656) -> fun (V657) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V656, V657)) end end end end), fun (V659) -> fun (V660) -> ((((V658('erased'))('erased'))(V659))(V660)) end end end(fun (V653) -> ('Idris.Idris2.Builtin':'un--snd'(V653)) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V627, V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, V646, V647, V648, V649, V650, V651, V652} -> V650 end)))) | [('nested--7953-8719--in--un--comment'(V0, <<"script to run before cleaning"/utf8>>)) | [('nested--7953-8723--in--un--strField'(V0, <<"preclean"/utf8>>, ((begin (V692 = fun (V688) -> fun (V689) -> fun (V690) -> fun (V691) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V690, V691)) end end end end), fun (V693) -> fun (V694) -> ((((V692('erased'))('erased'))(V693))(V694)) end end end(fun (V687) -> ('Idris.Idris2.Builtin':'un--snd'(V687)) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V661, V662, V663, V664, V665, V666, V667, V668, V669, V670, V671, V672, V673, V674, V675, V676, V677, V678, V679, V680, V681, V682, V683, V684, V685, V686} -> V685 end)))) | [('nested--7953-8719--in--un--comment'(V0, <<"script to run after cleaning"/utf8>>)) | [('nested--7953-8723--in--un--strField'(V0, <<"postclean"/utf8>>, ((begin (V726 = fun (V722) -> fun (V723) -> fun (V724) -> fun (V725) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V724, V725)) end end end end), fun (V727) -> fun (V728) -> ((((V726('erased'))('erased'))(V727))(V728)) end end end(fun (V721) -> ('Idris.Idris2.Builtin':'un--snd'(V721)) end))(case V0 of {'Idris.Package.Types.MkPkgDesc', V695, V696, V697, V698, V699, V700, V701, V702, V703, V704, V705, V706, V707, V708, V709, V710, V711, V712, V713, V714, V715, V716, V717, V718, V719, V720} -> V720 end)))) | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])).
'dn--un--pretty_Pretty_Void_Depends'(V0) -> ((begin (V7 = fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V5, V6)) end end), fun (V8) -> fun (V9) -> ((V7(V8))(V9)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(case V0 of {'Idris.Package.Types.MkDepends', V3, V4} -> V3 end))))(('dn--un--pretty_Pretty_Void_PkgVersionBounds'(case V0 of {'Idris.Package.Types.MkDepends', V1, V2} -> V2 end)))).
'dn--un--prettyPrec_Pretty_Void_PkgVersionBounds'(V0, V1) -> ('dn--un--pretty_Pretty_Void_PkgVersionBounds'(V1)).
'dn--un--prettyPrec_Pretty_Void_PkgVersion'(V0, V1) -> ('dn--un--pretty_Pretty_Void_PkgVersion'(V1)).
'dn--un--prettyPrec_Pretty_Void_PkgDesc'(V0, V1) -> ('dn--un--pretty_Pretty_Void_PkgDesc'(V1)).
'dn--un--prettyPrec_Pretty_Void_Depends'(V0, V1) -> ('dn--un--pretty_Pretty_Void_Depends'(V1)).
'dn--un--min_Ord_PkgVersion'(V0, V1) -> case ('dn--un--<_Ord_PkgVersion'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_PkgVersion'(V0, V1) -> case ('dn--un-->_Ord_PkgVersion'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--compare_Ord_PkgVersion'(V0, V1) -> begin (V2 = V0), begin (V3 = V1), ('Idris.Idris2.Data.List1':'dn--un--compare_Ord_(List1 $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> case (V4 =:= V5) of 'false' -> 0; _ -> 1 end end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V6, V7)) end end}, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V20, V21)) end end}, V2, V3)) end end.
'dn--un--__Impl_Show_PkgVersionBounds'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PkgVersionBounds'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PkgVersionBounds'(V1, V2)) end end}.
'dn--un--__Impl_Show_PkgVersion'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PkgVersion'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PkgVersion'(V1, V2)) end end}.
'dn--un--__Impl_Show_PkgDesc'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PkgDesc'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PkgDesc'(V1, V2)) end end}.
'dn--un--__Impl_Show_Depends'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Depends'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Depends'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_PkgVersionBounds'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_PkgVersionBounds'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_PkgVersionBounds'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_PkgVersion'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_PkgVersion'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_PkgVersion'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_PkgDesc'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_PkgDesc'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_PkgDesc'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_Depends'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_Depends'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_Depends'(V1, V2)) end end}.
'dn--un--__Impl_Ord_PkgVersion'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PkgVersion'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PkgVersion'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_PkgVersion'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_PkgVersion'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_PkgVersion'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_PkgVersion'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_PkgVersion'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_PkgVersion'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_PkgVersion'(V16, V17)) end end}.
'dn--un--__Impl_Eq_PkgVersion'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PkgVersion'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PkgVersion'(V2, V3)) end end}.
'dn--un-->_Ord_PkgVersion'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_PkgVersion'(V0, V1)), 2)).
'dn--un-->=_Ord_PkgVersion'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_PkgVersion'(V0, V1)), 0)).
'dn--un--==_Eq_PkgVersion'(V0, V1) -> begin (V2 = V0), begin (V3 = V1), ('Idris.Idris2.Data.List1':'dn--un--==_Eq_(List1 $a)'({'Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> case (V4 =:= V5) of 'false' -> 0; _ -> 1 end end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V6, V7)) end end}, V2, V3)) end end.
'dn--un--<_Ord_PkgVersion'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_PkgVersion'(V0, V1)), 0)).
'dn--un--<=_Ord_PkgVersion'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_PkgVersion'(V0, V1)), 2)).
'dn--un--/=_Eq_PkgVersion'(V0, V1) -> case ('dn--un--==_Eq_PkgVersion'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--initPkgDesc'(V0) -> {'Idris.Package.Types.MkPkgDesc', V0, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, [], [], {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}}.
'un--inBounds'(V0, V1) -> begin (V2 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Data.List1.:::', 0, []} end, V0))), case ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 1 end, fun () -> fun (V3) -> case case V1 of {'Idris.Package.Types.MkPkgVersionBounds', V4, V5, V6, V7} -> V5 end of 1 -> ('dn--un-->=_Ord_PkgVersion'(V2, V3)); 0 -> ('dn--un-->_Ord_PkgVersion'(V2, V3)) end end end, case V1 of {'Idris.Package.Types.MkPkgVersionBounds', V8, V9, V10, V11} -> V8 end)) of 1 -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 1 end, fun () -> fun (V12) -> case case V1 of {'Idris.Package.Types.MkPkgVersionBounds', V13, V14, V15, V16} -> V16 end of 1 -> ('dn--un--<=_Ord_PkgVersion'(V2, V12)); 0 -> ('dn--un--<_Ord_PkgVersion'(V2, V12)) end end end, case V1 of {'Idris.Package.Types.MkPkgVersionBounds', V17, V18, V19, V20} -> V19 end)); 0 -> 0 end end.
'un--exactBounds'(V0) -> {'Idris.Package.Types.MkPkgVersionBounds', V0, 1, V0, 1}.
'un--defaultVersion'() -> {'Data.List1.:::', 0, []}.
'un--current'() -> case ('Idris.Idris2.Idris.Version':'un--version'()) of {'Libraries.Data.Version.MkVersion', V0, V1} -> case V0 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V6 = {'Prelude.Types.Just', {'Data.List1.:::', V2, [V4 | [V5 | []]]}}), {'Idris.Package.Types.MkPkgVersionBounds', V6, 1, V6, 1} end end end end.
'un--cssFiles'() -> [{'Idris.Package.Types.MkCSS', <<"Default"/utf8>>, <<"default"/utf8>>} | [{'Idris.Package.Types.MkCSS', <<"Alternative"/utf8>>, <<"alternative"/utf8>>} | [{'Idris.Package.Types.MkCSS', <<"Black & White"/utf8>>, <<"blackandwhite"/utf8>>} | []]]].
'un--anyBounds'() -> {'Idris.Package.Types.MkPkgVersionBounds', {'Prelude.Types.Nothing'}, 1, {'Prelude.Types.Nothing'}, 1}.
