-module('Idris.Idris2.Idris.Doc.Brackets').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--getDocsForBracket'/1
]).
'un--getDocsForBracket'(V0) -> case V0 of 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Idris.Doc.Annotations':'un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Idiom brackets"/utf8>>)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V2)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V3)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V4) -> fun (V5) -> case case (V4 =:= V5) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V1)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> [V7 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V8))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V1)); 0 -> V1 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> [V10 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V11))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V12) -> fun (V13) -> case case (V12 =:= V13) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V1)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> [V15 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V16))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V1)); 0 -> V1 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> [V18 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V19))] end end)))))))) end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V22) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V22)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V23) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V23)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V24) -> fun (V25) -> case case (V24 =:= V25) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V21)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V26} -> case V26 of {'Builtin.MkPair', V27, V28} -> [V27 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V28))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V21)); 0 -> V21 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V29} -> case V29 of {'Builtin.MkPair', V30, V31} -> [V30 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V31))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V32) -> fun (V33) -> case case (V32 =:= V33) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V21)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V34} -> case V34 of {'Builtin.MkPair', V35, V36} -> [V35 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V36))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V21)); 0 -> V21 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V37} -> case V37 of {'Builtin.MkPair', V38, V39} -> [V38 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V39))] end end)))))))) end end}, <<""/utf8>>)) | ((begin (V51 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V49, V50)) end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(fun (V46) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V46)) end))([(begin (V44 = fun (V43) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V43)) end), fun (V45) -> (V44(V45)) end end(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V40) -> fun (V41) -> <<V40/binary, V41/binary>> end end, <<""/utf8>>}, fun (V42) -> V42 end, [<<"Idiom brackets allow for easier application of `Applicative`s\x{a}\x{a}Adding two `Maybe Int`s can be written using `<*>` and `pure`\x{a}\x{a}```idris\x{a}addMaybe : Maybe Int -> Maybe Int -> Maybe Int\x{a}addMaybe x y = pure (+) <*> x <*> y\x{a}```\x{a}\x{a}This can be expressed more concisely as:\x{a}\x{a}```idris\x{a}addMaybe : Maybe Int -> Maybe Int -> Maybe Int\x{a}addMaybe x y= [| x + y |]\x{a}```"/utf8>> | []])))) | []]))]])); 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Idris.Doc.Annotations':'un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Name quotes"/utf8>>)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V54) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V55) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V55)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V56) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V56)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V57) -> fun (V58) -> case case (V57 =:= V58) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V54)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V59} -> case V59 of {'Builtin.MkPair', V60, V61} -> [V60 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V61))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V54)); 0 -> V54 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V62} -> case V62 of {'Builtin.MkPair', V63, V64} -> [V63 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V64))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V65) -> fun (V66) -> case case (V65 =:= V66) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V54)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V67} -> case V67 of {'Builtin.MkPair', V68, V69} -> [V68 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V69))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V54)); 0 -> V54 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V70} -> case V70 of {'Builtin.MkPair', V71, V72} -> [V71 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V72))] end end)))))))) end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V75) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V75)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V76) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V76)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V77) -> fun (V78) -> case case (V77 =:= V78) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V74)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V79} -> case V79 of {'Builtin.MkPair', V80, V81} -> [V80 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V81))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V74)); 0 -> V74 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V82} -> case V82 of {'Builtin.MkPair', V83, V84} -> [V83 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V84))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V85) -> fun (V86) -> case case (V85 =:= V86) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V74)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V87} -> case V87 of {'Builtin.MkPair', V88, V89} -> [V88 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V89))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V74)); 0 -> V74 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V90} -> case V90 of {'Builtin.MkPair', V91, V92} -> [V91 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V92))] end end)))))))) end end}, <<""/utf8>>)) | ((begin (V104 = fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V102, V103)) end end end end), fun (V105) -> fun (V106) -> ((((V104('erased'))('erased'))(V105))(V106)) end end end(fun (V99) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V99)) end))([(begin (V97 = fun (V96) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V96)) end), fun (V98) -> (V97(V98)) end end(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V93) -> fun (V94) -> <<V93/binary, V94/binary>> end end, <<""/utf8>>}, fun (V95) -> V95 end, [<<"Name quotes convert a raw name into a representation of a name.\x{a}This allows elaborator scripts to refer to names the user provides.\x{a}\x{a}```idris\x{a}import Language.Reflection\x{a}%language ElabReflection\x{a}\x{a}nameOfMaybe : Name\x{a}nameOfMaybe = `{Maybe}\x{a}```\x{a}\x{a}Names can be qualified, however no disambiguation of names occurs when\x{a}quoting them, so if you need a disambiguated name consider using\x{a}`Language.Reflection.getType`."/utf8>> | []])))) | []]))]])); 2 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Idris.Doc.Annotations':'un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Term quotes"/utf8>>)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V107) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V108) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V108)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V109) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V109)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V110) -> fun (V111) -> case case (V110 =:= V111) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V107)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V112} -> case V112 of {'Builtin.MkPair', V113, V114} -> [V113 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V114))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V107)); 0 -> V107 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V115} -> case V115 of {'Builtin.MkPair', V116, V117} -> [V116 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V117))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V118) -> fun (V119) -> case case (V118 =:= V119) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V107)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V120} -> case V120 of {'Builtin.MkPair', V121, V122} -> [V121 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V122))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V107)); 0 -> V107 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V123} -> case V123 of {'Builtin.MkPair', V124, V125} -> [V124 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V125))] end end)))))))) end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V128) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V128)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V129) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V129)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V130) -> fun (V131) -> case case (V130 =:= V131) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V127)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V132} -> case V132 of {'Builtin.MkPair', V133, V134} -> [V133 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V134))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V127)); 0 -> V127 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V135} -> case V135 of {'Builtin.MkPair', V136, V137} -> [V136 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V137))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V138) -> fun (V139) -> case case (V138 =:= V139) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V127)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V140} -> case V140 of {'Builtin.MkPair', V141, V142} -> [V141 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V142))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V127)); 0 -> V127 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V143} -> case V143 of {'Builtin.MkPair', V144, V145} -> [V144 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V145))] end end)))))))) end end}, <<""/utf8>>)) | ((begin (V157 = fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V155, V156)) end end end end), fun (V158) -> fun (V159) -> ((((V157('erased'))('erased'))(V158))(V159)) end end end(fun (V152) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V152)) end))([(begin (V150 = fun (V149) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V149)) end), fun (V151) -> (V150(V151)) end end(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V146) -> fun (V147) -> <<V146/binary, V147/binary>> end end, <<""/utf8>>}, fun (V148) -> V148 end, [<<"These allow an expression to be interpreted as a syntax tree rather than\x{a}an actual expression, so it can be processed by an elaborator script\x{a}for compile time codegen or meta-programming.\x{a}\x{a}```idris\x{a}import Language.Reflection\x{a}%language ElabReflection\x{a}\x{a}helloWorld : TTImp\x{a}helloWorld = `(putStrLn \x{22}hello world\x{22})\x{a}```"/utf8>> | []])))) | []]))]])); 3 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Idris.Doc.Annotations':'un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Declaration quotes"/utf8>>)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V160) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V161) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V161)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V162) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V162)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V163) -> fun (V164) -> case case (V163 =:= V164) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V160)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V165} -> case V165 of {'Builtin.MkPair', V166, V167} -> [V166 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V167))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V160)); 0 -> V160 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V168} -> case V168 of {'Builtin.MkPair', V169, V170} -> [V169 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V170))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V171) -> fun (V172) -> case case (V171 =:= V172) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V160)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V173} -> case V173 of {'Builtin.MkPair', V174, V175} -> [V174 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V175))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V160)); 0 -> V160 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V176} -> case V176 of {'Builtin.MkPair', V177, V178} -> [V177 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V178))] end end)))))))) end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V181) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V181)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V182) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V182)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V183) -> fun (V184) -> case case (V183 =:= V184) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V180)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V185} -> case V185 of {'Builtin.MkPair', V186, V187} -> [V186 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V187))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V180)); 0 -> V180 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V188} -> case V188 of {'Builtin.MkPair', V189, V190} -> [V189 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V190))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V191) -> fun (V192) -> case case (V191 =:= V192) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V180)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V193} -> case V193 of {'Builtin.MkPair', V194, V195} -> [V194 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V195))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V180)); 0 -> V180 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V196} -> case V196 of {'Builtin.MkPair', V197, V198} -> [V197 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V198))] end end)))))))) end end}, <<""/utf8>>)) | ((begin (V210 = fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V208, V209)) end end end end), fun (V211) -> fun (V212) -> ((((V210('erased'))('erased'))(V211))(V212)) end end end(fun (V205) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V205)) end))([(begin (V203 = fun (V202) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V202)) end), fun (V204) -> (V203(V204)) end end(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V199) -> fun (V200) -> <<V199/binary, V200/binary>> end end, <<""/utf8>>}, fun (V201) -> V201 end, [<<"Declarations quotes allow multiple declaration\x{a}(e.g. type declarations or function definitions) to be quoted\x{a}\x{a}These can then be passed to a elaborator script for compile time\x{a}codegen or meta-programming.\x{a}\x{a}```idris\x{a}import Language.Reflection\x{a}%language ElabReflection\x{a}\x{a}myProgram : List Decl\x{a}myProgram = `[\x{a}    data Bool = False | True\x{a}\x{a}    main : IO ()\x{a}    main = putStrLn \x{22}hello world\x{22}\x{a}]\x{a}```\x{a}\x{a}In this example, `main : IO ()` and\x{a}`main = putStrLn \x{22}hello world\x{22}` are different `Decl`s"/utf8>> | []])))) | []]))]])) end.
