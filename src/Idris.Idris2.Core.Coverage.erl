-module('Idris.Idris2.Core.Coverage').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--eraseApps-8506'/3,
  'case--case block in conflict-6220'/9,
  'nested--12557-8769--in--un--tryClauses'/5,
  'nested--11178-7473--in--un--rep'/7,
  'nested--11728-7982--in--un--notCovering'/5,
  'nested--10367-6938--in--un--noneOf'/8,
  'nested--11728-7981--in--un--noAssert'/4,
  'nested--12421-8642--in--un--mkSubstEnv'/9,
  'nested--11728-7980--in--un--isCase'/4,
  'nested--8528-5069--in--un--findN'/6,
  'nested--11178-7474--in--un--dropRep'/7,
  'nested--12203-8423--in--un--dropPos'/6,
  'nested--8528-5070--in--un--conflictTm'/6,
  'nested--9089-5590--in--un--conflictNF'/9,
  'nested--9089-5589--in--un--conflictArgs'/9,
  'nested--8528-5071--in--un--conflictArgs'/7,
  'nested--12421-8643--in--un--close'/9,
  'nested--8528-5068--in--un--clash'/6,
  'nested--11305-7587--in--un--buildArgsAlt'/14,
  'nested--11305-7586--in--un--buildArgAlt'/14,
  'un--weakenNs'/2,
  'un--tagIsNot'/2,
  'un--replaceDefaults'/6,
  'un--match'/2,
  'un--isEmpty'/5,
  'un--getNonCoveringRefs'/3,
  'un--getMissingAlts'/6,
  'un--getMissing'/5,
  'un--findTag'/3,
  'un--eraseApps'/2,
  'un--conflictMatch'/2,
  'un--conflict'/6,
  'un--clauseMatches'/5,
  'un--checkMatched'/3,
  'un--buildArgs'/8,
  'un--altMatch'/2,
  'un--addNot'/4
]).
'case--eraseApps-8506'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case V3 of {'Core.TT.Ref', V5, V6, V7} -> case V6 of {'Core.TT.Bound'} -> begin (V9 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V8) -> ('un--eraseApps'(V1, V8)) end, V4, []))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--apply'(V5, {'Core.TT.Ref', V5, {'Core.TT.Bound'}, V7}, V13))} end), V15 end(V10)) end end end end; _ -> begin (V21 = begin (V16 = V1), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'get'(V18)) end end(V17))), {'Prelude.Types.Right', V20} end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V96 = begin (V58 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V7, case V25 of {'Core.Context.MkDefs', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> V26 end))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V95 = begin (V86 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [] end, fun () -> fun (V63) -> case V63 of {'Core.Context.Context.MkGlobalDef', V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85} -> V67 end end end, V62))), begin (V88 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V87) -> ('un--eraseApps'(V1, V87)) end, ('nested--12203-8423--in--un--dropPos'(V0, V1, V5, 0, V86, V4)), []))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V94 = fun (V93) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--apply'(V5, {'Core.TT.Ref', V5, V6, V7}, V92))} end), V94 end(V89)) end end end end end), V95 end(V59)) end end end end), V96 end(V22)) end end end end end; _ -> begin (V98 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V97) -> ('un--eraseApps'(V1, V97)) end, V4, []))), fun (V99) -> begin (V100 = (V98(V99))), case V100 of {'Prelude.Types.Left', V101} -> {'Prelude.Types.Left', V101}; {'Prelude.Types.Right', V102} -> (begin (V104 = fun (V103) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--apply'(('Idris.Idris2.Core.TT':'un--getLoc'(V3)), V3, V102))} end), V104 end(V99)) end end end end end end.
'case--case block in conflict-6220'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> case V9 of {'Core.Context.Context.DCon', V11, V12, V13} -> begin (V20 = begin (V14 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V5, [], V4, {'Core.Env.Nil'}, V10))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V19 = ('nested--9089-5590--in--un--conflictNF'(V0, V1, V2, V3, V4, V5, 0, V2, V18))), V19 end(V15)) end end end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V27 = fun (V25) -> case V24 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', 1}; {'Prelude.Types.Just', V26} -> {'Prelude.Types.Right', ('un--conflictMatch'(V0, V26))} end end), V27 end(V21)) end end end end; _ -> fun (V28) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V29) -> {'Prelude.Types.Right', 0} end end.
'nested--12557-8769--in--un--tryClauses'(V0, V1, V2, V3, V4) -> case V3 of [] -> begin (V5 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V2, <<"coverage"/utf8>>, 10, fun () -> <<"Nothing matches"/utf8>> end, {'Core.Env.Nil'}, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V4}} end), V11 end(V6)) end end end end; [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Core.Context.Context.MkClause', V14, V15, V16, V17} -> begin (V18 = ('un--clauseMatches'(V14, V2, V15, V16, V4))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V42 = case V22 of 1 -> begin (V26 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V14, V2, <<"coverage"/utf8>>, 10, fun () -> (begin (V24 = fun (V23) -> V23 end), fun (V25) -> (V24(V25)) end end(<<"Yes"/utf8>>)) end, V15, V16))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V32 end(V27)) end end end end; 0 -> begin (V36 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V14, V2, <<"coverage"/utf8>>, 10, fun () -> (begin (V34 = fun (V33) -> V33 end), fun (V35) -> (V34(V35)) end end(<<"No match"/utf8>>)) end, V15, V16))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V41 = ('nested--12557-8769--in--un--tryClauses'(V0, V1, V2, V13, V4))), V41 end(V37)) end end end end end), V42 end(V19)) end end end end end end(E0, E1)) end.
'nested--11178-7473--in--un--rep'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.Case.CaseTree.DefaultCase', V7} -> begin (V8 = ('Idris.Idris2.Core.Case.Util':'un--getCons'(V5, V0, V3, V2))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V22 = fun (V13) -> {'Prelude.Types.Right', ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> ('Idris.Idris2.Core.Case.Util':'un--mkAlt'(V0, V4, V7, V14)) end))(V12))} end), V22 end(V9)) end end end end; _ -> fun (V23) -> {'Prelude.Types.Right', [V6 | []]} end end.
'nested--11728-7982--in--un--notCovering'(V0, V1, V2, V3, V4) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V3 of {'Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} -> V5 end))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V69 = case V41 of {'Prelude.Types.Just', V42} -> case V42 of {'Core.Context.Context.MkGlobalDef', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} -> fun (V65) -> case V53 of {'Core.TT.MkTotality', V66, V67} -> case V67 of {'Core.TT.IsCovering'} -> {'Prelude.Types.Right', 0}; _ -> {'Prelude.Types.Right', 1} end end end end; _ -> fun (V68) -> {'Prelude.Types.Right', 0} end end), V69 end(V38)) end end end end.
'nested--10367-6938--in--un--noneOf'(V0, V1, V2, V3, V4, V5, V6, V7) -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V8, V9)) end end, 0}, fun (V10) -> ('un--altMatch'(V7, V10)) end, V6)) of 1 -> 0; 0 -> 1 end.
'nested--11728-7981--in--un--noAssert'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of 1 -> {'Prelude.Types.Nothing'}; 0 -> {'Prelude.Types.Just', V4} end end.
'nested--12421-8642--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V5 of [] -> case V8 of {'Core.Env.Nil'} -> {'Core.TT.SubstEnv.Nil'} end; [E0 | E1] -> (fun (V9, V10) -> case V8 of {'Core.Env.::', V11, V12} -> {'Core.TT.SubstEnv.::', {'Core.TT.Ref', V6, {'Core.TT.Bound'}, {'Core.Name.MN', <<"cov"/utf8>>, V7}}, ('nested--12421-8642--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V10, V6, begin (V13 = (V7 + 1)), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end, V12))} end end(E0, E1)) end.
'nested--11728-7980--in--un--isCase'(V0, V1, V2, V3) -> case V3 of {'Core.Name.NS', V4, V5} -> ('nested--11728-7980--in--un--isCase'(V0, V1, V2, V5)); {'Core.Name.CaseBlock', V6, V7} -> 1; _ -> 0 end.
'nested--8528-5069--in--un--findN'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.TT.Local', V6, V7, V8} -> case (V4 =:= V8) of 'false' -> 0; _ -> 1 end; _ -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V5)) of {'Builtin.MkPair', V9, V10} -> case V9 of {'Core.TT.Ref', V11, V12, V13} -> case V12 of {'Core.TT.DataCon', V14, V15} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V16, V17)) end end, 0}, fun (V18) -> ('nested--8528-5069--in--un--findN'(V0, V1, V2, V3, V4, V18)) end, V10)); _ -> 0 end; _ -> 0 end; _ -> 0 end end.
'nested--11178-7474--in--un--dropRep'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> []; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Core.Case.CaseTree.ConCase', V9, V10, V11, V12} -> [V7 | ('nested--11178-7474--in--un--dropRep'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V13) -> case ('Idris.Idris2.Core.Case.Util':'un--tagIs'(V10, V13)) of 1 -> 0; 0 -> 1 end end, V8))))]; _ -> [V7 | ('nested--11178-7474--in--un--dropRep'(V0, V1, V2, V3, V4, V5, V8))] end end(E0, E1)) end.
'nested--12203-8423--in--un--dropPos'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> []; [E0 | E1] -> (fun (V6, V7) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V19)) end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V23, V24, V25, V26)) end end end end end end end, fun (V27) -> fun (V28) -> V28 end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V31, V32, V33)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> case (V34 =:= V35) of 'false' -> 0; _ -> 1 end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V36, V37)) end end}, V3, V4)) of 1 -> [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | ('nested--12203-8423--in--un--dropPos'(V0, V1, V2, (V3 + 1), V4, V7))]; 0 -> [V6 | ('nested--12203-8423--in--un--dropPos'(V0, V1, V2, (V3 + 1), V4, V7))] end end(E0, E1)) end.
'nested--8528-5070--in--un--conflictTm'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Core.TT.Local', V6, V7, V8} -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V5)) of {'Builtin.MkPair', V9, V10} -> case V9 of {'Core.TT.Ref', V11, V12, V13} -> case V12 of {'Core.TT.DataCon', V14, V15} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V16, V17)) end end, 0}, fun (V18) -> ('nested--8528-5069--in--un--findN'(V0, V1, V2, V3, V8, V18)) end, V10)); _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> case V5 of {'Core.TT.Local', V19, V20, V21} -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V4)) of {'Builtin.MkPair', V22, V23} -> case V22 of {'Core.TT.Ref', V24, V25, V26} -> case V25 of {'Core.TT.DataCon', V27, V28} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V29, V30)) end end, 0}, fun (V31) -> ('nested--8528-5069--in--un--findN'(V0, V1, V2, V3, V21, V31)) end, V23)); _ -> 0 end; _ -> 0 end; _ -> 0 end; _ -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V4)) of {'Builtin.MkPair', V32, V33} -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V5)) of {'Builtin.MkPair', V34, V35} -> case ('nested--8528-5068--in--un--clash'(V0, V1, V2, V3, V32, V34)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V36, V37)) end end, 0}, fun (V38) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V39) -> fun (V40) -> ('nested--8528-5070--in--un--conflictTm'(V0, V1, V2, V3, V39, V40)) end end, V38)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V33, V35)))) end end end end end.
'nested--9089-5590--in--un--conflictNF'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.Value.NBind', V9, V10, V11, V12} -> begin (V13 = {'Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), V6}), begin (V14 = ((V12(V4))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Ref', V9, {'Core.TT.Bound'}, V13}))))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = ('nested--9089-5590--in--un--conflictNF'(V0, V1, V2, V3, V4, V5, begin (V19 = (V6 + 1)), case ((V19 band 9223372036854775808) =/= 0) of 'true' -> (V19 bor -9223372036854775808); _ -> (V19 band 9223372036854775807) end end, V7, V18))), V20 end(V15)) end end end end end; {'Core.Value.NApp', V21, V22, V23} -> case V22 of {'Core.Value.NRef', V24, V25} -> case V24 of {'Core.TT.Bound'} -> case V23 of [] -> begin (V27 = fun (V26) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V26)) end), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V39 = begin (V32 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V5, V0, V31, V3, V7))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V38 = fun (V37) -> {'Prelude.Types.Right', {'Prelude.Types.Just', [{'Builtin.MkPair', V25, V36} | []]}} end), V38 end(V33)) end end end end), V39 end(V28)) end end end end; _ -> case V7 of {'Core.Value.NDCon', V40, V41, V42, V43, V44} -> case V8 of {'Core.Value.NDCon', V45, V46, V47, V48, V49} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V42, V47)) of 1 -> ('nested--9089-5589--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ((begin (V55 = fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V53, V54)) end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end(fun (V50) -> ('Idris.Idris2.Builtin':'un--snd'(V50)) end))(V44)), ((begin (V63 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V61, V62)) end end end end), fun (V64) -> fun (V65) -> ((((V63('erased'))('erased'))(V64))(V65)) end end end(fun (V58) -> ('Idris.Idris2.Builtin':'un--snd'(V58)) end))(V49)))); 0 -> fun (V66) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V67) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; {'Core.Value.NTCon', V68, V69, V70, V71, V72} -> case V8 of {'Core.Value.NTCon', V73, V74, V75, V76, V77} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V69, V74)) of 1 -> ('nested--9089-5589--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ((begin (V83 = fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V81, V82)) end end end end), fun (V84) -> fun (V85) -> ((((V83('erased'))('erased'))(V84))(V85)) end end end(fun (V78) -> ('Idris.Idris2.Builtin':'un--snd'(V78)) end))(V72)), ((begin (V91 = fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V89, V90)) end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end(fun (V86) -> ('Idris.Idris2.Builtin':'un--snd'(V86)) end))(V77)))); 0 -> fun (V94) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V95) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; {'Core.Value.NPrimVal', V96, V97} -> fun (V98) -> case V8 of {'Core.Value.NPrimVal', V99, V100} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V97, V100)) of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}}; 0 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; _ -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; _ -> fun (V101) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end end; _ -> case V7 of {'Core.Value.NDCon', V102, V103, V104, V105, V106} -> case V8 of {'Core.Value.NDCon', V107, V108, V109, V110, V111} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V104, V109)) of 1 -> ('nested--9089-5589--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ((begin (V117 = fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V115, V116)) end end end end), fun (V118) -> fun (V119) -> ((((V117('erased'))('erased'))(V118))(V119)) end end end(fun (V112) -> ('Idris.Idris2.Builtin':'un--snd'(V112)) end))(V106)), ((begin (V125 = fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V123, V124)) end end end end), fun (V126) -> fun (V127) -> ((((V125('erased'))('erased'))(V126))(V127)) end end end(fun (V120) -> ('Idris.Idris2.Builtin':'un--snd'(V120)) end))(V111)))); 0 -> fun (V128) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V129) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; {'Core.Value.NTCon', V130, V131, V132, V133, V134} -> case V8 of {'Core.Value.NTCon', V135, V136, V137, V138, V139} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V131, V136)) of 1 -> ('nested--9089-5589--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ((begin (V145 = fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V143, V144)) end end end end), fun (V146) -> fun (V147) -> ((((V145('erased'))('erased'))(V146))(V147)) end end end(fun (V140) -> ('Idris.Idris2.Builtin':'un--snd'(V140)) end))(V134)), ((begin (V153 = fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V151, V152)) end end end end), fun (V154) -> fun (V155) -> ((((V153('erased'))('erased'))(V154))(V155)) end end end(fun (V148) -> ('Idris.Idris2.Builtin':'un--snd'(V148)) end))(V139)))); 0 -> fun (V156) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V157) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; {'Core.Value.NPrimVal', V158, V159} -> fun (V160) -> case V8 of {'Core.Value.NPrimVal', V161, V162} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V159, V162)) of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}}; 0 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; _ -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; _ -> fun (V163) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end end; _ -> case V7 of {'Core.Value.NDCon', V164, V165, V166, V167, V168} -> case V8 of {'Core.Value.NDCon', V169, V170, V171, V172, V173} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V166, V171)) of 1 -> ('nested--9089-5589--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ((begin (V179 = fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V177, V178)) end end end end), fun (V180) -> fun (V181) -> ((((V179('erased'))('erased'))(V180))(V181)) end end end(fun (V174) -> ('Idris.Idris2.Builtin':'un--snd'(V174)) end))(V168)), ((begin (V187 = fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V185, V186)) end end end end), fun (V188) -> fun (V189) -> ((((V187('erased'))('erased'))(V188))(V189)) end end end(fun (V182) -> ('Idris.Idris2.Builtin':'un--snd'(V182)) end))(V173)))); 0 -> fun (V190) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V191) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; {'Core.Value.NTCon', V192, V193, V194, V195, V196} -> case V8 of {'Core.Value.NTCon', V197, V198, V199, V200, V201} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V193, V198)) of 1 -> ('nested--9089-5589--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ((begin (V207 = fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V205, V206)) end end end end), fun (V208) -> fun (V209) -> ((((V207('erased'))('erased'))(V208))(V209)) end end end(fun (V202) -> ('Idris.Idris2.Builtin':'un--snd'(V202)) end))(V196)), ((begin (V215 = fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V213, V214)) end end end end), fun (V216) -> fun (V217) -> ((((V215('erased'))('erased'))(V216))(V217)) end end end(fun (V210) -> ('Idris.Idris2.Builtin':'un--snd'(V210)) end))(V201)))); 0 -> fun (V218) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V219) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; {'Core.Value.NPrimVal', V220, V221} -> fun (V222) -> case V8 of {'Core.Value.NPrimVal', V223, V224} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V221, V224)) of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}}; 0 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; _ -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; _ -> fun (V225) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end end; _ -> case V7 of {'Core.Value.NDCon', V226, V227, V228, V229, V230} -> case V8 of {'Core.Value.NDCon', V231, V232, V233, V234, V235} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V228, V233)) of 1 -> ('nested--9089-5589--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ((begin (V241 = fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V239, V240)) end end end end), fun (V242) -> fun (V243) -> ((((V241('erased'))('erased'))(V242))(V243)) end end end(fun (V236) -> ('Idris.Idris2.Builtin':'un--snd'(V236)) end))(V230)), ((begin (V249 = fun (V245) -> fun (V246) -> fun (V247) -> fun (V248) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V247, V248)) end end end end), fun (V250) -> fun (V251) -> ((((V249('erased'))('erased'))(V250))(V251)) end end end(fun (V244) -> ('Idris.Idris2.Builtin':'un--snd'(V244)) end))(V235)))); 0 -> fun (V252) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V253) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; {'Core.Value.NTCon', V254, V255, V256, V257, V258} -> case V8 of {'Core.Value.NTCon', V259, V260, V261, V262, V263} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V255, V260)) of 1 -> ('nested--9089-5589--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ((begin (V269 = fun (V265) -> fun (V266) -> fun (V267) -> fun (V268) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V267, V268)) end end end end), fun (V270) -> fun (V271) -> ((((V269('erased'))('erased'))(V270))(V271)) end end end(fun (V264) -> ('Idris.Idris2.Builtin':'un--snd'(V264)) end))(V258)), ((begin (V277 = fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V275, V276)) end end end end), fun (V278) -> fun (V279) -> ((((V277('erased'))('erased'))(V278))(V279)) end end end(fun (V272) -> ('Idris.Idris2.Builtin':'un--snd'(V272)) end))(V263)))); 0 -> fun (V280) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V281) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; {'Core.Value.NPrimVal', V282, V283} -> fun (V284) -> case V8 of {'Core.Value.NPrimVal', V285, V286} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V283, V286)) of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}}; 0 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; _ -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; _ -> fun (V287) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end end.
'nested--9089-5589--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> fun (V9) -> case V8 of [] -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end; [E0 | E1] -> (fun (V10, V11) -> case V8 of [E2 | E3] -> (fun (V12, V13) -> begin (V14 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V5, V0, V4, V10))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V41 = begin (V19 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V5, [], V4, V12))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V40 = begin (V24 = ('nested--9089-5590--in--un--conflictNF'(V0, V1, V2, V3, V4, V5, V6, V18, V23))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V39 = case V28 of {'Prelude.Types.Just', V29} -> begin (V30 = ('nested--9089-5589--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, V11, V13))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V37 = fun (V35) -> case V34 of {'Prelude.Types.Just', V36} -> {'Prelude.Types.Right', {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V29, V36))}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V37 end(V31)) end end end end; {'Prelude.Types.Nothing'} -> fun (V38) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V39 end(V25)) end end end end), V40 end(V20)) end end end end), V41 end(V15)) end end end end end(E2, E3)); _ -> fun (V42) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end end(E0, E1)); _ -> fun (V43) -> {'Prelude.Types.Right', {'Prelude.Types.Just', []}} end end.
'nested--8528-5071--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> 0; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Builtin.MkPair', V9, V10} -> case case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V9)) of 1 -> ('nested--8528-5070--in--un--conflictTm'(V0, V1, V2, V3, V5, V10)); 0 -> 0 end of 1 -> 1; 0 -> ('nested--8528-5071--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V8)) end end end(E0, E1)) end.
'nested--12421-8643--in--un--close'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.TT.SubstEnv':'un--substs'(('nested--12421-8642--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V5, V6, 0, V7)), V8)).
'nested--8528-5068--in--un--clash'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Core.TT.Ref', V6, V7, V8} -> case V7 of {'Core.TT.DataCon', V9, V10} -> case V5 of {'Core.TT.Ref', V11, V12, V13} -> case V12 of {'Core.TT.DataCon', V14, V15} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V9, V14)); _ -> case V5 of {'Core.TT.PrimVal', V16, V17} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))); {'Core.TT.TType', V18, V19} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))); _ -> 0 end end; _ -> case V5 of {'Core.TT.PrimVal', V20, V21} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))); {'Core.TT.TType', V22, V23} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))); _ -> 0 end end; {'Core.TT.TyCon', V24, V25} -> case V5 of {'Core.TT.Ref', V26, V27, V28} -> case V27 of {'Core.TT.TyCon', V29, V30} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V24, V29)); _ -> case V5 of {'Core.TT.PrimVal', V31, V32} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))); {'Core.TT.TType', V33, V34} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))); _ -> 0 end end; _ -> case V5 of {'Core.TT.PrimVal', V35, V36} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))); {'Core.TT.TType', V37, V38} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))); _ -> 0 end end; _ -> case V5 of {'Core.TT.PrimVal', V39, V40} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))); {'Core.TT.TType', V41, V42} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))); _ -> 0 end end; {'Core.TT.PrimVal', V43, V44} -> case V5 of {'Core.TT.PrimVal', V45, V46} -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V44, V46)); {'Core.TT.Ref', V47, V48, V49} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V48)))); {'Core.TT.TType', V50, V51} -> 1; _ -> 0 end; {'Core.TT.TType', V52, V53} -> case V5 of {'Core.TT.Ref', V54, V55, V56} -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V55)))); {'Core.TT.PrimVal', V57, V58} -> 1; _ -> 0 end; _ -> 0 end.
'nested--11305-7587--in--un--buildArgsAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [] -> fun (V14) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V15, V16) -> case V15 of {'Core.Case.CaseTree.ConCase', V17, V18, V19, V20} -> begin (V21 = ('nested--11305-7586--in--un--buildArgAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V15))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V33 = begin (V26 = ('nested--11305-7587--in--un--buildArgsAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('un--addNot'(V3, V0, V18, V12)), V16))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V25, V30))} end), V32 end(V27)) end end end end), V33 end(V22)) end end end end; _ -> begin (V34 = ('nested--11305-7586--in--un--buildArgAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V15))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V46 = begin (V39 = ('nested--11305-7587--in--un--buildArgsAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V45 = fun (V44) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V38, V43))} end), V45 end(V40)) end end end end), V46 end(V35)) end end end end end end(E0, E1)) end.
'nested--11305-7586--in--un--buildArgAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Core.Case.CaseTree.ConCase', V14, V15, V16, V17} -> begin (V18 = ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V16))), begin (V20 = {'Core.TT.Ref', V10, {'Core.TT.DataCon', V15, begin (V19 = V18), V19 end}, V14}), begin (V37 = ((begin (V34 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V32, V33)) end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V21) -> ('Idris.Idris2.Core.TT':'un--substName'(V4, ('Idris.Idris2.Core.TT':'un--apply'(V10, V20, ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> {'Core.TT.Ref', V10, {'Core.TT.Bound'}, V22} end))(V16)))), V21)) end))(V6))), ('un--buildArgs'(V11, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, V0)), V10, V9, ('un--weakenNs'(V18, [{'Builtin.MkPair', V3, V15} | V8])), ('un--weakenNs'(V18, V12)), V37, V17)) end end end; {'Core.Case.CaseTree.DelayCase', V38, V39, V40} -> begin (V41 = ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V38 | [V39 | []]]))), begin (V50 = ((begin (V47 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V45, V46)) end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V42) -> ('Idris.Idris2.Core.TT':'un--substName'(V4, {'Core.TT.TDelay', V10, 2, {'Core.TT.Ref', V10, {'Core.TT.Bound'}, V38}, {'Core.TT.Ref', V10, {'Core.TT.Bound'}, V39}}, V42)) end))(V6))), ('un--buildArgs'(V11, [V38 | [V39 | V0]], V10, V9, ('un--weakenNs'(V41, V8)), ('un--weakenNs'(V41, V12)), V50, V40)) end end; {'Core.Case.CaseTree.ConstCase', V51, V52} -> begin (V61 = ((begin (V58 = fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V56, V57)) end end end end), fun (V59) -> fun (V60) -> ((((V58('erased'))('erased'))(V59))(V60)) end end end(fun (V53) -> ('Idris.Idris2.Core.TT':'un--substName'(V4, {'Core.TT.PrimVal', V10, V51}, V53)) end))(V6))), ('un--buildArgs'(V11, V0, V10, V9, V8, V12, V61, V52)) end; {'Core.Case.CaseTree.DefaultCase', V62} -> ('un--buildArgs'(V11, V0, V10, V9, V8, V12, V6, V62)) end.
'un--weakenNs'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Builtin.MkPair', V4, V5} -> [{'Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Var'(V0, V4)), V5} | ('un--weakenNs'(V0, V3))] end end(E0, E1)) end.
'un--tagIsNot'(V0, V1) -> case V1 of {'Core.Case.CaseTree.ConCase', V2, V3, V4, V5} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V21, V22, V23, V24)) end end end end end end end, fun (V25) -> fun (V26) -> V26 end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V29, V30, V31)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V34, V35)) end end}, V3, V0)) of 1 -> 0; 0 -> 1 end; {'Core.Case.CaseTree.ConstCase', V36, V37} -> 1; {'Core.Case.CaseTree.DelayCase', V38, V39, V40} -> 1; {'Core.Case.CaseTree.DefaultCase', V41} -> 0 end.
'un--replaceDefaults'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Core.Value.NPrimVal', V6, V7} -> fun (V8) -> {'Prelude.Types.Right', V5} end; {'Core.Value.NType', V9, V10} -> fun (V11) -> {'Prelude.Types.Right', V5} end; _ -> begin (V13 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V12) -> ('nested--11178-7473--in--un--rep'(V1, V5, V4, V3, V2, V0, V12)) end, V5, []))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V22 = fun (V18) -> {'Prelude.Types.Right', ('nested--11178-7474--in--un--dropRep'(V1, V5, V4, V3, V2, V0, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V19, V20)) end end, []}, fun (V21) -> V21 end, V17))))} end), V22 end(V14)) end end end end end.
'un--match'(V0, V1) -> case V0 of {'Core.TT.Local', V2, V3, V4} -> 1; {'Core.TT.Ref', V5, V6, V7} -> case V6 of {'Core.TT.Bound'} -> 1; _ -> case V1 of {'Core.TT.Ref', V8, V9, V10} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V10)); _ -> case V1 of {'Core.TT.Erased', V11, V12} -> case V12 of {'Core.TT.Dotted', V13} -> ('un--match'(V0, V13)); _ -> case V0 of {'Core.TT.Erased', V14, V15} -> 1; _ -> case V1 of {'Core.TT.Erased', V16, V17} -> 1; _ -> case V0 of {'Core.TT.TType', V18, V19} -> case V1 of {'Core.TT.TType', V20, V21} -> 1; _ -> 0 end; _ -> 0 end end end end; _ -> case V0 of {'Core.TT.Erased', V22, V23} -> 1; _ -> case V1 of {'Core.TT.Erased', V24, V25} -> 1; _ -> case V0 of {'Core.TT.TType', V26, V27} -> case V1 of {'Core.TT.TType', V28, V29} -> 1; _ -> 0 end; _ -> 0 end end end end end end; {'Core.TT.App', V30, V31, V32} -> case V1 of {'Core.TT.App', V33, V34, V35} -> case ('un--match'(V31, V34)) of 1 -> ('un--match'(V32, V35)); 0 -> 0 end; _ -> case V1 of {'Core.TT.Erased', V36, V37} -> case V37 of {'Core.TT.Dotted', V38} -> ('un--match'(V0, V38)); _ -> case V0 of {'Core.TT.Erased', V39, V40} -> 1; _ -> case V1 of {'Core.TT.Erased', V41, V42} -> 1; _ -> case V0 of {'Core.TT.TType', V43, V44} -> case V1 of {'Core.TT.TType', V45, V46} -> 1; _ -> 0 end; _ -> 0 end end end end; _ -> case V0 of {'Core.TT.Erased', V47, V48} -> 1; _ -> case V1 of {'Core.TT.Erased', V49, V50} -> 1; _ -> case V0 of {'Core.TT.TType', V51, V52} -> case V1 of {'Core.TT.TType', V53, V54} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.As', V55, V56, V57, V58} -> case V1 of {'Core.TT.As', V59, V60, V61, V62} -> ('un--match'(V58, V62)); _ -> ('un--match'(V58, V1)) end; {'Core.TT.TDelayed', V63, V64, V65} -> case V1 of {'Core.TT.TDelayed', V66, V67, V68} -> ('un--match'(V65, V68)); _ -> case V1 of {'Core.TT.Erased', V69, V70} -> case V70 of {'Core.TT.Dotted', V71} -> ('un--match'(V0, V71)); _ -> case V0 of {'Core.TT.Erased', V72, V73} -> 1; _ -> case V1 of {'Core.TT.Erased', V74, V75} -> 1; _ -> case V0 of {'Core.TT.TType', V76, V77} -> case V1 of {'Core.TT.TType', V78, V79} -> 1; _ -> 0 end; _ -> 0 end end end end; _ -> case V0 of {'Core.TT.Erased', V80, V81} -> 1; _ -> case V1 of {'Core.TT.Erased', V82, V83} -> 1; _ -> case V0 of {'Core.TT.TType', V84, V85} -> case V1 of {'Core.TT.TType', V86, V87} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.TDelay', V88, V89, V90, V91} -> case V1 of {'Core.TT.TDelay', V92, V93, V94, V95} -> ('un--match'(V91, V95)); _ -> case V1 of {'Core.TT.Erased', V96, V97} -> case V97 of {'Core.TT.Dotted', V98} -> ('un--match'(V0, V98)); _ -> case V0 of {'Core.TT.Erased', V99, V100} -> 1; _ -> case V1 of {'Core.TT.Erased', V101, V102} -> 1; _ -> case V0 of {'Core.TT.TType', V103, V104} -> case V1 of {'Core.TT.TType', V105, V106} -> 1; _ -> 0 end; _ -> 0 end end end end; _ -> case V0 of {'Core.TT.Erased', V107, V108} -> 1; _ -> case V1 of {'Core.TT.Erased', V109, V110} -> 1; _ -> case V0 of {'Core.TT.TType', V111, V112} -> case V1 of {'Core.TT.TType', V113, V114} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.TForce', V115, V116, V117} -> case V1 of {'Core.TT.TForce', V118, V119, V120} -> ('un--match'(V117, V120)); _ -> case V1 of {'Core.TT.Erased', V121, V122} -> case V122 of {'Core.TT.Dotted', V123} -> ('un--match'(V0, V123)); _ -> case V0 of {'Core.TT.Erased', V124, V125} -> 1; _ -> case V1 of {'Core.TT.Erased', V126, V127} -> 1; _ -> case V0 of {'Core.TT.TType', V128, V129} -> case V1 of {'Core.TT.TType', V130, V131} -> 1; _ -> 0 end; _ -> 0 end end end end; _ -> case V0 of {'Core.TT.Erased', V132, V133} -> 1; _ -> case V1 of {'Core.TT.Erased', V134, V135} -> 1; _ -> case V0 of {'Core.TT.TType', V136, V137} -> case V1 of {'Core.TT.TType', V138, V139} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.PrimVal', V140, V141} -> case V1 of {'Core.TT.PrimVal', V142, V143} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V141, V143)); _ -> case V1 of {'Core.TT.Erased', V144, V145} -> case V145 of {'Core.TT.Dotted', V146} -> ('un--match'(V0, V146)); _ -> case V0 of {'Core.TT.Erased', V147, V148} -> 1; _ -> case V1 of {'Core.TT.Erased', V149, V150} -> 1; _ -> case V0 of {'Core.TT.TType', V151, V152} -> case V1 of {'Core.TT.TType', V153, V154} -> 1; _ -> 0 end; _ -> 0 end end end end; _ -> case V0 of {'Core.TT.Erased', V155, V156} -> 1; _ -> case V1 of {'Core.TT.Erased', V157, V158} -> 1; _ -> case V0 of {'Core.TT.TType', V159, V160} -> case V1 of {'Core.TT.TType', V161, V162} -> 1; _ -> 0 end; _ -> 0 end end end end end; {'Core.TT.Erased', V163, V164} -> case V164 of {'Core.TT.Dotted', V165} -> ('un--match'(V165, V1)); _ -> case V1 of {'Core.TT.Erased', V166, V167} -> case V167 of {'Core.TT.Dotted', V168} -> ('un--match'(V0, V168)); _ -> case V0 of {'Core.TT.Erased', V169, V170} -> 1; _ -> case V1 of {'Core.TT.Erased', V171, V172} -> 1; _ -> case V0 of {'Core.TT.TType', V173, V174} -> case V1 of {'Core.TT.TType', V175, V176} -> 1; _ -> 0 end; _ -> 0 end end end end; _ -> case V0 of {'Core.TT.Erased', V177, V178} -> 1; _ -> case V1 of {'Core.TT.Erased', V179, V180} -> 1; _ -> case V0 of {'Core.TT.TType', V181, V182} -> case V1 of {'Core.TT.TType', V183, V184} -> 1; _ -> 0 end; _ -> 0 end end end end end; _ -> case V1 of {'Core.TT.Erased', V185, V186} -> case V186 of {'Core.TT.Dotted', V187} -> ('un--match'(V0, V187)); _ -> case V0 of {'Core.TT.Erased', V188, V189} -> 1; _ -> case V1 of {'Core.TT.Erased', V190, V191} -> 1; _ -> case V0 of {'Core.TT.TType', V192, V193} -> case V1 of {'Core.TT.TType', V194, V195} -> 1; _ -> 0 end; _ -> 0 end end end end; _ -> case V0 of {'Core.TT.Erased', V196, V197} -> 1; _ -> case V1 of {'Core.TT.Erased', V198, V199} -> 1; _ -> case V0 of {'Core.TT.TType', V200, V201} -> case V1 of {'Core.TT.TType', V202, V203} -> 1; _ -> 0 end; _ -> 0 end end end end end.
'un--isEmpty'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Value.NTCon', V5, V6, V7, V8, V9} -> begin (V42 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V6, case V2 of {'Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V10 end))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V62 = case V46 of {'Prelude.Types.Just', V47} -> case V47 of {'Core.Context.Context.TCon', V48, V49, V50, V51, V52, V53, V54, V55} -> case case V52 of {'Core.Context.Context.MkTypeFlags', V56, V57} -> V57 end of 1 -> fun (V58) -> {'Prelude.Types.Right', 0} end; 0 -> ('Idris.Idris2.Core.Core':'un--allM'(fun (V59) -> ('un--conflict'(V0, V1, V2, V3, {'Core.Value.NTCon', V5, V6, V7, V8, V9}, V59)) end, V54)) end; _ -> fun (V60) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V61) -> {'Prelude.Types.Right', 0} end end), V62 end(V43)) end end end end; _ -> fun (V63) -> {'Prelude.Types.Right', 0} end end.
'un--getNonCoveringRefs'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V86 = begin (V45 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V85 = case V49 of {'Prelude.Types.Just', V50} -> begin (V52 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V51) -> ('nested--11728-7981--in--un--noAssert'(V2, V1, V0, V51)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(('Idris.Idris2.Core.Context.Context':'un--refersTo'(V50))))))), begin (V59 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V53) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V54, V55)) end end, fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V56, V57, V58)) end end end}, V53)) end, V52, []))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V84 = begin (V65 = ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V64) -> ('nested--11728-7980--in--un--isCase'(V2, V1, V0, V64)) end, V63))), begin (V67 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V66) -> ('un--getNonCoveringRefs'(V0, V1, V66)) end, V65, []))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V83 = begin (V73 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V72) -> ('nested--11728-7982--in--un--notCovering'(V2, V1, V0, V12, V72)) end, V52))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V82 = fun (V78) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V77, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V79, V80)) end end, []}, fun (V81) -> V81 end, V71))))} end), V82 end(V74)) end end end end), V83 end(V68)) end end end end end), V84 end(V60)) end end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V2)) end), V85 end(V46)) end end end end), V86 end(V9)) end end end end.
'un--getMissingAlts'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Core.Value.NPrimVal', V6, V7} -> case V7 of {'Core.TT.PrT', V8} -> case V8 of 13 -> fun (V9) -> case ('Idris.Idris2.Data.List':'un--isNil'(V5)) of 1 -> {'Prelude.Types.Right', [{'Core.Case.CaseTree.DefaultCase', {'Core.Case.CaseTree.Unmatched', <<"Coverage check"/utf8>>}} | []]}; 0 -> {'Prelude.Types.Right', []} end end; _ -> begin (V10 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, 50, fun () -> <<<<"Looking for missing alts at type "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V7))/binary>> end))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V26 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V15, V16)) end end, 0}, fun (V17) -> ('Idris.Idris2.Core.Case.CaseTree':'un--isDefault'(V17)) end, V5)) of 1 -> begin (V18 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, 20, fun () -> <<"Found default"/utf8>> end))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', []} end), V24 end(V19)) end end end end; 0 -> fun (V25) -> {'Prelude.Types.Right', [{'Core.Case.CaseTree.DefaultCase', {'Core.Case.CaseTree.Unmatched', <<"Coverage check"/utf8>>}} | []]} end end), V26 end(V11)) end end end end end; _ -> begin (V27 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, 50, fun () -> <<<<"Looking for missing alts at type "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V7))/binary>> end))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V43 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V32, V33)) end end, 0}, fun (V34) -> ('Idris.Idris2.Core.Case.CaseTree':'un--isDefault'(V34)) end, V5)) of 1 -> begin (V35 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, 20, fun () -> <<"Found default"/utf8>> end))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V41 = fun (V40) -> {'Prelude.Types.Right', []} end), V41 end(V36)) end end end end; 0 -> fun (V42) -> {'Prelude.Types.Right', [{'Core.Case.CaseTree.DefaultCase', {'Core.Case.CaseTree.Unmatched', <<"Coverage check"/utf8>>}} | []]} end end), V43 end(V28)) end end end end end; {'Core.Value.NType', V44, V45} -> begin (V46 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, 50, fun () -> <<"Looking for missing alts at type Type"/utf8>> end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V62 = case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V51, V52)) end end, 0}, fun (V53) -> ('Idris.Idris2.Core.Case.CaseTree':'un--isDefault'(V53)) end, V5)) of 1 -> begin (V54 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, 20, fun () -> <<"Found default"/utf8>> end))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V60 = fun (V59) -> {'Prelude.Types.Right', []} end), V60 end(V55)) end end end end; 0 -> fun (V61) -> {'Prelude.Types.Right', [{'Core.Case.CaseTree.DefaultCase', {'Core.Case.CaseTree.Unmatched', <<"Coverage check"/utf8>>}} | []]} end end), V62 end(V47)) end end end end; _ -> begin (V63 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, 50, fun () -> <<<<"Getting constructors for: "/utf8>>/binary, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V1, V4))/binary>> end))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V90 = begin (V68 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V1, V0, <<"coverage.missing"/utf8>>, 20, fun () -> <<"Getting constructors for"/utf8>> end, ('Idris.Idris2.Core.Env':'un--mkEnv'(V2, V1)), V4))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V89 = begin (V73 = ('Idris.Idris2.Core.Case.Util':'un--getCons'(V0, V1, V3, V4))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V88 = fun (V78) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V79) -> ('nested--10367-6938--in--un--noneOf'(V1, V5, V4, V3, V2, V0, V5, V79)) end, ((begin (V85 = fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V83, V84)) end end end end), fun (V86) -> fun (V87) -> ((((V85('erased'))('erased'))(V86))(V87)) end end end(fun (V80) -> ('Idris.Idris2.Core.Case.Util':'un--mkAlt'(V1, V2, {'Core.Case.CaseTree.Unmatched', <<"Coverage check"/utf8>>}, V80)) end))(V77))))} end), V88 end(V74)) end end end end), V89 end(V69)) end end end end), V90 end(V64)) end end end end end.
'un--getMissing'(V0, V1, V2, V3, V4) -> begin (V10 = begin (V5 = V1), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V121 = begin (V23 = ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> {'Core.TT.Ref', V2, {'Core.TT.Bound'}, V15} end))(V0))), begin (V24 = ('un--buildArgs'(V1, V0, V2, V14, [], [], V23, V4))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V120 = begin (V32 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V29, V30)) end end, []}, fun (V31) -> V31 end, V28))), begin (V105 = case ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V32)) of 1 -> fun (V33) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"coverage.missing"/utf8>>, 20, begin (V60 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V34, V35, [])) end end, V32, fun (V36) -> begin (V41 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V39, V40)) end end}, V36))), ((begin (V57 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V54, V55, V56)) end end end end end), fun (V58) -> fun (V59) -> ((((V57('erased'))('erased'))(V58))(V59)) end end end((begin (V49 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> {'Prelude.Types.Right', (V45(V48))} end end end end end), fun (V50) -> fun (V51) -> ((((V49('erased'))('erased'))(V50))(V51)) end end end(fun (V42) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V42)) end))))(V41)) end end))), ((begin (V102 = fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V99, V100, V101)) end end end end end), fun (V103) -> fun (V104) -> ((((V102('erased'))('erased'))(V103))(V104)) end end end((begin (V94 = fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> {'Prelude.Types.Right', (V90(V93))} end end end end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end(fun (V61) -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--join'(<<"\x{a}"/utf8>>, {'Prelude.Interfaces.MkFoldable', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V69, V70, V71)) end end end end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V73)) end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V77, V78, V79, V80)) end end end end end end end, fun (V81) -> fun (V82) -> V82 end end, fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V85, V86, V87)) end end end end end}, V61)) end))))(V60)) end)) end), fun (V106) -> begin (V107 = (V105(V106))), case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> (begin (V119 = fun (V110) -> {'Prelude.Types.Right', ((begin (V116 = fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V114, V115)) end end end end), fun (V117) -> fun (V118) -> ((((V116('erased'))('erased'))(V117))(V118)) end end end(fun (V111) -> ('Idris.Idris2.Core.TT':'un--apply'(V2, {'Core.TT.Ref', V2, {'Core.TT.Func'}, V3}, V111)) end))(V28))} end), V119 end(V106)) end end end end end), V120 end(V25)) end end end end end), V121 end(V11)) end end end end.
'un--findTag'(V0, V1, V2) -> case V2 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Builtin.MkPair', V5, V6} -> case ('Idris.Idris2.Core.TT':'un--sameVar'(V0, V5)) of 1 -> {'Prelude.Types.Just', V6}; 0 -> ('un--findTag'(V0, V1, V4)) end end end(E0, E1)) end.
'un--eraseApps'(V0, V1) -> ('case--eraseApps-8506'(V1, V0, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V1)))).
'un--conflictMatch'(V0, V1) -> case V1 of [] -> 0; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Builtin.MkPair', V4, V5} -> case ('nested--8528-5071--in--un--conflictArgs'(V0, V4, V5, V3, V4, V5, V3)) of 1 -> 1; 0 -> ('un--conflictMatch'(V0, V3)) end end end(E0, E1)) end.
'un--conflict'(V0, V1, V2, V3, V4, V5) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V2 of {'Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} -> V6 end))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V90 = case V42 of {'Prelude.Types.Just', V43} -> begin (V44 = {'Prelude.Types.Just', V43}), ('case--case block in conflict-6220'(V0, V5, V4, V3, V2, V1, V43, V44, {'Builtin.MkPair', case V43 of {'Core.Context.Context.MkGlobalDef', V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} -> V62 end, case V43 of {'Core.Context.Context.MkGlobalDef', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88} -> V69 end})) end; {'Prelude.Types.Nothing'} -> fun (V89) -> {'Prelude.Types.Right', 0} end end), V90 end(V39)) end end end end.
'un--clauseMatches'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--eraseApps'(V1, ('nested--12421-8643--in--un--close'(V0, V4, V3, V2, V1, V0, ('Idris.Idris2.Core.TT':'un--getLoc'(V3)), V2, V3))))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V32 = begin (V10 = V9), begin (V15 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V13, V14)) end end}, V10))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V31 = begin (V24 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V22, V23)) end end}, V4))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', ('un--match'(V19, V28))} end), V30 end(V25)) end end end end), V31 end(V16)) end end end end end), V32 end(V6)) end end end end.
'un--checkMatched'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"coverage"/utf8>>, 5, fun () -> <<"Checking coverage for"/utf8>> end, V2))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V63 = begin (V19 = begin (V12 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V10, V11)) end end}, V2))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, <<"coverage"/utf8>>, 10, fun (V17) -> {'Prelude.Types.Right', <<<<"(raw term: "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V16))/binary, <<")"/utf8>>/binary>>/binary>>} end))), V18 end(V13)) end end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V62 = begin (V24 = ('un--eraseApps'(V0, V2))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V61 = begin (V29 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"coverage"/utf8>>, 5, fun () -> <<"Erased to"/utf8>> end, V28))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V60 = begin (V54 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, <<"coverage"/utf8>>, 5, begin (V39 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V34) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Clause'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Clause'(V37, V38)) end end}, V34)) end, V1, []))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V53 = fun (V44) -> {'Prelude.Types.Right', <<<<"Against clauses:\x{a}"/utf8>>/binary, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(((begin (V50 = fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V48, V49)) end end end end), fun (V51) -> fun (V52) -> ((((V50('erased'))('erased'))(V51))(V52)) end end end(fun (V45) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Clause'(V45)))) end))(V43))))))))/binary>>} end), V53 end(V40)) end end end end))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V59 = ('nested--12557-8769--in--un--tryClauses'(V2, V1, V0, V1, V28))), V59 end(V55)) end end end end), V60 end(V30)) end end end end), V61 end(V25)) end end end end), V62 end(V20)) end end end end), V63 end(V4)) end end end end.
'un--buildArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.Case.CaseTree.Case', V8, V9, V10, V11} -> begin (V12 = ('Idris.Idris2.Core.Env':'un--mkEnv'(V2, V1))), begin (V13 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V3, V12, V10))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V37 = begin (V18 = ('un--replaceDefaults'(V0, V1, V2, V3, V17, V11))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V36 = begin (V23 = ('un--getMissingAlts'(V0, V1, V2, V3, V17, V22))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V35 = begin (V28 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V22, V27))), begin (V31 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V28 end, fun () -> fun (V29) -> ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V30) -> ('Idris.Idris2.Core.Case.Util':'un--tagIs'(V29, V30)) end, V28)) end end, ('un--findTag'(V9, V1, V4))))), begin (V34 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V31 end, fun () -> fun (V32) -> ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V33) -> ('un--tagIsNot'(V32, V33)) end, V31)) end end, ('un--findTag'(V9, V1, V5))))), ('nested--11305-7587--in--un--buildArgsAlt'(V1, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V0, V5, V34)) end end end), V35 end(V24)) end end end end), V36 end(V19)) end end end end), V37 end(V14)) end end end end end; {'Core.Case.CaseTree.STerm', V38, V39} -> fun (V40) -> {'Prelude.Types.Right', []} end; {'Core.Case.CaseTree.Unmatched', V41} -> fun (V42) -> {'Prelude.Types.Right', [V6 | []]} end; {'Core.Case.CaseTree.Impossible'} -> fun (V43) -> {'Prelude.Types.Right', []} end end.
'un--altMatch'(V0, V1) -> case V1 of {'Core.Case.CaseTree.DefaultCase', V2} -> 1; _ -> case V0 of {'Core.Case.CaseTree.DelayCase', V3, V4, V5} -> case V1 of {'Core.Case.CaseTree.DelayCase', V6, V7, V8} -> 1; _ -> 0 end; {'Core.Case.CaseTree.ConCase', V9, V10, V11, V12} -> case V1 of {'Core.Case.CaseTree.ConCase', V13, V14, V15, V16} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V10, V14)); _ -> 0 end; {'Core.Case.CaseTree.ConstCase', V17, V18} -> case V1 of {'Core.Case.CaseTree.ConstCase', V19, V20} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V17, V19)); _ -> 0 end; _ -> 0 end end.
'un--addNot'(V0, V1, V2, V3) -> case V3 of [] -> [{'Builtin.MkPair', V0, [V2 | []]} | []]; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> case ('Idris.Idris2.Core.TT':'un--sameVar'(V0, V6)) of 1 -> [{'Builtin.MkPair', V6, [V2 | V7]} | V5]; 0 -> [{'Builtin.MkPair', V6, V7} | ('un--addNot'(V0, V1, V2, V5))] end end end(E0, E1)) end.
