-module('Idris.Idris2.Libraries.Text.Parser.Core').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--doParse-5277'/7,
  'case--doParse-4952'/9,
  'case--doParse-4834'/10,
  'case--case block in case block in doParse-4586'/13,
  'case--doParse-4464'/10,
  'case--doParse-4087'/7,
  'case--doParse-3986'/7,
  'dn--un--map_Functor_(((Grammar $state) $tok) $c)'/3,
  'dn--un--__Impl_Functor_(((Grammar $state) $tok) $c)'/5,
  'un--withWarning'/3,
  'un--try'/1,
  'un--terminal'/2,
  'un--seq'/4,
  'un--pure'/1,
  'un--position'/0,
  'un--peek'/0,
  'un--parseWith'/4,
  'un--parse'/3,
  'un--nextIs'/2,
  'un--mustWorkBecause'/4,
  'un--mustWork'/2,
  'un--mergeWith'/2,
  'un--mapToken'/2,
  'un--join'/3,
  'un--fatalLoc'/2,
  'un--fatalError'/1,
  'un--failLoc'/2,
  'un--fail'/1,
  'un--eof'/0,
  'un--doParse'/6,
  'un--commit'/0,
  'un--bounds'/1,
  'un--act'/1,
  'un--ParsingWarnings'/0,
  'un-->>='/4,
  'un-->>'/4,
  'un--<||>'/4,
  'un--<|>'/4,
  'un--<*>'/4,
  'un--<*'/4,
  'un--*>'/4
]).
'case--doParse-5277'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Libraries.Text.Parser.Core.Failure', V7, V8, V9} -> {'Libraries.Text.Parser.Core.Failure', V7, V8, V9}; {'Libraries.Text.Parser.Core.Res', V10, V11, V12, V13, V14} -> {'Libraries.Text.Parser.Core.Res', V10, V11, V12, ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> V13 end))(V13)), V14} end.
'case--doParse-4952'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Libraries.Text.Parser.Core.Failure', V9, V10, V11} -> {'Libraries.Text.Parser.Core.Failure', V9, V10, V11}; {'Libraries.Text.Parser.Core.Res', V12, V13, V14, V15, V16} -> ('un--mergeWith'(V15, ('un--doParse'(V0, V12, V13, V14, ((V3())(case V15 of {'Libraries.Text.Bounded.MkBounded', V17, V18, V19} -> V17 end)), V16)))) end.
'case--doParse-4834'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Libraries.Text.Parser.Core.Failure', V10, V11, V12} -> {'Libraries.Text.Parser.Core.Failure', V10, V11, V12}; {'Libraries.Text.Parser.Core.Res', V13, V14, V15, V16, V17} -> ('un--mergeWith'(V16, ('un--doParse'(V0, V13, V14, V15, (V4(case V16 of {'Libraries.Text.Bounded.MkBounded', V18, V19, V20} -> V18 end)), V17)))) end.
'case--case block in case block in doParse-4586'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Libraries.Text.Parser.Core.Failure', V13, V14, V15} -> case case V13 of 1 -> 1; 0 -> V14 end of 1 -> {'Libraries.Text.Parser.Core.Failure', V13, V14, V15}; 0 -> {'Libraries.Text.Parser.Core.Failure', V6, 0, ('Idris.Idris2.Data.List1':'un--++'(V8, V15))} end; {'Libraries.Text.Parser.Core.Res', V16, V17, V18, V19, V20} -> {'Libraries.Text.Parser.Core.Res', V16, V17, V6, V19, V20} end.
'case--doParse-4464'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Libraries.Text.Parser.Core.Failure', V10, V11, V12} -> case case V10 of 1 -> 1; 0 -> V11 end of 1 -> {'Libraries.Text.Parser.Core.Failure', V7, V11, V12}; 0 -> ('case--case block in case block in doParse-4586'(V0, V2, V3, V4, V5, V6, V7, V8, V12, V11, V10, V1, ('un--doParse'(V0, V1, V8, 0, (V3()), V6)))) end; {'Libraries.Text.Parser.Core.Res', V13, V14, V15, V16, V17} -> {'Libraries.Text.Parser.Core.Res', V13, V14, V7, V16, V17} end.
'case--doParse-4087'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Libraries.Text.Parser.Core.Failure', V7, V8, V9} -> {'Libraries.Text.Parser.Core.Failure', V7, 1, V9}; _ -> V6 end.
'case--doParse-3986'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Libraries.Text.Parser.Core.Failure', V7, V8, V9} -> {'Libraries.Text.Parser.Core.Failure', V7, 0, V9}; _ -> V6 end.
'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V1, V2) -> case V0 of 0 -> case V2 of {'Libraries.Text.Parser.Core.Empty', V3} -> {'Libraries.Text.Parser.Core.Empty', (V1(V3))}; _ -> case V2 of {'Libraries.Text.Parser.Core.Fail', V4, V5, V6} -> {'Libraries.Text.Parser.Core.Fail', V4, V5, V6}; {'Libraries.Text.Parser.Core.Try', V7} -> {'Libraries.Text.Parser.Core.Try', ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(V1))(V7))}; {'Libraries.Text.Parser.Core.MustWork', V15} -> {'Libraries.Text.Parser.Core.MustWork', ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(V1))(V15))}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.Terminal', V23, V24} -> {'Libraries.Text.Parser.Core.Terminal', V23, fun (V25) -> ((begin (V30 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V28, V29)) end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(V1))((V24(V25)))) end}; _ -> case V2 of {'Libraries.Text.Parser.Core.Alt', V33, V34, V35, V36} -> {'Libraries.Text.Parser.Core.Alt', V33, V34, ((begin (V41 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V33, V39, V40)) end end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end(V1))(V35)), fun () -> ((begin (V48 = fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V34, V46, V47)) end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end(V1))((V36()))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.SeqEat', V51, V52, V53} -> {'Libraries.Text.Parser.Core.SeqEat', V51, V52, fun () -> fun (V54) -> ((begin (V59 = fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V51, V57, V58)) end end end end), fun (V60) -> fun (V61) -> ((((V59('erased'))('erased'))(V60))(V61)) end end end(V1))(((V53())(V54)))) end end}; _ -> case V2 of {'Libraries.Text.Parser.Core.SeqEmpty', V62, V63, V64, V65} -> {'Libraries.Text.Parser.Core.SeqEmpty', V62, V63, V64, fun (V66) -> ((begin (V71 = fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V63, V69, V70)) end end end end), fun (V72) -> fun (V73) -> ((((V71('erased'))('erased'))(V72))(V73)) end end end(V1))((V65(V66)))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.ThenEat', V74, V75, V76} -> {'Libraries.Text.Parser.Core.ThenEat', V74, V75, fun () -> ((begin (V81 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V74, V79, V80)) end end end end), fun (V82) -> fun (V83) -> ((((V81('erased'))('erased'))(V82))(V83)) end end end(V1))((V76()))) end}; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V84, V85, V86, V87} -> {'Libraries.Text.Parser.Core.ThenEmpty', V84, V85, V86, ((begin (V92 = fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V85, V90, V91)) end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end(V1))(V87))}; {'Libraries.Text.Parser.Core.Bounds', V95} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V95}, fun (V96) -> {'Libraries.Text.Parser.Core.Empty', (V1(V96))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V97) -> {'Libraries.Text.Parser.Core.Empty', (V1(V97))} end} end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V98, V99, V100, V101} -> {'Libraries.Text.Parser.Core.ThenEmpty', V98, V99, V100, ((begin (V106 = fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V99, V104, V105)) end end end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(V1))(V101))}; {'Libraries.Text.Parser.Core.Bounds', V109} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V109}, fun (V110) -> {'Libraries.Text.Parser.Core.Empty', (V1(V110))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V111) -> {'Libraries.Text.Parser.Core.Empty', (V1(V111))} end} end end end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.SeqEmpty', V112, V113, V114, V115} -> {'Libraries.Text.Parser.Core.SeqEmpty', V112, V113, V114, fun (V116) -> ((begin (V121 = fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V113, V119, V120)) end end end end), fun (V122) -> fun (V123) -> ((((V121('erased'))('erased'))(V122))(V123)) end end end(V1))((V115(V116)))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.ThenEat', V124, V125, V126} -> {'Libraries.Text.Parser.Core.ThenEat', V124, V125, fun () -> ((begin (V131 = fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V124, V129, V130)) end end end end), fun (V132) -> fun (V133) -> ((((V131('erased'))('erased'))(V132))(V133)) end end end(V1))((V126()))) end}; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V134, V135, V136, V137} -> {'Libraries.Text.Parser.Core.ThenEmpty', V134, V135, V136, ((begin (V142 = fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V135, V140, V141)) end end end end), fun (V143) -> fun (V144) -> ((((V142('erased'))('erased'))(V143))(V144)) end end end(V1))(V137))}; {'Libraries.Text.Parser.Core.Bounds', V145} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V145}, fun (V146) -> {'Libraries.Text.Parser.Core.Empty', (V1(V146))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V147) -> {'Libraries.Text.Parser.Core.Empty', (V1(V147))} end} end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V148, V149, V150, V151} -> {'Libraries.Text.Parser.Core.ThenEmpty', V148, V149, V150, ((begin (V156 = fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V149, V154, V155)) end end end end), fun (V157) -> fun (V158) -> ((((V156('erased'))('erased'))(V157))(V158)) end end end(V1))(V151))}; {'Libraries.Text.Parser.Core.Bounds', V159} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V159}, fun (V160) -> {'Libraries.Text.Parser.Core.Empty', (V1(V160))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V161) -> {'Libraries.Text.Parser.Core.Empty', (V1(V161))} end} end end end end end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.Alt', V162, V163, V164, V165} -> {'Libraries.Text.Parser.Core.Alt', V162, V163, ((begin (V170 = fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V162, V168, V169)) end end end end), fun (V171) -> fun (V172) -> ((((V170('erased'))('erased'))(V171))(V172)) end end end(V1))(V164)), fun () -> ((begin (V177 = fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V163, V175, V176)) end end end end), fun (V178) -> fun (V179) -> ((((V177('erased'))('erased'))(V178))(V179)) end end end(V1))((V165()))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.SeqEat', V180, V181, V182} -> {'Libraries.Text.Parser.Core.SeqEat', V180, V181, fun () -> fun (V183) -> ((begin (V188 = fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V180, V186, V187)) end end end end), fun (V189) -> fun (V190) -> ((((V188('erased'))('erased'))(V189))(V190)) end end end(V1))(((V182())(V183)))) end end}; _ -> case V2 of {'Libraries.Text.Parser.Core.SeqEmpty', V191, V192, V193, V194} -> {'Libraries.Text.Parser.Core.SeqEmpty', V191, V192, V193, fun (V195) -> ((begin (V200 = fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V192, V198, V199)) end end end end), fun (V201) -> fun (V202) -> ((((V200('erased'))('erased'))(V201))(V202)) end end end(V1))((V194(V195)))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.ThenEat', V203, V204, V205} -> {'Libraries.Text.Parser.Core.ThenEat', V203, V204, fun () -> ((begin (V210 = fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V203, V208, V209)) end end end end), fun (V211) -> fun (V212) -> ((((V210('erased'))('erased'))(V211))(V212)) end end end(V1))((V205()))) end}; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V213, V214, V215, V216} -> {'Libraries.Text.Parser.Core.ThenEmpty', V213, V214, V215, ((begin (V221 = fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V214, V219, V220)) end end end end), fun (V222) -> fun (V223) -> ((((V221('erased'))('erased'))(V222))(V223)) end end end(V1))(V216))}; {'Libraries.Text.Parser.Core.Bounds', V224} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V224}, fun (V225) -> {'Libraries.Text.Parser.Core.Empty', (V1(V225))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V226) -> {'Libraries.Text.Parser.Core.Empty', (V1(V226))} end} end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V227, V228, V229, V230} -> {'Libraries.Text.Parser.Core.ThenEmpty', V227, V228, V229, ((begin (V235 = fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V228, V233, V234)) end end end end), fun (V236) -> fun (V237) -> ((((V235('erased'))('erased'))(V236))(V237)) end end end(V1))(V230))}; {'Libraries.Text.Parser.Core.Bounds', V238} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V238}, fun (V239) -> {'Libraries.Text.Parser.Core.Empty', (V1(V239))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V240) -> {'Libraries.Text.Parser.Core.Empty', (V1(V240))} end} end end end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.SeqEmpty', V241, V242, V243, V244} -> {'Libraries.Text.Parser.Core.SeqEmpty', V241, V242, V243, fun (V245) -> ((begin (V250 = fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V242, V248, V249)) end end end end), fun (V251) -> fun (V252) -> ((((V250('erased'))('erased'))(V251))(V252)) end end end(V1))((V244(V245)))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.ThenEat', V253, V254, V255} -> {'Libraries.Text.Parser.Core.ThenEat', V253, V254, fun () -> ((begin (V260 = fun (V256) -> fun (V257) -> fun (V258) -> fun (V259) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V253, V258, V259)) end end end end), fun (V261) -> fun (V262) -> ((((V260('erased'))('erased'))(V261))(V262)) end end end(V1))((V255()))) end}; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V263, V264, V265, V266} -> {'Libraries.Text.Parser.Core.ThenEmpty', V263, V264, V265, ((begin (V271 = fun (V267) -> fun (V268) -> fun (V269) -> fun (V270) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V264, V269, V270)) end end end end), fun (V272) -> fun (V273) -> ((((V271('erased'))('erased'))(V272))(V273)) end end end(V1))(V266))}; {'Libraries.Text.Parser.Core.Bounds', V274} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V274}, fun (V275) -> {'Libraries.Text.Parser.Core.Empty', (V1(V275))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V276) -> {'Libraries.Text.Parser.Core.Empty', (V1(V276))} end} end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V277, V278, V279, V280} -> {'Libraries.Text.Parser.Core.ThenEmpty', V277, V278, V279, ((begin (V285 = fun (V281) -> fun (V282) -> fun (V283) -> fun (V284) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V278, V283, V284)) end end end end), fun (V286) -> fun (V287) -> ((((V285('erased'))('erased'))(V286))(V287)) end end end(V1))(V280))}; {'Libraries.Text.Parser.Core.Bounds', V288} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V288}, fun (V289) -> {'Libraries.Text.Parser.Core.Empty', (V1(V289))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V290) -> {'Libraries.Text.Parser.Core.Empty', (V1(V290))} end} end end end end end end end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.Fail', V291, V292, V293} -> {'Libraries.Text.Parser.Core.Fail', V291, V292, V293}; {'Libraries.Text.Parser.Core.Try', V294} -> {'Libraries.Text.Parser.Core.Try', ((begin (V299 = fun (V295) -> fun (V296) -> fun (V297) -> fun (V298) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V297, V298)) end end end end), fun (V300) -> fun (V301) -> ((((V299('erased'))('erased'))(V300))(V301)) end end end(V1))(V294))}; {'Libraries.Text.Parser.Core.MustWork', V302} -> {'Libraries.Text.Parser.Core.MustWork', ((begin (V307 = fun (V303) -> fun (V304) -> fun (V305) -> fun (V306) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V305, V306)) end end end end), fun (V308) -> fun (V309) -> ((((V307('erased'))('erased'))(V308))(V309)) end end end(V1))(V302))}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.Terminal', V310, V311} -> {'Libraries.Text.Parser.Core.Terminal', V310, fun (V312) -> ((begin (V317 = fun (V313) -> fun (V314) -> fun (V315) -> fun (V316) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V315, V316)) end end end end), fun (V318) -> fun (V319) -> ((((V317('erased'))('erased'))(V318))(V319)) end end end(V1))((V311(V312)))) end}; _ -> case V2 of {'Libraries.Text.Parser.Core.Alt', V320, V321, V322, V323} -> {'Libraries.Text.Parser.Core.Alt', V320, V321, ((begin (V328 = fun (V324) -> fun (V325) -> fun (V326) -> fun (V327) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V320, V326, V327)) end end end end), fun (V329) -> fun (V330) -> ((((V328('erased'))('erased'))(V329))(V330)) end end end(V1))(V322)), fun () -> ((begin (V335 = fun (V331) -> fun (V332) -> fun (V333) -> fun (V334) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V321, V333, V334)) end end end end), fun (V336) -> fun (V337) -> ((((V335('erased'))('erased'))(V336))(V337)) end end end(V1))((V323()))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.SeqEat', V338, V339, V340} -> {'Libraries.Text.Parser.Core.SeqEat', V338, V339, fun () -> fun (V341) -> ((begin (V346 = fun (V342) -> fun (V343) -> fun (V344) -> fun (V345) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V338, V344, V345)) end end end end), fun (V347) -> fun (V348) -> ((((V346('erased'))('erased'))(V347))(V348)) end end end(V1))(((V340())(V341)))) end end}; _ -> case V2 of {'Libraries.Text.Parser.Core.SeqEmpty', V349, V350, V351, V352} -> {'Libraries.Text.Parser.Core.SeqEmpty', V349, V350, V351, fun (V353) -> ((begin (V358 = fun (V354) -> fun (V355) -> fun (V356) -> fun (V357) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V350, V356, V357)) end end end end), fun (V359) -> fun (V360) -> ((((V358('erased'))('erased'))(V359))(V360)) end end end(V1))((V352(V353)))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.ThenEat', V361, V362, V363} -> {'Libraries.Text.Parser.Core.ThenEat', V361, V362, fun () -> ((begin (V368 = fun (V364) -> fun (V365) -> fun (V366) -> fun (V367) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V361, V366, V367)) end end end end), fun (V369) -> fun (V370) -> ((((V368('erased'))('erased'))(V369))(V370)) end end end(V1))((V363()))) end}; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V371, V372, V373, V374} -> {'Libraries.Text.Parser.Core.ThenEmpty', V371, V372, V373, ((begin (V379 = fun (V375) -> fun (V376) -> fun (V377) -> fun (V378) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V372, V377, V378)) end end end end), fun (V380) -> fun (V381) -> ((((V379('erased'))('erased'))(V380))(V381)) end end end(V1))(V374))}; {'Libraries.Text.Parser.Core.Bounds', V382} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V382}, fun (V383) -> {'Libraries.Text.Parser.Core.Empty', (V1(V383))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V384) -> {'Libraries.Text.Parser.Core.Empty', (V1(V384))} end} end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V385, V386, V387, V388} -> {'Libraries.Text.Parser.Core.ThenEmpty', V385, V386, V387, ((begin (V393 = fun (V389) -> fun (V390) -> fun (V391) -> fun (V392) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V386, V391, V392)) end end end end), fun (V394) -> fun (V395) -> ((((V393('erased'))('erased'))(V394))(V395)) end end end(V1))(V388))}; {'Libraries.Text.Parser.Core.Bounds', V396} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V396}, fun (V397) -> {'Libraries.Text.Parser.Core.Empty', (V1(V397))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V398) -> {'Libraries.Text.Parser.Core.Empty', (V1(V398))} end} end end end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.SeqEmpty', V399, V400, V401, V402} -> {'Libraries.Text.Parser.Core.SeqEmpty', V399, V400, V401, fun (V403) -> ((begin (V408 = fun (V404) -> fun (V405) -> fun (V406) -> fun (V407) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V400, V406, V407)) end end end end), fun (V409) -> fun (V410) -> ((((V408('erased'))('erased'))(V409))(V410)) end end end(V1))((V402(V403)))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.ThenEat', V411, V412, V413} -> {'Libraries.Text.Parser.Core.ThenEat', V411, V412, fun () -> ((begin (V418 = fun (V414) -> fun (V415) -> fun (V416) -> fun (V417) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V411, V416, V417)) end end end end), fun (V419) -> fun (V420) -> ((((V418('erased'))('erased'))(V419))(V420)) end end end(V1))((V413()))) end}; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V421, V422, V423, V424} -> {'Libraries.Text.Parser.Core.ThenEmpty', V421, V422, V423, ((begin (V429 = fun (V425) -> fun (V426) -> fun (V427) -> fun (V428) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V422, V427, V428)) end end end end), fun (V430) -> fun (V431) -> ((((V429('erased'))('erased'))(V430))(V431)) end end end(V1))(V424))}; {'Libraries.Text.Parser.Core.Bounds', V432} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V432}, fun (V433) -> {'Libraries.Text.Parser.Core.Empty', (V1(V433))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V434) -> {'Libraries.Text.Parser.Core.Empty', (V1(V434))} end} end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V435, V436, V437, V438} -> {'Libraries.Text.Parser.Core.ThenEmpty', V435, V436, V437, ((begin (V443 = fun (V439) -> fun (V440) -> fun (V441) -> fun (V442) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V436, V441, V442)) end end end end), fun (V444) -> fun (V445) -> ((((V443('erased'))('erased'))(V444))(V445)) end end end(V1))(V438))}; {'Libraries.Text.Parser.Core.Bounds', V446} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V446}, fun (V447) -> {'Libraries.Text.Parser.Core.Empty', (V1(V447))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V448) -> {'Libraries.Text.Parser.Core.Empty', (V1(V448))} end} end end end end end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.Alt', V449, V450, V451, V452} -> {'Libraries.Text.Parser.Core.Alt', V449, V450, ((begin (V457 = fun (V453) -> fun (V454) -> fun (V455) -> fun (V456) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V449, V455, V456)) end end end end), fun (V458) -> fun (V459) -> ((((V457('erased'))('erased'))(V458))(V459)) end end end(V1))(V451)), fun () -> ((begin (V464 = fun (V460) -> fun (V461) -> fun (V462) -> fun (V463) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V450, V462, V463)) end end end end), fun (V465) -> fun (V466) -> ((((V464('erased'))('erased'))(V465))(V466)) end end end(V1))((V452()))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.SeqEat', V467, V468, V469} -> {'Libraries.Text.Parser.Core.SeqEat', V467, V468, fun () -> fun (V470) -> ((begin (V475 = fun (V471) -> fun (V472) -> fun (V473) -> fun (V474) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V467, V473, V474)) end end end end), fun (V476) -> fun (V477) -> ((((V475('erased'))('erased'))(V476))(V477)) end end end(V1))(((V469())(V470)))) end end}; _ -> case V2 of {'Libraries.Text.Parser.Core.SeqEmpty', V478, V479, V480, V481} -> {'Libraries.Text.Parser.Core.SeqEmpty', V478, V479, V480, fun (V482) -> ((begin (V487 = fun (V483) -> fun (V484) -> fun (V485) -> fun (V486) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V479, V485, V486)) end end end end), fun (V488) -> fun (V489) -> ((((V487('erased'))('erased'))(V488))(V489)) end end end(V1))((V481(V482)))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.ThenEat', V490, V491, V492} -> {'Libraries.Text.Parser.Core.ThenEat', V490, V491, fun () -> ((begin (V497 = fun (V493) -> fun (V494) -> fun (V495) -> fun (V496) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V490, V495, V496)) end end end end), fun (V498) -> fun (V499) -> ((((V497('erased'))('erased'))(V498))(V499)) end end end(V1))((V492()))) end}; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V500, V501, V502, V503} -> {'Libraries.Text.Parser.Core.ThenEmpty', V500, V501, V502, ((begin (V508 = fun (V504) -> fun (V505) -> fun (V506) -> fun (V507) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V501, V506, V507)) end end end end), fun (V509) -> fun (V510) -> ((((V508('erased'))('erased'))(V509))(V510)) end end end(V1))(V503))}; {'Libraries.Text.Parser.Core.Bounds', V511} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V511}, fun (V512) -> {'Libraries.Text.Parser.Core.Empty', (V1(V512))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V513) -> {'Libraries.Text.Parser.Core.Empty', (V1(V513))} end} end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V514, V515, V516, V517} -> {'Libraries.Text.Parser.Core.ThenEmpty', V514, V515, V516, ((begin (V522 = fun (V518) -> fun (V519) -> fun (V520) -> fun (V521) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V515, V520, V521)) end end end end), fun (V523) -> fun (V524) -> ((((V522('erased'))('erased'))(V523))(V524)) end end end(V1))(V517))}; {'Libraries.Text.Parser.Core.Bounds', V525} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V525}, fun (V526) -> {'Libraries.Text.Parser.Core.Empty', (V1(V526))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V527) -> {'Libraries.Text.Parser.Core.Empty', (V1(V527))} end} end end end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.SeqEmpty', V528, V529, V530, V531} -> {'Libraries.Text.Parser.Core.SeqEmpty', V528, V529, V530, fun (V532) -> ((begin (V537 = fun (V533) -> fun (V534) -> fun (V535) -> fun (V536) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V529, V535, V536)) end end end end), fun (V538) -> fun (V539) -> ((((V537('erased'))('erased'))(V538))(V539)) end end end(V1))((V531(V532)))) end}; _ -> case V0 of 1 -> case V2 of {'Libraries.Text.Parser.Core.ThenEat', V540, V541, V542} -> {'Libraries.Text.Parser.Core.ThenEat', V540, V541, fun () -> ((begin (V547 = fun (V543) -> fun (V544) -> fun (V545) -> fun (V546) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V540, V545, V546)) end end end end), fun (V548) -> fun (V549) -> ((((V547('erased'))('erased'))(V548))(V549)) end end end(V1))((V542()))) end}; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V550, V551, V552, V553} -> {'Libraries.Text.Parser.Core.ThenEmpty', V550, V551, V552, ((begin (V558 = fun (V554) -> fun (V555) -> fun (V556) -> fun (V557) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V551, V556, V557)) end end end end), fun (V559) -> fun (V560) -> ((((V558('erased'))('erased'))(V559))(V560)) end end end(V1))(V553))}; {'Libraries.Text.Parser.Core.Bounds', V561} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V561}, fun (V562) -> {'Libraries.Text.Parser.Core.Empty', (V1(V562))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V563) -> {'Libraries.Text.Parser.Core.Empty', (V1(V563))} end} end end end; _ -> case V2 of {'Libraries.Text.Parser.Core.ThenEmpty', V564, V565, V566, V567} -> {'Libraries.Text.Parser.Core.ThenEmpty', V564, V565, V566, ((begin (V572 = fun (V568) -> fun (V569) -> fun (V570) -> fun (V571) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V565, V570, V571)) end end end end), fun (V573) -> fun (V574) -> ((((V572('erased'))('erased'))(V573))(V574)) end end end(V1))(V567))}; {'Libraries.Text.Parser.Core.Bounds', V575} -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V575}, fun (V576) -> {'Libraries.Text.Parser.Core.Empty', (V1(V576))} end}; _ -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V577) -> {'Libraries.Text.Parser.Core.Empty', (V1(V577))} end} end end end end end end end end end.
'dn--un--__Impl_Functor_(((Grammar $state) $tok) $c)'(V0, V1, V2, V3, V4) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V3, V4)).
'un--withWarning'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.Bounds', V2}, fun (V3) -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Libraries.Text.Parser.Core.Warning', {'Prelude.Types.Just', case V3 of {'Libraries.Text.Bounded.MkBounded', V4, V5, V6} -> V6 end}, V1}, {'Libraries.Text.Parser.Core.Empty', case V3 of {'Libraries.Text.Bounded.MkBounded', V7, V8, V9} -> V7 end}} end}.
'un--try'(V0) -> {'Libraries.Text.Parser.Core.Try', V0}.
'un--terminal'(V0, V1) -> {'Libraries.Text.Parser.Core.Terminal', V0, V1}.
'un--seq'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, V1, V2, V3}.
'un--pure'(V0) -> {'Libraries.Text.Parser.Core.Empty', V0}.
'un--position'() -> {'Libraries.Text.Parser.Core.Position'}.
'un--peek'() -> {'Libraries.Text.Parser.Core.NextIs', <<"Unrecognised token"/utf8>>, fun (V0) -> 1 end}.
'un--parseWith'(V0, V1, V2, V3) -> case ('un--doParse'(case V0 of {'Prelude.Interfaces.MkMonoid', V4, V5} -> V4 end, case V0 of {'Prelude.Interfaces.MkMonoid', V6, V7} -> V7 end, [], 0, V2, V3)) of {'Libraries.Text.Parser.Core.Failure', V8, V9, V10} -> {'Prelude.Types.Left', V10}; {'Libraries.Text.Parser.Core.Res', V11, V12, V13, V14, V15} -> {'Prelude.Types.Right', {'Builtin.MkPair', V11, {'Builtin.MkPair', V12, {'Builtin.MkPair', case V14 of {'Libraries.Text.Bounded.MkBounded', V16, V17, V18} -> V16 end, V15}}}} end.
'un--parse'(V0, V1, V2) -> case ('un--doParse'(fun (V3) -> fun (V4) -> {'Builtin.MkUnit'} end end, {'Builtin.MkUnit'}, [], 0, V1, V2)) of {'Libraries.Text.Parser.Core.Failure', V5, V6, V7} -> {'Prelude.Types.Left', V7}; {'Libraries.Text.Parser.Core.Res', V8, V9, V10, V11, V12} -> {'Prelude.Types.Right', {'Builtin.MkPair', V9, {'Builtin.MkPair', case V11 of {'Libraries.Text.Bounded.MkBounded', V13, V14, V15} -> V13 end, V12}}} end.
'un--nextIs'(V0, V1) -> {'Libraries.Text.Parser.Core.NextIs', V0, V1}.
'un--mustWorkBecause'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.Alt', V0, V0, V3, fun () -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Just', V1}, 1, V2} end}.
'un--mustWork'(V0, V1) -> {'Libraries.Text.Parser.Core.MustWork', V1}.
'un--mergeWith'(V0, V1) -> case V1 of {'Libraries.Text.Parser.Core.Res', V2, V3, V4, V5, V6} -> {'Libraries.Text.Parser.Core.Res', V2, V3, V4, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V0, V5)), V6}; _ -> V1 end.
'un--mapToken'(V0, V1) -> case V1 of {'Libraries.Text.Parser.Core.Empty', V2} -> {'Libraries.Text.Parser.Core.Empty', V2}; {'Libraries.Text.Parser.Core.Terminal', V3, V4} -> {'Libraries.Text.Parser.Core.Terminal', V3, fun (V5) -> (V4((V0(V5)))) end}; {'Libraries.Text.Parser.Core.NextIs', V6, V7} -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Libraries.Text.Parser.Core.NextIs', V6, fun (V8) -> (V7((V0(V8)))) end}, fun (V9) -> {'Libraries.Text.Parser.Core.Empty', (V0(V9))} end}; {'Libraries.Text.Parser.Core.EOF'} -> {'Libraries.Text.Parser.Core.EOF'}; {'Libraries.Text.Parser.Core.Warning', V10, V11} -> {'Libraries.Text.Parser.Core.Warning', V10, V11}; {'Libraries.Text.Parser.Core.Fail', V12, V13, V14} -> {'Libraries.Text.Parser.Core.Fail', V12, V13, V14}; {'Libraries.Text.Parser.Core.Try', V15} -> {'Libraries.Text.Parser.Core.Try', ('un--mapToken'(V0, V15))}; {'Libraries.Text.Parser.Core.MustWork', V16} -> {'Libraries.Text.Parser.Core.MustWork', ('un--mapToken'(V0, V16))}; {'Libraries.Text.Parser.Core.Commit'} -> {'Libraries.Text.Parser.Core.Commit'}; {'Libraries.Text.Parser.Core.SeqEat', V17, V18, V19} -> {'Libraries.Text.Parser.Core.SeqEat', V17, ('un--mapToken'(V0, V18)), fun () -> fun (V20) -> ('un--mapToken'(V0, ((V19())(V20)))) end end}; {'Libraries.Text.Parser.Core.SeqEmpty', V21, V22, V23, V24} -> {'Libraries.Text.Parser.Core.SeqEmpty', V21, V22, ('un--mapToken'(V0, V23)), fun (V25) -> ('un--mapToken'(V0, (V24(V25)))) end}; {'Libraries.Text.Parser.Core.ThenEat', V26, V27, V28} -> {'Libraries.Text.Parser.Core.ThenEat', V26, ('un--mapToken'(V0, V27)), fun () -> ('un--mapToken'(V0, (V28()))) end}; {'Libraries.Text.Parser.Core.ThenEmpty', V29, V30, V31, V32} -> {'Libraries.Text.Parser.Core.ThenEmpty', V29, V30, ('un--mapToken'(V0, V31)), ('un--mapToken'(V0, V32))}; {'Libraries.Text.Parser.Core.Alt', V33, V34, V35, V36} -> {'Libraries.Text.Parser.Core.Alt', V33, V34, ('un--mapToken'(V0, V35)), fun () -> ('un--mapToken'(V0, (V36()))) end}; {'Libraries.Text.Parser.Core.Bounds', V37} -> {'Libraries.Text.Parser.Core.Bounds', ('un--mapToken'(V0, V37))}; {'Libraries.Text.Parser.Core.Position'} -> {'Libraries.Text.Parser.Core.Position'}; {'Libraries.Text.Parser.Core.Act', V38} -> {'Libraries.Text.Parser.Core.Act', V38} end.
'un--join'(V0, V1, V2) -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, V1, V2, fun (V3) -> V3 end}; 1 -> {'Libraries.Text.Parser.Core.SeqEat', V1, V2, fun () -> fun (V4) -> V4 end end} end.
'un--fatalLoc'(V0, V1) -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Just', V0}, 1, V1}.
'un--fatalError'(V0) -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 1, V0}.
'un--failLoc'(V0, V1) -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Just', V0}, 0, V1}.
'un--fail'(V0) -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, V0}.
'un--eof'() -> {'Libraries.Text.Parser.Core.EOF'}.
'un--doParse'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Libraries.Text.Parser.Core.Empty', V6} -> {'Libraries.Text.Parser.Core.Res', V1, V2, V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'(V6)), V5}; {'Libraries.Text.Parser.Core.Warning', V7, V8} -> {'Libraries.Text.Parser.Core.Res', V1, [{'Builtin.MkPair', V7, V8} | V2], V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'({'Builtin.MkUnit'})), V5}; {'Libraries.Text.Parser.Core.Fail', V9, V10, V11} -> {'Libraries.Text.Parser.Core.Failure', V3, V10, {'Data.List1.:::', {'Libraries.Text.Parser.Core.Error', V11, ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V9, fun () -> ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V12) -> case V12 of {'Libraries.Text.Bounded.MkBounded', V13, V14, V15} -> V15 end end))(('Idris.Idris2.Data.List':'un--head\x{27}'(V5)))) end))}, []}}; {'Libraries.Text.Parser.Core.Try', V23} -> ('case--doParse-3986'(V0, V1, V23, V5, V3, V2, ('un--doParse'(V0, V1, V2, V3, V23, V5)))); {'Libraries.Text.Parser.Core.Commit'} -> {'Libraries.Text.Parser.Core.Res', V1, V2, 1, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'({'Builtin.MkUnit'})), V5}; {'Libraries.Text.Parser.Core.MustWork', V24} -> ('case--doParse-4087'(V0, V1, V24, V5, V3, V2, ('un--doParse'(V0, V1, V2, V3, V24, V5)))); {'Libraries.Text.Parser.Core.Terminal', V25, V26} -> case V5 of [] -> {'Libraries.Text.Parser.Core.Failure', V3, 0, {'Data.List1.:::', {'Libraries.Text.Parser.Core.Error', (begin (V28 = fun (V27) -> V27 end), fun (V29) -> (V28(V29)) end end(<<"End of input"/utf8>>)), {'Prelude.Types.Nothing'}}, []}}; [E0 | E1] -> (fun (V30, V31) -> case (V26(case V30 of {'Libraries.Text.Bounded.MkBounded', V32, V33, V34} -> V32 end)) of {'Prelude.Types.Nothing'} -> {'Libraries.Text.Parser.Core.Failure', V3, 0, {'Data.List1.:::', {'Libraries.Text.Parser.Core.Error', V25, {'Prelude.Types.Just', case V30 of {'Libraries.Text.Bounded.MkBounded', V35, V36, V37} -> V37 end}}, []}}; {'Prelude.Types.Just', V38} -> {'Libraries.Text.Parser.Core.Res', V1, V2, V3, ((begin (V44 = fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V42, V43)) end end end end), fun (V45) -> fun (V46) -> ((((V44('erased'))('erased'))(V45))(V46)) end end end(fun (V39) -> V38 end))(V30)), V31} end end(E0, E1)) end; {'Libraries.Text.Parser.Core.EOF'} -> case V5 of [] -> {'Libraries.Text.Parser.Core.Res', V1, V2, V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'({'Builtin.MkUnit'})), []}; [E2 | E3] -> (fun (V47, V48) -> {'Libraries.Text.Parser.Core.Failure', V3, 0, {'Data.List1.:::', {'Libraries.Text.Parser.Core.Error', (begin (V50 = fun (V49) -> V49 end), fun (V51) -> (V50(V51)) end end(<<"Expected end of input"/utf8>>)), {'Prelude.Types.Just', case V47 of {'Libraries.Text.Bounded.MkBounded', V52, V53, V54} -> V54 end}}, []}} end(E2, E3)) end; {'Libraries.Text.Parser.Core.NextIs', V55, V56} -> case V5 of [] -> {'Libraries.Text.Parser.Core.Failure', V3, 0, {'Data.List1.:::', {'Libraries.Text.Parser.Core.Error', (begin (V58 = fun (V57) -> V57 end), fun (V59) -> (V58(V59)) end end(<<"End of input"/utf8>>)), {'Prelude.Types.Nothing'}}, []}}; [E4 | E5] -> (fun (V60, V61) -> case (V56(case V60 of {'Libraries.Text.Bounded.MkBounded', V62, V63, V64} -> V62 end)) of 1 -> {'Libraries.Text.Parser.Core.Res', V1, V2, V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--removeIrrelevance'(V60)), [V60 | V61]}; 0 -> {'Libraries.Text.Parser.Core.Failure', V3, 0, {'Data.List1.:::', {'Libraries.Text.Parser.Core.Error', V55, {'Prelude.Types.Just', case V60 of {'Libraries.Text.Bounded.MkBounded', V65, V66, V67} -> V67 end}}, []}} end end(E4, E5)) end; {'Libraries.Text.Parser.Core.Alt', V68, V69, V70, V71} -> ('case--doParse-4464'(V0, V1, V69, V71, V68, V70, V5, V3, V2, ('un--doParse'(V0, V1, V2, 0, V70, V5)))); {'Libraries.Text.Parser.Core.SeqEmpty', V72, V73, V74, V75} -> ('case--doParse-4834'(V0, V72, V73, V1, V75, V74, V5, V3, V2, ('un--doParse'(V0, V1, V2, V3, V74, V5)))); {'Libraries.Text.Parser.Core.SeqEat', V76, V77, V78} -> ('case--doParse-4952'(V0, V76, V1, V78, V77, V5, V3, V2, ('un--doParse'(V0, V1, V2, V3, V77, V5)))); {'Libraries.Text.Parser.Core.ThenEmpty', V79, V80, V81, V82} -> case ('un--doParse'(V0, V1, V2, V3, V81, V5)) of {'Libraries.Text.Parser.Core.Failure', V83, V84, V85} -> {'Libraries.Text.Parser.Core.Failure', V83, V84, V85}; {'Libraries.Text.Parser.Core.Res', V86, V87, V88, V89, V90} -> ('un--mergeWith'(V89, ('un--doParse'(V0, V86, V87, V88, V82, V90)))) end; {'Libraries.Text.Parser.Core.ThenEat', V91, V92, V93} -> case ('un--doParse'(V0, V1, V2, V3, V92, V5)) of {'Libraries.Text.Parser.Core.Failure', V94, V95, V96} -> {'Libraries.Text.Parser.Core.Failure', V94, V95, V96}; {'Libraries.Text.Parser.Core.Res', V97, V98, V99, V100, V101} -> ('un--mergeWith'(V100, ('un--doParse'(V0, V97, V98, V99, (V93()), V101)))) end; {'Libraries.Text.Parser.Core.Bounds', V102} -> ('case--doParse-5277'(V0, V1, V102, V5, V3, V2, ('un--doParse'(V0, V1, V2, V3, V102, V5)))); {'Libraries.Text.Parser.Core.Position'} -> case V5 of [] -> {'Libraries.Text.Parser.Core.Failure', V3, 0, {'Data.List1.:::', {'Libraries.Text.Parser.Core.Error', (begin (V104 = fun (V103) -> V103 end), fun (V105) -> (V104(V105)) end end(<<"End of input"/utf8>>)), {'Prelude.Types.Nothing'}}, []}}; [E6 | E7] -> (fun (V106, V107) -> {'Libraries.Text.Parser.Core.Res', V1, V2, V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'(case V106 of {'Libraries.Text.Bounded.MkBounded', V108, V109, V110} -> V110 end)), [V106 | V107]} end(E6, E7)) end; {'Libraries.Text.Parser.Core.Act', V111} -> {'Libraries.Text.Parser.Core.Res', ((begin (V112 = V0), fun (V113) -> fun (V114) -> ((V112(V113))(V114)) end end end(V1))(V111)), V2, V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'({'Builtin.MkUnit'})), V5} end.
'un--commit'() -> {'Libraries.Text.Parser.Core.Commit'}.
'un--bounds'(V0) -> {'Libraries.Text.Parser.Core.Bounds', V0}.
'un--act'(V0) -> {'Libraries.Text.Parser.Core.Act', V0}.
'un--ParsingWarnings'() -> {'Prelude.Basics.List', {'Builtin.Pair', {'Prelude.Types.Maybe', {'Libraries.Text.Bounded.Bounds'}}, {'.String'}}}.
'un-->>='(V0, V1, V2, V3) -> case V0 of 0 -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, V1, V2, V3}; 1 -> {'Libraries.Text.Parser.Core.SeqEat', V1, V2, V3} end.
'un-->>'(V0, V1, V2, V3) -> case V0 of 0 -> {'Libraries.Text.Parser.Core.ThenEmpty', 0, V1, V2, V3}; 1 -> {'Libraries.Text.Parser.Core.ThenEat', V1, V2, V3} end.
'un--<||>'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.Alt', V0, V1, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> {'Prelude.Types.Left', V4} end))(V2)), fun () -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V1, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> {'Prelude.Types.Right', V12} end))((V3()))) end}.
'un--<|>'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.Alt', V0, V1, V2, V3}.
'un--<*>'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, V1, V2, fun (V4) -> ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V1, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(V4))(V3)) end}.
'un--<*'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, V1, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V4) -> fun (V5) -> V4 end end))(V2)), fun (V13) -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V1, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(V13))(V3)) end}.
'un--*>'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, V1, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V4) -> fun (V5) -> V5 end end))(V2)), fun (V13) -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V1, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(V13))(V3)) end}.
