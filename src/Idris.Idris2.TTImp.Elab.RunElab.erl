-module('Idris.Idris2.TTImp.Elab.RunElab').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--11054-13625--in--un--unelabType'/20,
  'nested--10982-12288--in--un--scriptRet'/19,
  'nested--11054-13177--in--un--quotePi'/22,
  'nested--13506-14600--in--un--mkExpected'/15,
  'nested--10835-12098--in--un--getNameType'/3,
  'nested--10982-12287--in--un--failWith'/19,
  'nested--10982-12289--in--un--elabCon'/20,
  'dn--un--reflect_Reflect_NameInfo'/6,
  'un--lookupNameInfo'/2,
  'un--elabScript'/12,
  'un--checkRunElab'/14
]).
'nested--11054-13625--in--un--unelabType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Builtin.MkPair', V20, V21} -> case V21 of {'Builtin.MkPair', V22, V23} -> begin (V24 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'([], V16, {'Core.Env.Nil'}, V23))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V41 = fun (V29) -> {'Prelude.Types.Right', {'Builtin.MkPair', V20, ((begin (V38 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(V36, V37)) end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V30) -> case V30 of {'Core.TT.MkKindedName', V31, V32, V33} -> V33 end end))(V28))}} end), V41 end(V25)) end end end end end end.
'nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V24 = begin (V19 = V16), fun (V20) -> begin (V23 = (begin (V21 = V19), fun (V22) -> ('erlang':'get'(V21)) end end(V20))), {'Prelude.Types.Right', V23} end end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V41 = begin (V35 = (((((begin (V29 = V17), fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ((((((V29(V0))(V30))(V31))(V32))(V33))(V34)) end end end end end end(V10))(V28))(0))(V8))(V18))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V40 = ('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V16, V0, ('Idris.Idris2.Core.Value':'un--withAll'()), V28, V8, V39))), V40 end(V36)) end end end end), V41 end(V25)) end end end end.
'nested--11054-13177--in--un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Core.TT.Explicit'} -> fun (V22) -> {'Prelude.Types.Right', {'Core.TT.Explicit'}} end; {'Core.TT.Implicit'} -> fun (V23) -> {'Prelude.Types.Right', {'Core.TT.Implicit'}} end; {'Core.TT.AutoImplicit'} -> fun (V24) -> {'Prelude.Types.Right', {'Core.TT.AutoImplicit'}} end; {'Core.TT.DefImplicit', V25} -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V20, (begin (V27 = fun (V26) -> V26 end), fun (V28) -> (V27(V28)) end end(<<"Can\x{27}t add default lambda"/utf8>>)))) end.
'nested--13506-14600--in--un--mkExpected'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Prelude.Types.Just', V15} -> begin (V16 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V15))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', V20} end), V22 end(V17)) end end end end; {'Prelude.Types.Nothing'} -> begin (V23 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V13, V11, <<"scriptTy"/utf8>>))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V38 = begin (V28 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V13, V11, V3))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V37 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V13, V11, V3, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V33, V34)) end end, 0, fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V35, V36)) end end, 1})), V4, V27, {'Core.TT.TType', V3, V32}))), V37 end(V29)) end end end end), V38 end(V24)) end end end end end.
'nested--10835-12098--in--un--getNameType'(V0, V1, V2) -> case V2 of {'Core.Context.Context.DCon', V3, V4, V5} -> {'Core.TT.DataCon', V3, V4}; {'Core.Context.Context.TCon', V6, V7, V8, V9, V10, V11, V12, V13} -> {'Core.TT.TyCon', V6, V7}; _ -> {'Core.TT.Func'} end.
'nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V20 = fun (V19) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V17, V19)) end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V32 = begin (V25 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V16, V0, V24, V8, V6))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadRunElab', V0, V10, V8, V29, V18}, V30)) end), V31 end(V26)) end end end end), V32 end(V21)) end end end end.
'nested--10982-12289--in--un--elabCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V18 of <<"Pure"/utf8>> -> case V19 of [E0 | E1] -> (fun (V20, V21) -> case V21 of [E2 | E3] -> (fun (V22, V23) -> case V23 of [] -> begin (V25 = fun (V24) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V17, V24)) end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V30 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V29, V22))), V30 end(V26)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V32 = fun (V31) -> V31 end), fun (V33) -> (V32(V33)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V35 = fun (V34) -> V34 end), fun (V36) -> (V35(V36)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E2, E3)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V38 = fun (V37) -> V37 end), fun (V39) -> (V38(V39)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V41 = fun (V40) -> V40 end), fun (V42) -> (V41(V42)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E0, E1)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V44 = fun (V43) -> V43 end), fun (V45) -> (V44(V45)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V47 = fun (V46) -> V46 end), fun (V48) -> (V47(V48)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"Bind"/utf8>> -> case V19 of [E4 | E5] -> (fun (V49, V50) -> case V50 of [E6 | E7] -> (fun (V51, V52) -> case V52 of [E8 | E9] -> (fun (V53, V54) -> case V54 of [E10 | E11] -> (fun (V55, V56) -> case V56 of [] -> begin (V63 = begin (V57 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V53))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V62 = ('un--elabScript'(V0, V16, V15, V14, V13, V12, V11, V10, V9, V8, V61, V7))), V62 end(V58)) end end end end), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V86 = begin (V68 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V16, V0, V17, V8, V67))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V85 = begin (V73 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V55))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V84 = begin (V78 = ('Idris.Idris2.Core.Normalise.Eval':'un--applyToStack'(V17, ('Idris.Idris2.Core.Value':'un--withAll'()), V16, V0, V8, V77, [{'Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--getLoc'(V72)), ('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--withAll'()), V8, V72))} | []]))), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V83 = ('un--elabScript'(V0, V16, V15, V14, V13, V12, V11, V10, V9, V8, V82, V7))), V83 end(V79)) end end end end), V84 end(V74)) end end end end), V85 end(V69)) end end end end), V86 end(V64)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V88 = fun (V87) -> V87 end), fun (V89) -> (V88(V89)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V91 = fun (V90) -> V90 end), fun (V92) -> (V91(V92)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E10, E11)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V94 = fun (V93) -> V93 end), fun (V95) -> (V94(V95)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V97 = fun (V96) -> V96 end), fun (V98) -> (V97(V98)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E8, E9)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V100 = fun (V99) -> V99 end), fun (V101) -> (V100(V101)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V103 = fun (V102) -> V102 end), fun (V104) -> (V103(V104)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E6, E7)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V106 = fun (V105) -> V105 end), fun (V107) -> (V106(V107)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V109 = fun (V108) -> V108 end), fun (V110) -> (V109(V110)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E4, E5)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V112 = fun (V111) -> V111 end), fun (V113) -> (V112(V113)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V115 = fun (V114) -> V114 end), fun (V116) -> (V115(V116)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"Fail"/utf8>> -> case V19 of [E12 | E13] -> (fun (V117, V118) -> case V118 of [E14 | E15] -> (fun (V119, V120) -> case V120 of [E16 | E17] -> (fun (V121, V122) -> case V122 of [] -> begin (V123 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V121))), fun (V124) -> begin (V125 = (V123(V124))), case V125 of {'Prelude.Types.Left', V126} -> {'Prelude.Types.Left', V126}; {'Prelude.Types.Right', V127} -> (begin (V162 = begin (V141 = begin (V128 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V119))), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V140 = ((begin (V137 = fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_FC'(V133, V134, V135, V136)) end end end end), fun (V138) -> fun (V139) -> ((((V137(V16))(V0))(V138))(V139)) end end end(V17))(V132))), V140 end(V129)) end end end end), fun (V142) -> begin (V143 = (V141(V142))), case V143 of {'Prelude.Types.Left', V144} -> {'Prelude.Types.Left', V144}; {'Prelude.Types.Right', V145} -> (begin (V161 = begin (V146 = case V145 of {'Core.FC.EmptyFC'} -> V10; _ -> V145 end), begin (V154 = ((begin (V151 = fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V147, V148, V149, V150)) end end end end), fun (V152) -> fun (V153) -> ((((V151(V16))(V0))(V152))(V153)) end end end(V17))(V127))), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V160 = fun (V159) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.RunElabFail', {'Core.Core.GenericMsg', V146, V158}}, V159)) end), V160 end(V155)) end end end end end), V161 end(V142)) end end end end), V162 end(V124)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V164 = fun (V163) -> V163 end), fun (V165) -> (V164(V165)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V167 = fun (V166) -> V166 end), fun (V168) -> (V167(V168)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E16, E17)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V170 = fun (V169) -> V169 end), fun (V171) -> (V170(V171)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V173 = fun (V172) -> V172 end), fun (V174) -> (V173(V174)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E14, E15)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V176 = fun (V175) -> V175 end), fun (V177) -> (V176(V177)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V179 = fun (V178) -> V178 end), fun (V180) -> (V179(V180)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E12, E13)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V182 = fun (V181) -> V181 end), fun (V183) -> (V182(V183)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V185 = fun (V184) -> V184 end), fun (V186) -> (V185(V186)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"Try"/utf8>> -> case V19 of [E18 | E19] -> (fun (V187, V188) -> case V188 of [E20 | E21] -> (fun (V189, V190) -> case V190 of [E22 | E23] -> (fun (V191, V192) -> case V192 of [] -> begin (V193 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V191))), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V223 = ('Idris.Idris2.Core.UnifyState':'un--tryUnify'(V16, V14, begin (V198 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V16))), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V222 = begin (V209 = begin (V203 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V189))), fun (V204) -> begin (V205 = (V203(V204))), case V205 of {'Prelude.Types.Left', V206} -> {'Prelude.Types.Left', V206}; {'Prelude.Types.Right', V207} -> (begin (V208 = ('un--elabScript'(V0, V16, V15, V14, V13, V12, V11, V10, V9, V8, V207, V7))), V208 end(V204)) end end end end), fun (V210) -> begin (V211 = (V209(V210))), case V211 of {'Prelude.Types.Left', V212} -> {'Prelude.Types.Left', V212}; {'Prelude.Types.Right', V213} -> (begin (V221 = begin (V214 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V16, V14, V202, ('Idris.Idris2.Core.Unify':'un--inTerm'()), 3))), fun (V215) -> begin (V216 = (V214(V215))), case V216 of {'Prelude.Types.Left', V217} -> {'Prelude.Types.Left', V217}; {'Prelude.Types.Right', V218} -> (begin (V220 = fun (V219) -> {'Prelude.Types.Right', V213} end), V220 end(V215)) end end end end), V221 end(V210)) end end end end), V222 end(V199)) end end end end, ('un--elabScript'(V0, V16, V15, V14, V13, V12, V11, V10, V9, V8, V197, V7))))), V223 end(V194)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V225 = fun (V224) -> V224 end), fun (V226) -> (V225(V226)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V228 = fun (V227) -> V227 end), fun (V229) -> (V228(V229)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E22, E23)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V231 = fun (V230) -> V230 end), fun (V232) -> (V231(V232)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V234 = fun (V233) -> V233 end), fun (V235) -> (V234(V235)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E20, E21)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V237 = fun (V236) -> V236 end), fun (V238) -> (V237(V238)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V240 = fun (V239) -> V239 end), fun (V241) -> (V240(V241)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E18, E19)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V243 = fun (V242) -> V242 end), fun (V244) -> (V243(V244)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V246 = fun (V245) -> V245 end), fun (V247) -> (V246(V247)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"LogMsg"/utf8>> -> case V19 of [E24 | E25] -> (fun (V248, V249) -> case V249 of [E26 | E27] -> (fun (V250, V251) -> case V251 of [E28 | E29] -> (fun (V252, V253) -> case V253 of [] -> begin (V254 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V248))), fun (V255) -> begin (V256 = (V254(V255))), case V256 of {'Prelude.Types.Left', V257} -> {'Prelude.Types.Left', V257}; {'Prelude.Types.Right', V258} -> (begin (V316 = begin (V259 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V250))), fun (V260) -> begin (V261 = (V259(V260))), case V261 of {'Prelude.Types.Left', V262} -> {'Prelude.Types.Left', V262}; {'Prelude.Types.Right', V263} -> (begin (V315 = begin (V303 = begin (V271 = ((begin (V268 = fun (V264) -> fun (V265) -> fun (V266) -> fun (V267) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V264, V265, V266, V267)) end end end end), fun (V269) -> fun (V270) -> ((((V268(V16))(V0))(V269))(V270)) end end end(V17))(V258))), fun (V272) -> begin (V273 = (V271(V272))), case V273 of {'Prelude.Types.Left', V274} -> {'Prelude.Types.Left', V274}; {'Prelude.Types.Right', V275} -> (begin (V302 = begin (V283 = ((begin (V280 = fun (V276) -> fun (V277) -> fun (V278) -> fun (V279) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Nat'(V276, V277, V278, V279)) end end end end), fun (V281) -> fun (V282) -> ((((V280(V16))(V0))(V281))(V282)) end end end(V17))(V263))), fun (V284) -> begin (V285 = (V283(V284))), case V285 of {'Prelude.Types.Left', V286} -> {'Prelude.Types.Left', V286}; {'Prelude.Types.Right', V287} -> (begin (V301 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V16, V275, V287, begin (V288 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V252))), fun (V289) -> begin (V290 = (V288(V289))), case V290 of {'Prelude.Types.Left', V291} -> {'Prelude.Types.Left', V291}; {'Prelude.Types.Right', V292} -> (begin (V300 = ((begin (V297 = fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V293, V294, V295, V296)) end end end end), fun (V298) -> fun (V299) -> ((((V297(V16))(V0))(V298))(V299)) end end end(V17))(V292))), V300 end(V289)) end end end end))), V301 end(V284)) end end end end), V302 end(V272)) end end end end), fun (V304) -> begin (V305 = (V303(V304))), case V305 of {'Prelude.Types.Left', V306} -> {'Prelude.Types.Left', V306}; {'Prelude.Types.Right', V307} -> (begin (V314 = ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V308) -> fun (V309) -> fun (V310) -> fun (V311) -> fun (V312) -> fun (V313) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V308, V309, V310, V311, V312, V313)) end end end end end end, {'Builtin.MkUnit'}))), V314 end(V304)) end end end end), V315 end(V260)) end end end end), V316 end(V255)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V318 = fun (V317) -> V317 end), fun (V319) -> (V318(V319)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V321 = fun (V320) -> V320 end), fun (V322) -> (V321(V322)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E28, E29)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V324 = fun (V323) -> V323 end), fun (V325) -> (V324(V325)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V327 = fun (V326) -> V326 end), fun (V328) -> (V327(V328)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E26, E27)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V330 = fun (V329) -> V329 end), fun (V331) -> (V330(V331)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V333 = fun (V332) -> V332 end), fun (V334) -> (V333(V334)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E24, E25)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V336 = fun (V335) -> V335 end), fun (V337) -> (V336(V337)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V339 = fun (V338) -> V338 end), fun (V340) -> (V339(V340)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"LogTerm"/utf8>> -> case V19 of [E30 | E31] -> (fun (V341, V342) -> case V342 of [E32 | E33] -> (fun (V343, V344) -> case V344 of [E34 | E35] -> (fun (V345, V346) -> case V346 of [E36 | E37] -> (fun (V347, V348) -> case V348 of [] -> begin (V349 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V341))), fun (V350) -> begin (V351 = (V349(V350))), case V351 of {'Prelude.Types.Left', V352} -> {'Prelude.Types.Left', V352}; {'Prelude.Types.Right', V353} -> (begin (V440 = begin (V354 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V343))), fun (V355) -> begin (V356 = (V354(V355))), case V356 of {'Prelude.Types.Left', V357} -> {'Prelude.Types.Left', V357}; {'Prelude.Types.Right', V358} -> (begin (V439 = begin (V427 = begin (V366 = ((begin (V363 = fun (V359) -> fun (V360) -> fun (V361) -> fun (V362) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V359, V360, V361, V362)) end end end end), fun (V364) -> fun (V365) -> ((((V363(V16))(V0))(V364))(V365)) end end end(V17))(V353))), fun (V367) -> begin (V368 = (V366(V367))), case V368 of {'Prelude.Types.Left', V369} -> {'Prelude.Types.Left', V369}; {'Prelude.Types.Right', V370} -> (begin (V426 = begin (V378 = ((begin (V375 = fun (V371) -> fun (V372) -> fun (V373) -> fun (V374) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Nat'(V371, V372, V373, V374)) end end end end), fun (V376) -> fun (V377) -> ((((V375(V16))(V0))(V376))(V377)) end end end(V17))(V358))), fun (V379) -> begin (V380 = (V378(V379))), case V380 of {'Prelude.Types.Left', V381} -> {'Prelude.Types.Left', V381}; {'Prelude.Types.Right', V382} -> (begin (V425 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V16, V370, V382, begin (V383 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V345))), fun (V384) -> begin (V385 = (V383(V384))), case V385 of {'Prelude.Types.Left', V386} -> {'Prelude.Types.Left', V386}; {'Prelude.Types.Right', V387} -> (begin (V424 = begin (V388 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V347))), fun (V389) -> begin (V390 = (V388(V389))), case V390 of {'Prelude.Types.Left', V391} -> {'Prelude.Types.Left', V391}; {'Prelude.Types.Right', V392} -> (begin (V423 = begin (V400 = ((begin (V397 = fun (V393) -> fun (V394) -> fun (V395) -> fun (V396) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V393, V394, V395, V396)) end end end end), fun (V398) -> fun (V399) -> ((((V397(V16))(V0))(V398))(V399)) end end end(V17))(V387))), fun (V401) -> begin (V402 = (V400(V401))), case V402 of {'Prelude.Types.Left', V403} -> {'Prelude.Types.Left', V403}; {'Prelude.Types.Right', V404} -> (begin (V422 = begin (V412 = ((begin (V409 = fun (V405) -> fun (V406) -> fun (V407) -> fun (V408) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reify_Reify_RawImp'(V405, V406, V407, V408)) end end end end), fun (V410) -> fun (V411) -> ((((V409(V16))(V0))(V410))(V411)) end end end(V17))(V392))), fun (V413) -> begin (V414 = (V412(V413))), case V414 of {'Prelude.Types.Left', V415} -> {'Prelude.Types.Left', V415}; {'Prelude.Types.Right', V416} -> (begin (V421 = fun (V417) -> {'Prelude.Types.Right', <<V404/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V418) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V418)) end, fun (V419) -> fun (V420) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V419, V420)) end end}, V416))/binary>>/binary>>} end), V421 end(V413)) end end end end), V422 end(V401)) end end end end), V423 end(V389)) end end end end), V424 end(V384)) end end end end))), V425 end(V379)) end end end end), V426 end(V367)) end end end end), fun (V428) -> begin (V429 = (V427(V428))), case V429 of {'Prelude.Types.Left', V430} -> {'Prelude.Types.Left', V430}; {'Prelude.Types.Right', V431} -> (begin (V438 = ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V432) -> fun (V433) -> fun (V434) -> fun (V435) -> fun (V436) -> fun (V437) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V432, V433, V434, V435, V436, V437)) end end end end end end, {'Builtin.MkUnit'}))), V438 end(V428)) end end end end), V439 end(V355)) end end end end), V440 end(V350)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V442 = fun (V441) -> V441 end), fun (V443) -> (V442(V443)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V445 = fun (V444) -> V444 end), fun (V446) -> (V445(V446)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E36, E37)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V448 = fun (V447) -> V447 end), fun (V449) -> (V448(V449)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V451 = fun (V450) -> V450 end), fun (V452) -> (V451(V452)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E34, E35)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V454 = fun (V453) -> V453 end), fun (V455) -> (V454(V455)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V457 = fun (V456) -> V456 end), fun (V458) -> (V457(V458)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E32, E33)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V460 = fun (V459) -> V459 end), fun (V461) -> (V460(V461)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V463 = fun (V462) -> V462 end), fun (V464) -> (V463(V464)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E30, E31)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V466 = fun (V465) -> V465 end), fun (V467) -> (V466(V467)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V469 = fun (V468) -> V468 end), fun (V470) -> (V469(V470)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"LogSugaredTerm"/utf8>> -> case V19 of [E38 | E39] -> (fun (V471, V472) -> case V472 of [E40 | E41] -> (fun (V473, V474) -> case V474 of [E42 | E43] -> (fun (V475, V476) -> case V476 of [E44 | E45] -> (fun (V477, V478) -> case V478 of [] -> begin (V479 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V471))), fun (V480) -> begin (V481 = (V479(V480))), case V481 of {'Prelude.Types.Left', V482} -> {'Prelude.Types.Left', V482}; {'Prelude.Types.Right', V483} -> (begin (V581 = begin (V484 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V473))), fun (V485) -> begin (V486 = (V484(V485))), case V486 of {'Prelude.Types.Left', V487} -> {'Prelude.Types.Left', V487}; {'Prelude.Types.Right', V488} -> (begin (V580 = begin (V568 = begin (V496 = ((begin (V493 = fun (V489) -> fun (V490) -> fun (V491) -> fun (V492) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V489, V490, V491, V492)) end end end end), fun (V494) -> fun (V495) -> ((((V493(V16))(V0))(V494))(V495)) end end end(V17))(V483))), fun (V497) -> begin (V498 = (V496(V497))), case V498 of {'Prelude.Types.Left', V499} -> {'Prelude.Types.Left', V499}; {'Prelude.Types.Right', V500} -> (begin (V567 = begin (V508 = ((begin (V505 = fun (V501) -> fun (V502) -> fun (V503) -> fun (V504) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Nat'(V501, V502, V503, V504)) end end end end), fun (V506) -> fun (V507) -> ((((V505(V16))(V0))(V506))(V507)) end end end(V17))(V488))), fun (V509) -> begin (V510 = (V508(V509))), case V510 of {'Prelude.Types.Left', V511} -> {'Prelude.Types.Left', V511}; {'Prelude.Types.Right', V512} -> (begin (V566 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V16, V500, V512, begin (V513 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V475))), fun (V514) -> begin (V515 = (V513(V514))), case V515 of {'Prelude.Types.Left', V516} -> {'Prelude.Types.Left', V516}; {'Prelude.Types.Right', V517} -> (begin (V565 = begin (V531 = begin (V518 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V477))), fun (V519) -> begin (V520 = (V518(V519))), case V520 of {'Prelude.Types.Left', V521} -> {'Prelude.Types.Left', V521}; {'Prelude.Types.Right', V522} -> (begin (V530 = ((begin (V527 = fun (V523) -> fun (V524) -> fun (V525) -> fun (V526) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reify_Reify_RawImp'(V523, V524, V525, V526)) end end end end), fun (V528) -> fun (V529) -> ((((V527(V16))(V0))(V528))(V529)) end end end(V17))(V522))), V530 end(V519)) end end end end), fun (V532) -> begin (V533 = (V531(V532))), case V533 of {'Prelude.Types.Left', V534} -> {'Prelude.Types.Left', V534}; {'Prelude.Types.Right', V535} -> (begin (V564 = begin (V544 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V16, V13, ((begin (V541 = fun (V537) -> fun (V538) -> fun (V539) -> fun (V540) -> ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(V539, V540)) end end end end), fun (V542) -> fun (V543) -> ((((V541('erased'))('erased'))(V542))(V543)) end end end(fun (V536) -> ('Idris.Idris2.Core.TT':'un--defaultKindedName'(V536)) end))(V535))))), fun (V545) -> begin (V546 = (V544(V545))), case V546 of {'Prelude.Types.Left', V547} -> {'Prelude.Types.Left', V547}; {'Prelude.Types.Right', V548} -> (begin (V563 = begin (V556 = ((begin (V553 = fun (V549) -> fun (V550) -> fun (V551) -> fun (V552) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V549, V550, V551, V552)) end end end end), fun (V554) -> fun (V555) -> ((((V553(V16))(V0))(V554))(V555)) end end end(V17))(V517))), fun (V557) -> begin (V558 = (V556(V557))), case V558 of {'Prelude.Types.Left', V559} -> {'Prelude.Types.Left', V559}; {'Prelude.Types.Right', V560} -> (begin (V562 = fun (V561) -> {'Prelude.Types.Right', <<V560/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V548))/binary>>/binary>>} end), V562 end(V557)) end end end end), V563 end(V545)) end end end end), V564 end(V532)) end end end end), V565 end(V514)) end end end end))), V566 end(V509)) end end end end), V567 end(V497)) end end end end), fun (V569) -> begin (V570 = (V568(V569))), case V570 of {'Prelude.Types.Left', V571} -> {'Prelude.Types.Left', V571}; {'Prelude.Types.Right', V572} -> (begin (V579 = ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V573) -> fun (V574) -> fun (V575) -> fun (V576) -> fun (V577) -> fun (V578) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V573, V574, V575, V576, V577, V578)) end end end end end end, {'Builtin.MkUnit'}))), V579 end(V569)) end end end end), V580 end(V485)) end end end end), V581 end(V480)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V583 = fun (V582) -> V582 end), fun (V584) -> (V583(V584)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V586 = fun (V585) -> V585 end), fun (V587) -> (V586(V587)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E44, E45)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V589 = fun (V588) -> V588 end), fun (V590) -> (V589(V590)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V592 = fun (V591) -> V591 end), fun (V593) -> (V592(V593)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E42, E43)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V595 = fun (V594) -> V594 end), fun (V596) -> (V595(V596)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V598 = fun (V597) -> V597 end), fun (V599) -> (V598(V599)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E40, E41)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V601 = fun (V600) -> V600 end), fun (V602) -> (V601(V602)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V604 = fun (V603) -> V603 end), fun (V605) -> (V604(V605)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E38, E39)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V607 = fun (V606) -> V606 end), fun (V608) -> (V607(V608)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V610 = fun (V609) -> V609 end), fun (V611) -> (V610(V611)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"Check"/utf8>> -> case V19 of [E46 | E47] -> (fun (V612, V613) -> case V613 of [E48 | E49] -> (fun (V614, V615) -> case V615 of [] -> begin (V616 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V612))), fun (V617) -> begin (V618 = (V616(V617))), case V618 of {'Prelude.Types.Left', V619} -> {'Prelude.Types.Left', V619}; {'Prelude.Types.Right', V620} -> (begin (V671 = begin (V621 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V614))), fun (V622) -> begin (V623 = (V621(V622))), case V623 of {'Prelude.Types.Left', V624} -> {'Prelude.Types.Left', V624}; {'Prelude.Types.Right', V625} -> (begin (V670 = begin (V629 = ('Idris.Idris2.Core.Context':'un--resolveName'(V16, {'Core.Name.UN', {'Core.Name.Basic', (begin (V627 = fun (V626) -> V626 end), fun (V628) -> (V627(V628)) end end(<<"[elaborator script]"/utf8>>))}}))), fun (V630) -> begin (V631 = (V629(V630))), case V631 of {'Prelude.Types.Left', V632} -> {'Prelude.Types.Left', V632}; {'Prelude.Types.Right', V633} -> (begin (V669 = begin (V634 = ('Idris.Idris2.Core.Core':'un--newRef'({'TTImp.Elab.Check.EST'}, ('Idris.Idris2.TTImp.Elab.Check':'un--initEState'(V0, V633, V8))))), fun (V635) -> begin (V636 = (V634(V635))), case V636 of {'Prelude.Types.Left', V637} -> {'Prelude.Types.Left', V637}; {'Prelude.Types.Right', V638} -> (begin (V668 = begin (V653 = begin (V646 = ((begin (V643 = fun (V639) -> fun (V640) -> fun (V641) -> fun (V642) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reify_Reify_RawImp'(V639, V640, V641, V642)) end end end end), fun (V644) -> fun (V645) -> ((((V643(V16))(V0))(V644))(V645)) end end end(V17))(V625))), fun (V647) -> begin (V648 = (V646(V647))), case V648 of {'Prelude.Types.Left', V649} -> {'Prelude.Types.Left', V649}; {'Prelude.Types.Right', V650} -> (begin (V652 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V16, V15, V14, V638, fun (V651) -> 1 end, ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V16, V15, V14, V638, V13, V12, V11, ('Idris.Idris2.TTImp.Elab.Check':'un--initElabInfo'({'TTImp.Elab.Check.InExpr'})), V9, V8, V650, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V16, V0, V17, V8, V620))}))))), V652 end(V647)) end end end end), fun (V654) -> begin (V655 = (V653(V654))), case V655 of {'Prelude.Types.Left', V656} -> {'Prelude.Types.Left', V656}; {'Prelude.Types.Right', V657} -> (begin (V667 = case V657 of {'Builtin.MkPair', V658, V659} -> begin (V661 = fun (V660) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V17, V660)) end), fun (V662) -> begin (V663 = (V661(V662))), case V663 of {'Prelude.Types.Left', V664} -> {'Prelude.Types.Left', V664}; {'Prelude.Types.Right', V665} -> (begin (V666 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V16, V0, V665, V8, V658))), V666 end(V662)) end end end end end), V667 end(V654)) end end end end), V668 end(V635)) end end end end), V669 end(V630)) end end end end), V670 end(V622)) end end end end), V671 end(V617)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V673 = fun (V672) -> V672 end), fun (V674) -> (V673(V674)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V676 = fun (V675) -> V675 end), fun (V677) -> (V676(V677)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E48, E49)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V679 = fun (V678) -> V678 end), fun (V680) -> (V679(V680)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V682 = fun (V681) -> V681 end), fun (V683) -> (V682(V683)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E46, E47)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V685 = fun (V684) -> V684 end), fun (V686) -> (V685(V686)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V688 = fun (V687) -> V687 end), fun (V689) -> (V688(V689)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"Quote"/utf8>> -> case V19 of [E50 | E51] -> (fun (V690, V691) -> case V691 of [E52 | E53] -> (fun (V692, V693) -> case V693 of [] -> begin (V694 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V692))), fun (V695) -> begin (V696 = (V694(V695))), case V696 of {'Prelude.Types.Left', V697} -> {'Prelude.Types.Left', V697}; {'Prelude.Types.Right', V698} -> (begin (V746 = begin (V704 = begin (V699 = V16), fun (V700) -> begin (V703 = (begin (V701 = V699), fun (V702) -> ('erlang':'get'(V701)) end end(V700))), {'Prelude.Types.Right', V703} end end end), fun (V705) -> begin (V706 = (V704(V705))), case V706 of {'Prelude.Types.Left', V707} -> {'Prelude.Types.Left', V707}; {'Prelude.Types.Right', V708} -> (begin (V745 = begin (V710 = fun (V709) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V708, V709)) end), fun (V711) -> begin (V712 = (V710(V711))), case V712 of {'Prelude.Types.Left', V713} -> {'Prelude.Types.Left', V713}; {'Prelude.Types.Right', V714} -> (begin (V744 = begin (V715 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V16, V0, V714, V8, V698))), fun (V716) -> begin (V717 = (V715(V716))), case V717 of {'Prelude.Types.Left', V718} -> {'Prelude.Types.Left', V718}; {'Prelude.Types.Right', V719} -> (begin (V743 = begin (V720 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'(V0, V16, V8, V719))), fun (V721) -> begin (V722 = (V720(V721))), case V722 of {'Prelude.Types.Left', V723} -> {'Prelude.Types.Left', V723}; {'Prelude.Types.Right', V724} -> (begin (V742 = ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V725) -> fun (V726) -> fun (V727) -> fun (V728) -> fun (V729) -> fun (V730) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V725, V726, V727, V728, V729, V730)) end end end end end end, ((begin (V739 = fun (V735) -> fun (V736) -> fun (V737) -> fun (V738) -> ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(V737, V738)) end end end end), fun (V740) -> fun (V741) -> ((((V739('erased'))('erased'))(V740))(V741)) end end end(fun (V731) -> case V731 of {'Core.TT.MkKindedName', V732, V733, V734} -> V734 end end))(V724))))), V742 end(V721)) end end end end), V743 end(V716)) end end end end), V744 end(V711)) end end end end), V745 end(V705)) end end end end), V746 end(V695)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V748 = fun (V747) -> V747 end), fun (V749) -> (V748(V749)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V751 = fun (V750) -> V750 end), fun (V752) -> (V751(V752)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E52, E53)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V754 = fun (V753) -> V753 end), fun (V755) -> (V754(V755)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V757 = fun (V756) -> V756 end), fun (V758) -> (V757(V758)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E50, E51)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V760 = fun (V759) -> V759 end), fun (V761) -> (V760(V761)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V763 = fun (V762) -> V762 end), fun (V764) -> (V763(V764)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"Lambda"/utf8>> -> case V19 of [E54 | E55] -> (fun (V765, V766) -> case V766 of [E56 | E57] -> (fun (V767, V768) -> case V768 of [E58 | E59] -> (fun (V769, V770) -> case V770 of [] -> begin (V772 = fun (V771) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V17, V771)) end), fun (V773) -> begin (V774 = (V772(V773))), case V774 of {'Prelude.Types.Left', V775} -> {'Prelude.Types.Left', V775}; {'Prelude.Types.Right', V776} -> (begin (V842 = begin (V777 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V769))), fun (V778) -> begin (V779 = (V777(V778))), case V779 of {'Prelude.Types.Left', V780} -> {'Prelude.Types.Left', V780}; {'Prelude.Types.Right', V781} -> (begin (V841 = begin (V782 = {'Core.Value.NDCon', V5, V4, V3, V2, V1}), case V781 of {'Core.Value.NBind', V783, V784, V785, V786} -> case V785 of {'Core.TT.Lam', V787, V788, V789, V790} -> begin (V791 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V16, V14, <<"x"/utf8>>))), fun (V792) -> begin (V793 = (V791(V792))), case V793 of {'Prelude.Types.Left', V794} -> {'Prelude.Types.Left', V794}; {'Prelude.Types.Right', V795} -> (begin (V840 = begin (V796 = ((V786(V17))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--withAll'()), V8, {'Core.TT.Ref', V783, {'Core.TT.Bound'}, V795}))))), fun (V797) -> begin (V798 = (V796(V797))), case V798 of {'Prelude.Types.Left', V799} -> {'Prelude.Types.Left', V799}; {'Prelude.Types.Right', V800} -> (begin (V839 = begin (V801 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V16, V0, V776, V8, V800))), fun (V802) -> begin (V803 = (V801(V802))), case V803 of {'Prelude.Types.Left', V804} -> {'Prelude.Types.Left', V804}; {'Prelude.Types.Right', V805} -> (begin (V838 = begin (V806 = ('Idris.Idris2.Core.TT':'un--refToLocal'(V795, V784, V805))), begin (V807 = ('nested--11054-13177--in--un--quotePi'(V0, V1, V2, V3, V4, V5, V782, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V767, V765, V769, V17, V789))), fun (V808) -> begin (V809 = (V807(V808))), case V809 of {'Prelude.Types.Left', V810} -> {'Prelude.Types.Left', V810}; {'Prelude.Types.Right', V811} -> (begin (V837 = begin (V812 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V16, V0, V776, V8, V790))), fun (V813) -> begin (V814 = (V812(V813))), case V814 of {'Prelude.Types.Left', V815} -> {'Prelude.Types.Left', V815}; {'Prelude.Types.Right', V816} -> (begin (V836 = begin (V817 = {'Core.Env.::', {'Core.TT.Lam', V787, V788, V811, V816}, V8}), begin (V824 = begin (V818 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V16, [V784 | V0], V17, V817, V806))), fun (V819) -> begin (V820 = (V818(V819))), case V820 of {'Prelude.Types.Left', V821} -> {'Prelude.Types.Left', V821}; {'Prelude.Types.Right', V822} -> (begin (V823 = ('un--elabScript'([V784 | V0], V16, V15, V14, V13, V12, V11, V10, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(V9)), V817, V822, {'Prelude.Types.Nothing'}))), V823 end(V819)) end end end end), fun (V825) -> begin (V826 = (V824(V825))), case V826 of {'Prelude.Types.Left', V827} -> {'Prelude.Types.Left', V827}; {'Prelude.Types.Right', V828} -> (begin (V835 = begin (V829 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V16, [V784 | V0], V776, V817, V828))), fun (V830) -> begin (V831 = (V829(V830))), case V831 of {'Prelude.Types.Left', V832} -> {'Prelude.Types.Left', V832}; {'Prelude.Types.Right', V833} -> (begin (V834 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V16, V0, V776, V8, {'Core.TT.Bind', V783, V784, {'Core.TT.Lam', V787, V788, V811, V816}, V833}))), V834 end(V830)) end end end end), V835 end(V825)) end end end end end), V836 end(V813)) end end end end), V837 end(V808)) end end end end end), V838 end(V802)) end end end end), V839 end(V797)) end end end end), V840 end(V792)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V782, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<"Not a lambda"/utf8>>)) end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V782, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<"Not a lambda"/utf8>>)) end end), V841 end(V778)) end end end end), V842 end(V773)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V844 = fun (V843) -> V843 end), fun (V845) -> (V844(V845)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V847 = fun (V846) -> V846 end), fun (V848) -> (V847(V848)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E58, E59)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V850 = fun (V849) -> V849 end), fun (V851) -> (V850(V851)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V853 = fun (V852) -> V852 end), fun (V854) -> (V853(V854)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E56, E57)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V856 = fun (V855) -> V855 end), fun (V857) -> (V856(V857)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V859 = fun (V858) -> V858 end), fun (V860) -> (V859(V860)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E54, E55)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V862 = fun (V861) -> V861 end), fun (V863) -> (V862(V863)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V865 = fun (V864) -> V864 end), fun (V866) -> (V865(V866)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"Goal"/utf8>> -> case V19 of [] -> begin (V867 = {'Core.Value.NDCon', V5, V4, V3, V2, V1}), case V7 of {'Prelude.Types.Just', V868} -> begin (V869 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V868))), fun (V870) -> begin (V871 = (V869(V870))), case V871 of {'Prelude.Types.Left', V872} -> {'Prelude.Types.Left', V872}; {'Prelude.Types.Right', V873} -> (begin (V903 = begin (V874 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'(V0, V16, V8, V873))), fun (V875) -> begin (V876 = (V874(V875))), case V876 of {'Prelude.Types.Left', V877} -> {'Prelude.Types.Left', V877}; {'Prelude.Types.Right', V878} -> (begin (V902 = ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V867, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V879) -> fun (V880) -> fun (V881) -> fun (V882) -> fun (V883) -> fun (V884) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(Maybe $a)'(fun (V885) -> fun (V886) -> fun (V887) -> fun (V888) -> fun (V889) -> fun (V890) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V885, V886, V887, V888, V889, V890)) end end end end end end, V879, V880, V881, V882, V883, V884)) end end end end end end, {'Prelude.Types.Just', ((begin (V899 = fun (V895) -> fun (V896) -> fun (V897) -> fun (V898) -> ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(V897, V898)) end end end end), fun (V900) -> fun (V901) -> ((((V899('erased'))('erased'))(V900))(V901)) end end end(fun (V891) -> case V891 of {'Core.TT.MkKindedName', V892, V893, V894} -> V894 end end))(V878))}))), V902 end(V875)) end end end end), V903 end(V870)) end end end end; {'Prelude.Types.Nothing'} -> begin (V922 = (((((begin (V916 = fun (V904) -> fun (V905) -> fun (V906) -> fun (V907) -> fun (V908) -> fun (V909) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(Maybe $a)'(fun (V910) -> fun (V911) -> fun (V912) -> fun (V913) -> fun (V914) -> fun (V915) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V910, V911, V912, V913, V914, V915)) end end end end end end, V904, V905, V906, V907, V908, V909)) end end end end end end), fun (V917) -> fun (V918) -> fun (V919) -> fun (V920) -> fun (V921) -> ((((((V916(V0))(V917))(V918))(V919))(V920))(V921)) end end end end end end(V10))(V17))(0))(V8))({'Prelude.Types.Nothing'}))), fun (V923) -> begin (V924 = (V922(V923))), case V924 of {'Prelude.Types.Left', V925} -> {'Prelude.Types.Left', V925}; {'Prelude.Types.Right', V926} -> (begin (V927 = ('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V16, V0, ('Idris.Idris2.Core.Value':'un--withAll'()), V17, V8, V926))), V927 end(V923)) end end end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V929 = fun (V928) -> V928 end), fun (V930) -> (V929(V930)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V932 = fun (V931) -> V931 end), fun (V933) -> (V932(V933)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"LocalVars"/utf8>> -> case V19 of [] -> ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V934) -> fun (V935) -> fun (V936) -> fun (V937) -> fun (V938) -> fun (V939) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(List $a)'(fun (V940) -> fun (V941) -> fun (V942) -> fun (V943) -> fun (V944) -> fun (V945) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V940, V941, V942, V943, V944, V945)) end end end end end end, V934, V935, V936, V937, V938, V939)) end end end end end end, V0)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V947 = fun (V946) -> V946 end), fun (V948) -> (V947(V948)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V950 = fun (V949) -> V949 end), fun (V951) -> (V950(V951)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"GenSym"/utf8>> -> case V19 of [E60 | E61] -> (fun (V952, V953) -> case V953 of [] -> begin (V954 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V952))), fun (V955) -> begin (V956 = (V954(V955))), case V956 of {'Prelude.Types.Left', V957} -> {'Prelude.Types.Left', V957}; {'Prelude.Types.Right', V958} -> (begin (V984 = begin (V972 = begin (V966 = ((begin (V963 = fun (V959) -> fun (V960) -> fun (V961) -> fun (V962) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V959, V960, V961, V962)) end end end end), fun (V964) -> fun (V965) -> ((((V963(V16))(V0))(V964))(V965)) end end end(V17))(V958))), fun (V967) -> begin (V968 = (V966(V967))), case V968 of {'Prelude.Types.Left', V969} -> {'Prelude.Types.Left', V969}; {'Prelude.Types.Right', V970} -> (begin (V971 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V16, V14, V970))), V971 end(V967)) end end end end), fun (V973) -> begin (V974 = (V972(V973))), case V974 of {'Prelude.Types.Left', V975} -> {'Prelude.Types.Left', V975}; {'Prelude.Types.Right', V976} -> (begin (V983 = ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V977) -> fun (V978) -> fun (V979) -> fun (V980) -> fun (V981) -> fun (V982) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V977, V978, V979, V980, V981, V982)) end end end end end end, V976))), V983 end(V973)) end end end end), V984 end(V955)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V986 = fun (V985) -> V985 end), fun (V987) -> (V986(V987)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V989 = fun (V988) -> V988 end), fun (V990) -> (V989(V990)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E60, E61)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V992 = fun (V991) -> V991 end), fun (V993) -> (V992(V993)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V995 = fun (V994) -> V994 end), fun (V996) -> (V995(V996)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"InCurrentNS"/utf8>> -> case V19 of [E62 | E63] -> (fun (V997, V998) -> case V998 of [] -> begin (V999 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V997))), fun (V1000) -> begin (V1001 = (V999(V1000))), case V1001 of {'Prelude.Types.Left', V1002} -> {'Prelude.Types.Left', V1002}; {'Prelude.Types.Right', V1003} -> (begin (V1029 = begin (V1017 = begin (V1011 = ((begin (V1008 = fun (V1004) -> fun (V1005) -> fun (V1006) -> fun (V1007) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V1004, V1005, V1006, V1007)) end end end end), fun (V1009) -> fun (V1010) -> ((((V1008(V16))(V0))(V1009))(V1010)) end end end(V17))(V1003))), fun (V1012) -> begin (V1013 = (V1011(V1012))), case V1013 of {'Prelude.Types.Left', V1014} -> {'Prelude.Types.Left', V1014}; {'Prelude.Types.Right', V1015} -> (begin (V1016 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V16, V1015))), V1016 end(V1012)) end end end end), fun (V1018) -> begin (V1019 = (V1017(V1018))), case V1019 of {'Prelude.Types.Left', V1020} -> {'Prelude.Types.Left', V1020}; {'Prelude.Types.Right', V1021} -> (begin (V1028 = ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V1022) -> fun (V1023) -> fun (V1024) -> fun (V1025) -> fun (V1026) -> fun (V1027) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V1022, V1023, V1024, V1025, V1026, V1027)) end end end end end end, V1021))), V1028 end(V1018)) end end end end), V1029 end(V1000)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1031 = fun (V1030) -> V1030 end), fun (V1032) -> (V1031(V1032)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1034 = fun (V1033) -> V1033 end), fun (V1035) -> (V1034(V1035)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E62, E63)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1037 = fun (V1036) -> V1036 end), fun (V1038) -> (V1037(V1038)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1040 = fun (V1039) -> V1039 end), fun (V1041) -> (V1040(V1041)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"GetType"/utf8>> -> case V19 of [E64 | E65] -> (fun (V1042, V1043) -> case V1043 of [] -> begin (V1044 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V1042))), fun (V1045) -> begin (V1046 = (V1044(V1045))), case V1046 of {'Prelude.Types.Left', V1047} -> {'Prelude.Types.Left', V1047}; {'Prelude.Types.Right', V1048} -> (begin (V1132 = begin (V1094 = begin (V1056 = ((begin (V1053 = fun (V1049) -> fun (V1050) -> fun (V1051) -> fun (V1052) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V1049, V1050, V1051, V1052)) end end end end), fun (V1054) -> fun (V1055) -> ((((V1053(V16))(V0))(V1054))(V1055)) end end end(V17))(V1048))), fun (V1057) -> begin (V1058 = (V1056(V1057))), case V1058 of {'Prelude.Types.Left', V1059} -> {'Prelude.Types.Left', V1059}; {'Prelude.Types.Right', V1060} -> (begin (V1093 = ('Idris.Idris2.Core.Context':'un--lookupTyName'(V1060, case V17 of {'Core.Context.MkDefs', V1061, V1062, V1063, V1064, V1065, V1066, V1067, V1068, V1069, V1070, V1071, V1072, V1073, V1074, V1075, V1076, V1077, V1078, V1079, V1080, V1081, V1082, V1083, V1084, V1085, V1086, V1087, V1088, V1089, V1090, V1091, V1092} -> V1061 end))), V1093 end(V1057)) end end end end), fun (V1095) -> begin (V1096 = (V1094(V1095))), case V1096 of {'Prelude.Types.Left', V1097} -> {'Prelude.Types.Left', V1097}; {'Prelude.Types.Right', V1098} -> (begin (V1131 = begin (V1101 = begin (V1099 = {'Core.Value.NDCon', V5, V4, V3, V2, V1}), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V1100) -> ('nested--11054-13625--in--un--unelabType'(V0, V1, V2, V3, V4, V5, V1099, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V1042, V17, V1100)) end, V1098, [])) end), fun (V1102) -> begin (V1103 = (V1101(V1102))), case V1103 of {'Prelude.Types.Left', V1104} -> {'Prelude.Types.Left', V1104}; {'Prelude.Types.Right', V1105} -> (begin (V1130 = ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V1106) -> fun (V1107) -> fun (V1108) -> fun (V1109) -> fun (V1110) -> fun (V1111) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(List $a)'(fun (V1112) -> fun (V1113) -> fun (V1114) -> fun (V1115) -> fun (V1116) -> fun (V1117) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V1118) -> fun (V1119) -> fun (V1120) -> fun (V1121) -> fun (V1122) -> fun (V1123) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V1118, V1119, V1120, V1121, V1122, V1123)) end end end end end end, fun (V1124) -> fun (V1125) -> fun (V1126) -> fun (V1127) -> fun (V1128) -> fun (V1129) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V1124, V1125, V1126, V1127, V1128, V1129)) end end end end end end}, V1112, V1113, V1114, V1115, V1116, V1117)) end end end end end end, V1106, V1107, V1108, V1109, V1110, V1111)) end end end end end end, V1105))), V1130 end(V1102)) end end end end), V1131 end(V1095)) end end end end), V1132 end(V1045)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1134 = fun (V1133) -> V1133 end), fun (V1135) -> (V1134(V1135)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1137 = fun (V1136) -> V1136 end), fun (V1138) -> (V1137(V1138)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E64, E65)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1140 = fun (V1139) -> V1139 end), fun (V1141) -> (V1140(V1141)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1143 = fun (V1142) -> V1142 end), fun (V1144) -> (V1143(V1144)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"GetInfo"/utf8>> -> case V19 of [E66 | E67] -> (fun (V1145, V1146) -> case V1146 of [] -> begin (V1147 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V1145))), fun (V1148) -> begin (V1149 = (V1147(V1148))), case V1149 of {'Prelude.Types.Left', V1150} -> {'Prelude.Types.Left', V1150}; {'Prelude.Types.Right', V1151} -> (begin (V1227 = begin (V1197 = begin (V1159 = ((begin (V1156 = fun (V1152) -> fun (V1153) -> fun (V1154) -> fun (V1155) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V1152, V1153, V1154, V1155)) end end end end), fun (V1157) -> fun (V1158) -> ((((V1156(V16))(V0))(V1157))(V1158)) end end end(V17))(V1151))), fun (V1160) -> begin (V1161 = (V1159(V1160))), case V1161 of {'Prelude.Types.Left', V1162} -> {'Prelude.Types.Left', V1162}; {'Prelude.Types.Right', V1163} -> (begin (V1196 = ('un--lookupNameInfo'(V1163, case V17 of {'Core.Context.MkDefs', V1164, V1165, V1166, V1167, V1168, V1169, V1170, V1171, V1172, V1173, V1174, V1175, V1176, V1177, V1178, V1179, V1180, V1181, V1182, V1183, V1184, V1185, V1186, V1187, V1188, V1189, V1190, V1191, V1192, V1193, V1194, V1195} -> V1164 end))), V1196 end(V1160)) end end end end), fun (V1198) -> begin (V1199 = (V1197(V1198))), case V1199 of {'Prelude.Types.Left', V1200} -> {'Prelude.Types.Left', V1200}; {'Prelude.Types.Right', V1201} -> (begin (V1226 = ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V1202) -> fun (V1203) -> fun (V1204) -> fun (V1205) -> fun (V1206) -> fun (V1207) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(List $a)'(fun (V1208) -> fun (V1209) -> fun (V1210) -> fun (V1211) -> fun (V1212) -> fun (V1213) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V1214) -> fun (V1215) -> fun (V1216) -> fun (V1217) -> fun (V1218) -> fun (V1219) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V1214, V1215, V1216, V1217, V1218, V1219)) end end end end end end, fun (V1220) -> fun (V1221) -> fun (V1222) -> fun (V1223) -> fun (V1224) -> fun (V1225) -> ('dn--un--reflect_Reflect_NameInfo'(V1220, V1221, V1222, V1223, V1224, V1225)) end end end end end end}, V1208, V1209, V1210, V1211, V1212, V1213)) end end end end end end, V1202, V1203, V1204, V1205, V1206, V1207)) end end end end end end, V1201))), V1226 end(V1198)) end end end end), V1227 end(V1148)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1229 = fun (V1228) -> V1228 end), fun (V1230) -> (V1229(V1230)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1232 = fun (V1231) -> V1231 end), fun (V1233) -> (V1232(V1233)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E66, E67)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1235 = fun (V1234) -> V1234 end), fun (V1236) -> (V1235(V1236)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1238 = fun (V1237) -> V1237 end), fun (V1239) -> (V1238(V1239)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"GetLocalType"/utf8>> -> case V19 of [E68 | E69] -> (fun (V1240, V1241) -> case V1241 of [] -> begin (V1242 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V1240))), fun (V1243) -> begin (V1244 = (V1242(V1243))), case V1244 of {'Prelude.Types.Left', V1245} -> {'Prelude.Types.Left', V1245}; {'Prelude.Types.Right', V1246} -> (begin (V1289 = begin (V1254 = ((begin (V1251 = fun (V1247) -> fun (V1248) -> fun (V1249) -> fun (V1250) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V1247, V1248, V1249, V1250)) end end end end), fun (V1252) -> fun (V1253) -> ((((V1251(V16))(V0))(V1252))(V1253)) end end end(V17))(V1246))), fun (V1255) -> begin (V1256 = (V1254(V1255))), case V1256 of {'Prelude.Types.Left', V1257} -> {'Prelude.Types.Left', V1257}; {'Prelude.Types.Right', V1258} -> (begin (V1288 = begin (V1259 = {'Core.Value.NDCon', V5, V4, V3, V2, V1}), case ('Idris.Idris2.Core.Env':'un--defined'(V0, V1258, V8)) of {'Prelude.Types.Just', V1260} -> case V1260 of {'Core.Env.MkIsDefined', V1261, V1262} -> begin (V1270 = ('Idris.Idris2.Core.Env':'un--getBinder'({'Core.TT.dn--un--__mkWeaken', fun (V1263) -> fun (V1264) -> fun (V1265) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V1265)) end end end, fun (V1266) -> fun (V1267) -> fun (V1268) -> fun (V1269) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V1268, V1269)) end end end end}, V0, V1261, V8))), begin (V1271 = ('Idris.Idris2.Core.TT':'un--binderType'(V1270))), begin (V1272 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'(V0, V16, V8, V1271))), fun (V1273) -> begin (V1274 = (V1272(V1273))), case V1274 of {'Prelude.Types.Left', V1275} -> {'Prelude.Types.Left', V1275}; {'Prelude.Types.Right', V1276} -> (begin (V1287 = ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V1259, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V1277) -> fun (V1278) -> fun (V1279) -> fun (V1280) -> fun (V1281) -> fun (V1282) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V1277, V1278, V1279, V1280, V1281, V1282)) end end end end end end, ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V1283) -> case V1283 of {'Core.TT.MkKindedName', V1284, V1285, V1286} -> V1286 end end, V1276))))), V1287 end(V1273)) end end end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V1259, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1258))/binary, <<" is not a local variable"/utf8>>/binary>>)) end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V1259, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1258))/binary, <<" is not a local variable"/utf8>>/binary>>)) end end), V1288 end(V1255)) end end end end), V1289 end(V1243)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1291 = fun (V1290) -> V1290 end), fun (V1292) -> (V1291(V1292)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1294 = fun (V1293) -> V1293 end), fun (V1295) -> (V1294(V1295)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E68, E69)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1297 = fun (V1296) -> V1296 end), fun (V1298) -> (V1297(V1298)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1300 = fun (V1299) -> V1299 end), fun (V1301) -> (V1300(V1301)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"GetCons"/utf8>> -> case V19 of [E70 | E71] -> (fun (V1302, V1303) -> case V1303 of [] -> begin (V1304 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V1302))), fun (V1305) -> begin (V1306 = (V1304(V1305))), case V1306 of {'Prelude.Types.Left', V1307} -> {'Prelude.Types.Left', V1307}; {'Prelude.Types.Right', V1308} -> (begin (V1382 = begin (V1316 = ((begin (V1313 = fun (V1309) -> fun (V1310) -> fun (V1311) -> fun (V1312) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V1309, V1310, V1311, V1312)) end end end end), fun (V1314) -> fun (V1315) -> ((((V1313(V16))(V0))(V1314))(V1315)) end end end(V17))(V1308))), fun (V1317) -> begin (V1318 = (V1316(V1317))), case V1318 of {'Prelude.Types.Left', V1319} -> {'Prelude.Types.Left', V1319}; {'Prelude.Types.Right', V1320} -> (begin (V1381 = begin (V1353 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V1320, case V17 of {'Core.Context.MkDefs', V1321, V1322, V1323, V1324, V1325, V1326, V1327, V1328, V1329, V1330, V1331, V1332, V1333, V1334, V1335, V1336, V1337, V1338, V1339, V1340, V1341, V1342, V1343, V1344, V1345, V1346, V1347, V1348, V1349, V1350, V1351, V1352} -> V1321 end))), fun (V1354) -> begin (V1355 = (V1353(V1354))), case V1355 of {'Prelude.Types.Left', V1356} -> {'Prelude.Types.Left', V1356}; {'Prelude.Types.Right', V1357} -> (begin (V1380 = begin (V1358 = {'Core.Value.NDCon', V5, V4, V3, V2, V1}), case V1357 of {'Prelude.Types.Just', V1359} -> case V1359 of {'Core.Context.Context.TCon', V1360, V1361, V1362, V1363, V1364, V1365, V1366, V1367} -> ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V1358, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V1368) -> fun (V1369) -> fun (V1370) -> fun (V1371) -> fun (V1372) -> fun (V1373) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(List $a)'(fun (V1374) -> fun (V1375) -> fun (V1376) -> fun (V1377) -> fun (V1378) -> fun (V1379) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V1374, V1375, V1376, V1377, V1378, V1379)) end end end end end end, V1368, V1369, V1370, V1371, V1372, V1373)) end end end end end end, V1366)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V1358, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1320))/binary, <<" is not a type"/utf8>>/binary>>)) end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V1358, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1320))/binary, <<" is not a type"/utf8>>/binary>>)) end end), V1380 end(V1354)) end end end end), V1381 end(V1317)) end end end end), V1382 end(V1305)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1384 = fun (V1383) -> V1383 end), fun (V1385) -> (V1384(V1385)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1387 = fun (V1386) -> V1386 end), fun (V1388) -> (V1387(V1388)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E70, E71)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1390 = fun (V1389) -> V1389 end), fun (V1391) -> (V1390(V1391)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1393 = fun (V1392) -> V1392 end), fun (V1394) -> (V1393(V1394)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; <<"Declare"/utf8>> -> case V19 of [E72 | E73] -> (fun (V1395, V1396) -> case V1396 of [] -> begin (V1397 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V16, V0, V17, V1395))), fun (V1398) -> begin (V1399 = (V1397(V1398))), case V1399 of {'Prelude.Types.Left', V1400} -> {'Prelude.Types.Left', V1400}; {'Prelude.Types.Right', V1401} -> (begin (V1432 = begin (V1413 = ((begin (V1410 = fun (V1402) -> fun (V1403) -> fun (V1404) -> fun (V1405) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_(List $a)'(fun (V1406) -> fun (V1407) -> fun (V1408) -> fun (V1409) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reify_Reify_ImpDecl'(V1406, V1407, V1408, V1409)) end end end end, V1402, V1403, V1404, V1405)) end end end end), fun (V1411) -> fun (V1412) -> ((((V1410(V16))(V0))(V1411))(V1412)) end end end(V17))(V1401))), fun (V1414) -> begin (V1415 = (V1413(V1414))), case V1415 of {'Prelude.Types.Left', V1416} -> {'Prelude.Types.Left', V1416}; {'Prelude.Types.Right', V1417} -> (begin (V1431 = begin (V1419 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V1418) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'([], V16, V15, V14, V13, V12, [], [], {'Core.Env.Nil'}, V1418)) end, V1417))), fun (V1420) -> begin (V1421 = (V1419(V1420))), case V1421 of {'Prelude.Types.Left', V1422} -> {'Prelude.Types.Left', V1422}; {'Prelude.Types.Right', V1423} -> (begin (V1430 = ('nested--10982-12288--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, fun (V1424) -> fun (V1425) -> fun (V1426) -> fun (V1427) -> fun (V1428) -> fun (V1429) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V1424, V1425, V1426, V1427, V1428, V1429)) end end end end end end, {'Builtin.MkUnit'}))), V1430 end(V1420)) end end end end), V1431 end(V1414)) end end end end), V1432 end(V1398)) end end end end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1434 = fun (V1433) -> V1433 end), fun (V1435) -> (V1434(V1435)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1437 = fun (V1436) -> V1436 end), fun (V1438) -> (V1437(V1438)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end end(E72, E73)); _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1440 = fun (V1439) -> V1439 end), fun (V1441) -> (V1440(V1441)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1443 = fun (V1442) -> V1442 end), fun (V1444) -> (V1443(V1444)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, <<(begin (V1446 = fun (V1445) -> V1445 end), fun (V1447) -> (V1446(V1447)) end end(<<"unexpected Elab constructor "/utf8>>))/binary, <<V18/binary, <<(begin (V1449 = fun (V1448) -> V1448 end), fun (V1450) -> (V1449(V1450)) end end(<<", or incorrect count of arguments: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V19))))/binary>>/binary>>/binary>>)) end.
'dn--un--reflect_Reflect_NameInfo'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_NameType'(V0, V1, V2, V3, V4, begin (V6 = V5), V6 end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('Idris.Idris2.Core.Reflect':'un--appCon'(V0, V1, V2, ('Idris.Idris2.Core.Reflect':'un--reflectiontt'(<<"MkNameInfo"/utf8>>)), [V11 | []]))), V12 end(V8)) end end end end.
'un--lookupNameInfo'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V0, V1))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V42 = fun (V7) -> {'Prelude.Types.Right', ((begin (V39 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V37, V38)) end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> {'Builtin.MkPair', V9, ('nested--10835-12098--in--un--getNameType'(V1, V0, case V12 of {'Core.Context.Context.MkGlobalDef', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} -> V30 end))} end end end))(V6))} end), V42 end(V3)) end end end end.
'un--elabScript'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Core.Value.NDCon', V12, V13, V14, V15, V16} -> begin (V22 = begin (V17 = V1), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'get'(V19)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V59 = begin (V32 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V27, V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V29, V30, V31)) end end end}, V13))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V58 = begin (V37 = {'Core.Value.NDCon', V12, V13, V14, V15, V16}), case V36 of {'Core.Name.NS', V38, V39} -> case V39 of {'Core.Name.UN', V40} -> case V40 of {'Core.Name.Basic', V41} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V38, ('Idris.Idris2.Core.Name.Namespace':'un--reflectionNS'()))) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(('nested--10982-12289--in--un--elabCon'(V0, V16, V15, V14, V13, V12, V37, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V26, V41, ((begin (V47 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V45, V46)) end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V42) -> ('Idris.Idris2.Builtin':'un--snd'(V42)) end))(V16)))), fun (V50) -> fun (V51) -> case V50 of {'Core.Core.BadRunElab', V52, V53, V54, V55, V56} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V50, V51)); {'Core.Core.RunElabFail', V57} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V50, V51)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.RunElabFail', V50}, V51)) end end end)); 0 -> ('nested--10982-12287--in--un--failWith'(V0, V16, V15, V14, V13, V12, V37, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V26, <<<<"bad reflection namespace "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V38))/binary>>)) end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V16, V15, V14, V13, V12, V37, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V26, <<<<"bad fullnames "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V36))/binary>>)) end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V16, V15, V14, V13, V12, V37, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V26, <<<<"bad fullnames "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V36))/binary>>)) end; _ -> ('nested--10982-12287--in--un--failWith'(V0, V16, V15, V14, V13, V12, V37, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V26, <<<<"bad fullnames "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V36))/binary>>)) end end), V58 end(V33)) end end end end), V59 end(V23)) end end end end; _ -> begin (V65 = begin (V60 = V1), fun (V61) -> begin (V64 = (begin (V62 = V60), fun (V63) -> ('erlang':'get'(V62)) end end(V61))), {'Prelude.Types.Right', V64} end end end), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V84 = begin (V71 = fun (V70) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V69, V70)) end), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V83 = begin (V76 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V75, V9, V10))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V82 = fun (V81) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadRunElab', V0, V7, V9, V80, <<"script is not a data value"/utf8>>}, V81)) end), V82 end(V77)) end end end end), V83 end(V72)) end end end end), V84 end(V66)) end end end end end.
'un--checkRunElab'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V14 = ('nested--13506-14600--in--un--mkExpected'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V13))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V107 = begin (V24 = begin (V19 = V1), fun (V20) -> begin (V23 = (begin (V21 = V19), fun (V22) -> ('erlang':'get'(V21)) end end(V20))), {'Prelude.Types.Right', V23} end end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V106 = begin (V30 = fun (V29) -> case ('Idris.Idris2.Core.Context':'un--isExtension'(0, V28)) of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V11, <<"%language ElabReflection not enabled"/utf8>>}, V29)) end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V105 = begin (V35 = {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--reflectionNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"Elab"/utf8>>}}}), begin (V36 = ('Idris.Idris2.Core.Reflect':'un--appCon'(V0, V11, V28, V35, [V18 | []]))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V104 = begin (V42 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V1, V2, V3, V4, fun (V41) -> 1 end, ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V40))}))))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V103 = case V46 of {'Builtin.MkPair', V47, V48} -> begin (V49 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, ('Idris.Idris2.Core.Unify':'un--inTerm'()), 0))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V102 = begin (V59 = begin (V54 = V1), fun (V55) -> begin (V58 = (begin (V56 = V54), fun (V57) -> ('erlang':'get'(V56)) end end(V55))), {'Prelude.Types.Right', V58} end end end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V101 = begin (V70 = begin (V64 = ('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V1, V0, ('Idris.Idris2.Core.Value':'un--withAll'()), V63, V10, V47))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V69 = ('un--elabScript'(V0, V1, V2, V3, V5, V6, V7, V11, V9, V10, V68, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V18))}))), V69 end(V65)) end end end end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V100 = begin (V80 = begin (V75 = V1), fun (V76) -> begin (V79 = (begin (V77 = V75), fun (V78) -> ('erlang':'get'(V77)) end end(V76))), {'Prelude.Types.Right', V79} end end end), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V99 = begin (V86 = fun (V85) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V84, V85)) end), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V98 = begin (V91 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V90, V10, V74))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V97 = fun (V96) -> {'Prelude.Types.Right', {'Builtin.MkPair', V95, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V18))}} end), V97 end(V92)) end end end end), V98 end(V87)) end end end end), V99 end(V81)) end end end end), V100 end(V71)) end end end end), V101 end(V60)) end end end end), V102 end(V50)) end end end end end), V103 end(V43)) end end end end), V104 end(V37)) end end end end end), V105 end(V31)) end end end end), V106 end(V25)) end end end end), V107 end(V15)) end end end end.
