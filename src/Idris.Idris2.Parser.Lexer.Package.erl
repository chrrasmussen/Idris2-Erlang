-module('Idris.Idris2.Parser.Lexer.Package').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--lex-9686'/2,
  'nested--5259-9667--in--un--useful'/2,
  'dn--un--show_Show_Token'/1,
  'dn--un--showPrec_Show_Token'/2,
  'dn--un--pretty_Pretty_Void_Token'/1,
  'dn--un--prettyPrec_Pretty_Void_Token'/2,
  'dn--un--__Impl_Show_Token'/0,
  'dn--un--__Impl_Pretty_Void_Token'/0,
  'un--separator'/0,
  'un--rawTokens'/0,
  'un--lte'/0,
  'un--lt'/0,
  'un--lex'/1,
  'un--gte'/0,
  'un--gt'/0,
  'un--equals'/0,
  'un--eqop'/0,
  'un--dot'/0,
  'un--andop'/0
]).
'case--lex-9686'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> case V7 of <<""/utf8>> -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V8) -> ('nested--5259-9667--in--un--useful'(V0, case V8 of {'Libraries.Text.Bounded.MkBounded', V9, V10, V11} -> V9 end)) end, V2)), [{'Libraries.Text.Bounded.MkBounded', {'Parser.Lexer.Package.EndOfInput'}, 0, {'Libraries.Text.Bounded.MkBounds', V4, V6, V4, V6}} | []]))}; _ -> {'Prelude.Types.Left', V3} end; _ -> {'Prelude.Types.Left', V3} end; _ -> {'Prelude.Types.Left', V3} end end.
'nested--5259-9667--in--un--useful'(V0, V1) -> case V1 of {'Parser.Lexer.Package.Comment', V2} -> 0; {'Parser.Lexer.Package.Space'} -> 0; _ -> 1 end.
'dn--un--show_Show_Token'(V0) -> case V0 of {'Parser.Lexer.Package.Comment', V1} -> <<<<"Comment: "/utf8>>/binary, V1/binary>>; {'Parser.Lexer.Package.EndOfInput'} -> <<"EndOfInput"/utf8>>; {'Parser.Lexer.Package.Equals'} -> <<"Equals"/utf8>>; {'Parser.Lexer.Package.DotSepIdent', V2, V3} -> <<<<"DotSepIdentifier: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V4) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V4)) end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--showPrec_Show_Namespace'(V5, V6)) end end}, V2))/binary, <<<<"."/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V3))/binary>>/binary>>/binary>>; {'Parser.Lexer.Package.Separator'} -> <<"Separator"/utf8>>; {'Parser.Lexer.Package.Dot'} -> <<"Dot"/utf8>>; {'Parser.Lexer.Package.LTE'} -> <<"LTE"/utf8>>; {'Parser.Lexer.Package.GTE'} -> <<"GTE"/utf8>>; {'Parser.Lexer.Package.LT'} -> <<"LT"/utf8>>; {'Parser.Lexer.Package.GT'} -> <<"GT"/utf8>>; {'Parser.Lexer.Package.EqOp'} -> <<"EqOp"/utf8>>; {'Parser.Lexer.Package.AndOp'} -> <<"AndOp"/utf8>>; {'Parser.Lexer.Package.Space'} -> <<"Space"/utf8>>; {'Parser.Lexer.Package.StringLit', V7} -> <<<<"StringLit: "/utf8>>/binary, V7/binary>>; {'Parser.Lexer.Package.IntegerLit', V8} -> <<<<"IntegerLit: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V8))/binary>> end.
'dn--un--showPrec_Show_Token'(V0, V1) -> ('dn--un--show_Show_Token'(V1)).
'dn--un--pretty_Pretty_Void_Token'(V0) -> case V0 of {'Parser.Lexer.Package.Comment', V1} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Comment:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V1)))); {'Parser.Lexer.Package.EndOfInput'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"EndOfInput"/utf8>>)); {'Parser.Lexer.Package.Equals'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V3)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V4) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V4)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V5) -> fun (V6) -> case case (V5 =:= V6) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V2)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> [V8 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V9))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V2)); 0 -> V2 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> [V11 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V12))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V13) -> fun (V14) -> case case (V13 =:= V14) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V2)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V15} -> case V15 of {'Builtin.MkPair', V16, V17} -> [V16 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V17))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V2)); 0 -> V2 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V18} -> case V18 of {'Builtin.MkPair', V19, V20} -> [V19 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V20))] end end)))))))) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V23) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V23)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V24) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V24)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V25) -> fun (V26) -> case case (V25 =:= V26) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V22)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V27} -> case V27 of {'Builtin.MkPair', V28, V29} -> [V28 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V29))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V22)); 0 -> V22 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V30} -> case V30 of {'Builtin.MkPair', V31, V32} -> [V31 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V32))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V33) -> fun (V34) -> case case (V33 =:= V34) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V22)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V35} -> case V35 of {'Builtin.MkPair', V36, V37} -> [V36 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V37))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V22)); 0 -> V22 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V38} -> case V38 of {'Builtin.MkPair', V39, V40} -> [V39 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V40))] end end)))))))) end end}, <<"Equals"/utf8>>)); {'Parser.Lexer.Package.DotSepIdent', V41, V42} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'((begin (V44 = fun (V43) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V43)) end), fun (V45) -> (V44(V45)) end end(<<"DotSepIdentifier:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--prettyMaybe'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V46) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_Void_Namespace'(V46)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--prettyPrec_Pretty_Void_Namespace'(V47, V48)) end end}, V41)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dot'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V42)))))); {'Parser.Lexer.Package.Separator'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V49) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V50) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V50)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V51) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V51)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V52) -> fun (V53) -> case case (V52 =:= V53) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V49)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V54} -> case V54 of {'Builtin.MkPair', V55, V56} -> [V55 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V56))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V49)); 0 -> V49 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V57} -> case V57 of {'Builtin.MkPair', V58, V59} -> [V58 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V59))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V60) -> fun (V61) -> case case (V60 =:= V61) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V49)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V62} -> case V62 of {'Builtin.MkPair', V63, V64} -> [V63 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V64))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V49)); 0 -> V49 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V65} -> case V65 of {'Builtin.MkPair', V66, V67} -> [V66 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V67))] end end)))))))) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V70) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V70)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V71) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V71)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V72) -> fun (V73) -> case case (V72 =:= V73) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V69)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V74} -> case V74 of {'Builtin.MkPair', V75, V76} -> [V75 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V76))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V69)); 0 -> V69 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V77} -> case V77 of {'Builtin.MkPair', V78, V79} -> [V78 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V79))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V80) -> fun (V81) -> case case (V80 =:= V81) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V69)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V82} -> case V82 of {'Builtin.MkPair', V83, V84} -> [V83 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V84))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V69)); 0 -> V69 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V85} -> case V85 of {'Builtin.MkPair', V86, V87} -> [V86 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V87))] end end)))))))) end end}, <<"Separator"/utf8>>)); {'Parser.Lexer.Package.Dot'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V88) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V89) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V89)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V90) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V90)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V91) -> fun (V92) -> case case (V91 =:= V92) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V88)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V93} -> case V93 of {'Builtin.MkPair', V94, V95} -> [V94 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V95))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V88)); 0 -> V88 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V96} -> case V96 of {'Builtin.MkPair', V97, V98} -> [V97 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V98))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V99) -> fun (V100) -> case case (V99 =:= V100) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V88)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V101} -> case V101 of {'Builtin.MkPair', V102, V103} -> [V102 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V103))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V88)); 0 -> V88 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V104} -> case V104 of {'Builtin.MkPair', V105, V106} -> [V105 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V106))] end end)))))))) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V109) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V109)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V110) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V110)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V111) -> fun (V112) -> case case (V111 =:= V112) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V108)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V113} -> case V113 of {'Builtin.MkPair', V114, V115} -> [V114 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V115))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V108)); 0 -> V108 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V116} -> case V116 of {'Builtin.MkPair', V117, V118} -> [V117 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V118))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V119) -> fun (V120) -> case case (V119 =:= V120) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V108)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V121} -> case V121 of {'Builtin.MkPair', V122, V123} -> [V122 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V123))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V108)); 0 -> V108 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V124} -> case V124 of {'Builtin.MkPair', V125, V126} -> [V125 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V126))] end end)))))))) end end}, <<"Dot"/utf8>>)); {'Parser.Lexer.Package.LTE'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V127) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V128) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V128)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V129) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V129)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V130) -> fun (V131) -> case case (V130 =:= V131) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V127)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V132} -> case V132 of {'Builtin.MkPair', V133, V134} -> [V133 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V134))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V127)); 0 -> V127 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V135} -> case V135 of {'Builtin.MkPair', V136, V137} -> [V136 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V137))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V138) -> fun (V139) -> case case (V138 =:= V139) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V127)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V140} -> case V140 of {'Builtin.MkPair', V141, V142} -> [V141 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V142))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V127)); 0 -> V127 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V143} -> case V143 of {'Builtin.MkPair', V144, V145} -> [V144 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V145))] end end)))))))) end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V148) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V148)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V149) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V149)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V150) -> fun (V151) -> case case (V150 =:= V151) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V147)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V152} -> case V152 of {'Builtin.MkPair', V153, V154} -> [V153 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V154))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V147)); 0 -> V147 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V155} -> case V155 of {'Builtin.MkPair', V156, V157} -> [V156 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V157))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V158) -> fun (V159) -> case case (V158 =:= V159) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V147)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V160} -> case V160 of {'Builtin.MkPair', V161, V162} -> [V161 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V162))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V147)); 0 -> V147 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V163} -> case V163 of {'Builtin.MkPair', V164, V165} -> [V164 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V165))] end end)))))))) end end}, <<"LTE"/utf8>>)); {'Parser.Lexer.Package.GTE'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V166) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V167) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V167)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V168) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V168)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V169) -> fun (V170) -> case case (V169 =:= V170) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V166)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V171} -> case V171 of {'Builtin.MkPair', V172, V173} -> [V172 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V173))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V166)); 0 -> V166 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V174} -> case V174 of {'Builtin.MkPair', V175, V176} -> [V175 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V176))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V177) -> fun (V178) -> case case (V177 =:= V178) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V166)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V179} -> case V179 of {'Builtin.MkPair', V180, V181} -> [V180 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V181))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V166)); 0 -> V166 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V182} -> case V182 of {'Builtin.MkPair', V183, V184} -> [V183 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V184))] end end)))))))) end, fun (V185) -> fun (V186) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V187) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V187)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V188) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V188)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V189) -> fun (V190) -> case case (V189 =:= V190) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V186)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V191} -> case V191 of {'Builtin.MkPair', V192, V193} -> [V192 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V193))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V186)); 0 -> V186 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V194} -> case V194 of {'Builtin.MkPair', V195, V196} -> [V195 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V196))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V197) -> fun (V198) -> case case (V197 =:= V198) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V186)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V199} -> case V199 of {'Builtin.MkPair', V200, V201} -> [V200 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V201))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V186)); 0 -> V186 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V202} -> case V202 of {'Builtin.MkPair', V203, V204} -> [V203 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V204))] end end)))))))) end end}, <<"GTE"/utf8>>)); {'Parser.Lexer.Package.LT'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V205) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V206) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V206)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V207) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V207)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V208) -> fun (V209) -> case case (V208 =:= V209) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V205)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V210} -> case V210 of {'Builtin.MkPair', V211, V212} -> [V211 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V212))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V205)); 0 -> V205 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V213} -> case V213 of {'Builtin.MkPair', V214, V215} -> [V214 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V215))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V216) -> fun (V217) -> case case (V216 =:= V217) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V205)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V218} -> case V218 of {'Builtin.MkPair', V219, V220} -> [V219 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V220))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V205)); 0 -> V205 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V221} -> case V221 of {'Builtin.MkPair', V222, V223} -> [V222 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V223))] end end)))))))) end, fun (V224) -> fun (V225) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V226) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V226)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V227) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V227)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V228) -> fun (V229) -> case case (V228 =:= V229) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V225)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V230} -> case V230 of {'Builtin.MkPair', V231, V232} -> [V231 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V232))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V225)); 0 -> V225 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V233} -> case V233 of {'Builtin.MkPair', V234, V235} -> [V234 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V235))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V236) -> fun (V237) -> case case (V236 =:= V237) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V225)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V238} -> case V238 of {'Builtin.MkPair', V239, V240} -> [V239 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V240))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V225)); 0 -> V225 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V241} -> case V241 of {'Builtin.MkPair', V242, V243} -> [V242 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V243))] end end)))))))) end end}, <<"LT"/utf8>>)); {'Parser.Lexer.Package.GT'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V244) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V245) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V245)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V246) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V246)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V247) -> fun (V248) -> case case (V247 =:= V248) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V244)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V249} -> case V249 of {'Builtin.MkPair', V250, V251} -> [V250 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V251))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V244)); 0 -> V244 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V252} -> case V252 of {'Builtin.MkPair', V253, V254} -> [V253 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V254))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V255) -> fun (V256) -> case case (V255 =:= V256) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V244)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V257} -> case V257 of {'Builtin.MkPair', V258, V259} -> [V258 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V259))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V244)); 0 -> V244 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V260} -> case V260 of {'Builtin.MkPair', V261, V262} -> [V261 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V262))] end end)))))))) end, fun (V263) -> fun (V264) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V265) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V265)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V266) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V266)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V267) -> fun (V268) -> case case (V267 =:= V268) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V264)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V269} -> case V269 of {'Builtin.MkPair', V270, V271} -> [V270 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V271))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V264)); 0 -> V264 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V272} -> case V272 of {'Builtin.MkPair', V273, V274} -> [V273 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V274))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V275) -> fun (V276) -> case case (V275 =:= V276) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V264)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V277} -> case V277 of {'Builtin.MkPair', V278, V279} -> [V278 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V279))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V264)); 0 -> V264 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V280} -> case V280 of {'Builtin.MkPair', V281, V282} -> [V281 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V282))] end end)))))))) end end}, <<"GT"/utf8>>)); {'Parser.Lexer.Package.EqOp'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V283) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V284) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V284)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V285) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V285)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V286) -> fun (V287) -> case case (V286 =:= V287) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V283)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V288} -> case V288 of {'Builtin.MkPair', V289, V290} -> [V289 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V290))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V283)); 0 -> V283 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V291} -> case V291 of {'Builtin.MkPair', V292, V293} -> [V292 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V293))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V294) -> fun (V295) -> case case (V294 =:= V295) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V283)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V296} -> case V296 of {'Builtin.MkPair', V297, V298} -> [V297 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V298))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V283)); 0 -> V283 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V299} -> case V299 of {'Builtin.MkPair', V300, V301} -> [V300 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V301))] end end)))))))) end, fun (V302) -> fun (V303) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V304) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V304)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V305) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V305)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V306) -> fun (V307) -> case case (V306 =:= V307) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V303)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V308} -> case V308 of {'Builtin.MkPair', V309, V310} -> [V309 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V310))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V303)); 0 -> V303 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V311} -> case V311 of {'Builtin.MkPair', V312, V313} -> [V312 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V313))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V314) -> fun (V315) -> case case (V314 =:= V315) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V303)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V316} -> case V316 of {'Builtin.MkPair', V317, V318} -> [V317 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V318))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V303)); 0 -> V303 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V319} -> case V319 of {'Builtin.MkPair', V320, V321} -> [V320 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V321))] end end)))))))) end end}, <<"EqOp"/utf8>>)); {'Parser.Lexer.Package.AndOp'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V322) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V323) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V323)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V324) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V324)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V325) -> fun (V326) -> case case (V325 =:= V326) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V322)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V327} -> case V327 of {'Builtin.MkPair', V328, V329} -> [V328 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V329))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V322)); 0 -> V322 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V330} -> case V330 of {'Builtin.MkPair', V331, V332} -> [V331 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V332))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V333) -> fun (V334) -> case case (V333 =:= V334) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V322)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V335} -> case V335 of {'Builtin.MkPair', V336, V337} -> [V336 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V337))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V322)); 0 -> V322 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V338} -> case V338 of {'Builtin.MkPair', V339, V340} -> [V339 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V340))] end end)))))))) end, fun (V341) -> fun (V342) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V343) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V343)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V344) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V344)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V345) -> fun (V346) -> case case (V345 =:= V346) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V342)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V347} -> case V347 of {'Builtin.MkPair', V348, V349} -> [V348 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V349))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V342)); 0 -> V342 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V350} -> case V350 of {'Builtin.MkPair', V351, V352} -> [V351 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V352))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V353) -> fun (V354) -> case case (V353 =:= V354) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V342)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V355} -> case V355 of {'Builtin.MkPair', V356, V357} -> [V356 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V357))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V342)); 0 -> V342 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V358} -> case V358 of {'Builtin.MkPair', V359, V360} -> [V359 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V360))] end end)))))))) end end}, <<"AndOp"/utf8>>)); {'Parser.Lexer.Package.Space'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V361) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V362) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V362)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V363) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V363)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V364) -> fun (V365) -> case case (V364 =:= V365) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V361)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V366} -> case V366 of {'Builtin.MkPair', V367, V368} -> [V367 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V368))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V361)); 0 -> V361 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V369} -> case V369 of {'Builtin.MkPair', V370, V371} -> [V370 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V371))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V372) -> fun (V373) -> case case (V372 =:= V373) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V361)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V374} -> case V374 of {'Builtin.MkPair', V375, V376} -> [V375 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V376))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V361)); 0 -> V361 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V377} -> case V377 of {'Builtin.MkPair', V378, V379} -> [V378 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V379))] end end)))))))) end, fun (V380) -> fun (V381) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V382) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V382)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V383) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V383)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V384) -> fun (V385) -> case case (V384 =:= V385) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V381)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V386} -> case V386 of {'Builtin.MkPair', V387, V388} -> [V387 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V388))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V381)); 0 -> V381 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V389} -> case V389 of {'Builtin.MkPair', V390, V391} -> [V390 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V391))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V392) -> fun (V393) -> case case (V392 =:= V393) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V381)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V394} -> case V394 of {'Builtin.MkPair', V395, V396} -> [V395 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V396))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V381)); 0 -> V381 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V397} -> case V397 of {'Builtin.MkPair', V398, V399} -> [V398 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V399))] end end)))))))) end end}, <<"Space"/utf8>>)); {'Parser.Lexer.Package.StringLit', V400} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'((begin (V402 = fun (V401) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V401)) end), fun (V403) -> (V402(V403)) end end(<<"StringLit:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V400)))); {'Parser.Lexer.Package.IntegerLit', V404} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'((begin (V406 = fun (V405) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V405)) end), fun (V407) -> (V406(V407)) end end(<<"IntegerLit:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V408) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V408)) end, fun (V409) -> fun (V410) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Integer'(V409, V410)) end end}, V404)))) end.
'dn--un--prettyPrec_Pretty_Void_Token'(V0, V1) -> ('dn--un--pretty_Pretty_Void_Token'(V1)).
'dn--un--__Impl_Show_Token'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Token'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--show_Show_Token'(V2)) end end}.
'dn--un--__Impl_Pretty_Void_Token'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_Token'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--pretty_Pretty_Void_Token'(V2)) end end}.
'un--separator'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($,)).
'un--rawTokens'() -> [{'Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--comment'()), fun (V0) -> {'Parser.Lexer.Package.Comment', ('Idris.Idris2.Libraries.Data.String.Extra':'un--drop'(2, V0))} end} | [{'Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--namespacedIdent'()), fun (V1) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V2) -> fun (V3) -> {'Parser.Lexer.Package.DotSepIdent', V2, V3} end end, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespacedIdent'(V1)))) end} | [{'Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--identAllowDashes'()), fun (V4) -> {'Parser.Lexer.Package.DotSepIdent', {'Prelude.Types.Nothing'}, V4} end} | [{'Builtin.MkPair', ('un--separator'()), fun (V5) -> {'Parser.Lexer.Package.Separator'} end} | [{'Builtin.MkPair', ('un--dot'()), fun (V6) -> {'Parser.Lexer.Package.Dot'} end} | [{'Builtin.MkPair', ('un--lte'()), fun (V7) -> {'Parser.Lexer.Package.LTE'} end} | [{'Builtin.MkPair', ('un--gte'()), fun (V8) -> {'Parser.Lexer.Package.GTE'} end} | [{'Builtin.MkPair', ('un--lt'()), fun (V9) -> {'Parser.Lexer.Package.LT'} end} | [{'Builtin.MkPair', ('un--gt'()), fun (V10) -> {'Parser.Lexer.Package.GT'} end} | [{'Builtin.MkPair', ('un--eqop'()), fun (V11) -> {'Parser.Lexer.Package.EqOp'} end} | [{'Builtin.MkPair', ('un--andop'()), fun (V12) -> {'Parser.Lexer.Package.AndOp'} end} | [{'Builtin.MkPair', ('un--equals'()), fun (V13) -> {'Parser.Lexer.Package.Equals'} end} | [{'Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--spacesOrNewlines'()), fun (V14) -> {'Parser.Lexer.Package.Space'} end} | [{'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--stringLit'()), fun (V15) -> {'Parser.Lexer.Package.StringLit', ('Idris.Idris2.Libraries.Utils.String':'un--stripQuotes'(V15))} end} | [{'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--intLit'()), fun (V16) -> {'Parser.Lexer.Package.IntegerLit', case ('string':'to_integer'(V16)) of {E0, E1} when (erlang:'is_integer'(E0)) -> (fun (V17, V18) -> case ('string':'is_empty'(V18)) of 'true' -> V17; _ -> 0 end end(E0, E1)); _ -> 0 end} end} | []]]]]]]]]]]]]]]].
'un--lte'() -> {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($<)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($=)) end}.
'un--lt'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($<)).
'un--lex'(V0) -> ('case--lex-9686'(V0, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--lexTo'(fun (V1) -> 0 end, ('un--rawTokens'()), V0)))).
'un--gte'() -> {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($>)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($=)) end}.
'un--gt'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($>)).
'un--equals'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($=)).
'un--eqop'() -> {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($=)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($=)) end}.
'un--dot'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($.)).
'un--andop'() -> {'Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($&)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($&)) end}.
