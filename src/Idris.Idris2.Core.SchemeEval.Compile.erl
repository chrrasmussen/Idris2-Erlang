-module('Idris.Idris2.Core.SchemeEval.Compile').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7024-1290--in--un--vars'/3,
  'nested--8708-3257--in--un--toSchemeTyConCases'/10,
  'nested--8708-3259--in--un--toSchemeDelayCases'/10,
  'nested--8708-3258--in--un--toSchemeConstCases'/10,
  'nested--8708-3256--in--un--toSchemeConCases'/10,
  'nested--8753-3807--in--un--project'/14,
  'nested--8752-3586--in--un--project'/14,
  'nested--6592-886--in--un--okchar'/2,
  'nested--10232-4969--in--un--mkArgNs'/13,
  'nested--10232-4861--in--un--mkArgNs'/8,
  'nested--8708-3255--in--un--makeDefault'/9,
  'nested--8754-4165--in--un--makeAlt'/12,
  'nested--8753-3809--in--un--makeAlt'/12,
  'nested--8752-3588--in--un--makeAlt'/12,
  'nested--8708-3254--in--un--caseType'/9,
  'nested--8753-3808--in--un--bindArgs'/13,
  'nested--8752-3587--in--un--bindArgs'/13,
  'nested--8753-3810--in--un--addPiMatch'/13,
  'dn--un--show_Show_SVar'/1,
  'un--varObjs'/1,
  'un--unload'/2,
  'un--schVarUN'/1,
  'un--schVarName'/1,
  'un--schString'/1,
  'un--schName'/1,
  'un--nextName'/1,
  'un--mkArgs'/1,
  'un--initialiseSchemeEval'/1,
  'un--initEvalWith'/2,
  'un--getSchVar'/2,
  'un--getName'/1,
  'un--getArgName'/1,
  'un--extend'/3,
  'un--compileWhyErased'/5,
  'un--compileStk'/5,
  'un--compilePiInfo'/4,
  'un--compileDef'/3,
  'un--compileConstant'/2,
  'un--compileCase'/5,
  'un--compileBody'/4,
  'un--compile'/4,
  'un--blockedMetaApp'/1,
  'un--blockedAppWith'/2,
  'un--bindArgs'/4
]).
'nested--7024-1290--in--un--vars'(V0, V1, V2) -> case V2 of [] -> {'Libraries.Utils.Scheme.Null'}; [E0 | E1] -> (fun (V3, V4) -> {'Libraries.Utils.Scheme.Cons', V3, ('nested--7024-1290--in--un--vars'(V0, V1, V4))} end(E0, E1)) end.
'nested--8708-3257--in--un--toSchemeTyConCases'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = ('un--getSchVar'(V8, V5))), begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> ('nested--8753-3809--in--un--makeAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V9, V8, V10, V11)) end, V9, []))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V31 = begin (V24 = begin (V17 = ('nested--8708-3255--in--un--makeDefault'(V0, V1, V2, V3, V4, V5, V6, V7, V9))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V23 = ('nested--8753-3810--in--un--addPiMatch'(V0, V1, V2, V3, V4, V5, V6, V7, V9, V8, V10, V9, {'Libraries.Utils.Scheme.Case', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"vector-ref"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V10} | [{'Libraries.Utils.Scheme.IntegerVal', 2} | []]]}, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V22) -> V22 end, V16)), {'Prelude.Types.Just', V21}}))), V23 end(V18)) end end end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.If', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-isTypeMatchable"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V10} | []]}, V28, V6}} end), V30 end(V25)) end end end end), V31 end(V13)) end end end end end.
'nested--8708-3259--in--un--toSchemeDelayCases'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Core.Case.CaseTree.DelayCase', V12, V13, V14} -> begin (V15 = ('un--getSchVar'(V8, V5))), begin (V16 = ('un--getArgName'(V0))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V35 = begin (V21 = ('un--getArgName'(V0))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V34 = begin (V26 = {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', ('un--schVarName'(V20))}, {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', ('un--schVarName'(V25))}, V5}}), begin (V27 = ('un--compileCase'(V0, V7, V6, V26, V14))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = fun (V32) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.If', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-isDelay"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V15} | []]}, {'Libraries.Utils.Scheme.Let', ('un--schVarName'(V20)), {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"vector-ref"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V15} | [{'Libraries.Utils.Scheme.IntegerVal', 3} | []]]}, []}, {'Libraries.Utils.Scheme.Let', ('un--schVarName'(V25)), {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"vector-ref"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V15} | [{'Libraries.Utils.Scheme.IntegerVal', 4} | []]]}, []}, V31}}, V6}} end), V33 end(V28)) end end end end end), V34 end(V22)) end end end end), V35 end(V17)) end end end end end; _ -> ('nested--8708-3259--in--un--toSchemeDelayCases'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11)) end end(E0, E1)); _ -> fun (V36) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Null'}} end end.
'nested--8708-3258--in--un--toSchemeConstCases'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = ('un--getSchVar'(V8, V5))), begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> ('nested--8754-4165--in--un--makeAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V9, V8, V10, V11)) end, V9, []))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V26 = begin (V17 = ('nested--8708-3255--in--un--makeDefault'(V0, V1, V2, V3, V4, V5, V6, V7, V9))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V25 = begin (V23 = {'Libraries.Utils.Scheme.Cond', ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V22) -> V22 end, V16)), {'Prelude.Types.Just', V21}}), fun (V24) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.If', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-isConstant"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V10} | []]}, V23, V6}} end end), V25 end(V18)) end end end end), V26 end(V13)) end end end end end.
'nested--8708-3256--in--un--toSchemeConCases'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = ('un--getSchVar'(V8, V5))), begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> ('nested--8752-3588--in--un--makeAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V9, V8, V10, V11)) end, V9, []))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V26 = begin (V17 = ('nested--8708-3255--in--un--makeDefault'(V0, V1, V2, V3, V4, V5, V6, V7, V9))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V25 = begin (V23 = {'Libraries.Utils.Scheme.Case', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"vector-ref"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V10} | [{'Libraries.Utils.Scheme.IntegerVal', 0} | []]]}, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V22) -> V22 end, V16)), {'Prelude.Types.Just', V21}}), fun (V24) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.If', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-isDataCon"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V10} | []]}, V23, V6}} end end), V25 end(V18)) end end end end), V26 end(V13)) end end end end end.
'nested--8753-3807--in--un--project'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of [] -> V13; [E0 | E1] -> (fun (V14, V15) -> {'Libraries.Utils.Scheme.Let', ('un--schVarName'(V14)), {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"vector-ref"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V11} | [{'Libraries.Utils.Scheme.IntegerVal', V10} | []]]}, ('nested--8753-3807--in--un--project'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, begin (V16 = (V10 + 1)), case ((V16 band 9223372036854775808) =/= 0) of 'true' -> (V16 bor -9223372036854775808); _ -> (V16 band 9223372036854775807) end end, V11, V15, V13))} end(E0, E1)) end.
'nested--8752-3586--in--un--project'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of [] -> V13; [E0 | E1] -> (fun (V14, V15) -> {'Libraries.Utils.Scheme.Let', ('un--schVarName'(V14)), {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"vector-ref"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V11} | [{'Libraries.Utils.Scheme.IntegerVal', V10} | []]]}, ('nested--8752-3586--in--un--project'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, begin (V16 = (V10 + 1)), case ((V16 band 9223372036854775808) =/= 0) of 'true' -> (V16 bor -9223372036854775808); _ -> (V16 band 9223372036854775807) end end, V11, V15, V13))} end(E0, E1)) end.
'nested--6592-886--in--un--okchar'(V0, V1) -> case case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V1)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $_)) end of 1 -> ('unicode':'characters_to_binary'([V1 | []])); 0 -> <<<<"C-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(case V1 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end))/binary>> end.
'nested--10232-4969--in--un--mkArgNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> []; _ -> begin (V13 = (V12 - 1)), [{'Core.Name.MN', <<"arg"/utf8>>, V11} | ('nested--10232-4969--in--un--mkArgNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, begin (V14 = (V11 + 1)), case ((V14 band 9223372036854775808) =/= 0) of 'true' -> (V14 bor -9223372036854775808); _ -> (V14 band 9223372036854775807) end end, V13))] end end.
'nested--10232-4861--in--un--mkArgNs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> []; _ -> begin (V8 = (V7 - 1)), [{'Core.Name.MN', <<"arg"/utf8>>, V6} | ('nested--10232-4861--in--un--mkArgNs'(V0, V1, V2, V3, V4, V5, begin (V9 = (V6 + 1)), case ((V9 band 9223372036854775808) =/= 0) of 'true' -> (V9 bor -9223372036854775808); _ -> (V9 band 9223372036854775807) end end, V8))] end end.
'nested--8708-3255--in--un--makeDefault'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> fun (V9) -> {'Prelude.Types.Right', V6} end; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Core.Case.CaseTree.DefaultCase', V12} -> ('un--compileCase'(V0, V7, V6, V5, V12)); _ -> ('nested--8708-3255--in--un--makeDefault'(V0, V1, V2, V3, V4, V5, V6, V7, V11)) end end(E0, E1)) end.
'nested--8754-4165--in--un--makeAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Core.Case.CaseTree.ConstCase', V12, V13} -> begin (V14 = ('un--compileCase'(V0, V7, V6, V5, V13))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"equal?"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V10} | [('un--compileConstant'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V12)) | []]]}, V18}}} end), V20 end(V15)) end end end end; _ -> fun (V21) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'nested--8753-3809--in--un--makeAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Core.Case.CaseTree.ConCase', V12, V13, V14, V15} -> case V12 of {'Core.Name.UN', V16} -> case V16 of {'Core.Name.Basic', V17} -> case V17 of <<"->"/utf8>> -> case V14 of [E0 | E1] -> (fun (V18, V19) -> case V19 of [E2 | E3] -> (fun (V20, V21) -> case V21 of [] -> fun (V22) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; _ -> begin (V23 = ('nested--8753-3808--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V15))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V29 = fun (V28) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', {'Libraries.Utils.Scheme.StringVal', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12))}, V27}}} end), V29 end(V24)) end end end end end end(E2, E3)); _ -> begin (V30 = ('nested--8753-3808--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V15))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V36 = fun (V35) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', {'Libraries.Utils.Scheme.StringVal', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12))}, V34}}} end), V36 end(V31)) end end end end end end(E0, E1)); _ -> begin (V37 = ('nested--8753-3808--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V15))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V43 = fun (V42) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', {'Libraries.Utils.Scheme.StringVal', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12))}, V41}}} end), V43 end(V38)) end end end end end; _ -> begin (V44 = ('nested--8753-3808--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V15))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V50 = fun (V49) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', {'Libraries.Utils.Scheme.StringVal', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12))}, V48}}} end), V50 end(V45)) end end end end end; _ -> begin (V51 = ('nested--8753-3808--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V15))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V57 = fun (V56) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', {'Libraries.Utils.Scheme.StringVal', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12))}, V55}}} end), V57 end(V52)) end end end end end; _ -> begin (V58 = ('nested--8753-3808--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V15))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V64 = fun (V63) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', {'Libraries.Utils.Scheme.StringVal', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12))}, V62}}} end), V64 end(V59)) end end end end end; _ -> fun (V65) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'nested--8752-3588--in--un--makeAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Core.Case.CaseTree.ConCase', V12, V13, V14, V15} -> begin (V16 = ('nested--8752-3587--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V15))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', {'Libraries.Utils.Scheme.IntegerVal', V13}, V20}}} end), V22 end(V17)) end end end end; _ -> fun (V23) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'nested--8708-3254--in--un--caseType'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> fun (V9) -> {'Prelude.Types.Right', {'Core.SchemeEval.Compile.nested--8708-3250--in--un--CON', V0, V1, V2, V3, V4, V5, V6, V7}} end; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Core.Case.CaseTree.ConCase', V12, V13, V14, V15} -> begin (V21 = begin (V16 = V7), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'get'(V18)) end end(V17))), {'Prelude.Types.Right', V20} end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V100 = begin (V58 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V12, case V25 of {'Core.Context.MkDefs', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> V26 end))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V99 = case V62 of {'Prelude.Types.Just', V63} -> fun (V64) -> case V63 of {'Core.Context.Context.MkGlobalDef', V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86} -> case V82 of {'Core.Context.Context.DCon', V87, V88, V89} -> {'Prelude.Types.Right', {'Core.SchemeEval.Compile.nested--8708-3250--in--un--CON', V0, V1, V2, V3, V4, V5, V6, V7}}; {'Core.Context.Context.TCon', V90, V91, V92, V93, V94, V95, V96, V97} -> {'Prelude.Types.Right', {'Core.SchemeEval.Compile.nested--8708-3251--in--un--TYCON', V0, V1, V2, V3, V4, V5, V6, V7}}; _ -> {'Prelude.Types.Right', {'Core.SchemeEval.Compile.nested--8708-3250--in--un--CON', V0, V1, V2, V3, V4, V5, V6, V7}} end end end; {'Prelude.Types.Nothing'} -> fun (V98) -> {'Prelude.Types.Right', {'Core.SchemeEval.Compile.nested--8708-3251--in--un--TYCON', V0, V1, V2, V3, V4, V5, V6, V7}} end end), V99 end(V59)) end end end end), V100 end(V22)) end end end end; {'Core.Case.CaseTree.DelayCase', V101, V102, V103} -> fun (V104) -> {'Prelude.Types.Right', {'Core.SchemeEval.Compile.nested--8708-3252--in--un--DELAY', V0, V1, V2, V3, V4, V5, V6, V7}} end; {'Core.Case.CaseTree.ConstCase', V105, V106} -> fun (V107) -> {'Prelude.Types.Right', {'Core.SchemeEval.Compile.nested--8708-3253--in--un--CONST', V0, V1, V2, V3, V4, V5, V6, V7}} end; {'Core.Case.CaseTree.DefaultCase', V108} -> ('nested--8708-3254--in--un--caseType'(V0, V1, V2, V3, V4, V5, V6, V7, V11)) end end(E0, E1)) end.
'nested--8753-3808--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V13 = ('un--extend'(V0, V11, V5))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V39 = case V17 of {'Builtin.MkPair', V18, V19} -> begin (V20 = ('un--compileCase'(V0, V7, V6, V19, V12))), ((begin (V36 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V33, V34, V35)) end end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end((begin (V28 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> {'Prelude.Types.Right', (V24(V27))} end end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V21) -> ('nested--8753-3807--in--un--project'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, 5, V10, V18, V21)) end))))(V20)) end end), V39 end(V14)) end end end end.
'nested--8752-3587--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V13 = ('un--extend'(V0, V11, V5))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V39 = case V17 of {'Builtin.MkPair', V18, V19} -> begin (V20 = ('un--compileCase'(V0, V7, V6, V19, V12))), ((begin (V36 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V33, V34, V35)) end end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end((begin (V28 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> {'Prelude.Types.Right', (V24(V27))} end end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V21) -> ('nested--8752-3586--in--un--project'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, 3, V10, V18, V21)) end))))(V20)) end end), V39 end(V14)) end end end end.
'nested--8753-3810--in--un--addPiMatch'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of [] -> fun (V13) -> {'Prelude.Types.Right', V12} end; [E0 | E1] -> (fun (V14, V15) -> case V14 of {'Core.Case.CaseTree.ConCase', V16, V17, V18, V19} -> case V16 of {'Core.Name.UN', V20} -> case V20 of {'Core.Name.Basic', V21} -> case V21 of <<"->"/utf8>> -> case V18 of [E2 | E3] -> (fun (V22, V23) -> case V23 of [E4 | E5] -> (fun (V24, V25) -> case V25 of [] -> begin (V26 = ('un--getArgName'(V0))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V45 = begin (V31 = ('un--getArgName'(V0))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V44 = begin (V36 = {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', ('un--schVarName'(V30))}, {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', ('un--schVarName'(V35))}, V5}}), begin (V37 = ('un--compileCase'(V0, V7, V6, V36, V19))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V43 = fun (V42) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.If', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-isPi"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V10} | []]}, {'Libraries.Utils.Scheme.Let', ('un--schVarName'(V30)), {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"vector-ref"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V10} | [{'Libraries.Utils.Scheme.IntegerVal', 4} | []]]}, {'Libraries.Utils.Scheme.Let', ('un--schVarName'(V35)), {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"vector-ref"/utf8>>}, [{'Libraries.Utils.Scheme.Var', V10} | [{'Libraries.Utils.Scheme.IntegerVal', 1} | []]]}, V41}}, V12}} end), V43 end(V38)) end end end end end), V44 end(V32)) end end end end), V45 end(V27)) end end end end; _ -> ('nested--8753-3810--in--un--addPiMatch'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V12)) end end(E4, E5)); _ -> ('nested--8753-3810--in--un--addPiMatch'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V12)) end end(E2, E3)); _ -> ('nested--8753-3810--in--un--addPiMatch'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V12)) end; _ -> ('nested--8753-3810--in--un--addPiMatch'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V12)) end; _ -> ('nested--8753-3810--in--un--addPiMatch'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V12)) end; _ -> ('nested--8753-3810--in--un--addPiMatch'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V12)) end; _ -> ('nested--8753-3810--in--un--addPiMatch'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V12)) end end(E0, E1)) end.
'dn--un--show_Show_SVar'(V0) -> case V0 of {'Core.SchemeEval.Compile.Bound', V1} -> V1; {'Core.SchemeEval.Compile.Free', V2} -> <<<<"\x{27}"/utf8>>/binary, V2/binary>> end.
'un--varObjs'(V0) -> case V0 of {'Core.SchemeEval.Compile.Nil'} -> []; {'Core.SchemeEval.Compile.::', V1, V2} -> [{'Libraries.Utils.Scheme.Var', ('dn--un--show_Show_SVar'(V1))} | ('un--varObjs'(V2))] end.
'un--unload'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> ('un--unload'({'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-app"/utf8>>}, [V0 | [V2 | []]]}, V3)) end(E0, E1)) end.
'un--schVarUN'(V0) -> case V0 of {'Core.Name.Basic', V1} -> ('un--schString'(V1)); {'Core.Name.Field', V2} -> <<<<"rf--"/utf8>>/binary, ('un--schString'(V2))/binary>>; {'Core.Name.Underscore'} -> <<"_US_"/utf8>> end.
'un--schVarName'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> case V2 of {'Core.Name.UN', V3} -> <<('un--schString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"-"/utf8>>, V1))))/binary, <<<<"-"/utf8>>/binary, ('un--schVarUN'(V3))/binary>>/binary>>; _ -> <<('un--schString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"-"/utf8>>, V1))))/binary, <<<<"-"/utf8>>/binary, ('un--schVarName'(V2))/binary>>/binary>> end; {'Core.Name.UN', V4} -> <<<<"u--"/utf8>>/binary, ('un--schVarUN'(V4))/binary>>; {'Core.Name.MN', V5, V6} -> <<('un--schString'(V5))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6))/binary>>/binary>>; {'Core.Name.PV', V7, V8} -> <<<<"pat--"/utf8>>/binary, ('un--schVarName'(V7))/binary>>; {'Core.Name.DN', V9, V10} -> ('un--schVarName'(V10)); {'Core.Name.Nested', V11, V12} -> case V11 of {'Builtin.MkPair', V13, V14} -> <<<<"n--"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13))/binary, <<<<"-"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V14))/binary, <<<<"-"/utf8>>/binary, ('un--schVarName'(V12))/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Core.Name.CaseBlock', V15, V16} -> <<<<"case--"/utf8>>/binary, <<('un--schString'(V15))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V16))/binary>>/binary>>/binary>>; {'Core.Name.WithBlock', V17, V18} -> <<<<"with--"/utf8>>/binary, <<('un--schString'(V17))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18))/binary>>/binary>>/binary>>; {'Core.Name.Resolved', V19} -> <<<<"fn--"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19))/binary>> end.
'un--schString'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> <<V1/binary, V2/binary>> end end, <<""/utf8>>}, fun (V3) -> ('nested--6592-886--in--un--okchar'(V0, V3)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))).
'un--schName'(V0) -> <<<<"ct-"/utf8>>/binary, ('un--schVarName'(V0))/binary>>.
'un--nextName'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V23 = begin (V16 = begin (V11 = V0), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, (V10 + 1))) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', V10} end), V22 end(V17)) end end end end), V23 end(V7)) end end end end.
'un--mkArgs'(V0) -> case V0 of [] -> fun (V1) -> {'Prelude.Types.Right', {'Core.SchemeEval.Compile.Nil'}} end; [E0 | E1] -> (fun (V2, V3) -> begin (V4 = ('un--mkArgs'(V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V10 = fun (V9) -> {'Prelude.Types.Right', {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', ('un--schVarName'(V2))}, V8}} end), V10 end(V5)) end end end end end(E0, E1)) end.
'un--initialiseSchemeEval'(V0) -> ('un--initEvalWith'(V0, ('Idris.Idris2.System.Info':'un--codegen'()))).
'un--initEvalWith'(V0, V1) -> case V1 of <<"chez"/utf8>> -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V107 = case case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V42 end of 1 -> fun (V44) -> {'Prelude.Types.Right', 1} end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V45 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"chez/ct-support.ss"/utf8>>))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V104 = begin (V52 = fun (V50) -> begin (V51 = (('Idris.Idris2.Libraries.Utils.Scheme':'un--evalSchemeStr'(<<<<"(begin "/utf8>>/binary, <<V49/binary, <<")"/utf8>>/binary>>/binary>>))(V50))), {'Prelude.Types.Right', V51} end end), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V103 = case V56 of {'Prelude.Types.Just', V57} -> begin (V95 = begin (V58 = V0), fun (V59) -> begin (V94 = (begin (V60 = V58), fun (V61) -> ('erlang':'put'(V60, case V11 of {'Core.Context.MkDefs', V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93} -> {'Core.Context.MkDefs', V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, 1, V93} end)) end end(V59))), {'Prelude.Types.Right', V94} end end end), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V101 = fun (V100) -> {'Prelude.Types.Right', 1} end), V101 end(V96)) end end end end; {'Prelude.Types.Nothing'} -> fun (V102) -> {'Prelude.Types.Right', 0} end end), V103 end(V53)) end end end end), V104 end(V46)) end end end end, fun (V105) -> fun (V106) -> {'Prelude.Types.Right', 0} end end)) end), V107 end(V8)) end end end end; <<"racket"/utf8>> -> begin (V113 = begin (V108 = V0), fun (V109) -> begin (V112 = (begin (V110 = V108), fun (V111) -> ('erlang':'get'(V110)) end end(V109))), {'Prelude.Types.Right', V112} end end end), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V221 = case case V117 of {'Core.Context.MkDefs', V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149} -> V148 end of 1 -> fun (V150) -> {'Prelude.Types.Right', 1} end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V151 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"racket/ct-support.rkt"/utf8>>))), fun (V152) -> begin (V153 = (V151(V152))), case V153 of {'Prelude.Types.Left', V154} -> {'Prelude.Types.Left', V154}; {'Prelude.Types.Right', V155} -> (begin (V210 = begin (V158 = fun (V156) -> begin (V157 = (('Idris.Idris2.Libraries.Utils.Scheme':'un--evalSchemeStr'(<<<<"(begin "/utf8>>/binary, <<V155/binary, <<")"/utf8>>/binary>>/binary>>))(V156))), {'Prelude.Types.Right', V157} end end), fun (V159) -> begin (V160 = (V158(V159))), case V160 of {'Prelude.Types.Left', V161} -> {'Prelude.Types.Left', V161}; {'Prelude.Types.Right', V162} -> (begin (V209 = case V162 of {'Prelude.Types.Just', V163} -> begin (V201 = begin (V164 = V0), fun (V165) -> begin (V200 = (begin (V166 = V164), fun (V167) -> ('erlang':'put'(V166, case V117 of {'Core.Context.MkDefs', V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199} -> {'Core.Context.MkDefs', V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, 1, V199} end)) end end(V165))), {'Prelude.Types.Right', V200} end end end), fun (V202) -> begin (V203 = (V201(V202))), case V203 of {'Prelude.Types.Left', V204} -> {'Prelude.Types.Left', V204}; {'Prelude.Types.Right', V205} -> (begin (V207 = fun (V206) -> {'Prelude.Types.Right', 1} end), V207 end(V202)) end end end end; {'Prelude.Types.Nothing'} -> fun (V208) -> {'Prelude.Types.Right', 0} end end), V209 end(V159)) end end end end), V210 end(V152)) end end end end, fun (V211) -> begin (V214 = fun (V212) -> begin (V213 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V211))/binary, <<"\x{a}"/utf8>>/binary>>, V212))), {'Prelude.Types.Right', V213} end end), fun (V215) -> begin (V216 = (V214(V215))), case V216 of {'Prelude.Types.Left', V217} -> {'Prelude.Types.Left', V217}; {'Prelude.Types.Right', V218} -> (begin (V220 = fun (V219) -> {'Prelude.Types.Right', 0} end), V220 end(V215)) end end end end end)) end), V221 end(V114)) end end end end; _ -> fun (V222) -> {'Prelude.Types.Right', 0} end end.
'un--getSchVar'(V0, V1) -> case V0 of 0 -> case V1 of {'Core.SchemeEval.Compile.::', V2, V3} -> case V2 of {'Core.SchemeEval.Compile.Bound', V4} -> V4; {'Core.SchemeEval.Compile.Free', V5} -> <<<<"\x{27}"/utf8>>/binary, V5/binary>> end end; _ -> begin (V6 = (V0 - 1)), case V1 of {'Core.SchemeEval.Compile.::', V7, V8} -> ('un--getSchVar'(V6, V8)) end end end.
'un--getName'(V0) -> case V0 of {'Core.SchemeEval.Compile.Bound', V1} -> V1; {'Core.SchemeEval.Compile.Free', V2} -> V2 end.
'un--getArgName'(V0) -> begin (V1 = ('un--nextName'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V8 = fun (V6) -> {'Prelude.Types.Right', {'Core.Name.MN', <<"carg"/utf8>>, begin (V7 = V5), case ((V7 band 9223372036854775808) =/= 0) of 'true' -> (V7 bor -9223372036854775808); _ -> (V7 band 9223372036854775807) end end}} end), V8 end(V2)) end end end end.
'un--extend'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], V2}} end; [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ('un--getArgName'(V0))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V20 = begin (V11 = ('un--extend'(V0, V5, V2))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V19 = fun (V16) -> case V15 of {'Builtin.MkPair', V17, V18} -> {'Prelude.Types.Right', {'Builtin.MkPair', [V10 | V17], {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', ('un--schVarName'(V10))}, V18}}} end end), V19 end(V12)) end end end end), V20 end(V7)) end end end end end(E0, E1)) end.
'un--compileWhyErased'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Impossible'} -> fun (V5) -> {'Prelude.Types.Right', {'Core.TT.Impossible'}} end; {'Core.TT.Placeholder'} -> fun (V6) -> {'Prelude.Types.Right', {'Core.TT.Placeholder'}} end; {'Core.TT.Dotted', V7} -> begin (V8 = ('un--compileStk'(V0, V1, V2, V3, V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V14 = fun (V13) -> {'Prelude.Types.Right', {'Core.TT.Dotted', V12}} end), V14 end(V9)) end end end end end.
'un--compileStk'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Local', V5, V6, V7} -> fun (V8) -> {'Prelude.Types.Right', ('un--unload'({'Libraries.Utils.Scheme.Var', ('un--getSchVar'(V7, V2))}, V3))} end; {'Core.TT.Ref', V9, V10, V11} -> case V10 of {'Core.TT.Bound'} -> fun (V12) -> {'Prelude.Types.Right', ('un--unload'({'Libraries.Utils.Scheme.Symbol', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11))}, V3))} end; {'Core.TT.DataCon', V13, V14} -> case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V3)) =:= V14) of 'false' -> 0; _ -> 1 end of 1 -> begin (V20 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V17, V18, V19)) end end end}, V11))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V26 = fun (V25) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', V13, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V24)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V9)) | V3]]}} end), V26 end(V21)) end end end end; 0 -> fun (V27) -> {'Prelude.Types.Right', ('un--unload'({'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', ('un--schName'(V11))}, []}, V3))} end end; {'Core.TT.TyCon', V28, V29} -> case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V3)) =:= V29) of 'false' -> 0; _ -> 1 end of 1 -> begin (V35 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V32, V33, V34)) end end end}, V11))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V41 = fun (V40) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -1, [{'Libraries.Utils.Scheme.IntegerVal', V28} | [{'Libraries.Utils.Scheme.StringVal', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11))} | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V39)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V9)) | V3]]]]}} end), V41 end(V36)) end end end end; 0 -> fun (V42) -> {'Prelude.Types.Right', ('un--unload'({'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', ('un--schName'(V11))}, []}, V3))} end end; _ -> fun (V43) -> {'Prelude.Types.Right', ('un--unload'({'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', ('un--schName'(V11))}, []}, V3))} end end; {'Core.TT.Meta', V44, V45, V46, V47} -> begin (V49 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V48) -> ('un--compileStk'(V0, V1, V2, V3, V48)) end, V47, []))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V55 = fun (V54) -> {'Prelude.Types.Right', ('un--unload'({'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', ('un--schName'(V45))}, []}, [{'Libraries.Utils.Scheme.IntegerVal', ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V47))} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, V53))]))} end), V55 end(V50)) end end end end; {'Core.TT.Bind', V56, V57, V58, V59} -> case V58 of {'Core.TT.Let', V60, V61, V62, V63} -> begin (V64 = ('un--nextName'(V0))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V83 = begin (V69 = <<('un--schVarName'(V57))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V68))/binary>>/binary>>), begin (V70 = ('un--compileStk'(V0, V1, V2, [], V62))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V82 = begin (V75 = ('un--compileStk'(V0, V1, {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', V69}, V2}, [], V59))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V81 = fun (V80) -> {'Prelude.Types.Right', ('un--unload'({'Libraries.Utils.Scheme.Let', V69, V74, V79}, V3))} end), V81 end(V76)) end end end end), V82 end(V71)) end end end end end), V83 end(V65)) end end end end; {'Core.TT.Pi', V84, V85, V86, V87} -> begin (V88 = ('un--nextName'(V0))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V113 = begin (V93 = <<('un--schVarName'(V57))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V92))/binary>>/binary>>), begin (V94 = ('un--compileStk'(V0, V1, V2, [], V87))), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V112 = begin (V99 = ('un--compileStk'(V0, V1, {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', V93}, V2}, [], V59))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V111 = begin (V104 = ('un--compilePiInfo'(V0, V1, V2, V86))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V110 = fun (V109) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -3, [{'Libraries.Utils.Scheme.Lambda', [V93 | []], V103} | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_RigCount'(V85)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemePi'(V108)) | [V98 | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V57)) | []]]]]]}} end), V110 end(V105)) end end end end), V111 end(V100)) end end end end), V112 end(V95)) end end end end end), V113 end(V89)) end end end end; {'Core.TT.PVar', V114, V115, V116, V117} -> begin (V118 = ('un--nextName'(V0))), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V143 = begin (V123 = <<('un--schVarName'(V57))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V122))/binary>>/binary>>), begin (V124 = ('un--compileStk'(V0, V1, V2, [], V117))), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V142 = begin (V129 = ('un--compileStk'(V0, V1, {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', V123}, V2}, [], V59))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V141 = begin (V134 = ('un--compilePiInfo'(V0, V1, V2, V116))), fun (V135) -> begin (V136 = (V134(V135))), case V136 of {'Prelude.Types.Left', V137} -> {'Prelude.Types.Left', V137}; {'Prelude.Types.Right', V138} -> (begin (V140 = fun (V139) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -12, [{'Libraries.Utils.Scheme.Lambda', [V123 | []], V133} | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_RigCount'(V115)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemePi'(V138)) | [V128 | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V57)) | []]]]]]}} end), V140 end(V135)) end end end end), V141 end(V130)) end end end end), V142 end(V125)) end end end end end), V143 end(V119)) end end end end; {'Core.TT.PVTy', V144, V145, V146} -> begin (V147 = ('un--nextName'(V0))), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V166 = begin (V152 = <<('un--schVarName'(V57))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V151))/binary>>/binary>>), begin (V153 = ('un--compileStk'(V0, V1, V2, [], V146))), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V165 = begin (V158 = ('un--compileStk'(V0, V1, {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', V152}, V2}, [], V59))), fun (V159) -> begin (V160 = (V158(V159))), case V160 of {'Prelude.Types.Left', V161} -> {'Prelude.Types.Left', V161}; {'Prelude.Types.Right', V162} -> (begin (V164 = fun (V163) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -13, [{'Libraries.Utils.Scheme.Lambda', [V152 | []], V162} | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_RigCount'(V145)) | [V157 | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V57)) | []]]]]}} end), V164 end(V159)) end end end end), V165 end(V154)) end end end end end), V166 end(V148)) end end end end; {'Core.TT.PLet', V167, V168, V169, V170} -> begin (V171 = ('un--nextName'(V0))), fun (V172) -> begin (V173 = (V171(V172))), case V173 of {'Prelude.Types.Left', V174} -> {'Prelude.Types.Left', V174}; {'Prelude.Types.Right', V175} -> (begin (V196 = begin (V176 = <<('un--schVarName'(V57))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V175))/binary>>/binary>>), begin (V177 = ('un--compileStk'(V0, V1, V2, [], V169))), fun (V178) -> begin (V179 = (V177(V178))), case V179 of {'Prelude.Types.Left', V180} -> {'Prelude.Types.Left', V180}; {'Prelude.Types.Right', V181} -> (begin (V195 = begin (V182 = ('un--compileStk'(V0, V1, V2, [], V170))), fun (V183) -> begin (V184 = (V182(V183))), case V184 of {'Prelude.Types.Left', V185} -> {'Prelude.Types.Left', V185}; {'Prelude.Types.Right', V186} -> (begin (V194 = begin (V187 = ('un--compileStk'(V0, V1, {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', V176}, V2}, [], V59))), fun (V188) -> begin (V189 = (V187(V188))), case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> (begin (V193 = fun (V192) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -14, [{'Libraries.Utils.Scheme.Lambda', [V176 | []], V191} | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_RigCount'(V168)) | [V181 | [V186 | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V57)) | []]]]]]}} end), V193 end(V188)) end end end end), V194 end(V183)) end end end end), V195 end(V178)) end end end end end), V196 end(V172)) end end end end; _ -> case V3 of [] -> case V4 of {'Core.TT.Bind', V197, V198, V199, V200} -> case V199 of {'Core.TT.Lam', V201, V202, V203, V204} -> begin (V205 = ('un--nextName'(V0))), fun (V206) -> begin (V207 = (V205(V206))), case V207 of {'Prelude.Types.Left', V208} -> {'Prelude.Types.Left', V208}; {'Prelude.Types.Right', V209} -> (begin (V230 = begin (V210 = <<('un--schVarName'(V198))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V209))/binary>>/binary>>), begin (V211 = ('un--compileStk'(V0, V1, V2, [], V204))), fun (V212) -> begin (V213 = (V211(V212))), case V213 of {'Prelude.Types.Left', V214} -> {'Prelude.Types.Left', V214}; {'Prelude.Types.Right', V215} -> (begin (V229 = begin (V216 = ('un--compileStk'(V0, V1, {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', V210}, V2}, [], V200))), fun (V217) -> begin (V218 = (V216(V217))), case V218 of {'Prelude.Types.Left', V219} -> {'Prelude.Types.Left', V219}; {'Prelude.Types.Right', V220} -> (begin (V228 = begin (V221 = ('un--compilePiInfo'(V0, V1, V2, V203))), fun (V222) -> begin (V223 = (V221(V222))), case V223 of {'Prelude.Types.Left', V224} -> {'Prelude.Types.Left', V224}; {'Prelude.Types.Right', V225} -> (begin (V227 = fun (V226) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -8, [{'Libraries.Utils.Scheme.Lambda', [V210 | []], V220} | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_RigCount'(V202)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemePi'(V225)) | [V215 | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V198)) | []]]]]]}} end), V227 end(V222)) end end end end), V228 end(V217)) end end end end), V229 end(V212)) end end end end end), V230 end(V206)) end end end end; _ -> case V4 of {'Core.TT.App', V231, V232, V233} -> begin (V234 = ('un--compileStk'(V0, V1, V2, [], V233))), fun (V235) -> begin (V236 = (V234(V235))), case V236 of {'Prelude.Types.Left', V237} -> {'Prelude.Types.Left', V237}; {'Prelude.Types.Right', V238} -> (begin (V239 = ('un--compileStk'(V0, V1, V2, [V238 | V3], V232))), V239 end(V235)) end end end end; {'Core.TT.As', V240, V241, V242, V243} -> ('un--compileStk'(V0, V1, V2, V3, V243)); {'Core.TT.TDelayed', V244, V245, V246} -> begin (V247 = ('un--compileStk'(V0, V1, V2, V3, V246))), fun (V248) -> begin (V249 = (V247(V248))), case V249 of {'Prelude.Types.Left', V250} -> {'Prelude.Types.Left', V250}; {'Prelude.Types.Right', V251} -> (begin (V253 = fun (V252) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -15, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V245)) | [V251 | []]]}} end), V253 end(V248)) end end end end; {'Core.TT.TDelay', V254, V255, V256, V257} -> begin (V258 = ('un--compileStk'(V0, V1, V2, [], V256))), fun (V259) -> begin (V260 = (V258(V259))), case V260 of {'Prelude.Types.Left', V261} -> {'Prelude.Types.Left', V261}; {'Prelude.Types.Right', V262} -> (begin (V270 = begin (V263 = ('un--compileStk'(V0, V1, V2, [], V257))), fun (V264) -> begin (V265 = (V263(V264))), case V265 of {'Prelude.Types.Left', V266} -> {'Prelude.Types.Left', V266}; {'Prelude.Types.Right', V267} -> (begin (V269 = fun (V268) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -4, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V255)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V254)) | [{'Libraries.Utils.Scheme.Lambda', [], V262} | [{'Libraries.Utils.Scheme.Lambda', [], V267} | []]]]]}} end), V269 end(V264)) end end end end), V270 end(V259)) end end end end; {'Core.TT.TForce', V271, V272, V273} -> begin (V274 = ('un--compileStk'(V0, V1, V2, [], V273))), fun (V275) -> begin (V276 = (V274(V275))), case V276 of {'Prelude.Types.Left', V277} -> {'Prelude.Types.Left', V277}; {'Prelude.Types.Right', V278} -> (begin (V280 = fun (V279) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-doForce"/utf8>>}, [V278 | [{'Libraries.Utils.Scheme.Vector', -5, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V272)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V271)) | [{'Libraries.Utils.Scheme.Lambda', [], V278} | []]]]} | []]]}} end), V280 end(V275)) end end end end; {'Core.TT.PrimVal', V281, V282} -> fun (V283) -> {'Prelude.Types.Right', ('un--compileConstant'(V281, V282))} end; {'Core.TT.Erased', V284, V285} -> begin (V286 = ('un--compileWhyErased'(V0, V1, V2, V3, V285))), fun (V287) -> begin (V288 = (V286(V287))), case V288 of {'Prelude.Types.Left', V289} -> {'Prelude.Types.Left', V289}; {'Prelude.Types.Right', V290} -> (begin (V292 = fun (V291) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -6, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V284)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemeWhy'(V290)) | []]]}} end), V292 end(V287)) end end end end; {'Core.TT.TType', V293, V294} -> fun (V295) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -7, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V293)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V294)) | []]]}} end end end; _ -> case V4 of {'Core.TT.App', V296, V297, V298} -> begin (V299 = ('un--compileStk'(V0, V1, V2, [], V298))), fun (V300) -> begin (V301 = (V299(V300))), case V301 of {'Prelude.Types.Left', V302} -> {'Prelude.Types.Left', V302}; {'Prelude.Types.Right', V303} -> (begin (V304 = ('un--compileStk'(V0, V1, V2, [V303 | V3], V297))), V304 end(V300)) end end end end; {'Core.TT.As', V305, V306, V307, V308} -> ('un--compileStk'(V0, V1, V2, V3, V308)); {'Core.TT.TDelayed', V309, V310, V311} -> begin (V312 = ('un--compileStk'(V0, V1, V2, V3, V311))), fun (V313) -> begin (V314 = (V312(V313))), case V314 of {'Prelude.Types.Left', V315} -> {'Prelude.Types.Left', V315}; {'Prelude.Types.Right', V316} -> (begin (V318 = fun (V317) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -15, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V310)) | [V316 | []]]}} end), V318 end(V313)) end end end end; {'Core.TT.TDelay', V319, V320, V321, V322} -> begin (V323 = ('un--compileStk'(V0, V1, V2, [], V321))), fun (V324) -> begin (V325 = (V323(V324))), case V325 of {'Prelude.Types.Left', V326} -> {'Prelude.Types.Left', V326}; {'Prelude.Types.Right', V327} -> (begin (V335 = begin (V328 = ('un--compileStk'(V0, V1, V2, [], V322))), fun (V329) -> begin (V330 = (V328(V329))), case V330 of {'Prelude.Types.Left', V331} -> {'Prelude.Types.Left', V331}; {'Prelude.Types.Right', V332} -> (begin (V334 = fun (V333) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -4, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V320)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V319)) | [{'Libraries.Utils.Scheme.Lambda', [], V327} | [{'Libraries.Utils.Scheme.Lambda', [], V332} | []]]]]}} end), V334 end(V329)) end end end end), V335 end(V324)) end end end end; {'Core.TT.TForce', V336, V337, V338} -> begin (V339 = ('un--compileStk'(V0, V1, V2, [], V338))), fun (V340) -> begin (V341 = (V339(V340))), case V341 of {'Prelude.Types.Left', V342} -> {'Prelude.Types.Left', V342}; {'Prelude.Types.Right', V343} -> (begin (V345 = fun (V344) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-doForce"/utf8>>}, [V343 | [{'Libraries.Utils.Scheme.Vector', -5, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V337)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V336)) | [{'Libraries.Utils.Scheme.Lambda', [], V343} | []]]]} | []]]}} end), V345 end(V340)) end end end end; {'Core.TT.PrimVal', V346, V347} -> fun (V348) -> {'Prelude.Types.Right', ('un--compileConstant'(V346, V347))} end; {'Core.TT.Erased', V349, V350} -> begin (V351 = ('un--compileWhyErased'(V0, V1, V2, V3, V350))), fun (V352) -> begin (V353 = (V351(V352))), case V353 of {'Prelude.Types.Left', V354} -> {'Prelude.Types.Left', V354}; {'Prelude.Types.Right', V355} -> (begin (V357 = fun (V356) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -6, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V349)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemeWhy'(V355)) | []]]}} end), V357 end(V352)) end end end end; {'Core.TT.TType', V358, V359} -> fun (V360) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -7, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V358)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V359)) | []]]}} end end end; [E2 | E3] -> (fun (V361, V362) -> case V4 of {'Core.TT.Bind', V363, V364, V365, V366} -> case V365 of {'Core.TT.Lam', V367, V368, V369, V370} -> begin (V371 = ('un--nextName'(V0))), fun (V372) -> begin (V373 = (V371(V372))), case V373 of {'Prelude.Types.Left', V374} -> {'Prelude.Types.Left', V374}; {'Prelude.Types.Right', V375} -> (begin (V384 = begin (V376 = <<('un--schVarName'(V364))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V375))/binary>>/binary>>), begin (V377 = ('un--compileStk'(V0, V1, {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', V376}, V2}, V362, V366))), fun (V378) -> begin (V379 = (V377(V378))), case V379 of {'Prelude.Types.Left', V380} -> {'Prelude.Types.Left', V380}; {'Prelude.Types.Right', V381} -> (begin (V383 = fun (V382) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Lambda', [V376 | []], V381}, [V361 | []]}} end), V383 end(V378)) end end end end end), V384 end(V372)) end end end end; _ -> case V4 of {'Core.TT.App', V385, V386, V387} -> begin (V388 = ('un--compileStk'(V0, V1, V2, [], V387))), fun (V389) -> begin (V390 = (V388(V389))), case V390 of {'Prelude.Types.Left', V391} -> {'Prelude.Types.Left', V391}; {'Prelude.Types.Right', V392} -> (begin (V393 = ('un--compileStk'(V0, V1, V2, [V392 | V3], V386))), V393 end(V389)) end end end end; {'Core.TT.As', V394, V395, V396, V397} -> ('un--compileStk'(V0, V1, V2, V3, V397)); {'Core.TT.TDelayed', V398, V399, V400} -> begin (V401 = ('un--compileStk'(V0, V1, V2, V3, V400))), fun (V402) -> begin (V403 = (V401(V402))), case V403 of {'Prelude.Types.Left', V404} -> {'Prelude.Types.Left', V404}; {'Prelude.Types.Right', V405} -> (begin (V407 = fun (V406) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -15, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V399)) | [V405 | []]]}} end), V407 end(V402)) end end end end; {'Core.TT.TDelay', V408, V409, V410, V411} -> begin (V412 = ('un--compileStk'(V0, V1, V2, [], V410))), fun (V413) -> begin (V414 = (V412(V413))), case V414 of {'Prelude.Types.Left', V415} -> {'Prelude.Types.Left', V415}; {'Prelude.Types.Right', V416} -> (begin (V424 = begin (V417 = ('un--compileStk'(V0, V1, V2, [], V411))), fun (V418) -> begin (V419 = (V417(V418))), case V419 of {'Prelude.Types.Left', V420} -> {'Prelude.Types.Left', V420}; {'Prelude.Types.Right', V421} -> (begin (V423 = fun (V422) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -4, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V409)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V408)) | [{'Libraries.Utils.Scheme.Lambda', [], V416} | [{'Libraries.Utils.Scheme.Lambda', [], V421} | []]]]]}} end), V423 end(V418)) end end end end), V424 end(V413)) end end end end; {'Core.TT.TForce', V425, V426, V427} -> begin (V428 = ('un--compileStk'(V0, V1, V2, [], V427))), fun (V429) -> begin (V430 = (V428(V429))), case V430 of {'Prelude.Types.Left', V431} -> {'Prelude.Types.Left', V431}; {'Prelude.Types.Right', V432} -> (begin (V434 = fun (V433) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-doForce"/utf8>>}, [V432 | [{'Libraries.Utils.Scheme.Vector', -5, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V426)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V425)) | [{'Libraries.Utils.Scheme.Lambda', [], V432} | []]]]} | []]]}} end), V434 end(V429)) end end end end; {'Core.TT.PrimVal', V435, V436} -> fun (V437) -> {'Prelude.Types.Right', ('un--compileConstant'(V435, V436))} end; {'Core.TT.Erased', V438, V439} -> begin (V440 = ('un--compileWhyErased'(V0, V1, V2, V3, V439))), fun (V441) -> begin (V442 = (V440(V441))), case V442 of {'Prelude.Types.Left', V443} -> {'Prelude.Types.Left', V443}; {'Prelude.Types.Right', V444} -> (begin (V446 = fun (V445) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -6, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V438)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemeWhy'(V444)) | []]]}} end), V446 end(V441)) end end end end; {'Core.TT.TType', V447, V448} -> fun (V449) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -7, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V447)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V448)) | []]]}} end end end; _ -> case V4 of {'Core.TT.App', V450, V451, V452} -> begin (V453 = ('un--compileStk'(V0, V1, V2, [], V452))), fun (V454) -> begin (V455 = (V453(V454))), case V455 of {'Prelude.Types.Left', V456} -> {'Prelude.Types.Left', V456}; {'Prelude.Types.Right', V457} -> (begin (V458 = ('un--compileStk'(V0, V1, V2, [V457 | V3], V451))), V458 end(V454)) end end end end; {'Core.TT.As', V459, V460, V461, V462} -> ('un--compileStk'(V0, V1, V2, V3, V462)); {'Core.TT.TDelayed', V463, V464, V465} -> begin (V466 = ('un--compileStk'(V0, V1, V2, V3, V465))), fun (V467) -> begin (V468 = (V466(V467))), case V468 of {'Prelude.Types.Left', V469} -> {'Prelude.Types.Left', V469}; {'Prelude.Types.Right', V470} -> (begin (V472 = fun (V471) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -15, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V464)) | [V470 | []]]}} end), V472 end(V467)) end end end end; {'Core.TT.TDelay', V473, V474, V475, V476} -> begin (V477 = ('un--compileStk'(V0, V1, V2, [], V475))), fun (V478) -> begin (V479 = (V477(V478))), case V479 of {'Prelude.Types.Left', V480} -> {'Prelude.Types.Left', V480}; {'Prelude.Types.Right', V481} -> (begin (V489 = begin (V482 = ('un--compileStk'(V0, V1, V2, [], V476))), fun (V483) -> begin (V484 = (V482(V483))), case V484 of {'Prelude.Types.Left', V485} -> {'Prelude.Types.Left', V485}; {'Prelude.Types.Right', V486} -> (begin (V488 = fun (V487) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -4, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V474)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V473)) | [{'Libraries.Utils.Scheme.Lambda', [], V481} | [{'Libraries.Utils.Scheme.Lambda', [], V486} | []]]]]}} end), V488 end(V483)) end end end end), V489 end(V478)) end end end end; {'Core.TT.TForce', V490, V491, V492} -> begin (V493 = ('un--compileStk'(V0, V1, V2, [], V492))), fun (V494) -> begin (V495 = (V493(V494))), case V495 of {'Prelude.Types.Left', V496} -> {'Prelude.Types.Left', V496}; {'Prelude.Types.Right', V497} -> (begin (V499 = fun (V498) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-doForce"/utf8>>}, [V497 | [{'Libraries.Utils.Scheme.Vector', -5, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V491)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V490)) | [{'Libraries.Utils.Scheme.Lambda', [], V497} | []]]]} | []]]}} end), V499 end(V494)) end end end end; {'Core.TT.PrimVal', V500, V501} -> fun (V502) -> {'Prelude.Types.Right', ('un--compileConstant'(V500, V501))} end; {'Core.TT.Erased', V503, V504} -> begin (V505 = ('un--compileWhyErased'(V0, V1, V2, V3, V504))), fun (V506) -> begin (V507 = (V505(V506))), case V507 of {'Prelude.Types.Left', V508} -> {'Prelude.Types.Left', V508}; {'Prelude.Types.Right', V509} -> (begin (V511 = fun (V510) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -6, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V503)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemeWhy'(V509)) | []]]}} end), V511 end(V506)) end end end end; {'Core.TT.TType', V512, V513} -> fun (V514) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -7, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V512)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V513)) | []]]}} end end end end(E2, E3)); _ -> case V4 of {'Core.TT.App', V515, V516, V517} -> begin (V518 = ('un--compileStk'(V0, V1, V2, [], V517))), fun (V519) -> begin (V520 = (V518(V519))), case V520 of {'Prelude.Types.Left', V521} -> {'Prelude.Types.Left', V521}; {'Prelude.Types.Right', V522} -> (begin (V523 = ('un--compileStk'(V0, V1, V2, [V522 | V3], V516))), V523 end(V519)) end end end end; {'Core.TT.As', V524, V525, V526, V527} -> ('un--compileStk'(V0, V1, V2, V3, V527)); {'Core.TT.TDelayed', V528, V529, V530} -> begin (V531 = ('un--compileStk'(V0, V1, V2, V3, V530))), fun (V532) -> begin (V533 = (V531(V532))), case V533 of {'Prelude.Types.Left', V534} -> {'Prelude.Types.Left', V534}; {'Prelude.Types.Right', V535} -> (begin (V537 = fun (V536) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -15, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V529)) | [V535 | []]]}} end), V537 end(V532)) end end end end; {'Core.TT.TDelay', V538, V539, V540, V541} -> begin (V542 = ('un--compileStk'(V0, V1, V2, [], V540))), fun (V543) -> begin (V544 = (V542(V543))), case V544 of {'Prelude.Types.Left', V545} -> {'Prelude.Types.Left', V545}; {'Prelude.Types.Right', V546} -> (begin (V554 = begin (V547 = ('un--compileStk'(V0, V1, V2, [], V541))), fun (V548) -> begin (V549 = (V547(V548))), case V549 of {'Prelude.Types.Left', V550} -> {'Prelude.Types.Left', V550}; {'Prelude.Types.Right', V551} -> (begin (V553 = fun (V552) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -4, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V539)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V538)) | [{'Libraries.Utils.Scheme.Lambda', [], V546} | [{'Libraries.Utils.Scheme.Lambda', [], V551} | []]]]]}} end), V553 end(V548)) end end end end), V554 end(V543)) end end end end; {'Core.TT.TForce', V555, V556, V557} -> begin (V558 = ('un--compileStk'(V0, V1, V2, [], V557))), fun (V559) -> begin (V560 = (V558(V559))), case V560 of {'Prelude.Types.Left', V561} -> {'Prelude.Types.Left', V561}; {'Prelude.Types.Right', V562} -> (begin (V564 = fun (V563) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-doForce"/utf8>>}, [V562 | [{'Libraries.Utils.Scheme.Vector', -5, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V556)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V555)) | [{'Libraries.Utils.Scheme.Lambda', [], V562} | []]]]} | []]]}} end), V564 end(V559)) end end end end; {'Core.TT.PrimVal', V565, V566} -> fun (V567) -> {'Prelude.Types.Right', ('un--compileConstant'(V565, V566))} end; {'Core.TT.Erased', V568, V569} -> begin (V570 = ('un--compileWhyErased'(V0, V1, V2, V3, V569))), fun (V571) -> begin (V572 = (V570(V571))), case V572 of {'Prelude.Types.Left', V573} -> {'Prelude.Types.Left', V573}; {'Prelude.Types.Right', V574} -> (begin (V576 = fun (V575) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -6, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V568)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemeWhy'(V574)) | []]]}} end), V576 end(V571)) end end end end; {'Core.TT.TType', V577, V578} -> fun (V579) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -7, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V577)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V578)) | []]]}} end end end end; _ -> case V3 of [] -> case V4 of {'Core.TT.Bind', V580, V581, V582, V583} -> case V582 of {'Core.TT.Lam', V584, V585, V586, V587} -> begin (V588 = ('un--nextName'(V0))), fun (V589) -> begin (V590 = (V588(V589))), case V590 of {'Prelude.Types.Left', V591} -> {'Prelude.Types.Left', V591}; {'Prelude.Types.Right', V592} -> (begin (V613 = begin (V593 = <<('un--schVarName'(V581))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V592))/binary>>/binary>>), begin (V594 = ('un--compileStk'(V0, V1, V2, [], V587))), fun (V595) -> begin (V596 = (V594(V595))), case V596 of {'Prelude.Types.Left', V597} -> {'Prelude.Types.Left', V597}; {'Prelude.Types.Right', V598} -> (begin (V612 = begin (V599 = ('un--compileStk'(V0, V1, {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', V593}, V2}, [], V583))), fun (V600) -> begin (V601 = (V599(V600))), case V601 of {'Prelude.Types.Left', V602} -> {'Prelude.Types.Left', V602}; {'Prelude.Types.Right', V603} -> (begin (V611 = begin (V604 = ('un--compilePiInfo'(V0, V1, V2, V586))), fun (V605) -> begin (V606 = (V604(V605))), case V606 of {'Prelude.Types.Left', V607} -> {'Prelude.Types.Left', V607}; {'Prelude.Types.Right', V608} -> (begin (V610 = fun (V609) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -8, [{'Libraries.Utils.Scheme.Lambda', [V593 | []], V603} | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_RigCount'(V585)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemePi'(V608)) | [V598 | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V581)) | []]]]]]}} end), V610 end(V605)) end end end end), V611 end(V600)) end end end end), V612 end(V595)) end end end end end), V613 end(V589)) end end end end; _ -> case V4 of {'Core.TT.App', V614, V615, V616} -> begin (V617 = ('un--compileStk'(V0, V1, V2, [], V616))), fun (V618) -> begin (V619 = (V617(V618))), case V619 of {'Prelude.Types.Left', V620} -> {'Prelude.Types.Left', V620}; {'Prelude.Types.Right', V621} -> (begin (V622 = ('un--compileStk'(V0, V1, V2, [V621 | V3], V615))), V622 end(V618)) end end end end; {'Core.TT.As', V623, V624, V625, V626} -> ('un--compileStk'(V0, V1, V2, V3, V626)); {'Core.TT.TDelayed', V627, V628, V629} -> begin (V630 = ('un--compileStk'(V0, V1, V2, V3, V629))), fun (V631) -> begin (V632 = (V630(V631))), case V632 of {'Prelude.Types.Left', V633} -> {'Prelude.Types.Left', V633}; {'Prelude.Types.Right', V634} -> (begin (V636 = fun (V635) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -15, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V628)) | [V634 | []]]}} end), V636 end(V631)) end end end end; {'Core.TT.TDelay', V637, V638, V639, V640} -> begin (V641 = ('un--compileStk'(V0, V1, V2, [], V639))), fun (V642) -> begin (V643 = (V641(V642))), case V643 of {'Prelude.Types.Left', V644} -> {'Prelude.Types.Left', V644}; {'Prelude.Types.Right', V645} -> (begin (V653 = begin (V646 = ('un--compileStk'(V0, V1, V2, [], V640))), fun (V647) -> begin (V648 = (V646(V647))), case V648 of {'Prelude.Types.Left', V649} -> {'Prelude.Types.Left', V649}; {'Prelude.Types.Right', V650} -> (begin (V652 = fun (V651) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -4, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V638)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V637)) | [{'Libraries.Utils.Scheme.Lambda', [], V645} | [{'Libraries.Utils.Scheme.Lambda', [], V650} | []]]]]}} end), V652 end(V647)) end end end end), V653 end(V642)) end end end end; {'Core.TT.TForce', V654, V655, V656} -> begin (V657 = ('un--compileStk'(V0, V1, V2, [], V656))), fun (V658) -> begin (V659 = (V657(V658))), case V659 of {'Prelude.Types.Left', V660} -> {'Prelude.Types.Left', V660}; {'Prelude.Types.Right', V661} -> (begin (V663 = fun (V662) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-doForce"/utf8>>}, [V661 | [{'Libraries.Utils.Scheme.Vector', -5, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V655)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V654)) | [{'Libraries.Utils.Scheme.Lambda', [], V661} | []]]]} | []]]}} end), V663 end(V658)) end end end end; {'Core.TT.PrimVal', V664, V665} -> fun (V666) -> {'Prelude.Types.Right', ('un--compileConstant'(V664, V665))} end; {'Core.TT.Erased', V667, V668} -> begin (V669 = ('un--compileWhyErased'(V0, V1, V2, V3, V668))), fun (V670) -> begin (V671 = (V669(V670))), case V671 of {'Prelude.Types.Left', V672} -> {'Prelude.Types.Left', V672}; {'Prelude.Types.Right', V673} -> (begin (V675 = fun (V674) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -6, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V667)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemeWhy'(V673)) | []]]}} end), V675 end(V670)) end end end end; {'Core.TT.TType', V676, V677} -> fun (V678) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -7, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V676)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V677)) | []]]}} end end end; _ -> case V4 of {'Core.TT.App', V679, V680, V681} -> begin (V682 = ('un--compileStk'(V0, V1, V2, [], V681))), fun (V683) -> begin (V684 = (V682(V683))), case V684 of {'Prelude.Types.Left', V685} -> {'Prelude.Types.Left', V685}; {'Prelude.Types.Right', V686} -> (begin (V687 = ('un--compileStk'(V0, V1, V2, [V686 | V3], V680))), V687 end(V683)) end end end end; {'Core.TT.As', V688, V689, V690, V691} -> ('un--compileStk'(V0, V1, V2, V3, V691)); {'Core.TT.TDelayed', V692, V693, V694} -> begin (V695 = ('un--compileStk'(V0, V1, V2, V3, V694))), fun (V696) -> begin (V697 = (V695(V696))), case V697 of {'Prelude.Types.Left', V698} -> {'Prelude.Types.Left', V698}; {'Prelude.Types.Right', V699} -> (begin (V701 = fun (V700) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -15, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V693)) | [V699 | []]]}} end), V701 end(V696)) end end end end; {'Core.TT.TDelay', V702, V703, V704, V705} -> begin (V706 = ('un--compileStk'(V0, V1, V2, [], V704))), fun (V707) -> begin (V708 = (V706(V707))), case V708 of {'Prelude.Types.Left', V709} -> {'Prelude.Types.Left', V709}; {'Prelude.Types.Right', V710} -> (begin (V718 = begin (V711 = ('un--compileStk'(V0, V1, V2, [], V705))), fun (V712) -> begin (V713 = (V711(V712))), case V713 of {'Prelude.Types.Left', V714} -> {'Prelude.Types.Left', V714}; {'Prelude.Types.Right', V715} -> (begin (V717 = fun (V716) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -4, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V703)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V702)) | [{'Libraries.Utils.Scheme.Lambda', [], V710} | [{'Libraries.Utils.Scheme.Lambda', [], V715} | []]]]]}} end), V717 end(V712)) end end end end), V718 end(V707)) end end end end; {'Core.TT.TForce', V719, V720, V721} -> begin (V722 = ('un--compileStk'(V0, V1, V2, [], V721))), fun (V723) -> begin (V724 = (V722(V723))), case V724 of {'Prelude.Types.Left', V725} -> {'Prelude.Types.Left', V725}; {'Prelude.Types.Right', V726} -> (begin (V728 = fun (V727) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-doForce"/utf8>>}, [V726 | [{'Libraries.Utils.Scheme.Vector', -5, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V720)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V719)) | [{'Libraries.Utils.Scheme.Lambda', [], V726} | []]]]} | []]]}} end), V728 end(V723)) end end end end; {'Core.TT.PrimVal', V729, V730} -> fun (V731) -> {'Prelude.Types.Right', ('un--compileConstant'(V729, V730))} end; {'Core.TT.Erased', V732, V733} -> begin (V734 = ('un--compileWhyErased'(V0, V1, V2, V3, V733))), fun (V735) -> begin (V736 = (V734(V735))), case V736 of {'Prelude.Types.Left', V737} -> {'Prelude.Types.Left', V737}; {'Prelude.Types.Right', V738} -> (begin (V740 = fun (V739) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -6, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V732)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemeWhy'(V738)) | []]]}} end), V740 end(V735)) end end end end; {'Core.TT.TType', V741, V742} -> fun (V743) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -7, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V741)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V742)) | []]]}} end end end; [E0 | E1] -> (fun (V744, V745) -> case V4 of {'Core.TT.Bind', V746, V747, V748, V749} -> case V748 of {'Core.TT.Lam', V750, V751, V752, V753} -> begin (V754 = ('un--nextName'(V0))), fun (V755) -> begin (V756 = (V754(V755))), case V756 of {'Prelude.Types.Left', V757} -> {'Prelude.Types.Left', V757}; {'Prelude.Types.Right', V758} -> (begin (V767 = begin (V759 = <<('un--schVarName'(V747))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V758))/binary>>/binary>>), begin (V760 = ('un--compileStk'(V0, V1, {'Core.SchemeEval.Compile.::', {'Core.SchemeEval.Compile.Bound', V759}, V2}, V745, V749))), fun (V761) -> begin (V762 = (V760(V761))), case V762 of {'Prelude.Types.Left', V763} -> {'Prelude.Types.Left', V763}; {'Prelude.Types.Right', V764} -> (begin (V766 = fun (V765) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Lambda', [V759 | []], V764}, [V744 | []]}} end), V766 end(V761)) end end end end end), V767 end(V755)) end end end end; _ -> case V4 of {'Core.TT.App', V768, V769, V770} -> begin (V771 = ('un--compileStk'(V0, V1, V2, [], V770))), fun (V772) -> begin (V773 = (V771(V772))), case V773 of {'Prelude.Types.Left', V774} -> {'Prelude.Types.Left', V774}; {'Prelude.Types.Right', V775} -> (begin (V776 = ('un--compileStk'(V0, V1, V2, [V775 | V3], V769))), V776 end(V772)) end end end end; {'Core.TT.As', V777, V778, V779, V780} -> ('un--compileStk'(V0, V1, V2, V3, V780)); {'Core.TT.TDelayed', V781, V782, V783} -> begin (V784 = ('un--compileStk'(V0, V1, V2, V3, V783))), fun (V785) -> begin (V786 = (V784(V785))), case V786 of {'Prelude.Types.Left', V787} -> {'Prelude.Types.Left', V787}; {'Prelude.Types.Right', V788} -> (begin (V790 = fun (V789) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -15, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V782)) | [V788 | []]]}} end), V790 end(V785)) end end end end; {'Core.TT.TDelay', V791, V792, V793, V794} -> begin (V795 = ('un--compileStk'(V0, V1, V2, [], V793))), fun (V796) -> begin (V797 = (V795(V796))), case V797 of {'Prelude.Types.Left', V798} -> {'Prelude.Types.Left', V798}; {'Prelude.Types.Right', V799} -> (begin (V807 = begin (V800 = ('un--compileStk'(V0, V1, V2, [], V794))), fun (V801) -> begin (V802 = (V800(V801))), case V802 of {'Prelude.Types.Left', V803} -> {'Prelude.Types.Left', V803}; {'Prelude.Types.Right', V804} -> (begin (V806 = fun (V805) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -4, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V792)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V791)) | [{'Libraries.Utils.Scheme.Lambda', [], V799} | [{'Libraries.Utils.Scheme.Lambda', [], V804} | []]]]]}} end), V806 end(V801)) end end end end), V807 end(V796)) end end end end; {'Core.TT.TForce', V808, V809, V810} -> begin (V811 = ('un--compileStk'(V0, V1, V2, [], V810))), fun (V812) -> begin (V813 = (V811(V812))), case V813 of {'Prelude.Types.Left', V814} -> {'Prelude.Types.Left', V814}; {'Prelude.Types.Right', V815} -> (begin (V817 = fun (V816) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-doForce"/utf8>>}, [V815 | [{'Libraries.Utils.Scheme.Vector', -5, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V809)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V808)) | [{'Libraries.Utils.Scheme.Lambda', [], V815} | []]]]} | []]]}} end), V817 end(V812)) end end end end; {'Core.TT.PrimVal', V818, V819} -> fun (V820) -> {'Prelude.Types.Right', ('un--compileConstant'(V818, V819))} end; {'Core.TT.Erased', V821, V822} -> begin (V823 = ('un--compileWhyErased'(V0, V1, V2, V3, V822))), fun (V824) -> begin (V825 = (V823(V824))), case V825 of {'Prelude.Types.Left', V826} -> {'Prelude.Types.Left', V826}; {'Prelude.Types.Right', V827} -> (begin (V829 = fun (V828) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -6, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V821)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemeWhy'(V827)) | []]]}} end), V829 end(V824)) end end end end; {'Core.TT.TType', V830, V831} -> fun (V832) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -7, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V830)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V831)) | []]]}} end end end; _ -> case V4 of {'Core.TT.App', V833, V834, V835} -> begin (V836 = ('un--compileStk'(V0, V1, V2, [], V835))), fun (V837) -> begin (V838 = (V836(V837))), case V838 of {'Prelude.Types.Left', V839} -> {'Prelude.Types.Left', V839}; {'Prelude.Types.Right', V840} -> (begin (V841 = ('un--compileStk'(V0, V1, V2, [V840 | V3], V834))), V841 end(V837)) end end end end; {'Core.TT.As', V842, V843, V844, V845} -> ('un--compileStk'(V0, V1, V2, V3, V845)); {'Core.TT.TDelayed', V846, V847, V848} -> begin (V849 = ('un--compileStk'(V0, V1, V2, V3, V848))), fun (V850) -> begin (V851 = (V849(V850))), case V851 of {'Prelude.Types.Left', V852} -> {'Prelude.Types.Left', V852}; {'Prelude.Types.Right', V853} -> (begin (V855 = fun (V854) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -15, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V847)) | [V853 | []]]}} end), V855 end(V850)) end end end end; {'Core.TT.TDelay', V856, V857, V858, V859} -> begin (V860 = ('un--compileStk'(V0, V1, V2, [], V858))), fun (V861) -> begin (V862 = (V860(V861))), case V862 of {'Prelude.Types.Left', V863} -> {'Prelude.Types.Left', V863}; {'Prelude.Types.Right', V864} -> (begin (V872 = begin (V865 = ('un--compileStk'(V0, V1, V2, [], V859))), fun (V866) -> begin (V867 = (V865(V866))), case V867 of {'Prelude.Types.Left', V868} -> {'Prelude.Types.Left', V868}; {'Prelude.Types.Right', V869} -> (begin (V871 = fun (V870) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -4, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V857)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V856)) | [{'Libraries.Utils.Scheme.Lambda', [], V864} | [{'Libraries.Utils.Scheme.Lambda', [], V869} | []]]]]}} end), V871 end(V866)) end end end end), V872 end(V861)) end end end end; {'Core.TT.TForce', V873, V874, V875} -> begin (V876 = ('un--compileStk'(V0, V1, V2, [], V875))), fun (V877) -> begin (V878 = (V876(V877))), case V878 of {'Prelude.Types.Left', V879} -> {'Prelude.Types.Left', V879}; {'Prelude.Types.Right', V880} -> (begin (V882 = fun (V881) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-doForce"/utf8>>}, [V880 | [{'Libraries.Utils.Scheme.Vector', -5, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V874)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V873)) | [{'Libraries.Utils.Scheme.Lambda', [], V880} | []]]]} | []]]}} end), V882 end(V877)) end end end end; {'Core.TT.PrimVal', V883, V884} -> fun (V885) -> {'Prelude.Types.Right', ('un--compileConstant'(V883, V884))} end; {'Core.TT.Erased', V886, V887} -> begin (V888 = ('un--compileWhyErased'(V0, V1, V2, V3, V887))), fun (V889) -> begin (V890 = (V888(V889))), case V890 of {'Prelude.Types.Left', V891} -> {'Prelude.Types.Left', V891}; {'Prelude.Types.Right', V892} -> (begin (V894 = fun (V893) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -6, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V886)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemeWhy'(V892)) | []]]}} end), V894 end(V889)) end end end end; {'Core.TT.TType', V895, V896} -> fun (V897) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -7, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V895)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V896)) | []]]}} end end end end(E0, E1)); _ -> case V4 of {'Core.TT.App', V898, V899, V900} -> begin (V901 = ('un--compileStk'(V0, V1, V2, [], V900))), fun (V902) -> begin (V903 = (V901(V902))), case V903 of {'Prelude.Types.Left', V904} -> {'Prelude.Types.Left', V904}; {'Prelude.Types.Right', V905} -> (begin (V906 = ('un--compileStk'(V0, V1, V2, [V905 | V3], V899))), V906 end(V902)) end end end end; {'Core.TT.As', V907, V908, V909, V910} -> ('un--compileStk'(V0, V1, V2, V3, V910)); {'Core.TT.TDelayed', V911, V912, V913} -> begin (V914 = ('un--compileStk'(V0, V1, V2, V3, V913))), fun (V915) -> begin (V916 = (V914(V915))), case V916 of {'Prelude.Types.Left', V917} -> {'Prelude.Types.Left', V917}; {'Prelude.Types.Right', V918} -> (begin (V920 = fun (V919) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -15, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V912)) | [V918 | []]]}} end), V920 end(V915)) end end end end; {'Core.TT.TDelay', V921, V922, V923, V924} -> begin (V925 = ('un--compileStk'(V0, V1, V2, [], V923))), fun (V926) -> begin (V927 = (V925(V926))), case V927 of {'Prelude.Types.Left', V928} -> {'Prelude.Types.Left', V928}; {'Prelude.Types.Right', V929} -> (begin (V937 = begin (V930 = ('un--compileStk'(V0, V1, V2, [], V924))), fun (V931) -> begin (V932 = (V930(V931))), case V932 of {'Prelude.Types.Left', V933} -> {'Prelude.Types.Left', V933}; {'Prelude.Types.Right', V934} -> (begin (V936 = fun (V935) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -4, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V922)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V921)) | [{'Libraries.Utils.Scheme.Lambda', [], V929} | [{'Libraries.Utils.Scheme.Lambda', [], V934} | []]]]]}} end), V936 end(V931)) end end end end), V937 end(V926)) end end end end; {'Core.TT.TForce', V938, V939, V940} -> begin (V941 = ('un--compileStk'(V0, V1, V2, [], V940))), fun (V942) -> begin (V943 = (V941(V942))), case V943 of {'Prelude.Types.Left', V944} -> {'Prelude.Types.Left', V944}; {'Prelude.Types.Right', V945} -> (begin (V947 = fun (V946) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', <<"ct-doForce"/utf8>>}, [V945 | [{'Libraries.Utils.Scheme.Vector', -5, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_LazyReason'(V939)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V938)) | [{'Libraries.Utils.Scheme.Lambda', [], V945} | []]]]} | []]]}} end), V947 end(V942)) end end end end; {'Core.TT.PrimVal', V948, V949} -> fun (V950) -> {'Prelude.Types.Right', ('un--compileConstant'(V948, V949))} end; {'Core.TT.Erased', V951, V952} -> begin (V953 = ('un--compileWhyErased'(V0, V1, V2, V3, V952))), fun (V954) -> begin (V955 = (V953(V954))), case V955 of {'Prelude.Types.Left', V956} -> {'Prelude.Types.Left', V956}; {'Prelude.Types.Right', V957} -> (begin (V959 = fun (V958) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -6, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V951)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'un--toSchemeWhy'(V957)) | []]]}} end), V959 end(V954)) end end end end; {'Core.TT.TType', V960, V961} -> fun (V962) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -7, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V960)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V961)) | []]]}} end end end end.
'un--compilePiInfo'(V0, V1, V2, V3) -> case V3 of {'Core.TT.Implicit'} -> fun (V4) -> {'Prelude.Types.Right', {'Core.TT.Implicit'}} end; {'Core.TT.Explicit'} -> fun (V5) -> {'Prelude.Types.Right', {'Core.TT.Explicit'}} end; {'Core.TT.AutoImplicit'} -> fun (V6) -> {'Prelude.Types.Right', {'Core.TT.AutoImplicit'}} end; {'Core.TT.DefImplicit', V7} -> begin (V8 = ('un--compileStk'(V0, V1, V2, [], V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V14 = fun (V13) -> {'Prelude.Types.Right', {'Core.TT.DefImplicit', V12}} end), V14 end(V9)) end end end end end.
'un--compileDef'(V0, V1, V2) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V3, V4)) end end, fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V5, V6, V7)) end end end}, V2))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V303 = begin (V18 = begin (V13 = V0), fun (V14) -> begin (V17 = (begin (V15 = V13), fun (V16) -> ('erlang':'get'(V15)) end end(V14))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V302 = begin (V55 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V12, case V22 of {'Core.Context.MkDefs', V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54} -> V23 end))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V301 = case V59 of {'Prelude.Types.Just', V60} -> case case V60 of {'Core.Context.Context.MkGlobalDef', V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82} -> case V82 of {'Prelude.Types.Nothing'} -> 1; {'Prelude.Types.Just', V83} -> case V83 of {'Builtin.MkPair', V84, V85} -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_SchemeMode'(V84, V1)) end end end of 1 -> begin (V194 = case ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_SchemeMode'(V1, 0)) of 1 -> 1; 0 -> ('Idris.Idris2.Core.Context':'un--reducibleInAny'([case V22 of {'Core.Context.MkDefs', V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117} -> V88 end | case V22 of {'Core.Context.MkDefs', V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149} -> V121 end], case V60 of {'Core.Context.Context.MkGlobalDef', V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171} -> V151 end, case V60 of {'Core.Context.Context.MkGlobalDef', V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193} -> V181 end)) end), begin (V238 = begin (V200 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V195, V196)) end end, fun (V197) -> fun (V198) -> fun (V199) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V197, V198, V199)) end end end}, V12))), fun (V201) -> begin (V202 = (V200(V201))), case V202 of {'Prelude.Types.Left', V203} -> {'Prelude.Types.Left', V203}; {'Prelude.Types.Right', V204} -> (begin (V237 = begin (V231 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Def'(V205, V206)) end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Def'(V207, V208)) end end}, case V60 of {'Core.Context.Context.MkGlobalDef', V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230} -> V226 end))), fun (V232) -> begin (V233 = (V231(V232))), case V233 of {'Prelude.Types.Left', V234} -> {'Prelude.Types.Left', V234}; {'Prelude.Types.Right', V235} -> (begin (V236 = ('un--compileBody'(V0, V194, V204, V235))), V236 end(V232)) end end end end), V237 end(V201)) end end end end), fun (V239) -> begin (V240 = (V238(V239))), case V240 of {'Prelude.Types.Left', V241} -> {'Prelude.Types.Left', V241}; {'Prelude.Types.Right', V242} -> (begin (V298 = begin (V243 = {'Libraries.Utils.Scheme.Define', ('un--schName'(V12)), V242}), begin (V246 = fun (V244) -> begin (V245 = (('Idris.Idris2.Libraries.Utils.Scheme':'un--evalSchemeObj'(V243))(V244))), {'Prelude.Types.Right', V245} end end), fun (V247) -> begin (V248 = (V246(V247))), case V248 of {'Prelude.Types.Left', V249} -> {'Prelude.Types.Left', V249}; {'Prelude.Types.Right', V250} -> (begin (V297 = case V250 of {'Prelude.Types.Just', V251} -> begin (V274 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V12, case V60 of {'Core.Context.Context.MkGlobalDef', V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273} -> {'Core.Context.Context.MkGlobalDef', V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, {'Prelude.Types.Just', {'Builtin.MkPair', V1, V243}}} end))), ((begin (V290 = fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V287, V288, V289)) end end end end end), fun (V291) -> fun (V292) -> ((((V290('erased'))('erased'))(V291))(V292)) end end end((begin (V282 = fun (V276) -> fun (V277) -> fun (V278) -> fun (V279) -> case V279 of {'Prelude.Types.Left', V280} -> {'Prelude.Types.Left', V280}; {'Prelude.Types.Right', V281} -> {'Prelude.Types.Right', (V278(V281))} end end end end end), fun (V283) -> fun (V284) -> ((((V282('erased'))('erased'))(V283))(V284)) end end end(fun (V275) -> {'Builtin.MkUnit'} end))))(V274)) end; {'Prelude.Types.Nothing'} -> fun (V293) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<(begin (V295 = fun (V294) -> V294 end), fun (V296) -> (V295(V296)) end end(<<"Compiling "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12))/binary, <<" failed"/utf8>>/binary>>/binary>>}, V293)) end end), V297 end(V247)) end end end end end), V298 end(V239)) end end end end end; _ -> fun (V299) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; {'Prelude.Types.Nothing'} -> fun (V300) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.UndefinedName', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V12}, V300)) end end), V301 end(V56)) end end end end), V302 end(V19)) end end end end), V303 end(V9)) end end end end.
'un--compileConstant'(V0, V1) -> case V1 of {'Core.TT.I', V2} -> {'Libraries.Utils.Scheme.Vector', -100, [{'Libraries.Utils.Scheme.IntegerVal', V2} | []]}; {'Core.TT.I8', V3} -> {'Libraries.Utils.Scheme.Vector', -101, [{'Libraries.Utils.Scheme.IntegerVal', V3} | []]}; {'Core.TT.I16', V4} -> {'Libraries.Utils.Scheme.Vector', -102, [{'Libraries.Utils.Scheme.IntegerVal', V4} | []]}; {'Core.TT.I32', V5} -> {'Libraries.Utils.Scheme.Vector', -103, [{'Libraries.Utils.Scheme.IntegerVal', V5} | []]}; {'Core.TT.I64', V6} -> {'Libraries.Utils.Scheme.Vector', -104, [{'Libraries.Utils.Scheme.IntegerVal', V6} | []]}; {'Core.TT.BI', V7} -> {'Libraries.Utils.Scheme.Vector', -105, [{'Libraries.Utils.Scheme.IntegerVal', V7} | []]}; {'Core.TT.B8', V8} -> {'Libraries.Utils.Scheme.Vector', -106, [{'Libraries.Utils.Scheme.IntegerVal', V8} | []]}; {'Core.TT.B16', V9} -> {'Libraries.Utils.Scheme.Vector', -107, [{'Libraries.Utils.Scheme.IntegerVal', V9} | []]}; {'Core.TT.B32', V10} -> {'Libraries.Utils.Scheme.Vector', -108, [{'Libraries.Utils.Scheme.IntegerVal', V10} | []]}; {'Core.TT.B64', V11} -> {'Libraries.Utils.Scheme.Vector', -109, [{'Libraries.Utils.Scheme.IntegerVal', V11} | []]}; {'Core.TT.Str', V12} -> {'Libraries.Utils.Scheme.StringVal', V12}; {'Core.TT.Ch', V13} -> {'Libraries.Utils.Scheme.CharVal', V13}; {'Core.TT.Db', V14} -> {'Libraries.Utils.Scheme.FloatVal', V14}; {'Core.TT.PrT', V15} -> {'Libraries.Utils.Scheme.Vector', -1, [{'Libraries.Utils.Scheme.IntegerVal', ('Idris.Idris2.Core.TT':'un--primTypeTag'(V15))} | [{'Libraries.Utils.Scheme.StringVal', ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V15))} | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'({'Core.Name.UN', {'Core.Name.Basic', ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V15))}})) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(V0)) | []]]]]}; {'Core.TT.WorldVal'} -> {'Libraries.Utils.Scheme.Null'} end.
'un--compileCase'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Case.CaseTree.Case', V5, V6, V7, V8} -> begin (V9 = ('nested--8708-3254--in--un--caseType'(V0, V5, V8, V7, V6, V3, V2, V1, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V46 = case V13 of {'Core.SchemeEval.Compile.nested--8708-3250--in--un--CON', V14, V15, V16, V17, V18, V19, V20, V21} -> ('nested--8708-3256--in--un--toSchemeConCases'(V0, V5, V8, V7, V6, V3, V2, V1, V6, V8)); {'Core.SchemeEval.Compile.nested--8708-3251--in--un--TYCON', V22, V23, V24, V25, V26, V27, V28, V29} -> ('nested--8708-3257--in--un--toSchemeTyConCases'(V0, V5, V8, V7, V6, V3, V2, V1, V6, V8)); {'Core.SchemeEval.Compile.nested--8708-3252--in--un--DELAY', V30, V31, V32, V33, V34, V35, V36, V37} -> ('nested--8708-3259--in--un--toSchemeDelayCases'(V0, V5, V8, V7, V6, V3, V2, V1, V6, V8)); {'Core.SchemeEval.Compile.nested--8708-3253--in--un--CONST', V38, V39, V40, V41, V42, V43, V44, V45} -> ('nested--8708-3258--in--un--toSchemeConstCases'(V0, V5, V8, V7, V6, V3, V2, V1, V6, V8)) end), V46 end(V10)) end end end end; {'Core.Case.CaseTree.STerm', V47, V48} -> ('un--compile'(V0, V1, V3, V48)); _ -> fun (V49) -> {'Prelude.Types.Right', V2} end end.
'un--compileBody'(V0, V1, V2, V3) -> case V3 of {'Core.Context.Context.None'} -> fun (V4) -> {'Prelude.Types.Right', ('un--blockedAppWith'(V2, []))} end; {'Core.Context.Context.PMDef', V5, V6, V7, V8, V9} -> begin (V10 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.SchemeEval.Compile.Sym'}, 0))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V37 = begin (V15 = ('un--mkArgs'(V6))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V36 = begin (V20 = ('un--blockedAppWith'(V2, ('un--varObjs'(V19))))), begin (V21 = ('un--compileCase'(V14, V0, V20, V19, V7))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V35 = begin (V29 = case V1 of 1 -> {'Libraries.Utils.Scheme.If', {'Libraries.Utils.Scheme.Apply', {'Libraries.Utils.Scheme.Var', (begin (V27 = fun (V26) -> V26 end), fun (V28) -> (V27(V28)) end end(<<"ct-isBlockAll"/utf8>>))}, []}, V20, V25}; 0 -> V20 end), fun (V30) -> case V5 of {'Core.Context.Context.MkPMDefInfo', V31, V32, V33} -> case V31 of {'Core.Context.Context.NotHole'} -> {'Prelude.Types.Right', ('un--bindArgs'(V2, V19, [], V29))}; {'Core.Context.Context.SolvedHole', V34} -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Lambda', [<<"h-0"/utf8>> | []], ('un--bindArgs'(V2, V19, [], V29))}} end end end end), V35 end(V22)) end end end end end), V36 end(V16)) end end end end), V37 end(V11)) end end end end; {'Core.Context.Context.ExternDef', V38} -> fun (V39) -> {'Prelude.Types.Right', ('un--blockedAppWith'(V2, []))} end; {'Core.Context.Context.ForeignDef', V40, V41} -> fun (V42) -> {'Prelude.Types.Right', ('un--blockedAppWith'(V2, []))} end; {'Core.Context.Context.Builtin', V43, V44} -> fun (V45) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.SchemeEval.Builtins':'un--compileBuiltin'(V43, V2, V44))} end; {'Core.Context.Context.DCon', V46, V47, V48} -> case V47 of 0 -> begin (V54 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V49, V50)) end end, fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V51, V52, V53)) end end end}, V2))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V60 = fun (V59) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', V46, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V58)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(('Idris.Idris2.Core.FC':'un--emptyFC'()))) | []]]}} end), V60 end(V55)) end end end end; _ -> begin (V61 = ('nested--10232-4861--in--un--mkArgNs'(V1, V48, V47, V46, V2, V0, 0, V47))), begin (V62 = ('un--mkArgs'(V61))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V77 = begin (V75 = {'Libraries.Utils.Scheme.Vector', V46, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V2)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(('Idris.Idris2.Core.FC':'un--emptyFC'()))) | ((begin (V72 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V70, V71)) end end end end), fun (V73) -> fun (V74) -> ((((V72('erased'))('erased'))(V73))(V74)) end end end(fun (V67) -> {'Libraries.Utils.Scheme.Var', ('un--schVarName'(V67))} end))(V61))]]}), fun (V76) -> {'Prelude.Types.Right', ('un--bindArgs'(V2, V66, [], V75))} end end), V77 end(V63)) end end end end end end; {'Core.Context.Context.TCon', V78, V79, V80, V81, V82, V83, V84, V85} -> case V79 of 0 -> fun (V86) -> {'Prelude.Types.Right', {'Libraries.Utils.Scheme.Vector', -1, [{'Libraries.Utils.Scheme.IntegerVal', V78} | [{'Libraries.Utils.Scheme.StringVal', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))} | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V2)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(('Idris.Idris2.Core.FC':'un--emptyFC'()))) | []]]]]}} end; _ -> begin (V87 = ('nested--10232-4969--in--un--mkArgNs'(V1, V85, V84, V83, V82, V81, V80, V79, V78, V2, V0, 0, V79))), begin (V88 = ('un--mkArgs'(V87))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V103 = begin (V101 = {'Libraries.Utils.Scheme.Vector', -1, [{'Libraries.Utils.Scheme.IntegerVal', V78} | [{'Libraries.Utils.Scheme.StringVal', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))} | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V2)) | [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_FC'(('Idris.Idris2.Core.FC':'un--emptyFC'()))) | ((begin (V98 = fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V96, V97)) end end end end), fun (V99) -> fun (V100) -> ((((V98('erased'))('erased'))(V99))(V100)) end end end(fun (V93) -> {'Libraries.Utils.Scheme.Var', ('un--schVarName'(V93))} end))(V87))]]]]}), fun (V102) -> {'Prelude.Types.Right', ('un--bindArgs'(V2, V92, [], V101))} end end), V103 end(V89)) end end end end end end; {'Core.Context.Context.Hole', V104, V105} -> fun (V106) -> {'Prelude.Types.Right', ('un--blockedMetaApp'(V2))} end; {'Core.Context.Context.BySearch', V107, V108, V109} -> fun (V110) -> {'Prelude.Types.Right', ('un--blockedMetaApp'(V2))} end; {'Core.Context.Context.Guess', V111, V112, V113} -> fun (V114) -> {'Prelude.Types.Right', ('un--blockedMetaApp'(V2))} end; {'Core.Context.Context.ImpBind'} -> fun (V115) -> {'Prelude.Types.Right', ('un--blockedMetaApp'(V2))} end; {'Core.Context.Context.UniverseLevel', V116} -> fun (V117) -> {'Prelude.Types.Right', ('un--blockedMetaApp'(V2))} end; {'Core.Context.Context.Delayed'} -> fun (V118) -> {'Prelude.Types.Right', ('un--blockedMetaApp'(V2))} end end.
'un--compile'(V0, V1, V2, V3) -> ('un--compileStk'(V0, V1, V2, [], V3)).
'un--blockedMetaApp'(V0) -> {'Libraries.Utils.Scheme.Lambda', [<<"arity-0"/utf8>> | []], {'Libraries.Utils.Scheme.Vector', -10, [{'Libraries.Utils.Scheme.Cons', ('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V0)), {'Libraries.Utils.Scheme.Var', <<"arity-0"/utf8>>}} | [{'Libraries.Utils.Scheme.Null'} | []]]}}.
'un--blockedAppWith'(V0, V1) -> {'Libraries.Utils.Scheme.Vector', -2, [('Idris.Idris2.Core.SchemeEval.ToScheme':'dn--un--toScheme_Scheme_Name'(V0)) | [('nested--7024-1290--in--un--vars'(V1, V0, V1)) | []]]}.
'un--bindArgs'(V0, V1, V2, V3) -> case V1 of {'Core.SchemeEval.Compile.Nil'} -> V3; {'Core.SchemeEval.Compile.::', V4, V5} -> {'Libraries.Utils.Scheme.Vector', -9, [('un--blockedAppWith'(V0, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2)))) | [{'Libraries.Utils.Scheme.Lambda', [('dn--un--show_Show_SVar'(V4)) | []], ('un--bindArgs'(V0, V5, [{'Libraries.Utils.Scheme.Var', ('dn--un--show_Show_SVar'(V4))} | V2], V3))} | []]]} end.
