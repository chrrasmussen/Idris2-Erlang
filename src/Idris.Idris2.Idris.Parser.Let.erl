-module('Idris.Idris2.Idris.Parser.Let').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--mkDoLets,buildDoLets-5365'/6,
  'nested--7818-5194--in--un--mkLet'/5,
  'nested--7818-5193--in--un--groups'/4,
  'nested--7932-5291--in--un--buildLets'/3,
  'nested--7996-5346--in--un--buildDoLets'/3,
  'un--mkLets'/3,
  'un--mkDoLets'/2,
  'un--letFactory'/4,
  'un--LetDecl'/0
]).
'case--mkDoLets,buildDoLets-5365'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Parser.Let.MkLetBinder', V6, V7, V8, V9, V10} -> case V7 of {'Idris.Syntax.PRef', V11, V12} -> case V12 of {'Core.Name.UN', V13} -> case V10 of [] -> [case ('Idris.Idris2.Core.Name':'un--isPatternVariable'(V13)) of 1 -> {'Idris.Syntax.DoLet', V4, V11, {'Core.Name.UN', V13}, V6, V8, V9}; 0 -> {'Idris.Syntax.DoLetPat', V4, {'Idris.Syntax.PRef', V11, {'Core.Name.UN', V13}}, V8, V9, []} end | ('nested--7996-5346--in--un--buildDoLets'(V0, V1, V3))]; _ -> [{'Idris.Syntax.DoLetPat', V4, V7, V8, V9, V10} | ('nested--7996-5346--in--un--buildDoLets'(V0, V1, V3))] end; _ -> [{'Idris.Syntax.DoLetPat', V4, V7, V8, V9, V10} | ('nested--7996-5346--in--un--buildDoLets'(V0, V1, V3))] end; {'Idris.Syntax.PImplicit', V14} -> case V10 of [] -> [{'Idris.Syntax.DoLet', V4, V14, {'Core.Name.UN', {'Core.Name.Underscore'}}, V6, V8, V9} | ('nested--7996-5346--in--un--buildDoLets'(V0, V1, V3))]; _ -> [{'Idris.Syntax.DoLetPat', V4, V7, V8, V9, V10} | ('nested--7996-5346--in--un--buildDoLets'(V0, V1, V3))] end; _ -> [{'Idris.Syntax.DoLetPat', V4, V7, V8, V9, V10} | ('nested--7996-5346--in--un--buildDoLets'(V0, V1, V3))] end end.
'nested--7818-5194--in--un--mkLet'(V0, V1, V2, V3, V4) -> case V4 of {'Prelude.Types.Left', V5} -> (V3(('Idris.Idris2.Data.List1':'un--forget'(V5)))); {'Prelude.Types.Right', V6} -> begin (V9 = ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(case V6 of {'Data.List1.:::', V7, V8} -> V7 end, ('Idris.Idris2.Data.List1':'un--last'(V6))))), (V2(((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V10) -> ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'({'Prelude.Interfaces.MkMonoid', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V11, V12)) end end, []}, fun (V13) -> case V13 of {'Libraries.Text.Bounded.MkBounded', V14, V15, V16} -> V14 end end, V6)) end))(V9)))) end end.
'nested--7818-5193--in--un--groups'(V0, V1, V2, V3) -> ('Idris.Idris2.Data.Either':'un--compress'(('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V4) -> case V4 of {'Libraries.Text.Bounded.MkBounded', V5, V6, V7} -> case V5 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> V8 end))(V4))}; {'Prelude.Types.Right', V17} -> {'Prelude.Types.Right', ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> V17 end))(V4))} end end end, V1)))))).
'nested--7932-5291--in--un--buildLets'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Libraries.Text.Bounded.MkBounded', V5, V6, V7} -> case V5 of {'Idris.Parser.Let.MkLetBinder', V8, V9, V10, V11, V12} -> begin (V13 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V3))))), {'Idris.Syntax.PLet', V13, V8, V9, V10, V11, ('nested--7932-5291--in--un--buildLets'(V0, V4, V2)), V12} end end end end(E0, E1)) end.
'nested--7996-5346--in--un--buildDoLets'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3))), ('case--mkDoLets,buildDoLets-5365'(V0, V1, V3, V4, V5, case V3 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end)) end end(E0, E1)) end.
'un--mkLets'(V0, V1, V2) -> ('un--letFactory'(fun (V3) -> fun (V4) -> ('nested--7932-5291--in--un--buildLets'(V0, V3, V4)) end end, fun (V5) -> fun (V6) -> {'Idris.Syntax.PLocal', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)))), case V5 of {'Libraries.Text.Bounded.MkBounded', V7, V8, V9} -> V7 end, V6} end end, V1, V2)).
'un--mkDoLets'(V0, V1) -> ('un--letFactory'(fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--7996-5346--in--un--buildDoLets'(V1, V0, V2)), V3)) end end, fun (V4) -> fun (V5) -> [{'Idris.Syntax.DoLetLocal', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), case V4 of {'Libraries.Text.Bounded.MkBounded', V6, V7, V8} -> V6 end} | V5] end end, V1, [])).
'un--letFactory'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V4) -> ('nested--7818-5194--in--un--mkLet'(V3, V2, V1, V0, V4)) end, V3, ('nested--7818-5193--in--un--groups'(V3, V2, V1, V0)))).
'un--LetDecl'() -> {'Prelude.Basics.List', ('Idris.Idris2.Idris.Syntax':'un--PDecl'())}.
