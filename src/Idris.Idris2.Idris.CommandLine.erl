-module('Idris.Idris2.Idris.CommandLine').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--ideSocketModeAddress-1529'/3,
  'nested--6863-3646--in--un--showSep'/6,
  'nested--4710-1481--in--un--portPart'/3,
  'nested--6981-3751--in--un--optUsage'/3,
  'dn--un--show_Show_PkgCommand'/1,
  'dn--un--show_Show_OptType'/1,
  'dn--un--show_Show_DirCommand'/1,
  'dn--un--showPrec_Show_PkgCommand'/2,
  'dn--un--showPrec_Show_DirCommand'/2,
  'dn--un--__Impl_Show_PkgCommand'/0,
  'dn--un--__Impl_Show_DirCommand'/0,
  'un--versionMsg'/0,
  'un--usage'/0,
  'un--showDefault'/2,
  'un--separateBy'/2,
  'un--recogniseHelpTopic'/1,
  'un--processArgs'/4,
  'un--parseOpts'/2,
  'un--parseModules'/1,
  'un--optsUsage'/0,
  'un--options'/0,
  'un--optionFlags'/0,
  'un--optShow'/1,
  'un--optSeparator'/0,
  'un--matchFlag'/2,
  'un--makeTextFromOptionsOrEnvs'/1,
  'un--ideSocketModeAddress'/1,
  'un--getOpts'/1,
  'un--getCmdOpts'/1,
  'un--formatSocketAddress'/1,
  'un--firstColumnWidth'/0,
  'un--findMatch'/2,
  'un--envsUsage'/0,
  'un--checkNat'/1
]).
'case--ideSocketModeAddress-1529'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> begin (V15 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> begin (V5 = 0), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--4710-1481--in--un--portPart'(V0, V1, V4)), fun (V6) -> ('Idris.Idris2.Data.String':'un--parsePositive'({'Prelude.Num.MkNum', fun (V7) -> fun (V8) -> begin (V9 = (V7 + V8)), case ((V9 band 9223372036854775808) =/= 0) of 'true' -> (V9 bor -9223372036854775808); _ -> (V9 band 9223372036854775807) end end end end, fun (V10) -> fun (V11) -> begin (V12 = (V10 * V11)), case ((V12 band 9223372036854775808) =/= 0) of 'true' -> (V12 bor -9223372036854775808); _ -> (V12 band 9223372036854775807) end end end end, fun (V13) -> begin (V14 = V13), case ((V14 band 9223372036854775808) =/= 0) of 'true' -> (V14 bor -9223372036854775808); _ -> (V14 band 9223372036854775807) end end end}, V6)) end))))), begin (V19 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V3, <<""/utf8>>)) of 1 -> (begin (V17 = fun (V16) -> V16 end), fun (V18) -> (V17(V18)) end end(<<"localhost"/utf8>>)); 0 -> V3 end), {'Builtin.MkPair', V19, V15} end end end.
'nested--6863-3646--in--un--showSep'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V6, V7) -> case V7 of [] -> V6; _ -> <<V6/binary, <<V4/binary, ('nested--6863-3646--in--un--showSep'(V0, V1, V2, V3, V4, V7))/binary>>/binary>> end end(E0, E1)) end.
'nested--4710-1481--in--un--portPart'(V0, V1, V2) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, <<""/utf8>>)) of 1 -> {'Prelude.Types.Nothing'}; 0 -> {'Prelude.Types.Just', case ('string':'next_grapheme'(V2)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V3, V4) -> V4 end(E0, E1)); _ -> <<""/utf8>> end} end.
'nested--6981-3751--in--un--optUsage'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V5) -> <<<<"  "/utf8>>/binary, <<V3/binary, <<('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicateTR'([], ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(((V1 + 2) - ('Idris.Idris2.Prelude.Types.String':'un--length'(V3))))), $ ))))/binary, <<V5/binary, <<"\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>> end end, V4)) end.
'dn--un--show_Show_PkgCommand'(V0) -> case V0 of 0 -> <<"--build"/utf8>>; 1 -> <<"--install"/utf8>>; 2 -> <<"--install-with-src"/utf8>>; 3 -> <<"--mkdoc"/utf8>>; 4 -> <<"--typecheck"/utf8>>; 5 -> <<"--clean"/utf8>>; 6 -> <<"--repl"/utf8>>; 7 -> <<"--init"/utf8>> end.
'dn--un--show_Show_OptType'(V0) -> case V0 of {'Idris.CommandLine.Required', V1} -> <<<<"<"/utf8>>/binary, <<V1/binary, <<">"/utf8>>/binary>>/binary>>; {'Idris.CommandLine.RequiredNat', V2} -> <<<<"<"/utf8>>/binary, <<V2/binary, <<">"/utf8>>/binary>>/binary>>; {'Idris.CommandLine.RequiredLogLevel', V3} -> <<<<"<"/utf8>>/binary, <<V3/binary, <<">"/utf8>>/binary>>/binary>>; {'Idris.CommandLine.Optional', V4} -> <<<<"["/utf8>>/binary, <<V4/binary, <<"]"/utf8>>/binary>>/binary>>; {'Idris.CommandLine.AutoNat', V5} -> <<<<"<"/utf8>>/binary, <<V5/binary, <<">"/utf8>>/binary>>/binary>> end.
'dn--un--show_Show_DirCommand'(V0) -> case V0 of 0 -> <<"--libdir"/utf8>>; 1 -> <<"--prefix"/utf8>>; 2 -> <<"--paths"/utf8>> end.
'dn--un--showPrec_Show_PkgCommand'(V0, V1) -> ('dn--un--show_Show_PkgCommand'(V1)).
'dn--un--showPrec_Show_DirCommand'(V0, V1) -> ('dn--un--show_Show_DirCommand'(V1)).
'dn--un--__Impl_Show_PkgCommand'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PkgCommand'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PkgCommand'(V1, V2)) end end}.
'dn--un--__Impl_Show_DirCommand'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_DirCommand'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_DirCommand'(V1, V2)) end end}.
'un--versionMsg'() -> <<<<"Idris 2, version "/utf8>>/binary, ('Idris.Idris2.Libraries.Data.Version':'dn--un--show_Show_Version'(('Idris.Idris2.Idris.Version':'un--version'())))/binary>>.
'un--usage'() -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V0) -> fun (V1) -> <<V0/binary, V1/binary>> end end, <<""/utf8>>}, fun (V2) -> V2 end, [('un--versionMsg'()) | [<<"\x{a}Usage: idris2 [options] [input file]\x{a}\x{a}Available options:\x{a}"/utf8>> | [('un--optsUsage'()) | [<<"\x{a}Environment variables:\x{a}"/utf8>> | [('un--envsUsage'()) | []]]]]])).
'un--showDefault'(V0, V1) -> <<<<"(default "/utf8>>/binary, <<case V0 of {'Prelude.Show.MkShow', V2, V3} -> (V2(V1)) end/binary, <<")"/utf8>>/binary>>/binary>>.
'un--separateBy'(V0, V1) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V2)) end, ('Idris.Idris2.Data.List':'un--splitOn'({'Prelude.EqOrd.MkEq', fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V3, V4)) end end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V5, V6)) end end}, V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))))).
'un--recogniseHelpTopic'(V0) -> case V0 of <<"logging"/utf8>> -> {'Prelude.Types.Just', 0}; <<"pragma"/utf8>> -> {'Prelude.Types.Just', 1}; _ -> {'Prelude.Types.Nothing'} end.
'un--processArgs'(V0, V1, V2, V3) -> case V1 of [] -> {'Prelude.Types.Right', {'Builtin.MkPair', V3, V2}}; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.CommandLine.Required', V6} -> case V2 of [] -> {'Prelude.Types.Left', <<(begin (V8 = fun (V7) -> V7 end), fun (V9) -> (V8(V9)) end end(<<"Missing required argument "/utf8>>))/binary, <<('dn--un--show_Show_OptType'(V4))/binary, <<(begin (V11 = fun (V10) -> V10 end), fun (V12) -> (V11(V12)) end end(<<" for flag "/utf8>>))/binary, V0/binary>>/binary>>/binary>>}; [E2 | E3] -> (fun (V13, V14) -> ('un--processArgs'(V0, V5, V14, (V3(V13)))) end(E2, E3)) end; {'Idris.CommandLine.RequiredNat', V15} -> case V2 of [] -> {'Prelude.Types.Left', <<(begin (V17 = fun (V16) -> V16 end), fun (V18) -> (V17(V18)) end end(<<"Missing required argument "/utf8>>))/binary, <<('dn--un--show_Show_OptType'(V4))/binary, <<(begin (V20 = fun (V19) -> V19 end), fun (V21) -> (V20(V21)) end end(<<" for flag "/utf8>>))/binary, V0/binary>>/binary>>/binary>>}; [E4 | E5] -> (fun (V22, V23) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('Idris.Idris2.Data.Either':'un--maybeToEither'(fun () -> <<<<"Expected Nat argument "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V22))/binary, <<<<" for flag "/utf8>>/binary, V0/binary>>/binary>>/binary>> end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Data.String':'un--parseInteger'({'Prelude.Num.MkNum', fun (V24) -> fun (V25) -> (V24 + V25) end end, fun (V26) -> fun (V27) -> (V26 * V27) end end, fun (V28) -> V28 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V29) -> fun (V30) -> (V29 + V30) end end, fun (V31) -> fun (V32) -> (V31 * V32) end end, fun (V33) -> V33 end}, fun (V34) -> (0 - V34) end, fun (V35) -> fun (V36) -> (V35 - V36) end end}, V22)), fun (V37) -> ('un--checkNat'(V37)) end)))), fun (V38) -> ('un--processArgs'(V0, V5, V23, (V3(V38)))) end)) end(E4, E5)) end; {'Idris.CommandLine.RequiredLogLevel', V39} -> case V2 of [] -> {'Prelude.Types.Left', <<(begin (V41 = fun (V40) -> V40 end), fun (V42) -> (V41(V42)) end end(<<"Missing required argument "/utf8>>))/binary, <<('dn--un--show_Show_OptType'(V4))/binary, <<(begin (V44 = fun (V43) -> V43 end), fun (V45) -> (V44(V45)) end end(<<" for flag "/utf8>>))/binary, V0/binary>>/binary>>/binary>>}; [E6 | E7] -> (fun (V46, V47) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('Idris.Idris2.Data.Either':'un--maybeToEither'(fun () -> <<<<"Expected LogLevel argument "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V46))/binary, <<<<" for flag "/utf8>>/binary, V0/binary>>/binary>>/binary>> end, ('Idris.Idris2.Core.Options.Log':'un--parseLogLevel'(V46)))), fun (V48) -> ('un--processArgs'(V0, V5, V47, (V3(V48)))) end)) end(E6, E7)) end; {'Idris.CommandLine.Optional', V49} -> case V2 of [] -> ('un--processArgs'(V0, V5, [], (V3({'Prelude.Types.Nothing'})))); [E8 | E9] -> (fun (V50, V51) -> ('un--processArgs'(V0, V5, V51, (V3(('Idris.Idris2.Data.Maybe':'un--toMaybe'(case ('Idris.Idris2.Data.String':'un--isPrefixOf'(<<"-"/utf8>>, V50)) of 1 -> 0; 0 -> 1 end, fun () -> V50 end)))))) end(E8, E9)) end; {'Idris.CommandLine.AutoNat', V52} -> case V2 of [] -> {'Prelude.Types.Left', <<(begin (V54 = fun (V53) -> V53 end), fun (V55) -> (V54(V55)) end end(<<"Missing required argument "/utf8>>))/binary, <<('dn--un--show_Show_OptType'(V4))/binary, <<(begin (V57 = fun (V56) -> V56 end), fun (V58) -> (V57(V58)) end end(<<" for flag "/utf8>>))/binary, V0/binary>>/binary>>/binary>>}; [E10 | E11] -> (fun (V59, V60) -> case V59 of <<"auto"/utf8>> -> ('un--processArgs'(V0, V5, V60, (V3({'Prelude.Types.Nothing'})))); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('Idris.Idris2.Data.Either':'un--maybeToEither'(fun () -> <<<<"Expected Nat or \x{22}auto\x{22} argument "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V59))/binary, <<<<" for flag "/utf8>>/binary, V0/binary>>/binary>>/binary>> end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Data.String':'un--parseInteger'({'Prelude.Num.MkNum', fun (V61) -> fun (V62) -> (V61 + V62) end end, fun (V63) -> fun (V64) -> (V63 * V64) end end, fun (V65) -> V65 end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V66) -> fun (V67) -> (V66 + V67) end end, fun (V68) -> fun (V69) -> (V68 * V69) end end, fun (V70) -> V70 end}, fun (V71) -> (0 - V71) end, fun (V72) -> fun (V73) -> (V72 - V73) end end}, V59)), fun (V74) -> ('un--checkNat'(V74)) end)))), fun (V75) -> ('un--processArgs'(V0, V5, V60, (V3({'Prelude.Types.Just', V75})))) end)) end end(E10, E11)) end end end(E0, E1)) end.
'un--parseOpts'(V0, V1) -> case V1 of [] -> {'Prelude.Types.Right', []}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('un--findMatch'(V0, V1)), fun (V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('un--parseOpts'(V0, V4)), fun (V5) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, V5))} end)) end end)) end.
'un--parseModules'(V0) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V1) -> ('Idris.Idris2.Core.Name.Namespace':'un--mkModuleIdentFromString'(V1)) end, ('un--separateBy'($,, V0)))).
'un--optsUsage'() -> ('un--makeTextFromOptionsOrEnvs'(((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> ('un--optShow'(V0)) end))(('un--options'()))))).
'un--options'() -> [{'Idris.CommandLine.MkOpt', [<<"--check"/utf8>> | [<<"-c"/utf8>> | []]], [], [{'Idris.CommandLine.CheckOnly'} | []], {'Prelude.Types.Just', <<"Exit after checking source file"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--output"/utf8>> | [<<"-o"/utf8>> | []]], [{'Idris.CommandLine.Required', <<"file"/utf8>>} | []], fun (V0) -> [{'Idris.CommandLine.OutputFile', V0} | [{'Idris.CommandLine.Quiet'} | []]] end, {'Prelude.Types.Just', <<"Specify output file"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--exec"/utf8>> | [<<"-x"/utf8>> | []]], [{'Idris.CommandLine.Required', <<"name"/utf8>>} | []], fun (V1) -> [{'Idris.CommandLine.ExecFn', V1} | [{'Idris.CommandLine.Quiet'} | []]] end, {'Prelude.Types.Just', <<"Execute function after checking source file"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--no-prelude"/utf8>> | []], [], [{'Idris.CommandLine.NoPrelude'} | []], {'Prelude.Types.Just', <<"Don\x{27}t implicitly import Prelude"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--codegen"/utf8>> | [<<"--cg"/utf8>> | []]], [{'Idris.CommandLine.Required', <<"backend"/utf8>>} | []], fun (V2) -> [{'Idris.CommandLine.SetCG', V2} | []] end, {'Prelude.Types.Just', <<<<"Set code generator "/utf8>>/binary, ('un--showDefault'({'Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Core.Options':'dn--un--show_Show_CG'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Options':'dn--un--showPrec_Show_CG'(V4, V5)) end end}, case ('Idris.Idris2.Core.Options':'un--defaultSession'()) of {'Core.Options.MkSessionOpts', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} -> V10 end))/binary>>}} | [{'Idris.CommandLine.MkOpt', [<<"--incremental-cg"/utf8>> | [<<"--inc"/utf8>> | []]], [{'Idris.CommandLine.Required', <<"backend"/utf8>>} | []], fun (V32) -> [{'Idris.CommandLine.IncrementalCG', V32} | []] end, {'Prelude.Types.Just', <<"Incremental code generation on given backend"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--whole-program"/utf8>> | [<<"--wp"/utf8>> | []]], [], [{'Idris.CommandLine.WholeProgram'} | []], {'Prelude.Types.Just', <<"Use whole program compilation (overrides --inc)"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--directive"/utf8>> | []], [{'Idris.CommandLine.Required', <<"directive"/utf8>>} | []], fun (V33) -> [{'Idris.CommandLine.Directive', V33} | []] end, {'Prelude.Types.Just', <<"Pass a directive to the current code generator"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--package"/utf8>> | [<<"-p"/utf8>> | []]], [{'Idris.CommandLine.Required', <<"package"/utf8>>} | []], fun (V34) -> [{'Idris.CommandLine.PkgPath', V34} | []] end, {'Prelude.Types.Just', <<"Add a package as a dependency"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--source-dir"/utf8>> | []], [{'Idris.CommandLine.Required', <<"dir"/utf8>>} | []], fun (V35) -> [{'Idris.CommandLine.SourceDir', V35} | []] end, {'Prelude.Types.Just', <<"Set source directory"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--build-dir"/utf8>> | []], [{'Idris.CommandLine.Required', <<"dir"/utf8>>} | []], fun (V36) -> [{'Idris.CommandLine.BuildDir', V36} | []] end, {'Prelude.Types.Just', <<"Set build directory"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--output-dir"/utf8>> | []], [{'Idris.CommandLine.Required', <<"dir"/utf8>>} | []], fun (V37) -> [{'Idris.CommandLine.OutputDir', V37} | []] end, {'Prelude.Types.Just', <<"Set output directory"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--profile"/utf8>> | []], [], [{'Idris.CommandLine.Profile'} | []], {'Prelude.Types.Just', <<"Generate profile data when compiling, if supported"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.CommandLine.MkOpt', [<<"--total"/utf8>> | []], [], [{'Idris.CommandLine.Total'} | []], {'Prelude.Types.Just', <<"Require functions to be total by default"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"-Werror"/utf8>> | []], [], [{'Idris.CommandLine.WarningsAsErrors'} | []], {'Prelude.Types.Just', <<"Treat warnings as errors"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"-Wno-shadowing"/utf8>> | []], [], [{'Idris.CommandLine.IgnoreShadowingWarnings'} | []], {'Prelude.Types.Just', <<"Do not print shadowing warnings"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.CommandLine.MkOpt', [<<"-Xcheck-hashes"/utf8>> | []], [], [{'Idris.CommandLine.HashesInsteadOfModTime'} | []], {'Prelude.Types.Just', <<"Use SHA256 hashes instead of modification time to determine if a source file needs rebuilding"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"-Xcase-tree-opt"/utf8>> | []], [], [{'Idris.CommandLine.CaseTreeHeuristics'} | []], {'Prelude.Types.Just', <<"Apply experimental optimizations to case tree generation"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.CommandLine.MkOpt', [<<"--prefix"/utf8>> | []], [], [{'Idris.CommandLine.Directory', 1} | []], {'Prelude.Types.Just', <<"Show installation prefix"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--paths"/utf8>> | []], [], [{'Idris.CommandLine.Directory', 2} | []], {'Prelude.Types.Just', <<"Show paths"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--libdir"/utf8>> | []], [], [{'Idris.CommandLine.Directory', 0} | []], {'Prelude.Types.Just', <<"Show library directory"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--list-packages"/utf8>> | []], [], [{'Idris.CommandLine.ListPackages'} | []], {'Prelude.Types.Just', <<"List installed packages"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.CommandLine.MkOpt', [<<"--init"/utf8>> | []], [{'Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V38) -> [{'Idris.CommandLine.Package', 7, V38} | []] end, {'Prelude.Types.Just', <<"Interactively initialise a new project"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--build"/utf8>> | []], [{'Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V39) -> [{'Idris.CommandLine.Package', 0, V39} | []] end, {'Prelude.Types.Just', <<"Build modules/executable for the given package"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--install"/utf8>> | []], [{'Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V40) -> [{'Idris.CommandLine.Package', 1, V40} | []] end, {'Prelude.Types.Just', <<"Install the given package"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--install-with-src"/utf8>> | []], [{'Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V41) -> [{'Idris.CommandLine.Package', 2, V41} | []] end, {'Prelude.Types.Just', <<"Install the given package"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--mkdoc"/utf8>> | []], [{'Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V42) -> [{'Idris.CommandLine.Package', 3, V42} | []] end, {'Prelude.Types.Just', <<"Build documentation for the given package"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--typecheck"/utf8>> | []], [{'Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V43) -> [{'Idris.CommandLine.Package', 4, V43} | []] end, {'Prelude.Types.Just', <<"Typechecks the given package without code generation"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--clean"/utf8>> | []], [{'Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V44) -> [{'Idris.CommandLine.Package', 5, V44} | []] end, {'Prelude.Types.Just', <<"Clean intermediate files/executables for the given package"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--repl"/utf8>> | []], [{'Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V45) -> [{'Idris.CommandLine.Package', 6, V45} | []] end, {'Prelude.Types.Just', <<"Build the given package and launch a REPL instance."/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--find-ipkg"/utf8>> | []], [], [{'Idris.CommandLine.FindIPKG'} | []], {'Prelude.Types.Just', <<"Find and use an .ipkg file in a parent directory."/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--ignore-missing-ipkg"/utf8>> | []], [], [{'Idris.CommandLine.IgnoreMissingIPKG'} | []], {'Prelude.Types.Just', <<"Fail silently if a dependency is missing."/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--changed-modules"/utf8>> | []], [{'Idris.CommandLine.Required', <<"namespaces"/utf8>>} | []], fun (V46) -> [{'Idris.CommandLine.ChangedModules', {'Prelude.Types.Just', ('un--parseModules'(V46))}} | []] end, {'Prelude.Types.Just', <<"Comma-separated list of namespaces that have changed since last code generation"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.CommandLine.MkOpt', [<<"--ide-mode"/utf8>> | []], [], [{'Idris.CommandLine.IdeMode'} | []], {'Prelude.Types.Just', <<"Run the REPL with machine-readable syntax"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--ide-mode-socket"/utf8>> | []], [{'Idris.CommandLine.Optional', <<"host:port"/utf8>>} | []], fun (V47) -> [{'Idris.CommandLine.IdeModeSocket', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('un--formatSocketAddress'(('un--ideSocketModeAddress'([])))) end, V47))} | []] end, {'Prelude.Types.Just', <<"Run the ide socket mode on given host and port (random open socket by default)"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.CommandLine.MkOpt', [<<"--client"/utf8>> | []], [{'Idris.CommandLine.Required', <<"REPL command"/utf8>>} | []], fun (V48) -> [{'Idris.CommandLine.RunREPL', V48} | []] end, {'Prelude.Types.Just', <<"Run a REPL command then quit immediately"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--timing"/utf8>> | []], [{'Idris.CommandLine.AutoNat', <<"level"/utf8>>} | []], fun (V49) -> [{'Idris.CommandLine.Timing', V49} | []] end, {'Prelude.Types.Just', <<"Display timing logs"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.CommandLine.MkOpt', [<<"--no-banner"/utf8>> | []], [], [{'Idris.CommandLine.NoBanner'} | []], {'Prelude.Types.Just', <<"Suppress the banner"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--quiet"/utf8>> | [<<"-q"/utf8>> | []]], [], [{'Idris.CommandLine.Quiet'} | []], {'Prelude.Types.Just', <<"Quiet mode; display fewer messages"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--console-width"/utf8>> | []], [{'Idris.CommandLine.AutoNat', <<"console width"/utf8>>} | []], fun (V50) -> [{'Idris.CommandLine.ConsoleWidth', V50} | []] end, {'Prelude.Types.Just', <<"Width for console output (0 for unbounded) (auto by default)"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--show-machine-names"/utf8>> | []], [], [{'Idris.CommandLine.ShowMachineNames'} | []], {'Prelude.Types.Just', <<"Show machine names when pretty printing"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--show-namespaces"/utf8>> | []], [], [{'Idris.CommandLine.ShowNamespaces'} | []], {'Prelude.Types.Just', <<"Show namespaces when pretty printing"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--color"/utf8>> | [<<"--colour"/utf8>> | []]], [], [{'Idris.CommandLine.Color', 1} | []], {'Prelude.Types.Just', <<"Forces colored console output (enabled by default)"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--no-color"/utf8>> | [<<"--no-colour"/utf8>> | []]], [], [{'Idris.CommandLine.Color', 0} | []], {'Prelude.Types.Just', <<"Disables colored console output"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--verbose"/utf8>> | []], [], [{'Idris.CommandLine.Verbose'} | []], {'Prelude.Types.Just', <<"Verbose mode (default)"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--log"/utf8>> | []], [{'Idris.CommandLine.RequiredLogLevel', <<"log level"/utf8>>} | []], fun (V51) -> [{'Idris.CommandLine.Logging', V51} | []] end, {'Prelude.Types.Just', <<"Global log level (0 by default)"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.CommandLine.MkOpt', [<<"--version"/utf8>> | [<<"-v"/utf8>> | []]], [], [{'Idris.CommandLine.Version'} | []], {'Prelude.Types.Just', <<"Display version string"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--ttc-version"/utf8>> | []], [], [{'Idris.CommandLine.TTCVersion'} | []], {'Prelude.Types.Just', <<"Display TTC version string"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--help"/utf8>> | [<<"-h"/utf8>> | [<<"-?"/utf8>> | []]]], [{'Idris.CommandLine.Optional', <<"topic"/utf8>>} | []], fun (V52) -> [{'Idris.CommandLine.Help', ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V52, fun (V53) -> ('un--recogniseHelpTopic'(V53)) end))} | []] end, {'Prelude.Types.Just', <<"Display help text"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--yaffle"/utf8>> | [<<"--ttimp"/utf8>> | []]], [{'Idris.CommandLine.Required', <<"ttimp file"/utf8>>} | []], fun (V54) -> [{'Idris.CommandLine.Yaffle', V54} | []] end, {'Prelude.Types.Nothing'}} | [{'Idris.CommandLine.MkOpt', [<<"--ttm"/utf8>> | []], [{'Idris.CommandLine.Required', <<"ttimp file"/utf8>>} | []], fun (V55) -> [{'Idris.CommandLine.Metadata', V55} | []] end, {'Prelude.Types.Nothing'}} | [{'Idris.CommandLine.MkOpt', [<<"--dumpcases"/utf8>> | []], [{'Idris.CommandLine.Required', <<"output file"/utf8>>} | []], fun (V56) -> [{'Idris.CommandLine.DumpCases', V56} | []] end, {'Prelude.Types.Nothing'}} | [{'Idris.CommandLine.MkOpt', [<<"--dumplifted"/utf8>> | []], [{'Idris.CommandLine.Required', <<"output file"/utf8>>} | []], fun (V57) -> [{'Idris.CommandLine.DumpLifted', V57} | []] end, {'Prelude.Types.Nothing'}} | [{'Idris.CommandLine.MkOpt', [<<"--dumpanf"/utf8>> | []], [{'Idris.CommandLine.Required', <<"output file"/utf8>>} | []], fun (V58) -> [{'Idris.CommandLine.DumpANF', V58} | []] end, {'Prelude.Types.Nothing'}} | [{'Idris.CommandLine.MkOpt', [<<"--dumpvmcode"/utf8>> | []], [{'Idris.CommandLine.Required', <<"output file"/utf8>>} | []], fun (V59) -> [{'Idris.CommandLine.DumpVMCode', V59} | []] end, {'Prelude.Types.Nothing'}} | [{'Idris.CommandLine.MkOpt', [<<"--debug-elab-check"/utf8>> | []], [], [{'Idris.CommandLine.DebugElabCheck'} | []], {'Prelude.Types.Nothing'}} | [{'Idris.CommandLine.MkOpt', [<<"--alt-error-count"/utf8>> | []], [{'Idris.CommandLine.RequiredNat', <<"alternative count"/utf8>>} | []], fun (V60) -> [{'Idris.CommandLine.AltErrorCount', V60} | []] end, {'Prelude.Types.Just', <<"Outputs errors for the given number of alternative parsing attempts."/utf8>>}} | [('un--optSeparator'()) | [{'Idris.CommandLine.MkOpt', [<<"--bash-completion"/utf8>> | []], [{'Idris.CommandLine.Required', <<"input"/utf8>>} | [{'Idris.CommandLine.Required', <<"previous input"/utf8>>} | []]], fun (V61) -> fun (V62) -> [{'Idris.CommandLine.BashCompletion', V61, V62} | []] end end, {'Prelude.Types.Just', <<"Print bash autocompletion information"/utf8>>}} | [{'Idris.CommandLine.MkOpt', [<<"--bash-completion-script"/utf8>> | []], [{'Idris.CommandLine.Required', <<"function name"/utf8>>} | []], fun (V63) -> [{'Idris.CommandLine.BashCompletionScript', V63} | []] end, {'Prelude.Types.Just', <<"Generate a bash script to activate autocompletion for Idris2"/utf8>>}} | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]].
'un--optionFlags'() -> ('Idris.Idris2.Prelude.Types':'un--listBind'(('un--options'()), fun (V0) -> case V0 of {'Idris.CommandLine.MkOpt', V1, V2, V3, V4} -> V1 end end)).
'un--optShow'(V0) -> case V0 of {'Idris.CommandLine.MkOpt', V1, V2, V3, V4} -> case V1 of [] -> {'Builtin.MkPair', <<""/utf8>>, {'Prelude.Types.Just', <<""/utf8>>}}; _ -> {'Builtin.MkPair', <<('nested--6863-3646--in--un--showSep'(V4, V2, V3, V1, <<", "/utf8>>, V1))/binary, <<<<" "/utf8>>/binary, ('nested--6863-3646--in--un--showSep'(V4, V2, V3, V1, <<" "/utf8>>, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('dn--un--show_Show_OptType'(V5)) end))(V2))))/binary>>/binary>>, V4} end end.
'un--optSeparator'() -> {'Idris.CommandLine.MkOpt', [], [], [], {'Prelude.Types.Nothing'}}.
'un--matchFlag'(V0, V1) -> case V1 of [] -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}}; [E0 | E1] -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> V24 end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V27, V28, V29)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V32, V33)) end end}, V2, case V0 of {'Idris.CommandLine.MkOpt', V34, V35, V36, V37} -> V34 end)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('un--processArgs'(V2, case V0 of {'Idris.CommandLine.MkOpt', V38, V39, V40, V41} -> V39 end, V3, case V0 of {'Idris.CommandLine.MkOpt', V42, V43, V44, V45} -> V44 end)), fun (V46) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V46}} end)); 0 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end(E0, E1)) end.
'un--makeTextFromOptionsOrEnvs'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> <<V1/binary, V2/binary>> end end, <<""/utf8>>}, fun (V3) -> ('nested--6981-3751--in--un--optUsage'(V0, ('un--firstColumnWidth'()), V3)) end, V0)).
'un--ideSocketModeAddress'(V0) -> case V0 of [] -> {'Builtin.MkPair', <<"localhost"/utf8>>, 0}; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.CommandLine.IdeModeSocket', V3} -> ('case--ideSocketModeAddress-1529'(V2, V3, ('Idris.Idris2.Data.String':'un--break'(fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V4, $:)) end, V3)))); _ -> ('un--ideSocketModeAddress'(V2)) end end(E0, E1)) end.
'un--getOpts'(V0) -> ('un--parseOpts'(('un--options'()), V0)).
'un--getCmdOpts'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getArgs'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}))(V0))), case V28 of [E0 | E1] -> (fun (V29, V30) -> ('un--getOpts'(V30)) end(E0, E1)); _ -> {'Prelude.Types.Left', <<"Invalid command line"/utf8>>} end end.
'un--formatSocketAddress'(V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> <<V1/binary, <<<<":"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>/binary>> end.
'un--firstColumnWidth'() -> begin (V10 = ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V0) -> fun (V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V0, V1)) end end, 0, ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--length'(('Idris.Idris2.Builtin':'un--fst'(('un--optShow'(V2)))))) end))(('un--options'())))))), begin (V23 = ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V11, V12)) end end, 0, ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V13) -> ('Idris.Idris2.Prelude.Types.String':'un--length'(case V13 of {'Idris.Env.MkEnvDesc', V14, V15} -> V14 end)) end))(('Idris.Idris2.Idris.Env':'un--envs'())))))), ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V10, V23)) end end.
'un--findMatch'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'Prelude.Types.Right', {'Builtin.MkPair', [], []}}; [E0 | E1] -> (fun (V2, V3) -> {'Prelude.Types.Right', {'Builtin.MkPair', [{'Idris.CommandLine.InputFile', V2} | []], V3}} end(E0, E1)) end; [E2 | E3] -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('un--matchFlag'(V4, V1)), fun (V6) -> case V6 of {'Prelude.Types.Nothing'} -> ('un--findMatch'(V5, V1)); {'Prelude.Types.Just', V7} -> {'Prelude.Types.Right', V7} end end)) end(E2, E3)) end.
'un--envsUsage'() -> ('un--makeTextFromOptionsOrEnvs'(((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V0) -> {'Builtin.MkPair', case V0 of {'Idris.Env.MkEnvDesc', V1, V2} -> V1 end, {'Prelude.Types.Just', case V0 of {'Idris.Env.MkEnvDesc', V3, V4} -> V4 end}} end))(('Idris.Idris2.Idris.Env':'un--envs'()))))).
'un--checkNat'(V0) -> ('Idris.Idris2.Data.Maybe':'un--toMaybe'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V0, 0)), fun () -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V0)) end)).
