-module('Idris.Idris2.Compiler.NoMangle').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--initNoMangle-13546'/7,
  'nested--6246-13451--in--un--lookupBackend'/5,
  'un--lookupNoMangle'/2,
  'un--isNoMangle'/2,
  'un--initNoMangle'/3
]).
'case--initNoMangle-13546'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Prelude.Types.Just', V7} -> fun (V8) -> case V7 of {'Builtin.MkPair', V9, V10} -> case (V0(V10)) of 1 -> {'Prelude.Types.Right', V10}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', {'Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V11) -> fun (V12) -> <<V11/binary, V12/binary>> end end, <<""/utf8>>}, fun (V13) -> V13 end, [<<"\x{22}"/utf8>> | [V10 | [<<"\x{22} is not a valid name on "/utf8>> | [V9 | [<<" backend"/utf8>> | []]]]]]))}, V8)) end end end; {'Prelude.Types.Nothing'} -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', {'Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V15) -> fun (V16) -> <<V15/binary, V16/binary>> end end, <<""/utf8>>}, fun (V17) -> V17 end, [<<"No valid %export specifier for "/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) | [<<"\x{a}  Supported backends: "/utf8>> | [('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, V1)) | [<<"\x{a}  Given backends: "/utf8>> | [('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('Idris.Idris2.Builtin':'un--fst'(V18)) end))(V5)))) | []]]]]]]))}, V14)) end end.
'nested--6246-13451--in--un--lookupBackend'(V0, V1, V2, V3, V4) -> case V3 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V5, V6) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V9, V10)) end end}, V5, V4)) of {'Prelude.Types.Just', V11} -> {'Prelude.Types.Just', {'Builtin.MkPair', V5, V11}}; {'Prelude.Types.Nothing'} -> ('nested--6246-13451--in--un--lookupBackend'(V0, V1, V2, V6, V4)) end end(E0, E1)) end.
'un--lookupNoMangle'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', ('un--isNoMangle'(V11, V1))} end), V13 end(V8)) end end end end.
'un--isNoMangle'(V0, V1) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V1, begin (V2 = V0), V2 end)).
'un--initNoMangle'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V53 = begin (V47 = ('Idris.Idris2.Libraries.Data.NameMap.Traversable':'un--traverseNameMap'(fun (V13) -> fun (V14) -> ('case--initNoMangle-13546'(V2, V1, V0, V12, V13, V14, ('nested--6246-13451--in--un--lookupBackend'(V2, V1, V0, V1, V14)))) end end, case V12 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> V46 end))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V52 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.NoMangle.NoMangleMap'}, V51))), V52 end(V48)) end end end end), V53 end(V9)) end end end end.
