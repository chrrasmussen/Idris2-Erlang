-module('Idris.Idris2.Idris.Package.Init').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--interactive,mstring-10196'/2,
  'case--isModuleIdent-9809'/2,
  'nested--5051-9832--in--un--validFile'/3,
  'nested--5051-9833--in--un--validDirectory'/3,
  'nested--5416-10186--in--un--mstring'/1,
  'nested--5129-9914--in--un--go'/4,
  'un--prompt'/2,
  'un--packageTree'/1,
  'un--isModuleIdent'/1,
  'un--interactive'/1,
  'un--findModules'/2
]).
'case--interactive,mstring-10196'(V0, V1) -> case V1 of <<""/utf8>> -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', V1} end.
'case--isModuleIdent-9809'(V0, V1) -> case V1 of [] -> 0; [E0 | E1] -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.Types':'un--isUpper'(V2)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V4, V5)) end end, 1}, fun (V6) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V6)) end, V1)); 0 -> 0 end end(E0, E1)) end.
'nested--5051-9832--in--un--validFile'(V0, V1, V2) -> case ('Idris.Idris2.Core.Directory':'un--splitIdrisFileName'(('Idris.Idris2.Libraries.System.Directory.Tree':'un--fileName'(V2)))) of {'Prelude.Types.Nothing'} -> 0; {'Prelude.Types.Just', V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> ('un--isModuleIdent'(V4)) end end.
'nested--5051-9833--in--un--validDirectory'(V0, V1, V2) -> ('un--isModuleIdent'(('Idris.Idris2.Libraries.System.Directory.Tree':'un--fileName'(V2)))).
'nested--5416-10186--in--un--mstring'(V0) -> ('case--interactive,mstring-10196'(V0, ('Idris.Idris2.Data.String':'un--trim'(V0)))).
'nested--5129-9914--in--un--go'(V0, V1, V2, V3) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.DPair.MkDPair', V8, V9} -> begin (V10 = (V9(V3))), begin (V24 = ('Idris.Idris2.Prelude.Basics':'un--flip'(begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end, case V10 of {'Libraries.System.Directory.Tree.MkTree', V18, V19} -> V18 end, fun (V20) -> begin (V21 = ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Libraries.Utils.Path':'un--splitFileName'(('Idris.Idris2.Libraries.System.Directory.Tree':'un--fileName'(V20))))))), begin (V22 = [V21 | V6]), begin (V23 = ('Idris.Idris2.Libraries.System.Directory.Tree':'un--toFilePath'(V8, V20))), {'Builtin.MkPair', V22, V23} end end end end))), begin (V37 = ('Idris.Idris2.Prelude.Basics':'un--flip'(begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end, case V10 of {'Libraries.System.Directory.Tree.MkTree', V32, V33} -> V33 end, fun (V34) -> case V34 of {'Builtin.DPair.MkDPair', V35, V36} -> {'Builtin.MkPair', [('Idris.Idris2.Libraries.System.Directory.Tree':'un--fileName'(V35)) | V6], {'Builtin.DPair.MkDPair', ('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V8, ('Idris.Idris2.Libraries.System.Directory.Tree':'un--fileName'(V35)))), V36}} end end))), ('nested--5129-9914--in--un--go'(V0, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V24, V1)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V37, V5)), V3)) end end end end end end(E0, E1)) end.
'un--prompt'(V0, V1) -> begin (V30 = begin (V2 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(V0, V1))), (('Idris.Idris2.Erlang.System.File':'un--fflush'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, ('Idris.Idris2.Erlang.System.File':'un--stdout'())))(V1)) end), ('Idris.Idris2.Prelude.IO':'un--prim__getStr'(V1)) end.
'un--packageTree'(V0) -> ((begin (V12 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V9, V10, V11)) end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V2) -> ('Idris.Idris2.Libraries.System.Directory.Tree':'un--filter'(fun (V3) -> fun (V4) -> ('nested--5051-9832--in--un--validFile'(V0, V3, V4)) end end, fun (V5) -> fun (V6) -> ('nested--5051-9833--in--un--validDirectory'(V0, V5, V6)) end end, V0, V2)) end))(fun (V1) -> ('Idris.Idris2.Libraries.System.Directory.Tree':'un--explore'(V0, V1)) end)).
'un--isModuleIdent'(V0) -> ('case--isModuleIdent-9809'(V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))).
'un--interactive'(V0) -> begin (V1 = ('un--prompt'(<<"Package name: "/utf8>>, V0))), begin (V2 = ('un--prompt'(<<"Package authors: "/utf8>>, V0))), begin (V3 = ('un--prompt'(<<"Package options: "/utf8>>, V0))), begin (V4 = ('un--prompt'(<<"Source directory: "/utf8>>, V0))), begin (V5 = ('nested--5416-10186--in--un--mstring'(V4))), begin (V6 = ('un--findModules'(V5, V0))), begin (V41 = case ('Idris.Idris2.Idris.Package.Types':'un--initPkgDesc'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<"project"/utf8>> end, ('nested--5416-10186--in--un--mstring'(V1)))))) of {'Idris.Package.Types.MkPkgDesc', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> {'Idris.Package.Types.MkPkgDesc', V7, V8, V9, ('nested--5416-10186--in--un--mstring'(V2)), V11, V12, V13, V14, V15, V16, V17, V18, V6, V20, V21, V22, ((begin (V38 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V36, V37)) end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V33) -> {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V33} end))(('nested--5416-10186--in--un--mstring'(V3)))), V5, V25, V26, V27, V28, V29, V30, V31, V32} end), V41 end end end end end end end.
'un--findModules'(V0, V1) -> begin (V31 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end})) end, fun () -> fun (V29) -> fun (V30) -> {'Prelude.Types.Just', V29} end end end, V0))(V1))), case V31 of {'Prelude.Types.Just', V32} -> begin (V33 = ('Idris.Idris2.Libraries.Utils.Path':'un--parse'(V32))), begin (V34 = (('un--packageTree'(V33))(V1))), begin (V36 = ('nested--5129-9914--in--un--go'(V0, [], [{'Builtin.MkPair', [], {'Builtin.DPair.MkDPair', V33, fun (V35) -> V34 end}} | []], V1))), ('Idris.Idris2.Data.List':'un--sortBy'(fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(('Idris.Idris2.Builtin':'un--snd'(V37)), ('Idris.Idris2.Builtin':'un--snd'(V38)))) end end, V36)) end end end; {'Prelude.Types.Nothing'} -> [] end end.
