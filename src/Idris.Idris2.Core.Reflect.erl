-module('Idris.Idris2.Core.Reflect').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--reify_Reify_Visibility'/4,
  'dn--un--reify_Reify_VirtualIdent'/4,
  'dn--un--reify_Reify_UserName'/4,
  'dn--un--reify_Reify_TotalReq'/4,
  'dn--un--reify_Reify_String'/4,
  'dn--un--reify_Reify_RigCount'/4,
  'dn--un--reify_Reify_PrimType'/4,
  'dn--un--reify_Reify_OriginDesc'/4,
  'dn--un--reify_Reify_Nat'/4,
  'dn--un--reify_Reify_Namespace'/4,
  'dn--un--reify_Reify_NameType'/4,
  'dn--un--reify_Reify_Name'/4,
  'dn--un--reify_Reify_ModuleIdent'/4,
  'dn--un--reify_Reify_LazyReason'/4,
  'dn--un--reify_Reify_Integer'/4,
  'dn--un--reify_Reify_Int8'/4,
  'dn--un--reify_Reify_Int64'/4,
  'dn--un--reify_Reify_Int32'/4,
  'dn--un--reify_Reify_Int16'/4,
  'dn--un--reify_Reify_Int'/4,
  'dn--un--reify_Reify_FC'/4,
  'dn--un--reify_Reify_Double'/4,
  'dn--un--reify_Reify_Constant'/4,
  'dn--un--reify_Reify_Char'/4,
  'dn--un--reify_Reify_BuiltinType'/4,
  'dn--un--reify_Reify_Bool'/4,
  'dn--un--reify_Reify_Bits8'/4,
  'dn--un--reify_Reify_Bits64'/4,
  'dn--un--reify_Reify_Bits32'/4,
  'dn--un--reify_Reify_Bits16'/4,
  'dn--un--reify_Reify_(|Unit,MkUnit|)'/5,
  'dn--un--reify_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/5,
  'dn--un--reify_Reify_(PiInfo $t)'/5,
  'dn--un--reify_Reify_(Maybe $a)'/5,
  'dn--un--reify_Reify_(List1 $a)'/5,
  'dn--un--reify_Reify_(List $a)'/5,
  'dn--un--reflect_Reflect_Visibility'/6,
  'dn--un--reflect_Reflect_VirtualIdent'/6,
  'dn--un--reflect_Reflect_UserName'/6,
  'dn--un--reflect_Reflect_TotalReq'/6,
  'dn--un--reflect_Reflect_String'/7,
  'dn--un--reflect_Reflect_RigCount'/6,
  'dn--un--reflect_Reflect_PrimType'/6,
  'dn--un--reflect_Reflect_OriginDesc'/6,
  'dn--un--reflect_Reflect_Nat'/6,
  'dn--un--reflect_Reflect_Namespace'/6,
  'dn--un--reflect_Reflect_NameType'/6,
  'dn--un--reflect_Reflect_Name'/6,
  'dn--un--reflect_Reflect_ModuleIdent'/6,
  'dn--un--reflect_Reflect_LazyReason'/6,
  'dn--un--reflect_Reflect_Integer'/7,
  'dn--un--reflect_Reflect_Int8'/7,
  'dn--un--reflect_Reflect_Int64'/7,
  'dn--un--reflect_Reflect_Int32'/7,
  'dn--un--reflect_Reflect_Int16'/7,
  'dn--un--reflect_Reflect_Int'/7,
  'dn--un--reflect_Reflect_FC'/6,
  'dn--un--reflect_Reflect_Double'/7,
  'dn--un--reflect_Reflect_Constant'/6,
  'dn--un--reflect_Reflect_Char'/7,
  'dn--un--reflect_Reflect_BuiltinType'/6,
  'dn--un--reflect_Reflect_Bool'/6,
  'dn--un--reflect_Reflect_Bits8'/7,
  'dn--un--reflect_Reflect_Bits64'/7,
  'dn--un--reflect_Reflect_Bits32'/7,
  'dn--un--reflect_Reflect_Bits16'/7,
  'dn--un--reflect_Reflect_(|Unit,MkUnit|)'/6,
  'dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/7,
  'dn--un--reflect_Reflect_(PiInfo $t)'/7,
  'dn--un--reflect_Reflect_(Maybe $a)'/7,
  'dn--un--reflect_Reflect_(List1 $a)'/7,
  'dn--un--reflect_Reflect_(List $a)'/7,
  'dn--un--__Impl_Reify_Visibility'/4,
  'dn--un--__Impl_Reify_VirtualIdent'/4,
  'dn--un--__Impl_Reify_UserName'/4,
  'dn--un--__Impl_Reify_TotalReq'/4,
  'dn--un--__Impl_Reify_String'/4,
  'dn--un--__Impl_Reify_RigCount'/4,
  'dn--un--__Impl_Reify_PrimType'/4,
  'dn--un--__Impl_Reify_OriginDesc'/4,
  'dn--un--__Impl_Reify_Nat'/4,
  'dn--un--__Impl_Reify_Namespace'/4,
  'dn--un--__Impl_Reify_NameType'/4,
  'dn--un--__Impl_Reify_Name'/4,
  'dn--un--__Impl_Reify_ModuleIdent'/4,
  'dn--un--__Impl_Reify_LazyReason'/4,
  'dn--un--__Impl_Reify_Integer'/4,
  'dn--un--__Impl_Reify_Int8'/4,
  'dn--un--__Impl_Reify_Int64'/4,
  'dn--un--__Impl_Reify_Int32'/4,
  'dn--un--__Impl_Reify_Int16'/4,
  'dn--un--__Impl_Reify_Int'/4,
  'dn--un--__Impl_Reify_FC'/4,
  'dn--un--__Impl_Reify_Double'/4,
  'dn--un--__Impl_Reify_Constant'/4,
  'dn--un--__Impl_Reify_Char'/4,
  'dn--un--__Impl_Reify_BuiltinType'/4,
  'dn--un--__Impl_Reify_Bool'/4,
  'dn--un--__Impl_Reify_Bits8'/4,
  'dn--un--__Impl_Reify_Bits64'/4,
  'dn--un--__Impl_Reify_Bits32'/4,
  'dn--un--__Impl_Reify_Bits16'/4,
  'dn--un--__Impl_Reify_(|Unit,MkUnit|)'/5,
  'dn--un--__Impl_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/5,
  'dn--un--__Impl_Reify_(PiInfo $t)'/5,
  'dn--un--__Impl_Reify_(Maybe $a)'/5,
  'dn--un--__Impl_Reify_(List1 $a)'/5,
  'dn--un--__Impl_Reify_(List $a)'/5,
  'dn--un--__Impl_Reflect_Visibility'/6,
  'dn--un--__Impl_Reflect_VirtualIdent'/6,
  'dn--un--__Impl_Reflect_UserName'/6,
  'dn--un--__Impl_Reflect_TotalReq'/6,
  'dn--un--__Impl_Reflect_String'/7,
  'dn--un--__Impl_Reflect_RigCount'/6,
  'dn--un--__Impl_Reflect_PrimType'/6,
  'dn--un--__Impl_Reflect_OriginDesc'/6,
  'dn--un--__Impl_Reflect_Nat'/6,
  'dn--un--__Impl_Reflect_Namespace'/6,
  'dn--un--__Impl_Reflect_NameType'/6,
  'dn--un--__Impl_Reflect_Name'/6,
  'dn--un--__Impl_Reflect_ModuleIdent'/6,
  'dn--un--__Impl_Reflect_LazyReason'/6,
  'dn--un--__Impl_Reflect_Integer'/7,
  'dn--un--__Impl_Reflect_Int8'/7,
  'dn--un--__Impl_Reflect_Int64'/7,
  'dn--un--__Impl_Reflect_Int32'/7,
  'dn--un--__Impl_Reflect_Int16'/7,
  'dn--un--__Impl_Reflect_Int'/7,
  'dn--un--__Impl_Reflect_FC'/6,
  'dn--un--__Impl_Reflect_Double'/7,
  'dn--un--__Impl_Reflect_Constant'/6,
  'dn--un--__Impl_Reflect_Char'/7,
  'dn--un--__Impl_Reflect_BuiltinType'/6,
  'dn--un--__Impl_Reflect_Bool'/6,
  'dn--un--__Impl_Reflect_Bits8'/7,
  'dn--un--__Impl_Reflect_Bits64'/7,
  'dn--un--__Impl_Reflect_Bits32'/7,
  'dn--un--__Impl_Reflect_Bits16'/7,
  'dn--un--__Impl_Reflect_(|Unit,MkUnit|)'/6,
  'dn--un--__Impl_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/7,
  'dn--un--__Impl_Reflect_(PiInfo $t)'/7,
  'dn--un--__Impl_Reflect_(Maybe $a)'/7,
  'dn--un--__Impl_Reflect_(List1 $a)'/7,
  'dn--un--__Impl_Reflect_(List $a)'/7,
  'un--reify'/3,
  'un--reflectionttimp'/1,
  'un--reflectiontt'/1,
  'un--reflection'/1,
  'un--reflect'/2,
  'un--primio'/1,
  'un--preludetypes'/1,
  'un--getCon'/4,
  'un--cantReify'/4,
  'un--cantReflect'/3,
  'un--builtin'/1,
  'un--basics'/1,
  'un--appCon'/5
]).
'dn--un--reify_Reify_Visibility'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V52 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"Private"/utf8>> -> fun (V49) -> {'Prelude.Types.Right', 0} end; <<"Export"/utf8>> -> fun (V50) -> {'Prelude.Types.Right', 1} end; <<"Public"/utf8>> -> fun (V51) -> {'Prelude.Types.Right', 2} end; _ -> ('un--cantReify'(V0, V1, V46, <<"Visibility"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Visibility"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Visibility"/utf8>>)) end end), V52 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"Visibility"/utf8>>)) end.
'dn--un--reify_Reify_VirtualIdent'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V50 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"Interactive"/utf8>> -> case V8 of [] -> fun (V49) -> {'Prelude.Types.Right', {'Core.FC.Interactive'}} end; _ -> ('un--cantReify'(V0, V1, V46, <<"VirtualIdent"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"VirtualIdent"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"VirtualIdent"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"VirtualIdent"/utf8>>)) end end), V50 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"VirtualIdent"/utf8>>)) end.
'dn--un--reify_Reify_UserName'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V87 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"Basic"/utf8>> -> case V8 of [E0 | E1] -> (fun (V49, V50) -> case V49 of {'Builtin.MkPair', V51, V52} -> case V50 of [] -> begin (V59 = begin (V53 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V52))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V58 = ('dn--un--reify_Reify_String'(V0, V1, V2, V57))), V58 end(V54)) end end end end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V65 = fun (V64) -> {'Prelude.Types.Right', {'Core.Name.Basic', V63}} end), V65 end(V60)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; <<"Field"/utf8>> -> case V8 of [E2 | E3] -> (fun (V66, V67) -> case V66 of {'Builtin.MkPair', V68, V69} -> case V67 of [] -> begin (V76 = begin (V70 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V69))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V75 = ('dn--un--reify_Reify_String'(V0, V1, V2, V74))), V75 end(V71)) end end end end), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V82 = fun (V81) -> {'Prelude.Types.Right', {'Core.Name.Field', V80}} end), V82 end(V77)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E2, E3)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; <<"Underscore"/utf8>> -> case V8 of [] -> fun (V83) -> {'Prelude.Types.Right', {'Core.Name.Underscore'}} end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; {'Core.Name.NS', V84, V85} -> case V85 of {'Core.Name.UN', V86} -> ('un--cantReify'(V0, V1, V46, <<"Name, reifying it is unimplemented or intentionally internal"/utf8>>)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end), V87 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"Name, value is not an NDCon interally"/utf8>>)) end.
'dn--un--reify_Reify_TotalReq'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V52 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"Total"/utf8>> -> fun (V49) -> {'Prelude.Types.Right', 0} end; <<"CoveringOnly"/utf8>> -> fun (V50) -> {'Prelude.Types.Right', 1} end; <<"PartialOK"/utf8>> -> fun (V51) -> {'Prelude.Types.Right', 2} end; _ -> ('un--cantReify'(V0, V1, V46, <<"TotalReq"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"TotalReq"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"TotalReq"/utf8>>)) end end), V52 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"TotalReq"/utf8>>)) end.
'dn--un--reify_Reify_String'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.Str', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"String"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"String"/utf8>>)) end.
'dn--un--reify_Reify_RigCount'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V60 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"M0"/utf8>> -> fun (V49) -> {'Prelude.Types.Right', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V50, V51)) end end, 0, fun (V52) -> fun (V53) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V52, V53)) end end, 1}))} end; <<"M1"/utf8>> -> fun (V54) -> {'Prelude.Types.Right', ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V55) -> fun (V56) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V55, V56)) end end, 0, fun (V57) -> fun (V58) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V57, V58)) end end, 1}))} end; <<"MW"/utf8>> -> fun (V59) -> {'Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'())} end; _ -> ('un--cantReify'(V0, V1, V46, <<"Count"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Count"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Count"/utf8>>)) end end), V60 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"Count"/utf8>>)) end.
'dn--un--reify_Reify_PrimType'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V63 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"IntType"/utf8>> -> case V8 of [] -> fun (V49) -> {'Prelude.Types.Right', 0} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"Int8Type"/utf8>> -> case V8 of [] -> fun (V50) -> {'Prelude.Types.Right', 1} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"Int16Type"/utf8>> -> case V8 of [] -> fun (V51) -> {'Prelude.Types.Right', 2} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"Int32Type"/utf8>> -> case V8 of [] -> fun (V52) -> {'Prelude.Types.Right', 3} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"Int64Type"/utf8>> -> case V8 of [] -> fun (V53) -> {'Prelude.Types.Right', 4} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"IntegerType"/utf8>> -> case V8 of [] -> fun (V54) -> {'Prelude.Types.Right', 5} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"Bits8Type"/utf8>> -> case V8 of [] -> fun (V55) -> {'Prelude.Types.Right', 6} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"Bits16Type"/utf8>> -> case V8 of [] -> fun (V56) -> {'Prelude.Types.Right', 7} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"Bits32Type"/utf8>> -> case V8 of [] -> fun (V57) -> {'Prelude.Types.Right', 8} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"Bits64Type"/utf8>> -> case V8 of [] -> fun (V58) -> {'Prelude.Types.Right', 9} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"StringType"/utf8>> -> case V8 of [] -> fun (V59) -> {'Prelude.Types.Right', 10} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"CharType"/utf8>> -> case V8 of [] -> fun (V60) -> {'Prelude.Types.Right', 11} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"DoubleType"/utf8>> -> case V8 of [] -> fun (V61) -> {'Prelude.Types.Right', 12} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; <<"WorldType"/utf8>> -> case V8 of [] -> fun (V62) -> {'Prelude.Types.Right', 13} end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"PrimType"/utf8>>)) end end), V63 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"PrimType"/utf8>>)) end.
'dn--un--reify_Reify_OriginDesc'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V100 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"PhysicalIdrSrc"/utf8>> -> case V8 of [E0 | E1] -> (fun (V49, V50) -> case V49 of {'Builtin.MkPair', V51, V52} -> case V50 of [] -> begin (V59 = begin (V53 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V52))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V58 = ('dn--un--reify_Reify_ModuleIdent'(V0, V1, V2, V57))), V58 end(V54)) end end end end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V65 = fun (V64) -> {'Prelude.Types.Right', {'Core.FC.PhysicalIdrSrc', V63}} end), V65 end(V60)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end; <<"PhysicalPkgSrc"/utf8>> -> case V8 of [E2 | E3] -> (fun (V66, V67) -> case V66 of {'Builtin.MkPair', V68, V69} -> case V67 of [] -> begin (V76 = begin (V70 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V69))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V75 = ('dn--un--reify_Reify_String'(V0, V1, V2, V74))), V75 end(V71)) end end end end), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V82 = fun (V81) -> {'Prelude.Types.Right', {'Core.FC.PhysicalPkgSrc', V80}} end), V82 end(V77)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end end(E2, E3)); _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end; <<"Virtual"/utf8>> -> case V8 of [E4 | E5] -> (fun (V83, V84) -> case V83 of {'Builtin.MkPair', V85, V86} -> case V84 of [] -> begin (V93 = begin (V87 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V86))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V92 = ('dn--un--reify_Reify_VirtualIdent'(V0, V1, V2, V91))), V92 end(V88)) end end end end), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V99 = fun (V98) -> {'Prelude.Types.Right', {'Core.FC.Virtual', V97}} end), V99 end(V94)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end end(E4, E5)); _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"OriginDesc"/utf8>>)) end end), V100 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"OriginDesc"/utf8>>)) end.
'dn--un--reify_Reify_Nat'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V74 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"Z"/utf8>> -> fun (V49) -> {'Prelude.Types.Right', 0} end; <<"S"/utf8>> -> case V8 of [E0 | E1] -> (fun (V50, V51) -> case V50 of {'Builtin.MkPair', V52, V53} -> case V51 of [] -> begin (V67 = begin (V54 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V53))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V66 = ((begin (V63 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('dn--un--reify_Reify_Nat'(V59, V60, V61, V62)) end end end end), fun (V64) -> fun (V65) -> ((((V63(V0))(V1))(V64))(V65)) end end end(V2))(V58))), V66 end(V55)) end end end end), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V73 = fun (V72) -> {'Prelude.Types.Right', (V71 + 1)} end), V73 end(V68)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Nat"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Nat"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V0, V1, V46, <<"Nat"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Nat"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Nat"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Nat"/utf8>>)) end end), V74 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"Nat"/utf8>>)) end.
'dn--un--reify_Reify_Namespace'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> case V8 of [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Builtin.MkPair', V11, V12} -> case V10 of [] -> begin (V45 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end, V5))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V77 = begin (V50 = {'Core.Value.NDCon', V4, V5, V6, V7, [{'Builtin.MkPair', V11, V12} | []]}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V49)) of {'Core.Name.UN', V51} -> case V51 of {'Core.Name.Basic', V52} -> case V52 of <<"MkNS"/utf8>> -> begin (V70 = begin (V53 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V12))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V69 = ((begin (V66 = fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('dn--un--reify_Reify_(List $a)'(fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('dn--un--reify_Reify_String'(V62, V63, V64, V65)) end end end end, V58, V59, V60, V61)) end end end end), fun (V67) -> fun (V68) -> ((((V66(V0))(V1))(V67))(V68)) end end end(V2))(V57))), V69 end(V54)) end end end end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V76 = fun (V75) -> {'Prelude.Types.Right', V74} end), V76 end(V71)) end end end end; _ -> ('un--cantReify'(V0, V1, V50, <<"Namespace"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V50, <<"Namespace"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V50, <<"Namespace"/utf8>>)) end end), V77 end(V46)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"Namespace"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Namespace"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V0, V1, V3, <<"Namespace"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Namespace"/utf8>>)) end.
'dn--un--reify_Reify_NameType'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V117 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"Bound"/utf8>> -> fun (V49) -> {'Prelude.Types.Right', {'Core.TT.Bound'}} end; <<"Func"/utf8>> -> fun (V50) -> {'Prelude.Types.Right', {'Core.TT.Func'}} end; <<"DataCon"/utf8>> -> case V8 of [E0 | E1] -> (fun (V51, V52) -> case V51 of {'Builtin.MkPair', V53, V54} -> case V52 of [E2 | E3] -> (fun (V55, V56) -> case V55 of {'Builtin.MkPair', V57, V58} -> case V56 of [] -> begin (V65 = begin (V59 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V54))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V64 = ('dn--un--reify_Reify_Int'(V0, V1, V2, V63))), V64 end(V60)) end end end end), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V83 = begin (V76 = begin (V70 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V58))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V75 = ('dn--un--reify_Reify_Nat'(V0, V1, V2, V74))), V75 end(V71)) end end end end), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V82 = fun (V81) -> {'Prelude.Types.Right', {'Core.TT.DataCon', V69, V80}} end), V82 end(V77)) end end end end), V83 end(V66)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end end(E2, E3)); _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end; <<"TyCon"/utf8>> -> case V8 of [E4 | E5] -> (fun (V84, V85) -> case V84 of {'Builtin.MkPair', V86, V87} -> case V85 of [E6 | E7] -> (fun (V88, V89) -> case V88 of {'Builtin.MkPair', V90, V91} -> case V89 of [] -> begin (V98 = begin (V92 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V87))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V97 = ('dn--un--reify_Reify_Int'(V0, V1, V2, V96))), V97 end(V93)) end end end end), fun (V99) -> begin (V100 = (V98(V99))), case V100 of {'Prelude.Types.Left', V101} -> {'Prelude.Types.Left', V101}; {'Prelude.Types.Right', V102} -> (begin (V116 = begin (V109 = begin (V103 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V91))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V108 = ('dn--un--reify_Reify_Nat'(V0, V1, V2, V107))), V108 end(V104)) end end end end), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V115 = fun (V114) -> {'Prelude.Types.Right', {'Core.TT.TyCon', V102, V113}} end), V115 end(V110)) end end end end), V116 end(V99)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end end(E6, E7)); _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end end(E4, E5)); _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"NameType"/utf8>>)) end end), V117 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"NameType"/utf8>>)) end.
'dn--un--reify_Reify_Name'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V303 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"UN"/utf8>> -> case V8 of [E0 | E1] -> (fun (V49, V50) -> case V49 of {'Builtin.MkPair', V51, V52} -> case V50 of [] -> begin (V59 = begin (V53 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V52))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V58 = ('dn--un--reify_Reify_UserName'(V0, V1, V2, V57))), V58 end(V54)) end end end end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V65 = fun (V64) -> {'Prelude.Types.Right', {'Core.Name.UN', V63}} end), V65 end(V60)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; <<"MN"/utf8>> -> case V8 of [E2 | E3] -> (fun (V66, V67) -> case V66 of {'Builtin.MkPair', V68, V69} -> case V67 of [E4 | E5] -> (fun (V70, V71) -> case V70 of {'Builtin.MkPair', V72, V73} -> case V71 of [] -> begin (V80 = begin (V74 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V69))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V79 = ('dn--un--reify_Reify_String'(V0, V1, V2, V78))), V79 end(V75)) end end end end), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V98 = begin (V91 = begin (V85 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V73))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V90 = ('dn--un--reify_Reify_Int'(V0, V1, V2, V89))), V90 end(V86)) end end end end), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V97 = fun (V96) -> {'Prelude.Types.Right', {'Core.Name.MN', V84, V95}} end), V97 end(V92)) end end end end), V98 end(V81)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E4, E5)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E2, E3)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; <<"NS"/utf8>> -> case V8 of [E6 | E7] -> (fun (V99, V100) -> case V99 of {'Builtin.MkPair', V101, V102} -> case V100 of [E8 | E9] -> (fun (V103, V104) -> case V103 of {'Builtin.MkPair', V105, V106} -> case V104 of [] -> begin (V113 = begin (V107 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V102))), fun (V108) -> begin (V109 = (V107(V108))), case V109 of {'Prelude.Types.Left', V110} -> {'Prelude.Types.Left', V110}; {'Prelude.Types.Right', V111} -> (begin (V112 = ('dn--un--reify_Reify_Namespace'(V0, V1, V2, V111))), V112 end(V108)) end end end end), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V138 = begin (V131 = begin (V118 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V106))), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V130 = ((begin (V127 = fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> ('dn--un--reify_Reify_Name'(V123, V124, V125, V126)) end end end end), fun (V128) -> fun (V129) -> ((((V127(V0))(V1))(V128))(V129)) end end end(V2))(V122))), V130 end(V119)) end end end end), fun (V132) -> begin (V133 = (V131(V132))), case V133 of {'Prelude.Types.Left', V134} -> {'Prelude.Types.Left', V134}; {'Prelude.Types.Right', V135} -> (begin (V137 = fun (V136) -> {'Prelude.Types.Right', {'Core.Name.NS', V117, V135}} end), V137 end(V132)) end end end end), V138 end(V114)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E8, E9)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E6, E7)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; <<"DN"/utf8>> -> case V8 of [E10 | E11] -> (fun (V139, V140) -> case V139 of {'Builtin.MkPair', V141, V142} -> case V140 of [E12 | E13] -> (fun (V143, V144) -> case V143 of {'Builtin.MkPair', V145, V146} -> case V144 of [] -> begin (V153 = begin (V147 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V142))), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V152 = ('dn--un--reify_Reify_String'(V0, V1, V2, V151))), V152 end(V148)) end end end end), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V178 = begin (V171 = begin (V158 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V146))), fun (V159) -> begin (V160 = (V158(V159))), case V160 of {'Prelude.Types.Left', V161} -> {'Prelude.Types.Left', V161}; {'Prelude.Types.Right', V162} -> (begin (V170 = ((begin (V167 = fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> ('dn--un--reify_Reify_Name'(V163, V164, V165, V166)) end end end end), fun (V168) -> fun (V169) -> ((((V167(V0))(V1))(V168))(V169)) end end end(V2))(V162))), V170 end(V159)) end end end end), fun (V172) -> begin (V173 = (V171(V172))), case V173 of {'Prelude.Types.Left', V174} -> {'Prelude.Types.Left', V174}; {'Prelude.Types.Right', V175} -> (begin (V177 = fun (V176) -> {'Prelude.Types.Right', {'Core.Name.DN', V157, V175}} end), V177 end(V172)) end end end end), V178 end(V154)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E12, E13)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E10, E11)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; <<"Nested"/utf8>> -> case V8 of [E14 | E15] -> (fun (V179, V180) -> case V179 of {'Builtin.MkPair', V181, V182} -> case V180 of [E16 | E17] -> (fun (V183, V184) -> case V183 of {'Builtin.MkPair', V185, V186} -> case V184 of [] -> begin (V208 = begin (V187 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V182))), fun (V188) -> begin (V189 = (V187(V188))), case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> (begin (V207 = ((begin (V204 = fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> ('dn--un--reify_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> ('dn--un--reify_Reify_Int'(V196, V197, V198, V199)) end end end end, fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> ('dn--un--reify_Reify_Int'(V200, V201, V202, V203)) end end end end}, V192, V193, V194, V195)) end end end end), fun (V205) -> fun (V206) -> ((((V204(V0))(V1))(V205))(V206)) end end end(V2))(V191))), V207 end(V188)) end end end end), fun (V209) -> begin (V210 = (V208(V209))), case V210 of {'Prelude.Types.Left', V211} -> {'Prelude.Types.Left', V211}; {'Prelude.Types.Right', V212} -> (begin (V233 = begin (V226 = begin (V213 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V186))), fun (V214) -> begin (V215 = (V213(V214))), case V215 of {'Prelude.Types.Left', V216} -> {'Prelude.Types.Left', V216}; {'Prelude.Types.Right', V217} -> (begin (V225 = ((begin (V222 = fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> ('dn--un--reify_Reify_Name'(V218, V219, V220, V221)) end end end end), fun (V223) -> fun (V224) -> ((((V222(V0))(V1))(V223))(V224)) end end end(V2))(V217))), V225 end(V214)) end end end end), fun (V227) -> begin (V228 = (V226(V227))), case V228 of {'Prelude.Types.Left', V229} -> {'Prelude.Types.Left', V229}; {'Prelude.Types.Right', V230} -> (begin (V232 = fun (V231) -> {'Prelude.Types.Right', {'Core.Name.Nested', V212, V230}} end), V232 end(V227)) end end end end), V233 end(V209)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E16, E17)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E14, E15)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; <<"CaseBlock"/utf8>> -> case V8 of [E18 | E19] -> (fun (V234, V235) -> case V234 of {'Builtin.MkPair', V236, V237} -> case V235 of [E20 | E21] -> (fun (V238, V239) -> case V238 of {'Builtin.MkPair', V240, V241} -> case V239 of [] -> begin (V248 = begin (V242 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V237))), fun (V243) -> begin (V244 = (V242(V243))), case V244 of {'Prelude.Types.Left', V245} -> {'Prelude.Types.Left', V245}; {'Prelude.Types.Right', V246} -> (begin (V247 = ('dn--un--reify_Reify_String'(V0, V1, V2, V246))), V247 end(V243)) end end end end), fun (V249) -> begin (V250 = (V248(V249))), case V250 of {'Prelude.Types.Left', V251} -> {'Prelude.Types.Left', V251}; {'Prelude.Types.Right', V252} -> (begin (V266 = begin (V259 = begin (V253 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V241))), fun (V254) -> begin (V255 = (V253(V254))), case V255 of {'Prelude.Types.Left', V256} -> {'Prelude.Types.Left', V256}; {'Prelude.Types.Right', V257} -> (begin (V258 = ('dn--un--reify_Reify_Int'(V0, V1, V2, V257))), V258 end(V254)) end end end end), fun (V260) -> begin (V261 = (V259(V260))), case V261 of {'Prelude.Types.Left', V262} -> {'Prelude.Types.Left', V262}; {'Prelude.Types.Right', V263} -> (begin (V265 = fun (V264) -> {'Prelude.Types.Right', {'Core.Name.CaseBlock', V252, V263}} end), V265 end(V260)) end end end end), V266 end(V249)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E20, E21)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E18, E19)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; <<"WithBlock"/utf8>> -> case V8 of [E22 | E23] -> (fun (V267, V268) -> case V267 of {'Builtin.MkPair', V269, V270} -> case V268 of [E24 | E25] -> (fun (V271, V272) -> case V271 of {'Builtin.MkPair', V273, V274} -> case V272 of [] -> begin (V281 = begin (V275 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V270))), fun (V276) -> begin (V277 = (V275(V276))), case V277 of {'Prelude.Types.Left', V278} -> {'Prelude.Types.Left', V278}; {'Prelude.Types.Right', V279} -> (begin (V280 = ('dn--un--reify_Reify_String'(V0, V1, V2, V279))), V280 end(V276)) end end end end), fun (V282) -> begin (V283 = (V281(V282))), case V283 of {'Prelude.Types.Left', V284} -> {'Prelude.Types.Left', V284}; {'Prelude.Types.Right', V285} -> (begin (V299 = begin (V292 = begin (V286 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V274))), fun (V287) -> begin (V288 = (V286(V287))), case V288 of {'Prelude.Types.Left', V289} -> {'Prelude.Types.Left', V289}; {'Prelude.Types.Right', V290} -> (begin (V291 = ('dn--un--reify_Reify_Int'(V0, V1, V2, V290))), V291 end(V287)) end end end end), fun (V293) -> begin (V294 = (V292(V293))), case V294 of {'Prelude.Types.Left', V295} -> {'Prelude.Types.Left', V295}; {'Prelude.Types.Right', V296} -> (begin (V298 = fun (V297) -> {'Prelude.Types.Right', {'Core.Name.WithBlock', V285, V296}} end), V298 end(V293)) end end end end), V299 end(V282)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E24, E25)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end(E22, E23)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; {'Core.Name.NS', V300, V301} -> case V301 of {'Core.Name.UN', V302} -> ('un--cantReify'(V0, V1, V46, <<"Name, reifying it is unimplemented or intentionally internal"/utf8>>)); _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Name, the name was not found in context"/utf8>>)) end end), V303 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"Name, value is not an NDCon interally"/utf8>>)) end.
'dn--un--reify_Reify_ModuleIdent'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> case V8 of [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Builtin.MkPair', V11, V12} -> case V10 of [] -> begin (V45 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V13 end, V5))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V77 = begin (V50 = {'Core.Value.NDCon', V4, V5, V6, V7, [{'Builtin.MkPair', V11, V12} | []]}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V49)) of {'Core.Name.UN', V51} -> case V51 of {'Core.Name.Basic', V52} -> case V52 of <<"MkMI"/utf8>> -> begin (V70 = begin (V53 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V12))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V69 = ((begin (V66 = fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('dn--un--reify_Reify_(List $a)'(fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('dn--un--reify_Reify_String'(V62, V63, V64, V65)) end end end end, V58, V59, V60, V61)) end end end end), fun (V67) -> fun (V68) -> ((((V66(V0))(V1))(V67))(V68)) end end end(V2))(V57))), V69 end(V54)) end end end end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V76 = fun (V75) -> {'Prelude.Types.Right', V74} end), V76 end(V71)) end end end end; _ -> ('un--cantReify'(V0, V1, V50, <<"ModuleIdent"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V50, <<"ModuleIdent"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V50, <<"ModuleIdent"/utf8>>)) end end), V77 end(V46)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"ModuleIdent"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"ModuleIdent"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V0, V1, V3, <<"ModuleIdent"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"ModuleIdent"/utf8>>)) end.
'dn--un--reify_Reify_LazyReason'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V52 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"LInf"/utf8>> -> fun (V49) -> {'Prelude.Types.Right', 0} end; <<"LLazy"/utf8>> -> fun (V50) -> {'Prelude.Types.Right', 1} end; <<"LUnknown"/utf8>> -> fun (V51) -> {'Prelude.Types.Right', 2} end; _ -> ('un--cantReify'(V0, V1, V46, <<"LazyReason"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"LazyReason"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"LazyReason"/utf8>>)) end end), V52 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"LazyReason"/utf8>>)) end.
'dn--un--reify_Reify_Integer'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.BI', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Integer"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Integer"/utf8>>)) end.
'dn--un--reify_Reify_Int8'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.I8', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Int8"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Int8"/utf8>>)) end.
'dn--un--reify_Reify_Int64'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.I64', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Int64"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Int64"/utf8>>)) end.
'dn--un--reify_Reify_Int32'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.I32', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Int32"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Int32"/utf8>>)) end.
'dn--un--reify_Reify_Int16'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.I16', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Int16"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Int16"/utf8>>)) end.
'dn--un--reify_Reify_Int'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.I', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Int"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Int"/utf8>>)) end.
'dn--un--reify_Reify_FC'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V129 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"MkFC"/utf8>> -> case V8 of [E0 | E1] -> (fun (V49, V50) -> case V49 of {'Builtin.MkPair', V51, V52} -> case V50 of [E2 | E3] -> (fun (V53, V54) -> case V53 of {'Builtin.MkPair', V55, V56} -> case V54 of [E4 | E5] -> (fun (V57, V58) -> case V57 of {'Builtin.MkPair', V59, V60} -> case V58 of [] -> begin (V67 = begin (V61 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V52))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V66 = ('dn--un--reify_Reify_OriginDesc'(V0, V1, V2, V65))), V66 end(V62)) end end end end), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V127 = begin (V93 = begin (V72 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V56))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V92 = ((begin (V89 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('dn--un--reify_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('dn--un--reify_Reify_Int'(V81, V82, V83, V84)) end end end end, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('dn--un--reify_Reify_Int'(V85, V86, V87, V88)) end end end end}, V77, V78, V79, V80)) end end end end), fun (V90) -> fun (V91) -> ((((V89(V0))(V1))(V90))(V91)) end end end(V2))(V76))), V92 end(V73)) end end end end), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V126 = begin (V119 = begin (V98 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V60))), fun (V99) -> begin (V100 = (V98(V99))), case V100 of {'Prelude.Types.Left', V101} -> {'Prelude.Types.Left', V101}; {'Prelude.Types.Right', V102} -> (begin (V118 = ((begin (V115 = fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('dn--un--reify_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> ('dn--un--reify_Reify_Int'(V107, V108, V109, V110)) end end end end, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('dn--un--reify_Reify_Int'(V111, V112, V113, V114)) end end end end}, V103, V104, V105, V106)) end end end end), fun (V116) -> fun (V117) -> ((((V115(V0))(V1))(V116))(V117)) end end end(V2))(V102))), V118 end(V99)) end end end end), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V125 = fun (V124) -> {'Prelude.Types.Right', {'Core.FC.MkFC', V71, V97, V123}} end), V125 end(V120)) end end end end), V126 end(V94)) end end end end), V127 end(V68)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"FC"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"FC"/utf8>>)) end end(E4, E5)); _ -> ('un--cantReify'(V0, V1, V46, <<"FC"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"FC"/utf8>>)) end end(E2, E3)); _ -> ('un--cantReify'(V0, V1, V46, <<"FC"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"FC"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V0, V1, V46, <<"FC"/utf8>>)) end; <<"EmptyFC"/utf8>> -> fun (V128) -> {'Prelude.Types.Right', {'Core.FC.EmptyFC'}} end; _ -> ('un--cantReify'(V0, V1, V46, <<"FC"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"FC"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"FC"/utf8>>)) end end), V129 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"FC"/utf8>>)) end.
'dn--un--reify_Reify_Double'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.Db', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Double"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Double"/utf8>>)) end.
'dn--un--reify_Reify_Constant'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V288 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"I"/utf8>> -> case V8 of [E0 | E1] -> (fun (V49, V50) -> case V49 of {'Builtin.MkPair', V51, V52} -> case V50 of [] -> begin (V59 = begin (V53 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V52))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V58 = ('dn--un--reify_Reify_Int'(V0, V1, V2, V57))), V58 end(V54)) end end end end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V65 = fun (V64) -> {'Prelude.Types.Right', {'Core.TT.I', V63}} end), V65 end(V60)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"I8"/utf8>> -> case V8 of [E2 | E3] -> (fun (V66, V67) -> case V66 of {'Builtin.MkPair', V68, V69} -> case V67 of [] -> begin (V76 = begin (V70 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V69))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V75 = ('dn--un--reify_Reify_Int8'(V0, V1, V2, V74))), V75 end(V71)) end end end end), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V82 = fun (V81) -> {'Prelude.Types.Right', {'Core.TT.I8', V80}} end), V82 end(V77)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E2, E3)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"I16"/utf8>> -> case V8 of [E4 | E5] -> (fun (V83, V84) -> case V83 of {'Builtin.MkPair', V85, V86} -> case V84 of [] -> begin (V93 = begin (V87 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V86))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V92 = ('dn--un--reify_Reify_Int16'(V0, V1, V2, V91))), V92 end(V88)) end end end end), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V99 = fun (V98) -> {'Prelude.Types.Right', {'Core.TT.I16', V97}} end), V99 end(V94)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E4, E5)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"I32"/utf8>> -> case V8 of [E6 | E7] -> (fun (V100, V101) -> case V100 of {'Builtin.MkPair', V102, V103} -> case V101 of [] -> begin (V110 = begin (V104 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V103))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V109 = ('dn--un--reify_Reify_Int32'(V0, V1, V2, V108))), V109 end(V105)) end end end end), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V116 = fun (V115) -> {'Prelude.Types.Right', {'Core.TT.I32', V114}} end), V116 end(V111)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E6, E7)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"I64"/utf8>> -> case V8 of [E8 | E9] -> (fun (V117, V118) -> case V117 of {'Builtin.MkPair', V119, V120} -> case V118 of [] -> begin (V127 = begin (V121 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V120))), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V126 = ('dn--un--reify_Reify_Int64'(V0, V1, V2, V125))), V126 end(V122)) end end end end), fun (V128) -> begin (V129 = (V127(V128))), case V129 of {'Prelude.Types.Left', V130} -> {'Prelude.Types.Left', V130}; {'Prelude.Types.Right', V131} -> (begin (V133 = fun (V132) -> {'Prelude.Types.Right', {'Core.TT.I64', V131}} end), V133 end(V128)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E8, E9)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"BI"/utf8>> -> case V8 of [E10 | E11] -> (fun (V134, V135) -> case V134 of {'Builtin.MkPair', V136, V137} -> case V135 of [] -> begin (V144 = begin (V138 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V137))), fun (V139) -> begin (V140 = (V138(V139))), case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> (begin (V143 = ('dn--un--reify_Reify_Integer'(V0, V1, V2, V142))), V143 end(V139)) end end end end), fun (V145) -> begin (V146 = (V144(V145))), case V146 of {'Prelude.Types.Left', V147} -> {'Prelude.Types.Left', V147}; {'Prelude.Types.Right', V148} -> (begin (V150 = fun (V149) -> {'Prelude.Types.Right', {'Core.TT.BI', V148}} end), V150 end(V145)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E10, E11)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"B8"/utf8>> -> case V8 of [E12 | E13] -> (fun (V151, V152) -> case V151 of {'Builtin.MkPair', V153, V154} -> case V152 of [] -> begin (V161 = begin (V155 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V154))), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V160 = ('dn--un--reify_Reify_Bits8'(V0, V1, V2, V159))), V160 end(V156)) end end end end), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V167 = fun (V166) -> {'Prelude.Types.Right', {'Core.TT.B8', V165}} end), V167 end(V162)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E12, E13)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"B16"/utf8>> -> case V8 of [E14 | E15] -> (fun (V168, V169) -> case V168 of {'Builtin.MkPair', V170, V171} -> case V169 of [] -> begin (V178 = begin (V172 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V171))), fun (V173) -> begin (V174 = (V172(V173))), case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> (begin (V177 = ('dn--un--reify_Reify_Bits16'(V0, V1, V2, V176))), V177 end(V173)) end end end end), fun (V179) -> begin (V180 = (V178(V179))), case V180 of {'Prelude.Types.Left', V181} -> {'Prelude.Types.Left', V181}; {'Prelude.Types.Right', V182} -> (begin (V184 = fun (V183) -> {'Prelude.Types.Right', {'Core.TT.B16', V182}} end), V184 end(V179)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E14, E15)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"B32"/utf8>> -> case V8 of [E16 | E17] -> (fun (V185, V186) -> case V185 of {'Builtin.MkPair', V187, V188} -> case V186 of [] -> begin (V195 = begin (V189 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V188))), fun (V190) -> begin (V191 = (V189(V190))), case V191 of {'Prelude.Types.Left', V192} -> {'Prelude.Types.Left', V192}; {'Prelude.Types.Right', V193} -> (begin (V194 = ('dn--un--reify_Reify_Bits32'(V0, V1, V2, V193))), V194 end(V190)) end end end end), fun (V196) -> begin (V197 = (V195(V196))), case V197 of {'Prelude.Types.Left', V198} -> {'Prelude.Types.Left', V198}; {'Prelude.Types.Right', V199} -> (begin (V201 = fun (V200) -> {'Prelude.Types.Right', {'Core.TT.B32', V199}} end), V201 end(V196)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E16, E17)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"B64"/utf8>> -> case V8 of [E18 | E19] -> (fun (V202, V203) -> case V202 of {'Builtin.MkPair', V204, V205} -> case V203 of [] -> begin (V212 = begin (V206 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V205))), fun (V207) -> begin (V208 = (V206(V207))), case V208 of {'Prelude.Types.Left', V209} -> {'Prelude.Types.Left', V209}; {'Prelude.Types.Right', V210} -> (begin (V211 = ('dn--un--reify_Reify_Bits64'(V0, V1, V2, V210))), V211 end(V207)) end end end end), fun (V213) -> begin (V214 = (V212(V213))), case V214 of {'Prelude.Types.Left', V215} -> {'Prelude.Types.Left', V215}; {'Prelude.Types.Right', V216} -> (begin (V218 = fun (V217) -> {'Prelude.Types.Right', {'Core.TT.B64', V216}} end), V218 end(V213)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E18, E19)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"Str"/utf8>> -> case V8 of [E20 | E21] -> (fun (V219, V220) -> case V219 of {'Builtin.MkPair', V221, V222} -> case V220 of [] -> begin (V229 = begin (V223 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V222))), fun (V224) -> begin (V225 = (V223(V224))), case V225 of {'Prelude.Types.Left', V226} -> {'Prelude.Types.Left', V226}; {'Prelude.Types.Right', V227} -> (begin (V228 = ('dn--un--reify_Reify_String'(V0, V1, V2, V227))), V228 end(V224)) end end end end), fun (V230) -> begin (V231 = (V229(V230))), case V231 of {'Prelude.Types.Left', V232} -> {'Prelude.Types.Left', V232}; {'Prelude.Types.Right', V233} -> (begin (V235 = fun (V234) -> {'Prelude.Types.Right', {'Core.TT.Str', V233}} end), V235 end(V230)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E20, E21)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"Ch"/utf8>> -> case V8 of [E22 | E23] -> (fun (V236, V237) -> case V236 of {'Builtin.MkPair', V238, V239} -> case V237 of [] -> begin (V246 = begin (V240 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V239))), fun (V241) -> begin (V242 = (V240(V241))), case V242 of {'Prelude.Types.Left', V243} -> {'Prelude.Types.Left', V243}; {'Prelude.Types.Right', V244} -> (begin (V245 = ('dn--un--reify_Reify_Char'(V0, V1, V2, V244))), V245 end(V241)) end end end end), fun (V247) -> begin (V248 = (V246(V247))), case V248 of {'Prelude.Types.Left', V249} -> {'Prelude.Types.Left', V249}; {'Prelude.Types.Right', V250} -> (begin (V252 = fun (V251) -> {'Prelude.Types.Right', {'Core.TT.Ch', V250}} end), V252 end(V247)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E22, E23)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"Db"/utf8>> -> case V8 of [E24 | E25] -> (fun (V253, V254) -> case V253 of {'Builtin.MkPair', V255, V256} -> case V254 of [] -> begin (V263 = begin (V257 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V256))), fun (V258) -> begin (V259 = (V257(V258))), case V259 of {'Prelude.Types.Left', V260} -> {'Prelude.Types.Left', V260}; {'Prelude.Types.Right', V261} -> (begin (V262 = ('dn--un--reify_Reify_Double'(V0, V1, V2, V261))), V262 end(V258)) end end end end), fun (V264) -> begin (V265 = (V263(V264))), case V265 of {'Prelude.Types.Left', V266} -> {'Prelude.Types.Left', V266}; {'Prelude.Types.Right', V267} -> (begin (V269 = fun (V268) -> {'Prelude.Types.Right', {'Core.TT.Db', V267}} end), V269 end(V264)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E24, E25)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"PrT"/utf8>> -> case V8 of [E26 | E27] -> (fun (V270, V271) -> case V270 of {'Builtin.MkPair', V272, V273} -> case V271 of [] -> begin (V280 = begin (V274 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V273))), fun (V275) -> begin (V276 = (V274(V275))), case V276 of {'Prelude.Types.Left', V277} -> {'Prelude.Types.Left', V277}; {'Prelude.Types.Right', V278} -> (begin (V279 = ('dn--un--reify_Reify_PrimType'(V0, V1, V2, V278))), V279 end(V275)) end end end end), fun (V281) -> begin (V282 = (V280(V281))), case V282 of {'Prelude.Types.Left', V283} -> {'Prelude.Types.Left', V283}; {'Prelude.Types.Right', V284} -> (begin (V286 = fun (V285) -> {'Prelude.Types.Right', {'Core.TT.PrT', V284}} end), V286 end(V281)) end end end end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end(E26, E27)); _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; <<"WorldVal"/utf8>> -> case V8 of [] -> fun (V287) -> {'Prelude.Types.Right', {'Core.TT.WorldVal'}} end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Constant"/utf8>>)) end end), V288 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"Constant"/utf8>>)) end.
'dn--un--reify_Reify_Char'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.Ch', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Char"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Char"/utf8>>)) end.
'dn--un--reify_Reify_BuiltinType'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V52 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"BuiltinNatural"/utf8>> -> case V8 of [] -> fun (V49) -> {'Prelude.Types.Right', 0} end; _ -> ('un--cantReify'(V0, V1, V46, <<"BuiltinType"/utf8>>)) end; <<"NaturalToInteger"/utf8>> -> case V8 of [] -> fun (V50) -> {'Prelude.Types.Right', 1} end; _ -> ('un--cantReify'(V0, V1, V46, <<"BuiltinType"/utf8>>)) end; <<"IntegerToNatural"/utf8>> -> case V8 of [] -> fun (V51) -> {'Prelude.Types.Right', 2} end; _ -> ('un--cantReify'(V0, V1, V46, <<"BuiltinType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"BuiltinType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"BuiltinType"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"BuiltinType"/utf8>>)) end end), V52 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"BuiltinType"/utf8>>)) end.
'dn--un--reify_Reify_Bool'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NDCon', V4, V5, V6, V7, V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end, V5))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V51 = begin (V46 = {'Core.Value.NDCon', V4, V5, V6, V7, V8}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V45)) of {'Core.Name.UN', V47} -> case V47 of {'Core.Name.Basic', V48} -> case V48 of <<"True"/utf8>> -> fun (V49) -> {'Prelude.Types.Right', 1} end; <<"False"/utf8>> -> fun (V50) -> {'Prelude.Types.Right', 0} end; _ -> ('un--cantReify'(V0, V1, V46, <<"Bool"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Bool"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V46, <<"Bool"/utf8>>)) end end), V51 end(V42)) end end end end; _ -> ('un--cantReify'(V0, V1, V3, <<"Bool"/utf8>>)) end.
'dn--un--reify_Reify_Bits8'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.B8', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Bits8"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Bits8"/utf8>>)) end.
'dn--un--reify_Reify_Bits64'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.B64', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Bits64"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Bits64"/utf8>>)) end.
'dn--un--reify_Reify_Bits32'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.B32', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Bits32"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Bits32"/utf8>>)) end.
'dn--un--reify_Reify_Bits16'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NPrimVal', V4, V5} -> case V5 of {'Core.TT.B16', V6} -> fun (V7) -> {'Prelude.Types.Right', V6} end; _ -> ('un--cantReify'(V0, V1, V3, <<"Bits16"/utf8>>)) end; _ -> ('un--cantReify'(V0, V1, V3, <<"Bits16"/utf8>>)) end.
'dn--un--reify_Reify_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}.
'dn--un--reify_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Value.NDCon', V5, V6, V7, V8, V9} -> case V9 of [E0 | E1] -> (fun (V10, V11) -> case V11 of [E2 | E3] -> (fun (V12, V13) -> case V13 of [E4 | E5] -> (fun (V14, V15) -> case V14 of {'Builtin.MkPair', V16, V17} -> case V15 of [E6 | E7] -> (fun (V18, V19) -> case V18 of {'Builtin.MkPair', V20, V21} -> case V19 of [] -> begin (V54 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V3 of {'Core.Context.MkDefs', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> V22 end, V6))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V93 = begin (V59 = {'Core.Value.NDCon', V5, V6, V7, V8, [V10 | [V12 | [{'Builtin.MkPair', V16, V17} | [{'Builtin.MkPair', V20, V21} | []]]]]}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V58)) of {'Core.Name.UN', V60} -> case V60 of {'Core.Name.Basic', V61} -> case V61 of <<"MkPair"/utf8>> -> begin (V71 = begin (V62 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V2, V3, V17))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V70 = ((begin (V67 = ('Idris.Idris2.Builtin':'un--fst'(V0))), fun (V68) -> fun (V69) -> ((((V67(V1))(V2))(V68))(V69)) end end end(V3))(V66))), V70 end(V63)) end end end end), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V92 = begin (V85 = begin (V76 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V2, V3, V21))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V84 = ((begin (V81 = ('Idris.Idris2.Builtin':'un--snd'(V0))), fun (V82) -> fun (V83) -> ((((V81(V1))(V2))(V82))(V83)) end end end(V3))(V80))), V84 end(V77)) end end end end), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V91 = fun (V90) -> {'Prelude.Types.Right', {'Builtin.MkPair', V75, V89}} end), V91 end(V86)) end end end end), V92 end(V72)) end end end end; _ -> ('un--cantReify'(V1, V2, V59, <<"Pair"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V59, <<"Pair"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V59, <<"Pair"/utf8>>)) end end), V93 end(V55)) end end end end; _ -> ('un--cantReify'(V1, V2, V4, <<"Pair"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V4, <<"Pair"/utf8>>)) end end(E6, E7)); _ -> ('un--cantReify'(V1, V2, V4, <<"Pair"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V4, <<"Pair"/utf8>>)) end end(E4, E5)); _ -> ('un--cantReify'(V1, V2, V4, <<"Pair"/utf8>>)) end end(E2, E3)); _ -> ('un--cantReify'(V1, V2, V4, <<"Pair"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V1, V2, V4, <<"Pair"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V4, <<"Pair"/utf8>>)) end.
'dn--un--reify_Reify_(PiInfo $t)'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Value.NDCon', V5, V6, V7, V8, V9} -> begin (V42 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V3 of {'Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V10 end, V6))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V75 = begin (V47 = {'Core.Value.NDCon', V5, V6, V7, V8, V9}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V46)) of {'Core.Name.UN', V48} -> case V48 of {'Core.Name.Basic', V49} -> case V49 of <<"ImplicitArg"/utf8>> -> fun (V50) -> {'Prelude.Types.Right', {'Core.TT.Implicit'}} end; <<"ExplicitArg"/utf8>> -> fun (V51) -> {'Prelude.Types.Right', {'Core.TT.Explicit'}} end; <<"AutoImplicit"/utf8>> -> fun (V52) -> {'Prelude.Types.Right', {'Core.TT.AutoImplicit'}} end; <<"DefImplicit"/utf8>> -> case V9 of [E0 | E1] -> (fun (V53, V54) -> case V54 of [E2 | E3] -> (fun (V55, V56) -> case V55 of {'Builtin.MkPair', V57, V58} -> case V56 of [] -> begin (V68 = begin (V59 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V2, V3, V58))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V67 = ((begin (V64 = V0), fun (V65) -> fun (V66) -> ((((V64(V1))(V2))(V65))(V66)) end end end(V3))(V63))), V67 end(V60)) end end end end), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V74 = fun (V73) -> {'Prelude.Types.Right', {'Core.TT.DefImplicit', V72}} end), V74 end(V69)) end end end end; _ -> ('un--cantReify'(V1, V2, V47, <<"PiInfo"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"PiInfo"/utf8>>)) end end(E2, E3)); _ -> ('un--cantReify'(V1, V2, V47, <<"PiInfo"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V1, V2, V47, <<"PiInfo"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"PiInfo"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"PiInfo"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"PiInfo"/utf8>>)) end end), V75 end(V43)) end end end end; _ -> ('un--cantReify'(V1, V2, V4, <<"PiInfo"/utf8>>)) end.
'dn--un--reify_Reify_(Maybe $a)'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Value.NDCon', V5, V6, V7, V8, V9} -> begin (V42 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V3 of {'Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V10 end, V6))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V73 = begin (V47 = {'Core.Value.NDCon', V5, V6, V7, V8, V9}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V46)) of {'Core.Name.UN', V48} -> case V48 of {'Core.Name.Basic', V49} -> case V49 of <<"Nothing"/utf8>> -> fun (V50) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; <<"Just"/utf8>> -> case V9 of [E0 | E1] -> (fun (V51, V52) -> case V52 of [E2 | E3] -> (fun (V53, V54) -> case V53 of {'Builtin.MkPair', V55, V56} -> case V54 of [] -> begin (V66 = begin (V57 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V2, V3, V56))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V65 = ((begin (V62 = V0), fun (V63) -> fun (V64) -> ((((V62(V1))(V2))(V63))(V64)) end end end(V3))(V61))), V65 end(V58)) end end end end), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V72 = fun (V71) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V70}} end), V72 end(V67)) end end end end; _ -> ('un--cantReify'(V1, V2, V47, <<"Maybe"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"Maybe"/utf8>>)) end end(E2, E3)); _ -> ('un--cantReify'(V1, V2, V47, <<"Maybe"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V1, V2, V47, <<"Maybe"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"Maybe"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"Maybe"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"Maybe"/utf8>>)) end end), V73 end(V43)) end end end end; _ -> ('un--cantReify'(V1, V2, V4, <<"Maybe"/utf8>>)) end.
'dn--un--reify_Reify_(List1 $a)'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Value.NDCon', V5, V6, V7, V8, V9} -> case V9 of [E0 | E1] -> (fun (V10, V11) -> case V11 of [E2 | E3] -> (fun (V12, V13) -> case V12 of {'Builtin.MkPair', V14, V15} -> case V13 of [E4 | E5] -> (fun (V16, V17) -> case V16 of {'Builtin.MkPair', V18, V19} -> case V17 of [] -> begin (V52 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V3 of {'Core.Context.MkDefs', V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51} -> V20 end, V6))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V95 = begin (V57 = {'Core.Value.NDCon', V5, V6, V7, V8, [V10 | [{'Builtin.MkPair', V14, V15} | [{'Builtin.MkPair', V18, V19} | []]]]}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V56)) of {'Core.Name.UN', V58} -> case V58 of {'Core.Name.Basic', V59} -> case V59 of <<":::"/utf8>> -> begin (V69 = begin (V60 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V2, V3, V15))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V68 = ((begin (V65 = V0), fun (V66) -> fun (V67) -> ((((V65(V1))(V2))(V66))(V67)) end end end(V3))(V64))), V68 end(V61)) end end end end), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V94 = begin (V87 = begin (V74 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V2, V3, V19))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V86 = ((begin (V83 = fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('dn--un--reify_Reify_(List $a)'(V0, V79, V80, V81, V82)) end end end end), fun (V84) -> fun (V85) -> ((((V83(V1))(V2))(V84))(V85)) end end end(V3))(V78))), V86 end(V75)) end end end end), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V93 = fun (V92) -> {'Prelude.Types.Right', {'Data.List1.:::', V73, V91}} end), V93 end(V88)) end end end end), V94 end(V70)) end end end end; _ -> ('un--cantReify'(V1, V2, V57, <<"List1"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V57, <<"List1"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V57, <<"List1"/utf8>>)) end end), V95 end(V53)) end end end end; _ -> ('un--cantReify'(V1, V2, V4, <<"List1"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V4, <<"List1"/utf8>>)) end end(E4, E5)); _ -> ('un--cantReify'(V1, V2, V4, <<"List1"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V4, <<"List1"/utf8>>)) end end(E2, E3)); _ -> ('un--cantReify'(V1, V2, V4, <<"List1"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V1, V2, V4, <<"List1"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V4, <<"List1"/utf8>>)) end.
'dn--un--reify_Reify_(List $a)'(V0, V1, V2, V3, V4) -> case V4 of {'Core.Value.NDCon', V5, V6, V7, V8, V9} -> begin (V42 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V3 of {'Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V10 end, V6))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V96 = begin (V47 = {'Core.Value.NDCon', V5, V6, V7, V8, V9}), case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V46)) of {'Core.Name.UN', V48} -> case V48 of {'Core.Name.Basic', V49} -> case V49 of <<"Nil"/utf8>> -> fun (V50) -> {'Prelude.Types.Right', []} end; <<"::"/utf8>> -> case V9 of [E0 | E1] -> (fun (V51, V52) -> case V52 of [E2 | E3] -> (fun (V53, V54) -> case V53 of {'Builtin.MkPair', V55, V56} -> case V54 of [E4 | E5] -> (fun (V57, V58) -> case V57 of {'Builtin.MkPair', V59, V60} -> case V58 of [] -> begin (V70 = begin (V61 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V2, V3, V56))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V69 = ((begin (V66 = V0), fun (V67) -> fun (V68) -> ((((V66(V1))(V2))(V67))(V68)) end end end(V3))(V65))), V69 end(V62)) end end end end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V95 = begin (V88 = begin (V75 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V2, V3, V60))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V87 = ((begin (V84 = fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('dn--un--reify_Reify_(List $a)'(V0, V80, V81, V82, V83)) end end end end), fun (V85) -> fun (V86) -> ((((V84(V1))(V2))(V85))(V86)) end end end(V3))(V79))), V87 end(V76)) end end end end), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V94 = fun (V93) -> {'Prelude.Types.Right', [V74 | V92]} end), V94 end(V89)) end end end end), V95 end(V71)) end end end end; _ -> ('un--cantReify'(V1, V2, V47, <<"List"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"List"/utf8>>)) end end(E4, E5)); _ -> ('un--cantReify'(V1, V2, V47, <<"List"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"List"/utf8>>)) end end(E2, E3)); _ -> ('un--cantReify'(V1, V2, V47, <<"List"/utf8>>)) end end(E0, E1)); _ -> ('un--cantReify'(V1, V2, V47, <<"List"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"List"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"List"/utf8>>)) end; _ -> ('un--cantReify'(V1, V2, V47, <<"List"/utf8>>)) end end), V96 end(V43)) end end end end; _ -> ('un--cantReify'(V1, V2, V4, <<"List"/utf8>>)) end.
'dn--un--reflect_Reflect_Visibility'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Private"/utf8>>)))); 1 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Export"/utf8>>)))); 2 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Public"/utf8>>)))) end.
'dn--un--reflect_Reflect_VirtualIdent'(V0, V1, V2, V3, V4, V5) -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Interactive"/utf8>>)))).
'dn--un--reflect_Reflect_UserName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.Name.Basic', V6} -> begin (V8 = fun (V7) -> ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V6, V7)) end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V13 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Basic"/utf8>>)), [V12 | []]))), V13 end(V9)) end end end end; {'Core.Name.Field', V14} -> begin (V16 = fun (V15) -> ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V14, V15)) end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V21 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Field"/utf8>>)), [V20 | []]))), V21 end(V17)) end end end end; {'Core.Name.Underscore'} -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Underscore"/utf8>>)), [])) end.
'dn--un--reflect_Reflect_TotalReq'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Total"/utf8>>)))); 1 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"CoveringOnly"/utf8>>)))); 2 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"PartialOK"/utf8>>)))) end.
'dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.Str', V5}}}.
'dn--un--reflect_Reflect_RigCount'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V6, V7)) end end, 0, fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V8, V9)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V12, V13)) end end}}, ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"M0"/utf8>>)))), ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"M1"/utf8>>)))), fun (V14) -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"MW"/utf8>>)))) end, V5)).
'dn--un--reflect_Reflect_PrimType'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"IntType"/utf8>>)))); 1 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Int8Type"/utf8>>)))); 2 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Int16Type"/utf8>>)))); 3 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Int32Type"/utf8>>)))); 4 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Int64Type"/utf8>>)))); 5 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"IntegerType"/utf8>>)))); 6 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Bits8Type"/utf8>>)))); 7 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Bits16Type"/utf8>>)))); 8 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Bits32Type"/utf8>>)))); 9 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Bits64Type"/utf8>>)))); 10 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"StringType"/utf8>>)))); 11 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"CharType"/utf8>>)))); 12 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"DoubleType"/utf8>>)))); 13 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"WorldType"/utf8>>)))) end.
'dn--un--reflect_Reflect_OriginDesc'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.FC.PhysicalIdrSrc', V6} -> begin (V7 = ('dn--un--reflect_Reflect_ModuleIdent'(V0, V1, V2, V3, V4, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"PhysicalIdrSrc"/utf8>>)), [V11 | []]))), V12 end(V8)) end end end end; {'Core.FC.PhysicalPkgSrc', V13} -> begin (V15 = fun (V14) -> ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V13, V14)) end), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V20 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"PhysicalPkgSrc"/utf8>>)), [V19 | []]))), V20 end(V16)) end end end end; {'Core.FC.Virtual', V21} -> begin (V22 = ('dn--un--reflect_Reflect_VirtualIdent'(V0, V1, V2, V3, V4, V21))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V27 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Virtual"/utf8>>)), [V26 | []]))), V27 end(V23)) end end end end end.
'dn--un--reflect_Reflect_Nat'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('un--getCon'(V0, V1, V2, ('un--preludetypes'(<<"Z"/utf8>>)))); _ -> begin (V6 = (V5 - 1)), begin (V19 = (((((begin (V13 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--reflect_Reflect_Nat'(V7, V8, V9, V10, V11, V12)) end end end end end end), fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ((((((V13(V0))(V14))(V15))(V16))(V17))(V18)) end end end end end end(V1))(V2))(V3))(V4))(V6))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V24 = ('un--appCon'(V0, V1, V2, ('un--preludetypes'(<<"S"/utf8>>)), [V23 | []]))), V24 end(V20)) end end end end end end.
'dn--un--reflect_Reflect_Namespace'(V0, V1, V2, V3, V4, V5) -> begin (V25 = (((((begin (V19 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--reflect_Reflect_(List $a)'(fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--reflect_Reflect_String'(V12, V13, V14, V15, V16, V17, V18)) end end end end end end end, V6, V7, V8, V9, V10, V11)) end end end end end end), fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ((((((V19(V0))(V20))(V21))(V22))(V23))(V24)) end end end end end end(V1))(V2))(V3))(V4))(('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V5))))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V30 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"MkNS"/utf8>>)), [V29 | []]))), V30 end(V26)) end end end end.
'dn--un--reflect_Reflect_NameType'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.TT.Bound'} -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Bound"/utf8>>)))); {'Core.TT.Func'} -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Func"/utf8>>)))); {'Core.TT.DataCon', V6, V7} -> begin (V9 = fun (V8) -> ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V6, V8)) end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V20 = begin (V14 = ('dn--un--reflect_Reflect_Nat'(V0, V1, V2, V3, V4, V7))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V19 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"DataCon"/utf8>>)), [V13 | [V18 | []]]))), V19 end(V15)) end end end end), V20 end(V10)) end end end end; {'Core.TT.TyCon', V21, V22} -> begin (V24 = fun (V23) -> ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V21, V23)) end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V35 = begin (V29 = ('dn--un--reflect_Reflect_Nat'(V0, V1, V2, V3, V4, V22))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V34 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"TyCon"/utf8>>)), [V28 | [V33 | []]]))), V34 end(V30)) end end end end), V35 end(V25)) end end end end end.
'dn--un--reflect_Reflect_Name'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.Name.UN', V6} -> begin (V7 = ('dn--un--reflect_Reflect_UserName'(V0, V1, V2, V3, V4, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"UN"/utf8>>)), [V11 | []]))), V12 end(V8)) end end end end; {'Core.Name.MN', V13, V14} -> begin (V16 = fun (V15) -> ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V13, V15)) end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V28 = begin (V22 = fun (V21) -> ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V14, V21)) end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V27 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"MN"/utf8>>)), [V20 | [V26 | []]]))), V27 end(V23)) end end end end), V28 end(V17)) end end end end; {'Core.Name.NS', V29, V30} -> begin (V31 = ('dn--un--reflect_Reflect_Namespace'(V0, V1, V2, V3, V4, V29))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V54 = begin (V48 = (((((begin (V42 = fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('dn--un--reflect_Reflect_Name'(V36, V37, V38, V39, V40, V41)) end end end end end end), fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ((((((V42(V0))(V43))(V44))(V45))(V46))(V47)) end end end end end end(V1))(V2))(V3))(V4))(V30))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V53 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"NS"/utf8>>)), [V35 | [V52 | []]]))), V53 end(V49)) end end end end), V54 end(V32)) end end end end; {'Core.Name.DN', V55, V56} -> begin (V58 = fun (V57) -> ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V55, V57)) end), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V81 = begin (V75 = (((((begin (V69 = fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('dn--un--reflect_Reflect_Name'(V63, V64, V65, V66, V67, V68)) end end end end end end), fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ((((((V69(V0))(V70))(V71))(V72))(V73))(V74)) end end end end end end(V1))(V2))(V3))(V4))(V56))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V80 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"DN"/utf8>>)), [V62 | [V79 | []]]))), V80 end(V76)) end end end end), V81 end(V59)) end end end end; {'Core.Name.Nested', V82, V83} -> begin (V110 = (((((begin (V104 = fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('dn--un--reflect_Reflect_Int'(V90, V91, V92, V93, V94, V95, V96)) end end end end end end end, fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('dn--un--reflect_Reflect_Int'(V97, V98, V99, V100, V101, V102, V103)) end end end end end end end}, V84, V85, V86, V87, V88, V89)) end end end end end end), fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ((((((V104(V0))(V105))(V106))(V107))(V108))(V109)) end end end end end end(V1))(V2))(V3))(V4))(V82))), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V133 = begin (V127 = (((((begin (V121 = fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('dn--un--reflect_Reflect_Name'(V115, V116, V117, V118, V119, V120)) end end end end end end), fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> ((((((V121(V0))(V122))(V123))(V124))(V125))(V126)) end end end end end end(V1))(V2))(V3))(V4))(V83))), fun (V128) -> begin (V129 = (V127(V128))), case V129 of {'Prelude.Types.Left', V130} -> {'Prelude.Types.Left', V130}; {'Prelude.Types.Right', V131} -> (begin (V132 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Nested"/utf8>>)), [V114 | [V131 | []]]))), V132 end(V128)) end end end end), V133 end(V111)) end end end end; {'Core.Name.CaseBlock', V134, V135} -> begin (V137 = fun (V136) -> ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V134, V136)) end), fun (V138) -> begin (V139 = (V137(V138))), case V139 of {'Prelude.Types.Left', V140} -> {'Prelude.Types.Left', V140}; {'Prelude.Types.Right', V141} -> (begin (V149 = begin (V143 = fun (V142) -> ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V135, V142)) end), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V148 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"CaseBlock"/utf8>>)), [V141 | [V147 | []]]))), V148 end(V144)) end end end end), V149 end(V138)) end end end end; {'Core.Name.WithBlock', V150, V151} -> begin (V153 = fun (V152) -> ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V150, V152)) end), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V165 = begin (V159 = fun (V158) -> ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V151, V158)) end), fun (V160) -> begin (V161 = (V159(V160))), case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> (begin (V164 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"WithBlock"/utf8>>)), [V157 | [V163 | []]]))), V164 end(V160)) end end end end), V165 end(V154)) end end end end; {'Core.Name.Resolved', V166} -> begin (V199 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Core.Context.MkDefs', V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198} -> V167 end, {'Core.Name.Resolved', V166}))), fun (V200) -> begin (V201 = (V199(V200))), case V201 of {'Prelude.Types.Left', V202} -> {'Prelude.Types.Left', V202}; {'Prelude.Types.Right', V203} -> (begin (V221 = case V203 of {'Core.Name.Resolved', V204} -> fun (V205) -> ('un--cantReflect'(V1, (begin (V207 = fun (V206) -> V206 end), fun (V208) -> (V207(V208)) end end(<<"Name directly, Resolved is intentionally internal"/utf8>>)), V205)) end; _ -> (((((begin (V215 = fun (V209) -> fun (V210) -> fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> ('dn--un--reflect_Reflect_Name'(V209, V210, V211, V212, V213, V214)) end end end end end end), fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> ((((((V215(V0))(V216))(V217))(V218))(V219))(V220)) end end end end end end(V1))(V2))(V3))(V4))(V203)) end), V221 end(V200)) end end end end; _ -> fun (V222) -> ('un--cantReflect'(V1, <<"Name, reflecting it is unimplemented or intentionally internal"/utf8>>, V222)) end end.
'dn--un--reflect_Reflect_ModuleIdent'(V0, V1, V2, V3, V4, V5) -> begin (V25 = (((((begin (V19 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--reflect_Reflect_(List $a)'(fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--reflect_Reflect_String'(V12, V13, V14, V15, V16, V17, V18)) end end end end end end end, V6, V7, V8, V9, V10, V11)) end end end end end end), fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ((((((V19(V0))(V20))(V21))(V22))(V23))(V24)) end end end end end end(V1))(V2))(V3))(V4))(('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V5))))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V30 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"MkMI"/utf8>>)), [V29 | []]))), V30 end(V26)) end end end end.
'dn--un--reflect_Reflect_LazyReason'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"LInf"/utf8>>)))); 1 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"LLazy"/utf8>>)))); 2 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"LUnknown"/utf8>>)))) end.
'dn--un--reflect_Reflect_Integer'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.BI', V5}}}.
'dn--un--reflect_Reflect_Int8'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.I8', V5}}}.
'dn--un--reflect_Reflect_Int64'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.I64', V5}}}.
'dn--un--reflect_Reflect_Int32'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.I32', V5}}}.
'dn--un--reflect_Reflect_Int16'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.I16', V5}}}.
'dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.I', V5}}}.
'dn--un--reflect_Reflect_FC'(V0, V1, V2, V3, V4, V5) -> case V3 of 1 -> fun (V6) -> {'Prelude.Types.Right', {'Core.TT.Erased', V1, {'Core.TT.Placeholder'}}} end; _ -> case V5 of {'Core.FC.MkFC', V7, V8, V9} -> begin (V10 = ('dn--un--reflect_Reflect_OriginDesc'(V0, V1, V2, V3, V4, V7))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V79 = begin (V41 = (((((begin (V35 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un--reflect_Reflect_Int'(V21, V22, V23, V24, V25, V26, V27)) end end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('dn--un--reflect_Reflect_Int'(V28, V29, V30, V31, V32, V33, V34)) end end end end end end end}, V15, V16, V17, V18, V19, V20)) end end end end end end), fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ((((((V35(V0))(V36))(V37))(V38))(V39))(V40)) end end end end end end(V1))(V2))(V3))(V4))(V8))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V78 = begin (V72 = (((((begin (V66 = fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('dn--un--reflect_Reflect_Int'(V52, V53, V54, V55, V56, V57, V58)) end end end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('dn--un--reflect_Reflect_Int'(V59, V60, V61, V62, V63, V64, V65)) end end end end end end end}, V46, V47, V48, V49, V50, V51)) end end end end end end), fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ((((((V66(V0))(V67))(V68))(V69))(V70))(V71)) end end end end end end(V1))(V2))(V3))(V4))(V9))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V77 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"MkFC"/utf8>>)), [V14 | [V45 | [V76 | []]]]))), V77 end(V73)) end end end end), V78 end(V42)) end end end end), V79 end(V11)) end end end end; {'Core.FC.MkVirtualFC', V80, V81, V82} -> begin (V83 = ('dn--un--reflect_Reflect_OriginDesc'(V0, V1, V2, V3, V4, V80))), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V152 = begin (V114 = (((((begin (V108 = fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('dn--un--reflect_Reflect_Int'(V94, V95, V96, V97, V98, V99, V100)) end end end end end end end, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('dn--un--reflect_Reflect_Int'(V101, V102, V103, V104, V105, V106, V107)) end end end end end end end}, V88, V89, V90, V91, V92, V93)) end end end end end end), fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ((((((V108(V0))(V109))(V110))(V111))(V112))(V113)) end end end end end end(V1))(V2))(V3))(V4))(V81))), fun (V115) -> begin (V116 = (V114(V115))), case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> (begin (V151 = begin (V145 = (((((begin (V139 = fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('dn--un--reflect_Reflect_Int'(V125, V126, V127, V128, V129, V130, V131)) end end end end end end end, fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('dn--un--reflect_Reflect_Int'(V132, V133, V134, V135, V136, V137, V138)) end end end end end end end}, V119, V120, V121, V122, V123, V124)) end end end end end end), fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> ((((((V139(V0))(V140))(V141))(V142))(V143))(V144)) end end end end end end(V1))(V2))(V3))(V4))(V82))), fun (V146) -> begin (V147 = (V145(V146))), case V147 of {'Prelude.Types.Left', V148} -> {'Prelude.Types.Left', V148}; {'Prelude.Types.Right', V149} -> (begin (V150 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"MkFC"/utf8>>)), [V87 | [V118 | [V149 | []]]]))), V150 end(V146)) end end end end), V151 end(V115)) end end end end), V152 end(V84)) end end end end; {'Core.FC.EmptyFC'} -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"EmptyFC"/utf8>>)))) end end.
'dn--un--reflect_Reflect_Double'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.Db', V5}}}.
'dn--un--reflect_Reflect_Constant'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.TT.I', V6} -> begin (V8 = fun (V7) -> ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V6, V7)) end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V13 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"I"/utf8>>)), [V12 | []]))), V13 end(V9)) end end end end; {'Core.TT.I8', V14} -> begin (V16 = fun (V15) -> ('dn--un--reflect_Reflect_Int8'(V0, V1, V2, V3, V4, V14, V15)) end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V21 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"I8"/utf8>>)), [V20 | []]))), V21 end(V17)) end end end end; {'Core.TT.I16', V22} -> begin (V24 = fun (V23) -> ('dn--un--reflect_Reflect_Int16'(V0, V1, V2, V3, V4, V22, V23)) end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V29 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"I16"/utf8>>)), [V28 | []]))), V29 end(V25)) end end end end; {'Core.TT.I32', V30} -> begin (V32 = fun (V31) -> ('dn--un--reflect_Reflect_Int32'(V0, V1, V2, V3, V4, V30, V31)) end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V37 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"I32"/utf8>>)), [V36 | []]))), V37 end(V33)) end end end end; {'Core.TT.I64', V38} -> begin (V40 = fun (V39) -> ('dn--un--reflect_Reflect_Int64'(V0, V1, V2, V3, V4, V38, V39)) end), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V45 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"I64"/utf8>>)), [V44 | []]))), V45 end(V41)) end end end end; {'Core.TT.BI', V46} -> begin (V48 = fun (V47) -> ('dn--un--reflect_Reflect_Integer'(V0, V1, V2, V3, V4, V46, V47)) end), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V53 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"BI"/utf8>>)), [V52 | []]))), V53 end(V49)) end end end end; {'Core.TT.B8', V54} -> begin (V56 = fun (V55) -> ('dn--un--reflect_Reflect_Bits8'(V0, V1, V2, V3, V4, V54, V55)) end), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V61 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"B8"/utf8>>)), [V60 | []]))), V61 end(V57)) end end end end; {'Core.TT.B16', V62} -> begin (V64 = fun (V63) -> ('dn--un--reflect_Reflect_Bits16'(V0, V1, V2, V3, V4, V62, V63)) end), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V69 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"B16"/utf8>>)), [V68 | []]))), V69 end(V65)) end end end end; {'Core.TT.B32', V70} -> begin (V72 = fun (V71) -> ('dn--un--reflect_Reflect_Bits32'(V0, V1, V2, V3, V4, V70, V71)) end), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V77 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"B32"/utf8>>)), [V76 | []]))), V77 end(V73)) end end end end; {'Core.TT.B64', V78} -> begin (V80 = fun (V79) -> ('dn--un--reflect_Reflect_Bits64'(V0, V1, V2, V3, V4, V78, V79)) end), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V85 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"B64"/utf8>>)), [V84 | []]))), V85 end(V81)) end end end end; {'Core.TT.Str', V86} -> begin (V88 = fun (V87) -> ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V86, V87)) end), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V93 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Str"/utf8>>)), [V92 | []]))), V93 end(V89)) end end end end; {'Core.TT.Ch', V94} -> begin (V96 = fun (V95) -> ('dn--un--reflect_Reflect_Char'(V0, V1, V2, V3, V4, V94, V95)) end), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V101 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Ch"/utf8>>)), [V100 | []]))), V101 end(V97)) end end end end; {'Core.TT.Db', V102} -> begin (V104 = fun (V103) -> ('dn--un--reflect_Reflect_Double'(V0, V1, V2, V3, V4, V102, V103)) end), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V109 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Db"/utf8>>)), [V108 | []]))), V109 end(V105)) end end end end; {'Core.TT.PrT', V110} -> begin (V111 = ('dn--un--reflect_Reflect_PrimType'(V0, V1, V2, V3, V4, V110))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V116 = ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"PrT"/utf8>>)), [V115 | []]))), V116 end(V112)) end end end end; {'Core.TT.WorldVal'} -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"WorldVal"/utf8>>)))) end.
'dn--un--reflect_Reflect_Char'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.Ch', V5}}}.
'dn--un--reflect_Reflect_BuiltinType'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"BuiltinNatural"/utf8>>)))); 1 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"NaturalToInteger"/utf8>>)))); 2 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"IntegerToNatural"/utf8>>)))) end.
'dn--un--reflect_Reflect_Bool'(V0, V1, V2, V3, V4, V5) -> case V5 of 1 -> ('un--getCon'(V0, V1, V2, ('un--basics'(<<"True"/utf8>>)))); 0 -> ('un--getCon'(V0, V1, V2, ('un--basics'(<<"False"/utf8>>)))) end.
'dn--un--reflect_Reflect_Bits8'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.B8', V5}}}.
'dn--un--reflect_Reflect_Bits64'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.B64', V5}}}.
'dn--un--reflect_Reflect_Bits32'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.B32', V5}}}.
'dn--un--reflect_Reflect_Bits16'(V0, V1, V2, V3, V4, V5, V6) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V1, {'Core.TT.B16', V5}}}.
'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4, V5) -> ('un--getCon'(V0, V1, V2, ('un--builtin'(<<"MkUnit"/utf8>>)))).
'dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> begin (V15 = (((((begin (V9 = ('Idris.Idris2.Builtin':'un--fst'(V0))), fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ((((((V9(V1))(V10))(V11))(V12))(V13))(V14)) end end end end end end(V2))(V3))(V4))(V5))(V7))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V32 = begin (V26 = (((((begin (V20 = ('Idris.Idris2.Builtin':'un--snd'(V0))), fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ((((((V20(V1))(V21))(V22))(V23))(V24))(V25)) end end end end end end(V2))(V3))(V4))(V5))(V8))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V31 = ('un--appCon'(V1, V2, V3, ('un--builtin'(<<"MkPair"/utf8>>)), [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | [V19 | [V30 | []]]]]))), V31 end(V27)) end end end end), V32 end(V16)) end end end end end.
'dn--un--reflect_Reflect_(PiInfo $t)'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.TT.Implicit'} -> ('un--appCon'(V1, V2, V3, ('un--reflectiontt'(<<"ImplicitArg"/utf8>>)), [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | []])); {'Core.TT.Explicit'} -> ('un--appCon'(V1, V2, V3, ('un--reflectiontt'(<<"ExplicitArg"/utf8>>)), [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | []])); {'Core.TT.AutoImplicit'} -> ('un--appCon'(V1, V2, V3, ('un--reflectiontt'(<<"AutoImplicit"/utf8>>)), [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | []])); {'Core.TT.DefImplicit', V7} -> begin (V14 = (((((begin (V8 = V0), fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ((((((V8(V1))(V9))(V10))(V11))(V12))(V13)) end end end end end end(V2))(V3))(V4))(V5))(V7))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V19 = ('un--appCon'(V1, V2, V3, ('un--reflectiontt'(<<"DefImplicit"/utf8>>)), [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | [V18 | []]]))), V19 end(V15)) end end end end end.
'dn--un--reflect_Reflect_(Maybe $a)'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Prelude.Types.Nothing'} -> ('un--appCon'(V1, V2, V3, ('un--preludetypes'(<<"Nothing"/utf8>>)), [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | []])); {'Prelude.Types.Just', V7} -> begin (V14 = (((((begin (V8 = V0), fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ((((((V8(V1))(V9))(V10))(V11))(V12))(V13)) end end end end end end(V2))(V3))(V4))(V5))(V7))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V19 = ('un--appCon'(V1, V2, V3, ('un--preludetypes'(<<"Just"/utf8>>)), [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | [V18 | []]]))), V19 end(V15)) end end end end end.
'dn--un--reflect_Reflect_(List1 $a)'(V0, V1, V2, V3, V4, V5, V6) -> begin (V15 = (((((begin (V9 = V0), fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ((((((V9(V1))(V10))(V11))(V12))(V13))(V14)) end end end end end end(V2))(V3))(V4))(V5))(case V6 of {'Data.List1.:::', V7, V8} -> V7 end))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V40 = begin (V34 = (((((begin (V28 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un--reflect_Reflect_(List $a)'(V0, V22, V23, V24, V25, V26, V27)) end end end end end end), fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ((((((V28(V1))(V29))(V30))(V31))(V32))(V33)) end end end end end end(V2))(V3))(V4))(V5))(case V6 of {'Data.List1.:::', V20, V21} -> V21 end))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V39 = ('un--appCon'(V1, V2, V3, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(<<"Data.List1"/utf8>>)), {'Core.Name.UN', {'Core.Name.Basic', <<":::"/utf8>>}}}, [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | [V19 | [V38 | []]]]))), V39 end(V35)) end end end end), V40 end(V16)) end end end end.
'dn--un--reflect_Reflect_(List $a)'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> ('un--appCon'(V1, V2, V3, ('un--basics'(<<"Nil"/utf8>>)), [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | []])); [E0 | E1] -> (fun (V7, V8) -> begin (V15 = (((((begin (V9 = V0), fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ((((((V9(V1))(V10))(V11))(V12))(V13))(V14)) end end end end end end(V2))(V3))(V4))(V5))(V7))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V38 = begin (V32 = (((((begin (V26 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--reflect_Reflect_(List $a)'(V0, V20, V21, V22, V23, V24, V25)) end end end end end end), fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ((((((V26(V1))(V27))(V28))(V29))(V30))(V31)) end end end end end end(V2))(V3))(V4))(V5))(V8))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V37 = ('un--appCon'(V1, V2, V3, ('un--basics'(<<"::"/utf8>>)), [{'Core.TT.Erased', V2, {'Core.TT.Placeholder'}} | [V19 | [V36 | []]]]))), V37 end(V33)) end end end end), V38 end(V16)) end end end end end(E0, E1)) end.
'dn--un--__Impl_Reify_Visibility'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Visibility'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_VirtualIdent'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_VirtualIdent'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_UserName'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_UserName'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_TotalReq'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_TotalReq'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_String'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_String'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_RigCount'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_RigCount'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_PrimType'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_PrimType'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_OriginDesc'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_OriginDesc'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Nat'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Nat'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Namespace'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Namespace'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_NameType'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_NameType'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Name'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Name'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_ModuleIdent'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_ModuleIdent'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_LazyReason'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_LazyReason'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Integer'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Integer'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Int8'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Int8'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Int64'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Int64'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Int32'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Int32'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Int16'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Int16'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Int'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Int'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_FC'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_FC'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Double'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Double'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Constant'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Constant'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Char'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Char'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_BuiltinType'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_BuiltinType'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Bool'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Bool'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Bits8'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Bits8'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Bits64'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Bits64'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Bits32'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Bits32'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Bits16'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Bits16'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4) -> ('dn--un--reify_Reify_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4)).
'dn--un--__Impl_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4) -> ('dn--un--reify_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4)).
'dn--un--__Impl_Reify_(PiInfo $t)'(V0, V1, V2, V3, V4) -> ('dn--un--reify_Reify_(PiInfo $t)'(V0, V1, V2, V3, V4)).
'dn--un--__Impl_Reify_(Maybe $a)'(V0, V1, V2, V3, V4) -> ('dn--un--reify_Reify_(Maybe $a)'(V0, V1, V2, V3, V4)).
'dn--un--__Impl_Reify_(List1 $a)'(V0, V1, V2, V3, V4) -> ('dn--un--reify_Reify_(List1 $a)'(V0, V1, V2, V3, V4)).
'dn--un--__Impl_Reify_(List $a)'(V0, V1, V2, V3, V4) -> ('dn--un--reify_Reify_(List $a)'(V0, V1, V2, V3, V4)).
'dn--un--__Impl_Reflect_Visibility'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_Visibility'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_VirtualIdent'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_VirtualIdent'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_UserName'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_UserName'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_TotalReq'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_TotalReq'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_String'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_RigCount'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_RigCount'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_PrimType'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_PrimType'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_OriginDesc'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_OriginDesc'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_Nat'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_Nat'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_Namespace'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_Namespace'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_NameType'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_NameType'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_Name'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_Name'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_ModuleIdent'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_ModuleIdent'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_LazyReason'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_LazyReason'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_Integer'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Integer'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Int8'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Int8'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Int64'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Int64'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Int32'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Int32'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Int16'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Int16'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Int'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_FC'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_FC'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_Double'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Double'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Constant'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_Constant'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_Char'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Char'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_BuiltinType'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_BuiltinType'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_Bool'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_Bool'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_Bits8'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Bits8'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Bits64'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Bits64'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Bits32'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Bits32'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Bits16'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Bits16'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_(PiInfo $t)'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_(PiInfo $t)'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_(Maybe $a)'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_(Maybe $a)'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_(List1 $a)'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_(List1 $a)'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_(List $a)'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_(List $a)'(V0, V1, V2, V3, V4, V5, V6)).
'un--reify'(V0, V1, V2) -> begin (V3 = V0), fun (V4) -> fun (V5) -> ((((V3(V1))(V2))(V4))(V5)) end end end.
'un--reflectionttimp'(V0) -> {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--reflectionTTImpNS'()), {'Core.Name.UN', {'Core.Name.Basic', V0}}}.
'un--reflectiontt'(V0) -> {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--reflectionTTNS'()), {'Core.Name.UN', {'Core.Name.Basic', V0}}}.
'un--reflection'(V0) -> {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--reflectionNS'()), {'Core.Name.UN', {'Core.Name.Basic', V0}}}.
'un--reflect'(V0, V1) -> begin (V2 = V0), fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ((((((V2(V1))(V3))(V4))(V5))(V6))(V7)) end end end end end end.
'un--primio'(V0) -> {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--primIONS'()), {'Core.Name.UN', {'Core.Name.Basic', V0}}}.
'un--preludetypes'(V0) -> {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', V0}}}.
'un--getCon'(V0, V1, V2, V3) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V3, case V2 of {'Core.Context.MkDefs', V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} -> V4 end))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V150 = case V40 of {'Prelude.Types.Just', V41} -> case V41 of {'Core.Context.Context.DCon', V42, V43, V44} -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(case V2 of {'Core.Context.MkDefs', V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76} -> V45 end, {'Core.TT.Ref', V1, {'Core.TT.DataCon', V42, V43}, V3})); {'Core.Context.Context.TCon', V77, V78, V79, V80, V81, V82, V83, V84} -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(case V2 of {'Core.Context.MkDefs', V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116} -> V85 end, {'Core.TT.Ref', V1, {'Core.TT.TyCon', V77, V78}, V3})); _ -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(case V2 of {'Core.Context.MkDefs', V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148} -> V117 end, {'Core.TT.Ref', V1, {'Core.TT.Func'}, V3})) end; _ -> fun (V149) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.UndefinedName', V1, V3}, V149)) end end), V150 end(V37)) end end end end.
'un--cantReify'(V0, V1, V2, V3) -> begin (V7 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V1, V0, <<"reflection.reify"/utf8>>, 10, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> <<V4/binary, V5/binary>> end end, <<""/utf8>>}, fun (V6) -> V6 end, [<<"Can\x{27}t reify as "/utf8>> | [V3 | []]])) end, ('Idris.Idris2.Core.Env':'un--mkEnv'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V1)), V2))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'(V2)), <<<<"Can\x{27}t reify as "/utf8>>/binary, V3/binary>>}, V12)) end), V13 end(V8)) end end end end.
'un--cantReflect'(V0, V1, V2) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V0, <<<<"Can\x{27}t reflect as "/utf8>>/binary, V1/binary>>}, V2)).
'un--builtin'(V0) -> {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Core.Name.UN', {'Core.Name.Basic', V0}}}.
'un--basics'(V0) -> {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--basicsNS'()), {'Core.Name.UN', {'Core.Name.Basic', V0}}}.
'un--appCon'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--getCon'(V0, V1, V2, V3))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V42 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(case V2 of {'Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V10 end, ('Idris.Idris2.Core.TT':'un--apply'(V1, V9, V4))))), V42 end(V6)) end end end end.
