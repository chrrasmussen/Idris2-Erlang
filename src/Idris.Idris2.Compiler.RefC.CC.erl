-module('Idris.Idris2.Compiler.RefC.CC').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--findLDFLAGS'/1,
  'un--findCPPFLAGS'/1,
  'un--findCFLAGS'/1,
  'un--findCC'/1,
  'un--compileCObjectFile'/4,
  'un--compileCFile'/4,
  'un--clibdirs'/1
]).
'un--findLDFLAGS'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"IDRIS2_LDFLAGS"/utf8>>))(V0))), case V28 of {'Prelude.Types.Nothing'} -> begin (V56 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> V35 end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), begin (V43 = (V40(V41))), (V42(V43)) end end end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), ((V47(V49))(V48)) end end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V51(V52))), (V53(V52)) end end end end}, fun (V54) -> fun (V55) -> V55 end end}, <<"LDFLAGS"/utf8>>))(V0))), case V56 of {'Prelude.Types.Nothing'} -> (begin (V58 = fun (V57) -> V57 end), fun (V59) -> (V58(V59)) end end(<<""/utf8>>)); {'Prelude.Types.Just', V60} -> V60 end end; {'Prelude.Types.Just', V61} -> V61 end end.
'un--findCPPFLAGS'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"IDRIS2_CPPFLAGS"/utf8>>))(V0))), case V28 of {'Prelude.Types.Nothing'} -> begin (V56 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> V35 end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), begin (V43 = (V40(V41))), (V42(V43)) end end end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), ((V47(V49))(V48)) end end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V51(V52))), (V53(V52)) end end end end}, fun (V54) -> fun (V55) -> V55 end end}, <<"CPPFLAGS"/utf8>>))(V0))), case V56 of {'Prelude.Types.Nothing'} -> (begin (V58 = fun (V57) -> V57 end), fun (V59) -> (V58(V59)) end end(<<""/utf8>>)); {'Prelude.Types.Just', V60} -> V60 end end; {'Prelude.Types.Just', V61} -> V61 end end.
'un--findCFLAGS'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"IDRIS2_CFLAGS"/utf8>>))(V0))), case V28 of {'Prelude.Types.Nothing'} -> begin (V56 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> V35 end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), begin (V43 = (V40(V41))), (V42(V43)) end end end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), ((V47(V49))(V48)) end end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V51(V52))), (V53(V52)) end end end end}, fun (V54) -> fun (V55) -> V55 end end}, <<"CFLAGS"/utf8>>))(V0))), case V56 of {'Prelude.Types.Nothing'} -> (begin (V58 = fun (V57) -> V57 end), fun (V59) -> (V58(V59)) end end(<<""/utf8>>)); {'Prelude.Types.Just', V60} -> V60 end end; {'Prelude.Types.Just', V61} -> V61 end end.
'un--findCC'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"IDRIS2_CC"/utf8>>))(V0))), case V28 of {'Prelude.Types.Nothing'} -> begin (V56 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> V35 end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), begin (V43 = (V40(V41))), (V42(V43)) end end end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), ((V47(V49))(V48)) end end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V51(V52))), (V53(V52)) end end end end}, fun (V54) -> fun (V55) -> V55 end end}, <<"CC"/utf8>>))(V0))), case V56 of {'Prelude.Types.Nothing'} -> (begin (V58 = fun (V57) -> V57 end), fun (V59) -> (V58(V59)) end end(<<"cc"/utf8>>)); {'Prelude.Types.Just', V60} -> V60 end end; {'Prelude.Types.Just', V61} -> V61 end end.
'un--compileCObjectFile'(V0, V1, V2, V3) -> begin (V6 = fun (V4) -> begin (V5 = ('un--findCC'(V4))), {'Prelude.Types.Right', V5} end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V83 = begin (V13 = fun (V11) -> begin (V12 = ('un--findCFLAGS'(V11))), {'Prelude.Types.Right', V12} end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V82 = begin (V20 = fun (V18) -> begin (V19 = ('un--findCPPFLAGS'(V18))), {'Prelude.Types.Right', V19} end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V81 = begin (V25 = ('Idris.Idris2.Core.Directory':'un--findDataFile'(V0, <<"refc"/utf8>>))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V80 = begin (V30 = ('Idris.Idris2.Core.Directory':'un--findDataFile'(V0, <<"c"/utf8>>))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V79 = begin (V35 = case V1 of 1 -> [<<"-fpic"/utf8>> | []]; 0 -> [] end), begin (V36 = ('Idris.Idris2.System.Escape':'un--escapeCmd'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V10 | [<<"-Werror"/utf8>> | [<<"-c"/utf8>> | []]]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V35, [V2 | [<<"-o"/utf8>> | [V3 | [<<<<"-I"/utf8>>/binary, V29/binary>> | [<<<<"-I"/utf8>>/binary, V34/binary>> | []]]]]]))))))), begin (V37 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.refc.cc"/utf8>>, 10, fun () -> V36 end))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V78 = begin (V71 = fun (V42) -> begin (V70 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> V49 end end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), begin (V57 = (V54(V55))), (V56(V57)) end end end end end end end}, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), ((V61(V63))(V62)) end end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V65(V66))), (V67(V66)) end end end end}, fun (V68) -> fun (V69) -> V69 end end}, V36))(V42))), {'Prelude.Types.Right', V70} end end), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V77 = fun (V76) -> case V75 of 0 -> {'Prelude.Types.Right', {'Prelude.Types.Just', V3}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V77 end(V72)) end end end end), V78 end(V38)) end end end end end end), V79 end(V31)) end end end end), V80 end(V26)) end end end end), V81 end(V21)) end end end end), V82 end(V14)) end end end end), V83 end(V7)) end end end end.
'un--compileCFile'(V0, V1, V2, V3) -> begin (V6 = fun (V4) -> begin (V5 = ('un--findCC'(V4))), {'Prelude.Types.Right', V5} end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V99 = begin (V13 = fun (V11) -> begin (V12 = ('un--findCFLAGS'(V11))), {'Prelude.Types.Right', V12} end end), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V98 = begin (V20 = fun (V18) -> begin (V19 = ('un--findLDFLAGS'(V18))), {'Prelude.Types.Right', V19} end end), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V97 = begin (V25 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V96 = begin (V30 = ('Idris.Idris2.Core.Directory':'un--findDataFile'(V0, <<"refc"/utf8>>))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V95 = begin (V35 = ('Idris.Idris2.Core.Directory':'un--findLibraryFile'(V0, <<"libidris2_support.a"/utf8>>))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V94 = begin (V40 = case V1 of 1 -> [<<"-shared"/utf8>> | []]; 0 -> [] end), begin (V51 = ('Idris.Idris2.System.Escape':'un--escapeCmd'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V10 | [<<"-Werror"/utf8>> | []]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V40, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V2 | [<<"-o"/utf8>> | [V3 | [V39 | [<<"-lidris2_refc"/utf8>> | [<<<<"-L"/utf8>>/binary, V34/binary>> | []]]]]]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--clibdirs'(case V29 of {'Core.Options.MkDirs', V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> V49 end)), [<<"-lgmp"/utf8>> | [<<"-lm"/utf8>> | []]]))))))))))), begin (V52 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.refc.cc"/utf8>>, 10, fun () -> V51 end))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V93 = begin (V86 = fun (V57) -> begin (V85 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> V64 end end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), begin (V72 = (V69(V70))), (V71(V72)) end end end end end end end}, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), ((V76(V78))(V77)) end end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V80(V81))), (V82(V81)) end end end end}, fun (V83) -> fun (V84) -> V84 end end}, V51))(V57))), {'Prelude.Types.Right', V85} end end), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V92 = fun (V91) -> case V90 of 0 -> {'Prelude.Types.Right', {'Prelude.Types.Just', V3}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V92 end(V87)) end end end end), V93 end(V53)) end end end end end end), V94 end(V36)) end end end end), V95 end(V31)) end end end end), V96 end(V26)) end end end end), V97 end(V21)) end end end end), V98 end(V14)) end end end end), V99 end(V7)) end end end end.
'un--clibdirs'(V0) -> ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> <<<<"-L"/utf8>>/binary, V1/binary>> end))(V0)).
