-module('Idris.Idris2.Libraries.System.Directory.Tree').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--5615-9083--in--un--prefixes'/2,
  'nested--5615-9082--in--un--padding'/3,
  'nested--5636-9109--in--un--hd'/5,
  'nested--5625-9094--in--un--go'/4,
  'nested--5615-9084--in--un--go'/2,
  'nested--5034-8557--in--un--files\x{27}'/5,
  'nested--4927-8439--in--un--files\x{27}'/5,
  'nested--5034-8558--in--un--dirs\x{27}'/5,
  'nested--4927-8440--in--un--dirs\x{27}'/5,
  'nested--6094-9520--in--un--copyFile\x{27}'/6,
  'nested--6094-9521--in--un--copyDirContents'/6,
  'nested--5153-8650--in--un--cmp'/4,
  'un--toFilePath'/2,
  'un--sortBy'/4,
  'un--sort'/2,
  'un--print'/1,
  'un--openDir'/2,
  'un--nextDirEntry'/2,
  'un--go'/4,
  'un--filter'/4,
  'un--fileName'/1,
  'un--explore'/2,
  'un--emptyTree'/0,
  'un--directoryExists'/3,
  'un--depthFirst'/4,
  'un--copyDir'/3,
  'un--closeDir'/2,
  'un--SubTree'/1
]).
'nested--5615-9083--in--un--prefixes'(V0, V1) -> ('Idris.Idris2.Data.List':'un--snoc'(('Idris.Idris2.Data.List':'un--replicateTR'([], ('Idris.Idris2.Data.Nat':'un--pred'(V1)), 1)), 0)).
'nested--5615-9082--in--un--padding'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('nested--5625-9094--in--un--go'(V0, V1, [], V2)))).
'nested--5636-9109--in--un--hd'(V0, V1, V2, V3, V4) -> case case V1 of 1 -> ('Idris.Idris2.Data.List':'un--isNil'(V4)); 0 -> 0 end of 1 -> case V2 of 1 -> <<" \x{251c} "/utf8>>; 0 -> <<" \x{2514} "/utf8>> end; 0 -> case V2 of 1 -> <<" \x{2502}"/utf8>>; 0 -> <<"  "/utf8>> end end.
'nested--5625-9094--in--un--go'(V0, V1, V2, V3) -> case V3 of [] -> V2; [E0 | E1] -> (fun (V4, V5) -> ('nested--5625-9094--in--un--go'(V0, V1, [('nested--5636-9109--in--un--hd'(V0, V1, V4, V5, V2)) | V2], V5)) end(E0, E1)) end.
'nested--5615-9084--in--un--go'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Builtin.MkUnit'} end; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> begin (V9 = V8), fun (V10) -> begin (V11 = (V9(V10))), begin (V12 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<('nested--5615-9082--in--un--padding'(V0, 1, V5))/binary, V7/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V10))), ((begin (V13 = ('nested--5615-9082--in--un--padding'(V0, 0, V5))), begin (V18 = ('nested--5615-9083--in--un--prefixes'(V0, (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(case V11 of {'Libraries.System.Directory.Tree.MkTree', V14, V15} -> V14 end)) + ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(case V11 of {'Libraries.System.Directory.Tree.MkTree', V16, V17} -> V17 end)))))), fun () -> fun (V19) -> begin (V67 = (('Idris.Idris2.Prelude.Interfaces':'un--for_'({'Prelude.Interfaces.MkApplicative', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> V26 end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), begin (V34 = (V31(V32))), (V33(V34)) end end end end end end end}, {'Prelude.Interfaces.MkFoldable', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V46)) end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V50, V51, V52, V53)) end end end end end end end, fun (V54) -> fun (V55) -> V55 end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V58, V59, V60)) end end end end end}, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V18, case V11 of {'Libraries.System.Directory.Tree.MkTree', V61, V62} -> V61 end)), fun (V63) -> fun (V64) -> case V63 of {'Builtin.MkPair', V65, V66} -> ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<V13/binary, <<case V65 of 1 -> <<" \x{251c} "/utf8>>; 0 -> <<" \x{2514} "/utf8>> end/binary, ('un--fileName'(V66))/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V64)) end end end))(V19))), ((begin (V78 = ((begin (V75 = fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V73, V74)) end end end end), fun (V76) -> fun (V77) -> ((((V75('erased'))('erased'))(V76))(V77)) end end end(fun (V70) -> [V70 | V5] end))(('nested--5615-9083--in--un--prefixes'(V0, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(case V11 of {'Libraries.System.Directory.Tree.MkTree', V68, V69} -> V69 end))))))), fun () -> fun (V79) -> begin (V86 = (('nested--5615-9084--in--un--go'(V0, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V80) -> fun (V81) -> case V81 of {'Builtin.DPair.MkDPair', V82, V83} -> {'Builtin.MkPair', V80, {'Builtin.MkPair', ('un--fileName'(V82)), V83}} end end end, V78, case V11 of {'Libraries.System.Directory.Tree.MkTree', V84, V85} -> V85 end))))(V79))), (('nested--5615-9084--in--un--go'(V0, V4))(V79)) end end end end())(V19)) end end end end end())(V10)) end end end end end end end(E0, E1)) end.
'nested--5034-8557--in--un--files\x{27}'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Data.List':'un--sortBy'((V4(V0)), V2)).
'nested--4927-8439--in--un--files\x{27}'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, (V4(V0)), V2)).
'nested--5034-8558--in--un--dirs\x{27}'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Data.List':'un--sortBy'(fun (V5) -> fun (V6) -> (((V3(V0))(case V5 of {'Builtin.DPair.MkDPair', V9, V10} -> V9 end))(case V6 of {'Builtin.DPair.MkDPair', V7, V8} -> V7 end)) end end, ('Idris.Idris2.Prelude.Basics':'un--flip'(begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end, V1, fun (V18) -> case V18 of {'Builtin.DPair.MkDPair', V19, V20} -> {'Builtin.DPair.MkDPair', V19, ((begin (V29 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V26, V27, V28)) end end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V21) -> ('un--sortBy'(fun (V22) -> (V4(V22)) end, fun (V23) -> (V3(V23)) end, ('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V0, ('un--fileName'(V19)))), V21)) end))(V20))} end end)))).
'nested--4927-8440--in--un--dirs\x{27}'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end, V1, fun (V7) -> case V7 of {'Builtin.DPair.MkDPair', V8, V9} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V12, V13)) end end end end, fun (V14) -> fun (V15) -> {'Prelude.Types.Just', V15} end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V18, V19)) end end end end}, fun (V20) -> {'Prelude.Types.Nothing'} end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V22, V23)) end end end}, ((V3(V0))(V8)))), fun (V24) -> {'Prelude.Types.Just', {'Builtin.DPair.MkDPair', V8, ((begin (V33 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V30, V31, V32)) end end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end(fun (V25) -> ('un--filter'(fun (V26) -> (V4(V26)) end, fun (V27) -> (V3(V27)) end, ('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V0, ('un--fileName'(V8)))), V25)) end))(V9))}} end)) end end)).
'nested--6094-9520--in--un--copyFile\x{27}'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Prelude.IO.MkHasIO', V6, V7} -> case V6 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> ((((V9('erased'))('erased'))(('Idris.Idris2.Erlang.System.File':'un--copyFile'(V0, ('Idris.Idris2.Libraries.Utils.Path':'dn--un--show_Show_Path'(('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V3, V5)))), ('Idris.Idris2.Libraries.Utils.Path':'dn--un--show_Show_Path'(('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V4, V5))))))))(fun (V11) -> case V11 of {'Prelude.Types.Right', V12} -> case V0 of {'Prelude.IO.MkHasIO', V13, V14} -> case V13 of {'Prelude.Interfaces.MkMonad', V15, V16, V17} -> case V15 of {'Prelude.Interfaces.MkApplicative', V18, V19, V20} -> ((V19('erased'))({'Prelude.Types.Right', V12})) end end end; {'Prelude.Types.Left', V21} -> case V21 of {'Builtin.MkPair', V22, V23} -> case V0 of {'Prelude.IO.MkHasIO', V24, V25} -> case V24 of {'Prelude.Interfaces.MkMonad', V26, V27, V28} -> case V26 of {'Prelude.Interfaces.MkApplicative', V29, V30, V31} -> ((V30('erased'))({'Prelude.Types.Left', V22})) end end end end end end)) end end.
'nested--6094-9521--in--un--copyDirContents'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Libraries.System.Directory.Tree.MkTree', V6, V7} -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un-->>=_Monad_((EitherT $e) $m)'(case V0 of {'Prelude.IO.MkHasIO', V8, V9} -> V8 end, ('Idris.Idris2.Prelude.Interfaces':'un--traverse_'({'Prelude.Interfaces.MkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--map_Functor_((EitherT $e) $m)'(case V0 of {'Prelude.IO.MkHasIO', V14, V15} -> case V14 of {'Prelude.Interfaces.MkMonad', V16, V17, V18} -> case V16 of {'Prelude.Interfaces.MkApplicative', V19, V20, V21} -> V19 end end end, V12, V13)) end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--pure_Applicative_((EitherT $e) $m)'(case V0 of {'Prelude.IO.MkHasIO', V24, V25} -> case V24 of {'Prelude.Interfaces.MkMonad', V26, V27, V28} -> V26 end end, V23)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--<*>_Applicative_((EitherT $e) $m)'(case V0 of {'Prelude.IO.MkHasIO', V33, V34} -> case V33 of {'Prelude.Interfaces.MkMonad', V35, V36, V37} -> V35 end end, V31, V32)) end end end end}, {'Prelude.Interfaces.MkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V49)) end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V53, V54, V55, V56)) end end end end end end end, fun (V57) -> fun (V58) -> V58 end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V61, V62, V63)) end end end end end}, fun (V64) -> ('nested--6094-9520--in--un--copyFile\x{27}'(V0, V1, V2, V3, V5, V64)) end, ((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V65) -> ('un--fileName'(V65)) end))(V6)))), fun (V73) -> ('Idris.Idris2.Prelude.Interfaces':'un--traverse_'({'Prelude.Interfaces.MkApplicative', fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--map_Functor_((EitherT $e) $m)'(case V0 of {'Prelude.IO.MkHasIO', V78, V79} -> case V78 of {'Prelude.Interfaces.MkMonad', V80, V81, V82} -> case V80 of {'Prelude.Interfaces.MkApplicative', V83, V84, V85} -> V83 end end end, V76, V77)) end end end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--pure_Applicative_((EitherT $e) $m)'(case V0 of {'Prelude.IO.MkHasIO', V88, V89} -> case V88 of {'Prelude.Interfaces.MkMonad', V90, V91, V92} -> V90 end end, V87)) end end, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--<*>_Applicative_((EitherT $e) $m)'(case V0 of {'Prelude.IO.MkHasIO', V97, V98} -> case V97 of {'Prelude.Interfaces.MkMonad', V99, V100, V101} -> V99 end end, V95, V96)) end end end end}, {'Prelude.Interfaces.MkFoldable', fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V109, V110, V111)) end end end end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V113)) end end, fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V117, V118, V119, V120)) end end end end end end end, fun (V121) -> fun (V122) -> V122 end end, fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V125, V126, V127)) end end end end end}, fun (V128) -> case V128 of {'Builtin.DPair.MkDPair', V129, V130} -> begin (V131 = ('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V5, ('un--fileName'(V129))))), ('Idris.Idris2.Control.Monad.Error.Either':'dn--un-->>=_Monad_((EitherT $e) $m)'(case V0 of {'Prelude.IO.MkHasIO', V132, V133} -> V132 end, ('Idris.Idris2.Erlang.System.Directory':'un--createDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'dn--un--show_Show_Path'(V131)))), fun (V134) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un-->>=_Monad_((EitherT $e) $m)'(case V0 of {'Prelude.IO.MkHasIO', V135, V136} -> V135 end, ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--liftIO_HasIO_((EitherT $e) $m)'(V0, V130)), fun (V137) -> ('nested--6094-9521--in--un--copyDirContents'(V0, V1, V2, ('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V3, ('un--fileName'(V129)))), V137, V131)) end)) end)) end end end, V7)) end)) end.
'nested--5153-8650--in--un--cmp'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(('un--fileName'(V2)), ('un--fileName'(V3)))).
'un--toFilePath'(V0, V1) -> ('Idris.Idris2.Libraries.Utils.Path':'dn--un--show_Show_Path'(('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V0, ('un--fileName'(V1)))))).
'un--sortBy'(V0, V1, V2, V3) -> case V3 of {'Libraries.System.Directory.Tree.MkTree', V4, V5} -> {'Libraries.System.Directory.Tree.MkTree', ('nested--5034-8557--in--un--files\x{27}'(V2, V5, V4, V1, V0)), ('nested--5034-8558--in--un--dirs\x{27}'(V2, V5, V4, V1, V0))} end.
'un--sort'(V0, V1) -> ('un--sortBy'(fun (V2) -> fun (V3) -> fun (V4) -> ('nested--5153-8650--in--un--cmp'(V0, V2, V3, V4)) end end end, fun (V5) -> fun (V6) -> fun (V7) -> ('nested--5153-8650--in--un--cmp'(V0, V5, V6, V7)) end end end, V0, V1)).
'un--print'(V0) -> ('nested--5615-9084--in--un--go'(V0, [{'Builtin.MkPair', [], {'Builtin.MkPair', <<"."/utf8>>, fun (V1) -> V0 end}} | []])).
'un--openDir'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> case V4 of {'Prelude.Interfaces.MkApplicative', V7, V8, V9} -> ((V8('erased'))({'Prelude.Types.Left', {'Erlang.System.File.GenericFileError', 42}})) end end end.
'un--nextDirEntry'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> case V4 of {'Prelude.Interfaces.MkApplicative', V7, V8, V9} -> ((V8('erased'))({'Prelude.Types.Left', {'Erlang.System.File.GenericFileError', 42}})) end end end.
'un--go'(V0, V1, V2, V3) -> begin (V31 = (('un--nextDirEntry'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V1))(V3))), case V31 of {'Prelude.Types.Left', V32} -> (((begin (V66 = fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V63, V64, V65)) end end end end end), fun (V67) -> fun (V68) -> ((((V66('erased'))('erased'))(V67))(V68)) end end end(fun (V60) -> V2 end))(('un--closeDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), ((V51(V53))(V52)) end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V55(V56))), (V57(V56)) end end end end}, fun (V58) -> fun (V59) -> V59 end end}, V1))))(V3)); {'Prelude.Types.Right', V69} -> case V69 of {'Prelude.Types.Nothing'} -> (((begin (V103 = fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V100, V101, V102)) end end end end end), fun (V104) -> fun (V105) -> ((((V103('erased'))('erased'))(V104))(V105)) end end end(fun (V97) -> V2 end))(('un--closeDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V72, V73, V74)) end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> V76 end end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), begin (V84 = (V81(V82))), (V83(V84)) end end end end end end end}, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> begin (V90 = (V87(V89))), ((V88(V90))(V89)) end end end end end end, fun (V91) -> fun (V92) -> fun (V93) -> begin (V94 = (V92(V93))), (V94(V93)) end end end end}, fun (V95) -> fun (V96) -> V96 end end}, V1))))(V3)); {'Prelude.Types.Just', V106} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V109, V110, V111)) end end end end end, fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V114, V115, V116)) end end end end end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V118)) end end, fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V122, V123, V124, V125)) end end end end end end end, fun (V126) -> fun (V127) -> V127 end end, fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V130, V131, V132)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V133, V134)) end end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V135, V136)) end end}, V106, [(begin (V138 = fun (V137) -> V137 end), fun (V139) -> (V138(V139)) end end(<<"."/utf8>>)) | [(begin (V141 = fun (V140) -> V140 end), fun (V142) -> (V141(V142)) end end(<<".."/utf8>>)) | []]])) of 0 -> begin (V143 = V106), begin (V144 = ('un--directoryExists'(V0, V143, V3))), begin (V150 = case V144 of 1 -> case V2 of {'Libraries.System.Directory.Tree.MkTree', V145, V146} -> {'Libraries.System.Directory.Tree.MkTree', V145, [{'Builtin.DPair.MkDPair', V143, fun (V147) -> ('un--explore'(('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V0, ('un--fileName'(V143)))), V147)) end} | V146]} end; 0 -> case V2 of {'Libraries.System.Directory.Tree.MkTree', V148, V149} -> {'Libraries.System.Directory.Tree.MkTree', [V143 | V148], V149} end end), ('un--go'(V0, V1, V150, V3)) end end end; _ -> ('un--go'(V0, V1, V2, V3)) end end end end.
'un--filter'(V0, V1, V2, V3) -> case V3 of {'Libraries.System.Directory.Tree.MkTree', V4, V5} -> {'Libraries.System.Directory.Tree.MkTree', ('nested--4927-8439--in--un--files\x{27}'(V2, V5, V4, V1, V0)), ('nested--4927-8440--in--un--dirs\x{27}'(V2, V5, V4, V1, V0))} end.
'un--fileName'(V0) -> begin (V1 = V0), V1 end.
'un--explore'(V0, V1) -> begin (V29 = (('un--openDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, ('Idris.Idris2.Libraries.Utils.Path':'dn--un--show_Show_Path'(V0))))(V1))), case V29 of {'Prelude.Types.Right', V30} -> ('un--go'(V0, V30, ('un--emptyTree'()), V1)); {'Prelude.Types.Left', V31} -> ('un--emptyTree'()) end end.
'un--emptyTree'() -> {'Libraries.System.Directory.Tree.MkTree', [], []}.
'un--directoryExists'(V0, V1, V2) -> begin (V30 = (('un--openDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, ('un--toFilePath'(V0, V1))))(V2))), case V30 of {'Prelude.Types.Right', V31} -> begin (V59 = (('un--closeDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, fun (V57) -> fun (V58) -> V58 end end}, V31))(V2))), 1 end; {'Prelude.Types.Left', V60} -> 0 end end.
'un--depthFirst'(V0, V1, V2, V3) -> begin (V13 = ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V4) -> fun (V5) -> fun (V6) -> case V4 of {'Builtin.DPair.MkDPair', V7, V8} -> begin (V9 = (V8(V6))), (('un--depthFirst'(fun (V10) -> (V0(V10)) end, ('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V1, ('un--fileName'(V7)))), V9, V5))(V6)) end end end end end, V3, case V2 of {'Libraries.System.Directory.Tree.MkTree', V11, V12} -> V12 end))), ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V14) -> fun (V15) -> (((V0(V1))(V14))(fun () -> V15 end)) end end, V13, case V2 of {'Libraries.System.Directory.Tree.MkTree', V16, V17} -> V16 end)) end.
'un--copyDir'(V0, V1, V2) -> begin (V10 = ('Idris.Idris2.Control.Monad.Error.Either':'dn--un-->>=_Monad_((EitherT $e) $m)'(case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> V3 end, ('Idris.Idris2.Erlang.System.Directory':'un--createDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'dn--un--show_Show_Path'(V2)))), fun (V5) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un-->>=_Monad_((EitherT $e) $m)'(case V0 of {'Prelude.IO.MkHasIO', V6, V7} -> V6 end, ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--liftIO_HasIO_((EitherT $e) $m)'(V0, fun (V8) -> ('un--explore'(V1, V8)) end)), fun (V9) -> ('nested--6094-9521--in--un--copyDirContents'(V0, V2, V1, V1, V9, V2)) end)) end))), V10 end.
'un--closeDir'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> case V4 of {'Prelude.Interfaces.MkApplicative', V7, V8, V9} -> ((V8('erased'))({'Builtin.MkUnit'})) end end end.
'un--SubTree'(V0) -> {'Builtin.DPair.DPair', {'Libraries.System.Directory.Tree.FileName', V0}, fun (V1) -> {'PrimIO.IO', {'Libraries.System.Directory.Tree.Tree', ('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V0, ('un--fileName'(V1))))}} end}.
