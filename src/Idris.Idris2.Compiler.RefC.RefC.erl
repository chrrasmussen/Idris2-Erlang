-module('Idris.Idris2.Compiler.RefC.RefC').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--createCFunctions-13861'/13,
  'nested--13416-11434--in--un--varBindLines'/17,
  'nested--10775-8551--in--un--showCString'/3,
  'nested--10775-8550--in--un--showCChar'/2,
  'nested--12915-10639--in--un--pushArgToArglist'/9,
  'nested--13378-11281--in--un--getNameTag'/18,
  'dn--un--show_Show_ExtPrim'/1,
  'dn--un--showPrec_Show_ExtPrim'/2,
  'dn--un--__Impl_Show_ExtPrim'/0,
  'un--varNamesFromList'/2,
  'un--varName'/1,
  'un--toPrim'/1,
  'un--showcCleanStringChar'/2,
  'un--showcCleanString'/2,
  'un--showTag'/1,
  'un--showIntMin'/1,
  'un--showInt64Min'/1,
  'un--registerVariableForAutomaticFreeing'/2,
  'un--plainOp'/2,
  'un--packCFType'/2,
  'un--newTemporaryVariableLevel'/1,
  'un--maxLineLengthForComment'/0,
  'un--makeNonIntSwitchStatementConst'/8,
  'un--makeArglist'/6,
  'un--lJust'/3,
  'un--integer_switch'/1,
  'un--indentation'/1,
  'un--increaseIndentation'/1,
  'un--header'/5,
  'un--getNextCounter'/1,
  'un--getNewVarThatWillNotBeFreedAtEndOfBlock'/1,
  'un--getArgsNrList'/2,
  'un--generateCSourceFile'/4,
  'un--functionDefSignatureArglist'/2,
  'un--functionDefSignature'/3,
  'un--freeTmpVars'/3,
  'un--footer'/3,
  'un--fillConstructorArgs'/5,
  'un--extractValue'/3,
  'un--extractConstant'/1,
  'un--executeExpr'/4,
  'un--escapeChar'/1,
  'un--emitFDef'/4,
  'un--emit'/4,
  'un--discardLastArgument'/1,
  'un--decreaseIndentation'/1,
  'un--createFFIArgList'/1,
  'un--createCFunctions'/10,
  'un--copyConstructors'/9,
  'un--constDefaultBlock'/7,
  'un--constBlockSwitch'/8,
  'un--const2Integer'/2,
  'un--conBlocks'/9,
  'un--compileLibrary'/5,
  'un--compileExpr'/7,
  'un--codegenRefC'/0,
  'un--callByPosition'/2,
  'un--cUserName'/1,
  'un--cTypeOfCFType'/1,
  'un--cStringQuoted'/1,
  'un--cStatementsFromANF'/6,
  'un--cPrimType'/1,
  'un--cOp'/2,
  'un--cName'/1,
  'un--cConstant'/1,
  'un--cCleanString'/1,
  'un--cArgsVectANF'/1,
  'un--additionalFFIStub'/3,
  'un--addHeader'/2,
  'un--addCommaToList'/1
]).
'case--createCFunctions-13861'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Prelude.Types.Just', V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> case V15 of [E0 | E1] -> (fun (V16, V17) -> begin (V18 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V14, <<"RefC"/utf8>>)) of 1 -> 1; 0 -> 0 end), begin (V49 = ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V30)) end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V34, V35, V36, V37)) end end end end end end end, fun (V38) -> fun (V39) -> V39 end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V42, V43, V44)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V47, V48)) end end}, V14, [<<"RefC"/utf8>> | [<<"C"/utf8>> | []]]))), begin (V50 = case V49 of 1 -> {'Core.Name.UN', {'Core.Name.Basic', V16}}; 0 -> {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V14)), V4} end), begin (V58 = case V49 of 1 -> case V17 of [E2 | E3] -> (fun (V51, V52) -> case V52 of [E4 | E5] -> (fun (V53, V54) -> case V54 of [] -> ('un--addHeader'(V5, V53)); _ -> fun (V55) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end(E4, E5)); _ -> fun (V56) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end(E2, E3)); _ -> fun (V57) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; 0 -> ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, ('un--additionalFFIStub'(V50, V2, V1)))) end), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V292 = begin (V63 = <<<<"Value *"/utf8>>/binary, <<('un--cName'(V4))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Data.List':'un--replicateTR'([], ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V2)), <<"Value *"/utf8>>))))/binary, <<");"/utf8>>/binary>>/binary>>/binary>>/binary>>), begin (V64 = ('un--functionDefSignatureArglist'(V11, V4))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V291 = begin (V85 = begin (V74 = begin (V69 = V9), fun (V70) -> begin (V73 = (begin (V71 = V69), fun (V72) -> ('erlang':'get'(V71)) end end(V70))), {'Prelude.Types.Right', V73} end end end), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V84 = begin (V79 = V9), fun (V80) -> begin (V83 = (begin (V81 = V79), fun (V82) -> ('erlang':'put'(V81, [<<V63/binary, <<"\x{a}"/utf8>>/binary>> | [<<V68/binary, <<";\x{a}"/utf8>>/binary>> | V78]])) end end(V80))), {'Prelude.Types.Right', V83} end end end), V84 end(V75)) end end end end), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V290 = begin (V90 = ('un--createFFIArgList'(V2))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V289 = begin (V95 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, V68))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V288 = begin (V100 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<"{"/utf8>>))), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V287 = begin (V105 = ('un--increaseIndentation'(V6))), fun (V106) -> begin (V107 = (V105(V106))), case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> (begin (V286 = begin (V110 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<<<"return "/utf8>>/binary, ('un--cName'(V4))/binary>>))), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V285 = begin (V115 = ('un--increaseIndentation'(V6))), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V284 = begin (V120 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<"("/utf8>>))), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V283 = begin (V125 = ('un--increaseIndentation'(V6))), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V282 = begin (V138 = ('un--addCommaToList'(((begin (V135 = fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V133, V134)) end end end end), fun (V136) -> fun (V137) -> ((((V135('erased'))('erased'))(V136))(V137)) end end end(fun (V130) -> <<<<"arglist->args["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V130))/binary, <<"]"/utf8>>/binary>>/binary>> end))(('un--getArgsNrList'(V2, 0))))))), begin (V140 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V139) -> ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, V139)) end, V138))), fun (V141) -> begin (V142 = (V140(V141))), case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> (begin (V281 = begin (V145 = ('un--decreaseIndentation'(V6))), fun (V146) -> begin (V147 = (V145(V146))), case V147 of {'Prelude.Types.Left', V148} -> {'Prelude.Types.Left', V148}; {'Prelude.Types.Right', V149} -> (begin (V280 = begin (V150 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<");"/utf8>>))), fun (V151) -> begin (V152 = (V150(V151))), case V152 of {'Prelude.Types.Left', V153} -> {'Prelude.Types.Left', V153}; {'Prelude.Types.Right', V154} -> (begin (V279 = begin (V155 = ('un--decreaseIndentation'(V6))), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V278 = begin (V160 = ('un--decreaseIndentation'(V6))), fun (V161) -> begin (V162 = (V160(V161))), case V162 of {'Prelude.Types.Left', V163} -> {'Prelude.Types.Left', V163}; {'Prelude.Types.Right', V164} -> (begin (V277 = begin (V165 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))), fun (V166) -> begin (V167 = (V165(V166))), case V167 of {'Prelude.Types.Left', V168} -> {'Prelude.Types.Left', V168}; {'Prelude.Types.Right', V169} -> (begin (V276 = begin (V170 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<""/utf8>>))), fun (V171) -> begin (V172 = (V170(V171))), case V172 of {'Prelude.Types.Left', V173} -> {'Prelude.Types.Left', V173}; {'Prelude.Types.Right', V174} -> (begin (V275 = begin (V175 = ('un--emitFDef'(V7, V6, V4, V94))), fun (V176) -> begin (V177 = (V175(V176))), case V177 of {'Prelude.Types.Left', V178} -> {'Prelude.Types.Left', V178}; {'Prelude.Types.Right', V179} -> (begin (V274 = begin (V180 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<"{"/utf8>>))), fun (V181) -> begin (V182 = (V180(V181))), case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> (begin (V273 = begin (V185 = ('un--increaseIndentation'(V6))), fun (V186) -> begin (V187 = (V185(V186))), case V187 of {'Prelude.Types.Left', V188} -> {'Prelude.Types.Left', V188}; {'Prelude.Types.Right', V189} -> (begin (V272 = begin (V190 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<<<" // ffi call to "/utf8>>/binary, ('un--cName'(V50))/binary>>))), fun (V191) -> begin (V192 = (V190(V191))), case V192 of {'Prelude.Types.Left', V193} -> {'Prelude.Types.Left', V193}; {'Prelude.Types.Right', V194} -> (begin (V271 = begin (V259 = case V1 of {'Core.CompileExpr.CFIORes', V195} -> case V195 of {'Core.CompileExpr.CFUnit'} -> begin (V208 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<('un--cName'(V50))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V205 = fun (V201) -> fun (V202) -> fun (V203) -> fun (V204) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V203, V204)) end end end end), fun (V206) -> fun (V207) -> ((((V205('erased'))('erased'))(V206))(V207)) end end end(fun (V196) -> case V196 of {'Builtin.MkPair', V197, V198} -> case V198 of {'Builtin.MkPair', V199, V200} -> ('un--extractValue'(V18, V200, V199)) end end end))(('un--discardLastArgument'(V94))))))/binary, <<");"/utf8>>/binary>>/binary>>/binary>>))), fun (V209) -> begin (V210 = (V208(V209))), case V210 of {'Prelude.Types.Left', V211} -> {'Prelude.Types.Left', V211}; {'Prelude.Types.Right', V212} -> (begin (V216 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, (begin (V214 = fun (V213) -> V213 end), fun (V215) -> (V214(V215)) end end(<<"return NULL;"/utf8>>))))), V216 end(V209)) end end end end; _ -> begin (V232 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<('un--cTypeOfCFType'(V195))/binary, <<(begin (V218 = fun (V217) -> V217 end), fun (V219) -> (V218(V219)) end end(<<" retVal = "/utf8>>))/binary, <<('un--cName'(V50))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V229 = fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V227, V228)) end end end end), fun (V230) -> fun (V231) -> ((((V229('erased'))('erased'))(V230))(V231)) end end end(fun (V220) -> case V220 of {'Builtin.MkPair', V221, V222} -> case V222 of {'Builtin.MkPair', V223, V224} -> ('un--extractValue'(V18, V224, V223)) end end end))(('un--discardLastArgument'(V94))))))/binary, <<");"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V233) -> begin (V234 = (V232(V233))), case V234 of {'Prelude.Types.Left', V235} -> {'Prelude.Types.Left', V235}; {'Prelude.Types.Right', V236} -> (begin (V240 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<(begin (V238 = fun (V237) -> V237 end), fun (V239) -> (V238(V239)) end end(<<"return (Value*)"/utf8>>))/binary, <<('un--packCFType'(V195, <<"retVal"/utf8>>))/binary, <<";"/utf8>>/binary>>/binary>>))), V240 end(V233)) end end end end end; _ -> begin (V253 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<('un--cTypeOfCFType'(V1))/binary, <<<<" retVal = "/utf8>>/binary, <<('un--cName'(V50))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V250 = fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V248, V249)) end end end end), fun (V251) -> fun (V252) -> ((((V250('erased'))('erased'))(V251))(V252)) end end end(fun (V241) -> case V241 of {'Builtin.MkPair', V242, V243} -> case V243 of {'Builtin.MkPair', V244, V245} -> ('un--extractValue'(V18, V245, V244)) end end end))(V94))))/binary, <<");"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V254) -> begin (V255 = (V253(V254))), case V255 of {'Prelude.Types.Left', V256} -> {'Prelude.Types.Left', V256}; {'Prelude.Types.Right', V257} -> (begin (V258 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<<<"return (Value*)"/utf8>>/binary, <<('un--packCFType'(V1, <<"retVal"/utf8>>))/binary, <<";"/utf8>>/binary>>/binary>>))), V258 end(V254)) end end end end end), fun (V260) -> begin (V261 = (V259(V260))), case V261 of {'Prelude.Types.Left', V262} -> {'Prelude.Types.Left', V262}; {'Prelude.Types.Right', V263} -> (begin (V270 = begin (V264 = ('un--decreaseIndentation'(V6))), fun (V265) -> begin (V266 = (V264(V265))), case V266 of {'Prelude.Types.Left', V267} -> {'Prelude.Types.Left', V267}; {'Prelude.Types.Right', V268} -> (begin (V269 = ('un--emit'(V7, V6, {'Core.FC.EmptyFC'}, <<"}"/utf8>>))), V269 end(V265)) end end end end), V270 end(V260)) end end end end), V271 end(V191)) end end end end), V272 end(V186)) end end end end), V273 end(V181)) end end end end), V274 end(V176)) end end end end), V275 end(V171)) end end end end), V276 end(V166)) end end end end), V277 end(V161)) end end end end), V278 end(V156)) end end end end), V279 end(V151)) end end end end), V280 end(V146)) end end end end), V281 end(V141)) end end end end end), V282 end(V126)) end end end end), V283 end(V121)) end end end end), V284 end(V116)) end end end end), V285 end(V111)) end end end end), V286 end(V106)) end end end end), V287 end(V101)) end end end end), V288 end(V96)) end end end end), V289 end(V91)) end end end end), V290 end(V86)) end end end end), V291 end(V65)) end end end end end), V292 end(V59)) end end end end end end end end(E0, E1)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: FFI not found for "/utf8>>/binary, ('un--cName'(V4))/binary>>)) end; _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: FFI not found for "/utf8>>/binary, ('un--cName'(V4))/binary>>)) end; _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: FFI not found for "/utf8>>/binary, ('un--cName'(V4))/binary>>)) end.
'nested--13416-11434--in--un--varBindLines'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V15 of [] -> fun (V17) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V18, V19) -> begin (V20 = ('un--emit'(V11, V10, {'Core.FC.EmptyFC'}, <<<<"Value * var_"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18))/binary, <<<<" = ((Value_Constructor*)"/utf8>>/binary, <<V14/binary, <<<<")->args["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V16))/binary, <<"];"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V32 = begin (V25 = ('nested--13416-11434--in--un--varBindLines'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V19, (V16 + 1)))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end), V31 end(V26)) end end end end), V32 end(V21)) end end end end end(E0, E1)) end.
'nested--10775-8551--in--un--showCString'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> case V3 of $\x{22} -> <<<<"\x{5c}\x{22}"/utf8>>/binary, ('nested--10775-8551--in--un--showCString'(V0, V4, V2))/binary>>; _ -> (('nested--10775-8550--in--un--showCChar'(V0, V3))(('nested--10775-8551--in--un--showCString'(V0, V4, V2)))) end end(E0, E1)) end.
'nested--10775-8550--in--un--showCChar'(V0, V1) -> case V1 of $\x{5c} -> fun (V2) -> <<<<"\x{5c}\x{5c}"/utf8>>/binary, V2/binary>> end; _ -> fun (V3) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V1, case 32 of E5 when ((erlang:'is_integer'(E5)) andalso (((E5 >= 0) andalso (E5 =< 55295)) orelse ((E5 >= 57344) andalso (E5 =< 1114111)))) -> E5; _ -> 65533 end)) of 1 -> <<<<<<<<"\x{5c}x"/utf8>>/binary, ('Idris.Idris2.Protocol.Hex':'un--leftPad'($0, 2, ('Idris.Idris2.Protocol.Hex':'un--asHex'(case V1 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end))))/binary>>/binary, <<"\x{22}\x{22}"/utf8>>/binary>>/binary, V3/binary>>; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V1, case begin (V4 = 127), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end of E4 when ((erlang:'is_integer'(E4)) andalso (((E4 >= 0) andalso (E4 =< 55295)) orelse ((E4 >= 57344) andalso (E4 =< 1114111)))) -> E4; _ -> 65533 end)) of 1 -> <<('unicode':'characters_to_binary'([V1 | []]))/binary, V3/binary>>; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V1, case begin (V5 = 65536), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end of E3 when ((erlang:'is_integer'(E3)) andalso (((E3 >= 0) andalso (E3 =< 55295)) orelse ((E3 >= 57344) andalso (E3 =< 1114111)))) -> E3; _ -> 65533 end)) of 1 -> <<<<<<<<"\x{5c}u"/utf8>>/binary, ('Idris.Idris2.Protocol.Hex':'un--leftPad'($0, 4, ('Idris.Idris2.Protocol.Hex':'un--asHex'(case V1 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end))))/binary>>/binary, <<"\x{22}\x{22}"/utf8>>/binary>>/binary, V3/binary>>; 0 -> <<<<<<<<"\x{5c}U"/utf8>>/binary, ('Idris.Idris2.Protocol.Hex':'un--leftPad'($0, 8, ('Idris.Idris2.Protocol.Hex':'un--asHex'(case V1 of E2 when ((erlang:'is_integer'(E2)) andalso (((E2 >= 0) andalso (E2 =< 55295)) orelse ((E2 >= 57344) andalso (E2 =< 1114111)))) -> E2; _ -> 65533 end))))/binary>>/binary, <<"\x{22}\x{22}"/utf8>>/binary>>/binary, V3/binary>> end end end end end.
'nested--12915-10639--in--un--pushArgToArglist'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> fun (V9) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V10, V11) -> begin (V12 = ('un--emit'(V3, V2, {'Core.FC.EmptyFC'}, <<V6/binary, <<<<"->args["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8))/binary, <<<<"] = "/utf8>>/binary, <<<<" newReference("/utf8>>/binary, <<('un--varName'(V10))/binary, <<");"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V17 = ('nested--12915-10639--in--un--pushArgToArglist'(V0, V1, V2, V3, V4, V5, V6, V11, (V8 + 1)))), V17 end(V13)) end end end end end(E0, E1)) end.
'nested--13378-11281--in--un--getNameTag'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V15 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Builtin.MkPair', <<"-1"/utf8>>, <<<<"\x{22}"/utf8>>/binary, <<('un--cName'(V16))/binary, <<"\x{22}"/utf8>>/binary>>/binary>>}}; {'Prelude.Types.Just', V18} -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18)), <<"NULL"/utf8>>}} end.
'dn--un--show_Show_ExtPrim'(V0) -> case V0 of {'Compiler.RefC.RefC.NewIORef'} -> <<"newIORef"/utf8>>; {'Compiler.RefC.RefC.ReadIORef'} -> <<"readIORef"/utf8>>; {'Compiler.RefC.RefC.WriteIORef'} -> <<"writeIORef"/utf8>>; {'Compiler.RefC.RefC.NewArray'} -> <<"newArray"/utf8>>; {'Compiler.RefC.RefC.ArrayGet'} -> <<"arrayGet"/utf8>>; {'Compiler.RefC.RefC.ArraySet'} -> <<"arraySet"/utf8>>; {'Compiler.RefC.RefC.GetField'} -> <<"getField"/utf8>>; {'Compiler.RefC.RefC.SetField'} -> <<"setField"/utf8>>; {'Compiler.RefC.RefC.VoidElim'} -> <<"voidElim"/utf8>>; {'Compiler.RefC.RefC.SysOS'} -> <<"sysOS"/utf8>>; {'Compiler.RefC.RefC.SysCodegen'} -> <<"sysCodegen"/utf8>>; {'Compiler.RefC.RefC.OnCollect'} -> <<"onCollect"/utf8>>; {'Compiler.RefC.RefC.OnCollectAny'} -> <<"onCollectAny"/utf8>>; {'Compiler.RefC.RefC.Unknown', V1} -> <<<<"Unknown "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>> end.
'dn--un--showPrec_Show_ExtPrim'(V0, V1) -> ('dn--un--show_Show_ExtPrim'(V1)).
'dn--un--__Impl_Show_ExtPrim'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ExtPrim'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ExtPrim'(V1, V2)) end end}.
'un--varNamesFromList'(V0, V1) -> ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> <<<<"var_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))/binary>> end))(('un--getArgsNrList'(V0, V1)))).
'un--varName'(V0) -> case V0 of {'Compiler.ANF.ALocal', V1} -> <<<<"var_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1))/binary>>; {'Compiler.ANF.ANull'} -> <<"NULL"/utf8>> end.
'un--toPrim'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> ('Idris.Idris2.Core.Core':'un--cond'([{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V4 = fun (V3) -> V3 end), fun (V5) -> (V4(V5)) end end(<<"prim__newIORef"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.NewIORef'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V7 = fun (V6) -> V6 end), fun (V8) -> (V7(V8)) end end(<<"prim__readIORef"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.ReadIORef'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V10 = fun (V9) -> V9 end), fun (V11) -> (V10(V11)) end end(<<"prim__writeIORef"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.WriteIORef'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V13 = fun (V12) -> V12 end), fun (V14) -> (V13(V14)) end end(<<"prim__newArray"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.NewArray'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V16 = fun (V15) -> V15 end), fun (V17) -> (V16(V17)) end end(<<"prim__arrayGet"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.ArrayGet'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V19 = fun (V18) -> V18 end), fun (V20) -> (V19(V20)) end end(<<"prim__arraySet"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.ArraySet'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V22 = fun (V21) -> V21 end), fun (V23) -> (V22(V23)) end end(<<"prim__getField"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.GetField'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V25 = fun (V24) -> V24 end), fun (V26) -> (V25(V26)) end end(<<"prim__setField"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.SetField'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V28 = fun (V27) -> V27 end), fun (V29) -> (V28(V29)) end end(<<"prim__void"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.VoidElim'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', <<"prim__os"/utf8>>}})) end, fun () -> {'Compiler.RefC.RefC.SysOS'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V31 = fun (V30) -> V30 end), fun (V32) -> (V31(V32)) end end(<<"prim__codegen"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.SysCodegen'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V34 = fun (V33) -> V33 end), fun (V35) -> (V34(V35)) end end(<<"prim__onCollect"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.OnCollect'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V37 = fun (V36) -> V36 end), fun (V38) -> (V37(V38)) end end(<<"prim__onCollectAny"/utf8>>))}})) end, fun () -> {'Compiler.RefC.RefC.OnCollectAny'} end} | []]]]]]]]]]]]]], {'Compiler.RefC.RefC.Unknown', V0})); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: Unknown primitive: "/utf8>>/binary, ('un--cName'(V0))/binary>>)) end.
'un--showcCleanStringChar'(V0, V1) -> case V0 of $  -> <<<<"_"/utf8>>/binary, V1/binary>>; $! -> <<<<"_bang"/utf8>>/binary, V1/binary>>; $\x{22} -> <<<<"_quotation"/utf8>>/binary, V1/binary>>; $# -> <<<<"_number"/utf8>>/binary, V1/binary>>; $$ -> <<<<"_dollar"/utf8>>/binary, V1/binary>>; $% -> <<<<"_percent"/utf8>>/binary, V1/binary>>; $& -> <<<<"_and"/utf8>>/binary, V1/binary>>; $\x{27} -> <<<<"_tick"/utf8>>/binary, V1/binary>>; $( -> <<<<"_parenOpen"/utf8>>/binary, V1/binary>>; $) -> <<<<"_parenClose"/utf8>>/binary, V1/binary>>; $* -> <<<<"_star"/utf8>>/binary, V1/binary>>; $+ -> <<<<"_plus"/utf8>>/binary, V1/binary>>; $, -> <<<<"_comma"/utf8>>/binary, V1/binary>>; $- -> <<<<"__"/utf8>>/binary, V1/binary>>; $. -> <<<<"_dot"/utf8>>/binary, V1/binary>>; $/ -> <<<<"_slash"/utf8>>/binary, V1/binary>>; $: -> <<<<"_colon"/utf8>>/binary, V1/binary>>; $; -> <<<<"_semicolon"/utf8>>/binary, V1/binary>>; $< -> <<<<"_lt"/utf8>>/binary, V1/binary>>; $= -> <<<<"_eq"/utf8>>/binary, V1/binary>>; $> -> <<<<"_gt"/utf8>>/binary, V1/binary>>; $? -> <<<<"_question"/utf8>>/binary, V1/binary>>; $@ -> <<<<"_at"/utf8>>/binary, V1/binary>>; $[ -> <<<<"_bracketOpen"/utf8>>/binary, V1/binary>>; $\x{5c} -> <<<<"_backslash"/utf8>>/binary, V1/binary>>; $] -> <<<<"_bracketClose"/utf8>>/binary, V1/binary>>; $^ -> <<<<"_hat"/utf8>>/binary, V1/binary>>; $_ -> <<<<"_"/utf8>>/binary, V1/binary>>; $` -> <<<<"_backquote"/utf8>>/binary, V1/binary>>; ${ -> <<<<"_braceOpen"/utf8>>/binary, V1/binary>>; $| -> <<<<"_or"/utf8>>/binary, V1/binary>>; $} -> <<<<"_braceClose"/utf8>>/binary, V1/binary>>; $~ -> <<<<"_tilde"/utf8>>/binary, V1/binary>>; _ -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V0, case 32 of E2 when ((erlang:'is_integer'(E2)) andalso (((E2 >= 0) andalso (E2 =< 55295)) orelse ((E2 >= 57344) andalso (E2 =< 1114111)))) -> E2; _ -> 65533 end)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V0, case begin (V2 = 126), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end)) end of 1 -> <<<<<<"u"/utf8>>/binary, ('Idris.Idris2.Protocol.Hex':'un--leftPad'($0, 4, ('Idris.Idris2.Protocol.Hex':'un--asHex'(case V0 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end))))/binary>>/binary, V1/binary>>; 0 -> <<('unicode':'characters_to_binary'([V0 | []]))/binary, V1/binary>> end end.
'un--showcCleanString'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> ('un--showcCleanStringChar'(V2, ('un--showcCleanString'(V3, V1)))) end(E0, E1)) end.
'un--showTag'(V0) -> case V0 of {'Prelude.Types.Nothing'} -> <<"-1"/utf8>>; {'Prelude.Types.Just', V1} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)) end.
'un--showIntMin'(V0) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V0, begin (V1 = -9223372036854775808), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end)) of 1 -> <<"INT64_MIN"/utf8>>; 0 -> <<<<"INT64_C("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V0))/binary, <<")"/utf8>>/binary>>/binary>> end.
'un--showInt64Min'(V0) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int64'(V0, -9223372036854775808)) of 1 -> <<"INT64_MIN"/utf8>>; 0 -> <<<<"INT64_C("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int64'(V0))/binary, <<")"/utf8>>/binary>>/binary>> end.
'un--registerVariableForAutomaticFreeing'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V19 = begin (V12 = V0), fun (V13) -> begin (V18 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of [] -> [[V1 | []] | []]; [E0 | E1] -> (fun (V16, V17) -> [[V1 | V16] | V17] end(E0, E1)) end)) end end(V13))), {'Prelude.Types.Right', V18} end end end), V19 end(V8)) end end end end.
'un--plainOp'(V0, V1) -> <<V0/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, V1))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>.
'un--packCFType'(V0, V1) -> case V0 of {'Core.CompileExpr.CFUnit'} -> <<"NULL"/utf8>>; {'Core.CompileExpr.CFInt'} -> <<<<"makeInt64("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFInt8'} -> <<<<"makeInt8("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFInt16'} -> <<<<"makeInt16("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFInt32'} -> <<<<"makeInt32("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFInt64'} -> <<<<"makeInt64("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFUnsigned64'} -> <<<<"makeBits64("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFUnsigned32'} -> <<<<"makeBits32("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFUnsigned16'} -> <<<<"makeBits16("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFUnsigned8'} -> <<<<"makeBits8("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFString'} -> <<<<"makeString("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFDouble'} -> <<<<"makeDouble("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFChar'} -> <<<<"makeChar("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFPtr'} -> <<<<"makePointer("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFGCPtr'} -> <<<<"makePointer("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFBuffer'} -> <<<<"makeBuffer("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFWorld'} -> <<<<"makeWorld("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFFun', V2, V3} -> <<<<"makeFunction("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFIORes', V4} -> ('un--packCFType'(V4, V1)); {'Core.CompileExpr.CFStruct', V5, V6} -> <<<<"makeStruct("/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFUser', V7, V8} -> V1; _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: Unknonw FFI type in C backend: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V0))/binary>>)) end.
'un--newTemporaryVariableLevel'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V16 = begin (V11 = V0), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, [[] | V10])) end end(V12))), {'Prelude.Types.Right', V15} end end end), V16 end(V7)) end end end end.
'un--maxLineLengthForComment'() -> 60.
'un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of [] -> fun (V8) -> {'Prelude.Types.Right', {'Builtin.MkPair', V6, V7}} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Compiler.ANF.MkAConstAlt', V11, V12} -> case V5 of 0 -> case V11 of {'Core.TT.Str', V13} -> begin (V14 = ('un--getNextCounter'(V0))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V35 = begin (V22 = <<(begin (V20 = fun (V19) -> V19 end), fun (V21) -> (V20(V21)) end end(<<"constantArray_"/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V18))/binary>>), begin (V26 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<<<"char **"/utf8>>/binary, <<V22/binary, <<(begin (V24 = fun (V23) -> V23 end), fun (V25) -> (V24(V25)) end end(<<" = (char**)malloc(sizeof(char*) * "/utf8>>))/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'((('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V10)) + 1)))/binary, <<");"/utf8>>/binary>>/binary>>/binary>>/binary>>))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V34 = ('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, [{'Compiler.ANF.MkAConstAlt', V11, V12} | V10], 1, V22, (begin (V32 = fun (V31) -> V31 end), fun (V33) -> (V32(V33)) end end(<<"multiStringCompare"/utf8>>))))), V34 end(V27)) end end end end end), V35 end(V15)) end end end end; {'Core.TT.Db', V36} -> begin (V37 = ('un--getNextCounter'(V0))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V58 = begin (V45 = <<(begin (V43 = fun (V42) -> V42 end), fun (V44) -> (V43(V44)) end end(<<"constantArray_"/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V41))/binary>>), begin (V49 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<<<"double *"/utf8>>/binary, <<V45/binary, <<(begin (V47 = fun (V46) -> V46 end), fun (V48) -> (V47(V48)) end end(<<" = (double*)malloc(sizeof(double) * "/utf8>>))/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'((('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V10)) + 1)))/binary, <<");"/utf8>>/binary>>/binary>>/binary>>/binary>>))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V57 = ('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, [{'Compiler.ANF.MkAConstAlt', V11, V12} | V10], 1, V45, (begin (V55 = fun (V54) -> V54 end), fun (V56) -> (V55(V56)) end end(<<"multiDoubleCompare"/utf8>>))))), V57 end(V50)) end end end end end), V58 end(V38)) end end end end; _ -> fun (V59) -> {'Prelude.Types.Right', {'Builtin.MkPair', <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>, <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>}} end end; _ -> begin (V61 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<V6/binary, <<<<"["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V60 = (V5 - 1)), case ((V60 band 9223372036854775808) =/= 0) of 'true' -> (V60 bor -9223372036854775808); _ -> (V60 band 9223372036854775807) end end))/binary, <<<<"] = "/utf8>>/binary, <<('un--extractConstant'(V11))/binary, <<";"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V67 = ('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, V10, begin (V66 = (V5 + 1)), case ((V66 band 9223372036854775808) =/= 0) of 'true' -> (V66 bor -9223372036854775808); _ -> (V66 band 9223372036854775807) end end, V6, V7))), V67 end(V62)) end end end end end end end(E0, E1)) end.
'un--makeArglist'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--getNextCounter'(V0))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V25 = begin (V11 = <<<<"arglist_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V10))/binary>>), begin (V12 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<<<"Value_Arglist *"/utf8>>/binary, <<V11/binary, <<<<" = newArglist("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4))/binary, <<<<","/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'((('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V5)) + V4)))/binary, <<");"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V24 = begin (V17 = ('nested--12915-10639--in--un--pushArgToArglist'(V5, V4, V3, V2, V1, V0, V11, V5, 0))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V23 = fun (V22) -> {'Prelude.Types.Right', V11} end), V23 end(V18)) end end end end), V24 end(V13)) end end end end end), V25 end(V7)) end end end end.
'un--lJust'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Prelude.Types.String':'un--length'(V0))), case ('Idris.Idris2.Data.Nat':'un--isLTE'(V3, V1)) of {'Prelude.Types.Yes', V4} -> begin (V5 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V1 - V3)))), begin (V6 = ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicateTR'([], V5, V2))))), <<V0/binary, V6/binary>> end end; {'Prelude.Types.No', V7} -> V0 end end.
'un--integer_switch'(V0) -> case V0 of [] -> 1; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Compiler.ANF.MkAConstAlt', V3, V4} -> case V3 of {'Core.TT.I', V5} -> 1; {'Core.TT.I8', V6} -> 1; {'Core.TT.I16', V7} -> 1; {'Core.TT.I32', V8} -> 1; {'Core.TT.I64', V9} -> 1; {'Core.TT.B8', V10} -> 1; {'Core.TT.B16', V11} -> 1; {'Core.TT.B32', V12} -> 1; {'Core.TT.B64', V13} -> 1; {'Core.TT.BI', V14} -> 1; {'Core.TT.Ch', V15} -> 1; _ -> 0 end end end(E0, E1)) end.
'un--indentation'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicateTR'([], (V10 * 4), $ ))))} end), V12 end(V7)) end end end end.
'un--increaseIndentation'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V16 = begin (V11 = V0), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, (V10 + 1))) end end(V12))), {'Prelude.Types.Right', V15} end end end), V16 end(V7)) end end end end.
'un--header'(V0, V1, V2, V3, V4) -> begin (V8 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V5) -> fun (V6) -> <<V5/binary, V6/binary>> end end, <<""/utf8>>}, fun (V7) -> V7 end, [<<"#include <runtime.h>\x{a}/* "/utf8>> | [('Idris.Idris2.Compiler.Generated':'un--generatedString'(<<"RefC"/utf8>>)) | [<<" */\x{a}\x{a}/* a global storage for IO References */\x{a}IORef_Storage * global_IORef_Storage;\x{a}\x{a}"/utf8>> | []]]]))), begin (V14 = begin (V9 = V4), fun (V10) -> begin (V13 = (begin (V11 = V9), fun (V12) -> ('erlang':'get'(V11)) end end(V10))), {'Prelude.Types.Right', V13} end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V57 = begin (V19 = ('Idris.Idris2.Libraries.Data.SortedSet':'un--toList'(V18))), begin (V28 = ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V20) -> <<<<"#include <"/utf8>>/binary, <<V20/binary, <<">\x{a}"/utf8>>/binary>>/binary>> end))(V19))), begin (V34 = begin (V29 = V1), fun (V30) -> begin (V33 = (begin (V31 = V29), fun (V32) -> ('erlang':'get'(V31)) end end(V30))), {'Prelude.Types.Right', V33} end end end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V56 = begin (V44 = begin (V39 = V2), fun (V40) -> begin (V43 = (begin (V41 = V39), fun (V42) -> ('erlang':'get'(V41)) end end(V40))), {'Prelude.Types.Right', V43} end end end), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V55 = begin (V49 = V2), fun (V50) -> begin (V54 = (begin (V51 = V49), fun (V52) -> ('erlang':'put'(V51, fun (V53) -> ('Idris.Idris2.Libraries.Data.DList':'un--appendL'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V8 | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V28, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([<<"\x{a}// function definitions"/utf8>> | []], V38)))))), V48, V53)) end)) end end(V50))), {'Prelude.Types.Right', V54} end end end), V55 end(V45)) end end end end), V56 end(V35)) end end end end end end), V57 end(V15)) end end end end end.
'un--getNextCounter'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V23 = begin (V16 = begin (V11 = V0), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, (V10 + 1))) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', V10} end), V22 end(V17)) end end end end), V23 end(V7)) end end end end.
'un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0) -> begin (V1 = ('un--getNextCounter'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V7 = fun (V6) -> {'Prelude.Types.Right', <<<<"tmp_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V5))/binary>>} end), V7 end(V2)) end end end end.
'un--getArgsNrList'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> [V1 | ('un--getArgsNrList'(V3, (V1 + 1)))] end(E0, E1)) end.
'un--generateCSourceFile'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.RefC.RefC.ArgCounter'}, 0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V153 = begin (V9 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.RefC.RefC.FunctionDefinitions'}, []))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V152 = begin (V14 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.RefC.RefC.TemporaryVariableTracker'}, []))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V151 = begin (V20 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.RefC.RefC.OutfileText'}, fun (V19) -> V19 end))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V150 = begin (V43 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.RefC.RefC.HeaderFiles'}, ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V27, V28)) end end}, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V41, V42)) end end}))))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V149 = begin (V48 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.RefC.RefC.IndentLevel'}, 0))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V148 = begin (V56 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V53) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V54) -> fun (V55) -> ('un--createCFunctions'(V0, V8, V13, V18, V24, V52, V47, V1, V54, V55)) end end, V53)) end, V2))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V147 = begin (V61 = ('un--header'(V0, V13, V24, V52, V47))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V146 = begin (V66 = ('un--footer'(V52, V24, V47))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V145 = begin (V76 = begin (V71 = V24), fun (V72) -> begin (V75 = (begin (V73 = V71), fun (V74) -> ('erlang':'get'(V73)) end end(V72))), {'Prelude.Types.Right', V75} end end end), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V144 = begin (V89 = ('Idris.Idris2.Prelude.Types':'un--fastConcat'(((begin (V86 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V84, V85)) end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(fun (V81) -> <<V81/binary, <<"\x{a}"/utf8>>/binary>> end))(('Idris.Idris2.Libraries.Data.DList':'un--reify'(V80))))))), begin (V138 = begin (V119 = fun (V90) -> begin (V118 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V93, V94, V95)) end end end end end, fun (V96) -> fun (V97) -> fun (V98) -> V97 end end end, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), begin (V105 = (V102(V103))), (V104(V105)) end end end end end end end}, fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> begin (V111 = (V108(V110))), ((V109(V111))(V110)) end end end end end end, fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V113(V114))), (V115(V114)) end end end end}, fun (V116) -> fun (V117) -> V117 end end}, V3, V89))(V90))), {'Prelude.Types.Right', V118} end end), ((begin (V135 = fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V132, V133, V134)) end end end end end), fun (V136) -> fun (V137) -> ((((V135('erased'))('erased'))(V136))(V137)) end end end((begin (V127 = fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> {'Prelude.Types.Right', (V123(V126))} end end end end end), fun (V128) -> fun (V129) -> ((((V127('erased'))('erased'))(V128))(V129)) end end end(fun (V120) -> {'Builtin.MkUnit'} end))))(V119)) end), fun (V139) -> begin (V140 = (V138(V139))), case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> (begin (V143 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.refc"/utf8>>, 10, fun () -> <<<<"Generated C file "/utf8>>/binary, V3/binary>> end))), V143 end(V139)) end end end end end), V144 end(V77)) end end end end), V145 end(V67)) end end end end), V146 end(V62)) end end end end), V147 end(V57)) end end end end), V148 end(V49)) end end end end), V149 end(V44)) end end end end), V150 end(V21)) end end end end), V151 end(V15)) end end end end), V152 end(V10)) end end end end), V153 end(V5)) end end end end.
'un--functionDefSignatureArglist'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V8 = fun (V7) -> {'Prelude.Types.Right', <<<<"Value *"/utf8>>/binary, <<('un--cName'(V6))/binary, <<"_arglist(Value_Arglist* arglist)"/utf8>>/binary>>/binary>>} end), V8 end(V3)) end end end end.
'un--functionDefSignature'(V0, V1, V2) -> case V2 of [] -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V10 = begin (V8 = ('un--cName'(V7))), fun (V9) -> {'Prelude.Types.Right', <<<<"\x{a}\x{a}Value *"/utf8>>/binary, <<V8/binary, <<"(void)"/utf8>>/binary>>/binary>>} end end), V10 end(V4)) end end end end; _ -> begin (V19 = ('un--addCommaToList'(((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> <<<<"  Value * var_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V11))/binary>> end))(V2))))), begin (V20 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V27 = begin (V25 = ('un--cName'(V24))), fun (V26) -> {'Prelude.Types.Right', <<<<"\x{a}\x{a}Value *"/utf8>>/binary, <<V25/binary, <<<<"\x{a}(\x{a}"/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, V19))/binary, <<"\x{a})"/utf8>>/binary>>/binary>>/binary>>/binary>>} end end), V27 end(V21)) end end end end end end.
'un--freeTmpVars'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V31 = case V12 of [E0 | E1] -> (fun (V13, V14) -> begin (V19 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V15) -> ('un--emit'(V1, V2, {'Core.FC.EmptyFC'}, <<(begin (V17 = fun (V16) -> V16 end), fun (V18) -> (V17(V18)) end end(<<"removeReference("/utf8>>))/binary, <<V15/binary, <<");"/utf8>>/binary>>/binary>>)) end, V13))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V29 = begin (V24 = V0), fun (V25) -> begin (V28 = (begin (V26 = V24), fun (V27) -> ('erlang':'put'(V26, V14)) end end(V25))), {'Prelude.Types.Right', V28} end end end), V29 end(V20)) end end end end end(E0, E1)); [] -> fun (V30) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V31 end(V9)) end end end end.
'un--footer'(V0, V1, V2) -> begin (V8 = begin (V3 = V2), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V22 = ('un--emit'(V1, V0, {'Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V13) -> fun (V14) -> <<V13/binary, V14/binary>> end end, <<""/utf8>>}, fun (V15) -> V15 end, [<<"\x{a}// main function\x{a}int main(int argc, char *argv[])\x{a}{\x{a}    "/utf8>> | [case ('Idris.Idris2.Libraries.Data.SortedSet':'un--contains'(<<"idris_support.h"/utf8>>, V12)) of 1 -> (begin (V17 = fun (V16) -> V16 end), fun (V18) -> (V17(V18)) end end(<<"idris2_setArgs(argc, argv);"/utf8>>)); 0 -> (begin (V20 = fun (V19) -> V19 end), fun (V21) -> (V20(V21)) end end(<<""/utf8>>)) end | [<<"\x{a}    global_IORef_Storage = NULL;\x{a}    Value *mainExprVal = __mainExpression_0();\x{a}    trampoline(mainExprVal);\x{a}    return 0; // bye bye\x{a}}"/utf8>> | []]]]))))), V22 end(V9)) end end end end.
'un--fillConstructorArgs'(V0, V1, V2, V3, V4) -> case V3 of [] -> fun (V5) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V6, V7) -> begin (V8 = ('un--emit'(V0, V1, {'Core.FC.EmptyFC'}, <<V2/binary, <<<<"->args["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4))/binary, <<<<"] = newReference("/utf8>>/binary, <<('un--varName'(V6))/binary, <<");"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V13 = ('un--fillConstructorArgs'(V0, V1, V2, V7, (V4 + 1)))), V13 end(V9)) end end end end end(E0, E1)) end.
'un--extractValue'(V0, V1, V2) -> case V1 of {'Core.CompileExpr.CFUnit'} -> <<"NULL"/utf8>>; {'Core.CompileExpr.CFInt'} -> <<<<"((Value_Int64*)"/utf8>>/binary, <<V2/binary, <<")->i64"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFInt8'} -> <<<<"((Value_Int8*)"/utf8>>/binary, <<V2/binary, <<")->i8"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFInt16'} -> <<<<"((Value_Int16*)"/utf8>>/binary, <<V2/binary, <<")->i16"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFInt32'} -> <<<<"((Value_Int32*)"/utf8>>/binary, <<V2/binary, <<")->i32"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFInt64'} -> <<<<"((Value_Int64*)"/utf8>>/binary, <<V2/binary, <<")->i64"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFUnsigned8'} -> <<<<"((Value_Bits8*)"/utf8>>/binary, <<V2/binary, <<")->ui8"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFUnsigned16'} -> <<<<"((Value_Bits16*)"/utf8>>/binary, <<V2/binary, <<")->ui16"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFUnsigned32'} -> <<<<"((Value_Bits32*)"/utf8>>/binary, <<V2/binary, <<")->ui32"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFUnsigned64'} -> <<<<"((Value_Bits64*)"/utf8>>/binary, <<V2/binary, <<")->ui64"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFString'} -> <<<<"((Value_String*)"/utf8>>/binary, <<V2/binary, <<")->str"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFDouble'} -> <<<<"((Value_Double*)"/utf8>>/binary, <<V2/binary, <<")->d"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFChar'} -> <<<<"((Value_Char*)"/utf8>>/binary, <<V2/binary, <<")->c"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFPtr'} -> <<<<"((Value_Pointer*)"/utf8>>/binary, <<V2/binary, <<")->p"/utf8>>/binary>>/binary>>; {'Core.CompileExpr.CFGCPtr'} -> <<<<"((Value_GCPointer*)"/utf8>>/binary, <<V2/binary, <<")->p->p"/utf8>>/binary>>/binary>>; _ -> case V0 of 0 -> case V1 of {'Core.CompileExpr.CFBuffer'} -> <<<<"((Value_Buffer*)"/utf8>>/binary, <<V2/binary, <<")->buffer->data"/utf8>>/binary>>/binary>>; _ -> case V1 of {'Core.CompileExpr.CFWorld'} -> <<<<"(Value_World*)"/utf8>>/binary, V2/binary>>; {'Core.CompileExpr.CFFun', V3, V4} -> <<<<"(Value_Closure*)"/utf8>>/binary, V2/binary>>; {'Core.CompileExpr.CFIORes', V5} -> ('un--extractValue'(V0, V5, V2)); {'Core.CompileExpr.CFStruct', V6, V7} -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: Struct access not implemented: "/utf8>>/binary, V2/binary>>)); {'Core.CompileExpr.CFUser', V8, V9} -> <<<<"(Value*)"/utf8>>/binary, V2/binary>>; _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: Unknonw FFI type in C backend: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V1))/binary>>)) end end; 1 -> case V1 of {'Core.CompileExpr.CFBuffer'} -> <<<<"((Value_Buffer*)"/utf8>>/binary, <<V2/binary, <<")->buffer"/utf8>>/binary>>/binary>>; _ -> case V1 of {'Core.CompileExpr.CFWorld'} -> <<<<"(Value_World*)"/utf8>>/binary, V2/binary>>; {'Core.CompileExpr.CFFun', V10, V11} -> <<<<"(Value_Closure*)"/utf8>>/binary, V2/binary>>; {'Core.CompileExpr.CFIORes', V12} -> ('un--extractValue'(V0, V12, V2)); {'Core.CompileExpr.CFStruct', V13, V14} -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: Struct access not implemented: "/utf8>>/binary, V2/binary>>)); {'Core.CompileExpr.CFUser', V15, V16} -> <<<<"(Value*)"/utf8>>/binary, V2/binary>>; _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: Unknonw FFI type in C backend: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V1))/binary>>)) end end; _ -> case V1 of {'Core.CompileExpr.CFWorld'} -> <<<<"(Value_World*)"/utf8>>/binary, V2/binary>>; {'Core.CompileExpr.CFFun', V17, V18} -> <<<<"(Value_Closure*)"/utf8>>/binary, V2/binary>>; {'Core.CompileExpr.CFIORes', V19} -> ('un--extractValue'(V0, V19, V2)); {'Core.CompileExpr.CFStruct', V20, V21} -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: Struct access not implemented: "/utf8>>/binary, V2/binary>>)); {'Core.CompileExpr.CFUser', V22, V23} -> <<<<"(Value*)"/utf8>>/binary, V2/binary>>; _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: Unknonw FFI type in C backend: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V1))/binary>>)) end end end.
'un--extractConstant'(V0) -> case V0 of {'Core.TT.I', V1} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)); {'Core.TT.I8', V2} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int8'(V2)); {'Core.TT.I16', V3} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int16'(V3)); {'Core.TT.I32', V4} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int32'(V4)); {'Core.TT.I64', V5} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int64'(V5)); {'Core.TT.BI', V6} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V6)); {'Core.TT.Db', V7} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V7)); {'Core.TT.Ch', V8} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Char'(V8)); {'Core.TT.Str', V9} -> ('un--cStringQuoted'(V9)); {'Core.TT.B8', V10} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits8'(V10)); {'Core.TT.B16', V11} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits16'(V11)); {'Core.TT.B32', V12} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits32'(V12)); {'Core.TT.B64', V13} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits64'(V13)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: Unable to extract constant: "/utf8>>/binary, ('un--cConstant'(V0))/binary>>)) end.
'un--executeExpr'(V0, V1, V2, V3) -> begin (V4 = ('un--compileExpr'(2, V0, V1, V2, V2, V3, <<"_tmp_refc"/utf8>>))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V82 = case V8 of {'Prelude.Types.Just', V9} -> begin (V39 = fun (V10) -> begin (V38 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, <<"_tmp_refc"/utf8>>))))(V10))), {'Prelude.Types.Right', V38} end end), ((begin (V55 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V52, V53, V54)) end end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end((begin (V47 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> {'Prelude.Types.Right', (V43(V46))} end end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V40) -> {'Builtin.MkUnit'} end))))(V39)) end; {'Prelude.Types.Nothing'} -> begin (V63 = fun (V58) -> begin (V62 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<(begin (V60 = fun (V59) -> V59 end), fun (V61) -> (V60(V61)) end end(<<"Error: failed to compile"/utf8>>))/binary, <<"\x{a}"/utf8>>/binary>>, V58))), {'Prelude.Types.Right', V62} end end), ((begin (V79 = fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V76, V77, V78)) end end end end end), fun (V80) -> fun (V81) -> ((((V79('erased'))('erased'))(V80))(V81)) end end end((begin (V71 = fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> {'Prelude.Types.Right', (V67(V70))} end end end end end), fun (V72) -> fun (V73) -> ((((V71('erased'))('erased'))(V72))(V73)) end end end(fun (V64) -> {'Builtin.MkUnit'} end))))(V63)) end end), V82 end(V5)) end end end end.
'un--escapeChar'(V0) -> case case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V0)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'un--isNL'(V0)) end of 1 -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Char'(V0)); 0 -> <<<<"(char)"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(case V0 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end))/binary>> end.
'un--emitFDef'(V0, V1, V2, V3) -> case V3 of [] -> ('un--emit'(V0, V1, {'Core.FC.EmptyFC'}, <<<<"Value *"/utf8>>/binary, <<('un--cName'(V2))/binary, <<"(void)"/utf8>>/binary>>/binary>>)); [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> begin (V10 = ('un--emit'(V0, V1, {'Core.FC.EmptyFC'}, <<<<"Value *"/utf8>>/binary, ('un--cName'(V2))/binary>>))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V50 = begin (V15 = ('un--emit'(V0, V1, {'Core.FC.EmptyFC'}, <<"("/utf8>>))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V49 = begin (V20 = ('un--increaseIndentation'(V1))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V48 = begin (V25 = ('un--emit'(V0, V1, {'Core.FC.EmptyFC'}, <<<<"  Value *"/utf8>>/binary, V8/binary>>))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V47 = begin (V35 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V30) -> case V30 of {'Builtin.MkPair', V31, V32} -> case V32 of {'Builtin.MkPair', V33, V34} -> ('un--emit'(V0, V1, {'Core.FC.EmptyFC'}, <<<<", Value *"/utf8>>/binary, V33/binary>>)) end end end, V5))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V46 = begin (V40 = ('un--decreaseIndentation'(V1))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V45 = ('un--emit'(V0, V1, {'Core.FC.EmptyFC'}, <<")"/utf8>>))), V45 end(V41)) end end end end), V46 end(V36)) end end end end), V47 end(V26)) end end end end), V48 end(V21)) end end end end), V49 end(V16)) end end end end), V50 end(V11)) end end end end end end end(E0, E1)) end.
'un--emit'(V0, V1, V2, V3) -> case V2 of {'Core.FC.EmptyFC'} -> begin (V4 = ('un--indentation'(V1))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V28 = begin (V14 = begin (V9 = V0), fun (V10) -> begin (V13 = (begin (V11 = V9), fun (V12) -> ('erlang':'get'(V11)) end end(V10))), {'Prelude.Types.Right', V13} end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V27 = begin (V19 = V0), fun (V20) -> begin (V26 = (begin (V21 = V19), fun (V22) -> ('erlang':'put'(V21, ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Libraries.Data.DList':'un--snoc'(V23, V24, V25)) end end end, <<V8/binary, V3/binary>>, V18)))) end end(V20))), {'Prelude.Types.Right', V26} end end end), V27 end(V15)) end end end end), V28 end(V5)) end end end end; _ -> begin (V29 = <<<<"// "/utf8>>/binary, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V2))/binary>>), begin (V30 = ('un--indentation'(V1))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V60 = begin (V35 = <<V34/binary, V3/binary>>), begin (V41 = begin (V36 = V0), fun (V37) -> begin (V40 = (begin (V38 = V36), fun (V39) -> ('erlang':'get'(V38)) end end(V37))), {'Prelude.Types.Right', V40} end end end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V59 = begin (V46 = V0), fun (V47) -> begin (V58 = (begin (V48 = V46), fun (V49) -> ('erlang':'put'(V48, case ('Idris.Idris2.Data.Nat':'un--isLTE'(('Idris.Idris2.Prelude.Types.String':'un--length'(V35)), ('un--maxLineLengthForComment'()))) of {'Prelude.Types.Yes', V50} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Libraries.Data.DList':'un--snoc'(V51, V52, V53)) end end end, <<('un--lJust'(V35, ('un--maxLineLengthForComment'()), $ ))/binary, <<<<" "/utf8>>/binary, V29/binary>>/binary>>, V45)); {'Prelude.Types.No', V54} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Libraries.Data.DList':'un--appendR'(V55, V56, V57)) end end end, [V35 | [<<('un--lJust'(<<""/utf8>>, ('un--maxLineLengthForComment'()), $ ))/binary, <<<<" "/utf8>>/binary, V29/binary>>/binary>> | []]], V45)) end)) end end(V47))), {'Prelude.Types.Right', V58} end end end), V59 end(V42)) end end end end end), V60 end(V31)) end end end end end end.
'un--discardLastArgument'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> ('Idris.Idris2.Data.List':'un--init'(V0)) end(E0, E1)) end.
'un--decreaseIndentation'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V16 = begin (V11 = V0), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'put'(V13, ('Idris.Idris2.Data.Nat':'un--pred'(V10)))) end end(V12))), {'Prelude.Types.Right', V15} end end end), V16 end(V7)) end end end end.
'un--createFFIArgList'(V0) -> begin (V9 = ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('un--cTypeOfCFType'(V1)) end))(V0))), begin (V10 = ('un--varNamesFromList'(V0, 1))), fun (V11) -> {'Prelude.Types.Right', ('Idris.Idris2.Data.List':'dn--un--zip3_Zippable_List'(V9, V10, V0))} end end end.
'un--createCFunctions'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Compiler.ANF.MkAFun', V10, V11} -> begin (V12 = ('un--functionDefSignature'(V0, V8, V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V215 = begin (V17 = ('un--functionDefSignatureArglist'(V0, V8))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V214 = begin (V38 = begin (V27 = begin (V22 = V2), fun (V23) -> begin (V26 = (begin (V24 = V22), fun (V25) -> ('erlang':'get'(V24)) end end(V23))), {'Prelude.Types.Right', V26} end end end), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V37 = begin (V32 = V2), fun (V33) -> begin (V36 = (begin (V34 = V32), fun (V35) -> ('erlang':'put'(V34, [<<V16/binary, <<";\x{a}"/utf8>>/binary>> | [<<V21/binary, <<";\x{a}"/utf8>>/binary>> | V31]])) end end(V33))), {'Prelude.Types.Right', V36} end end end), V37 end(V28)) end end end end), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V213 = begin (V43 = ('un--newTemporaryVariableLevel'(V3))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V212 = begin (V48 = ('un--getArgsNrList'(V10, 0))), begin (V49 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, V16))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V211 = begin (V54 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<"{"/utf8>>))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V210 = begin (V59 = ('un--increaseIndentation'(V5))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V209 = begin (V64 = ('un--cStatementsFromANF'(V1, V3, V4, V5, V11, 0))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V208 = begin (V71 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<<<"Value *returnValue = "/utf8>>/binary, <<case V68 of {'Compiler.RefC.RefC.MkRS', V69, V70} -> V70 end/binary, <<";"/utf8>>/binary>>/binary>>))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V207 = begin (V76 = ('un--freeTmpVars'(V3, V4, V5))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V206 = begin (V81 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<"return returnValue;"/utf8>>))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V205 = begin (V86 = ('un--decreaseIndentation'(V5))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V204 = begin (V91 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V203 = begin (V96 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<""/utf8>>))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V202 = begin (V101 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, V21))), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V201 = begin (V106 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<"{"/utf8>>))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V200 = begin (V111 = ('un--increaseIndentation'(V5))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V199 = begin (V122 = begin (V116 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V8))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V121 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<<<"return "/utf8>>/binary, ('un--cName'(V120))/binary>>))), V121 end(V117)) end end end end), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V198 = begin (V127 = ('un--increaseIndentation'(V5))), fun (V128) -> begin (V129 = (V127(V128))), case V129 of {'Prelude.Types.Left', V130} -> {'Prelude.Types.Left', V130}; {'Prelude.Types.Right', V131} -> (begin (V197 = begin (V132 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<"("/utf8>>))), fun (V133) -> begin (V134 = (V132(V133))), case V134 of {'Prelude.Types.Left', V135} -> {'Prelude.Types.Left', V135}; {'Prelude.Types.Right', V136} -> (begin (V196 = begin (V137 = ('un--increaseIndentation'(V5))), fun (V138) -> begin (V139 = (V137(V138))), case V139 of {'Prelude.Types.Left', V140} -> {'Prelude.Types.Left', V140}; {'Prelude.Types.Right', V141} -> (begin (V195 = begin (V150 = ('un--addCommaToList'(((begin (V147 = fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V145, V146)) end end end end), fun (V148) -> fun (V149) -> ((((V147('erased'))('erased'))(V148))(V149)) end end end(fun (V142) -> <<<<"arglist->args["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V142))/binary, <<"]"/utf8>>/binary>>/binary>> end))(V48))))), begin (V152 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V151) -> ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, V151)) end, V150))), fun (V153) -> begin (V154 = (V152(V153))), case V154 of {'Prelude.Types.Left', V155} -> {'Prelude.Types.Left', V155}; {'Prelude.Types.Right', V156} -> (begin (V194 = begin (V157 = ('un--decreaseIndentation'(V5))), fun (V158) -> begin (V159 = (V157(V158))), case V159 of {'Prelude.Types.Left', V160} -> {'Prelude.Types.Left', V160}; {'Prelude.Types.Right', V161} -> (begin (V193 = begin (V162 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<");"/utf8>>))), fun (V163) -> begin (V164 = (V162(V163))), case V164 of {'Prelude.Types.Left', V165} -> {'Prelude.Types.Left', V165}; {'Prelude.Types.Right', V166} -> (begin (V192 = begin (V167 = ('un--decreaseIndentation'(V5))), fun (V168) -> begin (V169 = (V167(V168))), case V169 of {'Prelude.Types.Left', V170} -> {'Prelude.Types.Left', V170}; {'Prelude.Types.Right', V171} -> (begin (V191 = begin (V172 = ('un--decreaseIndentation'(V5))), fun (V173) -> begin (V174 = (V172(V173))), case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> (begin (V190 = begin (V177 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))), fun (V178) -> begin (V179 = (V177(V178))), case V179 of {'Prelude.Types.Left', V180} -> {'Prelude.Types.Left', V180}; {'Prelude.Types.Right', V181} -> (begin (V189 = begin (V182 = ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<""/utf8>>))), fun (V183) -> begin (V184 = (V182(V183))), case V184 of {'Prelude.Types.Left', V185} -> {'Prelude.Types.Left', V185}; {'Prelude.Types.Right', V186} -> (begin (V188 = fun (V187) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end), V188 end(V183)) end end end end), V189 end(V178)) end end end end), V190 end(V173)) end end end end), V191 end(V168)) end end end end), V192 end(V163)) end end end end), V193 end(V158)) end end end end), V194 end(V153)) end end end end end), V195 end(V138)) end end end end), V196 end(V133)) end end end end), V197 end(V128)) end end end end), V198 end(V123)) end end end end), V199 end(V112)) end end end end), V200 end(V107)) end end end end), V201 end(V102)) end end end end), V202 end(V97)) end end end end), V203 end(V92)) end end end end), V204 end(V87)) end end end end), V205 end(V82)) end end end end), V206 end(V77)) end end end end), V207 end(V72)) end end end end), V208 end(V65)) end end end end), V209 end(V60)) end end end end), V210 end(V55)) end end end end), V211 end(V50)) end end end end end), V212 end(V44)) end end end end), V213 end(V39)) end end end end), V214 end(V18)) end end end end), V215 end(V13)) end end end end; {'Compiler.ANF.MkACon', V216, V217, V218} -> ('un--emit'(V4, V5, {'Core.FC.EmptyFC'}, <<<<"// Constructor tag "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V219) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V219)) end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V220, V221)) end end}, V216))/binary, <<<<" arity "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V217))/binary>>/binary>>/binary>>)); {'Compiler.ANF.MkAForeign', V222, V223, V224} -> ('case--createCFunctions-13861'(V7, V224, V223, V222, V8, V6, V5, V4, V3, V2, V1, V0, ('Idris.Idris2.Compiler.Common':'un--parseCC'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V7, [<<"RefC"/utf8>> | [<<"C"/utf8>> | []]])), V222)))); {'Compiler.ANF.MkAError', V225} -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: Error with expression: "/utf8>>/binary, ('Idris.Idris2.Compiler.ANF':'dn--un--show_Show_ANF'(V225))/binary>>)) end.
'un--copyConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V5 of [] -> fun (V9) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Compiler.ANF.MkAConAlt', V12, V13, V14, V15, V16} -> begin (V18 = fun (V17) -> ('nested--13378-11281--in--un--getNameTag'(V13, V16, V15, V14, V12, V11, V8, V7, V6, V4, V3, V2, V1, V0, V0, V14, V12, V17)) end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V37 = case V22 of {'Builtin.MkPair', V23, V24} -> begin (V25 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<V6/binary, <<<<"["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8))/binary, <<<<"].tag = "/utf8>>/binary, <<V23/binary, <<";"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V36 = begin (V30 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<V6/binary, <<<<"["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8))/binary, <<<<"].name = "/utf8>>/binary, <<V24/binary, <<";"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V35 = ('un--copyConstructors'(V0, V1, V2, V3, V4, V11, V6, V7, (V8 + 1)))), V35 end(V31)) end end end end), V36 end(V26)) end end end end end), V37 end(V19)) end end end end end end(E0, E1)) end.
'un--constDefaultBlock'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Prelude.Types.Nothing'} -> fun (V7) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Prelude.Types.Just', V8} -> begin (V9 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"  default :"/utf8>>))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V56 = begin (V14 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"  {"/utf8>>))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V55 = begin (V19 = ('un--increaseIndentation'(V3))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V54 = begin (V24 = ('un--newTemporaryVariableLevel'(V1))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V53 = begin (V29 = ('un--cStatementsFromANF'(V0, V1, V2, V3, V8, V6))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V52 = begin (V34 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<V5/binary, <<<<" = "/utf8>>/binary, <<('un--callByPosition'(V6, V33))/binary, <<";"/utf8>>/binary>>/binary>>/binary>>))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V51 = begin (V39 = ('un--freeTmpVars'(V1, V2, V3))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V50 = begin (V44 = ('un--decreaseIndentation'(V3))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V49 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"  }"/utf8>>))), V49 end(V45)) end end end end), V50 end(V40)) end end end end), V51 end(V35)) end end end end), V52 end(V30)) end end end end), V53 end(V25)) end end end end), V54 end(V20)) end end end end), V55 end(V15)) end end end end), V56 end(V10)) end end end end end.
'un--constBlockSwitch'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of [] -> fun (V8) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Compiler.ANF.MkAConstAlt', V11, V12} -> begin (V13 = ('un--const2Integer'(V11, V6))), begin (V14 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<<<"  case "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V13))/binary, <<" :"/utf8>>/binary>>/binary>>))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V73 = begin (V19 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"  {"/utf8>>))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V72 = begin (V24 = ('un--increaseIndentation'(V3))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V71 = begin (V29 = ('un--newTemporaryVariableLevel'(V1))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V70 = begin (V34 = ('un--cStatementsFromANF'(V0, V1, V2, V3, V12, V7))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V69 = begin (V39 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<V5/binary, <<<<" = "/utf8>>/binary, <<('un--callByPosition'(V7, V38))/binary, <<";"/utf8>>/binary>>/binary>>/binary>>))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V68 = begin (V44 = ('un--freeTmpVars'(V1, V2, V3))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V67 = begin (V49 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"break;"/utf8>>))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V66 = begin (V54 = ('un--decreaseIndentation'(V3))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V65 = begin (V59 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"  }"/utf8>>))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V64 = ('un--constBlockSwitch'(V0, V1, V2, V3, V10, V5, (V6 + 1), V7))), V64 end(V60)) end end end end), V65 end(V55)) end end end end), V66 end(V50)) end end end end), V67 end(V45)) end end end end), V68 end(V40)) end end end end), V69 end(V35)) end end end end), V70 end(V30)) end end end end), V71 end(V25)) end end end end), V72 end(V20)) end end end end), V73 end(V15)) end end end end end end end(E0, E1)) end.
'un--const2Integer'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> (begin (V4 = fun (V3) -> V3 end), fun (V5) -> (V4(V5)) end end(V2)); {'Core.TT.I8', V6} -> (begin (V8 = fun (V7) -> V7 end), fun (V9) -> (V8(V9)) end end(V6)); {'Core.TT.I16', V10} -> (begin (V12 = fun (V11) -> V11 end), fun (V13) -> (V12(V13)) end end(V10)); {'Core.TT.I32', V14} -> (begin (V16 = fun (V15) -> V15 end), fun (V17) -> (V16(V17)) end end(V14)); {'Core.TT.I64', V18} -> (begin (V20 = fun (V19) -> V19 end), fun (V21) -> (V20(V21)) end end(V18)); {'Core.TT.BI', V22} -> (begin (V24 = fun (V23) -> V23 end), fun (V25) -> (V24(V25)) end end(V22)); {'Core.TT.Ch', V26} -> (begin (V28 = fun (V27) -> case V27 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end end), fun (V29) -> (V28(V29)) end end(V26)); {'Core.TT.B8', V30} -> (begin (V32 = fun (V31) -> V31 end), fun (V33) -> (V32(V33)) end end(V30)); {'Core.TT.B16', V34} -> (begin (V36 = fun (V35) -> V35 end), fun (V37) -> (V36(V37)) end end(V34)); {'Core.TT.B32', V38} -> (begin (V40 = fun (V39) -> V39 end), fun (V41) -> (V40(V41)) end end(V38)); {'Core.TT.B64', V42} -> (begin (V44 = fun (V43) -> V43 end), fun (V45) -> (V44(V45)) end end(V42)); _ -> V1 end.
'un--conBlocks'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V5 of [] -> fun (V9) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Compiler.ANF.MkAConAlt', V12, V13, V14, V15, V16} -> begin (V17 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<<<"  case "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7))/binary, <<":"/utf8>>/binary>>/binary>>))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V82 = begin (V22 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"  {"/utf8>>))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V81 = begin (V27 = ('un--increaseIndentation'(V3))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V80 = begin (V32 = ('un--newTemporaryVariableLevel'(V1))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V79 = begin (V37 = ('nested--13416-11434--in--un--varBindLines'(V13, V16, V15, V14, V12, V11, V8, V7, V6, V4, V3, V2, V1, V0, V4, V15, 0))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V78 = begin (V42 = ('un--cStatementsFromANF'(V0, V1, V2, V3, V16, V8))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V77 = begin (V47 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<V6/binary, <<<<" = "/utf8>>/binary, <<('un--callByPosition'(V8, V46))/binary, <<";"/utf8>>/binary>>/binary>>/binary>>))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V76 = begin (V52 = ('un--freeTmpVars'(V1, V2, V3))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V75 = begin (V57 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"break;"/utf8>>))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V74 = begin (V62 = ('un--decreaseIndentation'(V3))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V73 = begin (V67 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"  }"/utf8>>))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V72 = ('un--conBlocks'(V0, V1, V2, V3, V4, V11, V6, (V7 + 1), V8))), V72 end(V68)) end end end end), V73 end(V63)) end end end end), V74 end(V58)) end end end end), V75 end(V53)) end end end end), V76 end(V48)) end end end end), V77 end(V43)) end end end end), V78 end(V38)) end end end end), V79 end(V33)) end end end end), V80 end(V28)) end end end end), V81 end(V23)) end end end end), V82 end(V18)) end end end end end end(E0, E1)) end.
'un--compileLibrary'(V0, V1, V2, V3, V4) -> begin (V7 = fun (V5) -> begin (V6 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Compiling to library is not supported.\x{a}"/utf8>>, V5))), {'Prelude.Types.Right', V6} end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V13 end(V8)) end end end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5, V6) -> case V0 of 2 -> begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, <<V6/binary, <<".c"/utf8>>/binary>>))), begin (V8 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, <<V6/binary, <<".o"/utf8>>/binary>>))), begin (V9 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, V6))), begin (V31 = begin (V12 = fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V4, V10))), {'Prelude.Types.Right', V11} end end), ((begin (V28 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V25, V26, V27)) end end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end((begin (V20 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> {'Prelude.Types.Right', (V16(V19))} end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V13) -> {'Builtin.MkUnit'} end))))(V12)) end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V63 = begin (V36 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V1, 0, 2, V5))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V62 = begin (V47 = case V40 of {'Compiler.Common.MkCompileData', V41, V42, V43, V44, V45, V46} -> V45 end), begin (V48 = ('un--generateCSourceFile'(V1, [], V47, V7))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V61 = begin (V53 = ('Idris.Idris2.Compiler.RefC.CC':'un--compileCObjectFile'(V1, 0, V7, V8))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V60 = case V57 of {'Prelude.Types.Just', V58} -> ('Idris.Idris2.Compiler.RefC.CC':'un--compileCFile'(V1, 0, V8, V9)); {'Prelude.Types.Nothing'} -> fun (V59) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V60 end(V54)) end end end end), V61 end(V49)) end end end end end), V62 end(V37)) end end end end), V63 end(V32)) end end end end end end end; _ -> fun (V64) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'un--codegenRefC'() -> {'Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('un--compileExpr'(2, V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('un--executeExpr'(V6, V7, V8, V9)) end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('un--compileLibrary'(V10, V11, V12, V13, V14)) end end end end end, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}}.
'un--callByPosition'(V0, V1) -> case V0 of 0 -> case V1 of {'Compiler.RefC.RefC.MkRS', V2, V3} -> V3 end; 1 -> case V1 of {'Compiler.RefC.RefC.MkRS', V4, V5} -> V4 end end.
'un--cUserName'(V0) -> case V0 of {'Core.Name.Basic', V1} -> ('un--cCleanString'(V1)); {'Core.Name.Field', V2} -> <<<<"rec__"/utf8>>/binary, ('un--cCleanString'(V2))/binary>>; {'Core.Name.Underscore'} -> ('un--cCleanString'(<<"_"/utf8>>)) end.
'un--cTypeOfCFType'(V0) -> case V0 of {'Core.CompileExpr.CFUnit'} -> <<"void"/utf8>>; {'Core.CompileExpr.CFInt'} -> <<"int64_t"/utf8>>; {'Core.CompileExpr.CFUnsigned8'} -> <<"uint8_t"/utf8>>; {'Core.CompileExpr.CFUnsigned16'} -> <<"uint16_t"/utf8>>; {'Core.CompileExpr.CFUnsigned32'} -> <<"uint32_t"/utf8>>; {'Core.CompileExpr.CFUnsigned64'} -> <<"uint64_t"/utf8>>; {'Core.CompileExpr.CFString'} -> <<"char *"/utf8>>; {'Core.CompileExpr.CFDouble'} -> <<"double"/utf8>>; {'Core.CompileExpr.CFChar'} -> <<"char"/utf8>>; {'Core.CompileExpr.CFPtr'} -> <<"void *"/utf8>>; {'Core.CompileExpr.CFGCPtr'} -> <<"void *"/utf8>>; {'Core.CompileExpr.CFBuffer'} -> <<"void *"/utf8>>; {'Core.CompileExpr.CFWorld'} -> <<"void *"/utf8>>; {'Core.CompileExpr.CFFun', V1, V2} -> <<"void *"/utf8>>; {'Core.CompileExpr.CFIORes', V3} -> <<"void *"/utf8>>; {'Core.CompileExpr.CFStruct', V4, V5} -> <<"void *"/utf8>>; {'Core.CompileExpr.CFUser', V6, V7} -> <<"void *"/utf8>>; _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<<<"INTERNAL ERROR: Unknonw FFI type in C backend: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V0))/binary>>)) end.
'un--cStringQuoted'(V0) -> <<('unicode':'characters_to_binary'([$\x{22} | []]))/binary, ('nested--10775-8551--in--un--showCString'(V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), <<"\x{22}"/utf8>>))/binary>>.
'un--cStatementsFromANF'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Compiler.ANF.AV', V6, V7} -> begin (V8 = <<<<"newReference("/utf8>>/binary, <<('un--varName'(V7))/binary, <<")"/utf8>>/binary>>/binary>>), fun (V9) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', V8, V8}} end end; {'Compiler.ANF.AAppName', V10, V11, V12, V13} -> begin (V22 = ('un--emit'(V2, V3, V10, <<<<"// start "/utf8>>/binary, <<('un--cName'(V12))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> ('un--varName'(V14)) end))(V13))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V68 = begin (V27 = ('un--makeArglist'(V0, V1, V2, V3, 0, V13))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V67 = begin (V32 = ('un--getNextCounter'(V0))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V66 = begin (V37 = <<<<"fPtr_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V36))/binary>>), begin (V38 = ('un--emit'(V2, V3, V10, <<<<"Value *(*"/utf8>>/binary, <<V37/binary, <<<<")(Value_Arglist*) = "/utf8>>/binary, <<('un--cName'(V12))/binary, <<"_arglist;"/utf8>>/binary>>/binary>>/binary>>/binary>>))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V65 = begin (V43 = <<<<"closure_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V36))/binary>>), begin (V44 = ('un--emit'(V2, V3, V10, <<<<"Value *"/utf8>>/binary, <<V43/binary, <<<<" = (Value*)makeClosureFromArglist("/utf8>>/binary, <<V37/binary, <<<<", "/utf8>>/binary, <<V31/binary, <<");"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V64 = begin (V57 = ('un--emit'(V2, V3, V10, <<<<"// end   "/utf8>>/binary, <<('un--cName'(V12))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V54 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V52, V53)) end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V49) -> ('un--varName'(V49)) end))(V13))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V63 = fun (V62) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', <<<<"trampoline("/utf8>>/binary, <<V43/binary, <<")"/utf8>>/binary>>/binary>>, V43}} end), V63 end(V58)) end end end end), V64 end(V45)) end end end end end), V65 end(V39)) end end end end end), V66 end(V33)) end end end end), V67 end(V28)) end end end end), V68 end(V23)) end end end end; {'Compiler.ANF.AUnderApp', V69, V70, V71, V72} -> begin (V73 = ('un--makeArglist'(V0, V1, V2, V3, V71, V72))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V94 = begin (V78 = ('un--getNextCounter'(V0))), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V93 = begin (V83 = <<<<"closure_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V82))/binary>>), begin (V84 = <<<<"Value *(*"/utf8>>/binary, <<V83/binary, <<<<")(Value_Arglist*) = "/utf8>>/binary, <<('un--cName'(V70))/binary, <<"_arglist;"/utf8>>/binary>>/binary>>/binary>>/binary>>), begin (V85 = ('un--emit'(V2, V3, V69, V84))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V92 = begin (V90 = <<<<"(Value*)makeClosureFromArglist("/utf8>>/binary, <<V83/binary, <<<<", "/utf8>>/binary, <<V77/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>), fun (V91) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', V90, V90}} end end), V92 end(V86)) end end end end end end), V93 end(V79)) end end end end), V94 end(V74)) end end end end; {'Compiler.ANF.AApp', V95, V96, V97, V98} -> fun (V99) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', <<<<"apply_closure("/utf8>>/binary, <<('un--varName'(V97))/binary, <<<<", "/utf8>>/binary, <<('un--varName'(V98))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>, <<<<"tailcall_apply_closure("/utf8>>/binary, <<('un--varName'(V97))/binary, <<<<", "/utf8>>/binary, <<('un--varName'(V98))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>}} end; {'Compiler.ANF.ALet', V100, V101, V102, V103} -> begin (V104 = ('un--cStatementsFromANF'(V0, V1, V2, V3, V102, 1))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V130 = begin (V111 = ('un--emit'(V2, V3, V100, <<<<"Value * var_"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V101))/binary, <<<<" = "/utf8>>/binary, <<case V108 of {'Compiler.RefC.RefC.MkRS', V109, V110} -> V109 end/binary, <<";"/utf8>>/binary>>/binary>>/binary>>/binary>>))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V129 = begin (V116 = ('un--registerVariableForAutomaticFreeing'(V1, <<<<"var_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V101))/binary>>))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V128 = begin (V121 = ('un--cStatementsFromANF'(V0, V1, V2, V3, V103, V5))), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V127 = fun (V126) -> {'Prelude.Types.Right', V125} end), V127 end(V122)) end end end end), V128 end(V117)) end end end end), V129 end(V112)) end end end end), V130 end(V105)) end end end end; {'Compiler.ANF.ACon', V131, V132, V133, V134, V135} -> case V133 of {'Core.CompileExpr.UNIT'} -> case V135 of [] -> fun (V136) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', <<"(Value*)NULL"/utf8>>, <<"(Value*)NULL"/utf8>>}} end; _ -> begin (V137 = ('un--getNextCounter'(V0))), fun (V138) -> begin (V139 = (V137(V138))), case V139 of {'Prelude.Types.Left', V140} -> {'Prelude.Types.Left', V140}; {'Prelude.Types.Right', V141} -> (begin (V162 = begin (V142 = <<<<"constructor_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V141))/binary>>), begin (V143 = ('un--emit'(V2, V3, V131, <<<<"Value_Constructor* "/utf8>>/binary, <<V142/binary, <<<<" = newConstructor("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V135))))/binary, <<<<", "/utf8>>/binary, <<('un--showTag'(V134))/binary, <<<<", "/utf8>>/binary, <<<<"\x{22}"/utf8>>/binary, <<('un--cName'(V132))/binary, <<"\x{22});"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V161 = begin (V148 = ('un--emit'(V2, V3, V131, <<<<" // constructor "/utf8>>/binary, ('un--cName'(V132))/binary>>))), fun (V149) -> begin (V150 = (V148(V149))), case V150 of {'Prelude.Types.Left', V151} -> {'Prelude.Types.Left', V151}; {'Prelude.Types.Right', V152} -> (begin (V160 = begin (V153 = ('un--fillConstructorArgs'(V2, V3, V142, V135, 0))), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V159 = fun (V158) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', <<<<"(Value*)"/utf8>>/binary, V142/binary>>, <<<<"(Value*)"/utf8>>/binary, V142/binary>>}} end), V159 end(V154)) end end end end), V160 end(V149)) end end end end), V161 end(V144)) end end end end end), V162 end(V138)) end end end end end; _ -> begin (V163 = ('un--getNextCounter'(V0))), fun (V164) -> begin (V165 = (V163(V164))), case V165 of {'Prelude.Types.Left', V166} -> {'Prelude.Types.Left', V166}; {'Prelude.Types.Right', V167} -> (begin (V188 = begin (V168 = <<<<"constructor_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V167))/binary>>), begin (V169 = ('un--emit'(V2, V3, V131, <<<<"Value_Constructor* "/utf8>>/binary, <<V168/binary, <<<<" = newConstructor("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V135))))/binary, <<<<", "/utf8>>/binary, <<('un--showTag'(V134))/binary, <<<<", "/utf8>>/binary, <<<<"\x{22}"/utf8>>/binary, <<('un--cName'(V132))/binary, <<"\x{22});"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V170) -> begin (V171 = (V169(V170))), case V171 of {'Prelude.Types.Left', V172} -> {'Prelude.Types.Left', V172}; {'Prelude.Types.Right', V173} -> (begin (V187 = begin (V174 = ('un--emit'(V2, V3, V131, <<<<" // constructor "/utf8>>/binary, ('un--cName'(V132))/binary>>))), fun (V175) -> begin (V176 = (V174(V175))), case V176 of {'Prelude.Types.Left', V177} -> {'Prelude.Types.Left', V177}; {'Prelude.Types.Right', V178} -> (begin (V186 = begin (V179 = ('un--fillConstructorArgs'(V2, V3, V168, V135, 0))), fun (V180) -> begin (V181 = (V179(V180))), case V181 of {'Prelude.Types.Left', V182} -> {'Prelude.Types.Left', V182}; {'Prelude.Types.Right', V183} -> (begin (V185 = fun (V184) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', <<<<"(Value*)"/utf8>>/binary, V168/binary>>, <<<<"(Value*)"/utf8>>/binary, V168/binary>>}} end), V185 end(V180)) end end end end), V186 end(V175)) end end end end), V187 end(V170)) end end end end end), V188 end(V164)) end end end end end; {'Compiler.ANF.AOp', V189, V190, V191, V192} -> begin (V193 = ('un--cArgsVectANF'(V192))), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V200 = begin (V198 = ('un--cOp'(V191, V197))), fun (V199) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', V198, V198}} end end), V200 end(V194)) end end end end; {'Compiler.ANF.AExtPrim', V201, V202, V203, V204} -> begin (V205 = ('un--emit'(V2, V3, V201, <<<<"// call to external primitive "/utf8>>/binary, ('un--cName'(V203))/binary>>))), fun (V206) -> begin (V207 = (V205(V206))), case V207 of {'Prelude.Types.Left', V208} -> {'Prelude.Types.Left', V208}; {'Prelude.Types.Right', V209} -> (begin (V220 = begin (V218 = <<('un--cCleanString'(('dn--un--show_Show_ExtPrim'(('un--toPrim'(V203))))))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V215 = fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V213, V214)) end end end end), fun (V216) -> fun (V217) -> ((((V215('erased'))('erased'))(V216))(V217)) end end end(fun (V210) -> ('un--varName'(V210)) end))(V204))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>), fun (V219) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', V218, V218}} end end), V220 end(V206)) end end end end; {'Compiler.ANF.AConCase', V221, V222, V223, V224} -> begin (V225 = ('un--getNextCounter'(V0))), fun (V226) -> begin (V227 = (V225(V226))), case V227 of {'Prelude.Types.Left', V228} -> {'Prelude.Types.Left', V228}; {'Prelude.Types.Right', V229} -> (begin (V348 = begin (V230 = ('un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0))), fun (V231) -> begin (V232 = (V230(V231))), case V232 of {'Prelude.Types.Left', V233} -> {'Prelude.Types.Left', V233}; {'Prelude.Types.Right', V234} -> (begin (V347 = begin (V235 = <<<<"Value * "/utf8>>/binary, <<V234/binary, <<" = NULL;"/utf8>>/binary>>/binary>>), begin (V236 = <<<<"constructorField_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V229))/binary>>), begin (V237 = <<<<"AConAlt * "/utf8>>/binary, <<V236/binary, <<<<"= newConstructorField("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V223))))/binary, <<");"/utf8>>/binary>>/binary>>/binary>>/binary>>), begin (V238 = <<<<"switch(compareConstructors("/utf8>>/binary, <<('un--varName'(V222))/binary, <<<<", "/utf8>>/binary, <<V236/binary, <<<<", "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V223))))/binary, <<")){"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>), begin (V239 = ('un--emit'(V2, V3, V221, V235))), fun (V240) -> begin (V241 = (V239(V240))), case V241 of {'Prelude.Types.Left', V242} -> {'Prelude.Types.Left', V242}; {'Prelude.Types.Right', V243} -> (begin (V346 = begin (V244 = ('un--emit'(V2, V3, V221, V237))), fun (V245) -> begin (V246 = (V244(V245))), case V246 of {'Prelude.Types.Left', V247} -> {'Prelude.Types.Left', V247}; {'Prelude.Types.Right', V248} -> (begin (V345 = begin (V249 = ('un--copyConstructors'(V0, V1, V2, V3, ('un--varName'(V222)), V223, V236, V234, 0))), fun (V250) -> begin (V251 = (V249(V250))), case V251 of {'Prelude.Types.Left', V252} -> {'Prelude.Types.Left', V252}; {'Prelude.Types.Right', V253} -> (begin (V344 = begin (V254 = ('un--emit'(V2, V3, V221, V238))), fun (V255) -> begin (V256 = (V254(V255))), case V256 of {'Prelude.Types.Left', V257} -> {'Prelude.Types.Left', V257}; {'Prelude.Types.Right', V258} -> (begin (V343 = begin (V259 = ('un--conBlocks'(V0, V1, V2, V3, ('un--varName'(V222)), V223, V234, 0, V5))), fun (V260) -> begin (V261 = (V259(V260))), case V261 of {'Prelude.Types.Left', V262} -> {'Prelude.Types.Left', V262}; {'Prelude.Types.Right', V263} -> (begin (V342 = case V224 of {'Prelude.Types.Nothing'} -> begin (V264 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"}"/utf8>>))), fun (V265) -> begin (V266 = (V264(V265))), case V266 of {'Prelude.Types.Left', V267} -> {'Prelude.Types.Left', V267}; {'Prelude.Types.Right', V268} -> (begin (V276 = begin (V269 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<<<"free("/utf8>>/binary, <<V236/binary, <<");"/utf8>>/binary>>/binary>>))), fun (V270) -> begin (V271 = (V269(V270))), case V271 of {'Prelude.Types.Left', V272} -> {'Prelude.Types.Left', V272}; {'Prelude.Types.Right', V273} -> (begin (V275 = fun (V274) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', V234, V234}} end), V275 end(V270)) end end end end), V276 end(V265)) end end end end; {'Prelude.Types.Just', V277} -> begin (V281 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, (begin (V279 = fun (V278) -> V278 end), fun (V280) -> (V279(V280)) end end(<<"  default : {"/utf8>>))))), fun (V282) -> begin (V283 = (V281(V282))), case V283 of {'Prelude.Types.Left', V284} -> {'Prelude.Types.Left', V284}; {'Prelude.Types.Right', V285} -> (begin (V341 = begin (V286 = ('un--increaseIndentation'(V3))), fun (V287) -> begin (V288 = (V286(V287))), case V288 of {'Prelude.Types.Left', V289} -> {'Prelude.Types.Left', V289}; {'Prelude.Types.Right', V290} -> (begin (V340 = begin (V291 = ('un--newTemporaryVariableLevel'(V1))), fun (V292) -> begin (V293 = (V291(V292))), case V293 of {'Prelude.Types.Left', V294} -> {'Prelude.Types.Left', V294}; {'Prelude.Types.Right', V295} -> (begin (V339 = begin (V296 = ('un--cStatementsFromANF'(V0, V1, V2, V3, V277, V5))), fun (V297) -> begin (V298 = (V296(V297))), case V298 of {'Prelude.Types.Left', V299} -> {'Prelude.Types.Left', V299}; {'Prelude.Types.Right', V300} -> (begin (V338 = begin (V301 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<V234/binary, <<<<" = "/utf8>>/binary, <<('un--callByPosition'(V5, V300))/binary, <<";"/utf8>>/binary>>/binary>>/binary>>))), fun (V302) -> begin (V303 = (V301(V302))), case V303 of {'Prelude.Types.Left', V304} -> {'Prelude.Types.Left', V304}; {'Prelude.Types.Right', V305} -> (begin (V337 = begin (V306 = ('un--freeTmpVars'(V1, V2, V3))), fun (V307) -> begin (V308 = (V306(V307))), case V308 of {'Prelude.Types.Left', V309} -> {'Prelude.Types.Left', V309}; {'Prelude.Types.Right', V310} -> (begin (V336 = begin (V311 = ('un--decreaseIndentation'(V3))), fun (V312) -> begin (V313 = (V311(V312))), case V313 of {'Prelude.Types.Left', V314} -> {'Prelude.Types.Left', V314}; {'Prelude.Types.Right', V315} -> (begin (V335 = begin (V316 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"  }"/utf8>>))), fun (V317) -> begin (V318 = (V316(V317))), case V318 of {'Prelude.Types.Left', V319} -> {'Prelude.Types.Left', V319}; {'Prelude.Types.Right', V320} -> (begin (V334 = begin (V321 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"}"/utf8>>))), fun (V322) -> begin (V323 = (V321(V322))), case V323 of {'Prelude.Types.Left', V324} -> {'Prelude.Types.Left', V324}; {'Prelude.Types.Right', V325} -> (begin (V333 = begin (V326 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<<<"free("/utf8>>/binary, <<V236/binary, <<");"/utf8>>/binary>>/binary>>))), fun (V327) -> begin (V328 = (V326(V327))), case V328 of {'Prelude.Types.Left', V329} -> {'Prelude.Types.Left', V329}; {'Prelude.Types.Right', V330} -> (begin (V332 = fun (V331) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', V234, V234}} end), V332 end(V327)) end end end end), V333 end(V322)) end end end end), V334 end(V317)) end end end end), V335 end(V312)) end end end end), V336 end(V307)) end end end end), V337 end(V302)) end end end end), V338 end(V297)) end end end end), V339 end(V292)) end end end end), V340 end(V287)) end end end end), V341 end(V282)) end end end end end), V342 end(V260)) end end end end), V343 end(V255)) end end end end), V344 end(V250)) end end end end), V345 end(V245)) end end end end), V346 end(V240)) end end end end end end end end), V347 end(V231)) end end end end), V348 end(V226)) end end end end; {'Compiler.ANF.AConstCase', V349, V350, V351, V352} -> begin (V353 = ('un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0))), fun (V354) -> begin (V355 = (V353(V354))), case V355 of {'Prelude.Types.Left', V356} -> {'Prelude.Types.Left', V356}; {'Prelude.Types.Right', V357} -> (begin (V429 = begin (V358 = <<<<"Value * "/utf8>>/binary, <<V357/binary, <<" = NULL;"/utf8>>/binary>>/binary>>), begin (V359 = ('un--emit'(V2, V3, V349, V358))), fun (V360) -> begin (V361 = (V359(V360))), case V361 of {'Prelude.Types.Left', V362} -> {'Prelude.Types.Left', V362}; {'Prelude.Types.Right', V363} -> (begin (V428 = case ('un--integer_switch'(V351)) of 1 -> begin (V364 = ('un--emit'(V2, V3, V349, <<<<"switch(extractInt("/utf8>>/binary, <<('un--varName'(V350))/binary, <<")){"/utf8>>/binary>>/binary>>))), fun (V365) -> begin (V366 = (V364(V365))), case V366 of {'Prelude.Types.Left', V367} -> {'Prelude.Types.Left', V367}; {'Prelude.Types.Right', V368} -> (begin (V388 = begin (V369 = ('un--constBlockSwitch'(V0, V1, V2, V3, V351, V357, 0, V5))), fun (V370) -> begin (V371 = (V369(V370))), case V371 of {'Prelude.Types.Left', V372} -> {'Prelude.Types.Left', V372}; {'Prelude.Types.Right', V373} -> (begin (V387 = begin (V374 = ('un--constDefaultBlock'(V0, V1, V2, V3, V352, V357, V5))), fun (V375) -> begin (V376 = (V374(V375))), case V376 of {'Prelude.Types.Left', V377} -> {'Prelude.Types.Left', V377}; {'Prelude.Types.Right', V378} -> (begin (V386 = begin (V379 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"}"/utf8>>))), fun (V380) -> begin (V381 = (V379(V380))), case V381 of {'Prelude.Types.Left', V382} -> {'Prelude.Types.Left', V382}; {'Prelude.Types.Right', V383} -> (begin (V385 = fun (V384) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', V357, V357}} end), V385 end(V380)) end end end end), V386 end(V375)) end end end end), V387 end(V370)) end end end end), V388 end(V365)) end end end end; 0 -> begin (V389 = ('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, V351, 0, <<""/utf8>>, <<""/utf8>>))), fun (V390) -> begin (V391 = (V389(V390))), case V391 of {'Prelude.Types.Left', V392} -> {'Prelude.Types.Left', V392}; {'Prelude.Types.Right', V393} -> (begin (V427 = case V393 of {'Builtin.MkPair', V394, V395} -> begin (V396 = ('un--emit'(V2, V3, V349, <<<<"switch("/utf8>>/binary, <<V395/binary, <<<<"("/utf8>>/binary, <<('un--varName'(V350))/binary, <<<<", "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V351))))/binary, <<<<", "/utf8>>/binary, <<V394/binary, <<")){"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>))), fun (V397) -> begin (V398 = (V396(V397))), case V398 of {'Prelude.Types.Left', V399} -> {'Prelude.Types.Left', V399}; {'Prelude.Types.Right', V400} -> (begin (V426 = begin (V401 = ('un--constBlockSwitch'(V0, V1, V2, V3, V351, V357, 0, V5))), fun (V402) -> begin (V403 = (V401(V402))), case V403 of {'Prelude.Types.Left', V404} -> {'Prelude.Types.Left', V404}; {'Prelude.Types.Right', V405} -> (begin (V425 = begin (V406 = ('un--constDefaultBlock'(V0, V1, V2, V3, V352, V357, V5))), fun (V407) -> begin (V408 = (V406(V407))), case V408 of {'Prelude.Types.Left', V409} -> {'Prelude.Types.Left', V409}; {'Prelude.Types.Right', V410} -> (begin (V424 = begin (V411 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<"}"/utf8>>))), fun (V412) -> begin (V413 = (V411(V412))), case V413 of {'Prelude.Types.Left', V414} -> {'Prelude.Types.Left', V414}; {'Prelude.Types.Right', V415} -> (begin (V423 = begin (V416 = ('un--emit'(V2, V3, {'Core.FC.EmptyFC'}, <<<<"free("/utf8>>/binary, <<V394/binary, <<");"/utf8>>/binary>>/binary>>))), fun (V417) -> begin (V418 = (V416(V417))), case V418 of {'Prelude.Types.Left', V419} -> {'Prelude.Types.Left', V419}; {'Prelude.Types.Right', V420} -> (begin (V422 = fun (V421) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', V357, V357}} end), V422 end(V417)) end end end end), V423 end(V412)) end end end end), V424 end(V407)) end end end end), V425 end(V402)) end end end end), V426 end(V397)) end end end end end), V427 end(V390)) end end end end end), V428 end(V360)) end end end end end), V429 end(V354)) end end end end; {'Compiler.ANF.APrimVal', V430, V431} -> fun (V432) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', ('un--cConstant'(V431)), ('un--cConstant'(V431))}} end; {'Compiler.ANF.AErased', V433} -> fun (V434) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', <<"NULL"/utf8>>, <<"NULL"/utf8>>}} end; {'Compiler.ANF.ACrash', V435, V436} -> begin (V437 = ('un--emit'(V2, V3, V435, <<"// CRASH"/utf8>>))), fun (V438) -> begin (V439 = (V437(V438))), case V439 of {'Prelude.Types.Left', V440} -> {'Prelude.Types.Left', V440}; {'Prelude.Types.Right', V441} -> (begin (V443 = fun (V442) -> {'Prelude.Types.Right', {'Compiler.RefC.RefC.MkRS', <<"NULL"/utf8>>, <<"NULL"/utf8>>}} end), V443 end(V438)) end end end end end.
'un--cPrimType'(V0) -> case V0 of 0 -> <<"Int64"/utf8>>; 1 -> <<"Int8"/utf8>>; 2 -> <<"Int16"/utf8>>; 3 -> <<"Int32"/utf8>>; 4 -> <<"Int64"/utf8>>; 5 -> <<"Integer"/utf8>>; 6 -> <<"Bits8"/utf8>>; 7 -> <<"Bits16"/utf8>>; 8 -> <<"Bits32"/utf8>>; 9 -> <<"Bits64"/utf8>>; 10 -> <<"string"/utf8>>; 11 -> <<"char"/utf8>>; 12 -> <<"double"/utf8>>; 13 -> <<"f32"/utf8>> end.
'un--cOp'(V0, V1) -> case V0 of {'Core.TT.Neg', V2} -> case V1 of {'Data.Vect.::', V3, V4} -> case V4 of {'Data.Vect.Nil'} -> <<<<"negate_"/utf8>>/binary, <<('un--cPrimType'(V2))/binary, <<<<"("/utf8>>/binary, <<V3/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.StrLength'} -> case V1 of {'Data.Vect.::', V5, V6} -> case V6 of {'Data.Vect.Nil'} -> <<(begin (V8 = fun (V7) -> V7 end), fun (V9) -> (V8(V9)) end end(<<"stringLength("/utf8>>))/binary, <<V5/binary, <<")"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.StrHead'} -> case V1 of {'Data.Vect.::', V10, V11} -> case V11 of {'Data.Vect.Nil'} -> <<<<"head("/utf8>>/binary, <<V10/binary, <<")"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.StrTail'} -> case V1 of {'Data.Vect.::', V12, V13} -> case V13 of {'Data.Vect.Nil'} -> <<<<"tail("/utf8>>/binary, <<V12/binary, <<")"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.StrReverse'} -> case V1 of {'Data.Vect.::', V14, V15} -> case V15 of {'Data.Vect.Nil'} -> <<<<"reverse("/utf8>>/binary, <<V14/binary, <<")"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.Cast', V16, V17} -> case V1 of {'Data.Vect.::', V18, V19} -> case V19 of {'Data.Vect.Nil'} -> <<<<"cast_"/utf8>>/binary, <<('un--cPrimType'(V16))/binary, <<<<"_to_"/utf8>>/binary, <<('un--cPrimType'(V17))/binary, <<<<"("/utf8>>/binary, <<V18/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoubleExp'} -> case V1 of {'Data.Vect.::', V20, V21} -> case V21 of {'Data.Vect.Nil'} -> <<(begin (V23 = fun (V22) -> V22 end), fun (V24) -> (V23(V24)) end end(<<"(Value*)makeDouble(exp(unpackDouble("/utf8>>))/binary, <<V20/binary, <<")))"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoubleLog'} -> case V1 of {'Data.Vect.::', V25, V26} -> case V26 of {'Data.Vect.Nil'} -> <<(begin (V28 = fun (V27) -> V27 end), fun (V29) -> (V28(V29)) end end(<<"(Value*)makeDouble(log(unpackDouble("/utf8>>))/binary, <<V25/binary, <<")))"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoublePow'} -> case V1 of {'Data.Vect.::', V30, V31} -> case V31 of {'Data.Vect.::', V32, V33} -> case V33 of {'Data.Vect.Nil'} -> <<(begin (V35 = fun (V34) -> V34 end), fun (V36) -> (V35(V36)) end end(<<"(Value*)makeDouble(pow(unpackDouble("/utf8>>))/binary, <<V30/binary, <<(begin (V38 = fun (V37) -> V37 end), fun (V39) -> (V38(V39)) end end(<<"), unpackDouble("/utf8>>))/binary, <<V32/binary, <<")))"/utf8>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoubleSin'} -> case V1 of {'Data.Vect.::', V40, V41} -> case V41 of {'Data.Vect.Nil'} -> <<(begin (V43 = fun (V42) -> V42 end), fun (V44) -> (V43(V44)) end end(<<"(Value*)makeDouble(sin(unpackDouble("/utf8>>))/binary, <<V40/binary, <<")))"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoubleCos'} -> case V1 of {'Data.Vect.::', V45, V46} -> case V46 of {'Data.Vect.Nil'} -> <<(begin (V48 = fun (V47) -> V47 end), fun (V49) -> (V48(V49)) end end(<<"(Value*)makeDouble(cos(unpackDouble("/utf8>>))/binary, <<V45/binary, <<")))"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoubleTan'} -> case V1 of {'Data.Vect.::', V50, V51} -> case V51 of {'Data.Vect.Nil'} -> <<(begin (V53 = fun (V52) -> V52 end), fun (V54) -> (V53(V54)) end end(<<"(Value*)makeDouble(tan(unpackDouble("/utf8>>))/binary, <<V50/binary, <<")))"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoubleASin'} -> case V1 of {'Data.Vect.::', V55, V56} -> case V56 of {'Data.Vect.Nil'} -> <<(begin (V58 = fun (V57) -> V57 end), fun (V59) -> (V58(V59)) end end(<<"(Value*)makeDouble(asin(unpackDouble("/utf8>>))/binary, <<V55/binary, <<")))"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoubleACos'} -> case V1 of {'Data.Vect.::', V60, V61} -> case V61 of {'Data.Vect.Nil'} -> <<(begin (V63 = fun (V62) -> V62 end), fun (V64) -> (V63(V64)) end end(<<"(Value*)makeDouble(acos(unpackDouble("/utf8>>))/binary, <<V60/binary, <<")))"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoubleATan'} -> case V1 of {'Data.Vect.::', V65, V66} -> case V66 of {'Data.Vect.Nil'} -> <<(begin (V68 = fun (V67) -> V67 end), fun (V69) -> (V68(V69)) end end(<<"(Value*)makeDouble(atan(unpackDouble("/utf8>>))/binary, <<V65/binary, <<")))"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoubleSqrt'} -> case V1 of {'Data.Vect.::', V70, V71} -> case V71 of {'Data.Vect.Nil'} -> <<(begin (V73 = fun (V72) -> V72 end), fun (V74) -> (V73(V74)) end end(<<"(Value*)makeDouble(sqrt(unpackDouble("/utf8>>))/binary, <<V70/binary, <<")))"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoubleFloor'} -> case V1 of {'Data.Vect.::', V75, V76} -> case V76 of {'Data.Vect.Nil'} -> <<(begin (V78 = fun (V77) -> V77 end), fun (V79) -> (V78(V79)) end end(<<"(Value*)makeDouble(floor(unpackDouble("/utf8>>))/binary, <<V75/binary, <<")))"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.DoubleCeiling'} -> case V1 of {'Data.Vect.::', V80, V81} -> case V81 of {'Data.Vect.Nil'} -> <<(begin (V83 = fun (V82) -> V82 end), fun (V84) -> (V83(V84)) end end(<<"(Value*)makeDouble(ceil(unpackDouble("/utf8>>))/binary, <<V80/binary, <<")))"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.Add', V85} -> case V1 of {'Data.Vect.::', V86, V87} -> case V87 of {'Data.Vect.::', V88, V89} -> case V89 of {'Data.Vect.Nil'} -> <<<<"add_"/utf8>>/binary, <<('un--cPrimType'(V85))/binary, <<<<"("/utf8>>/binary, <<V86/binary, <<<<", "/utf8>>/binary, <<V88/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.Sub', V90} -> case V1 of {'Data.Vect.::', V91, V92} -> case V92 of {'Data.Vect.::', V93, V94} -> case V94 of {'Data.Vect.Nil'} -> <<<<"sub_"/utf8>>/binary, <<('un--cPrimType'(V90))/binary, <<<<"("/utf8>>/binary, <<V91/binary, <<<<", "/utf8>>/binary, <<V93/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.Mul', V95} -> case V1 of {'Data.Vect.::', V96, V97} -> case V97 of {'Data.Vect.::', V98, V99} -> case V99 of {'Data.Vect.Nil'} -> <<<<"mul_"/utf8>>/binary, <<('un--cPrimType'(V95))/binary, <<<<"("/utf8>>/binary, <<V96/binary, <<<<", "/utf8>>/binary, <<V98/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.Div', V100} -> case V1 of {'Data.Vect.::', V101, V102} -> case V102 of {'Data.Vect.::', V103, V104} -> case V104 of {'Data.Vect.Nil'} -> <<<<"div_"/utf8>>/binary, <<('un--cPrimType'(V100))/binary, <<<<"("/utf8>>/binary, <<V101/binary, <<<<", "/utf8>>/binary, <<V103/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.Mod', V105} -> case V1 of {'Data.Vect.::', V106, V107} -> case V107 of {'Data.Vect.::', V108, V109} -> case V109 of {'Data.Vect.Nil'} -> <<<<"mod_"/utf8>>/binary, <<('un--cPrimType'(V105))/binary, <<<<"("/utf8>>/binary, <<V106/binary, <<<<", "/utf8>>/binary, <<V108/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.ShiftL', V110} -> case V1 of {'Data.Vect.::', V111, V112} -> case V112 of {'Data.Vect.::', V113, V114} -> case V114 of {'Data.Vect.Nil'} -> <<<<"shiftl_"/utf8>>/binary, <<('un--cPrimType'(V110))/binary, <<<<"("/utf8>>/binary, <<V111/binary, <<<<", "/utf8>>/binary, <<V113/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.ShiftR', V115} -> case V1 of {'Data.Vect.::', V116, V117} -> case V117 of {'Data.Vect.::', V118, V119} -> case V119 of {'Data.Vect.Nil'} -> <<<<"shiftr_"/utf8>>/binary, <<('un--cPrimType'(V115))/binary, <<<<"("/utf8>>/binary, <<V116/binary, <<<<", "/utf8>>/binary, <<V118/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.BAnd', V120} -> case V1 of {'Data.Vect.::', V121, V122} -> case V122 of {'Data.Vect.::', V123, V124} -> case V124 of {'Data.Vect.Nil'} -> <<<<"and_"/utf8>>/binary, <<('un--cPrimType'(V120))/binary, <<<<"("/utf8>>/binary, <<V121/binary, <<<<", "/utf8>>/binary, <<V123/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.BOr', V125} -> case V1 of {'Data.Vect.::', V126, V127} -> case V127 of {'Data.Vect.::', V128, V129} -> case V129 of {'Data.Vect.Nil'} -> <<<<"or_"/utf8>>/binary, <<('un--cPrimType'(V125))/binary, <<<<"("/utf8>>/binary, <<V126/binary, <<<<", "/utf8>>/binary, <<V128/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.BXOr', V130} -> case V1 of {'Data.Vect.::', V131, V132} -> case V132 of {'Data.Vect.::', V133, V134} -> case V134 of {'Data.Vect.Nil'} -> <<<<"xor_"/utf8>>/binary, <<('un--cPrimType'(V130))/binary, <<<<"("/utf8>>/binary, <<V131/binary, <<<<", "/utf8>>/binary, <<V133/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.LT', V135} -> case V1 of {'Data.Vect.::', V136, V137} -> case V137 of {'Data.Vect.::', V138, V139} -> case V139 of {'Data.Vect.Nil'} -> <<<<"lt_"/utf8>>/binary, <<('un--cPrimType'(V135))/binary, <<<<"("/utf8>>/binary, <<V136/binary, <<<<", "/utf8>>/binary, <<V138/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.GT', V140} -> case V1 of {'Data.Vect.::', V141, V142} -> case V142 of {'Data.Vect.::', V143, V144} -> case V144 of {'Data.Vect.Nil'} -> <<<<"gt_"/utf8>>/binary, <<('un--cPrimType'(V140))/binary, <<<<"("/utf8>>/binary, <<V141/binary, <<<<", "/utf8>>/binary, <<V143/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.EQ', V145} -> case V1 of {'Data.Vect.::', V146, V147} -> case V147 of {'Data.Vect.::', V148, V149} -> case V149 of {'Data.Vect.Nil'} -> <<<<"eq_"/utf8>>/binary, <<('un--cPrimType'(V145))/binary, <<<<"("/utf8>>/binary, <<V146/binary, <<<<", "/utf8>>/binary, <<V148/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.LTE', V150} -> case V1 of {'Data.Vect.::', V151, V152} -> case V152 of {'Data.Vect.::', V153, V154} -> case V154 of {'Data.Vect.Nil'} -> <<<<"lte_"/utf8>>/binary, <<('un--cPrimType'(V150))/binary, <<<<"("/utf8>>/binary, <<V151/binary, <<<<", "/utf8>>/binary, <<V153/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.GTE', V155} -> case V1 of {'Data.Vect.::', V156, V157} -> case V157 of {'Data.Vect.::', V158, V159} -> case V159 of {'Data.Vect.Nil'} -> <<<<"gte_"/utf8>>/binary, <<('un--cPrimType'(V155))/binary, <<<<"("/utf8>>/binary, <<V156/binary, <<<<", "/utf8>>/binary, <<V158/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.StrIndex'} -> case V1 of {'Data.Vect.::', V160, V161} -> case V161 of {'Data.Vect.::', V162, V163} -> case V163 of {'Data.Vect.Nil'} -> <<<<"strIndex("/utf8>>/binary, <<V160/binary, <<<<", "/utf8>>/binary, <<V162/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.StrCons'} -> case V1 of {'Data.Vect.::', V164, V165} -> case V165 of {'Data.Vect.::', V166, V167} -> case V167 of {'Data.Vect.Nil'} -> <<<<"strCons("/utf8>>/binary, <<V164/binary, <<<<", "/utf8>>/binary, <<V166/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.StrAppend'} -> case V1 of {'Data.Vect.::', V168, V169} -> case V169 of {'Data.Vect.::', V170, V171} -> case V171 of {'Data.Vect.Nil'} -> <<(begin (V173 = fun (V172) -> V172 end), fun (V174) -> (V173(V174)) end end(<<"strAppend("/utf8>>))/binary, <<V168/binary, <<<<", "/utf8>>/binary, <<V170/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.StrSubstr'} -> case V1 of {'Data.Vect.::', V175, V176} -> case V176 of {'Data.Vect.::', V177, V178} -> case V178 of {'Data.Vect.::', V179, V180} -> case V180 of {'Data.Vect.Nil'} -> <<(begin (V182 = fun (V181) -> V181 end), fun (V183) -> (V182(V183)) end end(<<"strSubstr("/utf8>>))/binary, <<V175/binary, <<<<", "/utf8>>/binary, <<V177/binary, <<<<", "/utf8>>/binary, <<V179/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.BelieveMe'} -> case V1 of {'Data.Vect.::', V184, V185} -> case V185 of {'Data.Vect.::', V186, V187} -> case V187 of {'Data.Vect.::', V188, V189} -> case V189 of {'Data.Vect.Nil'} -> <<(begin (V191 = fun (V190) -> V190 end), fun (V192) -> (V191(V192)) end end(<<"newReference("/utf8>>))/binary, <<V188/binary, <<")"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; {'Core.TT.Crash'} -> case V1 of {'Data.Vect.::', V193, V194} -> case V194 of {'Data.Vect.::', V195, V196} -> case V196 of {'Data.Vect.Nil'} -> <<(begin (V198 = fun (V197) -> V197 end), fun (V199) -> (V198(V199)) end end(<<"idris2_crash("/utf8>>))/binary, <<V195/binary, <<");"/utf8>>/binary>>/binary>>; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end; _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end.
'un--cName'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> <<('un--cCleanString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"_"/utf8>>, V1))))/binary, <<<<"_"/utf8>>/binary, ('un--cName'(V2))/binary>>/binary>>; {'Core.Name.UN', V3} -> ('un--cUserName'(V3)); {'Core.Name.MN', V4, V5} -> <<('un--cCleanString'(V4))/binary, <<<<"_"/utf8>>/binary, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5))))/binary>>/binary>>; {'Core.Name.PV', V6, V7} -> <<<<"pat__"/utf8>>/binary, ('un--cName'(V6))/binary>>; {'Core.Name.DN', V8, V9} -> ('un--cName'(V9)); {'Core.Name.Nested', V10, V11} -> <<<<"n__"/utf8>>/binary, <<('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V13, V14)) end end}, {'Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V16, V17)) end end}}, V10))))/binary, <<<<"_"/utf8>>/binary, ('un--cName'(V11))/binary>>/binary>>/binary>>; {'Core.Name.CaseBlock', V18, V19} -> <<<<"case__"/utf8>>/binary, <<('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V18))))/binary, <<<<"_"/utf8>>/binary, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19))))/binary>>/binary>>/binary>>; {'Core.Name.WithBlock', V20, V21} -> <<<<"with__"/utf8>>/binary, <<('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V20))))/binary, <<<<"_"/utf8>>/binary, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V21))))/binary>>/binary>>/binary>>; {'Core.Name.Resolved', V22} -> <<<<"fn__"/utf8>>/binary, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V22))))/binary>> end.
'un--cConstant'(V0) -> case V0 of {'Core.TT.I', V1} -> <<<<"(Value*)makeInt64("/utf8>>/binary, <<('un--showIntMin'(V1))/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.TT.I8', V2} -> <<<<"(Value*)makeInt8(INT8_C("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int8'(V2))/binary, <<"))"/utf8>>/binary>>/binary>>; {'Core.TT.I16', V3} -> <<<<"(Value*)makeInt16(INT16_C("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int16'(V3))/binary, <<"))"/utf8>>/binary>>/binary>>; {'Core.TT.I32', V4} -> <<<<"(Value*)makeInt32(INT32_C("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int32'(V4))/binary, <<"))"/utf8>>/binary>>/binary>>; {'Core.TT.I64', V5} -> <<<<"(Value*)makeInt64("/utf8>>/binary, <<('un--showInt64Min'(V5))/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.TT.BI', V6} -> <<<<"(Value*)makeIntegerLiteral(\x{22}"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V6))/binary, <<"\x{22})"/utf8>>/binary>>/binary>>; {'Core.TT.B8', V7} -> <<<<"(Value*)makeBits8(UINT8_C("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits8'(V7))/binary, <<"))"/utf8>>/binary>>/binary>>; {'Core.TT.B16', V8} -> <<<<"(Value*)makeBits16(UINT16_C("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits16'(V8))/binary, <<"))"/utf8>>/binary>>/binary>>; {'Core.TT.B32', V9} -> <<<<"(Value*)makeBits32(UINT32_C("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits32'(V9))/binary, <<"))"/utf8>>/binary>>/binary>>; {'Core.TT.B64', V10} -> <<<<"(Value*)makeBits64(UINT64_C("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits64'(V10))/binary, <<"))"/utf8>>/binary>>/binary>>; {'Core.TT.Db', V11} -> <<<<"(Value*)makeDouble("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V11))/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.TT.Ch', V12} -> <<<<"(Value*)makeChar("/utf8>>/binary, <<('un--escapeChar'(V12))/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.TT.Str', V13} -> <<<<"(Value*)makeString("/utf8>>/binary, <<('un--cStringQuoted'(V13))/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.TT.PrT', V14} -> ('un--cPrimType'(V14)); {'Core.TT.WorldVal'} -> <<"(Value*)makeWorld()"/utf8>> end.
'un--cCleanString'(V0) -> ('un--showcCleanString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), <<""/utf8>>)).
'un--cArgsVectANF'(V0) -> case V0 of {'Data.Vect.Nil'} -> fun (V1) -> {'Prelude.Types.Right', {'Data.Vect.Nil'}} end; {'Data.Vect.::', V2, V3} -> begin (V4 = ('un--cArgsVectANF'(V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V10 = fun (V9) -> {'Prelude.Types.Right', {'Data.Vect.::', ('un--varName'(V2)), V8}} end), V10 end(V5)) end end end end end.
'un--additionalFFIStub'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.CFIORes', V3} -> ('un--additionalFFIStub'(V0, ('un--discardLastArgument'(V1)), V3)); _ -> <<('un--cTypeOfCFType'(V2))/binary, <<<<" (*"/utf8>>/binary, <<('un--cName'(V0))/binary, <<<<")("/utf8>>/binary, <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> <<V4/binary, V5/binary>> end end, <<""/utf8>>}, fun (V6) -> V6 end, ('Idris.Idris2.Data.List':'un--intersperse'(<<", "/utf8>>, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('un--cTypeOfCFType'(V7)) end))(V1))))))/binary, <<") = (void*)missing_ffi;\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>> end.
'un--addHeader'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V17 = begin (V12 = V0), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, ('Idris.Idris2.Libraries.Data.SortedSet':'un--insert'(V1, V11)))) end end(V13))), {'Prelude.Types.Right', V16} end end end), V17 end(V8)) end end end end.
'un--addCommaToList'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> [<<<<"  "/utf8>>/binary, V1/binary>> | ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> <<<<", "/utf8>>/binary, V3/binary>> end))(V2))] end(E0, E1)) end.
