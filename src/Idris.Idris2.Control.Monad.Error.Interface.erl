-module('Idris.Idris2.Control.Monad.Error.Interface').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--throwError_MonadError_(|Unit,MkUnit|)_Maybe'/1,
  'dn--un--throwError_MonadError_(|Unit,MkUnit|)_(MaybeT $m)'/2,
  'dn--un--throwError_MonadError_$e_(MaybeT $m)'/2,
  'dn--un--throwError_MonadError_$e_(Either $e)'/1,
  'dn--un--throwError_MonadError_$e_((WriterT $w) $m)'/3,
  'dn--un--throwError_MonadError_$e_((StateT $r) $m)'/2,
  'dn--un--throwError_MonadError_$e_((ReaderT $r) $m)'/2,
  'dn--un--throwError_MonadError_$e_((EitherT $e) $m)'/2,
  'dn--un--throwError_MonadError_$e_((((RWST $r) $w) $s) $m)'/2,
  'dn--un--catchError_MonadError_(|Unit,MkUnit|)_Maybe'/2,
  'dn--un--catchError_MonadError_(|Unit,MkUnit|)_(MaybeT $m)'/3,
  'dn--un--catchError_MonadError_$e_(MaybeT $m)'/3,
  'dn--un--catchError_MonadError_$e_(Either $e)'/2,
  'dn--un--catchError_MonadError_$e_((WriterT $w) $m)'/3,
  'dn--un--catchError_MonadError_$e_((StateT $r) $m)'/3,
  'dn--un--catchError_MonadError_$e_((ReaderT $r) $m)'/3,
  'dn--un--catchError_MonadError_$e_((EitherT $e) $m)'/3,
  'dn--un--catchError_MonadError_$e_((((RWST $r) $w) $s) $m)'/3,
  'dn--un--__MonadError_(Monad m)'/1,
  'dn--un--__Impl_MonadError_(|Unit,MkUnit|)_Maybe'/0,
  'dn--un--__Impl_MonadError_(|Unit,MkUnit|)_(MaybeT $m)'/1,
  'dn--un--__Impl_MonadError_$e_(MaybeT $m)'/1,
  'dn--un--__Impl_MonadError_$e_(Either $e)'/0,
  'dn--un--__Impl_MonadError_$e_((WriterT $w) $m)'/1,
  'dn--un--__Impl_MonadError_$e_((StateT $r) $m)'/1,
  'dn--un--__Impl_MonadError_$e_((ReaderT $r) $m)'/1,
  'dn--un--__Impl_MonadError_$e_((EitherT $e) $m)'/1,
  'dn--un--__Impl_MonadError_$e_((((RWST $r) $w) $s) $m)'/1,
  'un--withError'/3,
  'un--tryError'/2,
  'un--throwError'/2,
  'un--mapError'/3,
  'un--liftEither'/2,
  'un--handleError'/3,
  'un--catchError'/3
]).
'dn--un--throwError_MonadError_(|Unit,MkUnit|)_Maybe'(V0) -> {'Prelude.Types.Nothing'}.
'dn--un--throwError_MonadError_(|Unit,MkUnit|)_(MaybeT $m)'(V0, V1) -> case V0 of {'Prelude.Interfaces.MkMonad', V2, V3, V4} -> case V2 of {'Prelude.Interfaces.MkApplicative', V5, V6, V7} -> ((V6('erased'))({'Prelude.Types.Nothing'})) end end.
'dn--un--throwError_MonadError_$e_(MaybeT $m)'(V0, V1) -> (begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(V7, V8)) end end end end), fun (V10) -> ((((V9('erased'))('erased'))(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V11, V12, V13} -> V11 end))(V10)) end end(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V2, V3, V4} -> ((V3('erased'))(V1)) end)).
'dn--un--throwError_MonadError_$e_(Either $e)'(V0) -> {'Prelude.Types.Left', V0}.
'dn--un--throwError_MonadError_$e_((WriterT $w) $m)'(V0, V1, V2) -> ((begin (V16 = case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V7, V8, V9} -> case V7 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> V13 end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V6) -> {'Builtin.MkPair', V6, V2} end))(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V3, V4, V5} -> ((V4('erased'))(V1)) end)).
'dn--un--throwError_MonadError_$e_((StateT $r) $m)'(V0, V1) -> (begin (V10 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--lift_MonadTrans_(StateT $stateType)'(V7, V8, V9)) end end end end end), fun (V11) -> ((((V10('erased'))('erased'))(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V12, V13, V14} -> V12 end))(V11)) end end(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V2, V3, V4} -> ((V3('erased'))(V1)) end)).
'dn--un--throwError_MonadError_$e_((ReaderT $r) $m)'(V0, V1) -> (begin (V10 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end end end), fun (V11) -> ((((V10('erased'))('erased'))(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V12, V13, V14} -> V12 end))(V11)) end end(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V2, V3, V4} -> ((V3('erased'))(V1)) end)).
'dn--un--throwError_MonadError_$e_((EitherT $e) $m)'(V0, V1) -> case V0 of {'Prelude.Interfaces.MkMonad', V2, V3, V4} -> case V2 of {'Prelude.Interfaces.MkApplicative', V5, V6, V7} -> ((V6('erased'))({'Prelude.Types.Left', V1})) end end.
'dn--un--throwError_MonadError_$e_((((RWST $r) $w) $s) $m)'(V0, V1) -> (begin (V22 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ((begin (V19 = case V7 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> V16 end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V12) -> {'Builtin.MkPair', V12, {'Builtin.MkPair', V10, V11}} end))(V8)) end end end end end end end), fun (V23) -> ((((V22('erased'))('erased'))(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V24, V25, V26} -> V24 end))(V23)) end end(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V2, V3, V4} -> ((V3('erased'))(V1)) end)).
'dn--un--catchError_MonadError_(|Unit,MkUnit|)_Maybe'(V0, V1) -> case V0 of {'Prelude.Types.Nothing'} -> (V1({'Builtin.MkUnit'})); _ -> V0 end.
'dn--un--catchError_MonadError_(|Unit,MkUnit|)_(MaybeT $m)'(V0, V1, V2) -> begin (V3 = V1), case V0 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))(V3))(fun (V7) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> begin (V8 = (V2({'Builtin.MkUnit'}))), V8 end end, fun () -> fun (V9) -> ('Idris.Idris2.Prelude.Interfaces.Applicative':'dn--un--pure_Applicative_Compose((. $f) $g)'(case V0 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> V10 end, {'Prelude.Interfaces.MkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V15, V16)) end end end end, fun (V17) -> fun (V18) -> {'Prelude.Types.Just', V18} end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V21, V22)) end end end end}, V9)) end end, V7)) end)) end end.
'dn--un--catchError_MonadError_$e_(MaybeT $m)'(V0, V1, V2) -> begin (V3 = V1), case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V4, V5, V6} -> (((V6('erased'))(V3))(fun (V7) -> begin (V8 = (V2(V7))), V8 end end)) end end.
'dn--un--catchError_MonadError_$e_(Either $e)'(V0, V1) -> case V0 of {'Prelude.Types.Left', V2} -> (V1(V2)); {'Prelude.Types.Right', V3} -> {'Prelude.Types.Right', V3} end.
'dn--un--catchError_MonadError_$e_((WriterT $w) $m)'(V0, V1, V2) -> begin (V3 = V1), fun (V4) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V5, V6, V7} -> (((V7('erased'))((V3(V4))))(fun (V8) -> (begin (V9 = (V2(V8))), V9 end(V4)) end)) end end end.
'dn--un--catchError_MonadError_$e_((StateT $r) $m)'(V0, V1, V2) -> begin (V3 = V1), fun (V4) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V5, V6, V7} -> (((V7('erased'))((V3(V4))))(fun (V8) -> (begin (V9 = (V2(V8))), V9 end(V4)) end)) end end end.
'dn--un--catchError_MonadError_$e_((ReaderT $r) $m)'(V0, V1, V2) -> begin (V3 = V1), fun (V4) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V5, V6, V7} -> (((V7('erased'))((V3(V4))))(fun (V8) -> (begin (V9 = (V2(V8))), V9 end(V4)) end)) end end end.
'dn--un--catchError_MonadError_$e_((EitherT $e) $m)'(V0, V1, V2) -> ('Idris.Idris2.Control.Monad.Error.Either':'un--catchE'(V0, V1, V2)).
'dn--un--catchError_MonadError_$e_((((RWST $r) $w) $s) $m)'(V0, V1, V2) -> begin (V3 = V1), fun (V4) -> fun (V5) -> fun (V6) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V7, V8, V9} -> (((V9('erased'))((((V3(V4))(V5))(V6))))(fun (V10) -> (((begin (V11 = (V2(V10))), V11 end(V4))(V5))(V6)) end)) end end end end end.
'dn--un--__MonadError_(Monad m)'(V0) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V1, V2, V3} -> V1 end.
'dn--un--__Impl_MonadError_(|Unit,MkUnit|)_Maybe'() -> {'Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V2, V3)) end end end end, fun (V4) -> fun (V5) -> {'Prelude.Types.Just', V5} end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V8, V9)) end end end end}, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V12, V13)) end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V15)) end end}, fun (V16) -> fun (V17) -> {'Prelude.Types.Nothing'} end end, fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--catchError_MonadError_(|Unit,MkUnit|)_Maybe'(V19, V20)) end end end}.
'dn--un--__Impl_MonadError_(|Unit,MkUnit|)_(MaybeT $m)'(V0) -> {'Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--map_Functor_(MaybeT $m)'(case V0 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> case V5 of {'Prelude.Interfaces.MkApplicative', V8, V9, V10} -> V8 end end, V3, V4)) end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--pure_Applicative_(MaybeT $m)'(case V0 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> V13 end, V12)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--<*>_Applicative_(MaybeT $m)'(case V0 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> V20 end, V18, V19)) end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un-->>=_Monad_(MaybeT $m)'(V0, V25, V26)) end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--join_Monad_(MaybeT $m)'(V0, V28)) end end}, fun (V29) -> fun (V30) -> ('dn--un--throwError_MonadError_(|Unit,MkUnit|)_(MaybeT $m)'(V0, V30)) end end, fun (V31) -> fun (V32) -> fun (V33) -> ('dn--un--catchError_MonadError_(|Unit,MkUnit|)_(MaybeT $m)'(V0, V32, V33)) end end end}.
'dn--un--__Impl_MonadError_$e_(MaybeT $m)'(V0) -> {'Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--map_Functor_(MaybeT $m)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V5, V6, V7} -> case V5 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> case V8 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> V11 end end end, V3, V4)) end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--pure_Applicative_(MaybeT $m)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V16, V17, V18} -> case V16 of {'Prelude.Interfaces.MkMonad', V19, V20, V21} -> V19 end end, V15)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--<*>_Applicative_(MaybeT $m)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V26, V27, V28} -> case V26 of {'Prelude.Interfaces.MkMonad', V29, V30, V31} -> V29 end end, V24, V25)) end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un-->>=_Monad_(MaybeT $m)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V36, V37, V38} -> V36 end, V34, V35)) end end end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--join_Monad_(MaybeT $m)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V41, V42, V43} -> V41 end, V40)) end end}, fun (V44) -> fun (V45) -> ('dn--un--throwError_MonadError_$e_(MaybeT $m)'(V0, V45)) end end, fun (V46) -> fun (V47) -> fun (V48) -> ('dn--un--catchError_MonadError_$e_(MaybeT $m)'(V0, V47, V48)) end end end}.
'dn--un--__Impl_MonadError_$e_(Either $e)'() -> {'Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> {'Prelude.Types.Right', (V2(V5))} end end end end end, fun (V6) -> fun (V7) -> {'Prelude.Types.Right', V7} end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> case V10 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> case V11 of {'Prelude.Types.Right', V14} -> {'Prelude.Types.Right', (V13(V14))}; {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15} end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(V18, V19)) end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_(Either $e)'(V21)) end end}, fun (V22) -> fun (V23) -> {'Prelude.Types.Left', V23} end end, fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--catchError_MonadError_$e_(Either $e)'(V25, V26)) end end end}.
'dn--un--__Impl_MonadError_$e_((WriterT $w) $m)'(V0) -> {'Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ((begin (V19 = case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> V16 end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', (V3(V8)), V9} end end))((begin (V6 = V4), V6 end(V5)))) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V25, V26, V27} -> case V25 of {'Prelude.Interfaces.MkMonad', V28, V29, V30} -> case V28 of {'Prelude.Interfaces.MkApplicative', V31, V32, V33} -> ((V32('erased'))({'Builtin.MkPair', V23, V24})) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = V36), begin (V39 = V37), fun (V40) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V41, V42, V43} -> case V41 of {'Prelude.Interfaces.MkMonad', V44, V45, V46} -> ((((V45('erased'))('erased'))((V38(V40))))(fun (V47) -> case V47 of {'Builtin.MkPair', V48, V49} -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V50, V51, V52} -> case V50 of {'Prelude.Interfaces.MkMonad', V53, V54, V55} -> ((((V54('erased'))('erased'))((V39(V49))))(fun (V56) -> case V56 of {'Builtin.MkPair', V57, V58} -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V59, V60, V61} -> case V59 of {'Prelude.Interfaces.MkMonad', V62, V63, V64} -> case V62 of {'Prelude.Interfaces.MkApplicative', V65, V66, V67} -> ((V66('erased'))({'Builtin.MkPair', (V48(V57)), V58})) end end end end end)) end end end end)) end end end end end end end end end}, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V73, V74, V75} -> case V73 of {'Prelude.Interfaces.MkMonad', V76, V77, V78} -> ((((V77('erased'))('erased'))((begin (V83 = V70), V83 end(V72))))(fun (V79) -> case V79 of {'Builtin.MkPair', V80, V81} -> (begin (V82 = (V71(V80))), V82 end(V81)) end end)) end end end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V87, V88, V89} -> case V87 of {'Prelude.Interfaces.MkMonad', V90, V91, V92} -> ((((V91('erased'))('erased'))((begin (V97 = V85), V97 end(V86))))(fun (V93) -> case V93 of {'Builtin.MkPair', V94, V95} -> (begin (V96 = V94), V96 end(V95)) end end)) end end end end end}, fun (V98) -> fun (V99) -> fun (V100) -> ('dn--un--throwError_MonadError_$e_((WriterT $w) $m)'(V0, V99, V100)) end end end, fun (V101) -> fun (V102) -> fun (V103) -> ('dn--un--catchError_MonadError_$e_((WriterT $w) $m)'(V0, V102, V103)) end end end}.
'dn--un--__Impl_MonadError_$e_((StateT $r) $m)'(V0) -> {'Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--map_Functor_((StateT $stateType) $f)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V5, V6, V7} -> case V5 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> case V8 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> V11 end end end, V3, V4)) end end end end, fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V17, V18, V19} -> V17 end, V15, V16)) end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--<*>_Applicative_((StateT $stateType) $f)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V24, V25, V26} -> V24 end, V22, V23)) end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V31, V32, V33} -> V31 end, V29, V30)) end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--join_Monad_((StateT $stateType) $m)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V36, V37, V38} -> V36 end, V35)) end end}, fun (V39) -> fun (V40) -> ('dn--un--throwError_MonadError_$e_((StateT $r) $m)'(V0, V40)) end end, fun (V41) -> fun (V42) -> fun (V43) -> ('dn--un--catchError_MonadError_$e_((StateT $r) $m)'(V0, V42, V43)) end end end}.
'dn--un--__Impl_MonadError_$e_((ReaderT $r) $m)'(V0) -> {'Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--map_Functor_((ReaderT $stateType) $f)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V5, V6, V7} -> case V5 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> case V8 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> V11 end end end, V3, V4)) end end end end, fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--pure_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V17, V18, V19} -> case V17 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> V20 end end, V15, V16)) end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--<*>_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V27, V28, V29} -> case V27 of {'Prelude.Interfaces.MkMonad', V30, V31, V32} -> V30 end end, V25, V26)) end end end end}, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un-->>=_Monad_((ReaderT $stateType) $m)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V37, V38, V39} -> V37 end, V35, V36)) end end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--join_Monad_((ReaderT $stateType) $m)'(case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V42, V43, V44} -> V42 end, V41)) end end}, fun (V45) -> fun (V46) -> ('dn--un--throwError_MonadError_$e_((ReaderT $r) $m)'(V0, V46)) end end, fun (V47) -> fun (V48) -> fun (V49) -> ('dn--un--catchError_MonadError_$e_((ReaderT $r) $m)'(V0, V48, V49)) end end end}.
'dn--un--__Impl_MonadError_$e_((EitherT $e) $m)'(V0) -> {'Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--map_Functor_((EitherT $e) $m)'(case V0 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> case V5 of {'Prelude.Interfaces.MkApplicative', V8, V9, V10} -> V8 end end, V3, V4)) end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--pure_Applicative_((EitherT $e) $m)'(case V0 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> V13 end, V12)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--<*>_Applicative_((EitherT $e) $m)'(case V0 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> V20 end, V18, V19)) end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un-->>=_Monad_((EitherT $e) $m)'(V0, V25, V26)) end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--join_Monad_((EitherT $e) $m)'(V0, V28)) end end}, fun (V29) -> fun (V30) -> ('dn--un--throwError_MonadError_$e_((EitherT $e) $m)'(V0, V30)) end end, fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Control.Monad.Error.Either':'un--catchE'(V0, V32, V33)) end end end}.
'dn--un--__Impl_MonadError_$e_((((RWST $r) $w) $s) $m)'(V0) -> {'Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ((begin (V23 = case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkMonad', V17, V18, V19} -> case V17 of {'Prelude.Interfaces.MkApplicative', V20, V21, V22} -> V20 end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Builtin.MkPair', (V3(V10)), {'Builtin.MkPair', V12, V13}} end end end))((((begin (V8 = V4), V8 end(V5))(V6))(V7)))) end end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V31, V32, V33} -> case V31 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((V38('erased'))({'Builtin.MkPair', V27, {'Builtin.MkPair', V29, V30}})) end end end end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = V42), begin (V45 = V43), fun (V46) -> fun (V47) -> fun (V48) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V49, V50, V51} -> case V49 of {'Prelude.Interfaces.MkMonad', V52, V53, V54} -> ((((V53('erased'))('erased'))((((V44(V46))(V47))(V48))))(fun (V55) -> case V55 of {'Builtin.MkPair', V56, V57} -> case V57 of {'Builtin.MkPair', V58, V59} -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V60, V61, V62} -> case V60 of {'Prelude.Interfaces.MkMonad', V63, V64, V65} -> ((((V64('erased'))('erased'))((((V45(V46))(V58))(V59))))(fun (V66) -> case V66 of {'Builtin.MkPair', V67, V68} -> case V68 of {'Builtin.MkPair', V69, V70} -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V71, V72, V73} -> case V71 of {'Prelude.Interfaces.MkMonad', V74, V75, V76} -> case V74 of {'Prelude.Interfaces.MkApplicative', V77, V78, V79} -> ((V78('erased'))({'Builtin.MkPair', (V56(V67)), {'Builtin.MkPair', V69, V70}})) end end end end end end)) end end end end end)) end end end end end end end end end end end}, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V87, V88, V89} -> case V87 of {'Prelude.Interfaces.MkMonad', V90, V91, V92} -> ((((V91('erased'))('erased'))((((begin (V99 = V82), V99 end(V84))(V85))(V86))))(fun (V93) -> case V93 of {'Builtin.MkPair', V94, V95} -> case V95 of {'Builtin.MkPair', V96, V97} -> (((begin (V98 = (V83(V94))), V98 end(V84))(V96))(V97)) end end end)) end end end end end end end end end, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V105, V106, V107} -> case V105 of {'Prelude.Interfaces.MkMonad', V108, V109, V110} -> ((((V109('erased'))('erased'))((((begin (V117 = V101), V117 end(V102))(V103))(V104))))(fun (V111) -> case V111 of {'Builtin.MkPair', V112, V113} -> case V113 of {'Builtin.MkPair', V114, V115} -> (((begin (V116 = V112), V116 end(V102))(V114))(V115)) end end end)) end end end end end end end}, fun (V118) -> fun (V119) -> ('dn--un--throwError_MonadError_$e_((((RWST $r) $w) $s) $m)'(V0, V119)) end end, fun (V120) -> fun (V121) -> fun (V122) -> ('dn--un--catchError_MonadError_$e_((((RWST $r) $w) $s) $m)'(V0, V121, V122)) end end end}.
'un--withError'(V0, V1, V2) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V3, V4, V5} -> case V3 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(('un--tryError'(V0, V2))))(fun (V9) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V10) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V11, V12, V13} -> ((V12('erased'))((V1(V10)))) end end end, fun () -> fun (V14) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V15, V16, V17} -> case V15 of {'Prelude.Interfaces.MkMonad', V18, V19, V20} -> case V18 of {'Prelude.Interfaces.MkApplicative', V21, V22, V23} -> ((V22('erased'))(V14)) end end end end end, V9)) end)) end end.
'un--tryError'(V0, V1) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V2, V3, V4} -> (((V4('erased'))(((begin (V25 = case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V16, V17, V18} -> case V16 of {'Prelude.Interfaces.MkMonad', V19, V20, V21} -> case V19 of {'Prelude.Interfaces.MkApplicative', V22, V23, V24} -> V22 end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V15) -> {'Prelude.Types.Right', V15} end))(V1))))(fun (V5) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V6, V7, V8} -> case V6 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> ((V13('erased'))({'Prelude.Types.Left', V5})) end end end end)) end.
'un--throwError'(V0, V1) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V2, V3, V4} -> ((V3('erased'))(V1)) end.
'un--mapError'(V0, V1, V2) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V3, V4, V5} -> case V3 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))((V1(('un--tryError'(('Idris.Idris2.Builtin':'un--fst'(V0)), V2))))))(fun (V9) -> ('un--liftEither'(('Idris.Idris2.Builtin':'un--snd'(V0)), V9)) end)) end end.
'un--liftEither'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V2) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V3, V4, V5} -> ((V4('erased'))(V2)) end end end, fun () -> fun (V6) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V7, V8, V9} -> case V7 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> ((V14('erased'))(V6)) end end end end end, V1)).
'un--handleError'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V3) -> fun (V4) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V5, V6, V7} -> (((V7('erased'))(V3))(V4)) end end end, V1, V2)).
'un--catchError'(V0, V1, V2) -> case V0 of {'Control.Monad.Error.Interface.dn--un--__mkMonadError', V3, V4, V5} -> (((V5('erased'))(V1))(V2)) end.
