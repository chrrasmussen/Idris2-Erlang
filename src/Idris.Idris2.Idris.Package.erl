-module('Idris.Idris2.Idris.Package').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--partitionOpts,pOptUpdate-19377'/4,
  'case--case block in processPackage-18548'/8,
  'case--case block in case block in case block in case block in makeDoc-17378'/17,
  'case--case block in case block in case block in case block in case block in makeDoc-16509'/24,
  'case--case block in case block in case block in case block in makeDoc-16457'/23,
  'case--installSrcFrom-14931'/8,
  'case--case block in installFrom-14662'/13,
  'case--assertIdrisCompatibility-14018'/3,
  'nested--20545-15901--in--un--visible'/6,
  'nested--17647-13273--in--un--toSource'/7,
  'nested--14864-10569--in--un--strField'/3,
  'nested--20099-15480--in--un--savePkgMetadata'/6,
  'nested--24345-19323--in--un--pOptUpdate'/3,
  'nested--24345-19322--in--un--optType'/2,
  'nested--14864-10566--in--un--mkBound'/3,
  'nested--14864-10567--in--un--langversions'/1,
  'nested--22544-17685--in--un--go'/5,
  'nested--17647-13274--in--un--go'/10,
  'nested--20545-15902--in--un--fileError'/8,
  'nested--14864-10568--in--un--depends'/1,
  'nested--22682-17809--in--un--deleteFolder'/6,
  'nested--22682-17810--in--un--deleteBin'/7,
  'nested--22682-17808--in--un--delete'/5,
  'nested--14864-10565--in--un--bound'/1,
  'un--runScript'/1,
  'un--runRepl'/4,
  'un--processPackageOpts'/4,
  'un--processPackage'/5,
  'un--processOptions'/3,
  'un--prepareCompilation'/5,
  'un--partitionOpts'/1,
  'un--parsePkgFile'/5,
  'un--parsePkgDesc'/1,
  'un--makeDoc'/5,
  'un--localPackageFile'/1,
  'un--installSrcFrom'/4,
  'un--installFrom'/5,
  'un--installDir'/1,
  'un--installBuildArtifactFrom'/6,
  'un--install'/5,
  'un--foldWithKeysC'/4,
  'un--findIpkg'/4,
  'un--filterChangedModules'/2,
  'un--field'/1,
  'un--errorMsg'/0,
  'un--compileMain'/6,
  'un--compileLibHelper'/6,
  'un--clean'/4,
  'un--check'/5,
  'un--build'/5,
  'un--bitraverseC'/3,
  'un--assertIdrisCompatibility'/1,
  'un--addFields'/6,
  'un--addField'/7,
  'un--addDeps'/2
]).
'with--partitionOpts,pOptUpdate-19377'(V0, V1, V2, V3) -> case V2 of {'Idris.Package.nested--24345-19318--in--un--PPackage', V4, V5, V6} -> case V3 of {'Idris.Package.MkPFR', V7, V8, V9} -> {'Idris.Package.MkPFR', [{'Builtin.MkPair', V5, V6} | V7], V8, V9} end; {'Idris.Package.nested--24345-19319--in--un--POpt', V10} -> case V3 of {'Idris.Package.MkPFR', V11, V12, V13} -> {'Idris.Package.MkPFR', V11, [V1 | V12], V13} end; {'Idris.Package.nested--24345-19320--in--un--PIgnore', V14} -> V3; {'Idris.Package.nested--24345-19321--in--un--PErr', V15} -> case V3 of {'Idris.Package.MkPFR', V16, V17, V18} -> {'Idris.Package.MkPFR', V16, V17, 1} end end.
'case--case block in processPackage-18548'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Prelude.Types.Just', V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<".ipkg"/utf8>>, V10)) of 1 -> begin (V11 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V5, V9))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V333 = begin (V16 = ('un--parsePkgFile'(V5, V4, V3, 1, V10))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V332 = begin (V49 = case V20 of {'Idris.Package.Types.MkPkgDesc', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> case V39 of {'Prelude.Types.Just', V47} -> ('Idris.Idris2.Core.Context':'un--setBuildDir'(V5, V47)); {'Prelude.Types.Nothing'} -> fun (V48) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V331 = begin (V80 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V5, case V20 of {'Idris.Package.Types.MkPkgDesc', V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79} -> V73 end))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V330 = case V0 of 0 -> begin (V85 = ('un--build'(V5, V4, V3, V20, V2))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V119 = fun (V90) -> case V89 of [] -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; _ -> begin (V118 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V93, V94, V95)) end end end end end, fun (V96) -> fun (V97) -> fun (V98) -> V97 end end end, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), begin (V105 = (V102(V103))), (V104(V105)) end end end end end end end}, fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> begin (V111 = (V108(V110))), ((V109(V111))(V110)) end end end end end end, fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V113(V114))), (V115(V114)) end end end end}, fun (V116) -> fun (V117) -> V117 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V90))), {'Prelude.Types.Right', V118} end end end), V119 end(V86)) end end end end; 3 -> begin (V120 = ('un--makeDoc'(V5, V4, V3, V20, V2))), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V154 = fun (V125) -> case V124 of [] -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; _ -> begin (V153 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V128, V129, V130)) end end end end end, fun (V131) -> fun (V132) -> fun (V133) -> V132 end end end, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> begin (V139 = (V136(V138))), begin (V140 = (V137(V138))), (V139(V140)) end end end end end end end}, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> begin (V146 = (V143(V145))), ((V144(V146))(V145)) end end end end end end, fun (V147) -> fun (V148) -> fun (V149) -> begin (V150 = (V148(V149))), (V150(V149)) end end end end}, fun (V151) -> fun (V152) -> V152 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V125))), {'Prelude.Types.Right', V153} end end end), V154 end(V121)) end end end end; 1 -> begin (V155 = ('un--build'(V5, V4, V3, V20, V2))), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V189 = case V159 of [] -> ('un--install'(V5, V3, V20, V2, 0)); _ -> fun (V160) -> begin (V188 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V163, V164, V165)) end end end end end, fun (V166) -> fun (V167) -> fun (V168) -> V167 end end end, fun (V169) -> fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> begin (V174 = (V171(V173))), begin (V175 = (V172(V173))), (V174(V175)) end end end end end end end}, fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> begin (V181 = (V178(V180))), ((V179(V181))(V180)) end end end end end end, fun (V182) -> fun (V183) -> fun (V184) -> begin (V185 = (V183(V184))), (V185(V184)) end end end end}, fun (V186) -> fun (V187) -> V187 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V160))), {'Prelude.Types.Right', V188} end end end), V189 end(V156)) end end end end; 2 -> begin (V190 = ('un--build'(V5, V4, V3, V20, V2))), fun (V191) -> begin (V192 = (V190(V191))), case V192 of {'Prelude.Types.Left', V193} -> {'Prelude.Types.Left', V193}; {'Prelude.Types.Right', V194} -> (begin (V224 = case V194 of [] -> ('un--install'(V5, V3, V20, V2, 1)); _ -> fun (V195) -> begin (V223 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V198, V199, V200)) end end end end end, fun (V201) -> fun (V202) -> fun (V203) -> V202 end end end, fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> begin (V209 = (V206(V208))), begin (V210 = (V207(V208))), (V209(V210)) end end end end end end end}, fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> begin (V216 = (V213(V215))), ((V214(V216))(V215)) end end end end end end, fun (V217) -> fun (V218) -> fun (V219) -> begin (V220 = (V218(V219))), (V220(V219)) end end end end}, fun (V221) -> fun (V222) -> V222 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V195))), {'Prelude.Types.Right', V223} end end end), V224 end(V191)) end end end end; 4 -> begin (V225 = ('un--check'(V5, V4, V3, V20, V2))), fun (V226) -> begin (V227 = (V225(V226))), case V227 of {'Prelude.Types.Left', V228} -> {'Prelude.Types.Left', V228}; {'Prelude.Types.Right', V229} -> (begin (V259 = fun (V230) -> case V229 of [] -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; _ -> begin (V258 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V233, V234, V235)) end end end end end, fun (V236) -> fun (V237) -> fun (V238) -> V237 end end end, fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> begin (V244 = (V241(V243))), begin (V245 = (V242(V243))), (V244(V245)) end end end end end end end}, fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> begin (V251 = (V248(V250))), ((V249(V251))(V250)) end end end end end end, fun (V252) -> fun (V253) -> fun (V254) -> begin (V255 = (V253(V254))), (V255(V254)) end end end end}, fun (V256) -> fun (V257) -> V257 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V230))), {'Prelude.Types.Right', V258} end end end), V259 end(V226)) end end end end; 5 -> ('un--clean'(V5, V3, V20, V2)); 6 -> begin (V260 = ('un--build'(V5, V4, V3, V20, V2))), fun (V261) -> begin (V262 = (V260(V261))), case V262 of {'Prelude.Types.Left', V263} -> {'Prelude.Types.Left', V263}; {'Prelude.Types.Right', V264} -> (begin (V328 = case V264 of [] -> ('un--runRepl'(V5, V4, V3, ((begin (V296 = fun (V292) -> fun (V293) -> fun (V294) -> fun (V295) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V294, V295)) end end end end), fun (V297) -> fun (V298) -> ((((V296('erased'))('erased'))(V297))(V298)) end end end(fun (V291) -> ('Idris.Idris2.Builtin':'un--snd'(V291)) end))(case V20 of {'Idris.Package.Types.MkPkgDesc', V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290} -> V278 end)))); _ -> fun (V299) -> begin (V327 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V300) -> fun (V301) -> fun (V302) -> fun (V303) -> fun (V304) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V302, V303, V304)) end end end end end, fun (V305) -> fun (V306) -> fun (V307) -> V306 end end end, fun (V308) -> fun (V309) -> fun (V310) -> fun (V311) -> fun (V312) -> begin (V313 = (V310(V312))), begin (V314 = (V311(V312))), (V313(V314)) end end end end end end end}, fun (V315) -> fun (V316) -> fun (V317) -> fun (V318) -> fun (V319) -> begin (V320 = (V317(V319))), ((V318(V320))(V319)) end end end end end end, fun (V321) -> fun (V322) -> fun (V323) -> begin (V324 = (V322(V323))), (V324(V323)) end end end end}, fun (V325) -> fun (V326) -> V326 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V299))), {'Prelude.Types.Right', V327} end end end), V328 end(V261)) end end end end; 7 -> fun (V329) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V330 end(V81)) end end end end), V331 end(V50)) end end end end), V332 end(V17)) end end end end), V333 end(V12)) end end end end; _ -> begin (V336 = fun (V334) -> begin (V335 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"Packages must have an \x{27}.ipkg\x{27} extension: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V6))/binary, <<"."/utf8>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V334))), {'Prelude.Types.Right', V335} end end), fun (V337) -> begin (V338 = (V336(V337))), case V338 of {'Prelude.Types.Left', V339} -> {'Prelude.Types.Left', V339}; {'Prelude.Types.Right', V340} -> (begin (V370 = fun (V341) -> begin (V369 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V342) -> fun (V343) -> fun (V344) -> fun (V345) -> fun (V346) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V344, V345, V346)) end end end end end, fun (V347) -> fun (V348) -> fun (V349) -> V348 end end end, fun (V350) -> fun (V351) -> fun (V352) -> fun (V353) -> fun (V354) -> begin (V355 = (V352(V354))), begin (V356 = (V353(V354))), (V355(V356)) end end end end end end end}, fun (V357) -> fun (V358) -> fun (V359) -> fun (V360) -> fun (V361) -> begin (V362 = (V359(V361))), ((V360(V362))(V361)) end end end end end end, fun (V363) -> fun (V364) -> fun (V365) -> begin (V366 = (V364(V365))), (V366(V365)) end end end end}, fun (V367) -> fun (V368) -> V368 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V341))), {'Prelude.Types.Right', V369} end end), V370 end(V337)) end end end end end; _ -> fun (V371) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Tried to split empty string"/utf8>>}, V371)) end end; _ -> fun (V372) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Tried to split empty string"/utf8>>}, V372)) end end.
'case--case block in case block in case block in case block in makeDoc-17378'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> begin (V43 = ('un--runScript'(case V1 of {'Idris.Package.Types.MkPkgDesc', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> V38 end))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V49 = fun (V48) -> {'Prelude.Types.Right', []} end), V49 end(V44)) end end end end; _ -> fun (V50) -> {'Prelude.Types.Right', V16} end end.
'case--case block in case block in case block in case block in case block in makeDoc-16509'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Core.FC.PhysicalIdrSrc', V24} -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V13, V24)) of 1 -> fun (V25) -> case ('nested--20545-15901--in--un--visible'(V0, V1, V2, V3, V4, V20)) of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Just', V20}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> begin (V48 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"doc.module.definitions"/utf8>>, 60, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V13))/binary, <<":"/utf8>>/binary>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V20 of {'Core.Context.Context.MkGlobalDef', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V27 end)) | [<<"was defined in"/utf8>> | [('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V24)) | []]]]])) end))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V54 = fun (V53) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V54 end(V49)) end end end end end; _ -> fun (V55) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'case--case block in case block in case block in case block in makeDoc-16457'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Prelude.Types.Just', V23} -> ('case--case block in case block in case block in case block in case block in makeDoc-16509'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V23, ('Idris.Idris2.Core.FC':'un--origin'(V23)))); _ -> begin (V46 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"doc.module.definitions"/utf8>>, 70, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V13))/binary, <<":"/utf8>>/binary>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V20 of {'Core.Context.Context.MkGlobalDef', V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V25 end)) | [<<"has an empty FC"/utf8>> | []]]])) end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V52 = fun (V51) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V52 end(V47)) end end end end end.
'case--installSrcFrom-14931'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Prelude.Types.Just', V8} -> begin (V9 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ('Idris.Idris2.Data.List':'un--tail\x{27}'(('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V0))))))))), begin (V10 = ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V9))), begin (V11 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, V10))), begin (V12 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V5, V8))))), begin (V15 = fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V11, V13))), {'Prelude.Types.Right', V14} end end), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V178 = case V19 of {'Prelude.Types.Right', V20} -> begin (V26 = fun (V21) -> begin (V25 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<(begin (V23 = fun (V22) -> V22 end), fun (V24) -> (V23(V24)) end end(<<"Installing "/utf8>>))/binary, <<V6/binary, <<<<" to "/utf8>>/binary, V11/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V21))), {'Prelude.Types.Right', V25} end end), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V169 = begin (V78 = begin (V33 = fun (V31) -> begin (V32 = ('Idris.Idris2.Compiler.Common':'un--exists'(V12, V31))), {'Prelude.Types.Right', V32} end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V77 = case V37 of 1 -> begin (V67 = fun (V38) -> begin (V66 = (('Idris.Idris2.Erlang.System.File':'un--chmod'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> V45 end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), begin (V53 = (V50(V51))), (V52(V53)) end end end end end end end}, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), ((V57(V59))(V58)) end end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V61(V62))), (V63(V62)) end end end end}, fun (V64) -> fun (V65) -> V65 end end}, V12, {'Erlang.System.File.MkPermissions', [0 | [1 | []]], [0 | [1 | []]], [0 | [1 | []]]}))(V38))), {'Prelude.Types.Right', V66} end end), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V75 = fun (V72) -> case V71 of {'Prelude.Types.Right', V73} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; {'Prelude.Types.Left', V74} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.UserError', ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V74))}, V72)) end end), V75 end(V68)) end end end end; 0 -> fun (V76) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V77 end(V34)) end end end end), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V168 = begin (V112 = fun (V83) -> begin (V111 = (('Idris.Idris2.Erlang.System.File':'un--copyFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> V90 end end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V94(V96))), begin (V98 = (V95(V96))), (V97(V98)) end end end end end end end}, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), ((V102(V104))(V103)) end end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V106(V107))), (V108(V107)) end end end end}, fun (V109) -> fun (V110) -> V110 end end}, V6, V12))(V83))), {'Prelude.Types.Right', V111} end end), fun (V113) -> begin (V114 = (V112(V113))), case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> (begin (V167 = case V116 of {'Prelude.Types.Right', V117} -> begin (V147 = fun (V118) -> begin (V146 = (('Idris.Idris2.Erlang.System.File':'un--chmod'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V121, V122, V123)) end end end end end, fun (V124) -> fun (V125) -> fun (V126) -> V125 end end end, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> begin (V132 = (V129(V131))), begin (V133 = (V130(V131))), (V132(V133)) end end end end end end end}, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> begin (V139 = (V136(V138))), ((V137(V139))(V138)) end end end end end end, fun (V140) -> fun (V141) -> fun (V142) -> begin (V143 = (V141(V142))), (V143(V142)) end end end end}, fun (V144) -> fun (V145) -> V145 end end}, V12, {'Erlang.System.File.MkPermissions', [0 | []], [0 | []], [0 | []]}))(V118))), {'Prelude.Types.Right', V146} end end), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V155 = fun (V152) -> case V151 of {'Prelude.Types.Right', V153} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; {'Prelude.Types.Left', V154} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.UserError', ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V154))}, V152)) end end), V155 end(V148)) end end end end; {'Prelude.Types.Left', V156} -> fun (V157) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', ('Idris.Idris2.Data.String':'un--fastUnlines'([<<(begin (V159 = fun (V158) -> V158 end), fun (V160) -> (V159(V160)) end end(<<"Can\x{27}t copy file "/utf8>>))/binary, <<V6/binary, <<<<" to "/utf8>>/binary, V11/binary>>/binary>>/binary>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V161) -> ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V161)) end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Erlang.System.File':'dn--un--showPrec_Show_FileError'(V162, V163)) end end}, {'Prelude.Show.MkShow', fun (V164) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V164)) end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V165, V166)) end end}}, V156)) | []]]))}, V157)) end end), V167 end(V113)) end end end end), V168 end(V79)) end end end end), V169 end(V27)) end end end end; {'Prelude.Types.Left', V170} -> fun (V171) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', ('Idris.Idris2.Data.String':'un--fastUnlines'([<<(begin (V173 = fun (V172) -> V172 end), fun (V174) -> (V173(V174)) end end(<<"Can\x{27}t make directories "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V175) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V175)) end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V176, V177)) end end}, V9))/binary>> | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V170)) | []]]))}, V171)) end end), V178 end(V16)) end end end end end end end end; _ -> fun (V179) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Unexpected failure when installing source file:\x{a}"/utf8>>/binary, <<V6/binary, <<"\x{a}Can\x{27}t extract file extension."/utf8>>/binary>>/binary>>}, V179)) end end.
'case--case block in installFrom-14662'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Prelude.Types.Just', V13} -> begin (V14 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V5, V13))))), begin (V15 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V1, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V5, V13))))), case ('Idris.Idris2.Libraries.Utils.Path':'un--splitParent'(V15)) of {'Prelude.Types.Just', V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> begin (V19 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V17))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V14, V15}}} end), V25 end(V20)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V26) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; {'Prelude.Types.Nothing'} -> fun (V27) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'case--assertIdrisCompatibility-14018'(V0, V1, V2) -> case V1 of {'Prelude.Types.Just', V3} -> case ('Idris.Idris2.Idris.Package.Types.Version':'un--inBounds'(('Idris.Idris2.Idris.Version':'un--version'()), V3)) of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', ('Idris.Idris2.Core.FC':'un--emptyFC'()), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> <<V4/binary, V5/binary>> end end, <<""/utf8>>}, fun (V6) -> V6 end, [case V0 of {'Idris.Package.Types.MkPkgDesc', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> V7 end | [<<" requires Idris2 "/utf8>> | [('Idris.Idris2.Idris.Package.Types':'dn--un--show_Show_PkgVersionBounds'(V3)) | [<<" but the installed version of Idris2 is "/utf8>> | [('Idris.Idris2.Libraries.Data.Version':'dn--un--show_Show_Version'(('Idris.Idris2.Idris.Version':'un--version'()))) | [<<"."/utf8>> | []]]]]]]))}, V2)) end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end.
'nested--20545-15901--in--un--visible'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.Context.Context.MkGlobalDef', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} -> case V23 of {'Core.Context.Context.DCon', V28, V29, V30} -> 0; _ -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(case V5 of {'Core.Context.Context.MkGlobalDef', V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} -> V40 end, 0)) end end.
'nested--17647-13273--in--un--toSource'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> begin (V9 = ('Idris.Idris2.Core.Directory':'un--nsToSource'(V5, V7, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', {'Builtin.MkPair', V8, V13}} end), V15 end(V10)) end end end end end.
'nested--14864-10569--in--un--strField'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V3) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(V2)))), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V13) -> {'Libraries.Text.Parser.Core.Empty', ((V1({'Core.FC.MkFC', {'Core.FC.PhysicalPkgSrc', V0}, V3, V13}))(V12))} end} end end} end} end} end}.
'nested--20099-15480--in--un--savePkgMetadata'(V0, V1, V2, V3, V4, V5) -> case ('Idris.Idris2.Idris.Package.Types':'un--initPkgDesc'(case V5 of {'Idris.Package.Types.MkPkgDesc', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} -> V6 end)) of {'Idris.Package.Types.MkPkgDesc', V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> {'Idris.Package.Types.MkPkgDesc', V32, case V5 of {'Idris.Package.Types.MkPkgDesc', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83} -> V59 end, V34, V35, V36, V37, V38, V39, V40, V41, V42, case V5 of {'Idris.Package.Types.MkPkgDesc', V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109} -> V95 end, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} end.
'nested--24345-19323--in--un--pOptUpdate'(V0, V1, V2) -> ('with--partitionOpts,pOptUpdate-19377'(V0, V1, ('nested--24345-19322--in--un--optType'(V0, V1)), V2)).
'nested--24345-19322--in--un--optType'(V0, V1) -> case V1 of {'Idris.CommandLine.Package', V2, V3} -> {'Idris.Package.nested--24345-19318--in--un--PPackage', V0, V2, V3}; {'Idris.CommandLine.Quiet'} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.Verbose'} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.Timing', V4} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.Logging', V5} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.CaseTreeHeuristics'} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.DumpANF', V6} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.DumpCases', V7} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.DumpLifted', V8} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.DumpVMCode', V9} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.DebugElabCheck'} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.SetCG', V10} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.IncrementalCG', V11} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.Directive', V12} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.BuildDir', V13} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.OutputDir', V14} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.WarningsAsErrors'} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.HashesInsteadOfModTime'} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.Profile'} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.ChangedModules', V15} -> {'Idris.Package.nested--24345-19319--in--un--POpt', V0}; {'Idris.CommandLine.ConsoleWidth', V16} -> {'Idris.Package.nested--24345-19320--in--un--PIgnore', V0}; {'Idris.CommandLine.Color', V17} -> {'Idris.Package.nested--24345-19320--in--un--PIgnore', V0}; {'Idris.CommandLine.NoBanner'} -> {'Idris.Package.nested--24345-19320--in--un--PIgnore', V0}; _ -> {'Idris.Package.nested--24345-19321--in--un--PErr', V0} end.
'nested--14864-10566--in--un--mkBound'(V0, V1, V2) -> case V1 of [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Package.nested--14864-10563--in--un--LT', V5, V6, V7} -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('nested--14864-10566--in--un--mkBound'(V0, V4, case V2 of {'Idris.Package.Types.MkPkgVersionBounds', V8, V9, V10, V11} -> {'Idris.Package.Types.MkPkgVersionBounds', V8, V9, {'Prelude.Types.Just', V6}, V7} end)) end, fun () -> fun (V12) -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Dependency already has an upper bound"/utf8>>} end end, case V2 of {'Idris.Package.Types.MkPkgVersionBounds', V13, V14, V15, V16} -> V15 end)); {'Idris.Package.nested--14864-10564--in--un--GT', V17, V18, V19} -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('nested--14864-10566--in--un--mkBound'(V0, V4, case V2 of {'Idris.Package.Types.MkPkgVersionBounds', V20, V21, V22, V23} -> {'Idris.Package.Types.MkPkgVersionBounds', {'Prelude.Types.Just', V18}, V19, V22, V23} end)) end, fun () -> fun (V24) -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Dependency already has a lower bound"/utf8>>} end end, case V2 of {'Idris.Package.Types.MkPkgVersionBounds', V25, V26, V27, V28} -> V25 end)) end end(E0, E1)); [] -> {'Libraries.Text.Parser.Core.Empty', V2} end.
'nested--14864-10567--in--un--langversions'(V0) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('Idris.Idris2.Parser.Rule.Package':'un--andop'()), ('nested--14864-10565--in--un--bound'(V0)))), fun (V1) -> ('nested--14864-10566--in--un--mkBound'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V2, V3)) end end, []}, fun (V4) -> V4 end, V1)), ('Idris.Idris2.Idris.Package.Types':'un--anyBounds'()))) end}.
'nested--22544-17685--in--un--go'(V0, V1, V2, V3, V4) -> begin (V5 = V4), begin (V63 = ('un--bitraverseC'((V1(V3)), fun (V6) -> ('Idris.Idris2.Core.Core':'un--foldlC'({'Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> V27 end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, fun (V33) -> fun (V34) -> case V34 of {'Builtin.MkPair', V35, V36} -> begin (V37 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, [V35 | []]))), begin (V38 = ('nested--22544-17685--in--un--go'(V0, V1, V2, V37, V36))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V60 = begin (V43 = (V2(V37))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V59 = fun (V48) -> {'Prelude.Types.Right', ((begin (V56 = case V0 of {'Prelude.Interfaces.MkMonoid', V54, V55} -> V54 end), fun (V57) -> fun (V58) -> ((V56(V57))(V58)) end end end(((begin (V51 = case V0 of {'Prelude.Interfaces.MkMonoid', V49, V50} -> V49 end), fun (V52) -> fun (V53) -> ((V51(V52))(V53)) end end end(V33))(V42))))(V47))} end), V59 end(V44)) end end end end), V60 end(V39)) end end end end end end end end, case V0 of {'Prelude.Interfaces.MkMonoid', V61, V62} -> V62 end, ('Idris.Idris2.Libraries.Data.StringMap':'un--toList'(V6)))) end, V5))), ((begin (V79 = fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V76, V77, V78)) end end end end end), fun (V80) -> fun (V81) -> ((((V79('erased'))('erased'))(V80))(V81)) end end end((begin (V71 = fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> {'Prelude.Types.Right', (V67(V70))} end end end end end), fun (V72) -> fun (V73) -> ((((V71('erased'))('erased'))(V72))(V73)) end end end(fun (V64) -> ('Idris.Idris2.Data.These':'un--bifold'(V0, V64)) end))))(V63)) end end.
'nested--17647-13274--in--un--go'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> fun (V10) -> {'Prelude.Types.Right', V9} end; [E0 | E1] -> (fun (V11, V12) -> begin (V13 = ('un--addField'(V5, V4, V3, V6, V7, V11, V9))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V18 = ('nested--17647-13274--in--un--go'(V0, V1, V2, V3, V4, V5, V6, V7, V12, V17))), V18 end(V14)) end end end end end(E0, E1)) end.
'nested--20545-15902--in--un--fileError'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Prelude.Types.Right', [{'Core.Core.FileErr', V5, V6} | []]}.
'nested--14864-10568--in--un--depends'(V0) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()), fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('Idris.Idris2.Parser.Rule.Package':'un--andop'()), ('nested--14864-10565--in--un--bound'(V0)))), fun (V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('nested--14864-10566--in--un--mkBound'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, V4)) end end, []}, fun (V5) -> V5 end, V2)), ('Idris.Idris2.Idris.Package.Types':'un--anyBounds'()))), fun (V6) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Package.Types.MkDepends', V1, V6}} end} end} end end}.
'nested--22682-17809--in--un--deleteFolder'(V0, V1, V2, V3, V4, V5) -> ('nested--22682-17808--in--un--delete'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V5)))))).
'nested--22682-17810--in--un--deleteBin'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V5)))), V6))), begin (V8 = ('nested--22682-17808--in--un--delete'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V7, <<"ttc"/utf8>>))))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V13 = ('nested--22682-17808--in--un--delete'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V7, <<"ttm"/utf8>>))))), V13 end(V9)) end end end end end.
'nested--22682-17808--in--un--delete'(V0, V1, V2, V3, V4) -> begin (V34 = fun (V5) -> begin (V33 = (('Idris.Idris2.Erlang.System.File':'un--removeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V4))(V5))), {'Prelude.Types.Right', V33} end end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V43 = fun (V39) -> case V38 of {'Prelude.Types.Right', V40} -> begin (V41 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"Removed: "/utf8>>/binary, V4/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V39))), {'Prelude.Types.Right', V41} end; {'Prelude.Types.Left', V42} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V43 end(V35)) end end end end.
'nested--14864-10565--in--un--bound'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--lte'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.Empty', [{'Idris.Package.nested--14864-10563--in--un--LT', V0, ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V2)) end))(V1)), 1} | []]} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--gte'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V10) -> {'Libraries.Text.Parser.Core.Empty', [{'Idris.Package.nested--14864-10564--in--un--GT', V0, ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V11)) end))(V10)), 1} | []]} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--lt'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V19) -> {'Libraries.Text.Parser.Core.Empty', [{'Idris.Package.nested--14864-10563--in--un--LT', V0, ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V20) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V20)) end))(V19)), 0} | []]} end end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--gt'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V28) -> {'Libraries.Text.Parser.Core.Empty', [{'Idris.Package.nested--14864-10564--in--un--GT', V0, ((begin (V34 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V32, V33)) end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V29) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V29)) end))(V28)), 0} | []]} end end} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--eqop'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V37) -> {'Libraries.Text.Parser.Core.Empty', [{'Idris.Package.nested--14864-10563--in--un--LT', V0, ((begin (V43 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V41, V42)) end end end end), fun (V44) -> fun (V45) -> ((((V43('erased'))('erased'))(V44))(V45)) end end end(fun (V38) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V38)) end))(V37)), 1} | [{'Idris.Package.nested--14864-10564--in--un--GT', V0, ((begin (V51 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V49, V50)) end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(fun (V46) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V46)) end))(V37)), 1} | []]]} end end} end} end} end} end} end}.
'un--runScript'(V0) -> case V0 of {'Prelude.Types.Nothing'} -> fun (V1) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Prelude.Types.Just', V2} -> case V2 of {'Builtin.MkPair', V3, V4} -> begin (V34 = fun (V5) -> begin (V33 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V4))(V5))), {'Prelude.Types.Right', V33} end end), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V41 = fun (V39) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V38, begin (V40 = 0), case ((V40 band 9223372036854775808) =/= 0) of 'true' -> (V40 bor -9223372036854775808); _ -> (V40 band 9223372036854775807) end end)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V3, <<"Script failed"/utf8>>}, V39)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V41 end(V35)) end end end end end end.
'un--runRepl'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'())))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V44 = begin (V18 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V9) -> {'Prelude.Types.Right', {'Core.FC.Virtual', {'Core.FC.Interactive'}}} end end, fun () -> fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V10))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Core.FC.PhysicalIdrSrc', V15}} end), V17 end(V12)) end end end end end end, V3))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V43 = begin (V23 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'(V22))))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V42 = begin (V36 = case V3 of {'Prelude.Types.Nothing'} -> fun (V28) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Prelude.Types.Just', V29} -> begin (V30 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V0, V8, V1, V27, V2, V29))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V35 = ('Idris.Idris2.Idris.REPL':'un--displayErrors'(V0, V8, V1, V27, V2, V34))), V35 end(V31)) end end end end end), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V41 = ('Idris.Idris2.Idris.REPL':'un--repl'(V0, V8, V1, V27, V2))), V41 end(V37)) end end end end), V42 end(V24)) end end end end), V43 end(V19)) end end end end), V44 end(V5)) end end end end.
'un--processPackageOpts'(V0, V1, V2, V3) -> begin (V5 = fun (V4) -> {'Prelude.Types.Right', ('un--partitionOpts'(V3))} end), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V27 = case V9 of {'Idris.Package.MkPFR', V10, V11, V12} -> case V10 of [E0 | E1] -> (fun (V13, V14) -> begin (V19 = begin (V15 = [V13 | V14]), case V12 of 1 -> fun (V16) -> begin (V17 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('un--errorMsg'())/binary, <<"\x{a}"/utf8>>/binary>>, V16))), {'Prelude.Types.Right', V17} end end; 0 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V18) -> ('un--processPackage'(V0, V1, V2, V11, V18)) end, V15)) end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', 1} end), V25 end(V20)) end end end end end(E0, E1)); [] -> fun (V26) -> {'Prelude.Types.Right', 0} end end end), V27 end(V6)) end end end end.
'un--processPackage'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> ('Idris.Idris2.Core.Context':'un--withCtxt'(V0, ('Idris.Idris2.Idris.Syntax':'un--withSyn'(V1, ('Idris.Idris2.Idris.REPL.Opts':'un--withROpts'(V2, case V5 of 7 -> begin (V9 = fun (V7) -> begin (V8 = ('Idris.Idris2.Idris.Package.Init':'un--interactive'(V7))), {'Prelude.Types.Right', V8} end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V88 = begin (V40 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<case V13 of {'Idris.Package.Types.MkPkgDesc', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> V14 end/binary, <<".ipkg"/utf8>>/binary>> end, V6))), begin (V43 = fun (V41) -> begin (V42 = ('Idris.Idris2.Compiler.Common':'un--exists'(V40, V41))), {'Prelude.Types.Right', V42} end end), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V87 = case V47 of 0 -> begin (V77 = fun (V48) -> begin (V76 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> V55 end end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), begin (V63 = (V60(V61))), (V62(V63)) end end end end end end end}, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), ((V67(V69))(V68)) end end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V71(V72))), (V73(V72)) end end end end}, fun (V74) -> fun (V75) -> V75 end end}, V40, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Idris.Package.Types':'dn--un--pretty_Pretty_Void_PkgDesc'(V13))))))(V48))), {'Prelude.Types.Right', V76} end end), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V85 = fun (V82) -> case V81 of {'Prelude.Types.Right', V83} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; {'Prelude.Types.Left', V84} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V40, V84}, V82)) end end), V85 end(V78)) end end end end; _ -> fun (V86) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', ('Idris.Idris2.Core.FC':'un--emptyFC'()), <<<<"File "/utf8>>/binary, <<V40/binary, <<" already exists"/utf8>>/binary>>/binary>>}, V86)) end end), V87 end(V44)) end end end end end), V88 end(V10)) end end end end; _ -> begin (V89 = ('un--localPackageFile'(V6))), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V94 = ('case--case block in processPackage-18548'(V5, V6, V3, V2, V1, V0, V93, ('Idris.Idris2.Libraries.Utils.Path':'un--splitParent'(V93))))), V94 end(V90)) end end end end end)))))) end.
'un--processOptions'(V0, V1, V2) -> case V2 of {'Prelude.Types.Nothing'} -> fun (V3) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Prelude.Types.Just', V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> case ('Idris.Idris2.Idris.CommandLine':'un--getOpts'(('Idris.Idris2.Data.String':'un--words'(V6)))) of {'Prelude.Types.Right', V7} -> begin (V8 = ('Idris.Idris2.Idris.SetOptions':'un--preOptions'(V0, V1, V7))), ((begin (V24 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V21, V22, V23)) end end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end((begin (V16 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> {'Prelude.Types.Right', (V12(V15))} end end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V9) -> {'Builtin.MkUnit'} end))))(V8)) end; {'Prelude.Types.Left', V27} -> fun (V28) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V5, V27}, V28)) end end end end.
'un--prepareCompilation'(V0, V1, V2, V3, V4) -> begin (V31 = ('un--processOptions'(V0, V2, case V3 of {'Idris.Package.Types.MkPkgDesc', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} -> V21 end))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V260 = begin (V36 = ('un--addDeps'(V0, V3))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V259 = begin (V60 = begin (V41 = ('Idris.Idris2.Idris.SetOptions':'un--preOptions'(V0, V2, V4))), ((begin (V57 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V54, V55, V56)) end end end end end), fun (V58) -> fun (V59) -> ((((V57('erased'))('erased'))(V58))(V59)) end end end((begin (V49 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> {'Prelude.Types.Right', (V45(V48))} end end end end end), fun (V50) -> fun (V51) -> ((((V49('erased'))('erased'))(V50))(V51)) end end end(fun (V42) -> {'Builtin.MkUnit'} end))))(V41)) end), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V258 = begin (V91 = ('un--runScript'(case V3 of {'Idris.Package.Types.MkPkgDesc', V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90} -> V85 end))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V257 = begin (V191 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ((begin (V127 = fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V125, V126)) end end end end), fun (V128) -> fun (V129) -> ((((V127('erased'))('erased'))(V128))(V129)) end end end(fun (V122) -> ('Idris.Idris2.Builtin':'un--snd'(V122)) end))(case V3 of {'Idris.Package.Types.MkPkgDesc', V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121} -> V108 end)) end, fun () -> fun (V130) -> [('Idris.Idris2.Builtin':'un--snd'(V130)) | ((begin (V162 = fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V160, V161)) end end end end), fun (V163) -> fun (V164) -> ((((V162('erased'))('erased'))(V163))(V164)) end end end(fun (V157) -> ('Idris.Idris2.Builtin':'un--snd'(V157)) end))(case V3 of {'Idris.Package.Types.MkPkgDesc', V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156} -> V143 end))] end end, case V3 of {'Idris.Package.Types.MkPkgDesc', V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190} -> V178 end))), begin (V192 = ('Idris.Idris2.Idris.ModTree':'un--getAllBuildMods'(V0, V1, V2, V191))), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V256 = begin (V197 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V198) -> begin (V199 = (V197(V198))), case V199 of {'Prelude.Types.Left', V200} -> {'Prelude.Types.Left', V200}; {'Prelude.Types.Right', V201} -> (begin (V255 = case V201 of {'Core.Options.MkSessionOpts', V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227} -> case V209 of {'Prelude.Types.Just', V228} -> begin (V229 = ('un--filterChangedModules'(('Idris.Idris2.Data.List1':'un--forget'(V228)), V196))), begin (V230 = ('Idris.Idris2.Idris.ModTree':'un--buildAll'(V0, V1, V2, V229))), fun (V231) -> begin (V232 = (V230(V231))), case V232 of {'Prelude.Types.Left', V233} -> {'Prelude.Types.Left', V233}; {'Prelude.Types.Right', V234} -> (begin (V247 = fun (V235) -> {'Prelude.Types.Right', {'Builtin.MkPair', V234, {'Prelude.Types.Just', ((begin (V244 = fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V242, V243)) end end end end), fun (V245) -> fun (V246) -> ((((V244('erased'))('erased'))(V245))(V246)) end end end(fun (V236) -> case V236 of {'Idris.ModTree.MkBuildMod', V237, V238, V239} -> V238 end end))(V229))}}} end), V247 end(V231)) end end end end end; {'Prelude.Types.Nothing'} -> begin (V248 = ('Idris.Idris2.Idris.ModTree':'un--buildAll'(V0, V1, V2, V196))), fun (V249) -> begin (V250 = (V248(V249))), case V250 of {'Prelude.Types.Left', V251} -> {'Prelude.Types.Left', V251}; {'Prelude.Types.Right', V252} -> (begin (V254 = fun (V253) -> {'Prelude.Types.Right', {'Builtin.MkPair', V252, {'Prelude.Types.Nothing'}}} end), V254 end(V249)) end end end end end end), V255 end(V198)) end end end end), V256 end(V193)) end end end end end), V257 end(V92)) end end end end), V258 end(V61)) end end end end), V259 end(V37)) end end end end), V260 end(V32)) end end end end.
'un--partitionOpts'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V1) -> fun (V2) -> ('nested--24345-19323--in--un--pOptUpdate'(V0, V1, V2)) end end, {'Idris.Package.MkPFR', [], [], 0}, V0)).
'un--parsePkgFile'(V0, V1, V2, V3, V4) -> begin (V24 = fun (V5) -> begin (V23 = ('Idris.Idris2.Parser.Package':'un--parseFile'(V4, {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V6) -> fun (V7) -> V6 end end))(('un--parsePkgDesc'(V4)))), fun (V15) -> ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(V15))(('Idris.Idris2.Parser.Rule.Package':'un--eoi'()))) end}, V5))), {'Prelude.Types.Right', V23} end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V34 = case V28 of {'Prelude.Types.Right', V29} -> case V29 of {'Builtin.MkPair', V30, V31} -> ('un--addFields'(V0, V1, V2, V3, V31, ('Idris.Idris2.Idris.Package.Types':'un--initPkgDesc'(V30)))) end; {'Prelude.Types.Left', V32} -> fun (V33) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V32, V33)) end end), V34 end(V25)) end end end end.
'un--parsePkgDesc'(V0) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"package"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()), fun () -> fun (V9) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--field'(V0)))), fun (V10) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', V9, V10}} end} end end} end}.
'un--makeDoc'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--prepareCompilation'(V0, V1, V2, V3, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V734 = case V9 of {'Builtin.MkPair', V10, V11} -> case V10 of [] -> begin (V17 = begin (V12 = V0), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V732 = begin (V74 = case V21 of {'Core.Context.MkDefs', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} -> case V26 of {'Core.Options.MkOptions', V54, V55, V56, V57, V58, V59, V60, V61, V62, V63} -> case V54 of {'Core.Options.MkDirs', V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} -> V66 end end end), begin (V75 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V74, <<"docs"/utf8>>))), begin (V76 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V75, <<"docs"/utf8>>))), begin (V79 = fun (V77) -> begin (V78 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V76, V77))), {'Prelude.Types.Right', V78} end end), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V731 = begin (V84 = {'Builtin.MkPair', [], V11}), case V83 of {'Prelude.Types.Right', V85} -> begin (V86 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'())))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V728 = begin (V91 = ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, {'Core.Options.MkPPOpts', 0, 1, 0, 0}))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V727 = begin (V614 = begin (V592 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V96, V97, [])) end end, case V3 of {'Idris.Package.Types.MkPkgDesc', V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123} -> V110 end, fun (V124) -> begin (V125 = {'Prelude.Types.Right', {'Builtin.MkUnit'}}), case V124 of {'Builtin.MkPair', V126, V127} -> begin (V128 = ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V126))), begin (V129 = ('Idris.Idris2.Idris.ProcessIdr':'un--addImport'(V0, V90, V1, {'Idris.Syntax.MkImport', ('Idris.Idris2.Core.FC':'un--emptyFC'()), 0, V126, V128}))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V591 = begin (V139 = begin (V134 = V0), fun (V135) -> begin (V138 = (begin (V136 = V134), fun (V137) -> ('erlang':'get'(V136)) end end(V135))), {'Prelude.Types.Right', V138} end end end), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V590 = begin (V176 = case V143 of {'Core.Context.MkDefs', V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175} -> V144 end), begin (V287 = begin (V268 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V177, V178, [])) end end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_$a'({'Builtin.MkPair', {'Prelude.Num.MkIntegral', {'Prelude.Num.MkNum', fun (V179) -> fun (V180) -> begin (V181 = (V179 + V180)), case ((V181 band 9223372036854775808) =/= 0) of 'true' -> (V181 bor -9223372036854775808); _ -> (V181 band 9223372036854775807) end end end end, fun (V182) -> fun (V183) -> begin (V184 = (V182 * V183)), case ((V184 band 9223372036854775808) =/= 0) of 'true' -> (V184 bor -9223372036854775808); _ -> (V184 band 9223372036854775807) end end end end, fun (V185) -> begin (V186 = V185), case ((V186 band 9223372036854775808) =/= 0) of 'true' -> (V186 bor -9223372036854775808); _ -> (V186 band 9223372036854775807) end end end}, fun (V187) -> fun (V188) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V187, V188)) end end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V189, V190)) end end}, {'Builtin.MkPair', {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V191) -> fun (V192) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V191, V192)) end end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V193, V194)) end end}, fun (V195) -> fun (V196) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V195, V196)) end end, fun (V197) -> fun (V198) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V197, V198)) end end, fun (V199) -> fun (V200) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V199, V200)) end end, fun (V201) -> fun (V202) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V201, V202)) end end, fun (V203) -> fun (V204) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V203, V204)) end end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V205, V206)) end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V207, V208)) end end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V209) -> fun (V210) -> begin (V211 = (V209 + V210)), case ((V211 band 9223372036854775808) =/= 0) of 'true' -> (V211 bor -9223372036854775808); _ -> (V211 band 9223372036854775807) end end end end, fun (V212) -> fun (V213) -> begin (V214 = (V212 * V213)), case ((V214 band 9223372036854775808) =/= 0) of 'true' -> (V214 bor -9223372036854775808); _ -> (V214 band 9223372036854775807) end end end end, fun (V215) -> begin (V216 = V215), case ((V216 band 9223372036854775808) =/= 0) of 'true' -> (V216 bor -9223372036854775808); _ -> (V216 band 9223372036854775807) end end end}, fun (V217) -> begin (V218 = (0 - V217)), case ((V218 band 9223372036854775808) =/= 0) of 'true' -> (V218 bor -9223372036854775808); _ -> (V218 band 9223372036854775807) end end end, fun (V219) -> fun (V220) -> begin (V221 = (V219 - V220)), case ((V221 band 9223372036854775808) =/= 0) of 'true' -> (V221 bor -9223372036854775808); _ -> (V221 band 9223372036854775807) end end end end}}}, 1, begin (V234 = (case V176 of {'Core.Context.Context.MkContext', V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233} -> V223 end - 1)), case ((V234 band 9223372036854775808) =/= 0) of 'true' -> (V234 bor -9223372036854775808); _ -> (V234 band 9223372036854775807) end end)), fun (V235) -> begin (V236 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', V235}, V176))), fun (V237) -> begin (V238 = (V236(V237))), case V238 of {'Prelude.Types.Left', V239} -> {'Prelude.Types.Left', V239}; {'Prelude.Types.Right', V240} -> (begin (V267 = begin (V241 = {'Builtin.MkPair', V126, V127}), case V240 of {'Prelude.Types.Just', V242} -> begin (V243 = {'Prelude.Types.Just', V242}), ('case--case block in case block in case block in case block in makeDoc-16457'(V4, V3, V2, V1, V0, V11, V84, V21, V74, V75, V76, V125, V90, V126, V127, V241, V128, V143, V176, V235, V242, V243, ('Idris.Idris2.Core.FC':'un--isNonEmptyFC'(case V242 of {'Core.Context.Context.MkGlobalDef', V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265} -> V244 end)))) end; _ -> fun (V266) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end), V267 end(V237)) end end end end end))), ((begin (V284 = fun (V279) -> fun (V280) -> fun (V281) -> fun (V282) -> fun (V283) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V281, V282, V283)) end end end end end), fun (V285) -> fun (V286) -> ((((V284('erased'))('erased'))(V285))(V286)) end end end((begin (V276 = fun (V270) -> fun (V271) -> fun (V272) -> fun (V273) -> case V273 of {'Prelude.Types.Left', V274} -> {'Prelude.Types.Left', V274}; {'Prelude.Types.Right', V275} -> {'Prelude.Types.Right', (V272(V275))} end end end end end), fun (V277) -> fun (V278) -> ((((V276('erased'))('erased'))(V277))(V278)) end end end(fun (V269) -> ('Idris.Idris2.Data.List':'un--catMaybes'(V269)) end))))(V268)) end), fun (V288) -> begin (V289 = (V287(V288))), case V289 of {'Prelude.Types.Left', V290} -> {'Prelude.Types.Left', V290}; {'Prelude.Types.Right', V291} -> (begin (V589 = begin (V292 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V76, <<('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V126))/binary, <<".html"/utf8>>/binary>>))), begin (V381 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V293) -> fun (V294) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V293, V294, [])) end end, ('Idris.Idris2.Data.List':'un--sortBy'(fun (V295) -> fun (V296) -> ('Idris.Idris2.Prelude.Basics':'un--on'(fun (V297) -> fun (V298) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V299) -> fun (V300) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V299, V300)) end end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V301, V302)) end end}, fun (V303) -> fun (V304) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V303, V304)) end end, fun (V305) -> fun (V306) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V305, V306)) end end, fun (V307) -> fun (V308) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V307, V308)) end end, fun (V309) -> fun (V310) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V309, V310)) end end, fun (V311) -> fun (V312) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V311, V312)) end end, fun (V313) -> fun (V314) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V313, V314)) end end, fun (V315) -> fun (V316) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V315, V316)) end end}, {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V317) -> fun (V318) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V317, V318)) end end, fun (V319) -> fun (V320) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V319, V320)) end end}, fun (V321) -> fun (V322) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V321, V322)) end end, fun (V323) -> fun (V324) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V323, V324)) end end, fun (V325) -> fun (V326) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V325, V326)) end end, fun (V327) -> fun (V328) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V327, V328)) end end, fun (V329) -> fun (V330) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V329, V330)) end end, fun (V331) -> fun (V332) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V331, V332)) end end, fun (V333) -> fun (V334) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V333, V334)) end end}, V297, V298)) end end, fun (V335) -> ('Idris.Idris2.Core.FC':'un--startPos'(('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(case V335 of {'Core.Context.Context.MkGlobalDef', V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357} -> V336 end)))) end, V295, V296)) end end, V291)), fun (V358) -> ('Idris.Idris2.Idris.Doc.String':'un--getDocsForName'(V2, V0, V1, ('Idris.Idris2.Core.FC':'un--emptyFC'()), case V358 of {'Core.Context.Context.MkGlobalDef', V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380} -> V360 end, ('Idris.Idris2.Idris.Doc.String':'un--shortNamesConfig'()))) end))), fun (V382) -> begin (V383 = (V381(V382))), case V383 of {'Prelude.Types.Left', V384} -> {'Prelude.Types.Left', V384}; {'Prelude.Types.Right', V385} -> (begin (V588 = begin (V386 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Doc.Annotations.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(V385))))), begin (V392 = begin (V387 = V1), fun (V388) -> begin (V391 = (begin (V389 = V387), fun (V390) -> ('erlang':'get'(V389)) end end(V388))), {'Prelude.Types.Right', V391} end end end), fun (V393) -> begin (V394 = (V392(V393))), case V394 of {'Prelude.Types.Left', V395} -> {'Prelude.Types.Left', V395}; {'Prelude.Types.Right', V396} -> (begin (V587 = begin (V410 = ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V126, case V396 of {'Idris.Syntax.MkSyntax', V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409} -> V400 end))), begin (V420 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V412 = fun (V411) -> V411 end), fun (V413) -> (V412(V413)) end end(<<"doc.module"/utf8>>)), 10, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([(begin (V415 = fun (V414) -> V414 end), fun (V416) -> (V415(V416)) end end(<<"Looked up doc for"/utf8>>)) | [('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V126)) | [<<"and got:"/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V417) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V417)) end, fun (V418) -> fun (V419) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V418, V419)) end end}, V410)) | []]]]])) end))), fun (V421) -> begin (V422 = (V420(V421))), case V422 of {'Prelude.Types.Left', V423} -> {'Prelude.Types.Left', V423}; {'Prelude.Types.Right', V424} -> (begin (V586 = begin (V447 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V426 = fun (V425) -> V425 end), fun (V427) -> (V426(V427)) end end(<<"doc.module"/utf8>>)), 100, fun () -> <<<<"from: "/utf8>>/binary, ('Idris.Idris2.Libraries.Data.SortedMap':'dn--un--show_Show_((SortedMap $k) $v)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V428) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V428)) end, fun (V429) -> fun (V430) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--showPrec_Show_ModuleIdent'(V429, V430)) end end}, {'Prelude.Show.MkShow', fun (V431) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V431)) end, fun (V432) -> fun (V433) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V432, V433)) end end}}, case V396 of {'Idris.Syntax.MkSyntax', V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446} -> V437 end))/binary>> end))), fun (V448) -> begin (V449 = (V447(V448))), case V449 of {'Prelude.Types.Left', V450} -> {'Prelude.Types.Left', V450}; {'Prelude.Types.Right', V451} -> (begin (V585 = begin (V481 = ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V126, case V396 of {'Idris.Syntax.MkSyntax', V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464} -> V456 end)), fun (V465) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V466) -> fun (V467) -> fun (V468) -> fun (V469) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V468, V469)) end end end end, fun (V470) -> fun (V471) -> {'Prelude.Types.Just', V471} end end, fun (V472) -> fun (V473) -> fun (V474) -> fun (V475) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V474, V475)) end end end end}, fun (V476) -> {'Prelude.Types.Nothing'} end, fun (V477) -> fun (V478) -> fun (V479) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V478, V479)) end end end}, case ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V465)) of 1 -> 0; 0 -> 1 end)), fun (V480) -> {'Prelude.Types.Just', V465} end)) end))), begin (V493 = case V481 of {'Prelude.Types.Just', V482} -> ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V484 = fun (V483) -> V483 end), fun (V485) -> (V484(V485)) end end(<<"doc.module"/utf8>>)), 15, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([(begin (V487 = fun (V486) -> V486 end), fun (V488) -> (V487(V488)) end end(<<"All imported:"/utf8>>)) | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V489) -> ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_Import'(V489)) end, fun (V490) -> fun (V491) -> ('Idris.Idris2.Idris.Syntax':'dn--un--showPrec_Show_Import'(V490, V491)) end end}, V482)) | []]])) end)); {'Prelude.Types.Nothing'} -> fun (V492) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V494) -> begin (V495 = (V493(V494))), case V495 of {'Prelude.Types.Left', V496} -> {'Prelude.Types.Left', V496}; {'Prelude.Types.Right', V497} -> (begin (V584 = begin (V514 = ((begin (V511 = fun (V507) -> fun (V508) -> fun (V509) -> fun (V510) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V509, V510)) end end end end), fun (V512) -> fun (V513) -> ((((V511('erased'))('erased'))(V512))(V513)) end end end((begin (V504 = fun (V500) -> fun (V501) -> fun (V502) -> fun (V503) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V502, V503)) end end end end), fun (V505) -> fun (V506) -> ((((V504('erased'))('erased'))(V505))(V506)) end end end(fun (V498) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--reAnnotate'(fun (V499) -> {'Idris.Doc.Annotations.Syntax', V499} end, ('Idris.Idris2.Idris.Pretty':'un--prettyImport'(V498)))) end))))(V481))), begin (V572 = begin (V537 = ('Idris.Idris2.Idris.Doc.HTML':'un--renderModuleDoc'(V0, V126, V410, V514, ((begin (V534 = fun (V530) -> fun (V531) -> fun (V532) -> fun (V533) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V532, V533)) end end end end), fun (V535) -> fun (V536) -> ((((V534('erased'))('erased'))(V535))(V536)) end end end(fun (V529) -> V386 end))(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V515) -> fun (V516) -> fun (V517) -> fun (V518) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V517, V518)) end end end end, fun (V519) -> fun (V520) -> {'Prelude.Types.Just', V520} end end, fun (V521) -> fun (V522) -> fun (V523) -> fun (V524) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V523, V524)) end end end end}, fun (V525) -> {'Prelude.Types.Nothing'} end, fun (V526) -> fun (V527) -> fun (V528) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V527, V528)) end end end}, case ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V385)) of 1 -> 0; 0 -> 1 end))))))), fun (V538) -> begin (V539 = (V537(V538))), case V539 of {'Prelude.Types.Left', V540} -> {'Prelude.Types.Left', V540}; {'Prelude.Types.Right', V541} -> (begin (V571 = fun (V542) -> begin (V570 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V543) -> fun (V544) -> fun (V545) -> fun (V546) -> fun (V547) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V545, V546, V547)) end end end end end, fun (V548) -> fun (V549) -> fun (V550) -> V549 end end end, fun (V551) -> fun (V552) -> fun (V553) -> fun (V554) -> fun (V555) -> begin (V556 = (V553(V555))), begin (V557 = (V554(V555))), (V556(V557)) end end end end end end end}, fun (V558) -> fun (V559) -> fun (V560) -> fun (V561) -> fun (V562) -> begin (V563 = (V560(V562))), ((V561(V563))(V562)) end end end end end end, fun (V564) -> fun (V565) -> fun (V566) -> begin (V567 = (V565(V566))), (V567(V566)) end end end end}, fun (V568) -> fun (V569) -> V569 end end}, V292, V541))(V542))), {'Prelude.Types.Right', V570} end end), V571 end(V538)) end end end end), fun (V573) -> begin (V574 = (V572(V573))), case V574 of {'Prelude.Types.Left', V575} -> {'Prelude.Types.Left', V575}; {'Prelude.Types.Right', V576} -> (begin (V583 = fun (V577) -> case V576 of {'Prelude.Types.Right', V578} -> {'Prelude.Types.Right', []}; {'Prelude.Types.Left', V579} -> ('nested--20545-15902--in--un--fileError'(V4, V3, V2, V1, V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V75, (begin (V581 = fun (V580) -> V580 end), fun (V582) -> (V581(V582)) end end(<<"index.html"/utf8>>)))), V579, V577)) end end), V583 end(V573)) end end end end end), V584 end(V494)) end end end end end), V585 end(V448)) end end end end), V586 end(V421)) end end end end end), V587 end(V393)) end end end end end), V588 end(V382)) end end end end end), V589 end(V288)) end end end end end), V590 end(V140)) end end end end), V591 end(V130)) end end end end end end end end))), ((begin (V611 = fun (V606) -> fun (V607) -> fun (V608) -> fun (V609) -> fun (V610) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V608, V609, V610)) end end end end end), fun (V612) -> fun (V613) -> ((((V611('erased'))('erased'))(V612))(V613)) end end end((begin (V603 = fun (V597) -> fun (V598) -> fun (V599) -> fun (V600) -> case V600 of {'Prelude.Types.Left', V601} -> {'Prelude.Types.Left', V601}; {'Prelude.Types.Right', V602} -> {'Prelude.Types.Right', (V599(V602))} end end end end end), fun (V604) -> fun (V605) -> ((((V603('erased'))('erased'))(V604))(V605)) end end end(fun (V593) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V594) -> fun (V595) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V594, V595)) end end, []}, fun (V596) -> V596 end, V593)) end))))(V592)) end), fun (V615) -> begin (V616 = (V614(V615))), case V616 of {'Prelude.Types.Left', V617} -> {'Prelude.Types.Left', V617}; {'Prelude.Types.Right', V618} -> (begin (V726 = begin (V619 = {'Prelude.Types.Right', {'Builtin.MkUnit'}}), case V618 of [] -> begin (V652 = fun (V620) -> begin (V651 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V621) -> fun (V622) -> fun (V623) -> fun (V624) -> fun (V625) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V623, V624, V625)) end end end end end, fun (V626) -> fun (V627) -> fun (V628) -> V627 end end end, fun (V629) -> fun (V630) -> fun (V631) -> fun (V632) -> fun (V633) -> begin (V634 = (V631(V633))), begin (V635 = (V632(V633))), (V634(V635)) end end end end end end end}, fun (V636) -> fun (V637) -> fun (V638) -> fun (V639) -> fun (V640) -> begin (V641 = (V638(V640))), ((V639(V641))(V640)) end end end end end end, fun (V642) -> fun (V643) -> fun (V644) -> begin (V645 = (V643(V644))), (V645(V644)) end end end end}, fun (V646) -> fun (V647) -> V647 end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V75, (begin (V649 = fun (V648) -> V648 end), fun (V650) -> (V649(V650)) end end(<<"index.html"/utf8>>)))), ('Idris.Idris2.Idris.Doc.HTML':'un--renderDocIndex'(V3))))(V620))), {'Prelude.Types.Right', V651} end end), fun (V653) -> begin (V654 = (V652(V653))), case V654 of {'Prelude.Types.Left', V655} -> {'Prelude.Types.Left', V655}; {'Prelude.Types.Right', V656} -> (begin (V724 = begin (V657 = []), case V656 of {'Prelude.Types.Right', V658} -> begin (V709 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V659) -> fun (V660) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V659, V660, [])) end end, ('Idris.Idris2.Idris.Package.Types':'un--cssFiles'()), fun (V661) -> begin (V664 = <<case V661 of {'Idris.Package.Types.MkCSS', V662, V663} -> V663 end/binary, <<".css"/utf8>>/binary>>), begin (V665 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<<<"docs/"/utf8>>/binary, V664/binary>>))), fun (V666) -> begin (V667 = (V665(V666))), case V667 of {'Prelude.Types.Left', V668} -> {'Prelude.Types.Left', V668}; {'Prelude.Types.Right', V669} -> (begin (V708 = begin (V699 = fun (V670) -> begin (V698 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V671) -> fun (V672) -> fun (V673) -> fun (V674) -> fun (V675) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V673, V674, V675)) end end end end end, fun (V676) -> fun (V677) -> fun (V678) -> V677 end end end, fun (V679) -> fun (V680) -> fun (V681) -> fun (V682) -> fun (V683) -> begin (V684 = (V681(V683))), begin (V685 = (V682(V683))), (V684(V685)) end end end end end end end}, fun (V686) -> fun (V687) -> fun (V688) -> fun (V689) -> fun (V690) -> begin (V691 = (V688(V690))), ((V689(V691))(V690)) end end end end end end, fun (V692) -> fun (V693) -> fun (V694) -> begin (V695 = (V693(V694))), (V695(V694)) end end end end}, fun (V696) -> fun (V697) -> V697 end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V75, V664)), V669))(V670))), {'Prelude.Types.Right', V698} end end), fun (V700) -> begin (V701 = (V699(V700))), case V701 of {'Prelude.Types.Left', V702} -> {'Prelude.Types.Left', V702}; {'Prelude.Types.Right', V703} -> (begin (V707 = fun (V704) -> case V703 of {'Prelude.Types.Right', V705} -> {'Prelude.Types.Right', []}; {'Prelude.Types.Left', V706} -> ('nested--20545-15902--in--un--fileError'(V4, V3, V2, V1, V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V75, V664)), V706, V704)) end end), V707 end(V700)) end end end end), V708 end(V666)) end end end end end end))), fun (V710) -> begin (V711 = (V709(V710))), case V711 of {'Prelude.Types.Left', V712} -> {'Prelude.Types.Left', V712}; {'Prelude.Types.Right', V713} -> (begin (V718 = begin (V714 = {'Prelude.Types.Right', {'Builtin.MkUnit'}}), ('case--case block in case block in case block in case block in makeDoc-17378'(V4, V3, V2, V1, V0, V11, V84, V21, V74, V75, V76, V619, V90, V657, V714, V713, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V715) -> fun (V716) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V715, V716)) end end, []}, fun (V717) -> V717 end, V713)))) end), V718 end(V710)) end end end end; {'Prelude.Types.Left', V719} -> fun (V720) -> ('nested--20545-15902--in--un--fileError'(V4, V3, V2, V1, V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V75, (begin (V722 = fun (V721) -> V721 end), fun (V723) -> (V722(V723)) end end(<<"index.html"/utf8>>)))), V719, V720)) end end end), V724 end(V653)) end end end end; _ -> fun (V725) -> {'Prelude.Types.Right', V618} end end end), V726 end(V615)) end end end end), V727 end(V92)) end end end end), V728 end(V87)) end end end end; {'Prelude.Types.Left', V729} -> fun (V730) -> ('nested--20545-15902--in--un--fileError'(V4, V3, V2, V1, V0, V76, V729, V730)) end end end), V731 end(V80)) end end end end end end end), V732 end(V18)) end end end end; _ -> fun (V733) -> {'Prelude.Types.Right', V10} end end end), V734 end(V6)) end end end end.
'un--localPackageFile'(V0) -> case V0 of {'Prelude.Types.Just', V1} -> fun (V2) -> {'Prelude.Types.Right', V1} end; {'Prelude.Types.Nothing'} -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getWorkingDir'())), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V31 = begin (V10 = fun (V8) -> begin (V9 = ('Idris.Idris2.Libraries.System.Directory.Tree':'un--explore'(('Idris.Idris2.Libraries.Utils.Path':'un--parse'(V7)), V8))), {'Prelude.Types.Right', V9} end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V30 = begin (V25 = ((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V17) -> ('Idris.Idris2.Libraries.System.Directory.Tree':'un--fileName'(V17)) end))(case V14 of {'Libraries.System.Directory.Tree.MkTree', V15, V16} -> V15 end))), fun (V26) -> case ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V27) -> ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<".ipkg"/utf8>>, V27)) end, V25)) of [E0 | E1] -> (fun (V28, V29) -> case V29 of [] -> {'Prelude.Types.Right', V28}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.UserError', <<"No .ipkg file supplied and the working directory contains more than one."/utf8>>}, V26)) end end(E0, E1)); [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.UserError', <<"No .ipkg file supplied and none could be found in the working directory."/utf8>>}, V26)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.UserError', <<"No .ipkg file supplied and the working directory contains more than one."/utf8>>}, V26)) end end end), V30 end(V11)) end end end end), V31 end(V4)) end end end end end.
'un--installSrcFrom'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V6 = ('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V4))), begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V1, V5))), ('case--installSrcFrom-14931'(V4, V5, V2, V1, V0, V6, V7, ('Idris.Idris2.Libraries.Utils.Path':'un--extension'(V7)))) end end end.
'un--installFrom'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--installBuildArtifactFrom'(V0, V1, <<"ttc"/utf8>>, V2, V3, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V138 = begin (V10 = ('un--installBuildArtifactFrom'(V0, V1, <<"ttm"/utf8>>, V2, V3, V4))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V137 = begin (V15 = ('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V4))), begin (V16 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ('Idris.Idris2.Data.List':'un--tail\x{27}'(('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V4))))))))), begin (V17 = ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V16))), begin (V18 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, V17))), begin (V34 = fun (V19) -> begin (V20 = ('Idris.Idris2.Idris.ProcessIdr':'un--getCG'(V0, V1, V19))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V33 = case V24 of {'Prelude.Types.Just', V25} -> begin (V26 = {'Prelude.Types.Just', V25}), ('case--case block in installFrom-14662'(V4, V3, V2, V1, V0, V15, V16, V17, V18, V19, V25, V26, case V25 of {'Compiler.Common.MkCG', V27, V28, V29, V30, V31} -> V31 end)) end; {'Prelude.Types.Nothing'} -> fun (V32) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V33 end(V21)) end end end end end), begin (V67 = begin (V35 = ('Idris.Idris2.Core.Context':'un--getSession'(V1))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V66 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V34, case V39 of {'Core.Options.MkSessionOpts', V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} -> V63 end, []))), V66 end(V36)) end end end end), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V136 = begin (V73 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V72) -> V72 end, V71))), ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V74) -> case V74 of {'Builtin.MkPair', V75, V76} -> begin (V82 = fun (V77) -> begin (V81 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<(begin (V79 = fun (V78) -> V78 end), fun (V80) -> (V79(V80)) end end(<<"Installing "/utf8>>))/binary, <<V75/binary, <<<<" to "/utf8>>/binary, V18/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V77))), {'Prelude.Types.Right', V81} end end), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V135 = begin (V116 = fun (V87) -> begin (V115 = (('Idris.Idris2.Erlang.System.File':'un--copyFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V90, V91, V92)) end end end end end, fun (V93) -> fun (V94) -> fun (V95) -> V94 end end end, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> begin (V101 = (V98(V100))), begin (V102 = (V99(V100))), (V101(V102)) end end end end end end end}, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V105(V107))), ((V106(V108))(V107)) end end end end end end, fun (V109) -> fun (V110) -> fun (V111) -> begin (V112 = (V110(V111))), (V112(V111)) end end end end}, fun (V113) -> fun (V114) -> V114 end end}, V75, V76))(V87))), {'Prelude.Types.Right', V115} end end), ((begin (V132 = fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V129, V130, V131)) end end end end end), fun (V133) -> fun (V134) -> ((((V132('erased'))('erased'))(V133))(V134)) end end end((begin (V124 = fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> {'Prelude.Types.Right', (V120(V123))} end end end end end), fun (V125) -> fun (V126) -> ((((V124('erased'))('erased'))(V125))(V126)) end end end(fun (V117) -> {'Builtin.MkUnit'} end))))(V116)) end), V135 end(V83)) end end end end end end, V73)) end), V136 end(V68)) end end end end end end end end end), V137 end(V11)) end end end end), V138 end(V6)) end end end end.
'un--installDir'(V0) -> <<case V0 of {'Idris.Package.Types.MkPkgDesc', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> V1 end/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Idris.Package.Types':'dn--un--show_Show_PkgVersion'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Data.List1.:::', 0, []} end, case V0 of {'Idris.Package.Types.MkPkgDesc', V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} -> V28 end))))/binary>>/binary>>.
'un--installBuildArtifactFrom'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V5))), begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V6, V2))))), begin (V8 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ('Idris.Idris2.Data.List':'un--tail\x{27}'(('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V5))))))))), begin (V9 = ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V8))), begin (V10 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, V9))), begin (V11 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V6, V2))))), begin (V14 = fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V10, V12))), {'Prelude.Types.Right', V13} end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V86 = case V18 of {'Prelude.Types.Right', V19} -> begin (V25 = fun (V20) -> begin (V24 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<(begin (V22 = fun (V21) -> V21 end), fun (V23) -> (V22(V23)) end end(<<"Installing "/utf8>>))/binary, <<V7/binary, <<<<" to "/utf8>>/binary, V10/binary>>/binary>>/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V20))), {'Prelude.Types.Right', V24} end end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V77 = begin (V59 = fun (V30) -> begin (V58 = (('Idris.Idris2.Erlang.System.File':'un--copyFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, fun (V56) -> fun (V57) -> V57 end end}, V7, V11))(V30))), {'Prelude.Types.Right', V58} end end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V76 = fun (V64) -> case V63 of {'Prelude.Types.Right', V65} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; {'Prelude.Types.Left', V66} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', ('Idris.Idris2.Data.String':'un--fastUnlines'([<<(begin (V68 = fun (V67) -> V67 end), fun (V69) -> (V68(V69)) end end(<<"Can\x{27}t copy file "/utf8>>))/binary, <<V7/binary, <<<<" to "/utf8>>/binary, V10/binary>>/binary>>/binary>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V70) -> ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V70)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Erlang.System.File':'dn--un--showPrec_Show_FileError'(V71, V72)) end end}, {'Prelude.Show.MkShow', fun (V73) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V73)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V74, V75)) end end}}, V66)) | []]]))}, V64)) end end), V76 end(V60)) end end end end), V77 end(V26)) end end end end; {'Prelude.Types.Left', V78} -> fun (V79) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', ('Idris.Idris2.Data.String':'un--fastUnlines'([<<(begin (V81 = fun (V80) -> V80 end), fun (V82) -> (V81(V82)) end end(<<"Can\x{27}t make directories "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V83) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V84, V85)) end end}, V8))/binary>> | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V78)) | []]]))}, V79)) end end), V86 end(V15)) end end end end end end end end end end.
'un--install'(V0, V1, V2, V3, V4) -> begin (V10 = begin (V5 = V0), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V362 = begin (V15 = ('Idris.Idris2.Core.Directory':'un--ttcBuildDirectory'(V0))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V361 = begin (V20 = ('un--installDir'(V2))), begin (V21 = ('Idris.Idris2.Core.Directory':'un--libInstallDirectory'(V0, V20))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V360 = begin (V26 = ('Idris.Idris2.Core.Directory':'un--ttcInstallDirectory'(V0, V20))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V359 = begin (V31 = ('Idris.Idris2.Core.Directory':'un--srcInstallDirectory'(V0, V20))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V358 = begin (V62 = ('un--runScript'(case V2 of {'Idris.Package.Types.MkPkgDesc', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61} -> V58 end))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V357 = begin (V146 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> case V2 of {'Idris.Package.Types.MkPkgDesc', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92} -> V79 end end, fun () -> fun (V93) -> [V93 | case V2 of {'Idris.Package.Types.MkPkgDesc', V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119} -> V106 end] end end, case V2 of {'Idris.Package.Types.MkPkgDesc', V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145} -> V133 end))), begin (V147 = ('Idris.Idris2.Core.Context':'un--getWorkingDir'())), fun (V148) -> begin (V149 = (V147(V148))), case V149 of {'Prelude.Types.Left', V150} -> {'Prelude.Types.Left', V150}; {'Prelude.Types.Right', V151} -> (begin (V356 = begin (V154 = fun (V152) -> begin (V153 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V25, V152))), {'Prelude.Types.Right', V153} end end), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V355 = case V158 of {'Prelude.Types.Right', V159} -> begin (V161 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V160) -> ('un--installFrom'(V1, V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V151, V19)), V30, ('Idris.Idris2.Builtin':'un--fst'(V160)))) end, V146))), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V349 = begin (V168 = case V4 of 1 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V166) -> ('un--installSrcFrom'(V0, V151, V35, V166)) end, V146)); 0 -> fun (V167) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V169) -> begin (V170 = (V168(V169))), case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> (begin (V348 = begin (V199 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V25, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(case V2 of {'Idris.Package.Types.MkPkgDesc', V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198} -> V173 end, <<"ipkg"/utf8>>))))), begin (V243 = fun (V200) -> begin (V242 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V201) -> fun (V202) -> <<V201/binary, V202/binary>> end end, <<""/utf8>>}, fun (V203) -> V203 end, [(begin (V205 = fun (V204) -> V204 end), fun (V206) -> (V205(V206)) end end(<<"Installing package file for "/utf8>>)) | [(begin (V234 = fun (V233) -> V233 end), fun (V235) -> (V234(V235)) end end(case V2 of {'Idris.Package.Types.MkPkgDesc', V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232} -> V207 end)) | [(begin (V237 = fun (V236) -> V236 end), fun (V238) -> (V237(V238)) end end(<<" to "/utf8>>)) | [(begin (V240 = fun (V239) -> V239 end), fun (V241) -> (V240(V241)) end end(V25)) | []]]]]))/binary, <<"\x{a}"/utf8>>/binary>>, V200))), {'Prelude.Types.Right', V242} end end), fun (V244) -> begin (V245 = (V243(V244))), case V245 of {'Prelude.Types.Left', V246} -> {'Prelude.Types.Left', V246}; {'Prelude.Types.Right', V247} -> (begin (V347 = begin (V248 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Render.String':'un--renderString'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--layoutUnbounded'(('Idris.Idris2.Idris.Package.Types':'dn--un--pretty_Pretty_Void_PkgDesc'(('nested--20099-15480--in--un--savePkgMetadata'(V4, V3, V2, V1, V0, V2))))))))), begin (V261 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V250 = fun (V249) -> V249 end), fun (V251) -> (V250(V251)) end end(<<"package.depends"/utf8>>)), 25, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V252) -> fun (V253) -> <<V252/binary, V253/binary>> end end, <<""/utf8>>}, fun (V254) -> V254 end, [(begin (V256 = fun (V255) -> V255 end), fun (V257) -> (V256(V257)) end end(<<"  package file:\x{a}"/utf8>>)) | [(begin (V259 = fun (V258) -> V258 end), fun (V260) -> (V259(V260)) end end(V248)) | []]])) end))), fun (V262) -> begin (V263 = (V261(V262))), case V263 of {'Prelude.Types.Left', V264} -> {'Prelude.Types.Left', V264}; {'Prelude.Types.Right', V265} -> (begin (V346 = begin (V314 = begin (V295 = fun (V266) -> begin (V294 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V267) -> fun (V268) -> fun (V269) -> fun (V270) -> fun (V271) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V269, V270, V271)) end end end end end, fun (V272) -> fun (V273) -> fun (V274) -> V273 end end end, fun (V275) -> fun (V276) -> fun (V277) -> fun (V278) -> fun (V279) -> begin (V280 = (V277(V279))), begin (V281 = (V278(V279))), (V280(V281)) end end end end end end end}, fun (V282) -> fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> begin (V287 = (V284(V286))), ((V285(V287))(V286)) end end end end end end, fun (V288) -> fun (V289) -> fun (V290) -> begin (V291 = (V289(V290))), (V291(V290)) end end end end}, fun (V292) -> fun (V293) -> V293 end end}, V199, V248))(V266))), {'Prelude.Types.Right', V294} end end), ((begin (V311 = fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> fun (V310) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V308, V309, V310)) end end end end end), fun (V312) -> fun (V313) -> ((((V311('erased'))('erased'))(V312))(V313)) end end end((begin (V303 = fun (V297) -> fun (V298) -> fun (V299) -> fun (V300) -> case V300 of {'Prelude.Types.Left', V301} -> {'Prelude.Types.Left', V301}; {'Prelude.Types.Right', V302} -> {'Prelude.Types.Right', (V299(V302))} end end end end end), fun (V304) -> fun (V305) -> ((((V303('erased'))('erased'))(V304))(V305)) end end end(fun (V296) -> {'Builtin.MkUnit'} end))))(V295)) end), fun (V315) -> begin (V316 = (V314(V315))), case V316 of {'Prelude.Types.Left', V317} -> {'Prelude.Types.Left', V317}; {'Prelude.Types.Right', V318} -> (begin (V345 = ('un--runScript'(case V2 of {'Idris.Package.Types.MkPkgDesc', V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344} -> V342 end))), V345 end(V315)) end end end end), V346 end(V262)) end end end end end), V347 end(V244)) end end end end end), V348 end(V169)) end end end end), V349 end(V162)) end end end end; {'Prelude.Types.Left', V350} -> fun (V351) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', ('Idris.Idris2.Data.String':'un--fastUnlines'([<<(begin (V353 = fun (V352) -> V352 end), fun (V354) -> (V353(V354)) end end(<<"Can\x{27}t make directory "/utf8>>))/binary, V25/binary>> | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V350)) | []]]))}, V351)) end end), V355 end(V155)) end end end end), V356 end(V148)) end end end end end), V357 end(V63)) end end end end), V358 end(V32)) end end end end), V359 end(V27)) end end end end), V360 end(V22)) end end end end end), V361 end(V16)) end end end end), V362 end(V11)) end end end end.
'un--foldWithKeysC'(V0, V1, V2, V3) -> ('nested--22544-17685--in--un--go'(V0, V2, V1, [], V3)).
'un--findIpkg'(V0, V1, V2, V3) -> begin (V6 = fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Directory':'un--findIpkgFile'(V4))), {'Prelude.Types.Right', V5} end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V236 = case V10 of {'Prelude.Types.Just', V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> begin (V64 = begin (V45 = fun (V16) -> begin (V44 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> V23 end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), begin (V31 = (V28(V29))), (V30(V31)) end end end end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), ((V35(V37))(V36)) end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V39(V40))), (V41(V40)) end end end end}, fun (V42) -> fun (V43) -> V43 end end}, V12))(V16))), {'Prelude.Types.Right', V44} end end), ((begin (V61 = fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V58, V59, V60)) end end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end((begin (V53 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> {'Prelude.Types.Right', (V49(V52))} end end end end end), fun (V54) -> fun (V55) -> ((((V53('erased'))('erased'))(V54))(V55)) end end end(fun (V46) -> {'Builtin.MkUnit'} end))))(V45)) end), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V234 = begin (V69 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V0, V12))), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V233 = begin (V74 = ('un--parsePkgFile'(V0, V2, V1, 1, V14))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V232 = begin (V107 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V79) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end, fun () -> fun (V80) -> ('Idris.Idris2.Core.Context':'un--setBuildDir'(V0, V80)) end end, case V78 of {'Idris.Package.Types.MkPkgDesc', V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106} -> V99 end))), fun (V108) -> begin (V109 = (V107(V108))), case V109 of {'Prelude.Types.Left', V110} -> {'Prelude.Types.Left', V110}; {'Prelude.Types.Right', V111} -> (begin (V231 = begin (V138 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V0, case V78 of {'Idris.Package.Types.MkPkgDesc', V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137} -> V131 end))), fun (V139) -> begin (V140 = (V138(V139))), case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> (begin (V230 = begin (V169 = ('un--processOptions'(V0, V1, case V78 of {'Idris.Package.Types.MkPkgDesc', V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168} -> V159 end))), fun (V170) -> begin (V171 = (V169(V170))), case V171 of {'Prelude.Types.Left', V172} -> {'Prelude.Types.Left', V172}; {'Prelude.Types.Right', V173} -> (begin (V229 = begin (V174 = ('un--addDeps'(V0, V78))), fun (V175) -> begin (V176 = (V174(V175))), case V176 of {'Prelude.Types.Left', V177} -> {'Prelude.Types.Left', V177}; {'Prelude.Types.Right', V178} -> (begin (V228 = case V3 of {'Prelude.Types.Nothing'} -> fun (V179) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V180} -> begin (V181 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V15, V180))), begin (V182 = ('Idris.Idris2.Idris.REPL.Opts':'un--setSource'(V1, V181))), fun (V183) -> begin (V184 = (V182(V183))), case V184 of {'Prelude.Types.Left', V185} -> {'Prelude.Types.Left', V185}; {'Prelude.Types.Right', V186} -> (begin (V227 = begin (V220 = begin (V192 = begin (V187 = V1), fun (V188) -> begin (V191 = (begin (V189 = V187), fun (V190) -> ('erlang':'get'(V189)) end end(V188))), {'Prelude.Types.Right', V191} end end end), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V219 = begin (V197 = V1), fun (V198) -> begin (V218 = (begin (V199 = V197), fun (V200) -> ('erlang':'put'(V199, case V196 of {'Idris.REPL.Opts.MkREPLOpts', V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217} -> {'Idris.REPL.Opts.MkREPLOpts', V201, V202, V203, {'Prelude.Types.Just', V181}, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217} end)) end end(V198))), {'Prelude.Types.Right', V218} end end end), V219 end(V193)) end end end end), fun (V221) -> begin (V222 = (V220(V221))), case V222 of {'Prelude.Types.Left', V223} -> {'Prelude.Types.Left', V223}; {'Prelude.Types.Right', V224} -> (begin (V226 = fun (V225) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V181}} end), V226 end(V221)) end end end end), V227 end(V183)) end end end end end end), V228 end(V175)) end end end end), V229 end(V170)) end end end end), V230 end(V139)) end end end end), V231 end(V108)) end end end end), V232 end(V75)) end end end end), V233 end(V70)) end end end end), V234 end(V65)) end end end end end end; {'Prelude.Types.Nothing'} -> fun (V235) -> {'Prelude.Types.Right', V3} end end), V236 end(V7)) end end end end.
'un--filterChangedModules'(V0, V1) -> case ('Idris.Idris2.Data.List':'un--partition'(fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V18, V19, V20, V21)) end end end end end end end, fun (V22) -> fun (V23) -> V23 end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V26, V27, V28)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V31, V32)) end end}, case V2 of {'Idris.ModTree.MkBuildMod', V33, V34, V35} -> V34 end, V0)) end, V1)) of {'Builtin.MkPair', V36, V37} -> begin (V38 = ('Idris.Idris2.Idris.ModTree':'un--filterUsedByMods'(V0, V37))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V36, V38)) end end.
'un--field'(V0) -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V1) -> fun (V2) -> {'Idris.Package.PAuthors', V1, V2} end end, <<"authors"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V3) -> fun (V4) -> {'Idris.Package.PMaintainers', V3, V4} end end, <<"maintainers"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V5) -> fun (V6) -> {'Idris.Package.PLicense', V5, V6} end end, <<"license"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V7) -> fun (V8) -> {'Idris.Package.PBrief', V7, V8} end end, <<"brief"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V9) -> fun (V10) -> {'Idris.Package.PReadMe', V9, V10} end end, <<"readme"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V11) -> fun (V12) -> {'Idris.Package.PHomePage', V11, V12} end end, <<"homepage"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V13) -> fun (V14) -> {'Idris.Package.PSourceLoc', V13, V14} end end, <<"sourceloc"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V15) -> fun (V16) -> {'Idris.Package.PBugTracker', V15, V16} end end, <<"bugtracker"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V17) -> fun (V18) -> {'Idris.Package.POpts', V17, V18} end end, <<"options"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V19) -> fun (V20) -> {'Idris.Package.POpts', V19, V20} end end, <<"opts"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V21) -> fun (V22) -> {'Idris.Package.PSourceDir', V21, V22} end end, <<"sourcedir"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V23) -> fun (V24) -> {'Idris.Package.PBuildDir', V23, V24} end end, <<"builddir"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V25) -> fun (V26) -> {'Idris.Package.POutputDir', V25, V26} end end, <<"outputdir"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V27) -> fun (V28) -> {'Idris.Package.PPrebuild', V27, V28} end end, <<"prebuild"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V29) -> fun (V30) -> {'Idris.Package.PPostbuild', V29, V30} end end, <<"postbuild"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V31) -> fun (V32) -> {'Idris.Package.PPreinstall', V31, V32} end end, <<"preinstall"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V33) -> fun (V34) -> {'Idris.Package.PPostinstall', V33, V34} end end, <<"postinstall"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V35) -> fun (V36) -> {'Idris.Package.PPreclean', V35, V36} end end, <<"preclean"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--14864-10569--in--un--strField'(V0, fun (V37) -> fun (V38) -> {'Idris.Package.PPostclean', V37, V38} end end, <<"postclean"/utf8>>)), fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V39) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V40) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"version"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V48) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V49) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Package.PVersion', {'Core.FC.MkFC', {'Core.FC.PhysicalPkgSrc', V0}, V39, V49}, ((begin (V55 = fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V53, V54)) end end end end), fun (V56) -> fun (V57) -> ((((V55('erased'))('erased'))(V56))(V57)) end end end(fun (V50) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V50)) end))(V48))}} end} end end} end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V58) -> {'Libraries.Text.Parser.Core.ThenEat', 0, ((begin (V64 = fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V62, V63)) end end end end), fun (V65) -> fun (V66) -> ((((V64('erased'))('erased'))(V65))(V66)) end end end(fun (V59) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"langversion"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('nested--14864-10567--in--un--langversions'(V0)), fun (V67) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V68) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Package.PLangVersions', {'Core.FC.MkFC', {'Core.FC.PhysicalPkgSrc', V0}, V58, V68}, V67}} end} end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V69) -> {'Libraries.Text.Parser.Core.ThenEat', 1, ((begin (V75 = fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V73, V74)) end end end end), fun (V76) -> fun (V77) -> ((((V75('erased'))('erased'))(V76))(V77)) end end end(fun (V70) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"version"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> fun (V78) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V79) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Package.PVersionDep', {'Core.FC.MkFC', {'Core.FC.PhysicalPkgSrc', V0}, V69, V79}, V78}} end} end end} end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ((begin (V85 = fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V83, V84)) end end end end), fun (V86) -> fun (V87) -> ((((V85('erased'))('erased'))(V86))(V87)) end end end(fun (V80) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"depends"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--sep'(('nested--14864-10568--in--un--depends'(V0)))), fun () -> fun (V88) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Package.PDepends', V88}} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ((begin (V94 = fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V92, V93)) end end end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end(fun (V89) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"modules"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--sep'({'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V97) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--moduleIdent'()), fun () -> fun (V98) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V99) -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkPair', {'Core.FC.MkFC', {'Core.FC.PhysicalPkgSrc', V0}, V97, V99}, V98}} end} end end} end})), fun () -> fun (V100) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Package.PModules', V100}} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ((begin (V106 = fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V104, V105)) end end end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V101) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"main"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V109) -> {'Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--moduleIdent'()), fun () -> fun (V110) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V111) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Package.PMainMod', {'Core.FC.MkFC', {'Core.FC.PhysicalPkgSrc', V0}, V109, V111}, V110}} end} end end} end} end} end}, fun () -> {'Libraries.Text.Parser.Core.Alt', 1, 1, {'Libraries.Text.Parser.Core.ThenEat', 1, ((begin (V117 = fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V115, V116)) end end end end), fun (V118) -> fun (V119) -> ((((V117('erased'))('erased'))(V118))(V119)) end end end(fun (V112) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"executable"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()) end}, fun () -> fun (V120) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Package.PExec', V120}} end end} end} end}, fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ((begin (V126 = fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V124, V125)) end end end end), fun (V127) -> fun (V128) -> ((((V126('erased'))('erased'))(V127))(V128)) end end end(fun (V121) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"library"/utf8>>)))), fun () -> {'Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Libraries.Text.Parser.Core.SeqEat', 0, {'Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()) end}, fun () -> fun (V129) -> {'Libraries.Text.Parser.Core.Empty', {'Idris.Package.PLibrary', V129}} end end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--errorMsg'() -> ('Idris.Idris2.Data.String':'un--fastUnlines'([<<"Not all command line options can be used to override package options.\x{a}"/utf8>> | [<<"Overridable options are:"/utf8>> | [<<"    --quiet"/utf8>> | [<<"    --verbose"/utf8>> | [<<"    --console-width <console width>"/utf8>> | [<<"    --color, --colour"/utf8>> | [<<"    --no-color, --no-colour"/utf8>> | [<<"    --timing"/utf8>> | [<<"    --log <log level>"/utf8>> | [<<"    --dumpcases <file>"/utf8>> | [<<"    --dumplifted <file>"/utf8>> | [<<"    --dumpvmcode <file>"/utf8>> | [<<"    --debug-elab-check"/utf8>> | [<<"    --codegen <cg>"/utf8>> | [<<"    --inc <cg>"/utf8>> | [<<"    --directive <directive>"/utf8>> | [<<"    --build-dir <dir>"/utf8>> | [<<"    --output-dir <dir>"/utf8>> | [<<"    --changed-modules <namespaces>"/utf8>> | []]]]]]]]]]]]]]]]]]]])).
'un--compileMain'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V67 = begin (V11 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Core.FC.PhysicalIdrSrc', V10}))))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V66 = begin (V16 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'())))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V65 = begin (V40 = begin (V21 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V0, V20, V1, V15, V2, V4))), ((begin (V37 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end((begin (V29 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> {'Prelude.Types.Right', (V25(V28))} end end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V22) -> {'Builtin.MkUnit'} end))))(V21)) end), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V64 = begin (V45 = ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V20, V1, V15, V2, {'Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--replFC'()), V3}, V5))), ((begin (V61 = fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V58, V59, V60)) end end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end((begin (V53 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> {'Prelude.Types.Right', (V49(V52))} end end end end end), fun (V54) -> fun (V55) -> ((((V53('erased'))('erased'))(V54))(V55)) end end end(fun (V46) -> {'Builtin.MkUnit'} end))))(V45)) end), V64 end(V41)) end end end end), V65 end(V17)) end end end end), V66 end(V12)) end end end end), V67 end(V7)) end end end end.
'un--compileLibHelper'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Core.FC.PhysicalPkgSrc', V3}))))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V43 = begin (V11 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'())))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V42 = begin (V16 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V4 end, V5))), begin (V17 = ('Idris.Idris2.Idris.ModTree':'un--loadModules'(V0, V1, V10, V15, V2, V3, V16))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V41 = begin (V22 = ('Idris.Idris2.Idris.REPL':'un--compileLib'(V0, V2, V3, V5))), ((begin (V38 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end((begin (V30 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> {'Prelude.Types.Right', (V26(V29))} end end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V23) -> {'Builtin.MkUnit'} end))))(V22)) end), V41 end(V18)) end end end end end), V42 end(V12)) end end end end), V43 end(V7)) end end end end.
'un--clean'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V310 = begin (V40 = ('un--runScript'(case V2 of {'Idris.Package.Types.MkPkgDesc', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> V38 end))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V309 = begin (V140 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ((begin (V76 = fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V74, V75)) end end end end), fun (V77) -> fun (V78) -> ((((V76('erased'))('erased'))(V77))(V78)) end end end(fun (V71) -> ('Idris.Idris2.Builtin':'un--fst'(V71)) end))(case V2 of {'Idris.Package.Types.MkPkgDesc', V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70} -> V57 end)) end, fun () -> fun (V79) -> [('Idris.Idris2.Builtin':'un--fst'(V79)) | ((begin (V111 = fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V109, V110)) end end end end), fun (V112) -> fun (V113) -> ((((V111('erased'))('erased'))(V112))(V113)) end end end(fun (V106) -> ('Idris.Idris2.Builtin':'un--fst'(V106)) end))(case V2 of {'Idris.Package.Types.MkPkgDesc', V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105} -> V92 end))] end end, case V2 of {'Idris.Package.Types.MkPkgDesc', V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139} -> V127 end))), begin (V144 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V141) -> case ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V141)) of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V142, V143) -> {'Prelude.Types.Just', {'Builtin.MkPair', V143, V142}} end(E0, E1)) end end, V140))), begin (V145 = ('Idris.Idris2.Core.Context':'un--getWorkingDir'())), fun (V146) -> begin (V147 = (V145(V146))), case V147 of {'Prelude.Types.Left', V148} -> {'Prelude.Types.Left', V148}; {'Prelude.Types.Right', V149} -> (begin (V308 = begin (V192 = case V13 of {'Core.Context.MkDefs', V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181} -> case V154 of {'Core.Options.MkOptions', V182, V183, V184, V185, V186, V187, V188, V189, V190, V191} -> V182 end end), begin (V193 = ('Idris.Idris2.Core.Directory':'un--ttcBuildDirectory'(V0))), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V307 = begin (V198 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V149, V197)), <<"ttc"/utf8>>))), begin (V199 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V149, ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V192))))), begin (V206 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V200) -> fun (V201) -> begin (V202 = ('Idris.Idris2.Builtin':'un--fst'(V201))), begin (V203 = ('Idris.Idris2.Builtin':'un--snd'(V201))), ('Idris.Idris2.Libraries.Data.StringTrie':'un--insertWith'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V202)), fun (V204) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [V203 | []] end, fun () -> fun (V205) -> [V203 | V205] end end, V204)) end, V200)) end end end end, ('Idris.Idris2.Libraries.Data.StringTrie':'un--empty'()), V144))), begin (V235 = ('un--foldWithKeysC'({'Prelude.Interfaces.MkMonoid', fun (V207) -> fun (V208) -> {'Builtin.MkUnit'} end end, {'Builtin.MkUnit'}}, fun (V209) -> ('nested--22682-17809--in--un--deleteFolder'(V3, V2, V1, V0, V198, V209)) end, fun (V210) -> fun (V211) -> begin (V213 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V212) -> ('nested--22682-17810--in--un--deleteBin'(V3, V2, V1, V0, V198, V210, V212)) end, V211, []))), ((begin (V232 = fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V229, V230, V231)) end end end end end), fun (V233) -> fun (V234) -> ((((V232('erased'))('erased'))(V233))(V234)) end end end((begin (V224 = fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> case V221 of {'Prelude.Types.Left', V222} -> {'Prelude.Types.Left', V222}; {'Prelude.Types.Right', V223} -> {'Prelude.Types.Right', (V220(V223))} end end end end end), fun (V225) -> fun (V226) -> ((((V224('erased'))('erased'))(V225))(V226)) end end end(fun (V214) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V215) -> fun (V216) -> {'Builtin.MkUnit'} end end, {'Builtin.MkUnit'}}, fun (V217) -> V217 end, V214)) end))))(V213)) end end end, V206))), fun (V236) -> begin (V237 = (V235(V236))), case V237 of {'Prelude.Types.Left', V238} -> {'Prelude.Types.Left', V238}; {'Prelude.Types.Right', V239} -> (begin (V306 = begin (V240 = ('nested--22682-17809--in--un--deleteFolder'(V3, V2, V1, V0, V198, []))), fun (V241) -> begin (V242 = (V240(V241))), case V242 of {'Prelude.Types.Left', V243} -> {'Prelude.Types.Left', V243}; {'Prelude.Types.Right', V244} -> (begin (V305 = begin (V273 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V245) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end, fun () -> fun (V246) -> ('nested--22682-17808--in--un--delete'(V3, V2, V1, V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V199, V246)))) end end, case V2 of {'Idris.Package.Types.MkPkgDesc', V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272} -> V261 end))), fun (V274) -> begin (V275 = (V273(V274))), case V275 of {'Prelude.Types.Left', V276} -> {'Prelude.Types.Left', V276}; {'Prelude.Types.Right', V277} -> (begin (V304 = ('un--runScript'(case V2 of {'Idris.Package.Types.MkPkgDesc', V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303} -> V303 end))), V304 end(V274)) end end end end), V305 end(V241)) end end end end), V306 end(V236)) end end end end end end end), V307 end(V194)) end end end end end), V308 end(V146)) end end end end end end), V309 end(V41)) end end end end), V310 end(V10)) end end end end.
'un--check'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--assertIdrisCompatibility'(V3))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V52 = begin (V10 = ('un--prepareCompilation'(V0, V1, V2, V3, V4))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V51 = case V14 of {'Builtin.MkPair', V15, V16} -> case V15 of [] -> begin (V43 = ('un--runScript'(case V3 of {'Idris.Package.Types.MkPkgDesc', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> V38 end))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V49 = fun (V48) -> {'Prelude.Types.Right', []} end), V49 end(V44)) end end end end; _ -> fun (V50) -> {'Prelude.Types.Right', V15} end end end), V51 end(V11)) end end end end), V52 end(V6)) end end end end.
'un--build'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--assertIdrisCompatibility'(V3))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V197 = begin (V10 = ('un--prepareCompilation'(V0, V1, V2, V3, V4))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V196 = case V14 of {'Builtin.MkPair', V15, V16} -> case V15 of [] -> begin (V87 = case V3 of {'Idris.Package.Types.MkPkgDesc', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> case V31 of {'Prelude.Types.Just', V43} -> case V3 of {'Idris.Package.Types.MkPkgDesc', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69} -> case V57 of {'Prelude.Types.Just', V70} -> case V70 of {'Builtin.MkPair', V71, V72} -> begin (V73 = {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V71)), {'Core.Name.UN', {'Core.Name.Basic', <<"main"/utf8>>}}}), begin (V79 = fun (V74) -> begin (V78 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V75) -> fun (V76) -> <<V75/binary, V76/binary>> end end, <<""/utf8>>}, fun (V77) -> V77 end, [<<"Now compiling the executable: "/utf8>> | [V43 | []]]))/binary, <<"\x{a}"/utf8>>/binary>>, V74))), {'Prelude.Types.Right', V78} end end), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V84 = ('un--compileMain'(V0, V1, V2, V73, V72, V43))), V84 end(V80)) end end end end end end; {'Prelude.Types.Nothing'} -> fun (V85) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', ('Idris.Idris2.Core.FC':'un--emptyFC'()), <<"No main module given"/utf8>>}, V85)) end end end; {'Prelude.Types.Nothing'} -> fun (V86) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V194 = begin (V155 = case V3 of {'Idris.Package.Types.MkPkgDesc', V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117} -> case V107 of {'Prelude.Types.Just', V118} -> begin (V153 = ((begin (V150 = fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V148, V149)) end end end end), fun (V151) -> fun (V152) -> ((((V150('erased'))('erased'))(V151))(V152)) end end end(fun (V145) -> ('Idris.Idris2.Builtin':'un--fst'(V145)) end))(case V3 of {'Idris.Package.Types.MkPkgDesc', V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144} -> V131 end))), ('un--compileLibHelper'(V0, V1, V2, V118, V153, V16)) end; {'Prelude.Types.Nothing'} -> fun (V154) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V193 = begin (V186 = ('un--runScript'(case V3 of {'Idris.Package.Types.MkPkgDesc', V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185} -> V181 end))), fun (V187) -> begin (V188 = (V186(V187))), case V188 of {'Prelude.Types.Left', V189} -> {'Prelude.Types.Left', V189}; {'Prelude.Types.Right', V190} -> (begin (V192 = fun (V191) -> {'Prelude.Types.Right', []} end), V192 end(V187)) end end end end), V193 end(V156)) end end end end), V194 end(V88)) end end end end; _ -> fun (V195) -> {'Prelude.Types.Right', V15} end end end), V196 end(V11)) end end end end), V197 end(V6)) end end end end.
'un--bitraverseC'(V0, V1, V2) -> case V2 of {'Data.These.This', V3} -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V4) -> {'Prelude.Types.Right', fun (V5) -> {'Data.These.This', V5} end} end, (V0(V3)))); {'Data.These.That', V6} -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V7) -> {'Prelude.Types.Right', fun (V8) -> {'Data.These.That', V8} end} end, (V1(V6)))); {'Data.These.Both', V9, V10} -> ('Idris.Idris2.Core.Core':'un--<*>'(('Idris.Idris2.Core.Core':'un--<*>'(fun (V11) -> {'Prelude.Types.Right', fun (V12) -> fun (V13) -> {'Data.These.Both', V12, V13} end end} end, (V0(V9)))), (V1(V10)))) end.
'un--assertIdrisCompatibility'(V0) -> fun (V1) -> ('case--assertIdrisCompatibility-14018'(V0, case V0 of {'Idris.Package.Types.MkPkgDesc', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} -> V4 end, V1)) end.
'un--addFields'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Package.ParsedMods'}, []))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V139 = begin (V11 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Package.MainMod'}, {'Prelude.Types.Nothing'}))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V138 = begin (V16 = ('nested--17647-13274--in--un--go'(V5, V4, V3, V2, V1, V0, V10, V15, V4, V5))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V137 = begin (V48 = case V3 of 1 -> ('Idris.Idris2.Core.Context':'un--setSourceDir'(V0, case V20 of {'Idris.Package.Types.MkPkgDesc', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> V38 end)); 0 -> fun (V47) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V136 = begin (V58 = begin (V53 = V10), fun (V54) -> begin (V57 = (begin (V55 = V53), fun (V56) -> ('erlang':'get'(V55)) end end(V54))), {'Prelude.Types.Right', V57} end end end), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V135 = begin (V68 = begin (V63 = V15), fun (V64) -> begin (V67 = (begin (V65 = V63), fun (V66) -> ('erlang':'get'(V65)) end end(V64))), {'Prelude.Types.Right', V67} end end end), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V134 = begin (V74 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V73) -> ('nested--17647-13273--in--un--toSource'(V5, V4, V3, V2, V1, V0, V73)) end, V62, []))), fun (V75) -> begin (V76 = (V74(V75))), case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> (begin (V133 = begin (V100 = case V72 of {'Prelude.Types.Nothing'} -> fun (V79) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V80} -> begin (V81 = ('nested--17647-13273--in--un--toSource'(V5, V4, V3, V2, V1, V0, V80))), ((begin (V97 = fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V94, V95, V96)) end end end end end), fun (V98) -> fun (V99) -> ((((V97('erased'))('erased'))(V98))(V99)) end end end((begin (V89 = fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> {'Prelude.Types.Right', (V85(V88))} end end end end end), fun (V90) -> fun (V91) -> ((((V89('erased'))('erased'))(V90))(V91)) end end end(fun (V82) -> {'Prelude.Types.Just', V82} end))))(V81)) end end), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V132 = fun (V105) -> {'Prelude.Types.Right', case V20 of {'Idris.Package.Types.MkPkgDesc', V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131} -> {'Idris.Package.Types.MkPkgDesc', V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V78, V104, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131} end} end), V132 end(V101)) end end end end), V133 end(V75)) end end end end), V134 end(V69)) end end end end), V135 end(V59)) end end end end), V136 end(V49)) end end end end), V137 end(V17)) end end end end), V138 end(V12)) end end end end), V139 end(V7)) end end end end.
'un--addField'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Package.PVersion', V7, V8} -> fun (V9) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} -> {'Idris.Package.Types.MkPkgDesc', V10, {'Prelude.Types.Just', V8}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end} end; {'Idris.Package.PLangVersions', V36, V37} -> fun (V38) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} -> {'Idris.Package.Types.MkPkgDesc', V39, V40, {'Prelude.Types.Just', V37}, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} end} end; {'Idris.Package.PVersionDep', V65, V66} -> begin (V67 = ('Idris.Idris2.Idris.REPL.Common':'un--emitWarning'(V0, V2, V1, {'Core.Core.Deprecated', <<"version numbers must now be of the form x.y.z"/utf8>>, {'Prelude.Types.Nothing'}}))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V73 = fun (V72) -> {'Prelude.Types.Right', V6} end), V73 end(V68)) end end end end; {'Idris.Package.PAuthors', V74, V75} -> fun (V76) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} -> {'Idris.Package.Types.MkPkgDesc', V77, V78, V79, {'Prelude.Types.Just', V75}, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} end} end; {'Idris.Package.PMaintainers', V103, V104} -> fun (V105) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131} -> {'Idris.Package.Types.MkPkgDesc', V106, V107, V108, V109, {'Prelude.Types.Just', V104}, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131} end} end; {'Idris.Package.PLicense', V132, V133} -> fun (V134) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160} -> {'Idris.Package.Types.MkPkgDesc', V135, V136, V137, V138, V139, {'Prelude.Types.Just', V133}, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160} end} end; {'Idris.Package.PBrief', V161, V162} -> fun (V163) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189} -> {'Idris.Package.Types.MkPkgDesc', V164, V165, V166, V167, V168, V169, {'Prelude.Types.Just', V162}, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189} end} end; {'Idris.Package.PReadMe', V190, V191} -> fun (V192) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218} -> {'Idris.Package.Types.MkPkgDesc', V193, V194, V195, V196, V197, V198, V199, {'Prelude.Types.Just', V191}, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218} end} end; {'Idris.Package.PHomePage', V219, V220} -> fun (V221) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247} -> {'Idris.Package.Types.MkPkgDesc', V222, V223, V224, V225, V226, V227, V228, V229, {'Prelude.Types.Just', V220}, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247} end} end; {'Idris.Package.PSourceLoc', V248, V249} -> fun (V250) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276} -> {'Idris.Package.Types.MkPkgDesc', V251, V252, V253, V254, V255, V256, V257, V258, V259, {'Prelude.Types.Just', V249}, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276} end} end; {'Idris.Package.PBugTracker', V277, V278} -> fun (V279) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305} -> {'Idris.Package.Types.MkPkgDesc', V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, {'Prelude.Types.Just', V278}, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305} end} end; {'Idris.Package.PDepends', V306} -> fun (V307) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333} -> {'Idris.Package.Types.MkPkgDesc', V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V306, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333} end} end; {'Idris.Package.PModules', V334} -> begin (V340 = begin (V335 = V3), fun (V336) -> begin (V339 = (begin (V337 = V335), fun (V338) -> ('erlang':'put'(V337, V334)) end end(V336))), {'Prelude.Types.Right', V339} end end end), fun (V341) -> begin (V342 = (V340(V341))), case V342 of {'Prelude.Types.Left', V343} -> {'Prelude.Types.Left', V343}; {'Prelude.Types.Right', V344} -> (begin (V346 = fun (V345) -> {'Prelude.Types.Right', V6} end), V346 end(V341)) end end end end; {'Idris.Package.PMainMod', V347, V348} -> begin (V354 = begin (V349 = V4), fun (V350) -> begin (V353 = (begin (V351 = V349), fun (V352) -> ('erlang':'put'(V351, {'Prelude.Types.Just', {'Builtin.MkPair', V347, V348}})) end end(V350))), {'Prelude.Types.Right', V353} end end end), fun (V355) -> begin (V356 = (V354(V355))), case V356 of {'Prelude.Types.Left', V357} -> {'Prelude.Types.Left', V357}; {'Prelude.Types.Right', V358} -> (begin (V360 = fun (V359) -> {'Prelude.Types.Right', V6} end), V360 end(V355)) end end end end; {'Idris.Package.PExec', V361} -> fun (V362) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388} -> {'Idris.Package.Types.MkPkgDesc', V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, {'Prelude.Types.Just', V361}, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388} end} end; {'Idris.Package.PLibrary', V389} -> fun (V390) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416} -> {'Idris.Package.Types.MkPkgDesc', V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, {'Prelude.Types.Just', V389}, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416} end} end; {'Idris.Package.POpts', V417, V418} -> fun (V419) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445} -> {'Idris.Package.Types.MkPkgDesc', V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, {'Prelude.Types.Just', {'Builtin.MkPair', V417, V418}}, V437, V438, V439, V440, V441, V442, V443, V444, V445} end} end; {'Idris.Package.PSourceDir', V446, V447} -> fun (V448) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474} -> {'Idris.Package.Types.MkPkgDesc', V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, {'Prelude.Types.Just', V447}, V467, V468, V469, V470, V471, V472, V473, V474} end} end; {'Idris.Package.PBuildDir', V475, V476} -> fun (V477) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503} -> {'Idris.Package.Types.MkPkgDesc', V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, {'Prelude.Types.Just', V476}, V497, V498, V499, V500, V501, V502, V503} end} end; {'Idris.Package.POutputDir', V504, V505} -> fun (V506) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531, V532} -> {'Idris.Package.Types.MkPkgDesc', V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, {'Prelude.Types.Just', V505}, V527, V528, V529, V530, V531, V532} end} end; {'Idris.Package.PPrebuild', V533, V534} -> fun (V535) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, V556, V557, V558, V559, V560, V561} -> {'Idris.Package.Types.MkPkgDesc', V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, {'Prelude.Types.Just', {'Builtin.MkPair', V533, V534}}, V557, V558, V559, V560, V561} end} end; {'Idris.Package.PPostbuild', V562, V563} -> fun (V564) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, V586, V587, V588, V589, V590} -> {'Idris.Package.Types.MkPkgDesc', V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, {'Prelude.Types.Just', {'Builtin.MkPair', V562, V563}}, V587, V588, V589, V590} end} end; {'Idris.Package.PPreinstall', V591, V592} -> fun (V593) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619} -> {'Idris.Package.Types.MkPkgDesc', V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, {'Prelude.Types.Just', {'Builtin.MkPair', V591, V592}}, V617, V618, V619} end} end; {'Idris.Package.PPostinstall', V620, V621} -> fun (V622) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, V646, V647, V648} -> {'Idris.Package.Types.MkPkgDesc', V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, {'Prelude.Types.Just', {'Builtin.MkPair', V620, V621}}, V647, V648} end} end; {'Idris.Package.PPreclean', V649, V650} -> fun (V651) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V652, V653, V654, V655, V656, V657, V658, V659, V660, V661, V662, V663, V664, V665, V666, V667, V668, V669, V670, V671, V672, V673, V674, V675, V676, V677} -> {'Idris.Package.Types.MkPkgDesc', V652, V653, V654, V655, V656, V657, V658, V659, V660, V661, V662, V663, V664, V665, V666, V667, V668, V669, V670, V671, V672, V673, V674, V675, {'Prelude.Types.Just', {'Builtin.MkPair', V649, V650}}, V677} end} end; {'Idris.Package.PPostclean', V678, V679} -> fun (V680) -> {'Prelude.Types.Right', case V6 of {'Idris.Package.Types.MkPkgDesc', V681, V682, V683, V684, V685, V686, V687, V688, V689, V690, V691, V692, V693, V694, V695, V696, V697, V698, V699, V700, V701, V702, V703, V704, V705, V706} -> {'Idris.Package.Types.MkPkgDesc', V681, V682, V683, V684, V685, V686, V687, V688, V689, V690, V691, V692, V693, V694, V695, V696, V697, V698, V699, V700, V701, V702, V703, V704, V705, {'Prelude.Types.Just', {'Builtin.MkPair', V678, V679}}} end} end end.
'un--addDeps'(V0, V1) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V2) -> ('Idris.Idris2.Core.Context':'un--addPkg'(V0, case V2 of {'Idris.Package.Types.MkDepends', V3, V4} -> V3 end)) end, case V1 of {'Idris.Package.Types.MkPkgDesc', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} -> V16 end)).
