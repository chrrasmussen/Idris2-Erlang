-module('Idris.Idris2.Core.SchemeEval.Quote').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6780-9361--in--un--findName'/10,
  'nested--6780-9226--in--un--addLater'/10,
  'un--quotePi'/7,
  'un--quoteHead'/8,
  'un--quoteGen'/7,
  'un--quoteBinder'/7,
  'un--quoteArgs'/7,
  'un--quote'/4
]).
'nested--6780-9361--in--un--findName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.TT.Bounds.None'} -> {'Prelude.Types.Nothing'}; {'Core.TT.Bounds.Add', V10, V11, V12} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, V11)) of 1 -> {'Prelude.Types.Just', 0}; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--6780-9361--in--un--findName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12)), fun (V13) -> begin (V14 = V13), {'Prelude.Types.Just', (V14 + 1)} end end)) end end.
'nested--6780-9226--in--un--addLater'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> V8; [E0 | E1] -> (fun (V10, V11) -> begin (V12 = ('nested--6780-9226--in--un--addLater'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11))), (V12 + 1) end end(E0, E1)) end.
'un--quotePi'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.TT.Explicit'} -> fun (V7) -> {'Prelude.Types.Right', {'Core.TT.Explicit'}} end; {'Core.TT.Implicit'} -> fun (V8) -> {'Prelude.Types.Right', {'Core.TT.Implicit'}} end; {'Core.TT.AutoImplicit'} -> fun (V9) -> {'Prelude.Types.Right', {'Core.TT.AutoImplicit'}} end; {'Core.TT.DefImplicit', V10} -> begin (V11 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V10))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Core.TT.DefImplicit', V15}} end), V17 end(V12)) end end end end end.
'un--quoteHead'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.SchemeEval.Evaluate.SLocal', V8} -> begin (V9 = ('nested--6780-9226--in--un--addLater'(V2, V8, V6, V1, V5, V4, V3, V0, V8, V1))), fun (V10) -> {'Prelude.Types.Right', {'Core.TT.Local', V4, {'Prelude.Types.Nothing'}, V9}} end end; {'Core.SchemeEval.Evaluate.SRef', V11, V12} -> fun (V13) -> {'Prelude.Types.Right', case ('nested--6780-9361--in--un--findName'(V1, V2, V12, V11, V6, V5, V4, V3, V0, V5)) of {'Prelude.Types.Just', V14} -> begin (V15 = V14), {'Core.TT.Local', V4, {'Prelude.Types.Nothing'}, V15} end; {'Prelude.Types.Nothing'} -> {'Core.TT.Ref', V4, V11, V12} end} end; {'Core.SchemeEval.Evaluate.SMeta', V16, V17, V18} -> begin (V19 = ('un--quoteArgs'(V0, V1, V2, V3, V5, V6, V18))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', {'Core.TT.Meta', V4, V16, V17, V23}} end), V25 end(V20)) end end end end end.
'un--quoteGen'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.SchemeEval.Evaluate.SBind', V7, V8, V9, V10} -> begin (V11 = ('Idris.Idris2.Core.SchemeEval.Compile':'un--nextName'(V3))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V42 = begin (V16 = {'Core.Name.UN', {'Core.Name.Basic', <<<<"b-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V15))/binary>>}}), begin (V17 = ('Idris.Idris2.Core.SchemeEval.Evaluate':'un--seval'(V0, 0, V5, {'Core.TT.Ref', V7, {'Core.TT.Bound'}, V16}))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V41 = begin (V28 = begin (V22 = (V10(V21))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V27 = ('un--quoteGen'(V0, [V8 | V1], V2, V3, {'Core.TT.Bounds.Add', V8, V16, V4}, V5, V26))), V27 end(V23)) end end end end), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V40 = begin (V33 = ('un--quoteBinder'(V0, V1, V2, V3, V4, V5, V9))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', {'Core.TT.Bind', V7, V8, V37, V32}} end), V39 end(V34)) end end end end), V40 end(V29)) end end end end), V41 end(V18)) end end end end end), V42 end(V12)) end end end end; {'Core.SchemeEval.Evaluate.SApp', V43, V44, V45} -> begin (V46 = ('un--quoteHead'(V0, V1, V2, V3, V43, V4, V5, V44))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V58 = begin (V51 = ('un--quoteArgs'(V0, V1, V2, V3, V4, V5, V45))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V57 = fun (V56) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--apply'(V43, V50, V55))} end), V57 end(V52)) end end end end), V58 end(V47)) end end end end; {'Core.SchemeEval.Evaluate.SDCon', V59, V60, V61, V62, V63} -> begin (V64 = ('un--quoteArgs'(V0, V1, V2, V3, V4, V5, V63))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V70 = fun (V69) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--apply'(V59, {'Core.TT.Ref', V59, {'Core.TT.DataCon', V61, V62}, V60}, V68))} end), V70 end(V65)) end end end end; {'Core.SchemeEval.Evaluate.STCon', V71, V72, V73, V74, V75} -> begin (V76 = ('un--quoteArgs'(V0, V1, V2, V3, V4, V5, V75))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V82 = fun (V81) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--apply'(V71, {'Core.TT.Ref', V71, {'Core.TT.TyCon', V73, V74}, V72}, V80))} end), V82 end(V77)) end end end end; {'Core.SchemeEval.Evaluate.SDelayed', V83, V84, V85} -> begin (V86 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V85))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V92 = fun (V91) -> {'Prelude.Types.Right', {'Core.TT.TDelayed', V83, V84, V90}} end), V92 end(V87)) end end end end; {'Core.SchemeEval.Evaluate.SDelay', V93, V94, V95, V96} -> begin (V103 = begin (V97 = V96), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V102 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V101))), V102 end(V98)) end end end end), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V121 = begin (V114 = begin (V108 = V95), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V113 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V112))), V113 end(V109)) end end end end), fun (V115) -> begin (V116 = (V114(V115))), case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> (begin (V120 = fun (V119) -> {'Prelude.Types.Right', {'Core.TT.TDelay', V93, V94, V118, V107}} end), V120 end(V115)) end end end end), V121 end(V104)) end end end end; {'Core.SchemeEval.Evaluate.SForce', V122, V123, V124} -> case V124 of {'Core.SchemeEval.Evaluate.SDelay', V125, V126, V127, V128} -> begin (V129 = V128), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V134 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V133))), V134 end(V130)) end end end end; _ -> begin (V135 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V124))), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V141 = fun (V140) -> {'Prelude.Types.Right', {'Core.TT.TForce', V122, V123, V139}} end), V141 end(V136)) end end end end end; {'Core.SchemeEval.Evaluate.SPrimVal', V142, V143} -> fun (V144) -> {'Prelude.Types.Right', {'Core.TT.PrimVal', V142, V143}} end; {'Core.SchemeEval.Evaluate.SErased', V145, V146} -> case V146 of {'Core.TT.Impossible'} -> fun (V147) -> {'Prelude.Types.Right', {'Core.TT.Erased', V145, {'Core.TT.Impossible'}}} end; {'Core.TT.Placeholder'} -> fun (V148) -> {'Prelude.Types.Right', {'Core.TT.Erased', V145, {'Core.TT.Placeholder'}}} end; {'Core.TT.Dotted', V149} -> begin (V150 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V149))), fun (V151) -> begin (V152 = (V150(V151))), case V152 of {'Prelude.Types.Left', V153} -> {'Prelude.Types.Left', V153}; {'Prelude.Types.Right', V154} -> (begin (V156 = fun (V155) -> {'Prelude.Types.Right', {'Core.TT.Erased', V145, {'Core.TT.Dotted', V154}}} end), V156 end(V151)) end end end end end; {'Core.SchemeEval.Evaluate.SType', V157, V158} -> fun (V159) -> {'Prelude.Types.Right', {'Core.TT.TType', V157, V158}} end end.
'un--quoteBinder'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.TT.Lam', V7, V8, V9, V10} -> begin (V11 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V10))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V23 = begin (V16 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V9))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Core.TT.Lam', V7, V8, V20, V15}} end), V22 end(V17)) end end end end), V23 end(V12)) end end end end; {'Core.TT.Let', V24, V25, V26, V27} -> begin (V28 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V27))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V40 = begin (V33 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V26))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', {'Core.TT.Let', V24, V25, V37, V32}} end), V39 end(V34)) end end end end), V40 end(V29)) end end end end; {'Core.TT.Pi', V41, V42, V43, V44} -> begin (V45 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V44))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V57 = begin (V50 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V43))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V56 = fun (V55) -> {'Prelude.Types.Right', {'Core.TT.Pi', V41, V42, V54, V49}} end), V56 end(V51)) end end end end), V57 end(V46)) end end end end; {'Core.TT.PVar', V58, V59, V60, V61} -> begin (V62 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V61))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V74 = begin (V67 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V60))), fun (V68) -> begin (V69 = (V67(V68))), case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> (begin (V73 = fun (V72) -> {'Prelude.Types.Right', {'Core.TT.PVar', V58, V59, V71, V66}} end), V73 end(V68)) end end end end), V74 end(V63)) end end end end; {'Core.TT.PLet', V75, V76, V77, V78} -> begin (V79 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V78))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V91 = begin (V84 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V77))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V90 = fun (V89) -> {'Prelude.Types.Right', {'Core.TT.PLet', V75, V76, V88, V83}} end), V90 end(V85)) end end end end), V91 end(V80)) end end end end; {'Core.TT.PVTy', V92, V93, V94} -> begin (V95 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V94))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V101 = fun (V100) -> {'Prelude.Types.Right', {'Core.TT.PVTy', V92, V93, V99}} end), V101 end(V96)) end end end end end.
'un--quoteArgs'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V7) -> begin (V8 = V7), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V13 = ('un--quoteGen'(V0, V1, V2, V3, V4, V5, V12))), V13 end(V9)) end end end end end, V6, [])).
'un--quote'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.SchemeEval.Compile.Sym'}, 0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V9 = ('un--quoteGen'(V0, [], V1, V8, {'Core.TT.Bounds.None'}, V2, V3))), V9 end(V5)) end end end end.
