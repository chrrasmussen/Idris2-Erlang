-module('Idris.Idris2.TTImp.Elab.Binders').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--12284-13521--in--un--linearErr'/20,
  'nested--10314-11845--in--un--getRig'/19,
  'nested--10041-11536--in--un--drop'/3,
  'un--weakenExp'/4,
  'un--inferLambda'/18,
  'un--getTyNF'/4,
  'un--findLamRig'/2,
  'un--dropName'/2,
  'un--checkPiInfo'/13,
  'un--checkPi'/18,
  'un--checkLet'/19,
  'un--checkLambda'/18
]).
'nested--12284-13521--in--un--linearErr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Core.Core.LinearMisuse', V20, V21, V22, V23} -> {'Prelude.Types.Just', V22}; {'Core.Core.InType', V24, V25, V26} -> ('nested--12284-13521--in--un--linearErr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V26)); {'Core.Core.InCon', V27, V28, V29} -> ('nested--12284-13521--in--un--linearErr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V29)); {'Core.Core.InLHS', V30, V31, V32} -> ('nested--12284-13521--in--un--linearErr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V32)); {'Core.Core.InRHS', V33, V34, V35} -> ('nested--12284-13521--in--un--linearErr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V35)); _ -> {'Prelude.Types.Nothing'} end.
'nested--10314-11845--in--un--getRig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'TTImp.Elab.Check.InLHS', V19} -> V11; _ -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V20, V21)) end end, 0, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V22, V23)) end end, 1})) end.
'nested--10041-11536--in--un--drop'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Builtin.MkPair', V5, V6} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V1)) of 1 -> ('nested--10041-11536--in--un--drop'(V0, V1, V4)); 0 -> [{'Builtin.MkPair', V5, V6} | ('nested--10041-11536--in--un--drop'(V0, V1, V4))] end end end(E0, E1)) end.
'un--weakenExp'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Nothing'} -> fun (V4) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V5} -> begin (V6 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> {'Prelude.Types.Right', {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'([V0 | V1], V2, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V10))))}} end), V12 end(V7)) end end end end end.
'un--inferLambda'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> begin (V18 = ('un--findLamRig'(V1, V17))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V100 = begin (V31 = ('Idris.Idris2.Algebra.Preorder':'un--glb'({'Algebra.Preorder.dn--un--__mkPreorder', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V23, V24)) end end, fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V25)) end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V26, V27, V28, V29, V30)) end end end end end}, V22, V12))), begin (V32 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V99 = begin (V41 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V37, V38)) end end, 0, fun (V39) -> fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V39, V40)) end end, 1})), V8, V9, V10, V15, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V11, V36))}))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V98 = case V45 of {'Builtin.MkPair', V46, V47} -> begin (V48 = ('un--checkPiInfo'(V0, V1, V2, V3, V4, V5, V6, V12, V8, V9, V10, V13, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V46))}))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V97 = begin (V53 = {'Core.Env.::', {'Core.TT.Lam', V11, V31, V52, V46}, V10}), begin (V54 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(('un--dropName'(V14, V9))))), begin (V56 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'(V14, V0, V1, V4, V11, V53, fun (V55) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V14 | V0], V1, V2, V3, V55, V5, V6, V7, V8, V54, V53, V16, {'Prelude.Types.Nothing'})) end))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V96 = case V60 of {'Builtin.MkPair', V61, V62} -> begin (V63 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V62))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V95 = begin (V68 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V14, {'Core.TT.Pi', V11, V31, V52, V46}, V67}))), begin (V75 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, (begin (V70 = fun (V69) -> V69 end), fun (V71) -> (V70(V71)) end end(<<"elab.binder"/utf8>>)), 5, fun () -> (begin (V73 = fun (V72) -> V72 end), fun (V74) -> (V73(V74)) end end(<<"Inferred lambda type"/utf8>>)) end, V10, V68))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V94 = begin (V88 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V80) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end, fun () -> fun (V81) -> ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, (begin (V83 = fun (V82) -> V82 end), fun (V84) -> (V83(V84)) end end(<<"elab.binder"/utf8>>)), 5, fun () -> (begin (V86 = fun (V85) -> V85 end), fun (V87) -> (V86(V87)) end end(<<"Expected lambda type"/utf8>>)) end, V10, V81)) end end, V17))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V93 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, {'Core.TT.Bind', V11, V14, {'Core.TT.Lam', V11, V31, V52, V46}, V61}, V68, V17))), V93 end(V89)) end end end end), V94 end(V76)) end end end end end), V95 end(V64)) end end end end end), V96 end(V57)) end end end end end end), V97 end(V49)) end end end end end), V98 end(V42)) end end end end), V99 end(V33)) end end end end end), V100 end(V19)) end end end end.
'un--getTyNF'(V0, V1, V2, V3) -> case V3 of {'Core.TT.Bind', V4, V5, V6, V7} -> fun (V8) -> {'Prelude.Types.Right', V3} end; _ -> begin (V14 = begin (V9 = V1), fun (V10) -> begin (V13 = (begin (V11 = V9), fun (V12) -> ('erlang':'get'(V11)) end end(V10))), {'Prelude.Types.Right', V13} end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V32 = begin (V19 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V18, V2, V3))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V31 = begin (V25 = fun (V24) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V18, V24)) end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V30 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V29, V2, V23))), V30 end(V26)) end end end end), V31 end(V20)) end end end end), V32 end(V15)) end end end end end.
'un--findLamRig'(V0, V1) -> case V1 of {'Prelude.Types.Nothing'} -> fun (V2) -> {'Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'())} end; {'Prelude.Types.Just', V3} -> begin (V4 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V0, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V18 = fun (V9) -> case V8 of {'Core.Value.NBind', V10, V11, V12, V13} -> case V12 of {'Core.TT.Pi', V14, V15, V16, V17} -> {'Prelude.Types.Right', V15}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'())} end; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'())} end end), V18 end(V5)) end end end end end.
'un--dropName'(V0, V1) -> begin (V2 = V1), ('nested--10041-11536--in--un--drop'(V1, V0, V2)) end.
'un--checkPiInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Core.TT.Explicit'} -> fun (V13) -> {'Prelude.Types.Right', {'Core.TT.Explicit'}} end; {'Core.TT.Implicit'} -> fun (V14) -> {'Prelude.Types.Right', {'Core.TT.Implicit'}} end; {'Core.TT.AutoImplicit'} -> fun (V15) -> {'Prelude.Types.Right', {'Core.TT.AutoImplicit'}} end; {'Core.TT.DefImplicit', V16} -> begin (V17 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V16, V12))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V25 = fun (V22) -> case V21 of {'Builtin.MkPair', V23, V24} -> {'Prelude.Types.Right', {'Core.TT.DefImplicit', V23}} end end), V25 end(V18)) end end end end end.
'un--checkPi'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> begin (V24 = ('nested--10314-11845--in--un--getRig'(V0, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V8 of {'TTImp.Elab.Check.MkElabInfo', V18, V19, V20, V21, V22, V23} -> V18 end))), begin (V25 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V67 = begin (V30 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V24, V8, V9, V10, V15, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V11, V29))}))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V66 = case V34 of {'Builtin.MkPair', V35, V36} -> begin (V37 = ('un--checkPiInfo'(V0, V1, V2, V3, V4, V5, V6, V12, V8, V9, V10, V13, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V35))}))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V65 = begin (V42 = {'Core.Env.::', {'Core.TT.Pi', V11, V12, V41, V35}, V10}), begin (V43 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(('un--dropName'(V14, V9))))), begin (V44 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V64 = begin (V50 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'(V14, V0, V1, V4, V11, V42, fun (V49) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V14 | V0], V1, V2, V3, V49, V5, V6, V24, V8, V43, V42, V16, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V11, V48))})) end))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V63 = case V54 of {'Builtin.MkPair', V55, V56} -> begin (V57 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V62 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V7, V8, V10, V11, {'Core.TT.Bind', V11, V14, {'Core.TT.Pi', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V15)), V12, V41, V35}, V55}, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V11, V61)), V17))), V62 end(V58)) end end end end end), V63 end(V51)) end end end end), V64 end(V45)) end end end end end end), V65 end(V38)) end end end end end), V66 end(V31)) end end end end), V67 end(V26)) end end end end end.
'un--checkLet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V35 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V19, V20)) end end, 0, fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V21, V22)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V25, V26)) end end}}, V7)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V27, V28)) end end, 0, fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V29, V30)) end end, 1})); 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V31, V32)) end end, 0, fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V33, V34)) end end, 1})) end), begin (V36 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V11))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V159 = begin (V45 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V41) -> fun (V42) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V41, V42)) end end, 0, fun (V43) -> fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V43, V44)) end end, 1})), V8, V9, V10, V15, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V11, V40))}))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V158 = case V49 of {'Builtin.MkPair', V50, V51} -> begin (V106 = ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, begin (V59 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V1, V2, V3, V4, fun (V52) -> ('Idris.Idris2.Core.UnifyState':'dn--un--==_Eq_DelayReason'(V52, 0)) end, ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V13, V35)), case V8 of {'TTImp.Elab.Check.MkElabInfo', V53, V54, V55, V56, V57, V58} -> {'TTImp.Elab.Check.MkElabInfo', V53, V54, V55, V56, 1, V58} end, V9, V10, V16, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V50))}))))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V65 = fun (V64) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V63)), {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'(V63)), ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V13, V35))}}} end), V65 end(V60)) end end end end, fun (V66) -> case ('nested--12284-13521--in--un--linearErr'(V0, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V66)) of {'Prelude.Types.Just', V67} -> ('Idris.Idris2.Algebra.Semiring':'un--branchOne'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V68) -> fun (V69) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V68, V69)) end end, 0, fun (V70) -> fun (V71) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V70, V71)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V72) -> fun (V73) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V74, V75)) end end}}, fun () -> begin (V81 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V1, V2, V3, V4, fun (V76) -> ('Idris.Idris2.Core.UnifyState':'dn--un--==_Eq_DelayReason'(V76, 0)) end, ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V77) -> fun (V78) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V77, V78)) end end, 0, fun (V79) -> fun (V80) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V79, V80)) end end, 1})), V8, V9, V10, V16, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V50))}))))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V91 = fun (V86) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V85)), {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'(V85)), ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V87) -> fun (V88) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V87, V88)) end end, 0, fun (V89) -> fun (V90) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V89, V90)) end end, 1}))}}} end), V91 end(V82)) end end end end end, fun () -> begin (V92 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V13, V35)), V8, V9, V10, V16, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V50))}))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V98 = fun (V97) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V96)), {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'(V96)), ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V13, V35))}}} end), V98 end(V93)) end end end end end, V67)); _ -> begin (V99 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V13, V35)), V8, V9, V10, V16, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V50))}))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V105 = fun (V104) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V103)), {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'(V103)), ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V13, V35))}}} end), V105 end(V100)) end end end end end end))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V157 = case V110 of {'Builtin.MkPair', V111, V112} -> case V112 of {'Builtin.MkPair', V113, V114} -> begin (V115 = {'Core.Env.::', {'Core.TT.Lam', V11, V114, {'Core.TT.Explicit'}, V50}, V10}), begin (V116 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(('un--dropName'(V14, V9))))), begin (V117 = ('un--weakenExp'(V14, V0, V115, V18))), fun (V118) -> begin (V119 = (V117(V118))), case V119 of {'Prelude.Types.Left', V120} -> {'Prelude.Types.Left', V120}; {'Prelude.Types.Right', V121} -> (begin (V156 = begin (V123 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'(V14, V0, V1, V4, V11, V115, fun (V122) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V14 | V0], V1, V2, V3, V122, V5, V6, V35, V8, V116, V115, V17, V121)) end))), fun (V124) -> begin (V125 = (V123(V124))), case V125 of {'Prelude.Types.Left', V126} -> {'Prelude.Types.Left', V126}; {'Prelude.Types.Right', V127} -> (begin (V155 = case V127 of {'Builtin.MkPair', V128, V129} -> begin (V130 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V129))), fun (V131) -> begin (V132 = (V130(V131))), case V132 of {'Prelude.Types.Left', V133} -> {'Prelude.Types.Left', V133}; {'Prelude.Types.Right', V134} -> (begin (V154 = begin (V141 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V136 = fun (V135) -> V135 end), fun (V137) -> (V136(V137)) end end(<<"metadata.names"/utf8>>)), 7, fun () -> (begin (V139 = fun (V138) -> V138 end), fun (V140) -> (V139(V140)) end end(<<"checkLet is adding \x{2193}"/utf8>>)) end))), fun (V142) -> begin (V143 = (V141(V142))), case V143 of {'Prelude.Types.Left', V144} -> {'Prelude.Types.Left', V144}; {'Prelude.Types.Right', V145} -> (begin (V153 = begin (V146 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V1, V2, V12, V14, V10, V50))), fun (V147) -> begin (V148 = (V146(V147))), case V148 of {'Prelude.Types.Left', V149} -> {'Prelude.Types.Left', V149}; {'Prelude.Types.Right', V150} -> (begin (V152 = fun (V151) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Bind', V11, V14, {'Core.TT.Let', V11, V114, V111, V50}, V128}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V14, {'Core.TT.Let', V11, V114, V111, V50}, V134}))}} end), V152 end(V147)) end end end end), V153 end(V142)) end end end end), V154 end(V131)) end end end end end), V155 end(V124)) end end end end), V156 end(V118)) end end end end end end end end), V157 end(V107)) end end end end end), V158 end(V46)) end end end end), V159 end(V37)) end end end end end.
'un--checkLambda'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Prelude.Types.Nothing'} -> begin (V34 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V18, V19)) end end, 0, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V20, V21)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V24, V25)) end end}}, V7)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V26, V27)) end end, 0, fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V28, V29)) end end, 1})); 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V30, V31)) end end, 0, fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V32, V33)) end end, 1})) end), ('un--inferLambda'(V0, V1, V2, V3, V4, V5, V6, V34, V8, V9, V10, V11, V12, V13, V14, V15, V16, {'Prelude.Types.Nothing'})) end; {'Prelude.Types.Just', V35} -> begin (V52 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V36, V37)) end end, 0, fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V38, V39)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V42, V43)) end end}}, V7)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V44, V45)) end end, 0, fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V46, V47)) end end, 1})); 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V48) -> fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V48, V49)) end end, 0, fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V50, V51)) end end, 1})) end), begin (V60 = case V8 of {'TTImp.Elab.Check.MkElabInfo', V53, V54, V55, V56, V57, V58} -> case V53 of {'TTImp.Elab.Check.InLHS', V59} -> ('Idris.Idris2.Core.Unify':'un--inLHS'()); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end end), begin (V61 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V60, 0))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V261 = begin (V66 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V35))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V260 = begin (V71 = ('un--getTyNF'(V0, V1, V10, V70))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V259 = begin (V81 = begin (V76 = V1), fun (V77) -> begin (V80 = (begin (V78 = V76), fun (V79) -> ('erlang':'get'(V78)) end end(V77))), {'Prelude.Types.Right', V80} end end end), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V258 = case V75 of {'Core.TT.Bind', V86, V87, V88, V89} -> case V88 of {'Core.TT.Pi', V90, V91, V92, V93} -> begin (V94 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V90))), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V257 = begin (V103 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V99) -> fun (V100) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V99, V100)) end end, 0, fun (V101) -> fun (V102) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V101, V102)) end end, 1})), V8, V9, V10, V15, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V11, V98))}))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V256 = begin (V108 = {'Core.TT.Bind', V86, V87, {'Core.TT.Pi', V90, V91, V92, V93}, V89}), case V107 of {'Builtin.MkPair', V109, V110} -> begin (V111 = ('un--checkPiInfo'(V0, V1, V2, V3, V4, V5, V6, V12, V8, V9, V10, V13, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V109))}))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V255 = begin (V124 = ('Idris.Idris2.Algebra.Preorder':'un--glb'({'Algebra.Preorder.dn--un--__mkPreorder', fun (V116) -> fun (V117) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V116, V117)) end end, fun (V118) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V118)) end, fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V119, V120, V121, V122, V123)) end end end end end}, V12, V91))), begin (V125 = {'Core.Env.::', {'Core.TT.Lam', V11, V124, V115, V109}, V10}), begin (V145 = begin (V126 = ('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V11, V8, V10, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V109)), ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V93))))), ((begin (V142 = fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V139, V140, V141)) end end end end end), fun (V143) -> fun (V144) -> ((((V142('erased'))('erased'))(V143))(V144)) end end end((begin (V134 = fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> {'Prelude.Types.Right', (V130(V133))} end end end end end), fun (V135) -> fun (V136) -> ((((V134('erased'))('erased'))(V135))(V136)) end end end(fun (V127) -> {'Builtin.MkUnit'} end))))(V126)) end), fun (V146) -> begin (V147 = (V145(V146))), case V147 of {'Prelude.Types.Left', V148} -> {'Prelude.Types.Left', V148}; {'Prelude.Types.Right', V149} -> (begin (V254 = begin (V150 = ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(('un--dropName'(V14, V9))))), begin (V152 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'(V14, V0, V1, V4, V11, V125, fun (V151) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V14 | V0], V1, V2, V3, V151, V5, V6, V52, V8, V150, V125, V16, {'Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'([V14 | V0], V125, ('Idris.Idris2.Core.TT':'un--renameTop'(V14, V89))))})) end))), fun (V153) -> begin (V154 = (V152(V153))), case V154 of {'Prelude.Types.Left', V155} -> {'Prelude.Types.Left', V155}; {'Prelude.Types.Right', V156} -> (begin (V253 = case V156 of {'Builtin.MkPair', V157, V158} -> begin (V165 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, (begin (V160 = fun (V159) -> V159 end), fun (V161) -> (V160(V161)) end end(<<"elab.binder"/utf8>>)), 10, fun () -> (begin (V163 = fun (V162) -> V162 end), fun (V164) -> (V163(V164)) end end(<<"Lambda type"/utf8>>)) end, V10, V108))), fun (V166) -> begin (V167 = (V165(V166))), case V167 of {'Prelude.Types.Left', V168} -> {'Prelude.Types.Left', V168}; {'Prelude.Types.Right', V169} -> (begin (V252 = begin (V176 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'([V14 | V0], V1, (begin (V171 = fun (V170) -> V170 end), fun (V172) -> (V171(V172)) end end(<<"elab.binder"/utf8>>)), 10, fun () -> (begin (V174 = fun (V173) -> V173 end), fun (V175) -> (V174(V175)) end end(<<"Got scope type"/utf8>>)) end, V125, V158))), fun (V177) -> begin (V178 = (V176(V177))), case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> (begin (V251 = begin (V187 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V182 = fun (V181) -> V181 end), fun (V183) -> (V182(V183)) end end(<<"metadata.names"/utf8>>)), 7, fun () -> (begin (V185 = fun (V184) -> V184 end), fun (V186) -> (V185(V186)) end end(<<"checkLambda is adding \x{2193}"/utf8>>)) end))), fun (V188) -> begin (V189 = (V187(V188))), case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> (begin (V250 = begin (V192 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V1, V2, V11, V14, V10, V93))), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V249 = begin (V236 = begin (V197 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V158))), fun (V198) -> begin (V199 = (V197(V198))), case V199 of {'Prelude.Types.Left', V200} -> {'Prelude.Types.Left', V200}; {'Prelude.Types.Right', V201} -> (begin (V235 = fun (V202) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V124, V91)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantConvert', V0, V11, case V85 of {'Core.Context.MkDefs', V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234} -> V203 end, V10, {'Core.TT.Bind', V11, V14, {'Core.TT.Pi', V90, V124, V115, V109}, V201}, {'Core.TT.Bind', V11, V87, {'Core.TT.Pi', V90, V91, V115, V93}, V89}}, V202)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V235 end(V198)) end end end end), fun (V237) -> begin (V238 = (V236(V237))), case V238 of {'Prelude.Types.Left', V239} -> {'Prelude.Types.Left', V239}; {'Prelude.Types.Right', V240} -> (begin (V248 = begin (V241 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V158))), fun (V242) -> begin (V243 = (V241(V242))), case V243 of {'Prelude.Types.Left', V244} -> {'Prelude.Types.Left', V244}; {'Prelude.Types.Right', V245} -> (begin (V247 = fun (V246) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Bind', V11, V14, {'Core.TT.Lam', V90, V124, V115, V109}, V157}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, {'Core.TT.Bind', V11, V14, {'Core.TT.Pi', V90, V124, V115, V109}, V245}))}} end), V247 end(V242)) end end end end), V248 end(V237)) end end end end), V249 end(V193)) end end end end), V250 end(V188)) end end end end), V251 end(V177)) end end end end), V252 end(V166)) end end end end end), V253 end(V153)) end end end end end), V254 end(V146)) end end end end end end), V255 end(V112)) end end end end end end), V256 end(V104)) end end end end), V257 end(V95)) end end end end; _ -> ('un--inferLambda'(V0, V1, V2, V3, V4, V5, V6, V52, V8, V9, V10, V11, V12, V13, V14, V15, V16, {'Prelude.Types.Just', V35})) end; _ -> ('un--inferLambda'(V0, V1, V2, V3, V4, V5, V6, V52, V8, V9, V10, V11, V12, V13, V14, V15, V16, {'Prelude.Types.Just', V35})) end), V258 end(V82)) end end end end), V259 end(V72)) end end end end), V260 end(V67)) end end end end), V261 end(V62)) end end end end end end end.
