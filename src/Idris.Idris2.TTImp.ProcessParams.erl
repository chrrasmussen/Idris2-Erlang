-module('Idris.Idris2.TTImp.ProcessParams').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--processParams-11802'/16,
  'nested--10045-11652--in--un--mkParamTy'/12,
  'nested--10045-11653--in--un--applyEnv'/14,
  'un--processParams'/11,
  'un--extend'/5
]).
'case--processParams-11802'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Builtin.DPair.MkDPair', V16, V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> case V19 of {'Builtin.MkPair', V20, V21} -> begin (V22 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V16, V10, <<"declare.param"/utf8>>, 5, <<"Param env"/utf8>>, V20))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V81 = begin (V32 = begin (V27 = V10), fun (V28) -> begin (V31 = (begin (V29 = V27), fun (V30) -> ('erlang':'get'(V29)) end end(V28))), {'Prelude.Types.Right', V31} end end end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V80 = begin (V69 = ('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(case V36 of {'Core.Context.MkDefs', V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68} -> V39 end, V0))), begin (V71 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V70) -> ('nested--10045-11653--in--un--applyEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V16, V20, V70)) end, V69, []))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V79 = begin (V77 = begin (V76 = V21), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V75, V76)) end), ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V78) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V16, V10, V9, V8, V7, V6, [], V77, V20, V78)) end, V0)) end), V79 end(V72)) end end end end end), V80 end(V33)) end end end end), V81 end(V23)) end end end end end end end.
'nested--10045-11652--in--un--mkParamTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> {'TTImp.TTImp.IType', V2}; [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Builtin.MkPair', V14, V15} -> case V15 of {'Builtin.MkPair', V16, V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> {'TTImp.TTImp.IPi', V2, V16, V18, {'Prelude.Types.Just', V14}, V19, ('nested--10045-11652--in--un--mkParamTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13))} end end end end(E0, E1)) end.
'nested--10045-11653--in--un--applyEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--resolveName'(V10, V13))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V22 = fun (V19) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.Name.Resolved', V18}, {'Builtin.MkPair', {'Prelude.Types.Nothing'}, {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Core.Env':'un--allVars'(V11, V12)))), fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.UnifyState':'un--applyToFull'(V11, V20, {'Core.TT.Ref', V20, V21, {'Core.Name.Resolved', V18}}, V12)) end end}}}} end), V22 end(V15)) end end end end.
'un--processParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('nested--10045-11652--in--un--mkParamTy'(V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1, V9))), begin (V16 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V8, [], V0, {'TTImp.TTImp.IBindHere', V8, {'TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V12, V13)) end end, 0, fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V14, V15)) end end, 1}))}, V11}))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V42 = begin (V24 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.param"/utf8>>, 10, fun () -> <<<<"Checking "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V22, V23)) end end}, V20))/binary>> end))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V41 = begin (V29 = ('Idris.Idris2.TTImp.Elab.Check':'un--uniVar'(V1, V3, V8))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V40 = begin (V34 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V4, V5, -1, {'TTImp.Elab.Check.InType'}, [], V6, V7, V20, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V8, V33))))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V39 = ('case--processParams-11802'(V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1, V11, V20, V33, V38, ('un--extend'(V0, V7, {'Core.TT.SubRefl'}, V6, V38))))), V39 end(V35)) end end end end), V40 end(V30)) end end end end), V41 end(V25)) end end end end), V42 end(V17)) end end end end end.
'un--extend'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Bind', V5, V6, V7, V8} -> case V7 of {'Core.TT.Pi', V9, V10, V11, V12} -> ('un--extend'([V6 | V0], {'Core.Env.::', V7, V1}, {'Core.TT.DropCons', V2}, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(V3)), V8)); _ -> {'Builtin.DPair.MkDPair', V0, {'Builtin.MkPair', V2, {'Builtin.MkPair', V1, V3}}} end; _ -> {'Builtin.DPair.MkDPair', V0, {'Builtin.MkPair', V2, {'Builtin.MkPair', V1, V3}}} end.
