-module('Idris.Idris2.System.File.Permissions').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--2632-966--in--un--getMs'/2,
  'nested--2632-965--in--un--getM'/2,
  'un--prim__chmod'/3,
  'un--mkMode'/1,
  'un--chmodRaw'/3,
  'un--chmod'/3
]).
'nested--2632-966--in--un--getMs'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Prelude.Num.MkNum', fun (V2) -> fun (V3) -> begin (V4 = (V2 + V3)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end end end, fun (V5) -> fun (V6) -> begin (V7 = (V5 * V6)), case ((V7 band 9223372036854775808) =/= 0) of 'true' -> (V7 bor -9223372036854775808); _ -> (V7 band 9223372036854775807) end end end end, fun (V8) -> begin (V9 = V8), case ((V9 band 9223372036854775808) =/= 0) of 'true' -> (V9 bor -9223372036854775808); _ -> (V9 band 9223372036854775807) end end end}, {'Prelude.Interfaces.MkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V25, V26, V27, V28)) end end end end end end end, fun (V29) -> fun (V30) -> V30 end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V33, V34, V35)) end end end end end}, ((begin (V41 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V39, V40)) end end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end(fun (V36) -> ('nested--2632-965--in--un--getM'(V0, V36)) end))(V1)))).
'nested--2632-965--in--un--getM'(V0, V1) -> case V1 of 0 -> 4; 1 -> 2; 2 -> 1 end.
'un--prim__chmod'(V0, V1, V2) -> ('erlang':'throw'({'$idris_error', <<"Error: Unsupported %foreign primitive System.File.Permissions.prim__chmod"/utf8>>})).
'un--mkMode'(V0) -> begin (V13 = (begin (V9 = (begin (V4 = (('nested--2632-966--in--un--getMs'(V0, case V0 of {'System.File.Permissions.MkPermissions', V1, V2, V3} -> V1 end)) * 64)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end + begin (V8 = (('nested--2632-966--in--un--getMs'(V0, case V0 of {'System.File.Permissions.MkPermissions', V5, V6, V7} -> V6 end)) * 8)), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end)), case ((V9 band 9223372036854775808) =/= 0) of 'true' -> (V9 bor -9223372036854775808); _ -> (V9 band 9223372036854775807) end end + ('nested--2632-966--in--un--getMs'(V0, case V0 of {'System.File.Permissions.MkPermissions', V10, V11, V12} -> V12 end)))), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end.
'un--chmodRaw'(V0, V1, V2) -> case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V18, V19} -> ((V19('erased'))(fun (V20) -> ('un--prim__chmod'(V1, V2, V20)) end)) end))(fun (V8) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V8, begin (V9 = 0), case ((V9 band 9223372036854775808) =/= 0) of 'true' -> (V9 bor -9223372036854775808); _ -> (V9 band 9223372036854775807) end end)) of 1 -> case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> case V12 of {'Prelude.Interfaces.MkApplicative', V15, V16, V17} -> ((V16('erased'))({'Prelude.Types.Right', {'Builtin.MkUnit'}})) end end end; 0 -> ('Idris.Idris2.System.File.Error':'un--returnError'(V0)) end end)) end end.
'un--chmod'(V0, V1, V2) -> ('un--chmodRaw'(V0, V1, ('un--mkMode'(V2)))).
