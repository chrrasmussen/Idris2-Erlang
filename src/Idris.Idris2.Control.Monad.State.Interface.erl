-module('Idris.Idris2.Control.Monad.State.Interface').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--state-3317'/6,
  'case--{Default implementation of state:0}-2394'/4,
  'dn--un--state_MonadState_$stateType_((StateT $stateType) $m)'/3,
  'dn--un--state_MonadState_$s_(MaybeT $m)'/2,
  'dn--un--state_MonadState_$s_((WriterT $r) $m)'/3,
  'dn--un--state_MonadState_$s_((ReaderT $r) $m)'/2,
  'dn--un--state_MonadState_$s_((EitherT $e) $m)'/2,
  'dn--un--state_MonadState_$s_((((RWST $r) $w) $s) $m)'/5,
  'dn--un--put_MonadState_$stateType_((StateT $stateType) $m)'/3,
  'dn--un--put_MonadState_$s_(MaybeT $m)'/2,
  'dn--un--put_MonadState_$s_((WriterT $r) $m)'/3,
  'dn--un--put_MonadState_$s_((ReaderT $r) $m)'/2,
  'dn--un--put_MonadState_$s_((EitherT $e) $m)'/2,
  'dn--un--put_MonadState_$s_((((RWST $r) $w) $s) $m)'/5,
  'dn--un--get_MonadState_$stateType_((StateT $stateType) $m)'/2,
  'dn--un--get_MonadState_$s_(MaybeT $m)'/1,
  'dn--un--get_MonadState_$s_((WriterT $r) $m)'/2,
  'dn--un--get_MonadState_$s_((ReaderT $r) $m)'/1,
  'dn--un--get_MonadState_$s_((EitherT $e) $m)'/1,
  'dn--un--get_MonadState_$s_((((RWST $r) $w) $s) $m)'/4,
  'dn--un--__MonadState_(Monad m)'/1,
  'dn--un--__Impl_MonadState_$stateType_((StateT $stateType) $m)'/1,
  'dn--un--__Impl_MonadState_$s_(MaybeT $m)'/1,
  'dn--un--__Impl_MonadState_$s_((WriterT $r) $m)'/1,
  'dn--un--__Impl_MonadState_$s_((ReaderT $r) $m)'/1,
  'dn--un--__Impl_MonadState_$s_((EitherT $e) $m)'/1,
  'dn--un--__Impl_MonadState_$s_((((RWST $r) $w) $s) $m)'/1,
  'un--state'/2,
  'un--put'/2,
  'un--modify'/2,
  'un--gets'/2,
  'un--get'/1
]).
'case--state-3317'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Builtin.MkPair', V6, V7} -> case V0 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> case V8 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> ((V12('erased'))({'Builtin.MkPair', V7, {'Builtin.MkPair', V6, V4}})) end end end.
'case--{Default implementation of state:0}-2394'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V1 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V6, V7, V8, V9} -> case V6 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> ((((V11('erased'))('erased'))(case V1 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V24, V25, V26, V27} -> (V26(V4)) end))(fun (V13) -> case V1 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V14, V15, V16, V17} -> case V14 of {'Prelude.Interfaces.MkMonad', V18, V19, V20} -> case V18 of {'Prelude.Interfaces.MkApplicative', V21, V22, V23} -> ((V22('erased'))(V5)) end end end end)) end end end.
'dn--un--state_MonadState_$stateType_((StateT $stateType) $m)'(V0, V1, V2) -> case V0 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> case V3 of {'Prelude.Interfaces.MkApplicative', V6, V7, V8} -> ((V7('erased'))((V1(V2)))) end end.
'dn--un--state_MonadState_$s_(MaybeT $m)'(V0, V1) -> (begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(V8, V9)) end end end end), fun (V11) -> ((((V10('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V12, V13, V14, V15} -> V12 end))(V11)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V2, V3, V4, V5} -> ((V5('erased'))(V1)) end)).
'dn--un--state_MonadState_$s_((WriterT $r) $m)'(V0, V1, V2) -> ((begin (V18 = case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V8, V9, V10, V11} -> case V8 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> case V12 of {'Prelude.Interfaces.MkApplicative', V15, V16, V17} -> V15 end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V7) -> {'Builtin.MkPair', V7, V2} end))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V3, V4, V5, V6} -> ((V6('erased'))(V1)) end)).
'dn--un--state_MonadState_$s_((ReaderT $r) $m)'(V0, V1) -> (begin (V11 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end end end), fun (V12) -> ((((V11('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V13, V14, V15, V16} -> V13 end))(V12)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V2, V3, V4, V5} -> ((V5('erased'))(V1)) end)).
'dn--un--state_MonadState_$s_((EitherT $e) $m)'(V0, V1) -> (begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(V8, V9)) end end end end), fun (V11) -> ((((V10('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V12, V13, V14, V15} -> V12 end))(V11)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V2, V3, V4, V5} -> ((V5('erased'))(V1)) end)).
'dn--un--state_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4) -> case (V1(V3)) of {'Builtin.MkPair', V5, V6} -> case V0 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> case V7 of {'Prelude.Interfaces.MkApplicative', V10, V11, V12} -> ((V11('erased'))({'Builtin.MkPair', V6, {'Builtin.MkPair', V5, V4}})) end end end.
'dn--un--put_MonadState_$stateType_((StateT $stateType) $m)'(V0, V1, V2) -> case V0 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> case V3 of {'Prelude.Interfaces.MkApplicative', V6, V7, V8} -> ((V7('erased'))({'Builtin.MkPair', V1, {'Builtin.MkUnit'}})) end end.
'dn--un--put_MonadState_$s_(MaybeT $m)'(V0, V1) -> (begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(V8, V9)) end end end end), fun (V11) -> ((((V10('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V12, V13, V14, V15} -> V12 end))(V11)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V2, V3, V4, V5} -> (V4(V1)) end)).
'dn--un--put_MonadState_$s_((WriterT $r) $m)'(V0, V1, V2) -> ((begin (V18 = case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V8, V9, V10, V11} -> case V8 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> case V12 of {'Prelude.Interfaces.MkApplicative', V15, V16, V17} -> V15 end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V7) -> {'Builtin.MkPair', V7, V2} end))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V3, V4, V5, V6} -> (V5(V1)) end)).
'dn--un--put_MonadState_$s_((ReaderT $r) $m)'(V0, V1) -> (begin (V11 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end end end), fun (V12) -> ((((V11('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V13, V14, V15, V16} -> V13 end))(V12)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V2, V3, V4, V5} -> (V4(V1)) end)).
'dn--un--put_MonadState_$s_((EitherT $e) $m)'(V0, V1) -> (begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(V8, V9)) end end end end), fun (V11) -> ((((V10('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V12, V13, V14, V15} -> V12 end))(V11)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V2, V3, V4, V5} -> (V4(V1)) end)).
'dn--un--put_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4) -> case V0 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> case V5 of {'Prelude.Interfaces.MkApplicative', V8, V9, V10} -> ((V9('erased'))({'Builtin.MkPair', {'Builtin.MkUnit'}, {'Builtin.MkPair', V1, V4}})) end end.
'dn--un--get_MonadState_$stateType_((StateT $stateType) $m)'(V0, V1) -> case V0 of {'Prelude.Interfaces.MkMonad', V2, V3, V4} -> case V2 of {'Prelude.Interfaces.MkApplicative', V5, V6, V7} -> ((V6('erased'))({'Builtin.MkPair', V1, V1})) end end.
'dn--un--get_MonadState_$s_(MaybeT $m)'(V0) -> (begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(V7, V8)) end end end end), fun (V10) -> ((((V9('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V11, V12, V13, V14} -> V11 end))(V10)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V1, V2, V3, V4} -> V2 end)).
'dn--un--get_MonadState_$s_((WriterT $r) $m)'(V0, V1) -> ((begin (V17 = case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V7, V8, V9, V10} -> case V7 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> case V11 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> V14 end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V6) -> {'Builtin.MkPair', V6, V1} end))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V2, V3, V4, V5} -> V3 end)).
'dn--un--get_MonadState_$s_((ReaderT $r) $m)'(V0) -> (begin (V10 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end end end), fun (V11) -> ((((V10('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V12, V13, V14, V15} -> V12 end))(V11)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V1, V2, V3, V4} -> V2 end)).
'dn--un--get_MonadState_$s_((EitherT $e) $m)'(V0) -> (begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(V7, V8)) end end end end), fun (V10) -> ((((V9('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V11, V12, V13, V14} -> V11 end))(V10)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V1, V2, V3, V4} -> V2 end)).
'dn--un--get_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3) -> case V0 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> case V4 of {'Prelude.Interfaces.MkApplicative', V7, V8, V9} -> ((V8('erased'))({'Builtin.MkPair', V2, {'Builtin.MkPair', V2, V3}})) end end.
'dn--un--__MonadState_(Monad m)'(V0) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V1, V2, V3, V4} -> V1 end.
'dn--un--__Impl_MonadState_$stateType_((StateT $stateType) $m)'(V0) -> {'Control.Monad.State.Interface.dn--un--__mkMonadState', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--map_Functor_((StateT $stateType) $f)'(case V0 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> case V5 of {'Prelude.Interfaces.MkApplicative', V8, V9, V10} -> V8 end end, V3, V4)) end end end end, fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'(V0, V12, V13)) end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--<*>_Applicative_((StateT $stateType) $f)'(V0, V16, V17)) end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'(V0, V20, V21)) end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--join_Monad_((StateT $stateType) $m)'(V0, V23)) end end}, fun (V24) -> case V0 of {'Prelude.Interfaces.MkMonad', V25, V26, V27} -> case V25 of {'Prelude.Interfaces.MkApplicative', V28, V29, V30} -> ((V29('erased'))({'Builtin.MkPair', V24, V24})) end end end, fun (V31) -> fun (V32) -> case V0 of {'Prelude.Interfaces.MkMonad', V33, V34, V35} -> case V33 of {'Prelude.Interfaces.MkApplicative', V36, V37, V38} -> ((V37('erased'))({'Builtin.MkPair', V31, {'Builtin.MkUnit'}})) end end end end, fun (V39) -> fun (V40) -> fun (V41) -> case V0 of {'Prelude.Interfaces.MkMonad', V42, V43, V44} -> case V42 of {'Prelude.Interfaces.MkApplicative', V45, V46, V47} -> ((V46('erased'))((V40(V41)))) end end end end end}.
'dn--un--__Impl_MonadState_$s_(MaybeT $m)'(V0) -> {'Control.Monad.State.Interface.dn--un--__mkMonadState', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--map_Functor_(MaybeT $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V5, V6, V7, V8} -> case V5 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> V12 end end end, V3, V4)) end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--pure_Applicative_(MaybeT $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V17, V18, V19, V20} -> case V17 of {'Prelude.Interfaces.MkMonad', V21, V22, V23} -> V21 end end, V16)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--<*>_Applicative_(MaybeT $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V28, V29, V30, V31} -> case V28 of {'Prelude.Interfaces.MkMonad', V32, V33, V34} -> V32 end end, V26, V27)) end end end end}, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un-->>=_Monad_(MaybeT $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V39, V40, V41, V42} -> V39 end, V37, V38)) end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--join_Monad_(MaybeT $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V45, V46, V47, V48} -> V45 end, V44)) end end}, (begin (V57 = fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(V55, V56)) end end end end), fun (V58) -> ((((V57('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V59, V60, V61, V62} -> V59 end))(V58)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V49, V50, V51, V52} -> V50 end)), fun (V63) -> (begin (V72 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(V70, V71)) end end end end), fun (V73) -> ((((V72('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V74, V75, V76, V77} -> V74 end))(V73)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V64, V65, V66, V67} -> (V66(V63)) end)) end, fun (V78) -> fun (V79) -> (begin (V88 = fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(V86, V87)) end end end end), fun (V89) -> ((((V88('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V90, V91, V92, V93} -> V90 end))(V89)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V80, V81, V82, V83} -> ((V83('erased'))(V79)) end)) end end}.
'dn--un--__Impl_MonadState_$s_((WriterT $r) $m)'(V0) -> {'Control.Monad.State.Interface.dn--un--__mkMonadState', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ((begin (V20 = case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V10, V11, V12, V13} -> case V10 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkApplicative', V17, V18, V19} -> V17 end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', (V3(V8)), V9} end end))((begin (V6 = V4), V6 end(V5)))) end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V26, V27, V28, V29} -> case V26 of {'Prelude.Interfaces.MkMonad', V30, V31, V32} -> case V30 of {'Prelude.Interfaces.MkApplicative', V33, V34, V35} -> ((V34('erased'))({'Builtin.MkPair', V24, V25})) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = V38), begin (V41 = V39), fun (V42) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V43, V44, V45, V46} -> case V43 of {'Prelude.Interfaces.MkMonad', V47, V48, V49} -> ((((V48('erased'))('erased'))((V40(V42))))(fun (V50) -> case V50 of {'Builtin.MkPair', V51, V52} -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V53, V54, V55, V56} -> case V53 of {'Prelude.Interfaces.MkMonad', V57, V58, V59} -> ((((V58('erased'))('erased'))((V41(V52))))(fun (V60) -> case V60 of {'Builtin.MkPair', V61, V62} -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V63, V64, V65, V66} -> case V63 of {'Prelude.Interfaces.MkMonad', V67, V68, V69} -> case V67 of {'Prelude.Interfaces.MkApplicative', V70, V71, V72} -> ((V71('erased'))({'Builtin.MkPair', (V51(V61)), V62})) end end end end end)) end end end end)) end end end end end end end end end}, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V78, V79, V80, V81} -> case V78 of {'Prelude.Interfaces.MkMonad', V82, V83, V84} -> ((((V83('erased'))('erased'))((begin (V89 = V75), V89 end(V77))))(fun (V85) -> case V85 of {'Builtin.MkPair', V86, V87} -> (begin (V88 = (V76(V86))), V88 end(V87)) end end)) end end end end end end end, fun (V90) -> fun (V91) -> fun (V92) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V93, V94, V95, V96} -> case V93 of {'Prelude.Interfaces.MkMonad', V97, V98, V99} -> ((((V98('erased'))('erased'))((begin (V104 = V91), V104 end(V92))))(fun (V100) -> case V100 of {'Builtin.MkPair', V101, V102} -> (begin (V103 = V101), V103 end(V102)) end end)) end end end end end}, fun (V105) -> ((begin (V121 = case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V111, V112, V113, V114} -> case V111 of {'Prelude.Interfaces.MkMonad', V115, V116, V117} -> case V115 of {'Prelude.Interfaces.MkApplicative', V118, V119, V120} -> V118 end end end), fun (V122) -> fun (V123) -> ((((V121('erased'))('erased'))(V122))(V123)) end end end(fun (V110) -> {'Builtin.MkPair', V110, V105} end))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V106, V107, V108, V109} -> V107 end)) end, fun (V124) -> fun (V125) -> ((begin (V141 = case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V131, V132, V133, V134} -> case V131 of {'Prelude.Interfaces.MkMonad', V135, V136, V137} -> case V135 of {'Prelude.Interfaces.MkApplicative', V138, V139, V140} -> V138 end end end), fun (V142) -> fun (V143) -> ((((V141('erased'))('erased'))(V142))(V143)) end end end(fun (V130) -> {'Builtin.MkPair', V130, V125} end))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V126, V127, V128, V129} -> (V128(V124)) end)) end end, fun (V144) -> fun (V145) -> fun (V146) -> ((begin (V162 = case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V152, V153, V154, V155} -> case V152 of {'Prelude.Interfaces.MkMonad', V156, V157, V158} -> case V156 of {'Prelude.Interfaces.MkApplicative', V159, V160, V161} -> V159 end end end), fun (V163) -> fun (V164) -> ((((V162('erased'))('erased'))(V163))(V164)) end end end(fun (V151) -> {'Builtin.MkPair', V151, V146} end))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V147, V148, V149, V150} -> ((V150('erased'))(V145)) end)) end end end}.
'dn--un--__Impl_MonadState_$s_((ReaderT $r) $m)'(V0) -> {'Control.Monad.State.Interface.dn--un--__mkMonadState', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--map_Functor_((ReaderT $stateType) $f)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V5, V6, V7, V8} -> case V5 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> V12 end end end, V3, V4)) end end end end, fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--pure_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V18, V19, V20, V21} -> case V18 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> V22 end end, V16, V17)) end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--<*>_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V29, V30, V31, V32} -> case V29 of {'Prelude.Interfaces.MkMonad', V33, V34, V35} -> V33 end end, V27, V28)) end end end end}, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un-->>=_Monad_((ReaderT $stateType) $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V40, V41, V42, V43} -> V40 end, V38, V39)) end end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--join_Monad_((ReaderT $stateType) $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V46, V47, V48, V49} -> V46 end, V45)) end end}, (begin (V59 = fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> V57 end end end end end), fun (V60) -> ((((V59('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V61, V62, V63, V64} -> V61 end))(V60)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V50, V51, V52, V53} -> V51 end)), fun (V65) -> (begin (V75 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> V73 end end end end end), fun (V76) -> ((((V75('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V77, V78, V79, V80} -> V77 end))(V76)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V66, V67, V68, V69} -> (V68(V65)) end)) end, fun (V81) -> fun (V82) -> (begin (V92 = fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> V90 end end end end end), fun (V93) -> ((((V92('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V94, V95, V96, V97} -> V94 end))(V93)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V83, V84, V85, V86} -> ((V86('erased'))(V82)) end)) end end}.
'dn--un--__Impl_MonadState_$s_((EitherT $e) $m)'(V0) -> {'Control.Monad.State.Interface.dn--un--__mkMonadState', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--map_Functor_((EitherT $e) $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V5, V6, V7, V8} -> case V5 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> V12 end end end, V3, V4)) end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--pure_Applicative_((EitherT $e) $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V17, V18, V19, V20} -> case V17 of {'Prelude.Interfaces.MkMonad', V21, V22, V23} -> V21 end end, V16)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--<*>_Applicative_((EitherT $e) $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V28, V29, V30, V31} -> case V28 of {'Prelude.Interfaces.MkMonad', V32, V33, V34} -> V32 end end, V26, V27)) end end end end}, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un-->>=_Monad_((EitherT $e) $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V39, V40, V41, V42} -> V39 end, V37, V38)) end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--join_Monad_((EitherT $e) $m)'(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V45, V46, V47, V48} -> V45 end, V44)) end end}, (begin (V57 = fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(V55, V56)) end end end end), fun (V58) -> ((((V57('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V59, V60, V61, V62} -> V59 end))(V58)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V49, V50, V51, V52} -> V50 end)), fun (V63) -> (begin (V72 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(V70, V71)) end end end end), fun (V73) -> ((((V72('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V74, V75, V76, V77} -> V74 end))(V73)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V64, V65, V66, V67} -> (V66(V63)) end)) end, fun (V78) -> fun (V79) -> (begin (V88 = fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(V86, V87)) end end end end), fun (V89) -> ((((V88('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V90, V91, V92, V93} -> V90 end))(V89)) end end(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V80, V81, V82, V83} -> ((V83('erased'))(V79)) end)) end end}.
'dn--un--__Impl_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0) -> {'Control.Monad.State.Interface.dn--un--__mkMonadState', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ((begin (V20 = case V0 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkApplicative', V17, V18, V19} -> V17 end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> {'Builtin.MkPair', (V3(V10)), {'Builtin.MkPair', V12, V13}} end end end))((((begin (V8 = V4), V8 end(V5))(V6))(V7)))) end end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V0 of {'Prelude.Interfaces.MkMonad', V28, V29, V30} -> case V28 of {'Prelude.Interfaces.MkApplicative', V31, V32, V33} -> ((V32('erased'))({'Builtin.MkPair', V24, {'Builtin.MkPair', V26, V27}})) end end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = V36), begin (V39 = V37), fun (V40) -> fun (V41) -> fun (V42) -> case V0 of {'Prelude.Interfaces.MkMonad', V43, V44, V45} -> ((((V44('erased'))('erased'))((((V38(V40))(V41))(V42))))(fun (V46) -> case V46 of {'Builtin.MkPair', V47, V48} -> case V48 of {'Builtin.MkPair', V49, V50} -> case V0 of {'Prelude.Interfaces.MkMonad', V51, V52, V53} -> ((((V52('erased'))('erased'))((((V39(V40))(V49))(V50))))(fun (V54) -> case V54 of {'Builtin.MkPair', V55, V56} -> case V56 of {'Builtin.MkPair', V57, V58} -> case V0 of {'Prelude.Interfaces.MkMonad', V59, V60, V61} -> case V59 of {'Prelude.Interfaces.MkApplicative', V62, V63, V64} -> ((V63('erased'))({'Builtin.MkPair', (V47(V55)), {'Builtin.MkPair', V57, V58}})) end end end end end)) end end end end)) end end end end end end end end end end}, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> case V0 of {'Prelude.Interfaces.MkMonad', V72, V73, V74} -> ((((V73('erased'))('erased'))((((begin (V81 = V67), V81 end(V69))(V70))(V71))))(fun (V75) -> case V75 of {'Builtin.MkPair', V76, V77} -> case V77 of {'Builtin.MkPair', V78, V79} -> (((begin (V80 = (V68(V76))), V80 end(V69))(V78))(V79)) end end end)) end end end end end end end end, fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> case V0 of {'Prelude.Interfaces.MkMonad', V87, V88, V89} -> ((((V88('erased'))('erased'))((((begin (V96 = V83), V96 end(V84))(V85))(V86))))(fun (V90) -> case V90 of {'Builtin.MkPair', V91, V92} -> case V92 of {'Builtin.MkPair', V93, V94} -> (((begin (V95 = V91), V95 end(V84))(V93))(V94)) end end end)) end end end end end end}, fun (V97) -> fun (V98) -> fun (V99) -> case V0 of {'Prelude.Interfaces.MkMonad', V100, V101, V102} -> case V100 of {'Prelude.Interfaces.MkApplicative', V103, V104, V105} -> ((V104('erased'))({'Builtin.MkPair', V98, {'Builtin.MkPair', V98, V99}})) end end end end end, fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> case V0 of {'Prelude.Interfaces.MkMonad', V110, V111, V112} -> case V110 of {'Prelude.Interfaces.MkApplicative', V113, V114, V115} -> ((V114('erased'))({'Builtin.MkPair', {'Builtin.MkUnit'}, {'Builtin.MkPair', V106, V109}})) end end end end end end, fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> case (V117(V119)) of {'Builtin.MkPair', V121, V122} -> case V0 of {'Prelude.Interfaces.MkMonad', V123, V124, V125} -> case V123 of {'Prelude.Interfaces.MkApplicative', V126, V127, V128} -> ((V127('erased'))({'Builtin.MkPair', V122, {'Builtin.MkPair', V121, V120}})) end end end end end end end end}.
'un--state'(V0, V1) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V2, V3, V4, V5} -> ((V5('erased'))(V1)) end.
'un--put'(V0, V1) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V2, V3, V4, V5} -> (V4(V1)) end.
'un--modify'(V0, V1) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V2, V3, V4, V5} -> case V2 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V14, V15, V16, V17} -> V15 end))(fun (V9) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V10, V11, V12, V13} -> (V12((V1(V9)))) end end)) end end.
'un--gets'(V0, V1) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V2, V3, V4, V5} -> case V2 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V20, V21, V22, V23} -> V21 end))(fun (V9) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V10, V11, V12, V13} -> case V10 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkApplicative', V17, V18, V19} -> ((V18('erased'))((V1(V9)))) end end end end)) end end.
'un--get'(V0) -> case V0 of {'Control.Monad.State.Interface.dn--un--__mkMonadState', V1, V2, V3, V4} -> V2 end.
