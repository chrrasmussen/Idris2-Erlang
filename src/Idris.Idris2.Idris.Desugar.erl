-module('Idris.Idris2.Idris.Desugar').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--trimMultiline,dropLastNL-12412'/5,
  'with--trimMultiline,trimLast-12276'/6,
  'case--trimMultiline,trimLeft-12605'/9,
  'case--trimMultiline,trimLeft-12466'/7,
  'case--expandString,mergeStrLit-12004'/12,
  'case--toTokList-7874'/9,
  'nested--14468-12265--in--un--trimLeft'/5,
  'nested--14468-12263--in--un--trimLast'/5,
  'nested--14424-11970--in--un--toRawImp'/11,
  'nested--14747-14448--in--un--toRF'/14,
  'nested--14239-11360--in--un--toPure'/13,
  'nested--14816-14599--in--un--toIDef'/11,
  'nested--14424-11973--in--un--strInterpolate'/11,
  'nested--14816-15156--in--un--pairToCons'/16,
  'nested--14424-11972--in--un--notEmpty'/11,
  'nested--14816-16156--in--un--mkRecType'/13,
  'nested--14816-16199--in--un--mkConName'/16,
  'nested--14424-11971--in--un--mergeStrLit'/11,
  'nested--14816-16200--in--un--mapDesugarPiInfo'/17,
  'nested--14816-15644--in--un--isNamed'/18,
  'nested--14239-11359--in--un--guard'/13,
  'nested--14816-16198--in--un--fname'/16,
  'nested--14816-15157--in--un--expandConstraint'/16,
  'nested--14468-12264--in--un--dropLastNL'/4,
  'nested--13619-7854--in--un--backtickPrec'/6,
  'dn--un--__Impl_Eq_Side'/0,
  'dn--un--==_Eq_Side'/2,
  'dn--un--/=_Eq_Side'/2,
  'un--trimMultiline'/3,
  'un--toTokList'/2,
  'un--seqFun'/4,
  'un--mkPrec'/2,
  'un--initBangs'/1,
  'un--idiomise'/4,
  'un--getClauseFn'/1,
  'un--extendSyn'/3,
  'un--expandString'/10,
  'un--expandSnocList'/10,
  'un--expandList'/10,
  'un--expandDo'/10,
  'un--desugarWithProblem'/7,
  'un--desugarUpdate'/9,
  'un--desugarType'/7,
  'un--desugarTree'/9,
  'un--desugarLHS'/8,
  'un--desugarFnOpt'/7,
  'un--desugarField'/8,
  'un--desugarDo'/9,
  'un--desugarDecl'/7,
  'un--desugarData'/8,
  'un--desugarClause'/8,
  'un--desugarB'/9,
  'un--desugar'/8,
  'un--bindFun'/4,
  'un--bindBangs'/3,
  'un--addNS'/2,
  'un--addFromString'/3
]).
'with--trimMultiline,dropLastNL-12412'(V0, V1, V2, V3, V4) -> case V3 of [] -> case V4 of {'Data.List.Views.Empty'} -> []; _ -> case V4 of {'Data.List.Views.Snoc', V5, V6, V7} -> case V5 of {'Idris.Syntax.StrLiteral', V8, V9} -> ('Idris.Idris2.Data.List':'un--snoc'(V6, {'Idris.Syntax.StrLiteral', V8, ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Data.String':'un--break'(fun (V10) -> ('Idris.Idris2.Prelude.Types':'un--isNL'(V10)) end, V9))))})); _ -> V3 end; _ -> V3 end end; _ -> case V4 of {'Data.List.Views.Snoc', V11, V12, V13} -> case V11 of {'Idris.Syntax.StrLiteral', V14, V15} -> ('Idris.Idris2.Data.List':'un--snoc'(V12, {'Idris.Syntax.StrLiteral', V14, ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Data.String':'un--break'(fun (V16) -> ('Idris.Idris2.Prelude.Types':'un--isNL'(V16)) end, V15))))})); _ -> V3 end; _ -> V3 end end.
'with--trimMultiline,trimLast-12276'(V0, V1, V2, V3, V4, V5) -> case V3 of [] -> case V4 of {'Data.List.Views.Empty'} -> fun (V6) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V5, <<"Expected line wrap"/utf8>>}, V6)) end; _ -> case V4 of {'Data.List.Views.Snoc', V7, V8, V9} -> case V7 of [] -> fun (V10) -> {'Prelude.Types.Right', V0} end; [E2 | E3] -> (fun (V11, V12) -> case V11 of {'Idris.Syntax.StrLiteral', V13, V14} -> case V12 of [] -> fun (V15) -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V16, V17)) end end, 0}, fun (V18) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V18)) of 1 -> 0; 0 -> 1 end end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V14)))) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V13, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V15)); 0 -> {'Prelude.Types.Right', V8} end end; _ -> begin (V20 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'(fun (V19) -> ('Idris.Idris2.Idris.Syntax':'un--isStrInterp'(V19)) end, V7))))), fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V20, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V21)) end end end; _ -> begin (V23 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'(fun (V22) -> ('Idris.Idris2.Idris.Syntax':'un--isStrInterp'(V22)) end, V7))))), fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V23, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V24)) end end end end(E2, E3)); _ -> begin (V26 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'(fun (V25) -> ('Idris.Idris2.Idris.Syntax':'un--isStrInterp'(V25)) end, V7))))), fun (V27) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V26, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V27)) end end end end end; _ -> case V4 of {'Data.List.Views.Snoc', V28, V29, V30} -> case V28 of [] -> fun (V31) -> {'Prelude.Types.Right', V0} end; [E0 | E1] -> (fun (V32, V33) -> case V32 of {'Idris.Syntax.StrLiteral', V34, V35} -> case V33 of [] -> fun (V36) -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V37, V38)) end end, 0}, fun (V39) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V39)) of 1 -> 0; 0 -> 1 end end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V35)))) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V34, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V36)); 0 -> {'Prelude.Types.Right', V29} end end; _ -> begin (V41 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'(fun (V40) -> ('Idris.Idris2.Idris.Syntax':'un--isStrInterp'(V40)) end, V28))))), fun (V42) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V41, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V42)) end end end; _ -> begin (V44 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'(fun (V43) -> ('Idris.Idris2.Idris.Syntax':'un--isStrInterp'(V43)) end, V28))))), fun (V45) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V44, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V45)) end end end end(E0, E1)); _ -> begin (V47 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'(fun (V46) -> ('Idris.Idris2.Idris.Syntax':'un--isStrInterp'(V46)) end, V28))))), fun (V48) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V47, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V48)) end end end end end.
'case--trimMultiline,trimLeft-12605'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Builtin.MkPair', V9, V10} -> case case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V11, V12)) end end, 0}, fun (V13) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V13)) of 1 -> 0; 0 -> 1 end end, V9)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V9)), V6)) end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V4, <<"Line is less indented than the closing delimiter"/utf8>>}, V8)); 0 -> {'Prelude.Types.Right', [{'Idris.Syntax.StrLiteral', V4, ('Idris.Idris2.Prelude.Types':'un--fastPack'(V10))} | V5]} end end.
'case--trimMultiline,trimLeft-12466'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V9, V10)) end end, 0}, fun (V11) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V11)) of 1 -> 0; 0 -> 1 end end, V7)) of 1 -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V4, <<"Line is less indented than the closing delimiter"/utf8>>}, V12)) end; 0 -> begin (V16 = case ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V8)) of 1 -> (begin (V14 = fun (V13) -> V13 end), fun (V15) -> (V14(V15)) end end(<<"\x{a}"/utf8>>)); 0 -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V8)) end), fun (V17) -> {'Prelude.Types.Right', [{'Idris.Syntax.StrLiteral', V4, V16} | []]} end end end end.
'case--expandString,mergeStrLit-12004'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> case V12 of [] -> case V13 of [] -> []; [E0 | E1] -> (fun (V14, V15) -> [V14 | ('nested--14424-11971--in--un--mergeStrLit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V15))] end(E0, E1)) end; [E2 | E3] -> (fun (V16, V17) -> begin (V18 = ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Data.List':'un--head'(V12))))), begin (V27 = ('Idris.Idris2.Prelude.Types':'un--fastConcat'(((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> ('Idris.Idris2.Builtin':'un--snd'(V19)) end))(V12))))), [{'Idris.Syntax.StrLiteral', V18, V27} | ('nested--14424-11971--in--un--mergeStrLit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13))] end end end(E2, E3)) end end.
'case--toTokList-7874'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Prelude.Types.Nothing'} -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V9, V10)) end end, 0}, fun (V11) -> ('Idris.Idris2.Core.Name':'un--isOpChar'(V11)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V7)))) of 1 -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V4, <<<<"Unknown operator \x{27}"/utf8>>/binary, <<V7/binary, <<"\x{27}"/utf8>>/binary>>/binary>>}, V12)) end; 0 -> begin (V13 = ('un--toTokList'(V5, V1))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = fun (V18) -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Expr', V2} | [{'Libraries.Utils.Shunting.Op', V4, V3, V0, ('nested--13619-7854--in--un--backtickPrec'(V0, V1, V2, V3, V4, V5))} | V17]]} end), V19 end(V14)) end end end end end; {'Prelude.Types.Just', V20} -> case V20 of {'Builtin.MkPair', V21, V22} -> case V22 of {'Builtin.MkPair', V23, V24} -> case V23 of 3 -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V4, <<<<"\x{27}"/utf8>>/binary, <<V7/binary, <<"\x{27} is a prefix operator"/utf8>>/binary>>/binary>>}, V25)) end; _ -> begin (V26 = ('un--toTokList'(V5, V1))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Expr', V2} | [{'Libraries.Utils.Shunting.Op', V4, V3, V0, ('un--mkPrec'(V23, V24))} | V30]]} end), V32 end(V27)) end end end end end end end end.
'nested--14468-12265--in--un--trimLeft'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Syntax.StrLiteral', V8, V9} -> case V7 of [] -> ('case--trimMultiline,trimLeft-12466'(V0, V1, V2, V9, V8, V3, ('Idris.Idris2.Data.List':'un--splitAt'(V3, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V9)))))); _ -> fun (V10) -> ('case--trimMultiline,trimLeft-12605'(V0, V1, V2, V9, V8, V7, V3, ('Idris.Idris2.Data.List':'un--splitAt'(V3, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V9)))), V10)) end end; _ -> fun (V11) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V2, <<"Line is less indented than the closing delimiter"/utf8>>}, V11)) end end end(E0, E1)); _ -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.BadMultiline', V2, <<"Line is less indented than the closing delimiter"/utf8>>}, V12)) end end.
'nested--14468-12263--in--un--trimLast'(V0, V1, V2, V3, V4) -> ('with--trimMultiline,trimLast-12276'(V4, V1, V3, V4, ('Idris.Idris2.Data.List.Views':'un--snocList'(V4)), V3)).
'nested--14424-11970--in--un--toRawImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Syntax.StrLiteral', V11, V12} -> fun (V13) -> {'Prelude.Types.Right', {'TTImp.TTImp.IPrimVal', V11, {'Core.TT.Str', V12}}} end; {'Idris.Syntax.StrInterp', V14, V15} -> ('un--desugarB'(V9, V8, V7, V6, V5, V4, V3, V2, V15)) end.
'nested--14747-14448--in--un--toRF'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Core.Name.UN', V14} -> case V14 of {'Core.Name.Basic', V15} -> {'Core.Name.UN', {'Core.Name.Field', V15}}; _ -> V13 end; _ -> V13 end.
'nested--14239-11360--in--un--toPure'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Syntax.DoExp', V2, {'Idris.Syntax.PApp', V2, {'Idris.Syntax.PRef', V2, ('Idris.Idris2.Core.Name':'un--mbApplyNS'(V11, {'Core.Name.UN', {'Core.Name.Basic', <<"pure"/utf8>>}}))}, V12}}.
'nested--14816-14599--in--un--toIDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'TTImp.TTImp.PatClause', V11, V12, V13} -> {'Prelude.Types.Right', {'TTImp.TTImp.IDef', V11, V8, [{'TTImp.TTImp.PatClause', V11, V12, V13} | []]}}; {'TTImp.TTImp.WithClause', V14, V15, V16, V17, V18, V19, V20} -> {'Prelude.Types.Right', {'TTImp.TTImp.IDef', V14, V8, [{'TTImp.TTImp.WithClause', V14, V15, V16, V17, V18, V19, V20} | []]}}; {'TTImp.TTImp.ImpossibleClause', V21, V22} -> {'Prelude.Types.Right', {'TTImp.TTImp.IDef', V21, V8, [{'TTImp.TTImp.ImpossibleClause', V21, V22} | []]}} end.
'nested--14424-11973--in--un--strInterpolate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> {'TTImp.TTImp.IVar', {'Core.FC.EmptyFC'}, ('Idris.Idris2.Idris.Syntax.Builtin':'un--nilName'())}; [E0 | E1] -> (fun (V11, V12) -> begin (V13 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.TTImp.TTImp':'un--getFC'(V11))))), ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V13, ('Idris.Idris2.Idris.Syntax.Builtin':'un--consName'())}, [{'TTImp.TTImp.IApp', V13, {'TTImp.TTImp.IVar', {'Core.FC.EmptyFC'}, ('Idris.Idris2.Idris.Syntax.Builtin':'un--interpolateName'())}, V11} | [('nested--14424-11973--in--un--strInterpolate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12)) | []]])) end end(E0, E1)) end.
'nested--14816-15156--in--un--pairToCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Syntax.PPair', V16, V17, V18} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--14816-15156--in--un--pairToCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17)), ('nested--14816-15156--in--un--pairToCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V18)))); _ -> [V15 | []] end.
'nested--14424-11972--in--un--notEmpty'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Syntax.StrLiteral', V11, V12} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V12, <<""/utf8>>)); {'Idris.Syntax.StrInterp', V13, V14} -> 1 end.
'nested--14816-16156--in--un--mkRecType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> {'Idris.Syntax.PType', V5}; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Builtin.MkPair', V15, V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> case V18 of {'Builtin.MkPair', V19, V20} -> {'Idris.Syntax.PPi', V5, V17, V19, {'Prelude.Types.Just', V15}, V20, ('nested--14816-16156--in--un--mkRecType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14))} end end end end(E0, E1)) end.
'nested--14816-16199--in--un--mkConName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Core.Name.NS', V16, V17} -> case V17 of {'Core.Name.UN', V18} -> begin (V19 = ('Idris.Idris2.Core.Name':'un--displayUserName'(V18))), {'Core.Name.NS', V16, {'Core.Name.DN', V19, {'Core.Name.MN', <<<<"__mk"/utf8>>/binary, V19/binary>>, 0}}} end; _ -> {'Core.Name.DN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)), {'Core.Name.MN', <<<<"__mk"/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15))/binary>>, 0}} end; _ -> {'Core.Name.DN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)), {'Core.Name.MN', <<<<"__mk"/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15))/binary>>, 0}} end.
'nested--14424-11971--in--un--mergeStrLit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('case--expandString,mergeStrLit-12004'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, ('Idris.Idris2.Data.List':'un--spanBy'(fun (V11) -> ('Idris.Idris2.Idris.Syntax':'un--isStrLiteral'(V11)) end, V10)))).
'nested--14816-16200--in--un--mapDesugarPiInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V17) -> ('un--desugar'(V14, V13, V11, V12, V10, 1, V15, V17)) end, V16)).
'nested--14816-15644--in--un--isNamed'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Prelude.Types.Nothing'} -> 0; {'Prelude.Types.Just', V18} -> 1 end.
'nested--14239-11359--in--un--guard'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Syntax.DoExp', V13, V14} -> {'Idris.Syntax.DoExp', V13, {'Idris.Syntax.PApp', V13, {'Idris.Syntax.PRef', V13, ('Idris.Idris2.Core.Name':'un--mbApplyNS'(V11, {'Core.Name.UN', {'Core.Name.Basic', <<"guard"/utf8>>}}))}, V14}}; _ -> V12 end.
'nested--14816-16198--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Syntax.MkField', V16, V17, V18, V19, V20, V21} -> V20 end.
'nested--14816-15157--in--un--expandConstraint'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Builtin.MkPair', V16, V17} -> case V16 of {'Prelude.Types.Just', V18} -> [{'Builtin.MkPair', {'Prelude.Types.Just', V18}, V17} | []]; {'Prelude.Types.Nothing'} -> ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> {'Builtin.MkPair', {'Prelude.Types.Nothing'}, V19} end))(('nested--14816-15156--in--un--pairToCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17)))) end end.
'nested--14468-12264--in--un--dropLastNL'(V0, V1, V2, V3) -> ('with--trimMultiline,dropLastNL-12412'(V0, V1, V2, V3, ('Idris.Idris2.Data.List.Views':'un--snocList'(V3)))).
'nested--13619-7854--in--un--backtickPrec'(V0, V1, V2, V3, V4, V5) -> {'Libraries.Utils.Shunting.NonAssoc', 1}.
'dn--un--__Impl_Eq_Side'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Side'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Side'(V2, V3)) end end}.
'dn--un--==_Eq_Side'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_Side'(V0, V1) -> case ('dn--un--==_Eq_Side'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--trimMultiline'(V0, V1, V2) -> case case (V1 =:= 0) of 'false' -> 0; _ -> 1 end of 1 -> fun (V3) -> {'Prelude.Types.Right', ('nested--14468-12264--in--un--dropLastNL'(V2, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, V5)) end end, []}, fun (V6) -> V6 end, V2))))} end; 0 -> begin (V7 = ('nested--14468-12263--in--un--trimLast'(V2, V1, V0, V0, V2))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V23 = begin (V13 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V12) -> ('nested--14468-12265--in--un--trimLeft'(V2, V1, V0, V1, V12)) end, V11, []))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V22 = fun (V18) -> {'Prelude.Types.Right', ('nested--14468-12264--in--un--dropLastNL'(V2, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V19, V20)) end end, []}, fun (V21) -> V21 end, V17))))} end), V22 end(V14)) end end end end), V23 end(V8)) end end end end end.
'un--toTokList'(V0, V1) -> case V1 of {'Idris.Syntax.POp', V2, V3, V4, V5, V6} -> begin (V12 = begin (V7 = V0), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V31 = begin (V17 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V4))), ('case--toTokList-7874'(V4, V6, V5, V3, V2, V0, V16, V17, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V17, case V16 of {'Idris.Syntax.MkSyntax', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} -> V18 end)))) end), V31 end(V13)) end end end end; {'Idris.Syntax.PPrefixOp', V32, V33, V34, V35} -> begin (V41 = begin (V36 = V0), fun (V37) -> begin (V40 = (begin (V38 = V36), fun (V39) -> ('erlang':'get'(V38)) end end(V37))), {'Prelude.Types.Right', V40} end end end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V71 = begin (V46 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V34))), case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V46, case V45 of {'Idris.Syntax.MkSyntax', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59} -> V48 end)) of {'Prelude.Types.Nothing'} -> fun (V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V32, <<<<"\x{27}"/utf8>>/binary, <<V46/binary, <<"\x{27} is not a prefix operator"/utf8>>/binary>>/binary>>}, V60)) end; {'Prelude.Types.Just', V61} -> case V61 of {'Builtin.MkPair', V62, V63} -> begin (V64 = ('un--toTokList'(V0, V35))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V70 = fun (V69) -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Op', V32, V33, V34, {'Libraries.Utils.Shunting.Prefix', V63}} | V68]} end), V70 end(V65)) end end end end end end end), V71 end(V42)) end end end end; _ -> fun (V72) -> {'Prelude.Types.Right', [{'Libraries.Utils.Shunting.Expr', V1} | []]} end end.
'un--seqFun'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V0))), {'TTImp.TTImp.IApp', V4, {'TTImp.TTImp.IApp', V4, {'TTImp.TTImp.IVar', V4, ('un--addNS'(V1, {'Core.Name.UN', {'Core.Name.Basic', <<">>"/utf8>>}}))}, V2}, V3} end.
'un--mkPrec'(V0, V1) -> case V0 of 0 -> {'Libraries.Utils.Shunting.AssocL', V1}; 1 -> {'Libraries.Utils.Shunting.AssocR', V1}; 2 -> {'Libraries.Utils.Shunting.NonAssoc', V1}; 3 -> {'Libraries.Utils.Shunting.Prefix', V1} end.
'un--initBangs'(V0) -> {'Idris.Desugar.MkBangData', 0, [], V0}.
'un--idiomise'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.IAlternative', V4, V5, V6} -> {'TTImp.TTImp.IAlternative', V4, ('Idris.Idris2.TTImp.TTImp':'un--mapAltType'(fun (V7) -> ('un--idiomise'(V4, V1, V2, V7)) end, V5)), ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('un--idiomise'(V4, V1, V2, V8)) end))(V6))}; {'TTImp.TTImp.IApp', V16, V17, V18} -> begin (V19 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V0))), begin (V20 = {'Core.Name.UN', {'Core.Name.Basic', <<"<*>"/utf8>>}}), begin (V22 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V20 end, fun () -> fun (V21) -> {'Core.Name.NS', V21, V20} end end, ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V2, fun () -> V1 end))))), {'TTImp.TTImp.IApp', V19, {'TTImp.TTImp.IApp', V19, {'TTImp.TTImp.IVar', V19, V22}, ('un--idiomise'(V16, V1, V2, V17))}, V18} end end end; _ -> begin (V23 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V0))), begin (V24 = {'Core.Name.UN', {'Core.Name.Basic', <<"pure"/utf8>>}}), begin (V26 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V24 end, fun () -> fun (V25) -> {'Core.Name.NS', V25, V24} end end, ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V2, fun () -> V1 end))))), {'TTImp.TTImp.IApp', V23, {'TTImp.TTImp.IVar', V23, V26}, V3} end end end end.
'un--getClauseFn'(V0) -> case V0 of {'TTImp.TTImp.IVar', V1, V2} -> fun (V3) -> {'Prelude.Types.Right', V2} end; {'TTImp.TTImp.IApp', V4, V5, V6} -> ('un--getClauseFn'(V5)); {'TTImp.TTImp.IAutoApp', V7, V8, V9} -> ('un--getClauseFn'(V8)); {'TTImp.TTImp.INamedApp', V10, V11, V12, V13} -> ('un--getClauseFn'(V11)); _ -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V0)), <<"Head term in pattern must be a function name"/utf8>>}, V14)) end end.
'un--extendSyn'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V208 = begin (V93 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"doc.module"/utf8>>, 20, fun () -> ('Idris.Idris2.Data.String':'un--fastUnlines'([<<<<"Old ("/utf8>>/binary, <<('Idris.Idris2.Data.String':'un--unwords'(((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V26) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V26)) end))(case V12 of {'Idris.Syntax.MkSyntax', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25} -> V15 end))))/binary, <<<<"): "/utf8>>/binary, ('Idris.Idris2.Libraries.Data.SortedMap':'dn--un--show_Show_((SortedMap $k) $v)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--showPrec_Show_ModuleIdent'(V35, V36)) end end}, {'Prelude.Show.MkShow', fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V38, V39)) end end}}, case V12 of {'Idris.Syntax.MkSyntax', V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52} -> V43 end))/binary>>/binary>>/binary>> | [<<<<"New ("/utf8>>/binary, <<('Idris.Idris2.Data.String':'un--unwords'(((begin (V71 = fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V69, V70)) end end end end), fun (V72) -> fun (V73) -> ((((V71('erased'))('erased'))(V72))(V73)) end end end(fun (V66) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V66)) end))(case V2 of {'Idris.Syntax.MkSyntax', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} -> V55 end))))/binary, <<<<"): "/utf8>>/binary, ('Idris.Idris2.Libraries.Data.SortedMap':'dn--un--show_Show_((SortedMap $k) $v)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V74) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--showPrec_Show_ModuleIdent'(V75, V76)) end end}, {'Prelude.Show.MkShow', fun (V77) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V78, V79)) end end}}, case V2 of {'Idris.Syntax.MkSyntax', V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92} -> V83 end))/binary>>/binary>>/binary>> | []]])) end))), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V207 = begin (V98 = V0), fun (V99) -> begin (V206 = (begin (V100 = V98), fun (V101) -> ('erlang':'put'(V100, case V12 of {'Idris.Syntax.MkSyntax', V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114} -> {'Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--mergeLeft'(case V2 of {'Idris.Syntax.MkSyntax', V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127} -> V115 end, V102)), ('Idris.Idris2.Libraries.Data.StringMap':'un--mergeLeft'(case V2 of {'Idris.Syntax.MkSyntax', V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140} -> V129 end, V103)), V104, ('Idris.Idris2.Libraries.Data.SortedMap':'un--mergeLeft'(case V2 of {'Idris.Syntax.MkSyntax', V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153} -> V144 end, V105)), ('Idris.Idris2.Libraries.Data.SortedMap':'un--mergeLeft'(case V2 of {'Idris.Syntax.MkSyntax', V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166} -> V158 end, V106)), V107, ('Idris.Idris2.Libraries.Data.ANameMap':'un--merge'(case V2 of {'Idris.Syntax.MkSyntax', V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179} -> V173 end, V108)), V109, ('Idris.Idris2.Libraries.Data.ANameMap':'un--merge'(case V2 of {'Idris.Syntax.MkSyntax', V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192} -> V188 end, V110)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V2 of {'Idris.Syntax.MkSyntax', V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205} -> V202 end, V111)), V112, V113, V114} end)) end end(V99))), {'Prelude.Types.Right', V206} end end end), V207 end(V94)) end end end end), V208 end(V9)) end end end end.
'un--expandString'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> ('nested--14424-11970--in--un--toRawImp'(V9, V8, V7, V6, V5, V4, V3, V2, V1, V0, V10)) end, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V11) -> ('nested--14424-11972--in--un--notEmpty'(V9, V8, V7, V6, V5, V4, V3, V2, V1, V0, V11)) end, ('nested--14424-11971--in--un--mergeStrLit'(V9, V8, V7, V6, V5, V4, V3, V2, V1, V0, V9)))), []))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V21 = fun (V17) -> {'Prelude.Types.Right', case V16 of [] -> {'TTImp.TTImp.IPrimVal', V8, {'Core.TT.Str', <<""/utf8>>}}; [E0 | E1] -> (fun (V18, V19) -> begin (V20 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V8))), {'TTImp.TTImp.IApp', V20, {'TTImp.TTImp.INamedApp', V20, {'TTImp.TTImp.IVar', V20, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"concat"/utf8>>}}}}, {'Core.Name.UN', {'Core.Name.Basic', <<"t"/utf8>>}}, {'TTImp.TTImp.IVar', V20, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"List"/utf8>>}}}}}, ('nested--14424-11973--in--un--strInterpolate'(V9, V8, V7, V6, V5, V4, V3, V2, V1, V0, V16))} end end(E0, E1)) end} end), V21 end(V13)) end end end end.
'un--expandSnocList'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Prelude.Basics.Lin'} -> fun (V10) -> {'Prelude.Types.Right', {'TTImp.TTImp.IVar', V8, {'Core.Name.UN', {'Core.Name.Basic', <<"Lin"/utf8>>}}}} end; {'Prelude.Basics.:<', V11, V12} -> case V12 of {'Builtin.MkPair', V13, V14} -> begin (V15 = ('un--expandSnocList'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V27 = begin (V20 = ('un--desugarB'(V0, V1, V2, V4, V3, V5, V6, V7, V14))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V26 = fun (V25) -> {'Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V13, {'Core.Name.UN', {'Core.Name.Basic', <<":<"/utf8>>}}}, [V19 | [V24 | []]]))} end), V26 end(V21)) end end end end), V27 end(V16)) end end end end end end.
'un--expandList'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> fun (V10) -> {'Prelude.Types.Right', {'TTImp.TTImp.IVar', V8, {'Core.Name.UN', {'Core.Name.Basic', <<"Nil"/utf8>>}}}} end; [E0 | E1] -> (fun (V11, V12) -> case V11 of {'Builtin.MkPair', V13, V14} -> begin (V15 = ('un--desugarB'(V0, V1, V2, V4, V3, V5, V6, V7, V14))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V27 = begin (V20 = ('un--expandList'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V26 = fun (V25) -> {'Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V13, {'Core.Name.UN', {'Core.Name.Basic', <<"::"/utf8>>}}}, [V19 | [V24 | []]]))} end), V26 end(V21)) end end end end), V27 end(V16)) end end end end end end(E0, E1)) end.
'un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V7, <<"Do block cannot be empty"/utf8>>}, V10)) end; [E0 | E1] -> (fun (V11, V12) -> case V11 of {'Idris.Syntax.DoExp', V13, V14} -> case V12 of [] -> ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V14)); _ -> case V12 of [] -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', ('Idris.Idris2.Idris.Syntax':'un--getLoc'(V11)), <<"Last statement in do block must be an expression"/utf8>>}, V15)) end; _ -> case V11 of {'Idris.Syntax.DoExp', V16, V17} -> begin (V18 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V17))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V30 = begin (V23 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V29 = fun (V28) -> {'Prelude.Types.Right', ('un--seqFun'(V16, V8, V22, V27))} end), V29 end(V24)) end end end end), V30 end(V19)) end end end end; {'Idris.Syntax.DoBind', V31, V32, V33, V34} -> begin (V35 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V34))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V55 = begin (V40 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V54 = begin (V47 = case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V32)) of {'Prelude.Types.Just', V45} -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V3, V1, [{'Builtin.MkPair', V45, {'Builtin.MkPair', 5, {'Prelude.Types.Just', V33}}} | []])); {'Prelude.Types.Nothing'} -> fun (V46) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V53 = fun (V52) -> {'Prelude.Types.Right', ('un--bindFun'(V31, V8, V39, {'TTImp.TTImp.ILam', V32, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Prelude.Types.Just', V33}, {'TTImp.TTImp.Implicit', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V31)), 0}, V44}))} end), V53 end(V48)) end end end end), V54 end(V41)) end end end end), V55 end(V36)) end end end end; {'Idris.Syntax.DoBindPat', V56, V57, V58, V59} -> begin (V60 = ('un--desugarDo'(V0, V1, V3, V2, V4, 0, V6, V8, V57))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V115 = begin (V65 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 0, V64))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V114 = case V69 of {'Builtin.MkPair', V70, V71} -> begin (V72 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V58))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V113 = begin (V97 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V77) -> begin (V78 = ('un--desugarClause'(V0, V1, V2, V3, V4, V6, 1, V77))), ((begin (V94 = fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V91, V92, V93)) end end end end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end((begin (V86 = fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> {'Prelude.Types.Right', (V82(V85))} end end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(fun (V79) -> ('Idris.Idris2.Builtin':'un--snd'(V79)) end))))(V78)) end end, V59, []))), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V112 = begin (V102 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V70, V6))), begin (V103 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V102, V7, V8, V12))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V111 = begin (V108 = V56), begin (V109 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V56))), fun (V110) -> {'Prelude.Types.Right', ('un--bindFun'(V109, V8, V76, {'TTImp.TTImp.ILam', {'Core.FC.EmptyFC'}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Prelude.Types.Just', {'Core.Name.MN', <<"_"/utf8>>, 0}}, {'TTImp.TTImp.Implicit', V109, 0}, {'TTImp.TTImp.ICase', V109, {'TTImp.TTImp.IVar', {'Core.FC.EmptyFC'}, {'Core.Name.MN', <<"_"/utf8>>, 0}}, {'TTImp.TTImp.Implicit', V109, 0}, [{'TTImp.TTImp.PatClause', V108, V71, V107} | V101]}}))} end end end), V111 end(V104)) end end end end end), V112 end(V98)) end end end end), V113 end(V73)) end end end end end), V114 end(V66)) end end end end), V115 end(V61)) end end end end; {'Idris.Syntax.DoLet', V116, V117, V118, V119, V120, V121} -> begin (V122 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Desugar.Bang'}, ('un--initBangs'(V8))))), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V169 = begin (V127 = ('un--desugarB'(V0, V126, V1, V3, V2, V4, V5, V6, V121))), fun (V128) -> begin (V129 = (V127(V128))), case V129 of {'Prelude.Types.Left', V130} -> {'Prelude.Types.Left', V130}; {'Prelude.Types.Right', V131} -> (begin (V168 = begin (V132 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V120))), fun (V133) -> begin (V134 = (V132(V133))), case V134 of {'Prelude.Types.Left', V135} -> {'Prelude.Types.Left', V135}; {'Prelude.Types.Right', V136} -> (begin (V167 = begin (V137 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))), fun (V138) -> begin (V139 = (V137(V138))), case V139 of {'Prelude.Types.Left', V140} -> {'Prelude.Types.Left', V140}; {'Prelude.Types.Right', V141} -> (begin (V166 = begin (V144 = case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V117)) of {'Prelude.Types.Just', V142} -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V3, V1, [{'Builtin.MkPair', V142, {'Builtin.MkPair', 5, {'Prelude.Types.Just', V118}}} | []])); {'Prelude.Types.Nothing'} -> fun (V143) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V145) -> begin (V146 = (V144(V145))), case V146 of {'Prelude.Types.Left', V147} -> {'Prelude.Types.Left', V147}; {'Prelude.Types.Right', V148} -> (begin (V165 = begin (V149 = {'TTImp.TTImp.ILet', V116, V117, V119, V118, V136, V131, V141}), begin (V155 = begin (V150 = V126), fun (V151) -> begin (V154 = (begin (V152 = V150), fun (V153) -> ('erlang':'get'(V152)) end end(V151))), {'Prelude.Types.Right', V154} end end end), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V164 = fun (V160) -> {'Prelude.Types.Right', ('un--bindBangs'(case V159 of {'Idris.Desugar.MkBangData', V161, V162, V163} -> V162 end, V8, V149))} end), V164 end(V156)) end end end end end), V165 end(V145)) end end end end), V166 end(V138)) end end end end), V167 end(V133)) end end end end), V168 end(V128)) end end end end), V169 end(V123)) end end end end; {'Idris.Syntax.DoLetPat', V170, V171, V172, V173, V174} -> begin (V175 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Desugar.Bang'}, ('un--initBangs'(V8))))), fun (V176) -> begin (V177 = (V175(V176))), case V177 of {'Prelude.Types.Left', V178} -> {'Prelude.Types.Left', V178}; {'Prelude.Types.Right', V179} -> (begin (V255 = begin (V180 = ('un--desugarDo'(V0, V1, V3, V2, V4, 0, V6, V8, V171))), fun (V181) -> begin (V182 = (V180(V181))), case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> (begin (V254 = begin (V185 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V172))), fun (V186) -> begin (V187 = (V185(V186))), case V187 of {'Prelude.Types.Left', V188} -> {'Prelude.Types.Left', V188}; {'Prelude.Types.Right', V189} -> (begin (V253 = begin (V190 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 0, V184))), fun (V191) -> begin (V192 = (V190(V191))), case V192 of {'Prelude.Types.Left', V193} -> {'Prelude.Types.Left', V193}; {'Prelude.Types.Right', V194} -> (begin (V252 = case V194 of {'Builtin.MkPair', V195, V196} -> begin (V197 = ('un--desugarB'(V0, V179, V1, V3, V2, V4, V5, V6, V173))), fun (V198) -> begin (V199 = (V197(V198))), case V199 of {'Prelude.Types.Left', V200} -> {'Prelude.Types.Left', V200}; {'Prelude.Types.Right', V201} -> (begin (V251 = begin (V222 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V202) -> begin (V203 = ('un--desugarClause'(V0, V1, V2, V3, V4, V6, 1, V202))), ((begin (V219 = fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V216, V217, V218)) end end end end end), fun (V220) -> fun (V221) -> ((((V219('erased'))('erased'))(V220))(V221)) end end end((begin (V211 = fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> case V208 of {'Prelude.Types.Left', V209} -> {'Prelude.Types.Left', V209}; {'Prelude.Types.Right', V210} -> {'Prelude.Types.Right', (V207(V210))} end end end end end), fun (V212) -> fun (V213) -> ((((V211('erased'))('erased'))(V212))(V213)) end end end(fun (V204) -> ('Idris.Idris2.Builtin':'un--snd'(V204)) end))))(V203)) end end, V174, []))), fun (V223) -> begin (V224 = (V222(V223))), case V224 of {'Prelude.Types.Left', V225} -> {'Prelude.Types.Left', V225}; {'Prelude.Types.Right', V226} -> (begin (V250 = begin (V227 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V195, V6))), begin (V228 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V227, V7, V8, V12))), fun (V229) -> begin (V230 = (V228(V229))), case V230 of {'Prelude.Types.Left', V231} -> {'Prelude.Types.Left', V231}; {'Prelude.Types.Right', V232} -> (begin (V249 = begin (V238 = begin (V233 = V179), fun (V234) -> begin (V237 = (begin (V235 = V233), fun (V236) -> ('erlang':'get'(V235)) end end(V234))), {'Prelude.Types.Right', V237} end end end), fun (V239) -> begin (V240 = (V238(V239))), case V240 of {'Prelude.Types.Left', V241} -> {'Prelude.Types.Left', V241}; {'Prelude.Types.Right', V242} -> (begin (V248 = begin (V243 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V170))), fun (V244) -> {'Prelude.Types.Right', ('un--bindBangs'(case V242 of {'Idris.Desugar.MkBangData', V245, V246, V247} -> V246 end, V8, {'TTImp.TTImp.ICase', V243, V201, V189, [{'TTImp.TTImp.PatClause', V243, V196, V232} | V226]}))} end end), V248 end(V239)) end end end end), V249 end(V229)) end end end end end), V250 end(V223)) end end end end), V251 end(V198)) end end end end end), V252 end(V191)) end end end end), V253 end(V186)) end end end end), V254 end(V181)) end end end end), V255 end(V176)) end end end end; {'Idris.Syntax.DoLetLocal', V256, V257} -> begin (V258 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))), fun (V259) -> begin (V260 = (V258(V259))), case V260 of {'Prelude.Types.Left', V261} -> {'Prelude.Types.Left', V261}; {'Prelude.Types.Right', V262} -> (begin (V274 = begin (V264 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V263) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V6, V263)) end, V257, []))), fun (V265) -> begin (V266 = (V264(V265))), case V266 of {'Prelude.Types.Left', V267} -> {'Prelude.Types.Left', V267}; {'Prelude.Types.Right', V268} -> (begin (V273 = fun (V269) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILocal', V256, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V270) -> fun (V271) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V270, V271)) end end, []}, fun (V272) -> V272 end, V268)), V262}} end), V273 end(V265)) end end end end), V274 end(V259)) end end end end; {'Idris.Syntax.DoRewrite', V275, V276} -> begin (V277 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))), fun (V278) -> begin (V279 = (V277(V278))), case V279 of {'Prelude.Types.Left', V280} -> {'Prelude.Types.Left', V280}; {'Prelude.Types.Right', V281} -> (begin (V289 = begin (V282 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V276))), fun (V283) -> begin (V284 = (V282(V283))), case V284 of {'Prelude.Types.Left', V285} -> {'Prelude.Types.Left', V285}; {'Prelude.Types.Right', V286} -> (begin (V288 = fun (V287) -> {'Prelude.Types.Right', {'TTImp.TTImp.IRewrite', V275, V286, V281}} end), V288 end(V283)) end end end end), V289 end(V278)) end end end end end end end; _ -> case V12 of [] -> fun (V290) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', ('Idris.Idris2.Idris.Syntax':'un--getLoc'(V11)), <<"Last statement in do block must be an expression"/utf8>>}, V290)) end; _ -> case V11 of {'Idris.Syntax.DoExp', V291, V292} -> begin (V293 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V292))), fun (V294) -> begin (V295 = (V293(V294))), case V295 of {'Prelude.Types.Left', V296} -> {'Prelude.Types.Left', V296}; {'Prelude.Types.Right', V297} -> (begin (V305 = begin (V298 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))), fun (V299) -> begin (V300 = (V298(V299))), case V300 of {'Prelude.Types.Left', V301} -> {'Prelude.Types.Left', V301}; {'Prelude.Types.Right', V302} -> (begin (V304 = fun (V303) -> {'Prelude.Types.Right', ('un--seqFun'(V291, V8, V297, V302))} end), V304 end(V299)) end end end end), V305 end(V294)) end end end end; {'Idris.Syntax.DoBind', V306, V307, V308, V309} -> begin (V310 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V309))), fun (V311) -> begin (V312 = (V310(V311))), case V312 of {'Prelude.Types.Left', V313} -> {'Prelude.Types.Left', V313}; {'Prelude.Types.Right', V314} -> (begin (V330 = begin (V315 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))), fun (V316) -> begin (V317 = (V315(V316))), case V317 of {'Prelude.Types.Left', V318} -> {'Prelude.Types.Left', V318}; {'Prelude.Types.Right', V319} -> (begin (V329 = begin (V322 = case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V307)) of {'Prelude.Types.Just', V320} -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V3, V1, [{'Builtin.MkPair', V320, {'Builtin.MkPair', 5, {'Prelude.Types.Just', V308}}} | []])); {'Prelude.Types.Nothing'} -> fun (V321) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V323) -> begin (V324 = (V322(V323))), case V324 of {'Prelude.Types.Left', V325} -> {'Prelude.Types.Left', V325}; {'Prelude.Types.Right', V326} -> (begin (V328 = fun (V327) -> {'Prelude.Types.Right', ('un--bindFun'(V306, V8, V314, {'TTImp.TTImp.ILam', V307, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Prelude.Types.Just', V308}, {'TTImp.TTImp.Implicit', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V306)), 0}, V319}))} end), V328 end(V323)) end end end end), V329 end(V316)) end end end end), V330 end(V311)) end end end end; {'Idris.Syntax.DoBindPat', V331, V332, V333, V334} -> begin (V335 = ('un--desugarDo'(V0, V1, V3, V2, V4, 0, V6, V8, V332))), fun (V336) -> begin (V337 = (V335(V336))), case V337 of {'Prelude.Types.Left', V338} -> {'Prelude.Types.Left', V338}; {'Prelude.Types.Right', V339} -> (begin (V390 = begin (V340 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 0, V339))), fun (V341) -> begin (V342 = (V340(V341))), case V342 of {'Prelude.Types.Left', V343} -> {'Prelude.Types.Left', V343}; {'Prelude.Types.Right', V344} -> (begin (V389 = case V344 of {'Builtin.MkPair', V345, V346} -> begin (V347 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V333))), fun (V348) -> begin (V349 = (V347(V348))), case V349 of {'Prelude.Types.Left', V350} -> {'Prelude.Types.Left', V350}; {'Prelude.Types.Right', V351} -> (begin (V388 = begin (V372 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V352) -> begin (V353 = ('un--desugarClause'(V0, V1, V2, V3, V4, V6, 1, V352))), ((begin (V369 = fun (V364) -> fun (V365) -> fun (V366) -> fun (V367) -> fun (V368) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V366, V367, V368)) end end end end end), fun (V370) -> fun (V371) -> ((((V369('erased'))('erased'))(V370))(V371)) end end end((begin (V361 = fun (V355) -> fun (V356) -> fun (V357) -> fun (V358) -> case V358 of {'Prelude.Types.Left', V359} -> {'Prelude.Types.Left', V359}; {'Prelude.Types.Right', V360} -> {'Prelude.Types.Right', (V357(V360))} end end end end end), fun (V362) -> fun (V363) -> ((((V361('erased'))('erased'))(V362))(V363)) end end end(fun (V354) -> ('Idris.Idris2.Builtin':'un--snd'(V354)) end))))(V353)) end end, V334, []))), fun (V373) -> begin (V374 = (V372(V373))), case V374 of {'Prelude.Types.Left', V375} -> {'Prelude.Types.Left', V375}; {'Prelude.Types.Right', V376} -> (begin (V387 = begin (V377 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V345, V6))), begin (V378 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V377, V7, V8, V12))), fun (V379) -> begin (V380 = (V378(V379))), case V380 of {'Prelude.Types.Left', V381} -> {'Prelude.Types.Left', V381}; {'Prelude.Types.Right', V382} -> (begin (V386 = begin (V383 = V331), begin (V384 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V331))), fun (V385) -> {'Prelude.Types.Right', ('un--bindFun'(V384, V8, V351, {'TTImp.TTImp.ILam', {'Core.FC.EmptyFC'}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Prelude.Types.Just', {'Core.Name.MN', <<"_"/utf8>>, 0}}, {'TTImp.TTImp.Implicit', V384, 0}, {'TTImp.TTImp.ICase', V384, {'TTImp.TTImp.IVar', {'Core.FC.EmptyFC'}, {'Core.Name.MN', <<"_"/utf8>>, 0}}, {'TTImp.TTImp.Implicit', V384, 0}, [{'TTImp.TTImp.PatClause', V383, V346, V382} | V376]}}))} end end end), V386 end(V379)) end end end end end), V387 end(V373)) end end end end), V388 end(V348)) end end end end end), V389 end(V341)) end end end end), V390 end(V336)) end end end end; {'Idris.Syntax.DoLet', V391, V392, V393, V394, V395, V396} -> begin (V397 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Desugar.Bang'}, ('un--initBangs'(V8))))), fun (V398) -> begin (V399 = (V397(V398))), case V399 of {'Prelude.Types.Left', V400} -> {'Prelude.Types.Left', V400}; {'Prelude.Types.Right', V401} -> (begin (V444 = begin (V402 = ('un--desugarB'(V0, V401, V1, V3, V2, V4, V5, V6, V396))), fun (V403) -> begin (V404 = (V402(V403))), case V404 of {'Prelude.Types.Left', V405} -> {'Prelude.Types.Left', V405}; {'Prelude.Types.Right', V406} -> (begin (V443 = begin (V407 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V395))), fun (V408) -> begin (V409 = (V407(V408))), case V409 of {'Prelude.Types.Left', V410} -> {'Prelude.Types.Left', V410}; {'Prelude.Types.Right', V411} -> (begin (V442 = begin (V412 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))), fun (V413) -> begin (V414 = (V412(V413))), case V414 of {'Prelude.Types.Left', V415} -> {'Prelude.Types.Left', V415}; {'Prelude.Types.Right', V416} -> (begin (V441 = begin (V419 = case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V392)) of {'Prelude.Types.Just', V417} -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V3, V1, [{'Builtin.MkPair', V417, {'Builtin.MkPair', 5, {'Prelude.Types.Just', V393}}} | []])); {'Prelude.Types.Nothing'} -> fun (V418) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V420) -> begin (V421 = (V419(V420))), case V421 of {'Prelude.Types.Left', V422} -> {'Prelude.Types.Left', V422}; {'Prelude.Types.Right', V423} -> (begin (V440 = begin (V424 = {'TTImp.TTImp.ILet', V391, V392, V394, V393, V411, V406, V416}), begin (V430 = begin (V425 = V401), fun (V426) -> begin (V429 = (begin (V427 = V425), fun (V428) -> ('erlang':'get'(V427)) end end(V426))), {'Prelude.Types.Right', V429} end end end), fun (V431) -> begin (V432 = (V430(V431))), case V432 of {'Prelude.Types.Left', V433} -> {'Prelude.Types.Left', V433}; {'Prelude.Types.Right', V434} -> (begin (V439 = fun (V435) -> {'Prelude.Types.Right', ('un--bindBangs'(case V434 of {'Idris.Desugar.MkBangData', V436, V437, V438} -> V437 end, V8, V424))} end), V439 end(V431)) end end end end end), V440 end(V420)) end end end end), V441 end(V413)) end end end end), V442 end(V408)) end end end end), V443 end(V403)) end end end end), V444 end(V398)) end end end end; {'Idris.Syntax.DoLetPat', V445, V446, V447, V448, V449} -> begin (V450 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Desugar.Bang'}, ('un--initBangs'(V8))))), fun (V451) -> begin (V452 = (V450(V451))), case V452 of {'Prelude.Types.Left', V453} -> {'Prelude.Types.Left', V453}; {'Prelude.Types.Right', V454} -> (begin (V530 = begin (V455 = ('un--desugarDo'(V0, V1, V3, V2, V4, 0, V6, V8, V446))), fun (V456) -> begin (V457 = (V455(V456))), case V457 of {'Prelude.Types.Left', V458} -> {'Prelude.Types.Left', V458}; {'Prelude.Types.Right', V459} -> (begin (V529 = begin (V460 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V447))), fun (V461) -> begin (V462 = (V460(V461))), case V462 of {'Prelude.Types.Left', V463} -> {'Prelude.Types.Left', V463}; {'Prelude.Types.Right', V464} -> (begin (V528 = begin (V465 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 0, V459))), fun (V466) -> begin (V467 = (V465(V466))), case V467 of {'Prelude.Types.Left', V468} -> {'Prelude.Types.Left', V468}; {'Prelude.Types.Right', V469} -> (begin (V527 = case V469 of {'Builtin.MkPair', V470, V471} -> begin (V472 = ('un--desugarB'(V0, V454, V1, V3, V2, V4, V5, V6, V448))), fun (V473) -> begin (V474 = (V472(V473))), case V474 of {'Prelude.Types.Left', V475} -> {'Prelude.Types.Left', V475}; {'Prelude.Types.Right', V476} -> (begin (V526 = begin (V497 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V477) -> begin (V478 = ('un--desugarClause'(V0, V1, V2, V3, V4, V6, 1, V477))), ((begin (V494 = fun (V489) -> fun (V490) -> fun (V491) -> fun (V492) -> fun (V493) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V491, V492, V493)) end end end end end), fun (V495) -> fun (V496) -> ((((V494('erased'))('erased'))(V495))(V496)) end end end((begin (V486 = fun (V480) -> fun (V481) -> fun (V482) -> fun (V483) -> case V483 of {'Prelude.Types.Left', V484} -> {'Prelude.Types.Left', V484}; {'Prelude.Types.Right', V485} -> {'Prelude.Types.Right', (V482(V485))} end end end end end), fun (V487) -> fun (V488) -> ((((V486('erased'))('erased'))(V487))(V488)) end end end(fun (V479) -> ('Idris.Idris2.Builtin':'un--snd'(V479)) end))))(V478)) end end, V449, []))), fun (V498) -> begin (V499 = (V497(V498))), case V499 of {'Prelude.Types.Left', V500} -> {'Prelude.Types.Left', V500}; {'Prelude.Types.Right', V501} -> (begin (V525 = begin (V502 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V470, V6))), begin (V503 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V502, V7, V8, V12))), fun (V504) -> begin (V505 = (V503(V504))), case V505 of {'Prelude.Types.Left', V506} -> {'Prelude.Types.Left', V506}; {'Prelude.Types.Right', V507} -> (begin (V524 = begin (V513 = begin (V508 = V454), fun (V509) -> begin (V512 = (begin (V510 = V508), fun (V511) -> ('erlang':'get'(V510)) end end(V509))), {'Prelude.Types.Right', V512} end end end), fun (V514) -> begin (V515 = (V513(V514))), case V515 of {'Prelude.Types.Left', V516} -> {'Prelude.Types.Left', V516}; {'Prelude.Types.Right', V517} -> (begin (V523 = begin (V518 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V445))), fun (V519) -> {'Prelude.Types.Right', ('un--bindBangs'(case V517 of {'Idris.Desugar.MkBangData', V520, V521, V522} -> V521 end, V8, {'TTImp.TTImp.ICase', V518, V476, V464, [{'TTImp.TTImp.PatClause', V518, V471, V507} | V501]}))} end end), V523 end(V514)) end end end end), V524 end(V504)) end end end end end), V525 end(V498)) end end end end), V526 end(V473)) end end end end end), V527 end(V466)) end end end end), V528 end(V461)) end end end end), V529 end(V456)) end end end end), V530 end(V451)) end end end end; {'Idris.Syntax.DoLetLocal', V531, V532} -> begin (V533 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))), fun (V534) -> begin (V535 = (V533(V534))), case V535 of {'Prelude.Types.Left', V536} -> {'Prelude.Types.Left', V536}; {'Prelude.Types.Right', V537} -> (begin (V549 = begin (V539 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V538) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V6, V538)) end, V532, []))), fun (V540) -> begin (V541 = (V539(V540))), case V541 of {'Prelude.Types.Left', V542} -> {'Prelude.Types.Left', V542}; {'Prelude.Types.Right', V543} -> (begin (V548 = fun (V544) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILocal', V531, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V545) -> fun (V546) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V545, V546)) end end, []}, fun (V547) -> V547 end, V543)), V537}} end), V548 end(V540)) end end end end), V549 end(V534)) end end end end; {'Idris.Syntax.DoRewrite', V550, V551} -> begin (V552 = ('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))), fun (V553) -> begin (V554 = (V552(V553))), case V554 of {'Prelude.Types.Left', V555} -> {'Prelude.Types.Left', V555}; {'Prelude.Types.Right', V556} -> (begin (V564 = begin (V557 = ('un--desugarDo'(V0, V1, V3, V2, V4, V5, V6, V8, V551))), fun (V558) -> begin (V559 = (V557(V558))), case V559 of {'Prelude.Types.Left', V560} -> {'Prelude.Types.Left', V560}; {'Prelude.Types.Right', V561} -> (begin (V563 = fun (V562) -> {'Prelude.Types.Right', {'TTImp.TTImp.IRewrite', V550, V561, V556}} end), V563 end(V558)) end end end end), V564 end(V553)) end end end end end end end end(E0, E1)) end.
'un--desugarWithProblem'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Syntax.MkPWithProblem', V7, V8, V9} -> begin (V10 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V8))), ((begin (V26 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V23, V24, V25)) end end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end((begin (V18 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> {'Prelude.Types.Right', (V14(V17))} end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V11) -> {'Builtin.MkPair', V7, {'Builtin.MkPair', V11, V9}} end))))(V10)) end end.
'un--desugarUpdate'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Syntax.PSetField', V9, V10} -> begin (V11 = ('un--desugarB'(V0, V1, V2, V4, V3, V5, V6, V7, V10))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'TTImp.TTImp.ISetField', V9, V15}} end), V17 end(V12)) end end end end; {'Idris.Syntax.PSetFieldApp', V18, V19} -> begin (V20 = ('un--desugarB'(V0, V1, V2, V4, V3, V5, V6, V7, V19))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V26 = fun (V25) -> {'Prelude.Types.Right', {'TTImp.TTImp.ISetFieldApp', V18, V24}} end), V26 end(V21)) end end end end end.
'un--desugarType'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Syntax.MkPTy', V7, V8, V9, V10, V11} -> begin (V12 = ('Idris.Idris2.Idris.Doc.String':'un--addDocString'(V1, V0, V9, V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V54 = begin (V22 = begin (V17 = V0), fun (V18) -> begin (V21 = (begin (V19 = V17), fun (V20) -> ('erlang':'get'(V19)) end end(V18))), {'Prelude.Types.Right', V21} end end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V53 = begin (V27 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V11))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V52 = begin (V45 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V7, case V26 of {'Idris.Syntax.MkSyntax', V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V42 end, V5, V31))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V51 = fun (V50) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkImpTy', V7, V8, V9, V49}} end), V51 end(V46)) end end end end), V52 end(V28)) end end end end), V53 end(V23)) end end end end), V54 end(V13)) end end end end end.
'un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Libraries.Utils.Shunting.Infix', V9, V10, V11, V12, V13} -> case V11 of {'Core.Name.UN', V14} -> case V14 of {'Core.Name.Basic', V15} -> case V15 of <<"="/utf8>> -> begin (V16 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V12))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V28 = begin (V21 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V13))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAlternative', V9, {'TTImp.TTImp.FirstSuccess'}, [('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V10, ('Idris.Idris2.Idris.Syntax.Builtin':'un--eqName'())}, [V20 | [V25 | []]])) | [('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V10, ('Idris.Idris2.Idris.Syntax.Builtin':'un--heqName'())}, [V20 | [V25 | []]])) | []]]}} end), V27 end(V22)) end end end end), V28 end(V17)) end end end end; <<"$"/utf8>> -> begin (V29 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V12))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V41 = begin (V34 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V13))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V40 = fun (V39) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V9, V33, V38}} end), V40 end(V35)) end end end end), V41 end(V30)) end end end end; _ -> begin (V42 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V12))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V54 = begin (V47 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V13))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V53 = fun (V52) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V9, {'TTImp.TTImp.IApp', V9, {'TTImp.TTImp.IVar', V10, V11}, V46}, V51}} end), V53 end(V48)) end end end end), V54 end(V43)) end end end end end; _ -> begin (V55 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V12))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V67 = begin (V60 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V13))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V66 = fun (V65) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V9, {'TTImp.TTImp.IApp', V9, {'TTImp.TTImp.IVar', V10, V11}, V59}, V64}} end), V66 end(V61)) end end end end), V67 end(V56)) end end end end end; _ -> begin (V68 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V12))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V80 = begin (V73 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V13))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V79 = fun (V78) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V9, {'TTImp.TTImp.IApp', V9, {'TTImp.TTImp.IVar', V10, V11}, V72}, V77}} end), V79 end(V74)) end end end end), V80 end(V69)) end end end end end; {'Libraries.Utils.Shunting.Pre', V81, V82, V83, V84} -> case V83 of {'Core.Name.UN', V85} -> case V85 of {'Core.Name.Basic', V86} -> case V86 of <<"-"/utf8>> -> case V84 of {'Libraries.Utils.Shunting.Leaf', V87} -> case V87 of {'Idris.Syntax.PPrimVal', V88, V89} -> begin (V90 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Core.FC.EmptyFC'} end, ('Idris.Idris2.Core.FC':'un--mergeFC'(V81, V88))))), begin (V92 = fun (V91) -> ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, {'Libraries.Utils.Shunting.Leaf', {'Idris.Syntax.PPrimVal', V90, V91}})) end), case V89 of {'Core.TT.I', V93} -> (V92({'Core.TT.I', begin (V94 = (0 - V93)), case ((V94 band 9223372036854775808) =/= 0) of 'true' -> (V94 bor -9223372036854775808); _ -> (V94 band 9223372036854775807) end end})); {'Core.TT.I8', V95} -> (V92({'Core.TT.I8', begin (V96 = (0 - V95)), case ((V96 band 128) =/= 0) of 'true' -> (V96 bor -128); _ -> (V96 band 127) end end})); {'Core.TT.I16', V97} -> (V92({'Core.TT.I16', begin (V98 = (0 - V97)), case ((V98 band 32768) =/= 0) of 'true' -> (V98 bor -32768); _ -> (V98 band 32767) end end})); {'Core.TT.I32', V99} -> (V92({'Core.TT.I32', begin (V100 = (0 - V99)), case ((V100 band 2147483648) =/= 0) of 'true' -> (V100 bor -2147483648); _ -> (V100 band 2147483647) end end})); {'Core.TT.I64', V101} -> (V92({'Core.TT.I64', begin (V102 = (0 - V101)), case ((V102 band 9223372036854775808) =/= 0) of 'true' -> (V102 bor -9223372036854775808); _ -> (V102 band 9223372036854775807) end end})); {'Core.TT.BI', V103} -> (V92({'Core.TT.BI', (0 - V103)})); _ -> begin (V104 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, {'Libraries.Utils.Shunting.Leaf', {'Idris.Syntax.PPrimVal', V88, V89}}))), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V110 = fun (V109) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V81, {'TTImp.TTImp.IVar', V82, {'Core.Name.UN', {'Core.Name.Basic', <<"negate"/utf8>>}}}, V108}} end), V110 end(V105)) end end end end end end end; _ -> begin (V111 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V84))), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V117 = fun (V116) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V81, {'TTImp.TTImp.IVar', V82, {'Core.Name.UN', {'Core.Name.Basic', <<"negate"/utf8>>}}}, V115}} end), V117 end(V112)) end end end end end; _ -> begin (V118 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V84))), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V124 = fun (V123) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V81, {'TTImp.TTImp.IVar', V82, {'Core.Name.UN', {'Core.Name.Basic', <<"negate"/utf8>>}}}, V122}} end), V124 end(V119)) end end end end end; _ -> begin (V125 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V84))), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V131 = fun (V130) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V81, {'TTImp.TTImp.IVar', V82, V83}, V129}} end), V131 end(V126)) end end end end end; _ -> begin (V132 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V84))), fun (V133) -> begin (V134 = (V132(V133))), case V134 of {'Prelude.Types.Left', V135} -> {'Prelude.Types.Left', V135}; {'Prelude.Types.Right', V136} -> (begin (V138 = fun (V137) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V81, {'TTImp.TTImp.IVar', V82, V83}, V136}} end), V138 end(V133)) end end end end end; _ -> begin (V139 = ('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7, V84))), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V145 = fun (V144) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V81, {'TTImp.TTImp.IVar', V82, V83}, V143}} end), V145 end(V140)) end end end end end; {'Libraries.Utils.Shunting.Leaf', V146} -> ('un--desugarB'(V0, V1, V2, V4, V3, V5, V6, V7, V146)) end.
'un--desugarLHS'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('un--desugar'(V0, V1, V2, V3, V4, 0, V5, V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V104 = begin (V13 = ('Idris.Idris2.Core.Core':'un--iunless'(V6, fun () -> ('un--getClauseFn'(V12)) end))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V103 = begin (V18 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, V6, V12))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V102 = case V22 of {'Builtin.MkPair', V23, V24} -> begin (V46 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V26 = fun (V25) -> V25 end), fun (V27) -> (V26(V27)) end end(<<"desugar.lhs"/utf8>>)), 10, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V28) -> fun (V29) -> <<V28/binary, V29/binary>> end end, <<""/utf8>>}, fun (V30) -> V30 end, [(begin (V32 = fun (V31) -> V31 end), fun (V33) -> (V32(V33)) end end(<<"Desugared "/utf8>>)) | [(begin (V35 = fun (V34) -> V34 end), fun (V36) -> (V35(V36)) end end(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V7)))) | [(begin (V38 = fun (V37) -> V37 end), fun (V39) -> (V38(V39)) end end(<<" to "/utf8>>)) | [(begin (V44 = fun (V43) -> V43 end), fun (V45) -> (V44(V45)) end end(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V41, V42)) end end}, V24)))) | []]]]])) end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V101 = begin (V94 = ('Idris.Idris2.Core.Core':'un--iwhenJust'(V17, fun (V51) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V54, V55, V56)) end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V63)) end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V67, V68, V69, V70)) end end end end end end end, fun (V71) -> fun (V72) -> V72 end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V75, V76, V77)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V80, V81)) end end}, V51, V23)) of 1 -> (begin (V82 = ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V7))), fun () -> fun (V83) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V82, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V84) -> fun (V85) -> <<V84/binary, V85/binary>> end end, <<""/utf8>>}, fun (V86) -> V86 end, [(begin (V88 = fun (V87) -> V87 end), fun (V89) -> (V88(V89)) end end(<<"Declaration name ("/utf8>>)) | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V51)) | [(begin (V91 = fun (V90) -> V90 end), fun (V92) -> (V91(V92)) end end(<<") shadowed by a pattern variable."/utf8>>)) | []]]]))}, V83)) end end end()); 0 -> fun (V93) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end))), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V100 = fun (V99) -> {'Prelude.Types.Right', {'Builtin.MkPair', V17, {'Builtin.MkPair', V23, V24}}} end), V100 end(V95)) end end end end), V101 end(V47)) end end end end end), V102 end(V19)) end end end end), V103 end(V14)) end end end end), V104 end(V9)) end end end end.
'un--desugarFnOpt'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Syntax.IFnOpt', V7} -> fun (V8) -> {'Prelude.Types.Right', V7} end; {'Idris.Syntax.PForeign', V9} -> begin (V11 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V10)) end, V9, []))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'TTImp.TTImp.ForeignFn', V15}} end), V17 end(V12)) end end end end; {'Idris.Syntax.PForeignExport', V18} -> begin (V20 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V19) -> ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V19)) end, V18, []))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V26 = fun (V25) -> {'Prelude.Types.Right', {'TTImp.TTImp.ForeignExport', V24}} end), V26 end(V21)) end end end end end.
'un--desugarField'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Syntax.MkField', V8, V9, V10, V11, V12, V13} -> begin (V14 = ('Idris.Idris2.Idris.Doc.String':'un--addDocStringNS'(V1, V0, V6, V12, V9))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V69 = begin (V19 = ('Idris.Idris2.Idris.Doc.String':'un--addDocStringNS'(V1, V0, V6, ('nested--14747-14448--in--un--toRF'(V13, V12, V11, V10, V9, V8, V6, V5, V4, V3, V2, V1, V0, V12)), V9))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V68 = begin (V29 = begin (V24 = V0), fun (V25) -> begin (V28 = (begin (V26 = V24), fun (V27) -> ('erlang':'get'(V26)) end end(V25))), {'Prelude.Types.Right', V28} end end end), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V67 = begin (V35 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V34) -> ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V34)) end, V11))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V66 = begin (V40 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V13))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V65 = begin (V58 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V8, case V33 of {'Idris.Syntax.MkSyntax', V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> V55 end, V5, V44))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V64 = fun (V63) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkIField', V8, V10, V39, V12, V62}} end), V64 end(V59)) end end end end), V65 end(V41)) end end end end), V66 end(V36)) end end end end), V67 end(V30)) end end end end), V68 end(V20)) end end end end), V69 end(V15)) end end end end end.
'un--desugarDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Desugar.Bang'}, ('un--initBangs'(V7))))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V35 = begin (V14 = ('un--desugarB'(V0, V13, V1, V2, V3, V4, V5, V6, V8))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V34 = begin (V24 = begin (V19 = V13), fun (V20) -> begin (V23 = (begin (V21 = V19), fun (V22) -> ('erlang':'get'(V21)) end end(V20))), {'Prelude.Types.Right', V23} end end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V33 = fun (V29) -> {'Prelude.Types.Right', ('un--bindBangs'(case V28 of {'Idris.Desugar.MkBangData', V30, V31, V32} -> V31 end, V7, V18))} end), V33 end(V25)) end end end end), V34 end(V15)) end end end end), V35 end(V10)) end end end end.
'un--desugarDecl'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Syntax.PClaim', V7, V8, V9, V10, V11} -> begin (V13 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V12) -> ('un--desugarFnOpt'(V0, V1, V2, V3, V4, V5, V12)) end, V10, []))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V25 = begin (V18 = ('un--desugarType'(V0, V1, V2, V3, V4, V5, V11))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IClaim', V7, V8, V9, V17, V22} | []]} end), V24 end(V19)) end end end end), V25 end(V14)) end end end end; {'Idris.Syntax.PDef', V26, V27} -> begin (V29 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V28) -> ('un--desugarClause'(V0, V1, V2, V3, V4, V5, 0, V28)) end, V27, []))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V45 = begin (V38 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V34) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V35) -> fun (V36) -> fun (V37) -> ('nested--14816-14599--in--un--toIDef'(V27, V26, V5, V4, V3, V2, V1, V0, ('Idris.Idris2.Libraries.Data.IMaybe':'un--fromJust'(V35)), V36, V37)) end end end, V34)) end, V33, []))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V44 = fun (V43) -> {'Prelude.Types.Right', ('Idris.Idris2.TTImp.Parser':'un--collectDefs'(V42))} end), V44 end(V39)) end end end end), V45 end(V30)) end end end end; {'Idris.Syntax.PData', V46, V47, V48, V49, V50} -> begin (V51 = ('un--desugarData'(V0, V1, V2, V3, V4, V5, V47, V50))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V57 = fun (V56) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IData', V46, V48, V49, V55} | []]} end), V57 end(V52)) end end end end; {'Idris.Syntax.PParameters', V58, V59, V60} -> begin (V70 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V61) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, ((begin (V67 = fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V65, V66)) end end end end), fun (V68) -> fun (V69) -> ((((V67('erased'))('erased'))(V68))(V69)) end end end(fun (V62) -> ('Idris.Idris2.Builtin':'un--fst'(V62)) end))(V59)))), V61)) end, V60, []))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V175 = begin (V96 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V75) -> case V75 of {'Builtin.MkPair', V76, V77} -> case V77 of {'Builtin.MkPair', V78, V79} -> case V79 of {'Builtin.MkPair', V80, V81} -> begin (V82 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V81))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V95 = begin (V88 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V87) -> ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V87)) end, V80))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V94 = fun (V93) -> {'Prelude.Types.Right', {'Builtin.MkPair', V76, {'Builtin.MkPair', V78, {'Builtin.MkPair', V92, V86}}}} end), V94 end(V89)) end end end end), V95 end(V83)) end end end end end end end end, V59, []))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V174 = begin (V149 = begin (V101 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1))), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V148 = case V105 of 1 -> begin (V125 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V106, V107, [])) end end, ((begin (V113 = fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V111, V112)) end end end end), fun (V114) -> fun (V115) -> ((((V113('erased'))('erased'))(V114))(V115)) end end end(fun (V108) -> ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V108)))))) end))(V100)), fun (V116) -> ('Idris.Idris2.TTImp.Utils':'un--findUniqueBindableNames'(V1, V58, 1, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, ((begin (V122 = fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V120, V121)) end end end end), fun (V123) -> fun (V124) -> ((((V122('erased'))('erased'))(V123))(V124)) end end end(fun (V117) -> ('Idris.Idris2.Builtin':'un--fst'(V117)) end))(V59)))), [], V116)) end))), ((begin (V144 = fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V141, V142, V143)) end end end end end), fun (V145) -> fun (V146) -> ((((V144('erased'))('erased'))(V145))(V146)) end end end((begin (V136 = fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> case V133 of {'Prelude.Types.Left', V134} -> {'Prelude.Types.Left', V134}; {'Prelude.Types.Right', V135} -> {'Prelude.Types.Right', (V132(V135))} end end end end end), fun (V137) -> fun (V138) -> ((((V136('erased'))('erased'))(V137))(V138)) end end end(fun (V126) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V127) -> fun (V128) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V127, V128)) end end, []}, fun (V129) -> V129 end, V126)) end))))(V125)) end; 0 -> fun (V147) -> {'Prelude.Types.Right', []} end end), V148 end(V102)) end end end end), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V173 = begin (V168 = ((begin (V165 = fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V163, V164)) end end end end), fun (V166) -> fun (V167) -> ((((V165('erased'))('erased'))(V166))(V167)) end end end(fun (V154) -> case V154 of {'Builtin.MkPair', V155, V156} -> case V156 of {'Builtin.MkPair', V157, V158} -> case V158 of {'Builtin.MkPair', V159, V160} -> {'Builtin.MkPair', V155, {'Builtin.MkPair', V157, {'Builtin.MkPair', V159, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V153, V160))}}} end end end end))(V100))), fun (V169) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IParameters', V58, V168, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V170, V171)) end end, []}, fun (V172) -> V172 end, V74))} | []]} end end), V173 end(V150)) end end end end), V174 end(V97)) end end end end), V175 end(V71)) end end end end; {'Idris.Syntax.PUsing', V176, V177, V178} -> begin (V184 = begin (V179 = V0), fun (V180) -> begin (V183 = (begin (V181 = V179), fun (V182) -> ('erlang':'get'(V181)) end end(V180))), {'Prelude.Types.Right', V183} end end end), fun (V185) -> begin (V186 = (V184(V185))), case V186 of {'Prelude.Types.Left', V187} -> {'Prelude.Types.Left', V187}; {'Prelude.Types.Right', V188} -> (begin (V293 = begin (V202 = case V188 of {'Idris.Syntax.MkSyntax', V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201} -> V199 end), begin (V217 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V203) -> begin (V204 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, ('Idris.Idris2.Builtin':'un--snd'(V203))))), fun (V205) -> begin (V206 = (V204(V205))), case V206 of {'Prelude.Types.Left', V207} -> {'Prelude.Types.Left', V207}; {'Prelude.Types.Right', V208} -> (begin (V216 = begin (V209 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V176, V202, V5, V208))), fun (V210) -> begin (V211 = (V209(V210))), case V211 of {'Prelude.Types.Left', V212} -> {'Prelude.Types.Left', V212}; {'Prelude.Types.Right', V213} -> (begin (V215 = fun (V214) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V203)), V213}} end), V215 end(V210)) end end end end), V216 end(V205)) end end end end end, V177, []))), fun (V218) -> begin (V219 = (V217(V218))), case V219 of {'Prelude.Types.Left', V220} -> {'Prelude.Types.Left', V220}; {'Prelude.Types.Right', V221} -> (begin (V292 = begin (V240 = begin (V222 = V0), fun (V223) -> begin (V239 = (begin (V224 = V222), fun (V225) -> ('erlang':'put'(V224, case V188 of {'Idris.Syntax.MkSyntax', V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238} -> {'Idris.Syntax.MkSyntax', V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V221, V202)), V237, V238} end)) end end(V223))), {'Prelude.Types.Right', V239} end end end), fun (V241) -> begin (V242 = (V240(V241))), case V242 of {'Prelude.Types.Left', V243} -> {'Prelude.Types.Left', V243}; {'Prelude.Types.Right', V244} -> (begin (V291 = begin (V246 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V245) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V5, V245)) end, V178, []))), fun (V247) -> begin (V248 = (V246(V247))), case V248 of {'Prelude.Types.Left', V249} -> {'Prelude.Types.Left', V249}; {'Prelude.Types.Right', V250} -> (begin (V290 = begin (V280 = begin (V256 = begin (V251 = V0), fun (V252) -> begin (V255 = (begin (V253 = V251), fun (V254) -> ('erlang':'get'(V253)) end end(V252))), {'Prelude.Types.Right', V255} end end end), fun (V257) -> begin (V258 = (V256(V257))), case V258 of {'Prelude.Types.Left', V259} -> {'Prelude.Types.Left', V259}; {'Prelude.Types.Right', V260} -> (begin (V279 = begin (V261 = V0), fun (V262) -> begin (V278 = (begin (V263 = V261), fun (V264) -> ('erlang':'put'(V263, case V260 of {'Idris.Syntax.MkSyntax', V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277} -> {'Idris.Syntax.MkSyntax', V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V202, V276, V277} end)) end end(V262))), {'Prelude.Types.Right', V278} end end end), V279 end(V257)) end end end end), fun (V281) -> begin (V282 = (V280(V281))), case V282 of {'Prelude.Types.Left', V283} -> {'Prelude.Types.Left', V283}; {'Prelude.Types.Right', V284} -> (begin (V289 = fun (V285) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V286) -> fun (V287) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V286, V287)) end end, []}, fun (V288) -> V288 end, V250))} end), V289 end(V281)) end end end end), V290 end(V247)) end end end end), V291 end(V241)) end end end end), V292 end(V218)) end end end end end), V293 end(V185)) end end end end; {'Idris.Syntax.PReflect', V294, V295} -> fun (V296) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V294, <<"Reflection not implemented yet"/utf8>>}, V296)) end; {'Idris.Syntax.PInterface', V297, V298, V299, V300, V301, V302, V303, V304, V305} -> begin (V306 = ('Idris.Idris2.Idris.Doc.String':'un--addDocString'(V1, V0, V300, V301))), fun (V307) -> begin (V308 = (V306(V307))), case V308 of {'Prelude.Types.Left', V309} -> {'Prelude.Types.Left', V309}; {'Prelude.Types.Right', V310} -> (begin (V459 = begin (V319 = ((begin (V316 = fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V314, V315)) end end end end), fun (V317) -> fun (V318) -> ((((V316('erased'))('erased'))(V317))(V318)) end end end(fun (V311) -> ('Idris.Idris2.Builtin':'un--fst'(V311)) end))(V302))), begin (V323 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V320) -> fun (V321) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V320, V321)) end end, []}, fun (V322) -> ('nested--14816-15157--in--un--expandConstraint'(V305, V304, V303, V302, V301, V300, V299, V298, V297, V5, V4, V3, V2, V1, V0, V322)) end, V299))), begin (V332 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V324) -> begin (V325 = ('un--desugar'(V0, V1, V3, V2, V4, 1, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V319)), ('Idris.Idris2.Builtin':'un--snd'(V324))))), fun (V326) -> begin (V327 = (V325(V326))), case V327 of {'Prelude.Types.Left', V328} -> {'Prelude.Types.Left', V328}; {'Prelude.Types.Right', V329} -> (begin (V331 = fun (V330) -> {'Prelude.Types.Right', {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V324)), V329}} end), V331 end(V326)) end end end end end, V323, []))), fun (V333) -> begin (V334 = (V332(V333))), case V334 of {'Prelude.Types.Left', V335} -> {'Prelude.Types.Left', V335}; {'Prelude.Types.Right', V336} -> (begin (V458 = begin (V349 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V337) -> case V337 of {'Builtin.MkPair', V338, V339} -> case V339 of {'Builtin.MkPair', V340, V341} -> begin (V342 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V341))), fun (V343) -> begin (V344 = (V342(V343))), case V344 of {'Prelude.Types.Left', V345} -> {'Prelude.Types.Left', V345}; {'Prelude.Types.Right', V346} -> (begin (V348 = fun (V347) -> {'Prelude.Types.Right', {'Builtin.MkPair', V338, {'Builtin.MkPair', V340, V346}}} end), V348 end(V343)) end end end end end end end, V302, []))), fun (V350) -> begin (V351 = (V349(V350))), case V351 of {'Prelude.Types.Left', V352} -> {'Prelude.Types.Left', V352}; {'Prelude.Types.Right', V353} -> (begin (V457 = begin (V362 = ((begin (V359 = fun (V355) -> fun (V356) -> fun (V357) -> fun (V358) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V357, V358)) end end end end), fun (V360) -> fun (V361) -> ((((V359('erased'))('erased'))(V360))(V361)) end end end(fun (V354) -> ('Idris.Idris2.Core.Name':'un--dropNS'(V354)) end))(('Idris.Idris2.Idris.Syntax':'un--definedIn'(V305))))), begin (V411 = begin (V363 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1))), fun (V364) -> begin (V365 = (V363(V364))), case V365 of {'Prelude.Types.Left', V366} -> {'Prelude.Types.Left', V366}; {'Prelude.Types.Right', V367} -> (begin (V410 = case V367 of 1 -> begin (V387 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V368) -> fun (V369) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V368, V369, [])) end end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V375 = fun (V371) -> fun (V372) -> fun (V373) -> fun (V374) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V373, V374)) end end end end), fun (V376) -> fun (V377) -> ((((V375('erased'))('erased'))(V376))(V377)) end end end(fun (V370) -> ('Idris.Idris2.Builtin':'un--snd'(V370)) end))(V336)), ((begin (V383 = fun (V379) -> fun (V380) -> fun (V381) -> fun (V382) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V381, V382)) end end end end), fun (V384) -> fun (V385) -> ((((V383('erased'))('erased'))(V384))(V385)) end end end(fun (V378) -> ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V378)))) end))(V353)))), fun (V386) -> ('Idris.Idris2.TTImp.Utils':'un--findUniqueBindableNames'(V1, V297, 1, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V362, V319)))), [], V386)) end))), ((begin (V406 = fun (V401) -> fun (V402) -> fun (V403) -> fun (V404) -> fun (V405) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V403, V404, V405)) end end end end end), fun (V407) -> fun (V408) -> ((((V406('erased'))('erased'))(V407))(V408)) end end end((begin (V398 = fun (V392) -> fun (V393) -> fun (V394) -> fun (V395) -> case V395 of {'Prelude.Types.Left', V396} -> {'Prelude.Types.Left', V396}; {'Prelude.Types.Right', V397} -> {'Prelude.Types.Right', (V394(V397))} end end end end end), fun (V399) -> fun (V400) -> ((((V398('erased'))('erased'))(V399))(V400)) end end end(fun (V388) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V389) -> fun (V390) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V389, V390)) end end, []}, fun (V391) -> V391 end, V388)) end))))(V387)) end; 0 -> fun (V409) -> {'Prelude.Types.Right', []} end end), V410 end(V364)) end end end end), fun (V412) -> begin (V413 = (V411(V412))), case V413 of {'Prelude.Types.Left', V414} -> {'Prelude.Types.Left', V414}; {'Prelude.Types.Right', V415} -> (begin (V456 = begin (V429 = ((begin (V426 = fun (V422) -> fun (V423) -> fun (V424) -> fun (V425) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V424, V425)) end end end end), fun (V427) -> fun (V428) -> ((((V426('erased'))('erased'))(V427))(V428)) end end end(fun (V416) -> case V416 of {'Builtin.MkPair', V417, V418} -> case V418 of {'Builtin.MkPair', V419, V420} -> begin (V421 = ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V415, V420))), {'Builtin.MkPair', V417, {'Builtin.MkPair', V419, V421}} end end end end))(V353))), begin (V440 = ((begin (V437 = fun (V433) -> fun (V434) -> fun (V435) -> fun (V436) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V435, V436)) end end end end), fun (V438) -> fun (V439) -> ((((V437('erased'))('erased'))(V438))(V439)) end end end(fun (V430) -> case V430 of {'Builtin.MkPair', V431, V432} -> {'Builtin.MkPair', V431, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V415, V432))} end end))(V336))), begin (V442 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V441) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V362, V319)))), V441)) end, V305, []))), fun (V443) -> begin (V444 = (V442(V443))), case V444 of {'Prelude.Types.Left', V445} -> {'Prelude.Types.Left', V445}; {'Prelude.Types.Right', V446} -> (begin (V455 = fun (V447) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V297, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [V300 | []] end, fun () -> fun (V448) -> [V300 | [V448 | []]] end end, V304)), fun (V449) -> fun (V450) -> fun (V451) -> ('Idris.Idris2.Idris.Elab.Interface':'un--elabInterface'(V449, V1, V2, V0, V3, V4, V297, V298, V451, V450, V440, V300, V429, V303, V304, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V452) -> fun (V453) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V452, V453)) end end, []}, fun (V454) -> V454 end, V446)))) end end end} | []]} end), V455 end(V443)) end end end end end end), V456 end(V412)) end end end end end), V457 end(V350)) end end end end), V458 end(V333)) end end end end end end), V459 end(V307)) end end end end; {'Idris.Syntax.PImplementation', V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470} -> begin (V472 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V471) -> ('un--desugarFnOpt'(V0, V1, V2, V3, V4, V5, V471)) end, V462, []))), fun (V473) -> begin (V474 = (V472(V473))), case V474 of {'Prelude.Types.Left', V475} -> {'Prelude.Types.Left', V475}; {'Prelude.Types.Right', V476} -> (begin (V630 = begin (V493 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V477) -> fun (V478) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V477, V478, [])) end end, V464, fun (V479) -> case V479 of {'Builtin.MkPair', V480, V481} -> case V481 of {'Builtin.MkPair', V482, V483} -> case V483 of {'Builtin.MkPair', V484, V485} -> begin (V486 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V485))), fun (V487) -> begin (V488 = (V486(V487))), case V488 of {'Prelude.Types.Left', V489} -> {'Prelude.Types.Left', V489}; {'Prelude.Types.Right', V490} -> (begin (V492 = fun (V491) -> {'Prelude.Types.Right', {'Builtin.MkPair', V480, {'Builtin.MkPair', V482, {'Builtin.MkPair', V484, V490}}}} end), V492 end(V487)) end end end end end end end end))), fun (V494) -> begin (V495 = (V493(V494))), case V495 of {'Prelude.Types.Left', V496} -> {'Prelude.Types.Left', V496}; {'Prelude.Types.Right', V497} -> (begin (V629 = begin (V510 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V498) -> fun (V499) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V498, V499, [])) end end, V465, fun (V500) -> case V500 of {'Builtin.MkPair', V501, V502} -> begin (V503 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V502))), fun (V504) -> begin (V505 = (V503(V504))), case V505 of {'Prelude.Types.Left', V506} -> {'Prelude.Types.Left', V506}; {'Prelude.Types.Right', V507} -> (begin (V509 = fun (V508) -> {'Prelude.Types.Right', {'Builtin.MkPair', V501, V507}} end), V509 end(V504)) end end end end end end))), fun (V511) -> begin (V512 = (V510(V511))), case V512 of {'Prelude.Types.Left', V513} -> {'Prelude.Types.Left', V513}; {'Prelude.Types.Right', V514} -> (begin (V628 = begin (V516 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V515) -> ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V515)) end, V467, []))), fun (V517) -> begin (V518 = (V516(V517))), case V518 of {'Prelude.Types.Left', V519} -> {'Prelude.Types.Left', V519}; {'Prelude.Types.Right', V520} -> (begin (V627 = begin (V561 = begin (V521 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1))), fun (V522) -> begin (V523 = (V521(V522))), case V523 of {'Prelude.Types.Left', V524} -> {'Prelude.Types.Left', V524}; {'Prelude.Types.Right', V525} -> (begin (V560 = case V525 of 1 -> begin (V537 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V526) -> fun (V527) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V526, V527, [])) end end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V533 = fun (V529) -> fun (V530) -> fun (V531) -> fun (V532) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V531, V532)) end end end end), fun (V534) -> fun (V535) -> ((((V533('erased'))('erased'))(V534))(V535)) end end end(fun (V528) -> ('Idris.Idris2.Builtin':'un--snd'(V528)) end))(V514)), V520)), fun (V536) -> ('Idris.Idris2.TTImp.Utils':'un--findUniqueBindableNames'(V1, V460, 1, V5, [], V536)) end))), ((begin (V556 = fun (V551) -> fun (V552) -> fun (V553) -> fun (V554) -> fun (V555) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V553, V554, V555)) end end end end end), fun (V557) -> fun (V558) -> ((((V556('erased'))('erased'))(V557))(V558)) end end end((begin (V548 = fun (V542) -> fun (V543) -> fun (V544) -> fun (V545) -> case V545 of {'Prelude.Types.Left', V546} -> {'Prelude.Types.Left', V546}; {'Prelude.Types.Right', V547} -> {'Prelude.Types.Right', (V544(V547))} end end end end end), fun (V549) -> fun (V550) -> ((((V548('erased'))('erased'))(V549))(V550)) end end end(fun (V538) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V539) -> fun (V540) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V539, V540)) end end, []}, fun (V541) -> V541 end, V538)) end))))(V537)) end; 0 -> fun (V559) -> {'Prelude.Types.Right', []} end end), V560 end(V522)) end end end end), fun (V562) -> begin (V563 = (V561(V562))), case V563 of {'Prelude.Types.Left', V564} -> {'Prelude.Types.Left', V564}; {'Prelude.Types.Right', V565} -> (begin (V626 = begin (V574 = ((begin (V571 = fun (V567) -> fun (V568) -> fun (V569) -> fun (V570) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V569, V570)) end end end end), fun (V572) -> fun (V573) -> ((((V571('erased'))('erased'))(V572))(V573)) end end end(fun (V566) -> ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V565, V566)) end))(V520))), begin (V589 = ((begin (V586 = fun (V582) -> fun (V583) -> fun (V584) -> fun (V585) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V584, V585)) end end end end), fun (V587) -> fun (V588) -> ((((V586('erased'))('erased'))(V587))(V588)) end end end(fun (V575) -> case V575 of {'Builtin.MkPair', V576, V577} -> case V577 of {'Builtin.MkPair', V578, V579} -> case V579 of {'Builtin.MkPair', V580, V581} -> {'Builtin.MkPair', V576, {'Builtin.MkPair', V578, {'Builtin.MkPair', V580, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V565, V581))}}} end end end end))(V497))), begin (V600 = ((begin (V597 = fun (V593) -> fun (V594) -> fun (V595) -> fun (V596) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V595, V596)) end end end end), fun (V598) -> fun (V599) -> ((((V597('erased'))('erased'))(V598))(V599)) end end end(fun (V590) -> case V590 of {'Builtin.MkPair', V591, V592} -> {'Builtin.MkPair', V591, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V565, V592))} end end))(V514))), begin (V614 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V601) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end, fun () -> fun (V602) -> begin (V604 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V603) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V5, V603)) end, V602, []))), fun (V605) -> begin (V606 = (V604(V605))), case V606 of {'Prelude.Types.Left', V607} -> {'Prelude.Types.Left', V607}; {'Prelude.Types.Right', V608} -> (begin (V613 = fun (V609) -> {'Prelude.Types.Right', {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V610) -> fun (V611) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V610, V611)) end end, []}, fun (V612) -> V612 end, V608))}} end), V613 end(V605)) end end end end end end, V470))), fun (V615) -> begin (V616 = (V614(V615))), case V616 of {'Prelude.Types.Left', V617} -> {'Prelude.Types.Left', V617}; {'Prelude.Types.Right', V618} -> (begin (V625 = begin (V620 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Idris.Elab.Implementation':'un--mkImplName'(V460, V466, V574)) end, fun () -> fun (V619) -> V619 end end, V468))), fun (V621) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V460, [V620 | []], fun (V622) -> fun (V623) -> fun (V624) -> ('Idris.Idris2.Idris.Elab.Implementation':'un--elabImplementation'(V622, V1, V2, V0, V3, V4, V460, V461, V476, V463, V624, V623, V589, V600, V466, V574, ('nested--14816-15644--in--un--isNamed'(V470, V469, V468, V467, V466, V465, V464, V463, V462, V461, V460, V5, V4, V3, V2, V1, V0, V468)), V620, V469, V618)) end end end} | []]} end end), V625 end(V615)) end end end end end end end), V626 end(V562)) end end end end), V627 end(V517)) end end end end), V628 end(V511)) end end end end), V629 end(V494)) end end end end), V630 end(V473)) end end end end; {'Idris.Syntax.PRecord', V631, V632, V633, V634, V635} -> case V635 of {'Idris.Syntax.MkPRecordLater', V636, V637} -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V5, {'Idris.Syntax.PData', V631, V632, V633, V634, {'Idris.Syntax.MkPLater', V631, V636, ('nested--14816-16156--in--un--mkRecType'(V637, V636, V634, V633, V632, V631, V5, V4, V3, V2, V1, V0, V637))}})); {'Idris.Syntax.MkPRecord', V638, V639, V640, V641, V642} -> begin (V643 = ('Idris.Idris2.Idris.Doc.String':'un--addDocString'(V1, V0, V638, V632))), fun (V644) -> begin (V645 = (V643(V644))), case V645 of {'Prelude.Types.Left', V646} -> {'Prelude.Types.Left', V646}; {'Prelude.Types.Right', V647} -> (begin (V757 = begin (V668 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V648) -> case V648 of {'Builtin.MkPair', V649, V650} -> case V650 of {'Builtin.MkPair', V651, V652} -> case V652 of {'Builtin.MkPair', V653, V654} -> begin (V655 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V654))), fun (V656) -> begin (V657 = (V655(V656))), case V657 of {'Prelude.Types.Left', V658} -> {'Prelude.Types.Left', V658}; {'Prelude.Types.Right', V659} -> (begin (V667 = begin (V660 = ('nested--14816-16200--in--un--mapDesugarPiInfo'(V642, V641, V640, V639, V638, V634, V633, V632, V631, V5, V4, V3, V2, V1, V0, V5, V653))), fun (V661) -> begin (V662 = (V660(V661))), case V662 of {'Prelude.Types.Left', V663} -> {'Prelude.Types.Left', V663}; {'Prelude.Types.Right', V664} -> (begin (V666 = fun (V665) -> {'Prelude.Types.Right', {'Builtin.MkPair', V649, {'Builtin.MkPair', V651, {'Builtin.MkPair', V664, V659}}}} end), V666 end(V661)) end end end end), V667 end(V656)) end end end end end end end end, V639, []))), fun (V669) -> begin (V670 = (V668(V669))), case V670 of {'Prelude.Types.Left', V671} -> {'Prelude.Types.Left', V671}; {'Prelude.Types.Right', V672} -> (begin (V756 = begin (V681 = ((begin (V678 = fun (V674) -> fun (V675) -> fun (V676) -> fun (V677) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V676, V677)) end end end end), fun (V679) -> fun (V680) -> ((((V678('erased'))('erased'))(V679))(V680)) end end end(fun (V673) -> ('nested--14816-16198--in--un--fname'(V642, V641, V640, V639, V638, V634, V633, V632, V631, V5, V4, V3, V2, V1, V0, V673)) end))(V642))), begin (V682 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1))), fun (V683) -> begin (V684 = (V682(V683))), case V684 of {'Prelude.Types.Left', V685} -> {'Prelude.Types.Left', V685}; {'Prelude.Types.Right', V686} -> (begin (V755 = begin (V712 = case V686 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V687) -> fun (V688) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V687, V688)) end end, []}, fun (V689) -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(1, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V681, ((begin (V695 = fun (V691) -> fun (V692) -> fun (V693) -> fun (V694) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V693, V694)) end end end end), fun (V696) -> fun (V697) -> ((((V695('erased'))('erased'))(V696))(V697)) end end end(fun (V690) -> ('Idris.Idris2.Builtin':'un--fst'(V690)) end))(V639)))))), [], V689)) end, ((begin (V709 = fun (V705) -> fun (V706) -> fun (V707) -> fun (V708) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V707, V708)) end end end end), fun (V710) -> fun (V711) -> ((((V709('erased'))('erased'))(V710))(V711)) end end end(fun (V698) -> case V698 of {'Builtin.MkPair', V699, V700} -> case V700 of {'Builtin.MkPair', V701, V702} -> case V702 of {'Builtin.MkPair', V703, V704} -> V704 end end end end))(V672)))); 0 -> [] end), begin (V727 = ((begin (V724 = fun (V720) -> fun (V721) -> fun (V722) -> fun (V723) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V722, V723)) end end end end), fun (V725) -> fun (V726) -> ((((V724('erased'))('erased'))(V725))(V726)) end end end(fun (V713) -> case V713 of {'Builtin.MkPair', V714, V715} -> case V715 of {'Builtin.MkPair', V716, V717} -> case V717 of {'Builtin.MkPair', V718, V719} -> {'Builtin.MkPair', V714, {'Builtin.MkPair', V716, {'Builtin.MkPair', V718, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V712, V719))}}} end end end end))(V672))), begin (V728 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V638))), begin (V746 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V729) -> ('un--desugarField'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V735 = fun (V731) -> fun (V732) -> fun (V733) -> fun (V734) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V733, V734)) end end end end), fun (V736) -> fun (V737) -> ((((V735('erased'))('erased'))(V736))(V737)) end end end(fun (V730) -> ('nested--14816-16198--in--un--fname'(V642, V641, V640, V639, V638, V634, V633, V632, V631, V5, V4, V3, V2, V1, V0, V730)) end))(V642)), ((begin (V743 = fun (V739) -> fun (V740) -> fun (V741) -> fun (V742) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V741, V742)) end end end end), fun (V744) -> fun (V745) -> ((((V743('erased'))('erased'))(V744))(V745)) end end end(fun (V738) -> ('Idris.Idris2.Builtin':'un--fst'(V738)) end))(V639)))))), ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V728)), V729)) end, V642, []))), fun (V747) -> begin (V748 = (V746(V747))), case V748 of {'Prelude.Types.Left', V749} -> {'Prelude.Types.Left', V749}; {'Prelude.Types.Right', V750} -> (begin (V754 = begin (V752 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('nested--14816-16199--in--un--mkConName'(V642, V641, V640, V639, V638, V634, V633, V632, V631, V5, V4, V3, V2, V1, V0, V638)) end, fun () -> fun (V751) -> V751 end end, V641))), fun (V753) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IRecord', V631, {'Prelude.Types.Just', V728}, V633, V634, {'TTImp.TTImp.MkImpRecord', V631, V638, V727, V640, V752, V750}} | []]} end end), V754 end(V747)) end end end end end end end), V755 end(V683)) end end end end end), V756 end(V669)) end end end end), V757 end(V644)) end end end end end; {'Idris.Syntax.PFixity', V758, V759, V760, V761} -> case V759 of 3 -> case V761 of {'Core.Name.UN', V762} -> case V762 of {'Core.Name.Basic', V763} -> begin (V793 = begin (V769 = begin (V764 = V0), fun (V765) -> begin (V768 = (begin (V766 = V764), fun (V767) -> ('erlang':'get'(V766)) end end(V765))), {'Prelude.Types.Right', V768} end end end), fun (V770) -> begin (V771 = (V769(V770))), case V771 of {'Prelude.Types.Left', V772} -> {'Prelude.Types.Left', V772}; {'Prelude.Types.Right', V773} -> (begin (V792 = begin (V774 = V0), fun (V775) -> begin (V791 = (begin (V776 = V774), fun (V777) -> ('erlang':'put'(V776, case V773 of {'Idris.Syntax.MkSyntax', V778, V779, V780, V781, V782, V783, V784, V785, V786, V787, V788, V789, V790} -> {'Idris.Syntax.MkSyntax', V778, ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V763, {'Builtin.MkPair', V758, V760}, V779)), V780, V781, V782, V783, V784, V785, V786, V787, V788, V789, V790} end)) end end(V775))), {'Prelude.Types.Right', V791} end end end), V792 end(V770)) end end end end), fun (V794) -> begin (V795 = (V793(V794))), case V795 of {'Prelude.Types.Left', V796} -> {'Prelude.Types.Left', V796}; {'Prelude.Types.Right', V797} -> (begin (V799 = fun (V798) -> {'Prelude.Types.Right', []} end), V799 end(V794)) end end end end; _ -> case V761 of {'Core.Name.UN', V800} -> case V800 of {'Core.Name.Basic', V801} -> begin (V831 = begin (V807 = begin (V802 = V0), fun (V803) -> begin (V806 = (begin (V804 = V802), fun (V805) -> ('erlang':'get'(V804)) end end(V803))), {'Prelude.Types.Right', V806} end end end), fun (V808) -> begin (V809 = (V807(V808))), case V809 of {'Prelude.Types.Left', V810} -> {'Prelude.Types.Left', V810}; {'Prelude.Types.Right', V811} -> (begin (V830 = begin (V812 = V0), fun (V813) -> begin (V829 = (begin (V814 = V812), fun (V815) -> ('erlang':'put'(V814, case V811 of {'Idris.Syntax.MkSyntax', V816, V817, V818, V819, V820, V821, V822, V823, V824, V825, V826, V827, V828} -> {'Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V801, {'Builtin.MkPair', V758, {'Builtin.MkPair', V759, V760}}, V816)), V817, V818, V819, V820, V821, V822, V823, V824, V825, V826, V827, V828} end)) end end(V813))), {'Prelude.Types.Right', V829} end end end), V830 end(V808)) end end end end), fun (V832) -> begin (V833 = (V831(V832))), case V833 of {'Prelude.Types.Left', V834} -> {'Prelude.Types.Left', V834}; {'Prelude.Types.Right', V835} -> (begin (V837 = fun (V836) -> {'Prelude.Types.Right', []} end), V837 end(V832)) end end end end; _ -> fun (V838) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V758, <<"Fixity declarations must be for unqualified names"/utf8>>}, V838)) end end; _ -> fun (V839) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V758, <<"Fixity declarations must be for unqualified names"/utf8>>}, V839)) end end end; _ -> case V761 of {'Core.Name.UN', V840} -> case V840 of {'Core.Name.Basic', V841} -> begin (V871 = begin (V847 = begin (V842 = V0), fun (V843) -> begin (V846 = (begin (V844 = V842), fun (V845) -> ('erlang':'get'(V844)) end end(V843))), {'Prelude.Types.Right', V846} end end end), fun (V848) -> begin (V849 = (V847(V848))), case V849 of {'Prelude.Types.Left', V850} -> {'Prelude.Types.Left', V850}; {'Prelude.Types.Right', V851} -> (begin (V870 = begin (V852 = V0), fun (V853) -> begin (V869 = (begin (V854 = V852), fun (V855) -> ('erlang':'put'(V854, case V851 of {'Idris.Syntax.MkSyntax', V856, V857, V858, V859, V860, V861, V862, V863, V864, V865, V866, V867, V868} -> {'Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V841, {'Builtin.MkPair', V758, {'Builtin.MkPair', V759, V760}}, V856)), V857, V858, V859, V860, V861, V862, V863, V864, V865, V866, V867, V868} end)) end end(V853))), {'Prelude.Types.Right', V869} end end end), V870 end(V848)) end end end end), fun (V872) -> begin (V873 = (V871(V872))), case V873 of {'Prelude.Types.Left', V874} -> {'Prelude.Types.Left', V874}; {'Prelude.Types.Right', V875} -> (begin (V877 = fun (V876) -> {'Prelude.Types.Right', []} end), V877 end(V872)) end end end end; _ -> fun (V878) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V758, <<"Fixity declarations must be for unqualified names"/utf8>>}, V878)) end end; _ -> fun (V879) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V758, <<"Fixity declarations must be for unqualified names"/utf8>>}, V879)) end end end; _ -> case V761 of {'Core.Name.UN', V880} -> case V880 of {'Core.Name.Basic', V881} -> begin (V911 = begin (V887 = begin (V882 = V0), fun (V883) -> begin (V886 = (begin (V884 = V882), fun (V885) -> ('erlang':'get'(V884)) end end(V883))), {'Prelude.Types.Right', V886} end end end), fun (V888) -> begin (V889 = (V887(V888))), case V889 of {'Prelude.Types.Left', V890} -> {'Prelude.Types.Left', V890}; {'Prelude.Types.Right', V891} -> (begin (V910 = begin (V892 = V0), fun (V893) -> begin (V909 = (begin (V894 = V892), fun (V895) -> ('erlang':'put'(V894, case V891 of {'Idris.Syntax.MkSyntax', V896, V897, V898, V899, V900, V901, V902, V903, V904, V905, V906, V907, V908} -> {'Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V881, {'Builtin.MkPair', V758, {'Builtin.MkPair', V759, V760}}, V896)), V897, V898, V899, V900, V901, V902, V903, V904, V905, V906, V907, V908} end)) end end(V893))), {'Prelude.Types.Right', V909} end end end), V910 end(V888)) end end end end), fun (V912) -> begin (V913 = (V911(V912))), case V913 of {'Prelude.Types.Left', V914} -> {'Prelude.Types.Left', V914}; {'Prelude.Types.Right', V915} -> (begin (V917 = fun (V916) -> {'Prelude.Types.Right', []} end), V917 end(V912)) end end end end; _ -> fun (V918) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V758, <<"Fixity declarations must be for unqualified names"/utf8>>}, V918)) end end; _ -> fun (V919) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V758, <<"Fixity declarations must be for unqualified names"/utf8>>}, V919)) end end end; {'Idris.Syntax.PFail', V920, V921, V922} -> begin (V928 = begin (V923 = V2), fun (V924) -> begin (V927 = (begin (V925 = V923), fun (V926) -> ('erlang':'get'(V925)) end end(V924))), {'Prelude.Types.Right', V927} end end end), fun (V929) -> begin (V930 = (V928(V929))), case V930 of {'Prelude.Types.Left', V931} -> {'Prelude.Types.Left', V931}; {'Prelude.Types.Right', V932} -> (begin (V1187 = begin (V938 = begin (V933 = V3), fun (V934) -> begin (V937 = (begin (V935 = V933), fun (V936) -> ('erlang':'get'(V935)) end end(V934))), {'Prelude.Types.Right', V937} end end end), fun (V939) -> begin (V940 = (V938(V939))), case V940 of {'Prelude.Types.Left', V941} -> {'Prelude.Types.Left', V941}; {'Prelude.Types.Right', V942} -> (begin (V1186 = begin (V948 = begin (V943 = V4), fun (V944) -> begin (V947 = (begin (V945 = V943), fun (V946) -> ('erlang':'get'(V945)) end end(V944))), {'Prelude.Types.Right', V947} end end end), fun (V949) -> begin (V950 = (V948(V949))), case V950 of {'Prelude.Types.Left', V951} -> {'Prelude.Types.Left', V951}; {'Prelude.Types.Right', V952} -> (begin (V1185 = begin (V958 = begin (V953 = V0), fun (V954) -> begin (V957 = (begin (V955 = V953), fun (V956) -> ('erlang':'get'(V955)) end end(V954))), {'Prelude.Types.Right', V957} end end end), fun (V959) -> begin (V960 = (V958(V959))), case V960 of {'Prelude.Types.Left', V961} -> {'Prelude.Types.Left', V961}; {'Prelude.Types.Right', V962} -> (begin (V1184 = begin (V963 = ('Idris.Idris2.Core.Context':'un--branch'(V1))), fun (V964) -> begin (V965 = (V963(V964))), case V965 of {'Prelude.Types.Left', V966} -> {'Prelude.Types.Left', V966}; {'Prelude.Types.Right', V967} -> (begin (V1183 = begin (V974 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V969 = fun (V968) -> V968 end), fun (V970) -> (V969(V970)) end end(<<"desugar.failing"/utf8>>)), 20, fun () -> <<(begin (V972 = fun (V971) -> V971 end), fun (V973) -> (V972(V973)) end end(<<"Desugaring the block:\x{a}"/utf8>>))/binary, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PDecl'(V6))/binary>> end))), fun (V975) -> begin (V976 = (V974(V975))), case V976 of {'Prelude.Types.Left', V977} -> {'Prelude.Types.Left', V977}; {'Prelude.Types.Right', V978} -> (begin (V1182 = begin (V1039 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V980 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V979) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V5, V979)) end, V922, []))), fun (V981) -> begin (V982 = (V980(V981))), case V982 of {'Prelude.Types.Left', V983} -> {'Prelude.Types.Left', V983}; {'Prelude.Types.Right', V984} -> (begin (V989 = fun (V985) -> {'Prelude.Types.Right', {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V986) -> fun (V987) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V986, V987)) end end, []}, fun (V988) -> V988 end, V984))}} end), V989 end(V981)) end end end end, fun (V990) -> case V921 of {'Prelude.Types.Just', V991} -> begin (V1010 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V993 = fun (V992) -> V992 end), fun (V994) -> (V993(V994)) end end(<<"desugar.failing"/utf8>>)), 10, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V995) -> fun (V996) -> <<V995/binary, V996/binary>> end end, <<""/utf8>>}, fun (V997) -> V997 end, [(begin (V999 = fun (V998) -> V998 end), fun (V1000) -> (V999(V1000)) end end(<<"Failing block based on "/utf8>>)) | [(begin (V1002 = fun (V1001) -> V1001 end), fun (V1003) -> (V1002(V1003)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V991)))) | [(begin (V1005 = fun (V1004) -> V1004 end), fun (V1006) -> (V1005(V1006)) end end(<<" failed with "/utf8>>)) | [(begin (V1008 = fun (V1007) -> V1007 end), fun (V1009) -> (V1008(V1009)) end end(('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V990)))) | []]]]])) end))), fun (V1011) -> begin (V1012 = (V1010(V1011))), case V1012 of {'Prelude.Types.Left', V1013} -> {'Prelude.Types.Left', V1013}; {'Prelude.Types.Right', V1014} -> (begin (V1037 = begin (V1015 = ('Idris.Idris2.Idris.Error':'un--checkError'(V1, V0, V4, V991, V990))), fun (V1016) -> begin (V1017 = (V1015(V1016))), case V1017 of {'Prelude.Types.Left', V1018} -> {'Prelude.Types.Left', V1018}; {'Prelude.Types.Right', V1019} -> (begin (V1036 = fun (V1020) -> {'Prelude.Types.Right', {'Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V1021) -> fun (V1022) -> fun (V1023) -> fun (V1024) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V1023, V1024)) end end end end, fun (V1025) -> fun (V1026) -> {'Prelude.Types.Just', V1026} end end, fun (V1027) -> fun (V1028) -> fun (V1029) -> fun (V1030) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V1029, V1030)) end end end end}, fun (V1031) -> {'Prelude.Types.Nothing'} end, fun (V1032) -> fun (V1033) -> fun (V1034) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V1033, V1034)) end end end}, case V1019 of 1 -> 0; 0 -> 1 end)), fun (V1035) -> {'Prelude.Types.Just', {'Core.Core.FailingWrongError', V920, V991, {'Data.List1.:::', V990, []}}} end))}} end), V1036 end(V1016)) end end end end), V1037 end(V1011)) end end end end; _ -> fun (V1038) -> {'Prelude.Types.Right', {'Prelude.Types.Left', {'Prelude.Types.Nothing'}}} end end end))), fun (V1040) -> begin (V1041 = (V1039(V1040))), case V1041 of {'Prelude.Types.Left', V1042} -> {'Prelude.Types.Left', V1042}; {'Prelude.Types.Right', V1043} -> (begin (V1181 = begin (V1049 = begin (V1044 = V2), fun (V1045) -> begin (V1048 = (begin (V1046 = V1044), fun (V1047) -> ('erlang':'put'(V1046, V932)) end end(V1045))), {'Prelude.Types.Right', V1048} end end end), fun (V1050) -> begin (V1051 = (V1049(V1050))), case V1051 of {'Prelude.Types.Left', V1052} -> {'Prelude.Types.Left', V1052}; {'Prelude.Types.Right', V1053} -> (begin (V1180 = begin (V1059 = begin (V1054 = V3), fun (V1055) -> begin (V1058 = (begin (V1056 = V1054), fun (V1057) -> ('erlang':'get'(V1056)) end end(V1055))), {'Prelude.Types.Right', V1058} end end end), fun (V1060) -> begin (V1061 = (V1059(V1060))), case V1061 of {'Prelude.Types.Left', V1062} -> {'Prelude.Types.Left', V1062}; {'Prelude.Types.Right', V1063} -> (begin (V1179 = begin (V1109 = begin (V1064 = V3), fun (V1065) -> begin (V1108 = (begin (V1066 = V1064), fun (V1067) -> ('erlang':'put'(V1066, case V942 of {'Core.Metadata.MkMetadata', V1068, V1069, V1070, V1071, V1072, V1073, V1074, V1075, V1076, V1077} -> {'Core.Metadata.MkMetadata', V1068, V1069, V1070, V1071, V1072, V1073, V1074, case V1063 of {'Core.Metadata.MkMetadata', V1078, V1079, V1080, V1081, V1082, V1083, V1084, V1085, V1086, V1087} -> V1085 end, case V1063 of {'Core.Metadata.MkMetadata', V1088, V1089, V1090, V1091, V1092, V1093, V1094, V1095, V1096, V1097} -> V1096 end, case V1063 of {'Core.Metadata.MkMetadata', V1098, V1099, V1100, V1101, V1102, V1103, V1104, V1105, V1106, V1107} -> V1107 end} end)) end end(V1065))), {'Prelude.Types.Right', V1108} end end end), fun (V1110) -> begin (V1111 = (V1109(V1110))), case V1111 of {'Prelude.Types.Left', V1112} -> {'Prelude.Types.Left', V1112}; {'Prelude.Types.Right', V1113} -> (begin (V1178 = begin (V1119 = begin (V1114 = V0), fun (V1115) -> begin (V1118 = (begin (V1116 = V1114), fun (V1117) -> ('erlang':'put'(V1116, V962)) end end(V1115))), {'Prelude.Types.Right', V1118} end end end), fun (V1120) -> begin (V1121 = (V1119(V1120))), case V1121 of {'Prelude.Types.Left', V1122} -> {'Prelude.Types.Left', V1122}; {'Prelude.Types.Right', V1123} -> (begin (V1177 = begin (V1129 = begin (V1124 = V1), fun (V1125) -> begin (V1128 = (begin (V1126 = V1124), fun (V1127) -> ('erlang':'put'(V1126, V967)) end end(V1125))), {'Prelude.Types.Right', V1128} end end end), fun (V1130) -> begin (V1131 = (V1129(V1130))), case V1131 of {'Prelude.Types.Left', V1132} -> {'Prelude.Types.Left', V1132}; {'Prelude.Types.Right', V1133} -> (begin (V1176 = case V1043 of {'Prelude.Types.Right', V1134} -> begin (V1135 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"desugar.failing"/utf8>>, 20, fun () -> <<"Success"/utf8>> end))), ((begin (V1151 = fun (V1146) -> fun (V1147) -> fun (V1148) -> fun (V1149) -> fun (V1150) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1148, V1149, V1150)) end end end end end), fun (V1152) -> fun (V1153) -> ((((V1151('erased'))('erased'))(V1152))(V1153)) end end end((begin (V1143 = fun (V1137) -> fun (V1138) -> fun (V1139) -> fun (V1140) -> case V1140 of {'Prelude.Types.Left', V1141} -> {'Prelude.Types.Left', V1141}; {'Prelude.Types.Right', V1142} -> {'Prelude.Types.Right', (V1139(V1142))} end end end end end), fun (V1144) -> fun (V1145) -> ((((V1143('erased'))('erased'))(V1144))(V1145)) end end end(fun (V1136) -> [{'TTImp.TTImp.IFail', V920, V921, V1134} | []] end))))(V1135)) end; {'Prelude.Types.Left', V1154} -> case V1154 of {'Prelude.Types.Nothing'} -> begin (V1155 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"desugar.failing"/utf8>>, 20, fun () -> <<"Correctly failed"/utf8>> end))), ((begin (V1171 = fun (V1166) -> fun (V1167) -> fun (V1168) -> fun (V1169) -> fun (V1170) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1168, V1169, V1170)) end end end end end), fun (V1172) -> fun (V1173) -> ((((V1171('erased'))('erased'))(V1172))(V1173)) end end end((begin (V1163 = fun (V1157) -> fun (V1158) -> fun (V1159) -> fun (V1160) -> case V1160 of {'Prelude.Types.Left', V1161} -> {'Prelude.Types.Left', V1161}; {'Prelude.Types.Right', V1162} -> {'Prelude.Types.Right', (V1159(V1162))} end end end end end), fun (V1164) -> fun (V1165) -> ((((V1163('erased'))('erased'))(V1164))(V1165)) end end end(fun (V1156) -> [] end))))(V1155)) end; {'Prelude.Types.Just', V1174} -> fun (V1175) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V1174, V1175)) end end end), V1176 end(V1130)) end end end end), V1177 end(V1120)) end end end end), V1178 end(V1110)) end end end end), V1179 end(V1060)) end end end end), V1180 end(V1050)) end end end end), V1181 end(V1040)) end end end end), V1182 end(V975)) end end end end), V1183 end(V964)) end end end end), V1184 end(V959)) end end end end), V1185 end(V949)) end end end end), V1186 end(V939)) end end end end), V1187 end(V929)) end end end end; {'Idris.Syntax.PMutual', V1188, V1189} -> case ('Idris.Idris2.Idris.Desugar.Mutual':'un--splitMutual'(V1189)) of {'Builtin.MkPair', V1190, V1191} -> begin (V1193 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V1192) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V5, V1192)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1190, V1191)), []))), fun (V1194) -> begin (V1195 = (V1193(V1194))), case V1195 of {'Prelude.Types.Left', V1196} -> {'Prelude.Types.Left', V1196}; {'Prelude.Types.Right', V1197} -> (begin (V1202 = fun (V1198) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1199) -> fun (V1200) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1199, V1200)) end end, []}, fun (V1201) -> V1201 end, V1197))} end), V1202 end(V1194)) end end end end end; {'Idris.Syntax.PNamespace', V1203, V1204, V1205} -> ('Idris.Idris2.Core.Context':'un--withExtendedNS'(V1, V1204, begin (V1207 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V1206) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V5, V1206)) end, V1205, []))), fun (V1208) -> begin (V1209 = (V1207(V1208))), case V1209 of {'Prelude.Types.Left', V1210} -> {'Prelude.Types.Left', V1210}; {'Prelude.Types.Right', V1211} -> (begin (V1216 = fun (V1212) -> {'Prelude.Types.Right', [{'TTImp.TTImp.INamespace', V1203, V1204, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1213) -> fun (V1214) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1213, V1214)) end end, []}, fun (V1215) -> V1215 end, V1211))} | []]} end), V1216 end(V1208)) end end end end)); {'Idris.Syntax.PTransform', V1217, V1218, V1219, V1220} -> begin (V1227 = begin (V1221 = ('un--desugar'(V0, V1, V3, V2, V4, 0, V5, V1219))), fun (V1222) -> begin (V1223 = (V1221(V1222))), case V1223 of {'Prelude.Types.Left', V1224} -> {'Prelude.Types.Left', V1224}; {'Prelude.Types.Right', V1225} -> (begin (V1226 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 0, V1225))), V1226 end(V1222)) end end end end), fun (V1228) -> begin (V1229 = (V1227(V1228))), case V1229 of {'Prelude.Types.Left', V1230} -> {'Prelude.Types.Left', V1230}; {'Prelude.Types.Right', V1231} -> (begin (V1241 = case V1231 of {'Builtin.MkPair', V1232, V1233} -> begin (V1234 = ('un--desugar'(V0, V1, V3, V2, V4, 1, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1232, V5)), V1220))), fun (V1235) -> begin (V1236 = (V1234(V1235))), case V1236 of {'Prelude.Types.Left', V1237} -> {'Prelude.Types.Left', V1237}; {'Prelude.Types.Right', V1238} -> (begin (V1240 = fun (V1239) -> {'Prelude.Types.Right', [{'TTImp.TTImp.ITransform', V1217, {'Core.Name.UN', {'Core.Name.Basic', V1218}}, V1233, V1238} | []]} end), V1240 end(V1235)) end end end end end), V1241 end(V1228)) end end end end; {'Idris.Syntax.PRunElabDecl', V1242, V1243} -> begin (V1244 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V1243))), fun (V1245) -> begin (V1246 = (V1244(V1245))), case V1246 of {'Prelude.Types.Left', V1247} -> {'Prelude.Types.Left', V1247}; {'Prelude.Types.Right', V1248} -> (begin (V1250 = fun (V1249) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IRunElabDecl', V1242, V1248} | []]} end), V1250 end(V1245)) end end end end; {'Idris.Syntax.PDirective', V1251, V1252} -> case V1252 of {'Idris.Syntax.Hide', V1253} -> fun (V1254) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1255) -> fun (V1256) -> fun (V1257) -> ('Idris.Idris2.Core.Context':'un--hide'(V1, V1251, V1253)) end end end} | []]} end; {'Idris.Syntax.Unhide', V1258} -> fun (V1259) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1260) -> fun (V1261) -> fun (V1262) -> ('Idris.Idris2.Core.Context':'un--unhide'(V1, V1251, V1258)) end end end} | []]} end; {'Idris.Syntax.Logging', V1263} -> fun (V1264) -> {'Prelude.Types.Right', [{'TTImp.TTImp.ILog', ((begin (V1270 = fun (V1266) -> fun (V1267) -> fun (V1268) -> fun (V1269) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V1268, V1269)) end end end end), fun (V1271) -> fun (V1272) -> ((((V1270('erased'))('erased'))(V1271))(V1272)) end end end(fun (V1265) -> {'Builtin.MkPair', ('Idris.Idris2.Core.Options.Log':'un--topics'(V1265)), ('Idris.Idris2.Core.Options.Log':'un--verbosity'(V1265))} end))(V1263))} | []]} end; {'Idris.Syntax.LazyOn', V1273} -> fun (V1274) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1275) -> fun (V1276) -> fun (V1277) -> ('Idris.Idris2.Core.Context':'un--lazyActive'(V1, V1273)) end end end} | []]} end; {'Idris.Syntax.UnboundImplicits', V1278} -> begin (V1279 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V1278))), fun (V1280) -> begin (V1281 = (V1279(V1280))), case V1281 of {'Prelude.Types.Left', V1282} -> {'Prelude.Types.Left', V1282}; {'Prelude.Types.Right', V1283} -> (begin (V1288 = fun (V1284) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1285) -> fun (V1286) -> fun (V1287) -> ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V1278)) end end end} | []]} end), V1288 end(V1280)) end end end end; {'Idris.Syntax.PrefixRecordProjections', V1289} -> fun (V1290) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1291) -> fun (V1292) -> fun (V1293) -> ('Idris.Idris2.Core.Context':'un--setPrefixRecordProjections'(V1, V1289)) end end end} | []]} end; {'Idris.Syntax.AmbigDepth', V1294} -> fun (V1295) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1296) -> fun (V1297) -> fun (V1298) -> ('Idris.Idris2.Core.Context':'un--setAmbigLimit'(V1, V1294)) end end end} | []]} end; {'Idris.Syntax.AutoImplicitDepth', V1299} -> fun (V1300) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1301) -> fun (V1302) -> fun (V1303) -> ('Idris.Idris2.Core.Context':'un--setAutoImplicitLimit'(V1, V1299)) end end end} | []]} end; {'Idris.Syntax.NFMetavarThreshold', V1304} -> fun (V1305) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1306) -> fun (V1307) -> fun (V1308) -> ('Idris.Idris2.Core.Context':'un--setNFThreshold'(V1, V1304)) end end end} | []]} end; {'Idris.Syntax.SearchTimeout', V1309} -> fun (V1310) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1311) -> fun (V1312) -> fun (V1313) -> ('Idris.Idris2.Core.Context':'un--setSearchTimeout'(V1, V1309)) end end end} | []]} end; {'Idris.Syntax.PairNames', V1314, V1315, V1316} -> fun (V1317) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1318) -> fun (V1319) -> fun (V1320) -> ('Idris.Idris2.Core.Context':'un--setPair'(V1, V1251, V1314, V1315, V1316)) end end end} | []]} end; {'Idris.Syntax.RewriteName', V1321, V1322} -> fun (V1323) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1324) -> fun (V1325) -> fun (V1326) -> ('Idris.Idris2.Core.Context':'un--setRewrite'(V1, V1251, V1321, V1322)) end end end} | []]} end; {'Idris.Syntax.PrimInteger', V1327} -> fun (V1328) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1329) -> fun (V1330) -> fun (V1331) -> ('Idris.Idris2.Core.Context':'un--setFromInteger'(V1, V1327)) end end end} | []]} end; {'Idris.Syntax.PrimString', V1332} -> fun (V1333) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1334) -> fun (V1335) -> fun (V1336) -> ('Idris.Idris2.Core.Context':'un--setFromString'(V1, V1332)) end end end} | []]} end; {'Idris.Syntax.PrimChar', V1337} -> fun (V1338) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1339) -> fun (V1340) -> fun (V1341) -> ('Idris.Idris2.Core.Context':'un--setFromChar'(V1, V1337)) end end end} | []]} end; {'Idris.Syntax.PrimDouble', V1342} -> fun (V1343) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1344) -> fun (V1345) -> fun (V1346) -> ('Idris.Idris2.Core.Context':'un--setFromDouble'(V1, V1342)) end end end} | []]} end; {'Idris.Syntax.CGAction', V1347, V1348} -> fun (V1349) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1350) -> fun (V1351) -> fun (V1352) -> ('Idris.Idris2.Core.Context':'un--addDirective'(V1, V1347, V1348)) end end end} | []]} end; {'Idris.Syntax.Names', V1353, V1354} -> fun (V1355) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1356) -> fun (V1357) -> fun (V1358) -> ('Idris.Idris2.Core.Context':'un--addNameDirective'(V1, V1251, V1353, V1354)) end end end} | []]} end; {'Idris.Syntax.StartExpr', V1359} -> fun (V1360) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1361) -> fun (V1362) -> fun (V1363) -> fun (V1364) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V1366 = fun (V1365) -> V1365 end), fun (V1367) -> (V1366(V1367)) end end(<<"%start not implemented"/utf8>>))}, V1364)) end end end end} | []]} end; {'Idris.Syntax.Overloadable', V1368} -> fun (V1369) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1370) -> fun (V1371) -> fun (V1372) -> ('Idris.Idris2.Core.Context':'un--setNameFlag'(V1, V1251, V1368, {'Core.Context.Context.Overloadable'})) end end end} | []]} end; {'Idris.Syntax.Extension', V1373} -> fun (V1374) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1375) -> fun (V1376) -> fun (V1377) -> ('Idris.Idris2.Core.Context':'un--setExtension'(V1, V1373)) end end end} | []]} end; {'Idris.Syntax.DefaultTotality', V1378} -> fun (V1379) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IPragma', V1251, [], fun (V1380) -> fun (V1381) -> fun (V1382) -> ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V1, V1378)) end end end} | []]} end end; {'Idris.Syntax.PBuiltin', V1383, V1384, V1385} -> fun (V1386) -> {'Prelude.Types.Right', [{'TTImp.TTImp.IBuiltin', V1383, V1384, V1385} | []]} end end.
'un--desugarData'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Syntax.MkPData', V8, V9, V10, V11, V12} -> begin (V13 = ('Idris.Idris2.Idris.Doc.String':'un--addDocString'(V1, V0, V9, V6))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V62 = begin (V23 = begin (V18 = V0), fun (V19) -> begin (V22 = (begin (V20 = V18), fun (V21) -> ('erlang':'get'(V20)) end end(V19))), {'Prelude.Types.Right', V22} end end end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V61 = begin (V28 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V10))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V60 = begin (V46 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V8, case V27 of {'Idris.Syntax.MkSyntax', V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V43 end, V5, V32))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V59 = begin (V52 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V51) -> ('un--desugarType'(V0, V1, V2, V3, V4, V5, V51)) end, V12, []))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V58 = fun (V57) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkImpData', V8, V9, V50, V11, V56}} end), V58 end(V53)) end end end end), V59 end(V47)) end end end end), V60 end(V29)) end end end end), V61 end(V24)) end end end end), V62 end(V14)) end end end end; {'Idris.Syntax.MkPLater', V63, V64, V65} -> begin (V66 = ('Idris.Idris2.Idris.Doc.String':'un--addDocString'(V1, V0, V64, V6))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V108 = begin (V76 = begin (V71 = V0), fun (V72) -> begin (V75 = (begin (V73 = V71), fun (V74) -> ('erlang':'get'(V73)) end end(V72))), {'Prelude.Types.Right', V75} end end end), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V107 = begin (V81 = ('un--desugar'(V0, V1, V3, V2, V4, 1, V5, V65))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V106 = begin (V99 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V63, case V80 of {'Idris.Syntax.MkSyntax', V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98} -> V96 end, V5, V85))), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V105 = fun (V104) -> {'Prelude.Types.Right', {'TTImp.TTImp.MkImpLater', V63, V64, V103}} end), V105 end(V100)) end end end end), V106 end(V82)) end end end end), V107 end(V77)) end end end end), V108 end(V67)) end end end end end.
'un--desugarClause'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Syntax.MkPatClause', V8, V9, V10, V11} -> begin (V13 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V12) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V5, V12)) end, V11, []))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V39 = begin (V18 = ('un--desugarLHS'(V0, V1, V3, V2, V4, V5, V6, V9))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V38 = case V22 of {'Builtin.MkPair', V23, V24} -> case V24 of {'Builtin.MkPair', V25, V26} -> begin (V27 = ('un--desugar'(V0, V1, V3, V2, V4, 1, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V25, V5)), V10))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V37 = begin (V35 = case V17 of [] -> V31; _ -> {'TTImp.TTImp.ILocal', V8, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V32, V33)) end end, []}, fun (V34) -> V34 end, V17)), V31} end), fun (V36) -> {'Prelude.Types.Right', {'Builtin.MkPair', V23, {'TTImp.TTImp.PatClause', V8, V26, V35}}} end end), V37 end(V28)) end end end end end end), V38 end(V19)) end end end end), V39 end(V14)) end end end end; {'Idris.Syntax.MkWithClause', V40, V41, V42, V43, V44} -> begin (V65 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V45) -> begin (V46 = ('un--desugarClause'(V0, V1, V2, V3, V4, V5, V6, V45))), ((begin (V62 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V59, V60, V61)) end end end end end), fun (V63) -> fun (V64) -> ((((V62('erased'))('erased'))(V63))(V64)) end end end((begin (V54 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> {'Prelude.Types.Right', (V50(V53))} end end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V47) -> ('Idris.Idris2.Builtin':'un--snd'(V47)) end))))(V46)) end end, V44, []))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V88 = begin (V70 = ('un--desugarLHS'(V0, V1, V3, V2, V4, V5, V6, V41))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V87 = case V74 of {'Builtin.MkPair', V75, V76} -> case V76 of {'Builtin.MkPair', V77, V78} -> begin (V80 = ('Idris.Idris2.Core.Core':'un--traverseList1'(fun (V79) -> ('un--desugarWithProblem'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V77, V5)), V79)) end, V42))), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V86 = fun (V85) -> {'Prelude.Types.Right', {'Builtin.MkPair', V75, ('Idris.Idris2.TTImp.TTImp':'un--mkWithClause'(V40, V78, V84, V43, V69))}} end), V86 end(V81)) end end end end end end), V87 end(V71)) end end end end), V88 end(V66)) end end end end; {'Idris.Syntax.MkImpossible', V89, V90} -> begin (V91 = ('un--desugarLHS'(V0, V1, V3, V2, V4, V5, V6, V90))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V101 = fun (V96) -> case V95 of {'Builtin.MkPair', V97, V98} -> case V98 of {'Builtin.MkPair', V99, V100} -> {'Prelude.Types.Right', {'Builtin.MkPair', V97, {'TTImp.TTImp.ImpossibleClause', V89, V100}}} end end end), V101 end(V92)) end end end end end.
'un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Syntax.PRef', V9, V10} -> begin (V16 = begin (V11 = V1), fun (V12) -> begin (V15 = (begin (V13 = V11), fun (V14) -> ('erlang':'get'(V13)) end end(V12))), {'Prelude.Types.Right', V15} end end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V28 = begin (V24 = case V20 of {'Idris.Desugar.MkBangData', V21, V22, V23} -> V23 end), begin (V25 = {'Core.Name.UN', {'Core.Name.Basic', <<"pure"/utf8>>}}), fun (V26) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V25)) of 0 -> {'Prelude.Types.Right', {'TTImp.TTImp.IVar', V9, V10}}; 1 -> {'Prelude.Types.Right', {'TTImp.TTImp.IVar', V9, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V25 end, fun () -> fun (V27) -> {'Core.Name.NS', V27, V25} end end, V24))}} end end end end), V28 end(V17)) end end end end; {'Idris.Syntax.PPi', V29, V30, V31, V32, V33, V34} -> begin (V36 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V7 end, fun () -> fun (V35) -> [V35 | V7] end end, V32))), begin (V38 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V37) -> ('un--desugar'(V0, V2, V3, V4, V5, V6, V36, V37)) end, V31))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V56 = begin (V43 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V33))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V55 = begin (V48 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V36, V34))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V54 = fun (V53) -> {'Prelude.Types.Right', {'TTImp.TTImp.IPi', V29, V30, V42, V32, V47, V52}} end), V54 end(V49)) end end end end), V55 end(V44)) end end end end), V56 end(V39)) end end end end end; {'Idris.Syntax.PLam', V57, V58, V59, V60, V61, V62} -> case V60 of {'Idris.Syntax.PRef', V63, V64} -> case V64 of {'Core.Name.UN', V65} -> begin (V66 = {'Idris.Syntax.PRef', V63, {'Core.Name.UN', V65}}), begin (V67 = {'Core.Name.UN', V65}), case ('Idris.Idris2.Core.Name':'un--isPatternVariable'(V65)) of 1 -> begin (V70 = case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V63)) of {'Prelude.Types.Just', V68} -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V3, V2, [{'Builtin.MkPair', V68, {'Builtin.MkPair', 5, {'Prelude.Types.Just', V67}}} | []])); {'Prelude.Types.Nothing'} -> fun (V69) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V95 = begin (V76 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V75) -> ('un--desugar'(V0, V2, V3, V4, V5, 1, V7, V75)) end, V59))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V94 = begin (V81 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, 1, V7, V61))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V93 = begin (V86 = ('un--desugar'(V0, V2, V3, V4, V5, 1, [V67 | V7], V62))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V92 = fun (V91) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILam', V57, V58, V80, {'Prelude.Types.Just', V67}, V85, V90}} end), V92 end(V87)) end end end end), V93 end(V82)) end end end end), V94 end(V77)) end end end end), V95 end(V71)) end end end end; 0 -> begin (V97 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V96) -> ('un--desugar'(V0, V2, V3, V4, V5, 1, V7, V96)) end, V59))), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V115 = begin (V102 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, 1, V7, V61))), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V114 = begin (V107 = ('un--desugarClause'(V0, V2, V4, V3, V5, V7, 1, {'Idris.Syntax.MkPatClause', V57, V66, V62, []}))), fun (V108) -> begin (V109 = (V107(V108))), case V109 of {'Prelude.Types.Left', V110} -> {'Prelude.Types.Left', V110}; {'Prelude.Types.Right', V111} -> (begin (V113 = fun (V112) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILam', {'Core.FC.EmptyFC'}, V58, V101, {'Prelude.Types.Just', {'Core.Name.MN', <<"lamc"/utf8>>, 0}}, V106, {'TTImp.TTImp.ICase', V57, {'TTImp.TTImp.IVar', {'Core.FC.EmptyFC'}, {'Core.Name.MN', <<"lamc"/utf8>>, 0}}, {'TTImp.TTImp.Implicit', V57, 0}, [('Idris.Idris2.Builtin':'un--snd'(V111)) | []]}}} end), V113 end(V108)) end end end end), V114 end(V103)) end end end end), V115 end(V98)) end end end end end end end; {'Core.Name.MN', V116, V117} -> begin (V119 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V118) -> ('un--desugar'(V0, V2, V3, V4, V5, 1, V7, V118)) end, V59))), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V137 = begin (V124 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, 1, V7, V61))), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V136 = begin (V129 = ('un--desugar'(V0, V2, V3, V4, V5, 1, [V64 | V7], V62))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V135 = fun (V134) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILam', V57, V58, V123, {'Prelude.Types.Just', V64}, V128, V133}} end), V135 end(V130)) end end end end), V136 end(V125)) end end end end), V137 end(V120)) end end end end; _ -> begin (V139 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V138) -> ('un--desugar'(V0, V2, V3, V4, V5, 1, V7, V138)) end, V59))), fun (V140) -> begin (V141 = (V139(V140))), case V141 of {'Prelude.Types.Left', V142} -> {'Prelude.Types.Left', V142}; {'Prelude.Types.Right', V143} -> (begin (V157 = begin (V144 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, 1, V7, V61))), fun (V145) -> begin (V146 = (V144(V145))), case V146 of {'Prelude.Types.Left', V147} -> {'Prelude.Types.Left', V147}; {'Prelude.Types.Right', V148} -> (begin (V156 = begin (V149 = ('un--desugarClause'(V0, V2, V4, V3, V5, V7, 1, {'Idris.Syntax.MkPatClause', V57, V60, V62, []}))), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V155 = fun (V154) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILam', {'Core.FC.EmptyFC'}, V58, V143, {'Prelude.Types.Just', {'Core.Name.MN', <<"lamc"/utf8>>, 0}}, V148, {'TTImp.TTImp.ICase', V57, {'TTImp.TTImp.IVar', {'Core.FC.EmptyFC'}, {'Core.Name.MN', <<"lamc"/utf8>>, 0}}, {'TTImp.TTImp.Implicit', V57, 0}, [('Idris.Idris2.Builtin':'un--snd'(V153)) | []]}}} end), V155 end(V150)) end end end end), V156 end(V145)) end end end end), V157 end(V140)) end end end end end; {'Idris.Syntax.PImplicit', V158} -> begin (V160 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V159) -> ('un--desugar'(V0, V2, V3, V4, V5, 1, V7, V159)) end, V59))), fun (V161) -> begin (V162 = (V160(V161))), case V162 of {'Prelude.Types.Left', V163} -> {'Prelude.Types.Left', V163}; {'Prelude.Types.Right', V164} -> (begin (V178 = begin (V165 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, 1, V7, V61))), fun (V166) -> begin (V167 = (V165(V166))), case V167 of {'Prelude.Types.Left', V168} -> {'Prelude.Types.Left', V168}; {'Prelude.Types.Right', V169} -> (begin (V177 = begin (V170 = ('un--desugar'(V0, V2, V3, V4, V5, 1, V7, V62))), fun (V171) -> begin (V172 = (V170(V171))), case V172 of {'Prelude.Types.Left', V173} -> {'Prelude.Types.Left', V173}; {'Prelude.Types.Right', V174} -> (begin (V176 = fun (V175) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILam', V57, V58, V164, {'Prelude.Types.Nothing'}, V169, V174}} end), V176 end(V171)) end end end end), V177 end(V166)) end end end end), V178 end(V161)) end end end end; _ -> begin (V180 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V179) -> ('un--desugar'(V0, V2, V3, V4, V5, 1, V7, V179)) end, V59))), fun (V181) -> begin (V182 = (V180(V181))), case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> (begin (V198 = begin (V185 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, 1, V7, V61))), fun (V186) -> begin (V187 = (V185(V186))), case V187 of {'Prelude.Types.Left', V188} -> {'Prelude.Types.Left', V188}; {'Prelude.Types.Right', V189} -> (begin (V197 = begin (V190 = ('un--desugarClause'(V0, V2, V4, V3, V5, V7, 1, {'Idris.Syntax.MkPatClause', V57, V60, V62, []}))), fun (V191) -> begin (V192 = (V190(V191))), case V192 of {'Prelude.Types.Left', V193} -> {'Prelude.Types.Left', V193}; {'Prelude.Types.Right', V194} -> (begin (V196 = fun (V195) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILam', {'Core.FC.EmptyFC'}, V58, V184, {'Prelude.Types.Just', {'Core.Name.MN', <<"lamc"/utf8>>, 0}}, V189, {'TTImp.TTImp.ICase', V57, {'TTImp.TTImp.IVar', {'Core.FC.EmptyFC'}, {'Core.Name.MN', <<"lamc"/utf8>>, 0}}, {'TTImp.TTImp.Implicit', V57, 0}, [('Idris.Idris2.Builtin':'un--snd'(V194)) | []]}}} end), V196 end(V191)) end end end end), V197 end(V186)) end end end end), V198 end(V181)) end end end end end; {'Idris.Syntax.PLet', V199, V200, V201, V202, V203, V204, V205} -> case V201 of {'Idris.Syntax.PRef', V206, V207} -> case V205 of [] -> begin (V210 = case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V206)) of {'Prelude.Types.Just', V208} -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V3, V2, [{'Builtin.MkPair', V208, {'Builtin.MkPair', 5, {'Prelude.Types.Just', V207}}} | []])); {'Prelude.Types.Nothing'} -> fun (V209) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V211) -> begin (V212 = (V210(V211))), case V212 of {'Prelude.Types.Left', V213} -> {'Prelude.Types.Left', V213}; {'Prelude.Types.Right', V214} -> (begin (V234 = begin (V215 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V202))), fun (V216) -> begin (V217 = (V215(V216))), case V217 of {'Prelude.Types.Left', V218} -> {'Prelude.Types.Left', V218}; {'Prelude.Types.Right', V219} -> (begin (V233 = begin (V220 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V203))), fun (V221) -> begin (V222 = (V220(V221))), case V222 of {'Prelude.Types.Left', V223} -> {'Prelude.Types.Left', V223}; {'Prelude.Types.Right', V224} -> (begin (V232 = begin (V225 = ('un--desugar'(V0, V2, V3, V4, V5, V6, [V207 | V7], V204))), fun (V226) -> begin (V227 = (V225(V226))), case V227 of {'Prelude.Types.Left', V228} -> {'Prelude.Types.Left', V228}; {'Prelude.Types.Right', V229} -> (begin (V231 = fun (V230) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILet', V199, V206, V200, V207, V219, V224, V229}} end), V231 end(V226)) end end end end), V232 end(V221)) end end end end), V233 end(V216)) end end end end), V234 end(V211)) end end end end; _ -> begin (V235 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V203))), fun (V236) -> begin (V237 = (V235(V236))), case V237 of {'Prelude.Types.Left', V238} -> {'Prelude.Types.Left', V238}; {'Prelude.Types.Right', V239} -> (begin (V273 = begin (V240 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V202))), fun (V241) -> begin (V242 = (V240(V241))), case V242 of {'Prelude.Types.Left', V243} -> {'Prelude.Types.Left', V243}; {'Prelude.Types.Right', V244} -> (begin (V272 = begin (V265 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V245) -> begin (V246 = ('un--desugarClause'(V0, V2, V4, V3, V5, V7, 1, V245))), ((begin (V262 = fun (V257) -> fun (V258) -> fun (V259) -> fun (V260) -> fun (V261) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V259, V260, V261)) end end end end end), fun (V263) -> fun (V264) -> ((((V262('erased'))('erased'))(V263))(V264)) end end end((begin (V254 = fun (V248) -> fun (V249) -> fun (V250) -> fun (V251) -> case V251 of {'Prelude.Types.Left', V252} -> {'Prelude.Types.Left', V252}; {'Prelude.Types.Right', V253} -> {'Prelude.Types.Right', (V250(V253))} end end end end end), fun (V255) -> fun (V256) -> ((((V254('erased'))('erased'))(V255))(V256)) end end end(fun (V247) -> ('Idris.Idris2.Builtin':'un--snd'(V247)) end))))(V246)) end end, [{'Idris.Syntax.MkPatClause', V199, V201, V204, []} | V205], []))), fun (V266) -> begin (V267 = (V265(V266))), case V267 of {'Prelude.Types.Left', V268} -> {'Prelude.Types.Left', V268}; {'Prelude.Types.Right', V269} -> (begin (V271 = fun (V270) -> {'Prelude.Types.Right', {'TTImp.TTImp.ICase', V199, V239, V244, V269}} end), V271 end(V266)) end end end end), V272 end(V241)) end end end end), V273 end(V236)) end end end end end; _ -> begin (V274 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V203))), fun (V275) -> begin (V276 = (V274(V275))), case V276 of {'Prelude.Types.Left', V277} -> {'Prelude.Types.Left', V277}; {'Prelude.Types.Right', V278} -> (begin (V312 = begin (V279 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V202))), fun (V280) -> begin (V281 = (V279(V280))), case V281 of {'Prelude.Types.Left', V282} -> {'Prelude.Types.Left', V282}; {'Prelude.Types.Right', V283} -> (begin (V311 = begin (V304 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V284) -> begin (V285 = ('un--desugarClause'(V0, V2, V4, V3, V5, V7, 1, V284))), ((begin (V301 = fun (V296) -> fun (V297) -> fun (V298) -> fun (V299) -> fun (V300) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V298, V299, V300)) end end end end end), fun (V302) -> fun (V303) -> ((((V301('erased'))('erased'))(V302))(V303)) end end end((begin (V293 = fun (V287) -> fun (V288) -> fun (V289) -> fun (V290) -> case V290 of {'Prelude.Types.Left', V291} -> {'Prelude.Types.Left', V291}; {'Prelude.Types.Right', V292} -> {'Prelude.Types.Right', (V289(V292))} end end end end end), fun (V294) -> fun (V295) -> ((((V293('erased'))('erased'))(V294))(V295)) end end end(fun (V286) -> ('Idris.Idris2.Builtin':'un--snd'(V286)) end))))(V285)) end end, [{'Idris.Syntax.MkPatClause', V199, V201, V204, []} | V205], []))), fun (V305) -> begin (V306 = (V304(V305))), case V306 of {'Prelude.Types.Left', V307} -> {'Prelude.Types.Left', V307}; {'Prelude.Types.Right', V308} -> (begin (V310 = fun (V309) -> {'Prelude.Types.Right', {'TTImp.TTImp.ICase', V199, V278, V283, V308}} end), V310 end(V305)) end end end end), V311 end(V280)) end end end end), V312 end(V275)) end end end end end; {'Idris.Syntax.PCase', V313, V314, V315} -> begin (V316 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V314))), fun (V317) -> begin (V318 = (V316(V317))), case V318 of {'Prelude.Types.Left', V319} -> {'Prelude.Types.Left', V319}; {'Prelude.Types.Right', V320} -> (begin (V348 = begin (V341 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V321) -> begin (V322 = ('un--desugarClause'(V0, V2, V4, V3, V5, V7, 1, V321))), ((begin (V338 = fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V335, V336, V337)) end end end end end), fun (V339) -> fun (V340) -> ((((V338('erased'))('erased'))(V339))(V340)) end end end((begin (V330 = fun (V324) -> fun (V325) -> fun (V326) -> fun (V327) -> case V327 of {'Prelude.Types.Left', V328} -> {'Prelude.Types.Left', V328}; {'Prelude.Types.Right', V329} -> {'Prelude.Types.Right', (V326(V329))} end end end end end), fun (V331) -> fun (V332) -> ((((V330('erased'))('erased'))(V331))(V332)) end end end(fun (V323) -> ('Idris.Idris2.Builtin':'un--snd'(V323)) end))))(V322)) end end, V315, []))), fun (V342) -> begin (V343 = (V341(V342))), case V343 of {'Prelude.Types.Left', V344} -> {'Prelude.Types.Left', V344}; {'Prelude.Types.Right', V345} -> (begin (V347 = fun (V346) -> {'Prelude.Types.Right', {'TTImp.TTImp.ICase', V313, V320, {'TTImp.TTImp.Implicit', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V313)), 0}, V345}} end), V347 end(V342)) end end end end), V348 end(V317)) end end end end; {'Idris.Syntax.PLocal', V349, V350, V351} -> begin (V352 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Idris.Syntax':'un--definedIn'(V350)), V7))), begin (V354 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V353) -> ('un--desugarDecl'(V0, V2, V4, V3, V5, V352, V353)) end, V350, []))), fun (V355) -> begin (V356 = (V354(V355))), case V356 of {'Prelude.Types.Left', V357} -> {'Prelude.Types.Left', V357}; {'Prelude.Types.Right', V358} -> (begin (V369 = begin (V359 = ('un--desugar'(V0, V2, V3, V4, V5, V6, V352, V351))), fun (V360) -> begin (V361 = (V359(V360))), case V361 of {'Prelude.Types.Left', V362} -> {'Prelude.Types.Left', V362}; {'Prelude.Types.Right', V363} -> (begin (V368 = fun (V364) -> {'Prelude.Types.Right', {'TTImp.TTImp.ILocal', V349, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V365) -> fun (V366) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V365, V366)) end end, []}, fun (V367) -> V367 end, V358)), V363}} end), V368 end(V360)) end end end end), V369 end(V355)) end end end end end; {'Idris.Syntax.PApp', V370, V371, V372} -> case V371 of {'Idris.Syntax.PUpdate', V373, V374} -> begin (V376 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V375) -> ('un--desugarUpdate'(V0, V1, V2, V4, V3, V5, V6, V7, V375)) end, V374, []))), fun (V377) -> begin (V378 = (V376(V377))), case V378 of {'Prelude.Types.Left', V379} -> {'Prelude.Types.Left', V379}; {'Prelude.Types.Right', V380} -> (begin (V388 = begin (V381 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V372))), fun (V382) -> begin (V383 = (V381(V382))), case V383 of {'Prelude.Types.Left', V384} -> {'Prelude.Types.Left', V384}; {'Prelude.Types.Right', V385} -> (begin (V387 = fun (V386) -> {'Prelude.Types.Right', {'TTImp.TTImp.IUpdate', V370, V380, V385}} end), V387 end(V382)) end end end end), V388 end(V377)) end end end end; _ -> begin (V389 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V371))), fun (V390) -> begin (V391 = (V389(V390))), case V391 of {'Prelude.Types.Left', V392} -> {'Prelude.Types.Left', V392}; {'Prelude.Types.Right', V393} -> (begin (V401 = begin (V394 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V372))), fun (V395) -> begin (V396 = (V394(V395))), case V396 of {'Prelude.Types.Left', V397} -> {'Prelude.Types.Left', V397}; {'Prelude.Types.Right', V398} -> (begin (V400 = fun (V399) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V370, V393, V398}} end), V400 end(V395)) end end end end), V401 end(V390)) end end end end end; {'Idris.Syntax.PUpdate', V402, V403} -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, begin (V404 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V402))), {'Idris.Syntax.PLam', V404, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Idris.Syntax.PRef', V404, {'Core.Name.MN', <<"rec"/utf8>>, 0}}, {'Idris.Syntax.PImplicit', V404}, {'Idris.Syntax.PApp', V404, {'Idris.Syntax.PUpdate', V402, V403}, {'Idris.Syntax.PRef', V404, {'Core.Name.MN', <<"rec"/utf8>>, 0}}}} end)); {'Idris.Syntax.PAutoApp', V405, V406, V407} -> begin (V408 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V406))), fun (V409) -> begin (V410 = (V408(V409))), case V410 of {'Prelude.Types.Left', V411} -> {'Prelude.Types.Left', V411}; {'Prelude.Types.Right', V412} -> (begin (V420 = begin (V413 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V407))), fun (V414) -> begin (V415 = (V413(V414))), case V415 of {'Prelude.Types.Left', V416} -> {'Prelude.Types.Left', V416}; {'Prelude.Types.Right', V417} -> (begin (V419 = fun (V418) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAutoApp', V405, V412, V417}} end), V419 end(V414)) end end end end), V420 end(V409)) end end end end; {'Idris.Syntax.PWithApp', V421, V422, V423} -> begin (V424 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V422))), fun (V425) -> begin (V426 = (V424(V425))), case V426 of {'Prelude.Types.Left', V427} -> {'Prelude.Types.Left', V427}; {'Prelude.Types.Right', V428} -> (begin (V436 = begin (V429 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V423))), fun (V430) -> begin (V431 = (V429(V430))), case V431 of {'Prelude.Types.Left', V432} -> {'Prelude.Types.Left', V432}; {'Prelude.Types.Right', V433} -> (begin (V435 = fun (V434) -> {'Prelude.Types.Right', {'TTImp.TTImp.IWithApp', V421, V428, V433}} end), V435 end(V430)) end end end end), V436 end(V425)) end end end end; {'Idris.Syntax.PNamedApp', V437, V438, V439, V440} -> begin (V441 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V438))), fun (V442) -> begin (V443 = (V441(V442))), case V443 of {'Prelude.Types.Left', V444} -> {'Prelude.Types.Left', V444}; {'Prelude.Types.Right', V445} -> (begin (V453 = begin (V446 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V440))), fun (V447) -> begin (V448 = (V446(V447))), case V448 of {'Prelude.Types.Left', V449} -> {'Prelude.Types.Left', V449}; {'Prelude.Types.Right', V450} -> (begin (V452 = fun (V451) -> {'Prelude.Types.Right', {'TTImp.TTImp.INamedApp', V437, V445, V439, V450}} end), V452 end(V447)) end end end end), V453 end(V442)) end end end end; {'Idris.Syntax.PDelayed', V454, V455, V456} -> begin (V457 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V456))), fun (V458) -> begin (V459 = (V457(V458))), case V459 of {'Prelude.Types.Left', V460} -> {'Prelude.Types.Left', V460}; {'Prelude.Types.Right', V461} -> (begin (V463 = fun (V462) -> {'Prelude.Types.Right', {'TTImp.TTImp.IDelayed', V454, V455, V461}} end), V463 end(V458)) end end end end; {'Idris.Syntax.PDelay', V464, V465} -> begin (V466 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V465))), fun (V467) -> begin (V468 = (V466(V467))), case V468 of {'Prelude.Types.Left', V469} -> {'Prelude.Types.Left', V469}; {'Prelude.Types.Right', V470} -> (begin (V472 = fun (V471) -> {'Prelude.Types.Right', {'TTImp.TTImp.IDelay', V464, V470}} end), V472 end(V467)) end end end end; {'Idris.Syntax.PForce', V473, V474} -> begin (V475 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V474))), fun (V476) -> begin (V477 = (V475(V476))), case V477 of {'Prelude.Types.Left', V478} -> {'Prelude.Types.Left', V478}; {'Prelude.Types.Right', V479} -> (begin (V481 = fun (V480) -> {'Prelude.Types.Right', {'TTImp.TTImp.IForce', V473, V479}} end), V481 end(V476)) end end end end; {'Idris.Syntax.PEq', V482, V483, V484} -> begin (V485 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V483))), fun (V486) -> begin (V487 = (V485(V486))), case V487 of {'Prelude.Types.Left', V488} -> {'Prelude.Types.Left', V488}; {'Prelude.Types.Right', V489} -> (begin (V497 = begin (V490 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V484))), fun (V491) -> begin (V492 = (V490(V491))), case V492 of {'Prelude.Types.Left', V493} -> {'Prelude.Types.Left', V493}; {'Prelude.Types.Right', V494} -> (begin (V496 = fun (V495) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAlternative', V482, {'TTImp.TTImp.FirstSuccess'}, [('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V482, {'Core.Name.UN', {'Core.Name.Basic', <<"==="/utf8>>}}}, [V489 | [V494 | []]])) | [('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V482, {'Core.Name.UN', {'Core.Name.Basic', <<"~=~"/utf8>>}}}, [V489 | [V494 | []]])) | []]]}} end), V496 end(V491)) end end end end), V497 end(V486)) end end end end; {'Idris.Syntax.PBracketed', V498, V499} -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V499)); {'Idris.Syntax.POp', V500, V501, V502, V503, V504} -> begin (V505 = ('un--toTokList'(V0, {'Idris.Syntax.POp', V500, V501, V502, V503, V504}))), fun (V506) -> begin (V507 = (V505(V506))), case V507 of {'Prelude.Types.Left', V508} -> {'Prelude.Types.Left', V508}; {'Prelude.Types.Right', V509} -> (begin (V519 = begin (V513 = ('Idris.Idris2.Libraries.Utils.Shunting':'un--parseOps'({'Prelude.Show.MkShow', fun (V510) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V510)) end, fun (V511) -> fun (V512) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V511, V512)) end end}, V509))), fun (V514) -> begin (V515 = (V513(V514))), case V515 of {'Prelude.Types.Left', V516} -> {'Prelude.Types.Left', V516}; {'Prelude.Types.Right', V517} -> (begin (V518 = ('un--desugarTree'(V0, V1, V2, V4, V3, V5, V6, V7, V517))), V518 end(V514)) end end end end), V519 end(V506)) end end end end; {'Idris.Syntax.PPrefixOp', V520, V521, V522, V523} -> begin (V524 = ('un--toTokList'(V0, {'Idris.Syntax.PPrefixOp', V520, V521, V522, V523}))), fun (V525) -> begin (V526 = (V524(V525))), case V526 of {'Prelude.Types.Left', V527} -> {'Prelude.Types.Left', V527}; {'Prelude.Types.Right', V528} -> (begin (V538 = begin (V532 = ('Idris.Idris2.Libraries.Utils.Shunting':'un--parseOps'({'Prelude.Show.MkShow', fun (V529) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V529)) end, fun (V530) -> fun (V531) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V530, V531)) end end}, V528))), fun (V533) -> begin (V534 = (V532(V533))), case V534 of {'Prelude.Types.Left', V535} -> {'Prelude.Types.Left', V535}; {'Prelude.Types.Right', V536} -> (begin (V537 = ('un--desugarTree'(V0, V1, V2, V4, V3, V5, V6, V7, V536))), V537 end(V533)) end end end end), V538 end(V525)) end end end end; {'Idris.Syntax.PSectionL', V539, V540, V541, V542} -> begin (V548 = begin (V543 = V0), fun (V544) -> begin (V547 = (begin (V545 = V543), fun (V546) -> ('erlang':'get'(V545)) end end(V544))), {'Prelude.Types.Right', V547} end end end), fun (V549) -> begin (V550 = (V548(V549))), case V550 of {'Prelude.Types.Left', V551} -> {'Prelude.Types.Left', V551}; {'Prelude.Types.Right', V552} -> (begin (V567 = case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(('Idris.Idris2.Core.Name':'un--nameRoot'(V541)), case V552 of {'Idris.Syntax.MkSyntax', V553, V554, V555, V556, V557, V558, V559, V560, V561, V562, V563, V564, V565} -> V554 end)) of {'Prelude.Types.Nothing'} -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Syntax.PLam', V539, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Idris.Syntax.PRef', V539, {'Core.Name.MN', <<"arg"/utf8>>, 0}}, {'Idris.Syntax.PImplicit', V539}, {'Idris.Syntax.POp', V539, V540, V541, {'Idris.Syntax.PRef', V539, {'Core.Name.MN', <<"arg"/utf8>>, 0}}, V542}})); {'Prelude.Types.Just', V566} -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Syntax.PPrefixOp', V539, V540, V541, V542})) end), V567 end(V549)) end end end end; {'Idris.Syntax.PSectionR', V568, V569, V570, V571} -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Syntax.PLam', V568, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Idris.Syntax.PRef', V568, {'Core.Name.MN', <<"arg"/utf8>>, 0}}, {'Idris.Syntax.PImplicit', V568}, {'Idris.Syntax.POp', V568, V569, V571, V570, {'Idris.Syntax.PRef', V568, {'Core.Name.MN', <<"arg"/utf8>>, 0}}}})); {'Idris.Syntax.PSearch', V572, V573} -> fun (V574) -> {'Prelude.Types.Right', {'TTImp.TTImp.ISearch', V572, V573}} end; {'Idris.Syntax.PPrimVal', V575, V576} -> case V576 of {'Core.TT.BI', V577} -> begin (V578 = ('Idris.Idris2.Core.Context':'un--fromIntegerName'(V2))), fun (V579) -> begin (V580 = (V578(V579))), case V580 of {'Prelude.Types.Left', V581} -> {'Prelude.Types.Left', V581}; {'Prelude.Types.Right', V582} -> (begin (V588 = case V582 of {'Prelude.Types.Nothing'} -> fun (V583) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAlternative', V575, {'TTImp.TTImp.UniqueDefault', {'TTImp.TTImp.IPrimVal', V575, {'Core.TT.BI', V577}}}, [{'TTImp.TTImp.IPrimVal', V575, {'Core.TT.BI', V577}} | [{'TTImp.TTImp.IPrimVal', V575, {'Core.TT.I', begin (V584 = V577), case ((V584 band 9223372036854775808) =/= 0) of 'true' -> (V584 bor -9223372036854775808); _ -> (V584 band 9223372036854775807) end end}} | []]]}} end; {'Prelude.Types.Just', V585} -> begin (V586 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V575))), fun (V587) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V586, {'TTImp.TTImp.IVar', V586, V585}, {'TTImp.TTImp.IPrimVal', V575, {'Core.TT.BI', V577}}}} end end end), V588 end(V579)) end end end end; {'Core.TT.Ch', V589} -> begin (V590 = ('Idris.Idris2.Core.Context':'un--fromCharName'(V2))), fun (V591) -> begin (V592 = (V590(V591))), case V592 of {'Prelude.Types.Left', V593} -> {'Prelude.Types.Left', V593}; {'Prelude.Types.Right', V594} -> (begin (V599 = case V594 of {'Prelude.Types.Nothing'} -> fun (V595) -> {'Prelude.Types.Right', {'TTImp.TTImp.IPrimVal', V575, {'Core.TT.Ch', V589}}} end; {'Prelude.Types.Just', V596} -> begin (V597 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V575))), fun (V598) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V597, {'TTImp.TTImp.IVar', V597, V596}, {'TTImp.TTImp.IPrimVal', V575, {'Core.TT.Ch', V589}}}} end end end), V599 end(V591)) end end end end; {'Core.TT.Db', V600} -> begin (V601 = ('Idris.Idris2.Core.Context':'un--fromDoubleName'(V2))), fun (V602) -> begin (V603 = (V601(V602))), case V603 of {'Prelude.Types.Left', V604} -> {'Prelude.Types.Left', V604}; {'Prelude.Types.Right', V605} -> (begin (V610 = case V605 of {'Prelude.Types.Nothing'} -> fun (V606) -> {'Prelude.Types.Right', {'TTImp.TTImp.IPrimVal', V575, {'Core.TT.Db', V600}}} end; {'Prelude.Types.Just', V607} -> begin (V608 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V575))), fun (V609) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V608, {'TTImp.TTImp.IVar', V608, V607}, {'TTImp.TTImp.IPrimVal', V575, {'Core.TT.Db', V600}}}} end end end), V610 end(V602)) end end end end; _ -> fun (V611) -> {'Prelude.Types.Right', {'TTImp.TTImp.IPrimVal', V575, V576}} end end; {'Idris.Syntax.PQuote', V612, V613} -> begin (V614 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V613))), fun (V615) -> begin (V616 = (V614(V615))), case V616 of {'Prelude.Types.Left', V617} -> {'Prelude.Types.Left', V617}; {'Prelude.Types.Right', V618} -> (begin (V620 = fun (V619) -> {'Prelude.Types.Right', {'TTImp.TTImp.IQuote', V612, V618}} end), V620 end(V615)) end end end end; {'Idris.Syntax.PQuoteName', V621, V622} -> fun (V623) -> {'Prelude.Types.Right', {'TTImp.TTImp.IQuoteName', V621, V622}} end; {'Idris.Syntax.PQuoteDecl', V624, V625} -> begin (V627 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V626) -> ('un--desugarDecl'(V0, V2, V4, V3, V5, V7, V626)) end, V625, []))), fun (V628) -> begin (V629 = (V627(V628))), case V629 of {'Prelude.Types.Left', V630} -> {'Prelude.Types.Left', V630}; {'Prelude.Types.Right', V631} -> (begin (V636 = fun (V632) -> {'Prelude.Types.Right', {'TTImp.TTImp.IQuoteDecl', V624, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V633) -> fun (V634) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V633, V634)) end end, []}, fun (V635) -> V635 end, V631))}} end), V636 end(V628)) end end end end; {'Idris.Syntax.PUnquote', V637, V638} -> begin (V639 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V638))), fun (V640) -> begin (V641 = (V639(V640))), case V641 of {'Prelude.Types.Left', V642} -> {'Prelude.Types.Left', V642}; {'Prelude.Types.Right', V643} -> (begin (V645 = fun (V644) -> {'Prelude.Types.Right', {'TTImp.TTImp.IUnquote', V637, V643}} end), V645 end(V640)) end end end end; {'Idris.Syntax.PRunElab', V646, V647} -> begin (V648 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V647))), fun (V649) -> begin (V650 = (V648(V649))), case V650 of {'Prelude.Types.Left', V651} -> {'Prelude.Types.Left', V651}; {'Prelude.Types.Right', V652} -> (begin (V654 = fun (V653) -> {'Prelude.Types.Right', {'TTImp.TTImp.IRunElab', V646, V652}} end), V654 end(V649)) end end end end; {'Idris.Syntax.PHole', V655, V656, V657} -> begin (V688 = case V656 of 1 -> begin (V663 = begin (V658 = V0), fun (V659) -> begin (V662 = (begin (V660 = V658), fun (V661) -> ('erlang':'get'(V660)) end end(V659))), {'Prelude.Types.Right', V662} end end end), fun (V664) -> begin (V665 = (V663(V664))), case V665 of {'Prelude.Types.Left', V666} -> {'Prelude.Types.Left', V666}; {'Prelude.Types.Right', V667} -> (begin (V686 = begin (V668 = V0), fun (V669) -> begin (V685 = (begin (V670 = V668), fun (V671) -> ('erlang':'put'(V670, case V667 of {'Idris.Syntax.MkSyntax', V672, V673, V674, V675, V676, V677, V678, V679, V680, V681, V682, V683, V684} -> {'Idris.Syntax.MkSyntax', V672, V673, V674, V675, V676, V677, V678, V679, V680, [{'Core.Name.UN', {'Core.Name.Basic', V657}} | V681], V682, V683, V684} end)) end end(V669))), {'Prelude.Types.Right', V685} end end end), V686 end(V664)) end end end end; 0 -> fun (V687) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V689) -> begin (V690 = (V688(V689))), case V690 of {'Prelude.Types.Left', V691} -> {'Prelude.Types.Left', V691}; {'Prelude.Types.Right', V692} -> (begin (V694 = fun (V693) -> {'Prelude.Types.Right', {'TTImp.TTImp.IHole', V655, V657}} end), V694 end(V689)) end end end end; {'Idris.Syntax.PType', V695} -> fun (V696) -> {'Prelude.Types.Right', {'TTImp.TTImp.IType', V695}} end; {'Idris.Syntax.PAs', V697, V698, V699, V700} -> begin (V701 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V700))), fun (V702) -> begin (V703 = (V701(V702))), case V703 of {'Prelude.Types.Left', V704} -> {'Prelude.Types.Left', V704}; {'Prelude.Types.Right', V705} -> (begin (V707 = fun (V706) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAs', V697, V698, 1, V699, V705}} end), V707 end(V702)) end end end end; {'Idris.Syntax.PDotted', V708, V709} -> begin (V710 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V709))), fun (V711) -> begin (V712 = (V710(V711))), case V712 of {'Prelude.Types.Left', V713} -> {'Prelude.Types.Left', V713}; {'Prelude.Types.Right', V714} -> (begin (V716 = fun (V715) -> {'Prelude.Types.Right', {'TTImp.TTImp.IMustUnify', V708, 4, V714}} end), V716 end(V711)) end end end end; {'Idris.Syntax.PImplicit', V717} -> fun (V718) -> {'Prelude.Types.Right', {'TTImp.TTImp.Implicit', V717, 1}} end; {'Idris.Syntax.PInfer', V719} -> begin (V721 = fun (V720) -> case ('dn--un--==_Eq_Side'(V6, 0)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V719, <<"? is not a valid pattern"/utf8>>}, V720)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V722) -> begin (V723 = (V721(V722))), case V723 of {'Prelude.Types.Left', V724} -> {'Prelude.Types.Left', V724}; {'Prelude.Types.Right', V725} -> (begin (V727 = fun (V726) -> {'Prelude.Types.Right', {'TTImp.TTImp.Implicit', V719, 0}} end), V727 end(V722)) end end end end; {'Idris.Syntax.PMultiline', V728, V729, V730} -> begin (V731 = ('un--trimMultiline'(V728, V729, V730))), fun (V732) -> begin (V733 = (V731(V732))), case V733 of {'Prelude.Types.Left', V734} -> {'Prelude.Types.Left', V734}; {'Prelude.Types.Right', V735} -> (begin (V742 = begin (V736 = ('un--expandString'(V0, V1, V2, V3, V4, V5, V6, V7, V728, V735))), fun (V737) -> begin (V738 = (V736(V737))), case V738 of {'Prelude.Types.Left', V739} -> {'Prelude.Types.Left', V739}; {'Prelude.Types.Right', V740} -> (begin (V741 = ('un--addFromString'(V2, V728, V740))), V741 end(V737)) end end end end), V742 end(V732)) end end end end; {'Idris.Syntax.PString', V743, V744} -> case V744 of [] -> ('un--addFromString'(V2, V743, {'TTImp.TTImp.IPrimVal', V743, {'Core.TT.Str', <<""/utf8>>}})); [E0 | E1] -> (fun (V745, V746) -> case V745 of {'Idris.Syntax.StrLiteral', V747, V748} -> case V746 of [] -> ('un--addFromString'(V2, V743, {'TTImp.TTImp.IPrimVal', V747, {'Core.TT.Str', V748}})); _ -> ('un--expandString'(V0, V1, V2, V3, V4, V5, V6, V7, V743, V744)) end; _ -> ('un--expandString'(V0, V1, V2, V3, V4, V5, V6, V7, V743, V744)) end end(E0, E1)); _ -> ('un--expandString'(V0, V1, V2, V3, V4, V5, V6, V7, V743, V744)) end; {'Idris.Syntax.PDoBlock', V749, V750, V751} -> ('un--expandDo'(V0, V2, V4, V3, V5, V6, V7, V749, V750, V751)); {'Idris.Syntax.PBang', V752, V753} -> begin (V754 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V753))), fun (V755) -> begin (V756 = (V754(V755))), case V756 of {'Prelude.Types.Left', V757} -> {'Prelude.Types.Left', V757}; {'Prelude.Types.Right', V758} -> (begin (V790 = begin (V764 = begin (V759 = V1), fun (V760) -> begin (V763 = (begin (V761 = V759), fun (V762) -> ('erlang':'get'(V761)) end end(V760))), {'Prelude.Types.Right', V763} end end end), fun (V765) -> begin (V766 = (V764(V765))), case V766 of {'Prelude.Types.Left', V767} -> {'Prelude.Types.Left', V767}; {'Prelude.Types.Right', V768} -> (begin (V789 = begin (V772 = {'Core.Name.MN', <<"bind"/utf8>>, case V768 of {'Idris.Desugar.MkBangData', V769, V770, V771} -> V769 end}), begin (V782 = begin (V773 = V1), fun (V774) -> begin (V781 = (begin (V775 = V773), fun (V776) -> ('erlang':'put'(V775, case V768 of {'Idris.Desugar.MkBangData', V777, V778, V779} -> {'Idris.Desugar.MkBangData', begin (V780 = (V777 + 1)), case ((V780 band 9223372036854775808) =/= 0) of 'true' -> (V780 bor -9223372036854775808); _ -> (V780 band 9223372036854775807) end end, [{'Builtin.MkPair', V772, {'Builtin.MkPair', V752, V758}} | V778], V779} end)) end end(V774))), {'Prelude.Types.Right', V781} end end end), fun (V783) -> begin (V784 = (V782(V783))), case V784 of {'Prelude.Types.Left', V785} -> {'Prelude.Types.Left', V785}; {'Prelude.Types.Right', V786} -> (begin (V788 = fun (V787) -> {'Prelude.Types.Right', {'TTImp.TTImp.IVar', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V752)), V772}} end), V788 end(V783)) end end end end end), V789 end(V765)) end end end end), V790 end(V755)) end end end end; {'Idris.Syntax.PIdiom', V791, V792, V793} -> begin (V794 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V793))), fun (V795) -> begin (V796 = (V794(V795))), case V796 of {'Prelude.Types.Left', V797} -> {'Prelude.Types.Left', V797}; {'Prelude.Types.Right', V798} -> (begin (V827 = begin (V799 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V2, <<"desugar.idiom"/utf8>>, 10, fun () -> <<"Desugaring idiom for"/utf8>> end, V798))), fun (V800) -> begin (V801 = (V799(V800))), case V801 of {'Prelude.Types.Left', V802} -> {'Prelude.Types.Left', V802}; {'Prelude.Types.Right', V803} -> (begin (V826 = begin (V809 = begin (V804 = V1), fun (V805) -> begin (V808 = (begin (V806 = V804), fun (V807) -> ('erlang':'get'(V806)) end end(V805))), {'Prelude.Types.Right', V808} end end end), fun (V810) -> begin (V811 = (V809(V810))), case V811 of {'Prelude.Types.Left', V812} -> {'Prelude.Types.Left', V812}; {'Prelude.Types.Right', V813} -> (begin (V825 = begin (V817 = ('un--idiomise'(V791, case V813 of {'Idris.Desugar.MkBangData', V814, V815, V816} -> V816 end, V792, V798))), begin (V818 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V2, <<"desugar.idiom"/utf8>>, 10, fun () -> <<"Desugared to"/utf8>> end, V817))), fun (V819) -> begin (V820 = (V818(V819))), case V820 of {'Prelude.Types.Left', V821} -> {'Prelude.Types.Left', V821}; {'Prelude.Types.Right', V822} -> (begin (V824 = fun (V823) -> {'Prelude.Types.Right', V817} end), V824 end(V819)) end end end end end), V825 end(V810)) end end end end), V826 end(V800)) end end end end), V827 end(V795)) end end end end; {'Idris.Syntax.PList', V828, V829, V830} -> ('un--expandList'(V0, V1, V2, V4, V3, V5, V6, V7, V829, V830)); {'Idris.Syntax.PSnocList', V831, V832, V833} -> ('un--expandSnocList'(V0, V1, V2, V4, V3, V5, V6, V7, V832, V833)); {'Idris.Syntax.PPair', V834, V835, V836} -> begin (V837 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V835))), fun (V838) -> begin (V839 = (V837(V838))), case V839 of {'Prelude.Types.Left', V840} -> {'Prelude.Types.Left', V840}; {'Prelude.Types.Right', V841} -> (begin (V850 = begin (V842 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V836))), fun (V843) -> begin (V844 = (V842(V843))), case V844 of {'Prelude.Types.Left', V845} -> {'Prelude.Types.Left', V845}; {'Prelude.Types.Right', V846} -> (begin (V849 = begin (V847 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V834, ('Idris.Idris2.Idris.Syntax.Builtin':'un--mkpairname'())}, [V841 | [V846 | []]]))), fun (V848) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAlternative', V834, {'TTImp.TTImp.UniqueDefault', V847}, [('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V834, ('Idris.Idris2.Idris.Syntax.Builtin':'un--pairname'())}, [V841 | [V846 | []]])) | [V847 | []]]}} end end), V849 end(V843)) end end end end), V850 end(V838)) end end end end; {'Idris.Syntax.PDPair', V851, V852, V853, V854, V855} -> case V853 of {'Idris.Syntax.PRef', V856, V857} -> case V857 of {'Core.Name.UN', V858} -> case V854 of {'Idris.Syntax.PImplicit', V859} -> begin (V860 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V855))), fun (V861) -> begin (V862 = (V860(V861))), case V862 of {'Prelude.Types.Left', V863} -> {'Prelude.Types.Left', V863}; {'Prelude.Types.Right', V864} -> (begin (V876 = begin (V865 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V852, ('Idris.Idris2.Idris.Syntax.Builtin':'un--mkdpairname'())}, [{'TTImp.TTImp.IVar', V856, V857} | [V864 | []]]))), begin (V866 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V856))), begin (V869 = case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V856)) of {'Prelude.Types.Just', V867} -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDefault'(V3, {'Builtin.MkPair', V867, {'Builtin.MkPair', 5, {'Prelude.Types.Just', V857}}})); {'Prelude.Types.Nothing'} -> fun (V868) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V870) -> begin (V871 = (V869(V870))), case V871 of {'Prelude.Types.Left', V872} -> {'Prelude.Types.Left', V872}; {'Prelude.Types.Right', V873} -> (begin (V875 = fun (V874) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAlternative', V851, {'TTImp.TTImp.UniqueDefault', V865}, [('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V852, ('Idris.Idris2.Idris.Syntax.Builtin':'un--dpairname'())}, [{'TTImp.TTImp.Implicit', V866, 0} | [{'TTImp.TTImp.ILam', V856, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Prelude.Types.Just', V857}, {'TTImp.TTImp.Implicit', V866, 0}, V864} | []]])) | [V865 | []]]}} end), V875 end(V870)) end end end end end end), V876 end(V861)) end end end end; _ -> begin (V877 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V854))), fun (V878) -> begin (V879 = (V877(V878))), case V879 of {'Prelude.Types.Left', V880} -> {'Prelude.Types.Left', V880}; {'Prelude.Types.Right', V881} -> (begin (V889 = begin (V882 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V855))), fun (V883) -> begin (V884 = (V882(V883))), case V884 of {'Prelude.Types.Left', V885} -> {'Prelude.Types.Left', V885}; {'Prelude.Types.Right', V886} -> (begin (V888 = fun (V887) -> {'Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V852, ('Idris.Idris2.Idris.Syntax.Builtin':'un--dpairname'())}, [V881 | [{'TTImp.TTImp.ILam', V856, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Prelude.Types.Just', V857}, V881, V886} | []]]))} end), V888 end(V883)) end end end end), V889 end(V878)) end end end end end; _ -> case V854 of {'Idris.Syntax.PImplicit', V890} -> begin (V891 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V853))), fun (V892) -> begin (V893 = (V891(V892))), case V893 of {'Prelude.Types.Left', V894} -> {'Prelude.Types.Left', V894}; {'Prelude.Types.Right', V895} -> (begin (V903 = begin (V896 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V855))), fun (V897) -> begin (V898 = (V896(V897))), case V898 of {'Prelude.Types.Left', V899} -> {'Prelude.Types.Left', V899}; {'Prelude.Types.Right', V900} -> (begin (V902 = fun (V901) -> {'Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V852, ('Idris.Idris2.Idris.Syntax.Builtin':'un--mkdpairname'())}, [V895 | [V900 | []]]))} end), V902 end(V897)) end end end end), V903 end(V892)) end end end end; _ -> fun (V904) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V851, <<"Invalid dependent pair type"/utf8>>}, V904)) end end end; _ -> case V854 of {'Idris.Syntax.PImplicit', V905} -> begin (V906 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V853))), fun (V907) -> begin (V908 = (V906(V907))), case V908 of {'Prelude.Types.Left', V909} -> {'Prelude.Types.Left', V909}; {'Prelude.Types.Right', V910} -> (begin (V918 = begin (V911 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V855))), fun (V912) -> begin (V913 = (V911(V912))), case V913 of {'Prelude.Types.Left', V914} -> {'Prelude.Types.Left', V914}; {'Prelude.Types.Right', V915} -> (begin (V917 = fun (V916) -> {'Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V852, ('Idris.Idris2.Idris.Syntax.Builtin':'un--mkdpairname'())}, [V910 | [V915 | []]]))} end), V917 end(V912)) end end end end), V918 end(V907)) end end end end; _ -> fun (V919) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V851, <<"Invalid dependent pair type"/utf8>>}, V919)) end end end; {'Idris.Syntax.PUnit', V920} -> fun (V921) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAlternative', V920, {'TTImp.TTImp.UniqueDefault', {'TTImp.TTImp.IVar', V920, {'Core.Name.UN', {'Core.Name.Basic', <<"MkUnit"/utf8>>}}}}, [{'TTImp.TTImp.IVar', V920, {'Core.Name.UN', {'Core.Name.Basic', <<"Unit"/utf8>>}}} | [{'TTImp.TTImp.IVar', V920, {'Core.Name.UN', {'Core.Name.Basic', <<"MkUnit"/utf8>>}}} | []]]}} end; {'Idris.Syntax.PIfThenElse', V922, V923, V924, V925} -> begin (V926 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V922))), begin (V927 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V923))), fun (V928) -> begin (V929 = (V927(V928))), case V929 of {'Prelude.Types.Left', V930} -> {'Prelude.Types.Left', V930}; {'Prelude.Types.Right', V931} -> (begin (V945 = begin (V932 = ('un--desugar'(V0, V2, V3, V4, V5, V6, V7, V924))), fun (V933) -> begin (V934 = (V932(V933))), case V934 of {'Prelude.Types.Left', V935} -> {'Prelude.Types.Left', V935}; {'Prelude.Types.Right', V936} -> (begin (V944 = begin (V937 = ('un--desugar'(V0, V2, V3, V4, V5, V6, V7, V925))), fun (V938) -> begin (V939 = (V937(V938))), case V939 of {'Prelude.Types.Left', V940} -> {'Prelude.Types.Left', V940}; {'Prelude.Types.Right', V941} -> (begin (V943 = fun (V942) -> {'Prelude.Types.Right', {'TTImp.TTImp.ICase', V926, V931, {'TTImp.TTImp.IVar', V926, {'Core.Name.UN', {'Core.Name.Basic', <<"Bool"/utf8>>}}}, [{'TTImp.TTImp.PatClause', V926, {'TTImp.TTImp.IVar', V926, {'Core.Name.UN', {'Core.Name.Basic', <<"True"/utf8>>}}}, V936} | [{'TTImp.TTImp.PatClause', V926, {'TTImp.TTImp.IVar', V926, {'Core.Name.UN', {'Core.Name.Basic', <<"False"/utf8>>}}}, V941} | []]]}} end), V943 end(V938)) end end end end), V944 end(V933)) end end end end), V945 end(V928)) end end end end end; {'Idris.Syntax.PComprehension', V946, V947, V948} -> begin (V954 = begin (V949 = V1), fun (V950) -> begin (V953 = (begin (V951 = V949), fun (V952) -> ('erlang':'get'(V951)) end end(V950))), {'Prelude.Types.Right', V953} end end end), fun (V955) -> begin (V956 = (V954(V955))), case V956 of {'Prelude.Types.Left', V957} -> {'Prelude.Types.Left', V957}; {'Prelude.Types.Right', V958} -> (begin (V971 = begin (V962 = case V958 of {'Idris.Desugar.MkBangData', V959, V960, V961} -> V961 end), ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Syntax.PDoBlock', V946, V962, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V968 = fun (V964) -> fun (V965) -> fun (V966) -> fun (V967) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V966, V967)) end end end end), fun (V969) -> fun (V970) -> ((((V968('erased'))('erased'))(V969))(V970)) end end end(fun (V963) -> ('nested--14239-11359--in--un--guard'(V948, V947, V946, V7, V6, V5, V4, V3, V2, V1, V0, V962, V963)) end))(V948)), [('nested--14239-11360--in--un--toPure'(V948, V947, V946, V7, V6, V5, V4, V3, V2, V1, V0, V962, V947)) | []]))})) end), V971 end(V955)) end end end end; {'Idris.Syntax.PRewrite', V972, V973, V974} -> begin (V975 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V973))), fun (V976) -> begin (V977 = (V975(V976))), case V977 of {'Prelude.Types.Left', V978} -> {'Prelude.Types.Left', V978}; {'Prelude.Types.Right', V979} -> (begin (V987 = begin (V980 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V974))), fun (V981) -> begin (V982 = (V980(V981))), case V982 of {'Prelude.Types.Left', V983} -> {'Prelude.Types.Left', V983}; {'Prelude.Types.Right', V984} -> (begin (V986 = fun (V985) -> {'Prelude.Types.Right', {'TTImp.TTImp.IRewrite', V972, V979, V984}} end), V986 end(V981)) end end end end), V987 end(V976)) end end end end; {'Idris.Syntax.PRange', V988, V989, V990, V991} -> begin (V992 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V988))), ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, case V990 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Idris.Syntax':'un--papply'(V992, {'Idris.Syntax.PRef', V992, {'Core.Name.UN', {'Core.Name.Basic', (begin (V994 = fun (V993) -> V993 end), fun (V995) -> (V994(V995)) end end(<<"rangeFromTo"/utf8>>))}}}, [V989 | [V991 | []]])); {'Prelude.Types.Just', V996} -> ('Idris.Idris2.Idris.Syntax':'un--papply'(V992, {'Idris.Syntax.PRef', V992, {'Core.Name.UN', {'Core.Name.Basic', (begin (V998 = fun (V997) -> V997 end), fun (V999) -> (V998(V999)) end end(<<"rangeFromThenTo"/utf8>>))}}}, [V989 | [V996 | [V991 | []]]])) end)) end; {'Idris.Syntax.PRangeStream', V1000, V1001, V1002} -> begin (V1003 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V1000))), ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, case V1002 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Idris.Syntax':'un--papply'(V1003, {'Idris.Syntax.PRef', V1003, {'Core.Name.UN', {'Core.Name.Basic', <<"rangeFrom"/utf8>>}}}, [V1001 | []])); {'Prelude.Types.Just', V1004} -> ('Idris.Idris2.Idris.Syntax':'un--papply'(V1003, {'Idris.Syntax.PRef', V1003, {'Core.Name.UN', {'Core.Name.Basic', (begin (V1006 = fun (V1005) -> V1005 end), fun (V1007) -> (V1006(V1007)) end end(<<"rangeFromThen"/utf8>>))}}}, [V1001 | [V1004 | []]])) end)) end; {'Idris.Syntax.PUnifyLog', V1008, V1009, V1010} -> begin (V1011 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V1010))), fun (V1012) -> begin (V1013 = (V1011(V1012))), case V1013 of {'Prelude.Types.Left', V1014} -> {'Prelude.Types.Left', V1014}; {'Prelude.Types.Right', V1015} -> (begin (V1017 = fun (V1016) -> {'Prelude.Types.Right', {'TTImp.TTImp.IUnifyLog', V1008, V1009, V1015}} end), V1017 end(V1012)) end end end end; {'Idris.Syntax.PPostfixApp', V1018, V1019, V1020} -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V1021) -> fun (V1022) -> case V1022 of {'Builtin.MkPair', V1023, V1024} -> {'Idris.Syntax.PApp', V1023, {'Idris.Syntax.PRef', V1023, V1024}, V1021} end end end, V1019, V1020)))); {'Idris.Syntax.PPostfixAppPartial', V1025, V1026} -> begin (V1027 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V1025))), begin (V1028 = {'Idris.Syntax.PRef', V1027, {'Core.Name.MN', <<"paRoot"/utf8>>, 0}}), ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Syntax.PLam', V1025, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V1028, {'Idris.Syntax.PImplicit', V1027}, ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V1029) -> fun (V1030) -> case V1030 of {'Builtin.MkPair', V1031, V1032} -> {'Idris.Syntax.PApp', V1031, {'Idris.Syntax.PRef', V1031, V1032}, V1029} end end end, V1028, V1026))})) end end; {'Idris.Syntax.PWithUnambigNames', V1033, V1034, V1035} -> begin (V1036 = ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7, V1035))), ((begin (V1052 = fun (V1047) -> fun (V1048) -> fun (V1049) -> fun (V1050) -> fun (V1051) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1049, V1050, V1051)) end end end end end), fun (V1053) -> fun (V1054) -> ((((V1052('erased'))('erased'))(V1053))(V1054)) end end end((begin (V1044 = fun (V1038) -> fun (V1039) -> fun (V1040) -> fun (V1041) -> case V1041 of {'Prelude.Types.Left', V1042} -> {'Prelude.Types.Left', V1042}; {'Prelude.Types.Right', V1043} -> {'Prelude.Types.Right', (V1040(V1043))} end end end end end), fun (V1045) -> fun (V1046) -> ((((V1044('erased'))('erased'))(V1045))(V1046)) end end end(fun (V1037) -> {'TTImp.TTImp.IWithUnambigNames', V1033, V1034, V1037} end))))(V1036)) end end.
'un--desugar'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('un--desugarDo'(V0, V1, V2, V3, V4, V5, V6, {'Prelude.Types.Nothing'}, V7)).
'un--bindFun'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V0))), {'TTImp.TTImp.IApp', V4, {'TTImp.TTImp.IApp', V4, {'TTImp.TTImp.IVar', V4, ('un--addNS'(V1, {'Core.Name.UN', {'Core.Name.Basic', <<">>="/utf8>>}}))}, V2}, V3} end.
'un--bindBangs'(V0, V1, V2) -> case V0 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> ('un--bindBangs'(V4, V1, ('un--bindFun'(V7, V1, V8, {'TTImp.TTImp.ILam', {'Core.FC.EmptyFC'}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Prelude.Types.Just', V5}, {'TTImp.TTImp.Implicit', V7, 0}, V2})))) end end end(E0, E1)) end.
'un--addNS'(V0, V1) -> case V0 of {'Prelude.Types.Just', V2} -> case V1 of {'Core.Name.NS', V3, V4} -> V1; _ -> {'Core.Name.NS', V2, V1} end; _ -> V1 end.
'un--addFromString'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--fromStringName'(V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V11 = fun (V8) -> {'Prelude.Types.Right', case V7 of {'Prelude.Types.Nothing'} -> V2; {'Prelude.Types.Just', V9} -> begin (V10 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V1))), {'TTImp.TTImp.IApp', V10, {'TTImp.TTImp.IVar', V10, V9}, V2} end end} end), V11 end(V4)) end end end end.
