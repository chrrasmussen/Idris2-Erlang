-module('Idris.Idris2.Compiler.VMCode').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8529-3631--in--un--toVMConstAlt'/7,
  'nested--8529-3577--in--un--toVMConAlt'/7,
  'nested--8791-3769--in--un--findVarAlt'/4,
  'nested--8791-3815--in--un--findConstVarAlt'/4,
  'nested--8980-3880--in--un--declareAll'/4,
  'dn--un--show_Show_VMInst'/1,
  'dn--un--show_Show_VMDef'/1,
  'dn--un--show_Show_Reg'/1,
  'dn--un--showPrec_Show_VMInst'/2,
  'dn--un--showPrec_Show_VMDef'/2,
  'dn--un--showPrec_Show_Reg'/2,
  'dn--un--__Impl_Show_VMInst'/0,
  'dn--un--__Impl_Show_VMDef'/0,
  'dn--un--__Impl_Show_Reg'/0,
  'un--toVMDef'/1,
  'un--toVM'/3,
  'un--toReg'/1,
  'un--projectArgs'/4,
  'un--findVars'/1,
  'un--declareVars'/2,
  'un--collectUsed'/1,
  'un--collectReg'/1,
  'un--allDefs'/1
]).
'nested--8529-3631--in--un--toVMConstAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Compiler.ANF.MkAConstAlt', V7, V8} -> {'Builtin.MkPair', V7, ('un--toVM'(V5, V4, V8))} end.
'nested--8529-3577--in--un--toVMConAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Compiler.ANF.MkAConAlt', V7, V8, V9, V10, V11} -> begin (V12 = ('un--toVM'(V5, V4, V11))), begin (V20 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V13) -> fun (V14) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V15) -> fun (V16) -> {'Builtin.MkUnit'} end end, V13, V14)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V17) -> fun (V18) -> {'Builtin.MkUnit'} end end))}, fun (V19) -> ('un--collectUsed'(V19)) end, V12))), {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Prelude.Types.Right', V7} end, fun () -> fun (V21) -> {'Prelude.Types.Left', V21} end end, V9)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--projectArgs'(V0, 0, V20, V10)), V12))} end end end.
'nested--8791-3769--in--un--findVarAlt'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V7)) end end, []}, fun (V8) -> ('un--findVars'(V8)) end, V5)) end.
'nested--8791-3815--in--un--findConstVarAlt'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V7)) end end, []}, fun (V8) -> ('un--findVars'(V8)) end, V5)) end.
'nested--8980-3880--in--un--declareAll'(V0, V1, V2, V3) -> case V3 of [] -> [{'Compiler.VMCode.START'} | V0]; [E0 | E1] -> (fun (V4, V5) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V21, V22, V23, V24)) end end end end end end end, fun (V25) -> fun (V26) -> V26 end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V29, V30, V31)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V34, V35)) end end}, V4, V2)) of 1 -> ('nested--8980-3880--in--un--declareAll'(V0, V1, V2, V5)); 0 -> [{'Compiler.VMCode.DECLARE', {'Compiler.VMCode.Loc', V4}} | ('nested--8980-3880--in--un--declareAll'(V0, V1, [V4 | V2], V5))] end end(E0, E1)) end.
'dn--un--show_Show_VMInst'(V0) -> case V0 of {'Compiler.VMCode.DECLARE', V1} -> <<<<"DECLARE "/utf8>>/binary, ('dn--un--show_Show_Reg'(V1))/binary>>; {'Compiler.VMCode.START'} -> <<"START"/utf8>>; {'Compiler.VMCode.ASSIGN', V2, V3} -> <<('dn--un--show_Show_Reg'(V2))/binary, <<<<" := "/utf8>>/binary, ('dn--un--show_Show_Reg'(V3))/binary>>/binary>>; {'Compiler.VMCode.MKCON', V4, V5, V6} -> <<('dn--un--show_Show_Reg'(V4))/binary, <<<<" := MKCON "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_((Either $a) $b)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V8, V9)) end end}, {'Prelude.Show.MkShow', fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V11, V12)) end end}}, V5))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('dn--un--show_Show_Reg'(V13)) end))(V6))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.VMCode.MKCLOSURE', V21, V22, V23, V24} -> <<('dn--un--show_Show_Reg'(V21))/binary, <<<<" := MKCLOSURE "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V23))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V30 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V28, V29)) end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V25) -> ('dn--un--show_Show_Reg'(V25)) end))(V24))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.VMCode.MKCONSTANT', V33, V34} -> <<('dn--un--show_Show_Reg'(V33))/binary, <<<<" := MKCONSTANT "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V34))/binary>>/binary>>; {'Compiler.VMCode.APPLY', V35, V36, V37} -> <<('dn--un--show_Show_Reg'(V35))/binary, <<<<" := "/utf8>>/binary, <<('dn--un--show_Show_Reg'(V36))/binary, <<<<" @ "/utf8>>/binary, ('dn--un--show_Show_Reg'(V37))/binary>>/binary>>/binary>>/binary>>; {'Compiler.VMCode.CALL', V38, V39, V40, V41} -> <<('dn--un--show_Show_Reg'(V38))/binary, <<<<" := "/utf8>>/binary, <<case V39 of 1 -> <<"TAILCALL "/utf8>>; 0 -> <<"CALL "/utf8>> end/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V40))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V47 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V45, V46)) end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V42) -> ('dn--un--show_Show_Reg'(V42)) end))(V41))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.VMCode.OP', V50, V51, V52} -> <<('dn--un--show_Show_Reg'(V50))/binary, <<<<" := "/utf8>>/binary, <<<<"OP "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V51))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V58 = fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V56, V57)) end end end end), fun (V59) -> fun (V60) -> ((((V58('erased'))('erased'))(V59))(V60)) end end end(fun (V53) -> ('dn--un--show_Show_Reg'(V53)) end))(('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V52))))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.VMCode.EXTPRIM', V61, V62, V63} -> <<('dn--un--show_Show_Reg'(V61))/binary, <<<<" := "/utf8>>/binary, <<<<"EXTPRIM "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V62))/binary, <<<<"("/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V69 = fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V67, V68)) end end end end), fun (V70) -> fun (V71) -> ((((V69('erased'))('erased'))(V70))(V71)) end end end(fun (V64) -> ('dn--un--show_Show_Reg'(V64)) end))(V63))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.VMCode.CASE', V72, V73, V74} -> <<<<"CASE "/utf8>>/binary, <<('dn--un--show_Show_Reg'(V72))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V75) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V76) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_((Either $a) $b)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V77) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V78, V79)) end end}, {'Prelude.Show.MkShow', fun (V80) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V81, V82)) end end}}, V76)) end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_((Either $a) $b)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V85) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V86, V87)) end end}, {'Prelude.Show.MkShow', fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V89, V90)) end end}}, V83, V84)) end end}, {'Prelude.Show.MkShow', fun (V91) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V92) -> ('dn--un--show_Show_VMInst'(V92)) end, fun (V93) -> fun (V94) -> ('dn--un--showPrec_Show_VMInst'(V93, V94)) end end}, V91)) end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V97) -> ('dn--un--show_Show_VMInst'(V97)) end, fun (V98) -> fun (V99) -> ('dn--un--showPrec_Show_VMInst'(V98, V99)) end end}, V95, V96)) end end}}, V75)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V102) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_((Either $a) $b)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V103) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V103)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V104, V105)) end end}, {'Prelude.Show.MkShow', fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V106)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V107, V108)) end end}}, V102)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_((Either $a) $b)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V111) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V111)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V112, V113)) end end}, {'Prelude.Show.MkShow', fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V114)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V115, V116)) end end}}, V109, V110)) end end}, {'Prelude.Show.MkShow', fun (V117) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V118) -> ('dn--un--show_Show_VMInst'(V118)) end, fun (V119) -> fun (V120) -> ('dn--un--showPrec_Show_VMInst'(V119, V120)) end end}, V117)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V123) -> ('dn--un--show_Show_VMInst'(V123)) end, fun (V124) -> fun (V125) -> ('dn--un--showPrec_Show_VMInst'(V124, V125)) end end}, V121, V122)) end end}}, V100, V101)) end end}, V73))/binary, <<<<" {default: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V126) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V127) -> ('dn--un--show_Show_VMInst'(V127)) end, fun (V128) -> fun (V129) -> ('dn--un--showPrec_Show_VMInst'(V128, V129)) end end}, V126)) end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V132) -> ('dn--un--show_Show_VMInst'(V132)) end, fun (V133) -> fun (V134) -> ('dn--un--showPrec_Show_VMInst'(V133, V134)) end end}, V130, V131)) end end}, V74))/binary, <<"}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.VMCode.CONSTCASE', V135, V136, V137} -> <<<<"CASE "/utf8>>/binary, <<('dn--un--show_Show_Reg'(V135))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V138) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V139) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V139)) end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V140, V141)) end end}, {'Prelude.Show.MkShow', fun (V142) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V143) -> ('dn--un--show_Show_VMInst'(V143)) end, fun (V144) -> fun (V145) -> ('dn--un--showPrec_Show_VMInst'(V144, V145)) end end}, V142)) end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V148) -> ('dn--un--show_Show_VMInst'(V148)) end, fun (V149) -> fun (V150) -> ('dn--un--showPrec_Show_VMInst'(V149, V150)) end end}, V146, V147)) end end}}, V138)) end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V153) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V153)) end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V154, V155)) end end}, {'Prelude.Show.MkShow', fun (V156) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V157) -> ('dn--un--show_Show_VMInst'(V157)) end, fun (V158) -> fun (V159) -> ('dn--un--showPrec_Show_VMInst'(V158, V159)) end end}, V156)) end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V162) -> ('dn--un--show_Show_VMInst'(V162)) end, fun (V163) -> fun (V164) -> ('dn--un--showPrec_Show_VMInst'(V163, V164)) end end}, V160, V161)) end end}}, V151, V152)) end end}, V136))/binary, <<<<" {default: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V165) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V166) -> ('dn--un--show_Show_VMInst'(V166)) end, fun (V167) -> fun (V168) -> ('dn--un--showPrec_Show_VMInst'(V167, V168)) end end}, V165)) end, fun (V169) -> fun (V170) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V171) -> ('dn--un--show_Show_VMInst'(V171)) end, fun (V172) -> fun (V173) -> ('dn--un--showPrec_Show_VMInst'(V172, V173)) end end}, V169, V170)) end end}, V137))/binary, <<"}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.VMCode.PROJECT', V174, V175, V176} -> <<('dn--un--show_Show_Reg'(V174))/binary, <<<<" := PROJECT("/utf8>>/binary, <<('dn--un--show_Show_Reg'(V175))/binary, <<<<", "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V176))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.VMCode.NULL', V177} -> <<('dn--un--show_Show_Reg'(V177))/binary, <<" := NULL"/utf8>>/binary>>; {'Compiler.VMCode.ERROR', V178} -> <<<<"ERROR "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V178))/binary>> end.
'dn--un--show_Show_VMDef'(V0) -> case V0 of {'Compiler.VMCode.MkVMFun', V1, V2} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V4, V5)) end end}, V1))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V6) -> ('dn--un--show_Show_VMInst'(V6)) end, fun (V7) -> fun (V8) -> ('dn--un--showPrec_Show_VMInst'(V7, V8)) end end}, V2))/binary>>/binary>>; {'Compiler.VMCode.MkVMForeign', V9, V10, V11} -> <<<<"Foreign call "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V13, V14)) end end}, V9))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_CFType'(V16, V17)) end end}, V10))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V11))/binary>>/binary>>/binary>>/binary>>/binary>>; {'Compiler.VMCode.MkVMError', V18} -> <<<<"Error: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V19) -> ('dn--un--show_Show_VMInst'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--showPrec_Show_VMInst'(V20, V21)) end end}, V18))/binary>> end.
'dn--un--show_Show_Reg'(V0) -> case V0 of {'Compiler.VMCode.RVal'} -> <<"RVAL"/utf8>>; {'Compiler.VMCode.Loc', V1} -> <<<<"v"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1))/binary>>; {'Compiler.VMCode.Discard'} -> <<"DISCARD"/utf8>> end.
'dn--un--showPrec_Show_VMInst'(V0, V1) -> ('dn--un--show_Show_VMInst'(V1)).
'dn--un--showPrec_Show_VMDef'(V0, V1) -> ('dn--un--show_Show_VMDef'(V1)).
'dn--un--showPrec_Show_Reg'(V0, V1) -> ('dn--un--show_Show_Reg'(V1)).
'dn--un--__Impl_Show_VMInst'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_VMInst'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_VMInst'(V1, V2)) end end}.
'dn--un--__Impl_Show_VMDef'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_VMDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_VMDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_Reg'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Reg'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Reg'(V1, V2)) end end}.
'un--toVMDef'(V0) -> case V0 of {'Compiler.ANF.MkAFun', V1, V2} -> {'Prelude.Types.Just', {'Compiler.VMCode.MkVMFun', V1, ('un--declareVars'(V1, ('un--toVM'(1, {'Compiler.VMCode.RVal'}, V2))))}}; {'Compiler.ANF.MkAForeign', V3, V4, V5} -> {'Prelude.Types.Just', {'Compiler.VMCode.MkVMForeign', V3, V4, V5}}; {'Compiler.ANF.MkAError', V6} -> {'Prelude.Types.Just', {'Compiler.VMCode.MkVMError', ('un--declareVars'([], ('un--toVM'(1, {'Compiler.VMCode.RVal'}, V6))))}}; _ -> {'Prelude.Types.Nothing'} end.
'un--toVM'(V0, V1, V2) -> case V1 of {'Compiler.VMCode.Discard'} -> []; _ -> case V2 of {'Compiler.ANF.AV', V3, V4} -> case V4 of {'Compiler.ANF.ALocal', V5} -> [{'Compiler.VMCode.ASSIGN', V1, {'Compiler.VMCode.Loc', V5}} | []]; _ -> [{'Compiler.VMCode.NULL', V1} | []] end; {'Compiler.ANF.AAppName', V6, V7, V8, V9} -> [{'Compiler.VMCode.CALL', V1, V0, V8, ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('un--toReg'(V10)) end))(V9))} | []]; {'Compiler.ANF.AUnderApp', V18, V19, V20, V21} -> [{'Compiler.VMCode.MKCLOSURE', V1, V19, V20, ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> ('un--toReg'(V22)) end))(V21))} | []]; {'Compiler.ANF.AApp', V30, V31, V32, V33} -> [{'Compiler.VMCode.APPLY', V1, ('un--toReg'(V32)), ('un--toReg'(V33))} | []]; {'Compiler.ANF.ALet', V34, V35, V36, V37} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--toVM'(0, {'Compiler.VMCode.Loc', V35}, V36)), ('un--toVM'(V0, V1, V37)))); {'Compiler.ANF.ACon', V38, V39, V40, V41, V42} -> case V41 of {'Prelude.Types.Just', V43} -> [{'Compiler.VMCode.MKCON', V1, {'Prelude.Types.Left', V43}, ((begin (V49 = fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V47, V48)) end end end end), fun (V50) -> fun (V51) -> ((((V49('erased'))('erased'))(V50))(V51)) end end end(fun (V44) -> ('un--toReg'(V44)) end))(V42))} | []]; {'Prelude.Types.Nothing'} -> [{'Compiler.VMCode.MKCON', V1, {'Prelude.Types.Right', V39}, ((begin (V57 = fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V55, V56)) end end end end), fun (V58) -> fun (V59) -> ((((V57('erased'))('erased'))(V58))(V59)) end end end(fun (V52) -> ('un--toReg'(V52)) end))(V42))} | []]; _ -> [{'Compiler.VMCode.NULL', V1} | []] end; {'Compiler.ANF.AOp', V60, V61, V62, V63} -> [{'Compiler.VMCode.OP', V1, V62, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V64) -> ('un--toReg'(V64)) end, V63))} | []]; {'Compiler.ANF.AExtPrim', V65, V66, V67, V68} -> [{'Compiler.VMCode.EXTPRIM', V1, V67, ((begin (V74 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V72, V73)) end end end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V69) -> ('un--toReg'(V69)) end))(V68))} | []]; {'Compiler.ANF.AConCase', V77, V78, V79, V80} -> case V78 of {'Compiler.ANF.ALocal', V81} -> case V79 of [E0 | E1] -> (fun (V82, V83) -> case V82 of {'Compiler.ANF.MkAConAlt', V84, V85, V86, V87, V88} -> case V83 of [] -> case V80 of {'Prelude.Types.Nothing'} -> begin (V89 = ('un--toVM'(V0, V1, V88))), begin (V97 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V90) -> fun (V91) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V92) -> fun (V93) -> {'Builtin.MkUnit'} end end, V90, V91)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V94) -> fun (V95) -> {'Builtin.MkUnit'} end end))}, fun (V96) -> ('un--collectUsed'(V96)) end, V89))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--projectArgs'(V81, 0, V97, V87)), V89)) end end; _ -> [{'Compiler.VMCode.CASE', {'Compiler.VMCode.Loc', V81}, ((begin (V103 = fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V101, V102)) end end end end), fun (V104) -> fun (V105) -> ((((V103('erased'))('erased'))(V104))(V105)) end end end(fun (V98) -> ('nested--8529-3577--in--un--toVMConAlt'(V81, V80, V79, V77, V1, V0, V98)) end))(V79)), ((begin (V111 = fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V109, V110)) end end end end), fun (V112) -> fun (V113) -> ((((V111('erased'))('erased'))(V112))(V113)) end end end(fun (V106) -> ('un--toVM'(V0, V1, V106)) end))(V80))} | []] end; _ -> [{'Compiler.VMCode.CASE', {'Compiler.VMCode.Loc', V81}, ((begin (V119 = fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V117, V118)) end end end end), fun (V120) -> fun (V121) -> ((((V119('erased'))('erased'))(V120))(V121)) end end end(fun (V114) -> ('nested--8529-3577--in--un--toVMConAlt'(V81, V80, V79, V77, V1, V0, V114)) end))(V79)), ((begin (V127 = fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V125, V126)) end end end end), fun (V128) -> fun (V129) -> ((((V127('erased'))('erased'))(V128))(V129)) end end end(fun (V122) -> ('un--toVM'(V0, V1, V122)) end))(V80))} | []] end; _ -> [{'Compiler.VMCode.CASE', {'Compiler.VMCode.Loc', V81}, ((begin (V135 = fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V133, V134)) end end end end), fun (V136) -> fun (V137) -> ((((V135('erased'))('erased'))(V136))(V137)) end end end(fun (V130) -> ('nested--8529-3577--in--un--toVMConAlt'(V81, V80, V79, V77, V1, V0, V130)) end))(V79)), ((begin (V143 = fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V141, V142)) end end end end), fun (V144) -> fun (V145) -> ((((V143('erased'))('erased'))(V144))(V145)) end end end(fun (V138) -> ('un--toVM'(V0, V1, V138)) end))(V80))} | []] end end(E0, E1)); _ -> [{'Compiler.VMCode.CASE', {'Compiler.VMCode.Loc', V81}, ((begin (V151 = fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V149, V150)) end end end end), fun (V152) -> fun (V153) -> ((((V151('erased'))('erased'))(V152))(V153)) end end end(fun (V146) -> ('nested--8529-3577--in--un--toVMConAlt'(V81, V80, V79, V77, V1, V0, V146)) end))(V79)), ((begin (V159 = fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V157, V158)) end end end end), fun (V160) -> fun (V161) -> ((((V159('erased'))('erased'))(V160))(V161)) end end end(fun (V154) -> ('un--toVM'(V0, V1, V154)) end))(V80))} | []] end; _ -> [{'Compiler.VMCode.NULL', V1} | []] end; {'Compiler.ANF.AConstCase', V162, V163, V164, V165} -> case V163 of {'Compiler.ANF.ALocal', V166} -> [{'Compiler.VMCode.CONSTCASE', {'Compiler.VMCode.Loc', V166}, ((begin (V172 = fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V170, V171)) end end end end), fun (V173) -> fun (V174) -> ((((V172('erased'))('erased'))(V173))(V174)) end end end(fun (V167) -> ('nested--8529-3631--in--un--toVMConstAlt'(V166, V165, V164, V162, V1, V0, V167)) end))(V164)), ((begin (V180 = fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V178, V179)) end end end end), fun (V181) -> fun (V182) -> ((((V180('erased'))('erased'))(V181))(V182)) end end end(fun (V175) -> ('un--toVM'(V0, V1, V175)) end))(V165))} | []]; _ -> [{'Compiler.VMCode.NULL', V1} | []] end; {'Compiler.ANF.APrimVal', V183, V184} -> [{'Compiler.VMCode.MKCONSTANT', V1, V184} | []]; {'Compiler.ANF.AErased', V185} -> [{'Compiler.VMCode.NULL', V1} | []]; {'Compiler.ANF.ACrash', V186, V187} -> [{'Compiler.VMCode.ERROR', V187} | []]; _ -> [{'Compiler.VMCode.NULL', V1} | []] end end.
'un--toReg'(V0) -> case V0 of {'Compiler.ANF.ALocal', V1} -> {'Compiler.VMCode.Loc', V1}; {'Compiler.ANF.ANull'} -> {'Compiler.VMCode.Discard'} end.
'un--projectArgs'(V0, V1, V2, V3) -> case V3 of [] -> []; [E0 | E1] -> (fun (V4, V5) -> case ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V4, V2)) of {'Prelude.Types.Just', V6} -> [{'Compiler.VMCode.PROJECT', {'Compiler.VMCode.Loc', V4}, {'Compiler.VMCode.Loc', V0}, V1} | ('un--projectArgs'(V0, begin (V7 = (V1 + 1)), case ((V7 band 9223372036854775808) =/= 0) of 'true' -> (V7 bor -9223372036854775808); _ -> (V7 band 9223372036854775807) end end, V2, V5))]; {'Prelude.Types.Nothing'} -> ('un--projectArgs'(V0, begin (V8 = (V1 + 1)), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end, V2, V5)) end end(E0, E1)) end.
'un--findVars'(V0) -> case V0 of {'Compiler.VMCode.ASSIGN', V1, V2} -> case V1 of {'Compiler.VMCode.Loc', V3} -> [V3 | []]; _ -> [] end; {'Compiler.VMCode.MKCON', V4, V5, V6} -> case V4 of {'Compiler.VMCode.Loc', V7} -> [V7 | []]; _ -> [] end; {'Compiler.VMCode.MKCLOSURE', V8, V9, V10, V11} -> case V8 of {'Compiler.VMCode.Loc', V12} -> [V12 | []]; _ -> [] end; {'Compiler.VMCode.MKCONSTANT', V13, V14} -> case V13 of {'Compiler.VMCode.Loc', V15} -> [V15 | []]; _ -> [] end; {'Compiler.VMCode.APPLY', V16, V17, V18} -> case V16 of {'Compiler.VMCode.Loc', V19} -> [V19 | []]; _ -> [] end; {'Compiler.VMCode.CALL', V20, V21, V22, V23} -> case V20 of {'Compiler.VMCode.Loc', V24} -> [V24 | []]; _ -> [] end; {'Compiler.VMCode.OP', V25, V26, V27} -> case V25 of {'Compiler.VMCode.Loc', V28} -> [V28 | []]; _ -> [] end; {'Compiler.VMCode.EXTPRIM', V29, V30, V31} -> case V29 of {'Compiler.VMCode.Loc', V32} -> [V32 | []]; _ -> [] end; {'Compiler.VMCode.CASE', V33, V34, V35} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V36, V37)) end end, []}, fun (V38) -> ('nested--8791-3769--in--un--findVarAlt'(V33, V35, V34, V38)) end, V34)), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ((begin (V47 = fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V45, V46)) end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V40, V41)) end end, []}, fun (V42) -> ('un--findVars'(V42)) end, V39)) end))(V35)))))); {'Compiler.VMCode.CONSTCASE', V50, V51, V52} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V53, V54)) end end, []}, fun (V55) -> ('nested--8791-3815--in--un--findConstVarAlt'(V50, V52, V51, V55)) end, V51)), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ((begin (V64 = fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V62, V63)) end end end end), fun (V65) -> fun (V66) -> ((((V64('erased'))('erased'))(V65))(V66)) end end end(fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V57, V58)) end end, []}, fun (V59) -> ('un--findVars'(V59)) end, V56)) end))(V52)))))); {'Compiler.VMCode.PROJECT', V67, V68, V69} -> case V67 of {'Compiler.VMCode.Loc', V70} -> [V70 | []]; _ -> [] end; _ -> [] end.
'un--declareVars'(V0, V1) -> begin (V5 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V2, V3)) end end, []}, fun (V4) -> ('un--findVars'(V4)) end, V1))), ('nested--8980-3880--in--un--declareAll'(V1, V0, V0, V5)) end.
'un--collectUsed'(V0) -> case V0 of {'Compiler.VMCode.DECLARE', V1} -> ('un--collectReg'(V1)); {'Compiler.VMCode.START'} -> ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()); {'Compiler.VMCode.ASSIGN', V2, V3} -> ('un--collectReg'(V3)); {'Compiler.VMCode.MKCON', V4, V5, V6} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V9) -> fun (V10) -> {'Builtin.MkUnit'} end end, V7, V8)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V11) -> fun (V12) -> {'Builtin.MkUnit'} end end))}, fun (V13) -> ('un--collectReg'(V13)) end, V6)); {'Compiler.VMCode.MKCLOSURE', V14, V15, V16, V17} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V18) -> fun (V19) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V20) -> fun (V21) -> {'Builtin.MkUnit'} end end, V18, V19)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V22) -> fun (V23) -> {'Builtin.MkUnit'} end end))}, fun (V24) -> ('un--collectReg'(V24)) end, V17)); {'Compiler.VMCode.MKCONSTANT', V25, V26} -> ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()); {'Compiler.VMCode.APPLY', V27, V28, V29} -> ((begin (V34 = fun (V30) -> fun (V31) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V32) -> fun (V33) -> {'Builtin.MkUnit'} end end, V30, V31)) end end), fun (V35) -> fun (V36) -> ((V34(V35))(V36)) end end end(('un--collectReg'(V28))))(('un--collectReg'(V29)))); {'Compiler.VMCode.CALL', V37, V38, V39, V40} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V41) -> fun (V42) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V43) -> fun (V44) -> {'Builtin.MkUnit'} end end, V41, V42)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V45) -> fun (V46) -> {'Builtin.MkUnit'} end end))}, fun (V47) -> ('un--collectReg'(V47)) end, V40)); {'Compiler.VMCode.OP', V48, V49, V50} -> ('Idris.Idris2.Data.Vect':'dn--un--foldMap_Foldable_(Vect $n)'({'Prelude.Interfaces.MkMonoid', fun (V51) -> fun (V52) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V53) -> fun (V54) -> {'Builtin.MkUnit'} end end, V51, V52)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V55) -> fun (V56) -> {'Builtin.MkUnit'} end end))}, fun (V57) -> ('un--collectReg'(V57)) end, V50)); {'Compiler.VMCode.EXTPRIM', V58, V59, V60} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V61) -> fun (V62) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V63) -> fun (V64) -> {'Builtin.MkUnit'} end end, V61, V62)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V65) -> fun (V66) -> {'Builtin.MkUnit'} end end))}, fun (V67) -> ('un--collectReg'(V67)) end, V60)); {'Compiler.VMCode.CASE', V68, V69, V70} -> ((begin (V104 = fun (V100) -> fun (V101) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V102) -> fun (V103) -> {'Builtin.MkUnit'} end end, V100, V101)) end end), fun (V105) -> fun (V106) -> ((V104(V105))(V106)) end end end(((begin (V97 = fun (V93) -> fun (V94) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V95) -> fun (V96) -> {'Builtin.MkUnit'} end end, V93, V94)) end end), fun (V98) -> fun (V99) -> ((V97(V98))(V99)) end end end(('un--collectReg'(V68))))(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V79) -> fun (V80) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V81) -> fun (V82) -> {'Builtin.MkUnit'} end end, V79, V80)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V83) -> fun (V84) -> {'Builtin.MkUnit'} end end))}, fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V86) -> fun (V87) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V88) -> fun (V89) -> {'Builtin.MkUnit'} end end, V86, V87)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V90) -> fun (V91) -> {'Builtin.MkUnit'} end end))}, fun (V92) -> ('un--collectUsed'(V92)) end, ('Idris.Idris2.Builtin':'un--snd'(V85)))) end, V69))))))(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()) end, fun () -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V72) -> fun (V73) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V74) -> fun (V75) -> {'Builtin.MkUnit'} end end, V72, V73)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V76) -> fun (V77) -> {'Builtin.MkUnit'} end end))}, fun (V78) -> ('un--collectUsed'(V78)) end, V71)) end end, V70)))); {'Compiler.VMCode.CONSTCASE', V107, V108, V109} -> ((begin (V143 = fun (V139) -> fun (V140) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V141) -> fun (V142) -> {'Builtin.MkUnit'} end end, V139, V140)) end end), fun (V144) -> fun (V145) -> ((V143(V144))(V145)) end end end(((begin (V136 = fun (V132) -> fun (V133) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V134) -> fun (V135) -> {'Builtin.MkUnit'} end end, V132, V133)) end end), fun (V137) -> fun (V138) -> ((V136(V137))(V138)) end end end(('un--collectReg'(V107))))(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V118) -> fun (V119) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V120) -> fun (V121) -> {'Builtin.MkUnit'} end end, V118, V119)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V122) -> fun (V123) -> {'Builtin.MkUnit'} end end))}, fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V125) -> fun (V126) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V127) -> fun (V128) -> {'Builtin.MkUnit'} end end, V125, V126)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V129) -> fun (V130) -> {'Builtin.MkUnit'} end end))}, fun (V131) -> ('un--collectUsed'(V131)) end, ('Idris.Idris2.Builtin':'un--snd'(V124)))) end, V108))))))(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()) end, fun () -> fun (V110) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V111) -> fun (V112) -> ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--<+>_Semigroup_(IntMap $v)'(fun (V113) -> fun (V114) -> {'Builtin.MkUnit'} end end, V111, V112)) end end, ('Idris.Idris2.Libraries.Data.IntMap':'dn--un--neutral_Monoid_(IntMap $v)'(fun (V115) -> fun (V116) -> {'Builtin.MkUnit'} end end))}, fun (V117) -> ('un--collectUsed'(V117)) end, V110)) end end, V109)))); {'Compiler.VMCode.PROJECT', V146, V147, V148} -> ('un--collectReg'(V147)); {'Compiler.VMCode.NULL', V149} -> ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()); {'Compiler.VMCode.ERROR', V150} -> ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()) end.
'un--collectReg'(V0) -> case V0 of {'Compiler.VMCode.Loc', V1} -> ('Idris.Idris2.Libraries.Data.IntMap':'un--singleton'(V1, {'Builtin.MkUnit'})); _ -> ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()) end.
'un--allDefs'(V0) -> ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--toVMDef'(V3)), fun (V4) -> {'Prelude.Types.Just', {'Builtin.MkPair', V2, V4}} end)) end end, V0)).
