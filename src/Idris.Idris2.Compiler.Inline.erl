-module('Idris.Idris2.Compiler.Inline').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in mergeLamDef-7518'/6,
  'case--case block in updateCallGraph-7298'/6,
  'case--mergeLambdas-6734'/5,
  'case--case block in case block in eval-4201'/15,
  'case--eval-3951'/10,
  'nested--9647-4994--in--un--updateLoc'/15,
  'nested--9647-4995--in--un--update'/15,
  'nested--12439-6276--in--un--traverseArgs'/8,
  'nested--14555-7864--in--un--transform'/3,
  'nested--14555-7865--in--un--nonErased'/2,
  'nested--9773-5556--in--un--matches'/24,
  'nested--12439-6461--in--un--fixArityConstAlt'/8,
  'nested--12439-6399--in--un--fixArityAlt'/8,
  'un--usedConst'/3,
  'un--usedCon'/3,
  'un--used'/3,
  'un--updateCallGraph'/2,
  'un--unloadApp'/3,
  'un--unload'/2,
  'un--tryApply'/8,
  'un--takeFromStack'/3,
  'un--refToLocal'/3,
  'un--pickConstAlt'/10,
  'un--pickAlt'/10,
  'un--mkBounds'/1,
  'un--mergeLambdas'/2,
  'un--mergeLamDef'/2,
  'un--mergeLam'/3,
  'un--largest'/3,
  'un--inlineDef'/2,
  'un--inline'/3,
  'un--getRefs'/1,
  'un--getNewArgs'/2,
  'un--getLams'/4,
  'un--getArity'/1,
  'un--genName'/2,
  'un--fixArityTm'/4,
  'un--fixArityExp'/3,
  'un--fixArityDef'/2,
  'un--fixArity'/2,
  'un--extendLoc'/4,
  'un--extend'/4,
  'un--evalLocal'/9,
  'un--evalConstAlt'/8,
  'un--evalAlt'/9,
  'un--eval'/8,
  'un--doEval'/4,
  'un--compileAndInlineAll'/1,
  'un--addRefsConstAlts'/2,
  'un--addRefsConAlts'/2,
  'un--addRefsArgs'/2,
  'un--addRefs'/2,
  'un--addArityHash'/2
]).
'case--case block in mergeLamDef-7518'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.Context.Context.PMDef', V6, V7, V8, V9, V10} -> begin (V11 = ('Idris.Idris2.Core.Context':'un--getSession'(V1))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V77 = case case ('Idris.Idris2.Data.List':'un--isNil'(case V15 of {'Core.Options.MkSessionOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V39 end)) of 1 -> 0; 0 -> case V6 of {'Core.Context.Context.MkPMDefInfo', V42, V43, V44} -> V44 end end of 1 -> fun (V45) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> case V3 of {'Core.Context.Context.MkGlobalDef', V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} -> case V64 of {'Prelude.Types.Just', V68} -> begin (V70 = fun (V69) -> ('un--mergeLam'(V1, V68, V69)) end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V75 = ('Idris.Idris2.Core.Context':'un--setCompiled'(V1, V0, V74))), V75 end(V71)) end end end end; {'Prelude.Types.Nothing'} -> fun (V76) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end end), V77 end(V12)) end end end end; _ -> fun (V78) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'case--case block in updateCallGraph-7298'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Prelude.Types.Just', V6} -> begin (V7 = ('un--getRefs'(V6))), begin (V30 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V0, case V3 of {'Core.Context.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> {'Core.Context.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, {'Prelude.Types.Just', V7}, V22, V23, V24, V25, V26, V27, V28, V29} end))), ((begin (V46 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V43, V44, V45)) end end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end((begin (V38 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> {'Prelude.Types.Right', (V34(V37))} end end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V31) -> {'Builtin.MkUnit'} end))))(V30)) end end; {'Prelude.Types.Nothing'} -> fun (V49) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'case--mergeLambdas-6734'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.DPair.MkDPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> begin (V9 = ('Idris.Idris2.Core.CompileExpr':'un--substs'(V5, V1, V7, V8))), begin (V10 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--getNewArgs'(V5, V7))))), begin (V11 = ('Idris.Idris2.Core.CompileExpr':'un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V1)), ('un--mkBounds'(V10)), V9))), {'Builtin.DPair.MkDPair', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V10, [])))), V11} end end end end end.
'case--case block in case block in eval-4201'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Prelude.Types.Just', V15} -> begin (V16 = ('un--getArity'(V15))), begin (V39 = case V12 of {'Core.Context.Context.MkGlobalDef', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} -> V28 end), case case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V51)) end end, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V55, V56, V57, V58)) end end end end end end end, fun (V59) -> fun (V60) -> V60 end end, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V63, V64, V65)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V66, V67)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V68, V69)) end end}, {'Core.Context.Context.Inline'}, V39)) of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V72, V73, V74)) end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V77, V78, V79)) end end end end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V81)) end end, fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V85, V86, V87, V88)) end end end end end end end, fun (V89) -> fun (V90) -> V90 end end, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V93, V94, V95)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V96, V97)) end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V98, V99)) end end}, V2, V6)) of 1 -> 0; 0 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V102, V103, V104)) end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V107, V108, V109)) end end end end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V111)) end end, fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V115, V116, V117, V118)) end end end end end end end, fun (V119) -> fun (V120) -> V120 end end, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V123, V124, V125)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V128, V129)) end end}, {'Core.Context.Context.NoInline'}, V39)) of 1 -> 0; 0 -> 1 end end; 0 -> 0 end of 1 -> begin (V130 = ('un--tryApply'(V0, V1, V8, V7, [V2 | V6], V4, V5, V15))), fun (V131) -> begin (V132 = (V130(V131))), case V132 of {'Prelude.Types.Left', V133} -> {'Prelude.Types.Left', V133}; {'Prelude.Types.Right', V134} -> (begin (V136 = fun (V135) -> {'Prelude.Types.Right', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('un--unloadApp'(V16, V4, {'Core.CompileExpr.CRef', V3, V2})) end, V134))} end), V136 end(V131)) end end end end; 0 -> fun (V137) -> {'Prelude.Types.Right', ('un--unloadApp'(V16, V4, {'Core.CompileExpr.CRef', V3, V2}))} end end end end; {'Prelude.Types.Nothing'} -> fun (V138) -> {'Prelude.Types.Right', ('un--unload'(V4, {'Core.CompileExpr.CRef', V3, V2}))} end end.
'case--eval-3951'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V10 of 1 -> case V11 of [E0 | E1] -> (fun (V12, V13) -> case V13 of [E2 | E3] -> (fun (V14, V15) -> case V15 of [E4 | E5] -> (fun (V16, V17) -> begin (V18 = ('un--genName'(V7, <<"act"/utf8>>))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V30 = begin (V23 = ('un--eval'([], V1, V8, V7, V6, {'Compiler.Inline.Nil'}, [], {'Core.CompileExpr.CApp', V3, V14, [{'Core.CompileExpr.CRef', V3, V22} | [V16 | []]]}))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V29 = fun (V28) -> {'Prelude.Types.Right', ('un--unload'(V17, {'Core.CompileExpr.CLet', V3, V22, 1, {'Core.CompileExpr.CApp', V3, V12, [V16 | []]}, ('un--refToLocal'(V22, V22, V27))}))} end), V29 end(V24)) end end end end), V30 end(V19)) end end end end end(E4, E5)); [] -> begin (V31 = ('un--genName'(V7, <<"world"/utf8>>))), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V51 = begin (V36 = ('un--genName'(V7, <<"act"/utf8>>))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V50 = begin (V42 = fun (V41) -> {'Core.CompileExpr.CRef', V3, V35} end), begin (V43 = ('un--eval'([], V1, V8, V7, V6, {'Compiler.Inline.Nil'}, [], {'Core.CompileExpr.CApp', V3, V14, [{'Core.CompileExpr.CRef', V3, V40} | [(V42('erased')) | []]]}))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V49 = fun (V48) -> {'Prelude.Types.Right', {'Core.CompileExpr.CLam', V3, V35, ('un--refToLocal'(V35, V35, {'Core.CompileExpr.CLet', V3, V40, 1, {'Core.CompileExpr.CApp', V3, V12, [(V42('erased')) | []]}, ('un--refToLocal'(V40, V40, V47))}))}} end), V49 end(V44)) end end end end end), V50 end(V37)) end end end end), V51 end(V32)) end end end end; _ -> begin (V57 = begin (V52 = V8), fun (V53) -> begin (V56 = (begin (V54 = V52), fun (V55) -> ('erlang':'get'(V54)) end end(V53))), {'Prelude.Types.Right', V56} end end end), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V125 = begin (V94 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V61 of {'Core.Context.MkDefs', V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93} -> V62 end))), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V124 = case V98 of {'Prelude.Types.Just', V99} -> begin (V100 = {'Prelude.Types.Just', V99}), ('case--case block in case block in eval-4201'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V10, V61, V99, V100, case V99 of {'Core.Context.Context.MkGlobalDef', V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122} -> V119 end)) end; {'Prelude.Types.Nothing'} -> fun (V123) -> {'Prelude.Types.Right', ('un--unload'(V4, {'Core.CompileExpr.CRef', V3, V2}))} end end), V124 end(V95)) end end end end), V125 end(V58)) end end end end end end(E2, E3)); _ -> begin (V131 = begin (V126 = V8), fun (V127) -> begin (V130 = (begin (V128 = V126), fun (V129) -> ('erlang':'get'(V128)) end end(V127))), {'Prelude.Types.Right', V130} end end end), fun (V132) -> begin (V133 = (V131(V132))), case V133 of {'Prelude.Types.Left', V134} -> {'Prelude.Types.Left', V134}; {'Prelude.Types.Right', V135} -> (begin (V199 = begin (V168 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V135 of {'Core.Context.MkDefs', V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167} -> V136 end))), fun (V169) -> begin (V170 = (V168(V169))), case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> (begin (V198 = case V172 of {'Prelude.Types.Just', V173} -> begin (V174 = {'Prelude.Types.Just', V173}), ('case--case block in case block in eval-4201'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V10, V135, V173, V174, case V173 of {'Core.Context.Context.MkGlobalDef', V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196} -> V193 end)) end; {'Prelude.Types.Nothing'} -> fun (V197) -> {'Prelude.Types.Right', ('un--unload'(V4, {'Core.CompileExpr.CRef', V3, V2}))} end end), V198 end(V169)) end end end end), V199 end(V132)) end end end end end end(E0, E1)); _ -> begin (V205 = begin (V200 = V8), fun (V201) -> begin (V204 = (begin (V202 = V200), fun (V203) -> ('erlang':'get'(V202)) end end(V201))), {'Prelude.Types.Right', V204} end end end), fun (V206) -> begin (V207 = (V205(V206))), case V207 of {'Prelude.Types.Left', V208} -> {'Prelude.Types.Left', V208}; {'Prelude.Types.Right', V209} -> (begin (V273 = begin (V242 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V209 of {'Core.Context.MkDefs', V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241} -> V210 end))), fun (V243) -> begin (V244 = (V242(V243))), case V244 of {'Prelude.Types.Left', V245} -> {'Prelude.Types.Left', V245}; {'Prelude.Types.Right', V246} -> (begin (V272 = case V246 of {'Prelude.Types.Just', V247} -> begin (V248 = {'Prelude.Types.Just', V247}), ('case--case block in case block in eval-4201'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V10, V209, V247, V248, case V247 of {'Core.Context.Context.MkGlobalDef', V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270} -> V267 end)) end; {'Prelude.Types.Nothing'} -> fun (V271) -> {'Prelude.Types.Right', ('un--unload'(V4, {'Core.CompileExpr.CRef', V3, V2}))} end end), V272 end(V243)) end end end end), V273 end(V206)) end end end end end; _ -> begin (V279 = begin (V274 = V8), fun (V275) -> begin (V278 = (begin (V276 = V274), fun (V277) -> ('erlang':'get'(V276)) end end(V275))), {'Prelude.Types.Right', V278} end end end), fun (V280) -> begin (V281 = (V279(V280))), case V281 of {'Prelude.Types.Left', V282} -> {'Prelude.Types.Left', V282}; {'Prelude.Types.Right', V283} -> (begin (V347 = begin (V316 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V283 of {'Core.Context.MkDefs', V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315} -> V284 end))), fun (V317) -> begin (V318 = (V316(V317))), case V318 of {'Prelude.Types.Left', V319} -> {'Prelude.Types.Left', V319}; {'Prelude.Types.Right', V320} -> (begin (V346 = case V320 of {'Prelude.Types.Just', V321} -> begin (V322 = {'Prelude.Types.Just', V321}), ('case--case block in case block in eval-4201'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V10, V283, V321, V322, case V321 of {'Core.Context.Context.MkGlobalDef', V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344} -> V341 end)) end; {'Prelude.Types.Nothing'} -> fun (V345) -> {'Prelude.Types.Right', ('un--unload'(V4, {'Core.CompileExpr.CRef', V3, V2}))} end end), V346 end(V317)) end end end end), V347 end(V280)) end end end end end end.
'nested--9647-4994--in--un--updateLoc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V12 of [] -> V13; _ -> case V11 of 0 -> case V12 of [E2 | E3] -> (fun (V15, V16) -> case V13 of {'Compiler.Inline.::', V17, V18} -> {'Compiler.Inline.::', V14, V18} end end(E2, E3)) end; _ -> begin (V19 = (V11 - 1)), case V12 of [E0 | E1] -> (fun (V20, V21) -> case V13 of {'Compiler.Inline.::', V22, V23} -> {'Compiler.Inline.::', V22, ('nested--9647-4994--in--un--updateLoc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V19, V21, V23, V14))} end end(E0, E1)) end end end end.
'nested--9647-4995--in--un--update'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V12 of {'Core.CompileExpr.CLocal', V15, V16} -> ('nested--9647-4994--in--un--updateLoc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V11, V13, V14)); _ -> V13 end.
'nested--12439-6276--in--un--traverseArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Data.Vect.Nil'} -> fun (V8) -> {'Prelude.Types.Right', {'Data.Vect.Nil'}} end; {'Data.Vect.::', V9, V10} -> begin (V11 = ('un--fixArityTm'(V6, V5, V9, []))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V23 = begin (V16 = ('nested--12439-6276--in--un--traverseArgs'(V0, V1, V2, V3, V4, V5, V6, V10))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Data.Vect.::', V15, V20}} end), V22 end(V17)) end end end end), V23 end(V12)) end end end end end.
'nested--14555-7864--in--un--transform'(V0, V1, V2) -> case V1 of 0 -> fun (V3) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; _ -> begin (V4 = (V1 - 1)), begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V5) -> ('un--inlineDef'(V0, V5)) end, V2))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V53 = begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V11) -> ('un--mergeLamDef'(V0, V11)) end, V2))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V52 = begin (V18 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V17) -> ('Idris.Idris2.Compiler.CaseOpts':'un--caseLamDef'(V0, V17)) end, V2))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V51 = begin (V24 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V23) -> ('un--fixArityDef'(V0, V23)) end, V2))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V50 = begin (V30 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V29) -> ('Idris.Idris2.Compiler.Opts.InlineHeuristics':'un--inlineHeuristics'(V0, V29)) end, V2))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V49 = begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V35) -> ('Idris.Idris2.Compiler.Opts.ConstantFold':'un--constantFold'(V0, V35)) end, V2))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V48 = begin (V42 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V41) -> ('Idris.Idris2.Compiler.Opts.Identity':'un--setIdentity'(V0, V41)) end, V2))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V47 = ('nested--14555-7864--in--un--transform'(V0, V4, V2))), V47 end(V43)) end end end end), V48 end(V37)) end end end end), V49 end(V31)) end end end end), V50 end(V25)) end end end end), V51 end(V19)) end end end end), V52 end(V13)) end end end end), V53 end(V7)) end end end end end end.
'nested--14555-7865--in--un--nonErased'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V78 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V77 = fun (V49) -> case V48 of {'Prelude.Types.Just', V50} -> {'Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V50 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> V58 end, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V73) -> fun (V74) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V73, V74)) end end, 0, fun (V75) -> fun (V76) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V75, V76)) end end, 1}))))}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', 0} end end), V77 end(V45)) end end end end), V78 end(V8)) end end end end.
'nested--9773-5556--in--un--matches'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V21 of {'Prelude.Types.Just', V24} -> case V23 of {'Prelude.Types.Just', V25} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V24, V25)); _ -> 0 end; {'Prelude.Types.Nothing'} -> case V23 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V20, V22)); _ -> 0 end; _ -> 0 end.
'nested--12439-6461--in--un--fixArityConstAlt'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.CompileExpr.MkConstAlt', V8, V9} -> begin (V10 = ('un--fixArityTm'(V0, V6, V9, []))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkConstAlt', V8, V14}} end), V16 end(V11)) end end end end end.
'nested--12439-6399--in--un--fixArityAlt'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.CompileExpr.MkConAlt', V8, V9, V10, V11, V12} -> begin (V13 = ('un--fixArityTm'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V11, V0)), V6, V12, []))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = fun (V18) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkConAlt', V8, V9, V10, V11, V17}} end), V19 end(V14)) end end end end end.
'un--usedConst'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.MkConstAlt', V3, V4} -> ('un--used'(V0, V1, V4)) end.
'un--usedCon'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.MkConAlt', V3, V4, V5, V6, V7} -> begin (V8 = ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Var'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V6)), V1))), ('un--used'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V0)), V8, V7)) end end.
'un--used'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.CLocal', V3, V4} -> case case (V1 =:= V3) of 'false' -> 0; _ -> 1 end of 1 -> 1; 0 -> 0 end; {'Core.CompileExpr.CLam', V5, V6, V7} -> ('un--used'([V6 | V0], (V1 + 1), V7)); {'Core.CompileExpr.CLet', V8, V9, V10, V11, V12} -> case V10 of 1 -> begin (V14 = begin (V13 = (('un--used'(V0, V1, V11)) + ('un--used'([V9 | V0], (V1 + 1), V12)))), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end), case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V14, 0)) of 1 -> begin (V15 = 1000), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end; 0 -> V14 end end; 0 -> begin (V16 = (('un--used'(V0, V1, V11)) + ('un--used'([V9 | V0], (V1 + 1), V12)))), case ((V16 band 9223372036854775808) =/= 0) of 'true' -> (V16 bor -9223372036854775808); _ -> (V16 band 9223372036854775807) end end; _ -> 0 end; {'Core.CompileExpr.CApp', V17, V18, V19} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V20) -> fun (V21) -> begin (V22 = (V20 + V21)), case ((V22 band 9223372036854775808) =/= 0) of 'true' -> (V22 bor -9223372036854775808); _ -> (V22 band 9223372036854775807) end end end end, ('un--used'(V0, V1, V18)), ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V23) -> ('un--used'(V0, V1, V23)) end))(V19)))); {'Core.CompileExpr.CCon', V31, V32, V33, V34, V35} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V36) -> fun (V37) -> begin (V38 = (V36 + V37)), case ((V38 band 9223372036854775808) =/= 0) of 'true' -> (V38 bor -9223372036854775808); _ -> (V38 band 9223372036854775807) end end end end, 0, ((begin (V44 = fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V42, V43)) end end end end), fun (V45) -> fun (V46) -> ((((V44('erased'))('erased'))(V45))(V46)) end end end(fun (V39) -> ('un--used'(V0, V1, V39)) end))(V35)))); {'Core.CompileExpr.COp', V47, V48, V49, V50} -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'(fun (V51) -> fun (V52) -> begin (V53 = (V51 + V52)), case ((V53 band 9223372036854775808) =/= 0) of 'true' -> (V53 bor -9223372036854775808); _ -> (V53 band 9223372036854775807) end end end end, 0, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V54) -> ('un--used'(V0, V1, V54)) end, V50)))); {'Core.CompileExpr.CExtPrim', V55, V56, V57} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V58) -> fun (V59) -> begin (V60 = (V58 + V59)), case ((V60 band 9223372036854775808) =/= 0) of 'true' -> (V60 bor -9223372036854775808); _ -> (V60 band 9223372036854775807) end end end end, 0, ((begin (V66 = fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V64, V65)) end end end end), fun (V67) -> fun (V68) -> ((((V66('erased'))('erased'))(V67))(V68)) end end end(fun (V61) -> ('un--used'(V0, V1, V61)) end))(V57)))); {'Core.CompileExpr.CForce', V69, V70, V71} -> ('un--used'(V0, V1, V71)); {'Core.CompileExpr.CDelay', V72, V73, V74} -> ('un--used'(V0, V1, V74)); {'Core.CompileExpr.CConCase', V75, V76, V77, V78} -> begin (V107 = (('un--used'(V0, V1, V76)) + ('un--largest'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V79, V80)) end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V81, V82)) end end}, fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V85, V86)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V87, V88)) end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V89, V90)) end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V91, V92)) end end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V93, V94)) end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V95, V96)) end end}, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> begin (V97 = 0), case ((V97 band 9223372036854775808) =/= 0) of 'true' -> (V97 bor -9223372036854775808); _ -> (V97 band 9223372036854775807) end end end, fun () -> fun (V98) -> ('un--used'(V0, V1, V98)) end end, V78)), ((begin (V104 = fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V102, V103)) end end end end), fun (V105) -> fun (V106) -> ((((V104('erased'))('erased'))(V105))(V106)) end end end(fun (V99) -> ('un--usedCon'(V0, V1, V99)) end))(V77)))))), case ((V107 band 9223372036854775808) =/= 0) of 'true' -> (V107 bor -9223372036854775808); _ -> (V107 band 9223372036854775807) end end; {'Core.CompileExpr.CConstCase', V108, V109, V110, V111} -> begin (V140 = (('un--used'(V0, V1, V109)) + ('un--largest'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V112, V113)) end end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V114, V115)) end end}, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V116, V117)) end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V118, V119)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V120, V121)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V122, V123)) end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V124, V125)) end end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V128, V129)) end end}, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> begin (V130 = 0), case ((V130 band 9223372036854775808) =/= 0) of 'true' -> (V130 bor -9223372036854775808); _ -> (V130 band 9223372036854775807) end end end, fun () -> fun (V131) -> ('un--used'(V0, V1, V131)) end end, V111)), ((begin (V137 = fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V135, V136)) end end end end), fun (V138) -> fun (V139) -> ((((V137('erased'))('erased'))(V138))(V139)) end end end(fun (V132) -> ('un--usedConst'(V0, V1, V132)) end))(V110)))))), case ((V140 band 9223372036854775808) =/= 0) of 'true' -> (V140 bor -9223372036854775808); _ -> (V140 band 9223372036854775807) end end; _ -> 0 end.
'un--updateCallGraph'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V75 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V74 = case V48 of {'Prelude.Types.Just', V49} -> begin (V50 = {'Prelude.Types.Just', V49}), ('case--case block in updateCallGraph-7298'(V1, V0, V11, V49, V50, case V49 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> V69 end)) end; {'Prelude.Types.Nothing'} -> fun (V73) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V74 end(V45)) end end end end), V75 end(V8)) end end end end.
'un--unloadApp'(V0, V1, V2) -> ('un--unload'(('Idris.Idris2.Data.List':'un--drop'(V0, V1)), {'Core.CompileExpr.CApp', ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V2)), V2, ('Idris.Idris2.Data.List':'un--take'(V0, V1))})).
'un--unload'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> ('un--unload'(V3, {'Core.CompileExpr.CApp', ('Idris.Idris2.Core.CompileExpr':'un--getFC'(V1)), V1, [V2 | []]})) end(E0, E1)) end.
'un--tryApply'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.CompileExpr.MkFun', V8, V9} -> case ('un--takeFromStack'(V6, V5, V8)) of {'Prelude.Types.Just', V10} -> case V10 of {'Builtin.MkPair', V11, V12} -> begin (V13 = ('un--eval'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, V0)), V1, V2, V3, V4, V11, V12, ('Idris.Idris2.Core.CompileExpr':'un--embed'(V9))))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = fun (V18) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V17}} end), V19 end(V14)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V20) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V21) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'un--takeFromStack'(V0, V1, V2) -> case V1 of [E0 | E1] -> (fun (V3, V4) -> case V2 of [E2 | E3] -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--takeFromStack'(V0, V4, V6)), fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Prelude.Types.Just', {'Builtin.MkPair', {'Compiler.Inline.::', V3, V8}, V9}} end end)) end(E2, E3)); _ -> case V2 of [] -> {'Prelude.Types.Just', {'Builtin.MkPair', V0, V1}}; _ -> case V1 of [] -> {'Prelude.Types.Nothing'} end end end end(E0, E1)); _ -> case V2 of [] -> {'Prelude.Types.Just', {'Builtin.MkPair', V0, V1}}; _ -> case V1 of [] -> {'Prelude.Types.Nothing'} end end end.
'un--refToLocal'(V0, V1, V2) -> ('Idris.Idris2.Core.CompileExpr':'un--refsToLocals'({'Core.TT.Bounds.Add', V1, V0, {'Core.TT.Bounds.None'}}, V2)).
'un--pickConstAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Core.CompileExpr.CPrimVal', V10, V11} -> case V8 of [] -> case V9 of {'Prelude.Types.Nothing'} -> fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V13} -> begin (V14 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V13))), ((begin (V30 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V27, V28, V29)) end end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end((begin (V22 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> {'Prelude.Types.Right', (V18(V21))} end end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V15) -> {'Prelude.Types.Just', V15} end))))(V14)) end end; [E0 | E1] -> (fun (V33, V34) -> case V33 of {'Core.CompileExpr.MkConstAlt', V35, V36} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V11, V35)) of 1 -> begin (V37 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V36))), ((begin (V53 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V50, V51, V52)) end end end end end), fun (V54) -> fun (V55) -> ((((V53('erased'))('erased'))(V54))(V55)) end end end((begin (V45 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> {'Prelude.Types.Right', (V41(V44))} end end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V38) -> {'Prelude.Types.Just', V38} end))))(V37)) end; 0 -> ('un--pickConstAlt'(V0, V1, V2, V3, V4, V5, V6, {'Core.CompileExpr.CPrimVal', V10, V11}, V34, V9)) end; _ -> fun (V56) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end(E0, E1)); _ -> fun (V57) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V58) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'un--pickAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Core.CompileExpr.CCon', V10, V11, V12, V13, V14} -> case V8 of [] -> case V9 of {'Prelude.Types.Nothing'} -> fun (V15) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V16} -> begin (V17 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V16))), ((begin (V33 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V30, V31, V32)) end end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end((begin (V25 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> {'Prelude.Types.Right', (V21(V24))} end end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V18) -> {'Prelude.Types.Just', V18} end))))(V17)) end end; [E0 | E1] -> (fun (V36, V37) -> case V36 of {'Core.CompileExpr.MkConAlt', V38, V39, V40, V41, V42} -> begin (V43 = {'Core.CompileExpr.CCon', V10, V11, V12, V13, V14}), case ('nested--9773-5556--in--un--matches'(V39, V1, V14, V13, V12, V11, V10, V43, V41, V0, V42, V40, V38, V37, V9, V6, V5, V4, V3, V2, V11, V13, V38, V40)) of 1 -> case ('Idris.Idris2.Libraries.Data.LengthMatch':'un--checkLengthMatch'(V14, V41)) of {'Prelude.Types.Nothing'} -> fun (V44) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V45} -> begin (V46 = ('un--extend'(V5, V14, V41, V45))), begin (V47 = ('un--eval'(('Idris.Idris2.Prelude.Types.List':'un--++'(V41, V0)), V1, V2, V3, V4, V46, V6, V42))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V53 = fun (V52) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V51}} end), V53 end(V48)) end end end end end end; 0 -> ('un--pickAlt'(V0, V1, V2, V3, V4, V5, V6, V43, V37, V9)) end end; _ -> fun (V54) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end(E0, E1)); _ -> fun (V55) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V56) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'un--mkBounds'(V0) -> case V0 of [] -> {'Core.TT.Bounds.None'}; [E0 | E1] -> (fun (V1, V2) -> {'Core.TT.Bounds.Add', V1, V1, ('un--mkBounds'(V2))} end(E0, E1)) end.
'un--mergeLambdas'(V0, V1) -> case V1 of {'Core.CompileExpr.CLam', V2, V3, V4} -> ('case--mergeLambdas-6734'(V3, V0, V4, V2, ('un--getLams'([], 0, {'Core.CompileExpr.SubstCEnv.Nil'}, {'Core.CompileExpr.CLam', V2, V3, V4})))); _ -> {'Builtin.DPair.MkDPair', V0, V1} end.
'un--mergeLamDef'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V75 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V74 = case V48 of {'Prelude.Types.Just', V49} -> begin (V50 = {'Prelude.Types.Just', V49}), ('case--case block in mergeLamDef-7518'(V1, V0, V11, V49, V50, case V49 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> V68 end)) end; {'Prelude.Types.Nothing'} -> fun (V73) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V74 end(V45)) end end end end), V75 end(V8)) end end end end.
'un--mergeLam'(V0, V1, V2) -> case V1 of {'Core.CompileExpr.MkFun', V3, V4} -> case ('un--mergeLambdas'(V3, V4)) of {'Builtin.DPair.MkDPair', V5, V6} -> {'Prelude.Types.Right', {'Core.CompileExpr.MkFun', V5, V6}} end; _ -> {'Prelude.Types.Right', V1} end.
'un--largest'(V0, V1, V2) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V3, V4) -> case case V0 of {'Prelude.EqOrd.MkOrd', V5, V6, V7, V8, V9, V10, V11, V12} -> ((V8(V3))(V1)) end of 1 -> ('un--largest'(V0, V3, V4)); 0 -> ('un--largest'(V0, V1, V4)) end end(E0, E1)) end.
'un--inlineDef'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V82 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V81 = case V48 of {'Prelude.Types.Just', V49} -> case V49 of {'Core.Context.Context.MkGlobalDef', V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71} -> case V68 of {'Prelude.Types.Just', V72} -> begin (V73 = ('un--inline'(V0, V1, V72))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V78 = ('Idris.Idris2.Core.Context':'un--setCompiled'(V0, V1, V77))), V78 end(V74)) end end end end; {'Prelude.Types.Nothing'} -> fun (V79) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end; {'Prelude.Types.Nothing'} -> fun (V80) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V81 end(V45)) end end end end), V82 end(V8)) end end end end.
'un--inline'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.MkFun', V3, V4} -> begin (V5 = ('un--doEval'(V3, V0, V1, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkFun', V3, V9}} end), V11 end(V6)) end end end end; _ -> fun (V12) -> {'Prelude.Types.Right', V2} end end.
'un--getRefs'(V0) -> case V0 of {'Core.CompileExpr.MkFun', V1, V2} -> ('un--addRefs'(('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V2)); _ -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()) end.
'un--getNewArgs'(V0, V1) -> case V0 of [] -> case V1 of {'Core.CompileExpr.SubstCEnv.Nil'} -> [] end; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Core.CompileExpr.SubstCEnv.::', V4, V5} -> case V4 of {'Core.CompileExpr.CRef', V6, V7} -> [V7 | ('un--getNewArgs'(V3, V5))]; _ -> [V2 | ('un--getNewArgs'(V3, V5))] end end end(E0, E1)) end.
'un--getLams'(V0, V1, V2, V3) -> case V3 of {'Core.CompileExpr.CLam', V4, V5, V6} -> ('un--getLams'([V5 | V0], begin (V7 = (V1 + 1)), case ((V7 band 9223372036854775808) =/= 0) of 'true' -> (V7 bor -9223372036854775808); _ -> (V7 band 9223372036854775807) end end, {'Core.CompileExpr.SubstCEnv.::', {'Core.CompileExpr.CRef', V4, {'Core.Name.MN', <<"ext"/utf8>>, V1}}, V2}, V6)); _ -> {'Builtin.DPair.MkDPair', V0, {'Builtin.MkPair', V2, V3}} end.
'un--getArity'(V0) -> case V0 of {'Core.CompileExpr.MkFun', V1, V2} -> ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V1)); {'Core.CompileExpr.MkCon', V3, V4, V5} -> V4; {'Core.CompileExpr.MkForeign', V6, V7, V8} -> ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V7)); {'Core.CompileExpr.MkError', V9} -> 0 end.
'un--genName'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V25 = begin (V18 = begin (V12 = V0), fun (V13) -> begin (V17 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, begin (V16 = (V11 + 1)), case ((V16 band 9223372036854775808) =/= 0) of 'true' -> (V16 bor -9223372036854775808); _ -> (V16 band 9223372036854775807) end end)) end end(V13))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', {'Core.Name.MN', V1, V11}} end), V24 end(V19)) end end end end), V25 end(V8)) end end end end.
'un--fixArityTm'(V0, V1, V2, V3) -> case V2 of {'Core.CompileExpr.CRef', V4, V5} -> begin (V11 = begin (V6 = V1), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V81 = begin (V48 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V15 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V16 end))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V80 = case V52 of {'Prelude.Types.Just', V53} -> begin (V77 = case V53 of {'Core.Context.Context.MkGlobalDef', V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75} -> case V72 of {'Prelude.Types.Just', V76} -> ('un--getArity'(V76)); _ -> 0 end end), fun (V78) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CompileExpr':'un--expandToArity'(V0, V77, {'Core.CompileExpr.CApp', V4, {'Core.CompileExpr.CRef', V4, V5}, []}, V3))} end end; {'Prelude.Types.Nothing'} -> fun (V79) -> {'Prelude.Types.Right', ('un--unload'(V3, {'Core.CompileExpr.CRef', V4, V5}))} end end), V80 end(V49)) end end end end), V81 end(V12)) end end end end; {'Core.CompileExpr.CLam', V82, V83, V84} -> begin (V85 = ('un--fixArityTm'([V83 | V0], V1, V84, []))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V91 = fun (V90) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CompileExpr':'un--expandToArity'(V0, 0, {'Core.CompileExpr.CLam', V82, V83, V89}, V3))} end), V91 end(V86)) end end end end; {'Core.CompileExpr.CLet', V92, V93, V94, V95, V96} -> begin (V97 = ('un--fixArityTm'(V0, V1, V95, []))), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V109 = begin (V102 = ('un--fixArityTm'([V93 | V0], V1, V96, []))), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V108 = fun (V107) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CompileExpr':'un--expandToArity'(V0, 0, {'Core.CompileExpr.CLet', V92, V93, V94, V101, V106}, V3))} end), V108 end(V103)) end end end end), V109 end(V98)) end end end end; {'Core.CompileExpr.CApp', V110, V111, V112} -> case V111 of {'Core.CompileExpr.CRef', V113, V114} -> begin (V120 = begin (V115 = V1), fun (V116) -> begin (V119 = (begin (V117 = V115), fun (V118) -> ('erlang':'get'(V117)) end end(V116))), {'Prelude.Types.Right', V119} end end end), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V174 = begin (V157 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V114, case V124 of {'Core.Context.MkDefs', V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156} -> V125 end))), fun (V158) -> begin (V159 = (V157(V158))), case V159 of {'Prelude.Types.Left', V160} -> {'Prelude.Types.Left', V160}; {'Prelude.Types.Right', V161} -> (begin (V173 = begin (V162 = {'Core.CompileExpr.CApp', V110, {'Core.CompileExpr.CRef', V113, V114}, V112}), begin (V163 = {'Core.CompileExpr.CRef', V113, V114}), case V161 of {'Prelude.Types.Just', V164} -> begin (V166 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V165) -> ('un--fixArityTm'(V0, V1, V165, [])) end, V112, []))), fun (V167) -> begin (V168 = (V166(V167))), case V168 of {'Prelude.Types.Left', V169} -> {'Prelude.Types.Left', V169}; {'Prelude.Types.Right', V170} -> (begin (V171 = ('un--fixArityTm'(V0, V1, V163, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V170, V3))))), V171 end(V167)) end end end end; {'Prelude.Types.Nothing'} -> fun (V172) -> {'Prelude.Types.Right', ('un--unload'(V3, V162))} end end end end), V173 end(V158)) end end end end), V174 end(V121)) end end end end; _ -> begin (V176 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V175) -> ('un--fixArityTm'(V0, V1, V175, [])) end, V112, []))), fun (V177) -> begin (V178 = (V176(V177))), case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> (begin (V181 = ('un--fixArityTm'(V0, V1, V111, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V180, V3))))), V181 end(V177)) end end end end end; {'Core.CompileExpr.CCon', V182, V183, V184, V185, V186} -> case V3 of [] -> begin (V188 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V187) -> ('un--fixArityTm'(V0, V1, V187, [])) end, V186, []))), fun (V189) -> begin (V190 = (V188(V189))), case V190 of {'Prelude.Types.Left', V191} -> {'Prelude.Types.Left', V191}; {'Prelude.Types.Right', V192} -> (begin (V194 = fun (V193) -> {'Prelude.Types.Right', {'Core.CompileExpr.CCon', V182, V183, V184, V185, V192}} end), V194 end(V189)) end end end end; _ -> fun (V195) -> case V3 of [] -> {'Prelude.Types.Right', V2}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CompileExpr':'un--expandToArity'(V0, 0, V2, V3))} end end end; {'Core.CompileExpr.COp', V196, V197, V198, V199} -> case V3 of [] -> begin (V200 = ('nested--12439-6276--in--un--traverseArgs'(V0, V196, V199, V198, V197, V1, V0, V199))), fun (V201) -> begin (V202 = (V200(V201))), case V202 of {'Prelude.Types.Left', V203} -> {'Prelude.Types.Left', V203}; {'Prelude.Types.Right', V204} -> (begin (V206 = fun (V205) -> {'Prelude.Types.Right', {'Core.CompileExpr.COp', V196, V197, V198, V204}} end), V206 end(V201)) end end end end; _ -> fun (V207) -> case V3 of [] -> {'Prelude.Types.Right', V2}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CompileExpr':'un--expandToArity'(V0, 0, V2, V3))} end end end; {'Core.CompileExpr.CExtPrim', V208, V209, V210} -> case V3 of [] -> begin (V212 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V211) -> ('un--fixArityTm'(V0, V1, V211, [])) end, V210, []))), fun (V213) -> begin (V214 = (V212(V213))), case V214 of {'Prelude.Types.Left', V215} -> {'Prelude.Types.Left', V215}; {'Prelude.Types.Right', V216} -> (begin (V218 = fun (V217) -> {'Prelude.Types.Right', {'Core.CompileExpr.CExtPrim', V208, V209, V216}} end), V218 end(V213)) end end end end; _ -> fun (V219) -> case V3 of [] -> {'Prelude.Types.Right', V2}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CompileExpr':'un--expandToArity'(V0, 0, V2, V3))} end end end; {'Core.CompileExpr.CForce', V220, V221, V222} -> begin (V223 = ('un--fixArityTm'(V0, V1, V222, []))), fun (V224) -> begin (V225 = (V223(V224))), case V225 of {'Prelude.Types.Left', V226} -> {'Prelude.Types.Left', V226}; {'Prelude.Types.Right', V227} -> (begin (V229 = fun (V228) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CompileExpr':'un--expandToArity'(V0, 0, {'Core.CompileExpr.CForce', V220, V221, V227}, V3))} end), V229 end(V224)) end end end end; {'Core.CompileExpr.CDelay', V230, V231, V232} -> begin (V233 = ('un--fixArityTm'(V0, V1, V232, []))), fun (V234) -> begin (V235 = (V233(V234))), case V235 of {'Prelude.Types.Left', V236} -> {'Prelude.Types.Left', V236}; {'Prelude.Types.Right', V237} -> (begin (V239 = fun (V238) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CompileExpr':'un--expandToArity'(V0, 0, {'Core.CompileExpr.CDelay', V230, V231, V237}, V3))} end), V239 end(V234)) end end end end; {'Core.CompileExpr.CConCase', V240, V241, V242, V243} -> begin (V244 = ('un--fixArityTm'(V0, V1, V241, []))), fun (V245) -> begin (V246 = (V244(V245))), case V246 of {'Prelude.Types.Left', V247} -> {'Prelude.Types.Left', V247}; {'Prelude.Types.Right', V248} -> (begin (V284 = begin (V250 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V249) -> ('nested--12439-6399--in--un--fixArityAlt'(V0, V243, V242, V241, V240, V3, V1, V249)) end, V242, []))), fun (V251) -> begin (V252 = (V250(V251))), case V252 of {'Prelude.Types.Left', V253} -> {'Prelude.Types.Left', V253}; {'Prelude.Types.Right', V254} -> (begin (V283 = begin (V276 = case V243 of {'Prelude.Types.Nothing'} -> fun (V255) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V256} -> begin (V257 = ('un--fixArityTm'(V0, V1, V256, []))), ((begin (V273 = fun (V268) -> fun (V269) -> fun (V270) -> fun (V271) -> fun (V272) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V270, V271, V272)) end end end end end), fun (V274) -> fun (V275) -> ((((V273('erased'))('erased'))(V274))(V275)) end end end((begin (V265 = fun (V259) -> fun (V260) -> fun (V261) -> fun (V262) -> case V262 of {'Prelude.Types.Left', V263} -> {'Prelude.Types.Left', V263}; {'Prelude.Types.Right', V264} -> {'Prelude.Types.Right', (V261(V264))} end end end end end), fun (V266) -> fun (V267) -> ((((V265('erased'))('erased'))(V266))(V267)) end end end(fun (V258) -> {'Prelude.Types.Just', V258} end))))(V257)) end end), fun (V277) -> begin (V278 = (V276(V277))), case V278 of {'Prelude.Types.Left', V279} -> {'Prelude.Types.Left', V279}; {'Prelude.Types.Right', V280} -> (begin (V282 = fun (V281) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CompileExpr':'un--expandToArity'(V0, 0, {'Core.CompileExpr.CConCase', V240, V248, V254, V280}, V3))} end), V282 end(V277)) end end end end), V283 end(V251)) end end end end), V284 end(V245)) end end end end; {'Core.CompileExpr.CConstCase', V285, V286, V287, V288} -> begin (V289 = ('un--fixArityTm'(V0, V1, V286, []))), fun (V290) -> begin (V291 = (V289(V290))), case V291 of {'Prelude.Types.Left', V292} -> {'Prelude.Types.Left', V292}; {'Prelude.Types.Right', V293} -> (begin (V329 = begin (V295 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V294) -> ('nested--12439-6461--in--un--fixArityConstAlt'(V0, V288, V287, V286, V285, V3, V1, V294)) end, V287, []))), fun (V296) -> begin (V297 = (V295(V296))), case V297 of {'Prelude.Types.Left', V298} -> {'Prelude.Types.Left', V298}; {'Prelude.Types.Right', V299} -> (begin (V328 = begin (V321 = case V288 of {'Prelude.Types.Nothing'} -> fun (V300) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V301} -> begin (V302 = ('un--fixArityTm'(V0, V1, V301, []))), ((begin (V318 = fun (V313) -> fun (V314) -> fun (V315) -> fun (V316) -> fun (V317) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V315, V316, V317)) end end end end end), fun (V319) -> fun (V320) -> ((((V318('erased'))('erased'))(V319))(V320)) end end end((begin (V310 = fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> case V307 of {'Prelude.Types.Left', V308} -> {'Prelude.Types.Left', V308}; {'Prelude.Types.Right', V309} -> {'Prelude.Types.Right', (V306(V309))} end end end end end), fun (V311) -> fun (V312) -> ((((V310('erased'))('erased'))(V311))(V312)) end end end(fun (V303) -> {'Prelude.Types.Just', V303} end))))(V302)) end end), fun (V322) -> begin (V323 = (V321(V322))), case V323 of {'Prelude.Types.Left', V324} -> {'Prelude.Types.Left', V324}; {'Prelude.Types.Right', V325} -> (begin (V327 = fun (V326) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CompileExpr':'un--expandToArity'(V0, 0, {'Core.CompileExpr.CConstCase', V285, V293, V299, V325}, V3))} end), V327 end(V322)) end end end end), V328 end(V296)) end end end end), V329 end(V290)) end end end end; _ -> fun (V330) -> case V3 of [] -> {'Prelude.Types.Right', V2}; _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CompileExpr':'un--expandToArity'(V0, 0, V2, V3))} end end end.
'un--fixArityExp'(V0, V1, V2) -> ('un--fixArityTm'(V0, V1, V2, [])).
'un--fixArityDef'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V82 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V81 = case V48 of {'Prelude.Types.Just', V49} -> case V49 of {'Core.Context.Context.MkGlobalDef', V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71} -> case V68 of {'Prelude.Types.Just', V72} -> begin (V73 = ('un--fixArity'(V0, V72))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V78 = ('Idris.Idris2.Core.Context':'un--setCompiled'(V0, V1, V77))), V78 end(V74)) end end end end; {'Prelude.Types.Nothing'} -> fun (V79) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end; {'Prelude.Types.Nothing'} -> fun (V80) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V81 end(V45)) end end end end), V82 end(V8)) end end end end.
'un--fixArity'(V0, V1) -> case V1 of {'Core.CompileExpr.MkFun', V2, V3} -> begin (V4 = ('un--fixArityTm'(V2, V0, V3, []))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V10 = fun (V9) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkFun', V2, V8}} end), V10 end(V5)) end end end end; {'Core.CompileExpr.MkError', V11} -> begin (V12 = ('un--fixArityTm'([], V0, V11, []))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = fun (V17) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkError', V16}} end), V18 end(V13)) end end end end; _ -> fun (V19) -> {'Prelude.Types.Right', V1} end end.
'un--extendLoc'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Bounds.None'}, V2}} end; [E0 | E1] -> (fun (V5, V6) -> begin (V7 = ('un--genName'(V0, <<"cv"/utf8>>))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V21 = begin (V12 = ('un--extendLoc'(V0, V1, V2, V6))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V20 = fun (V17) -> case V16 of {'Builtin.MkPair', V18, V19} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Bounds.Add', V5, V11, V18}, {'Compiler.Inline.::', {'Core.CompileExpr.CRef', V1, V11}, V19}}} end end), V20 end(V13)) end end end end), V21 end(V8)) end end end end end(E0, E1)) end.
'un--extend'(V0, V1, V2, V3) -> case V1 of [] -> case V2 of [] -> case V3 of 0 -> V0; _ -> ('erlang':'throw'({'$idris_error', <<"Nat case not covered"/utf8>>})) end end; [E0 | E1] -> (fun (V4, V5) -> case V2 of [E2 | E3] -> (fun (V6, V7) -> case V3 of 0 -> ('erlang':'throw'({'$idris_error', <<"Nat case not covered"/utf8>>})); _ -> begin (V8 = (V3 - 1)), {'Compiler.Inline.::', V4, ('un--extend'(V0, V5, V7, V8))} end end end(E2, E3)) end end(E0, E1)) end.
'un--evalLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V0 of [] -> fun (V9) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CLocal', V8, V4}))} end; [E0 | E1] -> (fun (V10, V11) -> case V7 of {'Compiler.Inline.::', V12, V13} -> case V8 of 0 -> case V6 of [] -> fun (V14) -> {'Prelude.Types.Right', V12} end; _ -> ('un--eval'(V11, V1, V2, V3, V5, V13, V6, ('Idris.Idris2.Core.CompileExpr':'dn--un--weakenNs_Weaken_CExp'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V11)), V12)))) end; _ -> begin (V15 = (V8 - 1)), ('un--evalLocal'(V11, V1, V2, V3, V4, V5, V6, V13, V15)) end end end end(E0, E1)) end.
'un--evalConstAlt'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.CompileExpr.MkConstAlt', V8, V9} -> begin (V10 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V9))), ((begin (V26 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V23, V24, V25)) end end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end((begin (V18 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> {'Prelude.Types.Right', (V14(V17))} end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V11) -> {'Core.CompileExpr.MkConstAlt', V8, V11} end))))(V10)) end end.
'un--evalAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.CompileExpr.MkConAlt', V9, V10, V11, V12, V13} -> begin (V14 = ('un--extendLoc'(V3, V4, V6, V12))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V28 = case V18 of {'Builtin.MkPair', V19, V20} -> begin (V21 = ('un--eval'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V12, V0)), V1, V2, V3, V5, V20, V7, V13))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', {'Core.CompileExpr.MkConAlt', V9, V10, V11, V12, ('Idris.Idris2.Core.CompileExpr':'un--refsToLocals'(V19, V25))}} end), V27 end(V22)) end end end end end), V28 end(V15)) end end end end end.
'un--eval'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.CompileExpr.CLocal', V8, V9} -> ('un--evalLocal'(V0, V1, V2, V3, V9, V4, V6, V5, V8)); {'Core.CompileExpr.CRef', V10, V11} -> begin (V19 = case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--primIONS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"io_bind"/utf8>>}}})) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"compiler.inline.io_bind"/utf8>>, 50, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V12) -> fun (V13) -> <<V12/binary, V13/binary>> end end, <<""/utf8>>}, fun (V14) -> V14 end, [<<"Attempting to inline io_bind, its stack is: "/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_(CExp $vars)'(V1, V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_(CExp $vars)'(V1, V16, V17)) end end}, V6)) | []]])) end)); 0 -> fun (V18) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V24 = ('case--eval-3951'(V0, V1, V11, V10, V6, V5, V4, V3, V2, {'Builtin.MkPair', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, {'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--primIONS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"io_bind"/utf8>>}}})), V6}))), V24 end(V20)) end end end end; _ -> case V6 of [] -> case V7 of {'Core.CompileExpr.CLam', V25, V26, V27} -> begin (V28 = ('un--genName'(V3, <<"lamv"/utf8>>))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V40 = begin (V33 = ('un--eval'([V26 | V0], V1, V2, V3, V4, {'Compiler.Inline.::', {'Core.CompileExpr.CRef', V25, V32}, V5}, [], V27))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', {'Core.CompileExpr.CLam', V25, V26, ('un--refToLocal'(V32, V26, V37))}} end), V39 end(V34)) end end end end), V40 end(V29)) end end end end; _ -> case V7 of {'Core.CompileExpr.CLet', V41, V42, V43, V44, V45} -> case V43 of 1 -> begin (V46 = ('un--genName'(V3, <<"letv"/utf8>>))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V64 = begin (V51 = ('un--eval'([V42 | V0], V1, V2, V3, V4, {'Compiler.Inline.::', {'Core.CompileExpr.CRef', V41, V50}, V5}, [], V45))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V63 = begin (V56 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V44))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V62 = fun (V61) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CLet', V41, V42, 1, V60, ('un--refToLocal'(V50, V42, V55))}))} end), V62 end(V57)) end end end end), V63 end(V52)) end end end end), V64 end(V47)) end end end end; 0 -> begin (V65 = ('un--used'([V42 | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, V1))], 0, V45))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V65, 1)) of 1 -> begin (V66 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V44))), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V71 = ('un--eval'([V42 | V0], V1, V2, V3, V4, {'Compiler.Inline.::', V70, V5}, V6, V45))), V71 end(V67)) end end end end; 0 -> begin (V72 = ('un--genName'(V3, <<"letv"/utf8>>))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V90 = begin (V77 = ('un--eval'([V42 | V0], V1, V2, V3, V4, {'Compiler.Inline.::', {'Core.CompileExpr.CRef', V41, V76}, V5}, V6, V45))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V89 = begin (V82 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V44))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V88 = fun (V87) -> {'Prelude.Types.Right', {'Core.CompileExpr.CLet', V41, V42, 0, V86, ('un--refToLocal'(V76, V42, V81))}} end), V88 end(V83)) end end end end), V89 end(V78)) end end end end), V90 end(V73)) end end end end end end end; {'Core.CompileExpr.CApp', V91, V92, V93} -> case V92 of {'Core.CompileExpr.CRef', V94, V95} -> begin (V101 = begin (V96 = V2), fun (V97) -> begin (V100 = (begin (V98 = V96), fun (V99) -> ('erlang':'get'(V98)) end end(V97))), {'Prelude.Types.Right', V100} end end end), fun (V102) -> begin (V103 = (V101(V102))), case V103 of {'Prelude.Types.Left', V104} -> {'Prelude.Types.Left', V104}; {'Prelude.Types.Right', V105} -> (begin (V161 = begin (V138 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V95, case V105 of {'Core.Context.MkDefs', V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137} -> V106 end))), fun (V139) -> begin (V140 = (V138(V139))), case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> (begin (V160 = begin (V143 = {'Core.CompileExpr.CRef', V94, V95}), case V142 of {'Prelude.Types.Just', V144} -> begin (V146 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V145) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V145)) end, V93, []))), fun (V147) -> begin (V148 = (V146(V147))), case V148 of {'Prelude.Types.Left', V149} -> {'Prelude.Types.Left', V149}; {'Prelude.Types.Right', V150} -> (begin (V151 = ('un--eval'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V150, V6)), V143))), V151 end(V147)) end end end end; {'Prelude.Types.Nothing'} -> begin (V153 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V152) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V152)) end, V93, []))), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V159 = fun (V158) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CApp', V91, {'Core.CompileExpr.CRef', V94, V95}, V157}))} end), V159 end(V154)) end end end end end end), V160 end(V139)) end end end end), V161 end(V102)) end end end end; _ -> begin (V163 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V162) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V162)) end, V93, []))), fun (V164) -> begin (V165 = (V163(V164))), case V165 of {'Prelude.Types.Left', V166} -> {'Prelude.Types.Left', V166}; {'Prelude.Types.Right', V167} -> (begin (V168 = ('un--eval'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V167, V6)), V92))), V168 end(V164)) end end end end end; {'Core.CompileExpr.CCon', V169, V170, V171, V172, V173} -> begin (V175 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V174) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V174)) end, V173, []))), fun (V176) -> begin (V177 = (V175(V176))), case V177 of {'Prelude.Types.Left', V178} -> {'Prelude.Types.Left', V178}; {'Prelude.Types.Right', V179} -> (begin (V181 = fun (V180) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CCon', V169, V170, V171, V172, V179}))} end), V181 end(V176)) end end end end; {'Core.CompileExpr.COp', V182, V183, V184, V185} -> begin (V187 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V186) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V186)) end, V185))), fun (V188) -> begin (V189 = (V187(V188))), case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> (begin (V193 = fun (V192) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.COp', V182, V183, V184, V191}))} end), V193 end(V188)) end end end end; {'Core.CompileExpr.CExtPrim', V194, V195, V196} -> begin (V198 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V197) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V197)) end, V196, []))), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V204 = fun (V203) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CExtPrim', V194, V195, V202}))} end), V204 end(V199)) end end end end; {'Core.CompileExpr.CForce', V205, V206, V207} -> begin (V208 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V207))), fun (V209) -> begin (V210 = (V208(V209))), case V210 of {'Prelude.Types.Left', V211} -> {'Prelude.Types.Left', V211}; {'Prelude.Types.Right', V212} -> (begin (V217 = case V212 of {'Core.CompileExpr.CDelay', V213, V214, V215} -> ('un--eval'([], V1, V2, V3, V4, {'Compiler.Inline.Nil'}, V6, V215)); _ -> fun (V216) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CForce', V205, V206, V212}))} end end), V217 end(V209)) end end end end; {'Core.CompileExpr.CDelay', V218, V219, V220} -> begin (V221 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V220))), fun (V222) -> begin (V223 = (V221(V222))), case V223 of {'Prelude.Types.Left', V224} -> {'Prelude.Types.Left', V224}; {'Prelude.Types.Right', V225} -> (begin (V227 = fun (V226) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CDelay', V218, V219, V225}))} end), V227 end(V222)) end end end end; {'Core.CompileExpr.CConCase', V228, V229, V230, V231} -> begin (V232 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V229))), fun (V233) -> begin (V234 = (V232(V233))), case V234 of {'Prelude.Types.Left', V235} -> {'Prelude.Types.Left', V235}; {'Prelude.Types.Right', V236} -> (begin (V281 = begin (V237 = ('nested--9647-4995--in--un--update'(V0, V1, V231, V230, V229, V228, V6, V5, V4, V3, V2, V0, V229, V5, V236))), begin (V238 = ('un--pickAlt'(V0, V1, V2, V3, V4, V237, V6, V236, V230, V231))), fun (V239) -> begin (V240 = (V238(V239))), case V240 of {'Prelude.Types.Left', V241} -> {'Prelude.Types.Left', V241}; {'Prelude.Types.Right', V242} -> (begin (V280 = case V242 of {'Prelude.Types.Nothing'} -> begin (V264 = case V231 of {'Prelude.Types.Nothing'} -> fun (V243) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V244} -> begin (V245 = ('un--eval'(V0, V1, V2, V3, V4, V237, V6, V244))), ((begin (V261 = fun (V256) -> fun (V257) -> fun (V258) -> fun (V259) -> fun (V260) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V258, V259, V260)) end end end end end), fun (V262) -> fun (V263) -> ((((V261('erased'))('erased'))(V262))(V263)) end end end((begin (V253 = fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> case V250 of {'Prelude.Types.Left', V251} -> {'Prelude.Types.Left', V251}; {'Prelude.Types.Right', V252} -> {'Prelude.Types.Right', (V249(V252))} end end end end end), fun (V254) -> fun (V255) -> ((((V253('erased'))('erased'))(V254))(V255)) end end end(fun (V246) -> {'Prelude.Types.Just', V246} end))))(V245)) end end), fun (V265) -> begin (V266 = (V264(V265))), case V266 of {'Prelude.Types.Left', V267} -> {'Prelude.Types.Left', V267}; {'Prelude.Types.Right', V268} -> (begin (V277 = begin (V270 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V269) -> ('un--evalAlt'(V0, V1, V2, V3, V228, V4, V237, V6, V269)) end, V230, []))), fun (V271) -> begin (V272 = (V270(V271))), case V272 of {'Prelude.Types.Left', V273} -> {'Prelude.Types.Left', V273}; {'Prelude.Types.Right', V274} -> (begin (V276 = fun (V275) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CaseOpts':'un--caseOfCase'({'Core.CompileExpr.CConCase', V228, V236, V274, V268}))} end), V276 end(V271)) end end end end), V277 end(V265)) end end end end; {'Prelude.Types.Just', V278} -> fun (V279) -> {'Prelude.Types.Right', V278} end end), V280 end(V239)) end end end end end), V281 end(V233)) end end end end; {'Core.CompileExpr.CConstCase', V282, V283, V284, V285} -> begin (V286 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V283))), fun (V287) -> begin (V288 = (V286(V287))), case V288 of {'Prelude.Types.Left', V289} -> {'Prelude.Types.Left', V289}; {'Prelude.Types.Right', V290} -> (begin (V334 = begin (V291 = ('un--pickConstAlt'(V0, V1, V2, V3, V4, V5, V6, V290, V284, V285))), fun (V292) -> begin (V293 = (V291(V292))), case V293 of {'Prelude.Types.Left', V294} -> {'Prelude.Types.Left', V294}; {'Prelude.Types.Right', V295} -> (begin (V333 = case V295 of {'Prelude.Types.Nothing'} -> begin (V317 = case V285 of {'Prelude.Types.Nothing'} -> fun (V296) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V297} -> begin (V298 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V297))), ((begin (V314 = fun (V309) -> fun (V310) -> fun (V311) -> fun (V312) -> fun (V313) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V311, V312, V313)) end end end end end), fun (V315) -> fun (V316) -> ((((V314('erased'))('erased'))(V315))(V316)) end end end((begin (V306 = fun (V300) -> fun (V301) -> fun (V302) -> fun (V303) -> case V303 of {'Prelude.Types.Left', V304} -> {'Prelude.Types.Left', V304}; {'Prelude.Types.Right', V305} -> {'Prelude.Types.Right', (V302(V305))} end end end end end), fun (V307) -> fun (V308) -> ((((V306('erased'))('erased'))(V307))(V308)) end end end(fun (V299) -> {'Prelude.Types.Just', V299} end))))(V298)) end end), fun (V318) -> begin (V319 = (V317(V318))), case V319 of {'Prelude.Types.Left', V320} -> {'Prelude.Types.Left', V320}; {'Prelude.Types.Right', V321} -> (begin (V330 = begin (V323 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V322) -> ('un--evalConstAlt'(V0, V1, V2, V3, V4, V5, V6, V322)) end, V284, []))), fun (V324) -> begin (V325 = (V323(V324))), case V325 of {'Prelude.Types.Left', V326} -> {'Prelude.Types.Left', V326}; {'Prelude.Types.Right', V327} -> (begin (V329 = fun (V328) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CaseOpts':'un--caseOfCase'({'Core.CompileExpr.CConstCase', V282, V290, V327, V321}))} end), V329 end(V324)) end end end end), V330 end(V318)) end end end end; {'Prelude.Types.Just', V331} -> fun (V332) -> {'Prelude.Types.Right', V331} end end), V333 end(V292)) end end end end), V334 end(V287)) end end end end; {'Core.CompileExpr.CPrimVal', V335, V336} -> fun (V337) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CPrimVal', V335, V336}))} end; {'Core.CompileExpr.CErased', V338} -> fun (V339) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CErased', V338}))} end; {'Core.CompileExpr.CCrash', V340, V341} -> fun (V342) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CCrash', V340, V341}))} end end end; [E0 | E1] -> (fun (V343, V344) -> case V7 of {'Core.CompileExpr.CLam', V345, V346, V347} -> ('un--eval'([V346 | V0], V1, V2, V3, V4, {'Compiler.Inline.::', V343, V5}, V344, V347)); _ -> case V7 of {'Core.CompileExpr.CLet', V348, V349, V350, V351, V352} -> case V350 of 1 -> begin (V353 = ('un--genName'(V3, <<"letv"/utf8>>))), fun (V354) -> begin (V355 = (V353(V354))), case V355 of {'Prelude.Types.Left', V356} -> {'Prelude.Types.Left', V356}; {'Prelude.Types.Right', V357} -> (begin (V371 = begin (V358 = ('un--eval'([V349 | V0], V1, V2, V3, V4, {'Compiler.Inline.::', {'Core.CompileExpr.CRef', V348, V357}, V5}, [], V352))), fun (V359) -> begin (V360 = (V358(V359))), case V360 of {'Prelude.Types.Left', V361} -> {'Prelude.Types.Left', V361}; {'Prelude.Types.Right', V362} -> (begin (V370 = begin (V363 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V351))), fun (V364) -> begin (V365 = (V363(V364))), case V365 of {'Prelude.Types.Left', V366} -> {'Prelude.Types.Left', V366}; {'Prelude.Types.Right', V367} -> (begin (V369 = fun (V368) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CLet', V348, V349, 1, V367, ('un--refToLocal'(V357, V349, V362))}))} end), V369 end(V364)) end end end end), V370 end(V359)) end end end end), V371 end(V354)) end end end end; 0 -> begin (V372 = ('un--used'([V349 | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, V1))], 0, V352))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V372, 1)) of 1 -> begin (V373 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V351))), fun (V374) -> begin (V375 = (V373(V374))), case V375 of {'Prelude.Types.Left', V376} -> {'Prelude.Types.Left', V376}; {'Prelude.Types.Right', V377} -> (begin (V378 = ('un--eval'([V349 | V0], V1, V2, V3, V4, {'Compiler.Inline.::', V377, V5}, V6, V352))), V378 end(V374)) end end end end; 0 -> begin (V379 = ('un--genName'(V3, <<"letv"/utf8>>))), fun (V380) -> begin (V381 = (V379(V380))), case V381 of {'Prelude.Types.Left', V382} -> {'Prelude.Types.Left', V382}; {'Prelude.Types.Right', V383} -> (begin (V397 = begin (V384 = ('un--eval'([V349 | V0], V1, V2, V3, V4, {'Compiler.Inline.::', {'Core.CompileExpr.CRef', V348, V383}, V5}, V6, V352))), fun (V385) -> begin (V386 = (V384(V385))), case V386 of {'Prelude.Types.Left', V387} -> {'Prelude.Types.Left', V387}; {'Prelude.Types.Right', V388} -> (begin (V396 = begin (V389 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V351))), fun (V390) -> begin (V391 = (V389(V390))), case V391 of {'Prelude.Types.Left', V392} -> {'Prelude.Types.Left', V392}; {'Prelude.Types.Right', V393} -> (begin (V395 = fun (V394) -> {'Prelude.Types.Right', {'Core.CompileExpr.CLet', V348, V349, 0, V393, ('un--refToLocal'(V383, V349, V388))}} end), V395 end(V390)) end end end end), V396 end(V385)) end end end end), V397 end(V380)) end end end end end end end; {'Core.CompileExpr.CApp', V398, V399, V400} -> case V399 of {'Core.CompileExpr.CRef', V401, V402} -> begin (V408 = begin (V403 = V2), fun (V404) -> begin (V407 = (begin (V405 = V403), fun (V406) -> ('erlang':'get'(V405)) end end(V404))), {'Prelude.Types.Right', V407} end end end), fun (V409) -> begin (V410 = (V408(V409))), case V410 of {'Prelude.Types.Left', V411} -> {'Prelude.Types.Left', V411}; {'Prelude.Types.Right', V412} -> (begin (V468 = begin (V445 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V402, case V412 of {'Core.Context.MkDefs', V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444} -> V413 end))), fun (V446) -> begin (V447 = (V445(V446))), case V447 of {'Prelude.Types.Left', V448} -> {'Prelude.Types.Left', V448}; {'Prelude.Types.Right', V449} -> (begin (V467 = begin (V450 = {'Core.CompileExpr.CRef', V401, V402}), case V449 of {'Prelude.Types.Just', V451} -> begin (V453 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V452) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V452)) end, V400, []))), fun (V454) -> begin (V455 = (V453(V454))), case V455 of {'Prelude.Types.Left', V456} -> {'Prelude.Types.Left', V456}; {'Prelude.Types.Right', V457} -> (begin (V458 = ('un--eval'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V457, V6)), V450))), V458 end(V454)) end end end end; {'Prelude.Types.Nothing'} -> begin (V460 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V459) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V459)) end, V400, []))), fun (V461) -> begin (V462 = (V460(V461))), case V462 of {'Prelude.Types.Left', V463} -> {'Prelude.Types.Left', V463}; {'Prelude.Types.Right', V464} -> (begin (V466 = fun (V465) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CApp', V398, {'Core.CompileExpr.CRef', V401, V402}, V464}))} end), V466 end(V461)) end end end end end end), V467 end(V446)) end end end end), V468 end(V409)) end end end end; _ -> begin (V470 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V469) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V469)) end, V400, []))), fun (V471) -> begin (V472 = (V470(V471))), case V472 of {'Prelude.Types.Left', V473} -> {'Prelude.Types.Left', V473}; {'Prelude.Types.Right', V474} -> (begin (V475 = ('un--eval'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V474, V6)), V399))), V475 end(V471)) end end end end end; {'Core.CompileExpr.CCon', V476, V477, V478, V479, V480} -> begin (V482 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V481) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V481)) end, V480, []))), fun (V483) -> begin (V484 = (V482(V483))), case V484 of {'Prelude.Types.Left', V485} -> {'Prelude.Types.Left', V485}; {'Prelude.Types.Right', V486} -> (begin (V488 = fun (V487) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CCon', V476, V477, V478, V479, V486}))} end), V488 end(V483)) end end end end; {'Core.CompileExpr.COp', V489, V490, V491, V492} -> begin (V494 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V493) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V493)) end, V492))), fun (V495) -> begin (V496 = (V494(V495))), case V496 of {'Prelude.Types.Left', V497} -> {'Prelude.Types.Left', V497}; {'Prelude.Types.Right', V498} -> (begin (V500 = fun (V499) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.COp', V489, V490, V491, V498}))} end), V500 end(V495)) end end end end; {'Core.CompileExpr.CExtPrim', V501, V502, V503} -> begin (V505 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V504) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V504)) end, V503, []))), fun (V506) -> begin (V507 = (V505(V506))), case V507 of {'Prelude.Types.Left', V508} -> {'Prelude.Types.Left', V508}; {'Prelude.Types.Right', V509} -> (begin (V511 = fun (V510) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CExtPrim', V501, V502, V509}))} end), V511 end(V506)) end end end end; {'Core.CompileExpr.CForce', V512, V513, V514} -> begin (V515 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V514))), fun (V516) -> begin (V517 = (V515(V516))), case V517 of {'Prelude.Types.Left', V518} -> {'Prelude.Types.Left', V518}; {'Prelude.Types.Right', V519} -> (begin (V524 = case V519 of {'Core.CompileExpr.CDelay', V520, V521, V522} -> ('un--eval'([], V1, V2, V3, V4, {'Compiler.Inline.Nil'}, V6, V522)); _ -> fun (V523) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CForce', V512, V513, V519}))} end end), V524 end(V516)) end end end end; {'Core.CompileExpr.CDelay', V525, V526, V527} -> begin (V528 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V527))), fun (V529) -> begin (V530 = (V528(V529))), case V530 of {'Prelude.Types.Left', V531} -> {'Prelude.Types.Left', V531}; {'Prelude.Types.Right', V532} -> (begin (V534 = fun (V533) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CDelay', V525, V526, V532}))} end), V534 end(V529)) end end end end; {'Core.CompileExpr.CConCase', V535, V536, V537, V538} -> begin (V539 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V536))), fun (V540) -> begin (V541 = (V539(V540))), case V541 of {'Prelude.Types.Left', V542} -> {'Prelude.Types.Left', V542}; {'Prelude.Types.Right', V543} -> (begin (V588 = begin (V544 = ('nested--9647-4995--in--un--update'(V0, V1, V538, V537, V536, V535, V6, V5, V4, V3, V2, V0, V536, V5, V543))), begin (V545 = ('un--pickAlt'(V0, V1, V2, V3, V4, V544, V6, V543, V537, V538))), fun (V546) -> begin (V547 = (V545(V546))), case V547 of {'Prelude.Types.Left', V548} -> {'Prelude.Types.Left', V548}; {'Prelude.Types.Right', V549} -> (begin (V587 = case V549 of {'Prelude.Types.Nothing'} -> begin (V571 = case V538 of {'Prelude.Types.Nothing'} -> fun (V550) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V551} -> begin (V552 = ('un--eval'(V0, V1, V2, V3, V4, V544, V6, V551))), ((begin (V568 = fun (V563) -> fun (V564) -> fun (V565) -> fun (V566) -> fun (V567) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V565, V566, V567)) end end end end end), fun (V569) -> fun (V570) -> ((((V568('erased'))('erased'))(V569))(V570)) end end end((begin (V560 = fun (V554) -> fun (V555) -> fun (V556) -> fun (V557) -> case V557 of {'Prelude.Types.Left', V558} -> {'Prelude.Types.Left', V558}; {'Prelude.Types.Right', V559} -> {'Prelude.Types.Right', (V556(V559))} end end end end end), fun (V561) -> fun (V562) -> ((((V560('erased'))('erased'))(V561))(V562)) end end end(fun (V553) -> {'Prelude.Types.Just', V553} end))))(V552)) end end), fun (V572) -> begin (V573 = (V571(V572))), case V573 of {'Prelude.Types.Left', V574} -> {'Prelude.Types.Left', V574}; {'Prelude.Types.Right', V575} -> (begin (V584 = begin (V577 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V576) -> ('un--evalAlt'(V0, V1, V2, V3, V535, V4, V544, V6, V576)) end, V537, []))), fun (V578) -> begin (V579 = (V577(V578))), case V579 of {'Prelude.Types.Left', V580} -> {'Prelude.Types.Left', V580}; {'Prelude.Types.Right', V581} -> (begin (V583 = fun (V582) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CaseOpts':'un--caseOfCase'({'Core.CompileExpr.CConCase', V535, V543, V581, V575}))} end), V583 end(V578)) end end end end), V584 end(V572)) end end end end; {'Prelude.Types.Just', V585} -> fun (V586) -> {'Prelude.Types.Right', V585} end end), V587 end(V546)) end end end end end), V588 end(V540)) end end end end; {'Core.CompileExpr.CConstCase', V589, V590, V591, V592} -> begin (V593 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V590))), fun (V594) -> begin (V595 = (V593(V594))), case V595 of {'Prelude.Types.Left', V596} -> {'Prelude.Types.Left', V596}; {'Prelude.Types.Right', V597} -> (begin (V641 = begin (V598 = ('un--pickConstAlt'(V0, V1, V2, V3, V4, V5, V6, V597, V591, V592))), fun (V599) -> begin (V600 = (V598(V599))), case V600 of {'Prelude.Types.Left', V601} -> {'Prelude.Types.Left', V601}; {'Prelude.Types.Right', V602} -> (begin (V640 = case V602 of {'Prelude.Types.Nothing'} -> begin (V624 = case V592 of {'Prelude.Types.Nothing'} -> fun (V603) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V604} -> begin (V605 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V604))), ((begin (V621 = fun (V616) -> fun (V617) -> fun (V618) -> fun (V619) -> fun (V620) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V618, V619, V620)) end end end end end), fun (V622) -> fun (V623) -> ((((V621('erased'))('erased'))(V622))(V623)) end end end((begin (V613 = fun (V607) -> fun (V608) -> fun (V609) -> fun (V610) -> case V610 of {'Prelude.Types.Left', V611} -> {'Prelude.Types.Left', V611}; {'Prelude.Types.Right', V612} -> {'Prelude.Types.Right', (V609(V612))} end end end end end), fun (V614) -> fun (V615) -> ((((V613('erased'))('erased'))(V614))(V615)) end end end(fun (V606) -> {'Prelude.Types.Just', V606} end))))(V605)) end end), fun (V625) -> begin (V626 = (V624(V625))), case V626 of {'Prelude.Types.Left', V627} -> {'Prelude.Types.Left', V627}; {'Prelude.Types.Right', V628} -> (begin (V637 = begin (V630 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V629) -> ('un--evalConstAlt'(V0, V1, V2, V3, V4, V5, V6, V629)) end, V591, []))), fun (V631) -> begin (V632 = (V630(V631))), case V632 of {'Prelude.Types.Left', V633} -> {'Prelude.Types.Left', V633}; {'Prelude.Types.Right', V634} -> (begin (V636 = fun (V635) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CaseOpts':'un--caseOfCase'({'Core.CompileExpr.CConstCase', V589, V597, V634, V628}))} end), V636 end(V631)) end end end end), V637 end(V625)) end end end end; {'Prelude.Types.Just', V638} -> fun (V639) -> {'Prelude.Types.Right', V638} end end), V640 end(V599)) end end end end), V641 end(V594)) end end end end; {'Core.CompileExpr.CPrimVal', V642, V643} -> fun (V644) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CPrimVal', V642, V643}))} end; {'Core.CompileExpr.CErased', V645} -> fun (V646) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CErased', V645}))} end; {'Core.CompileExpr.CCrash', V647, V648} -> fun (V649) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CCrash', V647, V648}))} end end end end(E0, E1)); _ -> case V7 of {'Core.CompileExpr.CLet', V650, V651, V652, V653, V654} -> case V652 of 1 -> begin (V655 = ('un--genName'(V3, <<"letv"/utf8>>))), fun (V656) -> begin (V657 = (V655(V656))), case V657 of {'Prelude.Types.Left', V658} -> {'Prelude.Types.Left', V658}; {'Prelude.Types.Right', V659} -> (begin (V673 = begin (V660 = ('un--eval'([V651 | V0], V1, V2, V3, V4, {'Compiler.Inline.::', {'Core.CompileExpr.CRef', V650, V659}, V5}, [], V654))), fun (V661) -> begin (V662 = (V660(V661))), case V662 of {'Prelude.Types.Left', V663} -> {'Prelude.Types.Left', V663}; {'Prelude.Types.Right', V664} -> (begin (V672 = begin (V665 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V653))), fun (V666) -> begin (V667 = (V665(V666))), case V667 of {'Prelude.Types.Left', V668} -> {'Prelude.Types.Left', V668}; {'Prelude.Types.Right', V669} -> (begin (V671 = fun (V670) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CLet', V650, V651, 1, V669, ('un--refToLocal'(V659, V651, V664))}))} end), V671 end(V666)) end end end end), V672 end(V661)) end end end end), V673 end(V656)) end end end end; 0 -> begin (V674 = ('un--used'([V651 | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, V1))], 0, V654))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V674, 1)) of 1 -> begin (V675 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V653))), fun (V676) -> begin (V677 = (V675(V676))), case V677 of {'Prelude.Types.Left', V678} -> {'Prelude.Types.Left', V678}; {'Prelude.Types.Right', V679} -> (begin (V680 = ('un--eval'([V651 | V0], V1, V2, V3, V4, {'Compiler.Inline.::', V679, V5}, V6, V654))), V680 end(V676)) end end end end; 0 -> begin (V681 = ('un--genName'(V3, <<"letv"/utf8>>))), fun (V682) -> begin (V683 = (V681(V682))), case V683 of {'Prelude.Types.Left', V684} -> {'Prelude.Types.Left', V684}; {'Prelude.Types.Right', V685} -> (begin (V699 = begin (V686 = ('un--eval'([V651 | V0], V1, V2, V3, V4, {'Compiler.Inline.::', {'Core.CompileExpr.CRef', V650, V685}, V5}, V6, V654))), fun (V687) -> begin (V688 = (V686(V687))), case V688 of {'Prelude.Types.Left', V689} -> {'Prelude.Types.Left', V689}; {'Prelude.Types.Right', V690} -> (begin (V698 = begin (V691 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V653))), fun (V692) -> begin (V693 = (V691(V692))), case V693 of {'Prelude.Types.Left', V694} -> {'Prelude.Types.Left', V694}; {'Prelude.Types.Right', V695} -> (begin (V697 = fun (V696) -> {'Prelude.Types.Right', {'Core.CompileExpr.CLet', V650, V651, 0, V695, ('un--refToLocal'(V685, V651, V690))}} end), V697 end(V692)) end end end end), V698 end(V687)) end end end end), V699 end(V682)) end end end end end end end; {'Core.CompileExpr.CApp', V700, V701, V702} -> case V701 of {'Core.CompileExpr.CRef', V703, V704} -> begin (V710 = begin (V705 = V2), fun (V706) -> begin (V709 = (begin (V707 = V705), fun (V708) -> ('erlang':'get'(V707)) end end(V706))), {'Prelude.Types.Right', V709} end end end), fun (V711) -> begin (V712 = (V710(V711))), case V712 of {'Prelude.Types.Left', V713} -> {'Prelude.Types.Left', V713}; {'Prelude.Types.Right', V714} -> (begin (V770 = begin (V747 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V704, case V714 of {'Core.Context.MkDefs', V715, V716, V717, V718, V719, V720, V721, V722, V723, V724, V725, V726, V727, V728, V729, V730, V731, V732, V733, V734, V735, V736, V737, V738, V739, V740, V741, V742, V743, V744, V745, V746} -> V715 end))), fun (V748) -> begin (V749 = (V747(V748))), case V749 of {'Prelude.Types.Left', V750} -> {'Prelude.Types.Left', V750}; {'Prelude.Types.Right', V751} -> (begin (V769 = begin (V752 = {'Core.CompileExpr.CRef', V703, V704}), case V751 of {'Prelude.Types.Just', V753} -> begin (V755 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V754) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V754)) end, V702, []))), fun (V756) -> begin (V757 = (V755(V756))), case V757 of {'Prelude.Types.Left', V758} -> {'Prelude.Types.Left', V758}; {'Prelude.Types.Right', V759} -> (begin (V760 = ('un--eval'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V759, V6)), V752))), V760 end(V756)) end end end end; {'Prelude.Types.Nothing'} -> begin (V762 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V761) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V761)) end, V702, []))), fun (V763) -> begin (V764 = (V762(V763))), case V764 of {'Prelude.Types.Left', V765} -> {'Prelude.Types.Left', V765}; {'Prelude.Types.Right', V766} -> (begin (V768 = fun (V767) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CApp', V700, {'Core.CompileExpr.CRef', V703, V704}, V766}))} end), V768 end(V763)) end end end end end end), V769 end(V748)) end end end end), V770 end(V711)) end end end end; _ -> begin (V772 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V771) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V771)) end, V702, []))), fun (V773) -> begin (V774 = (V772(V773))), case V774 of {'Prelude.Types.Left', V775} -> {'Prelude.Types.Left', V775}; {'Prelude.Types.Right', V776} -> (begin (V777 = ('un--eval'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V776, V6)), V701))), V777 end(V773)) end end end end end; {'Core.CompileExpr.CCon', V778, V779, V780, V781, V782} -> begin (V784 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V783) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V783)) end, V782, []))), fun (V785) -> begin (V786 = (V784(V785))), case V786 of {'Prelude.Types.Left', V787} -> {'Prelude.Types.Left', V787}; {'Prelude.Types.Right', V788} -> (begin (V790 = fun (V789) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CCon', V778, V779, V780, V781, V788}))} end), V790 end(V785)) end end end end; {'Core.CompileExpr.COp', V791, V792, V793, V794} -> begin (V796 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V795) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V795)) end, V794))), fun (V797) -> begin (V798 = (V796(V797))), case V798 of {'Prelude.Types.Left', V799} -> {'Prelude.Types.Left', V799}; {'Prelude.Types.Right', V800} -> (begin (V802 = fun (V801) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.COp', V791, V792, V793, V800}))} end), V802 end(V797)) end end end end; {'Core.CompileExpr.CExtPrim', V803, V804, V805} -> begin (V807 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V806) -> ('un--eval'(V0, V1, V2, V3, V4, V5, [], V806)) end, V805, []))), fun (V808) -> begin (V809 = (V807(V808))), case V809 of {'Prelude.Types.Left', V810} -> {'Prelude.Types.Left', V810}; {'Prelude.Types.Right', V811} -> (begin (V813 = fun (V812) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CExtPrim', V803, V804, V811}))} end), V813 end(V808)) end end end end; {'Core.CompileExpr.CForce', V814, V815, V816} -> begin (V817 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V816))), fun (V818) -> begin (V819 = (V817(V818))), case V819 of {'Prelude.Types.Left', V820} -> {'Prelude.Types.Left', V820}; {'Prelude.Types.Right', V821} -> (begin (V826 = case V821 of {'Core.CompileExpr.CDelay', V822, V823, V824} -> ('un--eval'([], V1, V2, V3, V4, {'Compiler.Inline.Nil'}, V6, V824)); _ -> fun (V825) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CForce', V814, V815, V821}))} end end), V826 end(V818)) end end end end; {'Core.CompileExpr.CDelay', V827, V828, V829} -> begin (V830 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V829))), fun (V831) -> begin (V832 = (V830(V831))), case V832 of {'Prelude.Types.Left', V833} -> {'Prelude.Types.Left', V833}; {'Prelude.Types.Right', V834} -> (begin (V836 = fun (V835) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CDelay', V827, V828, V834}))} end), V836 end(V831)) end end end end; {'Core.CompileExpr.CConCase', V837, V838, V839, V840} -> begin (V841 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V838))), fun (V842) -> begin (V843 = (V841(V842))), case V843 of {'Prelude.Types.Left', V844} -> {'Prelude.Types.Left', V844}; {'Prelude.Types.Right', V845} -> (begin (V890 = begin (V846 = ('nested--9647-4995--in--un--update'(V0, V1, V840, V839, V838, V837, V6, V5, V4, V3, V2, V0, V838, V5, V845))), begin (V847 = ('un--pickAlt'(V0, V1, V2, V3, V4, V846, V6, V845, V839, V840))), fun (V848) -> begin (V849 = (V847(V848))), case V849 of {'Prelude.Types.Left', V850} -> {'Prelude.Types.Left', V850}; {'Prelude.Types.Right', V851} -> (begin (V889 = case V851 of {'Prelude.Types.Nothing'} -> begin (V873 = case V840 of {'Prelude.Types.Nothing'} -> fun (V852) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V853} -> begin (V854 = ('un--eval'(V0, V1, V2, V3, V4, V846, V6, V853))), ((begin (V870 = fun (V865) -> fun (V866) -> fun (V867) -> fun (V868) -> fun (V869) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V867, V868, V869)) end end end end end), fun (V871) -> fun (V872) -> ((((V870('erased'))('erased'))(V871))(V872)) end end end((begin (V862 = fun (V856) -> fun (V857) -> fun (V858) -> fun (V859) -> case V859 of {'Prelude.Types.Left', V860} -> {'Prelude.Types.Left', V860}; {'Prelude.Types.Right', V861} -> {'Prelude.Types.Right', (V858(V861))} end end end end end), fun (V863) -> fun (V864) -> ((((V862('erased'))('erased'))(V863))(V864)) end end end(fun (V855) -> {'Prelude.Types.Just', V855} end))))(V854)) end end), fun (V874) -> begin (V875 = (V873(V874))), case V875 of {'Prelude.Types.Left', V876} -> {'Prelude.Types.Left', V876}; {'Prelude.Types.Right', V877} -> (begin (V886 = begin (V879 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V878) -> ('un--evalAlt'(V0, V1, V2, V3, V837, V4, V846, V6, V878)) end, V839, []))), fun (V880) -> begin (V881 = (V879(V880))), case V881 of {'Prelude.Types.Left', V882} -> {'Prelude.Types.Left', V882}; {'Prelude.Types.Right', V883} -> (begin (V885 = fun (V884) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CaseOpts':'un--caseOfCase'({'Core.CompileExpr.CConCase', V837, V845, V883, V877}))} end), V885 end(V880)) end end end end), V886 end(V874)) end end end end; {'Prelude.Types.Just', V887} -> fun (V888) -> {'Prelude.Types.Right', V887} end end), V889 end(V848)) end end end end end), V890 end(V842)) end end end end; {'Core.CompileExpr.CConstCase', V891, V892, V893, V894} -> begin (V895 = ('un--eval'(V0, V1, V2, V3, V4, V5, [], V892))), fun (V896) -> begin (V897 = (V895(V896))), case V897 of {'Prelude.Types.Left', V898} -> {'Prelude.Types.Left', V898}; {'Prelude.Types.Right', V899} -> (begin (V943 = begin (V900 = ('un--pickConstAlt'(V0, V1, V2, V3, V4, V5, V6, V899, V893, V894))), fun (V901) -> begin (V902 = (V900(V901))), case V902 of {'Prelude.Types.Left', V903} -> {'Prelude.Types.Left', V903}; {'Prelude.Types.Right', V904} -> (begin (V942 = case V904 of {'Prelude.Types.Nothing'} -> begin (V926 = case V894 of {'Prelude.Types.Nothing'} -> fun (V905) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V906} -> begin (V907 = ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V906))), ((begin (V923 = fun (V918) -> fun (V919) -> fun (V920) -> fun (V921) -> fun (V922) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V920, V921, V922)) end end end end end), fun (V924) -> fun (V925) -> ((((V923('erased'))('erased'))(V924))(V925)) end end end((begin (V915 = fun (V909) -> fun (V910) -> fun (V911) -> fun (V912) -> case V912 of {'Prelude.Types.Left', V913} -> {'Prelude.Types.Left', V913}; {'Prelude.Types.Right', V914} -> {'Prelude.Types.Right', (V911(V914))} end end end end end), fun (V916) -> fun (V917) -> ((((V915('erased'))('erased'))(V916))(V917)) end end end(fun (V908) -> {'Prelude.Types.Just', V908} end))))(V907)) end end), fun (V927) -> begin (V928 = (V926(V927))), case V928 of {'Prelude.Types.Left', V929} -> {'Prelude.Types.Left', V929}; {'Prelude.Types.Right', V930} -> (begin (V939 = begin (V932 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V931) -> ('un--evalConstAlt'(V0, V1, V2, V3, V4, V5, V6, V931)) end, V893, []))), fun (V933) -> begin (V934 = (V932(V933))), case V934 of {'Prelude.Types.Left', V935} -> {'Prelude.Types.Left', V935}; {'Prelude.Types.Right', V936} -> (begin (V938 = fun (V937) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.CaseOpts':'un--caseOfCase'({'Core.CompileExpr.CConstCase', V891, V899, V936, V930}))} end), V938 end(V933)) end end end end), V939 end(V927)) end end end end; {'Prelude.Types.Just', V940} -> fun (V941) -> {'Prelude.Types.Right', V940} end end), V942 end(V901)) end end end end), V943 end(V896)) end end end end; {'Core.CompileExpr.CPrimVal', V944, V945} -> fun (V946) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CPrimVal', V944, V945}))} end; {'Core.CompileExpr.CErased', V947} -> fun (V948) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CErased', V947}))} end; {'Core.CompileExpr.CCrash', V949, V950} -> fun (V951) -> {'Prelude.Types.Right', ('un--unload'(V6, {'Core.CompileExpr.CCrash', V949, V950}))} end end end end.
'un--doEval'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.Inline.LVar'}, 0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V28 = begin (V9 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"compiler.inline.eval"/utf8>>, 10, fun () -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary, <<<<": "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_(CExp $vars)'(V0, V3))/binary>>/binary>> end))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V27 = begin (V14 = ('un--eval'([], V0, V1, V8, [], {'Compiler.Inline.Nil'}, [], V3))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V26 = begin (V19 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"compiler.inline.eval"/utf8>>, 10, fun () -> <<<<"Inlined: "/utf8>>/binary, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_(CExp $vars)'(V0, V18))/binary>> end))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', V18} end), V25 end(V20)) end end end end), V26 end(V15)) end end end end), V27 end(V10)) end end end end), V28 end(V5)) end end end end.
'un--compileAndInlineAll'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V112 = begin (V43 = ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V10 of {'Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} -> V35 end))), begin (V45 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V44) -> ('nested--14555-7865--in--un--nonErased'(V0, V44)) end, V43))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V111 = begin (V51 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V50) -> ('Idris.Idris2.Compiler.CompileExpr':'un--compileDef'(V0, V50)) end, V49))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V110 = begin (V57 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V56) -> ('Idris.Idris2.Compiler.Opts.Identity':'un--rewriteIdentityFlag'(V0, V56)) end, V49))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V109 = begin (V62 = ('nested--14555-7864--in--un--transform'(V0, 3, V49))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V108 = begin (V68 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V67) -> ('un--updateCallGraph'(V0, V67)) end, V49))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V107 = begin (V73 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V74) -> begin (V75 = (V73(V74))), case V75 of {'Prelude.Types.Left', V76} -> {'Prelude.Types.Left', V76}; {'Prelude.Types.Right', V77} -> (begin (V106 = case ('Idris.Idris2.Data.List':'un--isNil'(case V77 of {'Core.Options.MkSessionOpts', V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103} -> V101 end)) of 1 -> fun (V104) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V105) -> ('un--addArityHash'(V0, V105)) end, V49)) end), V106 end(V74)) end end end end), V107 end(V69)) end end end end), V108 end(V63)) end end end end), V109 end(V58)) end end end end), V110 end(V52)) end end end end), V111 end(V46)) end end end end end), V112 end(V7)) end end end end.
'un--addRefsConstAlts'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Core.CompileExpr.MkConstAlt', V4, V5} -> ('un--addRefsConstAlts'(('un--addRefs'(V0, V5)), V3)) end end(E0, E1)) end.
'un--addRefsConAlts'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Core.CompileExpr.MkConAlt', V4, V5, V6, V7, V8} -> ('un--addRefsConAlts'(('un--addRefs'(V0, V8)), V3)) end end(E0, E1)) end.
'un--addRefsArgs'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> ('un--addRefsArgs'(('un--addRefs'(V0, V2)), V3)) end(E0, E1)) end.
'un--addRefs'(V0, V1) -> case V1 of {'Core.CompileExpr.CRef', V2, V3} -> ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V3, 0, V0)); {'Core.CompileExpr.CLam', V4, V5, V6} -> ('un--addRefs'(V0, V6)); {'Core.CompileExpr.CLet', V7, V8, V9, V10, V11} -> ('un--addRefs'(('un--addRefs'(V0, V10)), V11)); {'Core.CompileExpr.CApp', V12, V13, V14} -> ('un--addRefsArgs'(('un--addRefs'(V0, V13)), V14)); {'Core.CompileExpr.CCon', V15, V16, V17, V18, V19} -> ('un--addRefsArgs'(('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V16, 0, V0)), V19)); {'Core.CompileExpr.COp', V20, V21, V22, V23} -> ('un--addRefsArgs'(V0, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V23)))); {'Core.CompileExpr.CExtPrim', V24, V25, V26} -> ('un--addRefsArgs'(V0, V26)); {'Core.CompileExpr.CForce', V27, V28, V29} -> ('un--addRefs'(V0, V29)); {'Core.CompileExpr.CDelay', V30, V31, V32} -> ('un--addRefs'(V0, V32)); {'Core.CompileExpr.CConCase', V33, V34, V35, V36} -> begin (V38 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V0 end, fun () -> fun (V37) -> ('un--addRefs'(V0, V37)) end end, V36))), ('un--addRefsConAlts'(('un--addRefs'(V38, V34)), V35)) end; {'Core.CompileExpr.CConstCase', V39, V40, V41, V42} -> begin (V44 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V0 end, fun () -> fun (V43) -> ('un--addRefs'(V0, V43)) end end, V42))), ('un--addRefsConstAlts'(('un--addRefs'(V44, V40)), V41)) end; _ -> V0 end.
'un--addArityHash'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V117 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V116 = case V48 of {'Prelude.Types.Just', V49} -> case V49 of {'Core.Context.Context.MkGlobalDef', V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71} -> case V68 of {'Prelude.Types.Just', V72} -> case V72 of {'Core.CompileExpr.MkFun', V73, V74} -> case case V49 of {'Core.Context.Context.MkGlobalDef', V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96} -> V84 end of 0 -> fun (V97) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; _ -> ('Idris.Idris2.Core.Context':'un--addHash'(V0, {'Core.Hash.dn--un--__mkHashable', fun (V98) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Core.Hash.dn--un--__mkHashable', fun (V99) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V99)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V100, V101)) end end}, {'Core.Hash.dn--un--__mkHashable', fun (V102) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Nat'(V102)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Nat'(V103, V104)) end end}, V98)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Core.Hash.dn--un--__mkHashable', fun (V107) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V107)) end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V108, V109)) end end}, {'Core.Hash.dn--un--__mkHashable', fun (V110) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Nat'(V110)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Nat'(V111, V112)) end end}, V105, V106)) end end}, {'Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V73))})) end; _ -> fun (V113) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; {'Prelude.Types.Nothing'} -> fun (V114) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end; {'Prelude.Types.Nothing'} -> fun (V115) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V116 end(V45)) end end end end), V117 end(V8)) end end end end.
