-module('Idris.Idris2.Parser.Source').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--5654-5862--in--un--state'/17,
  'un--runParserTo'/6,
  'un--runParser'/5,
  'un--parseFile'/4
]).
'nested--5654-5862--in--un--state'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case ('Idris.Idris2.Parser.Rule.Source':'un--toState'(V11)) of {'Parser.Rule.Source.MkState', V17, V18} -> {'Parser.Rule.Source.MkState', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V15, V17)), V18} end.
'un--runParserTo'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('Idris.Idris2.Parser.Unlit':'un--unlit'(V2, V4)) of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromLitError'(V1, V6))}; {'Prelude.Types.Right', V7} -> {'Prelude.Types.Right', V7} end, fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('Idris.Idris2.Parser.Lexer.Source':'un--lexTo'(V3, V8)) of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromLexError'(V1, V9))}; {'Prelude.Types.Right', V10} -> {'Prelude.Types.Right', V10} end, fun (V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('Idris.Idris2.Libraries.Text.Parser.Core':'un--parseWith'({'Prelude.Interfaces.MkMonoid', fun (V14) -> fun (V15) -> ('Idris.Idris2.Parser.Rule.Source':'dn--un--<+>_Semigroup_ParsingState'(V14, V15)) end end, ('Idris.Idris2.Parser.Rule.Source':'dn--un--neutral_Monoid_ParsingState'())}, V0, V5, V13)) of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromParsingErrors'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V17) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--show_Show_Token'(V17)) end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--showPrec_Show_Token'(V18, V19)) end end}, {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V20) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--pretty_Pretty_Void_Token'(V20)) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--prettyPrec_Pretty_Void_Token'(V21, V22)) end end}}, V1, V16))}; {'Prelude.Types.Right', V23} -> {'Prelude.Types.Right', V23} end, fun (V24) -> begin (V25 = {'Builtin.MkPair', V12, V13}), case V24 of {'Builtin.MkPair', V26, V27} -> case V27 of {'Builtin.MkPair', V28, V29} -> case V29 of {'Builtin.MkPair', V30, V31} -> begin (V40 = ((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(fun (V32) -> {'Builtin.MkPair', {'Builtin.MkPair', V1, {'Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Bounded':'un--start'(V32)), ('Idris.Idris2.Libraries.Text.Bounded':'un--end'(V32))}}, {'Builtin.MkPair', 0, {'Prelude.Types.Nothing'}}} end))(V12))), begin (V53 = ((begin (V50 = fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V48, V49)) end end end end), fun (V51) -> fun (V52) -> ((((V50('erased'))('erased'))(V51))(V52)) end end end(fun (V41) -> case V41 of {'Builtin.MkPair', V42, V43} -> begin (V45 = fun (V44) -> {'Core.FC.MkFC', V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--startBounds'(V44)), ('Idris.Idris2.Libraries.Text.Bounded':'un--endBounds'(V44))} end), {'Core.Core.ParserWarning', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Core.FC.EmptyFC'} end, fun () -> V45 end, V42)), V43} end end end))(V28))), {'Prelude.Types.Right', {'Builtin.MkPair', V53, {'Builtin.MkPair', ('nested--5654-5862--in--un--state'(V0, V5, V4, V3, V2, V1, V8, V12, V13, V25, V31, V26, V28, V30, V24, V40, V53)), V30}}} end end end end end end end)) end end)) end)).
'un--runParser'(V0, V1, V2, V3, V4) -> ('un--runParserTo'(V0, V1, V2, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V5) -> 0 end)), V3, V4)).
'un--parseFile'(V0, V1, V2, V3) -> begin (V31 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V0))(V3))), case V31 of {'Prelude.Types.Right', V32} -> ('un--runParser'(1, V1, ('Idris.Idris2.Parser.Unlit':'un--isLitFile'(V0)), V32, V2)); {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', {'Core.Core.FileErr', V0, V33}} end end.
