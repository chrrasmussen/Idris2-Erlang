-module('Idris.Idris2.System.Escape').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--escapeArg-1122'/3,
  'case--case block in escapeArg,escapeArgChar-1086'/3,
  'case--case block in escapeArg,escapeArgChar-1031'/3,
  'case--escapeArg,escapeArgChar-895'/3,
  'nested--3044-886--in--un--escapeArgChar'/2,
  'un--escapeCmd'/1,
  'un--escapeArg'/1
]).
'case--escapeArg-1122'(V0, V1, V2) -> case V2 of 1 -> V1; 0 -> <<<<"\x{22}"/utf8>>/binary, <<V1/binary, <<"\x{22}"/utf8>>/binary>>/binary>> end.
'case--case block in escapeArg,escapeArgChar-1086'(V0, V1, V2) -> case V2 of 1 -> [$\x{5c} | [V1 | []]]; 0 -> [V1 | []] end.
'case--case block in escapeArg,escapeArgChar-1031'(V0, V1, V2) -> case V2 of 1 -> [$^ | [V1 | []]]; 0 -> [V1 | []] end.
'case--escapeArg,escapeArgChar-895'(V0, V1, V2) -> case V2 of 1 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $%)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $^)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $&)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $<)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $>)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $|)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{27})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{22})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $`)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $ )) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{9})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{a})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $;)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $,)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $=)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{b})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{c})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{ff})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $()) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $))) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $!)) end end end end end end end end end end end end end end end end end end end end of 1 -> [$^ | [V1 | []]]; 0 -> [V1 | []] end; 0 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $$)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $`)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{5c})) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{22})) end end end of 1 -> [$\x{5c} | [V1 | []]]; 0 -> [V1 | []] end end.
'nested--3044-886--in--un--escapeArgChar'(V0, V1) -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $%)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $^)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $&)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $<)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $>)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $|)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{27})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{22})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $`)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $ )) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{9})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{a})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $;)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $,)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $=)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{b})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{c})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{ff})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $()) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $))) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $!)) end end end end end end end end end end end end end end end end end end end end of 1 -> [$^ | [V1 | []]]; 0 -> [V1 | []] end; 0 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $$)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $`)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{5c})) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $\x{22})) end end end of 1 -> [$\x{5c} | [V1 | []]]; 0 -> [V1 | []] end end.
'un--escapeCmd'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> <<V1/binary, V2/binary>> end end, <<""/utf8>>}, fun (V3) -> V3 end, ('Idris.Idris2.Data.List':'un--intersperse'(<<" "/utf8>>, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> ('un--escapeArg'(V4)) end))(V0)))))).
'un--escapeArg'(V0) -> begin (V2 = ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types':'un--listBind'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), fun (V1) -> ('nested--3044-886--in--un--escapeArgChar'(V0, V1)) end))))), case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> V2; 0 -> <<<<"\x{22}"/utf8>>/binary, <<V2/binary, <<"\x{22}"/utf8>>/binary>>/binary>> end end.
