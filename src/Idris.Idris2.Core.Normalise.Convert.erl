-module('Idris.Idris2.Core.Normalise.Convert').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--getMatchingVars-8866'/10,
  'case--case block in getMatchingVarAlt-8456'/14,
  'nested--7850-8179--in--un--weakenP'/18,
  'nested--7171-7019--in--un--weakenP'/9,
  'nested--7171-7017--in--un--tryUpdatePi'/8,
  'nested--7171-7018--in--un--tryUpdateB'/8,
  'nested--7810-7824--in--un--quickConvHead'/6,
  'nested--7810-7825--in--un--quickConvArg'/6,
  'nested--7974-9564--in--un--getScrutinee'/15,
  'nested--12487-11874--in--un--getInfPos'/13,
  'nested--7937-9024--in--un--getArgPos'/12,
  'nested--7171-6836--in--un--findIdx'/8,
  'nested--7974-9563--in--un--findArgPos'/14,
  'nested--7850-8180--in--un--extend'/16,
  'nested--7850-8181--in--un--dropV'/15,
  'nested--7850-8182--in--un--dropP'/16,
  'nested--12487-11875--in--un--dropInf'/15,
  'nested--7937-9025--in--un--convertMatches'/13,
  'nested--12487-11877--in--un--args2'/12,
  'nested--12487-11876--in--un--args1'/12,
  'dn--un--convert_Convert_Term'/6,
  'dn--un--convert_Convert_NF'/6,
  'dn--un--convert_Convert_Closure'/6,
  'dn--un--convertInf_Convert_Term'/6,
  'dn--un--convertInf_Convert_NF'/6,
  'dn--un--convertInf_Convert_Closure'/6,
  'dn--un--convGen_Convert_Term'/8,
  'dn--un--convGen_Convert_NF'/8,
  'dn--un--convGen_Convert_Closure'/8,
  'dn--un--__Impl_Convert_Term'/0,
  'dn--un--__Impl_Convert_NF'/0,
  'dn--un--__Impl_Convert_Closure'/0,
  'un--tryUpdate'/4,
  'un--quickConv'/2,
  'un--getMatchingVars'/7,
  'un--getMatchingVarAlts'/7,
  'un--getMatchingVarAlt'/7,
  'un--convertInf'/6,
  'un--convert'/6,
  'un--convGen'/6,
  'un--convBinders'/8,
  'un--chkSameDefs'/10,
  'un--chkConvHead'/8,
  'un--chkConvCaseBlock'/11,
  'un--allConvNF'/8,
  'un--allConv'/8
]).
'case--getMatchingVars-8866'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Prelude.Types.Just', V10} -> begin (V11 = ('dn--un--convert_Convert_Term'(V8, V1, V7, ('Idris.Idris2.Core.Env':'un--mkEnv'(('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V1)), V10, V4))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> case V15 of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Just', V6}}; 0 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V17 end(V12)) end end end end; {'Prelude.Types.Nothing'} -> fun (V18) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'case--case block in getMatchingVarAlt-8456'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Prelude.Types.Just', V14} -> begin (V15 = ('un--getMatchingVars'(V12, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V2, V0)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V1)), V11, V14, V3, V7))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V23 = fun (V20) -> case V19 of {'Prelude.Types.Just', V21} -> {'Prelude.Types.Right', {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V22) -> ('nested--7850-8182--in--un--dropP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V2, V6, V22)) end, V21))}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V23 end(V16)) end end end end; {'Prelude.Types.Nothing'} -> fun (V24) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'nested--7850-8179--in--un--weakenP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Builtin.MkPair', V18, V19} -> {'Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V18)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V19))} end.
'nested--7171-7019--in--un--weakenP'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V9)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V10))} end.
'nested--7171-7017--in--un--tryUpdatePi'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.TT.Explicit'} -> {'Prelude.Types.Just', {'Core.TT.Explicit'}}; {'Core.TT.Implicit'} -> {'Prelude.Types.Just', {'Core.TT.Implicit'}}; {'Core.TT.AutoImplicit'} -> {'Prelude.Types.Just', {'Core.TT.AutoImplicit'}}; {'Core.TT.DefImplicit', V8} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V8)), fun (V9) -> {'Prelude.Types.Just', {'Core.TT.DefImplicit', V9}} end)) end.
'nested--7171-7018--in--un--tryUpdateB'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.TT.Lam', V8, V9, V10, V11} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7171-7017--in--un--tryUpdatePi'(V0, V1, V2, V3, V4, V5, V6, V10)), fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V11)), fun (V13) -> {'Prelude.Types.Just', {'Core.TT.Lam', V8, V9, V12, V13}} end)) end)); {'Core.TT.Let', V14, V15, V16, V17} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V16)), fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V17)), fun (V19) -> {'Prelude.Types.Just', {'Core.TT.Let', V14, V15, V18, V19}} end)) end)); {'Core.TT.Pi', V20, V21, V22, V23} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7171-7017--in--un--tryUpdatePi'(V0, V1, V2, V3, V4, V5, V6, V22)), fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V23)), fun (V25) -> {'Prelude.Types.Just', {'Core.TT.Pi', V20, V21, V24, V25}} end)) end)); _ -> {'Prelude.Types.Nothing'} end.
'nested--7810-7824--in--un--quickConvHead'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Core.Value.NLocal', V6, V7} -> case V5 of {'Core.Value.NLocal', V8, V9} -> 1; _ -> 0 end; {'Core.Value.NRef', V10, V11} -> case V5 of {'Core.Value.NRef', V12, V13} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V13)); _ -> 0 end; {'Core.Value.NMeta', V14, V15, V16} -> case V5 of {'Core.Value.NMeta', V17, V18, V19} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V14, V17)); _ -> 0 end; _ -> 0 end.
'nested--7810-7825--in--un--quickConvArg'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Core.Value.NBind', V6, V7, V8, V9} -> 1; _ -> case V5 of {'Core.Value.NBind', V10, V11, V12, V13} -> 1; _ -> case V4 of {'Core.Value.NApp', V14, V15, V16} -> case V5 of {'Core.Value.NApp', V17, V18, V19} -> ('nested--7810-7824--in--un--quickConvHead'(V0, V1, V2, V3, V15, V18)); _ -> case V5 of {'Core.Value.NErased', V20, V21} -> 1; _ -> 0 end end; {'Core.Value.NDCon', V22, V23, V24, V25, V26} -> case V5 of {'Core.Value.NDCon', V27, V28, V29, V30, V31} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V24, V29)); _ -> case V5 of {'Core.Value.NErased', V32, V33} -> 1; _ -> 0 end end; {'Core.Value.NTCon', V34, V35, V36, V37, V38} -> case V5 of {'Core.Value.NTCon', V39, V40, V41, V42, V43} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V35, V40)); _ -> case V5 of {'Core.Value.NErased', V44, V45} -> 1; _ -> 0 end end; {'Core.Value.NAs', V46, V47, V48, V49} -> case V5 of {'Core.Value.NAs', V50, V51, V52, V53} -> ('nested--7810-7825--in--un--quickConvArg'(V0, V1, V2, V3, V49, V53)); _ -> case V5 of {'Core.Value.NErased', V54, V55} -> 1; _ -> 0 end end; {'Core.Value.NDelayed', V56, V57, V58} -> case V5 of {'Core.Value.NDelayed', V59, V60, V61} -> ('nested--7810-7825--in--un--quickConvArg'(V0, V1, V2, V3, V58, V61)); _ -> case V5 of {'Core.Value.NErased', V62, V63} -> 1; _ -> 0 end end; {'Core.Value.NDelay', V64, V65, V66, V67} -> case V5 of {'Core.Value.NDelay', V68, V69, V70, V71} -> 1; _ -> case V5 of {'Core.Value.NErased', V72, V73} -> 1; _ -> 0 end end; {'Core.Value.NForce', V74, V75, V76, V77} -> case V5 of {'Core.Value.NForce', V78, V79, V80, V81} -> ('nested--7810-7825--in--un--quickConvArg'(V0, V1, V2, V3, V76, V80)); _ -> case V5 of {'Core.Value.NErased', V82, V83} -> 1; _ -> 0 end end; {'Core.Value.NPrimVal', V84, V85} -> case V5 of {'Core.Value.NPrimVal', V86, V87} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V85, V87)); _ -> case V5 of {'Core.Value.NErased', V88, V89} -> 1; _ -> 0 end end; {'Core.Value.NType', V90, V91} -> case V5 of {'Core.Value.NType', V92, V93} -> 1; _ -> case V5 of {'Core.Value.NErased', V94, V95} -> 1; _ -> 0 end end; {'Core.Value.NErased', V96, V97} -> 1; _ -> case V5 of {'Core.Value.NErased', V98, V99} -> 1; _ -> 0 end end end end.
'nested--7974-9564--in--un--getScrutinee'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of 0 -> case V14 of [E2 | E3] -> (fun (V15, V16) -> {'Prelude.Types.Just', V15} end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end; _ -> begin (V17 = (V13 - 1)), case V14 of [E0 | E1] -> (fun (V18, V19) -> ('nested--7974-9564--in--un--getScrutinee'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V17, V19)) end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end end end.
'nested--12487-11874--in--un--getInfPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Core.Value.NRef', V13, V14} -> case V9 of 1 -> begin (V47 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V14, case V8 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> V15 end))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V76 = fun (V52) -> case V51 of {'Prelude.Types.Just', V53} -> {'Prelude.Types.Right', case V53 of {'Core.Context.Context.MkGlobalDef', V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75} -> V60 end}; _ -> {'Prelude.Types.Right', []} end end), V76 end(V48)) end end end end; 0 -> fun (V77) -> {'Prelude.Types.Right', []} end end; _ -> fun (V78) -> {'Prelude.Types.Right', []} end end.
'nested--7937-9024--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> {'Prelude.Types.Nothing'}; _ -> case V10 of 0 -> case V11 of [E2 | E3] -> (fun (V12, V13) -> {'Prelude.Types.Just', V12} end(E2, E3)) end; _ -> begin (V14 = (V10 - 1)), case V11 of [E0 | E1] -> (fun (V15, V16) -> ('nested--7937-9024--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V14, V16)) end(E0, E1)) end end end end.
'nested--7171-6836--in--un--findIdx'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Builtin.MkPair', V10, V11} -> begin (V12 = V10), case case (V12 =:= V7) of 'false' -> 0; _ -> 1 end of 1 -> {'Prelude.Types.Just', V11}; 0 -> ('nested--7171-6836--in--un--findIdx'(V0, V1, V2, V3, V4, V5, V9, V7)) end end end end(E0, E1)) end.
'nested--7974-9563--in--un--findArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Core.Case.CaseTree.Case', V14, V15, V16, V17} -> {'Prelude.Types.Just', V15}; _ -> {'Prelude.Types.Nothing'} end.
'nested--7850-8180--in--un--extend'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V13 of [] -> case V14 of [] -> {'Prelude.Types.Just', V15}; _ -> {'Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V16, V17) -> case V14 of [E2 | E3] -> (fun (V18, V19) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7850-8180--in--un--extend'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V17, V19, V15)), fun (V20) -> {'Prelude.Types.Just', [{'Builtin.MkPair', 0, 0} | ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('nested--7850-8179--in--un--weakenP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V18, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V17, V0)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V19, V1)), V21)) end))(V20))]} end)) end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end.
'nested--7850-8181--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of [] -> {'Prelude.Types.Just', V14}; [E0 | E1] -> (fun (V15, V16) -> begin (V17 = V14), case V17 of 0 -> {'Prelude.Types.Nothing'}; _ -> begin (V18 = (V17 - 1)), ('nested--7850-8181--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V18)) end end end end(E0, E1)) end.
'nested--7850-8182--in--un--dropP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Builtin.MkPair', V16, V17} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7850-8181--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V16)), fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7850-8181--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V14, V17)), fun (V19) -> {'Prelude.Types.Just', {'Builtin.MkPair', V18, V19}} end)) end)) end.
'nested--12487-11875--in--un--dropInf'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of [] -> V14; _ -> case V14 of [] -> []; [E0 | E1] -> (fun (V15, V16) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V32, V33, V34, V35)) end end end end end end end, fun (V36) -> fun (V37) -> V37 end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V40, V41, V42)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V43) -> fun (V44) -> case (V43 =:= V44) of 'false' -> 0; _ -> 1 end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V45, V46)) end end}, V12, V13)) of 1 -> ('nested--12487-11875--in--un--dropInf'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, (V12 + 1), V13, V16)); 0 -> [V15 | ('nested--12487-11875--in--un--dropInf'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, (V12 + 1), V13, V16))] end end(E0, E1)) end end.
'nested--7937-9025--in--un--convertMatches'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> fun (V13) -> {'Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V14, V15) -> case V14 of {'Builtin.MkPair', V16, V17} -> begin (V18 = V16), begin (V19 = V17), case ('nested--7937-9024--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V18, V2)) of {'Prelude.Types.Just', V20} -> case ('nested--7937-9024--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V19, V1)) of {'Prelude.Types.Just', V21} -> begin (V22 = ('dn--un--convGen_Convert_Closure'(V9, V0, V8, V7, V6, V5, V20, V21))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V34 = begin (V27 = ('nested--7937-9025--in--un--convertMatches'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V15))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = fun (V32) -> {'Prelude.Types.Right', case V26 of 1 -> V31; 0 -> 0 end} end), V33 end(V28)) end end end end), V34 end(V23)) end end end end; {'Prelude.Types.Nothing'} -> fun (V35) -> {'Prelude.Types.Right', 0} end end; {'Prelude.Types.Nothing'} -> fun (V36) -> {'Prelude.Types.Right', 0} end end end end end end(E0, E1)) end.
'nested--12487-11877--in--un--args2'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('Idris.Idris2.Builtin':'un--snd'(V12)) end))(V5)).
'nested--12487-11876--in--un--args1'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('Idris.Idris2.Builtin':'un--snd'(V12)) end))(V2)).
'dn--un--convert_Convert_Term'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V6 = 0), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('dn--un--convGen_Convert_Term'(V0, V1, V11, 0, V2, V3, V4, V5))), V12 end(V8)) end end end end.
'dn--un--convert_Convert_NF'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V6 = 0), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('dn--un--convGen_Convert_NF'(V0, V1, V11, 0, V2, V3, V4, V5))), V12 end(V8)) end end end end.
'dn--un--convert_Convert_Closure'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V6 = 0), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('dn--un--convGen_Convert_Closure'(V0, V1, V11, 0, V2, V3, V4, V5))), V12 end(V8)) end end end end.
'dn--un--convertInf_Convert_Term'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V6 = 0), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('dn--un--convGen_Convert_Term'(V0, V1, V11, 1, V2, V3, V4, V5))), V12 end(V8)) end end end end.
'dn--un--convertInf_Convert_NF'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V6 = 0), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('dn--un--convGen_Convert_NF'(V0, V1, V11, 1, V2, V3, V4, V5))), V12 end(V8)) end end end end.
'dn--un--convertInf_Convert_Closure'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Normalise.Quote.QVar'}, begin (V6 = 0), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('dn--un--convGen_Convert_Closure'(V0, V1, V11, 1, V2, V3, V4, V5))), V12 end(V8)) end end end end.
'dn--un--convGen_Convert_Term'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V4, V5, V6))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V19 = begin (V13 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V4, V5, V7))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V18 = ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V12, V17))), V18 end(V14)) end end end end), V19 end(V9)) end end end end.
'dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Core.Value.NBind', V8, V9, V10, V11} -> case V7 of {'Core.Value.NBind', V12, V13, V14, V15} -> begin (V16 = ('Idris.Idris2.Core.Normalise.Quote':'un--genName'(V2, <<"conv"/utf8>>))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V41 = begin (V21 = {'Core.Value.MkClosure', [], ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Value.Nil'}, V5, {'Core.TT.Ref', V8, {'Core.TT.Bound'}, V20}}), begin (V22 = ('un--convBinders'(V0, V1, V2, V3, V4, V5, V10, V14))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V40 = case V26 of 1 -> begin (V27 = ((V11(V4))(V21))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V38 = begin (V32 = ((V15(V4))(V21))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V37 = ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V31, V36))), V37 end(V33)) end end end end), V38 end(V28)) end end end end; 0 -> fun (V39) -> {'Prelude.Types.Right', 0} end end), V40 end(V23)) end end end end end), V41 end(V17)) end end end end; _ -> case V10 of {'Core.TT.Lam', V42, V43, V44, V45} -> begin (V47 = fun (V46) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V46)) end), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V77 = begin (V71 = begin (V53 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V52) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V51, V5, V52)) end, V44))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V70 = begin (V58 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V51, V5, V45))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V69 = begin (V63 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V51, V5, V7))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V68 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V4, V5, {'Core.TT.Bind', V8, V9, {'Core.TT.Lam', V42, V43, V57, V62}, {'Core.TT.App', V8, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V67)), {'Core.TT.Local', V8, {'Prelude.Types.Nothing'}, 0}}}))), V68 end(V64)) end end end end), V69 end(V59)) end end end end), V70 end(V54)) end end end end), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V76 = ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V75))), V76 end(V72)) end end end end), V77 end(V48)) end end end end; _ -> case V7 of {'Core.Value.NBind', V78, V79, V80, V81} -> case V80 of {'Core.TT.Lam', V82, V83, V84, V85} -> begin (V87 = fun (V86) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V86)) end), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V117 = begin (V111 = begin (V93 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V92) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V91, V5, V92)) end, V84))), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V110 = begin (V98 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V91, V5, V85))), fun (V99) -> begin (V100 = (V98(V99))), case V100 of {'Prelude.Types.Left', V101} -> {'Prelude.Types.Left', V101}; {'Prelude.Types.Right', V102} -> (begin (V109 = begin (V103 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V91, V5, V6))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V108 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V4, V5, {'Core.TT.Bind', V78, V79, {'Core.TT.Lam', V82, V83, V97, V102}, {'Core.TT.App', V78, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V107)), {'Core.TT.Local', V78, {'Prelude.Types.Nothing'}, 0}}}))), V108 end(V104)) end end end end), V109 end(V99)) end end end end), V110 end(V94)) end end end end), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V116 = ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V115, V7))), V116 end(V112)) end end end end), V117 end(V88)) end end end end; _ -> case V6 of {'Core.Value.NApp', V118, V119, V120} -> case V7 of {'Core.Value.NApp', V121, V122, V123} -> begin (V124 = ('un--chkConvHead'(V0, V1, V2, V3, V4, V5, V119, V122))), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V135 = case V128 of 1 -> begin (V129 = ('nested--12487-11874--in--un--getInfPos'(V1, V121, V120, V119, V118, V123, V122, V5, V4, V3, V2, V0, V119))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V134 = ('un--allConv'(V0, V1, V2, V3, V4, V5, ('nested--12487-11875--in--un--dropInf'(V1, V121, V120, V119, V118, V123, V122, V5, V4, V3, V2, V0, 0, V133, ('nested--12487-11876--in--un--args1'(V1, V121, V120, V119, V118, V123, V122, V5, V4, V3, V2, V0)))), ('nested--12487-11875--in--un--dropInf'(V1, V121, V120, V119, V118, V123, V122, V5, V4, V3, V2, V0, 0, V133, ('nested--12487-11877--in--un--args2'(V1, V121, V120, V119, V118, V123, V122, V5, V4, V3, V2, V0))))))), V134 end(V130)) end end end end; 0 -> ('un--chkConvCaseBlock'(V0, V1, V118, V2, V3, V4, V5, V119, ('nested--12487-11876--in--un--args1'(V1, V121, V120, V119, V118, V123, V122, V5, V4, V3, V2, V0)), V122, ('nested--12487-11877--in--un--args2'(V1, V121, V120, V119, V118, V123, V122, V5, V4, V3, V2, V0)))) end), V135 end(V125)) end end end end; _ -> case V7 of {'Core.Value.NErased', V136, V137} -> case V137 of {'Core.TT.Dotted', V138} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V138)); _ -> case V6 of {'Core.Value.NErased', V139, V140} -> fun (V141) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V142, V143} -> fun (V144) -> {'Prelude.Types.Right', 1} end; _ -> fun (V145) -> case V6 of {'Core.Value.NType', V146, V147} -> case V7 of {'Core.Value.NType', V148, V149} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V150, V151} -> fun (V152) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V153, V154} -> fun (V155) -> {'Prelude.Types.Right', 1} end; _ -> fun (V156) -> case V6 of {'Core.Value.NType', V157, V158} -> case V7 of {'Core.Value.NType', V159, V160} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDCon', V161, V162, V163, V164, V165} -> case V7 of {'Core.Value.NDCon', V166, V167, V168, V169, V170} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V163, V168)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V176 = fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V174, V175)) end end end end), fun (V177) -> fun (V178) -> ((((V176('erased'))('erased'))(V177))(V178)) end end end(fun (V171) -> ('Idris.Idris2.Builtin':'un--snd'(V171)) end))(V165)), ((begin (V184 = fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V182, V183)) end end end end), fun (V185) -> fun (V186) -> ((((V184('erased'))('erased'))(V185))(V186)) end end end(fun (V179) -> ('Idris.Idris2.Builtin':'un--snd'(V179)) end))(V170)))); 0 -> fun (V187) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V188, V189} -> case V189 of {'Core.TT.Dotted', V190} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V190)); _ -> case V6 of {'Core.Value.NErased', V191, V192} -> fun (V193) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V194, V195} -> fun (V196) -> {'Prelude.Types.Right', 1} end; _ -> fun (V197) -> case V6 of {'Core.Value.NType', V198, V199} -> case V7 of {'Core.Value.NType', V200, V201} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V202, V203} -> fun (V204) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V205, V206} -> fun (V207) -> {'Prelude.Types.Right', 1} end; _ -> fun (V208) -> case V6 of {'Core.Value.NType', V209, V210} -> case V7 of {'Core.Value.NType', V211, V212} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NTCon', V213, V214, V215, V216, V217} -> case V7 of {'Core.Value.NTCon', V218, V219, V220, V221, V222} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V214, V219)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V228 = fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V226, V227)) end end end end), fun (V229) -> fun (V230) -> ((((V228('erased'))('erased'))(V229))(V230)) end end end(fun (V223) -> ('Idris.Idris2.Builtin':'un--snd'(V223)) end))(V217)), ((begin (V236 = fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V234, V235)) end end end end), fun (V237) -> fun (V238) -> ((((V236('erased'))('erased'))(V237))(V238)) end end end(fun (V231) -> ('Idris.Idris2.Builtin':'un--snd'(V231)) end))(V222)))); 0 -> fun (V239) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V240, V241} -> case V241 of {'Core.TT.Dotted', V242} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V242)); _ -> case V6 of {'Core.Value.NErased', V243, V244} -> fun (V245) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V246, V247} -> fun (V248) -> {'Prelude.Types.Right', 1} end; _ -> fun (V249) -> case V6 of {'Core.Value.NType', V250, V251} -> case V7 of {'Core.Value.NType', V252, V253} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V254, V255} -> fun (V256) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V257, V258} -> fun (V259) -> {'Prelude.Types.Right', 1} end; _ -> fun (V260) -> case V6 of {'Core.Value.NType', V261, V262} -> case V7 of {'Core.Value.NType', V263, V264} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NAs', V265, V266, V267, V268} -> case V7 of {'Core.Value.NAs', V269, V270, V271, V272} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V268, V272)); _ -> case V7 of {'Core.Value.NErased', V273, V274} -> case V274 of {'Core.TT.Dotted', V275} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V275)); _ -> case V6 of {'Core.Value.NErased', V276, V277} -> fun (V278) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V279, V280} -> fun (V281) -> {'Prelude.Types.Right', 1} end; _ -> fun (V282) -> case V6 of {'Core.Value.NType', V283, V284} -> case V7 of {'Core.Value.NType', V285, V286} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V287, V288} -> fun (V289) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V290, V291} -> fun (V292) -> {'Prelude.Types.Right', 1} end; _ -> fun (V293) -> case V6 of {'Core.Value.NType', V294, V295} -> case V7 of {'Core.Value.NType', V296, V297} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDelayed', V298, V299, V300} -> case V7 of {'Core.Value.NDelayed', V301, V302, V303} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V299, V302)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V300, V303)); 0 -> fun (V304) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V305, V306} -> case V306 of {'Core.TT.Dotted', V307} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V307)); _ -> case V6 of {'Core.Value.NErased', V308, V309} -> fun (V310) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V311, V312} -> fun (V313) -> {'Prelude.Types.Right', 1} end; _ -> fun (V314) -> case V6 of {'Core.Value.NType', V315, V316} -> case V7 of {'Core.Value.NType', V317, V318} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V319, V320} -> fun (V321) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V322, V323} -> fun (V324) -> {'Prelude.Types.Right', 1} end; _ -> fun (V325) -> case V6 of {'Core.Value.NType', V326, V327} -> case V7 of {'Core.Value.NType', V328, V329} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDelay', V330, V331, V332, V333} -> case V7 of {'Core.Value.NDelay', V334, V335, V336, V337} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V331, V335)) of 1 -> begin (V339 = fun (V338) -> case V331 of 1 -> {'Prelude.Types.Right', V4}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V338)) end end), fun (V340) -> begin (V341 = (V339(V340))), case V341 of {'Prelude.Types.Left', V342} -> {'Prelude.Types.Left', V342}; {'Prelude.Types.Right', V343} -> (begin (V344 = ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V343, V5, V333, V337))), V344 end(V340)) end end end end; 0 -> fun (V345) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V346, V347} -> case V347 of {'Core.TT.Dotted', V348} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V348)); _ -> case V6 of {'Core.Value.NErased', V349, V350} -> fun (V351) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V352, V353} -> fun (V354) -> {'Prelude.Types.Right', 1} end; _ -> fun (V355) -> case V6 of {'Core.Value.NType', V356, V357} -> case V7 of {'Core.Value.NType', V358, V359} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V360, V361} -> fun (V362) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V363, V364} -> fun (V365) -> {'Prelude.Types.Right', 1} end; _ -> fun (V366) -> case V6 of {'Core.Value.NType', V367, V368} -> case V7 of {'Core.Value.NType', V369, V370} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NForce', V371, V372, V373, V374} -> case V7 of {'Core.Value.NForce', V375, V376, V377, V378} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V372, V376)) of 1 -> begin (V379 = ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V373, V377))), fun (V380) -> begin (V381 = (V379(V380))), case V381 of {'Prelude.Types.Left', V382} -> {'Prelude.Types.Left', V382}; {'Prelude.Types.Right', V383} -> (begin (V401 = case V383 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V389 = fun (V385) -> fun (V386) -> fun (V387) -> fun (V388) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V387, V388)) end end end end), fun (V390) -> fun (V391) -> ((((V389('erased'))('erased'))(V390))(V391)) end end end(fun (V384) -> ('Idris.Idris2.Builtin':'un--snd'(V384)) end))(V374)), ((begin (V397 = fun (V393) -> fun (V394) -> fun (V395) -> fun (V396) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V395, V396)) end end end end), fun (V398) -> fun (V399) -> ((((V397('erased'))('erased'))(V398))(V399)) end end end(fun (V392) -> ('Idris.Idris2.Builtin':'un--snd'(V392)) end))(V378)))); 0 -> fun (V400) -> {'Prelude.Types.Right', 0} end end), V401 end(V380)) end end end end; 0 -> fun (V402) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V403, V404} -> case V404 of {'Core.TT.Dotted', V405} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V405)); _ -> case V6 of {'Core.Value.NErased', V406, V407} -> fun (V408) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V409, V410} -> fun (V411) -> {'Prelude.Types.Right', 1} end; _ -> fun (V412) -> case V6 of {'Core.Value.NType', V413, V414} -> case V7 of {'Core.Value.NType', V415, V416} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V417, V418} -> fun (V419) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V420, V421} -> fun (V422) -> {'Prelude.Types.Right', 1} end; _ -> fun (V423) -> case V6 of {'Core.Value.NType', V424, V425} -> case V7 of {'Core.Value.NType', V426, V427} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NPrimVal', V428, V429} -> case V7 of {'Core.Value.NPrimVal', V430, V431} -> fun (V432) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V429, V431))} end; _ -> case V7 of {'Core.Value.NErased', V433, V434} -> case V434 of {'Core.TT.Dotted', V435} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V435)); _ -> case V6 of {'Core.Value.NErased', V436, V437} -> fun (V438) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V439, V440} -> fun (V441) -> {'Prelude.Types.Right', 1} end; _ -> fun (V442) -> case V6 of {'Core.Value.NType', V443, V444} -> case V7 of {'Core.Value.NType', V445, V446} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V447, V448} -> fun (V449) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V450, V451} -> fun (V452) -> {'Prelude.Types.Right', 1} end; _ -> fun (V453) -> case V6 of {'Core.Value.NType', V454, V455} -> case V7 of {'Core.Value.NType', V456, V457} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NErased', V458, V459} -> case V459 of {'Core.TT.Dotted', V460} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V460, V7)); _ -> case V7 of {'Core.Value.NErased', V461, V462} -> case V462 of {'Core.TT.Dotted', V463} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V463)); _ -> case V6 of {'Core.Value.NErased', V464, V465} -> fun (V466) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V467, V468} -> fun (V469) -> {'Prelude.Types.Right', 1} end; _ -> fun (V470) -> case V6 of {'Core.Value.NType', V471, V472} -> case V7 of {'Core.Value.NType', V473, V474} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V475, V476} -> fun (V477) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V478, V479} -> fun (V480) -> {'Prelude.Types.Right', 1} end; _ -> fun (V481) -> case V6 of {'Core.Value.NType', V482, V483} -> case V7 of {'Core.Value.NType', V484, V485} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; _ -> case V7 of {'Core.Value.NErased', V486, V487} -> case V487 of {'Core.TT.Dotted', V488} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V488)); _ -> case V6 of {'Core.Value.NErased', V489, V490} -> fun (V491) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V492, V493} -> fun (V494) -> {'Prelude.Types.Right', 1} end; _ -> fun (V495) -> case V6 of {'Core.Value.NType', V496, V497} -> case V7 of {'Core.Value.NType', V498, V499} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V500, V501} -> fun (V502) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V503, V504} -> fun (V505) -> {'Prelude.Types.Right', 1} end; _ -> fun (V506) -> case V6 of {'Core.Value.NType', V507, V508} -> case V7 of {'Core.Value.NType', V509, V510} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end end; _ -> case V6 of {'Core.Value.NApp', V511, V512, V513} -> case V7 of {'Core.Value.NApp', V514, V515, V516} -> begin (V517 = ('un--chkConvHead'(V0, V1, V2, V3, V4, V5, V512, V515))), fun (V518) -> begin (V519 = (V517(V518))), case V519 of {'Prelude.Types.Left', V520} -> {'Prelude.Types.Left', V520}; {'Prelude.Types.Right', V521} -> (begin (V528 = case V521 of 1 -> begin (V522 = ('nested--12487-11874--in--un--getInfPos'(V1, V514, V513, V512, V511, V516, V515, V5, V4, V3, V2, V0, V512))), fun (V523) -> begin (V524 = (V522(V523))), case V524 of {'Prelude.Types.Left', V525} -> {'Prelude.Types.Left', V525}; {'Prelude.Types.Right', V526} -> (begin (V527 = ('un--allConv'(V0, V1, V2, V3, V4, V5, ('nested--12487-11875--in--un--dropInf'(V1, V514, V513, V512, V511, V516, V515, V5, V4, V3, V2, V0, 0, V526, ('nested--12487-11876--in--un--args1'(V1, V514, V513, V512, V511, V516, V515, V5, V4, V3, V2, V0)))), ('nested--12487-11875--in--un--dropInf'(V1, V514, V513, V512, V511, V516, V515, V5, V4, V3, V2, V0, 0, V526, ('nested--12487-11877--in--un--args2'(V1, V514, V513, V512, V511, V516, V515, V5, V4, V3, V2, V0))))))), V527 end(V523)) end end end end; 0 -> ('un--chkConvCaseBlock'(V0, V1, V511, V2, V3, V4, V5, V512, ('nested--12487-11876--in--un--args1'(V1, V514, V513, V512, V511, V516, V515, V5, V4, V3, V2, V0)), V515, ('nested--12487-11877--in--un--args2'(V1, V514, V513, V512, V511, V516, V515, V5, V4, V3, V2, V0)))) end), V528 end(V518)) end end end end; _ -> case V7 of {'Core.Value.NErased', V529, V530} -> case V530 of {'Core.TT.Dotted', V531} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V531)); _ -> case V6 of {'Core.Value.NErased', V532, V533} -> fun (V534) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V535, V536} -> fun (V537) -> {'Prelude.Types.Right', 1} end; _ -> fun (V538) -> case V6 of {'Core.Value.NType', V539, V540} -> case V7 of {'Core.Value.NType', V541, V542} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V543, V544} -> fun (V545) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V546, V547} -> fun (V548) -> {'Prelude.Types.Right', 1} end; _ -> fun (V549) -> case V6 of {'Core.Value.NType', V550, V551} -> case V7 of {'Core.Value.NType', V552, V553} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDCon', V554, V555, V556, V557, V558} -> case V7 of {'Core.Value.NDCon', V559, V560, V561, V562, V563} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V556, V561)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V569 = fun (V565) -> fun (V566) -> fun (V567) -> fun (V568) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V567, V568)) end end end end), fun (V570) -> fun (V571) -> ((((V569('erased'))('erased'))(V570))(V571)) end end end(fun (V564) -> ('Idris.Idris2.Builtin':'un--snd'(V564)) end))(V558)), ((begin (V577 = fun (V573) -> fun (V574) -> fun (V575) -> fun (V576) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V575, V576)) end end end end), fun (V578) -> fun (V579) -> ((((V577('erased'))('erased'))(V578))(V579)) end end end(fun (V572) -> ('Idris.Idris2.Builtin':'un--snd'(V572)) end))(V563)))); 0 -> fun (V580) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V581, V582} -> case V582 of {'Core.TT.Dotted', V583} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V583)); _ -> case V6 of {'Core.Value.NErased', V584, V585} -> fun (V586) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V587, V588} -> fun (V589) -> {'Prelude.Types.Right', 1} end; _ -> fun (V590) -> case V6 of {'Core.Value.NType', V591, V592} -> case V7 of {'Core.Value.NType', V593, V594} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V595, V596} -> fun (V597) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V598, V599} -> fun (V600) -> {'Prelude.Types.Right', 1} end; _ -> fun (V601) -> case V6 of {'Core.Value.NType', V602, V603} -> case V7 of {'Core.Value.NType', V604, V605} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NTCon', V606, V607, V608, V609, V610} -> case V7 of {'Core.Value.NTCon', V611, V612, V613, V614, V615} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V607, V612)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V621 = fun (V617) -> fun (V618) -> fun (V619) -> fun (V620) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V619, V620)) end end end end), fun (V622) -> fun (V623) -> ((((V621('erased'))('erased'))(V622))(V623)) end end end(fun (V616) -> ('Idris.Idris2.Builtin':'un--snd'(V616)) end))(V610)), ((begin (V629 = fun (V625) -> fun (V626) -> fun (V627) -> fun (V628) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V627, V628)) end end end end), fun (V630) -> fun (V631) -> ((((V629('erased'))('erased'))(V630))(V631)) end end end(fun (V624) -> ('Idris.Idris2.Builtin':'un--snd'(V624)) end))(V615)))); 0 -> fun (V632) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V633, V634} -> case V634 of {'Core.TT.Dotted', V635} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V635)); _ -> case V6 of {'Core.Value.NErased', V636, V637} -> fun (V638) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V639, V640} -> fun (V641) -> {'Prelude.Types.Right', 1} end; _ -> fun (V642) -> case V6 of {'Core.Value.NType', V643, V644} -> case V7 of {'Core.Value.NType', V645, V646} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V647, V648} -> fun (V649) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V650, V651} -> fun (V652) -> {'Prelude.Types.Right', 1} end; _ -> fun (V653) -> case V6 of {'Core.Value.NType', V654, V655} -> case V7 of {'Core.Value.NType', V656, V657} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NAs', V658, V659, V660, V661} -> case V7 of {'Core.Value.NAs', V662, V663, V664, V665} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V661, V665)); _ -> case V7 of {'Core.Value.NErased', V666, V667} -> case V667 of {'Core.TT.Dotted', V668} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V668)); _ -> case V6 of {'Core.Value.NErased', V669, V670} -> fun (V671) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V672, V673} -> fun (V674) -> {'Prelude.Types.Right', 1} end; _ -> fun (V675) -> case V6 of {'Core.Value.NType', V676, V677} -> case V7 of {'Core.Value.NType', V678, V679} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V680, V681} -> fun (V682) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V683, V684} -> fun (V685) -> {'Prelude.Types.Right', 1} end; _ -> fun (V686) -> case V6 of {'Core.Value.NType', V687, V688} -> case V7 of {'Core.Value.NType', V689, V690} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDelayed', V691, V692, V693} -> case V7 of {'Core.Value.NDelayed', V694, V695, V696} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V692, V695)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V693, V696)); 0 -> fun (V697) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V698, V699} -> case V699 of {'Core.TT.Dotted', V700} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V700)); _ -> case V6 of {'Core.Value.NErased', V701, V702} -> fun (V703) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V704, V705} -> fun (V706) -> {'Prelude.Types.Right', 1} end; _ -> fun (V707) -> case V6 of {'Core.Value.NType', V708, V709} -> case V7 of {'Core.Value.NType', V710, V711} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V712, V713} -> fun (V714) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V715, V716} -> fun (V717) -> {'Prelude.Types.Right', 1} end; _ -> fun (V718) -> case V6 of {'Core.Value.NType', V719, V720} -> case V7 of {'Core.Value.NType', V721, V722} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDelay', V723, V724, V725, V726} -> case V7 of {'Core.Value.NDelay', V727, V728, V729, V730} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V724, V728)) of 1 -> begin (V732 = fun (V731) -> case V724 of 1 -> {'Prelude.Types.Right', V4}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V731)) end end), fun (V733) -> begin (V734 = (V732(V733))), case V734 of {'Prelude.Types.Left', V735} -> {'Prelude.Types.Left', V735}; {'Prelude.Types.Right', V736} -> (begin (V737 = ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V736, V5, V726, V730))), V737 end(V733)) end end end end; 0 -> fun (V738) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V739, V740} -> case V740 of {'Core.TT.Dotted', V741} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V741)); _ -> case V6 of {'Core.Value.NErased', V742, V743} -> fun (V744) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V745, V746} -> fun (V747) -> {'Prelude.Types.Right', 1} end; _ -> fun (V748) -> case V6 of {'Core.Value.NType', V749, V750} -> case V7 of {'Core.Value.NType', V751, V752} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V753, V754} -> fun (V755) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V756, V757} -> fun (V758) -> {'Prelude.Types.Right', 1} end; _ -> fun (V759) -> case V6 of {'Core.Value.NType', V760, V761} -> case V7 of {'Core.Value.NType', V762, V763} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NForce', V764, V765, V766, V767} -> case V7 of {'Core.Value.NForce', V768, V769, V770, V771} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V765, V769)) of 1 -> begin (V772 = ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V766, V770))), fun (V773) -> begin (V774 = (V772(V773))), case V774 of {'Prelude.Types.Left', V775} -> {'Prelude.Types.Left', V775}; {'Prelude.Types.Right', V776} -> (begin (V794 = case V776 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V782 = fun (V778) -> fun (V779) -> fun (V780) -> fun (V781) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V780, V781)) end end end end), fun (V783) -> fun (V784) -> ((((V782('erased'))('erased'))(V783))(V784)) end end end(fun (V777) -> ('Idris.Idris2.Builtin':'un--snd'(V777)) end))(V767)), ((begin (V790 = fun (V786) -> fun (V787) -> fun (V788) -> fun (V789) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V788, V789)) end end end end), fun (V791) -> fun (V792) -> ((((V790('erased'))('erased'))(V791))(V792)) end end end(fun (V785) -> ('Idris.Idris2.Builtin':'un--snd'(V785)) end))(V771)))); 0 -> fun (V793) -> {'Prelude.Types.Right', 0} end end), V794 end(V773)) end end end end; 0 -> fun (V795) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V796, V797} -> case V797 of {'Core.TT.Dotted', V798} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V798)); _ -> case V6 of {'Core.Value.NErased', V799, V800} -> fun (V801) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V802, V803} -> fun (V804) -> {'Prelude.Types.Right', 1} end; _ -> fun (V805) -> case V6 of {'Core.Value.NType', V806, V807} -> case V7 of {'Core.Value.NType', V808, V809} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V810, V811} -> fun (V812) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V813, V814} -> fun (V815) -> {'Prelude.Types.Right', 1} end; _ -> fun (V816) -> case V6 of {'Core.Value.NType', V817, V818} -> case V7 of {'Core.Value.NType', V819, V820} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NPrimVal', V821, V822} -> case V7 of {'Core.Value.NPrimVal', V823, V824} -> fun (V825) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V822, V824))} end; _ -> case V7 of {'Core.Value.NErased', V826, V827} -> case V827 of {'Core.TT.Dotted', V828} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V828)); _ -> case V6 of {'Core.Value.NErased', V829, V830} -> fun (V831) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V832, V833} -> fun (V834) -> {'Prelude.Types.Right', 1} end; _ -> fun (V835) -> case V6 of {'Core.Value.NType', V836, V837} -> case V7 of {'Core.Value.NType', V838, V839} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V840, V841} -> fun (V842) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V843, V844} -> fun (V845) -> {'Prelude.Types.Right', 1} end; _ -> fun (V846) -> case V6 of {'Core.Value.NType', V847, V848} -> case V7 of {'Core.Value.NType', V849, V850} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NErased', V851, V852} -> case V852 of {'Core.TT.Dotted', V853} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V853, V7)); _ -> case V7 of {'Core.Value.NErased', V854, V855} -> case V855 of {'Core.TT.Dotted', V856} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V856)); _ -> case V6 of {'Core.Value.NErased', V857, V858} -> fun (V859) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V860, V861} -> fun (V862) -> {'Prelude.Types.Right', 1} end; _ -> fun (V863) -> case V6 of {'Core.Value.NType', V864, V865} -> case V7 of {'Core.Value.NType', V866, V867} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V868, V869} -> fun (V870) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V871, V872} -> fun (V873) -> {'Prelude.Types.Right', 1} end; _ -> fun (V874) -> case V6 of {'Core.Value.NType', V875, V876} -> case V7 of {'Core.Value.NType', V877, V878} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; _ -> case V7 of {'Core.Value.NErased', V879, V880} -> case V880 of {'Core.TT.Dotted', V881} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V881)); _ -> case V6 of {'Core.Value.NErased', V882, V883} -> fun (V884) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V885, V886} -> fun (V887) -> {'Prelude.Types.Right', 1} end; _ -> fun (V888) -> case V6 of {'Core.Value.NType', V889, V890} -> case V7 of {'Core.Value.NType', V891, V892} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V893, V894} -> fun (V895) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V896, V897} -> fun (V898) -> {'Prelude.Types.Right', 1} end; _ -> fun (V899) -> case V6 of {'Core.Value.NType', V900, V901} -> case V7 of {'Core.Value.NType', V902, V903} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end end end end; _ -> case V7 of {'Core.Value.NBind', V904, V905, V906, V907} -> case V906 of {'Core.TT.Lam', V908, V909, V910, V911} -> begin (V913 = fun (V912) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V912)) end), fun (V914) -> begin (V915 = (V913(V914))), case V915 of {'Prelude.Types.Left', V916} -> {'Prelude.Types.Left', V916}; {'Prelude.Types.Right', V917} -> (begin (V943 = begin (V937 = begin (V919 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V918) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V917, V5, V918)) end, V910))), fun (V920) -> begin (V921 = (V919(V920))), case V921 of {'Prelude.Types.Left', V922} -> {'Prelude.Types.Left', V922}; {'Prelude.Types.Right', V923} -> (begin (V936 = begin (V924 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V917, V5, V911))), fun (V925) -> begin (V926 = (V924(V925))), case V926 of {'Prelude.Types.Left', V927} -> {'Prelude.Types.Left', V927}; {'Prelude.Types.Right', V928} -> (begin (V935 = begin (V929 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V917, V5, V6))), fun (V930) -> begin (V931 = (V929(V930))), case V931 of {'Prelude.Types.Left', V932} -> {'Prelude.Types.Left', V932}; {'Prelude.Types.Right', V933} -> (begin (V934 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V4, V5, {'Core.TT.Bind', V904, V905, {'Core.TT.Lam', V908, V909, V923, V928}, {'Core.TT.App', V904, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V933)), {'Core.TT.Local', V904, {'Prelude.Types.Nothing'}, 0}}}))), V934 end(V930)) end end end end), V935 end(V925)) end end end end), V936 end(V920)) end end end end), fun (V938) -> begin (V939 = (V937(V938))), case V939 of {'Prelude.Types.Left', V940} -> {'Prelude.Types.Left', V940}; {'Prelude.Types.Right', V941} -> (begin (V942 = ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V941, V7))), V942 end(V938)) end end end end), V943 end(V914)) end end end end; _ -> case V6 of {'Core.Value.NApp', V944, V945, V946} -> case V7 of {'Core.Value.NApp', V947, V948, V949} -> begin (V950 = ('un--chkConvHead'(V0, V1, V2, V3, V4, V5, V945, V948))), fun (V951) -> begin (V952 = (V950(V951))), case V952 of {'Prelude.Types.Left', V953} -> {'Prelude.Types.Left', V953}; {'Prelude.Types.Right', V954} -> (begin (V961 = case V954 of 1 -> begin (V955 = ('nested--12487-11874--in--un--getInfPos'(V1, V947, V946, V945, V944, V949, V948, V5, V4, V3, V2, V0, V945))), fun (V956) -> begin (V957 = (V955(V956))), case V957 of {'Prelude.Types.Left', V958} -> {'Prelude.Types.Left', V958}; {'Prelude.Types.Right', V959} -> (begin (V960 = ('un--allConv'(V0, V1, V2, V3, V4, V5, ('nested--12487-11875--in--un--dropInf'(V1, V947, V946, V945, V944, V949, V948, V5, V4, V3, V2, V0, 0, V959, ('nested--12487-11876--in--un--args1'(V1, V947, V946, V945, V944, V949, V948, V5, V4, V3, V2, V0)))), ('nested--12487-11875--in--un--dropInf'(V1, V947, V946, V945, V944, V949, V948, V5, V4, V3, V2, V0, 0, V959, ('nested--12487-11877--in--un--args2'(V1, V947, V946, V945, V944, V949, V948, V5, V4, V3, V2, V0))))))), V960 end(V956)) end end end end; 0 -> ('un--chkConvCaseBlock'(V0, V1, V944, V2, V3, V4, V5, V945, ('nested--12487-11876--in--un--args1'(V1, V947, V946, V945, V944, V949, V948, V5, V4, V3, V2, V0)), V948, ('nested--12487-11877--in--un--args2'(V1, V947, V946, V945, V944, V949, V948, V5, V4, V3, V2, V0)))) end), V961 end(V951)) end end end end; _ -> case V7 of {'Core.Value.NErased', V962, V963} -> case V963 of {'Core.TT.Dotted', V964} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V964)); _ -> case V6 of {'Core.Value.NErased', V965, V966} -> fun (V967) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V968, V969} -> fun (V970) -> {'Prelude.Types.Right', 1} end; _ -> fun (V971) -> case V6 of {'Core.Value.NType', V972, V973} -> case V7 of {'Core.Value.NType', V974, V975} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V976, V977} -> fun (V978) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V979, V980} -> fun (V981) -> {'Prelude.Types.Right', 1} end; _ -> fun (V982) -> case V6 of {'Core.Value.NType', V983, V984} -> case V7 of {'Core.Value.NType', V985, V986} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDCon', V987, V988, V989, V990, V991} -> case V7 of {'Core.Value.NDCon', V992, V993, V994, V995, V996} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V989, V994)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V1002 = fun (V998) -> fun (V999) -> fun (V1000) -> fun (V1001) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1000, V1001)) end end end end), fun (V1003) -> fun (V1004) -> ((((V1002('erased'))('erased'))(V1003))(V1004)) end end end(fun (V997) -> ('Idris.Idris2.Builtin':'un--snd'(V997)) end))(V991)), ((begin (V1010 = fun (V1006) -> fun (V1007) -> fun (V1008) -> fun (V1009) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1008, V1009)) end end end end), fun (V1011) -> fun (V1012) -> ((((V1010('erased'))('erased'))(V1011))(V1012)) end end end(fun (V1005) -> ('Idris.Idris2.Builtin':'un--snd'(V1005)) end))(V996)))); 0 -> fun (V1013) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V1014, V1015} -> case V1015 of {'Core.TT.Dotted', V1016} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1016)); _ -> case V6 of {'Core.Value.NErased', V1017, V1018} -> fun (V1019) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1020, V1021} -> fun (V1022) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1023) -> case V6 of {'Core.Value.NType', V1024, V1025} -> case V7 of {'Core.Value.NType', V1026, V1027} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1028, V1029} -> fun (V1030) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1031, V1032} -> fun (V1033) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1034) -> case V6 of {'Core.Value.NType', V1035, V1036} -> case V7 of {'Core.Value.NType', V1037, V1038} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NTCon', V1039, V1040, V1041, V1042, V1043} -> case V7 of {'Core.Value.NTCon', V1044, V1045, V1046, V1047, V1048} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1040, V1045)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V1054 = fun (V1050) -> fun (V1051) -> fun (V1052) -> fun (V1053) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1052, V1053)) end end end end), fun (V1055) -> fun (V1056) -> ((((V1054('erased'))('erased'))(V1055))(V1056)) end end end(fun (V1049) -> ('Idris.Idris2.Builtin':'un--snd'(V1049)) end))(V1043)), ((begin (V1062 = fun (V1058) -> fun (V1059) -> fun (V1060) -> fun (V1061) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1060, V1061)) end end end end), fun (V1063) -> fun (V1064) -> ((((V1062('erased'))('erased'))(V1063))(V1064)) end end end(fun (V1057) -> ('Idris.Idris2.Builtin':'un--snd'(V1057)) end))(V1048)))); 0 -> fun (V1065) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V1066, V1067} -> case V1067 of {'Core.TT.Dotted', V1068} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1068)); _ -> case V6 of {'Core.Value.NErased', V1069, V1070} -> fun (V1071) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1072, V1073} -> fun (V1074) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1075) -> case V6 of {'Core.Value.NType', V1076, V1077} -> case V7 of {'Core.Value.NType', V1078, V1079} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1080, V1081} -> fun (V1082) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1083, V1084} -> fun (V1085) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1086) -> case V6 of {'Core.Value.NType', V1087, V1088} -> case V7 of {'Core.Value.NType', V1089, V1090} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NAs', V1091, V1092, V1093, V1094} -> case V7 of {'Core.Value.NAs', V1095, V1096, V1097, V1098} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V1094, V1098)); _ -> case V7 of {'Core.Value.NErased', V1099, V1100} -> case V1100 of {'Core.TT.Dotted', V1101} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1101)); _ -> case V6 of {'Core.Value.NErased', V1102, V1103} -> fun (V1104) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1105, V1106} -> fun (V1107) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1108) -> case V6 of {'Core.Value.NType', V1109, V1110} -> case V7 of {'Core.Value.NType', V1111, V1112} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1113, V1114} -> fun (V1115) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1116, V1117} -> fun (V1118) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1119) -> case V6 of {'Core.Value.NType', V1120, V1121} -> case V7 of {'Core.Value.NType', V1122, V1123} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDelayed', V1124, V1125, V1126} -> case V7 of {'Core.Value.NDelayed', V1127, V1128, V1129} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V1125, V1128)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V1126, V1129)); 0 -> fun (V1130) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V1131, V1132} -> case V1132 of {'Core.TT.Dotted', V1133} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1133)); _ -> case V6 of {'Core.Value.NErased', V1134, V1135} -> fun (V1136) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1137, V1138} -> fun (V1139) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1140) -> case V6 of {'Core.Value.NType', V1141, V1142} -> case V7 of {'Core.Value.NType', V1143, V1144} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1145, V1146} -> fun (V1147) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1148, V1149} -> fun (V1150) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1151) -> case V6 of {'Core.Value.NType', V1152, V1153} -> case V7 of {'Core.Value.NType', V1154, V1155} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDelay', V1156, V1157, V1158, V1159} -> case V7 of {'Core.Value.NDelay', V1160, V1161, V1162, V1163} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V1157, V1161)) of 1 -> begin (V1165 = fun (V1164) -> case V1157 of 1 -> {'Prelude.Types.Right', V4}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V1164)) end end), fun (V1166) -> begin (V1167 = (V1165(V1166))), case V1167 of {'Prelude.Types.Left', V1168} -> {'Prelude.Types.Left', V1168}; {'Prelude.Types.Right', V1169} -> (begin (V1170 = ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V1169, V5, V1159, V1163))), V1170 end(V1166)) end end end end; 0 -> fun (V1171) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V1172, V1173} -> case V1173 of {'Core.TT.Dotted', V1174} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1174)); _ -> case V6 of {'Core.Value.NErased', V1175, V1176} -> fun (V1177) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1178, V1179} -> fun (V1180) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1181) -> case V6 of {'Core.Value.NType', V1182, V1183} -> case V7 of {'Core.Value.NType', V1184, V1185} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1186, V1187} -> fun (V1188) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1189, V1190} -> fun (V1191) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1192) -> case V6 of {'Core.Value.NType', V1193, V1194} -> case V7 of {'Core.Value.NType', V1195, V1196} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NForce', V1197, V1198, V1199, V1200} -> case V7 of {'Core.Value.NForce', V1201, V1202, V1203, V1204} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V1198, V1202)) of 1 -> begin (V1205 = ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V1199, V1203))), fun (V1206) -> begin (V1207 = (V1205(V1206))), case V1207 of {'Prelude.Types.Left', V1208} -> {'Prelude.Types.Left', V1208}; {'Prelude.Types.Right', V1209} -> (begin (V1227 = case V1209 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V1215 = fun (V1211) -> fun (V1212) -> fun (V1213) -> fun (V1214) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1213, V1214)) end end end end), fun (V1216) -> fun (V1217) -> ((((V1215('erased'))('erased'))(V1216))(V1217)) end end end(fun (V1210) -> ('Idris.Idris2.Builtin':'un--snd'(V1210)) end))(V1200)), ((begin (V1223 = fun (V1219) -> fun (V1220) -> fun (V1221) -> fun (V1222) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1221, V1222)) end end end end), fun (V1224) -> fun (V1225) -> ((((V1223('erased'))('erased'))(V1224))(V1225)) end end end(fun (V1218) -> ('Idris.Idris2.Builtin':'un--snd'(V1218)) end))(V1204)))); 0 -> fun (V1226) -> {'Prelude.Types.Right', 0} end end), V1227 end(V1206)) end end end end; 0 -> fun (V1228) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V1229, V1230} -> case V1230 of {'Core.TT.Dotted', V1231} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1231)); _ -> case V6 of {'Core.Value.NErased', V1232, V1233} -> fun (V1234) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1235, V1236} -> fun (V1237) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1238) -> case V6 of {'Core.Value.NType', V1239, V1240} -> case V7 of {'Core.Value.NType', V1241, V1242} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1243, V1244} -> fun (V1245) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1246, V1247} -> fun (V1248) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1249) -> case V6 of {'Core.Value.NType', V1250, V1251} -> case V7 of {'Core.Value.NType', V1252, V1253} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NPrimVal', V1254, V1255} -> case V7 of {'Core.Value.NPrimVal', V1256, V1257} -> fun (V1258) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V1255, V1257))} end; _ -> case V7 of {'Core.Value.NErased', V1259, V1260} -> case V1260 of {'Core.TT.Dotted', V1261} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1261)); _ -> case V6 of {'Core.Value.NErased', V1262, V1263} -> fun (V1264) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1265, V1266} -> fun (V1267) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1268) -> case V6 of {'Core.Value.NType', V1269, V1270} -> case V7 of {'Core.Value.NType', V1271, V1272} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1273, V1274} -> fun (V1275) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1276, V1277} -> fun (V1278) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1279) -> case V6 of {'Core.Value.NType', V1280, V1281} -> case V7 of {'Core.Value.NType', V1282, V1283} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NErased', V1284, V1285} -> case V1285 of {'Core.TT.Dotted', V1286} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V1286, V7)); _ -> case V7 of {'Core.Value.NErased', V1287, V1288} -> case V1288 of {'Core.TT.Dotted', V1289} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1289)); _ -> case V6 of {'Core.Value.NErased', V1290, V1291} -> fun (V1292) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1293, V1294} -> fun (V1295) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1296) -> case V6 of {'Core.Value.NType', V1297, V1298} -> case V7 of {'Core.Value.NType', V1299, V1300} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1301, V1302} -> fun (V1303) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1304, V1305} -> fun (V1306) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1307) -> case V6 of {'Core.Value.NType', V1308, V1309} -> case V7 of {'Core.Value.NType', V1310, V1311} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; _ -> case V7 of {'Core.Value.NErased', V1312, V1313} -> case V1313 of {'Core.TT.Dotted', V1314} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1314)); _ -> case V6 of {'Core.Value.NErased', V1315, V1316} -> fun (V1317) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1318, V1319} -> fun (V1320) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1321) -> case V6 of {'Core.Value.NType', V1322, V1323} -> case V7 of {'Core.Value.NType', V1324, V1325} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1326, V1327} -> fun (V1328) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1329, V1330} -> fun (V1331) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1332) -> case V6 of {'Core.Value.NType', V1333, V1334} -> case V7 of {'Core.Value.NType', V1335, V1336} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end end; _ -> case V6 of {'Core.Value.NApp', V1337, V1338, V1339} -> case V7 of {'Core.Value.NApp', V1340, V1341, V1342} -> begin (V1343 = ('un--chkConvHead'(V0, V1, V2, V3, V4, V5, V1338, V1341))), fun (V1344) -> begin (V1345 = (V1343(V1344))), case V1345 of {'Prelude.Types.Left', V1346} -> {'Prelude.Types.Left', V1346}; {'Prelude.Types.Right', V1347} -> (begin (V1354 = case V1347 of 1 -> begin (V1348 = ('nested--12487-11874--in--un--getInfPos'(V1, V1340, V1339, V1338, V1337, V1342, V1341, V5, V4, V3, V2, V0, V1338))), fun (V1349) -> begin (V1350 = (V1348(V1349))), case V1350 of {'Prelude.Types.Left', V1351} -> {'Prelude.Types.Left', V1351}; {'Prelude.Types.Right', V1352} -> (begin (V1353 = ('un--allConv'(V0, V1, V2, V3, V4, V5, ('nested--12487-11875--in--un--dropInf'(V1, V1340, V1339, V1338, V1337, V1342, V1341, V5, V4, V3, V2, V0, 0, V1352, ('nested--12487-11876--in--un--args1'(V1, V1340, V1339, V1338, V1337, V1342, V1341, V5, V4, V3, V2, V0)))), ('nested--12487-11875--in--un--dropInf'(V1, V1340, V1339, V1338, V1337, V1342, V1341, V5, V4, V3, V2, V0, 0, V1352, ('nested--12487-11877--in--un--args2'(V1, V1340, V1339, V1338, V1337, V1342, V1341, V5, V4, V3, V2, V0))))))), V1353 end(V1349)) end end end end; 0 -> ('un--chkConvCaseBlock'(V0, V1, V1337, V2, V3, V4, V5, V1338, ('nested--12487-11876--in--un--args1'(V1, V1340, V1339, V1338, V1337, V1342, V1341, V5, V4, V3, V2, V0)), V1341, ('nested--12487-11877--in--un--args2'(V1, V1340, V1339, V1338, V1337, V1342, V1341, V5, V4, V3, V2, V0)))) end), V1354 end(V1344)) end end end end; _ -> case V7 of {'Core.Value.NErased', V1355, V1356} -> case V1356 of {'Core.TT.Dotted', V1357} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1357)); _ -> case V6 of {'Core.Value.NErased', V1358, V1359} -> fun (V1360) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1361, V1362} -> fun (V1363) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1364) -> case V6 of {'Core.Value.NType', V1365, V1366} -> case V7 of {'Core.Value.NType', V1367, V1368} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1369, V1370} -> fun (V1371) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1372, V1373} -> fun (V1374) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1375) -> case V6 of {'Core.Value.NType', V1376, V1377} -> case V7 of {'Core.Value.NType', V1378, V1379} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDCon', V1380, V1381, V1382, V1383, V1384} -> case V7 of {'Core.Value.NDCon', V1385, V1386, V1387, V1388, V1389} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1382, V1387)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V1395 = fun (V1391) -> fun (V1392) -> fun (V1393) -> fun (V1394) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1393, V1394)) end end end end), fun (V1396) -> fun (V1397) -> ((((V1395('erased'))('erased'))(V1396))(V1397)) end end end(fun (V1390) -> ('Idris.Idris2.Builtin':'un--snd'(V1390)) end))(V1384)), ((begin (V1403 = fun (V1399) -> fun (V1400) -> fun (V1401) -> fun (V1402) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1401, V1402)) end end end end), fun (V1404) -> fun (V1405) -> ((((V1403('erased'))('erased'))(V1404))(V1405)) end end end(fun (V1398) -> ('Idris.Idris2.Builtin':'un--snd'(V1398)) end))(V1389)))); 0 -> fun (V1406) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V1407, V1408} -> case V1408 of {'Core.TT.Dotted', V1409} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1409)); _ -> case V6 of {'Core.Value.NErased', V1410, V1411} -> fun (V1412) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1413, V1414} -> fun (V1415) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1416) -> case V6 of {'Core.Value.NType', V1417, V1418} -> case V7 of {'Core.Value.NType', V1419, V1420} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1421, V1422} -> fun (V1423) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1424, V1425} -> fun (V1426) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1427) -> case V6 of {'Core.Value.NType', V1428, V1429} -> case V7 of {'Core.Value.NType', V1430, V1431} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NTCon', V1432, V1433, V1434, V1435, V1436} -> case V7 of {'Core.Value.NTCon', V1437, V1438, V1439, V1440, V1441} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1433, V1438)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V1447 = fun (V1443) -> fun (V1444) -> fun (V1445) -> fun (V1446) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1445, V1446)) end end end end), fun (V1448) -> fun (V1449) -> ((((V1447('erased'))('erased'))(V1448))(V1449)) end end end(fun (V1442) -> ('Idris.Idris2.Builtin':'un--snd'(V1442)) end))(V1436)), ((begin (V1455 = fun (V1451) -> fun (V1452) -> fun (V1453) -> fun (V1454) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1453, V1454)) end end end end), fun (V1456) -> fun (V1457) -> ((((V1455('erased'))('erased'))(V1456))(V1457)) end end end(fun (V1450) -> ('Idris.Idris2.Builtin':'un--snd'(V1450)) end))(V1441)))); 0 -> fun (V1458) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V1459, V1460} -> case V1460 of {'Core.TT.Dotted', V1461} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1461)); _ -> case V6 of {'Core.Value.NErased', V1462, V1463} -> fun (V1464) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1465, V1466} -> fun (V1467) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1468) -> case V6 of {'Core.Value.NType', V1469, V1470} -> case V7 of {'Core.Value.NType', V1471, V1472} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1473, V1474} -> fun (V1475) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1476, V1477} -> fun (V1478) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1479) -> case V6 of {'Core.Value.NType', V1480, V1481} -> case V7 of {'Core.Value.NType', V1482, V1483} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NAs', V1484, V1485, V1486, V1487} -> case V7 of {'Core.Value.NAs', V1488, V1489, V1490, V1491} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V1487, V1491)); _ -> case V7 of {'Core.Value.NErased', V1492, V1493} -> case V1493 of {'Core.TT.Dotted', V1494} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1494)); _ -> case V6 of {'Core.Value.NErased', V1495, V1496} -> fun (V1497) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1498, V1499} -> fun (V1500) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1501) -> case V6 of {'Core.Value.NType', V1502, V1503} -> case V7 of {'Core.Value.NType', V1504, V1505} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1506, V1507} -> fun (V1508) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1509, V1510} -> fun (V1511) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1512) -> case V6 of {'Core.Value.NType', V1513, V1514} -> case V7 of {'Core.Value.NType', V1515, V1516} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDelayed', V1517, V1518, V1519} -> case V7 of {'Core.Value.NDelayed', V1520, V1521, V1522} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V1518, V1521)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V1519, V1522)); 0 -> fun (V1523) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V1524, V1525} -> case V1525 of {'Core.TT.Dotted', V1526} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1526)); _ -> case V6 of {'Core.Value.NErased', V1527, V1528} -> fun (V1529) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1530, V1531} -> fun (V1532) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1533) -> case V6 of {'Core.Value.NType', V1534, V1535} -> case V7 of {'Core.Value.NType', V1536, V1537} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1538, V1539} -> fun (V1540) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1541, V1542} -> fun (V1543) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1544) -> case V6 of {'Core.Value.NType', V1545, V1546} -> case V7 of {'Core.Value.NType', V1547, V1548} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NDelay', V1549, V1550, V1551, V1552} -> case V7 of {'Core.Value.NDelay', V1553, V1554, V1555, V1556} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V1550, V1554)) of 1 -> begin (V1558 = fun (V1557) -> case V1550 of 1 -> {'Prelude.Types.Right', V4}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V1557)) end end), fun (V1559) -> begin (V1560 = (V1558(V1559))), case V1560 of {'Prelude.Types.Left', V1561} -> {'Prelude.Types.Left', V1561}; {'Prelude.Types.Right', V1562} -> (begin (V1563 = ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V1562, V5, V1552, V1556))), V1563 end(V1559)) end end end end; 0 -> fun (V1564) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V1565, V1566} -> case V1566 of {'Core.TT.Dotted', V1567} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1567)); _ -> case V6 of {'Core.Value.NErased', V1568, V1569} -> fun (V1570) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1571, V1572} -> fun (V1573) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1574) -> case V6 of {'Core.Value.NType', V1575, V1576} -> case V7 of {'Core.Value.NType', V1577, V1578} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1579, V1580} -> fun (V1581) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1582, V1583} -> fun (V1584) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1585) -> case V6 of {'Core.Value.NType', V1586, V1587} -> case V7 of {'Core.Value.NType', V1588, V1589} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NForce', V1590, V1591, V1592, V1593} -> case V7 of {'Core.Value.NForce', V1594, V1595, V1596, V1597} -> case ('Idris.Idris2.Core.TT':'un--compatible'(V1591, V1595)) of 1 -> begin (V1598 = ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V1592, V1596))), fun (V1599) -> begin (V1600 = (V1598(V1599))), case V1600 of {'Prelude.Types.Left', V1601} -> {'Prelude.Types.Left', V1601}; {'Prelude.Types.Right', V1602} -> (begin (V1620 = case V1602 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ((begin (V1608 = fun (V1604) -> fun (V1605) -> fun (V1606) -> fun (V1607) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1606, V1607)) end end end end), fun (V1609) -> fun (V1610) -> ((((V1608('erased'))('erased'))(V1609))(V1610)) end end end(fun (V1603) -> ('Idris.Idris2.Builtin':'un--snd'(V1603)) end))(V1593)), ((begin (V1616 = fun (V1612) -> fun (V1613) -> fun (V1614) -> fun (V1615) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V1614, V1615)) end end end end), fun (V1617) -> fun (V1618) -> ((((V1616('erased'))('erased'))(V1617))(V1618)) end end end(fun (V1611) -> ('Idris.Idris2.Builtin':'un--snd'(V1611)) end))(V1597)))); 0 -> fun (V1619) -> {'Prelude.Types.Right', 0} end end), V1620 end(V1599)) end end end end; 0 -> fun (V1621) -> {'Prelude.Types.Right', 0} end end; _ -> case V7 of {'Core.Value.NErased', V1622, V1623} -> case V1623 of {'Core.TT.Dotted', V1624} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1624)); _ -> case V6 of {'Core.Value.NErased', V1625, V1626} -> fun (V1627) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1628, V1629} -> fun (V1630) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1631) -> case V6 of {'Core.Value.NType', V1632, V1633} -> case V7 of {'Core.Value.NType', V1634, V1635} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1636, V1637} -> fun (V1638) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1639, V1640} -> fun (V1641) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1642) -> case V6 of {'Core.Value.NType', V1643, V1644} -> case V7 of {'Core.Value.NType', V1645, V1646} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NPrimVal', V1647, V1648} -> case V7 of {'Core.Value.NPrimVal', V1649, V1650} -> fun (V1651) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V1648, V1650))} end; _ -> case V7 of {'Core.Value.NErased', V1652, V1653} -> case V1653 of {'Core.TT.Dotted', V1654} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1654)); _ -> case V6 of {'Core.Value.NErased', V1655, V1656} -> fun (V1657) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1658, V1659} -> fun (V1660) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1661) -> case V6 of {'Core.Value.NType', V1662, V1663} -> case V7 of {'Core.Value.NType', V1664, V1665} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1666, V1667} -> fun (V1668) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1669, V1670} -> fun (V1671) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1672) -> case V6 of {'Core.Value.NType', V1673, V1674} -> case V7 of {'Core.Value.NType', V1675, V1676} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; {'Core.Value.NErased', V1677, V1678} -> case V1678 of {'Core.TT.Dotted', V1679} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V1679, V7)); _ -> case V7 of {'Core.Value.NErased', V1680, V1681} -> case V1681 of {'Core.TT.Dotted', V1682} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1682)); _ -> case V6 of {'Core.Value.NErased', V1683, V1684} -> fun (V1685) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1686, V1687} -> fun (V1688) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1689) -> case V6 of {'Core.Value.NType', V1690, V1691} -> case V7 of {'Core.Value.NType', V1692, V1693} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1694, V1695} -> fun (V1696) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1697, V1698} -> fun (V1699) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1700) -> case V6 of {'Core.Value.NType', V1701, V1702} -> case V7 of {'Core.Value.NType', V1703, V1704} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end; _ -> case V7 of {'Core.Value.NErased', V1705, V1706} -> case V1706 of {'Core.TT.Dotted', V1707} -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V1707)); _ -> case V6 of {'Core.Value.NErased', V1708, V1709} -> fun (V1710) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1711, V1712} -> fun (V1713) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1714) -> case V6 of {'Core.Value.NType', V1715, V1716} -> case V7 of {'Core.Value.NType', V1717, V1718} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end; _ -> case V6 of {'Core.Value.NErased', V1719, V1720} -> fun (V1721) -> {'Prelude.Types.Right', 1} end; _ -> case V7 of {'Core.Value.NErased', V1722, V1723} -> fun (V1724) -> {'Prelude.Types.Right', 1} end; _ -> fun (V1725) -> case V6 of {'Core.Value.NType', V1726, V1727} -> case V7 of {'Core.Value.NType', V1728, V1729} -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end; _ -> {'Prelude.Types.Right', 0} end end end end end end end end.
'dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V4, V6))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V19 = begin (V13 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V4, V7))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V18 = ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V12, V17))), V18 end(V14)) end end end end), V19 end(V9)) end end end end.
'dn--un--__Impl_Convert_Term'() -> {'Core.Normalise.Convert.dn--un--__mkConvert', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--convert_Convert_Term'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--convertInf_Convert_Term'(V6, V7, V8, V9, V10, V11)) end end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un--convGen_Convert_Term'(V12, V13, V14, V15, V16, V17, V18, V19)) end end end end end end end end}.
'dn--un--__Impl_Convert_NF'() -> {'Core.Normalise.Convert.dn--un--__mkConvert', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--convert_Convert_NF'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--convertInf_Convert_NF'(V6, V7, V8, V9, V10, V11)) end end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un--convGen_Convert_NF'(V12, V13, V14, V15, V16, V17, V18, V19)) end end end end end end end end}.
'dn--un--__Impl_Convert_Closure'() -> {'Core.Normalise.Convert.dn--un--__mkConvert', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--convert_Convert_Closure'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--convertInf_Convert_Closure'(V6, V7, V8, V9, V10, V11)) end end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un--convGen_Convert_Closure'(V12, V13, V14, V15, V16, V17, V18, V19)) end end end end end end end end}.
'un--tryUpdate'(V0, V1, V2, V3) -> case V3 of {'Core.TT.Local', V4, V5, V6} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7171-6836--in--un--findIdx'(V0, V1, V6, V5, V4, V2, V2, V6)), fun (V7) -> begin (V8 = V7), {'Prelude.Types.Just', {'Core.TT.Local', V4, V5, V8}} end end)); {'Core.TT.Ref', V9, V10, V11} -> {'Prelude.Types.Just', {'Core.TT.Ref', V9, V10, V11}}; {'Core.TT.Meta', V12, V13, V14, V15} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V18, V19)) end end end end, fun (V20) -> fun (V21) -> {'Prelude.Types.Just', V21} end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V24, V25)) end end end end}, fun (V26) -> ('un--tryUpdate'(V0, V1, V2, V26)) end, V15)), fun (V27) -> {'Prelude.Types.Just', {'Core.TT.Meta', V12, V13, V14, V27}} end)); {'Core.TT.Bind', V28, V29, V30, V31} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7171-7018--in--un--tryUpdateB'(V0, V1, V29, V31, V30, V28, V2, V30)), fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'([V29 | V0], [V29 | V1], ((begin (V38 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V36, V37)) end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V33) -> ('nested--7171-7019--in--un--weakenP'(V0, V1, V29, V31, V30, V28, V2, V29, V33)) end))(V2)), V31)), fun (V41) -> {'Prelude.Types.Just', {'Core.TT.Bind', V28, V29, V32, V41}} end)) end)); {'Core.TT.App', V42, V43, V44} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V43)), fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V44)), fun (V46) -> {'Prelude.Types.Just', {'Core.TT.App', V42, V45, V46}} end)) end)); {'Core.TT.As', V47, V48, V49, V50} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V49)), fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V50)), fun (V52) -> {'Prelude.Types.Just', {'Core.TT.As', V47, V48, V51, V52}} end)) end)); {'Core.TT.TDelayed', V53, V54, V55} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V55)), fun (V56) -> {'Prelude.Types.Just', {'Core.TT.TDelayed', V53, V54, V56}} end)); {'Core.TT.TDelay', V57, V58, V59, V60} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V59)), fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V60)), fun (V62) -> {'Prelude.Types.Just', {'Core.TT.TDelay', V57, V58, V61, V62}} end)) end)); {'Core.TT.TForce', V63, V64, V65} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V65)), fun (V66) -> {'Prelude.Types.Just', {'Core.TT.TForce', V63, V64, V66}} end)); {'Core.TT.PrimVal', V67, V68} -> {'Prelude.Types.Just', {'Core.TT.PrimVal', V67, V68}}; {'Core.TT.Erased', V69, V70} -> ((begin (V87 = fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V85, V86)) end end end end), fun (V88) -> fun (V89) -> ((((V87('erased'))('erased'))(V88))(V89)) end end end(fun (V82) -> {'Core.TT.Erased', V69, V82} end))(('Idris.Idris2.Core.TT':'dn--un--traverse_Traversable_WhyErased'({'Prelude.Interfaces.MkApplicative', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V73, V74)) end end end end, fun (V75) -> fun (V76) -> {'Prelude.Types.Just', V76} end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V79, V80)) end end end end}, fun (V81) -> ('un--tryUpdate'(V0, V1, V2, V81)) end, V70)))); {'Core.TT.TType', V90, V91} -> {'Prelude.Types.Just', {'Core.TT.TType', V90, V91}} end.
'un--quickConv'(V0, V1) -> case V0 of [] -> case V1 of [] -> 1; _ -> 0 end; [E0 | E1] -> (fun (V2, V3) -> case V1 of [E2 | E3] -> (fun (V4, V5) -> case ('nested--7810-7825--in--un--quickConvArg'(V2, V3, V4, V5, V2, V4)) of 1 -> ('un--quickConv'(V3, V5)); 0 -> 0 end end(E2, E3)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'un--getMatchingVars'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Core.Case.CaseTree.Case', V7, V8, V9, V10} -> case V6 of {'Core.Case.CaseTree.Case', V11, V12, V13, V14} -> ('un--getMatchingVarAlts'(V0, V1, V2, V3, [{'Builtin.MkPair', V8, V12} | V4], V10, V14)); _ -> fun (V15) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; {'Core.Case.CaseTree.STerm', V16, V17} -> case V6 of {'Core.Case.CaseTree.STerm', V18, V19} -> ('case--getMatchingVars-8866'(V1, V2, V17, V16, V19, V18, V4, V3, V0, ('un--tryUpdate'(V1, V2, V4, V17)))); _ -> fun (V20) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; {'Core.Case.CaseTree.Unmatched', V21} -> fun (V22) -> case V6 of {'Core.Case.CaseTree.Unmatched', V23} -> {'Prelude.Types.Right', {'Prelude.Types.Just', V4}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; {'Core.Case.CaseTree.Impossible'} -> fun (V24) -> case V6 of {'Core.Case.CaseTree.Impossible'} -> {'Prelude.Types.Right', {'Prelude.Types.Just', V4}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V25) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'un--getMatchingVarAlts'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> fun (V7) -> case V6 of [] -> {'Prelude.Types.Right', {'Prelude.Types.Just', V4}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; [E0 | E1] -> (fun (V8, V9) -> case V6 of [E2 | E3] -> (fun (V10, V11) -> begin (V12 = ('un--getMatchingVarAlt'(V0, V1, V2, V3, V4, V8, V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V19 = case V16 of {'Prelude.Types.Just', V17} -> ('un--getMatchingVarAlts'(V0, V1, V2, V3, V17, V9, V11)); {'Prelude.Types.Nothing'} -> fun (V18) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V19 end(V13)) end end end end end(E2, E3)); _ -> fun (V20) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end(E0, E1)); _ -> fun (V21) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'un--getMatchingVarAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Core.Case.CaseTree.ConCase', V7, V8, V9, V10} -> case V6 of {'Core.Case.CaseTree.ConCase', V11, V12, V13, V14} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V11)) of 1 -> ('case--case block in getMatchingVarAlt-8456'(V1, V2, V9, V10, V8, V7, V13, V14, V12, V11, V4, V3, V0, ('nested--7850-8180--in--un--extend'(V1, V2, V9, V10, V8, V7, V13, V14, V12, V11, V4, V3, V0, V9, V13, V4)))); 0 -> fun (V15) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V16) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; {'Core.Case.CaseTree.ConstCase', V17, V18} -> case V6 of {'Core.Case.CaseTree.ConstCase', V19, V20} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V17, V19)) of 1 -> ('un--getMatchingVars'(V0, V1, V2, V3, V4, V18, V20)); 0 -> fun (V21) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V22) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; {'Core.Case.CaseTree.DefaultCase', V23} -> case V6 of {'Core.Case.CaseTree.DefaultCase', V24} -> ('un--getMatchingVars'(V0, V1, V2, V3, V4, V23, V24)); _ -> fun (V25) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V26) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'un--convertInf'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Core.Normalise.Convert.dn--un--__mkConvert', V6, V7, V8} -> fun (V9) -> ((((((V7(V1))(V2))(V3))(V4))(V5))(V9)) end end.
'un--convert'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Core.Normalise.Convert.dn--un--__mkConvert', V6, V7, V8} -> fun (V9) -> ((((((V6(V1))(V2))(V3))(V4))(V5))(V9)) end end.
'un--convGen'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Core.Normalise.Convert.dn--un--__mkConvert', V6, V7, V8} -> fun (V9) -> fun (V10) -> fun (V11) -> ((((((((V8(V1))(V2))(V3))(V4))(V5))(V9))(V10))(V11)) end end end end.
'un--convBinders'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Core.TT.Pi', V8, V9, V10, V11} -> case V7 of {'Core.TT.Pi', V12, V13, V14, V15} -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V9, V13)) of 1 -> fun (V16) -> {'Prelude.Types.Right', 0} end; 0 -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, V11, V15)) end; _ -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V7)))) of 1 -> fun (V17) -> {'Prelude.Types.Right', 0} end; 0 -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.TT':'un--binderType'(V6)), ('Idris.Idris2.Core.TT':'un--binderType'(V7)))) end end; {'Core.TT.Lam', V18, V19, V20, V21} -> case V7 of {'Core.TT.Lam', V22, V23, V24, V25} -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V19, V23)) of 1 -> fun (V26) -> {'Prelude.Types.Right', 0} end; 0 -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, V21, V25)) end; _ -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V7)))) of 1 -> fun (V27) -> {'Prelude.Types.Right', 0} end; 0 -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.TT':'un--binderType'(V6)), ('Idris.Idris2.Core.TT':'un--binderType'(V7)))) end end; _ -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V7)))) of 1 -> fun (V28) -> {'Prelude.Types.Right', 0} end; 0 -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.TT':'un--binderType'(V6)), ('Idris.Idris2.Core.TT':'un--binderType'(V7)))) end end.
'un--chkSameDefs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V42 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V6, case V4 of {'Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V10 end))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V109 = case V46 of {'Prelude.Types.Just', V47} -> case V47 of {'Core.Context.Context.PMDef', V48, V49, V50, V51, V52} -> begin (V85 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V7, case V4 of {'Core.Context.MkDefs', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84} -> V53 end))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V106 = case V89 of {'Prelude.Types.Just', V90} -> case V90 of {'Core.Context.Context.PMDef', V91, V92, V93, V94, V95} -> begin (V96 = ('un--getMatchingVars'(V0, V49, V92, V4, [], V50, V93))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V103 = case V100 of {'Prelude.Types.Just', V101} -> ('nested--7937-9025--in--un--convertMatches'(V1, V9, V8, V7, V6, V5, V4, V3, V2, V0, V49, V92, V101)); {'Prelude.Types.Nothing'} -> fun (V102) -> {'Prelude.Types.Right', 0} end end), V103 end(V97)) end end end end; _ -> fun (V104) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V105) -> {'Prelude.Types.Right', 0} end end), V106 end(V86)) end end end end; _ -> fun (V107) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V108) -> {'Prelude.Types.Right', 0} end end), V109 end(V43)) end end end end.
'un--chkConvHead'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Core.Value.NLocal', V8, V9} -> fun (V10) -> case V7 of {'Core.Value.NLocal', V11, V12} -> {'Prelude.Types.Right', case (V9 =:= V12) of 'false' -> 0; _ -> 1 end}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NRef', V13, V14} -> fun (V15) -> case V7 of {'Core.Value.NRef', V16, V17} -> {'Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V14, V17))}; _ -> {'Prelude.Types.Right', 0} end end; {'Core.Value.NMeta', V18, V19, V20} -> case V7 of {'Core.Value.NMeta', V21, V22, V23} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V19, V22)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, V20, V23)); 0 -> fun (V24) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V25) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V26) -> {'Prelude.Types.Right', 0} end end.
'un--chkConvCaseBlock'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V7 of {'Core.Value.NRef', V11, V12} -> case V9 of {'Core.Value.NRef', V13, V14} -> begin (V47 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V5 of {'Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> V15 end, V12))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V323 = case V51 of {'Core.Name.NS', V52, V53} -> case V53 of {'Core.Name.CaseBlock', V54, V55} -> begin (V88 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V5 of {'Core.Context.MkDefs', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} -> V56 end, V14))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V320 = case V92 of {'Core.Name.NS', V93, V94} -> case V94 of {'Core.Name.CaseBlock', V95, V96} -> begin (V97 = ('un--chkSameDefs'(V0, V1, V3, V4, V5, V6, V12, V14, V8, V10))), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V317 = case V101 of 0 -> begin (V134 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V12, case V5 of {'Core.Context.MkDefs', V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133} -> V102 end))), fun (V135) -> begin (V136 = (V134(V135))), case V136 of {'Prelude.Types.Left', V137} -> {'Prelude.Types.Left', V137}; {'Prelude.Types.Right', V138} -> (begin (V315 = case V138 of {'Prelude.Types.Just', V139} -> begin (V172 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V14, case V5 of {'Core.Context.MkDefs', V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171} -> V140 end))), fun (V173) -> begin (V174 = (V172(V173))), case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> (begin (V313 = case V176 of {'Prelude.Types.Just', V177} -> case V139 of {'Core.Context.Context.MkGlobalDef', V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199} -> case V195 of {'Core.Context.Context.PMDef', V200, V201, V202, V203, V204} -> case V177 of {'Core.Context.Context.MkGlobalDef', V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226} -> case V222 of {'Core.Context.Context.PMDef', V227, V228, V229, V230, V231} -> case ('nested--7974-9563--in--un--findArgPos'(V1, V13, V11, V12, V14, V10, V8, V6, V5, V4, V3, V2, V0, V202)) of {'Prelude.Types.Just', V232} -> case ('nested--7974-9563--in--un--findArgPos'(V1, V13, V11, V12, V14, V10, V8, V6, V5, V4, V3, V2, V0, V229)) of {'Prelude.Types.Just', V233} -> case ('nested--7974-9564--in--un--getScrutinee'(V1, V13, V11, V12, V14, V10, V8, V6, V5, V4, V3, V2, V0, V232, V8)) of {'Prelude.Types.Just', V234} -> case ('nested--7974-9564--in--un--getScrutinee'(V1, V13, V11, V12, V14, V10, V8, V6, V5, V4, V3, V2, V0, V233, V10)) of {'Prelude.Types.Just', V235} -> begin (V255 = begin (V236 = ('dn--un--convGen_Convert_Closure'(V0, V1, V3, V4, V5, V6, V234, V235))), ((begin (V252 = fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> fun (V251) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V249, V250, V251)) end end end end end), fun (V253) -> fun (V254) -> ((((V252('erased'))('erased'))(V253))(V254)) end end end((begin (V244 = fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> case V241 of {'Prelude.Types.Left', V242} -> {'Prelude.Types.Left', V242}; {'Prelude.Types.Right', V243} -> {'Prelude.Types.Right', (V240(V243))} end end end end end), fun (V245) -> fun (V246) -> ((((V244('erased'))('erased'))(V245))(V246)) end end end(fun (V237) -> {'Builtin.MkUnit'} end))))(V236)) end), fun (V256) -> begin (V257 = (V255(V256))), case V257 of {'Prelude.Types.Left', V258} -> {'Prelude.Types.Left', V258}; {'Prelude.Types.Right', V259} -> (begin (V305 = fun (V260) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.FC':'dn--un--==_Eq_FC'(case V139 of {'Core.Context.Context.MkGlobalDef', V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282} -> V261 end, case V177 of {'Core.Context.Context.MkGlobalDef', V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304} -> V283 end))} end), V305 end(V256)) end end end end; {'Prelude.Types.Nothing'} -> fun (V306) -> {'Prelude.Types.Right', 0} end end; {'Prelude.Types.Nothing'} -> fun (V307) -> {'Prelude.Types.Right', 0} end end; {'Prelude.Types.Nothing'} -> fun (V308) -> {'Prelude.Types.Right', 0} end end; {'Prelude.Types.Nothing'} -> fun (V309) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V310) -> {'Prelude.Types.Right', 0} end end end; _ -> fun (V311) -> {'Prelude.Types.Right', 0} end end end; _ -> fun (V312) -> {'Prelude.Types.Right', 0} end end), V313 end(V173)) end end end end; _ -> fun (V314) -> {'Prelude.Types.Right', 0} end end), V315 end(V135)) end end end end; 1 -> fun (V316) -> {'Prelude.Types.Right', 1} end end), V317 end(V98)) end end end end; _ -> fun (V318) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V319) -> {'Prelude.Types.Right', 0} end end), V320 end(V89)) end end end end; _ -> fun (V321) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V322) -> {'Prelude.Types.Right', 0} end end), V323 end(V48)) end end end end; _ -> fun (V324) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V325) -> {'Prelude.Types.Right', 0} end end.
'un--allConvNF'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> fun (V8) -> case V7 of [] -> {'Prelude.Types.Right', 1}; _ -> {'Prelude.Types.Right', 0} end end; [E0 | E1] -> (fun (V9, V10) -> case V7 of [E2 | E3] -> (fun (V11, V12) -> begin (V13 = ('un--allConvNF'(V0, V1, V2, V3, V4, V5, V10, V12))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = case V17 of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V9, V11)); 0 -> fun (V18) -> {'Prelude.Types.Right', 0} end end), V19 end(V14)) end end end end end(E2, E3)); _ -> fun (V20) -> {'Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V21) -> {'Prelude.Types.Right', 0} end end.
'un--allConv'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V8) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V4, V8)) end, V6, []))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V22 = begin (V15 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V4, V14)) end, V7, []))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = case ('un--quickConv'(V13, V19)) of 1 -> ('un--allConvNF'(V0, V1, V2, V3, V4, V5, V13, V19)); 0 -> fun (V20) -> {'Prelude.Types.Right', 0} end end), V21 end(V16)) end end end end), V22 end(V10)) end end end end.
