-module('Idris.Idris2.TTImp.Interactive.CaseSplit').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--newLHS-14519'/8,
  'dn--un--show_Show_SplitError'/1,
  'dn--un--show_Show_ClauseUpdate'/1,
  'dn--un--show_Show_(SplitResult $a)'/2,
  'dn--un--showPrec_Show_SplitError'/2,
  'dn--un--showPrec_Show_ClauseUpdate'/2,
  'dn--un--showPrec_Show_(SplitResult $a)'/3,
  'dn--un--__Impl_Show_SplitError'/0,
  'dn--un--__Impl_Show_ClauseUpdate'/0,
  'dn--un--__Impl_Show_(SplitResult $a)'/1,
  'un--updateArg'/5,
  'un--update'/5,
  'un--substLets'/2,
  'un--recordUpdate'/4,
  'un--newLHS'/7,
  'un--mkCase'/7,
  'un--getUpdates'/3,
  'un--getSplitsLHS'/9,
  'un--getSplits'/7,
  'un--getEnvArgNames'/4,
  'un--getDefining'/1,
  'un--findUpdates'/4,
  'un--findTyName'/6,
  'un--findCons'/3,
  'un--findAllVars'/1,
  'un--explicitlyBound'/2,
  'un--expandCon'/4,
  'un--combine'/2
]).
'case--newLHS-14519'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> begin (V18 = ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> {'TTImp.TTImp.Explicit', V5, {'TTImp.TTImp.Implicit', V5, 1}} end))(('Idris.Idris2.Data.List':'un--take'(V4, V9))))), begin (V19 = ('Idris.Idris2.Data.List':'un--drop'(V4, V9))), begin (V21 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V20) -> ('un--update'(V6, V3, V2, V1, V20)) end, V19, []))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp.Arg':'un--apply'(V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V18, V25))))} end), V27 end(V22)) end end end end end end end.
'dn--un--show_Show_SplitError'(V0) -> case V0 of {'TTImp.Interactive.CaseSplit.NoValidSplit'} -> <<"No valid case splits"/utf8>>; {'TTImp.Interactive.CaseSplit.CantSplitThis', V1, V2} -> <<<<"Can\x{27}t split on "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary, <<<<" ("/utf8>>/binary, <<V2/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'TTImp.Interactive.CaseSplit.CantFindLHS'} -> <<"No clause to split here"/utf8>> end.
'dn--un--show_Show_ClauseUpdate'(V0) -> case V0 of {'TTImp.Interactive.CaseSplit.Valid', V1, V2} -> <<<<"Valid: "/utf8>>/binary, <<('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V4, V5)) end end}, V1))/binary, <<<<"\x{a}"/utf8>>/binary, <<<<"Updates: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V8, V9)) end end}, {'Prelude.Show.MkShow', fun (V10) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11)) end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V12, V13)) end end}, V10)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V17, V18)) end end}, V14, V15)) end end}}, V6)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V22, V23)) end end}, {'Prelude.Show.MkShow', fun (V24) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V25)) end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V26, V27)) end end}, V24)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V31, V32)) end end}, V28, V29)) end end}}, V19, V20)) end end}, V2))/binary>>/binary>>/binary>>/binary>>; {'TTImp.Interactive.CaseSplit.Impossible', V33} -> <<<<"Impossible: "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V35, V36)) end end}, V33))/binary>>; {'TTImp.Interactive.CaseSplit.Invalid'} -> <<"Invalid"/utf8>> end.
'dn--un--show_Show_(SplitResult $a)'(V0, V1) -> case V1 of {'TTImp.Interactive.CaseSplit.SplitFail', V2} -> <<<<"Split error: "/utf8>>/binary, ('dn--un--show_Show_SplitError'(V2))/binary>>; {'TTImp.Interactive.CaseSplit.OK', V3} -> <<<<"OK: "/utf8>>/binary, case V0 of {'Prelude.Show.MkShow', V4, V5} -> (V4(V3)) end/binary>> end.
'dn--un--showPrec_Show_SplitError'(V0, V1) -> ('dn--un--show_Show_SplitError'(V1)).
'dn--un--showPrec_Show_ClauseUpdate'(V0, V1) -> ('dn--un--show_Show_ClauseUpdate'(V1)).
'dn--un--showPrec_Show_(SplitResult $a)'(V0, V1, V2) -> ('dn--un--show_Show_(SplitResult $a)'(V0, V2)).
'dn--un--__Impl_Show_SplitError'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_SplitError'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SplitError'(V1, V2)) end end}.
'dn--un--__Impl_Show_ClauseUpdate'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ClauseUpdate'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ClauseUpdate'(V1, V2)) end end}.
'dn--un--__Impl_Show_(SplitResult $a)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(SplitResult $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(SplitResult $a)'(V0, V2, V3)) end end}.
'un--updateArg'(V0, V1, V2, V3, V4) -> case V4 of {'TTImp.TTImp.IVar', V5, V6} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> V27 end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V35, V36)) end end}, V6, V1)) of 1 -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6, V2)) of 1 -> ('un--expandCon'(V0, V5, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V37, V6)) end, V1)), V3)); 0 -> fun (V38) -> {'Prelude.Types.Right', {'TTImp.TTImp.Implicit', V5, 1}} end end; 0 -> fun (V39) -> {'Prelude.Types.Right', {'TTImp.TTImp.IVar', V5, V6}} end end; {'TTImp.TTImp.IApp', V40, V41, V42} -> begin (V43 = ('un--updateArg'(V0, V1, V2, V3, V41))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V55 = begin (V48 = ('un--updateArg'(V0, V1, V2, V3, V42))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V54 = fun (V53) -> {'Prelude.Types.Right', {'TTImp.TTImp.IApp', V40, V47, V52}} end), V54 end(V49)) end end end end), V55 end(V44)) end end end end; {'TTImp.TTImp.IAutoApp', V56, V57, V58} -> begin (V59 = ('un--updateArg'(V0, V1, V2, V3, V57))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V71 = begin (V64 = ('un--updateArg'(V0, V1, V2, V3, V58))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V70 = fun (V69) -> {'Prelude.Types.Right', {'TTImp.TTImp.IAutoApp', V56, V63, V68}} end), V70 end(V65)) end end end end), V71 end(V60)) end end end end; {'TTImp.TTImp.INamedApp', V72, V73, V74, V75} -> begin (V76 = ('un--updateArg'(V0, V1, V2, V3, V73))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V88 = begin (V81 = ('un--updateArg'(V0, V1, V2, V3, V75))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V87 = fun (V86) -> {'Prelude.Types.Right', {'TTImp.TTImp.INamedApp', V72, V80, V74, V85}} end), V87 end(V82)) end end end end), V88 end(V77)) end end end end; {'TTImp.TTImp.IAs', V89, V90, V91, V92, V93} -> ('un--updateArg'(V0, V1, V2, V3, V93)); _ -> fun (V94) -> {'Prelude.Types.Right', {'TTImp.TTImp.Implicit', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V4)), 1}} end end.
'un--update'(V0, V1, V2, V3, V4) -> case V4 of {'TTImp.TTImp.Explicit', V5, V6} -> begin (V7 = ('un--updateArg'(V0, V1, V2, V3, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'TTImp.TTImp.Explicit', V5, V11}} end), V13 end(V8)) end end end end; {'TTImp.TTImp.Auto', V14, V15} -> begin (V16 = ('un--updateArg'(V0, V1, V2, V3, V15))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'TTImp.TTImp.Auto', V14, V20}} end), V22 end(V17)) end end end end; {'TTImp.TTImp.Named', V23, V24, V25} -> begin (V26 = ('un--updateArg'(V0, V1, V2, V3, V25))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V32 = fun (V31) -> {'Prelude.Types.Right', {'TTImp.TTImp.Named', V23, V24, V30}} end), V32 end(V27)) end end end end end.
'un--substLets'(V0, V1) -> case V1 of {'Core.TT.Bind', V2, V3, V4, V5} -> case V4 of {'Core.TT.Let', V6, V7, V8, V9} -> ('un--substLets'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V8, V5)))); {'Core.TT.PLet', V10, V11, V12, V13} -> ('un--substLets'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V12, V5)))); _ -> {'Core.TT.Bind', V2, V3, V4, ('un--substLets'([V3 | V0], V5))} end; _ -> V1 end.
'un--recordUpdate'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V34 = begin (V26 = ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V16) -> case V16 of {'Builtin.MkPair', V17, V18} -> {'Builtin.MkPair', V17, {'TTImp.TTImp.IVar', V1, V18}} end end))(case V13 of {'TTImp.Interactive.CaseSplit.MkUpdates', V14, V15} -> V14 end))), begin (V27 = V0), fun (V28) -> begin (V33 = (begin (V29 = V27), fun (V30) -> ('erlang':'put'(V29, case V13 of {'TTImp.Interactive.CaseSplit.MkUpdates', V31, V32} -> {'TTImp.Interactive.CaseSplit.MkUpdates', V31, [{'Builtin.MkPair', V2, ('Idris.Idris2.TTImp.Utils':'un--substNames'([], V26, V3))} | V32]} end)) end end(V28))), {'Prelude.Types.Right', V33} end end end end), V34 end(V10)) end end end end.
'un--newLHS'(V0, V1, V2, V3, V4, V5, V6) -> ('case--newLHS-14519'(V6, V5, V4, V3, V2, V1, V0, ('Idris.Idris2.TTImp.TTImp':'un--getFnArgs'(V6, [])))).
'un--mkCase'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Core.FC.Virtual', {'Core.FC.Interactive'}}))))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V232 = begin (V17 = begin (V12 = V0), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V231 = begin (V27 = begin (V22 = V1), fun (V23) -> begin (V26 = (begin (V24 = V22), fun (V25) -> ('erlang':'get'(V24)) end end(V23))), {'Prelude.Types.Right', V26} end end end), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V230 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(begin (V32 = ('Idris.Idris2.Core.Context':'un--setAllPublic'(V0, 1))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V146 = begin (V41 = ('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V0, V11, V1, V2, V3, V4, {'TTImp.Elab.Check.InLHS', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V37, V38)) end end, 0, fun (V39) -> fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V39, V40)) end end, 1}))}, [], [], {'Core.Env.Nil'}, {'TTImp.TTImp.IBindHere', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V6)), {'TTImp.TTImp.PATTERN'}, V6}, {'Prelude.Types.Nothing'}))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V145 = case V45 of {'Builtin.MkPair', V46, V47} -> begin (V48 = ('Idris.Idris2.Core.Context':'un--setAllPublic'(V0, 0))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V144 = begin (V58 = begin (V53 = V0), fun (V54) -> begin (V57 = (begin (V55 = V53), fun (V56) -> ('erlang':'put'(V55, V21)) end end(V54))), {'Prelude.Types.Right', V57} end end end), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V143 = begin (V68 = begin (V63 = V1), fun (V64) -> begin (V67 = (begin (V65 = V63), fun (V66) -> ('erlang':'put'(V65, V31)) end end(V64))), {'Prelude.Types.Right', V67} end end end), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V142 = begin (V102 = begin (V73 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoSugar'([], V0, {'Core.Env.Nil'}, V46))), ((begin (V99 = fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V96, V97, V98)) end end end end end), fun (V100) -> fun (V101) -> ((((V99('erased'))('erased'))(V100))(V101)) end end end((begin (V91 = fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> {'Prelude.Types.Right', (V87(V90))} end end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end((begin (V82 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(V80, V81)) end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V74) -> case V74 of {'Core.TT.MkKindedName', V75, V76, V77} -> V77 end end))))))(V73)) end), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V141 = begin (V116 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V108 = fun (V107) -> V107 end), fun (V109) -> (V108(V109)) end end(<<"interaction.casesplit"/utf8>>)), 3, fun () -> <<(begin (V111 = fun (V110) -> V110 end), fun (V112) -> (V111(V112)) end end(<<"Original LHS: "/utf8>>))/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V113) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V114, V115)) end end}, V5))/binary>> end))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V140 = begin (V127 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V122 = fun (V121) -> V121 end), fun (V123) -> (V122(V123)) end end(<<"interaction.casesplit"/utf8>>)), 3, fun () -> <<<<"New LHS: "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V124) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V124)) end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V125, V126)) end end}, V106))/binary>> end))), fun (V128) -> begin (V129 = (V127(V128))), case V129 of {'Prelude.Types.Left', V130} -> {'Prelude.Types.Left', V130}; {'Prelude.Types.Right', V131} -> (begin (V139 = begin (V132 = ('un--getUpdates'(V21, V5, V106))), fun (V133) -> begin (V134 = (V132(V133))), case V134 of {'Prelude.Types.Left', V135} -> {'Prelude.Types.Left', V135}; {'Prelude.Types.Right', V136} -> (begin (V138 = fun (V137) -> {'Prelude.Types.Right', {'TTImp.Interactive.CaseSplit.Valid', V106, V136}} end), V138 end(V133)) end end end end), V139 end(V128)) end end end end), V140 end(V117)) end end end end), V141 end(V103)) end end end end), V142 end(V69)) end end end end), V143 end(V59)) end end end end), V144 end(V49)) end end end end end), V145 end(V42)) end end end end), V146 end(V33)) end end end end, fun (V147) -> begin (V153 = begin (V148 = V0), fun (V149) -> begin (V152 = (begin (V150 = V148), fun (V151) -> ('erlang':'put'(V150, V21)) end end(V149))), {'Prelude.Types.Right', V152} end end end), fun (V154) -> begin (V155 = (V153(V154))), case V155 of {'Prelude.Types.Left', V156} -> {'Prelude.Types.Left', V156}; {'Prelude.Types.Right', V157} -> (begin (V229 = begin (V163 = begin (V158 = V1), fun (V159) -> begin (V162 = (begin (V160 = V158), fun (V161) -> ('erlang':'put'(V160, V31)) end end(V159))), {'Prelude.Types.Right', V162} end end end), fun (V164) -> begin (V165 = (V163(V164))), case V165 of {'Prelude.Types.Left', V166} -> {'Prelude.Types.Left', V166}; {'Prelude.Types.Right', V167} -> (begin (V228 = case V147 of {'Core.Core.WhenUnifying', V168, V169, V170, V171, V172, V173, V174} -> begin (V207 = case V21 of {'Core.Context.MkDefs', V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206} -> {'Core.Context.MkDefs', V170, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206} end), begin (V208 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V168, V207, V171, V172))), fun (V209) -> begin (V210 = (V208(V209))), case V210 of {'Prelude.Types.Left', V211} -> {'Prelude.Types.Left', V211}; {'Prelude.Types.Right', V212} -> (begin (V226 = begin (V213 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V168, V207, V171, V173))), fun (V214) -> begin (V215 = (V213(V214))), case V215 of {'Prelude.Types.Left', V216} -> {'Prelude.Types.Left', V216}; {'Prelude.Types.Right', V217} -> (begin (V225 = begin (V218 = ('Idris.Idris2.TTImp.ProcessDef':'un--impossibleOK'(V0, V168, V207, V212, V217))), fun (V219) -> begin (V220 = (V218(V219))), case V220 of {'Prelude.Types.Left', V221} -> {'Prelude.Types.Left', V221}; {'Prelude.Types.Right', V222} -> (begin (V224 = fun (V223) -> case V222 of 1 -> {'Prelude.Types.Right', {'TTImp.Interactive.CaseSplit.Impossible', V6}}; 0 -> {'Prelude.Types.Right', {'TTImp.Interactive.CaseSplit.Invalid'}} end end), V224 end(V219)) end end end end), V225 end(V214)) end end end end), V226 end(V209)) end end end end end; _ -> fun (V227) -> {'Prelude.Types.Right', {'TTImp.Interactive.CaseSplit.Invalid'}} end end), V228 end(V164)) end end end end), V229 end(V154)) end end end end end))), V230 end(V28)) end end end end), V231 end(V18)) end end end end), V232 end(V8)) end end end end.
'un--getUpdates'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Core':'un--newRef'({'TTImp.Interactive.CaseSplit.UPD'}, {'TTImp.Interactive.CaseSplit.MkUpdates', [], []}))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V28 = begin (V8 = ('un--findUpdates'(V7, V0, V1, V2))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V27 = begin (V18 = begin (V13 = V7), fun (V14) -> begin (V17 = (begin (V15 = V13), fun (V16) -> ('erlang':'get'(V15)) end end(V14))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V26 = fun (V23) -> {'Prelude.Types.Right', case V22 of {'TTImp.Interactive.CaseSplit.MkUpdates', V24, V25} -> V25 end} end), V26 end(V19)) end end end end), V27 end(V9)) end end end end), V28 end(V4)) end end end end.
'un--getSplitsLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('un--substLets'([], V7))), begin (V10 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, <<"interaction.casesplit"/utf8>>, 3, fun () -> <<"Splitting"/utf8>> end, V7))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V132 = begin (V15 = ('un--findAllVars'(V7))), begin (V21 = begin (V16 = V1), fun (V17) -> begin (V20 = (begin (V18 = V16), fun (V19) -> ('erlang':'get'(V18)) end end(V17))), {'Prelude.Types.Right', V20} end end end), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V131 = begin (V26 = ('un--findCons'(V1, V8, V9))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V130 = case V30 of {'TTImp.Interactive.CaseSplit.OK', V31} -> case V31 of {'Builtin.MkPair', V32, V33} -> case V33 of {'Builtin.MkPair', V34, V35} -> begin (V65 = begin (V36 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoSugar'([], V1, {'Core.Env.Nil'}, V9))), ((begin (V62 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V59, V60, V61)) end end end end end), fun (V63) -> fun (V64) -> ((((V62('erased'))('erased'))(V63))(V64)) end end end((begin (V54 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> {'Prelude.Types.Right', (V50(V53))} end end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V37) -> case V37 of {'Core.TT.MkKindedName', V38, V39, V40} -> V40 end end))))))(V36)) end), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V127 = begin (V71 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V70) -> ('un--newLHS'(V1, V5, V6, V15, V8, V70, V69)) end, V35, []))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V126 = case ('Idris.Idris2.Core.Context':'un--getNameID'(V32, case V25 of {'Core.Context.MkDefs', V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107} -> V76 end)) of {'Prelude.Types.Just', V108} -> begin (V110 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V109) -> ('un--mkCase'(V1, V2, V3, V4, V108, V69, V109)) end, V75, []))), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V125 = begin (V118 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.casesplit"/utf8>>, 3, fun () -> <<<<"Found cases: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V115) -> ('dn--un--show_Show_ClauseUpdate'(V115)) end, fun (V116) -> fun (V117) -> ('dn--un--showPrec_Show_ClauseUpdate'(V116, V117)) end end}, V114))/binary>> end))), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V124 = fun (V123) -> {'Prelude.Types.Right', ('un--combine'(V114, []))} end), V124 end(V119)) end end end end), V125 end(V111)) end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V5, V32)) end), V126 end(V72)) end end end end), V127 end(V66)) end end end end end end; {'TTImp.Interactive.CaseSplit.SplitFail', V128} -> fun (V129) -> {'Prelude.Types.Right', {'TTImp.Interactive.CaseSplit.SplitFail', V128}} end end), V130 end(V27)) end end end end), V131 end(V22)) end end end end end), V132 end(V11)) end end end end end.
'un--getSplits'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Metadata':'un--findLHSAt'(V1, V5))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V18 = case V11 of {'Prelude.Types.Just', V12} -> case V12 of {'Builtin.MkPair', V13, V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> ('un--getSplitsLHS'(V1, V0, V2, V3, V4, ('Idris.Idris2.Core.FC':'un--justFC'(V13)), V15, V16, V6)) end end; {'Prelude.Types.Nothing'} -> fun (V17) -> {'Prelude.Types.Right', {'TTImp.Interactive.CaseSplit.SplitFail', {'TTImp.Interactive.CaseSplit.CantFindLHS'}}} end end), V18 end(V8)) end end end end.
'un--getEnvArgNames'(V0, V1, V2, V3) -> case V2 of 0 -> begin (V4 = ('un--explicitlyBound'(V1, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V9 = ('Idris.Idris2.TTImp.Utils':'un--getArgNames'([], V0, V1, V8, [], {'Core.Env.Nil'}, V3))), V9 end(V5)) end end end end; _ -> begin (V10 = (V2 - 1)), case V3 of {'Core.Value.NBind', V11, V12, V13, V14} -> begin (V15 = ((V14(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V11, {'Core.TT.Placeholder'}}))))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V20 = ('un--getEnvArgNames'(V0, V1, V10, V19))), V20 end(V16)) end end end end; _ -> fun (V21) -> {'Prelude.Types.Right', []} end end end end.
'un--getDefining'(V0) -> case V0 of {'Core.TT.Bind', V1, V2, V3, V4} -> ('un--getDefining'(V4)); _ -> case ('Idris.Idris2.Core.TT':'un--getFn'(V0)) of {'Core.TT.Ref', V5, V6, V7} -> {'Prelude.Types.Just', V7}; _ -> {'Prelude.Types.Nothing'} end end.
'un--findUpdates'(V0, V1, V2, V3) -> case V2 of {'TTImp.TTImp.IVar', V4, V5} -> case V3 of {'TTImp.TTImp.IVar', V6, V7} -> begin (V40 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V7, case V1 of {'Core.Context.MkDefs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> V8 end))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V78 = case V44 of {'Prelude.Types.Just', V45} -> ('un--recordUpdate'(V0, V4, V5, {'TTImp.TTImp.IVar', V4, V7})); {'Prelude.Types.Nothing'} -> begin (V51 = begin (V46 = V0), fun (V47) -> begin (V50 = (begin (V48 = V46), fun (V49) -> ('erlang':'get'(V48)) end end(V47))), {'Prelude.Types.Right', V50} end end end), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V77 = case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V58, V59)) end end}, V7, case V55 of {'TTImp.Interactive.CaseSplit.MkUpdates', V60, V61} -> V60 end)) of {'Prelude.Types.Nothing'} -> begin (V62 = V0), fun (V63) -> begin (V68 = (begin (V64 = V62), fun (V65) -> ('erlang':'put'(V64, case V55 of {'TTImp.Interactive.CaseSplit.MkUpdates', V66, V67} -> {'TTImp.Interactive.CaseSplit.MkUpdates', [{'Builtin.MkPair', V7, V5} | V66], V67} end)) end end(V63))), {'Prelude.Types.Right', V68} end end end; {'Prelude.Types.Just', V69} -> begin (V70 = V0), fun (V71) -> begin (V76 = (begin (V72 = V70), fun (V73) -> ('erlang':'put'(V72, case V55 of {'TTImp.Interactive.CaseSplit.MkUpdates', V74, V75} -> {'TTImp.Interactive.CaseSplit.MkUpdates', V74, [{'Builtin.MkPair', V5, {'TTImp.TTImp.IVar', V4, V69}} | V75]} end)) end end(V71))), {'Prelude.Types.Right', V76} end end end end), V77 end(V52)) end end end end end), V78 end(V41)) end end end end; _ -> ('un--recordUpdate'(V0, V4, V5, V3)) end; {'TTImp.TTImp.IApp', V79, V80, V81} -> case V3 of {'TTImp.TTImp.IApp', V82, V83, V84} -> begin (V85 = ('un--findUpdates'(V0, V1, V80, V83))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V90 = ('un--findUpdates'(V0, V1, V81, V84))), V90 end(V86)) end end end end; _ -> case V3 of {'TTImp.TTImp.IAutoApp', V91, V92, V93} -> ('un--findUpdates'(V0, V1, V2, V92)); _ -> case V2 of {'TTImp.TTImp.INamedApp', V94, V95, V96, V97} -> case V3 of {'TTImp.TTImp.INamedApp', V98, V99, V100, V101} -> begin (V102 = ('un--findUpdates'(V0, V1, V95, V99))), fun (V103) -> begin (V104 = (V102(V103))), case V104 of {'Prelude.Types.Left', V105} -> {'Prelude.Types.Left', V105}; {'Prelude.Types.Right', V106} -> (begin (V107 = ('un--findUpdates'(V0, V1, V97, V101))), V107 end(V103)) end end end end; _ -> ('un--findUpdates'(V0, V1, V95, V3)) end; _ -> case V3 of {'TTImp.TTImp.INamedApp', V108, V109, V110, V111} -> ('un--findUpdates'(V0, V1, V2, V109)); _ -> case V2 of {'TTImp.TTImp.IAs', V112, V113, V114, V115, V116} -> ('un--findUpdates'(V0, V1, V116, V3)); _ -> case V3 of {'TTImp.TTImp.IAs', V117, V118, V119, V120, V121} -> ('un--findUpdates'(V0, V1, V2, V121)); _ -> fun (V122) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end end end end end; {'TTImp.TTImp.IAutoApp', V123, V124, V125} -> case V3 of {'TTImp.TTImp.IAutoApp', V126, V127, V128} -> begin (V129 = ('un--findUpdates'(V0, V1, V124, V127))), fun (V130) -> begin (V131 = (V129(V130))), case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> (begin (V134 = ('un--findUpdates'(V0, V1, V125, V128))), V134 end(V130)) end end end end; _ -> ('un--findUpdates'(V0, V1, V124, V3)) end; _ -> case V3 of {'TTImp.TTImp.IAutoApp', V135, V136, V137} -> ('un--findUpdates'(V0, V1, V2, V136)); _ -> case V2 of {'TTImp.TTImp.INamedApp', V138, V139, V140, V141} -> case V3 of {'TTImp.TTImp.INamedApp', V142, V143, V144, V145} -> begin (V146 = ('un--findUpdates'(V0, V1, V139, V143))), fun (V147) -> begin (V148 = (V146(V147))), case V148 of {'Prelude.Types.Left', V149} -> {'Prelude.Types.Left', V149}; {'Prelude.Types.Right', V150} -> (begin (V151 = ('un--findUpdates'(V0, V1, V141, V145))), V151 end(V147)) end end end end; _ -> ('un--findUpdates'(V0, V1, V139, V3)) end; _ -> case V3 of {'TTImp.TTImp.INamedApp', V152, V153, V154, V155} -> ('un--findUpdates'(V0, V1, V2, V153)); _ -> case V2 of {'TTImp.TTImp.IAs', V156, V157, V158, V159, V160} -> ('un--findUpdates'(V0, V1, V160, V3)); _ -> case V3 of {'TTImp.TTImp.IAs', V161, V162, V163, V164, V165} -> ('un--findUpdates'(V0, V1, V2, V165)); _ -> fun (V166) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end end end end end.
'un--findTyName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.TT.Bind', V6, V7, V8, V9} -> case V8 of {'Core.TT.PVar', V10, V11, V12, V13} -> begin (V14 = {'Core.TT.PVar', V10, V11, V12, V13}), case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V7)) of 1 -> begin (V15 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V2, V3, V13))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V26 = fun (V20) -> case V19 of {'Core.Value.NTCon', V21, V22, V23, V24, V25} -> {'Prelude.Types.Right', {'Prelude.Types.Just', V22}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V26 end(V16)) end end end end; 0 -> ('un--findTyName'([V7 | V0], V1, V2, {'Core.Env.::', V14, V3}, V4, V9)) end end; _ -> ('un--findTyName'([V7 | V0], V1, V2, {'Core.Env.::', V8, V3}, V4, V9)) end; _ -> fun (V27) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'un--findCons'(V0, V1, V2) -> case ('un--getDefining'(V2)) of {'Prelude.Types.Nothing'} -> fun (V3) -> {'Prelude.Types.Right', {'TTImp.Interactive.CaseSplit.SplitFail', {'TTImp.Interactive.CaseSplit.CantSplitThis', V1, <<"Can\x{27}t find function name on LHS"/utf8>>}}} end; {'Prelude.Types.Just', V4} -> begin (V10 = begin (V5 = V0), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V111 = begin (V15 = ('un--findTyName'([], V0, V14, {'Core.Env.Nil'}, V1, V2))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V110 = case V19 of {'Prelude.Types.Nothing'} -> fun (V20) -> {'Prelude.Types.Right', {'TTImp.Interactive.CaseSplit.SplitFail', {'TTImp.Interactive.CaseSplit.CantSplitThis', V1, <<(begin (V22 = fun (V21) -> V21 end), fun (V23) -> (V22(V23)) end end(<<"Can\x{27}t find type of "/utf8>>))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary, <<" in LHS"/utf8>>/binary>>/binary>>}}} end; {'Prelude.Types.Just', V24} -> begin (V57 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V24, case V14 of {'Core.Context.MkDefs', V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56} -> V25 end))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V109 = case V61 of {'Prelude.Types.Just', V62} -> case V62 of {'Core.Context.Context.TCon', V63, V64, V65, V66, V67, V68, V69, V70} -> begin (V76 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V71, V72)) end end, fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V73, V74, V75)) end end end}, V24))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V94 = begin (V87 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V81) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V82, V83)) end end, fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V84, V85, V86)) end end end}, V81)) end, V69, []))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V93 = fun (V92) -> {'Prelude.Types.Right', {'TTImp.Interactive.CaseSplit.OK', {'Builtin.MkPair', V4, {'Builtin.MkPair', V80, V91}}}} end), V93 end(V88)) end end end end), V94 end(V77)) end end end end; _ -> fun (V95) -> {'Prelude.Types.Right', {'TTImp.Interactive.CaseSplit.SplitFail', {'TTImp.Interactive.CaseSplit.CantSplitThis', V1, <<(begin (V97 = fun (V96) -> V96 end), fun (V98) -> (V97(V98)) end end(<<"Not a type constructor "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V99) -> ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Def'(V99)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Context.Context':'dn--un--showPrec_Show_Def'(V100, V101)) end end}, V61))/binary>>}}} end end; _ -> fun (V102) -> {'Prelude.Types.Right', {'TTImp.Interactive.CaseSplit.SplitFail', {'TTImp.Interactive.CaseSplit.CantSplitThis', V1, <<(begin (V104 = fun (V103) -> V103 end), fun (V105) -> (V104(V105)) end end(<<"Not a type constructor "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V106) -> ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Def'(V106)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Context.Context':'dn--un--showPrec_Show_Def'(V107, V108)) end end}, V61))/binary>>}}} end end), V109 end(V58)) end end end end end), V110 end(V16)) end end end end), V111 end(V11)) end end end end end.
'un--findAllVars'(V0) -> case V0 of {'Core.TT.Bind', V1, V2, V3, V4} -> case V3 of {'Core.TT.PVar', V5, V6, V7, V8} -> [V2 | ('un--findAllVars'(V4))]; {'Core.TT.Let', V9, V10, V11, V12} -> [V2 | ('un--findAllVars'(V4))]; {'Core.TT.PLet', V13, V14, V15, V16} -> [V2 | ('un--findAllVars'(V4))]; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V17) -> ('Idris.Idris2.Core.Name':'un--dropNS'(V17)) end))(('un--getDefining'(V0)))))) end; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(((begin (V30 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V28, V29)) end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V25) -> ('Idris.Idris2.Core.Name':'un--dropNS'(V25)) end))(('un--getDefining'(V0)))))) end.
'un--explicitlyBound'(V0, V1) -> case V1 of {'Core.Value.NBind', V2, V3, V4, V5} -> case V4 of {'Core.TT.Pi', V6, V7, V8, V9} -> begin (V10 = ((V5(V0))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V2, {'Core.TT.Placeholder'}}))))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V22 = begin (V15 = ('un--explicitlyBound'(V0, V14))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = fun (V20) -> {'Prelude.Types.Right', [V3 | V19]} end), V21 end(V16)) end end end end), V22 end(V11)) end end end end; _ -> fun (V23) -> {'Prelude.Types.Right', []} end end; _ -> fun (V24) -> {'Prelude.Types.Right', []} end end.
'un--expandCon'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V74 = begin (V46 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V3, case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V14 end))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V73 = case V50 of {'Prelude.Types.Just', V51} -> begin (V52 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V13, {'Core.Env.Nil'}, V51))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V72 = begin (V57 = ('Idris.Idris2.TTImp.Utils':'un--getArgNames'([], V0, V13, [], V2, {'Core.Env.Nil'}, V56))), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V71 = fun (V62) -> {'Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V1, V3}, ((begin (V68 = fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V66, V67)) end end end end), fun (V69) -> fun (V70) -> ((((V68('erased'))('erased'))(V69))(V70)) end end end(fun (V63) -> {'TTImp.TTImp.IBindVar', V1, V63} end))(V61))))} end), V71 end(V58)) end end end end), V72 end(V53)) end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3)) end), V73 end(V47)) end end end end), V74 end(V10)) end end end end.
'un--combine'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'TTImp.Interactive.CaseSplit.SplitFail', {'TTImp.Interactive.CaseSplit.NoValidSplit'}}; _ -> {'TTImp.Interactive.CaseSplit.OK', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1))} end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'TTImp.Interactive.CaseSplit.Invalid'} -> ('un--combine'(V3, V1)); _ -> ('un--combine'(V3, [V2 | V1])) end end(E0, E1)) end.
