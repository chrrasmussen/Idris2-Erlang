-module('Idris.Idris2.TTImp.Elab.Record').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--11556-8333--in--un--vloc'/12,
  'nested--11556-8334--in--un--mkClause'/13,
  'nested--10784-7656--in--un--mkArgs'/12,
  'nested--10434-7273--in--un--getExpNames'/4,
  'un--toRHS\x{27}'/2,
  'un--toRHS'/2,
  'un--toLHS\x{27}'/2,
  'un--toLHS'/2,
  'un--replace'/3,
  'un--recUpdate'/12,
  'un--needType'/1,
  'un--getSides'/7,
  'un--getRecordType'/2,
  'un--getAllSides'/7,
  'un--genFieldName'/2,
  'un--findPath'/8,
  'un--findFields'/3,
  'un--findConName'/2,
  'un--checkUpdate'/15,
  'un--checkForDuplicates'/3
]).
'nested--11556-8333--in--un--vloc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V6)).
'nested--11556-8334--in--un--mkClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'TTImp.TTImp.PatClause', ('nested--11556-8333--in--un--vloc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)), ('un--toLHS'(('nested--11556-8333--in--un--vloc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)), V12)), ('un--toRHS'(('nested--11556-8333--in--un--vloc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)), V12))}.
'nested--10784-7656--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> fun (V12) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Builtin.MkPair', V15, V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> begin (V19 = ('un--genFieldName'(V9, V15))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V33 = begin (V24 = ('nested--10784-7656--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V32 = begin (V30 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'TTImp.TTImp.IVar', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V8)), {'Core.Name.UN', {'Core.Name.Basic', V23}}} end, fun () -> fun (V29) -> {'TTImp.TTImp.Implicit', V8, 0} end end, V17))), fun (V31) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V15, {'TTImp.Elab.Record.Field', V17, V23, V30}} | V28]} end end), V32 end(V25)) end end end end), V33 end(V20)) end end end end end end end(E0, E1)) end.
'nested--10434-7273--in--un--getExpNames'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NBind', V4, V5, V6, V7} -> case V6 of {'Core.TT.Pi', V8, V9, V10, V11} -> begin (V18 = begin (V12 = ((V7(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V4, {'Core.TT.Placeholder'}}))))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V17 = ('nested--10434-7273--in--un--getExpNames'(V0, V1, V2, V16))), V17 end(V13)) end end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V31 = begin (V23 = case V10 of {'Core.TT.Explicit'} -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', V5} end), begin (V24 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V1, V11))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', [{'Builtin.MkPair', ('Idris.Idris2.Core.Name':'un--nameRoot'(V5)), {'Builtin.MkPair', V23, ('un--getRecordType'({'Core.Env.Nil'}, V28))}} | V22]} end), V30 end(V25)) end end end end end), V31 end(V19)) end end end end; _ -> fun (V32) -> {'Prelude.Types.Right', []} end end; _ -> fun (V33) -> {'Prelude.Types.Right', []} end end.
'un--toRHS\x{27}'(V0, V1) -> case V1 of {'TTImp.Elab.Record.Field', V2, V3, V4} -> {'Builtin.MkPair', V2, V4}; {'TTImp.Elab.Record.Constr', V5, V6, V7} -> begin (V16 = ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('un--toRHS\x{27}'(V0, ('Idris.Idris2.Builtin':'un--snd'(V8)))) end))(V7))), {'Builtin.MkPair', V5, ('Idris.Idris2.TTImp.TTImp':'un--gapply'({'TTImp.TTImp.IVar', V0, V6}, V16))} end end.
'un--toRHS'(V0, V1) -> ('Idris.Idris2.Builtin':'un--snd'(('un--toRHS\x{27}'(V0, V1)))).
'un--toLHS\x{27}'(V0, V1) -> case V1 of {'TTImp.Elab.Record.Field', V2, V3, V4} -> case V2 of {'Prelude.Types.Just', V5} -> {'Builtin.MkPair', V2, {'TTImp.TTImp.IAs', V0, ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V0)), 1, {'Core.Name.UN', {'Core.Name.Basic', V3}}, {'TTImp.TTImp.Implicit', V0, 1}}}; _ -> {'Builtin.MkPair', V2, {'TTImp.TTImp.IBindVar', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V0)), V3}} end; {'TTImp.Elab.Record.Constr', V6, V7, V8} -> begin (V17 = ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> ('un--toLHS\x{27}'(V0, ('Idris.Idris2.Builtin':'un--snd'(V9)))) end))(V8))), {'Builtin.MkPair', V6, ('Idris.Idris2.TTImp.TTImp':'un--gapply'({'TTImp.TTImp.IVar', V0, V7}, V17))} end end.
'un--toLHS'(V0, V1) -> ('Idris.Idris2.Builtin':'un--snd'(('un--toLHS\x{27}'(V0, V1)))).
'un--replace'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Builtin.MkPair', V5, V6} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V0, V5)) of 1 -> [{'Builtin.MkPair', V0, V1} | V4]; 0 -> [{'Builtin.MkPair', V5, V6} | ('un--replace'(V0, V1, V4))] end end end(E0, E1)) end.
'un--recUpdate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V316 = ('un--checkForDuplicates'(V9, ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V16, V17)) end end}, V12, V13)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V22, V23)) end end}, V18, V19)) end end}, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V28, V29)) end end}, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V42, V43)) end end}, V24, V25)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V48, V49)) end end}, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V62, V63)) end end}, V44, V45)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V66, V67)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V68, V69)) end end}, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V82, V83)) end end}, V64, V65)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V88, V89)) end end}, fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V90, V91)) end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V94, V95)) end end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V96, V97)) end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V98, V99)) end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V100, V101)) end end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V102, V103)) end end}, V84, V85)) end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V106, V107)) end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V108, V109)) end end}, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V110, V111)) end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V112, V113)) end end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V116, V117)) end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V118, V119)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V120, V121)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V122, V123)) end end}, V104, V105)) end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V128, V129)) end end}, fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V130, V131)) end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V132, V133)) end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V134, V135)) end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V136, V137)) end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V138, V139)) end end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V140, V141)) end end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V142, V143)) end end}, V124, V125)) end end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V146, V147)) end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V148, V149)) end end}, fun (V150) -> fun (V151) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V150, V151)) end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V152, V153)) end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V154, V155)) end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V156, V157)) end end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V158, V159)) end end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V160, V161)) end end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V162, V163)) end end}, V144, V145)) end end})), ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V164) -> fun (V165) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V166, V167)) end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V168, V169)) end end}, V164, V165)) end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V172) -> fun (V173) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V172, V173)) end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V174, V175)) end end}, V170, V171)) end end}, fun (V176) -> fun (V177) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V178, V179)) end end, fun (V180) -> fun (V181) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V180, V181)) end end}, fun (V182) -> fun (V183) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V182, V183)) end end, fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V184, V185)) end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V186, V187)) end end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V188, V189)) end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V190, V191)) end end, fun (V192) -> fun (V193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V192, V193)) end end, fun (V194) -> fun (V195) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V194, V195)) end end}, V176, V177)) end end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V198) -> fun (V199) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V198, V199)) end end, fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V200, V201)) end end}, fun (V202) -> fun (V203) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V202, V203)) end end, fun (V204) -> fun (V205) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V204, V205)) end end, fun (V206) -> fun (V207) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V206, V207)) end end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V208, V209)) end end, fun (V210) -> fun (V211) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V210, V211)) end end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V212, V213)) end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V214, V215)) end end}, V196, V197)) end end, fun (V216) -> fun (V217) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V218, V219)) end end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V220, V221)) end end}, fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V222, V223)) end end, fun (V224) -> fun (V225) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V224, V225)) end end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V226, V227)) end end, fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V228, V229)) end end, fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V230, V231)) end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V232, V233)) end end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V234, V235)) end end}, V216, V217)) end end, fun (V236) -> fun (V237) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V238) -> fun (V239) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V238, V239)) end end, fun (V240) -> fun (V241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V240, V241)) end end}, fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V242, V243)) end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V244, V245)) end end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V246, V247)) end end, fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V248, V249)) end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V250, V251)) end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V252, V253)) end end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V254, V255)) end end}, V236, V237)) end end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V258) -> fun (V259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V258, V259)) end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V260, V261)) end end}, fun (V262) -> fun (V263) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V262, V263)) end end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V264, V265)) end end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V266, V267)) end end, fun (V268) -> fun (V269) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V268, V269)) end end, fun (V270) -> fun (V271) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V270, V271)) end end, fun (V272) -> fun (V273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V272, V273)) end end, fun (V274) -> fun (V275) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V274, V275)) end end}, V256, V257)) end end, fun (V276) -> fun (V277) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V278) -> fun (V279) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V278, V279)) end end, fun (V280) -> fun (V281) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V280, V281)) end end}, fun (V282) -> fun (V283) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V282, V283)) end end, fun (V284) -> fun (V285) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V284, V285)) end end, fun (V286) -> fun (V287) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V286, V287)) end end, fun (V288) -> fun (V289) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V288, V289)) end end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V290, V291)) end end, fun (V292) -> fun (V293) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V292, V293)) end end, fun (V294) -> fun (V295) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V294, V295)) end end}, V276, V277)) end end, fun (V296) -> fun (V297) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V298) -> fun (V299) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V298, V299)) end end, fun (V300) -> fun (V301) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V300, V301)) end end}, fun (V302) -> fun (V303) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V302, V303)) end end, fun (V304) -> fun (V305) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V304, V305)) end end, fun (V306) -> fun (V307) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V306, V307)) end end, fun (V308) -> fun (V309) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V308, V309)) end end, fun (V310) -> fun (V311) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V310, V311)) end end, fun (V312) -> fun (V313) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V312, V313)) end end, fun (V314) -> fun (V315) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V314, V315)) end end}, V296, V297)) end end}))))), begin (V318 = fun (V317) -> case ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--null_Foldable_SortedSet'(V316)) of 1 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.DuplicatedRecordUpdatePath', V6, ('Idris.Idris2.Libraries.Data.SortedSet':'un--toList'(V316))}, V317)) end end), fun (V319) -> begin (V320 = (V318(V319))), case V320 of {'Prelude.Types.Left', V321} -> {'Prelude.Types.Left', V321}; {'Prelude.Types.Right', V322} -> (begin (V355 = begin (V328 = begin (V323 = V1), fun (V324) -> begin (V327 = (begin (V325 = V323), fun (V326) -> ('erlang':'get'(V325)) end end(V324))), {'Prelude.Types.Right', V327} end end end), fun (V329) -> begin (V330 = (V328(V329))), case V330 of {'Prelude.Types.Left', V331} -> {'Prelude.Types.Left', V331}; {'Prelude.Types.Right', V332} -> (begin (V354 = begin (V333 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V11))), fun (V334) -> begin (V335 = (V333(V334))), case V335 of {'Prelude.Types.Left', V336} -> {'Prelude.Types.Left', V336}; {'Prelude.Types.Right', V337} -> (begin (V353 = case ('un--getRecordType'(V8, V337)) of {'Prelude.Types.Just', V338} -> begin (V339 = ('un--genFieldName'(V2, <<"__fld"/utf8>>))), fun (V340) -> begin (V341 = (V339(V340))), case V341 of {'Prelude.Types.Left', V342} -> {'Prelude.Types.Left', V342}; {'Prelude.Types.Right', V343} -> (begin (V351 = begin (V344 = ('un--getAllSides'(V1, V2, V6, V9, V338, V10, {'TTImp.Elab.Record.Field', {'Prelude.Types.Nothing'}, V343, {'TTImp.TTImp.IVar', ('nested--11556-8333--in--un--vloc'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)), {'Core.Name.UN', {'Core.Name.Basic', V343}}}}))), fun (V345) -> begin (V346 = (V344(V345))), case V346 of {'Prelude.Types.Left', V347} -> {'Prelude.Types.Left', V347}; {'Prelude.Types.Right', V348} -> (begin (V350 = fun (V349) -> {'Prelude.Types.Right', {'TTImp.TTImp.ICase', ('nested--11556-8333--in--un--vloc'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)), V10, {'TTImp.TTImp.Implicit', ('nested--11556-8333--in--un--vloc'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)), 0}, [('nested--11556-8334--in--un--mkClause'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V348)) | []]}} end), V350 end(V345)) end end end end), V351 end(V340)) end end end end; {'Prelude.Types.Nothing'} -> fun (V352) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.RecordTypeNeeded', V0, V6, V8}, V352)) end end), V353 end(V334)) end end end end), V354 end(V329)) end end end end), V355 end(V319)) end end end end end.
'un--needType'(V0) -> case V0 of {'Core.Core.RecordTypeNeeded', V1, V2, V3} -> 1; {'Core.Core.InType', V4, V5, V6} -> ('un--needType'(V6)); {'Core.Core.InCon', V7, V8, V9} -> ('un--needType'(V9)); {'Core.Core.InLHS', V10, V11, V12} -> ('un--needType'(V12)); {'Core.Core.InRHS', V13, V14, V15} -> ('un--needType'(V15)); {'Core.Core.WhenUnifying', V16, V17, V18, V19, V20, V21, V22} -> ('un--needType'(V22)); _ -> 0 end.
'un--getSides'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'TTImp.TTImp.ISetField', V7, V8} -> ('un--findPath'(V0, V1, V2, V7, V7, {'Prelude.Types.Just', V4}, fun (V9) -> V8 end, V6)); {'TTImp.TTImp.ISetFieldApp', V10, V11} -> ('un--findPath'(V0, V1, V2, V10, V10, {'Prelude.Types.Just', V4}, fun (V12) -> ('Idris.Idris2.TTImp.TTImp':'un--apply'(V11, [{'TTImp.TTImp.IVar', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V2)), {'Core.Name.UN', {'Core.Name.Basic', V12}}} | []])) end, V6)) end.
'un--getRecordType'(V0, V1) -> case V1 of {'Core.Value.NTCon', V2, V3, V4, V5, V6} -> {'Prelude.Types.Just', V3}; _ -> {'Prelude.Types.Nothing'} end.
'un--getAllSides'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of [] -> fun (V7) -> {'Prelude.Types.Right', V6} end; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = ('un--getSides'(V0, V1, V2, V8, V4, V5, V6))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V15 = ('un--getAllSides'(V0, V1, V2, V9, V4, V5, V14))), V15 end(V11)) end end end end end(E0, E1)) end.
'un--genFieldName'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V30 = begin (V12 = V0), fun (V13) -> begin (V29 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, case V11 of {'Core.UnifyState.MkUState', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} -> {'Core.UnifyState.MkUState', V16, V17, V18, V19, V20, V21, V22, V23, begin (V28 = (V24 + 1)), case ((V28 band 9223372036854775808) =/= 0) of 'true' -> (V28 bor -9223372036854775808); _ -> (V28 band 9223372036854775807) end end, V25, V26, V27} end)) end end(V13))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V48 = fun (V35) -> {'Prelude.Types.Right', <<V1/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(case V11 of {'Core.UnifyState.MkUState', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V44 end))/binary>>} end), V48 end(V31)) end end end end), V49 end(V8)) end end end end.
'un--findPath'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V3 of [] -> fun (V8) -> case V7 of {'TTImp.Elab.Record.Field', V9, V10, V11} -> {'Prelude.Types.Right', {'TTImp.Elab.Record.Field', V9, V10, (V6(V10))}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.IncompatibleFieldUpdate', V2, V4}, V8)) end end; [E0 | E1] -> (fun (V12, V13) -> case V5 of {'Prelude.Types.Nothing'} -> case V7 of {'TTImp.Elab.Record.Field', V14, V15, V16} -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotRecordField', V2, V12, {'Prelude.Types.Nothing'}}, V17)) end; _ -> case V7 of {'TTImp.Elab.Record.Constr', V18, V19, V20} -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V23, V24)) end end}, V12, V20)) of {'Prelude.Types.Just', V25} -> begin (V31 = begin (V26 = V0), fun (V27) -> begin (V30 = (begin (V28 = V26), fun (V29) -> ('erlang':'get'(V28)) end end(V27))), {'Prelude.Types.Right', V30} end end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V59 = begin (V36 = ('un--findFields'(V0, V35, V19))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V58 = case V40 of {'Prelude.Types.Just', V41} -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V44, V45)) end end}, V12, V41)) of {'Prelude.Types.Just', V46} -> case V46 of {'Builtin.MkPair', V47, V48} -> begin (V49 = ('un--findPath'(V0, V1, V2, V13, V4, V48, V6, V25))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V55 = fun (V54) -> {'Prelude.Types.Right', {'TTImp.Elab.Record.Constr', V18, V19, ('un--replace'(V12, V53, V20))}} end), V55 end(V50)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V56) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotRecordField', V2, V12, V5}, V56)) end end; {'Prelude.Types.Nothing'} -> fun (V57) -> {'Prelude.Types.Right', {'TTImp.Elab.Record.Constr', V18, V19, V20}} end end), V58 end(V37)) end end end end), V59 end(V32)) end end end end; {'Prelude.Types.Nothing'} -> fun (V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotRecordField', V2, V12, V5}, V60)) end end end end; {'Prelude.Types.Just', V61} -> case V7 of {'TTImp.Elab.Record.Field', V62, V63, V64} -> begin (V70 = begin (V65 = V0), fun (V66) -> begin (V69 = (begin (V67 = V65), fun (V68) -> ('erlang':'get'(V67)) end end(V66))), {'Prelude.Types.Right', V69} end end end), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V98 = begin (V75 = ('un--findConName'(V74, V61))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V97 = case V79 of {'Prelude.Types.Just', V80} -> begin (V81 = ('un--findFields'(V0, V74, V80))), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V95 = case V85 of {'Prelude.Types.Just', V86} -> begin (V87 = ('nested--10784-7656--in--un--mkArgs'(V12, V13, V61, V64, V63, V62, V6, V4, V2, V1, V0, V86))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V93 = begin (V92 = {'TTImp.Elab.Record.Constr', V62, V80, V91}), ('un--findPath'(V0, V1, V2, [V12 | V13], V4, {'Prelude.Types.Just', V61}, V6, V92)) end), V93 end(V88)) end end end end; {'Prelude.Types.Nothing'} -> fun (V94) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotRecordType', V2, V61}, V94)) end end), V95 end(V82)) end end end end; {'Prelude.Types.Nothing'} -> fun (V96) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotRecordType', V2, V61}, V96)) end end), V97 end(V76)) end end end end), V98 end(V71)) end end end end; _ -> case V7 of {'TTImp.Elab.Record.Constr', V99, V100, V101} -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V102, V103)) end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V104, V105)) end end}, V12, V101)) of {'Prelude.Types.Just', V106} -> begin (V112 = begin (V107 = V0), fun (V108) -> begin (V111 = (begin (V109 = V107), fun (V110) -> ('erlang':'get'(V109)) end end(V108))), {'Prelude.Types.Right', V111} end end end), fun (V113) -> begin (V114 = (V112(V113))), case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> (begin (V140 = begin (V117 = ('un--findFields'(V0, V116, V100))), fun (V118) -> begin (V119 = (V117(V118))), case V119 of {'Prelude.Types.Left', V120} -> {'Prelude.Types.Left', V120}; {'Prelude.Types.Right', V121} -> (begin (V139 = case V121 of {'Prelude.Types.Just', V122} -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V123, V124)) end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V125, V126)) end end}, V12, V122)) of {'Prelude.Types.Just', V127} -> case V127 of {'Builtin.MkPair', V128, V129} -> begin (V130 = ('un--findPath'(V0, V1, V2, V13, V4, V129, V6, V106))), fun (V131) -> begin (V132 = (V130(V131))), case V132 of {'Prelude.Types.Left', V133} -> {'Prelude.Types.Left', V133}; {'Prelude.Types.Right', V134} -> (begin (V136 = fun (V135) -> {'Prelude.Types.Right', {'TTImp.Elab.Record.Constr', V99, V100, ('un--replace'(V12, V134, V101))}} end), V136 end(V131)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V137) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotRecordField', V2, V12, V5}, V137)) end end; {'Prelude.Types.Nothing'} -> fun (V138) -> {'Prelude.Types.Right', {'TTImp.Elab.Record.Constr', V99, V100, V101}} end end), V139 end(V118)) end end end end), V140 end(V113)) end end end end; {'Prelude.Types.Nothing'} -> fun (V141) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotRecordField', V2, V12, V5}, V141)) end end end end; _ -> case V7 of {'TTImp.Elab.Record.Constr', V142, V143, V144} -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V145, V146)) end end, fun (V147) -> fun (V148) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V147, V148)) end end}, V12, V144)) of {'Prelude.Types.Just', V149} -> begin (V155 = begin (V150 = V0), fun (V151) -> begin (V154 = (begin (V152 = V150), fun (V153) -> ('erlang':'get'(V152)) end end(V151))), {'Prelude.Types.Right', V154} end end end), fun (V156) -> begin (V157 = (V155(V156))), case V157 of {'Prelude.Types.Left', V158} -> {'Prelude.Types.Left', V158}; {'Prelude.Types.Right', V159} -> (begin (V183 = begin (V160 = ('un--findFields'(V0, V159, V143))), fun (V161) -> begin (V162 = (V160(V161))), case V162 of {'Prelude.Types.Left', V163} -> {'Prelude.Types.Left', V163}; {'Prelude.Types.Right', V164} -> (begin (V182 = case V164 of {'Prelude.Types.Just', V165} -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V166, V167)) end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V168, V169)) end end}, V12, V165)) of {'Prelude.Types.Just', V170} -> case V170 of {'Builtin.MkPair', V171, V172} -> begin (V173 = ('un--findPath'(V0, V1, V2, V13, V4, V172, V6, V149))), fun (V174) -> begin (V175 = (V173(V174))), case V175 of {'Prelude.Types.Left', V176} -> {'Prelude.Types.Left', V176}; {'Prelude.Types.Right', V177} -> (begin (V179 = fun (V178) -> {'Prelude.Types.Right', {'TTImp.Elab.Record.Constr', V142, V143, ('un--replace'(V12, V177, V144))}} end), V179 end(V174)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V180) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotRecordField', V2, V12, V5}, V180)) end end; {'Prelude.Types.Nothing'} -> fun (V181) -> {'Prelude.Types.Right', {'TTImp.Elab.Record.Constr', V142, V143, V144}} end end), V182 end(V161)) end end end end), V183 end(V156)) end end end end; {'Prelude.Types.Nothing'} -> fun (V184) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.NotRecordField', V2, V12, V5}, V184)) end end end end end(E0, E1)) end.
'un--findFields'(V0, V1, V2) -> begin (V35 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V2, case V1 of {'Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} -> V3 end))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V55 = case V39 of {'Prelude.Types.Just', V40} -> begin (V41 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V1, {'Core.Env.Nil'}, V40))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V53 = begin (V46 = ('nested--10434-7273--in--un--getExpNames'(V2, V1, V0, V45))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V52 = fun (V51) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V50}} end), V52 end(V47)) end end end end), V53 end(V42)) end end end end; _ -> fun (V54) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V55 end(V36)) end end end end.
'un--findConName'(V0, V1) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V1, case V0 of {'Core.Context.MkDefs', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} -> V2 end))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V53 = case V38 of {'Prelude.Types.Just', V39} -> case V39 of {'Core.Context.Context.TCon', V40, V41, V42, V43, V44, V45, V46, V47} -> fun (V48) -> case V46 of [E0 | E1] -> (fun (V49, V50) -> case V50 of [] -> {'Prelude.Types.Right', {'Prelude.Types.Just', V49}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end(E0, E1)); _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V51) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V52) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V53 end(V35)) end end end end.
'un--checkUpdate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V26 = case V14 of {'Prelude.Types.Just', V15} -> fun (V16) -> {'Prelude.Types.Right', V15} end; _ -> begin (V17 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, {'Prelude.Types.Nothing'}))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V25 = fun (V22) -> case V21 of {'Builtin.MkPair', V23, V24} -> {'Prelude.Types.Right', V24} end end), V25 end(V18)) end end end end end), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V78 = begin (V38 = case V8 of {'TTImp.Elab.Check.MkElabInfo', V31, V32, V33, V34, V35, V36} -> case V31 of {'TTImp.Elab.Check.InLHS', V37} -> ('Idris.Idris2.Core.Unify':'un--inLHS'()); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end end), ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V1, V2, V3, V4, V11, V7, V10, {'Prelude.Types.Just', V30}, fun (V39) -> ('un--needType'(V39)) end, 2, fun (V40) -> begin (V41 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V38, 0))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V77 = begin (V46 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V30))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V76 = begin (V51 = case V40 of 1 -> ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V10, V50)); 0 -> V30 end), begin (V55 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.record"/utf8>>, 5, fun () -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V40))/binary, <<<<" record type "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V53, V54)) end end}, V13))/binary>>/binary>> end, V10, V51))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V75 = begin (V60 = ('un--recUpdate'(V0, V1, V3, V4, V7, V8, V11, V9, V10, V12, V13, V51))), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V74 = begin (V68 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.record"/utf8>>, 5, fun () -> <<<<"Record update: "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V65)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V66, V67)) end end}, V64))/binary>> end))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V73 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V64, V14))), V73 end(V69)) end end end end), V74 end(V61)) end end end end), V75 end(V56)) end end end end end), V76 end(V47)) end end end end), V77 end(V42)) end end end end end)) end), V78 end(V27)) end end end end.
'un--checkForDuplicates'(V0, V1, V2) -> case V0 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.TTImp.TTImp':'un--getFieldUpdatePath'(V3))), begin (V6 = case ('Idris.Idris2.Libraries.Data.SortedSet':'un--contains'(V5, V1)) of 1 -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--insert'(V5, V2)); 0 -> V2 end), ('un--checkForDuplicates'(V4, ('Idris.Idris2.Libraries.Data.SortedSet':'un--insert'(V5, V1)), V6)) end end end(E0, E1)) end.
