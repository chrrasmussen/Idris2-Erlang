-module('Idris.Idris2.TTImp.Elab.Utils').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8841-12478--in--un--notLets'/8,
  'nested--7818-11549--in--un--notErased'/10,
  'nested--9407-13108--in--un--binderInlineSafe'/7,
  'nested--9746-13287--in--un--altsSafe'/7,
  'nested--9407-13043--in--un--allInlineSafe'/7,
  'un--wrapErrorC'/3,
  'un--updateErasable'/2,
  'un--termInlineSafe'/3,
  'un--setUsedVar'/2,
  'un--setUsed'/2,
  'un--plicit'/1,
  'un--isUsed'/2,
  'un--inlineSafe'/2,
  'un--initUsedCase'/1,
  'un--initUsed'/1,
  'un--inExtended'/4,
  'un--findErasedFrom'/4,
  'un--findErased'/2,
  'un--extendUsed'/3,
  'un--dropUsed'/2,
  'un--detagSafe'/3,
  'un--caseInlineSafe'/3,
  'un--caseAltInlineSafe'/3,
  'un--canInlineDef'/2,
  'un--canInlineCaseBlock'/2,
  'un--bindReq'/6,
  'un--bindNotReq'/7
]).
'nested--8841-12478--in--un--notLets'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> V5; [E0 | E1] -> (fun (V8, V9) -> case V7 of {'Core.Env.::', V10, V11} -> case ('Idris.Idris2.Core.TT':'un--isLet'(V10)) of 1 -> ('nested--8841-12478--in--un--notLets'(V0, V1, V2, V3, V4, V5, V9, V11)); 0 -> ('nested--8841-12478--in--un--notLets'(V0, V1, V2, V3, V4, [V8 | V5], V9, V11)) end end end(E0, E1)) end.
'nested--7818-11549--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> 1; _ -> case V9 of [] -> 0; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Core.Value.NErased', V12, V13} -> case V13 of {'Core.TT.Impossible'} -> ('nested--7818-11549--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, (V7 + 1), V8, V11)); _ -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V29, V30, V31, V32)) end end end end end end end, fun (V33) -> fun (V34) -> V34 end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V37, V38, V39)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V40) -> fun (V41) -> case (V40 =:= V41) of 'false' -> 0; _ -> 1 end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V42, V43)) end end}, V7, V8)) of 1 -> 1; 0 -> ('nested--7818-11549--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, (V7 + 1), V8, V11)) end end; _ -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V46, V47, V48)) end end end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V55)) end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V59, V60, V61, V62)) end end end end end end end, fun (V63) -> fun (V64) -> V64 end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V67, V68, V69)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V70) -> fun (V71) -> case (V70 =:= V71) of 'false' -> 0; _ -> 1 end end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V72, V73)) end end}, V7, V8)) of 1 -> 1; 0 -> ('nested--7818-11549--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, (V7 + 1), V8, V11)) end end end(E0, E1)) end end.
'nested--9407-13108--in--un--binderInlineSafe'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.TT.Let', V7, V8, V9, V10} -> ('un--termInlineSafe'(V0, V5, V9)); _ -> fun (V11) -> {'Prelude.Types.Right', 1} end end.
'nested--9746-13287--in--un--altsSafe'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V8, V9) -> begin (V15 = begin (V10 = V5), fun (V11) -> begin (V14 = (begin (V12 = V10), fun (V13) -> ('erlang':'get'(V12)) end end(V11))), {'Prelude.Types.Right', V14} end end end), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V38 = begin (V20 = ('un--caseAltInlineSafe'(V0, V5, V8))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V37 = case V24 of 1 -> begin (V30 = begin (V25 = V5), fun (V26) -> begin (V29 = (begin (V27 = V25), fun (V28) -> ('erlang':'put'(V27, V19)) end end(V26))), {'Prelude.Types.Right', V29} end end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V35 = ('nested--9746-13287--in--un--altsSafe'(V0, V1, V2, V3, V4, V5, V9))), V35 end(V31)) end end end end; 0 -> fun (V36) -> {'Prelude.Types.Right', 0} end end), V37 end(V21)) end end end end), V38 end(V16)) end end end end end(E0, E1)) end.
'nested--9407-13043--in--un--allInlineSafe'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = ('un--termInlineSafe'(V0, V5, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = case V14 of 1 -> ('nested--9407-13043--in--un--allInlineSafe'(V0, V1, V2, V3, V4, V5, V9)); 0 -> fun (V15) -> {'Prelude.Types.Right', 0} end end), V16 end(V11)) end end end end end(E0, E1)) end.
'un--wrapErrorC'(V0, V1, V2) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V18, V19, V20, V21)) end end end end end end end, fun (V22) -> fun (V23) -> V23 end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V26, V27, V28)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V29) -> fun (V30) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V31, V32)) end end}, 1, V0)) of 1 -> V2; 0 -> ('Idris.Idris2.Core.Core':'un--wrapError'(V1, V2)) end.
'un--updateErasable'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V123 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V122 = case V48 of {'Prelude.Types.Just', V49} -> begin (V72 = ('un--findErased'(V0, case V49 of {'Core.Context.Context.MkGlobalDef', V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71} -> V52 end))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V120 = case V76 of {'Builtin.MkPair', V77, V78} -> begin (V101 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V1, case V49 of {'Core.Context.Context.MkGlobalDef', V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100} -> {'Core.Context.Context.MkGlobalDef', V79, V80, V81, V77, V78, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100} end))), ((begin (V117 = fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V114, V115, V116)) end end end end end), fun (V118) -> fun (V119) -> ((((V117('erased'))('erased'))(V118))(V119)) end end end((begin (V109 = fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> {'Prelude.Types.Right', (V105(V108))} end end end end end), fun (V110) -> fun (V111) -> ((((V109('erased'))('erased'))(V110))(V111)) end end end(fun (V102) -> {'Builtin.MkUnit'} end))))(V101)) end end), V120 end(V73)) end end end end; {'Prelude.Types.Nothing'} -> fun (V121) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V122 end(V45)) end end end end), V123 end(V8)) end end end end.
'un--termInlineSafe'(V0, V1, V2) -> case V2 of {'Core.TT.Local', V3, V4, V5} -> begin (V11 = begin (V6 = V1), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V24 = case ('un--isUsed'(V5, V15)) of 1 -> fun (V16) -> {'Prelude.Types.Right', 0} end; 0 -> begin (V17 = ('un--setUsed'(V5, V1))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V23 = fun (V22) -> {'Prelude.Types.Right', 1} end), V23 end(V18)) end end end end end), V24 end(V12)) end end end end; {'Core.TT.Meta', V25, V26, V27, V28} -> ('nested--9407-13043--in--un--allInlineSafe'(V0, V28, V27, V26, V25, V1, V28)); {'Core.TT.Bind', V29, V30, V31, V32} -> begin (V33 = ('nested--9407-13108--in--un--binderInlineSafe'(V0, V30, V32, V31, V29, V1, V31))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V40 = case V37 of 1 -> ('un--inExtended'(2, [V30 | []], V1, fun (V38) -> ('un--termInlineSafe'([V30 | V0], V38, V32)) end)); 0 -> fun (V39) -> {'Prelude.Types.Right', 0} end end), V40 end(V34)) end end end end; {'Core.TT.App', V41, V42, V43} -> begin (V44 = ('un--termInlineSafe'(V0, V1, V42))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V50 = case V48 of 1 -> ('un--termInlineSafe'(V0, V1, V43)); 0 -> fun (V49) -> {'Prelude.Types.Right', 0} end end), V50 end(V45)) end end end end; {'Core.TT.As', V51, V52, V53, V54} -> ('un--termInlineSafe'(V0, V1, V54)); {'Core.TT.TDelayed', V55, V56, V57} -> ('un--termInlineSafe'(V0, V1, V57)); {'Core.TT.TDelay', V58, V59, V60, V61} -> ('un--termInlineSafe'(V0, V1, V61)); {'Core.TT.TForce', V62, V63, V64} -> ('un--termInlineSafe'(V0, V1, V64)); _ -> fun (V65) -> {'Prelude.Types.Right', 1} end end.
'un--setUsedVar'(V0, V1) -> case V0 of 0 -> case V1 of {'TTImp.Elab.Utils.::', V2, V3} -> case V2 of 1 -> {'TTImp.Elab.Utils.::', 0, V3}; _ -> V1 end; _ -> V1 end; _ -> begin (V4 = (V0 - 1)), case V1 of {'TTImp.Elab.Utils.::', V5, V6} -> {'TTImp.Elab.Utils.::', V5, ('un--setUsedVar'(V4, V6))} end end end.
'un--setUsed'(V0, V1) -> begin (V7 = begin (V2 = V1), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V17 = begin (V12 = V1), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'put'(V14, ('un--setUsedVar'(V0, V11)))) end end(V13))), {'Prelude.Types.Right', V16} end end end), V17 end(V8)) end end end end.
'un--plicit'(V0) -> case V0 of {'Core.TT.Pi', V1, V2, V3, V4} -> ('Idris.Idris2.Core.TT':'un--forgetDef'(V3)); {'Core.TT.PVar', V5, V6, V7, V8} -> ('Idris.Idris2.Core.TT':'un--forgetDef'(V7)); _ -> {'Core.TT.Explicit'} end.
'un--isUsed'(V0, V1) -> case V0 of 0 -> case V1 of {'TTImp.Elab.Utils.::', V2, V3} -> case V2 of 0 -> 1; _ -> 0 end end; _ -> begin (V4 = (V0 - 1)), case V1 of {'TTImp.Elab.Utils.::', V5, V6} -> ('un--isUsed'(V4, V6)) end end end.
'un--inlineSafe'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Core':'un--newRef'({'TTImp.Elab.Utils.Used'}, ('un--initUsed'(V0))))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V7 = ('un--caseInlineSafe'(V0, V6, V1))), V7 end(V3)) end end end end.
'un--initUsedCase'(V0) -> case V0 of [] -> {'TTImp.Elab.Utils.Nil'}; [E0 | E1] -> (fun (V1, V2) -> case V2 of [] -> {'TTImp.Elab.Utils.::', 1, {'TTImp.Elab.Utils.Nil'}}; _ -> {'TTImp.Elab.Utils.::', 2, ('un--initUsedCase'(V2))} end end(E0, E1)) end.
'un--initUsed'(V0) -> case V0 of [] -> {'TTImp.Elab.Utils.Nil'}; [E0 | E1] -> (fun (V1, V2) -> {'TTImp.Elab.Utils.::', 1, ('un--initUsed'(V2))} end(E0, E1)) end.
'un--inExtended'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V2), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V49 = begin (V14 = ('Idris.Idris2.Core.Core':'un--newRef'({'TTImp.Elab.Utils.Used'}, ('un--extendUsed'(V0, V1, V13))))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V48 = begin (V19 = (V3(V18))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V47 = begin (V40 = begin (V29 = begin (V24 = V18), fun (V25) -> begin (V28 = (begin (V26 = V24), fun (V27) -> ('erlang':'get'(V26)) end end(V25))), {'Prelude.Types.Right', V28} end end end), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V39 = begin (V34 = V2), fun (V35) -> begin (V38 = (begin (V36 = V34), fun (V37) -> ('erlang':'put'(V36, ('un--dropUsed'(V1, V33)))) end end(V35))), {'Prelude.Types.Right', V38} end end end), V39 end(V30)) end end end end), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V46 = fun (V45) -> {'Prelude.Types.Right', V23} end), V46 end(V41)) end end end end), V47 end(V20)) end end end end), V48 end(V15)) end end end end), V49 end(V10)) end end end end.
'un--findErasedFrom'(V0, V1, V2, V3) -> case V3 of {'Core.Value.NBind', V4, V5, V6, V7} -> case V6 of {'Core.TT.Pi', V8, V9, V10, V11} -> begin (V20 = ((V7(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Core.Env.Nil'}, {'Core.TT.Erased', V4, case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V12, V13)) end end, 0, fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V14, V15)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V18, V19)) end end}}, V9)) of 1 -> {'Core.TT.Impossible'}; 0 -> {'Core.TT.Placeholder'} end}))))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V55 = begin (V25 = ('un--findErasedFrom'(V0, V1, (V2 + 1), V24))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V54 = case V29 of {'Builtin.MkPair', V30, V31} -> begin (V32 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, V11))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V53 = begin (V37 = ('un--detagSafe'(V0, V1, V36))), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V52 = begin (V42 = case V41 of 1 -> [V2 | V31]; 0 -> V31 end), fun (V43) -> {'Prelude.Types.Right', case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V44, V45)) end end, 0, fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V46, V47)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V50, V51)) end end}}, V9)) of 1 -> {'Builtin.MkPair', [V2 | V30], V42}; 0 -> {'Builtin.MkPair', V30, V42} end} end end), V52 end(V38)) end end end end), V53 end(V33)) end end end end end), V54 end(V26)) end end end end), V55 end(V21)) end end end end; _ -> fun (V56) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], []}} end end; _ -> fun (V57) -> {'Prelude.Types.Right', {'Builtin.MkPair', [], []}} end end.
'un--findErased'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V18 = begin (V12 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V11, {'Core.Env.Nil'}, V1))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V17 = ('un--findErasedFrom'(V0, V11, 0, V16))), V17 end(V13)) end end end end), V18 end(V8)) end end end end.
'un--extendUsed'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> {'TTImp.Elab.Utils.::', V0, ('un--extendUsed'(V0, V4, V2))} end(E0, E1)) end.
'un--dropUsed'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'TTImp.Elab.Utils.::', V4, V5} -> ('un--dropUsed'(V3, V5)) end end(E0, E1)) end.
'un--detagSafe'(V0, V1, V2) -> case V2 of {'Core.Value.NTCon', V3, V4, V5, V6, V7} -> begin (V40 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V4, case V1 of {'Core.Context.MkDefs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> V8 end))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V66 = case V44 of {'Prelude.Types.Just', V45} -> case V45 of {'Core.Context.Context.TCon', V46, V47, V48, V49, V50, V51, V52, V53} -> case V53 of {'Prelude.Types.Just', V54} -> begin (V56 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V55) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V55)))) end, V7, []))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V62 = fun (V61) -> {'Prelude.Types.Right', ('nested--7818-11549--in--un--notErased'(V3, V5, V6, V7, V4, V1, V0, 0, V54, V60))} end), V62 end(V57)) end end end end; _ -> fun (V63) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V64) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V65) -> {'Prelude.Types.Right', 0} end end), V66 end(V41)) end end end end; _ -> fun (V67) -> {'Prelude.Types.Right', 0} end end.
'un--caseInlineSafe'(V0, V1, V2) -> case V2 of {'Core.Case.CaseTree.Case', V3, V4, V5, V6} -> begin (V12 = begin (V7 = V1), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V24 = case ('un--isUsed'(V4, V16)) of 1 -> fun (V17) -> {'Prelude.Types.Right', 0} end; 0 -> begin (V18 = ('un--setUsed'(V4, V1))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V23 = ('nested--9746-13287--in--un--altsSafe'(V0, V3, V6, V5, V4, V1, V6))), V23 end(V19)) end end end end end), V24 end(V13)) end end end end; {'Core.Case.CaseTree.STerm', V25, V26} -> ('un--termInlineSafe'(V0, V1, V26)); {'Core.Case.CaseTree.Unmatched', V27} -> fun (V28) -> {'Prelude.Types.Right', 1} end; {'Core.Case.CaseTree.Impossible'} -> fun (V29) -> {'Prelude.Types.Right', 1} end end.
'un--caseAltInlineSafe'(V0, V1, V2) -> case V2 of {'Core.Case.CaseTree.ConCase', V3, V4, V5, V6} -> ('un--inExtended'(1, V5, V1, fun (V7) -> ('un--caseInlineSafe'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V0)), V7, V6)) end)); {'Core.Case.CaseTree.DelayCase', V8, V9, V10} -> ('un--inExtended'(1, [V8 | [V9 | []]], V1, fun (V11) -> ('un--caseInlineSafe'([V8 | [V9 | V0]], V11, V10)) end)); {'Core.Case.CaseTree.ConstCase', V12, V13} -> ('un--caseInlineSafe'(V0, V1, V13)); {'Core.Case.CaseTree.DefaultCase', V14} -> ('un--caseInlineSafe'(V0, V1, V14)) end.
'un--canInlineDef'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V58 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V57 = case V48 of {'Prelude.Types.Just', V49} -> case V49 of {'Core.Context.Context.PMDef', V50, V51, V52, V53, V54} -> ('un--inlineSafe'(V51, V53)); _ -> fun (V55) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V56) -> {'Prelude.Types.Right', 0} end end), V57 end(V45)) end end end end), V58 end(V8)) end end end end.
'un--canInlineCaseBlock'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V64 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V63 = case V48 of {'Prelude.Types.Just', V49} -> case V49 of {'Core.Context.Context.PMDef', V50, V51, V52, V53, V54} -> begin (V55 = ('Idris.Idris2.Core.Core':'un--newRef'({'TTImp.Elab.Utils.Used'}, ('un--initUsedCase'(V51))))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V60 = ('un--caseInlineSafe'(V51, V59, V53))), V60 end(V56)) end end end end; _ -> fun (V61) -> {'Prelude.Types.Right', 0} end end; _ -> fun (V62) -> {'Prelude.Types.Right', 0} end end), V63 end(V45)) end end end end), V64 end(V8)) end end end end.
'un--bindReq'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Core.TT.SubRefl'} -> {'Prelude.Types.Just', {'Builtin.MkPair', V4, {'Builtin.MkPair', ('nested--8841-12478--in--un--notLets'(V0, V5, V4, V2, V1, [], V0, V2)), ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V1, V2, V5))}}}; _ -> case V0 of [E0 | E1] -> (fun (V6, V7) -> case V2 of {'Core.Env.::', V8, V9} -> case V3 of {'Core.TT.KeepCons', V10} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Core.TT':'un--shrinkBinder'(V8, V10)), fun (V11) -> ('un--bindReq'(V7, V1, V9, V10, [{'Builtin.MkPair', ('un--plicit'(V8)), V6} | V4], {'Core.TT.Bind', V1, V6, {'Core.TT.Pi', ('Idris.Idris2.Core.TT':'un--binderLoc'(V8)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V8)), {'Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V11))}, V5})) end)); {'Core.TT.DropCons', V12} -> ('un--bindReq'(V7, V1, V9, V12, V4, V5)) end end end(E0, E1)) end end.
'un--bindNotReq'(V0, V1, V2, V3, V4, V5, V6) -> case V0 of [] -> case V3 of {'Core.Env.Nil'} -> case V4 of {'Core.TT.SubRefl'} -> {'Builtin.MkPair', V5, ('Idris.Idris2.Core.TT':'un--embed'(V6))} end end; [E0 | E1] -> (fun (V7, V8) -> case V3 of {'Core.Env.::', V9, V10} -> case V4 of {'Core.TT.SubRefl'} -> begin (V11 = ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'({'Core.TT.Ref', V1, {'Core.TT.Bound'}, {'Core.Name.MN', <<"arg"/utf8>>, V2}}, V6))), case ('un--bindNotReq'(V8, V1, begin (V13 = (begin (V12 = 1), case ((V12 band 9223372036854775808) =/= 0) of 'true' -> (V12 bor -9223372036854775808); _ -> (V12 band 9223372036854775807) end end + V2)), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end, V10, {'Core.TT.SubRefl'}, V5, V11)) of {'Builtin.MkPair', V14, V15} -> {'Builtin.MkPair', V14, ('Idris.Idris2.Core.TT':'un--refToLocal'({'Core.Name.MN', <<"arg"/utf8>>, V2}, V7, V15))} end end; {'Core.TT.KeepCons', V16} -> begin (V17 = ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'({'Core.TT.Ref', V1, {'Core.TT.Bound'}, {'Core.Name.MN', <<"arg"/utf8>>, V2}}, V6))), case ('un--bindNotReq'(V8, V1, begin (V19 = (begin (V18 = 1), case ((V18 band 9223372036854775808) =/= 0) of 'true' -> (V18 bor -9223372036854775808); _ -> (V18 band 9223372036854775807) end end + V2)), case ((V19 band 9223372036854775808) =/= 0) of 'true' -> (V19 bor -9223372036854775808); _ -> (V19 band 9223372036854775807) end end, V10, V16, V5, V17)) of {'Builtin.MkPair', V20, V21} -> {'Builtin.MkPair', V20, ('Idris.Idris2.Core.TT':'un--refToLocal'({'Core.Name.MN', <<"arg"/utf8>>, V2}, V7, V21))} end end; {'Core.TT.DropCons', V22} -> ('un--bindNotReq'(V8, V1, V2, V10, V22, [{'Builtin.MkPair', ('un--plicit'(V9)), V7} | V5], {'Core.TT.Bind', V1, V7, {'Core.TT.Pi', ('Idris.Idris2.Core.TT':'un--binderLoc'(V9)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V9)), {'Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V9))}, V6})) end end end(E0, E1)) end.
