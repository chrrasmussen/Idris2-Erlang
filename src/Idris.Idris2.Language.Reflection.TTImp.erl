-module('Idris.Idris2.Language.Reflection.TTImp').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7890-10439--in--un--typeFor'/6,
  'nested--6741-9914--in--un--showSep'/5,
  'dn--un--show_Show_TTImp'/1,
  'dn--un--show_Show_Record'/1,
  'dn--un--show_Show_ITy'/1,
  'dn--un--show_Show_IFieldUpdate'/1,
  'dn--un--show_Show_IField'/1,
  'dn--un--show_Show_Decl'/1,
  'dn--un--show_Show_Data'/1,
  'dn--un--showPrec_Show_TTImp'/2,
  'dn--un--showPrec_Show_Record'/2,
  'dn--un--showPrec_Show_ITy'/2,
  'dn--un--showPrec_Show_IFieldUpdate'/2,
  'dn--un--showPrec_Show_IField'/2,
  'dn--un--showPrec_Show_Decl'/2,
  'dn--un--showPrec_Show_Data'/2,
  'dn--un--map_Functor_Argument'/2,
  'dn--un--__Impl_Show_TTImp'/0,
  'dn--un--__Impl_Show_Record'/0,
  'dn--un--__Impl_Show_ITy'/0,
  'dn--un--__Impl_Show_IFieldUpdate'/0,
  'dn--un--__Impl_Show_IField'/0,
  'dn--un--__Impl_Show_Decl'/0,
  'dn--un--__Impl_Show_Data'/0,
  'dn--un--__Impl_Functor_Argument'/4,
  'dn--un--__Impl_Eq_WithFlag'/0,
  'dn--un--__Impl_Eq_UseSide'/0,
  'dn--un--__Impl_Eq_TTImp'/0,
  'dn--un--__Impl_Eq_Record'/1,
  'dn--un--__Impl_Eq_ITy'/1,
  'dn--un--__Impl_Eq_IFieldUpdate'/1,
  'dn--un--__Impl_Eq_IField'/1,
  'dn--un--__Impl_Eq_FnOpt'/1,
  'dn--un--__Impl_Eq_DotReason'/0,
  'dn--un--__Impl_Eq_Decl'/1,
  'dn--un--__Impl_Eq_DataOpt'/0,
  'dn--un--__Impl_Eq_Data'/1,
  'dn--un--__Impl_Eq_Clause'/1,
  'dn--un--__Impl_Eq_BindMode'/0,
  'dn--un--__Impl_Eq_AltType'/1,
  'dn--un--__Impl_Eq_(PiInfo $a)'/1,
  'dn--un--==_Eq_WithFlag'/2,
  'dn--un--==_Eq_UseSide'/2,
  'dn--un--==_Eq_TTImp'/2,
  'dn--un--==_Eq_Record'/3,
  'dn--un--==_Eq_ITy'/3,
  'dn--un--==_Eq_IFieldUpdate'/3,
  'dn--un--==_Eq_IField'/3,
  'dn--un--==_Eq_FnOpt'/3,
  'dn--un--==_Eq_DotReason'/2,
  'dn--un--==_Eq_Decl'/3,
  'dn--un--==_Eq_DataOpt'/2,
  'dn--un--==_Eq_Data'/3,
  'dn--un--==_Eq_Clause'/3,
  'dn--un--==_Eq_BindMode'/2,
  'dn--un--==_Eq_AltType'/3,
  'dn--un--==_Eq_(PiInfo $a)'/3,
  'dn--un--/=_Eq_WithFlag'/2,
  'dn--un--/=_Eq_UseSide'/2,
  'dn--un--/=_Eq_TTImp'/2,
  'dn--un--/=_Eq_Record'/3,
  'dn--un--/=_Eq_ITy'/3,
  'dn--un--/=_Eq_IFieldUpdate'/3,
  'dn--un--/=_Eq_IField'/3,
  'dn--un--/=_Eq_FnOpt'/3,
  'dn--un--/=_Eq_DotReason'/2,
  'dn--un--/=_Eq_Decl'/3,
  'dn--un--/=_Eq_DataOpt'/2,
  'dn--un--/=_Eq_Data'/3,
  'dn--un--/=_Eq_Clause'/3,
  'dn--un--/=_Eq_BindMode'/2,
  'dn--un--/=_Eq_AltType'/3,
  'dn--un--/=_Eq_(PiInfo $a)'/3,
  'un--unArg'/1,
  'un--showIApps'/2,
  'un--showClause'/2,
  'un--mapTopmostFC'/2,
  'un--mapTTImp'/2,
  'un--mapRecord'/2,
  'un--mapPiInfo'/2,
  'un--mapMTTImp'/3,
  'un--mapMRecord'/3,
  'un--mapMPiInfo'/3,
  'un--mapMITy'/3,
  'un--mapMIFieldUpdate'/3,
  'un--mapMIField'/3,
  'un--mapMFnOpt'/3,
  'un--mapMDecl'/3,
  'un--mapMData'/3,
  'un--mapMClause'/3,
  'un--mapMAltType'/3,
  'un--mapITy'/2,
  'un--mapIFieldUpdate'/2,
  'un--mapIField'/2,
  'un--mapFnOpt'/2,
  'un--mapDecl'/2,
  'un--mapData'/2,
  'un--mapClause'/2,
  'un--mapAltType'/2,
  'un--isExplicit'/1,
  'un--iApp'/2,
  'un--getFC'/1,
  'un--fromPiInfo'/4,
  'un--collectPis'/5,
  'un--apply'/2,
  'un--appView'/1
]).
'nested--7890-10439--in--un--typeFor'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Language.Reflection.TTImp.Implicit', V6, V7} -> case V7 of 0 -> []; _ -> [<<"{-"/utf8>> | [<<":"/utf8>> | [('dn--un--show_Show_TTImp'(V5)) | [<<"-}"/utf8>> | []]]]] end; _ -> [<<"{-"/utf8>> | [<<":"/utf8>> | [('dn--un--show_Show_TTImp'(V5)) | [<<"-}"/utf8>> | []]]]] end.
'nested--6741-9914--in--un--showSep'(V0, V1, V2, V3, V4) -> case V4 of 0 -> <<"="/utf8>>; 1 -> <<"=>"/utf8>> end.
'dn--un--show_Show_TTImp'(V0) -> ('dn--un--showPrec_Show_TTImp'({'Prelude.Show.Open'}, V0)).
'dn--un--show_Show_Record'(V0) -> case V0 of {'Language.Reflection.TTImp.MkRecord', V1, V2, V3, V4, V5, V6} -> ('Idris.Idris2.Data.String':'un--unwords'([<<"record"/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V2)) | [('Idris.Idris2.Data.String':'un--unwords'(((begin (V33 = fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V31, V32)) end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> ('Idris.Idris2.Language.Reflection.TT':'un--showPiInfo'({'Prelude.Show.MkShow', fun (V14) -> ('dn--un--show_Show_TTImp'(V14)) end, fun (V15) -> fun (V16) -> ('dn--un--showPrec_Show_TTImp'(V15, V16)) end end}, 1, V12, ('Idris.Idris2.Language.Reflection.TT':'un--showCount'(V10, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V17) -> fun (V18) -> <<V17/binary, V18/binary>> end end, <<""/utf8>>}, fun (V19) -> V19 end, [(begin (V21 = fun (V20) -> V20 end), fun (V22) -> (V21(V22)) end end(('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V8)))) | [(begin (V24 = fun (V23) -> V23 end), fun (V25) -> (V24(V25)) end end(<<" : "/utf8>>)) | [(begin (V27 = fun (V26) -> V26 end), fun (V28) -> (V27(V28)) end end(('dn--un--show_Show_TTImp'(V13)))) | []]]])))))) end end end end))(V3)))) | [<<"where"/utf8>> | [<<"{"/utf8>> | [<<"constructor"/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V5)) | [<<"; "/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<"; "/utf8>>, ((begin (V41 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V39, V40)) end end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end(fun (V36) -> ('dn--un--show_Show_IField'(V36)) end))(V6)))) | [<<"}"/utf8>> | []]]]]]]]]]])) end.
'dn--un--show_Show_ITy'(V0) -> case V0 of {'Language.Reflection.TTImp.MkTy', V1, V2, V3, V4} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V5) -> fun (V6) -> <<V5/binary, V6/binary>> end end, <<""/utf8>>}, fun (V7) -> V7 end, [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V3)) | [<<" : "/utf8>> | [('dn--un--show_Show_TTImp'(V4)) | []]]])) end.
'dn--un--show_Show_IFieldUpdate'(V0) -> case V0 of {'Language.Reflection.TTImp.ISetField', V1, V2} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V3) -> fun (V4) -> <<V3/binary, V4/binary>> end end, <<""/utf8>>}, fun (V5) -> V5 end, [('Idris.Idris2.Data.String':'un--joinBy'(<<"->"/utf8>>, V1)) | [<<" := "/utf8>> | [('dn--un--show_Show_TTImp'(V2)) | []]]])); {'Language.Reflection.TTImp.ISetFieldApp', V6, V7} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V8) -> fun (V9) -> <<V8/binary, V9/binary>> end end, <<""/utf8>>}, fun (V10) -> V10 end, [('Idris.Idris2.Data.String':'un--joinBy'(<<"->"/utf8>>, V6)) | [<<" $= "/utf8>> | [('dn--un--show_Show_TTImp'(V7)) | []]]])) end.
'dn--un--show_Show_IField'(V0) -> case V0 of {'Language.Reflection.TTImp.MkIField', V1, V2, V3, V4, V5} -> ('Idris.Idris2.Language.Reflection.TT':'un--showPiInfo'({'Prelude.Show.MkShow', fun (V6) -> ('dn--un--show_Show_TTImp'(V6)) end, fun (V7) -> fun (V8) -> ('dn--un--showPrec_Show_TTImp'(V7, V8)) end end}, 0, V3, ('Idris.Idris2.Language.Reflection.TT':'un--showCount'(V2, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V9) -> fun (V10) -> <<V9/binary, V10/binary>> end end, <<""/utf8>>}, fun (V11) -> V11 end, [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V4)) | [<<" : "/utf8>> | [('dn--un--show_Show_TTImp'(V5)) | []]]])))))) end.
'dn--un--show_Show_Decl'(V0) -> case V0 of {'Language.Reflection.TTImp.IClaim', V1, V2, V3, V4, V5} -> ('Idris.Idris2.Data.String':'un--unwords'([('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Visibility'(V3)) | [('Idris.Idris2.Language.Reflection.TT':'un--showCount'(V2, ('dn--un--show_Show_ITy'(V5)))) | []]])); {'Language.Reflection.TTImp.IData', V6, V7, V8, V9} -> ('Idris.Idris2.Data.String':'un--unwords'([('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Visibility'(V7)) | [('Idris.Idris2.Language.Reflection.TT':'un--showTotalReq'(V8, ('dn--un--show_Show_Data'(V9)))) | []]])); {'Language.Reflection.TTImp.IDef', V10, V11, V12} -> ('Idris.Idris2.Data.String':'un--joinBy'(<<"; "/utf8>>, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('un--showClause'(0, V13)) end))(V12)))); {'Language.Reflection.TTImp.IParameters', V21, V22, V23} -> ('Idris.Idris2.Data.String':'un--unwords'([<<"parameters"/utf8>> | [('Idris.Idris2.Data.String':'un--unwords'(((begin (V50 = fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V48, V49)) end end end end), fun (V51) -> fun (V52) -> ((((V50('erased'))('erased'))(V51))(V52)) end end end(fun (V24) -> case V24 of {'Builtin.MkPair', V25, V26} -> case V26 of {'Builtin.MkPair', V27, V28} -> case V28 of {'Builtin.MkPair', V29, V30} -> ('Idris.Idris2.Language.Reflection.TT':'un--showPiInfo'({'Prelude.Show.MkShow', fun (V31) -> ('dn--un--show_Show_TTImp'(V31)) end, fun (V32) -> fun (V33) -> ('dn--un--showPrec_Show_TTImp'(V32, V33)) end end}, 1, V29, ('Idris.Idris2.Language.Reflection.TT':'un--showCount'(V27, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V34) -> fun (V35) -> <<V34/binary, V35/binary>> end end, <<""/utf8>>}, fun (V36) -> V36 end, [(begin (V38 = fun (V37) -> V37 end), fun (V39) -> (V38(V39)) end end(('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V25)))) | [(begin (V41 = fun (V40) -> V40 end), fun (V42) -> (V41(V42)) end end(<<" : "/utf8>>)) | [(begin (V44 = fun (V43) -> V43 end), fun (V45) -> (V44(V45)) end end(('dn--un--show_Show_TTImp'(V30)))) | []]]])))))) end end end end))(V22)))) | [<<"{"/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<"; "/utf8>>, ((begin (V58 = fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V56, V57)) end end end end), fun (V59) -> fun (V60) -> ((((V58('erased'))('erased'))(V59))(V60)) end end end(fun (V53) -> ('dn--un--show_Show_Decl'(V53)) end))(V23)))) | [<<"}"/utf8>> | []]]]]])); {'Language.Reflection.TTImp.IRecord', V61, V62, V63, V64, V65} -> ('Idris.Idris2.Data.String':'un--unwords'([('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Visibility'(V63)) | [('Idris.Idris2.Language.Reflection.TT':'un--showTotalReq'(V64, ('dn--un--show_Show_Record'(V65)))) | []]])); {'Language.Reflection.TTImp.INamespace', V66, V67, V68} -> ('Idris.Idris2.Data.String':'un--unwords'([<<"namespace"/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Namespace'(V67)) | [<<"{"/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<"; "/utf8>>, ((begin (V74 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V72, V73)) end end end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V69) -> ('dn--un--show_Show_Decl'(V69)) end))(V68)))) | [<<"}"/utf8>> | []]]]]])); {'Language.Reflection.TTImp.ITransform', V77, V78, V79, V80} -> <<"%transform \x{22}\x{5c}{show nm}\x{22} \x{5c}{show s} = \x{5c}{show t}"/utf8>>; {'Language.Reflection.TTImp.IRunElabDecl', V81, V82} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V83) -> fun (V84) -> <<V83/binary, V84/binary>> end end, <<""/utf8>>}, fun (V85) -> V85 end, [<<"%runElab "/utf8>> | [('dn--un--show_Show_TTImp'(V82)) | []]])); {'Language.Reflection.TTImp.ILog', V86} -> case V86 of {'Prelude.Types.Nothing'} -> (begin (V88 = fun (V87) -> V87 end), fun (V89) -> (V88(V89)) end end(<<"%logging off"/utf8>>)); {'Prelude.Types.Just', V90} -> case V90 of {'Builtin.MkPair', V91, V92} -> case V91 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V93) -> fun (V94) -> <<V93/binary, V94/binary>> end end, <<""/utf8>>}, fun (V95) -> V95 end, [(begin (V97 = fun (V96) -> V96 end), fun (V98) -> (V97(V98)) end end(<<"%logging "/utf8>>)) | [(begin (V100 = fun (V99) -> V99 end), fun (V101) -> (V100(V101)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V92)))) | []]])); _ -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V102) -> fun (V103) -> <<V102/binary, V103/binary>> end end, <<""/utf8>>}, fun (V104) -> V104 end, [(begin (V106 = fun (V105) -> V105 end), fun (V107) -> (V106(V107)) end end(<<"%logging "/utf8>>)) | [(begin (V109 = fun (V108) -> V108 end), fun (V110) -> (V109(V110)) end end(('Idris.Idris2.Data.String':'un--joinBy'(<<"."/utf8>>, V91)))) | [(begin (V112 = fun (V111) -> V111 end), fun (V113) -> (V112(V113)) end end(<<" "/utf8>>)) | [(begin (V115 = fun (V114) -> V114 end), fun (V116) -> (V115(V116)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V92)))) | []]]]])) end end end; {'Language.Reflection.TTImp.IBuiltin', V117, V118, V119} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V120) -> fun (V121) -> <<V120/binary, V121/binary>> end end, <<""/utf8>>}, fun (V122) -> V122 end, [<<"%builtin "/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_BuiltinType'(V118)) | [<<" "/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V119)) | []]]]])) end.
'dn--un--show_Show_Data'(V0) -> case V0 of {'Language.Reflection.TTImp.MkData', V1, V2, V3, V4, V5} -> ('Idris.Idris2.Data.String':'un--unwords'([<<"data"/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V2)) | [<<":"/utf8>> | [('dn--un--show_Show_TTImp'(V3)) | [<<"where"/utf8>> | [<<"{"/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<"; "/utf8>>, ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> ('dn--un--show_Show_ITy'(V6)) end))(V5)))) | [<<"}"/utf8>> | []]]]]]]]])); {'Language.Reflection.TTImp.MkLater', V14, V15, V16} -> ('Idris.Idris2.Data.String':'un--unwords'([<<"data"/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V15)) | [<<":"/utf8>> | [('dn--un--show_Show_TTImp'(V16)) | []]]]])) end.
'dn--un--showPrec_Show_TTImp'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.IVar', V2, V3} -> ('Idris.Idris2.Language.Reflection.TT':'un--showPrefix'(1, V3)); {'Language.Reflection.TTImp.IPi', V4, V5, V6, V7, V8, V9} -> case V5 of 2 -> case V6 of {'Language.Reflection.TT.ExplicitArg'} -> case V7 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V10) -> fun (V11) -> <<V10/binary, V11/binary>> end end, <<""/utf8>>}, fun (V12) -> V12 end, [('dn--un--showPrec_Show_TTImp'({'Prelude.Show.Dollar'}, V8)) | [<<" -> "/utf8>> | [('dn--un--show_Show_TTImp'(V9)) | []]]])))); _ -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), case ('un--collectPis'(V5, V6, {'Prelude.Basics.:<', {'Prelude.Basics.Lin'}, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Language.Reflection.TT.UN', {'Language.Reflection.TT.Underscore'}} end, V7))}, V8, V9)) of {'Builtin.MkPair', V13, V14} -> <<('Idris.Idris2.Language.Reflection.TT':'un--showPiInfo'({'Prelude.Show.MkShow', fun (V15) -> ('dn--un--show_Show_TTImp'(V15)) end, fun (V16) -> fun (V17) -> ('dn--un--showPrec_Show_TTImp'(V16, V17)) end end}, 1, V6, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V18) -> fun (V19) -> <<V18/binary, V19/binary>> end end, <<""/utf8>>}, fun (V20) -> V20 end, [('Idris.Idris2.Language.Reflection.TT':'un--showCount'(V5, ('Idris.Idris2.Data.String':'un--joinBy'(<<", "/utf8>>, ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V21)) end))(V13)))))) | [<<" : "/utf8>> | [('dn--un--show_Show_TTImp'(V8)) | []]]]))))/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V29) -> fun (V30) -> <<V29/binary, V30/binary>> end end, <<""/utf8>>}, fun (V31) -> V31 end, [<<" -> "/utf8>> | [('dn--un--show_Show_TTImp'(V14)) | []]]))/binary>> end)) end; {'Language.Reflection.TT.AutoImplicit'} -> case V7 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V32) -> fun (V33) -> <<V32/binary, V33/binary>> end end, <<""/utf8>>}, fun (V34) -> V34 end, [('dn--un--showPrec_Show_TTImp'({'Prelude.Show.Dollar'}, V8)) | [<<" => "/utf8>> | [('dn--un--show_Show_TTImp'(V9)) | []]]])))); _ -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), case ('un--collectPis'(V5, V6, {'Prelude.Basics.:<', {'Prelude.Basics.Lin'}, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Language.Reflection.TT.UN', {'Language.Reflection.TT.Underscore'}} end, V7))}, V8, V9)) of {'Builtin.MkPair', V35, V36} -> <<('Idris.Idris2.Language.Reflection.TT':'un--showPiInfo'({'Prelude.Show.MkShow', fun (V37) -> ('dn--un--show_Show_TTImp'(V37)) end, fun (V38) -> fun (V39) -> ('dn--un--showPrec_Show_TTImp'(V38, V39)) end end}, 1, V6, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V40) -> fun (V41) -> <<V40/binary, V41/binary>> end end, <<""/utf8>>}, fun (V42) -> V42 end, [('Idris.Idris2.Language.Reflection.TT':'un--showCount'(V5, ('Idris.Idris2.Data.String':'un--joinBy'(<<", "/utf8>>, ((begin (V48 = fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V46, V47)) end end end end), fun (V49) -> fun (V50) -> ((((V48('erased'))('erased'))(V49))(V50)) end end end(fun (V43) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V43)) end))(V35)))))) | [<<" : "/utf8>> | [('dn--un--show_Show_TTImp'(V8)) | []]]]))))/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V51) -> fun (V52) -> <<V51/binary, V52/binary>> end end, <<""/utf8>>}, fun (V53) -> V53 end, [<<" -> "/utf8>> | [('dn--un--show_Show_TTImp'(V36)) | []]]))/binary>> end)) end; _ -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), case ('un--collectPis'(V5, V6, {'Prelude.Basics.:<', {'Prelude.Basics.Lin'}, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Language.Reflection.TT.UN', {'Language.Reflection.TT.Underscore'}} end, V7))}, V8, V9)) of {'Builtin.MkPair', V54, V55} -> <<('Idris.Idris2.Language.Reflection.TT':'un--showPiInfo'({'Prelude.Show.MkShow', fun (V56) -> ('dn--un--show_Show_TTImp'(V56)) end, fun (V57) -> fun (V58) -> ('dn--un--showPrec_Show_TTImp'(V57, V58)) end end}, 1, V6, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V59) -> fun (V60) -> <<V59/binary, V60/binary>> end end, <<""/utf8>>}, fun (V61) -> V61 end, [('Idris.Idris2.Language.Reflection.TT':'un--showCount'(V5, ('Idris.Idris2.Data.String':'un--joinBy'(<<", "/utf8>>, ((begin (V67 = fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V65, V66)) end end end end), fun (V68) -> fun (V69) -> ((((V67('erased'))('erased'))(V68))(V69)) end end end(fun (V62) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V62)) end))(V54)))))) | [<<" : "/utf8>> | [('dn--un--show_Show_TTImp'(V8)) | []]]]))))/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V70) -> fun (V71) -> <<V70/binary, V71/binary>> end end, <<""/utf8>>}, fun (V72) -> V72 end, [<<" -> "/utf8>> | [('dn--un--show_Show_TTImp'(V55)) | []]]))/binary>> end)) end; _ -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), case ('un--collectPis'(V5, V6, {'Prelude.Basics.:<', {'Prelude.Basics.Lin'}, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Language.Reflection.TT.UN', {'Language.Reflection.TT.Underscore'}} end, V7))}, V8, V9)) of {'Builtin.MkPair', V73, V74} -> <<('Idris.Idris2.Language.Reflection.TT':'un--showPiInfo'({'Prelude.Show.MkShow', fun (V75) -> ('dn--un--show_Show_TTImp'(V75)) end, fun (V76) -> fun (V77) -> ('dn--un--showPrec_Show_TTImp'(V76, V77)) end end}, 1, V6, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V78) -> fun (V79) -> <<V78/binary, V79/binary>> end end, <<""/utf8>>}, fun (V80) -> V80 end, [('Idris.Idris2.Language.Reflection.TT':'un--showCount'(V5, ('Idris.Idris2.Data.String':'un--joinBy'(<<", "/utf8>>, ((begin (V86 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V84, V85)) end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(fun (V81) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V81)) end))(V73)))))) | [<<" : "/utf8>> | [('dn--un--show_Show_TTImp'(V8)) | []]]]))))/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V89) -> fun (V90) -> <<V89/binary, V90/binary>> end end, <<""/utf8>>}, fun (V91) -> V91 end, [<<" -> "/utf8>> | [('dn--un--show_Show_TTImp'(V74)) | []]]))/binary>> end)) end; {'Language.Reflection.TTImp.ILam', V92, V93, V94, V95, V96, V97} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V98) -> fun (V99) -> <<V98/binary, V99/binary>> end end, <<""/utf8>>}, fun (V100) -> V100 end, [<<"\x{5c} "/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'un--showCount'(V93, ('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Language.Reflection.TT.UN', {'Language.Reflection.TT.Underscore'}} end, V95)))))) | [<<" => "/utf8>> | [('dn--un--show_Show_TTImp'(V97)) | []]]]])))); {'Language.Reflection.TTImp.ILet', V101, V102, V103, V104, V105, V106, V107} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V108) -> fun (V109) -> <<V108/binary, V109/binary>> end end, <<""/utf8>>}, fun (V110) -> V110 end, [<<"let "/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'un--showCount'(V103, ('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V104)))) | [<<" : "/utf8>> | [('dn--un--show_Show_TTImp'(V105)) | [<<" = "/utf8>> | [('dn--un--show_Show_TTImp'(V106)) | [<<" in "/utf8>> | [('dn--un--show_Show_TTImp'(V107)) | []]]]]]]]])))); {'Language.Reflection.TTImp.ICase', V111, V112, V113, V114} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), ('Idris.Idris2.Data.String':'un--unwords'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([<<"case"/utf8>> | [('dn--un--show_Show_TTImp'(V112)) | []]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--7890-10439--in--un--typeFor'(V114, V113, V112, V111, V0, V113)), [<<"of"/utf8>> | [<<"{"/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<"; "/utf8>>, ((begin (V120 = fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V118, V119)) end end end end), fun (V121) -> fun (V122) -> ((((V120('erased'))('erased'))(V121))(V122)) end end end(fun (V115) -> ('un--showClause'(1, V115)) end))(V114)))) | [<<"}"/utf8>> | []]]]])))))))); {'Language.Reflection.TTImp.ILocal', V123, V124, V125} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), ('Idris.Idris2.Data.String':'un--unwords'([<<"let"/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<"; "/utf8>>, ((begin (V131 = fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V129, V130)) end end end end), fun (V132) -> fun (V133) -> ((((V131('erased'))('erased'))(V132))(V133)) end end end(fun (V126) -> ('dn--un--show_Show_Decl'(V126)) end))(V124)))) | [<<"in"/utf8>> | [('dn--un--show_Show_TTImp'(V125)) | []]]]])))); {'Language.Reflection.TTImp.IUpdate', V134, V135, V136} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), ('Idris.Idris2.Data.String':'un--unwords'([<<"{"/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<", "/utf8>>, ((begin (V142 = fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V140, V141)) end end end end), fun (V143) -> fun (V144) -> ((((V142('erased'))('erased'))(V143))(V144)) end end end(fun (V137) -> ('dn--un--show_Show_IFieldUpdate'(V137)) end))(V135)))) | [<<"}"/utf8>> | [('dn--un--showPrec_Show_TTImp'({'Prelude.Show.App'}, V136)) | []]]]])))); {'Language.Reflection.TTImp.IApp', V145, V146, V147} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V0, {'Prelude.Show.App'})), ('un--showIApps'(V146, [('dn--un--showPrec_Show_TTImp'({'Prelude.Show.App'}, V147)) | []])))); {'Language.Reflection.TTImp.INamedApp', V148, V149, V150, V151} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V0, {'Prelude.Show.App'})), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V152) -> fun (V153) -> <<V152/binary, V153/binary>> end end, <<""/utf8>>}, fun (V154) -> V154 end, [('dn--un--show_Show_TTImp'(V149)) | [<<" {"/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V150)) | [<<" = "/utf8>> | [('dn--un--show_Show_TTImp'(V151)) | [<<"}"/utf8>> | []]]]]]])))); {'Language.Reflection.TTImp.IAutoApp', V155, V156, V157} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V0, {'Prelude.Show.App'})), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V158) -> fun (V159) -> <<V158/binary, V159/binary>> end end, <<""/utf8>>}, fun (V160) -> V160 end, [('dn--un--show_Show_TTImp'(V156)) | [<<" @{"/utf8>> | [('dn--un--show_Show_TTImp'(V157)) | [<<"}"/utf8>> | []]]]])))); {'Language.Reflection.TTImp.IWithApp', V161, V162, V163} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V0, {'Prelude.Show.App'})), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V164) -> fun (V165) -> <<V164/binary, V165/binary>> end end, <<""/utf8>>}, fun (V166) -> V166 end, [('dn--un--show_Show_TTImp'(V162)) | [<<" | "/utf8>> | [('dn--un--showPrec_Show_TTImp'({'Prelude.Show.App'}, V163)) | []]]])))); {'Language.Reflection.TTImp.ISearch', V167, V168} -> <<"%search"/utf8>>; {'Language.Reflection.TTImp.IAlternative', V169, V170, V171} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V172) -> fun (V173) -> <<V172/binary, V173/binary>> end end, <<""/utf8>>}, fun (V174) -> V174 end, [<<"<"/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V171)))) | [<<" alts>"/utf8>> | []]]])); {'Language.Reflection.TTImp.IRewrite', V175, V176, V177} -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Prelude.Show.Open'})), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V178) -> fun (V179) -> <<V178/binary, V179/binary>> end end, <<""/utf8>>}, fun (V180) -> V180 end, [<<"rewrite "/utf8>> | [('dn--un--show_Show_TTImp'(V176)) | [<<" in "/utf8>> | [('dn--un--show_Show_TTImp'(V177)) | []]]]])))); {'Language.Reflection.TTImp.IBindHere', V181, V182, V183} -> ('dn--un--showPrec_Show_TTImp'(V0, V183)); {'Language.Reflection.TTImp.IBindVar', V184, V185} -> V185; {'Language.Reflection.TTImp.IAs', V186, V187, V188, V189, V190} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V191) -> fun (V192) -> <<V191/binary, V192/binary>> end end, <<""/utf8>>}, fun (V193) -> V193 end, [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V189)) | [<<"@"/utf8>> | [('dn--un--showPrec_Show_TTImp'({'Prelude.Show.App'}, V190)) | []]]])); {'Language.Reflection.TTImp.IMustUnify', V194, V195, V196} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V197) -> fun (V198) -> <<V197/binary, V198/binary>> end end, <<""/utf8>>}, fun (V199) -> V199 end, [<<".("/utf8>> | [('dn--un--show_Show_TTImp'(V196)) | [<<")"/utf8>> | []]]])); {'Language.Reflection.TTImp.IDelayed', V200, V201, V202} -> case V201 of 0 -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Inf"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V203) -> ('dn--un--show_Show_TTImp'(V203)) end, fun (V204) -> fun (V205) -> ('dn--un--showPrec_Show_TTImp'(V204, V205)) end end}, V202)))); 1 -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Lazy"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V206) -> ('dn--un--show_Show_TTImp'(V206)) end, fun (V207) -> fun (V208) -> ('dn--un--showPrec_Show_TTImp'(V207, V208)) end end}, V202)))); 2 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V209) -> fun (V210) -> <<V209/binary, V210/binary>> end end, <<""/utf8>>}, fun (V211) -> V211 end, [<<"({- unknown lazy -} "/utf8>> | [('dn--un--showPrec_Show_TTImp'({'Prelude.Show.Open'}, V202)) | [<<")"/utf8>> | []]]])) end; {'Language.Reflection.TTImp.IDelay', V212, V213} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Delay"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V214) -> ('dn--un--show_Show_TTImp'(V214)) end, fun (V215) -> fun (V216) -> ('dn--un--showPrec_Show_TTImp'(V215, V216)) end end}, V213)))); {'Language.Reflection.TTImp.IForce', V217, V218} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Force"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V219) -> ('dn--un--show_Show_TTImp'(V219)) end, fun (V220) -> fun (V221) -> ('dn--un--showPrec_Show_TTImp'(V220, V221)) end end}, V218)))); {'Language.Reflection.TTImp.IQuote', V222, V223} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V224) -> fun (V225) -> <<V224/binary, V225/binary>> end end, <<""/utf8>>}, fun (V226) -> V226 end, [<<"`("/utf8>> | [('dn--un--show_Show_TTImp'(V223)) | [<<")"/utf8>> | []]]])); {'Language.Reflection.TTImp.IQuoteName', V227, V228} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V229) -> fun (V230) -> <<V229/binary, V230/binary>> end end, <<""/utf8>>}, fun (V231) -> V231 end, [<<"`{"/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V228)) | [<<"}"/utf8>> | []]]])); {'Language.Reflection.TTImp.IQuoteDecl', V232, V233} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V234) -> fun (V235) -> <<V234/binary, V235/binary>> end end, <<""/utf8>>}, fun (V236) -> V236 end, [<<"`["/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<"; "/utf8>>, ((begin (V242 = fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V240, V241)) end end end end), fun (V243) -> fun (V244) -> ((((V242('erased'))('erased'))(V243))(V244)) end end end(fun (V237) -> ('dn--un--show_Show_Decl'(V237)) end))(V233)))) | [<<"]"/utf8>> | []]]])); {'Language.Reflection.TTImp.IUnquote', V245, V246} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V247) -> fun (V248) -> <<V247/binary, V248/binary>> end end, <<""/utf8>>}, fun (V249) -> V249 end, [<<"~("/utf8>> | [('dn--un--show_Show_TTImp'(V246)) | [<<")"/utf8>> | []]]])); {'Language.Reflection.TTImp.IPrimVal', V250, V251} -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Constant'(V251)); {'Language.Reflection.TTImp.IType', V252} -> <<"Type"/utf8>>; {'Language.Reflection.TTImp.IHole', V253, V254} -> <<<<"?"/utf8>>/binary, V254/binary>>; {'Language.Reflection.TTImp.Implicit', V255, V256} -> case V256 of 1 -> <<"_"/utf8>>; 0 -> <<"?"/utf8>> end; {'Language.Reflection.TTImp.IWithUnambigNames', V257, V258, V259} -> case V258 of [] -> ('dn--un--show_Show_TTImp'(V259)); [E0 | E1] -> (fun (V260, V261) -> case V260 of {'Builtin.MkPair', V262, V263} -> case V261 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V264) -> fun (V265) -> <<V264/binary, V265/binary>> end end, <<""/utf8>>}, fun (V266) -> V266 end, [(begin (V268 = fun (V267) -> V267 end), fun (V269) -> (V268(V269)) end end(<<"with "/utf8>>)) | [(begin (V271 = fun (V270) -> V270 end), fun (V272) -> (V271(V272)) end end(('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V263)))) | [(begin (V274 = fun (V273) -> V273 end), fun (V275) -> (V274(V275)) end end(<<" "/utf8>>)) | [(begin (V277 = fun (V276) -> V276 end), fun (V278) -> (V277(V278)) end end(('dn--un--show_Show_TTImp'(V259)))) | []]]]])); _ -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V279) -> fun (V280) -> <<V279/binary, V280/binary>> end end, <<""/utf8>>}, fun (V281) -> V281 end, [<<"with ["/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<", "/utf8>>, ((begin (V287 = fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V285, V286)) end end end end), fun (V288) -> fun (V289) -> ((((V287('erased'))('erased'))(V288))(V289)) end end end(fun (V282) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(('Idris.Idris2.Builtin':'un--snd'(V282)))) end))(V258)))) | [<<"] "/utf8>> | [('dn--un--show_Show_TTImp'(V259)) | []]]]])) end; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V290) -> fun (V291) -> <<V290/binary, V291/binary>> end end, <<""/utf8>>}, fun (V292) -> V292 end, [<<"with ["/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<", "/utf8>>, ((begin (V298 = fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V296, V297)) end end end end), fun (V299) -> fun (V300) -> ((((V298('erased'))('erased'))(V299))(V300)) end end end(fun (V293) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(('Idris.Idris2.Builtin':'un--snd'(V293)))) end))(V258)))) | [<<"] "/utf8>> | [('dn--un--show_Show_TTImp'(V259)) | []]]]])) end end(E0, E1)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V301) -> fun (V302) -> <<V301/binary, V302/binary>> end end, <<""/utf8>>}, fun (V303) -> V303 end, [<<"with ["/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<", "/utf8>>, ((begin (V309 = fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V307, V308)) end end end end), fun (V310) -> fun (V311) -> ((((V309('erased'))('erased'))(V310))(V311)) end end end(fun (V304) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(('Idris.Idris2.Builtin':'un--snd'(V304)))) end))(V258)))) | [<<"] "/utf8>> | [('dn--un--show_Show_TTImp'(V259)) | []]]]])) end end.
'dn--un--showPrec_Show_Record'(V0, V1) -> ('dn--un--show_Show_Record'(V1)).
'dn--un--showPrec_Show_ITy'(V0, V1) -> ('dn--un--show_Show_ITy'(V1)).
'dn--un--showPrec_Show_IFieldUpdate'(V0, V1) -> ('dn--un--show_Show_IFieldUpdate'(V1)).
'dn--un--showPrec_Show_IField'(V0, V1) -> ('dn--un--show_Show_IField'(V1)).
'dn--un--showPrec_Show_Decl'(V0, V1) -> ('dn--un--show_Show_Decl'(V1)).
'dn--un--showPrec_Show_Data'(V0, V1) -> ('dn--un--show_Show_Data'(V1)).
'dn--un--map_Functor_Argument'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.Arg', V2, V3} -> {'Language.Reflection.TTImp.Arg', V2, (V0(V3))}; {'Language.Reflection.TTImp.NamedArg', V4, V5, V6} -> {'Language.Reflection.TTImp.NamedArg', V4, V5, (V0(V6))}; {'Language.Reflection.TTImp.AutoArg', V7, V8} -> {'Language.Reflection.TTImp.AutoArg', V7, (V0(V8))} end.
'dn--un--__Impl_Show_TTImp'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_TTImp'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_TTImp'(V1, V2)) end end}.
'dn--un--__Impl_Show_Record'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Record'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Record'(V1, V2)) end end}.
'dn--un--__Impl_Show_ITy'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ITy'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ITy'(V1, V2)) end end}.
'dn--un--__Impl_Show_IFieldUpdate'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_IFieldUpdate'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_IFieldUpdate'(V1, V2)) end end}.
'dn--un--__Impl_Show_IField'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_IField'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_IField'(V1, V2)) end end}.
'dn--un--__Impl_Show_Decl'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Decl'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Decl'(V1, V2)) end end}.
'dn--un--__Impl_Show_Data'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Data'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Data'(V1, V2)) end end}.
'dn--un--__Impl_Functor_Argument'(V0, V1, V2, V3) -> ('dn--un--map_Functor_Argument'(V2, V3)).
'dn--un--__Impl_Eq_WithFlag'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> 1 end end, fun (V2) -> fun (V3) -> 0 end end}.
'dn--un--__Impl_Eq_UseSide'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_UseSide'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_UseSide'(V2, V3)) end end}.
'dn--un--__Impl_Eq_TTImp'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_TTImp'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_TTImp'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Record'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_Record'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_Record'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_ITy'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_ITy'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_ITy'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_IFieldUpdate'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_IFieldUpdate'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_IFieldUpdate'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_IField'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_IField'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_IField'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_FnOpt'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_FnOpt'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_FnOpt'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_DotReason'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DotReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DotReason'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Decl'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_Decl'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_Decl'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_DataOpt'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DataOpt'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DataOpt'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Data'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_Data'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_Data'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_Clause'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_Clause'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_Clause'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_BindMode'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_BindMode'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_BindMode'(V2, V3)) end end}.
'dn--un--__Impl_Eq_AltType'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_AltType'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_AltType'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_(PiInfo $a)'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V3, V4)) end end}.
'dn--un--==_Eq_WithFlag'(V0, V1) -> 1.
'dn--un--==_Eq_UseSide'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_TTImp'(V0, V1) -> case V0 of {'Language.Reflection.TTImp.IVar', V2, V3} -> case V1 of {'Language.Reflection.TTImp.IVar', V4, V5} -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V3, V5)); _ -> 0 end; {'Language.Reflection.TTImp.IPi', V6, V7, V8, V9, V10, V11} -> case V1 of {'Language.Reflection.TTImp.IPi', V12, V13, V14, V15, V16, V17} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V7, V13)) of 1 -> case ('dn--un--==_Eq_(PiInfo $a)'({'Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('dn--un--==_Eq_TTImp'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('dn--un--/=_Eq_TTImp'(V20, V21)) end end}, V8, V14)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Name'(V24, V25)) end end}, V9, V15)) of 1 -> case ('dn--un--==_Eq_TTImp'(V10, V16)) of 1 -> ('dn--un--==_Eq_TTImp'(V11, V17)); 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.ILam', V26, V27, V28, V29, V30, V31} -> case V1 of {'Language.Reflection.TTImp.ILam', V32, V33, V34, V35, V36, V37} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V27, V33)) of 1 -> case ('dn--un--==_Eq_(PiInfo $a)'({'Prelude.EqOrd.MkEq', fun (V38) -> fun (V39) -> ('dn--un--==_Eq_TTImp'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('dn--un--/=_Eq_TTImp'(V40, V41)) end end}, V28, V34)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Name'(V44, V45)) end end}, V29, V35)) of 1 -> case ('dn--un--==_Eq_TTImp'(V30, V36)) of 1 -> ('dn--un--==_Eq_TTImp'(V31, V37)); 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.ILet', V46, V47, V48, V49, V50, V51, V52} -> case V1 of {'Language.Reflection.TTImp.ILet', V53, V54, V55, V56, V57, V58, V59} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V48, V55)) of 1 -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V49, V56)) of 1 -> case ('dn--un--==_Eq_TTImp'(V50, V57)) of 1 -> case ('dn--un--==_Eq_TTImp'(V51, V58)) of 1 -> ('dn--un--==_Eq_TTImp'(V52, V59)); 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.ICase', V60, V61, V62, V63} -> case V1 of {'Language.Reflection.TTImp.ICase', V64, V65, V66, V67} -> case ('dn--un--==_Eq_TTImp'(V61, V65)) of 1 -> case ('dn--un--==_Eq_TTImp'(V62, V66)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V68) -> fun (V69) -> ('dn--un--==_Eq_Clause'({'Prelude.EqOrd.MkEq', fun (V70) -> fun (V71) -> ('dn--un--==_Eq_TTImp'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('dn--un--/=_Eq_TTImp'(V72, V73)) end end}, V68, V69)) end end, fun (V74) -> fun (V75) -> ('dn--un--/=_Eq_Clause'({'Prelude.EqOrd.MkEq', fun (V76) -> fun (V77) -> ('dn--un--==_Eq_TTImp'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('dn--un--/=_Eq_TTImp'(V78, V79)) end end}, V74, V75)) end end}, V63, V67)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.ILocal', V80, V81, V82} -> case V1 of {'Language.Reflection.TTImp.ILocal', V83, V84, V85} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V86) -> fun (V87) -> ('dn--un--==_Eq_Decl'({'Prelude.EqOrd.MkEq', fun (V88) -> fun (V89) -> ('dn--un--==_Eq_TTImp'(V88, V89)) end end, fun (V90) -> fun (V91) -> ('dn--un--/=_Eq_TTImp'(V90, V91)) end end}, V86, V87)) end end, fun (V92) -> fun (V93) -> ('dn--un--/=_Eq_Decl'({'Prelude.EqOrd.MkEq', fun (V94) -> fun (V95) -> ('dn--un--==_Eq_TTImp'(V94, V95)) end end, fun (V96) -> fun (V97) -> ('dn--un--/=_Eq_TTImp'(V96, V97)) end end}, V92, V93)) end end}, V81, V84)) of 1 -> ('dn--un--==_Eq_TTImp'(V82, V85)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IUpdate', V98, V99, V100} -> case V1 of {'Language.Reflection.TTImp.IUpdate', V101, V102, V103} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V104) -> fun (V105) -> ('dn--un--==_Eq_IFieldUpdate'({'Prelude.EqOrd.MkEq', fun (V106) -> fun (V107) -> ('dn--un--==_Eq_TTImp'(V106, V107)) end end, fun (V108) -> fun (V109) -> ('dn--un--/=_Eq_TTImp'(V108, V109)) end end}, V104, V105)) end end, fun (V110) -> fun (V111) -> ('dn--un--/=_Eq_IFieldUpdate'({'Prelude.EqOrd.MkEq', fun (V112) -> fun (V113) -> ('dn--un--==_Eq_TTImp'(V112, V113)) end end, fun (V114) -> fun (V115) -> ('dn--un--/=_Eq_TTImp'(V114, V115)) end end}, V110, V111)) end end}, V99, V102)) of 1 -> ('dn--un--==_Eq_TTImp'(V100, V103)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IApp', V116, V117, V118} -> case V1 of {'Language.Reflection.TTImp.IApp', V119, V120, V121} -> case ('dn--un--==_Eq_TTImp'(V117, V120)) of 1 -> ('dn--un--==_Eq_TTImp'(V118, V121)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.INamedApp', V122, V123, V124, V125} -> case V1 of {'Language.Reflection.TTImp.INamedApp', V126, V127, V128, V129} -> case ('dn--un--==_Eq_TTImp'(V123, V127)) of 1 -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V124, V128)) of 1 -> ('dn--un--==_Eq_TTImp'(V125, V129)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IAutoApp', V130, V131, V132} -> case V1 of {'Language.Reflection.TTImp.IAutoApp', V133, V134, V135} -> case ('dn--un--==_Eq_TTImp'(V131, V134)) of 1 -> ('dn--un--==_Eq_TTImp'(V132, V135)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IWithApp', V136, V137, V138} -> case V1 of {'Language.Reflection.TTImp.IWithApp', V139, V140, V141} -> case ('dn--un--==_Eq_TTImp'(V137, V140)) of 1 -> ('dn--un--==_Eq_TTImp'(V138, V141)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.ISearch', V142, V143} -> case V1 of {'Language.Reflection.TTImp.ISearch', V144, V145} -> case (V143 =:= V145) of 'false' -> 0; _ -> 1 end; _ -> 0 end; {'Language.Reflection.TTImp.IAlternative', V146, V147, V148} -> case V1 of {'Language.Reflection.TTImp.IAlternative', V149, V150, V151} -> case ('dn--un--==_Eq_AltType'({'Prelude.EqOrd.MkEq', fun (V152) -> fun (V153) -> ('dn--un--==_Eq_TTImp'(V152, V153)) end end, fun (V154) -> fun (V155) -> ('dn--un--/=_Eq_TTImp'(V154, V155)) end end}, V147, V150)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V156) -> fun (V157) -> ('dn--un--==_Eq_TTImp'(V156, V157)) end end, fun (V158) -> fun (V159) -> ('dn--un--/=_Eq_TTImp'(V158, V159)) end end}, V148, V151)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IRewrite', V160, V161, V162} -> case V1 of {'Language.Reflection.TTImp.IRewrite', V163, V164, V165} -> case ('dn--un--==_Eq_TTImp'(V161, V164)) of 1 -> ('dn--un--==_Eq_TTImp'(V162, V165)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IBindHere', V166, V167, V168} -> case V1 of {'Language.Reflection.TTImp.IBindHere', V169, V170, V171} -> case ('dn--un--==_Eq_BindMode'(V167, V170)) of 1 -> ('dn--un--==_Eq_TTImp'(V168, V171)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IBindVar', V172, V173} -> case V1 of {'Language.Reflection.TTImp.IBindVar', V174, V175} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V173, V175)); _ -> 0 end; {'Language.Reflection.TTImp.IAs', V176, V177, V178, V179, V180} -> case V1 of {'Language.Reflection.TTImp.IAs', V181, V182, V183, V184, V185} -> case ('dn--un--==_Eq_UseSide'(V178, V183)) of 1 -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V179, V184)) of 1 -> ('dn--un--==_Eq_TTImp'(V180, V185)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IMustUnify', V186, V187, V188} -> case V1 of {'Language.Reflection.TTImp.IMustUnify', V189, V190, V191} -> case ('dn--un--==_Eq_DotReason'(V187, V190)) of 1 -> ('dn--un--==_Eq_TTImp'(V188, V191)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IDelayed', V192, V193, V194} -> case V1 of {'Language.Reflection.TTImp.IDelayed', V195, V196, V197} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_LazyReason'(V193, V196)) of 1 -> ('dn--un--==_Eq_TTImp'(V194, V197)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IDelay', V198, V199} -> case V1 of {'Language.Reflection.TTImp.IDelay', V200, V201} -> ('dn--un--==_Eq_TTImp'(V199, V201)); _ -> 0 end; {'Language.Reflection.TTImp.IForce', V202, V203} -> case V1 of {'Language.Reflection.TTImp.IForce', V204, V205} -> ('dn--un--==_Eq_TTImp'(V203, V205)); _ -> 0 end; {'Language.Reflection.TTImp.IQuote', V206, V207} -> case V1 of {'Language.Reflection.TTImp.IQuote', V208, V209} -> ('dn--un--==_Eq_TTImp'(V207, V209)); _ -> 0 end; {'Language.Reflection.TTImp.IQuoteName', V210, V211} -> case V1 of {'Language.Reflection.TTImp.IQuoteName', V212, V213} -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V211, V213)); _ -> 0 end; {'Language.Reflection.TTImp.IQuoteDecl', V214, V215} -> case V1 of {'Language.Reflection.TTImp.IQuoteDecl', V216, V217} -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V218) -> fun (V219) -> ('dn--un--==_Eq_Decl'({'Prelude.EqOrd.MkEq', fun (V220) -> fun (V221) -> ('dn--un--==_Eq_TTImp'(V220, V221)) end end, fun (V222) -> fun (V223) -> ('dn--un--/=_Eq_TTImp'(V222, V223)) end end}, V218, V219)) end end, fun (V224) -> fun (V225) -> ('dn--un--/=_Eq_Decl'({'Prelude.EqOrd.MkEq', fun (V226) -> fun (V227) -> ('dn--un--==_Eq_TTImp'(V226, V227)) end end, fun (V228) -> fun (V229) -> ('dn--un--/=_Eq_TTImp'(V228, V229)) end end}, V224, V225)) end end}, V215, V217)); _ -> 0 end; {'Language.Reflection.TTImp.IUnquote', V230, V231} -> case V1 of {'Language.Reflection.TTImp.IUnquote', V232, V233} -> ('dn--un--==_Eq_TTImp'(V231, V233)); _ -> 0 end; {'Language.Reflection.TTImp.IPrimVal', V234, V235} -> case V1 of {'Language.Reflection.TTImp.IPrimVal', V236, V237} -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Constant'(V235, V237)); _ -> 0 end; {'Language.Reflection.TTImp.IType', V238} -> case V1 of {'Language.Reflection.TTImp.IType', V239} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.IHole', V240, V241} -> case V1 of {'Language.Reflection.TTImp.IHole', V242, V243} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V241, V243)); _ -> 0 end; {'Language.Reflection.TTImp.Implicit', V244, V245} -> case V1 of {'Language.Reflection.TTImp.Implicit', V246, V247} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V245, V247)); _ -> 0 end; {'Language.Reflection.TTImp.IWithUnambigNames', V248, V249, V250} -> case V1 of {'Language.Reflection.TTImp.IWithUnambigNames', V251, V252, V253} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V254) -> fun (V255) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V254, V255)) end end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Name'(V256, V257)) end end}, ((begin (V263 = fun (V259) -> fun (V260) -> fun (V261) -> fun (V262) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V261, V262)) end end end end), fun (V264) -> fun (V265) -> ((((V263('erased'))('erased'))(V264))(V265)) end end end(fun (V258) -> ('Idris.Idris2.Builtin':'un--snd'(V258)) end))(V249)), ((begin (V271 = fun (V267) -> fun (V268) -> fun (V269) -> fun (V270) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V269, V270)) end end end end), fun (V272) -> fun (V273) -> ((((V271('erased'))('erased'))(V272))(V273)) end end end(fun (V266) -> ('Idris.Idris2.Builtin':'un--snd'(V266)) end))(V252)))) of 1 -> ('dn--un--==_Eq_TTImp'(V250, V253)); 0 -> 0 end; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_Record'(V0, V1, V2) -> case V1 of {'Language.Reflection.TTImp.MkRecord', V3, V4, V5, V6, V7, V8} -> case V2 of {'Language.Reflection.TTImp.MkRecord', V9, V10, V11, V12, V13, V14} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V4, V10)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Name'(V19, V20)) end end}, {'Prelude.EqOrd.MkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V23) -> fun (V24) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Count'(V25, V26)) end end}, {'Prelude.EqOrd.MkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V29) -> fun (V30) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V29, V30)) end end, fun (V31) -> fun (V32) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V31, V32)) end end}, V0, V27, V28)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V35, V36)) end end, fun (V37) -> fun (V38) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V37, V38)) end end}, V0, V33, V34)) end end}, V21, V22)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V41) -> fun (V42) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Count'(V43, V44)) end end}, {'Prelude.EqOrd.MkEq', fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V47) -> fun (V48) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V47, V48)) end end, fun (V49) -> fun (V50) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V49, V50)) end end}, V0, V45, V46)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V53) -> fun (V54) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V53, V54)) end end, fun (V55) -> fun (V56) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V55, V56)) end end}, V0, V51, V52)) end end}, V39, V40)) end end}, V15, V16)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V59) -> fun (V60) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Name'(V61, V62)) end end}, {'Prelude.EqOrd.MkEq', fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V65) -> fun (V66) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Count'(V67, V68)) end end}, {'Prelude.EqOrd.MkEq', fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V71) -> fun (V72) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V71, V72)) end end, fun (V73) -> fun (V74) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V73, V74)) end end}, V0, V69, V70)) end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V77) -> fun (V78) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V77, V78)) end end, fun (V79) -> fun (V80) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V79, V80)) end end}, V0, V75, V76)) end end}, V63, V64)) end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V83) -> fun (V84) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Count'(V85, V86)) end end}, {'Prelude.EqOrd.MkEq', fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V89) -> fun (V90) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V89, V90)) end end, fun (V91) -> fun (V92) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V91, V92)) end end}, V0, V87, V88)) end end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V95) -> fun (V96) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V95, V96)) end end, fun (V97) -> fun (V98) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V97, V98)) end end}, V0, V93, V94)) end end}, V81, V82)) end end}, V57, V58)) end end}, V5, V11)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V99) -> fun (V100) -> ('dn--un--==_Eq_DataOpt'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('dn--un--/=_Eq_DataOpt'(V101, V102)) end end}, V6, V12)) of 1 -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V7, V13)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V103) -> fun (V104) -> ('dn--un--==_Eq_IField'(V0, V103, V104)) end end, fun (V105) -> fun (V106) -> ('dn--un--/=_Eq_IField'(V0, V105, V106)) end end}, V8, V14)); 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; 0 -> 0 end end end.
'dn--un--==_Eq_ITy'(V0, V1, V2) -> case V1 of {'Language.Reflection.TTImp.MkTy', V3, V4, V5, V6} -> case V2 of {'Language.Reflection.TTImp.MkTy', V7, V8, V9, V10} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V5, V9)) of 1 -> case V0 of {'Prelude.EqOrd.MkEq', V11, V12} -> ((V11(V6))(V10)) end; 0 -> 0 end end end.
'dn--un--==_Eq_IFieldUpdate'(V0, V1, V2) -> case V1 of {'Language.Reflection.TTImp.ISetField', V3, V4} -> case V2 of {'Language.Reflection.TTImp.ISetField', V5, V6} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V9, V10)) end end}, V3, V5)) of 1 -> case V0 of {'Prelude.EqOrd.MkEq', V11, V12} -> ((V11(V4))(V6)) end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.ISetFieldApp', V13, V14} -> case V2 of {'Language.Reflection.TTImp.ISetFieldApp', V15, V16} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V19, V20)) end end}, V13, V15)) of 1 -> case V0 of {'Prelude.EqOrd.MkEq', V21, V22} -> ((V21(V14))(V16)) end; 0 -> 0 end; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_IField'(V0, V1, V2) -> case V1 of {'Language.Reflection.TTImp.MkIField', V3, V4, V5, V6, V7} -> case V2 of {'Language.Reflection.TTImp.MkIField', V8, V9, V10, V11, V12} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V4, V9)) of 1 -> case ('dn--un--==_Eq_(PiInfo $a)'(V0, V5, V10)) of 1 -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V6, V11)) of 1 -> case V0 of {'Prelude.EqOrd.MkEq', V13, V14} -> ((V13(V7))(V12)) end; 0 -> 0 end; 0 -> 0 end; 0 -> 0 end end end.
'dn--un--==_Eq_FnOpt'(V0, V1, V2) -> case V1 of {'Language.Reflection.TTImp.Inline'} -> case V2 of {'Language.Reflection.TTImp.Inline'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.NoInline'} -> case V2 of {'Language.Reflection.TTImp.NoInline'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.Deprecate'} -> case V2 of {'Language.Reflection.TTImp.Deprecate'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.TCInline'} -> case V2 of {'Language.Reflection.TTImp.TCInline'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.Hint', V3} -> case V2 of {'Language.Reflection.TTImp.Hint', V4} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V3, V4)); _ -> 0 end; {'Language.Reflection.TTImp.GlobalHint', V5} -> case V2 of {'Language.Reflection.TTImp.GlobalHint', V6} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V5, V6)); _ -> 0 end; {'Language.Reflection.TTImp.ExternFn'} -> case V2 of {'Language.Reflection.TTImp.ExternFn'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.ForeignFn', V7} -> case V2 of {'Language.Reflection.TTImp.ForeignFn', V8} -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'(V0, V7, V8)); _ -> 0 end; {'Language.Reflection.TTImp.ForeignExport', V9} -> case V2 of {'Language.Reflection.TTImp.ForeignExport', V10} -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'(V0, V9, V10)); _ -> 0 end; {'Language.Reflection.TTImp.Invertible'} -> case V2 of {'Language.Reflection.TTImp.Invertible'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.Totality', V11} -> case V2 of {'Language.Reflection.TTImp.Totality', V12} -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_TotalReq'(V11, V12)); _ -> 0 end; {'Language.Reflection.TTImp.Macro'} -> case V2 of {'Language.Reflection.TTImp.Macro'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.SpecArgs', V13} -> case V2 of {'Language.Reflection.TTImp.SpecArgs', V14} -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Name'(V17, V18)) end end}, V13, V14)); _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_DotReason'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; 3 -> case V1 of 3 -> 1; _ -> 0 end; 4 -> case V1 of 4 -> 1; _ -> 0 end; 5 -> case V1 of 5 -> 1; _ -> 0 end; 6 -> case V1 of 6 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_Decl'(V0, V1, V2) -> case V1 of {'Language.Reflection.TTImp.IClaim', V3, V4, V5, V6, V7} -> case V2 of {'Language.Reflection.TTImp.IClaim', V8, V9, V10, V11, V12} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V4, V9)) of 1 -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Visibility'(V5, V10)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('dn--un--==_Eq_FnOpt'(V0, V13, V14)) end end, fun (V15) -> fun (V16) -> ('dn--un--/=_Eq_FnOpt'(V0, V15, V16)) end end}, V6, V11)) of 1 -> ('dn--un--==_Eq_ITy'(V0, V7, V12)); 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IData', V17, V18, V19, V20} -> case V2 of {'Language.Reflection.TTImp.IData', V21, V22, V23, V24} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Visibility'(V18, V22)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_TotalReq'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_TotalReq'(V27, V28)) end end}, V19, V23)) of 1 -> ('dn--un--==_Eq_Data'(V0, V20, V24)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IDef', V29, V30, V31} -> case V2 of {'Language.Reflection.TTImp.IDef', V32, V33, V34} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V30, V33)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> ('dn--un--==_Eq_Clause'(V0, V35, V36)) end end, fun (V37) -> fun (V38) -> ('dn--un--/=_Eq_Clause'(V0, V37, V38)) end end}, V31, V34)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IParameters', V39, V40, V41} -> case V2 of {'Language.Reflection.TTImp.IParameters', V42, V43, V44} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V47) -> fun (V48) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Name'(V49, V50)) end end}, {'Prelude.EqOrd.MkEq', fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V53) -> fun (V54) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V53, V54)) end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Count'(V55, V56)) end end}, {'Prelude.EqOrd.MkEq', fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V59) -> fun (V60) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V59, V60)) end end, fun (V61) -> fun (V62) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V61, V62)) end end}, V0, V57, V58)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V65) -> fun (V66) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V65, V66)) end end, fun (V67) -> fun (V68) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V67, V68)) end end}, V0, V63, V64)) end end}, V51, V52)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V71) -> fun (V72) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Count'(V73, V74)) end end}, {'Prelude.EqOrd.MkEq', fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V77) -> fun (V78) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V77, V78)) end end, fun (V79) -> fun (V80) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V79, V80)) end end}, V0, V75, V76)) end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V83) -> fun (V84) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V83, V84)) end end, fun (V85) -> fun (V86) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V85, V86)) end end}, V0, V81, V82)) end end}, V69, V70)) end end}, V45, V46)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V89) -> fun (V90) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V89, V90)) end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Name'(V91, V92)) end end}, {'Prelude.EqOrd.MkEq', fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V95) -> fun (V96) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V95, V96)) end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Count'(V97, V98)) end end}, {'Prelude.EqOrd.MkEq', fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V101) -> fun (V102) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V101, V102)) end end, fun (V103) -> fun (V104) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V103, V104)) end end}, V0, V99, V100)) end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V107) -> fun (V108) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V107, V108)) end end, fun (V109) -> fun (V110) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V109, V110)) end end}, V0, V105, V106)) end end}, V93, V94)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V113) -> fun (V114) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V113, V114)) end end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Count'(V115, V116)) end end}, {'Prelude.EqOrd.MkEq', fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V119) -> fun (V120) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V119, V120)) end end, fun (V121) -> fun (V122) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V121, V122)) end end}, V0, V117, V118)) end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V125) -> fun (V126) -> ('dn--un--==_Eq_(PiInfo $a)'(V0, V125, V126)) end end, fun (V127) -> fun (V128) -> ('dn--un--/=_Eq_(PiInfo $a)'(V0, V127, V128)) end end}, V0, V123, V124)) end end}, V111, V112)) end end}, V87, V88)) end end}, V40, V43)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V129) -> fun (V130) -> ('dn--un--==_Eq_Decl'(V0, V129, V130)) end end, fun (V131) -> fun (V132) -> ('dn--un--/=_Eq_Decl'(V0, V131, V132)) end end}, V41, V44)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IRecord', V133, V134, V135, V136, V137} -> case V2 of {'Language.Reflection.TTImp.IRecord', V138, V139, V140, V141, V142} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V143, V144)) end end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V145, V146)) end end}, V134, V139)) of 1 -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Visibility'(V135, V140)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V147) -> fun (V148) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_TotalReq'(V147, V148)) end end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_TotalReq'(V149, V150)) end end}, V136, V141)) of 1 -> ('dn--un--==_Eq_Record'(V0, V137, V142)); 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.INamespace', V151, V152, V153} -> case V2 of {'Language.Reflection.TTImp.INamespace', V154, V155, V156} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Namespace'(V152, V155)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V157) -> fun (V158) -> ('dn--un--==_Eq_Decl'(V0, V157, V158)) end end, fun (V159) -> fun (V160) -> ('dn--un--/=_Eq_Decl'(V0, V159, V160)) end end}, V153, V156)); 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.ITransform', V161, V162, V163, V164} -> case V2 of {'Language.Reflection.TTImp.ITransform', V165, V166, V167, V168} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V162, V166)) of 1 -> case case V0 of {'Prelude.EqOrd.MkEq', V169, V170} -> ((V169(V163))(V167)) end of 1 -> case V0 of {'Prelude.EqOrd.MkEq', V171, V172} -> ((V171(V164))(V168)) end; 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.IRunElabDecl', V173, V174} -> case V2 of {'Language.Reflection.TTImp.IRunElabDecl', V175, V176} -> case V0 of {'Prelude.EqOrd.MkEq', V177, V178} -> ((V177(V174))(V176)) end; _ -> 0 end; {'Language.Reflection.TTImp.ILog', V179} -> case V2 of {'Language.Reflection.TTImp.ILog', V180} -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V181) -> fun (V182) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V183) -> fun (V184) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V185) -> fun (V186) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V185, V186)) end end, fun (V187) -> fun (V188) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V187, V188)) end end}, V183, V184)) end end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V191) -> fun (V192) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V191, V192)) end end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V193, V194)) end end}, V189, V190)) end end}, {'Prelude.EqOrd.MkEq', fun (V195) -> fun (V196) -> case (V195 =:= V196) of 'false' -> 0; _ -> 1 end end end, fun (V197) -> fun (V198) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V197, V198)) end end}, V181, V182)) end end, fun (V199) -> fun (V200) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V201) -> fun (V202) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V203) -> fun (V204) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V203, V204)) end end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V205, V206)) end end}, V201, V202)) end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V209) -> fun (V210) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V209, V210)) end end, fun (V211) -> fun (V212) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V211, V212)) end end}, V207, V208)) end end}, {'Prelude.EqOrd.MkEq', fun (V213) -> fun (V214) -> case (V213 =:= V214) of 'false' -> 0; _ -> 1 end end end, fun (V215) -> fun (V216) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V215, V216)) end end}, V199, V200)) end end}, V179, V180)); _ -> 0 end; {'Language.Reflection.TTImp.IBuiltin', V217, V218, V219} -> case V2 of {'Language.Reflection.TTImp.IBuiltin', V220, V221, V222} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_BuiltinType'(V218, V221)) of 1 -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V219, V222)); 0 -> 0 end; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_DataOpt'(V0, V1) -> case V0 of {'Language.Reflection.TTImp.SearchBy', V2} -> case V1 of {'Language.Reflection.TTImp.SearchBy', V3} -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Name'(V6, V7)) end end}, V2, V3)); _ -> 0 end; {'Language.Reflection.TTImp.NoHints'} -> case V1 of {'Language.Reflection.TTImp.NoHints'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.UniqueSearch'} -> case V1 of {'Language.Reflection.TTImp.UniqueSearch'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.External'} -> case V1 of {'Language.Reflection.TTImp.External'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.NoNewtype'} -> case V1 of {'Language.Reflection.TTImp.NoNewtype'} -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_Data'(V0, V1, V2) -> case V1 of {'Language.Reflection.TTImp.MkData', V3, V4, V5, V6, V7} -> case V2 of {'Language.Reflection.TTImp.MkData', V8, V9, V10, V11, V12} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V4, V9)) of 1 -> case case V0 of {'Prelude.EqOrd.MkEq', V13, V14} -> ((V13(V5))(V10)) end of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('dn--un--==_Eq_DataOpt'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('dn--un--/=_Eq_DataOpt'(V17, V18)) end end}, V6, V11)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('dn--un--==_Eq_ITy'(V0, V19, V20)) end end, fun (V21) -> fun (V22) -> ('dn--un--/=_Eq_ITy'(V0, V21, V22)) end end}, V7, V12)); 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.MkLater', V23, V24, V25} -> case V2 of {'Language.Reflection.TTImp.MkLater', V26, V27, V28} -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V24, V27)) of 1 -> case V0 of {'Prelude.EqOrd.MkEq', V29, V30} -> ((V29(V25))(V28)) end; 0 -> 0 end; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_Clause'(V0, V1, V2) -> case V1 of {'Language.Reflection.TTImp.PatClause', V3, V4, V5} -> case V2 of {'Language.Reflection.TTImp.PatClause', V6, V7, V8} -> case case V0 of {'Prelude.EqOrd.MkEq', V9, V10} -> ((V9(V4))(V7)) end of 1 -> case V0 of {'Prelude.EqOrd.MkEq', V11, V12} -> ((V11(V5))(V8)) end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.WithClause', V13, V14, V15, V16, V17, V18, V19} -> case V2 of {'Language.Reflection.TTImp.WithClause', V20, V21, V22, V23, V24, V25, V26} -> case case V0 of {'Prelude.EqOrd.MkEq', V27, V28} -> ((V27(V14))(V21)) end of 1 -> case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V15, V22)) of 1 -> case case V0 of {'Prelude.EqOrd.MkEq', V29, V30} -> ((V29(V16))(V23)) end of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Name'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--/=_Eq_Name'(V33, V34)) end end}, V17, V24)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> 1 end end, fun (V37) -> fun (V38) -> 0 end end}, V18, V25)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V39) -> fun (V40) -> ('dn--un--==_Eq_Clause'(V0, V39, V40)) end end, fun (V41) -> fun (V42) -> ('dn--un--/=_Eq_Clause'(V0, V41, V42)) end end}, V19, V26)); 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Language.Reflection.TTImp.ImpossibleClause', V43, V44} -> case V2 of {'Language.Reflection.TTImp.ImpossibleClause', V45, V46} -> case V0 of {'Prelude.EqOrd.MkEq', V47, V48} -> ((V47(V44))(V46)) end; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_BindMode'(V0, V1) -> case V0 of {'Language.Reflection.TTImp.PI', V2} -> case V1 of {'Language.Reflection.TTImp.PI', V3} -> ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V2, V3)); _ -> 0 end; {'Language.Reflection.TTImp.PATTERN'} -> case V1 of {'Language.Reflection.TTImp.PATTERN'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.NONE'} -> case V1 of {'Language.Reflection.TTImp.NONE'} -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_AltType'(V0, V1, V2) -> case V1 of {'Language.Reflection.TTImp.FirstSuccess'} -> case V2 of {'Language.Reflection.TTImp.FirstSuccess'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.Unique'} -> case V2 of {'Language.Reflection.TTImp.Unique'} -> 1; _ -> 0 end; {'Language.Reflection.TTImp.UniqueDefault', V3} -> case V2 of {'Language.Reflection.TTImp.UniqueDefault', V4} -> case V0 of {'Prelude.EqOrd.MkEq', V5, V6} -> ((V5(V3))(V4)) end; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_(PiInfo $a)'(V0, V1, V2) -> case V1 of {'Language.Reflection.TT.ImplicitArg'} -> case V2 of {'Language.Reflection.TT.ImplicitArg'} -> 1; _ -> 0 end; {'Language.Reflection.TT.ExplicitArg'} -> case V2 of {'Language.Reflection.TT.ExplicitArg'} -> 1; _ -> 0 end; {'Language.Reflection.TT.AutoImplicit'} -> case V2 of {'Language.Reflection.TT.AutoImplicit'} -> 1; _ -> 0 end; {'Language.Reflection.TT.DefImplicit', V3} -> case V2 of {'Language.Reflection.TT.DefImplicit', V4} -> case V0 of {'Prelude.EqOrd.MkEq', V5, V6} -> ((V5(V3))(V4)) end; _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_WithFlag'(V0, V1) -> 0.
'dn--un--/=_Eq_UseSide'(V0, V1) -> case ('dn--un--==_Eq_UseSide'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_TTImp'(V0, V1) -> case ('dn--un--==_Eq_TTImp'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_Record'(V0, V1, V2) -> case ('dn--un--==_Eq_Record'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_ITy'(V0, V1, V2) -> case ('dn--un--==_Eq_ITy'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_IFieldUpdate'(V0, V1, V2) -> case ('dn--un--==_Eq_IFieldUpdate'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_IField'(V0, V1, V2) -> case ('dn--un--==_Eq_IField'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_FnOpt'(V0, V1, V2) -> case ('dn--un--==_Eq_FnOpt'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_DotReason'(V0, V1) -> case ('dn--un--==_Eq_DotReason'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_Decl'(V0, V1, V2) -> case ('dn--un--==_Eq_Decl'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_DataOpt'(V0, V1) -> case ('dn--un--==_Eq_DataOpt'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_Data'(V0, V1, V2) -> case ('dn--un--==_Eq_Data'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_Clause'(V0, V1, V2) -> case ('dn--un--==_Eq_Clause'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_BindMode'(V0, V1) -> case ('dn--un--==_Eq_BindMode'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_AltType'(V0, V1, V2) -> case ('dn--un--==_Eq_AltType'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_(PiInfo $a)'(V0, V1, V2) -> case ('dn--un--==_Eq_(PiInfo $a)'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'un--unArg'(V0) -> case V0 of {'Language.Reflection.TTImp.Arg', V1, V2} -> V2; {'Language.Reflection.TTImp.NamedArg', V3, V4, V5} -> V5; {'Language.Reflection.TTImp.AutoArg', V6, V7} -> V7 end.
'un--showIApps'(V0, V1) -> case V0 of {'Language.Reflection.TTImp.IApp', V2, V3, V4} -> ('un--showIApps'(V3, [('dn--un--showPrec_Show_TTImp'({'Prelude.Show.App'}, V4)) | V1])); {'Language.Reflection.TTImp.IVar', V5, V6} -> case V1 of [E0 | E1] -> (fun (V7, V8) -> case V8 of [E2 | E3] -> (fun (V9, V10) -> case V10 of [] -> case ('Idris.Idris2.Language.Reflection.TT':'un--isOp'(V6)) of 1 -> ('Idris.Idris2.Data.String':'un--unwords'([V7 | [('Idris.Idris2.Language.Reflection.TT':'un--showPrefix'(0, V6)) | [V9 | []]]])); 0 -> ('Idris.Idris2.Data.String':'un--unwords'([('Idris.Idris2.Language.Reflection.TT':'un--showPrefix'(1, V6)) | [V7 | [V9 | []]]])) end; _ -> ('Idris.Idris2.Data.String':'un--unwords'([('dn--un--show_Show_TTImp'(V0)) | V1])) end end(E2, E3)); _ -> ('Idris.Idris2.Data.String':'un--unwords'([('dn--un--show_Show_TTImp'(V0)) | V1])) end end(E0, E1)); _ -> ('Idris.Idris2.Data.String':'un--unwords'([('dn--un--show_Show_TTImp'(V0)) | V1])) end; _ -> ('Idris.Idris2.Data.String':'un--unwords'([('dn--un--show_Show_TTImp'(V0)) | V1])) end.
'un--showClause'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.PatClause', V2, V3, V4} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V5) -> fun (V6) -> <<V5/binary, V6/binary>> end end, <<""/utf8>>}, fun (V7) -> V7 end, [('dn--un--show_Show_TTImp'(V3)) | [<<" "/utf8>> | [('nested--6741-9914--in--un--showSep'(V4, V3, V2, V0, V0)) | [<<" "/utf8>> | [('dn--un--show_Show_TTImp'(V4)) | []]]]]])); {'Language.Reflection.TTImp.WithClause', V8, V9, V10, V11, V12, V13, V14} -> ('Idris.Idris2.Data.String':'un--unwords'([('dn--un--show_Show_TTImp'(V9)) | [<<"with"/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'un--showCount'(V10, (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V15) -> V15 end end, fun () -> fun (V16) -> fun (V17) -> <<V17/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V18) -> fun (V19) -> <<V18/binary, V19/binary>> end end, <<""/utf8>>}, fun (V20) -> V20 end, [<<" proof "/utf8>> | [('Idris.Idris2.Language.Reflection.TT':'dn--un--show_Show_Name'(V16)) | []]]))/binary>> end end end, V12))(('Idris.Idris2.Prelude.Show':'un--showParens'(1, ('dn--un--show_Show_TTImp'(V11)))))))) | [<<"{"/utf8>> | [('Idris.Idris2.Data.String':'un--joinBy'(<<"; "/utf8>>, ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('un--showClause'(V0, V21)) end))(V14)))) | [<<"}"/utf8>> | []]]]]]])); {'Language.Reflection.TTImp.ImpossibleClause', V29, V30} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V31) -> fun (V32) -> <<V31/binary, V32/binary>> end end, <<""/utf8>>}, fun (V33) -> V33 end, [('dn--un--show_Show_TTImp'(V30)) | [<<" impossible"/utf8>> | []]])) end.
'un--mapTopmostFC'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.IVar', V2, V3} -> {'Language.Reflection.TTImp.IVar', (V0(V2)), V3}; {'Language.Reflection.TTImp.IPi', V4, V5, V6, V7, V8, V9} -> {'Language.Reflection.TTImp.IPi', (V0(V4)), V5, V6, V7, V8, V9}; {'Language.Reflection.TTImp.ILam', V10, V11, V12, V13, V14, V15} -> {'Language.Reflection.TTImp.ILam', (V0(V10)), V11, V12, V13, V14, V15}; {'Language.Reflection.TTImp.ILet', V16, V17, V18, V19, V20, V21, V22} -> {'Language.Reflection.TTImp.ILet', (V0(V16)), V17, V18, V19, V20, V21, V22}; {'Language.Reflection.TTImp.ICase', V23, V24, V25, V26} -> {'Language.Reflection.TTImp.ICase', (V0(V23)), V24, V25, V26}; {'Language.Reflection.TTImp.ILocal', V27, V28, V29} -> {'Language.Reflection.TTImp.ILocal', (V0(V27)), V28, V29}; {'Language.Reflection.TTImp.IUpdate', V30, V31, V32} -> {'Language.Reflection.TTImp.IUpdate', (V0(V30)), V31, V32}; {'Language.Reflection.TTImp.IApp', V33, V34, V35} -> {'Language.Reflection.TTImp.IApp', (V0(V33)), V34, V35}; {'Language.Reflection.TTImp.INamedApp', V36, V37, V38, V39} -> {'Language.Reflection.TTImp.INamedApp', (V0(V36)), V37, V38, V39}; {'Language.Reflection.TTImp.IAutoApp', V40, V41, V42} -> {'Language.Reflection.TTImp.IAutoApp', (V0(V40)), V41, V42}; {'Language.Reflection.TTImp.IWithApp', V43, V44, V45} -> {'Language.Reflection.TTImp.IWithApp', (V0(V43)), V44, V45}; {'Language.Reflection.TTImp.ISearch', V46, V47} -> {'Language.Reflection.TTImp.ISearch', (V0(V46)), V47}; {'Language.Reflection.TTImp.IAlternative', V48, V49, V50} -> {'Language.Reflection.TTImp.IAlternative', (V0(V48)), V49, V50}; {'Language.Reflection.TTImp.IRewrite', V51, V52, V53} -> {'Language.Reflection.TTImp.IRewrite', (V0(V51)), V52, V53}; {'Language.Reflection.TTImp.IBindHere', V54, V55, V56} -> {'Language.Reflection.TTImp.IBindHere', (V0(V54)), V55, V56}; {'Language.Reflection.TTImp.IBindVar', V57, V58} -> {'Language.Reflection.TTImp.IBindVar', (V0(V57)), V58}; {'Language.Reflection.TTImp.IAs', V59, V60, V61, V62, V63} -> {'Language.Reflection.TTImp.IAs', (V0(V59)), V60, V61, V62, V63}; {'Language.Reflection.TTImp.IMustUnify', V64, V65, V66} -> {'Language.Reflection.TTImp.IMustUnify', (V0(V64)), V65, V66}; {'Language.Reflection.TTImp.IDelayed', V67, V68, V69} -> {'Language.Reflection.TTImp.IDelayed', (V0(V67)), V68, V69}; {'Language.Reflection.TTImp.IDelay', V70, V71} -> {'Language.Reflection.TTImp.IDelay', (V0(V70)), V71}; {'Language.Reflection.TTImp.IForce', V72, V73} -> {'Language.Reflection.TTImp.IForce', (V0(V72)), V73}; {'Language.Reflection.TTImp.IQuote', V74, V75} -> {'Language.Reflection.TTImp.IQuote', (V0(V74)), V75}; {'Language.Reflection.TTImp.IQuoteName', V76, V77} -> {'Language.Reflection.TTImp.IQuoteName', (V0(V76)), V77}; {'Language.Reflection.TTImp.IQuoteDecl', V78, V79} -> {'Language.Reflection.TTImp.IQuoteDecl', (V0(V78)), V79}; {'Language.Reflection.TTImp.IUnquote', V80, V81} -> {'Language.Reflection.TTImp.IUnquote', (V0(V80)), V81}; {'Language.Reflection.TTImp.IPrimVal', V82, V83} -> {'Language.Reflection.TTImp.IPrimVal', (V0(V82)), V83}; {'Language.Reflection.TTImp.IType', V84} -> {'Language.Reflection.TTImp.IType', (V0(V84))}; {'Language.Reflection.TTImp.IHole', V85, V86} -> {'Language.Reflection.TTImp.IHole', (V0(V85)), V86}; {'Language.Reflection.TTImp.Implicit', V87, V88} -> {'Language.Reflection.TTImp.Implicit', (V0(V87)), V88}; {'Language.Reflection.TTImp.IWithUnambigNames', V89, V90, V91} -> {'Language.Reflection.TTImp.IWithUnambigNames', (V0(V89)), V90, V91} end.
'un--mapTTImp'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.IVar', V2, V3} -> (V0(V1)); {'Language.Reflection.TTImp.IPi', V4, V5, V6, V7, V8, V9} -> (V0({'Language.Reflection.TTImp.IPi', V4, V5, ('un--mapPiInfo'(V0, V6)), V7, ('un--mapTTImp'(V0, V8)), ('un--mapTTImp'(V0, V9))})); {'Language.Reflection.TTImp.ILam', V10, V11, V12, V13, V14, V15} -> (V0({'Language.Reflection.TTImp.ILam', V10, V11, ('un--mapPiInfo'(V0, V12)), V13, ('un--mapTTImp'(V0, V14)), ('un--mapTTImp'(V0, V15))})); {'Language.Reflection.TTImp.ILet', V16, V17, V18, V19, V20, V21, V22} -> (V0({'Language.Reflection.TTImp.ILet', V16, V17, V18, V19, ('un--mapTTImp'(V0, V20)), ('un--mapTTImp'(V0, V21)), ('un--mapTTImp'(V0, V22))})); {'Language.Reflection.TTImp.ICase', V23, V24, V25, V26} -> (V0({'Language.Reflection.TTImp.ICase', V23, ('un--mapTTImp'(V0, V24)), ('un--mapTTImp'(V0, V25)), ((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V27) -> ('un--mapClause'(V0, V27)) end))(V26))})); {'Language.Reflection.TTImp.ILocal', V35, V36, V37} -> (V0({'Language.Reflection.TTImp.ILocal', V35, ((begin (V43 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V41, V42)) end end end end), fun (V44) -> fun (V45) -> ((((V43('erased'))('erased'))(V44))(V45)) end end end(fun (V38) -> ('un--mapDecl'(V0, V38)) end))(V36)), ('un--mapTTImp'(V0, V37))})); {'Language.Reflection.TTImp.IUpdate', V46, V47, V48} -> (V0({'Language.Reflection.TTImp.IUpdate', V46, ((begin (V54 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V52, V53)) end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V49) -> ('un--mapIFieldUpdate'(V0, V49)) end))(V47)), ('un--mapTTImp'(V0, V48))})); {'Language.Reflection.TTImp.IApp', V57, V58, V59} -> (V0({'Language.Reflection.TTImp.IApp', V57, ('un--mapTTImp'(V0, V58)), ('un--mapTTImp'(V0, V59))})); {'Language.Reflection.TTImp.IAutoApp', V60, V61, V62} -> (V0({'Language.Reflection.TTImp.IAutoApp', V60, ('un--mapTTImp'(V0, V61)), ('un--mapTTImp'(V0, V62))})); {'Language.Reflection.TTImp.INamedApp', V63, V64, V65, V66} -> (V0({'Language.Reflection.TTImp.INamedApp', V63, ('un--mapTTImp'(V0, V64)), V65, ('un--mapTTImp'(V0, V66))})); {'Language.Reflection.TTImp.IWithApp', V67, V68, V69} -> (V0({'Language.Reflection.TTImp.IWithApp', V67, ('un--mapTTImp'(V0, V68)), ('un--mapTTImp'(V0, V69))})); {'Language.Reflection.TTImp.ISearch', V70, V71} -> (V0({'Language.Reflection.TTImp.ISearch', V70, V71})); {'Language.Reflection.TTImp.IAlternative', V72, V73, V74} -> (V0({'Language.Reflection.TTImp.IAlternative', V72, ('un--mapAltType'(V0, V73)), ((begin (V80 = fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V78, V79)) end end end end), fun (V81) -> fun (V82) -> ((((V80('erased'))('erased'))(V81))(V82)) end end end(fun (V75) -> ('un--mapTTImp'(V0, V75)) end))(V74))})); {'Language.Reflection.TTImp.IRewrite', V83, V84, V85} -> (V0({'Language.Reflection.TTImp.IRewrite', V83, ('un--mapTTImp'(V0, V84)), ('un--mapTTImp'(V0, V85))})); {'Language.Reflection.TTImp.IBindHere', V86, V87, V88} -> (V0({'Language.Reflection.TTImp.IBindHere', V86, V87, ('un--mapTTImp'(V0, V88))})); {'Language.Reflection.TTImp.IBindVar', V89, V90} -> (V0({'Language.Reflection.TTImp.IBindVar', V89, V90})); {'Language.Reflection.TTImp.IAs', V91, V92, V93, V94, V95} -> (V0({'Language.Reflection.TTImp.IAs', V91, V92, V93, V94, ('un--mapTTImp'(V0, V95))})); {'Language.Reflection.TTImp.IMustUnify', V96, V97, V98} -> (V0({'Language.Reflection.TTImp.IMustUnify', V96, V97, ('un--mapTTImp'(V0, V98))})); {'Language.Reflection.TTImp.IDelayed', V99, V100, V101} -> (V0({'Language.Reflection.TTImp.IDelayed', V99, V100, ('un--mapTTImp'(V0, V101))})); {'Language.Reflection.TTImp.IDelay', V102, V103} -> (V0({'Language.Reflection.TTImp.IDelay', V102, ('un--mapTTImp'(V0, V103))})); {'Language.Reflection.TTImp.IForce', V104, V105} -> (V0({'Language.Reflection.TTImp.IForce', V104, ('un--mapTTImp'(V0, V105))})); {'Language.Reflection.TTImp.IQuote', V106, V107} -> (V0({'Language.Reflection.TTImp.IQuote', V106, ('un--mapTTImp'(V0, V107))})); {'Language.Reflection.TTImp.IQuoteName', V108, V109} -> (V0({'Language.Reflection.TTImp.IQuoteName', V108, V109})); {'Language.Reflection.TTImp.IQuoteDecl', V110, V111} -> (V0({'Language.Reflection.TTImp.IQuoteDecl', V110, ((begin (V117 = fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V115, V116)) end end end end), fun (V118) -> fun (V119) -> ((((V117('erased'))('erased'))(V118))(V119)) end end end(fun (V112) -> ('un--mapDecl'(V0, V112)) end))(V111))})); {'Language.Reflection.TTImp.IUnquote', V120, V121} -> (V0({'Language.Reflection.TTImp.IUnquote', V120, ('un--mapTTImp'(V0, V121))})); {'Language.Reflection.TTImp.IPrimVal', V122, V123} -> (V0({'Language.Reflection.TTImp.IPrimVal', V122, V123})); {'Language.Reflection.TTImp.IType', V124} -> (V0({'Language.Reflection.TTImp.IType', V124})); {'Language.Reflection.TTImp.IHole', V125, V126} -> (V0({'Language.Reflection.TTImp.IHole', V125, V126})); {'Language.Reflection.TTImp.Implicit', V127, V128} -> (V0({'Language.Reflection.TTImp.Implicit', V127, V128})); {'Language.Reflection.TTImp.IWithUnambigNames', V129, V130, V131} -> (V0({'Language.Reflection.TTImp.IWithUnambigNames', V129, V130, ('un--mapTTImp'(V0, V131))})) end.
'un--mapRecord'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.MkRecord', V2, V3, V4, V5, V6, V7} -> {'Language.Reflection.TTImp.MkRecord', V2, V3, ((begin (V33 = fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V31, V32)) end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end((begin (V26 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> case V23 of {'Builtin.MkPair', V24, V25} -> {'Builtin.MkPair', V24, (V22(V25))} end end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end((begin (V17 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> case V14 of {'Builtin.MkPair', V15, V16} -> {'Builtin.MkPair', V15, (V13(V16))} end end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Builtin.MkPair', ('un--mapPiInfo'(V0, V9)), ('un--mapTTImp'(V0, V10))} end end))))))(V4)), V5, V6, ((begin (V41 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V39, V40)) end end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end(fun (V36) -> ('un--mapIField'(V0, V36)) end))(V7))} end.
'un--mapPiInfo'(V0, V1) -> case V1 of {'Language.Reflection.TT.ImplicitArg'} -> {'Language.Reflection.TT.ImplicitArg'}; {'Language.Reflection.TT.ExplicitArg'} -> {'Language.Reflection.TT.ExplicitArg'}; {'Language.Reflection.TT.AutoImplicit'} -> {'Language.Reflection.TT.AutoImplicit'}; {'Language.Reflection.TT.DefImplicit', V2} -> {'Language.Reflection.TT.DefImplicit', ('un--mapTTImp'(V0, V2))} end.
'un--mapMTTImp'(V0, V1, V2) -> case V2 of {'Language.Reflection.TTImp.IVar', V3, V4} -> (V1(V2)); {'Language.Reflection.TTImp.IPi', V5, V6, V7, V8, V9, V10} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V11) -> fun (V12) -> case V0 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> ((((V14('erased'))('erased'))(V11))(V12)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V16, V17, V18} -> case V16 of {'Prelude.Interfaces.MkApplicative', V19, V20, V21} -> ((((V21('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> ((((V27('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V28, V29, V30} -> case V28 of {'Prelude.Interfaces.MkApplicative', V31, V32, V33} -> ((((V33('erased'))('erased'))(((begin (V50 = case V0 of {'Prelude.Interfaces.MkMonad', V44, V45, V46} -> case V44 of {'Prelude.Interfaces.MkApplicative', V47, V48, V49} -> V47 end end), fun (V51) -> fun (V52) -> ((((V50('erased'))('erased'))(V51))(V52)) end end end(fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> {'Language.Reflection.TTImp.IPi', V5, V6, V40, V41, V42, V43} end end end end))(('un--mapMPiInfo'(V0, V1, V7))))))(case V0 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((V38('erased'))(V8)) end end)) end end))(('un--mapMTTImp'(V0, V1, V9)))) end end))(('un--mapMTTImp'(V0, V1, V10)))) end end)); {'Language.Reflection.TTImp.ILam', V53, V54, V55, V56, V57, V58} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V59) -> fun (V60) -> case V0 of {'Prelude.Interfaces.MkMonad', V61, V62, V63} -> ((((V62('erased'))('erased'))(V59))(V60)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V64, V65, V66} -> case V64 of {'Prelude.Interfaces.MkApplicative', V67, V68, V69} -> ((((V69('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V70, V71, V72} -> case V70 of {'Prelude.Interfaces.MkApplicative', V73, V74, V75} -> ((((V75('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V76, V77, V78} -> case V76 of {'Prelude.Interfaces.MkApplicative', V79, V80, V81} -> ((((V81('erased'))('erased'))(((begin (V98 = case V0 of {'Prelude.Interfaces.MkMonad', V92, V93, V94} -> case V92 of {'Prelude.Interfaces.MkApplicative', V95, V96, V97} -> V95 end end), fun (V99) -> fun (V100) -> ((((V98('erased'))('erased'))(V99))(V100)) end end end(fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> {'Language.Reflection.TTImp.ILam', V53, V54, V88, V89, V90, V91} end end end end))(('un--mapMPiInfo'(V0, V1, V55))))))(case V0 of {'Prelude.Interfaces.MkMonad', V82, V83, V84} -> case V82 of {'Prelude.Interfaces.MkApplicative', V85, V86, V87} -> ((V86('erased'))(V56)) end end)) end end))(('un--mapMTTImp'(V0, V1, V57)))) end end))(('un--mapMTTImp'(V0, V1, V58)))) end end)); {'Language.Reflection.TTImp.ILet', V101, V102, V103, V104, V105, V106, V107} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V108) -> fun (V109) -> case V0 of {'Prelude.Interfaces.MkMonad', V110, V111, V112} -> ((((V111('erased'))('erased'))(V108))(V109)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V113, V114, V115} -> case V113 of {'Prelude.Interfaces.MkApplicative', V116, V117, V118} -> ((((V118('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V119, V120, V121} -> case V119 of {'Prelude.Interfaces.MkApplicative', V122, V123, V124} -> ((((V124('erased'))('erased'))(((begin (V134 = case V0 of {'Prelude.Interfaces.MkMonad', V128, V129, V130} -> case V128 of {'Prelude.Interfaces.MkApplicative', V131, V132, V133} -> V131 end end), fun (V135) -> fun (V136) -> ((((V134('erased'))('erased'))(V135))(V136)) end end end(fun (V125) -> fun (V126) -> fun (V127) -> {'Language.Reflection.TTImp.ILet', V101, V102, V103, V104, V125, V126, V127} end end end))(('un--mapMTTImp'(V0, V1, V105))))))(('un--mapMTTImp'(V0, V1, V106)))) end end))(('un--mapMTTImp'(V0, V1, V107)))) end end)); {'Language.Reflection.TTImp.ICase', V137, V138, V139, V140} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V141) -> fun (V142) -> case V0 of {'Prelude.Interfaces.MkMonad', V143, V144, V145} -> ((((V144('erased'))('erased'))(V141))(V142)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V146, V147, V148} -> case V146 of {'Prelude.Interfaces.MkApplicative', V149, V150, V151} -> ((((V151('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V156, V157, V158} -> case V156 of {'Prelude.Interfaces.MkApplicative', V159, V160, V161} -> ((((V161('erased'))('erased'))(((begin (V171 = case V0 of {'Prelude.Interfaces.MkMonad', V165, V166, V167} -> case V165 of {'Prelude.Interfaces.MkApplicative', V168, V169, V170} -> V168 end end), fun (V172) -> fun (V173) -> ((((V171('erased'))('erased'))(V172))(V173)) end end end(fun (V162) -> fun (V163) -> fun (V164) -> {'Language.Reflection.TTImp.ICase', V137, V162, V163, V164} end end end))(('un--mapMTTImp'(V0, V1, V138))))))(('un--mapMTTImp'(V0, V1, V139)))) end end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V152, V153, V154} -> V152 end, fun (V155) -> ('un--mapMClause'(V0, V1, V155)) end, V140)))) end end)); {'Language.Reflection.TTImp.ILocal', V174, V175, V176} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V177) -> fun (V178) -> case V0 of {'Prelude.Interfaces.MkMonad', V179, V180, V181} -> ((((V180('erased'))('erased'))(V177))(V178)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V182, V183, V184} -> case V182 of {'Prelude.Interfaces.MkApplicative', V185, V186, V187} -> ((((V187('erased'))('erased'))(((begin (V200 = case V0 of {'Prelude.Interfaces.MkMonad', V194, V195, V196} -> case V194 of {'Prelude.Interfaces.MkApplicative', V197, V198, V199} -> V197 end end), fun (V201) -> fun (V202) -> ((((V200('erased'))('erased'))(V201))(V202)) end end end(fun (V192) -> fun (V193) -> {'Language.Reflection.TTImp.ILocal', V174, V192, V193} end end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V188, V189, V190} -> V188 end, fun (V191) -> ('un--mapMDecl'(V0, V1, V191)) end, V175))))))(('un--mapMTTImp'(V0, V1, V176)))) end end)); {'Language.Reflection.TTImp.IUpdate', V203, V204, V205} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V206) -> fun (V207) -> case V0 of {'Prelude.Interfaces.MkMonad', V208, V209, V210} -> ((((V209('erased'))('erased'))(V206))(V207)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V211, V212, V213} -> case V211 of {'Prelude.Interfaces.MkApplicative', V214, V215, V216} -> ((((V216('erased'))('erased'))(((begin (V229 = case V0 of {'Prelude.Interfaces.MkMonad', V223, V224, V225} -> case V223 of {'Prelude.Interfaces.MkApplicative', V226, V227, V228} -> V226 end end), fun (V230) -> fun (V231) -> ((((V229('erased'))('erased'))(V230))(V231)) end end end(fun (V221) -> fun (V222) -> {'Language.Reflection.TTImp.IUpdate', V203, V221, V222} end end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V217, V218, V219} -> V217 end, fun (V220) -> ('un--mapMIFieldUpdate'(V0, V1, V220)) end, V204))))))(('un--mapMTTImp'(V0, V1, V205)))) end end)); {'Language.Reflection.TTImp.IApp', V232, V233, V234} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V235) -> fun (V236) -> case V0 of {'Prelude.Interfaces.MkMonad', V237, V238, V239} -> ((((V238('erased'))('erased'))(V235))(V236)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V240, V241, V242} -> case V240 of {'Prelude.Interfaces.MkApplicative', V243, V244, V245} -> ((((V245('erased'))('erased'))(((begin (V254 = case V0 of {'Prelude.Interfaces.MkMonad', V248, V249, V250} -> case V248 of {'Prelude.Interfaces.MkApplicative', V251, V252, V253} -> V251 end end), fun (V255) -> fun (V256) -> ((((V254('erased'))('erased'))(V255))(V256)) end end end(fun (V246) -> fun (V247) -> {'Language.Reflection.TTImp.IApp', V232, V246, V247} end end))(('un--mapMTTImp'(V0, V1, V233))))))(('un--mapMTTImp'(V0, V1, V234)))) end end)); {'Language.Reflection.TTImp.IAutoApp', V257, V258, V259} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V260) -> fun (V261) -> case V0 of {'Prelude.Interfaces.MkMonad', V262, V263, V264} -> ((((V263('erased'))('erased'))(V260))(V261)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V265, V266, V267} -> case V265 of {'Prelude.Interfaces.MkApplicative', V268, V269, V270} -> ((((V270('erased'))('erased'))(((begin (V279 = case V0 of {'Prelude.Interfaces.MkMonad', V273, V274, V275} -> case V273 of {'Prelude.Interfaces.MkApplicative', V276, V277, V278} -> V276 end end), fun (V280) -> fun (V281) -> ((((V279('erased'))('erased'))(V280))(V281)) end end end(fun (V271) -> fun (V272) -> {'Language.Reflection.TTImp.IAutoApp', V257, V271, V272} end end))(('un--mapMTTImp'(V0, V1, V258))))))(('un--mapMTTImp'(V0, V1, V259)))) end end)); {'Language.Reflection.TTImp.INamedApp', V282, V283, V284, V285} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V286) -> fun (V287) -> case V0 of {'Prelude.Interfaces.MkMonad', V288, V289, V290} -> ((((V289('erased'))('erased'))(V286))(V287)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V291, V292, V293} -> case V291 of {'Prelude.Interfaces.MkApplicative', V294, V295, V296} -> ((((V296('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V297, V298, V299} -> case V297 of {'Prelude.Interfaces.MkApplicative', V300, V301, V302} -> ((((V302('erased'))('erased'))(((begin (V318 = case V0 of {'Prelude.Interfaces.MkMonad', V312, V313, V314} -> case V312 of {'Prelude.Interfaces.MkApplicative', V315, V316, V317} -> V315 end end), fun (V319) -> fun (V320) -> ((((V318('erased'))('erased'))(V319))(V320)) end end end(fun (V309) -> fun (V310) -> fun (V311) -> {'Language.Reflection.TTImp.INamedApp', V282, V309, V310, V311} end end end))(('un--mapMTTImp'(V0, V1, V283))))))(case V0 of {'Prelude.Interfaces.MkMonad', V303, V304, V305} -> case V303 of {'Prelude.Interfaces.MkApplicative', V306, V307, V308} -> ((V307('erased'))(V284)) end end)) end end))(('un--mapMTTImp'(V0, V1, V285)))) end end)); {'Language.Reflection.TTImp.IWithApp', V321, V322, V323} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V324) -> fun (V325) -> case V0 of {'Prelude.Interfaces.MkMonad', V326, V327, V328} -> ((((V327('erased'))('erased'))(V324))(V325)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V329, V330, V331} -> case V329 of {'Prelude.Interfaces.MkApplicative', V332, V333, V334} -> ((((V334('erased'))('erased'))(((begin (V343 = case V0 of {'Prelude.Interfaces.MkMonad', V337, V338, V339} -> case V337 of {'Prelude.Interfaces.MkApplicative', V340, V341, V342} -> V340 end end), fun (V344) -> fun (V345) -> ((((V343('erased'))('erased'))(V344))(V345)) end end end(fun (V335) -> fun (V336) -> {'Language.Reflection.TTImp.IWithApp', V321, V335, V336} end end))(('un--mapMTTImp'(V0, V1, V322))))))(('un--mapMTTImp'(V0, V1, V323)))) end end)); {'Language.Reflection.TTImp.ISearch', V346, V347} -> (V1({'Language.Reflection.TTImp.ISearch', V346, V347})); {'Language.Reflection.TTImp.IAlternative', V348, V349, V350} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V351) -> fun (V352) -> case V0 of {'Prelude.Interfaces.MkMonad', V353, V354, V355} -> ((((V354('erased'))('erased'))(V351))(V352)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V356, V357, V358} -> case V356 of {'Prelude.Interfaces.MkApplicative', V359, V360, V361} -> ((((V361('erased'))('erased'))(((begin (V374 = case V0 of {'Prelude.Interfaces.MkMonad', V368, V369, V370} -> case V368 of {'Prelude.Interfaces.MkApplicative', V371, V372, V373} -> V371 end end), fun (V375) -> fun (V376) -> ((((V374('erased'))('erased'))(V375))(V376)) end end end(fun (V366) -> fun (V367) -> {'Language.Reflection.TTImp.IAlternative', V348, V366, V367} end end))(('un--mapMAltType'(V0, V1, V349))))))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V362, V363, V364} -> V362 end, fun (V365) -> ('un--mapMTTImp'(V0, V1, V365)) end, V350)))) end end)); {'Language.Reflection.TTImp.IRewrite', V377, V378, V379} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V380) -> fun (V381) -> case V0 of {'Prelude.Interfaces.MkMonad', V382, V383, V384} -> ((((V383('erased'))('erased'))(V380))(V381)) end end end, V1, case V0 of {'Prelude.Interfaces.MkMonad', V385, V386, V387} -> case V385 of {'Prelude.Interfaces.MkApplicative', V388, V389, V390} -> ((((V390('erased'))('erased'))(((begin (V399 = case V0 of {'Prelude.Interfaces.MkMonad', V393, V394, V395} -> case V393 of {'Prelude.Interfaces.MkApplicative', V396, V397, V398} -> V396 end end), fun (V400) -> fun (V401) -> ((((V399('erased'))('erased'))(V400))(V401)) end end end(fun (V391) -> fun (V392) -> {'Language.Reflection.TTImp.IRewrite', V377, V391, V392} end end))(('un--mapMTTImp'(V0, V1, V378))))))(('un--mapMTTImp'(V0, V1, V379)))) end end)); {'Language.Reflection.TTImp.IBindHere', V402, V403, V404} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V405) -> fun (V406) -> case V0 of {'Prelude.Interfaces.MkMonad', V407, V408, V409} -> ((((V408('erased'))('erased'))(V405))(V406)) end end end, V1, ((begin (V417 = case V0 of {'Prelude.Interfaces.MkMonad', V411, V412, V413} -> case V411 of {'Prelude.Interfaces.MkApplicative', V414, V415, V416} -> V414 end end), fun (V418) -> fun (V419) -> ((((V417('erased'))('erased'))(V418))(V419)) end end end(fun (V410) -> {'Language.Reflection.TTImp.IBindHere', V402, V403, V410} end))(('un--mapMTTImp'(V0, V1, V404)))))); {'Language.Reflection.TTImp.IBindVar', V420, V421} -> (V1({'Language.Reflection.TTImp.IBindVar', V420, V421})); {'Language.Reflection.TTImp.IAs', V422, V423, V424, V425, V426} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V427) -> fun (V428) -> case V0 of {'Prelude.Interfaces.MkMonad', V429, V430, V431} -> ((((V430('erased'))('erased'))(V427))(V428)) end end end, V1, ((begin (V439 = case V0 of {'Prelude.Interfaces.MkMonad', V433, V434, V435} -> case V433 of {'Prelude.Interfaces.MkApplicative', V436, V437, V438} -> V436 end end), fun (V440) -> fun (V441) -> ((((V439('erased'))('erased'))(V440))(V441)) end end end(fun (V432) -> {'Language.Reflection.TTImp.IAs', V422, V423, V424, V425, V432} end))(('un--mapMTTImp'(V0, V1, V426)))))); {'Language.Reflection.TTImp.IMustUnify', V442, V443, V444} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V445) -> fun (V446) -> case V0 of {'Prelude.Interfaces.MkMonad', V447, V448, V449} -> ((((V448('erased'))('erased'))(V445))(V446)) end end end, V1, ((begin (V457 = case V0 of {'Prelude.Interfaces.MkMonad', V451, V452, V453} -> case V451 of {'Prelude.Interfaces.MkApplicative', V454, V455, V456} -> V454 end end), fun (V458) -> fun (V459) -> ((((V457('erased'))('erased'))(V458))(V459)) end end end(fun (V450) -> {'Language.Reflection.TTImp.IMustUnify', V442, V443, V450} end))(('un--mapMTTImp'(V0, V1, V444)))))); {'Language.Reflection.TTImp.IDelayed', V460, V461, V462} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V463) -> fun (V464) -> case V0 of {'Prelude.Interfaces.MkMonad', V465, V466, V467} -> ((((V466('erased'))('erased'))(V463))(V464)) end end end, V1, ((begin (V475 = case V0 of {'Prelude.Interfaces.MkMonad', V469, V470, V471} -> case V469 of {'Prelude.Interfaces.MkApplicative', V472, V473, V474} -> V472 end end), fun (V476) -> fun (V477) -> ((((V475('erased'))('erased'))(V476))(V477)) end end end(fun (V468) -> {'Language.Reflection.TTImp.IDelayed', V460, V461, V468} end))(('un--mapMTTImp'(V0, V1, V462)))))); {'Language.Reflection.TTImp.IDelay', V478, V479} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V480) -> fun (V481) -> case V0 of {'Prelude.Interfaces.MkMonad', V482, V483, V484} -> ((((V483('erased'))('erased'))(V480))(V481)) end end end, V1, ((begin (V492 = case V0 of {'Prelude.Interfaces.MkMonad', V486, V487, V488} -> case V486 of {'Prelude.Interfaces.MkApplicative', V489, V490, V491} -> V489 end end), fun (V493) -> fun (V494) -> ((((V492('erased'))('erased'))(V493))(V494)) end end end(fun (V485) -> {'Language.Reflection.TTImp.IDelay', V478, V485} end))(('un--mapMTTImp'(V0, V1, V479)))))); {'Language.Reflection.TTImp.IForce', V495, V496} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V497) -> fun (V498) -> case V0 of {'Prelude.Interfaces.MkMonad', V499, V500, V501} -> ((((V500('erased'))('erased'))(V497))(V498)) end end end, V1, ((begin (V509 = case V0 of {'Prelude.Interfaces.MkMonad', V503, V504, V505} -> case V503 of {'Prelude.Interfaces.MkApplicative', V506, V507, V508} -> V506 end end), fun (V510) -> fun (V511) -> ((((V509('erased'))('erased'))(V510))(V511)) end end end(fun (V502) -> {'Language.Reflection.TTImp.IForce', V495, V502} end))(('un--mapMTTImp'(V0, V1, V496)))))); {'Language.Reflection.TTImp.IQuote', V512, V513} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V514) -> fun (V515) -> case V0 of {'Prelude.Interfaces.MkMonad', V516, V517, V518} -> ((((V517('erased'))('erased'))(V514))(V515)) end end end, V1, ((begin (V526 = case V0 of {'Prelude.Interfaces.MkMonad', V520, V521, V522} -> case V520 of {'Prelude.Interfaces.MkApplicative', V523, V524, V525} -> V523 end end), fun (V527) -> fun (V528) -> ((((V526('erased'))('erased'))(V527))(V528)) end end end(fun (V519) -> {'Language.Reflection.TTImp.IQuote', V512, V519} end))(('un--mapMTTImp'(V0, V1, V513)))))); {'Language.Reflection.TTImp.IQuoteName', V529, V530} -> (V1({'Language.Reflection.TTImp.IQuoteName', V529, V530})); {'Language.Reflection.TTImp.IQuoteDecl', V531, V532} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V533) -> fun (V534) -> case V0 of {'Prelude.Interfaces.MkMonad', V535, V536, V537} -> ((((V536('erased'))('erased'))(V533))(V534)) end end end, V1, ((begin (V549 = case V0 of {'Prelude.Interfaces.MkMonad', V543, V544, V545} -> case V543 of {'Prelude.Interfaces.MkApplicative', V546, V547, V548} -> V546 end end), fun (V550) -> fun (V551) -> ((((V549('erased'))('erased'))(V550))(V551)) end end end(fun (V542) -> {'Language.Reflection.TTImp.IQuoteDecl', V531, V542} end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V538, V539, V540} -> V538 end, fun (V541) -> ('un--mapMDecl'(V0, V1, V541)) end, V532)))))); {'Language.Reflection.TTImp.IUnquote', V552, V553} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V554) -> fun (V555) -> case V0 of {'Prelude.Interfaces.MkMonad', V556, V557, V558} -> ((((V557('erased'))('erased'))(V554))(V555)) end end end, V1, ((begin (V566 = case V0 of {'Prelude.Interfaces.MkMonad', V560, V561, V562} -> case V560 of {'Prelude.Interfaces.MkApplicative', V563, V564, V565} -> V563 end end), fun (V567) -> fun (V568) -> ((((V566('erased'))('erased'))(V567))(V568)) end end end(fun (V559) -> {'Language.Reflection.TTImp.IUnquote', V552, V559} end))(('un--mapMTTImp'(V0, V1, V553)))))); {'Language.Reflection.TTImp.IPrimVal', V569, V570} -> (V1({'Language.Reflection.TTImp.IPrimVal', V569, V570})); {'Language.Reflection.TTImp.IType', V571} -> (V1({'Language.Reflection.TTImp.IType', V571})); {'Language.Reflection.TTImp.IHole', V572, V573} -> (V1({'Language.Reflection.TTImp.IHole', V572, V573})); {'Language.Reflection.TTImp.Implicit', V574, V575} -> (V1({'Language.Reflection.TTImp.Implicit', V574, V575})); {'Language.Reflection.TTImp.IWithUnambigNames', V576, V577, V578} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V579) -> fun (V580) -> case V0 of {'Prelude.Interfaces.MkMonad', V581, V582, V583} -> ((((V582('erased'))('erased'))(V579))(V580)) end end end, V1, ((begin (V591 = case V0 of {'Prelude.Interfaces.MkMonad', V585, V586, V587} -> case V585 of {'Prelude.Interfaces.MkApplicative', V588, V589, V590} -> V588 end end), fun (V592) -> fun (V593) -> ((((V591('erased'))('erased'))(V592))(V593)) end end end(fun (V584) -> {'Language.Reflection.TTImp.IWithUnambigNames', V576, V577, V584} end))(('un--mapMTTImp'(V0, V1, V578)))))) end.
'un--mapMRecord'(V0, V1, V2) -> case V2 of {'Language.Reflection.TTImp.MkRecord', V3, V4, V5, V6, V7, V8} -> case V0 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> ((((V14('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V19, V20, V21} -> case V19 of {'Prelude.Interfaces.MkApplicative', V22, V23, V24} -> ((((V24('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V31, V32, V33} -> case V31 of {'Prelude.Interfaces.MkApplicative', V34, V35, V36} -> ((((V36('erased'))('erased'))(((begin (V135 = case V0 of {'Prelude.Interfaces.MkMonad', V129, V130, V131} -> case V129 of {'Prelude.Interfaces.MkApplicative', V132, V133, V134} -> V132 end end), fun (V136) -> fun (V137) -> ((((V135('erased'))('erased'))(V136))(V137)) end end end(fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> {'Language.Reflection.TTImp.MkRecord', V3, V4, V125, V126, V127, V128} end end end end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V43, V44, V45} -> V43 end, fun (V46) -> case V46 of {'Builtin.MkPair', V47, V48} -> case V0 of {'Prelude.Interfaces.MkMonad', V49, V50, V51} -> case V49 of {'Prelude.Interfaces.MkApplicative', V52, V53, V54} -> ((((V54('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V105, V106, V107} -> case V105 of {'Prelude.Interfaces.MkApplicative', V108, V109, V110} -> ((((V110('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V117, V118, V119} -> case V117 of {'Prelude.Interfaces.MkApplicative', V120, V121, V122} -> ((V121('erased'))(fun (V123) -> fun (V124) -> {'Builtin.MkPair', V123, V124} end end)) end end))(case V0 of {'Prelude.Interfaces.MkMonad', V111, V112, V113} -> case V111 of {'Prelude.Interfaces.MkApplicative', V114, V115, V116} -> ((V115('erased'))(V47)) end end)) end end))(case V48 of {'Builtin.MkPair', V55, V56} -> case V0 of {'Prelude.Interfaces.MkMonad', V57, V58, V59} -> case V57 of {'Prelude.Interfaces.MkApplicative', V60, V61, V62} -> ((((V62('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V85, V86, V87} -> case V85 of {'Prelude.Interfaces.MkApplicative', V88, V89, V90} -> ((((V90('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V97, V98, V99} -> case V97 of {'Prelude.Interfaces.MkApplicative', V100, V101, V102} -> ((V101('erased'))(fun (V103) -> fun (V104) -> {'Builtin.MkPair', V103, V104} end end)) end end))(case V0 of {'Prelude.Interfaces.MkMonad', V91, V92, V93} -> case V91 of {'Prelude.Interfaces.MkApplicative', V94, V95, V96} -> ((V95('erased'))(V55)) end end)) end end))(case V56 of {'Builtin.MkPair', V63, V64} -> case V0 of {'Prelude.Interfaces.MkMonad', V65, V66, V67} -> case V65 of {'Prelude.Interfaces.MkApplicative', V68, V69, V70} -> ((((V70('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V71, V72, V73} -> case V71 of {'Prelude.Interfaces.MkApplicative', V74, V75, V76} -> ((((V76('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V77, V78, V79} -> case V77 of {'Prelude.Interfaces.MkApplicative', V80, V81, V82} -> ((V81('erased'))(fun (V83) -> fun (V84) -> {'Builtin.MkPair', V83, V84} end end)) end end))(('un--mapMPiInfo'(V0, V1, V63)))) end end))(('un--mapMTTImp'(V0, V1, V64)))) end end end)) end end end)) end end end end, V5))))))(case V0 of {'Prelude.Interfaces.MkMonad', V37, V38, V39} -> case V37 of {'Prelude.Interfaces.MkApplicative', V40, V41, V42} -> ((V41('erased'))(V6)) end end)) end end))(case V0 of {'Prelude.Interfaces.MkMonad', V25, V26, V27} -> case V25 of {'Prelude.Interfaces.MkApplicative', V28, V29, V30} -> ((V29('erased'))(V7)) end end)) end end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V15, V16, V17} -> V15 end, fun (V18) -> ('un--mapMIField'(V0, V1, V18)) end, V8)))) end end end.
'un--mapMPiInfo'(V0, V1, V2) -> case V2 of {'Language.Reflection.TT.ImplicitArg'} -> case V0 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> case V3 of {'Prelude.Interfaces.MkApplicative', V6, V7, V8} -> ((V7('erased'))({'Language.Reflection.TT.ImplicitArg'})) end end; {'Language.Reflection.TT.ExplicitArg'} -> case V0 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> ((V13('erased'))({'Language.Reflection.TT.ExplicitArg'})) end end; {'Language.Reflection.TT.AutoImplicit'} -> case V0 of {'Prelude.Interfaces.MkMonad', V15, V16, V17} -> case V15 of {'Prelude.Interfaces.MkApplicative', V18, V19, V20} -> ((V19('erased'))({'Language.Reflection.TT.AutoImplicit'})) end end; {'Language.Reflection.TT.DefImplicit', V21} -> ((begin (V29 = case V0 of {'Prelude.Interfaces.MkMonad', V23, V24, V25} -> case V23 of {'Prelude.Interfaces.MkApplicative', V26, V27, V28} -> V26 end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V22) -> {'Language.Reflection.TT.DefImplicit', V22} end))(('un--mapMTTImp'(V0, V1, V21)))) end.
'un--mapMITy'(V0, V1, V2) -> case V2 of {'Language.Reflection.TTImp.MkTy', V3, V4, V5, V6} -> ((begin (V14 = case V0 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> case V8 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> V11 end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V7) -> {'Language.Reflection.TTImp.MkTy', V3, V4, V5, V7} end))(('un--mapMTTImp'(V0, V1, V6)))) end.
'un--mapMIFieldUpdate'(V0, V1, V2) -> case V2 of {'Language.Reflection.TTImp.ISetField', V3, V4} -> ((begin (V12 = case V0 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> case V6 of {'Prelude.Interfaces.MkApplicative', V9, V10, V11} -> V9 end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V5) -> {'Language.Reflection.TTImp.ISetField', V3, V5} end))(('un--mapMTTImp'(V0, V1, V4)))); {'Language.Reflection.TTImp.ISetFieldApp', V15, V16} -> ((begin (V24 = case V0 of {'Prelude.Interfaces.MkMonad', V18, V19, V20} -> case V18 of {'Prelude.Interfaces.MkApplicative', V21, V22, V23} -> V21 end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V17) -> {'Language.Reflection.TTImp.ISetFieldApp', V15, V17} end))(('un--mapMTTImp'(V0, V1, V16)))) end.
'un--mapMIField'(V0, V1, V2) -> case V2 of {'Language.Reflection.TTImp.MkIField', V3, V4, V5, V6, V7} -> case V0 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> case V8 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> ((((V13('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkApplicative', V17, V18, V19} -> ((((V19('erased'))('erased'))(((begin (V35 = case V0 of {'Prelude.Interfaces.MkMonad', V29, V30, V31} -> case V29 of {'Prelude.Interfaces.MkApplicative', V32, V33, V34} -> V32 end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(fun (V26) -> fun (V27) -> fun (V28) -> {'Language.Reflection.TTImp.MkIField', V3, V4, V26, V27, V28} end end end))(('un--mapMPiInfo'(V0, V1, V5))))))(case V0 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> case V20 of {'Prelude.Interfaces.MkApplicative', V23, V24, V25} -> ((V24('erased'))(V6)) end end)) end end))(('un--mapMTTImp'(V0, V1, V7)))) end end end.
'un--mapMFnOpt'(V0, V1, V2) -> case V2 of {'Language.Reflection.TTImp.Inline'} -> case V0 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> case V3 of {'Prelude.Interfaces.MkApplicative', V6, V7, V8} -> ((V7('erased'))({'Language.Reflection.TTImp.Inline'})) end end; {'Language.Reflection.TTImp.NoInline'} -> case V0 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> ((V13('erased'))({'Language.Reflection.TTImp.NoInline'})) end end; {'Language.Reflection.TTImp.Deprecate'} -> case V0 of {'Prelude.Interfaces.MkMonad', V15, V16, V17} -> case V15 of {'Prelude.Interfaces.MkApplicative', V18, V19, V20} -> ((V19('erased'))({'Language.Reflection.TTImp.Deprecate'})) end end; {'Language.Reflection.TTImp.TCInline'} -> case V0 of {'Prelude.Interfaces.MkMonad', V21, V22, V23} -> case V21 of {'Prelude.Interfaces.MkApplicative', V24, V25, V26} -> ((V25('erased'))({'Language.Reflection.TTImp.TCInline'})) end end; {'Language.Reflection.TTImp.Hint', V27} -> case V0 of {'Prelude.Interfaces.MkMonad', V28, V29, V30} -> case V28 of {'Prelude.Interfaces.MkApplicative', V31, V32, V33} -> ((V32('erased'))({'Language.Reflection.TTImp.Hint', V27})) end end; {'Language.Reflection.TTImp.GlobalHint', V34} -> case V0 of {'Prelude.Interfaces.MkMonad', V35, V36, V37} -> case V35 of {'Prelude.Interfaces.MkApplicative', V38, V39, V40} -> ((V39('erased'))({'Language.Reflection.TTImp.GlobalHint', V34})) end end; {'Language.Reflection.TTImp.ExternFn'} -> case V0 of {'Prelude.Interfaces.MkMonad', V41, V42, V43} -> case V41 of {'Prelude.Interfaces.MkApplicative', V44, V45, V46} -> ((V45('erased'))({'Language.Reflection.TTImp.ExternFn'})) end end; {'Language.Reflection.TTImp.ForeignFn', V47} -> ((begin (V59 = case V0 of {'Prelude.Interfaces.MkMonad', V53, V54, V55} -> case V53 of {'Prelude.Interfaces.MkApplicative', V56, V57, V58} -> V56 end end), fun (V60) -> fun (V61) -> ((((V59('erased'))('erased'))(V60))(V61)) end end end(fun (V52) -> {'Language.Reflection.TTImp.ForeignFn', V52} end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V48, V49, V50} -> V48 end, fun (V51) -> ('un--mapMTTImp'(V0, V1, V51)) end, V47)))); {'Language.Reflection.TTImp.ForeignExport', V62} -> ((begin (V74 = case V0 of {'Prelude.Interfaces.MkMonad', V68, V69, V70} -> case V68 of {'Prelude.Interfaces.MkApplicative', V71, V72, V73} -> V71 end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V67) -> {'Language.Reflection.TTImp.ForeignExport', V67} end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V63, V64, V65} -> V63 end, fun (V66) -> ('un--mapMTTImp'(V0, V1, V66)) end, V62)))); {'Language.Reflection.TTImp.Invertible'} -> case V0 of {'Prelude.Interfaces.MkMonad', V77, V78, V79} -> case V77 of {'Prelude.Interfaces.MkApplicative', V80, V81, V82} -> ((V81('erased'))({'Language.Reflection.TTImp.Invertible'})) end end; {'Language.Reflection.TTImp.Totality', V83} -> case V0 of {'Prelude.Interfaces.MkMonad', V84, V85, V86} -> case V84 of {'Prelude.Interfaces.MkApplicative', V87, V88, V89} -> ((V88('erased'))({'Language.Reflection.TTImp.Totality', V83})) end end; {'Language.Reflection.TTImp.Macro'} -> case V0 of {'Prelude.Interfaces.MkMonad', V90, V91, V92} -> case V90 of {'Prelude.Interfaces.MkApplicative', V93, V94, V95} -> ((V94('erased'))({'Language.Reflection.TTImp.Macro'})) end end; {'Language.Reflection.TTImp.SpecArgs', V96} -> case V0 of {'Prelude.Interfaces.MkMonad', V97, V98, V99} -> case V97 of {'Prelude.Interfaces.MkApplicative', V100, V101, V102} -> ((V101('erased'))({'Language.Reflection.TTImp.SpecArgs', V96})) end end end.
'un--mapMDecl'(V0, V1, V2) -> case V2 of {'Language.Reflection.TTImp.IClaim', V3, V4, V5, V6, V7} -> case V0 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> case V8 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> ((((V13('erased'))('erased'))(((begin (V26 = case V0 of {'Prelude.Interfaces.MkMonad', V20, V21, V22} -> case V20 of {'Prelude.Interfaces.MkApplicative', V23, V24, V25} -> V23 end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V18) -> fun (V19) -> {'Language.Reflection.TTImp.IClaim', V3, V4, V5, V18, V19} end end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> V14 end, fun (V17) -> ('un--mapMFnOpt'(V0, V1, V17)) end, V6))))))(('un--mapMITy'(V0, V1, V7)))) end end; {'Language.Reflection.TTImp.IData', V29, V30, V31, V32} -> ((begin (V40 = case V0 of {'Prelude.Interfaces.MkMonad', V34, V35, V36} -> case V34 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> V37 end end), fun (V41) -> fun (V42) -> ((((V40('erased'))('erased'))(V41))(V42)) end end end(fun (V33) -> {'Language.Reflection.TTImp.IData', V29, V30, V31, V33} end))(('un--mapMData'(V0, V1, V32)))); {'Language.Reflection.TTImp.IDef', V43, V44, V45} -> ((begin (V57 = case V0 of {'Prelude.Interfaces.MkMonad', V51, V52, V53} -> case V51 of {'Prelude.Interfaces.MkApplicative', V54, V55, V56} -> V54 end end), fun (V58) -> fun (V59) -> ((((V57('erased'))('erased'))(V58))(V59)) end end end(fun (V50) -> {'Language.Reflection.TTImp.IDef', V43, V44, V50} end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V46, V47, V48} -> V46 end, fun (V49) -> ('un--mapMClause'(V0, V1, V49)) end, V45)))); {'Language.Reflection.TTImp.IParameters', V60, V61, V62} -> ((begin (V74 = case V0 of {'Prelude.Interfaces.MkMonad', V68, V69, V70} -> case V68 of {'Prelude.Interfaces.MkApplicative', V71, V72, V73} -> V71 end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V67) -> {'Language.Reflection.TTImp.IParameters', V60, V61, V67} end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V63, V64, V65} -> V63 end, fun (V66) -> ('un--mapMDecl'(V0, V1, V66)) end, V62)))); {'Language.Reflection.TTImp.IRecord', V77, V78, V79, V80, V81} -> ((begin (V89 = case V0 of {'Prelude.Interfaces.MkMonad', V83, V84, V85} -> case V83 of {'Prelude.Interfaces.MkApplicative', V86, V87, V88} -> V86 end end), fun (V90) -> fun (V91) -> ((((V89('erased'))('erased'))(V90))(V91)) end end end(fun (V82) -> {'Language.Reflection.TTImp.IRecord', V77, V78, V79, V80, V82} end))(('un--mapMRecord'(V0, V1, V81)))); {'Language.Reflection.TTImp.INamespace', V92, V93, V94} -> ((begin (V106 = case V0 of {'Prelude.Interfaces.MkMonad', V100, V101, V102} -> case V100 of {'Prelude.Interfaces.MkApplicative', V103, V104, V105} -> V103 end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V99) -> {'Language.Reflection.TTImp.INamespace', V92, V93, V99} end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V95, V96, V97} -> V95 end, fun (V98) -> ('un--mapMDecl'(V0, V1, V98)) end, V94)))); {'Language.Reflection.TTImp.ITransform', V109, V110, V111, V112} -> case V0 of {'Prelude.Interfaces.MkMonad', V113, V114, V115} -> case V113 of {'Prelude.Interfaces.MkApplicative', V116, V117, V118} -> ((((V118('erased'))('erased'))(((begin (V127 = case V0 of {'Prelude.Interfaces.MkMonad', V121, V122, V123} -> case V121 of {'Prelude.Interfaces.MkApplicative', V124, V125, V126} -> V124 end end), fun (V128) -> fun (V129) -> ((((V127('erased'))('erased'))(V128))(V129)) end end end(fun (V119) -> fun (V120) -> {'Language.Reflection.TTImp.ITransform', V109, V110, V119, V120} end end))(('un--mapMTTImp'(V0, V1, V111))))))(('un--mapMTTImp'(V0, V1, V112)))) end end; {'Language.Reflection.TTImp.IRunElabDecl', V130, V131} -> ((begin (V139 = case V0 of {'Prelude.Interfaces.MkMonad', V133, V134, V135} -> case V133 of {'Prelude.Interfaces.MkApplicative', V136, V137, V138} -> V136 end end), fun (V140) -> fun (V141) -> ((((V139('erased'))('erased'))(V140))(V141)) end end end(fun (V132) -> {'Language.Reflection.TTImp.IRunElabDecl', V130, V132} end))(('un--mapMTTImp'(V0, V1, V131)))); {'Language.Reflection.TTImp.ILog', V142} -> case V0 of {'Prelude.Interfaces.MkMonad', V143, V144, V145} -> case V143 of {'Prelude.Interfaces.MkApplicative', V146, V147, V148} -> ((V147('erased'))({'Language.Reflection.TTImp.ILog', V142})) end end; {'Language.Reflection.TTImp.IBuiltin', V149, V150, V151} -> case V0 of {'Prelude.Interfaces.MkMonad', V152, V153, V154} -> case V152 of {'Prelude.Interfaces.MkApplicative', V155, V156, V157} -> ((V156('erased'))({'Language.Reflection.TTImp.IBuiltin', V149, V150, V151})) end end end.
'un--mapMData'(V0, V1, V2) -> case V2 of {'Language.Reflection.TTImp.MkData', V3, V4, V5, V6, V7} -> case V0 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> case V8 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> ((((V13('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V18, V19, V20} -> case V18 of {'Prelude.Interfaces.MkApplicative', V21, V22, V23} -> ((((V23('erased'))('erased'))(((begin (V39 = case V0 of {'Prelude.Interfaces.MkMonad', V33, V34, V35} -> case V33 of {'Prelude.Interfaces.MkApplicative', V36, V37, V38} -> V36 end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V30) -> fun (V31) -> fun (V32) -> {'Language.Reflection.TTImp.MkData', V3, V4, V30, V31, V32} end end end))(('un--mapMTTImp'(V0, V1, V5))))))(case V0 of {'Prelude.Interfaces.MkMonad', V24, V25, V26} -> case V24 of {'Prelude.Interfaces.MkApplicative', V27, V28, V29} -> ((V28('erased'))(V6)) end end)) end end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> V14 end, fun (V17) -> ('un--mapMITy'(V0, V1, V17)) end, V7)))) end end; {'Language.Reflection.TTImp.MkLater', V42, V43, V44} -> ((begin (V52 = case V0 of {'Prelude.Interfaces.MkMonad', V46, V47, V48} -> case V46 of {'Prelude.Interfaces.MkApplicative', V49, V50, V51} -> V49 end end), fun (V53) -> fun (V54) -> ((((V52('erased'))('erased'))(V53))(V54)) end end end(fun (V45) -> {'Language.Reflection.TTImp.MkLater', V42, V43, V45} end))(('un--mapMTTImp'(V0, V1, V44)))) end.
'un--mapMClause'(V0, V1, V2) -> case V2 of {'Language.Reflection.TTImp.PatClause', V3, V4, V5} -> case V0 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> case V6 of {'Prelude.Interfaces.MkApplicative', V9, V10, V11} -> ((((V11('erased'))('erased'))(((begin (V20 = case V0 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkApplicative', V17, V18, V19} -> V17 end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V12) -> fun (V13) -> {'Language.Reflection.TTImp.PatClause', V3, V12, V13} end end))(('un--mapMTTImp'(V0, V1, V4))))))(('un--mapMTTImp'(V0, V1, V5)))) end end; {'Language.Reflection.TTImp.WithClause', V23, V24, V25, V26, V27, V28, V29} -> case V0 of {'Prelude.Interfaces.MkMonad', V30, V31, V32} -> case V30 of {'Prelude.Interfaces.MkApplicative', V33, V34, V35} -> ((((V35('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V40, V41, V42} -> case V40 of {'Prelude.Interfaces.MkApplicative', V43, V44, V45} -> ((((V45('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V52, V53, V54} -> case V52 of {'Prelude.Interfaces.MkApplicative', V55, V56, V57} -> ((((V57('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V64, V65, V66} -> case V64 of {'Prelude.Interfaces.MkApplicative', V67, V68, V69} -> ((((V69('erased'))('erased'))(case V0 of {'Prelude.Interfaces.MkMonad', V70, V71, V72} -> case V70 of {'Prelude.Interfaces.MkApplicative', V73, V74, V75} -> ((((V75('erased'))('erased'))(((begin (V94 = case V0 of {'Prelude.Interfaces.MkMonad', V88, V89, V90} -> case V88 of {'Prelude.Interfaces.MkApplicative', V91, V92, V93} -> V91 end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end(fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> {'Language.Reflection.TTImp.WithClause', V23, V82, V83, V84, V85, V86, V87} end end end end end end))(('un--mapMTTImp'(V0, V1, V24))))))(case V0 of {'Prelude.Interfaces.MkMonad', V76, V77, V78} -> case V76 of {'Prelude.Interfaces.MkApplicative', V79, V80, V81} -> ((V80('erased'))(V25)) end end)) end end))(('un--mapMTTImp'(V0, V1, V26)))) end end))(case V0 of {'Prelude.Interfaces.MkMonad', V58, V59, V60} -> case V58 of {'Prelude.Interfaces.MkApplicative', V61, V62, V63} -> ((V62('erased'))(V27)) end end)) end end))(case V0 of {'Prelude.Interfaces.MkMonad', V46, V47, V48} -> case V46 of {'Prelude.Interfaces.MkApplicative', V49, V50, V51} -> ((V50('erased'))(V28)) end end)) end end))(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(case V0 of {'Prelude.Interfaces.MkMonad', V36, V37, V38} -> V36 end, fun (V39) -> ('un--mapMClause'(V0, V1, V39)) end, V29)))) end end; {'Language.Reflection.TTImp.ImpossibleClause', V97, V98} -> ((begin (V106 = case V0 of {'Prelude.Interfaces.MkMonad', V100, V101, V102} -> case V100 of {'Prelude.Interfaces.MkApplicative', V103, V104, V105} -> V103 end end), fun (V107) -> fun (V108) -> ((((V106('erased'))('erased'))(V107))(V108)) end end end(fun (V99) -> {'Language.Reflection.TTImp.ImpossibleClause', V97, V99} end))(('un--mapMTTImp'(V0, V1, V98)))) end.
'un--mapMAltType'(V0, V1, V2) -> case V2 of {'Language.Reflection.TTImp.FirstSuccess'} -> case V0 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> case V3 of {'Prelude.Interfaces.MkApplicative', V6, V7, V8} -> ((V7('erased'))({'Language.Reflection.TTImp.FirstSuccess'})) end end; {'Language.Reflection.TTImp.Unique'} -> case V0 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> case V9 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> ((V13('erased'))({'Language.Reflection.TTImp.Unique'})) end end; {'Language.Reflection.TTImp.UniqueDefault', V15} -> ((begin (V23 = case V0 of {'Prelude.Interfaces.MkMonad', V17, V18, V19} -> case V17 of {'Prelude.Interfaces.MkApplicative', V20, V21, V22} -> V20 end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V16) -> {'Language.Reflection.TTImp.UniqueDefault', V16} end))(('un--mapMTTImp'(V0, V1, V15)))) end.
'un--mapITy'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.MkTy', V2, V3, V4, V5} -> {'Language.Reflection.TTImp.MkTy', V2, V3, V4, ('un--mapTTImp'(V0, V5))} end.
'un--mapIFieldUpdate'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.ISetField', V2, V3} -> {'Language.Reflection.TTImp.ISetField', V2, ('un--mapTTImp'(V0, V3))}; {'Language.Reflection.TTImp.ISetFieldApp', V4, V5} -> {'Language.Reflection.TTImp.ISetFieldApp', V4, ('un--mapTTImp'(V0, V5))} end.
'un--mapIField'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.MkIField', V2, V3, V4, V5, V6} -> {'Language.Reflection.TTImp.MkIField', V2, V3, ('un--mapPiInfo'(V0, V4)), V5, ('un--mapTTImp'(V0, V6))} end.
'un--mapFnOpt'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.Inline'} -> {'Language.Reflection.TTImp.Inline'}; {'Language.Reflection.TTImp.NoInline'} -> {'Language.Reflection.TTImp.NoInline'}; {'Language.Reflection.TTImp.Deprecate'} -> {'Language.Reflection.TTImp.Deprecate'}; {'Language.Reflection.TTImp.TCInline'} -> {'Language.Reflection.TTImp.TCInline'}; {'Language.Reflection.TTImp.Hint', V2} -> {'Language.Reflection.TTImp.Hint', V2}; {'Language.Reflection.TTImp.GlobalHint', V3} -> {'Language.Reflection.TTImp.GlobalHint', V3}; {'Language.Reflection.TTImp.ExternFn'} -> {'Language.Reflection.TTImp.ExternFn'}; {'Language.Reflection.TTImp.ForeignFn', V4} -> {'Language.Reflection.TTImp.ForeignFn', ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('un--mapTTImp'(V0, V5)) end))(V4))}; {'Language.Reflection.TTImp.ForeignExport', V13} -> {'Language.Reflection.TTImp.ForeignExport', ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> ('un--mapTTImp'(V0, V14)) end))(V13))}; {'Language.Reflection.TTImp.Invertible'} -> {'Language.Reflection.TTImp.Invertible'}; {'Language.Reflection.TTImp.Totality', V22} -> {'Language.Reflection.TTImp.Totality', V22}; {'Language.Reflection.TTImp.Macro'} -> {'Language.Reflection.TTImp.Macro'}; {'Language.Reflection.TTImp.SpecArgs', V23} -> {'Language.Reflection.TTImp.SpecArgs', V23} end.
'un--mapDecl'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.IClaim', V2, V3, V4, V5, V6} -> {'Language.Reflection.TTImp.IClaim', V2, V3, V4, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('un--mapFnOpt'(V0, V7)) end))(V5)), ('un--mapITy'(V0, V6))}; {'Language.Reflection.TTImp.IData', V15, V16, V17, V18} -> {'Language.Reflection.TTImp.IData', V15, V16, V17, ('un--mapData'(V0, V18))}; {'Language.Reflection.TTImp.IDef', V19, V20, V21} -> {'Language.Reflection.TTImp.IDef', V19, V20, ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V22) -> ('un--mapClause'(V0, V22)) end))(V21))}; {'Language.Reflection.TTImp.IParameters', V30, V31, V32} -> {'Language.Reflection.TTImp.IParameters', V30, V31, ((begin (V38 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V36, V37)) end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V33) -> ('un--mapDecl'(V0, V33)) end))(V32))}; {'Language.Reflection.TTImp.IRecord', V41, V42, V43, V44, V45} -> {'Language.Reflection.TTImp.IRecord', V41, V42, V43, V44, ('un--mapRecord'(V0, V45))}; {'Language.Reflection.TTImp.INamespace', V46, V47, V48} -> {'Language.Reflection.TTImp.INamespace', V46, V47, ((begin (V54 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V52, V53)) end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V49) -> ('un--mapDecl'(V0, V49)) end))(V48))}; {'Language.Reflection.TTImp.ITransform', V57, V58, V59, V60} -> {'Language.Reflection.TTImp.ITransform', V57, V58, ('un--mapTTImp'(V0, V59)), ('un--mapTTImp'(V0, V60))}; {'Language.Reflection.TTImp.IRunElabDecl', V61, V62} -> {'Language.Reflection.TTImp.IRunElabDecl', V61, ('un--mapTTImp'(V0, V62))}; {'Language.Reflection.TTImp.ILog', V63} -> {'Language.Reflection.TTImp.ILog', V63}; {'Language.Reflection.TTImp.IBuiltin', V64, V65, V66} -> {'Language.Reflection.TTImp.IBuiltin', V64, V65, V66} end.
'un--mapData'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.MkData', V2, V3, V4, V5, V6} -> {'Language.Reflection.TTImp.MkData', V2, V3, ('un--mapTTImp'(V0, V4)), V5, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('un--mapITy'(V0, V7)) end))(V6))}; {'Language.Reflection.TTImp.MkLater', V15, V16, V17} -> {'Language.Reflection.TTImp.MkLater', V15, V16, ('un--mapTTImp'(V0, V17))} end.
'un--mapClause'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.PatClause', V2, V3, V4} -> {'Language.Reflection.TTImp.PatClause', V2, ('un--mapTTImp'(V0, V3)), ('un--mapTTImp'(V0, V4))}; {'Language.Reflection.TTImp.WithClause', V5, V6, V7, V8, V9, V10, V11} -> {'Language.Reflection.TTImp.WithClause', V5, ('un--mapTTImp'(V0, V6)), V7, ('un--mapTTImp'(V0, V8)), V9, V10, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('un--mapClause'(V0, V12)) end))(V11))}; {'Language.Reflection.TTImp.ImpossibleClause', V20, V21} -> {'Language.Reflection.TTImp.ImpossibleClause', V20, ('un--mapTTImp'(V0, V21))} end.
'un--mapAltType'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.FirstSuccess'} -> {'Language.Reflection.TTImp.FirstSuccess'}; {'Language.Reflection.TTImp.Unique'} -> {'Language.Reflection.TTImp.Unique'}; {'Language.Reflection.TTImp.UniqueDefault', V2} -> {'Language.Reflection.TTImp.UniqueDefault', ('un--mapTTImp'(V0, V2))} end.
'un--isExplicit'(V0) -> case V0 of {'Language.Reflection.TTImp.Arg', V1, V2} -> {'Prelude.Types.Just', {'Builtin.MkPair', V1, V2}}; _ -> {'Prelude.Types.Nothing'} end.
'un--iApp'(V0, V1) -> case V1 of {'Language.Reflection.TTImp.Arg', V2, V3} -> {'Language.Reflection.TTImp.IApp', V2, V0, V3}; {'Language.Reflection.TTImp.NamedArg', V4, V5, V6} -> {'Language.Reflection.TTImp.INamedApp', V4, V0, V5, V6}; {'Language.Reflection.TTImp.AutoArg', V7, V8} -> {'Language.Reflection.TTImp.IAutoApp', V7, V0, V8} end.
'un--getFC'(V0) -> case V0 of {'Language.Reflection.TTImp.IVar', V1, V2} -> V1; {'Language.Reflection.TTImp.IPi', V3, V4, V5, V6, V7, V8} -> V3; {'Language.Reflection.TTImp.ILam', V9, V10, V11, V12, V13, V14} -> V9; {'Language.Reflection.TTImp.ILet', V15, V16, V17, V18, V19, V20, V21} -> V15; {'Language.Reflection.TTImp.ICase', V22, V23, V24, V25} -> V22; {'Language.Reflection.TTImp.ILocal', V26, V27, V28} -> V26; {'Language.Reflection.TTImp.IUpdate', V29, V30, V31} -> V29; {'Language.Reflection.TTImp.IApp', V32, V33, V34} -> V32; {'Language.Reflection.TTImp.INamedApp', V35, V36, V37, V38} -> V35; {'Language.Reflection.TTImp.IAutoApp', V39, V40, V41} -> V39; {'Language.Reflection.TTImp.IWithApp', V42, V43, V44} -> V42; {'Language.Reflection.TTImp.ISearch', V45, V46} -> V45; {'Language.Reflection.TTImp.IAlternative', V47, V48, V49} -> V47; {'Language.Reflection.TTImp.IRewrite', V50, V51, V52} -> V50; {'Language.Reflection.TTImp.IBindHere', V53, V54, V55} -> V53; {'Language.Reflection.TTImp.IBindVar', V56, V57} -> V56; {'Language.Reflection.TTImp.IAs', V58, V59, V60, V61, V62} -> V58; {'Language.Reflection.TTImp.IMustUnify', V63, V64, V65} -> V63; {'Language.Reflection.TTImp.IDelayed', V66, V67, V68} -> V66; {'Language.Reflection.TTImp.IDelay', V69, V70} -> V69; {'Language.Reflection.TTImp.IForce', V71, V72} -> V71; {'Language.Reflection.TTImp.IQuote', V73, V74} -> V73; {'Language.Reflection.TTImp.IQuoteName', V75, V76} -> V75; {'Language.Reflection.TTImp.IQuoteDecl', V77, V78} -> V77; {'Language.Reflection.TTImp.IUnquote', V79, V80} -> V79; {'Language.Reflection.TTImp.IPrimVal', V81, V82} -> V81; {'Language.Reflection.TTImp.IType', V83} -> V83; {'Language.Reflection.TTImp.IHole', V84, V85} -> V84; {'Language.Reflection.TTImp.Implicit', V86, V87} -> V86; {'Language.Reflection.TTImp.IWithUnambigNames', V88, V89, V90} -> V88 end.
'un--fromPiInfo'(V0, V1, V2, V3) -> case V1 of {'Language.Reflection.TT.ImplicitArg'} -> case V2 of {'Prelude.Types.Just', V4} -> {'Prelude.Types.Just', {'Language.Reflection.TTImp.NamedArg', V0, V4, V3}}; _ -> {'Prelude.Types.Nothing'} end; {'Language.Reflection.TT.ExplicitArg'} -> {'Prelude.Types.Just', {'Language.Reflection.TTImp.Arg', V0, V3}}; {'Language.Reflection.TT.AutoImplicit'} -> {'Prelude.Types.Just', {'Language.Reflection.TTImp.AutoArg', V0, V3}}; {'Language.Reflection.TT.DefImplicit', V5} -> case V2 of {'Prelude.Types.Just', V6} -> {'Prelude.Types.Just', {'Language.Reflection.TTImp.NamedArg', V0, V6, V3}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--collectPis'(V0, V1, V2, V3, V4) -> case V4 of {'Language.Reflection.TTImp.IPi', V5, V6, V7, V8, V9, V10} -> case case ('Idris.Idris2.Language.Reflection.TT':'dn--un--==_Eq_Count'(V0, V6)) of 1 -> case ('dn--un--==_Eq_(PiInfo $a)'({'Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('dn--un--==_Eq_TTImp'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('dn--un--/=_Eq_TTImp'(V13, V14)) end end}, V1, V7)) of 1 -> ('dn--un--==_Eq_TTImp'(V3, V9)); 0 -> 0 end; 0 -> 0 end of 1 -> ('un--collectPis'(V0, V1, {'Prelude.Basics.:<', V2, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Language.Reflection.TT.UN', {'Language.Reflection.TT.Underscore'}} end, V8))}, V3, V10)); 0 -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V2, [])), V4} end; _ -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V2, [])), V4} end.
'un--apply'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V2) -> fun (V3) -> ('un--iApp'(V2, V3)) end end, V0, V1)).
'un--appView'(V0) -> case V0 of {'Language.Reflection.TTImp.IVar', V1, V2} -> {'Prelude.Types.Just', {'Language.Reflection.TTImp.MkAppView', {'Builtin.MkPair', V1, V2}, {'Prelude.Basics.Lin'}}}; {'Language.Reflection.TTImp.IApp', V3, V4, V5} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--appView'(V4)), fun (V6) -> case V6 of {'Language.Reflection.TTImp.MkAppView', V7, V8} -> {'Prelude.Types.Just', {'Language.Reflection.TTImp.MkAppView', V7, {'Prelude.Basics.:<', V8, {'Language.Reflection.TTImp.Arg', V3, V5}}}} end end)); {'Language.Reflection.TTImp.INamedApp', V9, V10, V11, V12} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--appView'(V10)), fun (V13) -> case V13 of {'Language.Reflection.TTImp.MkAppView', V14, V15} -> {'Prelude.Types.Just', {'Language.Reflection.TTImp.MkAppView', V14, {'Prelude.Basics.:<', V15, {'Language.Reflection.TTImp.NamedArg', V9, V11, V12}}}} end end)); {'Language.Reflection.TTImp.IAutoApp', V16, V17, V18} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--appView'(V17)), fun (V19) -> case V19 of {'Language.Reflection.TTImp.MkAppView', V20, V21} -> {'Prelude.Types.Just', {'Language.Reflection.TTImp.MkAppView', V20, {'Prelude.Basics.:<', V21, {'Language.Reflection.TTImp.AutoArg', V16, V18}}}} end end)); _ -> {'Prelude.Types.Nothing'} end.
