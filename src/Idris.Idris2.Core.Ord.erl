-module('Idris.Idris2.Core.Ord').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8454-6649--in--un--tag'/3,
  'nested--6738-4534--in--un--tag'/3,
  'nested--5512-3462--in--un--tag'/3,
  'nested--5280-3149--in--un--tag'/1,
  'dn--un--min_Ord_PrimType'/2,
  'dn--un--min_Ord_LazyReason'/2,
  'dn--un--min_Ord_Constant'/2,
  'dn--un--min_Ord_(Var $vars)'/2,
  'dn--un--min_Ord_(CExp $vars)'/2,
  'dn--un--min_Ord_(CConstAlt $vars)'/2,
  'dn--un--min_Ord_(CConAlt $vars)'/2,
  'dn--un--max_Ord_PrimType'/2,
  'dn--un--max_Ord_LazyReason'/2,
  'dn--un--max_Ord_Constant'/2,
  'dn--un--max_Ord_(Var $vars)'/2,
  'dn--un--max_Ord_(CExp $vars)'/2,
  'dn--un--max_Ord_(CConstAlt $vars)'/2,
  'dn--un--max_Ord_(CConAlt $vars)'/2,
  'dn--un--compare_Ord_PrimType'/2,
  'dn--un--compare_Ord_LazyReason'/2,
  'dn--un--compare_Ord_Constant'/2,
  'dn--un--compare_Ord_(Var $vars)'/2,
  'dn--un--compare_Ord_(CExp $vars)'/2,
  'dn--un--compare_Ord_(CConstAlt $vars)'/2,
  'dn--un--compare_Ord_(CConAlt $vars)'/2,
  'dn--un--__Impl_Ord_PrimType'/0,
  'dn--un--__Impl_Ord_LazyReason'/0,
  'dn--un--__Impl_Ord_Constant'/0,
  'dn--un--__Impl_Ord_(Var $vars)'/0,
  'dn--un--__Impl_Ord_(CExp $vars)'/0,
  'dn--un--__Impl_Ord_(CConstAlt $vars)'/0,
  'dn--un--__Impl_Ord_(CConAlt $vars)'/0,
  'dn--un--__Impl_Eq_(Var $vars)'/0,
  'dn--un--__Impl_Eq_(CExp $vars)'/0,
  'dn--un--__Impl_Eq_(CConstAlt $vars)'/0,
  'dn--un--__Impl_Eq_(CConAlt $vars)'/0,
  'dn--un-->_Ord_PrimType'/2,
  'dn--un-->_Ord_LazyReason'/2,
  'dn--un-->_Ord_Constant'/2,
  'dn--un-->_Ord_(Var $vars)'/2,
  'dn--un-->_Ord_(CExp $vars)'/2,
  'dn--un-->_Ord_(CConstAlt $vars)'/2,
  'dn--un-->_Ord_(CConAlt $vars)'/2,
  'dn--un-->=_Ord_PrimType'/2,
  'dn--un-->=_Ord_LazyReason'/2,
  'dn--un-->=_Ord_Constant'/2,
  'dn--un-->=_Ord_(Var $vars)'/2,
  'dn--un-->=_Ord_(CExp $vars)'/2,
  'dn--un-->=_Ord_(CConstAlt $vars)'/2,
  'dn--un-->=_Ord_(CConAlt $vars)'/2,
  'dn--un--==_Eq_(Var $vars)'/2,
  'dn--un--==_Eq_(CExp $vars)'/2,
  'dn--un--==_Eq_(CConstAlt $vars)'/2,
  'dn--un--==_Eq_(CConAlt $vars)'/2,
  'dn--un--<_Ord_PrimType'/2,
  'dn--un--<_Ord_LazyReason'/2,
  'dn--un--<_Ord_Constant'/2,
  'dn--un--<_Ord_(Var $vars)'/2,
  'dn--un--<_Ord_(CExp $vars)'/2,
  'dn--un--<_Ord_(CConstAlt $vars)'/2,
  'dn--un--<_Ord_(CConAlt $vars)'/2,
  'dn--un--<=_Ord_PrimType'/2,
  'dn--un--<=_Ord_LazyReason'/2,
  'dn--un--<=_Ord_Constant'/2,
  'dn--un--<=_Ord_(Var $vars)'/2,
  'dn--un--<=_Ord_(CExp $vars)'/2,
  'dn--un--<=_Ord_(CConstAlt $vars)'/2,
  'dn--un--<=_Ord_(CConAlt $vars)'/2,
  'dn--un--/=_Eq_(Var $vars)'/2,
  'dn--un--/=_Eq_(CExp $vars)'/2,
  'dn--un--/=_Eq_(CConstAlt $vars)'/2,
  'dn--un--/=_Eq_(CConAlt $vars)'/2,
  'un--thenCmp'/2,
  'un--primFnEq'/2,
  'un--primFnCmp'/2,
  'un--lrTag'/1
]).
'nested--8454-6649--in--un--tag'(V0, V1, V2) -> case V2 of {'Core.CompileExpr.CLocal', V3, V4} -> 0; {'Core.CompileExpr.CRef', V5, V6} -> 1; {'Core.CompileExpr.CLam', V7, V8, V9} -> 2; {'Core.CompileExpr.CLet', V10, V11, V12, V13, V14} -> 3; {'Core.CompileExpr.CApp', V15, V16, V17} -> 4; {'Core.CompileExpr.CCon', V18, V19, V20, V21, V22} -> 5; {'Core.CompileExpr.COp', V23, V24, V25, V26} -> 6; {'Core.CompileExpr.CExtPrim', V27, V28, V29} -> 7; {'Core.CompileExpr.CForce', V30, V31, V32} -> 8; {'Core.CompileExpr.CDelay', V33, V34, V35} -> 9; {'Core.CompileExpr.CConCase', V36, V37, V38, V39} -> 10; {'Core.CompileExpr.CConstCase', V40, V41, V42, V43} -> 11; {'Core.CompileExpr.CPrimVal', V44, V45} -> 12; {'Core.CompileExpr.CErased', V46} -> 13; {'Core.CompileExpr.CCrash', V47, V48} -> 14 end.
'nested--6738-4534--in--un--tag'(V0, V1, V2) -> case V2 of {'Core.TT.Add', V3} -> 0; {'Core.TT.Sub', V4} -> 1; {'Core.TT.Mul', V5} -> 2; {'Core.TT.Div', V6} -> 3; {'Core.TT.Mod', V7} -> 4; {'Core.TT.Neg', V8} -> 5; {'Core.TT.ShiftL', V9} -> 6; {'Core.TT.ShiftR', V10} -> 7; {'Core.TT.BAnd', V11} -> 8; {'Core.TT.BOr', V12} -> 9; {'Core.TT.BXOr', V13} -> 10; {'Core.TT.LT', V14} -> 11; {'Core.TT.LTE', V15} -> 12; {'Core.TT.EQ', V16} -> 13; {'Core.TT.GTE', V17} -> 14; {'Core.TT.GT', V18} -> 15; {'Core.TT.StrLength'} -> 16; {'Core.TT.StrHead'} -> 17; {'Core.TT.StrTail'} -> 18; {'Core.TT.StrIndex'} -> 19; {'Core.TT.StrCons'} -> 20; {'Core.TT.StrAppend'} -> 21; {'Core.TT.StrReverse'} -> 22; {'Core.TT.StrSubstr'} -> 23; {'Core.TT.DoubleExp'} -> 24; {'Core.TT.DoubleLog'} -> 25; {'Core.TT.DoublePow'} -> 26; {'Core.TT.DoubleSin'} -> 27; {'Core.TT.DoubleCos'} -> 28; {'Core.TT.DoubleTan'} -> 29; {'Core.TT.DoubleASin'} -> 30; {'Core.TT.DoubleACos'} -> 31; {'Core.TT.DoubleATan'} -> 32; {'Core.TT.DoubleSqrt'} -> 33; {'Core.TT.DoubleFloor'} -> 34; {'Core.TT.DoubleCeiling'} -> 35; {'Core.TT.Cast', V19, V20} -> 36; {'Core.TT.BelieveMe'} -> 37; {'Core.TT.Crash'} -> 38 end.
'nested--5512-3462--in--un--tag'(V0, V1, V2) -> case V2 of {'Core.TT.I', V3} -> 0; {'Core.TT.I8', V4} -> 1; {'Core.TT.I16', V5} -> 2; {'Core.TT.I32', V6} -> 3; {'Core.TT.I64', V7} -> 4; {'Core.TT.BI', V8} -> 5; {'Core.TT.B8', V9} -> 6; {'Core.TT.B16', V10} -> 7; {'Core.TT.B32', V11} -> 8; {'Core.TT.B64', V12} -> 9; {'Core.TT.Str', V13} -> 10; {'Core.TT.Ch', V14} -> 11; {'Core.TT.Db', V15} -> 12; {'Core.TT.PrT', V16} -> 13; {'Core.TT.WorldVal'} -> 14 end.
'nested--5280-3149--in--un--tag'(V0) -> case V0 of 0 -> 1; 1 -> 2; 2 -> 3; 3 -> 4; 4 -> 5; 5 -> 6; 6 -> 7; 7 -> 8; 8 -> 9; 9 -> 10; 10 -> 11; 11 -> 12; 12 -> 13; 13 -> 14 end.
'dn--un--min_Ord_PrimType'(V0, V1) -> case ('dn--un--<_Ord_PrimType'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--min_Ord_LazyReason'(V0, V1) -> case ('dn--un--<_Ord_LazyReason'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--min_Ord_Constant'(V0, V1) -> case ('dn--un--<_Ord_Constant'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--min_Ord_(Var $vars)'(V0, V1) -> case ('dn--un--<_Ord_(Var $vars)'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--min_Ord_(CExp $vars)'(V0, V1) -> case ('dn--un--<_Ord_(CExp $vars)'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--min_Ord_(CConstAlt $vars)'(V0, V1) -> case ('dn--un--<_Ord_(CConstAlt $vars)'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--min_Ord_(CConAlt $vars)'(V0, V1) -> case ('dn--un--<_Ord_(CConAlt $vars)'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_PrimType'(V0, V1) -> case ('dn--un-->_Ord_PrimType'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_LazyReason'(V0, V1) -> case ('dn--un-->_Ord_LazyReason'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_Constant'(V0, V1) -> case ('dn--un-->_Ord_Constant'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_(Var $vars)'(V0, V1) -> case ('dn--un-->_Ord_(Var $vars)'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_(CExp $vars)'(V0, V1) -> case ('dn--un-->_Ord_(CExp $vars)'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_(CConstAlt $vars)'(V0, V1) -> case ('dn--un-->_Ord_(CConstAlt $vars)'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_(CConAlt $vars)'(V0, V1) -> case ('dn--un-->_Ord_(CConAlt $vars)'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--compare_Ord_PrimType'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--on'(fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2, V3)) end end, fun (V4) -> ('nested--5280-3149--in--un--tag'(V4)) end, V0, V1)).
'dn--un--compare_Ord_LazyReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--lrTag'(V0)), ('un--lrTag'(V1)))).
'dn--un--compare_Ord_Constant'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2, V3)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.I8', V4} -> case V1 of {'Core.TT.I8', V5} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int8'(V4, V5)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.I16', V6} -> case V1 of {'Core.TT.I16', V7} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int16'(V6, V7)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.I32', V8} -> case V1 of {'Core.TT.I32', V9} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int32'(V8, V9)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.I64', V10} -> case V1 of {'Core.TT.I64', V11} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int64'(V10, V11)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.BI', V12} -> case V1 of {'Core.TT.BI', V13} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V12, V13)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Bits8'(V14, V15)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Bits16'(V16, V17)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Bits32'(V18, V19)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Bits64'(V20, V21)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.Str', V22} -> case V1 of {'Core.TT.Str', V23} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V22, V23)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.Ch', V24} -> case V1 of {'Core.TT.Ch', V25} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Char'(V24, V25)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.Db', V26} -> case V1 of {'Core.TT.Db', V27} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Double'(V26, V27)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.PrT', V28} -> case V1 of {'Core.TT.PrT', V29} -> ('dn--un--compare_Ord_PrimType'(V28, V29)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5512-3462--in--un--tag'(V1, V0, V0)), ('nested--5512-3462--in--un--tag'(V1, V0, V1)))) end.
'dn--un--compare_Ord_(Var $vars)'(V0, V1) -> begin (V2 = V0), begin (V3 = V1), ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V2, V3)) end end.
'dn--un--compare_Ord_(CExp $vars)'(V0, V1) -> case V0 of {'Core.CompileExpr.CLocal', V2, V3} -> case V1 of {'Core.CompileExpr.CLocal', V4, V5} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V2, V4)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CRef', V6, V7} -> case V1 of {'Core.CompileExpr.CRef', V8, V9} -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V7, V9)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CLam', V10, V11, V12} -> case V1 of {'Core.CompileExpr.CLam', V13, V14, V15} -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V11, V14)) of {'Prelude.Types.Just', V16} -> ('dn--un--compare_Ord_(CExp $vars)'(V12, V15)); {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V11, V14)) end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CLet', V17, V18, V19, V20, V21} -> case V1 of {'Core.CompileExpr.CLet', V22, V23, V24, V25, V26} -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V18, V23)) of {'Prelude.Types.Just', V27} -> ('un--thenCmp'(('dn--un--compare_Ord_(CExp $vars)'(V20, V25)), fun () -> ('dn--un--compare_Ord_(CExp $vars)'(V21, V26)) end)); {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V18, V23)) end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CApp', V28, V29, V30} -> case V1 of {'Core.CompileExpr.CApp', V31, V32, V33} -> ('un--thenCmp'(('dn--un--compare_Ord_(CExp $vars)'(V29, V32)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('dn--un--==_Eq_(CExp $vars)'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('dn--un--/=_Eq_(CExp $vars)'(V36, V37)) end end}, fun (V38) -> fun (V39) -> ('dn--un--compare_Ord_(CExp $vars)'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('dn--un--<_Ord_(CExp $vars)'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('dn--un-->_Ord_(CExp $vars)'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('dn--un--<=_Ord_(CExp $vars)'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('dn--un-->=_Ord_(CExp $vars)'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('dn--un--max_Ord_(CExp $vars)'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('dn--un--min_Ord_(CExp $vars)'(V50, V51)) end end}, V30, V33)) end)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CCon', V52, V53, V54, V55, V56} -> case V1 of {'Core.CompileExpr.CCon', V57, V58, V59, V60, V61} -> ('un--thenCmp'(('un--thenCmp'(('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V64, V65)) end end}, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V66, V67)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V78, V79)) end end}, V55, V60)), fun () -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V53, V58)) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V80) -> fun (V81) -> ('dn--un--==_Eq_(CExp $vars)'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('dn--un--/=_Eq_(CExp $vars)'(V82, V83)) end end}, fun (V84) -> fun (V85) -> ('dn--un--compare_Ord_(CExp $vars)'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('dn--un--<_Ord_(CExp $vars)'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('dn--un-->_Ord_(CExp $vars)'(V88, V89)) end end, fun (V90) -> fun (V91) -> ('dn--un--<=_Ord_(CExp $vars)'(V90, V91)) end end, fun (V92) -> fun (V93) -> ('dn--un-->=_Ord_(CExp $vars)'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('dn--un--max_Ord_(CExp $vars)'(V94, V95)) end end, fun (V96) -> fun (V97) -> ('dn--un--min_Ord_(CExp $vars)'(V96, V97)) end end}, V56, V61)) end)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.COp', V98, V99, V100, V101} -> case V1 of {'Core.CompileExpr.COp', V102, V103, V104, V105} -> case ('un--primFnEq'(V100, V104)) of {'Prelude.Types.Just', V106} -> ('Idris.Idris2.Data.Vect':'dn--un--compare_Ord_((Vect $len) $elem)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V107) -> fun (V108) -> ('dn--un--==_Eq_(CExp $vars)'(V107, V108)) end end, fun (V109) -> fun (V110) -> ('dn--un--/=_Eq_(CExp $vars)'(V109, V110)) end end}, fun (V111) -> fun (V112) -> ('dn--un--compare_Ord_(CExp $vars)'(V111, V112)) end end, fun (V113) -> fun (V114) -> ('dn--un--<_Ord_(CExp $vars)'(V113, V114)) end end, fun (V115) -> fun (V116) -> ('dn--un-->_Ord_(CExp $vars)'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('dn--un--<=_Ord_(CExp $vars)'(V117, V118)) end end, fun (V119) -> fun (V120) -> ('dn--un-->=_Ord_(CExp $vars)'(V119, V120)) end end, fun (V121) -> fun (V122) -> ('dn--un--max_Ord_(CExp $vars)'(V121, V122)) end end, fun (V123) -> fun (V124) -> ('dn--un--min_Ord_(CExp $vars)'(V123, V124)) end end}, V101, V105)); {'Prelude.Types.Nothing'} -> ('un--primFnCmp'(V100, V104)) end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CExtPrim', V125, V126, V127} -> case V1 of {'Core.CompileExpr.CExtPrim', V128, V129, V130} -> ('un--thenCmp'(('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V126, V129)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V131) -> fun (V132) -> ('dn--un--==_Eq_(CExp $vars)'(V131, V132)) end end, fun (V133) -> fun (V134) -> ('dn--un--/=_Eq_(CExp $vars)'(V133, V134)) end end}, fun (V135) -> fun (V136) -> ('dn--un--compare_Ord_(CExp $vars)'(V135, V136)) end end, fun (V137) -> fun (V138) -> ('dn--un--<_Ord_(CExp $vars)'(V137, V138)) end end, fun (V139) -> fun (V140) -> ('dn--un-->_Ord_(CExp $vars)'(V139, V140)) end end, fun (V141) -> fun (V142) -> ('dn--un--<=_Ord_(CExp $vars)'(V141, V142)) end end, fun (V143) -> fun (V144) -> ('dn--un-->=_Ord_(CExp $vars)'(V143, V144)) end end, fun (V145) -> fun (V146) -> ('dn--un--max_Ord_(CExp $vars)'(V145, V146)) end end, fun (V147) -> fun (V148) -> ('dn--un--min_Ord_(CExp $vars)'(V147, V148)) end end}, V127, V130)) end)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CForce', V149, V150, V151} -> case V1 of {'Core.CompileExpr.CForce', V152, V153, V154} -> ('un--thenCmp'(('dn--un--compare_Ord_LazyReason'(V150, V153)), fun () -> ('dn--un--compare_Ord_(CExp $vars)'(V151, V154)) end)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CDelay', V155, V156, V157} -> case V1 of {'Core.CompileExpr.CDelay', V158, V159, V160} -> ('un--thenCmp'(('dn--un--compare_Ord_LazyReason'(V156, V159)), fun () -> ('dn--un--compare_Ord_(CExp $vars)'(V157, V160)) end)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CConCase', V161, V162, V163, V164} -> case V1 of {'Core.CompileExpr.CConCase', V165, V166, V167, V168} -> ('un--thenCmp'(('un--thenCmp'(('dn--un--compare_Ord_(CExp $vars)'(V162, V166)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V169) -> fun (V170) -> ('dn--un--==_Eq_(CConAlt $vars)'(V169, V170)) end end, fun (V171) -> fun (V172) -> ('dn--un--/=_Eq_(CConAlt $vars)'(V171, V172)) end end}, fun (V173) -> fun (V174) -> ('dn--un--compare_Ord_(CConAlt $vars)'(V173, V174)) end end, fun (V175) -> fun (V176) -> ('dn--un--<_Ord_(CConAlt $vars)'(V175, V176)) end end, fun (V177) -> fun (V178) -> ('dn--un-->_Ord_(CConAlt $vars)'(V177, V178)) end end, fun (V179) -> fun (V180) -> ('dn--un--<=_Ord_(CConAlt $vars)'(V179, V180)) end end, fun (V181) -> fun (V182) -> ('dn--un-->=_Ord_(CConAlt $vars)'(V181, V182)) end end, fun (V183) -> fun (V184) -> ('dn--un--max_Ord_(CConAlt $vars)'(V183, V184)) end end, fun (V185) -> fun (V186) -> ('dn--un--min_Ord_(CConAlt $vars)'(V185, V186)) end end}, V163, V167)) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V187) -> fun (V188) -> ('dn--un--==_Eq_(CExp $vars)'(V187, V188)) end end, fun (V189) -> fun (V190) -> ('dn--un--/=_Eq_(CExp $vars)'(V189, V190)) end end}, fun (V191) -> fun (V192) -> ('dn--un--compare_Ord_(CExp $vars)'(V191, V192)) end end, fun (V193) -> fun (V194) -> ('dn--un--<_Ord_(CExp $vars)'(V193, V194)) end end, fun (V195) -> fun (V196) -> ('dn--un-->_Ord_(CExp $vars)'(V195, V196)) end end, fun (V197) -> fun (V198) -> ('dn--un--<=_Ord_(CExp $vars)'(V197, V198)) end end, fun (V199) -> fun (V200) -> ('dn--un-->=_Ord_(CExp $vars)'(V199, V200)) end end, fun (V201) -> fun (V202) -> ('dn--un--max_Ord_(CExp $vars)'(V201, V202)) end end, fun (V203) -> fun (V204) -> ('dn--un--min_Ord_(CExp $vars)'(V203, V204)) end end}, V164, V168)) end)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CConstCase', V205, V206, V207, V208} -> case V1 of {'Core.CompileExpr.CConstCase', V209, V210, V211, V212} -> ('un--thenCmp'(('un--thenCmp'(('dn--un--compare_Ord_(CExp $vars)'(V206, V210)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V213) -> fun (V214) -> ('dn--un--==_Eq_(CConstAlt $vars)'(V213, V214)) end end, fun (V215) -> fun (V216) -> ('dn--un--/=_Eq_(CConstAlt $vars)'(V215, V216)) end end}, fun (V217) -> fun (V218) -> ('dn--un--compare_Ord_(CConstAlt $vars)'(V217, V218)) end end, fun (V219) -> fun (V220) -> ('dn--un--<_Ord_(CConstAlt $vars)'(V219, V220)) end end, fun (V221) -> fun (V222) -> ('dn--un-->_Ord_(CConstAlt $vars)'(V221, V222)) end end, fun (V223) -> fun (V224) -> ('dn--un--<=_Ord_(CConstAlt $vars)'(V223, V224)) end end, fun (V225) -> fun (V226) -> ('dn--un-->=_Ord_(CConstAlt $vars)'(V225, V226)) end end, fun (V227) -> fun (V228) -> ('dn--un--max_Ord_(CConstAlt $vars)'(V227, V228)) end end, fun (V229) -> fun (V230) -> ('dn--un--min_Ord_(CConstAlt $vars)'(V229, V230)) end end}, V207, V211)) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V231) -> fun (V232) -> ('dn--un--==_Eq_(CExp $vars)'(V231, V232)) end end, fun (V233) -> fun (V234) -> ('dn--un--/=_Eq_(CExp $vars)'(V233, V234)) end end}, fun (V235) -> fun (V236) -> ('dn--un--compare_Ord_(CExp $vars)'(V235, V236)) end end, fun (V237) -> fun (V238) -> ('dn--un--<_Ord_(CExp $vars)'(V237, V238)) end end, fun (V239) -> fun (V240) -> ('dn--un-->_Ord_(CExp $vars)'(V239, V240)) end end, fun (V241) -> fun (V242) -> ('dn--un--<=_Ord_(CExp $vars)'(V241, V242)) end end, fun (V243) -> fun (V244) -> ('dn--un-->=_Ord_(CExp $vars)'(V243, V244)) end end, fun (V245) -> fun (V246) -> ('dn--un--max_Ord_(CExp $vars)'(V245, V246)) end end, fun (V247) -> fun (V248) -> ('dn--un--min_Ord_(CExp $vars)'(V247, V248)) end end}, V208, V212)) end)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CPrimVal', V249, V250} -> case V1 of {'Core.CompileExpr.CPrimVal', V251, V252} -> ('dn--un--compare_Ord_Constant'(V250, V252)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CErased', V253} -> case V1 of {'Core.CompileExpr.CErased', V254} -> 1; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; {'Core.CompileExpr.CCrash', V255, V256} -> case V1 of {'Core.CompileExpr.CCrash', V257, V258} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V256, V258)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--8454-6649--in--un--tag'(V1, V0, V0)), ('nested--8454-6649--in--un--tag'(V1, V0, V1)))) end.
'dn--un--compare_Ord_(CConstAlt $vars)'(V0, V1) -> case V0 of {'Core.CompileExpr.MkConstAlt', V2, V3} -> case V1 of {'Core.CompileExpr.MkConstAlt', V4, V5} -> ('un--thenCmp'(('dn--un--compare_Ord_Constant'(V2, V4)), fun () -> ('dn--un--compare_Ord_(CExp $vars)'(V3, V5)) end)) end end.
'dn--un--compare_Ord_(CConAlt $vars)'(V0, V1) -> case V0 of {'Core.CompileExpr.MkConAlt', V2, V3, V4, V5, V6} -> case V1 of {'Core.CompileExpr.MkConAlt', V7, V8, V9, V10, V11} -> ('un--thenCmp'(('un--thenCmp'(('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V14, V15)) end end}, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V28, V29)) end end}, V4, V9)), fun () -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V2, V7)) end)), case ('Idris.Idris2.Core.Name':'un--namesEq'(V5, V10)) of {'Prelude.Types.Just', V30} -> fun () -> ('dn--un--compare_Ord_(CExp $vars)'(V6, V11)) end; {'Prelude.Types.Nothing'} -> fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V33, V34)) end end}, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V47, V48)) end end}, V5, V10)) end end)) end end.
'dn--un--__Impl_Ord_PrimType'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_PrimType'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_PrimType'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_PrimType'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_PrimType'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_PrimType'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_PrimType'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_PrimType'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_PrimType'(V16, V17)) end end}.
'dn--un--__Impl_Ord_LazyReason'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_LazyReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_LazyReason'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_LazyReason'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_LazyReason'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_LazyReason'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_LazyReason'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_LazyReason'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_LazyReason'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_LazyReason'(V16, V17)) end end}.
'dn--un--__Impl_Ord_Constant'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_Constant'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_Constant'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_Constant'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_Constant'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_Constant'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_Constant'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_Constant'(V16, V17)) end end}.
'dn--un--__Impl_Ord_(Var $vars)'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(Var $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(Var $vars)'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_(Var $vars)'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_(Var $vars)'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_(Var $vars)'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_(Var $vars)'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_(Var $vars)'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_(Var $vars)'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_(Var $vars)'(V16, V17)) end end}.
'dn--un--__Impl_Ord_(CExp $vars)'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CExp $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CExp $vars)'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_(CExp $vars)'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_(CExp $vars)'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_(CExp $vars)'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_(CExp $vars)'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_(CExp $vars)'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_(CExp $vars)'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_(CExp $vars)'(V16, V17)) end end}.
'dn--un--__Impl_Ord_(CConstAlt $vars)'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CConstAlt $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CConstAlt $vars)'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_(CConstAlt $vars)'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_(CConstAlt $vars)'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_(CConstAlt $vars)'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_(CConstAlt $vars)'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_(CConstAlt $vars)'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_(CConstAlt $vars)'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_(CConstAlt $vars)'(V16, V17)) end end}.
'dn--un--__Impl_Ord_(CConAlt $vars)'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CConAlt $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CConAlt $vars)'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_(CConAlt $vars)'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_(CConAlt $vars)'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_(CConAlt $vars)'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_(CConAlt $vars)'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_(CConAlt $vars)'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_(CConAlt $vars)'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_(CConAlt $vars)'(V16, V17)) end end}.
'dn--un--__Impl_Eq_(Var $vars)'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(Var $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(Var $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(CExp $vars)'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CExp $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CExp $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(CConstAlt $vars)'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CConstAlt $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CConstAlt $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(CConAlt $vars)'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CConAlt $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CConAlt $vars)'(V2, V3)) end end}.
'dn--un-->_Ord_PrimType'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_PrimType'(V0, V1)), 2)).
'dn--un-->_Ord_LazyReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_LazyReason'(V0, V1)), 2)).
'dn--un-->_Ord_Constant'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Constant'(V0, V1)), 2)).
'dn--un-->_Ord_(Var $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(Var $vars)'(V0, V1)), 2)).
'dn--un-->_Ord_(CExp $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CExp $vars)'(V0, V1)), 2)).
'dn--un-->_Ord_(CConstAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CConstAlt $vars)'(V0, V1)), 2)).
'dn--un-->_Ord_(CConAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CConAlt $vars)'(V0, V1)), 2)).
'dn--un-->=_Ord_PrimType'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_PrimType'(V0, V1)), 0)).
'dn--un-->=_Ord_LazyReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_LazyReason'(V0, V1)), 0)).
'dn--un-->=_Ord_Constant'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Constant'(V0, V1)), 0)).
'dn--un-->=_Ord_(Var $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(Var $vars)'(V0, V1)), 0)).
'dn--un-->=_Ord_(CExp $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CExp $vars)'(V0, V1)), 0)).
'dn--un-->=_Ord_(CConstAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CConstAlt $vars)'(V0, V1)), 0)).
'dn--un-->=_Ord_(CConAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CConAlt $vars)'(V0, V1)), 0)).
'dn--un--==_Eq_(Var $vars)'(V0, V1) -> begin (V2 = V0), begin (V3 = V1), case (V2 =:= V3) of 'false' -> 0; _ -> 1 end end end.
'dn--un--==_Eq_(CExp $vars)'(V0, V1) -> case V0 of {'Core.CompileExpr.CLocal', V2, V3} -> case V1 of {'Core.CompileExpr.CLocal', V4, V5} -> case (V2 =:= V4) of 'false' -> 0; _ -> 1 end; _ -> 0 end; {'Core.CompileExpr.CRef', V6, V7} -> case V1 of {'Core.CompileExpr.CRef', V8, V9} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V9)); _ -> 0 end; {'Core.CompileExpr.CLam', V10, V11, V12} -> case V1 of {'Core.CompileExpr.CLam', V13, V14, V15} -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V11, V14)) of {'Prelude.Types.Just', V16} -> ('dn--un--==_Eq_(CExp $vars)'(V12, V15)); {'Prelude.Types.Nothing'} -> 0 end; _ -> 0 end; {'Core.CompileExpr.CLet', V17, V18, V19, V20, V21} -> case V1 of {'Core.CompileExpr.CLet', V22, V23, V24, V25, V26} -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V18, V23)) of {'Prelude.Types.Just', V27} -> case ('dn--un--==_Eq_(CExp $vars)'(V20, V25)) of 1 -> ('dn--un--==_Eq_(CExp $vars)'(V21, V26)); 0 -> 0 end; {'Prelude.Types.Nothing'} -> 0 end; _ -> 0 end; {'Core.CompileExpr.CApp', V28, V29, V30} -> case V1 of {'Core.CompileExpr.CApp', V31, V32, V33} -> case ('dn--un--==_Eq_(CExp $vars)'(V29, V32)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('dn--un--==_Eq_(CExp $vars)'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('dn--un--/=_Eq_(CExp $vars)'(V36, V37)) end end}, V30, V33)); 0 -> 0 end; _ -> 0 end; {'Core.CompileExpr.CCon', V38, V39, V40, V41, V42} -> case V1 of {'Core.CompileExpr.CCon', V43, V44, V45, V46, V47} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V50, V51)) end end}, V41, V46)) of 1 -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V39, V44)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V52) -> fun (V53) -> ('dn--un--==_Eq_(CExp $vars)'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('dn--un--/=_Eq_(CExp $vars)'(V54, V55)) end end}, V42, V47)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Core.CompileExpr.COp', V56, V57, V58, V59} -> case V1 of {'Core.CompileExpr.COp', V60, V61, V62, V63} -> case ('un--primFnEq'(V58, V62)) of {'Prelude.Types.Just', V64} -> ('Idris.Idris2.Data.Vect':'dn--un--==_Eq_((Vect $n) $a)'({'Prelude.EqOrd.MkEq', fun (V65) -> fun (V66) -> ('dn--un--==_Eq_(CExp $vars)'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('dn--un--/=_Eq_(CExp $vars)'(V67, V68)) end end}, V59, V63)); {'Prelude.Types.Nothing'} -> 0 end; _ -> 0 end; {'Core.CompileExpr.CExtPrim', V69, V70, V71} -> case V1 of {'Core.CompileExpr.CExtPrim', V72, V73, V74} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V70, V73)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V75) -> fun (V76) -> ('dn--un--==_Eq_(CExp $vars)'(V75, V76)) end end, fun (V77) -> fun (V78) -> ('dn--un--/=_Eq_(CExp $vars)'(V77, V78)) end end}, V71, V74)); 0 -> 0 end; _ -> 0 end; {'Core.CompileExpr.CForce', V79, V80, V81} -> case V1 of {'Core.CompileExpr.CForce', V82, V83, V84} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_LazyReason'(V80, V83)) of 1 -> ('dn--un--==_Eq_(CExp $vars)'(V81, V84)); 0 -> 0 end; _ -> 0 end; {'Core.CompileExpr.CDelay', V85, V86, V87} -> case V1 of {'Core.CompileExpr.CDelay', V88, V89, V90} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_LazyReason'(V86, V89)) of 1 -> ('dn--un--==_Eq_(CExp $vars)'(V87, V90)); 0 -> 0 end; _ -> 0 end; {'Core.CompileExpr.CConCase', V91, V92, V93, V94} -> case V1 of {'Core.CompileExpr.CConCase', V95, V96, V97, V98} -> case ('dn--un--==_Eq_(CExp $vars)'(V92, V96)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V99) -> fun (V100) -> ('dn--un--==_Eq_(CConAlt $vars)'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('dn--un--/=_Eq_(CConAlt $vars)'(V101, V102)) end end}, V93, V97)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V103) -> fun (V104) -> ('dn--un--==_Eq_(CExp $vars)'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('dn--un--/=_Eq_(CExp $vars)'(V105, V106)) end end}, V94, V98)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Core.CompileExpr.CConstCase', V107, V108, V109, V110} -> case V1 of {'Core.CompileExpr.CConstCase', V111, V112, V113, V114} -> case ('dn--un--==_Eq_(CExp $vars)'(V108, V112)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V115) -> fun (V116) -> ('dn--un--==_Eq_(CConstAlt $vars)'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('dn--un--/=_Eq_(CConstAlt $vars)'(V117, V118)) end end}, V109, V113)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V119) -> fun (V120) -> ('dn--un--==_Eq_(CExp $vars)'(V119, V120)) end end, fun (V121) -> fun (V122) -> ('dn--un--/=_Eq_(CExp $vars)'(V121, V122)) end end}, V110, V114)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Core.CompileExpr.CPrimVal', V123, V124} -> case V1 of {'Core.CompileExpr.CPrimVal', V125, V126} -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V124, V126)); _ -> 0 end; {'Core.CompileExpr.CErased', V127} -> case V1 of {'Core.CompileExpr.CErased', V128} -> 1; _ -> 0 end; {'Core.CompileExpr.CCrash', V129, V130} -> case V1 of {'Core.CompileExpr.CCrash', V131, V132} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V130, V132)); _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_(CConstAlt $vars)'(V0, V1) -> case V0 of {'Core.CompileExpr.MkConstAlt', V2, V3} -> case V1 of {'Core.CompileExpr.MkConstAlt', V4, V5} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V2, V4)) of 1 -> ('dn--un--==_Eq_(CExp $vars)'(V3, V5)); 0 -> 0 end end end.
'dn--un--==_Eq_(CConAlt $vars)'(V0, V1) -> case V0 of {'Core.CompileExpr.MkConAlt', V2, V3, V4, V5, V6} -> case V1 of {'Core.CompileExpr.MkConAlt', V7, V8, V9, V10, V11} -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V14, V15)) end end}, V4, V9)) of 1 -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, V7)) of 1 -> (case ('Idris.Idris2.Core.Name':'un--namesEq'(V5, V10)) of {'Prelude.Types.Just', V16} -> fun () -> ('dn--un--==_Eq_(CExp $vars)'(V6, V11)) end; {'Prelude.Types.Nothing'} -> fun () -> 0 end end()); 0 -> 0 end; 0 -> 0 end end end.
'dn--un--<_Ord_PrimType'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_PrimType'(V0, V1)), 0)).
'dn--un--<_Ord_LazyReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_LazyReason'(V0, V1)), 0)).
'dn--un--<_Ord_Constant'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Constant'(V0, V1)), 0)).
'dn--un--<_Ord_(Var $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(Var $vars)'(V0, V1)), 0)).
'dn--un--<_Ord_(CExp $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CExp $vars)'(V0, V1)), 0)).
'dn--un--<_Ord_(CConstAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CConstAlt $vars)'(V0, V1)), 0)).
'dn--un--<_Ord_(CConAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CConAlt $vars)'(V0, V1)), 0)).
'dn--un--<=_Ord_PrimType'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_PrimType'(V0, V1)), 2)).
'dn--un--<=_Ord_LazyReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_LazyReason'(V0, V1)), 2)).
'dn--un--<=_Ord_Constant'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Constant'(V0, V1)), 2)).
'dn--un--<=_Ord_(Var $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(Var $vars)'(V0, V1)), 2)).
'dn--un--<=_Ord_(CExp $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CExp $vars)'(V0, V1)), 2)).
'dn--un--<=_Ord_(CConstAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CConstAlt $vars)'(V0, V1)), 2)).
'dn--un--<=_Ord_(CConAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CConAlt $vars)'(V0, V1)), 2)).
'dn--un--/=_Eq_(Var $vars)'(V0, V1) -> case ('dn--un--==_Eq_(Var $vars)'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_(CExp $vars)'(V0, V1) -> case ('dn--un--==_Eq_(CExp $vars)'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_(CConstAlt $vars)'(V0, V1) -> case ('dn--un--==_Eq_(CConstAlt $vars)'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_(CConAlt $vars)'(V0, V1) -> case ('dn--un--==_Eq_(CConAlt $vars)'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--thenCmp'(V0, V1) -> case V0 of 0 -> 0; 1 -> (V1()); 2 -> 2 end.
'un--primFnEq'(V0, V1) -> case V0 of {'Core.TT.Add', V2} -> case V1 of {'Core.TT.Add', V3} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V2, V3)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Sub', V4} -> case V1 of {'Core.TT.Sub', V5} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V4, V5)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Mul', V6} -> case V1 of {'Core.TT.Mul', V7} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V6, V7)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Div', V8} -> case V1 of {'Core.TT.Div', V9} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V8, V9)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Mod', V10} -> case V1 of {'Core.TT.Mod', V11} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V10, V11)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Neg', V12} -> case V1 of {'Core.TT.Neg', V13} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V12, V13)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.ShiftL', V14} -> case V1 of {'Core.TT.ShiftL', V15} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V14, V15)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.ShiftR', V16} -> case V1 of {'Core.TT.ShiftR', V17} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V16, V17)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BAnd', V18} -> case V1 of {'Core.TT.BAnd', V19} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V18, V19)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BOr', V20} -> case V1 of {'Core.TT.BOr', V21} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V20, V21)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BXOr', V22} -> case V1 of {'Core.TT.BXOr', V23} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V22, V23)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.LT', V24} -> case V1 of {'Core.TT.LT', V25} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V24, V25)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.LTE', V26} -> case V1 of {'Core.TT.LTE', V27} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V26, V27)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.EQ', V28} -> case V1 of {'Core.TT.EQ', V29} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V28, V29)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.GTE', V30} -> case V1 of {'Core.TT.GTE', V31} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V30, V31)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.GT', V32} -> case V1 of {'Core.TT.GT', V33} -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V32, V33)) of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.StrLength'} -> case V1 of {'Core.TT.StrLength'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.StrHead'} -> case V1 of {'Core.TT.StrHead'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.StrTail'} -> case V1 of {'Core.TT.StrTail'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.StrIndex'} -> case V1 of {'Core.TT.StrIndex'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.StrCons'} -> case V1 of {'Core.TT.StrCons'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.StrAppend'} -> case V1 of {'Core.TT.StrAppend'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.StrReverse'} -> case V1 of {'Core.TT.StrReverse'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.StrSubstr'} -> case V1 of {'Core.TT.StrSubstr'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoubleExp'} -> case V1 of {'Core.TT.DoubleExp'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoubleLog'} -> case V1 of {'Core.TT.DoubleLog'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoublePow'} -> case V1 of {'Core.TT.DoublePow'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoubleSin'} -> case V1 of {'Core.TT.DoubleSin'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoubleCos'} -> case V1 of {'Core.TT.DoubleCos'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoubleTan'} -> case V1 of {'Core.TT.DoubleTan'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoubleASin'} -> case V1 of {'Core.TT.DoubleASin'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoubleACos'} -> case V1 of {'Core.TT.DoubleACos'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoubleATan'} -> case V1 of {'Core.TT.DoubleATan'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoubleSqrt'} -> case V1 of {'Core.TT.DoubleSqrt'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoubleFloor'} -> case V1 of {'Core.TT.DoubleFloor'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.DoubleCeiling'} -> case V1 of {'Core.TT.DoubleCeiling'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Cast', V34, V35} -> case V1 of {'Core.TT.Cast', V36, V37} -> case case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V34, V36)) of 1 -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_PrimType'(V35, V37)); 0 -> 0 end of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BelieveMe'} -> case V1 of {'Core.TT.BelieveMe'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Crash'} -> case V1 of {'Core.TT.Crash'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--primFnCmp'(V0, V1) -> case V0 of {'Core.TT.Add', V2} -> case V1 of {'Core.TT.Add', V3} -> ('dn--un--compare_Ord_PrimType'(V2, V3)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.Sub', V4} -> case V1 of {'Core.TT.Sub', V5} -> ('dn--un--compare_Ord_PrimType'(V4, V5)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.Mul', V6} -> case V1 of {'Core.TT.Mul', V7} -> ('dn--un--compare_Ord_PrimType'(V6, V7)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.Div', V8} -> case V1 of {'Core.TT.Div', V9} -> ('dn--un--compare_Ord_PrimType'(V8, V9)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.Mod', V10} -> case V1 of {'Core.TT.Mod', V11} -> ('dn--un--compare_Ord_PrimType'(V10, V11)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.Neg', V12} -> case V1 of {'Core.TT.Neg', V13} -> ('dn--un--compare_Ord_PrimType'(V12, V13)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.ShiftL', V14} -> case V1 of {'Core.TT.ShiftL', V15} -> ('dn--un--compare_Ord_PrimType'(V14, V15)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.ShiftR', V16} -> case V1 of {'Core.TT.ShiftR', V17} -> ('dn--un--compare_Ord_PrimType'(V16, V17)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.BAnd', V18} -> case V1 of {'Core.TT.BAnd', V19} -> ('dn--un--compare_Ord_PrimType'(V18, V19)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.BOr', V20} -> case V1 of {'Core.TT.BOr', V21} -> ('dn--un--compare_Ord_PrimType'(V20, V21)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.BXOr', V22} -> case V1 of {'Core.TT.BXOr', V23} -> ('dn--un--compare_Ord_PrimType'(V22, V23)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.LT', V24} -> case V1 of {'Core.TT.LT', V25} -> ('dn--un--compare_Ord_PrimType'(V24, V25)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.LTE', V26} -> case V1 of {'Core.TT.LTE', V27} -> ('dn--un--compare_Ord_PrimType'(V26, V27)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.EQ', V28} -> case V1 of {'Core.TT.EQ', V29} -> ('dn--un--compare_Ord_PrimType'(V28, V29)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.GTE', V30} -> case V1 of {'Core.TT.GTE', V31} -> ('dn--un--compare_Ord_PrimType'(V30, V31)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.GT', V32} -> case V1 of {'Core.TT.GT', V33} -> ('dn--un--compare_Ord_PrimType'(V32, V33)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; {'Core.TT.Cast', V34, V35} -> case V1 of {'Core.TT.Cast', V36, V37} -> ('un--thenCmp'(('dn--un--compare_Ord_PrimType'(V34, V36)), fun () -> ('dn--un--compare_Ord_PrimType'(V35, V37)) end)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end; _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--6738-4534--in--un--tag'(V1, V0, V0)), ('nested--6738-4534--in--un--tag'(V1, V0, V1)))) end.
'un--lrTag'(V0) -> case V0 of 0 -> 0; 1 -> 1; 2 -> 2 end.
