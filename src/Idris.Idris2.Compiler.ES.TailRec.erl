-module('Idris.Idris2.Compiler.ES.TailRec').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7568-6605--in--un--toTc'/7,
  'nested--7838-6856--in--un--toFun'/5,
  'nested--7754-6765--in--un--toFun'/5,
  'nested--7754-6763--in--un--tcFun'/4,
  'nested--7568-6603--in--un--tcDone'/7,
  'nested--7568-6604--in--un--tcContinue'/8,
  'nested--7754-6764--in--un--local'/5,
  'nested--7298-6360--in--un--fun'/4,
  'nested--7938-6940--in--un--def'/3,
  'nested--7568-6607--in--un--const'/7,
  'nested--7568-6606--in--un--con'/7,
  'un--zipWithIndices'/1,
  'un--toGroup'/2,
  'un--tcFunction'/1,
  'un--tcDoneName'/1,
  'un--tcContinueName'/2,
  'un--tcArgName'/0,
  'un--tailRecOptim'/4,
  'un--tailCalls'/1,
  'un--tailCallGroups'/1,
  'un--indices'/1,
  'un--hasTailCalls'/2,
  'un--functions'/2,
  'un--convertTcGroup'/2,
  'un--conAlt'/2
]).
'nested--7568-6605--in--un--toTc'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.CompileExpr.NmLet', V7, V8, V9, V10} -> {'Core.CompileExpr.NmLet', V7, V8, V9, ('nested--7568-6605--in--un--toTc'(V0, V1, V2, V3, V4, V5, V10))}; {'Core.CompileExpr.NmApp', V11, V12, V13} -> case V12 of {'Core.CompileExpr.NmRef', V14, V15} -> begin (V16 = {'Core.CompileExpr.NmApp', V11, {'Core.CompileExpr.NmRef', V14, V15}, V13}), case ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V15, V0)) of {'Prelude.Types.Just', V17} -> ('nested--7568-6604--in--un--tcContinue'(V0, V1, V2, V3, V4, V5, case V17 of {'Compiler.ES.TailRec.MkTcFunction', V18, V19, V20, V21} -> V19 end, V13)); {'Prelude.Types.Nothing'} -> ('nested--7568-6603--in--un--tcDone'(V0, V1, V2, V3, V4, V5, V16)) end end; _ -> ('nested--7568-6603--in--un--tcDone'(V0, V1, V2, V3, V4, V5, V6)) end; {'Core.CompileExpr.NmConCase', V22, V23, V24, V25} -> {'Core.CompileExpr.NmConCase', V22, V23, ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V26) -> ('nested--7568-6606--in--un--con'(V0, V1, V2, V3, V4, V5, V26)) end))(V24)), ((begin (V39 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V37, V38)) end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V34) -> ('nested--7568-6605--in--un--toTc'(V0, V1, V2, V3, V4, V5, V34)) end))(V25))}; {'Core.CompileExpr.NmConstCase', V42, V43, V44, V45} -> {'Core.CompileExpr.NmConstCase', V42, V43, ((begin (V51 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V49, V50)) end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(fun (V46) -> ('nested--7568-6607--in--un--const'(V0, V1, V2, V3, V4, V5, V46)) end))(V44)), ((begin (V59 = fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V57, V58)) end end end end), fun (V60) -> fun (V61) -> ((((V59('erased'))('erased'))(V60))(V61)) end end end(fun (V54) -> ('nested--7568-6605--in--un--toTc'(V0, V1, V2, V3, V4, V5, V54)) end))(V45))}; {'Core.CompileExpr.NmCrash', V62, V63} -> V6; _ -> ('nested--7568-6603--in--un--tcDone'(V0, V1, V2, V3, V4, V5, V6)) end.
'nested--7838-6856--in--un--toFun'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> case ('Idris.Idris2.Libraries.Data.SortedSet':'un--contains'(V5, V2)) of 1 -> {'Prelude.Types.Nothing'}; 0 -> {'Prelude.Types.Just', {'Compiler.ES.TailRec.MkFunction', V5, V7, V8}} end end end.
'nested--7754-6765--in--un--toFun'(V0, V1, V2, V3, V4) -> case V4 of {'Compiler.ES.TailRec.MkTcFunction', V5, V6, V7, V8} -> begin (V17 = ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> ('nested--7754-6764--in--un--local'(V0, V1, V2, V3, V9)) end))(V7))), begin (V18 = {'Core.CompileExpr.NmCon', {'Core.FC.EmptyFC'}, ('un--tcContinueName'(V1, V6)), {'Core.CompileExpr.DATACON'}, {'Prelude.Types.Just', V6}, V17}), begin (V19 = {'Core.CompileExpr.NmRef', {'Core.FC.EmptyFC'}, ('nested--7754-6763--in--un--tcFun'(V0, V1, V2, V3))}), begin (V20 = {'Core.CompileExpr.NmApp', {'Core.FC.EmptyFC'}, {'Core.CompileExpr.NmRef', {'Core.FC.EmptyFC'}, V3}, [V19 | [V18 | []]]}), {'Compiler.ES.TailRec.MkFunction', V5, V7, V20} end end end end end.
'nested--7754-6763--in--un--tcFun'(V0, V1, V2, V3) -> ('un--tcFunction'(V1)).
'nested--7568-6603--in--un--tcDone'(V0, V1, V2, V3, V4, V5, V6) -> {'Core.CompileExpr.NmCon', {'Core.FC.EmptyFC'}, ('un--tcDoneName'(V1)), {'Core.CompileExpr.DATACON'}, {'Prelude.Types.Just', 0}, [V6 | []]}.
'nested--7568-6604--in--un--tcContinue'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Core.CompileExpr.NmCon', {'Core.FC.EmptyFC'}, ('un--tcContinueName'(V1, V6)), {'Core.CompileExpr.DATACON'}, {'Prelude.Types.Just', V6}, V7}.
'nested--7754-6764--in--un--local'(V0, V1, V2, V3, V4) -> {'Core.CompileExpr.NmLocal', {'Core.FC.EmptyFC'}, V4}.
'nested--7298-6360--in--un--fun'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V5, V2)), fun (V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of {'Builtin.MkPair', V9, V10} -> {'Prelude.Types.Just', {'Builtin.MkPair', V5, {'Compiler.ES.TailRec.MkTcFunction', V5, V4, V9, V10}}} end end end)) end.
'nested--7938-6940--in--un--def'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of {'Core.CompileExpr.MkNmFun', V7, V8} -> {'Prelude.Types.Just', {'Builtin.MkPair', V3, {'Builtin.MkPair', V7, V8}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'nested--7568-6607--in--un--const'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.CompileExpr.MkNConstAlt', V7, V8} -> {'Core.CompileExpr.MkNConstAlt', V7, ('nested--7568-6605--in--un--toTc'(V0, V1, V2, V3, V4, V5, V8))} end.
'nested--7568-6606--in--un--con'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.CompileExpr.MkNConAlt', V7, V8, V9, V10, V11} -> {'Core.CompileExpr.MkNConAlt', V7, V8, V9, V10, ('nested--7568-6605--in--un--toTc'(V0, V1, V2, V3, V4, V5, V11))} end.
'un--zipWithIndices'(V0) -> ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(('un--indices'(V0)), V0)).
'un--toGroup'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> begin (V4 = ('un--zipWithIndices'(('Idris.Idris2.Data.List1':'un--forget'(V3))))), {'Compiler.ES.TailRec.MkTcGroup', V2, ('Idris.Idris2.Libraries.Data.SortedMap':'un--fromList'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V7, V8)) end end}, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V21, V22)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V23) -> ('nested--7298-6360--in--un--fun'(V2, V3, V0, V23)) end, V4))))} end end.
'un--tcFunction'(V0) -> {'Core.Name.MN', <<"$tcOpt"/utf8>>, V0}.
'un--tcDoneName'(V0) -> {'Core.Name.MN', <<"TcDone"/utf8>>, V0}.
'un--tcContinueName'(V0, V1) -> {'Core.Name.MN', <<<<"TcContinue"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V0))/binary>>, V1}.
'un--tcArgName'() -> {'Core.Name.MN', <<"$a"/utf8>>, 0}.
'un--tailRecOptim'(V0, V1, V2, V3) -> begin (V5 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V4) -> ('nested--7838-6856--in--un--toFun'(V3, V2, V1, V0, V4)) end, V3))), begin (V9 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V7)) end end, []}, fun (V8) -> ('un--convertTcGroup'(V2, V8)) end, V0))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V9, V5)) end end.
'un--tailCalls'(V0) -> case V0 of {'Core.CompileExpr.NmLet', V1, V2, V3, V4} -> ('un--tailCalls'(V4)); {'Core.CompileExpr.NmApp', V5, V6, V7} -> case V6 of {'Core.CompileExpr.NmRef', V8, V9} -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--singleton'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V26, V27)) end end}, V9)); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V30, V31)) end end}, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V44, V45)) end end})) end; {'Core.CompileExpr.NmConCase', V46, V47, V48, V49} -> ((begin (V153 = fun (V133) -> fun (V134) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V135) -> fun (V136) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V135, V136)) end end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V137, V138)) end end}, fun (V139) -> fun (V140) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V139, V140)) end end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V141, V142)) end end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V143, V144)) end end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V145, V146)) end end, fun (V147) -> fun (V148) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V147, V148)) end end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V149, V150)) end end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V151, V152)) end end}, V133, V134)) end end), fun (V154) -> fun (V155) -> ((V153(V154))(V155)) end end end(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V89) -> fun (V90) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V91, V92)) end end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V93, V94)) end end}, fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V95, V96)) end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V97, V98)) end end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V107, V108)) end end}, V89, V90)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--neutral_Monoid_(SortedSet $k)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V111, V112)) end end}, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V113, V114)) end end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V117, V118)) end end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V119, V120)) end end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V121, V122)) end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V123, V124)) end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V125, V126)) end end}))}, fun (V127) -> case V127 of {'Core.CompileExpr.MkNConAlt', V128, V129, V130, V131, V132} -> ('un--tailCalls'(V132)) end end, V48))))(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_Maybe'({'Prelude.Interfaces.MkMonoid', fun (V50) -> fun (V51) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V54, V55)) end end}, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V66, V67)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V68, V69)) end end}, V50, V51)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--neutral_Monoid_(SortedSet $k)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V72, V73)) end end}, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V86, V87)) end end}))}, fun (V88) -> ('un--tailCalls'(V88)) end, V49)))); {'Core.CompileExpr.NmConstCase', V156, V157, V158, V159} -> ((begin (V260 = fun (V240) -> fun (V241) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V242) -> fun (V243) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V242, V243)) end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V244, V245)) end end}, fun (V246) -> fun (V247) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V246, V247)) end end, fun (V248) -> fun (V249) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V248, V249)) end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V250, V251)) end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V252, V253)) end end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V254, V255)) end end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V256, V257)) end end, fun (V258) -> fun (V259) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V258, V259)) end end}, V240, V241)) end end), fun (V261) -> fun (V262) -> ((V260(V261))(V262)) end end end(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V199) -> fun (V200) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V201) -> fun (V202) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V201, V202)) end end, fun (V203) -> fun (V204) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V203, V204)) end end}, fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V205, V206)) end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V207, V208)) end end, fun (V209) -> fun (V210) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V209, V210)) end end, fun (V211) -> fun (V212) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V211, V212)) end end, fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V213, V214)) end end, fun (V215) -> fun (V216) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V215, V216)) end end, fun (V217) -> fun (V218) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V217, V218)) end end}, V199, V200)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--neutral_Monoid_(SortedSet $k)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V219) -> fun (V220) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V219, V220)) end end, fun (V221) -> fun (V222) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V221, V222)) end end}, fun (V223) -> fun (V224) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V223, V224)) end end, fun (V225) -> fun (V226) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V225, V226)) end end, fun (V227) -> fun (V228) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V227, V228)) end end, fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V229, V230)) end end, fun (V231) -> fun (V232) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V231, V232)) end end, fun (V233) -> fun (V234) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V233, V234)) end end, fun (V235) -> fun (V236) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V235, V236)) end end}))}, fun (V237) -> case V237 of {'Core.CompileExpr.MkNConstAlt', V238, V239} -> ('un--tailCalls'(V239)) end end, V158))))(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_Maybe'({'Prelude.Interfaces.MkMonoid', fun (V160) -> fun (V161) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V162, V163)) end end, fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V164, V165)) end end}, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V166, V167)) end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V168, V169)) end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V170, V171)) end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V172, V173)) end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V174, V175)) end end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V176, V177)) end end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V178, V179)) end end}, V160, V161)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--neutral_Monoid_(SortedSet $k)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V180) -> fun (V181) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V180, V181)) end end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V182, V183)) end end}, fun (V184) -> fun (V185) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V184, V185)) end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V186, V187)) end end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V188, V189)) end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V190, V191)) end end, fun (V192) -> fun (V193) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V192, V193)) end end, fun (V194) -> fun (V195) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V194, V195)) end end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V196, V197)) end end}))}, fun (V198) -> ('un--tailCalls'(V198)) end, V159)))); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V263) -> fun (V264) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V263, V264)) end end, fun (V265) -> fun (V266) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V265, V266)) end end}, fun (V267) -> fun (V268) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V267, V268)) end end, fun (V269) -> fun (V270) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V269, V270)) end end, fun (V271) -> fun (V272) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V271, V272)) end end, fun (V273) -> fun (V274) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V273, V274)) end end, fun (V275) -> fun (V276) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V275, V276)) end end, fun (V277) -> fun (V278) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V277, V278)) end end, fun (V279) -> fun (V280) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V279, V280)) end end})) end.
'un--tailCallGroups'(V0) -> begin (V27 = ('Idris.Idris2.Libraries.Data.SortedMap':'un--fromList'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V3, V4)) end end}, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V17, V18)) end end}, ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> {'Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V19)), V19} end))(V0))))), begin (V40 = ((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Libraries.Data.SortedMap':'dn--un--map_Functor_(SortedMap $k)'(V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(fun (V28) -> case V28 of {'Builtin.MkPair', V29, V30} -> case V30 of {'Builtin.MkPair', V31, V32} -> ('un--tailCalls'(V32)) end end end))(V27))), begin (V60 = ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V41) -> ('un--hasTailCalls'(V40, V41)) end, ('Idris.Idris2.Libraries.Data.Graph':'un--tarjan'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V44, V45)) end end}, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V58, V59)) end end}, V40))))), ((begin (V66 = fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V64, V65)) end end end end), fun (V67) -> fun (V68) -> ((((V66('erased'))('erased'))(V67))(V68)) end end end(fun (V61) -> ('un--toGroup'(V27, V61)) end))(('un--zipWithIndices'(V60)))) end end end.
'un--indices'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_$a'({'Builtin.MkPair', {'Prelude.Num.MkIntegral', {'Prelude.Num.MkNum', fun (V1) -> fun (V2) -> begin (V3 = (V1 + V2)), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end end end, fun (V4) -> fun (V5) -> begin (V6 = (V4 * V5)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end end end, fun (V7) -> begin (V8 = V7), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end end}, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V11, V12)) end end}, {'Builtin.MkPair', {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V15, V16)) end end}, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V29, V30)) end end}, {'Prelude.Num.MkNeg', {'Prelude.Num.MkNum', fun (V31) -> fun (V32) -> begin (V33 = (V31 + V32)), case ((V33 band 9223372036854775808) =/= 0) of 'true' -> (V33 bor -9223372036854775808); _ -> (V33 band 9223372036854775807) end end end end, fun (V34) -> fun (V35) -> begin (V36 = (V34 * V35)), case ((V36 band 9223372036854775808) =/= 0) of 'true' -> (V36 bor -9223372036854775808); _ -> (V36 band 9223372036854775807) end end end end, fun (V37) -> begin (V38 = V37), case ((V38 band 9223372036854775808) =/= 0) of 'true' -> (V38 bor -9223372036854775808); _ -> (V38 band 9223372036854775807) end end end}, fun (V39) -> begin (V40 = (0 - V39)), case ((V40 band 9223372036854775808) =/= 0) of 'true' -> (V40 bor -9223372036854775808); _ -> (V40 band 9223372036854775807) end end end, fun (V41) -> fun (V42) -> begin (V43 = (V41 - V42)), case ((V43 band 9223372036854775808) =/= 0) of 'true' -> (V43 bor -9223372036854775808); _ -> (V43 band 9223372036854775807) end end end end}}}, 1, begin (V44 = ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0))), case ((V44 band 9223372036854775808) =/= 0) of 'true' -> (V44 bor -9223372036854775808); _ -> (V44 band 9223372036854775807) end end)).
'un--hasTailCalls'(V0, V1) -> case V1 of {'Data.List1.:::', V2, V3} -> case V3 of [] -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V4) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--contains'(V2, V4)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V2, V0)))); _ -> 1 end; _ -> 1 end.
'un--functions'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V2) -> ('nested--7938-6940--in--un--def'(V1, V0, V2)) end, V1))), begin (V4 = ('un--tailCallGroups'(V3))), begin (V28 = ('Idris.Idris2.Libraries.Data.SortedSet':'un--fromList'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V7, V8)) end end}, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V21, V22)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V23, V24)) end end, []}, fun (V25) -> ('Idris.Idris2.Libraries.Data.SortedMap':'un--keys'(case V25 of {'Compiler.ES.TailRec.MkTcGroup', V26, V27} -> V27 end)) end, V4))))), ('un--tailRecOptim'(V4, V28, V0, V3)) end end end.
'un--convertTcGroup'(V0, V1) -> case V1 of {'Compiler.ES.TailRec.MkTcGroup', V2, V3} -> begin (V29 = ('Idris.Idris2.Data.List':'un--sortBy'(fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'un--comparing'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V8, V9)) end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V22, V23)) end end}, fun (V24) -> case V24 of {'Compiler.ES.TailRec.MkTcFunction', V25, V26, V27, V28} -> V26 end end, V4, V5)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--values'(V3))))), begin (V38 = ((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(fun (V30) -> ('un--conAlt'(V1, V30)) end))(V29))), begin (V39 = {'Core.CompileExpr.NmConCase', {'Core.FC.EmptyFC'}, ('nested--7754-6764--in--un--local'(V3, V2, V1, V0, ('un--tcArgName'()))), V38, {'Prelude.Types.Nothing'}}), [{'Compiler.ES.TailRec.MkFunction', ('nested--7754-6763--in--un--tcFun'(V3, V2, V1, V0)), [('un--tcArgName'()) | []], V39} | ((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V40) -> ('nested--7754-6765--in--un--toFun'(V3, V2, V1, V0, V40)) end))(V29))] end end end end.
'un--conAlt'(V0, V1) -> case V0 of {'Compiler.ES.TailRec.MkTcGroup', V2, V3} -> case V1 of {'Compiler.ES.TailRec.MkTcFunction', V4, V5, V6, V7} -> begin (V8 = ('un--tcContinueName'(V2, V5))), {'Core.CompileExpr.MkNConAlt', V8, {'Core.CompileExpr.DATACON'}, {'Prelude.Types.Just', V5}, V6, ('nested--7568-6605--in--un--toTc'(V3, V2, V7, V6, V5, V4, V7))} end end end.
