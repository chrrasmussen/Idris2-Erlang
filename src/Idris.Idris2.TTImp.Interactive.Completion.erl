-module('Idris.Idris2.TTImp.Interactive.Completion').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in completion-8845'/6,
  'case--case block in pragmaCompletion,go-8519'/8,
  'case--pragmaCompletion,go-8488'/6,
  'case--pragmaCompletion-8318'/3,
  'case--oneOfCompletion-8247'/3,
  'case--nameCompletion-8063'/7,
  'case--case block in case block in parseTask-7909'/5,
  'case--case block in case block in parseTask-7703'/5,
  'case--case block in parseTask-7687'/4,
  'case--parseTask-7674'/2,
  'nested--11839-8350--in--un--go'/5,
  'un--pragmaCompletion'/3,
  'un--parseTask'/1,
  'un--oneOfCompletion'/2,
  'un--nameCompletion'/2,
  'un--completion'/2
]).
'case--case block in case block in completion-8845'(V0, V1, V2, V3, V4, V5) -> case V5 of [E0 | E1] -> (fun (V6, V7) -> case V6 of <<"logging"/utf8>> -> case V7 of [] -> fun (V8) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', <<V2/binary, <<":logging"/utf8>>/binary>>, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(('Idris.Idris2.Builtin':'un--fst'(V9))))/binary>> end))(('Idris.Idris2.Core.Options.Log':'un--knownTopics'())))}}} end; _ -> case V7 of [] -> begin (V20 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V17, V18)) end end, []}, fun (V19) -> ('Idris.Idris2.Builtin':'un--fst'(V19)) end, ('Idris.Idris2.Idris.Parser':'un--parserCommandsForHelp'())))), fun (V21) -> {'Prelude.Types.Right', ((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(fun (V22) -> {'Builtin.MkPair', V2, ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V23) -> <<<<":"/utf8>>/binary, V23/binary>> end))(V22))} end))(('un--oneOfCompletion'(V6, V20))))} end end; _ -> case V6 of <<"logging"/utf8>> -> fun (V38) -> case V7 of [E4 | E5] -> (fun (V39, V40) -> case V40 of [] -> {'Prelude.Types.Right', ((begin (V54 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V52, V53)) end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V49) -> {'Builtin.MkPair', <<V2/binary, <<":logging "/utf8>>/binary>>, V49} end))(('un--oneOfCompletion'(V39, ((begin (V46 = fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V44, V45)) end end end end), fun (V47) -> fun (V48) -> ((((V46('erased'))('erased'))(V47))(V48)) end end end(fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(('Idris.Idris2.Builtin':'un--fst'(V41)))) end))(('Idris.Idris2.Core.Options.Log':'un--knownTopics'())))))))}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end(E4, E5)); _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V57) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; _ -> case V7 of [] -> begin (V61 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V58, V59)) end end, []}, fun (V60) -> ('Idris.Idris2.Builtin':'un--fst'(V60)) end, ('Idris.Idris2.Idris.Parser':'un--parserCommandsForHelp'())))), fun (V62) -> {'Prelude.Types.Right', ((begin (V76 = fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V74, V75)) end end end end), fun (V77) -> fun (V78) -> ((((V76('erased'))('erased'))(V77))(V78)) end end end(fun (V63) -> {'Builtin.MkPair', V2, ((begin (V69 = fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V67, V68)) end end end end), fun (V70) -> fun (V71) -> ((((V69('erased'))('erased'))(V70))(V71)) end end end(fun (V64) -> <<<<":"/utf8>>/binary, V64/binary>> end))(V63))} end))(('un--oneOfCompletion'(V6, V61))))} end end; _ -> case V6 of <<"logging"/utf8>> -> fun (V79) -> case V7 of [E2 | E3] -> (fun (V80, V81) -> case V81 of [] -> {'Prelude.Types.Right', ((begin (V95 = fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V93, V94)) end end end end), fun (V96) -> fun (V97) -> ((((V95('erased'))('erased'))(V96))(V97)) end end end(fun (V90) -> {'Builtin.MkPair', <<V2/binary, <<":logging "/utf8>>/binary>>, V90} end))(('un--oneOfCompletion'(V80, ((begin (V87 = fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V85, V86)) end end end end), fun (V88) -> fun (V89) -> ((((V87('erased'))('erased'))(V88))(V89)) end end end(fun (V82) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(('Idris.Idris2.Builtin':'un--fst'(V82)))) end))(('Idris.Idris2.Core.Options.Log':'un--knownTopics'())))))))}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end(E2, E3)); _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V98) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end end(E0, E1)); _ -> fun (V99) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'case--case block in pragmaCompletion,go-8519'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [E0 | E1] -> (fun (V8, V9) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', <<""/utf8>>, ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(('Idris.Idris2.Builtin':'un--fst'(V10)))) end))(V6))}}} end(E0, E1)); _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end.
'case--pragmaCompletion,go-8488'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Data.String.StrCons', V6, V7} -> case V6 of $\x{22} -> begin (V8 = <<('unicode':'characters_to_binary'([$\x{22} | []]))/binary, V7/binary>>), fun (V9) -> ('case--case block in pragmaCompletion,go-8519'(V0, V1, V2, V3, V7, V8, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V10) -> ('Idris.Idris2.Data.String':'un--isPrefixOf'(V7, ('Idris.Idris2.Builtin':'un--fst'(V10)))) end, ('Idris.Idris2.Core.Options.Log':'un--knownTopics'()))), V9)) end end; _ -> fun (V11) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'case--pragmaCompletion-8318'(V0, V1, V2) -> case V2 of [E0 | E1] -> (fun (V3, V4) -> {'Prelude.Types.Just', {'Builtin.MkPair', (begin (V6 = fun (V5) -> V5 end), fun (V7) -> (V6(V7)) end end(<<""/utf8>>)), V2}} end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end.
'case--oneOfCompletion-8247'(V0, V1, V2) -> case V2 of [E0 | E1] -> (fun (V3, V4) -> {'Prelude.Types.Just', V2} end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end.
'case--nameCompletion-8063'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case ('Idris.Idris2.Data.String':'un--isPrefixOf'(V0, ('Idris.Idris2.Core.Name':'un--nameRoot'(V8)))) of 1 -> begin (V41 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V2 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V70 = fun (V46) -> case V45 of {'Prelude.Types.Just', V47} -> case ('Idris.Idris2.Core.Context':'un--visibleIn'(V3, V5, case V47 of {'Core.Context.Context.MkGlobalDef', V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69} -> V57 end)) of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Just', V8}}; 0 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V70 end(V42)) end end end end; 0 -> fun (V71) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end.
'case--case block in case block in parseTask-7909'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V5 of <<""/utf8>> -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', {'Builtin.MkPair', V6, {'TTImp.Interactive.Completion.NameCompletion', V5}}} end end.
'case--case block in case block in parseTask-7703'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of <<""/utf8>> -> {'Prelude.Types.Just', {'Builtin.MkPair', V1, {'TTImp.Interactive.Completion.PragmaCompletion', {'Prelude.Types.Nothing'}, V5}}}; _ -> begin (V7 = <<<<"%"/utf8>>/binary, V5/binary>>), case ('Idris.Idris2.Data.String':'un--break'(fun (V8) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V8)) of 1 -> 0; 0 -> 1 end end, V6)) of {'Builtin.MkPair', V9, V10} -> case ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V7, ('Idris.Idris2.Idris.Syntax.Pragmas':'dn--un--show_Show_KwPragma'(V11)))) end, ('Idris.Idris2.Idris.Syntax.Pragmas':'un--allPragmas'()))) of [E0 | E1] -> (fun (V12, V13) -> case V13 of [] -> {'Prelude.Types.Just', {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V14) -> fun (V15) -> <<V14/binary, V15/binary>> end end, <<""/utf8>>}, fun (V16) -> V16 end, [V1 | [V7 | [V9 | []]]])), {'TTImp.Interactive.Completion.PragmaCompletion', {'Prelude.Types.Just', V12}, V10}}}; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end end end end end.
'case--case block in parseTask-7687'(V0, V1, V2, V3) -> case V3 of {'Data.String.StrCons', V4, V5} -> case V4 of $% -> begin (V6 = <<('unicode':'characters_to_binary'([$% | []]))/binary, V5/binary>>), ('case--case block in case block in parseTask-7703'(V0, V1, V5, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V7) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V7)) end, V5)))) end; $: -> {'Prelude.Types.Just', {'Builtin.MkPair', V1, {'TTImp.Interactive.Completion.CommandCompletion', V5}}}; _ -> ('case--case block in case block in parseTask-7909'(V0, V1, V2, V3, case ('Idris.Idris2.Data.String':'un--break'(fun (V8) -> case case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V8)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V8, case begin (V9 = 160), case ((V9 band 9223372036854775808) =/= 0) of 'true' -> (V9 bor -9223372036854775808); _ -> (V9 band 9223372036854775807) end end of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end)) end of 1 -> 0; 0 -> 1 end end, ('unicode':'characters_to_binary'(('string':'reverse'(V0)))))) of {'Builtin.MkPair', V10, V11} -> {'Builtin.MkPair', ('unicode':'characters_to_binary'(('string':'reverse'(V10)))), ('unicode':'characters_to_binary'(('string':'reverse'(V11))))} end)) end; _ -> ('case--case block in case block in parseTask-7909'(V0, V1, V2, V3, case ('Idris.Idris2.Data.String':'un--break'(fun (V12) -> case case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V12)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V12, case begin (V13 = 160), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end)) end of 1 -> 0; 0 -> 1 end end, ('unicode':'characters_to_binary'(('string':'reverse'(V0)))))) of {'Builtin.MkPair', V14, V15} -> {'Builtin.MkPair', ('unicode':'characters_to_binary'(('string':'reverse'(V14)))), ('unicode':'characters_to_binary'(('string':'reverse'(V15))))} end)) end.
'case--parseTask-7674'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> ('case--case block in parseTask-7687'(V0, V2, V3, ('Idris.Idris2.Data.String':'un--strM'(V3)))) end.
'nested--11839-8350--in--un--go'(V0, V1, V2, V3, V4) -> case V3 of [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Syntax.Pragmas.AName', V7} -> case V4 of {'Builtin.MkPair', V8, V9} -> case V9 of <<""/utf8>> -> begin (V10 = ('un--nameCompletion'(V2, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V18 = fun (V15) -> case V14 of [E2 | E3] -> (fun (V16, V17) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', <<""/utf8>>, V14}}} end(E2, E3)); _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V18 end(V11)) end end end end; _ -> case V4 of {'Builtin.MkPair', V19, V20} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V21) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V21)) of 1 -> 0; 0 -> 1 end end, V20)) of {'Builtin.MkPair', V22, V23} -> begin (V25 = ('nested--11839-8350--in--un--go'(V0, V1, V2, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V24) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V24)) end, V23))))), ((begin (V50 = fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V47, V48, V49)) end end end end end), fun (V51) -> fun (V52) -> ((((V50('erased'))('erased'))(V51))(V52)) end end end((begin (V42 = fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> {'Prelude.Types.Right', (V38(V41))} end end end end end), fun (V43) -> fun (V44) -> ((((V42('erased'))('erased'))(V43))(V44)) end end end((begin (V33 = fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V31, V32)) end end end end), fun (V34) -> fun (V35) -> ((((V33('erased'))('erased'))(V34))(V35)) end end end(fun (V26) -> case V26 of {'Builtin.MkPair', V27, V28} -> {'Builtin.MkPair', <<<<V19/binary, V22/binary>>/binary, V27/binary>>, V28} end end))))))(V25)) end end; _ -> fun (V53) -> case V4 of {'Builtin.MkPair', V54, V55} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; _ -> case V4 of {'Builtin.MkPair', V56, V57} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V58) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V58)) of 1 -> 0; 0 -> 1 end end, V57)) of {'Builtin.MkPair', V59, V60} -> begin (V62 = ('nested--11839-8350--in--un--go'(V0, V1, V2, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V61) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V61)) end, V60))))), ((begin (V87 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V84, V85, V86)) end end end end end), fun (V88) -> fun (V89) -> ((((V87('erased'))('erased'))(V88))(V89)) end end end((begin (V79 = fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> case V76 of {'Prelude.Types.Left', V77} -> {'Prelude.Types.Left', V77}; {'Prelude.Types.Right', V78} -> {'Prelude.Types.Right', (V75(V78))} end end end end end), fun (V80) -> fun (V81) -> ((((V79('erased'))('erased'))(V80))(V81)) end end end((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V63) -> case V63 of {'Builtin.MkPair', V64, V65} -> {'Builtin.MkPair', <<<<V56/binary, V59/binary>>/binary, V64/binary>>, V65} end end))))))(V62)) end end; _ -> fun (V90) -> case V4 of {'Builtin.MkPair', V91, V92} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; {'Idris.Syntax.Pragmas.AnOnOff'} -> case V4 of {'Builtin.MkPair', V93, V94} -> case V94 of <<""/utf8>> -> fun (V95) -> {'Prelude.Types.Right', ((begin (V101 = fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V99, V100)) end end end end), fun (V102) -> fun (V103) -> ((((V101('erased'))('erased'))(V102))(V103)) end end end(fun (V96) -> {'Builtin.MkPair', <<""/utf8>>, V96} end))(('un--oneOfCompletion'(V93, [<<"on"/utf8>> | [<<"off"/utf8>> | []]]))))} end; _ -> case V4 of {'Builtin.MkPair', V104, V105} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V106) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V106)) of 1 -> 0; 0 -> 1 end end, V105)) of {'Builtin.MkPair', V107, V108} -> begin (V110 = ('nested--11839-8350--in--un--go'(V0, V1, V2, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V109) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V109)) end, V108))))), ((begin (V135 = fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V132, V133, V134)) end end end end end), fun (V136) -> fun (V137) -> ((((V135('erased'))('erased'))(V136))(V137)) end end end((begin (V127 = fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> {'Prelude.Types.Right', (V123(V126))} end end end end end), fun (V128) -> fun (V129) -> ((((V127('erased'))('erased'))(V128))(V129)) end end end((begin (V118 = fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V116, V117)) end end end end), fun (V119) -> fun (V120) -> ((((V118('erased'))('erased'))(V119))(V120)) end end end(fun (V111) -> case V111 of {'Builtin.MkPair', V112, V113} -> {'Builtin.MkPair', <<<<V104/binary, V107/binary>>/binary, V112/binary>>, V113} end end))))))(V110)) end end; _ -> fun (V138) -> case V4 of {'Builtin.MkPair', V139, V140} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; _ -> case V4 of {'Builtin.MkPair', V141, V142} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V143) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V143)) of 1 -> 0; 0 -> 1 end end, V142)) of {'Builtin.MkPair', V144, V145} -> begin (V147 = ('nested--11839-8350--in--un--go'(V0, V1, V2, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V146) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V146)) end, V145))))), ((begin (V172 = fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V169, V170, V171)) end end end end end), fun (V173) -> fun (V174) -> ((((V172('erased'))('erased'))(V173))(V174)) end end end((begin (V164 = fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> {'Prelude.Types.Right', (V160(V163))} end end end end end), fun (V165) -> fun (V166) -> ((((V164('erased'))('erased'))(V165))(V166)) end end end((begin (V155 = fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V153, V154)) end end end end), fun (V156) -> fun (V157) -> ((((V155('erased'))('erased'))(V156))(V157)) end end end(fun (V148) -> case V148 of {'Builtin.MkPair', V149, V150} -> {'Builtin.MkPair', <<<<V141/binary, V144/binary>>/binary, V149/binary>>, V150} end end))))))(V147)) end end; _ -> fun (V175) -> case V4 of {'Builtin.MkPair', V176, V177} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; {'Idris.Syntax.Pragmas.AnOptionalLoggingTopic'} -> case V4 of {'Builtin.MkPair', V178, V179} -> case V179 of <<""/utf8>> -> ('case--pragmaCompletion,go-8488'(V0, V1, V2, V6, V178, ('Idris.Idris2.Data.String':'un--strM'(V178)))); _ -> case V4 of {'Builtin.MkPair', V180, V181} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V182) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V182)) of 1 -> 0; 0 -> 1 end end, V181)) of {'Builtin.MkPair', V183, V184} -> begin (V186 = ('nested--11839-8350--in--un--go'(V0, V1, V2, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V185) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V185)) end, V184))))), ((begin (V211 = fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> fun (V210) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V208, V209, V210)) end end end end end), fun (V212) -> fun (V213) -> ((((V211('erased'))('erased'))(V212))(V213)) end end end((begin (V203 = fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> {'Prelude.Types.Right', (V199(V202))} end end end end end), fun (V204) -> fun (V205) -> ((((V203('erased'))('erased'))(V204))(V205)) end end end((begin (V194 = fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V192, V193)) end end end end), fun (V195) -> fun (V196) -> ((((V194('erased'))('erased'))(V195))(V196)) end end end(fun (V187) -> case V187 of {'Builtin.MkPair', V188, V189} -> {'Builtin.MkPair', <<<<V180/binary, V183/binary>>/binary, V188/binary>>, V189} end end))))))(V186)) end end; _ -> fun (V214) -> case V4 of {'Builtin.MkPair', V215, V216} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; _ -> case V4 of {'Builtin.MkPair', V217, V218} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V219) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V219)) of 1 -> 0; 0 -> 1 end end, V218)) of {'Builtin.MkPair', V220, V221} -> begin (V223 = ('nested--11839-8350--in--un--go'(V0, V1, V2, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V222) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V222)) end, V221))))), ((begin (V248 = fun (V243) -> fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V245, V246, V247)) end end end end end), fun (V249) -> fun (V250) -> ((((V248('erased'))('erased'))(V249))(V250)) end end end((begin (V240 = fun (V234) -> fun (V235) -> fun (V236) -> fun (V237) -> case V237 of {'Prelude.Types.Left', V238} -> {'Prelude.Types.Left', V238}; {'Prelude.Types.Right', V239} -> {'Prelude.Types.Right', (V236(V239))} end end end end end), fun (V241) -> fun (V242) -> ((((V240('erased'))('erased'))(V241))(V242)) end end end((begin (V231 = fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V229, V230)) end end end end), fun (V232) -> fun (V233) -> ((((V231('erased'))('erased'))(V232))(V233)) end end end(fun (V224) -> case V224 of {'Builtin.MkPair', V225, V226} -> {'Builtin.MkPair', <<<<V217/binary, V220/binary>>/binary, V225/binary>>, V226} end end))))))(V223)) end end; _ -> fun (V251) -> case V4 of {'Builtin.MkPair', V252, V253} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; {'Idris.Syntax.Pragmas.ALangExt'} -> case V4 of {'Builtin.MkPair', V254, V255} -> case V255 of <<""/utf8>> -> fun (V256) -> {'Prelude.Types.Right', ((begin (V270 = fun (V266) -> fun (V267) -> fun (V268) -> fun (V269) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V268, V269)) end end end end), fun (V271) -> fun (V272) -> ((((V270('erased'))('erased'))(V271))(V272)) end end end(fun (V265) -> {'Builtin.MkPair', <<""/utf8>>, V265} end))(('un--oneOfCompletion'(V254, ((begin (V262 = fun (V258) -> fun (V259) -> fun (V260) -> fun (V261) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V260, V261)) end end end end), fun (V263) -> fun (V264) -> ((((V262('erased'))('erased'))(V263))(V264)) end end end(fun (V257) -> ('Idris.Idris2.Idris.Syntax.Pragmas':'dn--un--show_Show_LangExt'(V257)) end))(('Idris.Idris2.Idris.Syntax.Pragmas':'un--allLangExts'())))))))} end; _ -> case V4 of {'Builtin.MkPair', V273, V274} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V275) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V275)) of 1 -> 0; 0 -> 1 end end, V274)) of {'Builtin.MkPair', V276, V277} -> begin (V279 = ('nested--11839-8350--in--un--go'(V0, V1, V2, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V278) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V278)) end, V277))))), ((begin (V304 = fun (V299) -> fun (V300) -> fun (V301) -> fun (V302) -> fun (V303) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V301, V302, V303)) end end end end end), fun (V305) -> fun (V306) -> ((((V304('erased'))('erased'))(V305))(V306)) end end end((begin (V296 = fun (V290) -> fun (V291) -> fun (V292) -> fun (V293) -> case V293 of {'Prelude.Types.Left', V294} -> {'Prelude.Types.Left', V294}; {'Prelude.Types.Right', V295} -> {'Prelude.Types.Right', (V292(V295))} end end end end end), fun (V297) -> fun (V298) -> ((((V296('erased'))('erased'))(V297))(V298)) end end end((begin (V287 = fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V285, V286)) end end end end), fun (V288) -> fun (V289) -> ((((V287('erased'))('erased'))(V288))(V289)) end end end(fun (V280) -> case V280 of {'Builtin.MkPair', V281, V282} -> {'Builtin.MkPair', <<<<V273/binary, V276/binary>>/binary, V281/binary>>, V282} end end))))))(V279)) end end; _ -> fun (V307) -> case V4 of {'Builtin.MkPair', V308, V309} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; _ -> case V4 of {'Builtin.MkPair', V310, V311} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V312) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V312)) of 1 -> 0; 0 -> 1 end end, V311)) of {'Builtin.MkPair', V313, V314} -> begin (V316 = ('nested--11839-8350--in--un--go'(V0, V1, V2, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V315) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V315)) end, V314))))), ((begin (V341 = fun (V336) -> fun (V337) -> fun (V338) -> fun (V339) -> fun (V340) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V338, V339, V340)) end end end end end), fun (V342) -> fun (V343) -> ((((V341('erased'))('erased'))(V342))(V343)) end end end((begin (V333 = fun (V327) -> fun (V328) -> fun (V329) -> fun (V330) -> case V330 of {'Prelude.Types.Left', V331} -> {'Prelude.Types.Left', V331}; {'Prelude.Types.Right', V332} -> {'Prelude.Types.Right', (V329(V332))} end end end end end), fun (V334) -> fun (V335) -> ((((V333('erased'))('erased'))(V334))(V335)) end end end((begin (V324 = fun (V320) -> fun (V321) -> fun (V322) -> fun (V323) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V322, V323)) end end end end), fun (V325) -> fun (V326) -> ((((V324('erased'))('erased'))(V325))(V326)) end end end(fun (V317) -> case V317 of {'Builtin.MkPair', V318, V319} -> {'Builtin.MkPair', <<<<V310/binary, V313/binary>>/binary, V318/binary>>, V319} end end))))))(V316)) end end; _ -> fun (V344) -> case V4 of {'Builtin.MkPair', V345, V346} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; {'Idris.Syntax.Pragmas.ATotalityLevel'} -> case V4 of {'Builtin.MkPair', V347, V348} -> case V348 of <<""/utf8>> -> fun (V349) -> {'Prelude.Types.Right', ((begin (V355 = fun (V351) -> fun (V352) -> fun (V353) -> fun (V354) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V353, V354)) end end end end), fun (V356) -> fun (V357) -> ((((V355('erased'))('erased'))(V356))(V357)) end end end(fun (V350) -> {'Builtin.MkPair', <<""/utf8>>, V350} end))(('un--oneOfCompletion'(V347, [<<"partial"/utf8>> | [<<"covering"/utf8>> | [<<"total"/utf8>> | []]]]))))} end; _ -> case V4 of {'Builtin.MkPair', V358, V359} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V360) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V360)) of 1 -> 0; 0 -> 1 end end, V359)) of {'Builtin.MkPair', V361, V362} -> begin (V364 = ('nested--11839-8350--in--un--go'(V0, V1, V2, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V363) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V363)) end, V362))))), ((begin (V389 = fun (V384) -> fun (V385) -> fun (V386) -> fun (V387) -> fun (V388) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V386, V387, V388)) end end end end end), fun (V390) -> fun (V391) -> ((((V389('erased'))('erased'))(V390))(V391)) end end end((begin (V381 = fun (V375) -> fun (V376) -> fun (V377) -> fun (V378) -> case V378 of {'Prelude.Types.Left', V379} -> {'Prelude.Types.Left', V379}; {'Prelude.Types.Right', V380} -> {'Prelude.Types.Right', (V377(V380))} end end end end end), fun (V382) -> fun (V383) -> ((((V381('erased'))('erased'))(V382))(V383)) end end end((begin (V372 = fun (V368) -> fun (V369) -> fun (V370) -> fun (V371) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V370, V371)) end end end end), fun (V373) -> fun (V374) -> ((((V372('erased'))('erased'))(V373))(V374)) end end end(fun (V365) -> case V365 of {'Builtin.MkPair', V366, V367} -> {'Builtin.MkPair', <<<<V358/binary, V361/binary>>/binary, V366/binary>>, V367} end end))))))(V364)) end end; _ -> fun (V392) -> case V4 of {'Builtin.MkPair', V393, V394} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; _ -> case V4 of {'Builtin.MkPair', V395, V396} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V397) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V397)) of 1 -> 0; 0 -> 1 end end, V396)) of {'Builtin.MkPair', V398, V399} -> begin (V401 = ('nested--11839-8350--in--un--go'(V0, V1, V2, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V400) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V400)) end, V399))))), ((begin (V426 = fun (V421) -> fun (V422) -> fun (V423) -> fun (V424) -> fun (V425) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V423, V424, V425)) end end end end end), fun (V427) -> fun (V428) -> ((((V426('erased'))('erased'))(V427))(V428)) end end end((begin (V418 = fun (V412) -> fun (V413) -> fun (V414) -> fun (V415) -> case V415 of {'Prelude.Types.Left', V416} -> {'Prelude.Types.Left', V416}; {'Prelude.Types.Right', V417} -> {'Prelude.Types.Right', (V414(V417))} end end end end end), fun (V419) -> fun (V420) -> ((((V418('erased'))('erased'))(V419))(V420)) end end end((begin (V409 = fun (V405) -> fun (V406) -> fun (V407) -> fun (V408) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V407, V408)) end end end end), fun (V410) -> fun (V411) -> ((((V409('erased'))('erased'))(V410))(V411)) end end end(fun (V402) -> case V402 of {'Builtin.MkPair', V403, V404} -> {'Builtin.MkPair', <<<<V395/binary, V398/binary>>/binary, V403/binary>>, V404} end end))))))(V401)) end end; _ -> fun (V429) -> case V4 of {'Builtin.MkPair', V430, V431} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end; _ -> case V4 of {'Builtin.MkPair', V432, V433} -> case ('Idris.Idris2.Data.String':'un--break'(fun (V434) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V434)) of 1 -> 0; 0 -> 1 end end, V433)) of {'Builtin.MkPair', V435, V436} -> begin (V438 = ('nested--11839-8350--in--un--go'(V0, V1, V2, V6, ('Idris.Idris2.Data.String':'un--break'(fun (V437) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V437)) end, V436))))), ((begin (V463 = fun (V458) -> fun (V459) -> fun (V460) -> fun (V461) -> fun (V462) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V460, V461, V462)) end end end end end), fun (V464) -> fun (V465) -> ((((V463('erased'))('erased'))(V464))(V465)) end end end((begin (V455 = fun (V449) -> fun (V450) -> fun (V451) -> fun (V452) -> case V452 of {'Prelude.Types.Left', V453} -> {'Prelude.Types.Left', V453}; {'Prelude.Types.Right', V454} -> {'Prelude.Types.Right', (V451(V454))} end end end end end), fun (V456) -> fun (V457) -> ((((V455('erased'))('erased'))(V456))(V457)) end end end((begin (V446 = fun (V442) -> fun (V443) -> fun (V444) -> fun (V445) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V444, V445)) end end end end), fun (V447) -> fun (V448) -> ((((V446('erased'))('erased'))(V447))(V448)) end end end(fun (V439) -> case V439 of {'Builtin.MkPair', V440, V441} -> {'Builtin.MkPair', <<<<V432/binary, V435/binary>>/binary, V440/binary>>, V441} end end))))))(V438)) end end; _ -> fun (V466) -> case V4 of {'Builtin.MkPair', V467, V468} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end end(E0, E1)); _ -> fun (V469) -> case V4 of {'Builtin.MkPair', V470, V471} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end.
'un--pragmaCompletion'(V0, V1, V2) -> case V1 of {'Prelude.Types.Nothing'} -> fun (V3) -> {'Prelude.Types.Right', ('case--pragmaCompletion-8318'(V2, V0, ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end, ('Idris.Idris2.Idris.Syntax.Pragmas':'un--allPragmas'()), fun (V6) -> begin (V7 = ('Idris.Idris2.Idris.Syntax.Pragmas':'dn--un--show_Show_KwPragma'(V6))), ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V10, V11)) end end end end, fun (V12) -> fun (V13) -> {'Prelude.Types.Just', V13} end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V16, V17)) end end end end}, fun (V18) -> {'Prelude.Types.Nothing'} end, fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V20, V21)) end end end}, ('Idris.Idris2.Data.String':'un--isPrefixOf'(<<<<"%"/utf8>>/binary, V2/binary>>, V7)))), fun (V22) -> {'Prelude.Types.Just', V7} end)) end end))))} end; {'Prelude.Types.Just', V23} -> ('nested--11839-8350--in--un--go'(V23, V2, V0, ('Idris.Idris2.Idris.Syntax.Pragmas':'un--pragmaArgs'(V23)), ('Idris.Idris2.Data.String':'un--break'(fun (V24) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V24)) end, V2)))) end.
'un--parseTask'(V0) -> ('case--parseTask-7674'(V0, ('Idris.Idris2.Data.String':'un--break'(fun (V1) -> case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V1)) of 1 -> 0; 0 -> 1 end end, V0)))).
'un--oneOfCompletion'(V0, V1) -> ('case--oneOfCompletion-8247'(V1, V0, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V2) -> ('Idris.Idris2.Data.String':'un--isPrefixOf'(V0, V2)) end, V1)))).
'un--nameCompletion'(V0, V1) -> begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"ide-mode.completion"/utf8>>, 30, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> <<V2/binary, V3/binary>> end end, <<""/utf8>>}, fun (V4) -> V4 end, [<<"Looking at name completions for "/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V1)) | []]])) end))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V123 = begin (V15 = begin (V10 = V0), fun (V11) -> begin (V14 = (begin (V12 = V10), fun (V13) -> ('erlang':'get'(V12)) end end(V11))), {'Prelude.Types.Right', V14} end end end), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V122 = begin (V52 = case V19 of {'Core.Context.MkDefs', V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51} -> V22 end), begin (V103 = begin (V85 = ('Idris.Idris2.Core.Context':'un--allNames'(case V19 of {'Core.Context.MkDefs', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84} -> V53 end))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V102 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.Core':'un--mapMaybeM'(V90, V91)) end end, V89, fun (V92) -> begin (V96 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"ide-mode.completion"/utf8>>, 50, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V93) -> fun (V94) -> <<V93/binary, V94/binary>> end end, <<""/utf8>>}, fun (V95) -> V95 end, [<<"Looking at "/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V92)) | []]])) end))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V101 = ('case--nameCompletion-8063'(V1, V0, V19, V52, V89, V92, ('Idris.Idris2.Core.Name':'un--splitNS'(V92))))), V101 end(V97)) end end end end end))), V102 end(V86)) end end end end), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V121 = fun (V108) -> {'Prelude.Types.Right', ((begin (V118 = fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V116, V117)) end end end end), fun (V119) -> fun (V120) -> ((((V118('erased'))('erased'))(V119))(V120)) end end end(fun (V113) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V113)) end))(('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V111, V112)) end end}, V107))))} end), V121 end(V104)) end end end end end), V122 end(V16)) end end end end), V123 end(V6)) end end end end.
'un--completion'(V0, V1) -> case ('un--parseTask'(V1)) of {'Prelude.Types.Just', V2} -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'TTImp.Interactive.Completion.NameCompletion', V5} -> begin (V6 = ('un--nameCompletion'(V0, V5))), ((begin (V22 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V19, V20, V21)) end end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end((begin (V14 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> {'Prelude.Types.Right', (V10(V13))} end end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V7) -> {'Prelude.Types.Just', {'Builtin.MkPair', V3, V7}} end))))(V6)) end; {'TTImp.Interactive.Completion.PragmaCompletion', V25, V26} -> begin (V27 = ('un--pragmaCompletion'(V0, V25, V26))), ((begin (V52 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V49, V50, V51)) end end end end end), fun (V53) -> fun (V54) -> ((((V52('erased'))('erased'))(V53))(V54)) end end end((begin (V44 = fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> {'Prelude.Types.Right', (V40(V43))} end end end end end), fun (V45) -> fun (V46) -> ((((V44('erased'))('erased'))(V45))(V46)) end end end((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(fun (V28) -> case V28 of {'Builtin.MkPair', V29, V30} -> {'Builtin.MkPair', <<V3/binary, V29/binary>>, V30} end end))))))(V27)) end; {'TTImp.Interactive.Completion.CommandCompletion', V55} -> begin (V56 = {'TTImp.Interactive.Completion.CommandCompletion', V55}), ('case--case block in case block in completion-8845'(V1, V0, V3, V55, V56, ('Idris.Idris2.Data.String':'un--words'(V55)))) end end; _ -> fun (V57) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V58) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
