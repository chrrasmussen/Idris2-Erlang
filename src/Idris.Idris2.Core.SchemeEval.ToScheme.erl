-module('Idris.Idris2.Core.SchemeEval.ToScheme').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--toScheme_Scheme_UserName'/1,
  'dn--un--toScheme_Scheme_RigCount'/1,
  'dn--un--toScheme_Scheme_OriginDesc'/1,
  'dn--un--toScheme_Scheme_Namespace'/1,
  'dn--un--toScheme_Scheme_Name'/1,
  'dn--un--toScheme_Scheme_ModuleIdent'/1,
  'dn--un--toScheme_Scheme_LazyReason'/1,
  'dn--un--toScheme_Scheme_FC'/1,
  'dn--un--fromScheme_Scheme_UserName'/1,
  'dn--un--fromScheme_Scheme_RigCount'/1,
  'dn--un--fromScheme_Scheme_OriginDesc'/1,
  'dn--un--fromScheme_Scheme_Namespace'/1,
  'dn--un--fromScheme_Scheme_Name'/1,
  'dn--un--fromScheme_Scheme_ModuleIdent'/1,
  'dn--un--fromScheme_Scheme_LazyReason'/1,
  'dn--un--fromScheme_Scheme_FC'/1,
  'dn--un--__Impl_Scheme_UserName'/0,
  'dn--un--__Impl_Scheme_RigCount'/0,
  'dn--un--__Impl_Scheme_OriginDesc'/0,
  'dn--un--__Impl_Scheme_Namespace'/0,
  'dn--un--__Impl_Scheme_Name'/0,
  'dn--un--__Impl_Scheme_ModuleIdent'/0,
  'dn--un--__Impl_Scheme_LazyReason'/0,
  'dn--un--__Impl_Scheme_FC'/0,
  'un--toSchemeWhy'/1,
  'un--toSchemePi'/1
]).
'dn--un--toScheme_Scheme_UserName'(V0) -> case V0 of {'Core.Name.Basic', V1} -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_String'(V1)); {'Core.Name.Field', V2} -> {'Libraries.Utils.Scheme.Vector', 5, [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_String'(V2)) | []]}; {'Core.Name.Underscore'} -> {'Libraries.Utils.Scheme.Vector', 9, []} end.
'dn--un--toScheme_Scheme_RigCount'(V0) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V1) -> fun (V2) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V1, V2)) end end, 0, fun (V3) -> fun (V4) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V3, V4)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V7, V8)) end end}}, V0)) of 1 -> {'Libraries.Utils.Scheme.IntegerVal', 0}; 0 -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V9, V10)) end end, 0, fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V11, V12)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V15, V16)) end end}}, V0)) of 1 -> {'Libraries.Utils.Scheme.IntegerVal', 1}; 0 -> {'Libraries.Utils.Scheme.IntegerVal', 2} end end.
'dn--un--toScheme_Scheme_OriginDesc'(V0) -> case V0 of {'Core.FC.PhysicalIdrSrc', V1} -> {'Libraries.Utils.Scheme.Vector', 0, [('dn--un--toScheme_Scheme_ModuleIdent'(V1)) | []]}; {'Core.FC.PhysicalPkgSrc', V2} -> {'Libraries.Utils.Scheme.Vector', 1, [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_String'(V2)) | []]}; {'Core.FC.Virtual', V3} -> {'Libraries.Utils.Scheme.Null'} end.
'dn--un--toScheme_Scheme_Namespace'(V0) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_(List $a)'({'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V1) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_String'(V1)) end, fun (V2) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_String'(V2)) end}, ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V0)))).
'dn--un--toScheme_Scheme_Name'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> {'Libraries.Utils.Scheme.Vector', 0, [('dn--un--toScheme_Scheme_Namespace'(V1)) | [('dn--un--toScheme_Scheme_Name'(V2)) | []]]}; {'Core.Name.UN', V3} -> ('dn--un--toScheme_Scheme_UserName'(V3)); {'Core.Name.MN', V4, V5} -> {'Libraries.Utils.Scheme.Vector', 2, [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_String'(V4)) | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V5)) | []]]}; {'Core.Name.PV', V6, V7} -> {'Libraries.Utils.Scheme.Vector', 3, [('dn--un--toScheme_Scheme_Name'(V6)) | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V7)) | []]]}; {'Core.Name.DN', V8, V9} -> {'Libraries.Utils.Scheme.Vector', 4, [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_String'(V8)) | [('dn--un--toScheme_Scheme_Name'(V9)) | []]]}; {'Core.Name.Nested', V10, V11} -> {'Libraries.Utils.Scheme.Vector', 6, [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V12) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V12)) end, fun (V13) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V13)) end}, {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V14) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V14)) end, fun (V15) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V15)) end}}, V10)) | [('dn--un--toScheme_Scheme_Name'(V11)) | []]]}; {'Core.Name.CaseBlock', V16, V17} -> {'Libraries.Utils.Scheme.Vector', 7, [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_String'(V16)) | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V17)) | []]]}; {'Core.Name.WithBlock', V18, V19} -> {'Libraries.Utils.Scheme.Vector', 8, [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_String'(V18)) | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V19)) | []]]}; {'Core.Name.Resolved', V20} -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V20)) end.
'dn--un--toScheme_Scheme_ModuleIdent'(V0) -> ('dn--un--toScheme_Scheme_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V0)))).
'dn--un--toScheme_Scheme_LazyReason'(V0) -> case V0 of 0 -> {'Libraries.Utils.Scheme.IntegerVal', 0}; 1 -> {'Libraries.Utils.Scheme.IntegerVal', 1}; 2 -> {'Libraries.Utils.Scheme.IntegerVal', 2} end.
'dn--un--toScheme_Scheme_FC'(V0) -> case V0 of {'Core.FC.MkFC', V1, V2, V3} -> {'Libraries.Utils.Scheme.Vector', 0, [('dn--un--toScheme_Scheme_OriginDesc'(V1)) | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V4) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V4)) end, fun (V5) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V5)) end}, {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V6) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V6)) end, fun (V7) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V7)) end}}, V2)) | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V8) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V8)) end, fun (V9) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V9)) end}, {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V10) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V10)) end, fun (V11) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V11)) end}}, V3)) | []]]]}; {'Core.FC.MkVirtualFC', V12, V13, V14} -> {'Libraries.Utils.Scheme.Vector', 1, [('dn--un--toScheme_Scheme_OriginDesc'(V12)) | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V15) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V15)) end, fun (V16) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V16)) end}, {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V17) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V17)) end, fun (V18) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V18)) end}}, V13)) | [('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V19) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V19)) end, fun (V20) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V20)) end}, {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V21) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V21)) end, fun (V22) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V22)) end}}, V14)) | []]]]}; {'Core.FC.EmptyFC'} -> {'Libraries.Utils.Scheme.Null'} end.
'dn--un--fromScheme_Scheme_UserName'(V0) -> case V0 of {'Libraries.Utils.Scheme.Vector', V1, V2} -> case V1 of 5 -> case V2 of [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_String'(V3)), fun (V5) -> {'Prelude.Types.Just', {'Core.Name.Field', V5}} end)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; 9 -> case V2 of [] -> {'Prelude.Types.Just', {'Core.Name.Underscore'}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Libraries.Utils.Scheme.StringVal', V6} -> {'Prelude.Types.Just', {'Core.Name.Basic', V6}}; _ -> {'Prelude.Types.Nothing'} end.
'dn--un--fromScheme_Scheme_RigCount'(V0) -> case V0 of {'Libraries.Utils.Scheme.IntegerVal', V1} -> case V1 of 0 -> {'Prelude.Types.Just', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V2) -> fun (V3) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V2, V3)) end end, 0, fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V4, V5)) end end, 1}))}; 1 -> {'Prelude.Types.Just', ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V6, V7)) end end, 0, fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V8, V9)) end end, 1}))}; _ -> {'Prelude.Types.Just', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'())} end; _ -> {'Prelude.Types.Just', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'())} end.
'dn--un--fromScheme_Scheme_OriginDesc'(V0) -> case V0 of {'Libraries.Utils.Scheme.Vector', V1, V2} -> case V1 of 0 -> case V2 of [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('dn--un--fromScheme_Scheme_ModuleIdent'(V3)), fun (V5) -> {'Prelude.Types.Just', {'Core.FC.PhysicalIdrSrc', V5}} end)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; 1 -> case V2 of [E2 | E3] -> (fun (V6, V7) -> case V7 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_String'(V6)), fun (V8) -> {'Prelude.Types.Just', {'Core.FC.PhysicalPkgSrc', V8}} end)); _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Just', {'Core.FC.Virtual', {'Core.FC.Interactive'}}} end.
'dn--un--fromScheme_Scheme_Namespace'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_(List $a)'({'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V1) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_String'(V1)) end, fun (V2) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_String'(V2)) end}, V0)), fun (V3) -> {'Prelude.Types.Just', V3} end)).
'dn--un--fromScheme_Scheme_Name'(V0) -> case V0 of {'Libraries.Utils.Scheme.Vector', V1, V2} -> case V1 of 0 -> case V2 of [E0 | E1] -> (fun (V3, V4) -> case V4 of [E2 | E3] -> (fun (V5, V6) -> case V6 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('dn--un--fromScheme_Scheme_Namespace'(V3)), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('dn--un--fromScheme_Scheme_Name'(V5)), fun (V8) -> {'Prelude.Types.Just', {'Core.Name.NS', V7, V8}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; 2 -> case V2 of [E4 | E5] -> (fun (V9, V10) -> case V10 of [E6 | E7] -> (fun (V11, V12) -> case V12 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_String'(V9)), fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V11)), fun (V14) -> {'Prelude.Types.Just', {'Core.Name.MN', V13, V14}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E6, E7)); _ -> {'Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Prelude.Types.Nothing'} end; 3 -> case V2 of [E8 | E9] -> (fun (V15, V16) -> case V16 of [E10 | E11] -> (fun (V17, V18) -> case V18 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('dn--un--fromScheme_Scheme_Name'(V15)), fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V17)), fun (V20) -> {'Prelude.Types.Just', {'Core.Name.PV', V19, V20}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Prelude.Types.Nothing'} end end(E8, E9)); _ -> {'Prelude.Types.Nothing'} end; 4 -> case V2 of [E12 | E13] -> (fun (V21, V22) -> case V22 of [E14 | E15] -> (fun (V23, V24) -> case V24 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_String'(V21)), fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('dn--un--fromScheme_Scheme_Name'(V23)), fun (V26) -> {'Prelude.Types.Just', {'Core.Name.DN', V25, V26}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E14, E15)); _ -> {'Prelude.Types.Nothing'} end end(E12, E13)); _ -> {'Prelude.Types.Nothing'} end; 5 -> case V2 of [E16 | E17] -> (fun (V27, V28) -> case V28 of [E18 | E19] -> (fun (V29, V30) -> case V30 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_String'(V27)), fun (V31) -> {'Prelude.Types.Just', {'Core.Name.UN', {'Core.Name.Field', V31}}} end)); _ -> {'Prelude.Types.Nothing'} end end(E18, E19)); _ -> {'Prelude.Types.Nothing'} end end(E16, E17)); _ -> {'Prelude.Types.Nothing'} end; 6 -> case V2 of [E20 | E21] -> (fun (V32, V33) -> case V33 of [E22 | E23] -> (fun (V34, V35) -> case V35 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V36) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V36)) end, fun (V37) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V37)) end}, {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V38) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--toScheme_Scheme_Int'(V38)) end, fun (V39) -> ('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V39)) end}}, V32)), fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('dn--un--fromScheme_Scheme_Name'(V34)), fun (V41) -> {'Prelude.Types.Just', {'Core.Name.Nested', V40, V41}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E22, E23)); _ -> {'Prelude.Types.Nothing'} end end(E20, E21)); _ -> {'Prelude.Types.Nothing'} end; 7 -> case V2 of [E24 | E25] -> (fun (V42, V43) -> case V43 of [E26 | E27] -> (fun (V44, V45) -> case V45 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_String'(V42)), fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V44)), fun (V47) -> {'Prelude.Types.Just', {'Core.Name.CaseBlock', V46, V47}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E26, E27)); _ -> {'Prelude.Types.Nothing'} end end(E24, E25)); _ -> {'Prelude.Types.Nothing'} end; 8 -> case V2 of [E28 | E29] -> (fun (V48, V49) -> case V49 of [E30 | E31] -> (fun (V50, V51) -> case V51 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_String'(V48)), fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Utils.Scheme':'dn--un--fromScheme_Scheme_Int'(V50)), fun (V53) -> {'Prelude.Types.Just', {'Core.Name.WithBlock', V52, V53}} end)) end)); _ -> {'Prelude.Types.Nothing'} end end(E30, E31)); _ -> {'Prelude.Types.Nothing'} end end(E28, E29)); _ -> {'Prelude.Types.Nothing'} end; 9 -> case V2 of [] -> {'Prelude.Types.Just', {'Core.Name.UN', {'Core.Name.Underscore'}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Libraries.Utils.Scheme.IntegerVal', V54} -> {'Prelude.Types.Just', {'Core.Name.Resolved', begin (V55 = V54), case ((V55 band 9223372036854775808) =/= 0) of 'true' -> (V55 bor -9223372036854775808); _ -> (V55 band 9223372036854775807) end end}}; {'Libraries.Utils.Scheme.StringVal', V56} -> {'Prelude.Types.Just', {'Core.Name.UN', {'Core.Name.Basic', V56}}}; _ -> {'Prelude.Types.Nothing'} end.
'dn--un--fromScheme_Scheme_ModuleIdent'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('dn--un--fromScheme_Scheme_Namespace'(V0)), fun (V1) -> {'Prelude.Types.Just', ('Idris.Idris2.Core.Name.Namespace':'un--nsAsModuleIdent'(V1))} end)).
'dn--un--fromScheme_Scheme_LazyReason'(V0) -> case V0 of {'Libraries.Utils.Scheme.IntegerVal', V1} -> case V1 of 0 -> {'Prelude.Types.Just', 0}; 1 -> {'Prelude.Types.Just', 1}; _ -> {'Prelude.Types.Just', 2} end; _ -> {'Prelude.Types.Just', 2} end.
'dn--un--fromScheme_Scheme_FC'(V0) -> {'Prelude.Types.Just', {'Core.FC.EmptyFC'}}.
'dn--un--__Impl_Scheme_UserName'() -> {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V0) -> ('dn--un--toScheme_Scheme_UserName'(V0)) end, fun (V1) -> ('dn--un--fromScheme_Scheme_UserName'(V1)) end}.
'dn--un--__Impl_Scheme_RigCount'() -> {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V0) -> ('dn--un--toScheme_Scheme_RigCount'(V0)) end, fun (V1) -> ('dn--un--fromScheme_Scheme_RigCount'(V1)) end}.
'dn--un--__Impl_Scheme_OriginDesc'() -> {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V0) -> ('dn--un--toScheme_Scheme_OriginDesc'(V0)) end, fun (V1) -> ('dn--un--fromScheme_Scheme_OriginDesc'(V1)) end}.
'dn--un--__Impl_Scheme_Namespace'() -> {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V0) -> ('dn--un--toScheme_Scheme_Namespace'(V0)) end, fun (V1) -> ('dn--un--fromScheme_Scheme_Namespace'(V1)) end}.
'dn--un--__Impl_Scheme_Name'() -> {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V0) -> ('dn--un--toScheme_Scheme_Name'(V0)) end, fun (V1) -> ('dn--un--fromScheme_Scheme_Name'(V1)) end}.
'dn--un--__Impl_Scheme_ModuleIdent'() -> {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V0) -> ('dn--un--toScheme_Scheme_ModuleIdent'(V0)) end, fun (V1) -> ('dn--un--fromScheme_Scheme_ModuleIdent'(V1)) end}.
'dn--un--__Impl_Scheme_LazyReason'() -> {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V0) -> ('dn--un--toScheme_Scheme_LazyReason'(V0)) end, fun (V1) -> ('dn--un--fromScheme_Scheme_LazyReason'(V1)) end}.
'dn--un--__Impl_Scheme_FC'() -> {'Libraries.Utils.Scheme.dn--un--__mkScheme', fun (V0) -> ('dn--un--toScheme_Scheme_FC'(V0)) end, fun (V1) -> ('dn--un--fromScheme_Scheme_FC'(V1)) end}.
'un--toSchemeWhy'(V0) -> case V0 of {'Core.TT.Impossible'} -> {'Libraries.Utils.Scheme.IntegerVal', 0}; {'Core.TT.Placeholder'} -> {'Libraries.Utils.Scheme.IntegerVal', 1}; {'Core.TT.Dotted', V1} -> {'Libraries.Utils.Scheme.Box', V1} end.
'un--toSchemePi'(V0) -> case V0 of {'Core.TT.Implicit'} -> {'Libraries.Utils.Scheme.IntegerVal', 0}; {'Core.TT.Explicit'} -> {'Libraries.Utils.Scheme.IntegerVal', 1}; {'Core.TT.AutoImplicit'} -> {'Libraries.Utils.Scheme.IntegerVal', 2}; {'Core.TT.DefImplicit', V1} -> {'Libraries.Utils.Scheme.Box', V1} end.
