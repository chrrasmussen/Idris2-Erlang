-module('Idris.Idris2.Control.Monad.Writer.CPS').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case-->>=-2005'/5,
  'case--case block in <*>-1692'/8,
  'case--<*>-1653'/5,
  'case--map-1465'/5,
  'case--mapWriter-1360'/3,
  'case--mapWriterT-1207'/5,
  'case--writerT-1043'/5,
  'dn--un--pure_Applicative_((WriterT $w) $m)'/3,
  'dn--un--map_Functor_((WriterT $w) $m)'/4,
  'dn--un--lift_MonadTrans_(WriterT $w)'/3,
  'dn--un--liftIO_HasIO_((WriterT $w) $m)'/3,
  'dn--un--join_Monad_((WriterT $w) $m)'/3,
  'dn--un--empty_Alternative_((WriterT $w) $m)'/2,
  'dn--un--__Impl_Monad_((WriterT $w) $m)'/1,
  'dn--un--__Impl_MonadTrans_(WriterT $w)'/5,
  'dn--un--__Impl_HasIO_((WriterT $w) $m)'/1,
  'dn--un--__Impl_Functor_((WriterT $w) $m)'/6,
  'dn--un--__Impl_Applicative_((WriterT $w) $m)'/1,
  'dn--un--__Impl_Alternative_((WriterT $w) $m)'/1,
  'dn--un-->>=_Monad_((WriterT $w) $m)'/4,
  'dn--un--<|>_Alternative_((WriterT $w) $m)'/3,
  'dn--un--<*>_Applicative_((WriterT $w) $m)'/3,
  'un--writerT'/4,
  'un--runWriterT'/2,
  'un--runWriter'/2,
  'un--mapWriterT'/4,
  'un--mapWriter'/4,
  'un--execWriterT'/3,
  'un--execWriter'/2,
  'un--Writer'/2
]).
'case-->>=-2005'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> (begin (V7 = (V1(V5))), V7 end(V6)) end.
'case--case block in <*>-1692'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> case V0 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> ((V14('erased'))({'Builtin.MkPair', (V4(V8)), V9})) end end end.
'case--<*>-1653'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V0 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> ((((V8('erased'))('erased'))((V2(V6))))(fun (V10) -> case V10 of {'Builtin.MkPair', V11, V12} -> case V0 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))({'Builtin.MkPair', (V5(V11)), V12})) end end end end)) end end.
'case--map-1465'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> {'Builtin.MkPair', (V2(V5)), V6} end.
'case--mapWriter-1360'(V0, V1, V2) -> begin (V3 = V2), (V1(V3)) end.
'case--mapWriterT-1207'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> {'Builtin.MkPair', V5, ((begin (V7 = ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0))))), fun (V8) -> fun (V9) -> ((V7(V8))(V9)) end end end(V3))(V6))} end.
'case--writerT-1043'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> {'Builtin.MkPair', V5, ((begin (V7 = V0), fun (V8) -> fun (V9) -> ((V7(V8))(V9)) end end end(V3))(V6))} end.
'dn--un--pure_Applicative_((WriterT $w) $m)'(V0, V1, V2) -> case V0 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> case V3 of {'Prelude.Interfaces.MkApplicative', V6, V7, V8} -> ((V7('erased'))({'Builtin.MkPair', V1, V2})) end end.
'dn--un--map_Functor_((WriterT $w) $m)'(V0, V1, V2, V3) -> ((begin (V8 = V0), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V5) -> case V5 of {'Builtin.MkPair', V6, V7} -> {'Builtin.MkPair', (V1(V6)), V7} end end))((begin (V4 = V2), V4 end(V3)))).
'dn--un--lift_MonadTrans_(WriterT $w)'(V0, V1, V2) -> ((begin (V10 = case V0 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> case V4 of {'Prelude.Interfaces.MkApplicative', V7, V8, V9} -> V7 end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V3) -> {'Builtin.MkPair', V3, V2} end))(V1)).
'dn--un--liftIO_HasIO_((WriterT $w) $m)'(V0, V1, V2) -> ((begin (V14 = case V0 of {'Prelude.IO.MkHasIO', V6, V7} -> case V6 of {'Prelude.Interfaces.MkMonad', V8, V9, V10} -> case V8 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> V11 end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V5) -> {'Builtin.MkPair', V5, V2} end))(case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> ((V4('erased'))(V1)) end)).
'dn--un--join_Monad_((WriterT $w) $m)'(V0, V1, V2) -> case V0 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> ((((V4('erased'))('erased'))((begin (V10 = V1), V10 end(V2))))(fun (V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> (begin (V9 = V7), V9 end(V8)) end end)) end.
'dn--un--empty_Alternative_((WriterT $w) $m)'(V0, V1) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkAlternative', V2, V3, V4} -> (V3('erased')) end.
'dn--un--__Impl_Monad_((WriterT $w) $m)'(V0) -> {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ((begin (V16 = case V0 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> V13 end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', (V3(V8)), V9} end end))((begin (V6 = V4), V6 end(V5)))) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> case V0 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> ((V26('erased'))({'Builtin.MkPair', V20, V21})) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = V30), begin (V33 = V31), fun (V34) -> case V0 of {'Prelude.Interfaces.MkMonad', V35, V36, V37} -> ((((V36('erased'))('erased'))((V32(V34))))(fun (V38) -> case V38 of {'Builtin.MkPair', V39, V40} -> case V0 of {'Prelude.Interfaces.MkMonad', V41, V42, V43} -> ((((V42('erased'))('erased'))((V33(V40))))(fun (V44) -> case V44 of {'Builtin.MkPair', V45, V46} -> case V0 of {'Prelude.Interfaces.MkMonad', V47, V48, V49} -> case V47 of {'Prelude.Interfaces.MkApplicative', V50, V51, V52} -> ((V51('erased'))({'Builtin.MkPair', (V39(V45)), V46})) end end end end)) end end end)) end end end end end end end end}, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> case V0 of {'Prelude.Interfaces.MkMonad', V58, V59, V60} -> ((((V59('erased'))('erased'))((begin (V65 = V55), V65 end(V57))))(fun (V61) -> case V61 of {'Builtin.MkPair', V62, V63} -> (begin (V64 = (V56(V62))), V64 end(V63)) end end)) end end end end end end, fun (V66) -> fun (V67) -> fun (V68) -> case V0 of {'Prelude.Interfaces.MkMonad', V69, V70, V71} -> ((((V70('erased'))('erased'))((begin (V76 = V67), V76 end(V68))))(fun (V72) -> case V72 of {'Builtin.MkPair', V73, V74} -> (begin (V75 = V73), V75 end(V74)) end end)) end end end end}.
'dn--un--__Impl_MonadTrans_(WriterT $w)'(V0, V1, V2, V3, V4) -> ((begin (V12 = case V2 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> case V6 of {'Prelude.Interfaces.MkApplicative', V9, V10, V11} -> V9 end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V5) -> {'Builtin.MkPair', V5, V4} end))(V3)).
'dn--un--__Impl_HasIO_((WriterT $w) $m)'(V0) -> {'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ((begin (V18 = case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> case V12 of {'Prelude.Interfaces.MkApplicative', V15, V16, V17} -> V15 end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', (V3(V8)), V9} end end))((begin (V6 = V4), V6 end(V5)))) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> case V0 of {'Prelude.IO.MkHasIO', V24, V25} -> case V24 of {'Prelude.Interfaces.MkMonad', V26, V27, V28} -> case V26 of {'Prelude.Interfaces.MkApplicative', V29, V30, V31} -> ((V30('erased'))({'Builtin.MkPair', V22, V23})) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = V34), begin (V37 = V35), fun (V38) -> case V0 of {'Prelude.IO.MkHasIO', V39, V40} -> case V39 of {'Prelude.Interfaces.MkMonad', V41, V42, V43} -> ((((V42('erased'))('erased'))((V36(V38))))(fun (V44) -> case V44 of {'Builtin.MkPair', V45, V46} -> case V0 of {'Prelude.IO.MkHasIO', V47, V48} -> case V47 of {'Prelude.Interfaces.MkMonad', V49, V50, V51} -> ((((V50('erased'))('erased'))((V37(V46))))(fun (V52) -> case V52 of {'Builtin.MkPair', V53, V54} -> case V0 of {'Prelude.IO.MkHasIO', V55, V56} -> case V55 of {'Prelude.Interfaces.MkMonad', V57, V58, V59} -> case V57 of {'Prelude.Interfaces.MkApplicative', V60, V61, V62} -> ((V61('erased'))({'Builtin.MkPair', (V45(V53)), V54})) end end end end end)) end end end end)) end end end end end end end end end}, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> case V0 of {'Prelude.IO.MkHasIO', V68, V69} -> case V68 of {'Prelude.Interfaces.MkMonad', V70, V71, V72} -> ((((V71('erased'))('erased'))((begin (V77 = V65), V77 end(V67))))(fun (V73) -> case V73 of {'Builtin.MkPair', V74, V75} -> (begin (V76 = (V66(V74))), V76 end(V75)) end end)) end end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> case V0 of {'Prelude.IO.MkHasIO', V81, V82} -> case V81 of {'Prelude.Interfaces.MkMonad', V83, V84, V85} -> ((((V84('erased'))('erased'))((begin (V90 = V79), V90 end(V80))))(fun (V86) -> case V86 of {'Builtin.MkPair', V87, V88} -> (begin (V89 = V87), V89 end(V88)) end end)) end end end end end}, fun (V91) -> fun (V92) -> fun (V93) -> ((begin (V105 = case V0 of {'Prelude.IO.MkHasIO', V97, V98} -> case V97 of {'Prelude.Interfaces.MkMonad', V99, V100, V101} -> case V99 of {'Prelude.Interfaces.MkApplicative', V102, V103, V104} -> V102 end end end), fun (V106) -> fun (V107) -> ((((V105('erased'))('erased'))(V106))(V107)) end end end(fun (V96) -> {'Builtin.MkPair', V96, V93} end))(case V0 of {'Prelude.IO.MkHasIO', V94, V95} -> ((V95('erased'))(V92)) end)) end end end}.
'dn--un--__Impl_Functor_((WriterT $w) $m)'(V0, V1, V2, V3, V4, V5) -> ((begin (V10 = V0), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', (V3(V8)), V9} end end))((begin (V6 = V4), V6 end(V5)))).
'dn--un--__Impl_Applicative_((WriterT $w) $m)'(V0) -> {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ((begin (V16 = case V0 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> V13 end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', (V3(V8)), V9} end end))((begin (V6 = V4), V6 end(V5)))) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> case V0 of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> ((V26('erased'))({'Builtin.MkPair', V20, V21})) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = V30), begin (V33 = V31), fun (V34) -> case V0 of {'Prelude.Interfaces.MkMonad', V35, V36, V37} -> ((((V36('erased'))('erased'))((V32(V34))))(fun (V38) -> case V38 of {'Builtin.MkPair', V39, V40} -> case V0 of {'Prelude.Interfaces.MkMonad', V41, V42, V43} -> ((((V42('erased'))('erased'))((V33(V40))))(fun (V44) -> case V44 of {'Builtin.MkPair', V45, V46} -> case V0 of {'Prelude.Interfaces.MkMonad', V47, V48, V49} -> case V47 of {'Prelude.Interfaces.MkApplicative', V50, V51, V52} -> ((V51('erased'))({'Builtin.MkPair', (V39(V45)), V46})) end end end end)) end end end)) end end end end end end end end}.
'dn--un--__Impl_Alternative_((WriterT $w) $m)'(V0) -> {'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ((begin (V16 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> V13 end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', (V3(V8)), V9} end end))((begin (V6 = V4), V6 end(V5)))) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V22, V23, V24} -> case V22 of {'Prelude.Interfaces.MkApplicative', V25, V26, V27} -> ((V26('erased'))({'Builtin.MkPair', V20, V21})) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = V30), begin (V33 = V31), fun (V34) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V35, V36, V37} -> ((((V36('erased'))('erased'))((V32(V34))))(fun (V38) -> case V38 of {'Builtin.MkPair', V39, V40} -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V41, V42, V43} -> ((((V42('erased'))('erased'))((V33(V40))))(fun (V44) -> case V44 of {'Builtin.MkPair', V45, V46} -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.Interfaces.MkMonad', V47, V48, V49} -> case V47 of {'Prelude.Interfaces.MkApplicative', V50, V51, V52} -> ((V51('erased'))({'Builtin.MkPair', (V39(V45)), V46})) end end end end)) end end end)) end end end end end end end end}, fun (V53) -> fun (V54) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkAlternative', V55, V56, V57} -> (V56('erased')) end end end, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = V59), fun (V62) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkAlternative', V63, V64, V65} -> (((V65('erased'))((V61(V62))))(fun () -> (begin (V66 = (V60())), V66 end(V62)) end)) end end end end end end}.
'dn--un-->>=_Monad_((WriterT $w) $m)'(V0, V1, V2, V3) -> case V0 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> ((((V5('erased'))('erased'))((begin (V11 = V1), V11 end(V3))))(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> (begin (V10 = (V2(V8))), V10 end(V9)) end end)) end.
'dn--un--<|>_Alternative_((WriterT $w) $m)'(V0, V1, V2) -> begin (V3 = V1), fun (V4) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Prelude.Interfaces.MkAlternative', V5, V6, V7} -> (((V7('erased'))((V3(V4))))(fun () -> (begin (V8 = (V2())), V8 end(V4)) end)) end end end.
'dn--un--<*>_Applicative_((WriterT $w) $m)'(V0, V1, V2) -> begin (V3 = V1), begin (V4 = V2), fun (V5) -> case V0 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))((V3(V5))))(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> case V0 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> ((((V13('erased'))('erased'))((V4(V11))))(fun (V15) -> case V15 of {'Builtin.MkPair', V16, V17} -> case V0 of {'Prelude.Interfaces.MkMonad', V18, V19, V20} -> case V18 of {'Prelude.Interfaces.MkApplicative', V21, V22, V23} -> ((V22('erased'))({'Builtin.MkPair', (V10(V16)), V17})) end end end end)) end end end)) end end end end.
'un--writerT'(V0, V1, V2, V3) -> ((begin (V10 = V1), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> {'Builtin.MkPair', V5, ((begin (V7 = V0), fun (V8) -> fun (V9) -> ((V7(V8))(V9)) end end end(V3))(V6))} end end))(V2)).
'un--runWriterT'(V0, V1) -> (begin (V4 = V1), V4 end(case V0 of {'Prelude.Interfaces.MkMonoid', V2, V3} -> V3 end)).
'un--runWriter'(V0, V1) -> begin (V5 = (begin (V4 = V1), V4 end(case V0 of {'Prelude.Interfaces.MkMonoid', V2, V3} -> V3 end))), V5 end.
'un--mapWriterT'(V0, V1, V2, V3) -> ((begin (V13 = ('Idris.Idris2.Builtin':'un--fst'(V0))), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Builtin.MkPair', V8, ((begin (V10 = ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0))))), fun (V11) -> fun (V12) -> ((V10(V11))(V12)) end end end(V3))(V9))} end end))((V1((begin (V6 = V2), V6 end(case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Prelude.Interfaces.MkMonoid', V4, V5} -> V5 end)))))).
'un--mapWriter'(V0, V1, V2, V3) -> ((begin (V26 = ('Idris.Idris2.Builtin':'un--fst'({'Builtin.MkPair', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V24, V25)) end end end end, V0}))), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V12) -> case V12 of {'Builtin.MkPair', V13, V14} -> {'Builtin.MkPair', V13, ((begin (V19 = ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'({'Builtin.MkPair', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V17, V18)) end end end end, V0}))))), fun (V20) -> fun (V21) -> ((V19(V20))(V21)) end end end(V3))(V14))} end end))(begin (V11 = (begin (V10 = V2), V10 end(case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'({'Builtin.MkPair', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V6, V7)) end end end end, V0})))) of {'Prelude.Interfaces.MkMonoid', V8, V9} -> V9 end))), (V1(V11)) end)).
'un--execWriterT'(V0, V1, V2) -> ((begin (V7 = V1), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V6) -> ('Idris.Idris2.Builtin':'un--snd'(V6)) end))((begin (V5 = V2), V5 end(case V0 of {'Prelude.Interfaces.MkMonoid', V3, V4} -> V4 end)))).
'un--execWriter'(V0, V1) -> begin (V13 = ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('Idris.Idris2.Builtin':'un--snd'(V5)) end))((begin (V4 = V1), V4 end(case V0 of {'Prelude.Interfaces.MkMonoid', V2, V3} -> V3 end))))), V13 end.
'un--Writer'(V0, V1) -> {'Control.Monad.Writer.CPS.WriterT', V0, fun (V2) -> {'Control.Monad.Identity.Identity', V2} end, V1}.
