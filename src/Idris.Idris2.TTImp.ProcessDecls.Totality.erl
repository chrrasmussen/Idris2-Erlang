-module('Idris.Idris2.TTImp.ProcessDecls.Totality').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6640-13301--in--un--checkTotality'/3,
  'nested--6640-13300--in--un--checkCovering'/5,
  'un--getTotalityErrors'/1,
  'un--checkTotalityOK'/2
]).
'nested--6640-13301--in--un--checkTotality'(V0, V1, V2) -> begin (V22 = begin (V3 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, 3, fun () -> <<<<"Checking Termination "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0))/binary>> end, ('Idris.Idris2.Core.Termination':'un--checkTotal'(V1, V2, V0))))), ((begin (V19 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V16, V17, V18)) end end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end((begin (V11 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> {'Prelude.Types.Right', (V7(V10))} end end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V4) -> {'Builtin.MkUnit'} end))))(V3)) end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V49 = begin (V27 = ('Idris.Idris2.Core.Context':'un--getTotality'(V1, V2, V0))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V48 = begin (V35 = fun (V32) -> ('nested--6640-13300--in--un--checkCovering'(V0, V1, V2, case V31 of {'Core.TT.MkTotality', V33, V34} -> V34 end, V32)) end), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V47 = ('Idris.Idris2.Prelude.Types':'un--maybe'(case V31 of {'Core.TT.MkTotality', V40, V41} -> case V40 of {'Core.TT.NotTerminating', V42} -> fun () -> fun (V43) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Core.Core.NotTotal', V2, V0, V42}}} end end; _ -> fun () -> fun (V44) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end end, fun () -> fun (V45) -> fun (V46) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V45}} end end end, V39))), V47 end(V36)) end end end end), V48 end(V28)) end end end end), V49 end(V23)) end end end end.
'nested--6640-13300--in--un--checkCovering'(V0, V1, V2, V3, V4) -> case V3 of {'Core.TT.IsCovering'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Core.Core.NotCovering', V2, V0, V3}}} end.
'un--getTotalityErrors'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V52 = begin (V44 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> ('un--checkTotalityOK'(V0, V11)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V10 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V17 end)), []))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V51 = fun (V49) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V50) -> V50 end, V48))} end), V51 end(V45)) end end end end), V52 end(V7)) end end end end.
'un--checkTotalityOK'(V0, V1) -> case V1 of {'Core.Name.NS', V2, V3} -> case V3 of {'Core.Name.MN', V4, V5} -> fun (V6) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Core.Name.CaseBlock', V7, V8} -> fun (V9) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; _ -> begin (V15 = begin (V10 = V0), fun (V11) -> begin (V14 = (begin (V12 = V10), fun (V13) -> ('erlang':'get'(V12)) end end(V11))), {'Prelude.Types.Right', V14} end end end), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V204 = begin (V52 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V19 of {'Core.Context.MkDefs', V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51} -> V20 end))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V203 = case V56 of {'Prelude.Types.Just', V57} -> begin (V80 = case V57 of {'Core.Context.Context.MkGlobalDef', V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79} -> V58 end), begin (V131 = case V57 of {'Core.Context.Context.MkGlobalDef', V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} -> case V98 of {'Core.Context.Context.TCon', V103, V104, V105, V106, V107, V108, V109, V110} -> begin (V111 = ('Idris.Idris2.Core.Termination':'un--checkPositive'(V0, V80, V1))), ((begin (V127 = fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V124, V125, V126)) end end end end end), fun (V128) -> fun (V129) -> ((((V127('erased'))('erased'))(V128))(V129)) end end end((begin (V119 = fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> {'Prelude.Types.Right', (V115(V118))} end end end end end), fun (V120) -> fun (V121) -> ((((V119('erased'))('erased'))(V120))(V121)) end end end(fun (V112) -> {'Builtin.MkUnit'} end))))(V111)) end; _ -> fun (V130) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end), fun (V132) -> begin (V133 = (V131(V132))), case V133 of {'Prelude.Types.Left', V134} -> {'Prelude.Types.Left', V134}; {'Prelude.Types.Right', V135} -> (begin (V201 = begin (V136 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V0))), fun (V137) -> begin (V138 = (V136(V137))), case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> (begin (V200 = begin (V163 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V140 end, ('Idris.Idris2.Core.Context.Context':'un--findSetTotal'(case V57 of {'Core.Context.Context.MkGlobalDef', V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162} -> V152 end))))), begin (V186 = case V57 of {'Core.Context.Context.MkGlobalDef', V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185} -> V174 end), begin (V190 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality"/utf8>>, 3, fun () -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary, <<(begin (V188 = fun (V187) -> V187 end), fun (V189) -> (V188(V189)) end end(<<" must be: "/utf8>>))/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V163))/binary>>/binary>> end))), fun (V191) -> begin (V192 = (V190(V191))), case V192 of {'Prelude.Types.Left', V193} -> {'Prelude.Types.Left', V193}; {'Prelude.Types.Right', V194} -> (begin (V199 = case V163 of 2 -> fun (V195) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; 1 -> fun (V196) -> ('nested--6640-13300--in--un--checkCovering'(V1, V0, V80, case V186 of {'Core.TT.MkTotality', V197, V198} -> V198 end, V196)) end; 0 -> ('nested--6640-13301--in--un--checkTotality'(V1, V0, V80)) end), V199 end(V191)) end end end end end end), V200 end(V137)) end end end end), V201 end(V132)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V202) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V203 end(V53)) end end end end), V204 end(V16)) end end end end end; _ -> begin (V210 = begin (V205 = V0), fun (V206) -> begin (V209 = (begin (V207 = V205), fun (V208) -> ('erlang':'get'(V207)) end end(V206))), {'Prelude.Types.Right', V209} end end end), fun (V211) -> begin (V212 = (V210(V211))), case V212 of {'Prelude.Types.Left', V213} -> {'Prelude.Types.Left', V213}; {'Prelude.Types.Right', V214} -> (begin (V399 = begin (V247 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V214 of {'Core.Context.MkDefs', V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246} -> V215 end))), fun (V248) -> begin (V249 = (V247(V248))), case V249 of {'Prelude.Types.Left', V250} -> {'Prelude.Types.Left', V250}; {'Prelude.Types.Right', V251} -> (begin (V398 = case V251 of {'Prelude.Types.Just', V252} -> begin (V275 = case V252 of {'Core.Context.Context.MkGlobalDef', V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274} -> V253 end), begin (V326 = case V252 of {'Core.Context.Context.MkGlobalDef', V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297} -> case V293 of {'Core.Context.Context.TCon', V298, V299, V300, V301, V302, V303, V304, V305} -> begin (V306 = ('Idris.Idris2.Core.Termination':'un--checkPositive'(V0, V275, V1))), ((begin (V322 = fun (V317) -> fun (V318) -> fun (V319) -> fun (V320) -> fun (V321) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V319, V320, V321)) end end end end end), fun (V323) -> fun (V324) -> ((((V322('erased'))('erased'))(V323))(V324)) end end end((begin (V314 = fun (V308) -> fun (V309) -> fun (V310) -> fun (V311) -> case V311 of {'Prelude.Types.Left', V312} -> {'Prelude.Types.Left', V312}; {'Prelude.Types.Right', V313} -> {'Prelude.Types.Right', (V310(V313))} end end end end end), fun (V315) -> fun (V316) -> ((((V314('erased'))('erased'))(V315))(V316)) end end end(fun (V307) -> {'Builtin.MkUnit'} end))))(V306)) end; _ -> fun (V325) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end), fun (V327) -> begin (V328 = (V326(V327))), case V328 of {'Prelude.Types.Left', V329} -> {'Prelude.Types.Left', V329}; {'Prelude.Types.Right', V330} -> (begin (V396 = begin (V331 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V0))), fun (V332) -> begin (V333 = (V331(V332))), case V333 of {'Prelude.Types.Left', V334} -> {'Prelude.Types.Left', V334}; {'Prelude.Types.Right', V335} -> (begin (V395 = begin (V358 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V335 end, ('Idris.Idris2.Core.Context.Context':'un--findSetTotal'(case V252 of {'Core.Context.Context.MkGlobalDef', V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357} -> V347 end))))), begin (V381 = case V252 of {'Core.Context.Context.MkGlobalDef', V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380} -> V369 end), begin (V385 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality"/utf8>>, 3, fun () -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary, <<(begin (V383 = fun (V382) -> V382 end), fun (V384) -> (V383(V384)) end end(<<" must be: "/utf8>>))/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V358))/binary>>/binary>> end))), fun (V386) -> begin (V387 = (V385(V386))), case V387 of {'Prelude.Types.Left', V388} -> {'Prelude.Types.Left', V388}; {'Prelude.Types.Right', V389} -> (begin (V394 = case V358 of 2 -> fun (V390) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; 1 -> fun (V391) -> ('nested--6640-13300--in--un--checkCovering'(V1, V0, V275, case V381 of {'Core.TT.MkTotality', V392, V393} -> V393 end, V391)) end; 0 -> ('nested--6640-13301--in--un--checkTotality'(V1, V0, V275)) end), V394 end(V386)) end end end end end end), V395 end(V332)) end end end end), V396 end(V327)) end end end end end; {'Prelude.Types.Nothing'} -> fun (V397) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V398 end(V248)) end end end end), V399 end(V211)) end end end end end.
