-module('Idris.Idris2.Idris.SetOptions').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--setIncrementalCG-6929'/6,
  'case--pkgDir-5735'/2,
  'nested--13443-6183--in--un--viable'/2,
  'nested--12919-5674--in--un--toVersion'/2,
  'nested--13855-6605--in--un--prefixes'/1,
  'nested--13586-6344--in--un--pkgDesc'/3,
  'nested--13443-6181--in--un--notHidden'/2,
  'nested--13443-6182--in--un--notDenylisted'/2,
  'nested--13070-5841--in--un--checkBounds'/4,
  'un--visiblePackages'/1,
  'un--setIncrementalCG'/4,
  'un--prefixOnlyIfNonEmpty'/2,
  'un--prefixOnly'/2,
  'un--preOptions'/3,
  'un--postOptions'/7,
  'un--pkgDir'/1,
  'un--opts'/3,
  'un--logLevels'/0,
  'un--listPackages'/2,
  'un--ideModeSocket'/1,
  'un--ideMode'/1,
  'un--getPackageDirs'/1,
  'un--findPkgDirs'/3,
  'un--findPkgDir'/3,
  'un--findPackages'/1,
  'un--findIpkg'/1,
  'un--dirOption'/4,
  'un--completionScript'/1,
  'un--codegens'/1,
  'un--candidateDirs'/3,
  'un--addPkgDir'/3
]).
'case--setIncrementalCG-6929'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Prelude.Types.Just', V6} -> begin (V7 = ('Idris.Idris2.Idris.ProcessIdr':'un--getCG'(V2, V3, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V93 = case V11 of {'Prelude.Types.Just', V12} -> case V12 of {'Compiler.Common.MkCG', V13, V14, V15, V16, V17} -> case V16 of {'Prelude.Types.Just', V18} -> begin (V19 = ('Idris.Idris2.Core.Context':'un--getSession'(V3))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V50 = ('Idris.Idris2.Core.Context':'un--setSession'(V3, case V23 of {'Core.Options.MkSessionOpts', V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} -> {'Core.Options.MkSessionOpts', V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, [V6 | V47], V48, V49} end))), V50 end(V20)) end end end end; {'Prelude.Types.Nothing'} -> case V1 of 1 -> begin (V56 = fun (V51) -> begin (V55 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<V0/binary, (begin (V53 = fun (V52) -> V52 end), fun (V54) -> (V53(V54)) end end(<<" does not support incremental builds"/utf8>>))/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V51))), {'Prelude.Types.Right', V55} end end), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V90 = fun (V61) -> begin (V89 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> V68 end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), begin (V76 = (V73(V74))), (V75(V76)) end end end end end end end}, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V79(V81))), ((V80(V82))(V81)) end end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> begin (V86 = (V84(V85))), (V86(V85)) end end end end}, fun (V87) -> fun (V88) -> V88 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V61))), {'Prelude.Types.Right', V89} end end), V90 end(V57)) end end end end; 0 -> fun (V91) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end end; {'Prelude.Types.Nothing'} -> fun (V92) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V93 end(V8)) end end end end; {'Prelude.Types.Nothing'} -> case V1 of 1 -> begin (V99 = fun (V94) -> begin (V98 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<(begin (V96 = fun (V95) -> V95 end), fun (V97) -> (V96(V97)) end end(<<"No such code generator"/utf8>>))/binary, <<"\x{a}"/utf8>>/binary>>, V94))), {'Prelude.Types.Right', V98} end end), fun (V100) -> begin (V101 = (V99(V100))), case V101 of {'Prelude.Types.Left', V102} -> {'Prelude.Types.Left', V102}; {'Prelude.Types.Right', V103} -> (begin (V184 = begin (V149 = fun (V104) -> begin (V148 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<(begin (V106 = fun (V105) -> V105 end), fun (V107) -> (V106(V107)) end end(<<"Code generators available: "/utf8>>))/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V145 = fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V143, V144)) end end end end), fun (V146) -> fun (V147) -> ((((V145('erased'))('erased'))(V146))(V147)) end end end(fun (V140) -> ('Idris.Idris2.Builtin':'un--fst'(V140)) end))(('Idris.Idris2.Core.Options':'un--availableCGs'(case V4 of {'Core.Context.MkDefs', V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139} -> V112 end))))))/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V104))), {'Prelude.Types.Right', V148} end end), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V183 = fun (V154) -> begin (V182 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V157, V158, V159)) end end end end end, fun (V160) -> fun (V161) -> fun (V162) -> V161 end end end, fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> begin (V168 = (V165(V167))), begin (V169 = (V166(V167))), (V168(V169)) end end end end end end end}, fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> begin (V175 = (V172(V174))), ((V173(V175))(V174)) end end end end end end, fun (V176) -> fun (V177) -> fun (V178) -> begin (V179 = (V177(V178))), (V179(V178)) end end end end}, fun (V180) -> fun (V181) -> V181 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V154))), {'Prelude.Types.Right', V182} end end), V183 end(V150)) end end end end), V184 end(V100)) end end end end; 0 -> fun (V185) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end.
'case--pkgDir-5735'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V2 of [] -> {'Idris.SetOptions.MkPkgDir', V0, V3, {'Prelude.Types.Nothing'}}; _ -> case ('nested--12919-5674--in--un--toVersion'(V0, V3)) of {'Prelude.Types.Just', V4} -> {'Idris.SetOptions.MkPkgDir', V0, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V5) -> fun (V6) -> <<V5/binary, V6/binary>> end end, <<""/utf8>>}, fun (V7) -> V7 end, ('Idris.Idris2.Data.List':'un--intersperse'(<<"-"/utf8>>, V2)))), {'Prelude.Types.Just', V4}}; {'Prelude.Types.Nothing'} -> {'Idris.SetOptions.MkPkgDir', V0, V0, {'Prelude.Types.Nothing'}} end end end.
'nested--13443-6183--in--un--viable'(V0, V1) -> case ('nested--13443-6181--in--un--notHidden'(V0, V1)) of 1 -> ('nested--13443-6182--in--un--notDenylisted'(V0, V1)); 0 -> 0 end.
'nested--12919-5674--in--un--toVersion'(V0, V1) -> ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> V19 end))(('Idris.Idris2.Data.List1':'dn--un--traverse_Traversable_List1'({'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V4, V5)) end end end end, fun (V6) -> fun (V7) -> {'Prelude.Types.Just', V7} end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V10, V11)) end end end end}, fun (V12) -> ('Idris.Idris2.Data.String':'un--parsePositive'({'Prelude.Num.MkNum', fun (V13) -> fun (V14) -> (V13 + V14) end end, fun (V15) -> fun (V16) -> (V15 * V16) end end, fun (V17) -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V17)) end}, V12)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V18, $.)) end, V1)))))).
'nested--13855-6605--in--un--prefixes'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> [V1 | ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> <<<<V1/binary, <<"."/utf8>>/binary>>/binary, V3/binary>> end))(('nested--13855-6605--in--un--prefixes'(V2))))] end(E0, E1)) end.
'nested--13586-6344--in--un--pkgDesc'(V0, V1, V2) -> case V2 of {'Idris.SetOptions.MkPkgDir', V3, V4, V5} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V7, V8)) end end}, V4)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--byShow'({'Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V10) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--show_Show_PkgVersion'(V10)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--showPrec_Show_PkgVersion'(V11, V12)) end end}, V9)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--show_Show_PkgVersion'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--showPrec_Show_PkgVersion'(V16, V17)) end end}, V13, V14)) end end}, V5)))))) end.
'nested--13443-6181--in--un--notHidden'(V0, V1) -> case ('Idris.Idris2.Data.String':'un--isPrefixOf'(<<"."/utf8>>, case V1 of {'Idris.SetOptions.MkPkgDir', V2, V3, V4} -> V3 end)) of 1 -> 0; 0 -> 1 end.
'nested--13443-6182--in--un--notDenylisted'(V0, V1) -> case ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> V24 end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V27, V28, V29)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V32, V33)) end end}, V2, V3)) end end, [<<"include"/utf8>> | [<<"lib"/utf8>> | [<<"support"/utf8>> | [<<"refc"/utf8>> | []]]]], case V1 of {'Idris.SetOptions.MkPkgDir', V34, V35, V36} -> V35 end)) of 1 -> 0; 0 -> 1 end.
'nested--13070-5841--in--un--checkBounds'(V0, V1, V2, V3) -> case V3 of {'Idris.SetOptions.MkPkgDir', V4, V5, V6} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Prelude.Interfaces.MkAlternative', {'Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end, fun (V11) -> fun (V12) -> {'Prelude.Types.Just', V12} end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V15, V16)) end end end end}, fun (V17) -> {'Prelude.Types.Nothing'} end, fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V19, V20)) end end end}, case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V5, V1)) of 1 -> ('Idris.Idris2.Idris.Package.Types':'un--inBounds'(V6, V0)); 0 -> 0 end)), fun (V21) -> {'Prelude.Types.Just', {'Builtin.MkPair', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, V4)), V6}} end)) end.
'un--visiblePackages'(V0) -> ((begin (V8 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V1) -> ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V2) -> ('nested--13443-6183--in--un--viable'(V0, V2)) end, V1)) end))(('un--getPackageDirs'(V0)))).
'un--setIncrementalCG'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V46 = ('case--setIncrementalCG-6929'(V3, V2, V1, V0, V13, ('Idris.Idris2.Core.Options':'un--getCG'(case V13 of {'Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V18 end, V3))))), V46 end(V10)) end end end end.
'un--prefixOnlyIfNonEmpty'(V0, V1) -> case V0 of <<"--"/utf8>> -> V1; _ -> ('un--prefixOnly'(V0, V1)) end.
'un--prefixOnly'(V0, V1) -> ('Idris.Idris2.Libraries.Data.List.Extra':'un--sortedNub'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V4, V5)) end end}, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V18, V19)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V20) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V0, V20)) of 1 -> ('Idris.Idris2.Data.String':'un--isPrefixOf'(V0, V20)); 0 -> 0 end end, V1)))).
'un--preOptions'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.CommandLine.NoBanner'} -> begin (V38 = begin (V6 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V37 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V10 of {'Core.Options.MkSessionOpts', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} -> {'Core.Options.MkSessionOpts', V11, V12, 1, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end))), V37 end(V7)) end end end end), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V43 = ('un--preOptions'(V0, V1, V5))), V43 end(V39)) end end end end; {'Idris.CommandLine.OutputFile', V44} -> begin (V77 = begin (V45 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V76 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V49 of {'Core.Options.MkSessionOpts', V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75} -> {'Core.Options.MkSessionOpts', V50, V51, 1, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75} end))), V76 end(V46)) end end end end), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V82 = ('un--preOptions'(V0, V1, V5))), V82 end(V78)) end end end end; {'Idris.CommandLine.ExecFn', V83} -> begin (V116 = begin (V84 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V115 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V88 of {'Core.Options.MkSessionOpts', V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114} -> {'Core.Options.MkSessionOpts', V89, V90, 1, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114} end))), V115 end(V85)) end end end end), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V121 = ('un--preOptions'(V0, V1, V5))), V121 end(V117)) end end end end; {'Idris.CommandLine.IdeMode'} -> begin (V154 = begin (V122 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V123) -> begin (V124 = (V122(V123))), case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> (begin (V153 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V126 of {'Core.Options.MkSessionOpts', V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152} -> {'Core.Options.MkSessionOpts', V127, V128, 1, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152} end))), V153 end(V123)) end end end end), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V159 = ('un--preOptions'(V0, V1, V5))), V159 end(V155)) end end end end; {'Idris.CommandLine.IdeModeSocket', V160} -> begin (V193 = begin (V161 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V192 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V165 of {'Core.Options.MkSessionOpts', V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191} -> {'Core.Options.MkSessionOpts', V166, V167, 1, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191} end))), V192 end(V162)) end end end end), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V198 = ('un--preOptions'(V0, V1, V5))), V198 end(V194)) end end end end; {'Idris.CommandLine.CheckOnly'} -> begin (V231 = begin (V199 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V200) -> begin (V201 = (V199(V200))), case V201 of {'Prelude.Types.Left', V202} -> {'Prelude.Types.Left', V202}; {'Prelude.Types.Right', V203} -> (begin (V230 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V203 of {'Core.Options.MkSessionOpts', V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229} -> {'Core.Options.MkSessionOpts', V204, V205, 1, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229} end))), V230 end(V200)) end end end end), fun (V232) -> begin (V233 = (V231(V232))), case V233 of {'Prelude.Types.Left', V234} -> {'Prelude.Types.Left', V234}; {'Prelude.Types.Right', V235} -> (begin (V236 = ('un--preOptions'(V0, V1, V5))), V236 end(V232)) end end end end; {'Idris.CommandLine.Profile'} -> begin (V269 = begin (V237 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V238) -> begin (V239 = (V237(V238))), case V239 of {'Prelude.Types.Left', V240} -> {'Prelude.Types.Left', V240}; {'Prelude.Types.Right', V241} -> (begin (V268 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V241 of {'Core.Options.MkSessionOpts', V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267} -> {'Core.Options.MkSessionOpts', V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, 1, V261, V262, V263, V264, V265, V266, V267} end))), V268 end(V238)) end end end end), fun (V270) -> begin (V271 = (V269(V270))), case V271 of {'Prelude.Types.Left', V272} -> {'Prelude.Types.Left', V272}; {'Prelude.Types.Right', V273} -> (begin (V274 = ('un--preOptions'(V0, V1, V5))), V274 end(V270)) end end end end; {'Idris.CommandLine.Quiet'} -> begin (V275 = ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V1, {'Idris.REPL.Opts.REPL', 1}))), fun (V276) -> begin (V277 = (V275(V276))), case V277 of {'Prelude.Types.Left', V278} -> {'Prelude.Types.Left', V278}; {'Prelude.Types.Right', V279} -> (begin (V280 = ('un--preOptions'(V0, V1, V5))), V280 end(V276)) end end end end; {'Idris.CommandLine.NoPrelude'} -> begin (V313 = begin (V281 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V282) -> begin (V283 = (V281(V282))), case V283 of {'Prelude.Types.Left', V284} -> {'Prelude.Types.Left', V284}; {'Prelude.Types.Right', V285} -> (begin (V312 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V285 of {'Core.Options.MkSessionOpts', V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311} -> {'Core.Options.MkSessionOpts', 1, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311} end))), V312 end(V282)) end end end end), fun (V314) -> begin (V315 = (V313(V314))), case V315 of {'Prelude.Types.Left', V316} -> {'Prelude.Types.Left', V316}; {'Prelude.Types.Right', V317} -> (begin (V318 = ('un--preOptions'(V0, V1, V5))), V318 end(V314)) end end end end; {'Idris.CommandLine.SetCG', V319} -> begin (V325 = begin (V320 = V0), fun (V321) -> begin (V324 = (begin (V322 = V320), fun (V323) -> ('erlang':'get'(V322)) end end(V321))), {'Prelude.Types.Right', V324} end end end), fun (V326) -> begin (V327 = (V325(V326))), case V327 of {'Prelude.Types.Left', V328} -> {'Prelude.Types.Left', V328}; {'Prelude.Types.Right', V329} -> (begin (V454 = case ('Idris.Idris2.Core.Options':'un--getCG'(case V329 of {'Core.Context.MkDefs', V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361} -> V334 end, V319)) of {'Prelude.Types.Just', V362} -> begin (V363 = ('Idris.Idris2.Core.Context':'un--setCG'(V0, V362))), fun (V364) -> begin (V365 = (V363(V364))), case V365 of {'Prelude.Types.Left', V366} -> {'Prelude.Types.Left', V366}; {'Prelude.Types.Right', V367} -> (begin (V368 = ('un--preOptions'(V0, V1, V5))), V368 end(V364)) end end end end; {'Prelude.Types.Nothing'} -> begin (V371 = fun (V369) -> begin (V370 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"No such code generator\x{a}"/utf8>>, V369))), {'Prelude.Types.Right', V370} end end), fun (V372) -> begin (V373 = (V371(V372))), case V373 of {'Prelude.Types.Left', V374} -> {'Prelude.Types.Left', V374}; {'Prelude.Types.Right', V375} -> (begin (V453 = begin (V418 = fun (V376) -> begin (V417 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"Code generators available: "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V414 = fun (V410) -> fun (V411) -> fun (V412) -> fun (V413) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V412, V413)) end end end end), fun (V415) -> fun (V416) -> ((((V414('erased'))('erased'))(V415))(V416)) end end end(fun (V409) -> ('Idris.Idris2.Builtin':'un--fst'(V409)) end))(('Idris.Idris2.Core.Options':'un--availableCGs'(case V329 of {'Core.Context.MkDefs', V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408} -> V381 end))))))/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V376))), {'Prelude.Types.Right', V417} end end), fun (V419) -> begin (V420 = (V418(V419))), case V420 of {'Prelude.Types.Left', V421} -> {'Prelude.Types.Left', V421}; {'Prelude.Types.Right', V422} -> (begin (V452 = fun (V423) -> begin (V451 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V424) -> fun (V425) -> fun (V426) -> fun (V427) -> fun (V428) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V426, V427, V428)) end end end end end, fun (V429) -> fun (V430) -> fun (V431) -> V430 end end end, fun (V432) -> fun (V433) -> fun (V434) -> fun (V435) -> fun (V436) -> begin (V437 = (V434(V436))), begin (V438 = (V435(V436))), (V437(V438)) end end end end end end end}, fun (V439) -> fun (V440) -> fun (V441) -> fun (V442) -> fun (V443) -> begin (V444 = (V441(V443))), ((V442(V444))(V443)) end end end end end end, fun (V445) -> fun (V446) -> fun (V447) -> begin (V448 = (V446(V447))), (V448(V447)) end end end end}, fun (V449) -> fun (V450) -> V450 end end}, {'Erlang.System.ExitFailure', 1, {'Data.So.Oh'}}))(V423))), {'Prelude.Types.Right', V451} end end), V452 end(V419)) end end end end), V453 end(V372)) end end end end end), V454 end(V326)) end end end end; {'Idris.CommandLine.Directive', V455} -> begin (V488 = begin (V456 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V457) -> begin (V458 = (V456(V457))), case V458 of {'Prelude.Types.Left', V459} -> {'Prelude.Types.Left', V459}; {'Prelude.Types.Right', V460} -> (begin (V487 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V460 of {'Core.Options.MkSessionOpts', V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486} -> {'Core.Options.MkSessionOpts', V461, V462, V463, V464, V465, [V455 | V466], V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486} end))), V487 end(V457)) end end end end), fun (V489) -> begin (V490 = (V488(V489))), case V490 of {'Prelude.Types.Left', V491} -> {'Prelude.Types.Left', V491}; {'Prelude.Types.Right', V492} -> (begin (V493 = ('un--preOptions'(V0, V1, V5))), V493 end(V489)) end end end end; {'Idris.CommandLine.PkgPath', V494} -> begin (V495 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, V494))), fun (V496) -> begin (V497 = (V495(V496))), case V497 of {'Prelude.Types.Left', V498} -> {'Prelude.Types.Left', V498}; {'Prelude.Types.Right', V499} -> (begin (V500 = ('un--preOptions'(V0, V1, V5))), V500 end(V496)) end end end end; {'Idris.CommandLine.SourceDir', V501} -> begin (V502 = ('Idris.Idris2.Core.Context':'un--setSourceDir'(V0, {'Prelude.Types.Just', V501}))), fun (V503) -> begin (V504 = (V502(V503))), case V504 of {'Prelude.Types.Left', V505} -> {'Prelude.Types.Left', V505}; {'Prelude.Types.Right', V506} -> (begin (V507 = ('un--preOptions'(V0, V1, V5))), V507 end(V503)) end end end end; {'Idris.CommandLine.BuildDir', V508} -> begin (V509 = ('Idris.Idris2.Core.Context':'un--setBuildDir'(V0, V508))), fun (V510) -> begin (V511 = (V509(V510))), case V511 of {'Prelude.Types.Left', V512} -> {'Prelude.Types.Left', V512}; {'Prelude.Types.Right', V513} -> (begin (V514 = ('un--preOptions'(V0, V1, V5))), V514 end(V510)) end end end end; {'Idris.CommandLine.OutputDir', V515} -> begin (V516 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V0, {'Prelude.Types.Just', V515}))), fun (V517) -> begin (V518 = (V516(V517))), case V518 of {'Prelude.Types.Left', V519} -> {'Prelude.Types.Left', V519}; {'Prelude.Types.Right', V520} -> (begin (V521 = ('un--preOptions'(V0, V1, V5))), V521 end(V517)) end end end end; {'Idris.CommandLine.Directory', V522} -> begin (V528 = begin (V523 = V0), fun (V524) -> begin (V527 = (begin (V525 = V523), fun (V526) -> ('erlang':'get'(V525)) end end(V524))), {'Prelude.Types.Right', V527} end end end), fun (V529) -> begin (V530 = (V528(V529))), case V530 of {'Prelude.Types.Left', V531} -> {'Prelude.Types.Left', V531}; {'Prelude.Types.Right', V532} -> (begin (V582 = begin (V575 = ('un--dirOption'(V0, V1, case V532 of {'Core.Context.MkDefs', V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, V556, V557, V558, V559, V560, V561, V562, V563, V564} -> case V537 of {'Core.Options.MkOptions', V565, V566, V567, V568, V569, V570, V571, V572, V573, V574} -> V565 end end, V522))), fun (V576) -> begin (V577 = (V575(V576))), case V577 of {'Prelude.Types.Left', V578} -> {'Prelude.Types.Left', V578}; {'Prelude.Types.Right', V579} -> (begin (V581 = fun (V580) -> {'Prelude.Types.Right', 0} end), V581 end(V576)) end end end end), V582 end(V529)) end end end end; {'Idris.CommandLine.ListPackages'} -> begin (V583 = ('un--listPackages'(V0, V1))), fun (V584) -> begin (V585 = (V583(V584))), case V585 of {'Prelude.Types.Left', V586} -> {'Prelude.Types.Left', V586}; {'Prelude.Types.Right', V587} -> (begin (V589 = fun (V588) -> {'Prelude.Types.Right', 0} end), V589 end(V584)) end end end end; {'Idris.CommandLine.Timing', V590} -> begin (V591 = ('Idris.Idris2.Core.Context':'un--setLogTimings'(V0, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 10 end, V590))))), fun (V592) -> begin (V593 = (V591(V592))), case V593 of {'Prelude.Types.Left', V594} -> {'Prelude.Types.Left', V594}; {'Prelude.Types.Right', V595} -> (begin (V596 = ('un--preOptions'(V0, V1, V5))), V596 end(V592)) end end end end; {'Idris.CommandLine.DebugElabCheck'} -> begin (V597 = ('Idris.Idris2.Core.Context':'un--setDebugElabCheck'(V0, 1))), fun (V598) -> begin (V599 = (V597(V598))), case V599 of {'Prelude.Types.Left', V600} -> {'Prelude.Types.Left', V600}; {'Prelude.Types.Right', V601} -> (begin (V602 = ('un--preOptions'(V0, V1, V5))), V602 end(V598)) end end end end; {'Idris.CommandLine.AltErrorCount', V603} -> begin (V636 = begin (V604 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V605) -> begin (V606 = (V604(V605))), case V606 of {'Prelude.Types.Left', V607} -> {'Prelude.Types.Left', V607}; {'Prelude.Types.Right', V608} -> (begin (V635 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V608 of {'Core.Options.MkSessionOpts', V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633, V634} -> {'Core.Options.MkSessionOpts', V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V603, V629, V630, V631, V632, V633, V634} end))), V635 end(V605)) end end end end), fun (V637) -> begin (V638 = (V636(V637))), case V638 of {'Prelude.Types.Left', V639} -> {'Prelude.Types.Left', V639}; {'Prelude.Types.Right', V640} -> (begin (V641 = ('un--preOptions'(V0, V1, V5))), V641 end(V637)) end end end end; {'Idris.CommandLine.RunREPL', V642} -> begin (V643 = ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V1, {'Idris.REPL.Opts.REPL', 1}))), fun (V644) -> begin (V645 = (V643(V644))), case V645 of {'Prelude.Types.Left', V646} -> {'Prelude.Types.Left', V646}; {'Prelude.Types.Right', V647} -> (begin (V686 = begin (V680 = begin (V648 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V649) -> begin (V650 = (V648(V649))), case V650 of {'Prelude.Types.Left', V651} -> {'Prelude.Types.Left', V651}; {'Prelude.Types.Right', V652} -> (begin (V679 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V652 of {'Core.Options.MkSessionOpts', V653, V654, V655, V656, V657, V658, V659, V660, V661, V662, V663, V664, V665, V666, V667, V668, V669, V670, V671, V672, V673, V674, V675, V676, V677, V678} -> {'Core.Options.MkSessionOpts', V653, V654, 1, V656, V657, V658, V659, V660, V661, V662, V663, V664, V665, V666, V667, V668, V669, V670, V671, V672, V673, V674, V675, V676, V677, V678} end))), V679 end(V649)) end end end end), fun (V681) -> begin (V682 = (V680(V681))), case V682 of {'Prelude.Types.Left', V683} -> {'Prelude.Types.Left', V683}; {'Prelude.Types.Right', V684} -> (begin (V685 = ('un--preOptions'(V0, V1, V5))), V685 end(V681)) end end end end), V686 end(V644)) end end end end; {'Idris.CommandLine.FindIPKG'} -> begin (V719 = begin (V687 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V688) -> begin (V689 = (V687(V688))), case V689 of {'Prelude.Types.Left', V690} -> {'Prelude.Types.Left', V690}; {'Prelude.Types.Right', V691} -> (begin (V718 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V691 of {'Core.Options.MkSessionOpts', V692, V693, V694, V695, V696, V697, V698, V699, V700, V701, V702, V703, V704, V705, V706, V707, V708, V709, V710, V711, V712, V713, V714, V715, V716, V717} -> {'Core.Options.MkSessionOpts', V692, V693, V694, 1, V696, V697, V698, V699, V700, V701, V702, V703, V704, V705, V706, V707, V708, V709, V710, V711, V712, V713, V714, V715, V716, V717} end))), V718 end(V688)) end end end end), fun (V720) -> begin (V721 = (V719(V720))), case V721 of {'Prelude.Types.Left', V722} -> {'Prelude.Types.Left', V722}; {'Prelude.Types.Right', V723} -> (begin (V724 = ('un--preOptions'(V0, V1, V5))), V724 end(V720)) end end end end; {'Idris.CommandLine.IgnoreMissingIPKG'} -> begin (V757 = begin (V725 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V726) -> begin (V727 = (V725(V726))), case V727 of {'Prelude.Types.Left', V728} -> {'Prelude.Types.Left', V728}; {'Prelude.Types.Right', V729} -> (begin (V756 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V729 of {'Core.Options.MkSessionOpts', V730, V731, V732, V733, V734, V735, V736, V737, V738, V739, V740, V741, V742, V743, V744, V745, V746, V747, V748, V749, V750, V751, V752, V753, V754, V755} -> {'Core.Options.MkSessionOpts', V730, V731, V732, V733, V734, V735, V736, V737, V738, 1, V740, V741, V742, V743, V744, V745, V746, V747, V748, V749, V750, V751, V752, V753, V754, V755} end))), V756 end(V726)) end end end end), fun (V758) -> begin (V759 = (V757(V758))), case V759 of {'Prelude.Types.Left', V760} -> {'Prelude.Types.Left', V760}; {'Prelude.Types.Right', V761} -> (begin (V762 = ('un--preOptions'(V0, V1, V5))), V762 end(V758)) end end end end; {'Idris.CommandLine.ChangedModules', V763} -> begin (V796 = begin (V764 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V765) -> begin (V766 = (V764(V765))), case V766 of {'Prelude.Types.Left', V767} -> {'Prelude.Types.Left', V767}; {'Prelude.Types.Right', V768} -> (begin (V795 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V768 of {'Core.Options.MkSessionOpts', V769, V770, V771, V772, V773, V774, V775, V776, V777, V778, V779, V780, V781, V782, V783, V784, V785, V786, V787, V788, V789, V790, V791, V792, V793, V794} -> {'Core.Options.MkSessionOpts', V769, V770, V771, V772, V773, V774, V775, V763, V777, V778, V779, V780, V781, V782, V783, V784, V785, V786, V787, V788, V789, V790, V791, V792, V793, V794} end))), V795 end(V765)) end end end end), fun (V797) -> begin (V798 = (V796(V797))), case V798 of {'Prelude.Types.Left', V799} -> {'Prelude.Types.Left', V799}; {'Prelude.Types.Right', V800} -> (begin (V801 = ('un--preOptions'(V0, V1, V5))), V801 end(V797)) end end end end; {'Idris.CommandLine.DumpCases', V802} -> begin (V835 = begin (V803 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V804) -> begin (V805 = (V803(V804))), case V805 of {'Prelude.Types.Left', V806} -> {'Prelude.Types.Left', V806}; {'Prelude.Types.Right', V807} -> (begin (V834 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V807 of {'Core.Options.MkSessionOpts', V808, V809, V810, V811, V812, V813, V814, V815, V816, V817, V818, V819, V820, V821, V822, V823, V824, V825, V826, V827, V828, V829, V830, V831, V832, V833} -> {'Core.Options.MkSessionOpts', V808, V809, V810, V811, V812, V813, V814, V815, V816, V817, V818, V819, V820, V821, {'Prelude.Types.Just', V802}, V823, V824, V825, V826, V827, V828, V829, V830, V831, V832, V833} end))), V834 end(V804)) end end end end), fun (V836) -> begin (V837 = (V835(V836))), case V837 of {'Prelude.Types.Left', V838} -> {'Prelude.Types.Left', V838}; {'Prelude.Types.Right', V839} -> (begin (V840 = ('un--preOptions'(V0, V1, V5))), V840 end(V836)) end end end end; {'Idris.CommandLine.DumpLifted', V841} -> begin (V874 = begin (V842 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V843) -> begin (V844 = (V842(V843))), case V844 of {'Prelude.Types.Left', V845} -> {'Prelude.Types.Left', V845}; {'Prelude.Types.Right', V846} -> (begin (V873 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V846 of {'Core.Options.MkSessionOpts', V847, V848, V849, V850, V851, V852, V853, V854, V855, V856, V857, V858, V859, V860, V861, V862, V863, V864, V865, V866, V867, V868, V869, V870, V871, V872} -> {'Core.Options.MkSessionOpts', V847, V848, V849, V850, V851, V852, V853, V854, V855, V856, V857, V858, V859, V860, V861, {'Prelude.Types.Just', V841}, V863, V864, V865, V866, V867, V868, V869, V870, V871, V872} end))), V873 end(V843)) end end end end), fun (V875) -> begin (V876 = (V874(V875))), case V876 of {'Prelude.Types.Left', V877} -> {'Prelude.Types.Left', V877}; {'Prelude.Types.Right', V878} -> (begin (V879 = ('un--preOptions'(V0, V1, V5))), V879 end(V875)) end end end end; {'Idris.CommandLine.DumpANF', V880} -> begin (V913 = begin (V881 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V882) -> begin (V883 = (V881(V882))), case V883 of {'Prelude.Types.Left', V884} -> {'Prelude.Types.Left', V884}; {'Prelude.Types.Right', V885} -> (begin (V912 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V885 of {'Core.Options.MkSessionOpts', V886, V887, V888, V889, V890, V891, V892, V893, V894, V895, V896, V897, V898, V899, V900, V901, V902, V903, V904, V905, V906, V907, V908, V909, V910, V911} -> {'Core.Options.MkSessionOpts', V886, V887, V888, V889, V890, V891, V892, V893, V894, V895, V896, V897, V898, V899, V900, V901, {'Prelude.Types.Just', V880}, V903, V904, V905, V906, V907, V908, V909, V910, V911} end))), V912 end(V882)) end end end end), fun (V914) -> begin (V915 = (V913(V914))), case V915 of {'Prelude.Types.Left', V916} -> {'Prelude.Types.Left', V916}; {'Prelude.Types.Right', V917} -> (begin (V918 = ('un--preOptions'(V0, V1, V5))), V918 end(V914)) end end end end; {'Idris.CommandLine.DumpVMCode', V919} -> begin (V952 = begin (V920 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V921) -> begin (V922 = (V920(V921))), case V922 of {'Prelude.Types.Left', V923} -> {'Prelude.Types.Left', V923}; {'Prelude.Types.Right', V924} -> (begin (V951 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V924 of {'Core.Options.MkSessionOpts', V925, V926, V927, V928, V929, V930, V931, V932, V933, V934, V935, V936, V937, V938, V939, V940, V941, V942, V943, V944, V945, V946, V947, V948, V949, V950} -> {'Core.Options.MkSessionOpts', V925, V926, V927, V928, V929, V930, V931, V932, V933, V934, V935, V936, V937, V938, V939, V940, V941, {'Prelude.Types.Just', V919}, V943, V944, V945, V946, V947, V948, V949, V950} end))), V951 end(V921)) end end end end), fun (V953) -> begin (V954 = (V952(V953))), case V954 of {'Prelude.Types.Left', V955} -> {'Prelude.Types.Left', V955}; {'Prelude.Types.Right', V956} -> (begin (V957 = ('un--preOptions'(V0, V1, V5))), V957 end(V953)) end end end end; {'Idris.CommandLine.Logging', V958} -> begin (V991 = begin (V959 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V960) -> begin (V961 = (V959(V960))), case V961 of {'Prelude.Types.Left', V962} -> {'Prelude.Types.Left', V962}; {'Prelude.Types.Right', V963} -> (begin (V990 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V963 of {'Core.Options.MkSessionOpts', V964, V965, V966, V967, V968, V969, V970, V971, V972, V973, V974, V975, V976, V977, V978, V979, V980, V981, V982, V983, V984, V985, V986, V987, V988, V989} -> {'Core.Options.MkSessionOpts', V964, V965, V966, V967, V968, V969, V970, V971, V972, V973, 1, ('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V958, V975)), V976, V977, V978, V979, V980, V981, V982, V983, V984, V985, V986, V987, V988, V989} end))), V990 end(V960)) end end end end), fun (V992) -> begin (V993 = (V991(V992))), case V993 of {'Prelude.Types.Left', V994} -> {'Prelude.Types.Left', V994}; {'Prelude.Types.Right', V995} -> (begin (V996 = ('un--preOptions'(V0, V1, V5))), V996 end(V992)) end end end end; {'Idris.CommandLine.ConsoleWidth', V997} -> begin (V998 = ('Idris.Idris2.Idris.REPL.Opts':'un--setConsoleWidth'(V1, V997))), fun (V999) -> begin (V1000 = (V998(V999))), case V1000 of {'Prelude.Types.Left', V1001} -> {'Prelude.Types.Left', V1001}; {'Prelude.Types.Right', V1002} -> (begin (V1003 = ('un--preOptions'(V0, V1, V5))), V1003 end(V999)) end end end end; {'Idris.CommandLine.ShowMachineNames'} -> begin (V1004 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0))), fun (V1005) -> begin (V1006 = (V1004(V1005))), case V1006 of {'Prelude.Types.Left', V1007} -> {'Prelude.Types.Left', V1007}; {'Prelude.Types.Right', V1008} -> (begin (V1019 = begin (V1013 = ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, case V1008 of {'Core.Options.MkPPOpts', V1009, V1010, V1011, V1012} -> {'Core.Options.MkPPOpts', V1009, 1, V1011, V1012} end))), fun (V1014) -> begin (V1015 = (V1013(V1014))), case V1015 of {'Prelude.Types.Left', V1016} -> {'Prelude.Types.Left', V1016}; {'Prelude.Types.Right', V1017} -> (begin (V1018 = ('un--preOptions'(V0, V1, V5))), V1018 end(V1014)) end end end end), V1019 end(V1005)) end end end end; {'Idris.CommandLine.ShowNamespaces'} -> begin (V1020 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0))), fun (V1021) -> begin (V1022 = (V1020(V1021))), case V1022 of {'Prelude.Types.Left', V1023} -> {'Prelude.Types.Left', V1023}; {'Prelude.Types.Right', V1024} -> (begin (V1035 = begin (V1029 = ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, case V1024 of {'Core.Options.MkPPOpts', V1025, V1026, V1027, V1028} -> {'Core.Options.MkPPOpts', V1025, V1026, V1027, 1} end))), fun (V1030) -> begin (V1031 = (V1029(V1030))), case V1031 of {'Prelude.Types.Left', V1032} -> {'Prelude.Types.Left', V1032}; {'Prelude.Types.Right', V1033} -> (begin (V1034 = ('un--preOptions'(V0, V1, V5))), V1034 end(V1030)) end end end end), V1035 end(V1021)) end end end end; {'Idris.CommandLine.Color', V1036} -> begin (V1037 = ('Idris.Idris2.Idris.REPL.Opts':'un--setColor'(V1, V1036))), fun (V1038) -> begin (V1039 = (V1037(V1038))), case V1039 of {'Prelude.Types.Left', V1040} -> {'Prelude.Types.Left', V1040}; {'Prelude.Types.Right', V1041} -> (begin (V1042 = ('un--preOptions'(V0, V1, V5))), V1042 end(V1038)) end end end end; {'Idris.CommandLine.WarningsAsErrors'} -> begin (V1075 = begin (V1043 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V1044) -> begin (V1045 = (V1043(V1044))), case V1045 of {'Prelude.Types.Left', V1046} -> {'Prelude.Types.Left', V1046}; {'Prelude.Types.Right', V1047} -> (begin (V1074 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V1047 of {'Core.Options.MkSessionOpts', V1048, V1049, V1050, V1051, V1052, V1053, V1054, V1055, V1056, V1057, V1058, V1059, V1060, V1061, V1062, V1063, V1064, V1065, V1066, V1067, V1068, V1069, V1070, V1071, V1072, V1073} -> {'Core.Options.MkSessionOpts', V1048, V1049, V1050, V1051, V1052, V1053, V1054, V1055, V1056, V1057, V1058, V1059, V1060, V1061, V1062, V1063, V1064, V1065, V1066, V1067, 1, V1069, V1070, V1071, V1072, V1073} end))), V1074 end(V1044)) end end end end), fun (V1076) -> begin (V1077 = (V1075(V1076))), case V1077 of {'Prelude.Types.Left', V1078} -> {'Prelude.Types.Left', V1078}; {'Prelude.Types.Right', V1079} -> (begin (V1080 = ('un--preOptions'(V0, V1, V5))), V1080 end(V1076)) end end end end; {'Idris.CommandLine.IgnoreShadowingWarnings'} -> begin (V1113 = begin (V1081 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V1082) -> begin (V1083 = (V1081(V1082))), case V1083 of {'Prelude.Types.Left', V1084} -> {'Prelude.Types.Left', V1084}; {'Prelude.Types.Right', V1085} -> (begin (V1112 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V1085 of {'Core.Options.MkSessionOpts', V1086, V1087, V1088, V1089, V1090, V1091, V1092, V1093, V1094, V1095, V1096, V1097, V1098, V1099, V1100, V1101, V1102, V1103, V1104, V1105, V1106, V1107, V1108, V1109, V1110, V1111} -> {'Core.Options.MkSessionOpts', V1086, V1087, V1088, V1089, V1090, V1091, V1092, V1093, V1094, V1095, V1096, V1097, V1098, V1099, V1100, V1101, V1102, V1103, V1104, V1105, V1106, 0, V1108, V1109, V1110, V1111} end))), V1112 end(V1082)) end end end end), fun (V1114) -> begin (V1115 = (V1113(V1114))), case V1115 of {'Prelude.Types.Left', V1116} -> {'Prelude.Types.Left', V1116}; {'Prelude.Types.Right', V1117} -> (begin (V1118 = ('un--preOptions'(V0, V1, V5))), V1118 end(V1114)) end end end end; {'Idris.CommandLine.HashesInsteadOfModTime'} -> begin (V1120 = fun (V1119) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"-Xcheck-hashes disabled (see issue #1935)"/utf8>>}, V1119)) end), fun (V1121) -> begin (V1122 = (V1120(V1121))), case V1122 of {'Prelude.Types.Left', V1123} -> {'Prelude.Types.Left', V1123}; {'Prelude.Types.Right', V1124} -> (begin (V1163 = begin (V1157 = begin (V1125 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V1126) -> begin (V1127 = (V1125(V1126))), case V1127 of {'Prelude.Types.Left', V1128} -> {'Prelude.Types.Left', V1128}; {'Prelude.Types.Right', V1129} -> (begin (V1156 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V1129 of {'Core.Options.MkSessionOpts', V1130, V1131, V1132, V1133, V1134, V1135, V1136, V1137, V1138, V1139, V1140, V1141, V1142, V1143, V1144, V1145, V1146, V1147, V1148, V1149, V1150, V1151, V1152, V1153, V1154, V1155} -> {'Core.Options.MkSessionOpts', V1130, V1131, V1132, V1133, V1134, V1135, V1136, V1137, V1138, V1139, V1140, V1141, V1142, V1143, V1144, V1145, V1146, V1147, V1148, V1149, V1150, V1151, 1, V1153, V1154, V1155} end))), V1156 end(V1126)) end end end end), fun (V1158) -> begin (V1159 = (V1157(V1158))), case V1159 of {'Prelude.Types.Left', V1160} -> {'Prelude.Types.Left', V1160}; {'Prelude.Types.Right', V1161} -> (begin (V1162 = ('un--preOptions'(V0, V1, V5))), V1162 end(V1158)) end end end end), V1163 end(V1121)) end end end end; {'Idris.CommandLine.CaseTreeHeuristics'} -> begin (V1196 = begin (V1164 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V1165) -> begin (V1166 = (V1164(V1165))), case V1166 of {'Prelude.Types.Left', V1167} -> {'Prelude.Types.Left', V1167}; {'Prelude.Types.Right', V1168} -> (begin (V1195 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V1168 of {'Core.Options.MkSessionOpts', V1169, V1170, V1171, V1172, V1173, V1174, V1175, V1176, V1177, V1178, V1179, V1180, V1181, V1182, V1183, V1184, V1185, V1186, V1187, V1188, V1189, V1190, V1191, V1192, V1193, V1194} -> {'Core.Options.MkSessionOpts', V1169, V1170, V1171, V1172, V1173, V1174, V1175, V1176, V1177, V1178, V1179, V1180, V1181, V1182, V1183, V1184, V1185, V1186, V1187, V1188, V1189, V1190, V1191, V1192, V1193, 1} end))), V1195 end(V1165)) end end end end), fun (V1197) -> begin (V1198 = (V1196(V1197))), case V1198 of {'Prelude.Types.Left', V1199} -> {'Prelude.Types.Left', V1199}; {'Prelude.Types.Right', V1200} -> (begin (V1201 = ('un--preOptions'(V0, V1, V5))), V1201 end(V1197)) end end end end; {'Idris.CommandLine.IncrementalCG', V1202} -> begin (V1208 = begin (V1203 = V0), fun (V1204) -> begin (V1207 = (begin (V1205 = V1203), fun (V1206) -> ('erlang':'get'(V1205)) end end(V1204))), {'Prelude.Types.Right', V1207} end end end), fun (V1209) -> begin (V1210 = (V1208(V1209))), case V1210 of {'Prelude.Types.Left', V1211} -> {'Prelude.Types.Left', V1211}; {'Prelude.Types.Right', V1212} -> (begin (V1219 = begin (V1213 = ('un--setIncrementalCG'(V0, V1, 1, V1202))), fun (V1214) -> begin (V1215 = (V1213(V1214))), case V1215 of {'Prelude.Types.Left', V1216} -> {'Prelude.Types.Left', V1216}; {'Prelude.Types.Right', V1217} -> (begin (V1218 = ('un--preOptions'(V0, V1, V5))), V1218 end(V1214)) end end end end), V1219 end(V1209)) end end end end; {'Idris.CommandLine.WholeProgram'} -> begin (V1252 = begin (V1220 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V1221) -> begin (V1222 = (V1220(V1221))), case V1222 of {'Prelude.Types.Left', V1223} -> {'Prelude.Types.Left', V1223}; {'Prelude.Types.Right', V1224} -> (begin (V1251 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V1224 of {'Core.Options.MkSessionOpts', V1225, V1226, V1227, V1228, V1229, V1230, V1231, V1232, V1233, V1234, V1235, V1236, V1237, V1238, V1239, V1240, V1241, V1242, V1243, V1244, V1245, V1246, V1247, V1248, V1249, V1250} -> {'Core.Options.MkSessionOpts', V1225, V1226, V1227, V1228, V1229, V1230, V1231, V1232, V1233, V1234, V1235, V1236, V1237, V1238, V1239, V1240, V1241, V1242, V1243, V1244, V1245, V1246, V1247, V1248, 1, V1250} end))), V1251 end(V1221)) end end end end), fun (V1253) -> begin (V1254 = (V1252(V1253))), case V1254 of {'Prelude.Types.Left', V1255} -> {'Prelude.Types.Left', V1255}; {'Prelude.Types.Right', V1256} -> (begin (V1257 = ('un--preOptions'(V0, V1, V5))), V1257 end(V1253)) end end end end; {'Idris.CommandLine.BashCompletion', V1258, V1259} -> begin (V1260 = ('un--opts'(V0, V1258, V1259))), fun (V1261) -> begin (V1262 = (V1260(V1261))), case V1262 of {'Prelude.Types.Left', V1263} -> {'Prelude.Types.Left', V1263}; {'Prelude.Types.Right', V1264} -> (begin (V1274 = begin (V1267 = fun (V1265) -> begin (V1266 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(('Idris.Idris2.Data.String':'un--fastUnlines'(V1264)), V1265))), {'Prelude.Types.Right', V1266} end end), fun (V1268) -> begin (V1269 = (V1267(V1268))), case V1269 of {'Prelude.Types.Left', V1270} -> {'Prelude.Types.Left', V1270}; {'Prelude.Types.Right', V1271} -> (begin (V1273 = fun (V1272) -> {'Prelude.Types.Right', 0} end), V1273 end(V1268)) end end end end), V1274 end(V1261)) end end end end; {'Idris.CommandLine.BashCompletionScript', V1275} -> begin (V1278 = fun (V1276) -> begin (V1277 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('un--completionScript'(V1275))/binary, <<"\x{a}"/utf8>>/binary>>, V1276))), {'Prelude.Types.Right', V1277} end end), fun (V1279) -> begin (V1280 = (V1278(V1279))), case V1280 of {'Prelude.Types.Left', V1281} -> {'Prelude.Types.Left', V1281}; {'Prelude.Types.Right', V1282} -> (begin (V1284 = fun (V1283) -> {'Prelude.Types.Right', 0} end), V1284 end(V1279)) end end end end; {'Idris.CommandLine.Total'} -> begin (V1317 = begin (V1285 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V1286) -> begin (V1287 = (V1285(V1286))), case V1287 of {'Prelude.Types.Left', V1288} -> {'Prelude.Types.Left', V1288}; {'Prelude.Types.Right', V1289} -> (begin (V1316 = ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V1289 of {'Core.Options.MkSessionOpts', V1290, V1291, V1292, V1293, V1294, V1295, V1296, V1297, V1298, V1299, V1300, V1301, V1302, V1303, V1304, V1305, V1306, V1307, V1308, V1309, V1310, V1311, V1312, V1313, V1314, V1315} -> {'Core.Options.MkSessionOpts', V1290, 0, V1292, V1293, V1294, V1295, V1296, V1297, V1298, V1299, V1300, V1301, V1302, V1303, V1304, V1305, V1306, V1307, V1308, V1309, V1310, V1311, V1312, V1313, V1314, V1315} end))), V1316 end(V1286)) end end end end), fun (V1318) -> begin (V1319 = (V1317(V1318))), case V1319 of {'Prelude.Types.Left', V1320} -> {'Prelude.Types.Left', V1320}; {'Prelude.Types.Right', V1321} -> (begin (V1322 = ('un--preOptions'(V0, V1, V5))), V1322 end(V1318)) end end end end; _ -> ('un--preOptions'(V0, V1, V5)) end end(E0, E1)) end.
'un--postOptions'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', 1} end; _ -> case V5 of {'Idris.REPL.Common.ErrorLoadingFile', V8, V9} -> case V6 of [E4 | E5] -> (fun (V10, V11) -> case V10 of {'Idris.CommandLine.OutputFile', V12} -> begin (V32 = begin (V13 = ('un--postOptions'(V0, V1, V2, V3, V4, V5, V11))), ((begin (V29 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V26, V27, V28)) end end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end((begin (V21 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> {'Prelude.Types.Right', (V17(V20))} end end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V14) -> {'Builtin.MkUnit'} end))))(V13)) end), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V38 = fun (V37) -> {'Prelude.Types.Right', 0} end), V38 end(V33)) end end end end; _ -> case V6 of [E6 | E7] -> (fun (V39, V40) -> case V39 of {'Idris.CommandLine.OutputFile', V41} -> begin (V61 = begin (V42 = ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V1, V2, V3, V4, {'Idris.Syntax.PRef', {'Core.FC.EmptyFC'}, {'Core.Name.UN', {'Core.Name.Basic', <<"main"/utf8>>}}}, V41))), ((begin (V58 = fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V55, V56, V57)) end end end end end), fun (V59) -> fun (V60) -> ((((V58('erased'))('erased'))(V59))(V60)) end end end((begin (V50 = fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> {'Prelude.Types.Right', (V46(V49))} end end end end end), fun (V51) -> fun (V52) -> ((((V50('erased'))('erased'))(V51))(V52)) end end end(fun (V43) -> {'Builtin.MkUnit'} end))))(V42)) end), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V92 = begin (V85 = begin (V66 = ('un--postOptions'(V0, V1, V2, V3, V4, V5, V40))), ((begin (V82 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V79, V80, V81)) end end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end((begin (V74 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> {'Prelude.Types.Right', (V70(V73))} end end end end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V67) -> {'Builtin.MkUnit'} end))))(V66)) end), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V91 = fun (V90) -> {'Prelude.Types.Right', 0} end), V91 end(V86)) end end end end), V92 end(V62)) end end end end; {'Idris.CommandLine.ExecFn', V93} -> begin (V113 = begin (V94 = ('Idris.Idris2.Idris.REPL':'un--execExp'(V0, V1, V2, V3, V4, {'Idris.Syntax.PRef', {'Core.FC.EmptyFC'}, {'Core.Name.UN', {'Core.Name.Basic', V93}}}))), ((begin (V110 = fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V107, V108, V109)) end end end end end), fun (V111) -> fun (V112) -> ((((V110('erased'))('erased'))(V111))(V112)) end end end((begin (V102 = fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> {'Prelude.Types.Right', (V98(V101))} end end end end end), fun (V103) -> fun (V104) -> ((((V102('erased'))('erased'))(V103))(V104)) end end end(fun (V95) -> {'Builtin.MkUnit'} end))))(V94)) end), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V144 = begin (V137 = begin (V118 = ('un--postOptions'(V0, V1, V2, V3, V4, V5, V40))), ((begin (V134 = fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V131, V132, V133)) end end end end end), fun (V135) -> fun (V136) -> ((((V134('erased'))('erased'))(V135))(V136)) end end end((begin (V126 = fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> {'Prelude.Types.Right', (V122(V125))} end end end end end), fun (V127) -> fun (V128) -> ((((V126('erased'))('erased'))(V127))(V128)) end end end(fun (V119) -> {'Builtin.MkUnit'} end))))(V118)) end), fun (V138) -> begin (V139 = (V137(V138))), case V139 of {'Prelude.Types.Left', V140} -> {'Prelude.Types.Left', V140}; {'Prelude.Types.Right', V141} -> (begin (V143 = fun (V142) -> {'Prelude.Types.Right', 0} end), V143 end(V138)) end end end end), V144 end(V114)) end end end end; {'Idris.CommandLine.CheckOnly'} -> begin (V164 = begin (V145 = ('un--postOptions'(V0, V1, V2, V3, V4, V5, V40))), ((begin (V161 = fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V158, V159, V160)) end end end end end), fun (V162) -> fun (V163) -> ((((V161('erased'))('erased'))(V162))(V163)) end end end((begin (V153 = fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> case V150 of {'Prelude.Types.Left', V151} -> {'Prelude.Types.Left', V151}; {'Prelude.Types.Right', V152} -> {'Prelude.Types.Right', (V149(V152))} end end end end end), fun (V154) -> fun (V155) -> ((((V153('erased'))('erased'))(V154))(V155)) end end end(fun (V146) -> {'Builtin.MkUnit'} end))))(V145)) end), fun (V165) -> begin (V166 = (V164(V165))), case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> (begin (V170 = fun (V169) -> {'Prelude.Types.Right', 0} end), V170 end(V165)) end end end end; {'Idris.CommandLine.RunREPL', V171} -> begin (V172 = ('Idris.Idris2.Idris.REPL':'un--replCmd'(V0, V1, V2, V3, V4, V171))), fun (V173) -> begin (V174 = (V172(V173))), case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> (begin (V178 = fun (V177) -> {'Prelude.Types.Right', 0} end), V178 end(V173)) end end end end; _ -> ('un--postOptions'(V0, V1, V2, V3, V4, V5, V40)) end end(E6, E7)) end end end(E4, E5)); _ -> case V6 of [E2 | E3] -> (fun (V179, V180) -> case V179 of {'Idris.CommandLine.OutputFile', V181} -> begin (V201 = begin (V182 = ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V1, V2, V3, V4, {'Idris.Syntax.PRef', {'Core.FC.EmptyFC'}, {'Core.Name.UN', {'Core.Name.Basic', <<"main"/utf8>>}}}, V181))), ((begin (V198 = fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V195, V196, V197)) end end end end end), fun (V199) -> fun (V200) -> ((((V198('erased'))('erased'))(V199))(V200)) end end end((begin (V190 = fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> case V187 of {'Prelude.Types.Left', V188} -> {'Prelude.Types.Left', V188}; {'Prelude.Types.Right', V189} -> {'Prelude.Types.Right', (V186(V189))} end end end end end), fun (V191) -> fun (V192) -> ((((V190('erased'))('erased'))(V191))(V192)) end end end(fun (V183) -> {'Builtin.MkUnit'} end))))(V182)) end), fun (V202) -> begin (V203 = (V201(V202))), case V203 of {'Prelude.Types.Left', V204} -> {'Prelude.Types.Left', V204}; {'Prelude.Types.Right', V205} -> (begin (V232 = begin (V225 = begin (V206 = ('un--postOptions'(V0, V1, V2, V3, V4, V5, V180))), ((begin (V222 = fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V219, V220, V221)) end end end end end), fun (V223) -> fun (V224) -> ((((V222('erased'))('erased'))(V223))(V224)) end end end((begin (V214 = fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> case V211 of {'Prelude.Types.Left', V212} -> {'Prelude.Types.Left', V212}; {'Prelude.Types.Right', V213} -> {'Prelude.Types.Right', (V210(V213))} end end end end end), fun (V215) -> fun (V216) -> ((((V214('erased'))('erased'))(V215))(V216)) end end end(fun (V207) -> {'Builtin.MkUnit'} end))))(V206)) end), fun (V226) -> begin (V227 = (V225(V226))), case V227 of {'Prelude.Types.Left', V228} -> {'Prelude.Types.Left', V228}; {'Prelude.Types.Right', V229} -> (begin (V231 = fun (V230) -> {'Prelude.Types.Right', 0} end), V231 end(V226)) end end end end), V232 end(V202)) end end end end; {'Idris.CommandLine.ExecFn', V233} -> begin (V253 = begin (V234 = ('Idris.Idris2.Idris.REPL':'un--execExp'(V0, V1, V2, V3, V4, {'Idris.Syntax.PRef', {'Core.FC.EmptyFC'}, {'Core.Name.UN', {'Core.Name.Basic', V233}}}))), ((begin (V250 = fun (V245) -> fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V247, V248, V249)) end end end end end), fun (V251) -> fun (V252) -> ((((V250('erased'))('erased'))(V251))(V252)) end end end((begin (V242 = fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> case V239 of {'Prelude.Types.Left', V240} -> {'Prelude.Types.Left', V240}; {'Prelude.Types.Right', V241} -> {'Prelude.Types.Right', (V238(V241))} end end end end end), fun (V243) -> fun (V244) -> ((((V242('erased'))('erased'))(V243))(V244)) end end end(fun (V235) -> {'Builtin.MkUnit'} end))))(V234)) end), fun (V254) -> begin (V255 = (V253(V254))), case V255 of {'Prelude.Types.Left', V256} -> {'Prelude.Types.Left', V256}; {'Prelude.Types.Right', V257} -> (begin (V284 = begin (V277 = begin (V258 = ('un--postOptions'(V0, V1, V2, V3, V4, V5, V180))), ((begin (V274 = fun (V269) -> fun (V270) -> fun (V271) -> fun (V272) -> fun (V273) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V271, V272, V273)) end end end end end), fun (V275) -> fun (V276) -> ((((V274('erased'))('erased'))(V275))(V276)) end end end((begin (V266 = fun (V260) -> fun (V261) -> fun (V262) -> fun (V263) -> case V263 of {'Prelude.Types.Left', V264} -> {'Prelude.Types.Left', V264}; {'Prelude.Types.Right', V265} -> {'Prelude.Types.Right', (V262(V265))} end end end end end), fun (V267) -> fun (V268) -> ((((V266('erased'))('erased'))(V267))(V268)) end end end(fun (V259) -> {'Builtin.MkUnit'} end))))(V258)) end), fun (V278) -> begin (V279 = (V277(V278))), case V279 of {'Prelude.Types.Left', V280} -> {'Prelude.Types.Left', V280}; {'Prelude.Types.Right', V281} -> (begin (V283 = fun (V282) -> {'Prelude.Types.Right', 0} end), V283 end(V278)) end end end end), V284 end(V254)) end end end end; {'Idris.CommandLine.CheckOnly'} -> begin (V304 = begin (V285 = ('un--postOptions'(V0, V1, V2, V3, V4, V5, V180))), ((begin (V301 = fun (V296) -> fun (V297) -> fun (V298) -> fun (V299) -> fun (V300) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V298, V299, V300)) end end end end end), fun (V302) -> fun (V303) -> ((((V301('erased'))('erased'))(V302))(V303)) end end end((begin (V293 = fun (V287) -> fun (V288) -> fun (V289) -> fun (V290) -> case V290 of {'Prelude.Types.Left', V291} -> {'Prelude.Types.Left', V291}; {'Prelude.Types.Right', V292} -> {'Prelude.Types.Right', (V289(V292))} end end end end end), fun (V294) -> fun (V295) -> ((((V293('erased'))('erased'))(V294))(V295)) end end end(fun (V286) -> {'Builtin.MkUnit'} end))))(V285)) end), fun (V305) -> begin (V306 = (V304(V305))), case V306 of {'Prelude.Types.Left', V307} -> {'Prelude.Types.Left', V307}; {'Prelude.Types.Right', V308} -> (begin (V310 = fun (V309) -> {'Prelude.Types.Right', 0} end), V310 end(V305)) end end end end; {'Idris.CommandLine.RunREPL', V311} -> begin (V312 = ('Idris.Idris2.Idris.REPL':'un--replCmd'(V0, V1, V2, V3, V4, V311))), fun (V313) -> begin (V314 = (V312(V313))), case V314 of {'Prelude.Types.Left', V315} -> {'Prelude.Types.Left', V315}; {'Prelude.Types.Right', V316} -> (begin (V318 = fun (V317) -> {'Prelude.Types.Right', 0} end), V318 end(V313)) end end end end; _ -> ('un--postOptions'(V0, V1, V2, V3, V4, V5, V180)) end end(E2, E3)) end end; _ -> case V6 of [E0 | E1] -> (fun (V319, V320) -> case V319 of {'Idris.CommandLine.OutputFile', V321} -> begin (V341 = begin (V322 = ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V1, V2, V3, V4, {'Idris.Syntax.PRef', {'Core.FC.EmptyFC'}, {'Core.Name.UN', {'Core.Name.Basic', <<"main"/utf8>>}}}, V321))), ((begin (V338 = fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V335, V336, V337)) end end end end end), fun (V339) -> fun (V340) -> ((((V338('erased'))('erased'))(V339))(V340)) end end end((begin (V330 = fun (V324) -> fun (V325) -> fun (V326) -> fun (V327) -> case V327 of {'Prelude.Types.Left', V328} -> {'Prelude.Types.Left', V328}; {'Prelude.Types.Right', V329} -> {'Prelude.Types.Right', (V326(V329))} end end end end end), fun (V331) -> fun (V332) -> ((((V330('erased'))('erased'))(V331))(V332)) end end end(fun (V323) -> {'Builtin.MkUnit'} end))))(V322)) end), fun (V342) -> begin (V343 = (V341(V342))), case V343 of {'Prelude.Types.Left', V344} -> {'Prelude.Types.Left', V344}; {'Prelude.Types.Right', V345} -> (begin (V372 = begin (V365 = begin (V346 = ('un--postOptions'(V0, V1, V2, V3, V4, V5, V320))), ((begin (V362 = fun (V357) -> fun (V358) -> fun (V359) -> fun (V360) -> fun (V361) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V359, V360, V361)) end end end end end), fun (V363) -> fun (V364) -> ((((V362('erased'))('erased'))(V363))(V364)) end end end((begin (V354 = fun (V348) -> fun (V349) -> fun (V350) -> fun (V351) -> case V351 of {'Prelude.Types.Left', V352} -> {'Prelude.Types.Left', V352}; {'Prelude.Types.Right', V353} -> {'Prelude.Types.Right', (V350(V353))} end end end end end), fun (V355) -> fun (V356) -> ((((V354('erased'))('erased'))(V355))(V356)) end end end(fun (V347) -> {'Builtin.MkUnit'} end))))(V346)) end), fun (V366) -> begin (V367 = (V365(V366))), case V367 of {'Prelude.Types.Left', V368} -> {'Prelude.Types.Left', V368}; {'Prelude.Types.Right', V369} -> (begin (V371 = fun (V370) -> {'Prelude.Types.Right', 0} end), V371 end(V366)) end end end end), V372 end(V342)) end end end end; {'Idris.CommandLine.ExecFn', V373} -> begin (V393 = begin (V374 = ('Idris.Idris2.Idris.REPL':'un--execExp'(V0, V1, V2, V3, V4, {'Idris.Syntax.PRef', {'Core.FC.EmptyFC'}, {'Core.Name.UN', {'Core.Name.Basic', V373}}}))), ((begin (V390 = fun (V385) -> fun (V386) -> fun (V387) -> fun (V388) -> fun (V389) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V387, V388, V389)) end end end end end), fun (V391) -> fun (V392) -> ((((V390('erased'))('erased'))(V391))(V392)) end end end((begin (V382 = fun (V376) -> fun (V377) -> fun (V378) -> fun (V379) -> case V379 of {'Prelude.Types.Left', V380} -> {'Prelude.Types.Left', V380}; {'Prelude.Types.Right', V381} -> {'Prelude.Types.Right', (V378(V381))} end end end end end), fun (V383) -> fun (V384) -> ((((V382('erased'))('erased'))(V383))(V384)) end end end(fun (V375) -> {'Builtin.MkUnit'} end))))(V374)) end), fun (V394) -> begin (V395 = (V393(V394))), case V395 of {'Prelude.Types.Left', V396} -> {'Prelude.Types.Left', V396}; {'Prelude.Types.Right', V397} -> (begin (V424 = begin (V417 = begin (V398 = ('un--postOptions'(V0, V1, V2, V3, V4, V5, V320))), ((begin (V414 = fun (V409) -> fun (V410) -> fun (V411) -> fun (V412) -> fun (V413) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V411, V412, V413)) end end end end end), fun (V415) -> fun (V416) -> ((((V414('erased'))('erased'))(V415))(V416)) end end end((begin (V406 = fun (V400) -> fun (V401) -> fun (V402) -> fun (V403) -> case V403 of {'Prelude.Types.Left', V404} -> {'Prelude.Types.Left', V404}; {'Prelude.Types.Right', V405} -> {'Prelude.Types.Right', (V402(V405))} end end end end end), fun (V407) -> fun (V408) -> ((((V406('erased'))('erased'))(V407))(V408)) end end end(fun (V399) -> {'Builtin.MkUnit'} end))))(V398)) end), fun (V418) -> begin (V419 = (V417(V418))), case V419 of {'Prelude.Types.Left', V420} -> {'Prelude.Types.Left', V420}; {'Prelude.Types.Right', V421} -> (begin (V423 = fun (V422) -> {'Prelude.Types.Right', 0} end), V423 end(V418)) end end end end), V424 end(V394)) end end end end; {'Idris.CommandLine.CheckOnly'} -> begin (V444 = begin (V425 = ('un--postOptions'(V0, V1, V2, V3, V4, V5, V320))), ((begin (V441 = fun (V436) -> fun (V437) -> fun (V438) -> fun (V439) -> fun (V440) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V438, V439, V440)) end end end end end), fun (V442) -> fun (V443) -> ((((V441('erased'))('erased'))(V442))(V443)) end end end((begin (V433 = fun (V427) -> fun (V428) -> fun (V429) -> fun (V430) -> case V430 of {'Prelude.Types.Left', V431} -> {'Prelude.Types.Left', V431}; {'Prelude.Types.Right', V432} -> {'Prelude.Types.Right', (V429(V432))} end end end end end), fun (V434) -> fun (V435) -> ((((V433('erased'))('erased'))(V434))(V435)) end end end(fun (V426) -> {'Builtin.MkUnit'} end))))(V425)) end), fun (V445) -> begin (V446 = (V444(V445))), case V446 of {'Prelude.Types.Left', V447} -> {'Prelude.Types.Left', V447}; {'Prelude.Types.Right', V448} -> (begin (V450 = fun (V449) -> {'Prelude.Types.Right', 0} end), V450 end(V445)) end end end end; {'Idris.CommandLine.RunREPL', V451} -> begin (V452 = ('Idris.Idris2.Idris.REPL':'un--replCmd'(V0, V1, V2, V3, V4, V451))), fun (V453) -> begin (V454 = (V452(V453))), case V454 of {'Prelude.Types.Left', V455} -> {'Prelude.Types.Left', V455}; {'Prelude.Types.Right', V456} -> (begin (V458 = fun (V457) -> {'Prelude.Types.Right', 0} end), V458 end(V453)) end end end end; _ -> ('un--postOptions'(V0, V1, V2, V3, V4, V5, V320)) end end(E0, E1)) end end end.
'un--pkgDir'(V0) -> ('case--pkgDir-5735'(V0, ('Idris.Idris2.Libraries.Data.List1':'un--unsnoc'(('Idris.Idris2.Data.String':'un--split'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $-)) end, V0)))))).
'un--opts'(V0, V1, V2) -> case V1 of <<"--"/utf8>> -> case V2 of <<"idris2"/utf8>> -> fun (V3) -> {'Prelude.Types.Right', ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'())} end; _ -> case V2 of <<"--cg"/utf8>> -> begin (V4 = ('un--codegens'(V0))), ((begin (V20 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V12 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', (V8(V11))} end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V5) -> ('un--prefixOnlyIfNonEmpty'(V1, V5)) end))))(V4)) end; <<"--codegen"/utf8>> -> begin (V23 = ('un--codegens'(V0))), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V24) -> ('un--prefixOnlyIfNonEmpty'(V1, V24)) end))))(V23)) end; <<"-p"/utf8>> -> begin (V42 = ('un--findPackages'(V0))), ((begin (V69 = fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V66, V67, V68)) end end end end end), fun (V70) -> fun (V71) -> ((((V69('erased'))('erased'))(V70))(V71)) end end end((begin (V61 = fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> {'Prelude.Types.Right', (V57(V60))} end end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end(fun (V43) -> ('un--prefixOnlyIfNonEmpty'(V1, ((begin (V52 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V50, V51)) end end end end), fun (V53) -> fun (V54) -> ((((V52('erased'))('erased'))(V53))(V54)) end end end(fun (V44) -> case V44 of {'Idris.SetOptions.MkPkgDir', V45, V46, V47} -> V46 end end))(V43)))) end))))(V42)) end; <<"--package"/utf8>> -> begin (V72 = ('un--findPackages'(V0))), ((begin (V99 = fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V96, V97, V98)) end end end end end), fun (V100) -> fun (V101) -> ((((V99('erased'))('erased'))(V100))(V101)) end end end((begin (V91 = fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> {'Prelude.Types.Right', (V87(V90))} end end end end end), fun (V92) -> fun (V93) -> ((((V91('erased'))('erased'))(V92))(V93)) end end end(fun (V73) -> ('un--prefixOnlyIfNonEmpty'(V1, ((begin (V82 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V80, V81)) end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V74) -> case V74 of {'Idris.SetOptions.MkPkgDir', V75, V76, V77} -> V76 end end))(V73)))) end))))(V72)) end; <<"--log"/utf8>> -> fun (V102) -> {'Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, ('un--logLevels'())))} end; _ -> case V1 of <<"--"/utf8>> -> case V2 of <<"-o"/utf8>> -> fun (V103) -> {'Prelude.Types.Right', []} end; <<"--output"/utf8>> -> fun (V104) -> {'Prelude.Types.Right', []} end; <<"--source-dir"/utf8>> -> fun (V105) -> {'Prelude.Types.Right', []} end; <<"--build-dir"/utf8>> -> fun (V106) -> {'Prelude.Types.Right', []} end; <<"--output-dir"/utf8>> -> fun (V107) -> {'Prelude.Types.Right', []} end; _ -> case V2 of <<"--build"/utf8>> -> begin (V108 = ('un--findIpkg'(V0))), ((begin (V124 = fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V121, V122, V123)) end end end end end), fun (V125) -> fun (V126) -> ((((V124('erased'))('erased'))(V125))(V126)) end end end((begin (V116 = fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> {'Prelude.Types.Right', (V112(V115))} end end end end end), fun (V117) -> fun (V118) -> ((((V116('erased'))('erased'))(V117))(V118)) end end end(fun (V109) -> ('un--prefixOnlyIfNonEmpty'(V1, V109)) end))))(V108)) end; <<"--install"/utf8>> -> begin (V127 = ('un--findIpkg'(V0))), ((begin (V143 = fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V140, V141, V142)) end end end end end), fun (V144) -> fun (V145) -> ((((V143('erased'))('erased'))(V144))(V145)) end end end((begin (V135 = fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> case V132 of {'Prelude.Types.Left', V133} -> {'Prelude.Types.Left', V133}; {'Prelude.Types.Right', V134} -> {'Prelude.Types.Right', (V131(V134))} end end end end end), fun (V136) -> fun (V137) -> ((((V135('erased'))('erased'))(V136))(V137)) end end end(fun (V128) -> ('un--prefixOnlyIfNonEmpty'(V1, V128)) end))))(V127)) end; <<"--mkdoc"/utf8>> -> begin (V146 = ('un--findIpkg'(V0))), ((begin (V162 = fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V159, V160, V161)) end end end end end), fun (V163) -> fun (V164) -> ((((V162('erased'))('erased'))(V163))(V164)) end end end((begin (V154 = fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> {'Prelude.Types.Right', (V150(V153))} end end end end end), fun (V155) -> fun (V156) -> ((((V154('erased'))('erased'))(V155))(V156)) end end end(fun (V147) -> ('un--prefixOnlyIfNonEmpty'(V1, V147)) end))))(V146)) end; <<"--typecheck"/utf8>> -> begin (V165 = ('un--findIpkg'(V0))), ((begin (V181 = fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V178, V179, V180)) end end end end end), fun (V182) -> fun (V183) -> ((((V181('erased'))('erased'))(V182))(V183)) end end end((begin (V173 = fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> {'Prelude.Types.Right', (V169(V172))} end end end end end), fun (V174) -> fun (V175) -> ((((V173('erased'))('erased'))(V174))(V175)) end end end(fun (V166) -> ('un--prefixOnlyIfNonEmpty'(V1, V166)) end))))(V165)) end; <<"--clean"/utf8>> -> begin (V184 = ('un--findIpkg'(V0))), ((begin (V200 = fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V197, V198, V199)) end end end end end), fun (V201) -> fun (V202) -> ((((V200('erased'))('erased'))(V201))(V202)) end end end((begin (V192 = fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> {'Prelude.Types.Right', (V188(V191))} end end end end end), fun (V193) -> fun (V194) -> ((((V192('erased'))('erased'))(V193))(V194)) end end end(fun (V185) -> ('un--prefixOnlyIfNonEmpty'(V1, V185)) end))))(V184)) end; <<"--repl"/utf8>> -> begin (V203 = ('un--findIpkg'(V0))), ((begin (V219 = fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V216, V217, V218)) end end end end end), fun (V220) -> fun (V221) -> ((((V219('erased'))('erased'))(V220))(V221)) end end end((begin (V211 = fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> case V208 of {'Prelude.Types.Left', V209} -> {'Prelude.Types.Left', V209}; {'Prelude.Types.Right', V210} -> {'Prelude.Types.Right', (V207(V210))} end end end end end), fun (V212) -> fun (V213) -> ((((V211('erased'))('erased'))(V212))(V213)) end end end(fun (V204) -> ('un--prefixOnlyIfNonEmpty'(V1, V204)) end))))(V203)) end; _ -> fun (V222) -> {'Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V225, V226, V227)) end end end end end, fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V230, V231, V232)) end end end end end, fun (V233) -> fun (V234) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V234)) end end, fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V238, V239, V240, V241)) end end end end end end end, fun (V242) -> fun (V243) -> V243 end end, fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> fun (V248) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V246, V247, V248)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V249, V250)) end end, fun (V251) -> fun (V252) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V251, V252)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) end} end end end; _ -> case V2 of <<"--build"/utf8>> -> begin (V253 = ('un--findIpkg'(V0))), ((begin (V269 = fun (V264) -> fun (V265) -> fun (V266) -> fun (V267) -> fun (V268) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V266, V267, V268)) end end end end end), fun (V270) -> fun (V271) -> ((((V269('erased'))('erased'))(V270))(V271)) end end end((begin (V261 = fun (V255) -> fun (V256) -> fun (V257) -> fun (V258) -> case V258 of {'Prelude.Types.Left', V259} -> {'Prelude.Types.Left', V259}; {'Prelude.Types.Right', V260} -> {'Prelude.Types.Right', (V257(V260))} end end end end end), fun (V262) -> fun (V263) -> ((((V261('erased'))('erased'))(V262))(V263)) end end end(fun (V254) -> ('un--prefixOnlyIfNonEmpty'(V1, V254)) end))))(V253)) end; <<"--install"/utf8>> -> begin (V272 = ('un--findIpkg'(V0))), ((begin (V288 = fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> fun (V287) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V285, V286, V287)) end end end end end), fun (V289) -> fun (V290) -> ((((V288('erased'))('erased'))(V289))(V290)) end end end((begin (V280 = fun (V274) -> fun (V275) -> fun (V276) -> fun (V277) -> case V277 of {'Prelude.Types.Left', V278} -> {'Prelude.Types.Left', V278}; {'Prelude.Types.Right', V279} -> {'Prelude.Types.Right', (V276(V279))} end end end end end), fun (V281) -> fun (V282) -> ((((V280('erased'))('erased'))(V281))(V282)) end end end(fun (V273) -> ('un--prefixOnlyIfNonEmpty'(V1, V273)) end))))(V272)) end; <<"--mkdoc"/utf8>> -> begin (V291 = ('un--findIpkg'(V0))), ((begin (V307 = fun (V302) -> fun (V303) -> fun (V304) -> fun (V305) -> fun (V306) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V304, V305, V306)) end end end end end), fun (V308) -> fun (V309) -> ((((V307('erased'))('erased'))(V308))(V309)) end end end((begin (V299 = fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> case V296 of {'Prelude.Types.Left', V297} -> {'Prelude.Types.Left', V297}; {'Prelude.Types.Right', V298} -> {'Prelude.Types.Right', (V295(V298))} end end end end end), fun (V300) -> fun (V301) -> ((((V299('erased'))('erased'))(V300))(V301)) end end end(fun (V292) -> ('un--prefixOnlyIfNonEmpty'(V1, V292)) end))))(V291)) end; <<"--typecheck"/utf8>> -> begin (V310 = ('un--findIpkg'(V0))), ((begin (V326 = fun (V321) -> fun (V322) -> fun (V323) -> fun (V324) -> fun (V325) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V323, V324, V325)) end end end end end), fun (V327) -> fun (V328) -> ((((V326('erased'))('erased'))(V327))(V328)) end end end((begin (V318 = fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> case V315 of {'Prelude.Types.Left', V316} -> {'Prelude.Types.Left', V316}; {'Prelude.Types.Right', V317} -> {'Prelude.Types.Right', (V314(V317))} end end end end end), fun (V319) -> fun (V320) -> ((((V318('erased'))('erased'))(V319))(V320)) end end end(fun (V311) -> ('un--prefixOnlyIfNonEmpty'(V1, V311)) end))))(V310)) end; <<"--clean"/utf8>> -> begin (V329 = ('un--findIpkg'(V0))), ((begin (V345 = fun (V340) -> fun (V341) -> fun (V342) -> fun (V343) -> fun (V344) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V342, V343, V344)) end end end end end), fun (V346) -> fun (V347) -> ((((V345('erased'))('erased'))(V346))(V347)) end end end((begin (V337 = fun (V331) -> fun (V332) -> fun (V333) -> fun (V334) -> case V334 of {'Prelude.Types.Left', V335} -> {'Prelude.Types.Left', V335}; {'Prelude.Types.Right', V336} -> {'Prelude.Types.Right', (V333(V336))} end end end end end), fun (V338) -> fun (V339) -> ((((V337('erased'))('erased'))(V338))(V339)) end end end(fun (V330) -> ('un--prefixOnlyIfNonEmpty'(V1, V330)) end))))(V329)) end; <<"--repl"/utf8>> -> begin (V348 = ('un--findIpkg'(V0))), ((begin (V364 = fun (V359) -> fun (V360) -> fun (V361) -> fun (V362) -> fun (V363) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V361, V362, V363)) end end end end end), fun (V365) -> fun (V366) -> ((((V364('erased'))('erased'))(V365))(V366)) end end end((begin (V356 = fun (V350) -> fun (V351) -> fun (V352) -> fun (V353) -> case V353 of {'Prelude.Types.Left', V354} -> {'Prelude.Types.Left', V354}; {'Prelude.Types.Right', V355} -> {'Prelude.Types.Right', (V352(V355))} end end end end end), fun (V357) -> fun (V358) -> ((((V356('erased'))('erased'))(V357))(V358)) end end end(fun (V349) -> ('un--prefixOnlyIfNonEmpty'(V1, V349)) end))))(V348)) end; _ -> fun (V367) -> {'Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V368) -> fun (V369) -> fun (V370) -> fun (V371) -> fun (V372) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V370, V371, V372)) end end end end end, fun (V373) -> fun (V374) -> fun (V375) -> fun (V376) -> fun (V377) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V375, V376, V377)) end end end end end, fun (V378) -> fun (V379) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V379)) end end, fun (V380) -> fun (V381) -> fun (V382) -> fun (V383) -> fun (V384) -> fun (V385) -> fun (V386) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V383, V384, V385, V386)) end end end end end end end, fun (V387) -> fun (V388) -> V388 end end, fun (V389) -> fun (V390) -> fun (V391) -> fun (V392) -> fun (V393) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V391, V392, V393)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V394) -> fun (V395) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V394, V395)) end end, fun (V396) -> fun (V397) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V396, V397)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) end} end end end end end; _ -> case V2 of <<"--cg"/utf8>> -> begin (V398 = ('un--codegens'(V0))), ((begin (V414 = fun (V409) -> fun (V410) -> fun (V411) -> fun (V412) -> fun (V413) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V411, V412, V413)) end end end end end), fun (V415) -> fun (V416) -> ((((V414('erased'))('erased'))(V415))(V416)) end end end((begin (V406 = fun (V400) -> fun (V401) -> fun (V402) -> fun (V403) -> case V403 of {'Prelude.Types.Left', V404} -> {'Prelude.Types.Left', V404}; {'Prelude.Types.Right', V405} -> {'Prelude.Types.Right', (V402(V405))} end end end end end), fun (V407) -> fun (V408) -> ((((V406('erased'))('erased'))(V407))(V408)) end end end(fun (V399) -> ('un--prefixOnlyIfNonEmpty'(V1, V399)) end))))(V398)) end; <<"--codegen"/utf8>> -> begin (V417 = ('un--codegens'(V0))), ((begin (V433 = fun (V428) -> fun (V429) -> fun (V430) -> fun (V431) -> fun (V432) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V430, V431, V432)) end end end end end), fun (V434) -> fun (V435) -> ((((V433('erased'))('erased'))(V434))(V435)) end end end((begin (V425 = fun (V419) -> fun (V420) -> fun (V421) -> fun (V422) -> case V422 of {'Prelude.Types.Left', V423} -> {'Prelude.Types.Left', V423}; {'Prelude.Types.Right', V424} -> {'Prelude.Types.Right', (V421(V424))} end end end end end), fun (V426) -> fun (V427) -> ((((V425('erased'))('erased'))(V426))(V427)) end end end(fun (V418) -> ('un--prefixOnlyIfNonEmpty'(V1, V418)) end))))(V417)) end; <<"-p"/utf8>> -> begin (V436 = ('un--findPackages'(V0))), ((begin (V463 = fun (V458) -> fun (V459) -> fun (V460) -> fun (V461) -> fun (V462) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V460, V461, V462)) end end end end end), fun (V464) -> fun (V465) -> ((((V463('erased'))('erased'))(V464))(V465)) end end end((begin (V455 = fun (V449) -> fun (V450) -> fun (V451) -> fun (V452) -> case V452 of {'Prelude.Types.Left', V453} -> {'Prelude.Types.Left', V453}; {'Prelude.Types.Right', V454} -> {'Prelude.Types.Right', (V451(V454))} end end end end end), fun (V456) -> fun (V457) -> ((((V455('erased'))('erased'))(V456))(V457)) end end end(fun (V437) -> ('un--prefixOnlyIfNonEmpty'(V1, ((begin (V446 = fun (V442) -> fun (V443) -> fun (V444) -> fun (V445) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V444, V445)) end end end end), fun (V447) -> fun (V448) -> ((((V446('erased'))('erased'))(V447))(V448)) end end end(fun (V438) -> case V438 of {'Idris.SetOptions.MkPkgDir', V439, V440, V441} -> V440 end end))(V437)))) end))))(V436)) end; <<"--package"/utf8>> -> begin (V466 = ('un--findPackages'(V0))), ((begin (V493 = fun (V488) -> fun (V489) -> fun (V490) -> fun (V491) -> fun (V492) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V490, V491, V492)) end end end end end), fun (V494) -> fun (V495) -> ((((V493('erased'))('erased'))(V494))(V495)) end end end((begin (V485 = fun (V479) -> fun (V480) -> fun (V481) -> fun (V482) -> case V482 of {'Prelude.Types.Left', V483} -> {'Prelude.Types.Left', V483}; {'Prelude.Types.Right', V484} -> {'Prelude.Types.Right', (V481(V484))} end end end end end), fun (V486) -> fun (V487) -> ((((V485('erased'))('erased'))(V486))(V487)) end end end(fun (V467) -> ('un--prefixOnlyIfNonEmpty'(V1, ((begin (V476 = fun (V472) -> fun (V473) -> fun (V474) -> fun (V475) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V474, V475)) end end end end), fun (V477) -> fun (V478) -> ((((V476('erased'))('erased'))(V477))(V478)) end end end(fun (V468) -> case V468 of {'Idris.SetOptions.MkPkgDir', V469, V470, V471} -> V470 end end))(V467)))) end))))(V466)) end; <<"--log"/utf8>> -> fun (V496) -> {'Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, ('un--logLevels'())))} end; _ -> case V1 of <<"--"/utf8>> -> case V2 of <<"-o"/utf8>> -> fun (V497) -> {'Prelude.Types.Right', []} end; <<"--output"/utf8>> -> fun (V498) -> {'Prelude.Types.Right', []} end; <<"--source-dir"/utf8>> -> fun (V499) -> {'Prelude.Types.Right', []} end; <<"--build-dir"/utf8>> -> fun (V500) -> {'Prelude.Types.Right', []} end; <<"--output-dir"/utf8>> -> fun (V501) -> {'Prelude.Types.Right', []} end; _ -> case V2 of <<"--build"/utf8>> -> begin (V502 = ('un--findIpkg'(V0))), ((begin (V518 = fun (V513) -> fun (V514) -> fun (V515) -> fun (V516) -> fun (V517) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V515, V516, V517)) end end end end end), fun (V519) -> fun (V520) -> ((((V518('erased'))('erased'))(V519))(V520)) end end end((begin (V510 = fun (V504) -> fun (V505) -> fun (V506) -> fun (V507) -> case V507 of {'Prelude.Types.Left', V508} -> {'Prelude.Types.Left', V508}; {'Prelude.Types.Right', V509} -> {'Prelude.Types.Right', (V506(V509))} end end end end end), fun (V511) -> fun (V512) -> ((((V510('erased'))('erased'))(V511))(V512)) end end end(fun (V503) -> ('un--prefixOnlyIfNonEmpty'(V1, V503)) end))))(V502)) end; <<"--install"/utf8>> -> begin (V521 = ('un--findIpkg'(V0))), ((begin (V537 = fun (V532) -> fun (V533) -> fun (V534) -> fun (V535) -> fun (V536) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V534, V535, V536)) end end end end end), fun (V538) -> fun (V539) -> ((((V537('erased'))('erased'))(V538))(V539)) end end end((begin (V529 = fun (V523) -> fun (V524) -> fun (V525) -> fun (V526) -> case V526 of {'Prelude.Types.Left', V527} -> {'Prelude.Types.Left', V527}; {'Prelude.Types.Right', V528} -> {'Prelude.Types.Right', (V525(V528))} end end end end end), fun (V530) -> fun (V531) -> ((((V529('erased'))('erased'))(V530))(V531)) end end end(fun (V522) -> ('un--prefixOnlyIfNonEmpty'(V1, V522)) end))))(V521)) end; <<"--mkdoc"/utf8>> -> begin (V540 = ('un--findIpkg'(V0))), ((begin (V556 = fun (V551) -> fun (V552) -> fun (V553) -> fun (V554) -> fun (V555) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V553, V554, V555)) end end end end end), fun (V557) -> fun (V558) -> ((((V556('erased'))('erased'))(V557))(V558)) end end end((begin (V548 = fun (V542) -> fun (V543) -> fun (V544) -> fun (V545) -> case V545 of {'Prelude.Types.Left', V546} -> {'Prelude.Types.Left', V546}; {'Prelude.Types.Right', V547} -> {'Prelude.Types.Right', (V544(V547))} end end end end end), fun (V549) -> fun (V550) -> ((((V548('erased'))('erased'))(V549))(V550)) end end end(fun (V541) -> ('un--prefixOnlyIfNonEmpty'(V1, V541)) end))))(V540)) end; <<"--typecheck"/utf8>> -> begin (V559 = ('un--findIpkg'(V0))), ((begin (V575 = fun (V570) -> fun (V571) -> fun (V572) -> fun (V573) -> fun (V574) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V572, V573, V574)) end end end end end), fun (V576) -> fun (V577) -> ((((V575('erased'))('erased'))(V576))(V577)) end end end((begin (V567 = fun (V561) -> fun (V562) -> fun (V563) -> fun (V564) -> case V564 of {'Prelude.Types.Left', V565} -> {'Prelude.Types.Left', V565}; {'Prelude.Types.Right', V566} -> {'Prelude.Types.Right', (V563(V566))} end end end end end), fun (V568) -> fun (V569) -> ((((V567('erased'))('erased'))(V568))(V569)) end end end(fun (V560) -> ('un--prefixOnlyIfNonEmpty'(V1, V560)) end))))(V559)) end; <<"--clean"/utf8>> -> begin (V578 = ('un--findIpkg'(V0))), ((begin (V594 = fun (V589) -> fun (V590) -> fun (V591) -> fun (V592) -> fun (V593) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V591, V592, V593)) end end end end end), fun (V595) -> fun (V596) -> ((((V594('erased'))('erased'))(V595))(V596)) end end end((begin (V586 = fun (V580) -> fun (V581) -> fun (V582) -> fun (V583) -> case V583 of {'Prelude.Types.Left', V584} -> {'Prelude.Types.Left', V584}; {'Prelude.Types.Right', V585} -> {'Prelude.Types.Right', (V582(V585))} end end end end end), fun (V587) -> fun (V588) -> ((((V586('erased'))('erased'))(V587))(V588)) end end end(fun (V579) -> ('un--prefixOnlyIfNonEmpty'(V1, V579)) end))))(V578)) end; <<"--repl"/utf8>> -> begin (V597 = ('un--findIpkg'(V0))), ((begin (V613 = fun (V608) -> fun (V609) -> fun (V610) -> fun (V611) -> fun (V612) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V610, V611, V612)) end end end end end), fun (V614) -> fun (V615) -> ((((V613('erased'))('erased'))(V614))(V615)) end end end((begin (V605 = fun (V599) -> fun (V600) -> fun (V601) -> fun (V602) -> case V602 of {'Prelude.Types.Left', V603} -> {'Prelude.Types.Left', V603}; {'Prelude.Types.Right', V604} -> {'Prelude.Types.Right', (V601(V604))} end end end end end), fun (V606) -> fun (V607) -> ((((V605('erased'))('erased'))(V606))(V607)) end end end(fun (V598) -> ('un--prefixOnlyIfNonEmpty'(V1, V598)) end))))(V597)) end; _ -> fun (V616) -> {'Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V617) -> fun (V618) -> fun (V619) -> fun (V620) -> fun (V621) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V619, V620, V621)) end end end end end, fun (V622) -> fun (V623) -> fun (V624) -> fun (V625) -> fun (V626) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V624, V625, V626)) end end end end end, fun (V627) -> fun (V628) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V628)) end end, fun (V629) -> fun (V630) -> fun (V631) -> fun (V632) -> fun (V633) -> fun (V634) -> fun (V635) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V632, V633, V634, V635)) end end end end end end end, fun (V636) -> fun (V637) -> V637 end end, fun (V638) -> fun (V639) -> fun (V640) -> fun (V641) -> fun (V642) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V640, V641, V642)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V643) -> fun (V644) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V643, V644)) end end, fun (V645) -> fun (V646) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V645, V646)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) end} end end end; _ -> case V2 of <<"--build"/utf8>> -> begin (V647 = ('un--findIpkg'(V0))), ((begin (V663 = fun (V658) -> fun (V659) -> fun (V660) -> fun (V661) -> fun (V662) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V660, V661, V662)) end end end end end), fun (V664) -> fun (V665) -> ((((V663('erased'))('erased'))(V664))(V665)) end end end((begin (V655 = fun (V649) -> fun (V650) -> fun (V651) -> fun (V652) -> case V652 of {'Prelude.Types.Left', V653} -> {'Prelude.Types.Left', V653}; {'Prelude.Types.Right', V654} -> {'Prelude.Types.Right', (V651(V654))} end end end end end), fun (V656) -> fun (V657) -> ((((V655('erased'))('erased'))(V656))(V657)) end end end(fun (V648) -> ('un--prefixOnlyIfNonEmpty'(V1, V648)) end))))(V647)) end; <<"--install"/utf8>> -> begin (V666 = ('un--findIpkg'(V0))), ((begin (V682 = fun (V677) -> fun (V678) -> fun (V679) -> fun (V680) -> fun (V681) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V679, V680, V681)) end end end end end), fun (V683) -> fun (V684) -> ((((V682('erased'))('erased'))(V683))(V684)) end end end((begin (V674 = fun (V668) -> fun (V669) -> fun (V670) -> fun (V671) -> case V671 of {'Prelude.Types.Left', V672} -> {'Prelude.Types.Left', V672}; {'Prelude.Types.Right', V673} -> {'Prelude.Types.Right', (V670(V673))} end end end end end), fun (V675) -> fun (V676) -> ((((V674('erased'))('erased'))(V675))(V676)) end end end(fun (V667) -> ('un--prefixOnlyIfNonEmpty'(V1, V667)) end))))(V666)) end; <<"--mkdoc"/utf8>> -> begin (V685 = ('un--findIpkg'(V0))), ((begin (V701 = fun (V696) -> fun (V697) -> fun (V698) -> fun (V699) -> fun (V700) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V698, V699, V700)) end end end end end), fun (V702) -> fun (V703) -> ((((V701('erased'))('erased'))(V702))(V703)) end end end((begin (V693 = fun (V687) -> fun (V688) -> fun (V689) -> fun (V690) -> case V690 of {'Prelude.Types.Left', V691} -> {'Prelude.Types.Left', V691}; {'Prelude.Types.Right', V692} -> {'Prelude.Types.Right', (V689(V692))} end end end end end), fun (V694) -> fun (V695) -> ((((V693('erased'))('erased'))(V694))(V695)) end end end(fun (V686) -> ('un--prefixOnlyIfNonEmpty'(V1, V686)) end))))(V685)) end; <<"--typecheck"/utf8>> -> begin (V704 = ('un--findIpkg'(V0))), ((begin (V720 = fun (V715) -> fun (V716) -> fun (V717) -> fun (V718) -> fun (V719) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V717, V718, V719)) end end end end end), fun (V721) -> fun (V722) -> ((((V720('erased'))('erased'))(V721))(V722)) end end end((begin (V712 = fun (V706) -> fun (V707) -> fun (V708) -> fun (V709) -> case V709 of {'Prelude.Types.Left', V710} -> {'Prelude.Types.Left', V710}; {'Prelude.Types.Right', V711} -> {'Prelude.Types.Right', (V708(V711))} end end end end end), fun (V713) -> fun (V714) -> ((((V712('erased'))('erased'))(V713))(V714)) end end end(fun (V705) -> ('un--prefixOnlyIfNonEmpty'(V1, V705)) end))))(V704)) end; <<"--clean"/utf8>> -> begin (V723 = ('un--findIpkg'(V0))), ((begin (V739 = fun (V734) -> fun (V735) -> fun (V736) -> fun (V737) -> fun (V738) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V736, V737, V738)) end end end end end), fun (V740) -> fun (V741) -> ((((V739('erased'))('erased'))(V740))(V741)) end end end((begin (V731 = fun (V725) -> fun (V726) -> fun (V727) -> fun (V728) -> case V728 of {'Prelude.Types.Left', V729} -> {'Prelude.Types.Left', V729}; {'Prelude.Types.Right', V730} -> {'Prelude.Types.Right', (V727(V730))} end end end end end), fun (V732) -> fun (V733) -> ((((V731('erased'))('erased'))(V732))(V733)) end end end(fun (V724) -> ('un--prefixOnlyIfNonEmpty'(V1, V724)) end))))(V723)) end; <<"--repl"/utf8>> -> begin (V742 = ('un--findIpkg'(V0))), ((begin (V758 = fun (V753) -> fun (V754) -> fun (V755) -> fun (V756) -> fun (V757) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V755, V756, V757)) end end end end end), fun (V759) -> fun (V760) -> ((((V758('erased'))('erased'))(V759))(V760)) end end end((begin (V750 = fun (V744) -> fun (V745) -> fun (V746) -> fun (V747) -> case V747 of {'Prelude.Types.Left', V748} -> {'Prelude.Types.Left', V748}; {'Prelude.Types.Right', V749} -> {'Prelude.Types.Right', (V746(V749))} end end end end end), fun (V751) -> fun (V752) -> ((((V750('erased'))('erased'))(V751))(V752)) end end end(fun (V743) -> ('un--prefixOnlyIfNonEmpty'(V1, V743)) end))))(V742)) end; _ -> fun (V761) -> {'Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V762) -> fun (V763) -> fun (V764) -> fun (V765) -> fun (V766) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V764, V765, V766)) end end end end end, fun (V767) -> fun (V768) -> fun (V769) -> fun (V770) -> fun (V771) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V769, V770, V771)) end end end end end, fun (V772) -> fun (V773) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V773)) end end, fun (V774) -> fun (V775) -> fun (V776) -> fun (V777) -> fun (V778) -> fun (V779) -> fun (V780) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V777, V778, V779, V780)) end end end end end end end, fun (V781) -> fun (V782) -> V782 end end, fun (V783) -> fun (V784) -> fun (V785) -> fun (V786) -> fun (V787) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V785, V786, V787)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V788) -> fun (V789) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V788, V789)) end end, fun (V790) -> fun (V791) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V790, V791)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) end} end end end end end.
'un--logLevels'() -> ('Idris.Idris2.Prelude.Types':'un--listBind'(((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> ('Idris.Idris2.Builtin':'un--fst'(V0)) end))(('Idris.Idris2.Core.Options.Log':'un--knownTopics'()))), fun (V8) -> ('nested--13855-6605--in--un--prefixes'(('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Data.String':'un--split'(fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V9, $.)) end, V8)))))) end)).
'un--listPackages'(V0, V1) -> begin (V29 = begin (V2 = ('un--findPackages'(V0))), ((begin (V26 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V23, V24, V25)) end end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end((begin (V18 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> {'Prelude.Types.Right', (V14(V17))} end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V3) -> ('Idris.Idris2.Data.List':'un--sortBy'(fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Basics':'un--on'(fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V6, V7)) end end, fun (V8) -> case V8 of {'Idris.SetOptions.MkPkgDir', V9, V10, V11} -> V10 end end, V4, V5)) end end, V3)) end))))(V2)) end), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V35 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V34) -> ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V0, V1, ('nested--13586-6344--in--un--pkgDesc'(V1, V0, V34)))) end, V33))), V35 end(V30)) end end end end.
'un--ideModeSocket'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.CommandLine.IdeModeSocket', V3} -> 1; _ -> ('un--ideModeSocket'(V2)) end end(E0, E1)) end.
'un--ideMode'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.CommandLine.IdeMode'} -> 1; _ -> ('un--ideMode'(V2)) end end(E0, E1)) end.
'un--getPackageDirs'(V0) -> ((begin (V44 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V41, V42, V43)) end end end end end), fun (V45) -> fun (V46) -> ((((V44('erased'))('erased'))(V45))(V46)) end end end(fun (V28) -> ((begin (V36 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V34, V35)) end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end(fun (V31) -> ('un--pkgDir'(V31)) end))(('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V29) -> [] end end, fun () -> fun (V30) -> V30 end end, V28)))) end))(('Idris.Idris2.Erlang.System.Directory':'un--listDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, V0)))).
'un--findPkgDirs'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Directory':'un--pkgGlobalDirectory'(V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V95 = begin (V8 = ('Idris.Idris2.Core.Directory':'un--pkgLocalDirectory'(V0))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V94 = begin (V15 = fun (V13) -> begin (V14 = (('un--candidateDirs'(V12, V1, V2))(V13))), {'Prelude.Types.Right', V14} end end), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V93 = begin (V22 = fun (V20) -> begin (V21 = (('un--candidateDirs'(V7, V1, V2))(V20))), {'Prelude.Types.Right', V21} end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V92 = begin (V27 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V91 = begin (V60 = fun (V32) -> begin (V59 = (('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> ('un--candidateDirs'(V48, V1, V2)) end, case V31 of {'Core.Options.MkDirs', V49, V50, V51, V52, V53, V54, V55, V56, V57, V58} -> V56 end))(V32))), {'Prelude.Types.Right', V59} end end), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V90 = begin (V68 = case ('Idris.Idris2.Data.List':'un--isNil'(V19)) of 1 -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V26, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V65, V66)) end end, []}, fun (V67) -> V67 end, V64)))); 0 -> V19 end), fun (V69) -> {'Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--sortBy'(fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V72) -> fun (V73) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--==_Eq_PkgVersion'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--/=_Eq_PkgVersion'(V74, V75)) end end}, fun (V76) -> fun (V77) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--compare_Ord_PkgVersion'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--<_Ord_PkgVersion'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Idris.Package.Types':'dn--un-->_Ord_PkgVersion'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--<=_Ord_PkgVersion'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Idris.Package.Types':'dn--un-->=_Ord_PkgVersion'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--max_Ord_PkgVersion'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--min_Ord_PkgVersion'(V88, V89)) end end}, ('Idris.Idris2.Builtin':'un--snd'(V71)), ('Idris.Idris2.Builtin':'un--snd'(V70)))) end end, V68))} end end), V90 end(V61)) end end end end), V91 end(V28)) end end end end), V92 end(V23)) end end end end), V93 end(V16)) end end end end), V94 end(V9)) end end end end), V95 end(V4)) end end end end.
'un--findPkgDir'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V92 = begin (V13 = ('un--findPkgDirs'(V0, V1, V2))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V91 = fun (V18) -> case V17 of [] -> case case V12 of {'Core.Context.MkDefs', V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50} -> case V23 of {'Core.Options.MkOptions', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60} -> case V53 of {'Core.Options.MkSessionOpts', V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86} -> V70 end end end of 1 -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantFindPackage', <<V1/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Idris.Package.Types':'dn--un--show_Show_PkgVersionBounds'(V2))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>}, V18)) end; [E0 | E1] -> (fun (V87, V88) -> case V87 of {'Builtin.MkPair', V89, V90} -> {'Prelude.Types.Right', {'Prelude.Types.Just', V89}} end end(E0, E1)) end end), V91 end(V14)) end end end end), V92 end(V9)) end end end end.
'un--findPackages'(V0) -> begin (V9 = begin (V1 = ('Idris.Idris2.Core.Directory':'un--pkgGlobalDirectory'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V8 = fun (V6) -> begin (V7 = (('un--visiblePackages'(V5))(V6))), {'Prelude.Types.Right', V7} end end), V8 end(V2)) end end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V69 = begin (V14 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V68 = begin (V47 = fun (V19) -> begin (V46 = (('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> V26 end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), begin (V34 = (V31(V32))), (V33(V34)) end end end end end end end}, fun (V35) -> ('un--visiblePackages'(V35)) end, case V18 of {'Core.Options.MkDirs', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} -> V43 end))(V19))), {'Prelude.Types.Right', V46} end end), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V67 = begin (V60 = begin (V52 = ('Idris.Idris2.Core.Directory':'un--pkgLocalDirectory'(V0))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V59 = fun (V57) -> begin (V58 = (('un--visiblePackages'(V56))(V57))), {'Prelude.Types.Right', V58} end end), V59 end(V53)) end end end end), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V66 = fun (V65) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V13, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_List'(V51)), V64))))} end), V66 end(V61)) end end end end), V67 end(V48)) end end end end), V68 end(V15)) end end end end), V69 end(V10)) end end end end.
'un--findIpkg'(V0) -> begin (V30 = fun (V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}))(V1))), {'Prelude.Types.Right', V29} end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V79 = case V34 of {'Prelude.Types.Just', V35} -> begin (V65 = fun (V36) -> begin (V64 = (('Idris.Idris2.Erlang.System.Directory':'un--listDir'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> V43 end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), begin (V51 = (V48(V49))), (V50(V51)) end end end end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V54(V56))), ((V55(V57))(V56)) end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V59(V60))), (V61(V60)) end end end end}, fun (V62) -> fun (V63) -> V63 end end}, V35))(V36))), {'Prelude.Types.Right', V64} end end), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V74 = fun (V70) -> case V69 of {'Prelude.Types.Right', V71} -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V72) -> ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<".ipkg"/utf8>>, V72)) end, V71))}; {'Prelude.Types.Left', V73} -> {'Prelude.Types.Right', []} end end), V74 end(V66)) end end end end; {'Prelude.Types.Nothing'} -> fun (V75) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V77 = fun (V76) -> V76 end), fun (V78) -> (V77(V78)) end end(<<"Can\x{27}t get current directory"/utf8>>))}, V75)) end end), V79 end(V31)) end end end end.
'un--dirOption'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> begin (V15 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V2 of {'Core.Options.MkDirs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14} -> V10 end, <<<<"idris2-"/utf8>>/binary, ('Idris.Idris2.Libraries.Data.Version':'un--showVersion'(0, ('Idris.Idris2.Idris.Version':'un--version'())))/binary>>))/binary, <<"\x{a}"/utf8>>/binary>>, V4))), {'Prelude.Types.Right', V15} end end; 2 -> ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V0, V1, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V16) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V17, V18)) end end}, ('Idris.Idris2.Core.Options':'un--toString'(V2)))))); 1 -> fun (V19) -> begin (V30 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<case V2 of {'Core.Options.MkDirs', V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} -> V25 end/binary, <<"\x{a}"/utf8>>/binary>>, V19))), {'Prelude.Types.Right', V30} end end end.
'un--completionScript'(V0) -> begin (V1 = <<<<"_"/utf8>>/binary, V0/binary>>), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V2) -> fun (V3) -> <<V2/binary, V3/binary>> end end, <<""/utf8>>}, fun (V4) -> V4 end, [V1 | [<<"()\x{a}{\x{a}  ED=$([ -z $2 ] && echo \x{22}--\x{22} || echo $2)\x{a}  COMPREPLY=($(idris2 --bash-completion $ED $3))\x{a}}\x{a}\x{a}complete -F "/utf8>> | [V1 | [<<" -o default idris2"/utf8>> | []]]]])) end.
'un--codegens'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), ((begin (V62 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V59, V60, V61)) end end end end end), fun (V63) -> fun (V64) -> ((((V62('erased'))('erased'))(V63))(V64)) end end end((begin (V54 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> {'Prelude.Types.Right', (V50(V53))} end end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end(fun (V7) -> ((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V40) -> ('Idris.Idris2.Builtin':'un--fst'(V40)) end))(('Idris.Idris2.Core.Options':'un--availableCGs'(case V7 of {'Core.Context.MkDefs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> V12 end)))) end))))(V6)) end.
'un--candidateDirs'(V0, V1, V2) -> ((begin (V10 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V7, V8, V9)) end end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V3) -> ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V4) -> ('nested--13070-5841--in--un--checkBounds'(V2, V1, V0, V4)) end, V3)) end))(('un--getPackageDirs'(V0)))).
'un--addPkgDir'(V0, V1, V2) -> begin (V3 = ('un--findPkgDir'(V0, V1, V2))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V10 = case V7 of {'Prelude.Types.Just', V8} -> ('Idris.Idris2.Core.Context':'un--addPackageDir'(V0, V8)); {'Prelude.Types.Nothing'} -> fun (V9) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V10 end(V4)) end end end end.
