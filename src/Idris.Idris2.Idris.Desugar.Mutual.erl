-module('Idris.Idris2.Idris.Desugar.Mutual').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7427-6141--in--un--mkRecType'/10,
  'un--splitMutual'/1,
  'un--getDecl'/2
]).
'nested--7427-6141--in--un--mkRecType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> {'Idris.Syntax.PType', V8}; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> case V15 of {'Builtin.MkPair', V16, V17} -> {'Idris.Syntax.PPi', V8, V14, V16, {'Prelude.Types.Just', V12}, V17, ('nested--7427-6141--in--un--mkRecType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11))} end end end end(E0, E1)) end.
'un--splitMutual'(V0) -> {'Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V1) -> ('un--getDecl'(1, V1)) end, V0)), ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V2) -> ('un--getDecl'(2, V2)) end, V0))}.
'un--getDecl'(V0, V1) -> case V1 of {'Idris.Syntax.PImplementation', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12} -> {'Prelude.Types.Just', {'Idris.Syntax.PImplementation', V2, V3, V4, V0, V6, V7, V8, V9, V10, V11, V12}}; {'Idris.Syntax.PNamespace', V13, V14, V15} -> {'Prelude.Types.Just', {'Idris.Syntax.PNamespace', V13, V14, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V16) -> ('un--getDecl'(V0, V16)) end, V15))}}; _ -> case V0 of 1 -> case V1 of {'Idris.Syntax.PClaim', V17, V18, V19, V20, V21} -> {'Prelude.Types.Just', V1}; {'Idris.Syntax.PData', V22, V23, V24, V25, V26} -> case V26 of {'Idris.Syntax.MkPData', V27, V28, V29, V30, V31} -> {'Prelude.Types.Just', {'Idris.Syntax.PData', V22, V23, V24, V25, {'Idris.Syntax.MkPLater', V27, V28, V29}}}; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PInterface', V32, V33, V34, V35, V36, V37, V38, V39, V40} -> {'Prelude.Types.Just', V1}; {'Idris.Syntax.PRecord', V41, V42, V43, V44, V45} -> case V45 of {'Idris.Syntax.MkPRecord', V46, V47, V48, V49, V50} -> {'Prelude.Types.Just', {'Idris.Syntax.PData', V41, V42, V43, V44, {'Idris.Syntax.MkPLater', V41, V46, ('nested--7427-6141--in--un--mkRecType'(V48, V49, V50, V47, V46, V44, V43, V42, V41, V47))}}}; _ -> {'Prelude.Types.Nothing'} end; {'Idris.Syntax.PFixity', V51, V52, V53, V54} -> {'Prelude.Types.Just', V1}; {'Idris.Syntax.PDirective', V55, V56} -> {'Prelude.Types.Just', V1}; _ -> {'Prelude.Types.Nothing'} end; 2 -> case V1 of {'Idris.Syntax.PClaim', V57, V58, V59, V60, V61} -> {'Prelude.Types.Nothing'}; {'Idris.Syntax.PData', V62, V63, V64, V65, V66} -> case V66 of {'Idris.Syntax.MkPLater', V67, V68, V69} -> {'Prelude.Types.Just', V1}; _ -> {'Prelude.Types.Just', V1} end; {'Idris.Syntax.PInterface', V70, V71, V72, V73, V74, V75, V76, V77, V78} -> {'Prelude.Types.Nothing'}; {'Idris.Syntax.PRecord', V79, V80, V81, V82, V83} -> case V83 of {'Idris.Syntax.MkPRecordLater', V84, V85} -> {'Prelude.Types.Just', V1}; _ -> {'Prelude.Types.Just', V1} end; {'Idris.Syntax.PFixity', V86, V87, V88, V89} -> {'Prelude.Types.Nothing'}; {'Idris.Syntax.PDirective', V90, V91} -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', V1} end; _ -> case V1 of {'Idris.Syntax.PParameters', V92, V93, V94} -> {'Prelude.Types.Just', {'Idris.Syntax.PParameters', V92, V93, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V95) -> ('un--getDecl'(V0, V95)) end, V94))}}; {'Idris.Syntax.PUsing', V96, V97, V98} -> {'Prelude.Types.Just', {'Idris.Syntax.PUsing', V96, V97, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V99) -> ('un--getDecl'(V0, V99)) end, V98))}}; _ -> case V0 of 0 -> {'Prelude.Types.Just', V1} end end end end.
