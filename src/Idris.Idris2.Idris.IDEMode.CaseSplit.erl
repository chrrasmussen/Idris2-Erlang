-module('Idris.Idris2.Idris.IDEMode.CaseSplit').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--handleHoleNameParen-6752'/2,
  'with--handleOnelineParen-6710'/3,
  'with--dropLast-6598'/2,
  'case--updateCase-6901'/8,
  'case--getCaseStmtType-6481'/3,
  'nested--12097-6403--in--un--isNameOf'/2,
  'nested--13164-7411--in--un--indent'/7,
  'nested--12407-6728--in--un--handleMiddle'/5,
  'nested--12520-6836--in--un--getValid'/7,
  'nested--12520-6838--in--un--getIndent'/8,
  'nested--12520-6837--in--un--getBad'/7,
  'nested--12097-6404--in--un--calcIndent'/3,
  'nested--11243-5641--in--un--bracket'/5,
  'un--updateCase'/6,
  'un--updateAll'/5,
  'un--toStrUpdate'/3,
  'un--showImpossible'/5,
  'un--rtrim'/1,
  'un--parenTrim'/1,
  'un--onelineIndent'/2,
  'un--isWhitespace'/1,
  'un--handleOnelineParen'/2,
  'un--handleOneline'/2,
  'un--handleHoleNameParen'/1,
  'un--handleCaseStmtType'/2,
  'un--getReplaces'/4,
  'un--getClause'/5,
  'un--getCaseStmtType'/1,
  'un--fnName'/2,
  'un--dropLast'/1,
  'un--doUpdates'/5
]).
'with--handleHoleNameParen-6752'(V0, V1) -> case V0 of [] -> case V1 of {'Data.List.Views.Empty'} -> []; _ -> case V1 of {'Data.List.Views.Snoc', V2, V3, V4} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('un--parenTrim'(V5)) end))(V3)), [V2 | []])) end end; _ -> case V1 of {'Data.List.Views.Snoc', V13, V14, V15} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V16) -> ('un--parenTrim'(V16)) end))(V14)), [V13 | []])) end end.
'with--handleOnelineParen-6710'(V0, V1, V2) -> case V0 of [] -> case V1 of {'Data.List.Views.Empty'} -> []; _ -> case V1 of {'Data.List.Views.Snoc', V3, V4, V5} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--12407-6728--in--un--handleMiddle'(V3, V4, V5, V2, V4)), [('un--onelineIndent'(V2, V3)) | []])) end end; _ -> case V1 of {'Data.List.Views.Snoc', V6, V7, V8} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--12407-6728--in--un--handleMiddle'(V6, V7, V8, V2, V7)), [('un--onelineIndent'(V2, V6)) | []])) end end.
'with--dropLast-6598'(V0, V1) -> case V0 of [] -> case V1 of {'Data.List.Views.Empty'} -> []; _ -> case V1 of {'Data.List.Views.Snoc', V2, V3, V4} -> V3 end end; _ -> case V1 of {'Data.List.Views.Snoc', V5, V6, V7} -> V6 end end.
'case--updateCase-6901'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Prelude.Types.Nothing'} -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"No file loaded"/utf8>>}, V8)) end; {'Prelude.Types.Just', V9} -> begin (V39 = fun (V10) -> begin (V38 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, V9))(V10))), {'Prelude.Types.Right', V38} end end), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V179 = case V43 of {'Prelude.Types.Right', V44} -> begin (V48 = ('Idris.Idris2.Libraries.Data.List.Extra':'un--elemAt'(('Idris.Idris2.Data.String':'un--lines'(V44)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((begin (V46 = fun (V45) -> V45 end), fun (V47) -> (V46(V47)) end end(V1))))))), case V48 of {'Prelude.Types.Nothing'} -> fun (V49) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V51 = fun (V50) -> V50 end), fun (V52) -> (V51(V52)) end end(<<"File too short!"/utf8>>))}, V49)) end; {'Prelude.Types.Just', V53} -> begin (V55 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V54) -> ('nested--12520-6836--in--un--getValid'(V0, V1, V2, V3, V4, V5, V54)) end, V2))), begin (V57 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V56) -> ('nested--12520-6837--in--un--getBad'(V0, V1, V2, V3, V4, V5, V56)) end, V2))), begin (V118 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, (begin (V59 = fun (V58) -> V58 end), fun (V60) -> (V59(V60)) end end(<<"interaction.casesplit"/utf8>>)), 3, fun () -> <<<<"Valid: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V61) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V62) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V64, V65)) end end}, {'Prelude.Show.MkShow', fun (V66) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V68, V69)) end end}, V66)) end, fun (V70) -> fun (V71) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V72) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V72)) end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V73, V74)) end end}, V70, V71)) end end}}, V62)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V77) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V78, V79)) end end}, {'Prelude.Show.MkShow', fun (V80) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V81)) end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V82, V83)) end end}, V80)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V86) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V86)) end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V87, V88)) end end}, V84, V85)) end end}}, V75, V76)) end end}, V61)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V91) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V92)) end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V93, V94)) end end}, {'Prelude.Show.MkShow', fun (V95) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V96) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V96)) end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V97, V98)) end end}, V95)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V101) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V102, V103)) end end}, V99, V100)) end end}}, V91)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V106)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V107, V108)) end end}, {'Prelude.Show.MkShow', fun (V109) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V110) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V110)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V111, V112)) end end}, V109)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V115) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V115)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V116, V117)) end end}, V113, V114)) end end}}, V104, V105)) end end}, V89, V90)) end end}, V55))/binary>> end))), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V176 = begin (V135 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, (begin (V124 = fun (V123) -> V123 end), fun (V125) -> (V124(V125)) end end(<<"interaction.casesplit"/utf8>>)), 3, fun () -> <<<<"Bad: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V126) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V127) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V127)) end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V128, V129)) end end}, V126)) end, fun (V130) -> fun (V131) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V132) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V132)) end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V133, V134)) end end}, V130, V131)) end end}, V57))/binary>> end))), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V175 = case ('Idris.Idris2.Data.List':'un--isNil'(V55)) of 1 -> begin (V140 = ('nested--12520-6838--in--un--getIndent'(V0, V1, V2, V3, V4, V5, 0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V53))))), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V141) -> ('un--showImpossible'(V5, V4, V3, V140, V141)) end, V57, [])) end; 0 -> begin (V143 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V142) -> ('un--getReplaces'(V5, V4, V3, V142)) end, V55, []))), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V174 = begin (V148 = ('Idris.Idris2.Idris.IDEMode.TokenLine':'un--tokens'(V53))), begin (V154 = begin (V149 = V5), fun (V150) -> begin (V153 = (begin (V151 = V149), fun (V152) -> ('erlang':'get'(V151)) end end(V150))), {'Prelude.Types.Right', V153} end end end), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V173 = begin (V159 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.IDEMode.CaseSplit.UPD'}, []))), fun (V160) -> begin (V161 = (V159(V160))), case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> (begin (V172 = begin (V164 = ('un--updateAll'(V4, V163, V158, V148, V147))), fun (V165) -> begin (V166 = (V164(V165))), case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> (begin (V171 = fun (V169) -> {'Prelude.Types.Right', case ('un--getCaseStmtType'(V148)) of {'Prelude.Types.Nothing'} -> V168; {'Prelude.Types.Just', V170} -> ('un--handleCaseStmtType'(V168, V170)) end} end), V171 end(V165)) end end end end), V172 end(V160)) end end end end), V173 end(V155)) end end end end end), V174 end(V144)) end end end end end), V175 end(V136)) end end end end), V176 end(V119)) end end end end end end end end; {'Prelude.Types.Left', V177} -> fun (V178) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V9, V177}, V178)) end end), V179 end(V40)) end end end end end.
'case--getCaseStmtType-6481'(V0, V1, V2) -> case V2 of {'Prelude.Basics.:<', V3, V4} -> case V3 of {'Prelude.Basics.:<', V5, V6} -> case V6 of {'Idris.IDEMode.TokenLine.HoleName', V7} -> case V4 of {'Idris.IDEMode.TokenLine.Other', V8} -> case V8 of <<")"/utf8>> -> case ('Idris.Idris2.Data.SnocList':'un--findIndex'(fun (V9) -> ('nested--12097-6403--in--un--isNameOf'(V0, V9)) end, ('Idris.Idris2.Prelude.Types.SnocList':'un--<><'({'Prelude.Basics.Lin'}, V0)))) of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Just', {'Idris.IDEMode.CaseSplit.HoleNameParen'}}; {'Prelude.Types.Just', V10} -> begin (V11 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)) - V10)))), {'Prelude.Types.Just', {'Idris.IDEMode.CaseSplit.OnelineParen', ('nested--12097-6404--in--un--calcIndent'(V0, V11, V0))}} end end; _ -> case V4 of {'Idris.IDEMode.TokenLine.HoleName', V12} -> case ('Idris.Idris2.Data.SnocList':'un--findIndex'(fun (V13) -> ('nested--12097-6403--in--un--isNameOf'(V0, V13)) end, ('Idris.Idris2.Prelude.Types.SnocList':'un--<><'({'Prelude.Basics.Lin'}, V0)))) of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V14} -> begin (V15 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)) - V14)))), {'Prelude.Types.Just', {'Idris.IDEMode.CaseSplit.Oneline', ('nested--12097-6404--in--un--calcIndent'(V0, V15, V0))}} end end; _ -> {'Prelude.Types.Nothing'} end end; _ -> case V4 of {'Idris.IDEMode.TokenLine.HoleName', V16} -> case ('Idris.Idris2.Data.SnocList':'un--findIndex'(fun (V17) -> ('nested--12097-6403--in--un--isNameOf'(V0, V17)) end, ('Idris.Idris2.Prelude.Types.SnocList':'un--<><'({'Prelude.Basics.Lin'}, V0)))) of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V18} -> begin (V19 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)) - V18)))), {'Prelude.Types.Just', {'Idris.IDEMode.CaseSplit.Oneline', ('nested--12097-6404--in--un--calcIndent'(V0, V19, V0))}} end end; _ -> {'Prelude.Types.Nothing'} end end; _ -> case V4 of {'Idris.IDEMode.TokenLine.HoleName', V20} -> case ('Idris.Idris2.Data.SnocList':'un--findIndex'(fun (V21) -> ('nested--12097-6403--in--un--isNameOf'(V0, V21)) end, ('Idris.Idris2.Prelude.Types.SnocList':'un--<><'({'Prelude.Basics.Lin'}, V0)))) of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V22} -> begin (V23 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)) - V22)))), {'Prelude.Types.Just', {'Idris.IDEMode.CaseSplit.Oneline', ('nested--12097-6404--in--un--calcIndent'(V0, V23, V0))}} end end; _ -> {'Prelude.Types.Nothing'} end end; _ -> case V4 of {'Idris.IDEMode.TokenLine.HoleName', V24} -> case ('Idris.Idris2.Data.SnocList':'un--findIndex'(fun (V25) -> ('nested--12097-6403--in--un--isNameOf'(V0, V25)) end, ('Idris.Idris2.Prelude.Types.SnocList':'un--<><'({'Prelude.Basics.Lin'}, V0)))) of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Nothing'}; {'Prelude.Types.Just', V26} -> begin (V27 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)) - V26)))), {'Prelude.Types.Just', {'Idris.IDEMode.CaseSplit.Oneline', ('nested--12097-6404--in--un--calcIndent'(V0, V27, V0))}} end end; _ -> {'Prelude.Types.Nothing'} end end; _ -> {'Prelude.Types.Nothing'} end.
'nested--12097-6403--in--un--isNameOf'(V0, V1) -> case V1 of {'Idris.IDEMode.TokenLine.Name', V2} -> case V2 of <<"of"/utf8>> -> 1; _ -> 0 end; _ -> 0 end.
'nested--13164-7411--in--un--indent'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Prelude.Types.Just', V7} -> ('Idris.Idris2.Parser.Unlit':'un--relit'({'Prelude.Types.Just', V7}, ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicateTR'([], ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(0, begin (V8 = (('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Core.FC':'un--startPos'(V6)))) - 1)), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end)))), $ )))))); {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicateTR'([], ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Core.FC':'un--startPos'(V6)))))), $ )))) end.
'nested--12407-6728--in--un--handleMiddle'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> [('un--parenTrim'(('un--onelineIndent'(V3, V5)))) | ('nested--12407-6728--in--un--handleMiddle'(V0, V1, V2, V3, V6))] end(E0, E1)) end.
'nested--12520-6836--in--un--getValid'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'TTImp.Interactive.CaseSplit.Valid', V7, V8} -> {'Prelude.Types.Just', V8}; _ -> {'Prelude.Types.Nothing'} end.
'nested--12520-6838--in--un--getIndent'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> V6; [E0 | E1] -> (fun (V8, V9) -> case V8 of $  -> ('nested--12520-6838--in--un--getIndent'(V0, V1, V2, V3, V4, V5, (V6 + 1), V9)); _ -> V6 end end(E0, E1)); _ -> V6 end.
'nested--12520-6837--in--un--getBad'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'TTImp.Interactive.CaseSplit.Impossible', V7} -> {'Prelude.Types.Just', V7}; _ -> {'Prelude.Types.Nothing'} end.
'nested--12097-6404--in--un--calcIndent'(V0, V1, V2) -> case ('Idris.Idris2.Data.List':'un--splitAt'(V1, V2)) of {'Builtin.MkPair', V3, V4} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V5) -> fun (V6) -> (V6 + ('Idris.Idris2.Prelude.Types.String':'un--length'(('Idris.Idris2.Idris.IDEMode.TokenLine':'un--toString'(V5))))) end end, 0, V3)) end.
'nested--11243-5641--in--un--bracket'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Syntax.PRef', V5, V6} -> V4; {'Idris.Syntax.PList', V7, V8, V9} -> V4; {'Idris.Syntax.PSnocList', V10, V11, V12} -> V4; {'Idris.Syntax.PPair', V13, V14, V15} -> V4; {'Idris.Syntax.PUnit', V16} -> V4; {'Idris.Syntax.PComprehension', V17, V18, V19} -> V4; {'Idris.Syntax.PPrimVal', V20, V21} -> V4; _ -> {'Idris.Syntax.PBracketed', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V4} end.
'un--updateCase'(V0, V1, V2, V3, V4, V5) -> begin (V11 = begin (V6 = V2), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V33 = ('case--updateCase-6901'(V5, V4, V3, V2, V1, V0, V15, case V15 of {'Idris.REPL.Opts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} -> V19 end))), V33 end(V12)) end end end end.
'un--updateAll'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V6, V7) -> begin (V8 = ('un--doUpdates'(V0, V1, V2, V6, V3))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V23 = begin (V13 = ('un--updateAll'(V0, V1, V2, V3, V7))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V22 = fun (V18) -> {'Prelude.Types.Right', [('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V19) -> fun (V20) -> <<V19/binary, V20/binary>> end end, <<""/utf8>>}, fun (V21) -> ('Idris.Idris2.Idris.IDEMode.TokenLine':'un--toString'(V21)) end, V12)) | V17]} end), V22 end(V14)) end end end end), V23 end(V9)) end end end end end(E0, E1)) end.
'un--toStrUpdate'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case V3 of {'Core.Name.UN', V5} -> case V5 of {'Core.Name.Basic', V6} -> begin (V8 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V7) -> ('Idris.Idris2.Core.TT':'un--defaultKindedName'(V7)) end, V4))))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V14 = fun (V13) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V6, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(('nested--11243-5641--in--un--bracket'(V6, V4, V1, V0, V12))))} | []]} end), V14 end(V9)) end end end end; _ -> fun (V15) -> {'Prelude.Types.Right', []} end end; _ -> fun (V16) -> {'Prelude.Types.Right', []} end end; _ -> fun (V17) -> {'Prelude.Types.Right', []} end end.
'un--showImpossible'(V0, V1, V2, V3, V4) -> begin (V6 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V5) -> ('Idris.Idris2.Core.TT':'un--defaultKindedName'(V5)) end, V4))))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V12 = fun (V11) -> {'Prelude.Types.Right', <<('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicateTR'([], V3, $ ))))/binary, <<('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V10))/binary, <<" impossible"/utf8>>/binary>>/binary>>} end), V12 end(V7)) end end end end.
'un--rtrim'(V0) -> ('unicode':'characters_to_binary'(('string':'reverse'(('Idris.Idris2.Data.String':'un--ltrim'(('unicode':'characters_to_binary'(('string':'reverse'(V0)))))))))).
'un--parenTrim'(V0) -> ('un--rtrim'(('Idris.Idris2.Prelude.Types':'un--fastPack'(('un--dropLast'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))))).
'un--onelineIndent'(V0, V1) -> ('Idris.Idris2.Data.String':'un--indent'(V0, ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--drop'(V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))))))).
'un--isWhitespace'(V0) -> case V0 of {'Idris.IDEMode.TokenLine.Whitespace', V1} -> 1; _ -> 0 end.
'un--handleOnelineParen'(V0, V1) -> ('with--handleOnelineParen-6710'(V1, ('Idris.Idris2.Data.List.Views':'un--snocList'(V1)), V0)).
'un--handleOneline'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> [V2 | ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> ('un--onelineIndent'(V0, V4)) end))(V3))] end(E0, E1)) end.
'un--handleHoleNameParen'(V0) -> ('with--handleHoleNameParen-6752'(V0, ('Idris.Idris2.Data.List.Views':'un--snocList'(V0)))).
'un--handleCaseStmtType'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Idris.IDEMode.CaseSplit.Oneline', V4} -> ('un--handleOneline'(V4, [V2 | V3])); {'Idris.IDEMode.CaseSplit.OnelineParen', V5} -> [('un--parenTrim'(V2)) | ('un--handleOnelineParen'(V5, V3))]; _ -> case V1 of {'Idris.IDEMode.CaseSplit.HoleNameParen'} -> ('un--handleHoleNameParen'(V0)) end end end(E0, E1)); _ -> case V1 of {'Idris.IDEMode.CaseSplit.HoleNameParen'} -> ('un--handleHoleNameParen'(V0)) end end.
'un--getReplaces'(V0, V1, V2, V3) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> ('un--toStrUpdate'(V0, V1, V4)) end, V3, []))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V14 = fun (V10) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V11, V12)) end end, []}, fun (V13) -> V13 end, V9))} end), V14 end(V6)) end end end end.
'un--getClause'(V0, V1, V2, V3, V4) -> begin (V10 = begin (V5 = V0), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V71 = begin (V18 = ('Idris.Idris2.Core.Metadata':'un--findTyDeclAt'(V1, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.FC':'un--onLine'(begin (V17 = (V3 - 1)), case ((V17 band 9223372036854775808) =/= 0) of 'true' -> (V17 bor -9223372036854775808); _ -> (V17 band 9223372036854775807) end end, V15)) end end))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V70 = case V22 of {'Prelude.Types.Just', V23} -> case V23 of {'Builtin.MkPair', V24, V25} -> case V25 of {'Builtin.MkPair', V26, V27} -> case V27 of {'Builtin.MkPair', V28, V29} -> begin (V30 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V26))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V68 = begin (V41 = begin (V35 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V14, {'Core.Env.Nil'}, V29))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V40 = ('Idris.Idris2.TTImp.Interactive.CaseSplit':'un--getEnvArgNames'(V0, V14, V28, V39))), V40 end(V36)) end end end end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V67 = begin (V46 = ('Idris.Idris2.Idris.REPL.Opts':'un--getSourceLine'(V2, V3))), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V66 = fun (V51) -> case V50 of {'Prelude.Types.Just', V52} -> case ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V52)) of {'Builtin.MkPair', V53, V54} -> {'Prelude.Types.Right', {'Prelude.Types.Just', <<('nested--13164-7411--in--un--indent'(V4, V3, V2, V1, V0, V53, V24))/binary, <<('un--fnName'(1, V34))/binary, <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V55) -> fun (V56) -> <<V55/binary, V56/binary>> end end, <<""/utf8>>}, fun (V57) -> V57 end, ((begin (V63 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V61, V62)) end end end end), fun (V64) -> fun (V65) -> ((((V63('erased'))('erased'))(V64))(V65)) end end end(fun (V58) -> <<<<" "/utf8>>/binary, V58/binary>> end))(V45))))/binary, <<<<" = ?"/utf8>>/binary, <<('un--fnName'(0, V34))/binary, <<"_rhs"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>}} end; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V66 end(V47)) end end end end), V67 end(V42)) end end end end), V68 end(V31)) end end end end end end end; {'Prelude.Types.Nothing'} -> fun (V69) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V70 end(V19)) end end end end), V71 end(V11)) end end end end.
'un--getCaseStmtType'(V0) -> begin (V2 = ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V1) -> case ('un--isWhitespace'(V1)) of 1 -> 0; 0 -> 1 end end, V0))), ('case--getCaseStmtType-6481'(V0, V2, ('Idris.Idris2.Prelude.Types.SnocList':'un--<><'({'Prelude.Basics.Lin'}, V2)))) end.
'un--fnName'(V0, V1) -> case V1 of {'Core.Name.UN', V2} -> case V2 of {'Core.Name.Basic', V3} -> case ('Idris.Idris2.Parser.Lexer.Common':'un--isIdentNormal'(V3)) of 1 -> V3; 0 -> case V0 of 1 -> <<<<"("/utf8>>/binary, <<V3/binary, <<")"/utf8>>/binary>>/binary>>; 0 -> <<"op"/utf8>> end end; _ -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V1)) end; {'Core.Name.NS', V4, V5} -> ('un--fnName'(V0, V5)); {'Core.Name.DN', V6, V7} -> V6; _ -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V1)) end.
'un--dropLast'(V0) -> ('with--dropLast-6598'(V0, ('Idris.Idris2.Data.List.Views':'un--snocList'(V0)))).
'un--doUpdates'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.IDEMode.TokenLine.Name', V8} -> case V7 of [E2 | E3] -> (fun (V9, V10) -> case V9 of {'Idris.IDEMode.TokenLine.AsPattern'} -> begin (V11 = ('un--doUpdates'(V0, V1, V2, V3, V10))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.Name', V8} | [{'Idris.IDEMode.TokenLine.AsPattern'} | V15]]} end), V17 end(V12)) end end end end; _ -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V20, V21)) end end}, V8, V3)) of {'Prelude.Types.Nothing'} -> begin (V22 = ('un--doUpdates'(V0, V1, V2, V3, V7))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V28 = fun (V27) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.Name', V8} | V26]} end), V28 end(V23)) end end end end; {'Prelude.Types.Just', V29} -> begin (V30 = ('un--doUpdates'(V0, V1, V2, V3, V7))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V36 = fun (V35) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.Other', V29} | V34]} end), V36 end(V31)) end end end end end end end(E2, E3)); _ -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V39, V40)) end end}, V8, V3)) of {'Prelude.Types.Nothing'} -> begin (V41 = ('un--doUpdates'(V0, V1, V2, V3, V7))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V47 = fun (V46) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.Name', V8} | V45]} end), V47 end(V42)) end end end end; {'Prelude.Types.Just', V48} -> begin (V49 = ('un--doUpdates'(V0, V1, V2, V3, V7))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V55 = fun (V54) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.Other', V48} | V53]} end), V55 end(V50)) end end end end end end; {'Idris.IDEMode.TokenLine.AsPattern'} -> case V7 of [E4 | E5] -> (fun (V56, V57) -> case V56 of {'Idris.IDEMode.TokenLine.LBrace'} -> begin (V58 = ('un--doUpdates'(V0, V1, V2, V3, V57))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V64 = fun (V63) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.AsPattern'} | [{'Idris.IDEMode.TokenLine.LBrace'} | V62]]} end), V64 end(V59)) end end end end; _ -> begin (V65 = ('un--doUpdates'(V0, V1, V2, V3, V7))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V71 = fun (V70) -> {'Prelude.Types.Right', [V6 | V69]} end), V71 end(V66)) end end end end end end(E4, E5)); _ -> begin (V72 = ('un--doUpdates'(V0, V1, V2, V3, V7))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V78 = fun (V77) -> {'Prelude.Types.Right', [V6 | V76]} end), V78 end(V73)) end end end end end; {'Idris.IDEMode.TokenLine.LBrace'} -> case ('Idris.Idris2.Data.List':'un--span'(fun (V79) -> ('un--isWhitespace'(V79)) end, V7)) of {'Builtin.MkPair', V80, V81} -> case V81 of [E6 | E7] -> (fun (V82, V83) -> case V82 of {'Idris.IDEMode.TokenLine.Name', V84} -> case ('Idris.Idris2.Data.List':'un--span'(fun (V85) -> ('un--isWhitespace'(V85)) end, V83)) of {'Builtin.MkPair', V86, V87} -> case V87 of [E8 | E9] -> (fun (V88, V89) -> case V88 of {'Idris.IDEMode.TokenLine.RBrace'} -> begin (V90 = ('un--doUpdates'(V0, V1, V2, V3, [{'Idris.IDEMode.TokenLine.Name', V84} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V86, [{'Idris.IDEMode.TokenLine.RBrace'} | V89]))]))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V96 = fun (V95) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V80, [{'Idris.IDEMode.TokenLine.Name', V84} | [{'Idris.IDEMode.TokenLine.Whitespace', <<" "/utf8>>} | [{'Idris.IDEMode.TokenLine.Equal'} | [{'Idris.IDEMode.TokenLine.Whitespace', <<" "/utf8>>} | V94]]]]))]} end), V96 end(V91)) end end end end; {'Idris.IDEMode.TokenLine.Equal'} -> case ('Idris.Idris2.Data.List':'un--span'(fun (V97) -> ('un--isWhitespace'(V97)) end, V89)) of {'Builtin.MkPair', V98, V99} -> begin (V100 = ('un--doUpdates'(V0, V1, V2, V3, V99))), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V106 = fun (V105) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V80, [{'Idris.IDEMode.TokenLine.Name', V84} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V86, [{'Idris.IDEMode.TokenLine.Equal'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V98, V104))]))]))]} end), V106 end(V101)) end end end end end; _ -> begin (V107 = ('un--doUpdates'(V0, V1, V2, V3, V83))), fun (V108) -> begin (V109 = (V107(V108))), case V109 of {'Prelude.Types.Left', V110} -> {'Prelude.Types.Left', V110}; {'Prelude.Types.Right', V111} -> (begin (V113 = fun (V112) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V80, [{'Idris.IDEMode.TokenLine.Name', V84} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V86, V111))]))]} end), V113 end(V108)) end end end end end end(E8, E9)); _ -> begin (V114 = ('un--doUpdates'(V0, V1, V2, V3, V83))), fun (V115) -> begin (V116 = (V114(V115))), case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> (begin (V120 = fun (V119) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V80, [{'Idris.IDEMode.TokenLine.Name', V84} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V86, V118))]))]} end), V120 end(V115)) end end end end end end; _ -> begin (V121 = ('un--doUpdates'(V0, V1, V2, V3, V7))), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V127 = fun (V126) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([], V125))]} end), V127 end(V122)) end end end end end end(E6, E7)); _ -> begin (V128 = ('un--doUpdates'(V0, V1, V2, V3, V7))), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V134 = fun (V133) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([], V132))]} end), V134 end(V129)) end end end end end end; {'Idris.IDEMode.TokenLine.HoleName', V135} -> begin (V141 = begin (V136 = V1), fun (V137) -> begin (V140 = (begin (V138 = V136), fun (V139) -> ('erlang':'get'(V138)) end end(V137))), {'Prelude.Types.Right', V140} end end end), fun (V142) -> begin (V143 = (V141(V142))), case V143 of {'Prelude.Types.Left', V144} -> {'Prelude.Types.Left', V144}; {'Prelude.Types.Right', V145} -> (begin (V170 = begin (V146 = ('Idris.Idris2.TTImp.Utils':'un--uniqueHoleName'(V0, V2, V145, V135))), fun (V147) -> begin (V148 = (V146(V147))), case V148 of {'Prelude.Types.Left', V149} -> {'Prelude.Types.Left', V149}; {'Prelude.Types.Right', V150} -> (begin (V169 = begin (V156 = begin (V151 = V1), fun (V152) -> begin (V155 = (begin (V153 = V151), fun (V154) -> ('erlang':'put'(V153, [V150 | V145])) end end(V152))), {'Prelude.Types.Right', V155} end end end), fun (V157) -> begin (V158 = (V156(V157))), case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> (begin (V168 = begin (V161 = ('un--doUpdates'(V0, V1, V2, V3, V7))), fun (V162) -> begin (V163 = (V161(V162))), case V163 of {'Prelude.Types.Left', V164} -> {'Prelude.Types.Left', V164}; {'Prelude.Types.Right', V165} -> (begin (V167 = fun (V166) -> {'Prelude.Types.Right', [{'Idris.IDEMode.TokenLine.HoleName', V150} | V165]} end), V167 end(V162)) end end end end), V168 end(V157)) end end end end), V169 end(V147)) end end end end), V170 end(V142)) end end end end; _ -> begin (V171 = ('un--doUpdates'(V0, V1, V2, V3, V7))), fun (V172) -> begin (V173 = (V171(V172))), case V173 of {'Prelude.Types.Left', V174} -> {'Prelude.Types.Left', V174}; {'Prelude.Types.Right', V175} -> (begin (V177 = fun (V176) -> {'Prelude.Types.Right', [V6 | V175]} end), V177 end(V172)) end end end end end end(E0, E1)) end.
