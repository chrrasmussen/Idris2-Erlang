-module('Idris.Idris2.TTImp.Utils').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--nameNum-3150'/2,
  'nested--11471-3291--in--un--usedName'/3,
  'nested--11737-3568--in--un--notBound'/8,
  'nested--11471-3292--in--un--next'/4,
  'nested--11737-3570--in--un--namesFor'/8,
  'nested--11647-3479--in--un--mkVarN'/7,
  'nested--11737-3567--in--un--lookupName'/9,
  'nested--11597-3419--in--un--go'/5,
  'nested--9313-1657--in--un--getRawImp'/7,
  'nested--8945-1031--in--un--getParamTy'/2,
  'nested--11737-3573--in--un--getName'/10,
  'nested--8945-1032--in--un--getFromTy'/2,
  'nested--8945-1034--in--un--getFromPiInfo'/2,
  'nested--8945-1035--in--un--getFromIField'/2,
  'nested--8945-1033--in--un--getFromClause'/2,
  'nested--11737-3571--in--un--findNamesM'/8,
  'nested--11737-3572--in--un--findNames'/8,
  'nested--11737-3569--in--un--defaultNames'/7,
  'un--uniqueHoleNames'/4,
  'un--uniqueHoleName'/4,
  'un--uniqueBasicName'/3,
  'un--unique'/4,
  'un--unNameNum'/1,
  'un--substNamesTy\x{27}'/4,
  'un--substNamesDecl\x{27}'/4,
  'un--substNamesData\x{27}'/4,
  'un--substNamesClause\x{27}'/4,
  'un--substNamesClause'/3,
  'un--substNames\x{27}'/4,
  'un--substNames'/3,
  'un--substLocTy'/2,
  'un--substLocDecl'/2,
  'un--substLocData'/2,
  'un--substLocClause'/2,
  'un--substLoc'/2,
  'un--substBindVars'/3,
  'un--rawImpFromDecl'/1,
  'un--nextNameNum'/1,
  'un--nameNum'/1,
  'un--getArgNames'/7,
  'un--getArgName'/7,
  'un--genUniqueStr'/2,
  'un--findUniqueBindableNames'/6,
  'un--findIBindVars'/1,
  'un--findBindableNamesQuot'/3,
  'un--findBindableNames'/4,
  'un--findAllNames'/2
]).
'case--nameNum-3150'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V2 of <<""/utf8>> -> {'Builtin.MkPair', V0, {'Prelude.Types.Nothing'}}; _ -> case ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V3)) of [E0 | E1] -> (fun (V4, V5) -> case V4 of $_ -> {'Builtin.MkPair', ('unicode':'characters_to_binary'(('string':'reverse'(('Idris.Idris2.Prelude.Types':'un--fastPack'(V5)))))), {'Prelude.Types.Just', begin (V8 = case ('string':'to_integer'(('unicode':'characters_to_binary'(('string':'reverse'(V2)))))) of {E2, E3} when (erlang:'is_integer'(E2)) -> (fun (V6, V7) -> case ('string':'is_empty'(V7)) of 'true' -> V6; _ -> 0 end end(E2, E3)); _ -> 0 end), case ((V8 band 9223372036854775808) =/= 0) of 'true' -> (V8 bor -9223372036854775808); _ -> (V8 band 9223372036854775807) end end}}; _ -> {'Builtin.MkPair', V0, {'Prelude.Types.Nothing'}} end end(E0, E1)); _ -> {'Builtin.MkPair', V0, {'Prelude.Types.Nothing'}} end end end.
'nested--11471-3291--in--un--usedName'(V0, V1, V2) -> begin (V35 = ('Idris.Idris2.Core.Context':'un--lookupTyName'({'Core.Name.UN', {'Core.Name.Basic', V0}}, case V2 of {'Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} -> V3 end))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V71 = fun (V40) -> {'Prelude.Types.Right', case V39 of [] -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V52)) end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V56, V57, V58, V59)) end end end end end end end, fun (V60) -> fun (V61) -> V61 end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V64, V65, V66)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V69, V70)) end end}, V0, V1)); _ -> 1 end} end), V71 end(V36)) end end end end.
'nested--11737-3568--in--un--notBound'(V0, V1, V2, V3, V4, V5, V6, V7) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V19)) end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V23, V24, V25, V26)) end end end end end end end, fun (V27) -> fun (V28) -> V28 end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V31, V32, V33)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V36, V37)) end end}, {'Core.Name.UN', {'Core.Name.Basic', V7}}, V3)) of 1 -> 0; 0 -> 1 end.
'nested--11471-3292--in--un--next'(V0, V1, V2, V3) -> ('un--unNameNum'(('un--nextNameNum'(('un--nameNum'(V3)))))).
'nested--11737-3570--in--un--namesFor'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('nested--11737-3567--in--un--lookupName'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V5 of {'Core.Context.MkDefs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} -> V23 end)))).
'nested--11647-3479--in--un--mkVarN'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> V5; _ -> <<V5/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6))/binary>> end.
'nested--11737-3567--in--un--lookupName'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> fun (V9) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Builtin.MkPair', V12, V13} -> begin (V14 = ('Idris.Idris2.Core.Context':'un--getFullName'(V6, V7))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V26 = begin (V19 = ('Idris.Idris2.Core.Context':'un--getFullName'(V6, V12))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V23)) of 1 -> fun (V24) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V13}} end; 0 -> ('nested--11737-3567--in--un--lookupName'(V0, V1, V2, V3, V4, V5, V6, V7, V11)) end), V25 end(V20)) end end end end), V26 end(V15)) end end end end end end(E0, E1)) end.
'nested--11597-3419--in--un--go'(V0, V1, V2, V3, V4) -> case V3 of 0 -> fun (V5) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2))} end; _ -> begin (V6 = (V3 - 1)), begin (V7 = ('un--uniqueHoleName'(V1, V0, V2, V4))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = ('nested--11597-3419--in--un--go'(V0, V1, [V11 | V2], V6, V11))), V12 end(V8)) end end end end end end.
'nested--9313-1657--in--un--getRawImp'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'TTImp.TTImp.PatClause', V7, V8, V9} -> [V8 | [V9 | []]]; {'TTImp.TTImp.WithClause', V10, V11, V12, V13, V14, V15, V16} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V16, fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V13 | [V11 | []]], ('nested--9313-1657--in--un--getRawImp'(V0, V1, V2, V3, V4, V5, V17)))) end)); {'TTImp.TTImp.ImpossibleClause', V18, V19} -> [V19 | []] end.
'nested--8945-1031--in--un--getParamTy'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> V7 end end end.
'nested--11737-3573--in--un--getName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Core.Name.UN', V10} -> case V10 of {'Core.Name.Basic', V11} -> begin (V12 = case ('Idris.Idris2.Libraries.Utils.String':'un--lowerFirst'(V11)) of 1 -> V11; 0 -> ('Idris.Idris2.Data.String':'un--toLower'(V11)) end), ('un--unique'([V12 | V8], [V12 | V8], 0, V9)) end; _ -> ('un--unique'(V8, V8, 0, V9)) end; _ -> ('un--unique'(V8, V8, 0, V9)) end.
'nested--8945-1032--in--un--getFromTy'(V0, V1) -> case V1 of {'TTImp.TTImp.MkImpTy', V2, V3, V4, V5} -> V5 end.
'nested--8945-1034--in--un--getFromPiInfo'(V0, V1) -> case V1 of {'Core.TT.DefImplicit', V2} -> [V2 | []]; _ -> [] end.
'nested--8945-1035--in--un--getFromIField'(V0, V1) -> case V1 of {'TTImp.TTImp.MkIField', V2, V3, V4, V5, V6} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--8945-1034--in--un--getFromPiInfo'(V0, V4)), [V6 | []])) end.
'nested--8945-1033--in--un--getFromClause'(V0, V1) -> case V1 of {'TTImp.TTImp.PatClause', V2, V3, V4} -> [V3 | [V4 | []]]; {'TTImp.TTImp.WithClause', V5, V6, V7, V8, V9, V10, V11} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V11, fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V8 | [V6 | []]], ('nested--8945-1033--in--un--getFromClause'(V0, V12)))) end)); {'TTImp.TTImp.ImpossibleClause', V13, V14} -> [V14 | []] end.
'nested--11737-3571--in--un--findNamesM'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.Value.NBind', V8, V9, V10, V11} -> fun (V12) -> case V10 of {'Core.TT.Pi', V13, V14, V15, V16} -> {'Prelude.Types.Right', {'Prelude.Types.Just', [<<"f"/utf8>> | [<<"g"/utf8>> | []]]}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; {'Core.Value.NTCon', V17, V18, V19, V20, V21} -> case V21 of [E0 | E1] -> (fun (V22, V23) -> case V22 of {'Builtin.MkPair', V24, V25} -> case V23 of [] -> begin (V58 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V5 of {'Core.Context.MkDefs', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> V26 end, V18))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V131 = case ('Idris.Idris2.Core.Name':'un--dropNS'(V62)) of {'Core.Name.UN', V63} -> case V63 of {'Core.Name.Basic', V64} -> case V64 of <<"List"/utf8>> -> begin (V65 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V6, V0, V5, V25))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V86 = begin (V70 = ('nested--11737-3571--in--un--findNamesM'(V0, V1, V2, V3, V4, V5, V6, V69))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V85 = case V74 of {'Prelude.Types.Nothing'} -> ('nested--11737-3570--in--un--namesFor'(V0, V1, V2, V3, V4, V5, V6, V18)); {'Prelude.Types.Just', V75} -> fun (V76) -> {'Prelude.Types.Right', {'Prelude.Types.Just', ((begin (V82 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V80, V81)) end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end(fun (V77) -> <<V77/binary, <<"s"/utf8>>/binary>> end))(V75))}} end end), V85 end(V71)) end end end end), V86 end(V66)) end end end end; <<"Maybe"/utf8>> -> begin (V87 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V6, V0, V5, V25))), fun (V88) -> begin (V89 = (V87(V88))), case V89 of {'Prelude.Types.Left', V90} -> {'Prelude.Types.Left', V90}; {'Prelude.Types.Right', V91} -> (begin (V108 = begin (V92 = ('nested--11737-3571--in--un--findNamesM'(V0, V1, V2, V3, V4, V5, V6, V91))), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V107 = case V96 of {'Prelude.Types.Nothing'} -> ('nested--11737-3570--in--un--namesFor'(V0, V1, V2, V3, V4, V5, V6, V18)); {'Prelude.Types.Just', V97} -> fun (V98) -> {'Prelude.Types.Right', {'Prelude.Types.Just', ((begin (V104 = fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V102, V103)) end end end end), fun (V105) -> fun (V106) -> ((((V104('erased'))('erased'))(V105))(V106)) end end end(fun (V99) -> <<<<"m"/utf8>>/binary, V99/binary>> end))(V97))}} end end), V107 end(V93)) end end end end), V108 end(V88)) end end end end; <<"SnocList"/utf8>> -> begin (V109 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V6, V0, V5, V25))), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V130 = begin (V114 = ('nested--11737-3571--in--un--findNamesM'(V0, V1, V2, V3, V4, V5, V6, V113))), fun (V115) -> begin (V116 = (V114(V115))), case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> (begin (V129 = case V118 of {'Prelude.Types.Nothing'} -> ('nested--11737-3570--in--un--namesFor'(V0, V1, V2, V3, V4, V5, V6, V18)); {'Prelude.Types.Just', V119} -> fun (V120) -> {'Prelude.Types.Right', {'Prelude.Types.Just', ((begin (V126 = fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V124, V125)) end end end end), fun (V127) -> fun (V128) -> ((((V126('erased'))('erased'))(V127))(V128)) end end end(fun (V121) -> <<<<"s"/utf8>>/binary, V121/binary>> end))(V119))}} end end), V129 end(V115)) end end end end), V130 end(V110)) end end end end; _ -> ('nested--11737-3570--in--un--namesFor'(V0, V1, V2, V3, V4, V5, V6, V18)) end; _ -> ('nested--11737-3570--in--un--namesFor'(V0, V1, V2, V3, V4, V5, V6, V18)) end; _ -> ('nested--11737-3570--in--un--namesFor'(V0, V1, V2, V3, V4, V5, V6, V18)) end), V131 end(V59)) end end end end; _ -> ('nested--11737-3570--in--un--namesFor'(V0, V1, V2, V3, V4, V5, V6, V18)) end; _ -> ('nested--11737-3570--in--un--namesFor'(V0, V1, V2, V3, V4, V5, V6, V18)) end end(E0, E1)); _ -> ('nested--11737-3570--in--un--namesFor'(V0, V1, V2, V3, V4, V5, V6, V18)) end; {'Core.Value.NPrimVal', V132, V133} -> begin (V146 = {'Prelude.Types.Just', [(begin (V135 = fun (V134) -> V134 end), fun (V136) -> (V135(V136)) end end(<<"m"/utf8>>)) | [(begin (V138 = fun (V137) -> V137 end), fun (V139) -> (V138(V139)) end end(<<"n"/utf8>>)) | [(begin (V141 = fun (V140) -> V140 end), fun (V142) -> (V141(V142)) end end(<<"p"/utf8>>)) | [(begin (V144 = fun (V143) -> V143 end), fun (V145) -> (V144(V145)) end end(<<"q"/utf8>>)) | []]]]]}), begin (V159 = {'Prelude.Types.Just', [(begin (V148 = fun (V147) -> V147 end), fun (V149) -> (V148(V149)) end end(<<"i"/utf8>>)) | [(begin (V151 = fun (V150) -> V150 end), fun (V152) -> (V151(V152)) end end(<<"j"/utf8>>)) | [(begin (V154 = fun (V153) -> V153 end), fun (V155) -> (V154(V155)) end end(<<"k"/utf8>>)) | [(begin (V157 = fun (V156) -> V156 end), fun (V158) -> (V157(V158)) end end(<<"l"/utf8>>)) | []]]]]}), fun (V160) -> {'Prelude.Types.Right', ((begin (V168 = fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V166, V167)) end end end end), fun (V169) -> fun (V170) -> ((((V168('erased'))('erased'))(V169))(V170)) end end end(fun (V162) -> ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V163) -> ('nested--11737-3568--in--un--notBound'(V0, V1, V2, V3, V4, V5, V6, V163)) end, V162)) end))(case V133 of {'Core.TT.PrT', V161} -> case V161 of 0 -> V159; 1 -> V159; 2 -> V159; 3 -> V159; 4 -> V159; 5 -> V159; 6 -> V146; 7 -> V146; 8 -> V146; 9 -> V146; 10 -> {'Prelude.Types.Just', [<<"str"/utf8>> | []]}; 11 -> {'Prelude.Types.Just', [<<"c"/utf8>> | [<<"d"/utf8>> | []]]}; 12 -> {'Prelude.Types.Just', [<<"dbl"/utf8>> | []]}; 13 -> {'Prelude.Types.Just', [<<"wrld"/utf8>> | [<<"w"/utf8>> | []]]}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end))} end end end; _ -> fun (V171) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'nested--11737-3572--in--un--findNames'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('nested--11737-3571--in--un--findNamesM'(V0, V1, V2, V3, V4, V5, V6, V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V15 = fun (V13) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V14) -> ('nested--11737-3568--in--un--notBound'(V0, V1, V2, V3, V4, V5, V6, V14)) end, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('nested--11737-3569--in--un--defaultNames'(V0, V1, V2, V3, V4, V5, V6)) end, V12))))} end), V15 end(V9)) end end end end.
'nested--11737-3569--in--un--defaultNames'(V0, V1, V2, V3, V4, V5, V6) -> [<<"x"/utf8>> | [<<"y"/utf8>> | [<<"z"/utf8>> | [<<"w"/utf8>> | [<<"v"/utf8>> | [<<"s"/utf8>> | [<<"t"/utf8>> | [<<"u"/utf8>> | []]]]]]]]].
'un--uniqueHoleNames'(V0, V1, V2, V3) -> ('nested--11597-3419--in--un--go'(V1, V0, [], V2, V3)).
'un--uniqueHoleName'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V0), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V27 = ('un--uniqueBasicName'(V1, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V2, case V13 of {'Idris.Syntax.MkSyntax', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} -> V26 end)), V3))), V27 end(V10)) end end end end.
'un--uniqueBasicName'(V0, V1, V2) -> begin (V3 = ('nested--11471-3291--in--un--usedName'(V2, V1, V0))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V9 = case V7 of 1 -> ('un--uniqueBasicName'(V0, V1, ('nested--11471-3292--in--un--next'(V2, V1, V0, V2)))); 0 -> fun (V8) -> {'Prelude.Types.Right', V2} end end), V9 end(V4)) end end end end.
'un--unique'(V0, V1, V2, V3) -> case V0 of [] -> ('un--unique'(V1, V1, begin (V4 = (V2 + 1)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end, V3)); [E0 | E1] -> (fun (V5, V6) -> begin (V7 = ('nested--11647-3479--in--un--mkVarN'(V5, V6, V3, V2, V1, V5, V2))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V19)) end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V23, V24, V25, V26)) end end end end end end end, fun (V27) -> fun (V28) -> V28 end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V31, V32, V33)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V36, V37)) end end}, {'Core.Name.UN', {'Core.Name.Basic', V7}}, V3)) of 1 -> ('un--unique'(V6, V1, V2, V3)); 0 -> V7 end end end(E0, E1)) end.
'un--unNameNum'(V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> case V2 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V3} -> ('Idris.Idris2.Prelude.Types':'un--fastConcat'([V1 | [<<"_"/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)) | []]]])) end end.
'un--substNamesTy\x{27}'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.MkImpTy', V4, V5, V6, V7} -> {'TTImp.TTImp.MkImpTy', V4, V5, V6, ('un--substNames\x{27}'(V0, V1, V2, V7))} end.
'un--substNamesDecl\x{27}'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.IClaim', V4, V5, V6, V7, V8} -> {'TTImp.TTImp.IClaim', V4, V5, V6, V7, ('un--substNamesTy\x{27}'(V0, V1, V2, V8))}; {'TTImp.TTImp.IDef', V9, V10, V11} -> {'TTImp.TTImp.IDef', V9, V10, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V12)) end))(V11))}; {'TTImp.TTImp.IData', V20, V21, V22, V23} -> {'TTImp.TTImp.IData', V20, V21, V22, ('un--substNamesData\x{27}'(V0, V1, V2, V23))}; {'TTImp.TTImp.IFail', V24, V25, V26} -> {'TTImp.TTImp.IFail', V24, V25, ((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V27) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V27)) end))(V26))}; {'TTImp.TTImp.INamespace', V35, V36, V37} -> {'TTImp.TTImp.INamespace', V35, V36, ((begin (V43 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V41, V42)) end end end end), fun (V44) -> fun (V45) -> ((((V43('erased'))('erased'))(V44))(V45)) end end end(fun (V38) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V38)) end))(V37))}; _ -> V3 end.
'un--substNamesData\x{27}'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.MkImpData', V4, V5, V6, V7, V8} -> {'TTImp.TTImp.MkImpData', V4, V5, ('un--substNames\x{27}'(V0, V1, V2, V6)), V7, ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> ('un--substNamesTy\x{27}'(V0, V1, V2, V9)) end))(V8))}; {'TTImp.TTImp.MkImpLater', V17, V18, V19} -> {'TTImp.TTImp.MkImpLater', V17, V18, ('un--substNames\x{27}'(V0, V1, V2, V19))} end.
'un--substNamesClause\x{27}'(V0, V1, V2, V3) -> case V3 of {'TTImp.TTImp.PatClause', V4, V5, V6} -> begin (V23 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> {'Core.Name.UN', {'Core.Name.Basic', V15}} end))(((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('Idris.Idris2.Builtin':'un--snd'(V7)) end))(('un--findBindableNames'(1, V1, [], V5)))))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V5)), V1))))), {'TTImp.TTImp.PatClause', V4, ('un--substNames\x{27}'(V0, [], [], V5)), ('un--substNames\x{27}'(V0, V23, V2, V6))} end; {'TTImp.TTImp.WithClause', V24, V25, V26, V27, V28, V29, V30} -> begin (V47 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V44 = fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V42, V43)) end end end end), fun (V45) -> fun (V46) -> ((((V44('erased'))('erased'))(V45))(V46)) end end end(fun (V39) -> {'Core.Name.UN', {'Core.Name.Basic', V39}} end))(((begin (V36 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V34, V35)) end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end(fun (V31) -> ('Idris.Idris2.Builtin':'un--snd'(V31)) end))(('un--findBindableNames'(1, V1, [], V25)))))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V25)), V1))))), {'TTImp.TTImp.WithClause', V24, ('un--substNames\x{27}'(V0, [], [], V25)), V26, ('un--substNames\x{27}'(V0, V47, V2, V27)), V28, V29, V30} end; {'TTImp.TTImp.ImpossibleClause', V48, V49} -> {'TTImp.TTImp.ImpossibleClause', V48, ('un--substNames\x{27}'(V0, V1, [], V49))} end.
'un--substNamesClause'(V0, V1, V2) -> ('un--substNamesClause\x{27}'(0, V0, V1, V2)).
'un--substNames\x{27}'(V0, V1, V2, V3) -> case V0 of 0 -> case V3 of {'TTImp.TTImp.IVar', V4, V5} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V21, V22, V23, V24)) end end end end end end end, fun (V25) -> fun (V26) -> V26 end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V29, V30, V31)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V34, V35)) end end}, V5, V1)) of 1 -> {'TTImp.TTImp.IVar', V4, V5}; 0 -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V38, V39)) end end}, V5, V2)) of {'Prelude.Types.Just', V40} -> V40; _ -> {'TTImp.TTImp.IVar', V4, V5} end end; _ -> case V3 of {'TTImp.TTImp.IPi', V41, V42, V43, V44, V45, V46} -> begin (V48 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V47) -> [V47 | V1] end end, V44))), {'TTImp.TTImp.IPi', V41, V42, V43, V44, ('un--substNames\x{27}'(V0, V1, V2, V45)), ('un--substNames\x{27}'(V0, V48, V2, V46))} end; {'TTImp.TTImp.ILam', V49, V50, V51, V52, V53, V54} -> begin (V56 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V55) -> [V55 | V1] end end, V52))), {'TTImp.TTImp.ILam', V49, V50, V51, V52, ('un--substNames\x{27}'(V0, V1, V2, V53)), ('un--substNames\x{27}'(V0, V56, V2, V54))} end; {'TTImp.TTImp.ILet', V57, V58, V59, V60, V61, V62, V63} -> begin (V64 = [V60 | V1]), {'TTImp.TTImp.ILet', V57, V58, V59, V60, ('un--substNames\x{27}'(V0, V1, V2, V61)), ('un--substNames\x{27}'(V0, V1, V2, V62)), ('un--substNames\x{27}'(V0, V64, V2, V63))} end; {'TTImp.TTImp.ICase', V65, V66, V67, V68} -> {'TTImp.TTImp.ICase', V65, ('un--substNames\x{27}'(V0, V1, V2, V66)), ('un--substNames\x{27}'(V0, V1, V2, V67)), ((begin (V74 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V72, V73)) end end end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V69) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V69)) end))(V68))}; {'TTImp.TTImp.ILocal', V77, V78, V79} -> begin (V80 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V78)), V1))), {'TTImp.TTImp.ILocal', V77, ((begin (V86 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V84, V85)) end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(fun (V81) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V81)) end))(V78)), ('un--substNames\x{27}'(V0, V80, V2, V79))} end; {'TTImp.TTImp.IApp', V89, V90, V91} -> {'TTImp.TTImp.IApp', V89, ('un--substNames\x{27}'(V0, V1, V2, V90)), ('un--substNames\x{27}'(V0, V1, V2, V91))}; {'TTImp.TTImp.INamedApp', V92, V93, V94, V95} -> {'TTImp.TTImp.INamedApp', V92, ('un--substNames\x{27}'(V0, V1, V2, V93)), V94, ('un--substNames\x{27}'(V0, V1, V2, V95))}; {'TTImp.TTImp.IAutoApp', V96, V97, V98} -> {'TTImp.TTImp.IAutoApp', V96, ('un--substNames\x{27}'(V0, V1, V2, V97)), ('un--substNames\x{27}'(V0, V1, V2, V98))}; {'TTImp.TTImp.IWithApp', V99, V100, V101} -> {'TTImp.TTImp.IWithApp', V99, ('un--substNames\x{27}'(V0, V1, V2, V100)), ('un--substNames\x{27}'(V0, V1, V2, V101))}; {'TTImp.TTImp.IAlternative', V102, V103, V104} -> {'TTImp.TTImp.IAlternative', V102, V103, ((begin (V110 = fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V108, V109)) end end end end), fun (V111) -> fun (V112) -> ((((V110('erased'))('erased'))(V111))(V112)) end end end(fun (V105) -> ('un--substNames\x{27}'(V0, V1, V2, V105)) end))(V104))}; {'TTImp.TTImp.ICoerced', V113, V114} -> {'TTImp.TTImp.ICoerced', V113, ('un--substNames\x{27}'(V0, V1, V2, V114))}; {'TTImp.TTImp.IAs', V115, V116, V117, V118, V119} -> {'TTImp.TTImp.IAs', V115, V116, V117, V118, ('un--substNames\x{27}'(V0, V1, V2, V119))}; {'TTImp.TTImp.IMustUnify', V120, V121, V122} -> {'TTImp.TTImp.IMustUnify', V120, V121, ('un--substNames\x{27}'(V0, V1, V2, V122))}; {'TTImp.TTImp.IDelayed', V123, V124, V125} -> {'TTImp.TTImp.IDelayed', V123, V124, ('un--substNames\x{27}'(V0, V1, V2, V125))}; {'TTImp.TTImp.IDelay', V126, V127} -> {'TTImp.TTImp.IDelay', V126, ('un--substNames\x{27}'(V0, V1, V2, V127))}; {'TTImp.TTImp.IForce', V128, V129} -> {'TTImp.TTImp.IForce', V128, ('un--substNames\x{27}'(V0, V1, V2, V129))}; {'TTImp.TTImp.IUpdate', V130, V131, V132} -> {'TTImp.TTImp.IUpdate', V130, ((begin (V139 = fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V137, V138)) end end end end), fun (V140) -> fun (V141) -> ((((V139('erased'))('erased'))(V140))(V141)) end end end(fun (V133) -> ('Idris.Idris2.TTImp.TTImp':'un--mapFieldUpdateTerm'(fun (V134) -> ('un--substNames\x{27}'(V0, V1, V2, V134)) end, V133)) end))(V131)), ('un--substNames\x{27}'(V0, V1, V2, V132))}; _ -> V3 end end; 1 -> case V3 of {'TTImp.TTImp.IBindVar', V142, V143} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V146, V147, V148)) end end end end end, fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V151, V152, V153)) end end end end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V155)) end end, fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V159, V160, V161, V162)) end end end end end end end, fun (V163) -> fun (V164) -> V164 end end, fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V167, V168, V169)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V170, V171)) end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V172, V173)) end end}, {'Core.Name.UN', {'Core.Name.Basic', V143}}, V1)) of 1 -> {'TTImp.TTImp.IBindVar', V142, V143}; 0 -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V174, V175)) end end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V176, V177)) end end}, {'Core.Name.UN', {'Core.Name.Basic', V143}}, V2)) of {'Prelude.Types.Just', V178} -> V178; _ -> {'TTImp.TTImp.IBindVar', V142, V143} end end; _ -> case V3 of {'TTImp.TTImp.IPi', V179, V180, V181, V182, V183, V184} -> begin (V186 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V185) -> [V185 | V1] end end, V182))), {'TTImp.TTImp.IPi', V179, V180, V181, V182, ('un--substNames\x{27}'(V0, V1, V2, V183)), ('un--substNames\x{27}'(V0, V186, V2, V184))} end; {'TTImp.TTImp.ILam', V187, V188, V189, V190, V191, V192} -> begin (V194 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V193) -> [V193 | V1] end end, V190))), {'TTImp.TTImp.ILam', V187, V188, V189, V190, ('un--substNames\x{27}'(V0, V1, V2, V191)), ('un--substNames\x{27}'(V0, V194, V2, V192))} end; {'TTImp.TTImp.ILet', V195, V196, V197, V198, V199, V200, V201} -> begin (V202 = [V198 | V1]), {'TTImp.TTImp.ILet', V195, V196, V197, V198, ('un--substNames\x{27}'(V0, V1, V2, V199)), ('un--substNames\x{27}'(V0, V1, V2, V200)), ('un--substNames\x{27}'(V0, V202, V2, V201))} end; {'TTImp.TTImp.ICase', V203, V204, V205, V206} -> {'TTImp.TTImp.ICase', V203, ('un--substNames\x{27}'(V0, V1, V2, V204)), ('un--substNames\x{27}'(V0, V1, V2, V205)), ((begin (V212 = fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V210, V211)) end end end end), fun (V213) -> fun (V214) -> ((((V212('erased'))('erased'))(V213))(V214)) end end end(fun (V207) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V207)) end))(V206))}; {'TTImp.TTImp.ILocal', V215, V216, V217} -> begin (V218 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V216)), V1))), {'TTImp.TTImp.ILocal', V215, ((begin (V224 = fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V222, V223)) end end end end), fun (V225) -> fun (V226) -> ((((V224('erased'))('erased'))(V225))(V226)) end end end(fun (V219) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V219)) end))(V216)), ('un--substNames\x{27}'(V0, V218, V2, V217))} end; {'TTImp.TTImp.IApp', V227, V228, V229} -> {'TTImp.TTImp.IApp', V227, ('un--substNames\x{27}'(V0, V1, V2, V228)), ('un--substNames\x{27}'(V0, V1, V2, V229))}; {'TTImp.TTImp.INamedApp', V230, V231, V232, V233} -> {'TTImp.TTImp.INamedApp', V230, ('un--substNames\x{27}'(V0, V1, V2, V231)), V232, ('un--substNames\x{27}'(V0, V1, V2, V233))}; {'TTImp.TTImp.IAutoApp', V234, V235, V236} -> {'TTImp.TTImp.IAutoApp', V234, ('un--substNames\x{27}'(V0, V1, V2, V235)), ('un--substNames\x{27}'(V0, V1, V2, V236))}; {'TTImp.TTImp.IWithApp', V237, V238, V239} -> {'TTImp.TTImp.IWithApp', V237, ('un--substNames\x{27}'(V0, V1, V2, V238)), ('un--substNames\x{27}'(V0, V1, V2, V239))}; {'TTImp.TTImp.IAlternative', V240, V241, V242} -> {'TTImp.TTImp.IAlternative', V240, V241, ((begin (V248 = fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V246, V247)) end end end end), fun (V249) -> fun (V250) -> ((((V248('erased'))('erased'))(V249))(V250)) end end end(fun (V243) -> ('un--substNames\x{27}'(V0, V1, V2, V243)) end))(V242))}; {'TTImp.TTImp.ICoerced', V251, V252} -> {'TTImp.TTImp.ICoerced', V251, ('un--substNames\x{27}'(V0, V1, V2, V252))}; {'TTImp.TTImp.IAs', V253, V254, V255, V256, V257} -> {'TTImp.TTImp.IAs', V253, V254, V255, V256, ('un--substNames\x{27}'(V0, V1, V2, V257))}; {'TTImp.TTImp.IMustUnify', V258, V259, V260} -> {'TTImp.TTImp.IMustUnify', V258, V259, ('un--substNames\x{27}'(V0, V1, V2, V260))}; {'TTImp.TTImp.IDelayed', V261, V262, V263} -> {'TTImp.TTImp.IDelayed', V261, V262, ('un--substNames\x{27}'(V0, V1, V2, V263))}; {'TTImp.TTImp.IDelay', V264, V265} -> {'TTImp.TTImp.IDelay', V264, ('un--substNames\x{27}'(V0, V1, V2, V265))}; {'TTImp.TTImp.IForce', V266, V267} -> {'TTImp.TTImp.IForce', V266, ('un--substNames\x{27}'(V0, V1, V2, V267))}; {'TTImp.TTImp.IUpdate', V268, V269, V270} -> {'TTImp.TTImp.IUpdate', V268, ((begin (V277 = fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V275, V276)) end end end end), fun (V278) -> fun (V279) -> ((((V277('erased'))('erased'))(V278))(V279)) end end end(fun (V271) -> ('Idris.Idris2.TTImp.TTImp':'un--mapFieldUpdateTerm'(fun (V272) -> ('un--substNames\x{27}'(V0, V1, V2, V272)) end, V271)) end))(V269)), ('un--substNames\x{27}'(V0, V1, V2, V270))}; _ -> V3 end end; _ -> case V3 of {'TTImp.TTImp.IPi', V280, V281, V282, V283, V284, V285} -> begin (V287 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V286) -> [V286 | V1] end end, V283))), {'TTImp.TTImp.IPi', V280, V281, V282, V283, ('un--substNames\x{27}'(V0, V1, V2, V284)), ('un--substNames\x{27}'(V0, V287, V2, V285))} end; {'TTImp.TTImp.ILam', V288, V289, V290, V291, V292, V293} -> begin (V295 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V294) -> [V294 | V1] end end, V291))), {'TTImp.TTImp.ILam', V288, V289, V290, V291, ('un--substNames\x{27}'(V0, V1, V2, V292)), ('un--substNames\x{27}'(V0, V295, V2, V293))} end; {'TTImp.TTImp.ILet', V296, V297, V298, V299, V300, V301, V302} -> begin (V303 = [V299 | V1]), {'TTImp.TTImp.ILet', V296, V297, V298, V299, ('un--substNames\x{27}'(V0, V1, V2, V300)), ('un--substNames\x{27}'(V0, V1, V2, V301)), ('un--substNames\x{27}'(V0, V303, V2, V302))} end; {'TTImp.TTImp.ICase', V304, V305, V306, V307} -> {'TTImp.TTImp.ICase', V304, ('un--substNames\x{27}'(V0, V1, V2, V305)), ('un--substNames\x{27}'(V0, V1, V2, V306)), ((begin (V313 = fun (V309) -> fun (V310) -> fun (V311) -> fun (V312) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V311, V312)) end end end end), fun (V314) -> fun (V315) -> ((((V313('erased'))('erased'))(V314))(V315)) end end end(fun (V308) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V308)) end))(V307))}; {'TTImp.TTImp.ILocal', V316, V317, V318} -> begin (V319 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V317)), V1))), {'TTImp.TTImp.ILocal', V316, ((begin (V325 = fun (V321) -> fun (V322) -> fun (V323) -> fun (V324) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V323, V324)) end end end end), fun (V326) -> fun (V327) -> ((((V325('erased'))('erased'))(V326))(V327)) end end end(fun (V320) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V320)) end))(V317)), ('un--substNames\x{27}'(V0, V319, V2, V318))} end; {'TTImp.TTImp.IApp', V328, V329, V330} -> {'TTImp.TTImp.IApp', V328, ('un--substNames\x{27}'(V0, V1, V2, V329)), ('un--substNames\x{27}'(V0, V1, V2, V330))}; {'TTImp.TTImp.INamedApp', V331, V332, V333, V334} -> {'TTImp.TTImp.INamedApp', V331, ('un--substNames\x{27}'(V0, V1, V2, V332)), V333, ('un--substNames\x{27}'(V0, V1, V2, V334))}; {'TTImp.TTImp.IAutoApp', V335, V336, V337} -> {'TTImp.TTImp.IAutoApp', V335, ('un--substNames\x{27}'(V0, V1, V2, V336)), ('un--substNames\x{27}'(V0, V1, V2, V337))}; {'TTImp.TTImp.IWithApp', V338, V339, V340} -> {'TTImp.TTImp.IWithApp', V338, ('un--substNames\x{27}'(V0, V1, V2, V339)), ('un--substNames\x{27}'(V0, V1, V2, V340))}; {'TTImp.TTImp.IAlternative', V341, V342, V343} -> {'TTImp.TTImp.IAlternative', V341, V342, ((begin (V349 = fun (V345) -> fun (V346) -> fun (V347) -> fun (V348) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V347, V348)) end end end end), fun (V350) -> fun (V351) -> ((((V349('erased'))('erased'))(V350))(V351)) end end end(fun (V344) -> ('un--substNames\x{27}'(V0, V1, V2, V344)) end))(V343))}; {'TTImp.TTImp.ICoerced', V352, V353} -> {'TTImp.TTImp.ICoerced', V352, ('un--substNames\x{27}'(V0, V1, V2, V353))}; {'TTImp.TTImp.IAs', V354, V355, V356, V357, V358} -> {'TTImp.TTImp.IAs', V354, V355, V356, V357, ('un--substNames\x{27}'(V0, V1, V2, V358))}; {'TTImp.TTImp.IMustUnify', V359, V360, V361} -> {'TTImp.TTImp.IMustUnify', V359, V360, ('un--substNames\x{27}'(V0, V1, V2, V361))}; {'TTImp.TTImp.IDelayed', V362, V363, V364} -> {'TTImp.TTImp.IDelayed', V362, V363, ('un--substNames\x{27}'(V0, V1, V2, V364))}; {'TTImp.TTImp.IDelay', V365, V366} -> {'TTImp.TTImp.IDelay', V365, ('un--substNames\x{27}'(V0, V1, V2, V366))}; {'TTImp.TTImp.IForce', V367, V368} -> {'TTImp.TTImp.IForce', V367, ('un--substNames\x{27}'(V0, V1, V2, V368))}; {'TTImp.TTImp.IUpdate', V369, V370, V371} -> {'TTImp.TTImp.IUpdate', V369, ((begin (V378 = fun (V374) -> fun (V375) -> fun (V376) -> fun (V377) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V376, V377)) end end end end), fun (V379) -> fun (V380) -> ((((V378('erased'))('erased'))(V379))(V380)) end end end(fun (V372) -> ('Idris.Idris2.TTImp.TTImp':'un--mapFieldUpdateTerm'(fun (V373) -> ('un--substNames\x{27}'(V0, V1, V2, V373)) end, V372)) end))(V370)), ('un--substNames\x{27}'(V0, V1, V2, V371))}; _ -> V3 end end.
'un--substNames'(V0, V1, V2) -> ('un--substNames\x{27}'(0, V0, V1, V2)).
'un--substLocTy'(V0, V1) -> case V1 of {'TTImp.TTImp.MkImpTy', V2, V3, V4, V5} -> {'TTImp.TTImp.MkImpTy', V0, V0, V4, ('un--substLoc'(V0, V5))} end.
'un--substLocDecl'(V0, V1) -> case V1 of {'TTImp.TTImp.IClaim', V2, V3, V4, V5, V6} -> {'TTImp.TTImp.IClaim', V0, V3, V4, V5, ('un--substLocTy'(V0, V6))}; {'TTImp.TTImp.IDef', V7, V8, V9} -> {'TTImp.TTImp.IDef', V0, V8, ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('un--substLocClause'(V0, V10)) end))(V9))}; {'TTImp.TTImp.IData', V18, V19, V20, V21} -> {'TTImp.TTImp.IData', V0, V19, V20, ('un--substLocData'(V0, V21))}; {'TTImp.TTImp.IFail', V22, V23, V24} -> {'TTImp.TTImp.IFail', V0, V23, ((begin (V30 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V28, V29)) end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V25) -> ('un--substLocDecl'(V0, V25)) end))(V24))}; {'TTImp.TTImp.INamespace', V33, V34, V35} -> {'TTImp.TTImp.INamespace', V0, V34, ((begin (V41 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V39, V40)) end end end end), fun (V42) -> fun (V43) -> ((((V41('erased'))('erased'))(V42))(V43)) end end end(fun (V36) -> ('un--substLocDecl'(V0, V36)) end))(V35))}; _ -> V1 end.
'un--substLocData'(V0, V1) -> case V1 of {'TTImp.TTImp.MkImpData', V2, V3, V4, V5, V6} -> {'TTImp.TTImp.MkImpData', V0, V3, ('un--substLoc'(V0, V4)), V5, ((begin (V12 = fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V10, V11)) end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V7) -> ('un--substLocTy'(V0, V7)) end))(V6))}; {'TTImp.TTImp.MkImpLater', V15, V16, V17} -> {'TTImp.TTImp.MkImpLater', V0, V16, ('un--substLoc'(V0, V17))} end.
'un--substLocClause'(V0, V1) -> case V1 of {'TTImp.TTImp.PatClause', V2, V3, V4} -> {'TTImp.TTImp.PatClause', V0, ('un--substLoc'(V0, V3)), ('un--substLoc'(V0, V4))}; {'TTImp.TTImp.WithClause', V5, V6, V7, V8, V9, V10, V11} -> {'TTImp.TTImp.WithClause', V0, ('un--substLoc'(V0, V6)), V7, ('un--substLoc'(V0, V8)), V9, V10, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('un--substLocClause'(V0, V12)) end))(V11))}; {'TTImp.TTImp.ImpossibleClause', V20, V21} -> {'TTImp.TTImp.ImpossibleClause', V0, ('un--substLoc'(V0, V21))} end.
'un--substLoc'(V0, V1) -> case V1 of {'TTImp.TTImp.IVar', V2, V3} -> {'TTImp.TTImp.IVar', V0, V3}; {'TTImp.TTImp.IPi', V4, V5, V6, V7, V8, V9} -> {'TTImp.TTImp.IPi', V0, V5, V6, V7, ('un--substLoc'(V0, V8)), ('un--substLoc'(V0, V9))}; {'TTImp.TTImp.ILam', V10, V11, V12, V13, V14, V15} -> {'TTImp.TTImp.ILam', V0, V11, V12, V13, ('un--substLoc'(V0, V14)), ('un--substLoc'(V0, V15))}; {'TTImp.TTImp.ILet', V16, V17, V18, V19, V20, V21, V22} -> {'TTImp.TTImp.ILet', V0, V0, V18, V19, ('un--substLoc'(V0, V20)), ('un--substLoc'(V0, V21)), ('un--substLoc'(V0, V22))}; {'TTImp.TTImp.ICase', V23, V24, V25, V26} -> {'TTImp.TTImp.ICase', V0, ('un--substLoc'(V0, V24)), ('un--substLoc'(V0, V25)), ((begin (V32 = fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V30, V31)) end end end end), fun (V33) -> fun (V34) -> ((((V32('erased'))('erased'))(V33))(V34)) end end end(fun (V27) -> ('un--substLocClause'(V0, V27)) end))(V26))}; {'TTImp.TTImp.ILocal', V35, V36, V37} -> {'TTImp.TTImp.ILocal', V0, ((begin (V43 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V41, V42)) end end end end), fun (V44) -> fun (V45) -> ((((V43('erased'))('erased'))(V44))(V45)) end end end(fun (V38) -> ('un--substLocDecl'(V0, V38)) end))(V36)), ('un--substLoc'(V0, V37))}; {'TTImp.TTImp.IApp', V46, V47, V48} -> {'TTImp.TTImp.IApp', V0, ('un--substLoc'(V0, V47)), ('un--substLoc'(V0, V48))}; {'TTImp.TTImp.INamedApp', V49, V50, V51, V52} -> {'TTImp.TTImp.INamedApp', V0, ('un--substLoc'(V0, V50)), V51, ('un--substLoc'(V0, V52))}; {'TTImp.TTImp.IAutoApp', V53, V54, V55} -> {'TTImp.TTImp.IAutoApp', V0, ('un--substLoc'(V0, V54)), ('un--substLoc'(V0, V55))}; {'TTImp.TTImp.IWithApp', V56, V57, V58} -> {'TTImp.TTImp.IWithApp', V0, ('un--substLoc'(V0, V57)), ('un--substLoc'(V0, V58))}; {'TTImp.TTImp.IAlternative', V59, V60, V61} -> {'TTImp.TTImp.IAlternative', V0, V60, ((begin (V67 = fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V65, V66)) end end end end), fun (V68) -> fun (V69) -> ((((V67('erased'))('erased'))(V68))(V69)) end end end(fun (V62) -> ('un--substLoc'(V0, V62)) end))(V61))}; {'TTImp.TTImp.ICoerced', V70, V71} -> {'TTImp.TTImp.ICoerced', V0, ('un--substLoc'(V0, V71))}; {'TTImp.TTImp.IAs', V72, V73, V74, V75, V76} -> {'TTImp.TTImp.IAs', V0, V0, V74, V75, ('un--substLoc'(V0, V76))}; {'TTImp.TTImp.IMustUnify', V77, V78, V79} -> {'TTImp.TTImp.IMustUnify', V0, V78, ('un--substLoc'(V0, V79))}; {'TTImp.TTImp.IDelayed', V80, V81, V82} -> {'TTImp.TTImp.IDelayed', V0, V81, ('un--substLoc'(V0, V82))}; {'TTImp.TTImp.IDelay', V83, V84} -> {'TTImp.TTImp.IDelay', V0, ('un--substLoc'(V0, V84))}; {'TTImp.TTImp.IForce', V85, V86} -> {'TTImp.TTImp.IForce', V0, ('un--substLoc'(V0, V86))}; {'TTImp.TTImp.IUpdate', V87, V88, V89} -> {'TTImp.TTImp.IUpdate', V0, ((begin (V96 = fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V94, V95)) end end end end), fun (V97) -> fun (V98) -> ((((V96('erased'))('erased'))(V97))(V98)) end end end(fun (V90) -> ('Idris.Idris2.TTImp.TTImp':'un--mapFieldUpdateTerm'(fun (V91) -> ('un--substLoc'(V0, V91)) end, V90)) end))(V88)), ('un--substLoc'(V0, V89))}; _ -> V1 end.
'un--substBindVars'(V0, V1, V2) -> ('un--substNames\x{27}'(1, V0, V1, V2)).
'un--rawImpFromDecl'(V0) -> case V0 of {'TTImp.TTImp.IClaim', V1, V2, V3, V4, V5} -> [('nested--8945-1032--in--un--getFromTy'(V0, V5)) | []]; {'TTImp.TTImp.IData', V6, V7, V8, V9} -> case V9 of {'TTImp.TTImp.MkImpData', V10, V11, V12, V13, V14} -> [V12 | ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> ('nested--8945-1032--in--un--getFromTy'(V0, V15)) end))(V14))]; {'TTImp.TTImp.MkImpLater', V23, V24, V25} -> [V25 | []] end; {'TTImp.TTImp.IDef', V26, V27, V28} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V28, fun (V29) -> ('nested--8945-1033--in--un--getFromClause'(V0, V29)) end)); {'TTImp.TTImp.IParameters', V30, V31, V32} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V32, fun (V33) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--rawImpFromDecl'(V33)), ((begin (V39 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V37, V38)) end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V34) -> ('nested--8945-1031--in--un--getParamTy'(V0, V34)) end))(V31)))) end)); {'TTImp.TTImp.IRecord', V42, V43, V44, V45, V46} -> case V46 of {'TTImp.TTImp.MkImpRecord', V47, V48, V49, V50, V51, V52} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(((begin (V58 = fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V56, V57)) end end end end), fun (V59) -> fun (V60) -> ((((V58('erased'))('erased'))(V59))(V60)) end end end(fun (V53) -> ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V53)))) end))(V49)), fun (V61) -> begin (V62 = {'TTImp.TTImp.IRecord', V42, V43, V44, V45, {'TTImp.TTImp.MkImpRecord', V47, V48, V49, V50, V51, V52}}), case V61 of {'Builtin.MkPair', V63, V64} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V52, fun (V65) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--8945-1034--in--un--getFromPiInfo'(V62, V63)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V64 | []], ('nested--8945-1035--in--un--getFromIField'(V62, V65)))))) end)) end end end)) end; {'TTImp.TTImp.IFail', V66, V67, V68} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V68, fun (V69) -> ('un--rawImpFromDecl'(V69)) end)); {'TTImp.TTImp.INamespace', V70, V71, V72} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V72, fun (V73) -> ('un--rawImpFromDecl'(V73)) end)); {'TTImp.TTImp.ITransform', V74, V75, V76, V77} -> [V76 | [V77 | []]]; {'TTImp.TTImp.IRunElabDecl', V78, V79} -> []; {'TTImp.TTImp.IPragma', V80, V81, V82} -> []; {'TTImp.TTImp.ILog', V83} -> []; {'TTImp.TTImp.IBuiltin', V84, V85, V86} -> [] end.
'un--nextNameNum'(V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> {'Builtin.MkPair', V1, {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> begin (V3 = 0), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end end, fun () -> fun (V4) -> begin (V6 = (begin (V5 = 1), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end + V4)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end end end, V2))}} end.
'un--nameNum'(V0) -> ('case--nameNum-3150'(V0, ('Idris.Idris2.Data.String':'un--span'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--isDigit'(V1)) end, ('unicode':'characters_to_binary'(('string':'reverse'(V0)))))))).
'un--getArgNames'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.Value.NBind', V7, V8, V9, V10} -> case V9 of {'Core.TT.Pi', V11, V12, V13, V14} -> begin (V29 = case V13 of {'Core.TT.Explicit'} -> begin (V15 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V2, V14))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V27 = begin (V20 = ('un--getArgName'(V0, V1, V2, V8, V3, V4, V19))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V26 = fun (V25) -> {'Prelude.Types.Right', [V24 | []]} end), V26 end(V21)) end end end end), V27 end(V16)) end end end end; _ -> fun (V28) -> {'Prelude.Types.Right', []} end end), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V55 = begin (V34 = ((V10(V2))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V5, {'Core.TT.Erased', V7, {'Core.TT.Placeholder'}}))))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V54 = begin (V47 = ('un--getArgNames'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V44 = fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V42, V43)) end end end end), fun (V45) -> fun (V46) -> ((((V44('erased'))('erased'))(V45))(V46)) end end end(fun (V39) -> {'Core.Name.UN', {'Core.Name.Basic', V39}} end))(V33)), V4)), V5, V38))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V53 = fun (V52) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V33, V51))} end), V53 end(V48)) end end end end), V54 end(V35)) end end end end), V55 end(V30)) end end end end; _ -> fun (V56) -> {'Prelude.Types.Right', []} end end; _ -> fun (V57) -> {'Prelude.Types.Right', []} end end.
'un--getArgName'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('nested--11737-3572--in--un--findNames'(V0, V6, V5, V4, V3, V2, V1, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', ('nested--11737-3573--in--un--getName'(V0, V6, V5, V4, V3, V2, V1, V3, V11, V5))} end), V13 end(V8)) end end end end.
'un--genUniqueStr'(V0, V1) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> V22 end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V30, V31)) end end}, V1, V0)) of 1 -> ('un--genUniqueStr'(V0, <<V1/binary, <<"\x{27}"/utf8>>/binary>>)); 0 -> V1 end.
'un--findUniqueBindableNames'(V0, V1, V2, V3, V4, V5) -> begin (V26 = ('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V10, V11)) end end}, {'Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V14, V15)) end end}, V6, V7)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V20, V21)) end end}, {'Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V24, V25)) end end}, V16, V17)) end end}, ('un--findBindableNames'(V2, V3, V4, V5))))), begin (V183 = begin (V27 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V182 = case case V31 of {'Core.Options.MkSessionOpts', V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57} -> V53 end of 1 -> begin (V63 = begin (V58 = V0), fun (V59) -> begin (V62 = (begin (V60 = V58), fun (V61) -> ('erlang':'get'(V60)) end end(V59))), {'Prelude.Types.Right', V62} end end end), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V180 = begin (V100 = case V67 of {'Core.Context.MkDefs', V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99} -> V68 end), begin (V172 = begin (V153 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V101, V102, [])) end end, V26, fun (V103) -> case V103 of {'Builtin.MkPair', V104, V105} -> begin (V106 = ('Idris.Idris2.Core.Context':'un--lookupCtxtName'({'Core.Name.UN', {'Core.Name.Basic', V104}}, V100))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V152 = begin (V142 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, V111, V112)) end end, V110, fun (V113) -> case V113 of {'Builtin.MkPair', V114, V115} -> case V115 of {'Builtin.MkPair', V116, V117} -> case V117 of {'Core.Context.Context.MkGlobalDef', V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139} -> case V135 of {'Core.Context.Context.Hole', V140, V141} -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Just', V114} end end end end end))), fun (V143) -> {'Prelude.Types.Right', ((begin (V149 = fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V147, V148)) end end end end), fun (V150) -> fun (V151) -> ((((V149('erased'))('erased'))(V150))(V151)) end end end(fun (V144) -> {'Builtin.MkPair', V104, V144} end))(('Idris.Idris2.Data.List1':'un--fromList'(V142))))} end end), V152 end(V107)) end end end end end end))), ((begin (V169 = fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V166, V167, V168)) end end end end end), fun (V170) -> fun (V171) -> ((((V169('erased'))('erased'))(V170))(V171)) end end end((begin (V161 = fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> {'Prelude.Types.Right', (V157(V160))} end end end end end), fun (V162) -> fun (V163) -> ((((V161('erased'))('erased'))(V162))(V163)) end end end(fun (V154) -> ('Idris.Idris2.Data.List':'un--catMaybes'(V154)) end))))(V153)) end), fun (V173) -> begin (V174 = (V172(V173))), case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> (begin (V179 = case ('Idris.Idris2.Data.List1':'un--fromList'(V176)) of {'Prelude.Types.Just', V177} -> ('Idris.Idris2.Core.Context':'un--recordWarning'(V0, {'Core.Core.ShadowingGlobalDefs', V1, V177})); {'Prelude.Types.Nothing'} -> fun (V178) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V179 end(V173)) end end end end end), V180 end(V64)) end end end end; 0 -> fun (V181) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V182 end(V28)) end end end end), fun (V184) -> begin (V185 = (V183(V184))), case V185 of {'Prelude.Types.Left', V186} -> {'Prelude.Types.Left', V186}; {'Prelude.Types.Right', V187} -> (begin (V189 = fun (V188) -> {'Prelude.Types.Right', V26} end), V189 end(V184)) end end end end end.
'un--findIBindVars'(V0) -> case V0 of {'TTImp.TTImp.IPi', V1, V2, V3, V4, V5, V6} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V5)), ('un--findIBindVars'(V6)))); {'TTImp.TTImp.ILam', V7, V8, V9, V10, V11, V12} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V11)), ('un--findIBindVars'(V12)))); {'TTImp.TTImp.IApp', V13, V14, V15} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V14)), ('un--findIBindVars'(V15)))); {'TTImp.TTImp.INamedApp', V16, V17, V18, V19} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V17)), ('un--findIBindVars'(V19)))); {'TTImp.TTImp.IAutoApp', V20, V21, V22} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V21)), ('un--findIBindVars'(V22)))); {'TTImp.TTImp.IWithApp', V23, V24, V25} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V24)), ('un--findIBindVars'(V25)))); {'TTImp.TTImp.IBindVar', V26, V27} -> [{'Core.Name.UN', {'Core.Name.Basic', V27}} | []]; {'TTImp.TTImp.IDelayed', V28, V29, V30} -> ('un--findIBindVars'(V30)); {'TTImp.TTImp.IDelay', V31, V32} -> ('un--findIBindVars'(V32)); {'TTImp.TTImp.IForce', V33, V34} -> ('un--findIBindVars'(V34)); {'TTImp.TTImp.IAlternative', V35, V36, V37} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V38, V39)) end end, []}, fun (V40) -> ('un--findIBindVars'(V40)) end, V37)); {'TTImp.TTImp.IUpdate', V41, V42, V43} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V43)), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V44, V45)) end end, []}, fun (V46) -> ('un--findIBindVars'(('Idris.Idris2.TTImp.TTImp':'un--getFieldUpdateTerm'(V46)))) end, V42)))); _ -> [] end.
'un--findBindableNamesQuot'(V0, V1, V2) -> case V2 of {'TTImp.TTImp.IPi', V3, V4, V5, V6, V7, V8} -> ('Idris.Idris2.Prelude.Types':'un--listBind'([V7 | [V8 | []]], fun (V9) -> ('un--findBindableNamesQuot'(V0, V1, V9)) end)); {'TTImp.TTImp.ILam', V10, V11, V12, V13, V14, V15} -> ('Idris.Idris2.Prelude.Types':'un--listBind'([V14 | [V15 | []]], fun (V16) -> ('un--findBindableNamesQuot'(V0, V1, V16)) end)); {'TTImp.TTImp.ILet', V17, V18, V19, V20, V21, V22, V23} -> ('Idris.Idris2.Prelude.Types':'un--listBind'([V21 | [V22 | [V23 | []]]], fun (V24) -> ('un--findBindableNamesQuot'(V0, V1, V24)) end)); {'TTImp.TTImp.ICase', V25, V26, V27, V28} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V28, fun (V29) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V26 | [V27 | []]], ('nested--9313-1657--in--un--getRawImp'(V28, V27, V26, V25, V1, V0, V29)))), fun (V30) -> ('un--findBindableNamesQuot'(V0, V1, V30)) end)) end)); {'TTImp.TTImp.ILocal', V31, V32, V33} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V32, fun (V34) -> ('Idris.Idris2.Prelude.Types':'un--listBind'([V33 | ('un--rawImpFromDecl'(V34))], fun (V35) -> ('un--findBindableNamesQuot'(V0, V1, V35)) end)) end)); {'TTImp.TTImp.ICaseLocal', V36, V37, V38, V39, V40} -> ('un--findBindableNamesQuot'(V0, V1, V40)); {'TTImp.TTImp.IApp', V41, V42, V43} -> ('Idris.Idris2.Prelude.Types':'un--listBind'([V42 | [V43 | []]], fun (V44) -> ('un--findBindableNamesQuot'(V0, V1, V44)) end)); {'TTImp.TTImp.INamedApp', V45, V46, V47, V48} -> ('Idris.Idris2.Prelude.Types':'un--listBind'([V46 | [V48 | []]], fun (V49) -> ('un--findBindableNamesQuot'(V0, V1, V49)) end)); {'TTImp.TTImp.IAutoApp', V50, V51, V52} -> ('Idris.Idris2.Prelude.Types':'un--listBind'([V51 | [V52 | []]], fun (V53) -> ('un--findBindableNamesQuot'(V0, V1, V53)) end)); {'TTImp.TTImp.IWithApp', V54, V55, V56} -> ('Idris.Idris2.Prelude.Types':'un--listBind'([V55 | [V56 | []]], fun (V57) -> ('un--findBindableNamesQuot'(V0, V1, V57)) end)); {'TTImp.TTImp.IRewrite', V58, V59, V60} -> ('Idris.Idris2.Prelude.Types':'un--listBind'([V59 | [V60 | []]], fun (V61) -> ('un--findBindableNamesQuot'(V0, V1, V61)) end)); {'TTImp.TTImp.ICoerced', V62, V63} -> ('un--findBindableNamesQuot'(V0, V1, V63)); {'TTImp.TTImp.IBindHere', V64, V65, V66} -> ('un--findBindableNamesQuot'(V0, V1, V66)); {'TTImp.TTImp.IUpdate', V67, V68, V69} -> ('Idris.Idris2.Prelude.Types':'un--listBind'([V69 | ((begin (V75 = fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V73, V74)) end end end end), fun (V76) -> fun (V77) -> ((((V75('erased'))('erased'))(V76))(V77)) end end end(fun (V70) -> ('Idris.Idris2.TTImp.TTImp':'un--getFieldUpdateTerm'(V70)) end))(V68))], fun (V78) -> ('un--findBindableNamesQuot'(V0, V1, V78)) end)); {'TTImp.TTImp.IAs', V79, V80, V81, V82, V83} -> ('un--findBindableNamesQuot'(V0, V1, V83)); {'TTImp.TTImp.IDelayed', V84, V85, V86} -> ('un--findBindableNamesQuot'(V0, V1, V86)); {'TTImp.TTImp.IDelay', V87, V88} -> ('un--findBindableNamesQuot'(V0, V1, V88)); {'TTImp.TTImp.IForce', V89, V90} -> ('un--findBindableNamesQuot'(V0, V1, V90)); {'TTImp.TTImp.IUnquote', V91, V92} -> ('un--findBindableNames'(1, V0, V1, V92)); {'TTImp.TTImp.IWithUnambigNames', V93, V94, V95} -> ('un--findBindableNamesQuot'(V0, V1, V95)); {'TTImp.TTImp.IVar', V96, V97} -> []; {'TTImp.TTImp.ISearch', V98, V99} -> []; {'TTImp.TTImp.IAlternative', V100, V101, V102} -> []; {'TTImp.TTImp.IBindVar', V103, V104} -> []; {'TTImp.TTImp.IPrimVal', V105, V106} -> []; {'TTImp.TTImp.IType', V107} -> []; {'TTImp.TTImp.IHole', V108, V109} -> []; {'TTImp.TTImp.Implicit', V110, V111} -> []; {'TTImp.TTImp.IMustUnify', V112, V113, V114} -> ('un--findBindableNamesQuot'(V0, V1, V114)); {'TTImp.TTImp.IUnifyLog', V115, V116, V117} -> ('un--findBindableNamesQuot'(V0, V1, V117)); {'TTImp.TTImp.IQuote', V118, V119} -> []; {'TTImp.TTImp.IQuoteName', V120, V121} -> []; {'TTImp.TTImp.IQuoteDecl', V122, V123} -> []; {'TTImp.TTImp.IRunElab', V124, V125} -> [] end.
'un--findBindableNames'(V0, V1, V2, V3) -> case V0 of 1 -> case V3 of {'TTImp.TTImp.IVar', V4, V5} -> case V5 of {'Core.Name.UN', V6} -> case V6 of {'Core.Name.Basic', V7} -> begin (V8 = {'Core.Name.UN', {'Core.Name.Basic', V7}}), case case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V24, V25, V26, V27)) end end end end end end end, fun (V28) -> fun (V29) -> V29 end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V32, V33, V34)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V37, V38)) end end}, V8, V1)) of 1 -> 0; 0 -> ('Idris.Idris2.Libraries.Utils.String':'un--lowerFirst'(V7)) end of 1 -> [{'Builtin.MkPair', V7, ('un--genUniqueStr'(V2, V7))} | []]; 0 -> [] end end; _ -> case V3 of {'TTImp.TTImp.IPi', V39, V40, V41, V42, V43, V44} -> begin (V46 = case V42 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V45} -> [V45 | V1] end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V43)), ('un--findBindableNames'(1, V46, V2, V44)))) end; {'TTImp.TTImp.ILam', V47, V48, V49, V50, V51, V52} -> begin (V54 = case V50 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V53} -> [V53 | V1] end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V51)), ('un--findBindableNames'(1, V54, V2, V52)))) end; {'TTImp.TTImp.IApp', V55, V56, V57} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V56)), ('un--findBindableNames'(1, V1, V2, V57)))); {'TTImp.TTImp.INamedApp', V58, V59, V60, V61} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V59)), ('un--findBindableNames'(1, V1, V2, V61)))); {'TTImp.TTImp.IAutoApp', V62, V63, V64} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V63)), ('un--findBindableNames'(1, V1, V2, V64)))); {'TTImp.TTImp.IWithApp', V65, V66, V67} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V66)), ('un--findBindableNames'(1, V1, V2, V67)))); {'TTImp.TTImp.IAs', V68, V69, V70, V71, V72} -> case V71 of {'Core.Name.UN', V73} -> case V73 of {'Core.Name.Basic', V74} -> [{'Builtin.MkPair', V74, ('un--genUniqueStr'(V2, V74))} | ('un--findBindableNames'(V0, V1, V2, V72))]; _ -> ('un--findBindableNames'(V0, V1, V2, V72)) end; _ -> ('un--findBindableNames'(V0, V1, V2, V72)) end; {'TTImp.TTImp.IMustUnify', V75, V76, V77} -> ('un--findBindableNames'(V0, V1, V2, V77)); {'TTImp.TTImp.IDelayed', V78, V79, V80} -> ('un--findBindableNames'(V0, V1, V2, V80)); {'TTImp.TTImp.IDelay', V81, V82} -> ('un--findBindableNames'(V0, V1, V2, V82)); {'TTImp.TTImp.IForce', V83, V84} -> ('un--findBindableNames'(V0, V1, V2, V84)); {'TTImp.TTImp.IQuote', V85, V86} -> ('un--findBindableNamesQuot'(V1, V2, V86)); {'TTImp.TTImp.IQuoteDecl', V87, V88} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V88, fun (V89) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(('un--rawImpFromDecl'(V89)), fun (V90) -> ('un--findBindableNamesQuot'(V1, V2, V90)) end)) end)); {'TTImp.TTImp.IAlternative', V91, V92, V93} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V94, V95)) end end, []}, fun (V96) -> ('un--findBindableNames'(V0, V1, V2, V96)) end, V93)); {'TTImp.TTImp.IUpdate', V97, V98, V99} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V99)), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V100, V101)) end end, []}, fun (V102) -> ('un--findBindableNames'(1, V1, V2, ('Idris.Idris2.TTImp.TTImp':'un--getFieldUpdateTerm'(V102)))) end, V98)))); _ -> [] end end; _ -> case V3 of {'TTImp.TTImp.IPi', V103, V104, V105, V106, V107, V108} -> begin (V110 = case V106 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V109} -> [V109 | V1] end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V107)), ('un--findBindableNames'(1, V110, V2, V108)))) end; {'TTImp.TTImp.ILam', V111, V112, V113, V114, V115, V116} -> begin (V118 = case V114 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V117} -> [V117 | V1] end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V115)), ('un--findBindableNames'(1, V118, V2, V116)))) end; {'TTImp.TTImp.IApp', V119, V120, V121} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V120)), ('un--findBindableNames'(1, V1, V2, V121)))); {'TTImp.TTImp.INamedApp', V122, V123, V124, V125} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V123)), ('un--findBindableNames'(1, V1, V2, V125)))); {'TTImp.TTImp.IAutoApp', V126, V127, V128} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V127)), ('un--findBindableNames'(1, V1, V2, V128)))); {'TTImp.TTImp.IWithApp', V129, V130, V131} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V130)), ('un--findBindableNames'(1, V1, V2, V131)))); {'TTImp.TTImp.IAs', V132, V133, V134, V135, V136} -> case V135 of {'Core.Name.UN', V137} -> case V137 of {'Core.Name.Basic', V138} -> [{'Builtin.MkPair', V138, ('un--genUniqueStr'(V2, V138))} | ('un--findBindableNames'(V0, V1, V2, V136))]; _ -> ('un--findBindableNames'(V0, V1, V2, V136)) end; _ -> ('un--findBindableNames'(V0, V1, V2, V136)) end; {'TTImp.TTImp.IMustUnify', V139, V140, V141} -> ('un--findBindableNames'(V0, V1, V2, V141)); {'TTImp.TTImp.IDelayed', V142, V143, V144} -> ('un--findBindableNames'(V0, V1, V2, V144)); {'TTImp.TTImp.IDelay', V145, V146} -> ('un--findBindableNames'(V0, V1, V2, V146)); {'TTImp.TTImp.IForce', V147, V148} -> ('un--findBindableNames'(V0, V1, V2, V148)); {'TTImp.TTImp.IQuote', V149, V150} -> ('un--findBindableNamesQuot'(V1, V2, V150)); {'TTImp.TTImp.IQuoteDecl', V151, V152} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V152, fun (V153) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(('un--rawImpFromDecl'(V153)), fun (V154) -> ('un--findBindableNamesQuot'(V1, V2, V154)) end)) end)); {'TTImp.TTImp.IAlternative', V155, V156, V157} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V158, V159)) end end, []}, fun (V160) -> ('un--findBindableNames'(V0, V1, V2, V160)) end, V157)); {'TTImp.TTImp.IUpdate', V161, V162, V163} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V163)), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V164) -> fun (V165) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V164, V165)) end end, []}, fun (V166) -> ('un--findBindableNames'(1, V1, V2, ('Idris.Idris2.TTImp.TTImp':'un--getFieldUpdateTerm'(V166)))) end, V162)))); _ -> [] end end; _ -> case V3 of {'TTImp.TTImp.IPi', V167, V168, V169, V170, V171, V172} -> begin (V174 = case V170 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V173} -> [V173 | V1] end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V171)), ('un--findBindableNames'(1, V174, V2, V172)))) end; {'TTImp.TTImp.ILam', V175, V176, V177, V178, V179, V180} -> begin (V182 = case V178 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V181} -> [V181 | V1] end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V179)), ('un--findBindableNames'(1, V182, V2, V180)))) end; {'TTImp.TTImp.IApp', V183, V184, V185} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V184)), ('un--findBindableNames'(1, V1, V2, V185)))); {'TTImp.TTImp.INamedApp', V186, V187, V188, V189} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V187)), ('un--findBindableNames'(1, V1, V2, V189)))); {'TTImp.TTImp.IAutoApp', V190, V191, V192} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V191)), ('un--findBindableNames'(1, V1, V2, V192)))); {'TTImp.TTImp.IWithApp', V193, V194, V195} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V194)), ('un--findBindableNames'(1, V1, V2, V195)))); {'TTImp.TTImp.IAs', V196, V197, V198, V199, V200} -> case V199 of {'Core.Name.UN', V201} -> case V201 of {'Core.Name.Basic', V202} -> [{'Builtin.MkPair', V202, ('un--genUniqueStr'(V2, V202))} | ('un--findBindableNames'(V0, V1, V2, V200))]; _ -> ('un--findBindableNames'(V0, V1, V2, V200)) end; _ -> ('un--findBindableNames'(V0, V1, V2, V200)) end; {'TTImp.TTImp.IMustUnify', V203, V204, V205} -> ('un--findBindableNames'(V0, V1, V2, V205)); {'TTImp.TTImp.IDelayed', V206, V207, V208} -> ('un--findBindableNames'(V0, V1, V2, V208)); {'TTImp.TTImp.IDelay', V209, V210} -> ('un--findBindableNames'(V0, V1, V2, V210)); {'TTImp.TTImp.IForce', V211, V212} -> ('un--findBindableNames'(V0, V1, V2, V212)); {'TTImp.TTImp.IQuote', V213, V214} -> ('un--findBindableNamesQuot'(V1, V2, V214)); {'TTImp.TTImp.IQuoteDecl', V215, V216} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V216, fun (V217) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(('un--rawImpFromDecl'(V217)), fun (V218) -> ('un--findBindableNamesQuot'(V1, V2, V218)) end)) end)); {'TTImp.TTImp.IAlternative', V219, V220, V221} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V222, V223)) end end, []}, fun (V224) -> ('un--findBindableNames'(V0, V1, V2, V224)) end, V221)); {'TTImp.TTImp.IUpdate', V225, V226, V227} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V227)), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V228, V229)) end end, []}, fun (V230) -> ('un--findBindableNames'(1, V1, V2, ('Idris.Idris2.TTImp.TTImp':'un--getFieldUpdateTerm'(V230)))) end, V226)))); _ -> [] end end; _ -> case V3 of {'TTImp.TTImp.IPi', V231, V232, V233, V234, V235, V236} -> begin (V238 = case V234 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V237} -> [V237 | V1] end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V235)), ('un--findBindableNames'(1, V238, V2, V236)))) end; {'TTImp.TTImp.ILam', V239, V240, V241, V242, V243, V244} -> begin (V246 = case V242 of {'Prelude.Types.Nothing'} -> V1; {'Prelude.Types.Just', V245} -> [V245 | V1] end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V243)), ('un--findBindableNames'(1, V246, V2, V244)))) end; {'TTImp.TTImp.IApp', V247, V248, V249} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V248)), ('un--findBindableNames'(1, V1, V2, V249)))); {'TTImp.TTImp.INamedApp', V250, V251, V252, V253} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V251)), ('un--findBindableNames'(1, V1, V2, V253)))); {'TTImp.TTImp.IAutoApp', V254, V255, V256} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V255)), ('un--findBindableNames'(1, V1, V2, V256)))); {'TTImp.TTImp.IWithApp', V257, V258, V259} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V258)), ('un--findBindableNames'(1, V1, V2, V259)))); {'TTImp.TTImp.IAs', V260, V261, V262, V263, V264} -> case V263 of {'Core.Name.UN', V265} -> case V265 of {'Core.Name.Basic', V266} -> [{'Builtin.MkPair', V266, ('un--genUniqueStr'(V2, V266))} | ('un--findBindableNames'(V0, V1, V2, V264))]; _ -> ('un--findBindableNames'(V0, V1, V2, V264)) end; _ -> ('un--findBindableNames'(V0, V1, V2, V264)) end; {'TTImp.TTImp.IMustUnify', V267, V268, V269} -> ('un--findBindableNames'(V0, V1, V2, V269)); {'TTImp.TTImp.IDelayed', V270, V271, V272} -> ('un--findBindableNames'(V0, V1, V2, V272)); {'TTImp.TTImp.IDelay', V273, V274} -> ('un--findBindableNames'(V0, V1, V2, V274)); {'TTImp.TTImp.IForce', V275, V276} -> ('un--findBindableNames'(V0, V1, V2, V276)); {'TTImp.TTImp.IQuote', V277, V278} -> ('un--findBindableNamesQuot'(V1, V2, V278)); {'TTImp.TTImp.IQuoteDecl', V279, V280} -> ('Idris.Idris2.Prelude.Types':'un--listBind'(V280, fun (V281) -> ('Idris.Idris2.Prelude.Types':'un--listBind'(('un--rawImpFromDecl'(V281)), fun (V282) -> ('un--findBindableNamesQuot'(V1, V2, V282)) end)) end)); {'TTImp.TTImp.IAlternative', V283, V284, V285} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V286) -> fun (V287) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V286, V287)) end end, []}, fun (V288) -> ('un--findBindableNames'(V0, V1, V2, V288)) end, V285)); {'TTImp.TTImp.IUpdate', V289, V290, V291} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V291)), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V292) -> fun (V293) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V292, V293)) end end, []}, fun (V294) -> ('un--findBindableNames'(1, V1, V2, ('Idris.Idris2.TTImp.TTImp':'un--getFieldUpdateTerm'(V294)))) end, V290)))); _ -> [] end end.
'un--findAllNames'(V0, V1) -> case V1 of {'TTImp.TTImp.IVar', V2, V3} -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> V24 end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V27, V28, V29)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V32, V33)) end end}, V3, V0)) of 1 -> []; 0 -> [V3 | []] end; {'TTImp.TTImp.IPi', V34, V35, V36, V37, V38, V39} -> begin (V41 = case V37 of {'Prelude.Types.Nothing'} -> V0; {'Prelude.Types.Just', V40} -> [V40 | V0] end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V0, V38)), ('un--findAllNames'(V41, V39)))) end; {'TTImp.TTImp.ILam', V42, V43, V44, V45, V46, V47} -> begin (V49 = case V45 of {'Prelude.Types.Nothing'} -> V0; {'Prelude.Types.Just', V48} -> [V48 | V0] end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V49, V46)), ('un--findAllNames'(V49, V47)))) end; {'TTImp.TTImp.IApp', V50, V51, V52} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V0, V51)), ('un--findAllNames'(V0, V52)))); {'TTImp.TTImp.INamedApp', V53, V54, V55, V56} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V0, V54)), ('un--findAllNames'(V0, V56)))); {'TTImp.TTImp.IAutoApp', V57, V58, V59} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V0, V58)), ('un--findAllNames'(V0, V59)))); {'TTImp.TTImp.IWithApp', V60, V61, V62} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V0, V61)), ('un--findAllNames'(V0, V62)))); {'TTImp.TTImp.IAs', V63, V64, V65, V66, V67} -> [V66 | ('un--findAllNames'(V0, V67))]; {'TTImp.TTImp.IMustUnify', V68, V69, V70} -> ('un--findAllNames'(V0, V70)); {'TTImp.TTImp.IDelayed', V71, V72, V73} -> ('un--findAllNames'(V0, V73)); {'TTImp.TTImp.IDelay', V74, V75} -> ('un--findAllNames'(V0, V75)); {'TTImp.TTImp.IForce', V76, V77} -> ('un--findAllNames'(V0, V77)); {'TTImp.TTImp.IQuote', V78, V79} -> ('un--findAllNames'(V0, V79)); {'TTImp.TTImp.IUnquote', V80, V81} -> ('un--findAllNames'(V0, V81)); {'TTImp.TTImp.IAlternative', V82, V83, V84} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V85, V86)) end end, []}, fun (V87) -> ('un--findAllNames'(V0, V87)) end, V84)); {'TTImp.TTImp.IUpdate', V88, V89, V90} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V0, V90)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V91, V92)) end end, []}, fun (V93) -> ('un--findAllNames'(V0, ('Idris.Idris2.TTImp.TTImp':'un--getFieldUpdateTerm'(V93)))) end, V89)), ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V94, V95)) end end, []}, fun (V96) -> ((begin (V102 = fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V100, V101)) end end end end), fun (V103) -> fun (V104) -> ((((V102('erased'))('erased'))(V103))(V104)) end end end(fun (V97) -> {'Core.Name.UN', {'Core.Name.Basic', V97}} end))(('Idris.Idris2.TTImp.TTImp':'un--getFieldUpdatePath'(V96)))) end, V89)))))); _ -> [] end.
