-module('Idris.Idris2.TTImp.Unelab').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in unelabTy\x{27}-10143'/18,
  'case--dropParams-9128'/5,
  'case--case block in unelabCase-8873'/10,
  'case--unelabCase,mkCase-8644'/10,
  'case--unelabCase,mkClause-8441'/15,
  'nested--8053-7665--in--un--usedBinder'/6,
  'nested--8315-9701--in--un--uniqueLocal'/11,
  'nested--13021-11966--in--un--toName'/9,
  'nested--8250-7996--in--un--substVars'/8,
  'nested--8250-7998--in--un--substArgs'/9,
  'nested--13021-11968--in--un--showScope'/9,
  'nested--13021-11967--in--un--showNScope'/9,
  'nested--8315-9700--in--un--next'/10,
  'nested--8250-8000--in--un--mkClause'/10,
  'nested--8250-8001--in--un--mkCase'/9,
  'nested--8364-11318--in--un--isNoSugar'/15,
  'nested--8364-11319--in--un--isDefImp'/15,
  'nested--8250-7995--in--un--idxOrMaybe'/8,
  'nested--8250-7994--in--un--findArgPos'/7,
  'nested--8250-7997--in--un--embedVar'/7,
  'nested--8250-7999--in--un--argVars'/8,
  'nested--8274-9094--in--un--apply'/6,
  'un--used'/2,
  'un--unelabUniqueBinders'/4,
  'un--unelabTy\x{27}'/6,
  'un--unelabTy'/6,
  'un--unelabPi'/6,
  'un--unelabNoSugar'/4,
  'un--unelabNoPatvars'/4,
  'un--unelabNest'/5,
  'un--unelabCase'/6,
  'un--unelabBinder'/11,
  'un--unelab'/4,
  'un--dropParams'/3
]).
'case--case block in case block in case block in unelabTy\x{27}-10143'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Builtin.MkPair', V18, V19} -> case V18 of {'Core.TT.Ref', V20, V21, V22} -> begin (V23 = ('Idris.Idris2.Core.Context':'un--getFullName'(V8, V22))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V34 = case V27 of {'Core.Name.NS', V28, V29} -> case V29 of {'Core.Name.CaseBlock', V30, V31} -> ('un--unelabCase'(V0, V8, V6, V5, V27, V19)); _ -> fun (V32) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V33) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V34 end(V24)) end end end end; _ -> fun (V35) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V36) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'case--dropParams-9128'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> fun (V7) -> case V5 of {'TTImp.TTImp.IVar', V8, V9} -> case ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, case V9 of {'Core.TT.MkKindedName', V14, V15, V16} -> V16 end, V2)) of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Builtin.MkPair', V0, V1}}; {'Prelude.Types.Just', V17} -> {'Prelude.Types.Right', {'Builtin.MkPair', ('nested--8274-9094--in--un--apply'(V0, V1, V2, V3, {'TTImp.TTImp.IVar', V8, V9}, ('Idris.Idris2.Data.List':'un--drop'(V17, V6)))), V1}} end; _ -> {'Prelude.Types.Right', {'Builtin.MkPair', V0, V1}} end end; _ -> fun (V18) -> {'Prelude.Types.Right', {'Builtin.MkPair', V0, V1}} end end.
'case--case block in unelabCase-8873'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Context.Context.PMDef', V10, V11, V12, V13, V14} -> case ('nested--8250-7994--in--un--findArgPos'(V0, V1, V2, V3, V4, V5, V12)) of {'Prelude.Types.Just', V15} -> case case (('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V1)) =:= ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V11))) of 'false' -> 0; _ -> 1 end of 1 -> ('nested--8250-8001--in--un--mkCase'(V0, V1, V2, V3, V4, V5, V14, V15, V1)); 0 -> fun (V16) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V17) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; _ -> fun (V18) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'case--unelabCase,mkCase-8644'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Prelude.Types.Just', V10} -> begin (V11 = ('Idris.Idris2.Core.TT':'un--getLoc'(V10))), begin (V12 = ('un--unelabTy'(V0, V5, {'TTImp.Unelab.Full'}, V4, V3, V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V93 = case V16 of {'Builtin.MkPair', V17, V18} -> begin (V85 = begin (V20 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V19) -> ('nested--8250-8000--in--un--mkClause'(V0, V1, V2, V3, V4, V5, V11, V7, V6, V19)) end, V8, []))), ((begin (V82 = fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V79, V80, V81)) end end end end end), fun (V83) -> fun (V84) -> ((((V82('erased'))('erased'))(V83))(V84)) end end end((begin (V74 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> {'Prelude.Types.Right', (V70(V73))} end end end end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V21) -> ('Idris.Idris2.Prelude.Interfaces':'un--sequence'({'Prelude.Interfaces.MkApplicative', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V24, V25)) end end end end, fun (V26) -> fun (V27) -> {'Prelude.Types.Just', V27} end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V30, V31)) end end end end}, {'Prelude.Interfaces.MkTraversable', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V34, V35)) end end end end, {'Prelude.Interfaces.MkFoldable', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V47)) end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V51, V52, V53, V54)) end end end end end end end, fun (V55) -> fun (V56) -> V56 end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V59, V60, V61)) end end end end end}, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'(V65, V66, V67)) end end end end end end}, V21)) end))))(V20)) end), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V92 = fun (V90) -> case V89 of {'Prelude.Types.Just', V91} -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'TTImp.TTImp.ICase', V11, V17, {'TTImp.TTImp.Implicit', V11, 0}, V91}}}; _ -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V92 end(V86)) end end end end end), V93 end(V13)) end end end end end; _ -> fun (V94) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'case--unelabCase,mkClause-8441'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Prelude.Types.Just', V15} -> begin (V24 = ('nested--8250-7998--in--un--substArgs'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V6)), ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V16) -> ('nested--8250-7999--in--un--argVars'(V0, V1, V2, V3, V4, V5, V6, V16)) end))(V13)), V10)), V9))), begin (V25 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V6, V5, <<"unelab.case.clause"/utf8>>, 20, fun () -> <<"Unelaborating LHS"/utf8>> end, V15))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V55 = begin (V30 = ('un--unelabTy'(V6, V5, {'TTImp.Unelab.Full'}, V4, V7, V15))), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V54 = begin (V35 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V0)), V5, <<"unelab.case.clause"/utf8>>, 20, fun () -> <<"Unelaborating RHS"/utf8>> end, V24))), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V53 = begin (V40 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V6, V5, <<"unelab.case.clause"/utf8>>, 20, <<"In Env"/utf8>>, V7))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V52 = begin (V45 = ('un--unelabTy'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V0)), V5, {'TTImp.Unelab.Full'}, V4, ('Idris.Idris2.Core.Env':'un--++'(V6, V7, V3)), V24))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V51 = fun (V50) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'TTImp.TTImp.PatClause', V12, ('Idris.Idris2.Builtin':'un--fst'(V34)), ('Idris.Idris2.Builtin':'un--fst'(V49))}}} end), V51 end(V46)) end end end end), V52 end(V41)) end end end end), V53 end(V36)) end end end end), V54 end(V31)) end end end end), V55 end(V26)) end end end end end; _ -> fun (V56) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end.
'nested--8053-7665--in--un--usedBinder'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.TT.Let', V6, V7, V8, V9} -> case ('un--used'(V4, V8)) of 1 -> 1; 0 -> ('un--used'(V4, V9)) end; _ -> ('un--used'(V4, ('Idris.Idris2.Core.TT':'un--binderType'(V5)))) end.
'nested--8315-9701--in--un--uniqueLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V26, V27, V28, V29)) end end end end end end end, fun (V30) -> fun (V31) -> V31 end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V34, V35, V36)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V39, V40)) end end}, V10, V9)) of 1 -> ('nested--8315-9701--in--un--uniqueLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, ('nested--8315-9700--in--un--next'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)))); 0 -> V10 end.
'nested--13021-11966--in--un--toName'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.TT.Local', V9, V10, V11} -> {'Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--nameAt'(V0, V11))}; _ -> {'Prelude.Types.Nothing'} end.
'nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.TT.Local', V8, V9, V10} -> begin (V11 = {'Core.TT.Local', V8, V9, V10}), case ('Idris.Idris2.Data.List':'un--find'(fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V13, V14)) end end, 0}, fun (V15) -> case (V10 =:= ('Idris.Idris2.Core.TT':'un--varIdx'(V15))) of 'false' -> 0; _ -> 1 end end, ('Idris.Idris2.Builtin':'un--fst'(V12)))) end, V6)) of {'Prelude.Types.Just', V16} -> case V16 of {'Builtin.MkPair', V17, V18} -> V18 end; {'Prelude.Types.Nothing'} -> V11 end end; {'Core.TT.Meta', V19, V20, V21, V22} -> {'Core.TT.Meta', V19, V20, V21, ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V23) -> ('nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, V6, V23)) end))(V22))}; {'Core.TT.Bind', V31, V32, V33, V34} -> {'Core.TT.Bind', V31, V32, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V35) -> ('nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, V6, V35)) end, V33)), ('nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, ((begin (V51 = fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V49, V50)) end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end(fun (V36) -> case V36 of {'Builtin.MkPair', V37, V38} -> {'Builtin.MkPair', ((begin (V44 = fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V42, V43)) end end end end), fun (V45) -> fun (V46) -> ((((V44('erased'))('erased'))(V45))(V46)) end end end(fun (V39) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V39)) end))(V37)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V38))} end end))(V6)), V34))}; {'Core.TT.App', V54, V55, V56} -> {'Core.TT.App', V54, ('nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, V6, V55)), ('nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, V6, V56))}; {'Core.TT.As', V57, V58, V59, V60} -> {'Core.TT.As', V57, V58, V59, ('nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, V6, V60))}; {'Core.TT.TDelayed', V61, V62, V63} -> {'Core.TT.TDelayed', V61, V62, ('nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, V6, V63))}; {'Core.TT.TDelay', V64, V65, V66, V67} -> {'Core.TT.TDelay', V64, V65, ('nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, V6, V66)), ('nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, V6, V67))}; {'Core.TT.TForce', V68, V69, V70} -> {'Core.TT.TForce', V68, V69, ('nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, V6, V70))}; _ -> V7 end.
'nested--8250-7998--in--un--substArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V27 = ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V9) -> case V9 of {'Builtin.MkPair', V10, V11} -> {'Builtin.MkPair', ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('nested--8250-7997--in--un--embedVar'(V0, V1, V2, V3, V4, V5, V12)) end))(V10)), ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V6, V11))} end end))(V7))), begin (V28 = ('Idris.Idris2.Core.TT':'un--embed'(V8))), ('nested--8250-7996--in--un--substVars'(V0, V1, V2, V3, V4, V5, V27, V28)) end end.
'nested--13021-11968--in--un--showScope'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> <<<<" "/utf8>>/binary, ('nested--13021-11967--in--un--showNScope'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V9) -> ('nested--13021-11966--in--un--toName'(V0, V1, V2, V3, V4, V5, V6, V7, V9)) end, V8))))/binary>>.
'nested--13021-11967--in--un--showNScope'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> <<"[no locals in scope]"/utf8>>; _ -> <<<<"[locals in scope: "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)) end))(('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V11, V12)) end end}, V8))))))/binary, <<"]"/utf8>>/binary>>/binary>> end.
'nested--8315-9700--in--un--next'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Core.Name.MN', V10, V11} -> {'Core.Name.MN', V10, begin (V12 = (V11 + 1)), case ((V12 band 9223372036854775808) =/= 0) of 'true' -> (V12 bor -9223372036854775808); _ -> (V12 band 9223372036854775807) end end}; {'Core.Name.UN', V13} -> {'Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_UserName'(V13)), 0}; {'Core.Name.NS', V14, V15} -> {'Core.Name.NS', V14, ('nested--8315-9700--in--un--next'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15))}; _ -> {'Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)), 0} end.
'nested--8250-8000--in--un--mkClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Builtin.DPair.MkDPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> begin (V16 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V10, V5, <<"unelab.case.clause"/utf8>>, 20, fun () -> <<"Unelaborating clause"/utf8>> end, V14))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = begin (V21 = ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Core.TT':'un--getFnArgs'(V14))))), ('case--unelabCase,mkClause-8441'(V0, V1, V2, V3, V4, V5, V10, V12, V14, V15, V8, V7, V6, V21, ('nested--8250-7995--in--un--idxOrMaybe'(V0, V1, V2, V3, V4, V5, V7, V21)))) end), V22 end(V17)) end end end end end end end.
'nested--8250-8001--in--un--mkCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V18 = case ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V8)) of 1 -> fun (V9) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"unelab.case.clause"/utf8>>, 20, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Ignoring"/utf8>> | ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V10)) end))(V8))])) end)) end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V23 = ('case--unelabCase,mkCase-8644'(V0, V1, V2, V3, V4, V5, V8, V7, V6, ('nested--8250-7995--in--un--idxOrMaybe'(V0, V1, V2, V3, V4, V5, V7, V8))))), V23 end(V19)) end end end end.
'nested--8364-11318--in--un--isNoSugar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'TTImp.Unelab.NoSugar', V15} -> 1; _ -> 0 end.
'nested--8364-11319--in--un--isDefImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Core.TT.DefImplicit', V15} -> 1; _ -> 0 end.
'nested--8250-7995--in--un--idxOrMaybe'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of 0 -> case V7 of [E2 | E3] -> (fun (V8, V9) -> {'Prelude.Types.Just', V8} end(E2, E3)); _ -> case V7 of [] -> {'Prelude.Types.Nothing'} end end; _ -> begin (V10 = (V6 - 1)), case V7 of [E0 | E1] -> (fun (V11, V12) -> ('nested--8250-7995--in--un--idxOrMaybe'(V0, V1, V2, V3, V4, V5, V10, V12)) end(E0, E1)); _ -> case V7 of [] -> {'Prelude.Types.Nothing'} end end end end.
'nested--8250-7994--in--un--findArgPos'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.Case.CaseTree.Case', V7, V8, V9, V10} -> {'Prelude.Types.Just', V8}; _ -> {'Prelude.Types.Nothing'} end.
'nested--8250-7997--in--un--embedVar'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = V6), V7 end.
'nested--8250-7999--in--un--argVars'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Core.TT.As', V8, V9, V10, V11} -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--8250-7999--in--un--argVars'(V0, V1, V2, V3, V4, V5, V6, V10)), ('nested--8250-7999--in--un--argVars'(V0, V1, V2, V3, V4, V5, V6, V11)))); {'Core.TT.Local', V12, V13, V14} -> [V14 | []]; _ -> [] end.
'nested--8274-9094--in--un--apply'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> V4; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'TTImp.TTImp.Explicit', V8, V9} -> ('nested--8274-9094--in--un--apply'(V0, V1, V2, V3, {'TTImp.TTImp.IApp', V8, V4, V9}, V7)); {'TTImp.TTImp.Auto', V10, V11} -> ('nested--8274-9094--in--un--apply'(V0, V1, V2, V3, {'TTImp.TTImp.IAutoApp', V10, V4, V11}, V7)); {'TTImp.TTImp.Named', V12, V13, V14} -> ('nested--8274-9094--in--un--apply'(V0, V1, V2, V3, {'TTImp.TTImp.INamedApp', V12, V4, V13, V14}, V7)) end end(E0, E1)) end.
'un--used'(V0, V1) -> case V1 of {'Core.TT.Local', V2, V3, V4} -> case (V0 =:= V4) of 'false' -> 0; _ -> 1 end; {'Core.TT.Bind', V5, V6, V7, V8} -> case ('nested--8053-7665--in--un--usedBinder'(V5, V6, V8, V7, V0, V7)) of 1 -> 1; 0 -> ('un--used'((V0 + 1), V8)) end; {'Core.TT.Meta', V9, V10, V11, V12} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V13, V14)) end end, 0}, fun (V15) -> ('un--used'(V0, V15)) end, V12)); {'Core.TT.App', V16, V17, V18} -> case ('un--used'(V0, V17)) of 1 -> 1; 0 -> ('un--used'(V0, V18)) end; {'Core.TT.As', V19, V20, V21, V22} -> ('un--used'(V0, V22)); {'Core.TT.TDelayed', V23, V24, V25} -> ('un--used'(V0, V25)); {'Core.TT.TDelay', V26, V27, V28, V29} -> ('un--used'(V0, V29)); {'Core.TT.TForce', V30, V31, V32} -> ('un--used'(V0, V32)); _ -> 0 end.
'un--unelabUniqueBinders'(V0, V1, V2, V3) -> begin (V4 = ('un--unelabTy'(V0, V1, {'TTImp.Unelab.NoSugar', 1}, [], V2, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V10 = fun (V9) -> {'Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V8))} end), V10 end(V5)) end end end end.
'un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.TT.Local', V6, V7, V8} -> begin (V9 = ('Idris.Idris2.Core.TT':'un--nameAt'(V0, V8))), begin (V10 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unelab.case"/utf8>>, 20, fun () -> <<<<"Found local name: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9))/binary>> end))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V24 = begin (V22 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, ('Idris.Idris2.Core.TT':'un--binderType'(('Idris.Idris2.Core.Env':'un--getBinder'({'Core.TT.dn--un--__mkWeaken', fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V17)) end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V20, V21)) end end end end}, V0, V8, V4))))))), fun (V23) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IVar', V6, {'Core.TT.MkKindedName', {'Prelude.Types.Just', {'Core.TT.Bound'}}, V9, V9}}, V22}} end end), V24 end(V11)) end end end end end; {'Core.TT.Ref', V25, V26, V27} -> begin (V33 = begin (V28 = V1), fun (V29) -> begin (V32 = (begin (V30 = V28), fun (V31) -> ('erlang':'get'(V30)) end end(V29))), {'Prelude.Types.Right', V32} end end end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V108 = begin (V70 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V27, case V37 of {'Core.Context.MkDefs', V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69} -> V38 end))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V107 = case V74 of {'Prelude.Types.Just', V75} -> begin (V76 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, V27))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V105 = begin (V83 = case V2 of {'TTImp.Unelab.NoSugar', V81} -> fun (V82) -> {'Prelude.Types.Right', V80} end; _ -> ('Idris.Idris2.Core.Context':'un--aliasName'(V1, V80)) end), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V104 = begin (V97 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V89 = fun (V88) -> V88 end), fun (V90) -> (V89(V90)) end end(<<"unelab.var"/utf8>>)), 50, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([(begin (V92 = fun (V91) -> V91 end), fun (V93) -> (V92(V93)) end end(<<"Found name:"/utf8>>)) | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)) | [<<<<" (aka "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V80))/binary, <<")"/utf8>>/binary>>/binary>> | [(begin (V95 = fun (V94) -> V94 end), fun (V96) -> (V95(V96)) end end(<<"sugared to"/utf8>>)) | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V87)) | []]]]]])) end))), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V103 = fun (V102) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IVar', V25, {'Core.TT.MkKindedName', {'Prelude.Types.Just', V26}, V80, V87}}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, ('Idris.Idris2.Core.TT':'un--embed'(V75))))}} end), V103 end(V98)) end end end end), V104 end(V84)) end end end end), V105 end(V77)) end end end end; {'Prelude.Types.Nothing'} -> fun (V106) -> case V2 of {'TTImp.Unelab.ImplicitHoles'} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.Implicit', V25, 1}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V25))}}; _ -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IVar', V25, {'Core.TT.MkKindedName', {'Prelude.Types.Just', V26}, V27, V27}}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V25))}} end end end), V107 end(V71)) end end end end), V108 end(V34)) end end end end; {'Core.TT.Meta', V109, V110, V111, V112} -> begin (V118 = begin (V113 = V1), fun (V114) -> begin (V117 = (begin (V115 = V113), fun (V116) -> ('erlang':'get'(V115)) end end(V114))), {'Prelude.Types.Right', V117} end end end), fun (V119) -> begin (V120 = (V118(V119))), case V120 of {'Prelude.Types.Left', V121} -> {'Prelude.Types.Left', V121}; {'Prelude.Types.Right', V122} -> (begin (V164 = begin (V123 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V110))), begin (V156 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Core.Name.Resolved', V111}, case V122 of {'Core.Context.MkDefs', V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155} -> V124 end))), fun (V157) -> begin (V158 = (V156(V157))), case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> (begin (V163 = fun (V161) -> case V160 of {'Prelude.Types.Just', V162} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IHole', V109, V123}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, ('Idris.Idris2.Core.TT':'un--embed'(V162))))}}; {'Prelude.Types.Nothing'} -> case V2 of {'TTImp.Unelab.ImplicitHoles'} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.Implicit', V109, 1}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V109))}}; _ -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IHole', V109, V123}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V109))}} end end end), V163 end(V157)) end end end end end), V164 end(V119)) end end end end; {'Core.TT.Bind', V165, V166, V167, V168} -> begin (V169 = ('un--unelabTy'([V166 | V0], V1, V2, V3, {'Core.Env.::', V167, V4}, V168))), fun (V170) -> begin (V171 = (V169(V170))), case V171 of {'Prelude.Types.Left', V172} -> {'Prelude.Types.Left', V172}; {'Prelude.Types.Right', V173} -> (begin (V196 = case V173 of {'Builtin.MkPair', V174, V175} -> case V2 of {'TTImp.Unelab.NoSugar', V176} -> case V176 of 1 -> begin (V177 = ('nested--8315-9701--in--un--uniqueLocal'(V0, V166, V168, V167, V165, V4, V3, V2, V1, V0, V166))), begin (V178 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V175))), fun (V179) -> begin (V180 = (V178(V179))), case V180 of {'Prelude.Types.Left', V181} -> {'Prelude.Types.Left', V181}; {'Prelude.Types.Right', V182} -> (begin (V183 = ('un--unelabBinder'(V0, V1, V2, V3, V165, V4, V177, V167, ('Idris.Idris2.Core.TT':'un--renameVars'(1, V168)), V174, ('Idris.Idris2.Core.TT':'un--renameVars'(1, V182))))), V183 end(V179)) end end end end end; _ -> begin (V184 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V175))), fun (V185) -> begin (V186 = (V184(V185))), case V186 of {'Prelude.Types.Left', V187} -> {'Prelude.Types.Left', V187}; {'Prelude.Types.Right', V188} -> (begin (V189 = ('un--unelabBinder'(V0, V1, V2, V3, V165, V4, V166, V167, V168, V174, V188))), V189 end(V185)) end end end end end; _ -> begin (V190 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V175))), fun (V191) -> begin (V192 = (V190(V191))), case V192 of {'Prelude.Types.Left', V193} -> {'Prelude.Types.Left', V193}; {'Prelude.Types.Right', V194} -> (begin (V195 = ('un--unelabBinder'(V0, V1, V2, V3, V165, V4, V166, V167, V168, V174, V194))), V195 end(V191)) end end end end end end), V196 end(V170)) end end end end; {'Core.TT.App', V197, V198, V199} -> begin (V200 = ('un--unelabTy'(V0, V1, V2, V3, V4, V198))), fun (V201) -> begin (V202 = (V200(V201))), case V202 of {'Prelude.Types.Left', V203} -> {'Prelude.Types.Left', V203}; {'Prelude.Types.Right', V204} -> (begin (V270 = begin (V205 = {'Core.TT.App', V197, V198, V199}), case V204 of {'Builtin.MkPair', V206, V207} -> begin (V208 = ('un--unelabTy'(V0, V1, V2, V3, V4, V199))), fun (V209) -> begin (V210 = (V208(V209))), case V210 of {'Prelude.Types.Left', V211} -> {'Prelude.Types.Left', V211}; {'Prelude.Types.Right', V212} -> (begin (V269 = begin (V213 = {'Builtin.MkPair', V206, V207}), case V212 of {'Builtin.MkPair', V214, V215} -> begin (V216 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V207))), fun (V217) -> begin (V218 = (V216(V217))), case V218 of {'Prelude.Types.Left', V219} -> {'Prelude.Types.Left', V219}; {'Prelude.Types.Right', V220} -> (begin (V268 = begin (V226 = begin (V221 = V1), fun (V222) -> begin (V225 = (begin (V223 = V221), fun (V224) -> ('erlang':'get'(V223)) end end(V222))), {'Prelude.Types.Right', V225} end end end), fun (V227) -> begin (V228 = (V226(V227))), case V228 of {'Prelude.Types.Left', V229} -> {'Prelude.Types.Left', V229}; {'Prelude.Types.Right', V230} -> (begin (V267 = begin (V235 = begin (V231 = {'Builtin.MkPair', V214, V215}), case V2 of {'TTImp.Unelab.NoSugar', V232} -> fun (V233) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'TTImp.Unelab.ImplicitHoles'} -> fun (V234) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; _ -> ('case--case block in case block in case block in unelabTy\x{27}-10143'(V0, V199, V198, V197, V205, V4, V3, V2, V1, V206, V207, V213, V214, V215, V231, V220, V230, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V205)))) end end), fun (V236) -> begin (V237 = (V235(V236))), case V237 of {'Prelude.Types.Left', V238} -> {'Prelude.Types.Left', V238}; {'Prelude.Types.Right', V239} -> (begin (V266 = case V239 of {'Prelude.Types.Nothing'} -> case V220 of {'Core.Value.NBind', V240, V241, V242, V243} -> case V242 of {'Core.TT.Pi', V244, V245, V246, V247} -> case V246 of {'Core.TT.Explicit'} -> begin (V248 = ((V243(V230))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, V199))))), fun (V249) -> begin (V250 = (V248(V249))), case V250 of {'Prelude.Types.Left', V251} -> {'Prelude.Types.Left', V251}; {'Prelude.Types.Right', V252} -> (begin (V254 = fun (V253) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IApp', V197, V206, V214}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V230, V4, V252))}} end), V254 end(V249)) end end end end; _ -> begin (V255 = ((V243(V230))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, V199))))), fun (V256) -> begin (V257 = (V255(V256))), case V257 of {'Prelude.Types.Left', V258} -> {'Prelude.Types.Left', V258}; {'Prelude.Types.Right', V259} -> (begin (V261 = fun (V260) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.INamedApp', V197, V206, V241, V214}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V230, V4, V259))}} end), V261 end(V256)) end end end end end; _ -> fun (V262) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IApp', V197, V206, V214}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V197))}} end end; _ -> fun (V263) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IApp', V197, V206, V214}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V197))}} end end; {'Prelude.Types.Just', V264} -> fun (V265) -> {'Prelude.Types.Right', {'Builtin.MkPair', V264, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V197))}} end end), V266 end(V236)) end end end end), V267 end(V227)) end end end end), V268 end(V217)) end end end end end end), V269 end(V209)) end end end end end end), V270 end(V201)) end end end end; {'Core.TT.As', V271, V272, V273, V274} -> begin (V275 = ('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V273))), fun (V276) -> begin (V277 = (V275(V276))), case V277 of {'Prelude.Types.Left', V278} -> {'Prelude.Types.Left', V278}; {'Prelude.Types.Right', V279} -> (begin (V297 = case V279 of {'Builtin.MkPair', V280, V281} -> begin (V282 = ('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V274))), fun (V283) -> begin (V284 = (V282(V283))), case V284 of {'Prelude.Types.Left', V285} -> {'Prelude.Types.Left', V285}; {'Prelude.Types.Right', V286} -> (begin (V296 = case V286 of {'Builtin.MkPair', V287, V288} -> fun (V289) -> case V280 of {'TTImp.TTImp.IVar', V290, V291} -> case V2 of {'TTImp.Unelab.NoSugar', V292} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IAs', V271, ('Idris.Idris2.Core.TT':'un--getLoc'(V273)), V272, case V291 of {'Core.TT.MkKindedName', V293, V294, V295} -> V295 end, V287}, V288}}; _ -> {'Prelude.Types.Right', {'Builtin.MkPair', V287, V288}} end; _ -> {'Prelude.Types.Right', {'Builtin.MkPair', V287, V288}} end end end), V296 end(V283)) end end end end end), V297 end(V276)) end end end end; {'Core.TT.TDelayed', V298, V299, V300} -> begin (V301 = ('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V300))), fun (V302) -> begin (V303 = (V301(V302))), case V303 of {'Prelude.Types.Left', V304} -> {'Prelude.Types.Left', V304}; {'Prelude.Types.Right', V305} -> (begin (V320 = case V305 of {'Builtin.MkPair', V306, V307} -> begin (V313 = begin (V308 = V1), fun (V309) -> begin (V312 = (begin (V310 = V308), fun (V311) -> ('erlang':'get'(V310)) end end(V309))), {'Prelude.Types.Right', V312} end end end), fun (V314) -> begin (V315 = (V313(V314))), case V315 of {'Prelude.Types.Left', V316} -> {'Prelude.Types.Left', V316}; {'Prelude.Types.Right', V317} -> (begin (V319 = fun (V318) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IDelayed', V298, V299, V306}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V298))}} end), V319 end(V314)) end end end end end), V320 end(V302)) end end end end; {'Core.TT.TDelay', V321, V322, V323, V324} -> begin (V325 = ('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V324))), fun (V326) -> begin (V327 = (V325(V326))), case V327 of {'Prelude.Types.Left', V328} -> {'Prelude.Types.Left', V328}; {'Prelude.Types.Right', V329} -> (begin (V344 = case V329 of {'Builtin.MkPair', V330, V331} -> begin (V337 = begin (V332 = V1), fun (V333) -> begin (V336 = (begin (V334 = V332), fun (V335) -> ('erlang':'get'(V334)) end end(V333))), {'Prelude.Types.Right', V336} end end end), fun (V338) -> begin (V339 = (V337(V338))), case V339 of {'Prelude.Types.Left', V340} -> {'Prelude.Types.Left', V340}; {'Prelude.Types.Right', V341} -> (begin (V343 = fun (V342) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IDelay', V321, V330}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V321))}} end), V343 end(V338)) end end end end end), V344 end(V326)) end end end end; {'Core.TT.TForce', V345, V346, V347} -> begin (V348 = ('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V347))), fun (V349) -> begin (V350 = (V348(V349))), case V350 of {'Prelude.Types.Left', V351} -> {'Prelude.Types.Left', V351}; {'Prelude.Types.Right', V352} -> (begin (V367 = case V352 of {'Builtin.MkPair', V353, V354} -> begin (V360 = begin (V355 = V1), fun (V356) -> begin (V359 = (begin (V357 = V355), fun (V358) -> ('erlang':'get'(V357)) end end(V356))), {'Prelude.Types.Right', V359} end end end), fun (V361) -> begin (V362 = (V360(V361))), case V362 of {'Prelude.Types.Left', V363} -> {'Prelude.Types.Left', V363}; {'Prelude.Types.Right', V364} -> (begin (V366 = fun (V365) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IForce', V345, V353}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V345))}} end), V366 end(V361)) end end end end end), V367 end(V349)) end end end end; {'Core.TT.PrimVal', V368, V369} -> fun (V370) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IPrimVal', V368, V369}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V368))}} end; {'Core.TT.Erased', V371, V372} -> case V372 of {'Core.TT.Dotted', V373} -> ('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V373)); _ -> fun (V374) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.Implicit', V371, 1}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V371))}} end end; {'Core.TT.TType', V375, V376} -> fun (V377) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IType', V375}, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V375, {'Core.Name.MN', <<"top"/utf8>>, 0}))}} end end.
'un--unelabTy'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V5))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('un--dropParams'(V1, V3, V10))), V11 end(V7)) end end end end.
'un--unelabPi'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Core.TT.Explicit'} -> fun (V6) -> {'Prelude.Types.Right', {'Core.TT.Explicit'}} end; {'Core.TT.Implicit'} -> fun (V7) -> {'Prelude.Types.Right', {'Core.TT.Implicit'}} end; {'Core.TT.AutoImplicit'} -> fun (V8) -> {'Prelude.Types.Right', {'Core.TT.AutoImplicit'}} end; {'Core.TT.DefImplicit', V9} -> begin (V10 = ('un--unelabTy'(V0, V1, V2, V3, V4, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V18 = fun (V15) -> case V14 of {'Builtin.MkPair', V16, V17} -> {'Prelude.Types.Right', {'Core.TT.DefImplicit', V16}} end end), V18 end(V11)) end end end end end.
'un--unelabNoSugar'(V0, V1, V2, V3) -> begin (V4 = ('un--unelabTy'(V0, V1, {'TTImp.Unelab.NoSugar', 0}, [], V2, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V10 = fun (V9) -> {'Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V8))} end), V10 end(V5)) end end end end.
'un--unelabNoPatvars'(V0, V1, V2, V3) -> begin (V4 = ('un--unelabTy'(V0, V1, {'TTImp.Unelab.ImplicitHoles'}, [], V2, V3))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V10 = fun (V9) -> {'Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V8))} end), V10 end(V5)) end end end end.
'un--unelabNest'(V0, V1, V2, V3, V4) -> case V4 of {'Core.TT.Meta', V5, V6, V7, V8} -> begin (V9 = <<('Idris.Idris2.Core.Name':'un--nameRoot'(V6))/binary, ('nested--13021-11968--in--un--showScope'(V0, V8, V7, V6, V5, V3, V2, V1, V8))/binary>>), fun (V10) -> {'Prelude.Types.Right', {'TTImp.TTImp.IHole', V5, V9}} end end; _ -> begin (V11 = ('un--unelabTy'(V0, V1, {'TTImp.Unelab.Full'}, V2, V3, V4))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V15))} end), V17 end(V12)) end end end end end.
'un--unelabCase'(V0, V1, V2, V3, V4, V5) -> begin (V11 = begin (V6 = V1), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V79 = begin (V48 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V15 of {'Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} -> V16 end))), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V78 = case V52 of {'Prelude.Types.Just', V53} -> begin (V54 = {'Prelude.Types.Just', V53}), ('case--case block in unelabCase-8873'(V0, V5, V4, V3, V2, V1, V15, V53, V54, case V53 of {'Core.Context.Context.MkGlobalDef', V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76} -> V72 end)) end; {'Prelude.Types.Nothing'} -> fun (V77) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V78 end(V49)) end end end end), V79 end(V12)) end end end end.
'un--unelabBinder'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V7 of {'Core.TT.Lam', V11, V12, V13, V14} -> begin (V15 = ('un--unelabTy'(V0, V1, V2, V3, V5, V14))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V29 = case V19 of {'Builtin.MkPair', V20, V21} -> begin (V22 = ('un--unelabPi'(V0, V1, V2, V3, V5, V13))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V28 = fun (V27) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.ILam', V4, V12, V26, {'Prelude.Types.Just', V6}, V20, V9}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, {'Core.TT.Bind', V4, V6, {'Core.TT.Pi', V11, V12, V13, V14}, V10}))}} end), V28 end(V23)) end end end end end), V29 end(V16)) end end end end; {'Core.TT.Let', V30, V31, V32, V33} -> begin (V34 = ('un--unelabTy'(V0, V1, V2, V3, V5, V32))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V50 = case V38 of {'Builtin.MkPair', V39, V40} -> begin (V41 = ('un--unelabTy'(V0, V1, V2, V3, V5, V33))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V49 = fun (V46) -> case V45 of {'Builtin.MkPair', V47, V48} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.ILet', V4, {'Core.FC.EmptyFC'}, V31, V6, V47, V39, V9}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, {'Core.TT.Bind', V4, V6, {'Core.TT.Let', V30, V31, V32, V33}, V10}))}} end end), V49 end(V42)) end end end end end), V50 end(V35)) end end end end; {'Core.TT.Pi', V51, V52, V53, V54} -> begin (V55 = ('un--unelabTy'(V0, V1, V2, V3, V5, V54))), fun (V56) -> begin (V57 = (V55(V56))), case V57 of {'Prelude.Types.Left', V58} -> {'Prelude.Types.Left', V58}; {'Prelude.Types.Right', V59} -> (begin (V70 = case V59 of {'Builtin.MkPair', V60, V61} -> begin (V62 = ('un--unelabPi'(V0, V1, V2, V3, V5, V53))), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V69 = begin (V67 = case case ('un--used'(0, V8)) of 1 -> 1; 0 -> ('nested--8364-11318--in--un--isNoSugar'(V0, V51, V54, V53, V52, V6, V10, V9, V8, V5, V4, V3, V2, V1, V2)) end of 1 -> {'Prelude.Types.Just', V6}; 0 -> case case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V52, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> 1; 0 -> ('nested--8364-11319--in--un--isDefImp'(V0, V51, V54, V53, V52, V6, V10, V9, V8, V5, V4, V3, V2, V1, V53)) end of 1 -> {'Prelude.Types.Just', {'Core.Name.UN', {'Core.Name.Underscore'}}}; 0 -> {'Prelude.Types.Nothing'} end end), fun (V68) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.IPi', V4, V52, V66, V67, V60, V9}, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V4, {'Core.Name.MN', <<"top"/utf8>>, 0}))}} end end), V69 end(V63)) end end end end end), V70 end(V56)) end end end end; {'Core.TT.PVar', V71, V72, V73, V74} -> begin (V75 = ('un--unelabTy'(V0, V1, V2, V3, V5, V74))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V83 = fun (V80) -> case V79 of {'Builtin.MkPair', V81, V82} -> {'Prelude.Types.Right', {'Builtin.MkPair', V9, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, {'Core.TT.Bind', V4, V6, {'Core.TT.PVTy', V71, V72, V74}, V10}))}} end end), V83 end(V76)) end end end end; {'Core.TT.PLet', V84, V85, V86, V87} -> begin (V88 = ('un--unelabTy'(V0, V1, V2, V3, V5, V86))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V104 = case V92 of {'Builtin.MkPair', V93, V94} -> begin (V95 = ('un--unelabTy'(V0, V1, V2, V3, V5, V87))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V103 = fun (V100) -> case V99 of {'Builtin.MkPair', V101, V102} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'TTImp.TTImp.ILet', V4, {'Core.FC.EmptyFC'}, V85, V6, V101, V93, V9}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, {'Core.TT.Bind', V4, V6, {'Core.TT.PLet', V84, V85, V86, V87}, V10}))}} end end), V103 end(V96)) end end end end end), V104 end(V89)) end end end end; {'Core.TT.PVTy', V105, V106, V107} -> begin (V108 = ('un--unelabTy'(V0, V1, V2, V3, V5, V107))), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V116 = fun (V113) -> case V112 of {'Builtin.MkPair', V114, V115} -> {'Prelude.Types.Right', {'Builtin.MkPair', V9, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V4, {'Core.Name.MN', <<"top"/utf8>>, 0}))}} end end), V116 end(V109)) end end end end end.
'un--unelab'(V0, V1, V2, V3) -> ('un--unelabNest'(V0, V1, [], V2, V3)).
'un--dropParams'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> ('case--dropParams-9128'(V3, V4, V1, V0, ('Idris.Idris2.TTImp.TTImp':'un--getFnArgs'(V3, [])))) end.
