-module('Idris.Idris2.Compiler.ES.Codegen').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--validJSName-8304'/2,
  'case--case block in case block in makeForeign-5805'/9,
  'case--castInt-4586'/4,
  'case--castInt,intImpl-4259'/8,
  'case--jsMod-4007'/4,
  'nested--17265-8265--in--un--validNameChar'/2,
  'nested--12944-4089--in--un--truncInt'/6,
  'nested--12944-4090--in--un--shrink'/5,
  'nested--11495-2670--in--un--okchar'/2,
  'nested--11345-2521--in--un--okchar'/2,
  'nested--12123-3326--in--un--mkCon'/4,
  'nested--12944-4092--in--un--intImpl'/5,
  'nested--12944-4091--in--un--expand'/5,
  'nested--15816-6878--in--un--anyCase'/6,
  'nested--16087-7665--in--un--alt'/8,
  'nested--16087-7402--in--un--alt'/9,
  'nested--15816-6879--in--un--alt'/4,
  'un--var'/2,
  'un--validJSName'/1,
  'un--useBigInt\x{27}'/1,
  'un--useBigInt'/1,
  'un--truncateUnsigned'/2,
  'un--truncateSigned'/2,
  'un--toInt'/1,
  'un--toBigInt'/1,
  'un--tailRec'/0,
  'un--tag2es'/1,
  'un--switch'/3,
  'un--stringList'/1,
  'un--stmt'/4,
  'un--searchForeign'/2,
  'un--readCCPart'/1,
  'un--printDoc'/2,
  'un--minimal'/2,
  'un--makeForeign'/5,
  'un--mainExpr'/0,
  'un--lambdaArgs'/2,
  'un--keywordSafe'/1,
  'un--jsUserName'/1,
  'un--jsStringDoc'/1,
  'un--jsString'/1,
  'un--jsReservedNames'/0,
  'un--jsPrimType'/1,
  'un--jsPrim'/3,
  'un--jsOp'/2,
  'un--jsNumberOfString'/1,
  'un--jsNameDoc'/2,
  'un--jsName'/2,
  'un--jsMod'/3,
  'un--jsMangleName'/1,
  'un--jsIntOfString'/1,
  'un--jsIntOfDouble'/2,
  'un--jsIntOfChar'/2,
  'un--jsIntKind'/1,
  'un--jsIdent'/1,
  'un--jsCrashExp'/1,
  'un--jsConstant'/1,
  'un--jsCharOfInt'/2,
  'un--jsBigIntOfString'/1,
  'un--jsAnyToString'/1,
  'un--isFun'/1,
  'un--isArg'/2,
  'un--integerOp'/3,
  'un--insertBreak'/2,
  'un--function'/3,
  'un--fromInt'/1,
  'un--fromBigInt'/1,
  'un--foreignDecl'/5,
  'un--foreign'/4,
  'un--exp'/3,
  'un--esName'/1,
  'un--def'/5,
  'un--constant'/2,
  'un--conTags'/1,
  'un--compileToES'/5,
  'un--castInt'/3,
  'un--callFun1'/2,
  'un--callFun'/2,
  'un--breakDrop1'/2,
  'un--boundedUIntOp'/4,
  'un--boundedOp'/5,
  'un--boundedIntOp'/4,
  'un--boolOp'/3,
  'un--binOp'/3,
  'un--arithOp'/3,
  'un--applyObj'/1,
  'un--applyList'/4,
  'un--applyCon'/3,
  'un--app'/2
]).
'case--validJSName-8304'(V0, V1) -> case V0 of <<""/utf8>> -> case V1 of {'Data.String.StrNil'} -> fun () -> 1 end; _ -> case V1 of {'Data.String.StrCons', V2, V3} -> fun () -> case ('Idris.Idris2.Prelude.Types':'un--isDigit'(V2)) of 1 -> 0; 0 -> 1 end end end end; _ -> case V1 of {'Data.String.StrCons', V4, V5} -> fun () -> case ('Idris.Idris2.Prelude.Types':'un--isDigit'(V4)) of 1 -> 0; 0 -> 1 end end end end.
'case--case block in case block in makeForeign-5805'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Builtin.MkPair', V9, V10} -> begin (V11 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V4, <<<<"js/"/utf8>>/binary, <<V10/binary, <<".js"/utf8>>/binary>>/binary>>))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V23 = begin (V16 = ('Idris.Idris2.Compiler.ES.State':'un--addToPreamble'(V3, V10, V15))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', ('un--constant'(V5, {'Compiler.ES.Doc.Text', <<V10/binary, <<<<"_"/utf8>>/binary, V9/binary>>/binary>>}))} end), V22 end(V17)) end end end end), V23 end(V12)) end end end end end.
'case--castInt-4586'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V4 of {'Builtin.MkPair', V6, V7} -> case V6 of 11 -> case V5 of {'Builtin.MkPair', V8, V9} -> case V9 of {'Prelude.Types.Just', V10} -> ('nested--12944-4089--in--un--truncInt'(V0, V1, V2, ('un--useBigInt'(V10)), V10, ('un--jsIntOfChar'(V10, V0)))); _ -> case V7 of {'Prelude.Types.Just', V11} -> case V5 of {'Builtin.MkPair', V12, V13} -> case V12 of 11 -> fun (V14) -> {'Prelude.Types.Right', ('un--jsCharOfInt'(V11, V0))} end; 10 -> fun (V15) -> {'Prelude.Types.Right', ('un--jsAnyToString'(V0))} end; 12 -> fun (V16) -> {'Prelude.Types.Right', (('un--fromInt'(V11))(V0))} end; _ -> case V13 of {'Prelude.Types.Just', V17} -> ('nested--12944-4092--in--un--intImpl'(V0, V1, V2, V11, V17)); _ -> fun (V18) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V18)) end end end; _ -> fun (V19) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V19)) end end; _ -> fun (V20) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V20)) end end end; _ -> case V7 of {'Prelude.Types.Just', V21} -> case V5 of {'Builtin.MkPair', V22, V23} -> case V22 of 11 -> fun (V24) -> {'Prelude.Types.Right', ('un--jsCharOfInt'(V21, V0))} end; 10 -> fun (V25) -> {'Prelude.Types.Right', ('un--jsAnyToString'(V0))} end; 12 -> fun (V26) -> {'Prelude.Types.Right', (('un--fromInt'(V21))(V0))} end; _ -> case V23 of {'Prelude.Types.Just', V27} -> ('nested--12944-4092--in--un--intImpl'(V0, V1, V2, V21, V27)); _ -> fun (V28) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V28)) end end end; _ -> fun (V29) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V29)) end end; _ -> fun (V30) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V30)) end end end; 10 -> case V5 of {'Builtin.MkPair', V31, V32} -> case V32 of {'Prelude.Types.Just', V33} -> ('nested--12944-4089--in--un--truncInt'(V0, V1, V2, ('un--useBigInt'(V33)), V33, (('un--jsIntOfString'(V33))(V0)))); _ -> case V7 of {'Prelude.Types.Just', V34} -> case V5 of {'Builtin.MkPair', V35, V36} -> case V35 of 11 -> fun (V37) -> {'Prelude.Types.Right', ('un--jsCharOfInt'(V34, V0))} end; 10 -> fun (V38) -> {'Prelude.Types.Right', ('un--jsAnyToString'(V0))} end; 12 -> fun (V39) -> {'Prelude.Types.Right', (('un--fromInt'(V34))(V0))} end; _ -> case V36 of {'Prelude.Types.Just', V40} -> ('nested--12944-4092--in--un--intImpl'(V0, V1, V2, V34, V40)); _ -> fun (V41) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V41)) end end end; _ -> fun (V42) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V42)) end end; _ -> fun (V43) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V43)) end end end; _ -> case V7 of {'Prelude.Types.Just', V44} -> case V5 of {'Builtin.MkPair', V45, V46} -> case V45 of 11 -> fun (V47) -> {'Prelude.Types.Right', ('un--jsCharOfInt'(V44, V0))} end; 10 -> fun (V48) -> {'Prelude.Types.Right', ('un--jsAnyToString'(V0))} end; 12 -> fun (V49) -> {'Prelude.Types.Right', (('un--fromInt'(V44))(V0))} end; _ -> case V46 of {'Prelude.Types.Just', V50} -> ('nested--12944-4092--in--un--intImpl'(V0, V1, V2, V44, V50)); _ -> fun (V51) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V51)) end end end; _ -> fun (V52) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V52)) end end; _ -> fun (V53) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V53)) end end end; 12 -> case V5 of {'Builtin.MkPair', V54, V55} -> case V55 of {'Prelude.Types.Just', V56} -> ('nested--12944-4089--in--un--truncInt'(V0, V1, V2, ('un--useBigInt'(V56)), V56, ('un--jsIntOfDouble'(V56, V0)))); _ -> case V7 of {'Prelude.Types.Just', V57} -> case V5 of {'Builtin.MkPair', V58, V59} -> case V58 of 11 -> fun (V60) -> {'Prelude.Types.Right', ('un--jsCharOfInt'(V57, V0))} end; 10 -> fun (V61) -> {'Prelude.Types.Right', ('un--jsAnyToString'(V0))} end; 12 -> fun (V62) -> {'Prelude.Types.Right', (('un--fromInt'(V57))(V0))} end; _ -> case V59 of {'Prelude.Types.Just', V63} -> ('nested--12944-4092--in--un--intImpl'(V0, V1, V2, V57, V63)); _ -> fun (V64) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V64)) end end end; _ -> fun (V65) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V65)) end end; _ -> fun (V66) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V66)) end end end; _ -> case V7 of {'Prelude.Types.Just', V67} -> case V5 of {'Builtin.MkPair', V68, V69} -> case V68 of 11 -> fun (V70) -> {'Prelude.Types.Right', ('un--jsCharOfInt'(V67, V0))} end; 10 -> fun (V71) -> {'Prelude.Types.Right', ('un--jsAnyToString'(V0))} end; 12 -> fun (V72) -> {'Prelude.Types.Right', (('un--fromInt'(V67))(V0))} end; _ -> case V69 of {'Prelude.Types.Just', V73} -> ('nested--12944-4092--in--un--intImpl'(V0, V1, V2, V67, V73)); _ -> fun (V74) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V74)) end end end; _ -> fun (V75) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V75)) end end; _ -> fun (V76) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V76)) end end end; _ -> case V7 of {'Prelude.Types.Just', V77} -> case V5 of {'Builtin.MkPair', V78, V79} -> case V78 of 11 -> fun (V80) -> {'Prelude.Types.Right', ('un--jsCharOfInt'(V77, V0))} end; 10 -> fun (V81) -> {'Prelude.Types.Right', ('un--jsAnyToString'(V0))} end; 12 -> fun (V82) -> {'Prelude.Types.Right', (('un--fromInt'(V77))(V0))} end; _ -> case V79 of {'Prelude.Types.Just', V83} -> ('nested--12944-4092--in--un--intImpl'(V0, V1, V2, V77, V83)); _ -> fun (V84) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V84)) end end end; _ -> fun (V85) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V85)) end end; _ -> fun (V86) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V86)) end end end; _ -> fun (V87) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V87)) end end; _ -> fun (V88) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1)) | []]]]], V88)) end end.
'case--castInt,intImpl-4259'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> case V9 of {'Core.TT.Signed', V10} -> case V10 of {'Core.TT.Unlimited'} -> fun (V11) -> {'Prelude.Types.Right', V5} end; _ -> case V8 of {'Core.TT.Signed', V12} -> case V9 of {'Core.TT.Signed', V13} -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'(V13, V12)) of 1 -> fun (V14) -> {'Prelude.Types.Right', V5} end; 0 -> V6 end; {'Core.TT.Unsigned', V15} -> case ('un--useBigInt'(V4)) of 0 -> case ('un--useBigInt'(V3)) of 1 -> ('nested--12944-4089--in--un--truncInt'(V0, V1, V2, 1, V3, ('un--toBigInt'(V0)))); _ -> V6 end; _ -> V6 end end; {'Core.TT.Unsigned', V16} -> case V9 of {'Core.TT.Unsigned', V17} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V17, V16)) of 1 -> fun (V18) -> {'Prelude.Types.Right', V5} end; 0 -> V6 end; {'Core.TT.Signed', V19} -> case ('Idris.Idris2.Core.TT':'dn--un-->_Ord_Precision'(V19, {'Core.TT.P', V16})) of 1 -> fun (V20) -> {'Prelude.Types.Right', V5} end; 0 -> V6 end end end end; _ -> case V8 of {'Core.TT.Signed', V21} -> case V9 of {'Core.TT.Signed', V22} -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'(V22, V21)) of 1 -> fun (V23) -> {'Prelude.Types.Right', V5} end; 0 -> V6 end; {'Core.TT.Unsigned', V24} -> case ('un--useBigInt'(V4)) of 0 -> case ('un--useBigInt'(V3)) of 1 -> ('nested--12944-4089--in--un--truncInt'(V0, V1, V2, 1, V3, ('un--toBigInt'(V0)))); _ -> V6 end; _ -> V6 end end; {'Core.TT.Unsigned', V25} -> case V9 of {'Core.TT.Unsigned', V26} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V26, V25)) of 1 -> fun (V27) -> {'Prelude.Types.Right', V5} end; 0 -> V6 end; {'Core.TT.Signed', V28} -> case ('Idris.Idris2.Core.TT':'dn--un-->_Ord_Precision'(V28, {'Core.TT.P', V25})) of 1 -> fun (V29) -> {'Prelude.Types.Right', V5} end; 0 -> V6 end end end end end.
'case--jsMod-4007'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Just', V4} -> case V4 of {'Core.TT.Signed', V5} -> case V5 of {'Core.TT.P', V6} -> case ('un--useBigInt\x{27}'(V6)) of 1 -> ('un--integerOp'(<<"mod"/utf8>>, V1, V0)); 0 -> ('un--callFun'(<<"_mod"/utf8>>, [V1 | [V0 | []]])) end; _ -> ('un--integerOp'(<<"mod"/utf8>>, V1, V0)) end; {'Core.TT.Unsigned', V7} -> ('un--binOp'(<<"%"/utf8>>, V1, V0)); _ -> ('un--integerOp'(<<"mod"/utf8>>, V1, V0)) end; _ -> ('un--integerOp'(<<"mod"/utf8>>, V1, V0)) end.
'nested--17265-8265--in--un--validNameChar'(V0, V1) -> case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V1)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $_)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $$)) end end.
'nested--12944-4089--in--un--truncInt'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Core.TT.Signed', V6} -> fun (V7) -> case V6 of {'Core.TT.Unlimited'} -> {'Prelude.Types.Right', V5}; {'Core.TT.P', V8} -> {'Prelude.Types.Right', (('un--truncateSigned'(V3, V8))(V5))} end end; {'Core.TT.Unsigned', V9} -> fun (V10) -> {'Prelude.Types.Right', (('un--truncateUnsigned'(V3, V9))(V5))} end end.
'nested--12944-4090--in--un--shrink'(V0, V1, V2, V3, V4) -> case ('un--useBigInt'(V3)) of 1 -> case ('un--useBigInt'(V4)) of 0 -> fun (V5) -> ('un--fromBigInt'(V5)) end; _ -> fun (V6) -> V6 end end; _ -> fun (V7) -> V7 end end.
'nested--11495-2670--in--un--okchar'(V0, V1) -> case V1 of $_ -> <<"_"/utf8>>; _ -> case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V1)) of 1 -> ('unicode':'characters_to_binary'([V1 | []])); 0 -> <<<<"x"/utf8>>/binary, ('Idris.Idris2.Protocol.Hex':'un--asHex'(case V1 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end))/binary>> end end.
'nested--11345-2521--in--un--okchar'(V0, V1) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V1, $ )) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $\x{5c})) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $\x{22})) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $\x{27})) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V1, $~)); 0 -> 0 end; 0 -> 0 end; 0 -> 0 end; 0 -> 0 end of 1 -> ('unicode':'characters_to_binary'([V1 | []])); 0 -> case V1 of $\x{0} -> <<"\x{5c}0"/utf8>>; $\x{27} -> <<"\x{5c}\x{27}"/utf8>>; $\x{22} -> <<"\x{5c}\x{22}"/utf8>>; $\x{d} -> <<"\x{5c}r"/utf8>>; $\x{a} -> <<"\x{5c}n"/utf8>>; _ -> <<<<"\x{5c}u{"/utf8>>/binary, <<('Idris.Idris2.Protocol.Hex':'un--asHex'((begin (V3 = fun (V2) -> case V2 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end end), fun (V4) -> (V3(V4)) end end(V1))))/binary, <<"}"/utf8>>/binary>>/binary>> end end.
'nested--12123-3326--in--un--mkCon'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"h"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()))), V4)); {'Prelude.Types.Just', V6} -> ('Idris.Idris2.Compiler.ES.Doc':'un--<++>'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"h"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()))), V4)), {'Compiler.ES.Doc.Comment', V6})) end end.
'nested--12944-4092--in--un--intImpl'(V0, V1, V2, V3, V4) -> begin (V5 = (('nested--12944-4091--in--un--expand'(V0, V1, V2, V3, V4))(V0))), begin (V24 = begin (V6 = ('nested--12944-4089--in--un--truncInt'(V0, V1, V2, ('un--useBigInt'(V3)), V4, V0))), ((begin (V21 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end((begin (V13 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> {'Prelude.Types.Right', (V9(V12))} end end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(('nested--12944-4090--in--un--shrink'(V0, V1, V2, V3, V4))))))(V6)) end), ('case--castInt,intImpl-4259'(V0, V1, V2, V4, V3, V5, V24, {'Builtin.MkPair', V3, V4})) end end.
'nested--12944-4091--in--un--expand'(V0, V1, V2, V3, V4) -> case ('un--useBigInt'(V3)) of 0 -> case ('un--useBigInt'(V4)) of 1 -> fun (V5) -> ('un--toBigInt'(V5)) end; _ -> fun (V6) -> V6 end end; _ -> fun (V7) -> V7 end end.
'nested--15816-6878--in--un--anyCase'(V0, V1, V2, V3, V4, V5) -> begin (V6 = case ('Idris.Idris2.Compiler.ES.Doc':'un--isMultiline'(V5)) of 1 -> ('Idris.Idris2.Compiler.ES.Doc':'un--block'(V5)); 0 -> V5 end), case V4 of {'Prelude.Types.Nothing'} -> ((begin (V14 = fun (V12) -> fun (V13) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V12, V13)) end end), fun (V15) -> fun (V16) -> ((V14(V15))(V16)) end end end(((begin (V9 = fun (V7) -> fun (V8) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V7, V8)) end end), fun (V10) -> fun (V11) -> ((V9(V10))(V11)) end end end(V3))(('Idris.Idris2.Compiler.ES.Doc':'un--softColon'())))))(V6)); {'Prelude.Types.Just', V17} -> ('Idris.Idris2.Compiler.ES.Doc':'un--<++>'(((begin (V25 = fun (V23) -> fun (V24) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V23, V24)) end end), fun (V26) -> fun (V27) -> ((V25(V26))(V27)) end end end(((begin (V20 = fun (V18) -> fun (V19) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V18, V19)) end end), fun (V21) -> fun (V22) -> ((V20(V21))(V22)) end end end(V3))(('Idris.Idris2.Compiler.ES.Doc':'un--softColon'())))))({'Compiler.ES.Doc.Comment', V17})), V6)) end end.
'nested--16087-7665--in--un--alt'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Compiler.ES.Ast.MkEConstAlt', V8, V9} -> begin (V10 = ('un--stmt'({'Prelude.Types.Just', V0}, V5, V4, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Builtin.MkPair', {'Compiler.ES.Doc.Text', ('un--jsConstant'(V8))}, {'Prelude.Types.Nothing'}}, V14}} end), V16 end(V11)) end end end end end.
'nested--16087-7402--in--un--alt'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Compiler.ES.Ast.MkEConAlt', V9, V10, V11} -> case V10 of {'Core.CompileExpr.RECORD'} -> begin (V12 = ('un--stmt'({'Prelude.Types.Just', V7}, V5, V4, V11))), ((begin (V28 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V25, V26, V27)) end end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end((begin (V20 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> {'Prelude.Types.Right', (V16(V19))} end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V13) -> {'Builtin.MkPair', {'Builtin.MkPair', {'Compiler.ES.Doc.Text', <<"undefined"/utf8>>}, {'Prelude.Types.Just', {'Compiler.ES.Doc.Text', <<"record"/utf8>>}}}, V13} end))))(V12)) end; {'Core.CompileExpr.NIL'} -> begin (V31 = ('un--stmt'({'Prelude.Types.Just', V7}, V5, V4, V11))), ((begin (V47 = fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V44, V45, V46)) end end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end((begin (V39 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> {'Prelude.Types.Right', (V35(V38))} end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V32) -> {'Builtin.MkPair', {'Builtin.MkPair', {'Compiler.ES.Doc.Text', <<"0"/utf8>>}, {'Prelude.Types.Just', {'Compiler.ES.Doc.Text', <<"nil"/utf8>>}}}, V32} end))))(V31)) end; {'Core.CompileExpr.CONS'} -> begin (V50 = ('un--stmt'({'Prelude.Types.Just', V7}, V5, V4, V11))), ((begin (V66 = fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V63, V64, V65)) end end end end end), fun (V67) -> fun (V68) -> ((((V66('erased'))('erased'))(V67))(V68)) end end end((begin (V58 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> {'Prelude.Types.Right', (V54(V57))} end end end end end), fun (V59) -> fun (V60) -> ((((V58('erased'))('erased'))(V59))(V60)) end end end(fun (V51) -> {'Builtin.MkPair', {'Builtin.MkPair', {'Compiler.ES.Doc.Text', <<"undefined"/utf8>>}, {'Prelude.Types.Just', {'Compiler.ES.Doc.Text', <<"cons"/utf8>>}}}, V51} end))))(V50)) end; {'Core.CompileExpr.NOTHING'} -> begin (V69 = ('un--stmt'({'Prelude.Types.Just', V7}, V5, V4, V11))), ((begin (V85 = fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V82, V83, V84)) end end end end end), fun (V86) -> fun (V87) -> ((((V85('erased'))('erased'))(V86))(V87)) end end end((begin (V77 = fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> {'Prelude.Types.Right', (V73(V76))} end end end end end), fun (V78) -> fun (V79) -> ((((V77('erased'))('erased'))(V78))(V79)) end end end(fun (V70) -> {'Builtin.MkPair', {'Builtin.MkPair', {'Compiler.ES.Doc.Text', <<"0"/utf8>>}, {'Prelude.Types.Just', {'Compiler.ES.Doc.Text', <<"nothing"/utf8>>}}}, V70} end))))(V69)) end; {'Core.CompileExpr.JUST'} -> begin (V88 = ('un--stmt'({'Prelude.Types.Just', V7}, V5, V4, V11))), ((begin (V104 = fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V101, V102, V103)) end end end end end), fun (V105) -> fun (V106) -> ((((V104('erased'))('erased'))(V105))(V106)) end end end((begin (V96 = fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> {'Prelude.Types.Right', (V92(V95))} end end end end end), fun (V97) -> fun (V98) -> ((((V96('erased'))('erased'))(V97))(V98)) end end end(fun (V89) -> {'Builtin.MkPair', {'Builtin.MkPair', {'Compiler.ES.Doc.Text', <<"undefined"/utf8>>}, {'Prelude.Types.Just', {'Compiler.ES.Doc.Text', <<"just"/utf8>>}}}, V89} end))))(V88)) end; {'Core.CompileExpr.UNIT'} -> begin (V107 = ('un--stmt'({'Prelude.Types.Just', V7}, V5, V4, V11))), ((begin (V123 = fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V120, V121, V122)) end end end end end), fun (V124) -> fun (V125) -> ((((V123('erased'))('erased'))(V124))(V125)) end end end((begin (V115 = fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> {'Prelude.Types.Right', (V111(V114))} end end end end end), fun (V116) -> fun (V117) -> ((((V115('erased'))('erased'))(V116))(V117)) end end end(fun (V108) -> {'Builtin.MkPair', {'Builtin.MkPair', {'Compiler.ES.Doc.Text', <<"undefined"/utf8>>}, {'Prelude.Types.Just', {'Compiler.ES.Doc.Text', <<"unit"/utf8>>}}}, V108} end))))(V107)) end; _ -> begin (V126 = ('un--stmt'({'Prelude.Types.Just', V7}, V5, V4, V11))), ((begin (V142 = fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V139, V140, V141)) end end end end end), fun (V143) -> fun (V144) -> ((((V142('erased'))('erased'))(V143))(V144)) end end end((begin (V134 = fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> case V131 of {'Prelude.Types.Left', V132} -> {'Prelude.Types.Left', V132}; {'Prelude.Types.Right', V133} -> {'Prelude.Types.Right', (V130(V133))} end end end end end), fun (V135) -> fun (V136) -> ((((V134('erased'))('erased'))(V135))(V136)) end end end(fun (V127) -> {'Builtin.MkPair', ('un--tag2es'(V9)), V127} end))))(V126)) end end end.
'nested--15816-6879--in--un--alt'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V4 of {'Builtin.MkPair', V6, V7} -> ('nested--15816-6878--in--un--anyCase'(V0, V1, V2, ('Idris.Idris2.Compiler.ES.Doc':'un--<++>'({'Compiler.ES.Doc.Text', <<"case"/utf8>>}, V6)), V7, V5)) end end.
'un--var'(V0, V1) -> case V1 of {'Compiler.ES.Ast.VName', V2} -> ('un--jsNameDoc'(V0, V2)); {'Compiler.ES.Ast.VLoc', V3} -> {'Compiler.ES.Doc.Text', <<<<"$"/utf8>>/binary, ('Idris.Idris2.Protocol.Hex':'un--asHex'(begin (V4 = V3), begin (V5 = 18446744073709551616), begin (V6 = (V4 rem V5)), case ((V6 * V5) < 0) of 'true' -> (V6 + V5); _ -> V6 end end end end))/binary>>}; {'Compiler.ES.Ast.VRef', V7} -> {'Compiler.ES.Doc.Text', <<<<"$R"/utf8>>/binary, ('Idris.Idris2.Protocol.Hex':'un--asHex'(begin (V8 = V7), begin (V9 = 18446744073709551616), begin (V10 = (V8 rem V9)), case ((V10 * V9) < 0) of 'true' -> (V10 + V9); _ -> V10 end end end end))/binary>>} end.
'un--validJSName'(V0) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> V21 end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V29, V30)) end end}, V0, ('un--jsReservedNames'()))) of 1 -> 0; 0 -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V31, V32)) end end, 1}, fun (V33) -> ('nested--17265-8265--in--un--validNameChar'(V0, V33)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))) of 1 -> (('case--validJSName-8304'(V0, ('Idris.Idris2.Data.String':'un--strM'(V0))))()); 0 -> 0 end end.
'un--useBigInt\x{27}'(V0) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V0, 32)).
'un--useBigInt'(V0) -> case V0 of {'Core.TT.Signed', V1} -> case V1 of {'Core.TT.P', V2} -> ('un--useBigInt\x{27}'(V2)); {'Core.TT.Unlimited'} -> 1 end; {'Core.TT.Unsigned', V3} -> ('un--useBigInt\x{27}'(V3)) end.
'un--truncateUnsigned'(V0, V1) -> begin (V8 = case V0 of 1 -> (begin (V3 = fun (V2) -> V2 end), fun (V4) -> (V3(V4)) end end(<<"BigInt"/utf8>>)); 0 -> (begin (V6 = fun (V5) -> V5 end), fun (V7) -> (V6(V7)) end end(<<"Int"/utf8>>)) end), fun (V9) -> ('un--callFun1'(<<('un--esName'(<<"truncU"/utf8>>))/binary, <<V8/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1))/binary>>/binary>>, V9)) end end.
'un--truncateSigned'(V0, V1) -> begin (V8 = case V0 of 1 -> (begin (V3 = fun (V2) -> V2 end), fun (V4) -> (V3(V4)) end end(<<"BigInt"/utf8>>)); 0 -> (begin (V6 = fun (V5) -> V5 end), fun (V7) -> (V6(V7)) end end(<<"Int"/utf8>>)) end), fun (V9) -> ('un--callFun1'(<<('un--esName'(<<"trunc"/utf8>>))/binary, <<V8/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1))/binary>>/binary>>, V9)) end end.
'un--toInt'(V0) -> case ('un--useBigInt'(V0)) of 1 -> fun (V1) -> ('un--toBigInt'(V1)) end; 0 -> fun (V2) -> V2 end end.
'un--toBigInt'(V0) -> ('un--callFun1'(<<"BigInt"/utf8>>, V0)).
'un--tailRec'() -> {'Core.Name.UN', {'Core.Name.Basic', <<"__tailRec"/utf8>>}}.
'un--tag2es'(V0) -> case V0 of {'Compiler.ES.Ast.DataCon', V1, V2} -> {'Builtin.MkPair', {'Compiler.ES.Doc.Text', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1))}, {'Prelude.Types.Just', {'Compiler.ES.Doc.Text', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V2))))}}}; {'Compiler.ES.Ast.TypeCon', V3} -> {'Builtin.MkPair', ('un--jsStringDoc'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)))), {'Prelude.Types.Nothing'}} end.
'un--switch'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"switch"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--paren'(V0)))), {'Compiler.ES.Doc.SoftSpace'}))), begin (V7 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_Maybe'({'Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, V5)) end end, []}, fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('nested--15816-6878--in--un--anyCase'(V2, V1, V0, {'Compiler.ES.Doc.Text', <<"default"/utf8>>}, {'Prelude.Types.Nothing'}, V6)))) end, V2))), ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V3, ('Idris.Idris2.Compiler.ES.Doc':'un--block'(('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('nested--15816-6879--in--un--alt'(V2, V1, V0, V8)) end))(V1)), V7)))))))) end end.
'un--stringList'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Data.List':'un--intersperse'(<<","/utf8>>, ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V1)) end))(V0)))))).
'un--stmt'(V0, V1, V2, V3) -> case V0 of {'Prelude.Types.Just', V4} -> case V4 of {'Compiler.ES.Ast.Returns'} -> case V3 of {'Compiler.ES.Ast.Return', V5} -> begin (V6 = ('un--exp'(V1, V2, V5))), ((begin (V27 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V24, V25, V26)) end end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end((begin (V19 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> {'Prelude.Types.Right', (V15(V18))} end end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V7) -> ('Idris.Idris2.Compiler.ES.Doc':'un--<++>'({'Compiler.ES.Doc.Text', <<"return"/utf8>>}, ((begin (V10 = fun (V8) -> fun (V9) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V8, V9)) end end), fun (V11) -> fun (V12) -> ((V10(V11))(V12)) end end end(V7))({'Compiler.ES.Doc.Text', <<";"/utf8>>})))) end))))(V6)) end; _ -> case V3 of {'Compiler.ES.Ast.ConSwitch', V30, V31, V32, V33} -> begin (V54 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V34) -> begin (V35 = ('nested--16087-7402--in--un--alt'(V4, V33, V32, V31, V2, V1, V0, V4, V34))), ((begin (V51 = fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V48, V49, V50)) end end end end end), fun (V52) -> fun (V53) -> ((((V51('erased'))('erased'))(V52))(V53)) end end end((begin (V43 = fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> {'Prelude.Types.Right', (V39(V42))} end end end end end), fun (V44) -> fun (V45) -> ((((V43('erased'))('erased'))(V44))(V45)) end end end(fun (V36) -> ('un--insertBreak'(V4, V36)) end))))(V35)) end end, V32, []))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V103 = begin (V80 = case V33 of {'Prelude.Types.Nothing'} -> fun (V59) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V60} -> begin (V61 = ('un--stmt'({'Prelude.Types.Just', V4}, V1, V2, V60))), ((begin (V77 = fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V74, V75, V76)) end end end end end), fun (V78) -> fun (V79) -> ((((V77('erased'))('erased'))(V78))(V79)) end end end((begin (V69 = fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> {'Prelude.Types.Right', (V65(V68))} end end end end end), fun (V70) -> fun (V71) -> ((((V69('erased'))('erased'))(V70))(V71)) end end end(fun (V62) -> {'Prelude.Types.Just', V62} end))))(V61)) end end), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V102 = begin (V90 = begin (V85 = V2), fun (V86) -> begin (V89 = (begin (V87 = V85), fun (V88) -> ('erlang':'get'(V87)) end end(V86))), {'Prelude.Types.Right', V89} end end end), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V101 = fun (V95) -> {'Prelude.Types.Right', ('un--switch'(((begin (V98 = fun (V96) -> fun (V97) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V96, V97)) end end), fun (V99) -> fun (V100) -> ((V98(V99))(V100)) end end end(('un--minimal'(V94, V31))))({'Compiler.ES.Doc.Text', <<".h"/utf8>>})), V58, V84))} end), V101 end(V91)) end end end end), V102 end(V81)) end end end end), V103 end(V55)) end end end end; {'Compiler.ES.Ast.ConstSwitch', V104, V105, V106, V107} -> begin (V128 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V108) -> begin (V109 = ('nested--16087-7665--in--un--alt'(V4, V107, V106, V105, V2, V1, V0, V108))), ((begin (V125 = fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V122, V123, V124)) end end end end end), fun (V126) -> fun (V127) -> ((((V125('erased'))('erased'))(V126))(V127)) end end end((begin (V117 = fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> {'Prelude.Types.Right', (V113(V116))} end end end end end), fun (V118) -> fun (V119) -> ((((V117('erased'))('erased'))(V118))(V119)) end end end(fun (V110) -> ('un--insertBreak'(V4, V110)) end))))(V109)) end end, V106, []))), fun (V129) -> begin (V130 = (V128(V129))), case V130 of {'Prelude.Types.Left', V131} -> {'Prelude.Types.Left', V131}; {'Prelude.Types.Right', V132} -> (begin (V167 = begin (V154 = case V107 of {'Prelude.Types.Nothing'} -> fun (V133) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V134} -> begin (V135 = ('un--stmt'({'Prelude.Types.Just', V4}, V1, V2, V134))), ((begin (V151 = fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V148, V149, V150)) end end end end end), fun (V152) -> fun (V153) -> ((((V151('erased'))('erased'))(V152))(V153)) end end end((begin (V143 = fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> {'Prelude.Types.Right', (V139(V142))} end end end end end), fun (V144) -> fun (V145) -> ((((V143('erased'))('erased'))(V144))(V145)) end end end(fun (V136) -> {'Prelude.Types.Just', V136} end))))(V135)) end end), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V166 = begin (V159 = ('un--exp'(V1, V2, V105))), fun (V160) -> begin (V161 = (V159(V160))), case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> (begin (V165 = fun (V164) -> {'Prelude.Types.Right', ('un--switch'(V163, V132, V158))} end), V165 end(V160)) end end end end), V166 end(V155)) end end end end), V167 end(V129)) end end end end; {'Compiler.ES.Ast.Error', V168} -> fun (V169) -> {'Prelude.Types.Right', ((begin (V172 = fun (V170) -> fun (V171) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V170, V171)) end end), fun (V173) -> fun (V174) -> ((V172(V173))(V174)) end end end(('un--jsCrashExp'(('un--jsStringDoc'(V168))))))({'Compiler.ES.Doc.Text', <<";"/utf8>>}))} end; _ -> case V3 of {'Compiler.ES.Ast.Block', V175, V176} -> begin (V178 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V177) -> ('un--stmt'({'Prelude.Types.Nothing'}, V1, V2, V177)) end, ('Idris.Idris2.Data.List1':'un--forget'(V175)), []))), fun (V179) -> begin (V180 = (V178(V179))), case V180 of {'Prelude.Types.Left', V181} -> {'Prelude.Types.Left', V181}; {'Prelude.Types.Right', V182} -> (begin (V190 = begin (V183 = ('un--stmt'(V0, V1, V2, V176))), fun (V184) -> begin (V185 = (V183(V184))), case V185 of {'Prelude.Types.Left', V186} -> {'Prelude.Types.Left', V186}; {'Prelude.Types.Right', V187} -> (begin (V189 = fun (V188) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V182, [V187 | []]))))} end), V189 end(V184)) end end end end), V190 end(V179)) end end end end end end end; {'Compiler.ES.Ast.ErrorWithout', V191} -> case V3 of {'Compiler.ES.Ast.Assign', V192, V193} -> begin (V199 = begin (V194 = V2), fun (V195) -> begin (V198 = (begin (V196 = V194), fun (V197) -> ('erlang':'get'(V196)) end end(V195))), {'Prelude.Types.Right', V198} end end end), fun (V200) -> begin (V201 = (V199(V200))), case V201 of {'Prelude.Types.Left', V202} -> {'Prelude.Types.Left', V202}; {'Prelude.Types.Right', V203} -> (begin (V223 = begin (V204 = ('un--exp'(V1, V2, V193))), ((begin (V220 = fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V217, V218, V219)) end end end end end), fun (V221) -> fun (V222) -> ((((V220('erased'))('erased'))(V221))(V222)) end end end((begin (V212 = fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> case V209 of {'Prelude.Types.Left', V210} -> {'Prelude.Types.Left', V210}; {'Prelude.Types.Right', V211} -> {'Prelude.Types.Right', (V208(V211))} end end end end end), fun (V213) -> fun (V214) -> ((((V212('erased'))('erased'))(V213))(V214)) end end end(fun (V205) -> ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([('un--var'(V203, V191)) | [('Idris.Idris2.Compiler.ES.Doc':'un--softEq'()) | [V205 | [{'Compiler.ES.Doc.Text', <<";"/utf8>>} | []]]]])) end))))(V204)) end), V223 end(V200)) end end end end; _ -> case V3 of {'Compiler.ES.Ast.ConSwitch', V224, V225, V226, V227} -> begin (V248 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V228) -> begin (V229 = ('nested--16087-7402--in--un--alt'(V4, V227, V226, V225, V2, V1, V0, V4, V228))), ((begin (V245 = fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> fun (V244) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V242, V243, V244)) end end end end end), fun (V246) -> fun (V247) -> ((((V245('erased'))('erased'))(V246))(V247)) end end end((begin (V237 = fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> case V234 of {'Prelude.Types.Left', V235} -> {'Prelude.Types.Left', V235}; {'Prelude.Types.Right', V236} -> {'Prelude.Types.Right', (V233(V236))} end end end end end), fun (V238) -> fun (V239) -> ((((V237('erased'))('erased'))(V238))(V239)) end end end(fun (V230) -> ('un--insertBreak'(V4, V230)) end))))(V229)) end end, V226, []))), fun (V249) -> begin (V250 = (V248(V249))), case V250 of {'Prelude.Types.Left', V251} -> {'Prelude.Types.Left', V251}; {'Prelude.Types.Right', V252} -> (begin (V297 = begin (V274 = case V227 of {'Prelude.Types.Nothing'} -> fun (V253) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V254} -> begin (V255 = ('un--stmt'({'Prelude.Types.Just', V4}, V1, V2, V254))), ((begin (V271 = fun (V266) -> fun (V267) -> fun (V268) -> fun (V269) -> fun (V270) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V268, V269, V270)) end end end end end), fun (V272) -> fun (V273) -> ((((V271('erased'))('erased'))(V272))(V273)) end end end((begin (V263 = fun (V257) -> fun (V258) -> fun (V259) -> fun (V260) -> case V260 of {'Prelude.Types.Left', V261} -> {'Prelude.Types.Left', V261}; {'Prelude.Types.Right', V262} -> {'Prelude.Types.Right', (V259(V262))} end end end end end), fun (V264) -> fun (V265) -> ((((V263('erased'))('erased'))(V264))(V265)) end end end(fun (V256) -> {'Prelude.Types.Just', V256} end))))(V255)) end end), fun (V275) -> begin (V276 = (V274(V275))), case V276 of {'Prelude.Types.Left', V277} -> {'Prelude.Types.Left', V277}; {'Prelude.Types.Right', V278} -> (begin (V296 = begin (V284 = begin (V279 = V2), fun (V280) -> begin (V283 = (begin (V281 = V279), fun (V282) -> ('erlang':'get'(V281)) end end(V280))), {'Prelude.Types.Right', V283} end end end), fun (V285) -> begin (V286 = (V284(V285))), case V286 of {'Prelude.Types.Left', V287} -> {'Prelude.Types.Left', V287}; {'Prelude.Types.Right', V288} -> (begin (V295 = fun (V289) -> {'Prelude.Types.Right', ('un--switch'(((begin (V292 = fun (V290) -> fun (V291) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V290, V291)) end end), fun (V293) -> fun (V294) -> ((V292(V293))(V294)) end end end(('un--minimal'(V288, V225))))({'Compiler.ES.Doc.Text', <<".h"/utf8>>})), V252, V278))} end), V295 end(V285)) end end end end), V296 end(V275)) end end end end), V297 end(V249)) end end end end; {'Compiler.ES.Ast.ConstSwitch', V298, V299, V300, V301} -> begin (V322 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V302) -> begin (V303 = ('nested--16087-7665--in--un--alt'(V4, V301, V300, V299, V2, V1, V0, V302))), ((begin (V319 = fun (V314) -> fun (V315) -> fun (V316) -> fun (V317) -> fun (V318) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V316, V317, V318)) end end end end end), fun (V320) -> fun (V321) -> ((((V319('erased'))('erased'))(V320))(V321)) end end end((begin (V311 = fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> case V308 of {'Prelude.Types.Left', V309} -> {'Prelude.Types.Left', V309}; {'Prelude.Types.Right', V310} -> {'Prelude.Types.Right', (V307(V310))} end end end end end), fun (V312) -> fun (V313) -> ((((V311('erased'))('erased'))(V312))(V313)) end end end(fun (V304) -> ('un--insertBreak'(V4, V304)) end))))(V303)) end end, V300, []))), fun (V323) -> begin (V324 = (V322(V323))), case V324 of {'Prelude.Types.Left', V325} -> {'Prelude.Types.Left', V325}; {'Prelude.Types.Right', V326} -> (begin (V361 = begin (V348 = case V301 of {'Prelude.Types.Nothing'} -> fun (V327) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V328} -> begin (V329 = ('un--stmt'({'Prelude.Types.Just', V4}, V1, V2, V328))), ((begin (V345 = fun (V340) -> fun (V341) -> fun (V342) -> fun (V343) -> fun (V344) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V342, V343, V344)) end end end end end), fun (V346) -> fun (V347) -> ((((V345('erased'))('erased'))(V346))(V347)) end end end((begin (V337 = fun (V331) -> fun (V332) -> fun (V333) -> fun (V334) -> case V334 of {'Prelude.Types.Left', V335} -> {'Prelude.Types.Left', V335}; {'Prelude.Types.Right', V336} -> {'Prelude.Types.Right', (V333(V336))} end end end end end), fun (V338) -> fun (V339) -> ((((V337('erased'))('erased'))(V338))(V339)) end end end(fun (V330) -> {'Prelude.Types.Just', V330} end))))(V329)) end end), fun (V349) -> begin (V350 = (V348(V349))), case V350 of {'Prelude.Types.Left', V351} -> {'Prelude.Types.Left', V351}; {'Prelude.Types.Right', V352} -> (begin (V360 = begin (V353 = ('un--exp'(V1, V2, V299))), fun (V354) -> begin (V355 = (V353(V354))), case V355 of {'Prelude.Types.Left', V356} -> {'Prelude.Types.Left', V356}; {'Prelude.Types.Right', V357} -> (begin (V359 = fun (V358) -> {'Prelude.Types.Right', ('un--switch'(V357, V326, V352))} end), V359 end(V354)) end end end end), V360 end(V349)) end end end end), V361 end(V323)) end end end end; {'Compiler.ES.Ast.Error', V362} -> fun (V363) -> {'Prelude.Types.Right', ((begin (V366 = fun (V364) -> fun (V365) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V364, V365)) end end), fun (V367) -> fun (V368) -> ((V366(V367))(V368)) end end end(('un--jsCrashExp'(('un--jsStringDoc'(V362))))))({'Compiler.ES.Doc.Text', <<";"/utf8>>}))} end; _ -> case V3 of {'Compiler.ES.Ast.Block', V369, V370} -> begin (V372 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V371) -> ('un--stmt'({'Prelude.Types.Nothing'}, V1, V2, V371)) end, ('Idris.Idris2.Data.List1':'un--forget'(V369)), []))), fun (V373) -> begin (V374 = (V372(V373))), case V374 of {'Prelude.Types.Left', V375} -> {'Prelude.Types.Left', V375}; {'Prelude.Types.Right', V376} -> (begin (V384 = begin (V377 = ('un--stmt'(V0, V1, V2, V370))), fun (V378) -> begin (V379 = (V377(V378))), case V379 of {'Prelude.Types.Left', V380} -> {'Prelude.Types.Left', V380}; {'Prelude.Types.Right', V381} -> (begin (V383 = fun (V382) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V376, [V381 | []]))))} end), V383 end(V378)) end end end end), V384 end(V373)) end end end end end end end; _ -> case V3 of {'Compiler.ES.Ast.ConSwitch', V385, V386, V387, V388} -> begin (V409 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V389) -> begin (V390 = ('nested--16087-7402--in--un--alt'(V4, V388, V387, V386, V2, V1, V0, V4, V389))), ((begin (V406 = fun (V401) -> fun (V402) -> fun (V403) -> fun (V404) -> fun (V405) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V403, V404, V405)) end end end end end), fun (V407) -> fun (V408) -> ((((V406('erased'))('erased'))(V407))(V408)) end end end((begin (V398 = fun (V392) -> fun (V393) -> fun (V394) -> fun (V395) -> case V395 of {'Prelude.Types.Left', V396} -> {'Prelude.Types.Left', V396}; {'Prelude.Types.Right', V397} -> {'Prelude.Types.Right', (V394(V397))} end end end end end), fun (V399) -> fun (V400) -> ((((V398('erased'))('erased'))(V399))(V400)) end end end(fun (V391) -> ('un--insertBreak'(V4, V391)) end))))(V390)) end end, V387, []))), fun (V410) -> begin (V411 = (V409(V410))), case V411 of {'Prelude.Types.Left', V412} -> {'Prelude.Types.Left', V412}; {'Prelude.Types.Right', V413} -> (begin (V458 = begin (V435 = case V388 of {'Prelude.Types.Nothing'} -> fun (V414) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V415} -> begin (V416 = ('un--stmt'({'Prelude.Types.Just', V4}, V1, V2, V415))), ((begin (V432 = fun (V427) -> fun (V428) -> fun (V429) -> fun (V430) -> fun (V431) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V429, V430, V431)) end end end end end), fun (V433) -> fun (V434) -> ((((V432('erased'))('erased'))(V433))(V434)) end end end((begin (V424 = fun (V418) -> fun (V419) -> fun (V420) -> fun (V421) -> case V421 of {'Prelude.Types.Left', V422} -> {'Prelude.Types.Left', V422}; {'Prelude.Types.Right', V423} -> {'Prelude.Types.Right', (V420(V423))} end end end end end), fun (V425) -> fun (V426) -> ((((V424('erased'))('erased'))(V425))(V426)) end end end(fun (V417) -> {'Prelude.Types.Just', V417} end))))(V416)) end end), fun (V436) -> begin (V437 = (V435(V436))), case V437 of {'Prelude.Types.Left', V438} -> {'Prelude.Types.Left', V438}; {'Prelude.Types.Right', V439} -> (begin (V457 = begin (V445 = begin (V440 = V2), fun (V441) -> begin (V444 = (begin (V442 = V440), fun (V443) -> ('erlang':'get'(V442)) end end(V441))), {'Prelude.Types.Right', V444} end end end), fun (V446) -> begin (V447 = (V445(V446))), case V447 of {'Prelude.Types.Left', V448} -> {'Prelude.Types.Left', V448}; {'Prelude.Types.Right', V449} -> (begin (V456 = fun (V450) -> {'Prelude.Types.Right', ('un--switch'(((begin (V453 = fun (V451) -> fun (V452) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V451, V452)) end end), fun (V454) -> fun (V455) -> ((V453(V454))(V455)) end end end(('un--minimal'(V449, V386))))({'Compiler.ES.Doc.Text', <<".h"/utf8>>})), V413, V439))} end), V456 end(V446)) end end end end), V457 end(V436)) end end end end), V458 end(V410)) end end end end; {'Compiler.ES.Ast.ConstSwitch', V459, V460, V461, V462} -> begin (V483 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V463) -> begin (V464 = ('nested--16087-7665--in--un--alt'(V4, V462, V461, V460, V2, V1, V0, V463))), ((begin (V480 = fun (V475) -> fun (V476) -> fun (V477) -> fun (V478) -> fun (V479) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V477, V478, V479)) end end end end end), fun (V481) -> fun (V482) -> ((((V480('erased'))('erased'))(V481))(V482)) end end end((begin (V472 = fun (V466) -> fun (V467) -> fun (V468) -> fun (V469) -> case V469 of {'Prelude.Types.Left', V470} -> {'Prelude.Types.Left', V470}; {'Prelude.Types.Right', V471} -> {'Prelude.Types.Right', (V468(V471))} end end end end end), fun (V473) -> fun (V474) -> ((((V472('erased'))('erased'))(V473))(V474)) end end end(fun (V465) -> ('un--insertBreak'(V4, V465)) end))))(V464)) end end, V461, []))), fun (V484) -> begin (V485 = (V483(V484))), case V485 of {'Prelude.Types.Left', V486} -> {'Prelude.Types.Left', V486}; {'Prelude.Types.Right', V487} -> (begin (V522 = begin (V509 = case V462 of {'Prelude.Types.Nothing'} -> fun (V488) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V489} -> begin (V490 = ('un--stmt'({'Prelude.Types.Just', V4}, V1, V2, V489))), ((begin (V506 = fun (V501) -> fun (V502) -> fun (V503) -> fun (V504) -> fun (V505) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V503, V504, V505)) end end end end end), fun (V507) -> fun (V508) -> ((((V506('erased'))('erased'))(V507))(V508)) end end end((begin (V498 = fun (V492) -> fun (V493) -> fun (V494) -> fun (V495) -> case V495 of {'Prelude.Types.Left', V496} -> {'Prelude.Types.Left', V496}; {'Prelude.Types.Right', V497} -> {'Prelude.Types.Right', (V494(V497))} end end end end end), fun (V499) -> fun (V500) -> ((((V498('erased'))('erased'))(V499))(V500)) end end end(fun (V491) -> {'Prelude.Types.Just', V491} end))))(V490)) end end), fun (V510) -> begin (V511 = (V509(V510))), case V511 of {'Prelude.Types.Left', V512} -> {'Prelude.Types.Left', V512}; {'Prelude.Types.Right', V513} -> (begin (V521 = begin (V514 = ('un--exp'(V1, V2, V460))), fun (V515) -> begin (V516 = (V514(V515))), case V516 of {'Prelude.Types.Left', V517} -> {'Prelude.Types.Left', V517}; {'Prelude.Types.Right', V518} -> (begin (V520 = fun (V519) -> {'Prelude.Types.Right', ('un--switch'(V518, V487, V513))} end), V520 end(V515)) end end end end), V521 end(V510)) end end end end), V522 end(V484)) end end end end; {'Compiler.ES.Ast.Error', V523} -> fun (V524) -> {'Prelude.Types.Right', ((begin (V527 = fun (V525) -> fun (V526) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V525, V526)) end end), fun (V528) -> fun (V529) -> ((V527(V528))(V529)) end end end(('un--jsCrashExp'(('un--jsStringDoc'(V523))))))({'Compiler.ES.Doc.Text', <<";"/utf8>>}))} end; _ -> case V3 of {'Compiler.ES.Ast.Block', V530, V531} -> begin (V533 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V532) -> ('un--stmt'({'Prelude.Types.Nothing'}, V1, V2, V532)) end, ('Idris.Idris2.Data.List1':'un--forget'(V530)), []))), fun (V534) -> begin (V535 = (V533(V534))), case V535 of {'Prelude.Types.Left', V536} -> {'Prelude.Types.Left', V536}; {'Prelude.Types.Right', V537} -> (begin (V545 = begin (V538 = ('un--stmt'(V0, V1, V2, V531))), fun (V539) -> begin (V540 = (V538(V539))), case V540 of {'Prelude.Types.Left', V541} -> {'Prelude.Types.Left', V541}; {'Prelude.Types.Right', V542} -> (begin (V544 = fun (V543) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V537, [V542 | []]))))} end), V544 end(V539)) end end end end), V545 end(V534)) end end end end end end end; {'Prelude.Types.Nothing'} -> case V3 of {'Compiler.ES.Ast.Const', V546, V547} -> begin (V553 = begin (V548 = V2), fun (V549) -> begin (V552 = (begin (V550 = V548), fun (V551) -> ('erlang':'get'(V550)) end end(V549))), {'Prelude.Types.Right', V552} end end end), fun (V554) -> begin (V555 = (V553(V554))), case V555 of {'Prelude.Types.Left', V556} -> {'Prelude.Types.Left', V556}; {'Prelude.Types.Right', V557} -> (begin (V577 = begin (V558 = ('un--exp'(V1, V2, V547))), ((begin (V574 = fun (V569) -> fun (V570) -> fun (V571) -> fun (V572) -> fun (V573) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V571, V572, V573)) end end end end end), fun (V575) -> fun (V576) -> ((((V574('erased'))('erased'))(V575))(V576)) end end end((begin (V566 = fun (V560) -> fun (V561) -> fun (V562) -> fun (V563) -> case V563 of {'Prelude.Types.Left', V564} -> {'Prelude.Types.Left', V564}; {'Prelude.Types.Right', V565} -> {'Prelude.Types.Right', (V562(V565))} end end end end end), fun (V567) -> fun (V568) -> ((((V566('erased'))('erased'))(V567))(V568)) end end end(fun (V559) -> ('un--constant'(('un--var'(V557, V546)), V559)) end))))(V558)) end), V577 end(V554)) end end end end; {'Compiler.ES.Ast.Declare', V578, V579} -> begin (V585 = begin (V580 = V2), fun (V581) -> begin (V584 = (begin (V582 = V580), fun (V583) -> ('erlang':'get'(V582)) end end(V581))), {'Prelude.Types.Right', V584} end end end), fun (V586) -> begin (V587 = (V585(V586))), case V587 of {'Prelude.Types.Left', V588} -> {'Prelude.Types.Left', V588}; {'Prelude.Types.Right', V589} -> (begin (V614 = begin (V590 = ('un--stmt'({'Prelude.Types.Just', {'Compiler.ES.Ast.ErrorWithout', V578}}, V1, V2, V579))), ((begin (V611 = fun (V606) -> fun (V607) -> fun (V608) -> fun (V609) -> fun (V610) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V608, V609, V610)) end end end end end), fun (V612) -> fun (V613) -> ((((V611('erased'))('erased'))(V612))(V613)) end end end((begin (V603 = fun (V597) -> fun (V598) -> fun (V599) -> fun (V600) -> case V600 of {'Prelude.Types.Left', V601} -> {'Prelude.Types.Left', V601}; {'Prelude.Types.Right', V602} -> {'Prelude.Types.Right', (V599(V602))} end end end end end), fun (V604) -> fun (V605) -> ((((V603('erased'))('erased'))(V604))(V605)) end end end(fun (V591) -> ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'([('Idris.Idris2.Compiler.ES.Doc':'un--<++>'({'Compiler.ES.Doc.Text', <<"let"/utf8>>}, ((begin (V594 = fun (V592) -> fun (V593) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V592, V593)) end end), fun (V595) -> fun (V596) -> ((V594(V595))(V596)) end end end(('un--var'(V589, V578))))({'Compiler.ES.Doc.Text', <<";"/utf8>>})))) | [V591 | []]])) end))))(V590)) end), V614 end(V586)) end end end end; _ -> case V3 of {'Compiler.ES.Ast.Block', V615, V616} -> begin (V618 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V617) -> ('un--stmt'({'Prelude.Types.Nothing'}, V1, V2, V617)) end, ('Idris.Idris2.Data.List1':'un--forget'(V615)), []))), fun (V619) -> begin (V620 = (V618(V619))), case V620 of {'Prelude.Types.Left', V621} -> {'Prelude.Types.Left', V621}; {'Prelude.Types.Right', V622} -> (begin (V630 = begin (V623 = ('un--stmt'(V0, V1, V2, V616))), fun (V624) -> begin (V625 = (V623(V624))), case V625 of {'Prelude.Types.Left', V626} -> {'Prelude.Types.Left', V626}; {'Prelude.Types.Right', V627} -> (begin (V629 = fun (V628) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V622, [V627 | []]))))} end), V629 end(V624)) end end end end), V630 end(V619)) end end end end end end; _ -> case V3 of {'Compiler.ES.Ast.Block', V631, V632} -> begin (V634 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V633) -> ('un--stmt'({'Prelude.Types.Nothing'}, V1, V2, V633)) end, ('Idris.Idris2.Data.List1':'un--forget'(V631)), []))), fun (V635) -> begin (V636 = (V634(V635))), case V636 of {'Prelude.Types.Left', V637} -> {'Prelude.Types.Left', V637}; {'Prelude.Types.Right', V638} -> (begin (V646 = begin (V639 = ('un--stmt'(V0, V1, V2, V632))), fun (V640) -> begin (V641 = (V639(V640))), case V641 of {'Prelude.Types.Left', V642} -> {'Prelude.Types.Left', V642}; {'Prelude.Types.Right', V643} -> (begin (V645 = fun (V644) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V638, [V643 | []]))))} end), V645 end(V640)) end end end end), V646 end(V635)) end end end end end end.
'un--searchForeign'(V0, V1) -> begin (V10 = ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('un--readCCPart'(V2)) end))(V1))), begin (V19 = {'Prelude.Types.Left', ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> ('Idris.Idris2.Builtin':'un--fst'(V11)) end))(V10))}), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V19 end, fun () -> fun (V20) -> {'Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'(V20))} end end, ('Idris.Idris2.Data.List':'un--find'(fun (V21) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V33)) end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V37, V38, V39, V40)) end end end end end end end, fun (V41) -> fun (V42) -> V42 end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V45, V46, V47)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V50, V51)) end end}, ('Idris.Idris2.Builtin':'un--fst'(V21)), V0)) end, V10)))) end end.
'un--readCCPart'(V0) -> ('un--breakDrop1'($:, V0)).
'un--printDoc'(V0, V1) -> case V0 of 0 -> ('Idris.Idris2.Compiler.ES.Doc':'un--pretty'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V1, {'Compiler.ES.Doc.LineBreak'})))); 1 -> ('Idris.Idris2.Compiler.ES.Doc':'un--compact'(V1)); 2 -> ('Idris.Idris2.Compiler.ES.Doc':'un--compact'(V1)) end.
'un--minimal'(V0, V1) -> case V1 of {'Compiler.ES.Ast.MVar', V2} -> ('un--var'(V0, V2)); {'Compiler.ES.Ast.MProjection', V3, V4} -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--minimal'(V0, V4)), {'Compiler.ES.Doc.Text', <<".a"/utf8>>})), {'Compiler.ES.Doc.Text', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3))})) end.
'un--makeForeign'(V0, V1, V2, V3, V4) -> begin (V35 = begin (V10 = begin (V5 = V2), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V34 = begin (V15 = ('Idris.Idris2.Compiler.ES.State':'un--getOrRegisterRef'(V1, V3))), ((begin (V31 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V28, V29, V30)) end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end((begin (V23 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> {'Prelude.Types.Right', (V19(V22))} end end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V16) -> ('un--var'(V14, V16)) end))))(V15)) end), V34 end(V11)) end end end end), fun (V36) -> begin (V37 = (V35(V36))), case V37 of {'Prelude.Types.Left', V38} -> {'Prelude.Types.Left', V38}; {'Prelude.Types.Right', V39} -> (begin (V54 = case ('un--readCCPart'(V4)) of {'Builtin.MkPair', V40, V41} -> case V40 of <<"lambda"/utf8>> -> fun (V42) -> {'Prelude.Types.Right', ('un--constant'(V39, ('Idris.Idris2.Compiler.ES.Doc':'un--paren'({'Compiler.ES.Doc.Text', V41}))))} end; <<"support"/utf8>> -> ('case--case block in case block in makeForeign-5805'(V4, V3, V2, V1, V0, V39, V41, <<"support"/utf8>>, ('un--breakDrop1'($,, V41)))); <<"stringIterator"/utf8>> -> fun (V43) -> case V41 of <<"new"/utf8>> -> {'Prelude.Types.Right', ('un--constant'(V39, (begin (V45 = fun (V44) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(V44)) end), fun (V46) -> (V45(V46)) end end(<<"__prim_stringIteratorNew"/utf8>>))))}; <<"next"/utf8>> -> {'Prelude.Types.Right', ('un--constant'(V39, (begin (V48 = fun (V47) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(V47)) end), fun (V49) -> (V48(V49)) end end(<<"__prim_stringIteratorNext"/utf8>>))))}; <<"toString"/utf8>> -> {'Prelude.Types.Right', ('un--constant'(V39, (begin (V51 = fun (V50) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(V50)) end), fun (V52) -> (V51(V52)) end end(<<"__prim_stringIteratorToString"/utf8>>))))}; _ -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"Invalid string iterator function: "/utf8>> | [V41 | [<<". "/utf8>> | [<<"Supported functions are: "/utf8>> | [('un--stringList'([<<"new"/utf8>> | [<<"next"/utf8>> | [<<"toString"/utf8>> | []]]])) | [<<"."/utf8>> | []]]]]]], V43)) end end; _ -> fun (V53) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"Invalid foreign type : "/utf8>> | [V40 | [<<". "/utf8>> | [<<"Supported types are: "/utf8>> | [('un--stringList'([<<"lambda"/utf8>> | [<<"support"/utf8>> | [<<"stringIterator"/utf8>> | []]]])) | []]]]]], V53)) end end end), V54 end(V36)) end end end end.
'un--mainExpr'() -> {'Core.Name.MN', <<"__mainExpression"/utf8>>, 0}.
'un--lambdaArgs'(V0, V1) -> case V1 of [] -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"()"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--lambdaArrow'()))); _ -> ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'(((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--var'(V0, V2)), ('Idris.Idris2.Compiler.ES.Doc':'un--lambdaArrow'()))) end))(V1)))) end.
'un--keywordSafe'(V0) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> V21 end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V29, V30)) end end}, V0, ('un--jsReservedNames'()))) of 1 -> <<V0/binary, <<"$"/utf8>>/binary>>; 0 -> V0 end.
'un--jsUserName'(V0) -> case V0 of {'Core.Name.Basic', V1} -> ('un--keywordSafe'(('un--jsIdent'(V1)))); {'Core.Name.Field', V2} -> <<<<"rf__"/utf8>>/binary, ('un--jsIdent'(V2))/binary>>; {'Core.Name.Underscore'} -> ('un--keywordSafe'(('un--jsIdent'(<<"_"/utf8>>)))) end.
'un--jsStringDoc'(V0) -> {'Compiler.ES.Doc.Text', ('un--jsString'(V0))}.
'un--jsString'(V0) -> <<<<"\x{27}"/utf8>>/binary, <<('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> <<V1/binary, V2/binary>> end end, <<""/utf8>>}, fun (V3) -> ('nested--11345-2521--in--un--okchar'(V0, V3)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0))))/binary, <<"\x{27}"/utf8>>/binary>>/binary>>.
'un--jsReservedNames'() -> [<<"await"/utf8>> | [<<"break"/utf8>> | [<<"case"/utf8>> | [<<"catch"/utf8>> | [<<"class"/utf8>> | [<<"const"/utf8>> | [<<"continue"/utf8>> | [<<"debugger"/utf8>> | [<<"default"/utf8>> | [<<"delete"/utf8>> | [<<"do"/utf8>> | [<<"else"/utf8>> | [<<"enum"/utf8>> | [<<"export"/utf8>> | [<<"extends"/utf8>> | [<<"false"/utf8>> | [<<"finally"/utf8>> | [<<"for"/utf8>> | [<<"function"/utf8>> | [<<"if"/utf8>> | [<<"implements"/utf8>> | [<<"import"/utf8>> | [<<"in"/utf8>> | [<<"instanceof"/utf8>> | [<<"interface"/utf8>> | [<<"let"/utf8>> | [<<"new"/utf8>> | [<<"null"/utf8>> | [<<"package"/utf8>> | [<<"private"/utf8>> | [<<"protected"/utf8>> | [<<"public"/utf8>> | [<<"return"/utf8>> | [<<"static"/utf8>> | [<<"super"/utf8>> | [<<"switch"/utf8>> | [<<"this"/utf8>> | [<<"throw"/utf8>> | [<<"true"/utf8>> | [<<"try"/utf8>> | [<<"typeof"/utf8>> | [<<"var"/utf8>> | [<<"void"/utf8>> | [<<"while"/utf8>> | [<<"with"/utf8>> | [<<"yield"/utf8>> | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]].
'un--jsPrimType'(V0) -> <<"#t"/utf8>>.
'un--jsPrim'(V0, V1, V2) -> case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V1)) of {'Core.Name.UN', V3} -> case V3 of {'Core.Name.Basic', V4} -> case V4 of <<"prim__newIORef"/utf8>> -> case V2 of [E0 | E1] -> (fun (V5, V6) -> case V6 of [E2 | E3] -> (fun (V7, V8) -> fun (V9) -> case V8 of [E4 | E5] -> (fun (V10, V11) -> case V11 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Compiler.ES.Doc.Text', <<"({value:"/utf8>>} | [V7 | [{'Compiler.ES.Doc.Text', <<"})"/utf8>>} | []]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V9)) end end(E4, E5)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V9)) end end end(E2, E3)); _ -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V12)) end end end(E0, E1)); _ -> fun (V13) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V13)) end end; <<"prim__readIORef"/utf8>> -> case V2 of [E6 | E7] -> (fun (V14, V15) -> case V15 of [E8 | E9] -> (fun (V16, V17) -> fun (V18) -> case V17 of [E10 | E11] -> (fun (V19, V20) -> case V20 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Compiler.ES.Doc.Text', <<"("/utf8>>} | [V16 | [{'Compiler.ES.Doc.Text', <<".value)"/utf8>>} | []]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V18)) end end(E10, E11)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V18)) end end end(E8, E9)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V21)) end end end(E6, E7)); _ -> fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V22)) end end; <<"prim__writeIORef"/utf8>> -> case V2 of [E12 | E13] -> (fun (V23, V24) -> case V24 of [E14 | E15] -> (fun (V25, V26) -> case V26 of [E16 | E17] -> (fun (V27, V28) -> fun (V29) -> case V28 of [E18 | E19] -> (fun (V30, V31) -> case V31 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Compiler.ES.Doc.Text', <<"("/utf8>>} | [V25 | [{'Compiler.ES.Doc.Text', <<".value="/utf8>>} | [V27 | [{'Compiler.ES.Doc.Text', <<")"/utf8>>} | []]]]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V29)) end end(E18, E19)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V29)) end end end(E16, E17)); _ -> fun (V32) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V32)) end end end(E14, E15)); _ -> fun (V33) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V33)) end end end(E12, E13)); _ -> fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V34)) end end; <<"prim__newArray"/utf8>> -> case V2 of [E20 | E21] -> (fun (V35, V36) -> case V36 of [E22 | E23] -> (fun (V37, V38) -> case V38 of [E24 | E25] -> (fun (V39, V40) -> fun (V41) -> case V40 of [E26 | E27] -> (fun (V42, V43) -> case V43 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Compiler.ES.Doc.Text', <<"(Array("/utf8>>} | [V37 | [{'Compiler.ES.Doc.Text', <<").fill("/utf8>>} | [V39 | [{'Compiler.ES.Doc.Text', <<"))"/utf8>>} | []]]]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V41)) end end(E26, E27)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V41)) end end end(E24, E25)); _ -> fun (V44) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V44)) end end end(E22, E23)); _ -> fun (V45) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V45)) end end end(E20, E21)); _ -> fun (V46) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V46)) end end; <<"prim__arrayGet"/utf8>> -> case V2 of [E28 | E29] -> (fun (V47, V48) -> case V48 of [E30 | E31] -> (fun (V49, V50) -> case V50 of [E32 | E33] -> (fun (V51, V52) -> fun (V53) -> case V52 of [E34 | E35] -> (fun (V54, V55) -> case V55 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Compiler.ES.Doc.Text', <<"("/utf8>>} | [V49 | [{'Compiler.ES.Doc.Text', <<"["/utf8>>} | [V51 | [{'Compiler.ES.Doc.Text', <<"])"/utf8>>} | []]]]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V53)) end end(E34, E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V53)) end end end(E32, E33)); _ -> fun (V56) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V56)) end end end(E30, E31)); _ -> fun (V57) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V57)) end end end(E28, E29)); _ -> fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V58)) end end; <<"prim__arraySet"/utf8>> -> case V2 of [E36 | E37] -> (fun (V59, V60) -> case V60 of [E38 | E39] -> (fun (V61, V62) -> case V62 of [E40 | E41] -> (fun (V63, V64) -> case V64 of [E42 | E43] -> (fun (V65, V66) -> fun (V67) -> case V66 of [E44 | E45] -> (fun (V68, V69) -> case V69 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Compiler.ES.Doc.Text', <<"("/utf8>>} | [V61 | [{'Compiler.ES.Doc.Text', <<"["/utf8>>} | [V63 | [{'Compiler.ES.Doc.Text', <<"]="/utf8>>} | [V65 | [{'Compiler.ES.Doc.Text', <<")"/utf8>>} | []]]]]]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V67)) end end(E44, E45)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V67)) end end end(E42, E43)); _ -> fun (V70) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V70)) end end end(E40, E41)); _ -> fun (V71) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V71)) end end end(E38, E39)); _ -> fun (V72) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V72)) end end end(E36, E37)); _ -> fun (V73) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V73)) end end; <<"void"/utf8>> -> case V2 of [E46 | E47] -> (fun (V74, V75) -> fun (V76) -> case V75 of [E48 | E49] -> (fun (V77, V78) -> case V78 of [] -> {'Prelude.Types.Right', ('un--jsCrashExp'(('un--jsStringDoc'(<<"Error: Executed \x{27}void\x{27}"/utf8>>))))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V76)) end end(E48, E49)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V76)) end end end(E46, E47)); _ -> fun (V79) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V79)) end end; <<"prim__void"/utf8>> -> case V2 of [E50 | E51] -> (fun (V80, V81) -> fun (V82) -> case V81 of [E52 | E53] -> (fun (V83, V84) -> case V84 of [] -> {'Prelude.Types.Right', ('un--jsCrashExp'(('un--jsStringDoc'(<<"Error: Executed \x{27}void\x{27}"/utf8>>))))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V82)) end end(E52, E53)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V82)) end end end(E50, E51)); _ -> fun (V85) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V85)) end end; <<"prim__codegen"/utf8>> -> case V2 of [] -> begin (V120 = begin (V91 = begin (V86 = V0), fun (V87) -> begin (V90 = (begin (V88 = V86), fun (V89) -> ('erlang':'get'(V88)) end end(V87))), {'Prelude.Types.Right', V90} end end end), ((begin (V117 = fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V114, V115, V116)) end end end end end), fun (V118) -> fun (V119) -> ((((V117('erased'))('erased'))(V118))(V119)) end end end((begin (V109 = fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> {'Prelude.Types.Right', (V105(V108))} end end end end end), fun (V110) -> fun (V111) -> ((((V109('erased'))('erased'))(V110))(V111)) end end end(fun (V92) -> case V92 of {'Compiler.ES.State.MkESSt', V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} -> V101 end end))))(V91)) end), fun (V121) -> begin (V122 = (V120(V121))), case V122 of {'Prelude.Types.Left', V123} -> {'Prelude.Types.Left', V123}; {'Prelude.Types.Right', V124} -> (begin (V128 = fun (V125) -> case V124 of [E54 | E55] -> (fun (V126, V127) -> {'Prelude.Types.Right', {'Compiler.ES.Doc.Text', ('un--jsString'(V126))}} end(E54, E55)); _ -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"\x{22}javascript\x{22}"/utf8>>))} end end), V128 end(V121)) end end end end; _ -> fun (V129) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V129)) end end; <<"prim__os"/utf8>> -> case V2 of [] -> begin (V164 = begin (V135 = begin (V130 = V0), fun (V131) -> begin (V134 = (begin (V132 = V130), fun (V133) -> ('erlang':'get'(V132)) end end(V131))), {'Prelude.Types.Right', V134} end end end), ((begin (V161 = fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V158, V159, V160)) end end end end end), fun (V162) -> fun (V163) -> ((((V161('erased'))('erased'))(V162))(V163)) end end end((begin (V153 = fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> case V150 of {'Prelude.Types.Left', V151} -> {'Prelude.Types.Left', V151}; {'Prelude.Types.Right', V152} -> {'Prelude.Types.Right', (V149(V152))} end end end end end), fun (V154) -> fun (V155) -> ((((V153('erased'))('erased'))(V154))(V155)) end end end(fun (V136) -> case V136 of {'Compiler.ES.State.MkESSt', V137, V138, V139, V140, V141, V142, V143, V144, V145, V146} -> V145 end end))))(V135)) end), fun (V165) -> begin (V166 = (V164(V165))), case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> (begin (V179 = case ('un--searchForeign'(V168, [<<"node"/utf8>> | []])) of {'Prelude.Types.Right', V169} -> begin (V170 = ('Idris.Idris2.Compiler.ES.State':'un--addToPreamble'(V0, <<"prim__os"/utf8>>, <<"const _sysos = ((o => o === \x{27}linux\x{27}?\x{27}unix\x{27}:o===\x{27}win32\x{27}?\x{27}windows\x{27}:o)(require(\x{27}os\x{27}).platform()));"/utf8>>))), fun (V171) -> begin (V172 = (V170(V171))), case V172 of {'Prelude.Types.Left', V173} -> {'Prelude.Types.Left', V173}; {'Prelude.Types.Right', V174} -> (begin (V176 = fun (V175) -> {'Prelude.Types.Right', {'Compiler.ES.Doc.Text', ('un--esName'(<<"sysos"/utf8>>))}} end), V176 end(V171)) end end end end; {'Prelude.Types.Left', V177} -> fun (V178) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"prim not implemented: prim__os"/utf8>>}, V178)) end end), V179 end(V165)) end end end end; _ -> fun (V180) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V180)) end end; _ -> fun (V181) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V181)) end end; _ -> fun (V182) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V182)) end end; _ -> fun (V183) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"prim not implemented: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>>}, V183)) end end.
'un--jsOp'(V0, V1) -> case V0 of {'Core.TT.Add', V2} -> case V1 of {'Data.Vect.::', V3, V4} -> fun (V5) -> case V4 of {'Data.Vect.::', V6, V7} -> case V7 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V2)), <<"+"/utf8>>, <<"add"/utf8>>))(V3))(V6))} end end end end; {'Core.TT.Sub', V8} -> case V1 of {'Data.Vect.::', V9, V10} -> fun (V11) -> case V10 of {'Data.Vect.::', V12, V13} -> case V13 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V8)), <<"-"/utf8>>, <<"sub"/utf8>>))(V9))(V12))} end end end end; {'Core.TT.Mul', V14} -> case V1 of {'Data.Vect.::', V15, V16} -> fun (V17) -> case V16 of {'Data.Vect.::', V18, V19} -> case V19 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V14)), <<"*"/utf8>>, <<"mul"/utf8>>))(V15))(V18))} end end end end; {'Core.TT.Div', V20} -> case V20 of 12 -> case V1 of {'Data.Vect.::', V21, V22} -> case V22 of {'Data.Vect.::', V23, V24} -> case V24 of {'Data.Vect.Nil'} -> fun (V25) -> {'Prelude.Types.Right', ('un--binOp'(<<"/"/utf8>>, V21, V23))} end; _ -> case V1 of {'Data.Vect.::', V26, V27} -> fun (V28) -> case V27 of {'Data.Vect.::', V29, V30} -> case V30 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V20)), <<""/utf8>>, <<"div"/utf8>>))(V26))(V29))} end end end end end; _ -> case V1 of {'Data.Vect.::', V31, V32} -> fun (V33) -> case V32 of {'Data.Vect.::', V34, V35} -> case V35 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V20)), <<""/utf8>>, <<"div"/utf8>>))(V31))(V34))} end end end end end; _ -> case V1 of {'Data.Vect.::', V36, V37} -> fun (V38) -> case V37 of {'Data.Vect.::', V39, V40} -> case V40 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V20)), <<""/utf8>>, <<"div"/utf8>>))(V36))(V39))} end end end end end; _ -> case V1 of {'Data.Vect.::', V41, V42} -> fun (V43) -> case V42 of {'Data.Vect.::', V44, V45} -> case V45 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V20)), <<""/utf8>>, <<"div"/utf8>>))(V41))(V44))} end end end end end; {'Core.TT.Mod', V46} -> case V1 of {'Data.Vect.::', V47, V48} -> fun (V49) -> case V48 of {'Data.Vect.::', V50, V51} -> case V51 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--jsMod'(V46, V47, V50))} end end end end; {'Core.TT.Neg', V52} -> fun (V53) -> case V1 of {'Data.Vect.::', V54, V55} -> case V55 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((begin (V66 = fun (V64) -> fun (V65) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V64, V65)) end end), fun (V67) -> fun (V68) -> ((V66(V67))(V68)) end end end(((begin (V61 = fun (V59) -> fun (V60) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V59, V60)) end end), fun (V62) -> fun (V63) -> ((V61(V62))(V63)) end end end((begin (V57 = fun (V56) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(V56)) end), fun (V58) -> (V57(V58)) end end(<<"(-("/utf8>>))))(V54))))({'Compiler.ES.Doc.Text', <<"))"/utf8>>}))} end end end; {'Core.TT.ShiftL', V69} -> case V69 of 3 -> case V1 of {'Data.Vect.::', V70, V71} -> case V71 of {'Data.Vect.::', V72, V73} -> case V73 of {'Data.Vect.Nil'} -> fun (V74) -> {'Prelude.Types.Right', ('un--binOp'(<<"<<"/utf8>>, V70, V72))} end; _ -> case V1 of {'Data.Vect.::', V75, V76} -> fun (V77) -> case V76 of {'Data.Vect.::', V78, V79} -> case V79 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V69)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V75))(V78))} end end end end end; _ -> case V1 of {'Data.Vect.::', V80, V81} -> fun (V82) -> case V81 of {'Data.Vect.::', V83, V84} -> case V84 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V69)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V80))(V83))} end end end end end; _ -> case V1 of {'Data.Vect.::', V85, V86} -> fun (V87) -> case V86 of {'Data.Vect.::', V88, V89} -> case V89 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V69)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V85))(V88))} end end end end end; 0 -> case V1 of {'Data.Vect.::', V90, V91} -> case V91 of {'Data.Vect.::', V92, V93} -> case V93 of {'Data.Vect.Nil'} -> fun (V94) -> {'Prelude.Types.Right', ('un--binOp'(<<"<<"/utf8>>, V90, V92))} end; _ -> case V1 of {'Data.Vect.::', V95, V96} -> fun (V97) -> case V96 of {'Data.Vect.::', V98, V99} -> case V99 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V69)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V95))(V98))} end end end end end; _ -> case V1 of {'Data.Vect.::', V100, V101} -> fun (V102) -> case V101 of {'Data.Vect.::', V103, V104} -> case V104 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V69)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V100))(V103))} end end end end end; _ -> case V1 of {'Data.Vect.::', V105, V106} -> fun (V107) -> case V106 of {'Data.Vect.::', V108, V109} -> case V109 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V69)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V105))(V108))} end end end end end; _ -> case V1 of {'Data.Vect.::', V110, V111} -> fun (V112) -> case V111 of {'Data.Vect.::', V113, V114} -> case V114 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V69)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V110))(V113))} end end end end end; {'Core.TT.ShiftR', V115} -> case V115 of 3 -> case V1 of {'Data.Vect.::', V116, V117} -> case V117 of {'Data.Vect.::', V118, V119} -> case V119 of {'Data.Vect.Nil'} -> fun (V120) -> {'Prelude.Types.Right', ('un--binOp'(<<">>"/utf8>>, V116, V118))} end; _ -> case V1 of {'Data.Vect.::', V121, V122} -> fun (V123) -> case V122 of {'Data.Vect.::', V124, V125} -> case V125 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V115)), <<">>"/utf8>>, <<"shr"/utf8>>))(V121))(V124))} end end end end end; _ -> case V1 of {'Data.Vect.::', V126, V127} -> fun (V128) -> case V127 of {'Data.Vect.::', V129, V130} -> case V130 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V115)), <<">>"/utf8>>, <<"shr"/utf8>>))(V126))(V129))} end end end end end; _ -> case V1 of {'Data.Vect.::', V131, V132} -> fun (V133) -> case V132 of {'Data.Vect.::', V134, V135} -> case V135 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V115)), <<">>"/utf8>>, <<"shr"/utf8>>))(V131))(V134))} end end end end end; 0 -> case V1 of {'Data.Vect.::', V136, V137} -> case V137 of {'Data.Vect.::', V138, V139} -> case V139 of {'Data.Vect.Nil'} -> fun (V140) -> {'Prelude.Types.Right', ('un--binOp'(<<">>"/utf8>>, V136, V138))} end; _ -> case V1 of {'Data.Vect.::', V141, V142} -> fun (V143) -> case V142 of {'Data.Vect.::', V144, V145} -> case V145 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V115)), <<">>"/utf8>>, <<"shr"/utf8>>))(V141))(V144))} end end end end end; _ -> case V1 of {'Data.Vect.::', V146, V147} -> fun (V148) -> case V147 of {'Data.Vect.::', V149, V150} -> case V150 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V115)), <<">>"/utf8>>, <<"shr"/utf8>>))(V146))(V149))} end end end end end; _ -> case V1 of {'Data.Vect.::', V151, V152} -> fun (V153) -> case V152 of {'Data.Vect.::', V154, V155} -> case V155 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V115)), <<">>"/utf8>>, <<"shr"/utf8>>))(V151))(V154))} end end end end end; _ -> case V1 of {'Data.Vect.::', V156, V157} -> fun (V158) -> case V157 of {'Data.Vect.::', V159, V160} -> case V160 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V115)), <<">>"/utf8>>, <<"shr"/utf8>>))(V156))(V159))} end end end end end; {'Core.TT.BAnd', V161} -> case V161 of 8 -> case V1 of {'Data.Vect.::', V162, V163} -> case V163 of {'Data.Vect.::', V164, V165} -> case V165 of {'Data.Vect.Nil'} -> fun (V166) -> {'Prelude.Types.Right', ('un--boundedUIntOp'(32, <<"and"/utf8>>, V162, V164))} end; _ -> case V1 of {'Data.Vect.::', V167, V168} -> fun (V169) -> case V168 of {'Data.Vect.::', V170, V171} -> case V171 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V167, V170))} end end end end end; _ -> case V1 of {'Data.Vect.::', V172, V173} -> fun (V174) -> case V173 of {'Data.Vect.::', V175, V176} -> case V176 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V172, V175))} end end end end end; _ -> case V1 of {'Data.Vect.::', V177, V178} -> fun (V179) -> case V178 of {'Data.Vect.::', V180, V181} -> case V181 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V177, V180))} end end end end end; _ -> case V1 of {'Data.Vect.::', V182, V183} -> fun (V184) -> case V183 of {'Data.Vect.::', V185, V186} -> case V186 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V182, V185))} end end end end end; {'Core.TT.BOr', V187} -> case V187 of 8 -> case V1 of {'Data.Vect.::', V188, V189} -> case V189 of {'Data.Vect.::', V190, V191} -> case V191 of {'Data.Vect.Nil'} -> fun (V192) -> {'Prelude.Types.Right', ('un--boundedUIntOp'(32, <<"or"/utf8>>, V188, V190))} end; _ -> case V1 of {'Data.Vect.::', V193, V194} -> fun (V195) -> case V194 of {'Data.Vect.::', V196, V197} -> case V197 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V193, V196))} end end end end end; _ -> case V1 of {'Data.Vect.::', V198, V199} -> fun (V200) -> case V199 of {'Data.Vect.::', V201, V202} -> case V202 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V198, V201))} end end end end end; _ -> case V1 of {'Data.Vect.::', V203, V204} -> fun (V205) -> case V204 of {'Data.Vect.::', V206, V207} -> case V207 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V203, V206))} end end end end end; _ -> case V1 of {'Data.Vect.::', V208, V209} -> fun (V210) -> case V209 of {'Data.Vect.::', V211, V212} -> case V212 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V208, V211))} end end end end end; {'Core.TT.BXOr', V213} -> case V213 of 8 -> case V1 of {'Data.Vect.::', V214, V215} -> case V215 of {'Data.Vect.::', V216, V217} -> case V217 of {'Data.Vect.Nil'} -> fun (V218) -> {'Prelude.Types.Right', ('un--boundedUIntOp'(32, <<"xor"/utf8>>, V214, V216))} end; _ -> case V1 of {'Data.Vect.::', V219, V220} -> fun (V221) -> case V220 of {'Data.Vect.::', V222, V223} -> case V223 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V219, V222))} end end end end end; _ -> case V1 of {'Data.Vect.::', V224, V225} -> fun (V226) -> case V225 of {'Data.Vect.::', V227, V228} -> case V228 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V224, V227))} end end end end end; _ -> case V1 of {'Data.Vect.::', V229, V230} -> fun (V231) -> case V230 of {'Data.Vect.::', V232, V233} -> case V233 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V229, V232))} end end end end end; _ -> case V1 of {'Data.Vect.::', V234, V235} -> fun (V236) -> case V235 of {'Data.Vect.::', V237, V238} -> case V238 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V234, V237))} end end end end end; {'Core.TT.LT', V239} -> case V1 of {'Data.Vect.::', V240, V241} -> fun (V242) -> case V241 of {'Data.Vect.::', V243, V244} -> case V244 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolOp'(<<"<"/utf8>>, V240, V243))} end end end end; {'Core.TT.LTE', V245} -> case V1 of {'Data.Vect.::', V246, V247} -> fun (V248) -> case V247 of {'Data.Vect.::', V249, V250} -> case V250 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolOp'(<<"<="/utf8>>, V246, V249))} end end end end; {'Core.TT.EQ', V251} -> case V1 of {'Data.Vect.::', V252, V253} -> fun (V254) -> case V253 of {'Data.Vect.::', V255, V256} -> case V256 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolOp'(<<"==="/utf8>>, V252, V255))} end end end end; {'Core.TT.GTE', V257} -> case V1 of {'Data.Vect.::', V258, V259} -> fun (V260) -> case V259 of {'Data.Vect.::', V261, V262} -> case V262 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolOp'(<<">="/utf8>>, V258, V261))} end end end end; {'Core.TT.GT', V263} -> case V1 of {'Data.Vect.::', V264, V265} -> fun (V266) -> case V265 of {'Data.Vect.::', V267, V268} -> case V268 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolOp'(<<">"/utf8>>, V264, V267))} end end end end; {'Core.TT.StrLength'} -> fun (V269) -> case V1 of {'Data.Vect.::', V270, V271} -> case V271 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((begin (V274 = fun (V272) -> fun (V273) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V272, V273)) end end), fun (V275) -> fun (V276) -> ((V274(V275))(V276)) end end end(V270))({'Compiler.ES.Doc.Text', <<".length"/utf8>>}))} end end end; {'Core.TT.StrHead'} -> fun (V277) -> case V1 of {'Data.Vect.::', V278, V279} -> case V279 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((begin (V293 = fun (V291) -> fun (V292) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V291, V292)) end end), fun (V294) -> fun (V295) -> ((V293(V294))(V295)) end end end(((begin (V288 = fun (V286) -> fun (V287) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V286, V287)) end end), fun (V289) -> fun (V290) -> ((V288(V289))(V290)) end end end((begin (V284 = fun (V283) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(V283)) end), fun (V285) -> (V284(V285)) end end(<<"("/utf8>>))))(V278))))((begin (V281 = fun (V280) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(V280)) end), fun (V282) -> (V281(V282)) end end(<<".charAt(0))"/utf8>>))))} end end end; {'Core.TT.StrTail'} -> fun (V296) -> case V1 of {'Data.Vect.::', V297, V298} -> case V298 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((begin (V312 = fun (V310) -> fun (V311) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V310, V311)) end end), fun (V313) -> fun (V314) -> ((V312(V313))(V314)) end end end(((begin (V307 = fun (V305) -> fun (V306) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V305, V306)) end end), fun (V308) -> fun (V309) -> ((V307(V308))(V309)) end end end((begin (V303 = fun (V302) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(V302)) end), fun (V304) -> (V303(V304)) end end(<<"("/utf8>>))))(V297))))((begin (V300 = fun (V299) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(V299)) end), fun (V301) -> (V300(V301)) end end(<<".slice(1))"/utf8>>))))} end end end; {'Core.TT.StrIndex'} -> case V1 of {'Data.Vect.::', V315, V316} -> fun (V317) -> case V316 of {'Data.Vect.::', V318, V319} -> case V319 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ((begin (V340 = fun (V338) -> fun (V339) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V338, V339)) end end), fun (V341) -> fun (V342) -> ((V340(V341))(V342)) end end end(((begin (V335 = fun (V333) -> fun (V334) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V333, V334)) end end), fun (V336) -> fun (V337) -> ((V335(V336))(V337)) end end end(((begin (V330 = fun (V328) -> fun (V329) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V328, V329)) end end), fun (V331) -> fun (V332) -> ((V330(V331))(V332)) end end end(((begin (V325 = fun (V323) -> fun (V324) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V323, V324)) end end), fun (V326) -> fun (V327) -> ((V325(V326))(V327)) end end end((begin (V321 = fun (V320) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(V320)) end), fun (V322) -> (V321(V322)) end end(<<"("/utf8>>))))(V315))))({'Compiler.ES.Doc.Text', <<".charAt("/utf8>>}))))(V318))))({'Compiler.ES.Doc.Text', <<"))"/utf8>>}))} end end end end; {'Core.TT.StrCons'} -> case V1 of {'Data.Vect.::', V343, V344} -> fun (V345) -> case V344 of {'Data.Vect.::', V346, V347} -> case V347 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"+"/utf8>>, V343, V346))} end end end end; {'Core.TT.StrAppend'} -> case V1 of {'Data.Vect.::', V348, V349} -> fun (V350) -> case V349 of {'Data.Vect.::', V351, V352} -> case V352 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--binOp'(<<"+"/utf8>>, V348, V351))} end end end end; {'Core.TT.StrReverse'} -> fun (V353) -> case V1 of {'Data.Vect.::', V354, V355} -> case V355 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'(('un--esName'((begin (V357 = fun (V356) -> V356 end), fun (V358) -> (V357(V358)) end end(<<"strReverse"/utf8>>)))), V354))} end end end; {'Core.TT.StrSubstr'} -> case V1 of {'Data.Vect.::', V359, V360} -> case V360 of {'Data.Vect.::', V361, V362} -> fun (V363) -> case V362 of {'Data.Vect.::', V364, V365} -> case V365 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun'(('un--esName'(<<"substr"/utf8>>)), [V359 | [V361 | [V364 | []]]]))} end end end end end; {'Core.TT.DoubleExp'} -> fun (V366) -> case V1 of {'Data.Vect.::', V367, V368} -> case V368 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'(<<"Math.exp"/utf8>>, V367))} end end end; {'Core.TT.DoubleLog'} -> fun (V369) -> case V1 of {'Data.Vect.::', V370, V371} -> case V371 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'(<<"Math.log"/utf8>>, V370))} end end end; {'Core.TT.DoublePow'} -> case V1 of {'Data.Vect.::', V372, V373} -> fun (V374) -> case V373 of {'Data.Vect.::', V375, V376} -> case V376 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun'(<<"Math.pow"/utf8>>, [V372 | [V375 | []]]))} end end end end; {'Core.TT.DoubleSin'} -> fun (V377) -> case V1 of {'Data.Vect.::', V378, V379} -> case V379 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'(<<"Math.sin"/utf8>>, V378))} end end end; {'Core.TT.DoubleCos'} -> fun (V380) -> case V1 of {'Data.Vect.::', V381, V382} -> case V382 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'(<<"Math.cos"/utf8>>, V381))} end end end; {'Core.TT.DoubleTan'} -> fun (V383) -> case V1 of {'Data.Vect.::', V384, V385} -> case V385 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'(<<"Math.tan"/utf8>>, V384))} end end end; {'Core.TT.DoubleASin'} -> fun (V386) -> case V1 of {'Data.Vect.::', V387, V388} -> case V388 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'(<<"Math.asin"/utf8>>, V387))} end end end; {'Core.TT.DoubleACos'} -> fun (V389) -> case V1 of {'Data.Vect.::', V390, V391} -> case V391 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'(<<"Math.acos"/utf8>>, V390))} end end end; {'Core.TT.DoubleATan'} -> fun (V392) -> case V1 of {'Data.Vect.::', V393, V394} -> case V394 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'(<<"Math.atan"/utf8>>, V393))} end end end; {'Core.TT.DoubleSqrt'} -> fun (V395) -> case V1 of {'Data.Vect.::', V396, V397} -> case V397 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'(<<"Math.sqrt"/utf8>>, V396))} end end end; {'Core.TT.DoubleFloor'} -> fun (V398) -> case V1 of {'Data.Vect.::', V399, V400} -> case V400 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'((begin (V402 = fun (V401) -> V401 end), fun (V403) -> (V402(V403)) end end(<<"Math.floor"/utf8>>)), V399))} end end end; {'Core.TT.DoubleCeiling'} -> fun (V404) -> case V1 of {'Data.Vect.::', V405, V406} -> case V406 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--callFun1'(<<"Math.ceil"/utf8>>, V405))} end end end; {'Core.TT.Cast', V407, V408} -> case V407 of 10 -> case V408 of 12 -> case V1 of {'Data.Vect.::', V409, V410} -> case V410 of {'Data.Vect.Nil'} -> fun (V411) -> {'Prelude.Types.Right', ('un--jsNumberOfString'(V409))} end; _ -> case V408 of 10 -> case V1 of {'Data.Vect.::', V412, V413} -> case V413 of {'Data.Vect.Nil'} -> fun (V414) -> {'Prelude.Types.Right', ('un--jsAnyToString'(V412))} end; _ -> case V1 of {'Data.Vect.::', V415, V416} -> case V416 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V415)) end end end; _ -> case V1 of {'Data.Vect.::', V417, V418} -> case V418 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V417)) end end end; _ -> case V1 of {'Data.Vect.::', V419, V420} -> case V420 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V419)) end end end end; _ -> case V408 of 10 -> case V1 of {'Data.Vect.::', V421, V422} -> case V422 of {'Data.Vect.Nil'} -> fun (V423) -> {'Prelude.Types.Right', ('un--jsAnyToString'(V421))} end; _ -> case V1 of {'Data.Vect.::', V424, V425} -> case V425 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V424)) end end end; _ -> case V1 of {'Data.Vect.::', V426, V427} -> case V427 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V426)) end end end; _ -> case V1 of {'Data.Vect.::', V428, V429} -> case V429 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V428)) end end end end; _ -> case V408 of 10 -> case V1 of {'Data.Vect.::', V430, V431} -> case V431 of {'Data.Vect.Nil'} -> fun (V432) -> {'Prelude.Types.Right', ('un--jsAnyToString'(V430))} end; _ -> case V1 of {'Data.Vect.::', V433, V434} -> case V434 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V433)) end end end; _ -> case V1 of {'Data.Vect.::', V435, V436} -> case V436 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V435)) end end end; _ -> case V1 of {'Data.Vect.::', V437, V438} -> case V438 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V437)) end end end end; _ -> case V408 of 10 -> case V1 of {'Data.Vect.::', V439, V440} -> case V440 of {'Data.Vect.Nil'} -> fun (V441) -> {'Prelude.Types.Right', ('un--jsAnyToString'(V439))} end; _ -> case V1 of {'Data.Vect.::', V442, V443} -> case V443 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V442)) end end end; _ -> case V1 of {'Data.Vect.::', V444, V445} -> case V445 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V444)) end end end; _ -> case V1 of {'Data.Vect.::', V446, V447} -> case V447 of {'Data.Vect.Nil'} -> ('un--castInt'(V407, V408, V446)) end end end end; {'Core.TT.BelieveMe'} -> case V1 of {'Data.Vect.::', V448, V449} -> case V449 of {'Data.Vect.::', V450, V451} -> fun (V452) -> case V451 of {'Data.Vect.::', V453, V454} -> case V454 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', V453} end end end end end; {'Core.TT.Crash'} -> case V1 of {'Data.Vect.::', V455, V456} -> fun (V457) -> case V456 of {'Data.Vect.::', V458, V459} -> case V459 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--jsCrashExp'(V458))} end end end end end.
'un--jsNumberOfString'(V0) -> ('un--callFun1'(('un--esName'(<<"numberOfString"/utf8>>)), V0)).
'un--jsNameDoc'(V0, V1) -> {'Compiler.ES.Doc.Text', ('un--jsName'(V0, V1))}.
'un--jsName'(V0, V1) -> case ('Idris.Idris2.Compiler.NoMangle':'un--isNoMangle'(V0, V1)) of {'Prelude.Types.Just', V2} -> V2; {'Prelude.Types.Nothing'} -> ('un--jsMangleName'(V1)) end.
'un--jsMod'(V0, V1, V2) -> ('case--jsMod-4007'(V2, V1, V0, ('un--jsIntKind'(V0)))).
'un--jsMangleName'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> <<('un--jsIdent'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"_"/utf8>>, V1))))/binary, <<<<"_"/utf8>>/binary, ('un--jsMangleName'(V2))/binary>>/binary>>; {'Core.Name.UN', V3} -> ('un--jsUserName'(V3)); {'Core.Name.MN', V4, V5} -> <<('un--jsIdent'(V4))/binary, <<<<"_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5))/binary>>/binary>>; {'Core.Name.PV', V6, V7} -> <<<<"pat__"/utf8>>/binary, ('un--jsMangleName'(V6))/binary>>; {'Core.Name.DN', V8, V9} -> ('un--jsMangleName'(V9)); {'Core.Name.Nested', V10, V11} -> case V10 of {'Builtin.MkPair', V12, V13} -> <<<<"n__"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12))/binary, <<<<"_"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13))/binary, <<<<"_"/utf8>>/binary, ('un--jsMangleName'(V11))/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Core.Name.CaseBlock', V14, V15} -> <<<<"case__"/utf8>>/binary, <<('un--jsIdent'(V14))/binary, <<<<"_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15))/binary>>/binary>>/binary>>; {'Core.Name.WithBlock', V16, V17} -> <<<<"with__"/utf8>>/binary, <<('un--jsIdent'(V16))/binary, <<<<"_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V17))/binary>>/binary>>/binary>>; {'Core.Name.Resolved', V18} -> <<<<"fn__"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18))/binary>> end.
'un--jsIntOfString'(V0) -> case ('un--useBigInt'(V0)) of 1 -> fun (V1) -> ('un--jsBigIntOfString'(V1)) end; 0 -> fun (V2) -> ('un--callFun1'(('un--esName'(<<"intOfString"/utf8>>)), V2)) end end.
'un--jsIntOfDouble'(V0, V1) -> (('un--toInt'(V0))(('un--callFun1'(<<"Math.trunc"/utf8>>, V1)))).
'un--jsIntOfChar'(V0, V1) -> (('un--toInt'(V0))(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V1, ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<".codePointAt(0)"/utf8>>)))))).
'un--jsIntKind'(V0) -> case V0 of 0 -> {'Prelude.Types.Just', {'Core.TT.Signed', {'Core.TT.P', 32}}}; _ -> ('Idris.Idris2.Core.TT':'un--intKind'(V0)) end.
'un--jsIdent'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> <<V1/binary, V2/binary>> end end, <<""/utf8>>}, fun (V3) -> ('nested--11495-2670--in--un--okchar'(V0, V3)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))).
'un--jsCrashExp'(V0) -> ('un--callFun1'(('un--esName'(<<"crashExp"/utf8>>)), V0)).
'un--jsConstant'(V0) -> case V0 of {'Core.TT.I', V1} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)); {'Core.TT.I8', V2} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int8'(V2)); {'Core.TT.I16', V3} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int16'(V3)); {'Core.TT.I32', V4} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int32'(V4)); {'Core.TT.I64', V5} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int64'(V5))/binary, <<"n"/utf8>>/binary>>; {'Core.TT.BI', V6} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V6))/binary, <<"n"/utf8>>/binary>>; {'Core.TT.B8', V7} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits8'(V7)); {'Core.TT.B16', V8} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits16'(V8)); {'Core.TT.B32', V9} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits32'(V9)); {'Core.TT.B64', V10} -> <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits64'(V10))/binary, <<"n"/utf8>>/binary>>; {'Core.TT.Str', V11} -> ('un--jsString'(V11)); {'Core.TT.Ch', V12} -> ('un--jsString'(('Idris.Idris2.Data.String':'un--singleton'(V12)))); {'Core.TT.Db', V13} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V13)); {'Core.TT.PrT', V14} -> ('un--jsPrimType'(V14)); {'Core.TT.WorldVal'} -> ('un--esName'(<<"idrisworld"/utf8>>)) end.
'un--jsCharOfInt'(V0, V1) -> ('un--callFun1'(('un--esName'(<<"truncToChar"/utf8>>)), (('un--fromInt'(V0))(V1)))).
'un--jsBigIntOfString'(V0) -> ('un--callFun1'(('un--esName'(<<"bigIntOfString"/utf8>>)), V0)).
'un--jsAnyToString'(V0) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"(\x{27}\x{27}+"/utf8>>)), V0)), {'Compiler.ES.Doc.Text', <<")"/utf8>>})).
'un--isFun'(V0) -> case V0 of {'Compiler.ES.Ast.ELam', V1, V2} -> 0; _ -> 1 end.
'un--isArg'(V0, V1) -> case V0 of 0 -> case V1 of {'Compiler.ES.Ast.ELam', V2, V3} -> case V3 of {'Compiler.ES.Ast.Block', V4, V5} -> 0; {'Compiler.ES.Ast.ConSwitch', V6, V7, V8, V9} -> case V6 of {'Compiler.ES.Ast.Returns'} -> 0; _ -> 1 end; {'Compiler.ES.Ast.ConstSwitch', V10, V11, V12, V13} -> case V10 of {'Compiler.ES.Ast.Returns'} -> 0; _ -> 1 end; {'Compiler.ES.Ast.Error', V14} -> 0; _ -> 1 end; _ -> 1 end; _ -> 1 end.
'un--integerOp'(V0, V1, V2) -> ('un--callFun'(('Idris.Idris2.Prelude.Types':'un--fastConcat'([<<"_"/utf8>> | [V0 | [<<"BigInt"/utf8>> | []]]])), [V1 | [V2 | []]])).
'un--insertBreak'(V0, V1) -> case V0 of {'Compiler.ES.Ast.Returns'} -> V1; {'Compiler.ES.Ast.ErrorWithout', V2} -> case V1 of {'Builtin.MkPair', V3, V4} -> {'Builtin.MkPair', V3, ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'([V4 | [{'Compiler.ES.Doc.Text', <<"break;"/utf8>>} | []]]))} end end.
'un--function'(V0, V1, V2) -> ('Idris.Idris2.Compiler.ES.Doc':'un--<++>'({'Compiler.ES.Doc.Text', <<"function"/utf8>>}, ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--app'(V0, V1)), {'Compiler.ES.Doc.SoftSpace'})), ('Idris.Idris2.Compiler.ES.Doc':'un--block'(V2)))))).
'un--fromInt'(V0) -> case ('un--useBigInt'(V0)) of 1 -> fun (V1) -> ('un--fromBigInt'(V1)) end; 0 -> fun (V2) -> V2 end end.
'un--fromBigInt'(V0) -> ('un--callFun1'(<<"Number"/utf8>>, V0)).
'un--foreignDecl'(V0, V1, V2, V3, V4) -> begin (V39 = begin (V10 = begin (V5 = V1), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), ((begin (V36 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V33, V34, V35)) end end end end end), fun (V37) -> fun (V38) -> ((((V36('erased'))('erased'))(V37))(V38)) end end end((begin (V28 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> {'Prelude.Types.Right', (V24(V27))} end end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V11) -> case V11 of {'Compiler.ES.State.MkESSt', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21} -> V20 end end))))(V10)) end), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V47 = case ('un--searchForeign'(V43, V4)) of {'Prelude.Types.Right', V44} -> ('un--makeForeign'(V0, V1, V2, V3, V44)); {'Prelude.Types.Left', V45} -> fun (V46) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"No supported backend found in the definition of "/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)) | [<<". "/utf8>> | [<<"Supported backends: "/utf8>> | [('un--stringList'(V43)) | [<<". "/utf8>> | [<<"Backends in definition: "/utf8>> | [('un--stringList'(V45)) | [<<"."/utf8>> | []]]]]]]]]], V46)) end end), V47 end(V40)) end end end end.
'un--foreign'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Core.CompileExpr.MkNmForeign', V8, V9, V10} -> begin (V11 = ('un--foreignDecl'(V1, V0, V2, V4, V8))), ((begin (V27 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V24, V25, V26)) end end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end((begin (V19 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> {'Prelude.Types.Right', (V15(V18))} end end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Compiler.ES.Doc':'un--pretty'(V12)))) end))))(V11)) end; _ -> fun (V30) -> {'Prelude.Types.Right', []} end end; _ -> fun (V31) -> {'Prelude.Types.Right', []} end end; _ -> fun (V32) -> {'Prelude.Types.Right', []} end end.
'un--exp'(V0, V1, V2) -> case V2 of {'Compiler.ES.Ast.EMinimal', V3} -> begin (V9 = begin (V4 = V1), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', ('un--minimal'(V13, V3))} end), V15 end(V10)) end end end end; {'Compiler.ES.Ast.ELam', V16, V17} -> case V17 of {'Compiler.ES.Ast.Return', V18} -> case V18 of {'Compiler.ES.Ast.ECon', V19, V20, V21} -> begin (V27 = begin (V22 = V1), fun (V23) -> begin (V26 = (begin (V24 = V22), fun (V25) -> ('erlang':'get'(V24)) end end(V23))), {'Prelude.Types.Right', V26} end end end), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V56 = begin (V32 = ('un--exp'(V0, V1, V18))), ((begin (V53 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V50, V51, V52)) end end end end end), fun (V54) -> fun (V55) -> ((((V53('erased'))('erased'))(V54))(V55)) end end end((begin (V45 = fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> {'Prelude.Types.Right', (V41(V44))} end end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V33) -> ((begin (V36 = fun (V34) -> fun (V35) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V34, V35)) end end), fun (V37) -> fun (V38) -> ((V36(V37))(V38)) end end end(('un--lambdaArgs'(V31, V16))))(('Idris.Idris2.Compiler.ES.Doc':'un--paren'(V33)))) end))))(V32)) end), V56 end(V28)) end end end end; _ -> begin (V62 = begin (V57 = V1), fun (V58) -> begin (V61 = (begin (V59 = V57), fun (V60) -> ('erlang':'get'(V59)) end end(V58))), {'Prelude.Types.Right', V61} end end end), fun (V63) -> begin (V64 = (V62(V63))), case V64 of {'Prelude.Types.Left', V65} -> {'Prelude.Types.Left', V65}; {'Prelude.Types.Right', V66} -> (begin (V86 = begin (V67 = ('un--exp'(V0, V1, V18))), ((begin (V83 = fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V80, V81, V82)) end end end end end), fun (V84) -> fun (V85) -> ((((V83('erased'))('erased'))(V84))(V85)) end end end((begin (V75 = fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> {'Prelude.Types.Right', (V71(V74))} end end end end end), fun (V76) -> fun (V77) -> ((((V75('erased'))('erased'))(V76))(V77)) end end end(fun (V68) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--lambdaArgs'(V66, V16)), V68)) end))))(V67)) end), V86 end(V63)) end end end end end; _ -> begin (V92 = begin (V87 = V1), fun (V88) -> begin (V91 = (begin (V89 = V87), fun (V90) -> ('erlang':'get'(V89)) end end(V88))), {'Prelude.Types.Right', V91} end end end), fun (V93) -> begin (V94 = (V92(V93))), case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> (begin (V116 = begin (V97 = ('un--stmt'({'Prelude.Types.Just', {'Compiler.ES.Ast.Returns'}}, V0, V1, V17))), ((begin (V113 = fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V110, V111, V112)) end end end end end), fun (V114) -> fun (V115) -> ((((V113('erased'))('erased'))(V114))(V115)) end end end((begin (V105 = fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> {'Prelude.Types.Right', (V101(V104))} end end end end end), fun (V106) -> fun (V107) -> ((((V105('erased'))('erased'))(V106))(V107)) end end end(fun (V98) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--lambdaArgs'(V96, V16)), ('Idris.Idris2.Compiler.ES.Doc':'un--block'(V98)))) end))))(V97)) end), V116 end(V93)) end end end end end; {'Compiler.ES.Ast.EApp', V117, V118} -> begin (V119 = ('un--exp'(V0, V1, V117))), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V132 = begin (V125 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V124) -> ('un--exp'(V0, V1, V124)) end, V118, []))), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V131 = fun (V130) -> {'Prelude.Types.Right', ('un--app'(V123, V129))} end), V131 end(V126)) end end end end), V132 end(V120)) end end end end; {'Compiler.ES.Ast.ECon', V133, V134, V135} -> begin (V137 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V136) -> ('un--exp'(V0, V1, V136)) end, V135, []))), ((begin (V153 = fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V150, V151, V152)) end end end end end), fun (V154) -> fun (V155) -> ((((V153('erased'))('erased'))(V154))(V155)) end end end((begin (V145 = fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> {'Prelude.Types.Right', (V141(V144))} end end end end end), fun (V146) -> fun (V147) -> ((((V145('erased'))('erased'))(V146))(V147)) end end end(fun (V138) -> ('un--applyCon'(V134, V133, V138)) end))))(V137)) end; {'Compiler.ES.Ast.EOp', V156, V157} -> begin (V159 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V158) -> ('un--exp'(V0, V1, V158)) end, V157))), fun (V160) -> begin (V161 = (V159(V160))), case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> (begin (V164 = ('un--jsOp'(V156, V163))), V164 end(V160)) end end end end; {'Compiler.ES.Ast.EExtPrim', V165, V166} -> begin (V168 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V167) -> ('un--exp'(V0, V1, V167)) end, V166, []))), fun (V169) -> begin (V170 = (V168(V169))), case V170 of {'Prelude.Types.Left', V171} -> {'Prelude.Types.Left', V171}; {'Prelude.Types.Right', V172} -> (begin (V173 = ('un--jsPrim'(V0, V165, V172))), V173 end(V169)) end end end end; {'Compiler.ES.Ast.EPrimVal', V174} -> fun (V175) -> {'Prelude.Types.Right', {'Compiler.ES.Doc.Text', ('un--jsConstant'(V174))}} end; {'Compiler.ES.Ast.EErased'} -> fun (V176) -> {'Prelude.Types.Right', {'Compiler.ES.Doc.Text', <<"undefined"/utf8>>}} end end.
'un--esName'(V0) -> <<<<"_"/utf8>>/binary, V0/binary>>.
'un--def'(V0, V1, V2, V3, V4) -> case V4 of {'Compiler.ES.TailRec.MkFunction', V5, V6, V7} -> begin (V8 = ('Idris.Idris2.Compiler.ES.State':'un--reset'(V2))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V241 = begin (V18 = begin (V13 = V0), fun (V14) -> begin (V17 = (begin (V15 = V13), fun (V16) -> ('erlang':'get'(V15)) end end(V14))), {'Prelude.Types.Right', V17} end end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V240 = begin (V104 = begin (V26 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.javascript.doc"/utf8>>, 50, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V23) -> fun (V24) -> <<V23/binary, V24/binary>> end end, <<""/utf8>>}, fun (V25) -> V25 end, [<<"Looking up "/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) | []]])) end))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V103 = begin (V63 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V22 of {'Core.Context.MkDefs', V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62} -> V31 end))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V102 = case V67 of {'Prelude.Types.Just', V68} -> case ('Idris.Idris2.Core.Name':'un--dropNS'(V5)) of {'Core.Name.UN', V69} -> begin (V93 = ('Idris.Idris2.Idris.Doc.String':'un--prettyType'(V0, V1, fun (V70) -> {'Builtin.MkUnit'} end, case V68 of {'Core.Context.Context.MkGlobalDef', V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92} -> V73 end))), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V99 = fun (V98) -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Compiler.ES.Doc.Text', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(V97))}}} end), V99 end(V94)) end end end end; _ -> fun (V100) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end; {'Prelude.Types.Nothing'} -> fun (V101) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V102 end(V64)) end end end end), V103 end(V27)) end end end end), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V239 = begin (V109 = ('Idris.Idris2.Compiler.ES.State':'un--getOrRegisterRef'(V2, V5))), fun (V110) -> begin (V111 = (V109(V110))), case V111 of {'Prelude.Types.Left', V112} -> {'Prelude.Types.Left', V112}; {'Prelude.Types.Right', V113} -> (begin (V238 = begin (V115 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V114) -> ('Idris.Idris2.Compiler.ES.State':'un--registerLocal'(V2, V114)) end, V6, []))), fun (V116) -> begin (V117 = (V115(V116))), case V117 of {'Prelude.Types.Left', V118} -> {'Prelude.Types.Left', V118}; {'Prelude.Types.Right', V119} -> (begin (V237 = begin (V154 = begin (V125 = begin (V120 = V2), fun (V121) -> begin (V124 = (begin (V122 = V120), fun (V123) -> ('erlang':'get'(V122)) end end(V121))), {'Prelude.Types.Right', V124} end end end), ((begin (V151 = fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V148, V149, V150)) end end end end end), fun (V152) -> fun (V153) -> ((((V151('erased'))('erased'))(V152))(V153)) end end end((begin (V143 = fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> {'Prelude.Types.Right', (V139(V142))} end end end end end), fun (V144) -> fun (V145) -> ((((V143('erased'))('erased'))(V144))(V145)) end end end(fun (V126) -> case V126 of {'Compiler.ES.State.MkESSt', V127, V128, V129, V130, V131, V132, V133, V134, V135, V136} -> V127 end end))))(V125)) end), fun (V155) -> begin (V156 = (V154(V155))), case V156 of {'Prelude.Types.Left', V157} -> {'Prelude.Types.Left', V157}; {'Prelude.Types.Right', V158} -> (begin (V236 = begin (V165 = begin (V159 = ('Idris.Idris2.Compiler.ES.ToAst':'un--stmt'(V2, {'Compiler.ES.Ast.Returns'}, V7))), fun (V160) -> begin (V161 = (V159(V160))), case V161 of {'Prelude.Types.Left', V162} -> {'Prelude.Types.Left', V162}; {'Prelude.Types.Right', V163} -> (begin (V164 = ('un--stmt'({'Prelude.Types.Just', {'Compiler.ES.Ast.Returns'}}, V2, V3, V163))), V164 end(V160)) end end end end), fun (V166) -> begin (V167 = (V165(V166))), case V167 of {'Prelude.Types.Left', V168} -> {'Prelude.Types.Left', V168}; {'Prelude.Types.Right', V169} -> (begin (V235 = begin (V178 = {'Compiler.ES.Doc.Comment', ('Idris.Idris2.Compiler.ES.Doc':'un--hsep'([{'Compiler.ES.Doc.Text', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))} | ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(((begin (V175 = fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V173, V174)) end end end end), fun (V176) -> fun (V177) -> ((((V175('erased'))('erased'))(V176))(V177)) end end end(fun (V170) -> ('Idris.Idris2.Compiler.ES.Doc':'un--<++>'({'Compiler.ES.Doc.Text', <<":"/utf8>>}, V170)) end))(V108))))]))}), case V119 of [] -> begin (V184 = begin (V179 = V3), fun (V180) -> begin (V183 = (begin (V181 = V179), fun (V182) -> ('erlang':'get'(V181)) end end(V180))), {'Prelude.Types.Right', V183} end end end), fun (V185) -> begin (V186 = (V184(V185))), case V186 of {'Prelude.Types.Left', V187} -> {'Prelude.Types.Left', V187}; {'Prelude.Types.Right', V188} -> (begin (V203 = fun (V189) -> {'Prelude.Types.Right', ('un--printDoc'(V158, ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'([V178 | [('un--constant'(('un--var'(V188, V113)), ((begin (V200 = fun (V198) -> fun (V199) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V198, V199)) end end), fun (V201) -> fun (V202) -> ((V200(V201))(V202)) end end end(((begin (V195 = fun (V193) -> fun (V194) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V193, V194)) end end), fun (V196) -> fun (V197) -> ((V195(V196))(V197)) end end end((begin (V191 = fun (V190) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(V190)) end), fun (V192) -> (V191(V192)) end end(<<"__lazy("/utf8>>))))(('un--function'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--neutral_Monoid_Doc'()), [], V169))))))({'Compiler.ES.Doc.Text', <<")"/utf8>>})))) | []]]))))} end), V203 end(V185)) end end end end; _ -> begin (V209 = begin (V204 = V3), fun (V205) -> begin (V208 = (begin (V206 = V204), fun (V207) -> ('erlang':'get'(V206)) end end(V205))), {'Prelude.Types.Right', V208} end end end), fun (V210) -> begin (V211 = (V209(V210))), case V211 of {'Prelude.Types.Left', V212} -> {'Prelude.Types.Left', V212}; {'Prelude.Types.Right', V213} -> (begin (V234 = begin (V219 = begin (V214 = V3), fun (V215) -> begin (V218 = (begin (V216 = V214), fun (V217) -> ('erlang':'get'(V216)) end end(V215))), {'Prelude.Types.Right', V218} end end end), fun (V220) -> begin (V221 = (V219(V220))), case V221 of {'Prelude.Types.Left', V222} -> {'Prelude.Types.Left', V222}; {'Prelude.Types.Right', V223} -> (begin (V233 = fun (V224) -> {'Prelude.Types.Right', ('un--printDoc'(V158, ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'([V178 | [('un--function'(('un--var'(V213, V113)), ((begin (V230 = fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V228, V229)) end end end end), fun (V231) -> fun (V232) -> ((((V230('erased'))('erased'))(V231))(V232)) end end end(fun (V225) -> ('un--var'(V223, V225)) end))(V119)), V169)) | []]]))))} end), V233 end(V220)) end end end end), V234 end(V210)) end end end end end end), V235 end(V166)) end end end end), V236 end(V155)) end end end end), V237 end(V116)) end end end end), V238 end(V110)) end end end end), V239 end(V105)) end end end end), V240 end(V19)) end end end end), V241 end(V9)) end end end end end.
'un--constant'(V0, V1) -> ('Idris.Idris2.Compiler.ES.Doc':'un--<++>'({'Compiler.ES.Doc.Text', <<"const"/utf8>>}, ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V0, ('Idris.Idris2.Compiler.ES.Doc':'un--softEq'()))), V1)), {'Compiler.ES.Doc.Text', <<";"/utf8>>})))).
'un--conTags'(V0) -> ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V1) -> fun (V2) -> ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Compiler.ES.Doc.Text', <<"a"/utf8>>} | [{'Compiler.ES.Doc.Text', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V1))} | [('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()) | [V2 | []]]]])) end end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'(1, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V0)))), V0)).
'un--compileToES'(V0, V1, V2, V3, V4) -> begin (V6 = ('Idris.Idris2.Compiler.NoMangle':'un--initNoMangle'(V0, V4, fun (V5) -> ('un--validJSName'(V5)) end))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V242 = begin (V11 = ('Idris.Idris2.Compiler.Common':'un--getCompileDataWith'(V0, V4, 0, 0, V3))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V241 = begin (V16 = ('Idris.Idris2.Core.Context':'un--getDirectives'(V0, V2))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V240 = begin (V97 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V32)) end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V36, V37, V38, V39)) end end end end end end end, fun (V40) -> fun (V41) -> V41 end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V44, V45, V46)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V49, V50)) end end}, <<"minimal"/utf8>>, ((begin (V56 = fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V54, V55)) end end end end), fun (V57) -> fun (V58) -> ((((V56('erased'))('erased'))(V57))(V58)) end end end(fun (V51) -> ('Idris.Idris2.Builtin':'un--snd'(V51)) end))(V20)))) of 1 -> 2; 0 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V70)) end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V74, V75, V76, V77)) end end end end end end end, fun (V78) -> fun (V79) -> V79 end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V82, V83, V84)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V85, V86)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V87, V88)) end end}, <<"compact"/utf8>>, ((begin (V94 = fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V92, V93)) end end end end), fun (V95) -> fun (V96) -> ((((V94('erased'))('erased'))(V95))(V96)) end end end(fun (V89) -> ('Idris.Idris2.Builtin':'un--snd'(V89)) end))(V20)))) of 1 -> 1; 0 -> 0 end end), begin (V111 = begin (V103 = begin (V98 = V10), fun (V99) -> begin (V102 = (begin (V100 = V98), fun (V101) -> ('erlang':'get'(V100)) end end(V99))), {'Prelude.Types.Right', V102} end end end), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V110 = ('Idris.Idris2.Core.Core':'un--newRef'({'Compiler.ES.State.ESs'}, ('Idris.Idris2.Compiler.ES.State':'un--init'(V97, fun (V108) -> ('un--isArg'(V97, V108)) end, fun (V109) -> ('un--isFun'(V109)) end, V4, V107))))), V110 end(V104)) end end end end), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V239 = begin (V116 = ('Idris.Idris2.Compiler.ES.State':'un--addRef'(V115, ('un--tailRec'()), {'Compiler.ES.Ast.VName', ('un--tailRec'())}))), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V238 = begin (V133 = [{'Builtin.MkPair', ('un--mainExpr'()), {'Builtin.MkPair', {'Core.FC.EmptyFC'}, {'Core.CompileExpr.MkNmFun', [], ('Idris.Idris2.Core.CompileExpr':'un--forget'([], case V15 of {'Compiler.Common.MkCompileData', V121, V122, V123, V124, V125, V126} -> V121 end))}}} | case V15 of {'Compiler.Common.MkCompileData', V127, V128, V129, V130, V131, V132} -> V129 end]), begin (V134 = ('Idris.Idris2.Compiler.ES.TailRec':'un--functions'(('un--tailRec'()), V133))), begin (V136 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V135) -> ('un--def'(V0, V1, V115, V10, V135)) end, V134, []))), fun (V137) -> begin (V138 = (V136(V137))), case V138 of {'Prelude.Types.Left', V139} -> {'Prelude.Types.Left', V139}; {'Prelude.Types.Right', V140} -> (begin (V237 = begin (V164 = begin (V142 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V141) -> ('un--foreign'(V115, V0, V10, V141)) end, V133, []))), ((begin (V161 = fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V158, V159, V160)) end end end end end), fun (V162) -> fun (V163) -> ((((V161('erased'))('erased'))(V162))(V163)) end end end((begin (V153 = fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> case V150 of {'Prelude.Types.Left', V151} -> {'Prelude.Types.Left', V151}; {'Prelude.Types.Right', V152} -> {'Prelude.Types.Right', (V149(V152))} end end end end end), fun (V154) -> fun (V155) -> ((((V153('erased'))('erased'))(V154))(V155)) end end end(fun (V143) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V144, V145)) end end, []}, fun (V146) -> V146 end, V143)) end))))(V142)) end), fun (V165) -> begin (V166 = (V164(V165))), case V166 of {'Prelude.Types.Left', V167} -> {'Prelude.Types.Left', V167}; {'Prelude.Types.Right', V168} -> (begin (V236 = begin (V199 = begin (V174 = begin (V169 = V10), fun (V170) -> begin (V173 = (begin (V171 = V169), fun (V172) -> ('erlang':'get'(V171)) end end(V170))), {'Prelude.Types.Right', V173} end end end), fun (V175) -> begin (V176 = (V174(V175))), case V176 of {'Prelude.Types.Left', V177} -> {'Prelude.Types.Left', V177}; {'Prelude.Types.Right', V178} -> (begin (V198 = begin (V179 = ('Idris.Idris2.Compiler.ES.State':'un--getOrRegisterRef'(V115, ('un--mainExpr'())))), ((begin (V195 = fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V192, V193, V194)) end end end end end), fun (V196) -> fun (V197) -> ((((V195('erased'))('erased'))(V196))(V197)) end end end((begin (V187 = fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> case V184 of {'Prelude.Types.Left', V185} -> {'Prelude.Types.Left', V185}; {'Prelude.Types.Right', V186} -> {'Prelude.Types.Right', (V183(V186))} end end end end end), fun (V188) -> fun (V189) -> ((((V187('erased'))('erased'))(V188))(V189)) end end end(fun (V180) -> ('Idris.Idris2.Compiler.ES.Doc':'un--compact'(('un--var'(V178, V180)))) end))))(V179)) end), V198 end(V175)) end end end end), fun (V200) -> begin (V201 = (V199(V200))), case V201 of {'Prelude.Types.Left', V202} -> {'Prelude.Types.Left', V202}; {'Prelude.Types.Right', V203} -> (begin (V235 = begin (V204 = <<<<"try{"/utf8>>/binary, <<V203/binary, <<"()}catch(e){if(e instanceof IdrisError){console.log(\x{27}ERROR: \x{27} + e.message)}else{throw e} }"/utf8>>/binary>>/binary>>), begin (V205 = ('Idris.Idris2.Data.String':'un--fastUnlines'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V168, V140))))), begin (V211 = begin (V206 = V115), fun (V207) -> begin (V210 = (begin (V208 = V206), fun (V209) -> ('erlang':'get'(V208)) end end(V207))), {'Prelude.Types.Right', V210} end end end), fun (V212) -> begin (V213 = (V211(V212))), case V213 of {'Prelude.Types.Left', V214} -> {'Prelude.Types.Left', V214}; {'Prelude.Types.Right', V215} -> (begin (V234 = begin (V216 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"js/support.js"/utf8>>))), fun (V217) -> begin (V218 = (V216(V217))), case V218 of {'Prelude.Types.Left', V219} -> {'Prelude.Types.Left', V219}; {'Prelude.Types.Right', V220} -> (begin (V233 = begin (V231 = ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, [V220 | ('Idris.Idris2.Libraries.Data.SortedMap':'un--values'(case V215 of {'Compiler.ES.State.MkESSt', V221, V222, V223, V224, V225, V226, V227, V228, V229, V230} -> V228 end))]))), fun (V232) -> {'Prelude.Types.Right', ('Idris.Idris2.Data.String':'un--fastUnlines'([V231 | [V205 | [V204 | []]]]))} end end), V233 end(V217)) end end end end), V234 end(V212)) end end end end end end), V235 end(V200)) end end end end), V236 end(V165)) end end end end), V237 end(V137)) end end end end end end), V238 end(V117)) end end end end), V239 end(V112)) end end end end end), V240 end(V17)) end end end end), V241 end(V12)) end end end end), V242 end(V7)) end end end end.
'un--castInt'(V0, V1, V2) -> ('case--castInt-4586'(V2, V1, V0, {'Builtin.MkPair', {'Builtin.MkPair', V0, ('un--jsIntKind'(V0))}, {'Builtin.MkPair', V1, ('un--jsIntKind'(V1))}})).
'un--callFun1'(V0, V1) -> ('un--callFun'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V1)))).
'un--callFun'(V0, V1) -> ('un--app'({'Compiler.ES.Doc.Text', V0}, V1)).
'un--breakDrop1'(V0, V1) -> case ('Idris.Idris2.Data.String':'un--break'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, V0)) end, V1)) of {'Builtin.MkPair', V3, V4} -> {'Builtin.MkPair', V3, ('Idris.Idris2.Libraries.Data.String.Extra':'un--drop'(1, V4))} end.
'un--boundedUIntOp'(V0, V1, V2, V3) -> ('un--boundedOp'(<<"u"/utf8>>, V0, V1, V2, V3)).
'un--boundedOp'(V0, V1, V2, V3, V4) -> ('un--callFun'(('Idris.Idris2.Prelude.Types':'un--fastConcat'([<<"_"/utf8>> | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)) | [V0 | []]]]])), [V3 | [V4 | []]])).
'un--boundedIntOp'(V0, V1, V2, V3) -> ('un--boundedOp'(<<"s"/utf8>>, V0, V1, V2, V3)).
'un--boolOp'(V0, V1, V2) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"("/utf8>>)), ('un--binOp'(V0, V1, V2)))), {'Compiler.ES.Doc.Text', <<"?1:0)"/utf8>>})).
'un--binOp'(V0, V1, V2) -> ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Compiler.ES.Doc.Text', <<"("/utf8>>} | [V1 | [{'Compiler.ES.Doc.Text', V0} | [V2 | [{'Compiler.ES.Doc.Text', <<")"/utf8>>} | []]]]]])).
'un--arithOp'(V0, V1, V2) -> case V0 of {'Prelude.Types.Just', V3} -> fun (V4) -> case V3 of {'Core.TT.Signed', V5} -> fun (V6) -> case V5 of {'Core.TT.P', V7} -> ('un--boundedIntOp'(V7, V2, V4, V6)); {'Core.TT.Unlimited'} -> case V1 of <<""/utf8>> -> ('un--integerOp'(V2, V4, V6)); _ -> ('un--binOp'(V1, V4, V6)) end; _ -> ('un--binOp'(V1, V4, V6)) end end; {'Core.TT.Unsigned', V8} -> fun (V9) -> ('un--boundedUIntOp'(V8, V2, V4, V9)) end; _ -> fun (V10) -> ('un--binOp'(V1, V4, V10)) end end end; _ -> fun (V11) -> fun (V12) -> ('un--binOp'(V1, V11, V12)) end end end.
'un--applyObj'(V0) -> ('un--applyList'({'Compiler.ES.Doc.Text', <<"{"/utf8>>}, {'Compiler.ES.Doc.Text', <<"}"/utf8>>}, ('Idris.Idris2.Compiler.ES.Doc':'un--softComma'()), V0)).
'un--applyList'(V0, V1, V2, V3) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V4, V5)) end end, ('Idris.Idris2.Compiler.ES.Doc':'dn--un--neutral_Monoid_Doc'())}, fun (V6) -> V6 end, ('Idris.Idris2.Data.List':'un--intersperse'(V2, V3)))))), V1)).
'un--applyCon'(V0, V1, V2) -> case V0 of {'Core.CompileExpr.NIL'} -> case V2 of [] -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"{h"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()))), {'Compiler.ES.Doc.Text', <<"0}"/utf8>>})); _ -> ('un--applyObj'([('nested--12123-3326--in--un--mkCon'(V0, V2, V1, ('un--tag2es'(V1)))) | ('un--conTags'(V2))])) end; {'Core.CompileExpr.NOTHING'} -> case V2 of [] -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"{h"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()))), {'Compiler.ES.Doc.Text', <<"0}"/utf8>>})); _ -> ('un--applyObj'([('nested--12123-3326--in--un--mkCon'(V0, V2, V1, ('un--tag2es'(V1)))) | ('un--conTags'(V2))])) end; {'Core.CompileExpr.CONS'} -> ('un--applyObj'(('un--conTags'(V2)))); {'Core.CompileExpr.JUST'} -> ('un--applyObj'(('un--conTags'(V2)))); {'Core.CompileExpr.RECORD'} -> ('un--applyObj'(('un--conTags'(V2)))); {'Core.CompileExpr.UNIT'} -> case V2 of [] -> {'Compiler.ES.Doc.Text', <<"undefined"/utf8>>}; _ -> ('un--applyObj'([('nested--12123-3326--in--un--mkCon'(V0, V2, V1, ('un--tag2es'(V1)))) | ('un--conTags'(V2))])) end; _ -> ('un--applyObj'([('nested--12123-3326--in--un--mkCon'(V0, V2, V1, ('un--tag2es'(V1)))) | ('un--conTags'(V2))])) end.
'un--app'(V0, V1) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V0, ('un--applyList'({'Compiler.ES.Doc.Text', <<"("/utf8>>}, {'Compiler.ES.Doc.Text', <<")"/utf8>>}, ('Idris.Idris2.Compiler.ES.Doc':'un--softComma'()), V1)))).
