-module('Idris.Idris2.Compiler.ES.Node').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--findNode'/1,
  'un--executeExpr'/4,
  'un--compileToNode'/3,
  'un--compileLibrary'/5,
  'un--compileExpr'/6,
  'un--codegenNode'/0
]).
'un--findNode'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getEnv'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"NODE"/utf8>>))(V0))), case V28 of {'Prelude.Types.Nothing'} -> begin (V29 = ('Idris.Idris2.Libraries.Utils.Path':'un--pathLookup'([<<"node"/utf8>> | []], V0))), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> (begin (V31 = fun (V30) -> V30 end), fun (V32) -> (V31(V32)) end end(<<"/usr/bin/env node"/utf8>>)) end, V29)) end; {'Prelude.Types.Just', V33} -> V33 end end.
'un--executeExpr'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, <<"_tmp_node.js"/utf8>>))), begin (V5 = ('un--compileToNode'(V0, V1, V3))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V79 = begin (V10 = ('Idris.Idris2.Core.Core':'un--writeFile'(V4, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V78 = begin (V17 = fun (V15) -> begin (V16 = ('un--findNode'(V15))), {'Prelude.Types.Right', V16} end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V77 = begin (V23 = fun (V22) -> {'Prelude.Types.Right', <<<<"\x{22}"/utf8>>/binary, <<V21/binary, <<"\x{22}"/utf8>>/binary>>/binary>>} end), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V76 = begin (V57 = fun (V28) -> begin (V56 = (('Idris.Idris2.Erlang.System':'un--system'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> V35 end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), begin (V43 = (V40(V41))), (V42(V43)) end end end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), ((V47(V49))(V48)) end end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V51(V52))), (V53(V52)) end end end end}, fun (V54) -> fun (V55) -> V55 end end}, <<V27/binary, <<<<" "/utf8>>/binary, V4/binary>>/binary>>))(V28))), {'Prelude.Types.Right', V56} end end), ((begin (V73 = fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V70, V71, V72)) end end end end end), fun (V74) -> fun (V75) -> ((((V73('erased'))('erased'))(V74))(V75)) end end end((begin (V65 = fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> {'Prelude.Types.Right', (V61(V64))} end end end end end), fun (V66) -> fun (V67) -> ((((V65('erased'))('erased'))(V66))(V67)) end end end(fun (V58) -> {'Builtin.MkUnit'} end))))(V57)) end), V76 end(V24)) end end end end), V77 end(V18)) end end end end), V78 end(V11)) end end end end), V79 end(V6)) end end end end end.
'un--compileToNode'(V0, V1, V2) -> ('Idris.Idris2.Compiler.ES.Codegen':'un--compileToES'(V0, V1, {'Core.Options.Node'}, V2, [<<"node"/utf8>> | [<<"javascript"/utf8>> | []]])).
'un--compileLibrary'(V0, V1, V2, V3, V4) -> begin (V7 = fun (V5) -> begin (V6 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<"Compiling to library is not supported.\x{a}"/utf8>>, V5))), {'Prelude.Types.Right', V6} end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end), V13 end(V8)) end end end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--compileToNode'(V0, V1, V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V19 = begin (V11 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, V5))), begin (V12 = ('Idris.Idris2.Core.Core':'un--writeFile'(V11, V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = fun (V17) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V11}} end), V18 end(V13)) end end end end end), V19 end(V7)) end end end end.
'un--codegenNode'() -> {'Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('un--compileExpr'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('un--executeExpr'(V6, V7, V8, V9)) end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('un--compileLibrary'(V10, V11, V12, V13, V14)) end end end end end, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}}.
