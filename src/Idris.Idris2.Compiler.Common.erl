-module('Idris.Idris2.Compiler.Common').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--castInt-6207'/5,
  'case--getExtraRuntime,getArg-5570'/3,
  'case--locate-5305'/3,
  'case--case block in parseCC,findTarget-5159'/7,
  'case--parseCC,getOpts-5030'/5,
  'nested--11779-1444--in--un--tag'/3,
  'nested--16515-5551--in--un--readPath'/2,
  'nested--16515-5550--in--un--paths'/1,
  'nested--13164-2587--in--un--lookupBackend'/7,
  'nested--15914-5006--in--un--hasTarget'/5,
  'nested--15914-5005--in--un--getOpts'/4,
  'nested--13164-2588--in--un--getExports'/6,
  'nested--16515-5549--in--un--getArg'/2,
  'nested--12931-2366--in--un--fullShow'/4,
  'nested--15914-5007--in--un--findTarget'/5,
  'nested--12931-2367--in--un--dumpDef'/4,
  'dn--un--max_Ord_UsePhase'/2,
  'dn--un--compare_Ord_UsePhase'/2,
  'dn--un-->_Ord_UsePhase'/2,
  'dn--un-->=_Ord_UsePhase'/2,
  'un--warnIfHole'/3,
  'un--skipUnusedNames'/1,
  'un--replaceEntry'/2,
  'un--parseCC'/2,
  'un--nonErased'/2,
  'un--natHackNames'/0,
  'un--locate'/2,
  'un--isExported'/1,
  'un--incCompile'/4,
  'un--getNamedDef'/2,
  'un--getMinimalDef'/1,
  'un--getIncCompileData'/3,
  'un--getExtraRuntime'/1,
  'un--getExportedCompileData'/5,
  'un--getCompileDataWith'/5,
  'un--getCompileData'/4,
  'un--getAllDesc'/4,
  'un--exportedName'/1,
  'un--exists'/2,
  'un--dylib_suffix'/0,
  'un--dumpIR'/3,
  'un--copyLib'/1,
  'un--compileTerm'/2,
  'un--compDef'/2,
  'un--cgExecuteExpr'/4,
  'un--cgCompileLibrary'/4,
  'un--cgCompileExpr'/5,
  'un--castInt'/4
]).
'case--castInt-6207'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V5 of {'Builtin.MkPair', V7, V8} -> case V7 of 11 -> case V6 of {'Builtin.MkPair', V9, V10} -> case V10 of {'Prelude.Types.Just', V11} -> case V3 of {'Compiler.Common.MkConstantPrimitives', V12, V13, V14, V15, V16, V17, V18} -> ((V12(V11))(V0)) end; _ -> case V8 of {'Prelude.Types.Just', V19} -> case V6 of {'Builtin.MkPair', V20, V21} -> case V20 of 11 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V22, V23, V24, V25, V26, V27, V28} -> ((V23(V19))(V0)) end; 10 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V29, V30, V31, V32, V33, V34, V35} -> ((V32(V19))(V0)) end; 12 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V36, V37, V38, V39, V40, V41, V42} -> ((V41(V19))(V0)) end; _ -> case V21 of {'Prelude.Types.Just', V43} -> case V3 of {'Compiler.Common.MkConstantPrimitives', V44, V45, V46, V47, V48, V49, V50} -> (((V50(V19))(V43))(V0)) end; _ -> fun (V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V51)) end end end; _ -> fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V52)) end end; _ -> fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V53)) end end end; _ -> case V8 of {'Prelude.Types.Just', V54} -> case V6 of {'Builtin.MkPair', V55, V56} -> case V55 of 11 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V57, V58, V59, V60, V61, V62, V63} -> ((V58(V54))(V0)) end; 10 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V64, V65, V66, V67, V68, V69, V70} -> ((V67(V54))(V0)) end; 12 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V71, V72, V73, V74, V75, V76, V77} -> ((V76(V54))(V0)) end; _ -> case V56 of {'Prelude.Types.Just', V78} -> case V3 of {'Compiler.Common.MkConstantPrimitives', V79, V80, V81, V82, V83, V84, V85} -> (((V85(V54))(V78))(V0)) end; _ -> fun (V86) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V86)) end end end; _ -> fun (V87) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V87)) end end; _ -> fun (V88) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V88)) end end end; 10 -> case V6 of {'Builtin.MkPair', V89, V90} -> case V90 of {'Prelude.Types.Just', V91} -> case V3 of {'Compiler.Common.MkConstantPrimitives', V92, V93, V94, V95, V96, V97, V98} -> ((V94(V91))(V0)) end; _ -> case V8 of {'Prelude.Types.Just', V99} -> case V6 of {'Builtin.MkPair', V100, V101} -> case V100 of 11 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V102, V103, V104, V105, V106, V107, V108} -> ((V103(V99))(V0)) end; 10 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V109, V110, V111, V112, V113, V114, V115} -> ((V112(V99))(V0)) end; 12 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V116, V117, V118, V119, V120, V121, V122} -> ((V121(V99))(V0)) end; _ -> case V101 of {'Prelude.Types.Just', V123} -> case V3 of {'Compiler.Common.MkConstantPrimitives', V124, V125, V126, V127, V128, V129, V130} -> (((V130(V99))(V123))(V0)) end; _ -> fun (V131) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V131)) end end end; _ -> fun (V132) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V132)) end end; _ -> fun (V133) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V133)) end end end; _ -> case V8 of {'Prelude.Types.Just', V134} -> case V6 of {'Builtin.MkPair', V135, V136} -> case V135 of 11 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V137, V138, V139, V140, V141, V142, V143} -> ((V138(V134))(V0)) end; 10 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V144, V145, V146, V147, V148, V149, V150} -> ((V147(V134))(V0)) end; 12 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V151, V152, V153, V154, V155, V156, V157} -> ((V156(V134))(V0)) end; _ -> case V136 of {'Prelude.Types.Just', V158} -> case V3 of {'Compiler.Common.MkConstantPrimitives', V159, V160, V161, V162, V163, V164, V165} -> (((V165(V134))(V158))(V0)) end; _ -> fun (V166) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V166)) end end end; _ -> fun (V167) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V167)) end end; _ -> fun (V168) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V168)) end end end; 12 -> case V6 of {'Builtin.MkPair', V169, V170} -> case V170 of {'Prelude.Types.Just', V171} -> case V3 of {'Compiler.Common.MkConstantPrimitives', V172, V173, V174, V175, V176, V177, V178} -> ((V176(V171))(V0)) end; _ -> case V8 of {'Prelude.Types.Just', V179} -> case V6 of {'Builtin.MkPair', V180, V181} -> case V180 of 11 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V182, V183, V184, V185, V186, V187, V188} -> ((V183(V179))(V0)) end; 10 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V189, V190, V191, V192, V193, V194, V195} -> ((V192(V179))(V0)) end; 12 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V196, V197, V198, V199, V200, V201, V202} -> ((V201(V179))(V0)) end; _ -> case V181 of {'Prelude.Types.Just', V203} -> case V3 of {'Compiler.Common.MkConstantPrimitives', V204, V205, V206, V207, V208, V209, V210} -> (((V210(V179))(V203))(V0)) end; _ -> fun (V211) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V211)) end end end; _ -> fun (V212) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V212)) end end; _ -> fun (V213) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V213)) end end end; _ -> case V8 of {'Prelude.Types.Just', V214} -> case V6 of {'Builtin.MkPair', V215, V216} -> case V215 of 11 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V217, V218, V219, V220, V221, V222, V223} -> ((V218(V214))(V0)) end; 10 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V224, V225, V226, V227, V228, V229, V230} -> ((V227(V214))(V0)) end; 12 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V231, V232, V233, V234, V235, V236, V237} -> ((V236(V214))(V0)) end; _ -> case V216 of {'Prelude.Types.Just', V238} -> case V3 of {'Compiler.Common.MkConstantPrimitives', V239, V240, V241, V242, V243, V244, V245} -> (((V245(V214))(V238))(V0)) end; _ -> fun (V246) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V246)) end end end; _ -> fun (V247) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V247)) end end; _ -> fun (V248) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V248)) end end end; _ -> case V8 of {'Prelude.Types.Just', V249} -> case V6 of {'Builtin.MkPair', V250, V251} -> case V250 of 11 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V252, V253, V254, V255, V256, V257, V258} -> ((V253(V249))(V0)) end; 10 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V259, V260, V261, V262, V263, V264, V265} -> ((V262(V249))(V0)) end; 12 -> case V3 of {'Compiler.Common.MkConstantPrimitives', V266, V267, V268, V269, V270, V271, V272} -> ((V271(V249))(V0)) end; _ -> case V251 of {'Prelude.Types.Just', V273} -> case V3 of {'Compiler.Common.MkConstantPrimitives', V274, V275, V276, V277, V278, V279, V280} -> (((V280(V249))(V273))(V0)) end; _ -> fun (V281) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V281)) end end end; _ -> fun (V282) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V282)) end end; _ -> fun (V283) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V283)) end end end; _ -> fun (V284) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V284)) end end; _ -> fun (V285) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"invalid cast: + "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V2))/binary, <<<<" + \x{27} -> \x{27} + "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_PrimType'(V1))/binary>>/binary>>/binary>>}, V285)) end end.
'case--getExtraRuntime,getArg-5570'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Data.String':'un--trim'(V3)), <<"extraRuntime"/utf8>>)) of 1 -> {'Prelude.Types.Just', ('Idris.Idris2.Data.String':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'(1, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), V4))))}; 0 -> {'Prelude.Types.Nothing'} end end.
'case--locate-5305'(V0, V1, V2) -> case V2 of [] -> (begin (V4 = fun (V3) -> V3 end), fun (V5) -> (V4(V5)) end end(<<""/utf8>>)); [E0 | E1] -> (fun (V6, V7) -> case V7 of [] -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V19)) end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V23, V24, V25, V26)) end end end end end end end, fun (V27) -> fun (V28) -> V28 end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V31, V32, V33)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V36, V37)) end end}, $., ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V6)))) of 1 -> V6; 0 -> <<V6/binary, <<<<"."/utf8>>/binary, ('un--dylib_suffix'())/binary>>/binary>> end; [E2 | E3] -> (fun (V38, V39) -> ('Idris.Idris2.Core.Core':'un--cond'([{'Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('un--dylib_suffix'()), <<"dll"/utf8>>)) end, fun () -> <<V6/binary, <<<<"-"/utf8>>/binary, <<V38/binary, <<".dll"/utf8>>/binary>>/binary>>/binary>> end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('un--dylib_suffix'()), <<"dylib"/utf8>>)) end, fun () -> <<V6/binary, <<<<"."/utf8>>/binary, <<V38/binary, <<".dylib"/utf8>>/binary>>/binary>>/binary>> end} | []]], <<V6/binary, <<<<"."/utf8>>/binary, <<('un--dylib_suffix'())/binary, <<<<"."/utf8>>/binary, V38/binary>>/binary>>/binary>>/binary>>)) end(E2, E3)) end end(E0, E1)) end.
'case--case block in parseCC,findTarget-5159'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> case V8 of <<""/utf8>> -> {'Prelude.Types.Just', {'Builtin.MkPair', ('Idris.Idris2.Data.String':'un--trim'(V7)), []}}; _ -> {'Prelude.Types.Just', {'Builtin.MkPair', ('Idris.Idris2.Data.String':'un--trim'(V7)), ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> ('Idris.Idris2.Data.String':'un--trim'(V11)) end))(('nested--15914-5005--in--un--getOpts'(V0, V1, V2, case ('string':'next_grapheme'(V8)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V9, V10) -> V10 end(E0, E1)); _ -> <<""/utf8>> end))))}} end end.
'case--parseCC,getOpts-5030'(V0, V1, V2, V3, V4) -> case V4 of {'Builtin.MkPair', V5, V6} -> case V6 of <<""/utf8>> -> [V5 | []]; _ -> [V5 | ('nested--15914-5005--in--un--getOpts'(V0, V1, V2, case ('string':'next_grapheme'(V6)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V7, V8) -> V8 end(E0, E1)); _ -> <<""/utf8>> end))] end end.
'nested--11779-1444--in--un--tag'(V0, V1, V2) -> case V2 of 0 -> 0; 1 -> 1; 2 -> 2; 3 -> 3 end.
'nested--16515-5551--in--un--readPath'(V0, V1) -> begin (V31 = fun (V2) -> begin (V30 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Prelude.Types.Right', V30} end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V39 = fun (V36) -> case V35 of {'Prelude.Types.Right', V37} -> {'Prelude.Types.Right', V37}; {'Prelude.Types.Left', V38} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V1, V38}, V36)) end end), V39 end(V32)) end end end end.
'nested--16515-5550--in--un--paths'(V0) -> ('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V3, V4)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V5) -> ('nested--16515-5549--in--un--getArg'(V0, V5)) end, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V0)))))).
'nested--13164-2587--in--un--lookupBackend'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V7, V8) -> case V6 of {'Builtin.MkPair', V9, V10} -> case ('Idris.Idris2.Data.List':'un--find'(fun (V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V7, V12)) end end, V10)) of {'Prelude.Types.Just', V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> {'Prelude.Types.Just', {'Builtin.MkPair', V9, V16}} end; {'Prelude.Types.Nothing'} -> ('nested--13164-2587--in--un--lookupBackend'(V0, V1, V2, V3, V4, V8, {'Builtin.MkPair', V9, V10})) end end end(E0, E1)) end.
'nested--15914-5006--in--un--hasTarget'(V0, V1, V2, V3, V4) -> case ('Idris.Idris2.Data.String':'un--span'(fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V5, $:)) end, V4)) of {'Builtin.MkPair', V6, V7} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V6, V3)) end.
'nested--15914-5005--in--un--getOpts'(V0, V1, V2, V3) -> case V3 of <<""/utf8>> -> []; _ -> ('case--parseCC,getOpts-5030'(V0, V1, V2, V3, ('Idris.Idris2.Data.String':'un--span'(fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V4, $,)) end, V3)))) end.
'nested--13164-2588--in--un--getExports'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V6) -> case V6 of {'Builtin.MkPair', V7, V8} -> begin (V42 = fun (V9) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(case V5 of {'Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V10 end, V7, V9)) end), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V48 = fun (V47) -> {'Prelude.Types.Right', {'Builtin.MkPair', V46, V8}} end), V48 end(V43)) end end end end end end, ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V49) -> ('nested--13164-2587--in--un--lookupBackend'(V0, V1, V2, V3, V4, V3, V49)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V5 of {'Core.Context.MkDefs', V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81} -> V81 end)))), [])).
'nested--16515-5549--in--un--getArg'(V0, V1) -> ('case--getExtraRuntime,getArg-5570'(V0, V1, ('Idris.Idris2.Data.String':'un--break'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, $=)) end, V1)))).
'nested--12931-2366--in--un--fullShow'(V0, V1, V2, V3) -> case V3 of {'Core.Name.DN', V4, V5} -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)) end.
'nested--15914-5007--in--un--findTarget'(V0, V1, V2, V3, V4) -> case V4 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V5, V6) -> case ('nested--15914-5006--in--un--hasTarget'(V0, V1, V2, V3, V5)) of 1 -> ('case--case block in parseCC,findTarget-5159'(V0, V1, V2, V5, V6, V3, ('Idris.Idris2.Data.String':'un--span'(fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V7, $:)) end, V5)))); 0 -> ('nested--15914-5007--in--un--findTarget'(V0, V1, V2, V3, V6)) end end(E0, E1)) end.
'nested--12931-2367--in--un--dumpDef'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> <<('nested--12931-2366--in--un--fullShow'(V0, V1, V2, V4))/binary, <<<<" = "/utf8>>/binary, <<case V0 of {'Prelude.Show.MkShow', V6, V7} -> (V6(V5)) end/binary, <<"\x{a}"/utf8>>/binary>>/binary>>/binary>> end.
'dn--un--max_Ord_UsePhase'(V0, V1) -> case ('dn--un-->_Ord_UsePhase'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--compare_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--11779-1444--in--un--tag'(V1, V0, V0)), ('nested--11779-1444--in--un--tag'(V1, V0, V1)))).
'dn--un-->_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_UsePhase'(V0, V1)), 2)).
'dn--un-->=_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_UsePhase'(V0, V1)), 0)).
'un--warnIfHole'(V0, V1, V2) -> case V1 of {'Core.CompileExpr.MkNmError', V3} -> begin (V4 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<<<"Warning: compiling hole "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0))/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V2))), {'Prelude.Types.Right', V4} end; _ -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end.
'un--skipUnusedNames'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> ('un--skipUnusedNames'(V2)); {'Core.Name.MN', V3, V4} -> 0; {'Core.Name.Resolved', V5} -> 0; _ -> 1 end.
'un--replaceEntry'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Prelude.Types.Nothing'} -> fun (V4) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Prelude.Types.Just', V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> begin (V8 = ('Idris.Idris2.Core.Context':'un--addContextEntry'(V0, V6, {'Core.Name.Resolved', V2}, V7))), ((begin (V24 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V21, V22, V23)) end end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end((begin (V16 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> {'Prelude.Types.Right', (V12(V15))} end end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V9) -> {'Builtin.MkUnit'} end))))(V8)) end end end end.
'un--parseCC'(V0, V1) -> case V0 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('nested--15914-5007--in--un--findTarget'(V2, V3, V1, V2, V1)), fun () -> ('un--parseCC'(V3, V1)) end)) end(E0, E1)) end.
'un--nonErased'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V78 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V77 = fun (V49) -> case V48 of {'Prelude.Types.Just', V50} -> {'Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V50 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> V58 end, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V73) -> fun (V74) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V73, V74)) end end, 0, fun (V75) -> fun (V76) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V75, V76)) end end, 1}))))}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', 1} end end), V77 end(V45)) end end end end), V78 end(V8)) end end end end.
'un--natHackNames'() -> [{'Core.Name.UN', {'Core.Name.Basic', <<"prim__sub_Integer"/utf8>>}} | [{'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"prim__integerToNat"/utf8>>}}} | [{'Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--eqOrdNS'()), {'Core.Name.UN', {'Core.Name.Basic', <<"compareInteger"/utf8>>}}} | []]]].
'un--locate'(V0, V1) -> begin (V2 = ('case--locate-5305'(V1, V0, ('Idris.Idris2.Data.String':'un--words'(V1))))), begin (V5 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(('Idris.Idris2.Core.Directory':'un--findLibraryFile'(V0, V2)), fun (V3) -> fun (V4) -> {'Prelude.Types.Right', V2} end end))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = fun (V10) -> {'Prelude.Types.Right', {'Builtin.MkPair', V2, V9}} end), V11 end(V6)) end end end end end.
'un--isExported'(V0) -> case V0 of 2 -> 1; 1 -> 1; 0 -> 0 end.
'un--incCompile'(V0, V1, V2, V3) -> case V2 of {'Compiler.Common.MkCG', V4, V5, V6, V7, V8} -> case V7 of {'Prelude.Types.Just', V9} -> (((V9(V0))(V1))(V3)); {'Prelude.Types.Nothing'} -> fun (V10) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end.
'un--getNamedDef'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> case V3 of {'Builtin.MkPair', V4, V5} -> begin (V6 = ('Idris.Idris2.Core.CompileExpr':'un--forgetDef'(V5))), begin (V8 = fun (V7) -> ('un--warnIfHole'(V2, V6, V7)) end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V14 = fun (V13) -> {'Prelude.Types.Right', {'Builtin.MkPair', V2, {'Builtin.MkPair', V4, V6}}} end), V14 end(V9)) end end end end end end end.
'un--getMinimalDef'(V0) -> case V0 of {'Core.Context.Context.Decoded', V1} -> fun (V2) -> {'Prelude.Types.Right', {'Builtin.MkPair', V1, {'Prelude.Types.Nothing'}}} end; {'Core.Context.Context.Coded', V3, V4} -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Binary.Prims.Bin'}, V4))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V87 = begin (V13 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Core.Binary.Prims.dn--un--__mkTTC', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CDef'(V10, V11)) end end, fun (V12) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CDef'(V12)) end}, V9))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V86 = begin (V51 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Core.Binary.Prims.dn--un--__mkTTC', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Core.Binary.Prims.dn--un--__mkTTC', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Core.Binary.Prims.dn--un--__mkTTC', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V22, V23)) end end, fun (V24) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V24)) end}, {'Core.Binary.Prims.dn--un--__mkTTC', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V25, V26)) end end, fun (V27) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V27)) end}}, V20, V21)) end end, fun (V28) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Core.Binary.Prims.dn--un--__mkTTC', fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V29, V30)) end end, fun (V31) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V31)) end}, {'Core.Binary.Prims.dn--un--__mkTTC', fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V32, V33)) end end, fun (V34) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V34)) end}}, V28)) end}, V18, V19)) end end, fun (V35) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Core.Binary.Prims.dn--un--__mkTTC', fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Core.Binary.Prims.dn--un--__mkTTC', fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V38, V39)) end end, fun (V40) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V40)) end}, {'Core.Binary.Prims.dn--un--__mkTTC', fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V41, V42)) end end, fun (V43) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V43)) end}}, V36, V37)) end end, fun (V44) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Core.Binary.Prims.dn--un--__mkTTC', fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V45, V46)) end end, fun (V47) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V47)) end}, {'Core.Binary.Prims.dn--un--__mkTTC', fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V48, V49)) end end, fun (V50) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V50)) end}}, V44)) end}, V35)) end}, V9))), fun (V52) -> begin (V53 = (V51(V52))), case V53 of {'Prelude.Types.Left', V54} -> {'Prelude.Types.Left', V54}; {'Prelude.Types.Right', V55} -> (begin (V85 = begin (V64 = ((begin (V61 = fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V59, V60)) end end end end), fun (V62) -> fun (V63) -> ((((V61('erased'))('erased'))(V62))(V63)) end end end(fun (V56) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--fromList'(V56)) end))(V55))), begin (V65 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V9))), fun (V66) -> begin (V67 = (V65(V66))), case V67 of {'Prelude.Types.Left', V68} -> {'Prelude.Types.Left', V68}; {'Prelude.Types.Right', V69} -> (begin (V84 = begin (V70 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V9))), fun (V71) -> begin (V72 = (V70(V71))), case V72 of {'Prelude.Types.Left', V73} -> {'Prelude.Types.Left', V73}; {'Prelude.Types.Right', V74} -> (begin (V83 = begin (V75 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V9))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V82 = begin (V80 = {'Core.Context.Context.MkGlobalDef', V69, V79, {'Core.TT.Erased', V69, {'Core.TT.Placeholder'}}, [], [], [], [], V74, [], 2, {'Core.TT.MkTotality', {'Core.TT.Unchecked'}, {'Core.TT.IsCovering'}}, [], {'Prelude.Types.Nothing'}, V64, 0, 0, 1, {'Core.Context.Context.None'}, V17, {'Prelude.Types.Nothing'}, [], {'Prelude.Types.Nothing'}}), fun (V81) -> {'Prelude.Types.Right', {'Builtin.MkPair', V80, {'Prelude.Types.Just', {'Builtin.MkPair', V3, V4}}}} end end), V82 end(V76)) end end end end), V83 end(V71)) end end end end), V84 end(V66)) end end end end end), V85 end(V52)) end end end end), V86 end(V14)) end end end end), V87 end(V6)) end end end end end.
'un--getIncCompileData'(V0, V1, V2) -> begin (V8 = begin (V3 = V0), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V136 = begin (V45 = ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V12 of {'Core.Context.MkDefs', V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} -> V37 end))), begin (V52 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V46) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V47, V48)) end end, fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V49, V50, V51)) end end end}, V46)) end, V45, []))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V135 = begin (V58 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V57) -> ('un--nonErased'(V0, V57)) end, V56))), fun (V59) -> begin (V60 = (V58(V59))), case V60 of {'Prelude.Types.Left', V61} -> {'Prelude.Types.Left', V61}; {'Prelude.Types.Right', V62} -> (begin (V134 = begin (V83 = begin (V64 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V63) -> ('un--compDef'(V0, V63)) end, V62, []))), ((begin (V80 = fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V77, V78, V79)) end end end end end), fun (V81) -> fun (V82) -> ((((V80('erased'))('erased'))(V81))(V82)) end end end((begin (V72 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> case V69 of {'Prelude.Types.Left', V70} -> {'Prelude.Types.Left', V70}; {'Prelude.Types.Right', V71} -> {'Prelude.Types.Right', (V68(V71))} end end end end end), fun (V73) -> fun (V74) -> ((((V72('erased'))('erased'))(V73))(V74)) end end end(fun (V65) -> ('Idris.Idris2.Data.List':'un--catMaybes'(V65)) end))))(V64)) end), fun (V84) -> begin (V85 = (V83(V84))), case V85 of {'Prelude.Types.Left', V86} -> {'Prelude.Types.Left', V86}; {'Prelude.Types.Right', V87} -> (begin (V133 = begin (V89 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V88) -> ('un--getNamedDef'(V0, V88)) end, V87, []))), fun (V90) -> begin (V91 = (V89(V90))), case V91 of {'Prelude.Types.Left', V92} -> {'Prelude.Types.Left', V92}; {'Prelude.Types.Right', V93} -> (begin (V132 = begin (V96 = case ('dn--un-->=_Ord_UsePhase'(V2, 1)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"Lambda lift"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V94) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V0, V1, V94)) end, V87, [])))); 0 -> fun (V95) -> {'Prelude.Types.Right', []} end end), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V131 = begin (V104 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V101, V102)) end end, []}, fun (V103) -> V103 end, V100))), begin (V116 = case ('dn--un-->=_Ord_UsePhase'(V2, 2)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"Get ANF"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V105) -> case V105 of {'Builtin.MkPair', V106, V107} -> begin (V108 = ('Idris.Idris2.Compiler.ANF':'un--toANF'(V107))), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V114 = fun (V113) -> {'Prelude.Types.Right', {'Builtin.MkPair', V106, V112}} end), V114 end(V109)) end end end end end end, V104, [])))); 0 -> fun (V115) -> {'Prelude.Types.Right', []} end end), fun (V117) -> begin (V118 = (V116(V117))), case V118 of {'Prelude.Types.Left', V119} -> {'Prelude.Types.Left', V119}; {'Prelude.Types.Right', V120} -> (begin (V130 = begin (V123 = case ('dn--un-->=_Ord_UsePhase'(V2, 3)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"Get VM Code"/utf8>> end, fun (V121) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V120))} end)); 0 -> fun (V122) -> {'Prelude.Types.Right', []} end end), fun (V124) -> begin (V125 = (V123(V124))), case V125 of {'Prelude.Types.Left', V126} -> {'Prelude.Types.Left', V126}; {'Prelude.Types.Right', V127} -> (begin (V129 = fun (V128) -> {'Prelude.Types.Right', {'Compiler.Common.MkCompileData', {'Core.CompileExpr.CErased', ('Idris.Idris2.Core.FC':'un--emptyFC'())}, [], V93, V104, V120, V127}} end), V129 end(V124)) end end end end), V130 end(V117)) end end end end end), V131 end(V97)) end end end end), V132 end(V90)) end end end end), V133 end(V84)) end end end end), V134 end(V59)) end end end end), V135 end(V53)) end end end end end), V136 end(V9)) end end end end.
'un--getExtraRuntime'(V0) -> begin (V2 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V1) -> ('nested--16515-5551--in--un--readPath'(V0, V1)) end, ('nested--16515-5550--in--un--paths'(V0)), []))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V11 = fun (V7) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V8) -> fun (V9) -> <<V8/binary, V9/binary>> end end, <<""/utf8>>}, fun (V10) -> V10 end, ('Idris.Idris2.Data.List':'un--intersperse'(<<"\x{a}"/utf8>>, V6))))} end), V11 end(V3)) end end end end.
'un--getExportedCompileData'(V0, V1, V2, V3, V4) -> begin (V10 = begin (V5 = V0), fun (V6) -> begin (V9 = (begin (V7 = V5), fun (V8) -> ('erlang':'get'(V7)) end end(V6))), {'Prelude.Types.Right', V9} end end end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V316 = begin (V15 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V315 = begin (V20 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V0))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V314 = begin (V54 = fun (V25) -> begin (V53 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> V32 end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V36(V38))), begin (V40 = (V37(V38))), (V39(V40)) end end end end end end end}, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), ((V44(V46))(V45)) end end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V48(V49))), (V50(V49)) end end end end}, fun (V51) -> fun (V52) -> V52 end end}, V24))(V25))), {'Prelude.Types.Right', V53} end end), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V313 = begin (V92 = ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, V3, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V59) -> ('un--skipUnusedNames'(V59)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.Context':'un--getResolvedAs'(case V14 of {'Core.Context.MkDefs', V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91} -> V60 end))))))))), begin (V133 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V93) -> begin (V126 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V93, case V14 of {'Core.Context.MkDefs', V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125} -> V94 end))), fun (V127) -> begin (V128 = (V126(V127))), case V128 of {'Prelude.Types.Left', V129} -> {'Prelude.Types.Left', V129}; {'Prelude.Types.Right', V130} -> (begin (V132 = fun (V131) -> {'Prelude.Types.Right', {'Builtin.MkPair', V93, V130}} end), V132 end(V127)) end end end end end, V92, []))), fun (V134) -> begin (V135 = (V133(V134))), case V135 of {'Prelude.Types.Left', V136} -> {'Prelude.Types.Left', V136}; {'Prelude.Types.Right', V137} -> (begin (V312 = begin (V139 = ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V138) -> ('un--exportedName'(V138)) end, V137))), begin (V146 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V140) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V141, V142)) end end, fun (V143) -> fun (V144) -> fun (V145) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V143, V144, V145)) end end end}, V140)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--natHackNames'()), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V139, V4)))), []))), fun (V147) -> begin (V148 = (V146(V147))), case V148 of {'Prelude.Types.Left', V149} -> {'Prelude.Types.Left', V149}; {'Prelude.Types.Right', V150} -> (begin (V311 = begin (V151 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"++ Get names"/utf8>> end, ('un--getAllDesc'(V0, V150, V58, V14))))), fun (V152) -> begin (V153 = (V151(V152))), case V153 of {'Prelude.Types.Left', V154} -> {'Prelude.Types.Left', V154}; {'Prelude.Types.Right', V155} -> (begin (V310 = begin (V185 = fun (V156) -> begin (V184 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V159, V160, V161)) end end end end end, fun (V162) -> fun (V163) -> fun (V164) -> V163 end end end, fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> begin (V170 = (V167(V169))), begin (V171 = (V168(V169))), (V170(V171)) end end end end end end end}, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), ((V175(V177))(V176)) end end end end end end, fun (V178) -> fun (V179) -> fun (V180) -> begin (V181 = (V179(V180))), (V181(V180)) end end end end}, fun (V182) -> fun (V183) -> V183 end end}, V58))(V156))), {'Prelude.Types.Right', V184} end end), fun (V186) -> begin (V187 = (V185(V186))), case V187 of {'Prelude.Types.Left', V188} -> {'Prelude.Types.Left', V188}; {'Prelude.Types.Right', V189} -> (begin (V309 = begin (V190 = ('Idris.Idris2.Data.List':'un--catMaybes'(V189))), begin (V199 = ((begin (V196 = fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V194, V195)) end end end end), fun (V197) -> fun (V198) -> ((((V196('erased'))('erased'))(V197))(V198)) end end end(fun (V191) -> {'Core.Name.Resolved', ('Idris.Idris2.Builtin':'un--fst'(V191))} end))(V190))), begin (V206 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V200) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V201) -> fun (V202) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V201, V202)) end end, fun (V203) -> fun (V204) -> fun (V205) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V203, V204, V205)) end end end}, V200)) end, V199, []))), fun (V207) -> begin (V208 = (V206(V207))), case V208 of {'Prelude.Types.Left', V209} -> {'Prelude.Types.Left', V209}; {'Prelude.Types.Right', V210} -> (begin (V308 = begin (V217 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V211) -> ('un--nonErased'(V0, V211)) end, ('Idris.Idris2.Data.List':'un--nub'({'Prelude.EqOrd.MkEq', fun (V212) -> fun (V213) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V212, V213)) end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V214, V215)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--filterAppend'({'Prelude.Basics.Lin'}, fun (V216) -> ('un--skipUnusedNames'(V216)) end, V210))))))), fun (V218) -> begin (V219 = (V217(V218))), case V219 of {'Prelude.Types.Left', V220} -> {'Prelude.Types.Left', V220}; {'Prelude.Types.Right', V221} -> (begin (V307 = begin (V223 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"++ Merge lambda"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V222) -> ('Idris.Idris2.Compiler.Inline':'un--mergeLamDef'(V0, V222)) end, V221))))), fun (V224) -> begin (V225 = (V223(V224))), case V225 of {'Prelude.Types.Left', V226} -> {'Prelude.Types.Left', V226}; {'Prelude.Types.Right', V227} -> (begin (V306 = begin (V229 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"++ Fix arity"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V228) -> ('Idris.Idris2.Compiler.Inline':'un--fixArityDef'(V0, V228)) end, V221))))), fun (V230) -> begin (V231 = (V229(V230))), case V231 of {'Prelude.Types.Left', V232} -> {'Prelude.Types.Left', V232}; {'Prelude.Types.Right', V233} -> (begin (V305 = begin (V254 = begin (V235 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V234) -> ('un--compDef'(V0, V234)) end, V221, []))), ((begin (V251 = fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V248, V249, V250)) end end end end end), fun (V252) -> fun (V253) -> ((((V251('erased'))('erased'))(V252))(V253)) end end end((begin (V243 = fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> case V240 of {'Prelude.Types.Left', V241} -> {'Prelude.Types.Left', V241}; {'Prelude.Types.Right', V242} -> {'Prelude.Types.Right', (V239(V242))} end end end end end), fun (V244) -> fun (V245) -> ((((V243('erased'))('erased'))(V244))(V245)) end end end(fun (V236) -> ('Idris.Idris2.Data.List':'un--catMaybes'(V236)) end))))(V235)) end), fun (V255) -> begin (V256 = (V254(V255))), case V256 of {'Prelude.Types.Left', V257} -> {'Prelude.Types.Left', V257}; {'Prelude.Types.Right', V258} -> (begin (V304 = begin (V260 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V259) -> ('un--getNamedDef'(V0, V259)) end, V258, []))), fun (V261) -> begin (V262 = (V260(V261))), case V262 of {'Prelude.Types.Left', V263} -> {'Prelude.Types.Left', V263}; {'Prelude.Types.Right', V264} -> (begin (V303 = begin (V267 = case ('dn--un-->=_Ord_UsePhase'(V2, 1)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"++ Lambda lift"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V265) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V0, V1, V265)) end, V258, [])))); 0 -> fun (V266) -> {'Prelude.Types.Right', []} end end), fun (V268) -> begin (V269 = (V267(V268))), case V269 of {'Prelude.Types.Left', V270} -> {'Prelude.Types.Left', V270}; {'Prelude.Types.Right', V271} -> (begin (V302 = begin (V275 = ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V272) -> fun (V273) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V272, V273)) end end, []}, fun (V274) -> V274 end, V271))), begin (V287 = case ('dn--un-->=_Ord_UsePhase'(V2, 2)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"++ Get ANF"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V276) -> case V276 of {'Builtin.MkPair', V277, V278} -> begin (V279 = ('Idris.Idris2.Compiler.ANF':'un--toANF'(V278))), fun (V280) -> begin (V281 = (V279(V280))), case V281 of {'Prelude.Types.Left', V282} -> {'Prelude.Types.Left', V282}; {'Prelude.Types.Right', V283} -> (begin (V285 = fun (V284) -> {'Prelude.Types.Right', {'Builtin.MkPair', V277, V283}} end), V285 end(V280)) end end end end end end, V275, [])))); 0 -> fun (V286) -> {'Prelude.Types.Right', []} end end), fun (V288) -> begin (V289 = (V287(V288))), case V289 of {'Prelude.Types.Left', V290} -> {'Prelude.Types.Left', V290}; {'Prelude.Types.Right', V291} -> (begin (V301 = begin (V294 = case ('dn--un-->=_Ord_UsePhase'(V2, 3)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"++ Get VM Code"/utf8>> end, fun (V292) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V291))} end)); 0 -> fun (V293) -> {'Prelude.Types.Right', []} end end), fun (V295) -> begin (V296 = (V294(V295))), case V296 of {'Prelude.Types.Left', V297} -> {'Prelude.Types.Left', V297}; {'Prelude.Types.Right', V298} -> (begin (V300 = fun (V299) -> {'Prelude.Types.Right', {'Compiler.Common.MkCompileData', {'Core.CompileExpr.CErased', ('Idris.Idris2.Core.FC':'un--emptyFC'())}, [], V264, V275, V291, V298}} end), V300 end(V295)) end end end end), V301 end(V288)) end end end end end), V302 end(V268)) end end end end), V303 end(V261)) end end end end), V304 end(V255)) end end end end), V305 end(V230)) end end end end), V306 end(V224)) end end end end), V307 end(V218)) end end end end), V308 end(V207)) end end end end end end), V309 end(V186)) end end end end), V310 end(V152)) end end end end), V311 end(V147)) end end end end end), V312 end(V134)) end end end end end), V313 end(V55)) end end end end), V314 end(V21)) end end end end), V315 end(V16)) end end end end), V316 end(V11)) end end end end.
'un--getCompileDataWith'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.execute"/utf8>>, 10, fun () -> <<<<"Getting compiled data for: "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V4))/binary>> end))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V885 = begin (V10 = ('Idris.Idris2.Core.Context':'un--getSession'(V0))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V884 = begin (V157 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V17) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V18) -> V18 end end, fun () -> fun (V19) -> fun (V20) -> ('dn--un--max_Ord_UsePhase'(V19, V20)) end end end, V17)) end, V15, V16)) end end, V3, [((begin (V52 = fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V50, V51)) end end end end), fun (V53) -> fun (V54) -> ((((V52('erased'))('erased'))(V53))(V54)) end end end(fun (V47) -> 0 end))(case V14 of {'Core.Options.MkSessionOpts', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} -> V35 end)) | [((begin (V86 = fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V84, V85)) end end end end), fun (V87) -> fun (V88) -> ((((V86('erased'))('erased'))(V87))(V88)) end end end(fun (V81) -> 1 end))(case V14 of {'Core.Options.MkSessionOpts', V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80} -> V70 end)) | [((begin (V120 = fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V118, V119)) end end end end), fun (V121) -> fun (V122) -> ((((V120('erased'))('erased'))(V121))(V122)) end end end(fun (V115) -> 2 end))(case V14 of {'Core.Options.MkSessionOpts', V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114} -> V105 end)) | [((begin (V154 = fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V152, V153)) end end end end), fun (V155) -> fun (V156) -> ((((V154('erased'))('erased'))(V155))(V156)) end end end(fun (V149) -> 3 end))(case V14 of {'Core.Options.MkSessionOpts', V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148} -> V140 end)) | []]]]]))), begin (V158 = ('Idris.Idris2.Core.TT':'un--addMetas'(1, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V4))), begin (V311 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.Core':'un--traverse_'(V159, V160)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V158)), fun (V161) -> begin (V167 = begin (V162 = V0), fun (V163) -> begin (V166 = (begin (V164 = V162), fun (V165) -> ('erlang':'get'(V164)) end end(V163))), {'Prelude.Types.Right', V166} end end end), fun (V168) -> begin (V169 = (V167(V168))), case V169 of {'Prelude.Types.Left', V170} -> {'Prelude.Types.Left', V170}; {'Prelude.Types.Right', V171} -> (begin (V310 = begin (V204 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V161, case V171 of {'Core.Context.MkDefs', V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203} -> V172 end))), fun (V205) -> begin (V206 = (V204(V205))), case V206 of {'Prelude.Types.Left', V207} -> {'Prelude.Types.Left', V207}; {'Prelude.Types.Right', V208} -> (begin (V309 = case V208 of {'Prelude.Types.Just', V209} -> case V209 of {'Core.Context.Context.MkGlobalDef', V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231} -> case V227 of {'Core.Context.Context.Hole', V232, V233} -> begin (V256 = case V209 of {'Core.Context.Context.MkGlobalDef', V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255} -> V235 end), begin (V257 = {'Core.CompileExpr.MkError', {'Core.CompileExpr.CCrash', ('Idris.Idris2.Core.FC':'un--emptyFC'()), <<<<"Encountered unimplemented hole "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V256))/binary>>}}), begin (V280 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V161, case V209 of {'Core.Context.Context.MkGlobalDef', V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279} -> {'Core.Context.Context.MkGlobalDef', V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, {'Prelude.Types.Just', V257}, {'Prelude.Types.Just', ('Idris.Idris2.Core.CompileExpr':'un--forgetDef'(V257))}, V278, V279} end))), ((begin (V296 = fun (V291) -> fun (V292) -> fun (V293) -> fun (V294) -> fun (V295) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V293, V294, V295)) end end end end end), fun (V297) -> fun (V298) -> ((((V296('erased'))('erased'))(V297))(V298)) end end end((begin (V288 = fun (V282) -> fun (V283) -> fun (V284) -> fun (V285) -> case V285 of {'Prelude.Types.Left', V286} -> {'Prelude.Types.Left', V286}; {'Prelude.Types.Right', V287} -> {'Prelude.Types.Right', (V284(V287))} end end end end end), fun (V289) -> fun (V290) -> ((((V288('erased'))('erased'))(V289))(V290)) end end end(fun (V281) -> {'Builtin.MkUnit'} end))))(V280)) end end end; _ -> fun (V299) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V301 = fun (V300) -> V300 end), fun (V302) -> (V301(V302)) end end(<<"compile.execute"/utf8>>)), 50, fun () -> ('Idris.Idris2.Data.String':'un--unwords'([(begin (V304 = fun (V303) -> V303 end), fun (V305) -> (V304(V305)) end end(<<"Couldn\x{27}t find"/utf8>>)) | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V161)) | [(begin (V307 = fun (V306) -> V306 end), fun (V308) -> (V307(V308)) end end(<<"(probably impossible)"/utf8>>)) | []]]])) end)) end), V309 end(V205)) end end end end), V310 end(V168)) end end end end end))), fun (V312) -> begin (V313 = (V311(V312))), case V313 of {'Prelude.Types.Left', V314} -> {'Prelude.Types.Left', V314}; {'Prelude.Types.Right', V315} -> (begin (V883 = begin (V321 = begin (V316 = V0), fun (V317) -> begin (V320 = (begin (V318 = V316), fun (V319) -> ('erlang':'get'(V318)) end end(V317))), {'Prelude.Types.Right', V320} end end end), fun (V322) -> begin (V323 = (V321(V322))), case V323 of {'Prelude.Types.Left', V324} -> {'Prelude.Types.Left', V324}; {'Prelude.Types.Right', V325} -> (begin (V882 = begin (V326 = ('Idris.Idris2.Core.TT':'un--getRefs'({'Core.Name.Resolved', -1}, V4))), begin (V328 = case ('Idris.Idris2.Data.List':'un--isNil'(V1)) of 1 -> fun (V327) -> {'Prelude.Types.Right', []} end; 0 -> ('nested--13164-2588--in--un--getExports'(V4, V3, V2, V1, V0, V325)) end), fun (V329) -> begin (V330 = (V328(V329))), case V330 of {'Prelude.Types.Left', V331} -> {'Prelude.Types.Left', V331}; {'Prelude.Types.Right', V332} -> (begin (V881 = begin (V347 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.export"/utf8>>, 25, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V333) -> fun (V334) -> <<V333/binary, V334/binary>> end end, <<""/utf8>>}, fun (V335) -> V335 end, [<<"exporting: "/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V336) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V336)) end, fun (V337) -> fun (V338) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V337, V338)) end end}, ((begin (V344 = fun (V340) -> fun (V341) -> fun (V342) -> fun (V343) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V342, V343)) end end end end), fun (V345) -> fun (V346) -> ((((V344('erased'))('erased'))(V345))(V346)) end end end(fun (V339) -> ('Idris.Idris2.Builtin':'un--fst'(V339)) end))(V332)))) | []]])) end))), fun (V348) -> begin (V349 = (V347(V348))), case V349 of {'Prelude.Types.Left', V350} -> {'Prelude.Types.Left', V350}; {'Prelude.Types.Right', V351} -> (begin (V880 = begin (V362 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Libraries.Data.NameMap':'un--mergeWith'(fun (V352) -> fun (V353) -> V352 end end, V158, V326)))), ((begin (V359 = fun (V355) -> fun (V356) -> fun (V357) -> fun (V358) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V357, V358)) end end end end), fun (V360) -> fun (V361) -> ((((V359('erased'))('erased'))(V360))(V361)) end end end(fun (V354) -> ('Idris.Idris2.Builtin':'un--fst'(V354)) end))(V332))))), begin (V374 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.execute"/utf8>>, 70, fun () -> <<<<"Found names: "/utf8>>/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V363) -> fun (V364) -> <<V363/binary, V364/binary>> end end, <<""/utf8>>}, fun (V365) -> V365 end, ('Idris.Idris2.Data.List':'un--intersperse'(<<", "/utf8>>, ((begin (V371 = fun (V367) -> fun (V368) -> fun (V369) -> fun (V370) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V369, V370)) end end end end), fun (V372) -> fun (V373) -> ((((V371('erased'))('erased'))(V372))(V373)) end end end(fun (V366) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V366)) end))(V362))))))/binary>> end))), fun (V375) -> begin (V376 = (V374(V375))), case V376 of {'Prelude.Types.Left', V377} -> {'Prelude.Types.Left', V377}; {'Prelude.Types.Right', V378} -> (begin (V879 = begin (V383 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V379) -> fun (V380) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V379, V380)) end end, fun (V381) -> fun (V382) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V381, V382)) end end}, V4))), fun (V384) -> begin (V385 = (V383(V384))), case V385 of {'Prelude.Types.Left', V386} -> {'Prelude.Types.Left', V386}; {'Prelude.Types.Right', V387} -> (begin (V878 = begin (V394 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V388) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V389) -> fun (V390) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V389, V390)) end end, fun (V391) -> fun (V392) -> fun (V393) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V391, V392, V393)) end end end}, V388)) end, ('un--natHackNames'()), []))), fun (V395) -> begin (V396 = (V394(V395))), case V396 of {'Prelude.Types.Left', V397} -> {'Prelude.Types.Left', V397}; {'Prelude.Types.Right', V398} -> (begin (V877 = begin (V399 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V0))), fun (V400) -> begin (V401 = (V399(V400))), case V401 of {'Prelude.Types.Left', V402} -> {'Prelude.Types.Left', V402}; {'Prelude.Types.Right', V403} -> (begin (V876 = begin (V433 = fun (V404) -> begin (V432 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V405) -> fun (V406) -> fun (V407) -> fun (V408) -> fun (V409) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V407, V408, V409)) end end end end end, fun (V410) -> fun (V411) -> fun (V412) -> V411 end end end, fun (V413) -> fun (V414) -> fun (V415) -> fun (V416) -> fun (V417) -> begin (V418 = (V415(V417))), begin (V419 = (V416(V417))), (V418(V419)) end end end end end end end}, fun (V420) -> fun (V421) -> fun (V422) -> fun (V423) -> fun (V424) -> begin (V425 = (V422(V424))), ((V423(V425))(V424)) end end end end end end, fun (V426) -> fun (V427) -> fun (V428) -> begin (V429 = (V427(V428))), (V429(V428)) end end end end}, fun (V430) -> fun (V431) -> V431 end end}, V403))(V404))), {'Prelude.Types.Right', V432} end end), fun (V434) -> begin (V435 = (V433(V434))), case V435 of {'Prelude.Types.Left', V436} -> {'Prelude.Types.Left', V436}; {'Prelude.Types.Right', V437} -> (begin (V875 = begin (V443 = begin (V438 = V0), fun (V439) -> begin (V442 = (begin (V440 = V438), fun (V441) -> ('erlang':'get'(V440)) end end(V439))), {'Prelude.Types.Right', V442} end end end), fun (V444) -> begin (V445 = (V443(V444))), case V445 of {'Prelude.Types.Left', V446} -> {'Prelude.Types.Left', V446}; {'Prelude.Types.Right', V447} -> (begin (V874 = begin (V448 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"Get names"/utf8>> end, ('un--getAllDesc'(V0, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V398, V362)), V437, V447))))), fun (V449) -> begin (V450 = (V448(V449))), case V450 of {'Prelude.Types.Left', V451} -> {'Prelude.Types.Left', V451}; {'Prelude.Types.Right', V452} -> (begin (V873 = begin (V482 = fun (V453) -> begin (V481 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V454) -> fun (V455) -> fun (V456) -> fun (V457) -> fun (V458) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V456, V457, V458)) end end end end end, fun (V459) -> fun (V460) -> fun (V461) -> V460 end end end, fun (V462) -> fun (V463) -> fun (V464) -> fun (V465) -> fun (V466) -> begin (V467 = (V464(V466))), begin (V468 = (V465(V466))), (V467(V468)) end end end end end end end}, fun (V469) -> fun (V470) -> fun (V471) -> fun (V472) -> fun (V473) -> begin (V474 = (V471(V473))), ((V472(V474))(V473)) end end end end end end, fun (V475) -> fun (V476) -> fun (V477) -> begin (V478 = (V476(V477))), (V478(V477)) end end end end}, fun (V479) -> fun (V480) -> V480 end end}, V437))(V453))), {'Prelude.Types.Right', V481} end end), fun (V483) -> begin (V484 = (V482(V483))), case V484 of {'Prelude.Types.Left', V485} -> {'Prelude.Types.Left', V485}; {'Prelude.Types.Right', V486} -> (begin (V872 = begin (V487 = ('Idris.Idris2.Data.List':'un--catMaybes'(V486))), begin (V496 = ((begin (V493 = fun (V489) -> fun (V490) -> fun (V491) -> fun (V492) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V491, V492)) end end end end), fun (V494) -> fun (V495) -> ((((V493('erased'))('erased'))(V494))(V495)) end end end(fun (V488) -> {'Core.Name.Resolved', ('Idris.Idris2.Builtin':'un--fst'(V488))} end))(V487))), begin (V503 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V497) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V498) -> fun (V499) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V498, V499)) end end, fun (V500) -> fun (V501) -> fun (V502) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V500, V501, V502)) end end end}, V497)) end, V496, []))), fun (V504) -> begin (V505 = (V503(V504))), case V505 of {'Prelude.Types.Left', V506} -> {'Prelude.Types.Left', V506}; {'Prelude.Types.Right', V507} -> (begin (V871 = begin (V525 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.execute"/utf8>>, 30, fun () -> <<<<"All names: "/utf8>>/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V508) -> fun (V509) -> <<V508/binary, V509/binary>> end end, <<""/utf8>>}, fun (V510) -> V510 end, ('Idris.Idris2.Data.List':'un--intersperse'(<<", "/utf8>>, ((begin (V522 = fun (V518) -> fun (V519) -> fun (V520) -> fun (V521) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V520, V521)) end end end end), fun (V523) -> fun (V524) -> ((((V522('erased'))('erased'))(V523))(V524)) end end end(fun (V511) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V512) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V512)) end, fun (V513) -> fun (V514) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V513, V514)) end end}, {'Prelude.Show.MkShow', fun (V515) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V515)) end, fun (V516) -> fun (V517) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V516, V517)) end end}}, V511)) end))(('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V496, V507))))))))/binary>> end))), fun (V526) -> begin (V527 = (V525(V526))), case V527 of {'Prelude.Types.Left', V528} -> {'Prelude.Types.Left', V528}; {'Prelude.Types.Right', V529} -> (begin (V870 = begin (V531 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V530) -> ('un--nonErased'(V0, V530)) end, V507))), fun (V532) -> begin (V533 = (V531(V532))), case V533 of {'Prelude.Types.Left', V534} -> {'Prelude.Types.Left', V534}; {'Prelude.Types.Right', V535} -> (begin (V869 = begin (V547 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.execute"/utf8>>, 40, fun () -> <<<<"Kept: "/utf8>>/binary, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V536) -> fun (V537) -> <<V536/binary, V537/binary>> end end, <<""/utf8>>}, fun (V538) -> V538 end, ('Idris.Idris2.Data.List':'un--intersperse'(<<", "/utf8>>, ((begin (V544 = fun (V540) -> fun (V541) -> fun (V542) -> fun (V543) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V542, V543)) end end end end), fun (V545) -> fun (V546) -> ((((V544('erased'))('erased'))(V545))(V546)) end end end(fun (V539) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V539)) end))(V535))))))/binary>> end))), fun (V548) -> begin (V549 = (V547(V548))), case V549 of {'Prelude.Types.Left', V550} -> {'Prelude.Types.Left', V550}; {'Prelude.Types.Right', V551} -> (begin (V868 = begin (V553 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"Merge lambda"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V552) -> ('Idris.Idris2.Compiler.Inline':'un--mergeLamDef'(V0, V552)) end, V535))))), fun (V554) -> begin (V555 = (V553(V554))), case V555 of {'Prelude.Types.Left', V556} -> {'Prelude.Types.Left', V556}; {'Prelude.Types.Right', V557} -> (begin (V867 = begin (V559 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"Fix arity"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V558) -> ('Idris.Idris2.Compiler.Inline':'un--fixArityDef'(V0, V558)) end, V535))))), fun (V560) -> begin (V561 = (V559(V560))), case V561 of {'Prelude.Types.Left', V562} -> {'Prelude.Types.Left', V562}; {'Prelude.Types.Right', V563} -> (begin (V866 = begin (V570 = begin (V564 = ('Idris.Idris2.Compiler.CompileExpr':'un--compileExp'(V0, V387))), fun (V565) -> begin (V566 = (V564(V565))), case V566 of {'Prelude.Types.Left', V567} -> {'Prelude.Types.Left', V567}; {'Prelude.Types.Right', V568} -> (begin (V569 = ('Idris.Idris2.Compiler.Inline':'un--fixArityExp'([], V0, V568))), V569 end(V565)) end end end end), fun (V571) -> begin (V572 = (V570(V571))), case V572 of {'Prelude.Types.Left', V573} -> {'Prelude.Types.Left', V573}; {'Prelude.Types.Right', V574} -> (begin (V865 = begin (V575 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"CSE"/utf8>> end, ('Idris.Idris2.Compiler.Opts.CSE':'un--cse'(V0, V535, V574))))), fun (V576) -> begin (V577 = (V575(V576))), case V577 of {'Prelude.Types.Left', V578} -> {'Prelude.Types.Left', V578}; {'Prelude.Types.Right', V579} -> (begin (V864 = case V579 of {'Builtin.MkPair', V580, V581} -> begin (V586 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> (begin (V583 = fun (V582) -> V582 end), fun (V584) -> (V583(V584)) end end(<<"Forget names"/utf8>>)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V585) -> ('un--getNamedDef'(V0, V585)) end, V580, []))))), fun (V587) -> begin (V588 = (V586(V587))), case V588 of {'Prelude.Types.Left', V589} -> {'Prelude.Types.Left', V589}; {'Prelude.Types.Right', V590} -> (begin (V863 = begin (V594 = {'Core.Name.MN', (begin (V592 = fun (V591) -> V591 end), fun (V593) -> (V592(V593)) end end(<<"__mainExpression"/utf8>>)), 0}), begin (V595 = ('Idris.Idris2.Compiler.LambdaLift':'un--liftBody'([], V2, V594, V581))), fun (V596) -> begin (V597 = (V595(V596))), case V597 of {'Prelude.Types.Left', V598} -> {'Prelude.Types.Left', V598}; {'Prelude.Types.Right', V599} -> (begin (V862 = case V599 of {'Builtin.MkPair', V600, V601} -> begin (V604 = case ('dn--un-->=_Ord_UsePhase'(V157, 1)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"Lambda lift"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V602) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V0, V2, V602)) end, V580, [])))); 0 -> fun (V603) -> {'Prelude.Types.Right', []} end end), fun (V605) -> begin (V606 = (V604(V605))), case V606 of {'Prelude.Types.Left', V607} -> {'Prelude.Types.Left', V607}; {'Prelude.Types.Right', V608} -> (begin (V861 = begin (V612 = [{'Builtin.MkPair', V594, {'Compiler.LambdaLift.MkLFun', [], [], V600}} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V601, ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V609) -> fun (V610) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V609, V610)) end end, []}, fun (V611) -> V611 end, V608))))]), begin (V624 = case ('dn--un-->=_Ord_UsePhase'(V157, 2)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"Get ANF"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V613) -> case V613 of {'Builtin.MkPair', V614, V615} -> begin (V616 = ('Idris.Idris2.Compiler.ANF':'un--toANF'(V615))), fun (V617) -> begin (V618 = (V616(V617))), case V618 of {'Prelude.Types.Left', V619} -> {'Prelude.Types.Left', V619}; {'Prelude.Types.Right', V620} -> (begin (V622 = fun (V621) -> {'Prelude.Types.Right', {'Builtin.MkPair', V614, V620}} end), V622 end(V617)) end end end end end end, V612, [])))); 0 -> fun (V623) -> {'Prelude.Types.Right', []} end end), fun (V625) -> begin (V626 = (V624(V625))), case V626 of {'Prelude.Types.Left', V627} -> {'Prelude.Types.Left', V627}; {'Prelude.Types.Right', V628} -> (begin (V860 = begin (V631 = case ('dn--un-->=_Ord_UsePhase'(V157, 3)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 2, fun () -> <<"Get VM Code"/utf8>> end, fun (V629) -> {'Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V628))} end)); 0 -> fun (V630) -> {'Prelude.Types.Right', []} end end), fun (V632) -> begin (V633 = (V631(V632))), case V633 of {'Prelude.Types.Left', V634} -> {'Prelude.Types.Left', V634}; {'Prelude.Types.Right', V635} -> (begin (V859 = begin (V641 = begin (V636 = V0), fun (V637) -> begin (V640 = (begin (V638 = V636), fun (V639) -> ('erlang':'get'(V638)) end end(V637))), {'Prelude.Types.Right', V640} end end end), fun (V642) -> begin (V643 = (V641(V642))), case V643 of {'Prelude.Types.Left', V644} -> {'Prelude.Types.Left', V644}; {'Prelude.Types.Right', V645} -> (begin (V858 = begin (V700 = case V14 of {'Core.Options.MkSessionOpts', V646, V647, V648, V649, V650, V651, V652, V653, V654, V655, V656, V657, V658, V659, V660, V661, V662, V663, V664, V665, V666, V667, V668, V669, V670, V671} -> case V660 of {'Prelude.Types.Just', V672} -> begin (V678 = fun (V673) -> begin (V677 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<(begin (V675 = fun (V674) -> V674 end), fun (V676) -> (V675(V676)) end end(<<"Dumping case trees to "/utf8>>))/binary, V672/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V673))), {'Prelude.Types.Right', V677} end end), fun (V679) -> begin (V680 = (V678(V679))), case V680 of {'Prelude.Types.Left', V681} -> {'Prelude.Types.Left', V681}; {'Prelude.Types.Right', V682} -> (begin (V698 = ('un--dumpIR'({'Prelude.Show.MkShow', fun (V683) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedDef'(V683)) end, fun (V684) -> fun (V685) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedDef'(V684, V685)) end end}, V672, ((begin (V695 = fun (V691) -> fun (V692) -> fun (V693) -> fun (V694) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V693, V694)) end end end end), fun (V696) -> fun (V697) -> ((((V695('erased'))('erased'))(V696))(V697)) end end end(fun (V686) -> case V686 of {'Builtin.MkPair', V687, V688} -> case V688 of {'Builtin.MkPair', V689, V690} -> {'Builtin.MkPair', V687, V690} end end end))(V590))))), V698 end(V679)) end end end end; {'Prelude.Types.Nothing'} -> fun (V699) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end), fun (V701) -> begin (V702 = (V700(V701))), case V702 of {'Prelude.Types.Left', V703} -> {'Prelude.Types.Left', V703}; {'Prelude.Types.Right', V704} -> (begin (V857 = begin (V747 = case V14 of {'Core.Options.MkSessionOpts', V705, V706, V707, V708, V709, V710, V711, V712, V713, V714, V715, V716, V717, V718, V719, V720, V721, V722, V723, V724, V725, V726, V727, V728, V729, V730} -> case V720 of {'Prelude.Types.Just', V731} -> begin (V737 = fun (V732) -> begin (V736 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<(begin (V734 = fun (V733) -> V733 end), fun (V735) -> (V734(V735)) end end(<<"Dumping lambda lifted defs to "/utf8>>))/binary, V731/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V732))), {'Prelude.Types.Right', V736} end end), fun (V738) -> begin (V739 = (V737(V738))), case V739 of {'Prelude.Types.Left', V740} -> {'Prelude.Types.Left', V740}; {'Prelude.Types.Right', V741} -> (begin (V745 = ('un--dumpIR'({'Prelude.Show.MkShow', fun (V742) -> ('Idris.Idris2.Compiler.LambdaLift':'dn--un--show_Show_LiftedDef'(V742)) end, fun (V743) -> fun (V744) -> ('Idris.Idris2.Compiler.LambdaLift':'dn--un--showPrec_Show_LiftedDef'(V743, V744)) end end}, V731, V612))), V745 end(V738)) end end end end; {'Prelude.Types.Nothing'} -> fun (V746) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end), fun (V748) -> begin (V749 = (V747(V748))), case V749 of {'Prelude.Types.Left', V750} -> {'Prelude.Types.Left', V750}; {'Prelude.Types.Right', V751} -> (begin (V856 = begin (V794 = case V14 of {'Core.Options.MkSessionOpts', V752, V753, V754, V755, V756, V757, V758, V759, V760, V761, V762, V763, V764, V765, V766, V767, V768, V769, V770, V771, V772, V773, V774, V775, V776, V777} -> case V768 of {'Prelude.Types.Just', V778} -> begin (V784 = fun (V779) -> begin (V783 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<(begin (V781 = fun (V780) -> V780 end), fun (V782) -> (V781(V782)) end end(<<"Dumping ANF defs to "/utf8>>))/binary, V778/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V779))), {'Prelude.Types.Right', V783} end end), fun (V785) -> begin (V786 = (V784(V785))), case V786 of {'Prelude.Types.Left', V787} -> {'Prelude.Types.Left', V787}; {'Prelude.Types.Right', V788} -> (begin (V792 = ('un--dumpIR'({'Prelude.Show.MkShow', fun (V789) -> ('Idris.Idris2.Compiler.ANF':'dn--un--show_Show_ANFDef'(V789)) end, fun (V790) -> fun (V791) -> ('Idris.Idris2.Compiler.ANF':'dn--un--showPrec_Show_ANFDef'(V790, V791)) end end}, V778, V628))), V792 end(V785)) end end end end; {'Prelude.Types.Nothing'} -> fun (V793) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end), fun (V795) -> begin (V796 = (V794(V795))), case V796 of {'Prelude.Types.Left', V797} -> {'Prelude.Types.Left', V797}; {'Prelude.Types.Right', V798} -> (begin (V855 = begin (V841 = case V14 of {'Core.Options.MkSessionOpts', V799, V800, V801, V802, V803, V804, V805, V806, V807, V808, V809, V810, V811, V812, V813, V814, V815, V816, V817, V818, V819, V820, V821, V822, V823, V824} -> case V816 of {'Prelude.Types.Just', V825} -> begin (V831 = fun (V826) -> begin (V830 = ('Idris.Idris2.Prelude.IO':'un--prim__putStr'(<<<<(begin (V828 = fun (V827) -> V827 end), fun (V829) -> (V828(V829)) end end(<<"Dumping VM defs to "/utf8>>))/binary, V825/binary>>/binary, <<"\x{a}"/utf8>>/binary>>, V826))), {'Prelude.Types.Right', V830} end end), fun (V832) -> begin (V833 = (V831(V832))), case V833 of {'Prelude.Types.Left', V834} -> {'Prelude.Types.Left', V834}; {'Prelude.Types.Right', V835} -> (begin (V839 = ('un--dumpIR'({'Prelude.Show.MkShow', fun (V836) -> ('Idris.Idris2.Compiler.VMCode':'dn--un--show_Show_VMDef'(V836)) end, fun (V837) -> fun (V838) -> ('Idris.Idris2.Compiler.VMCode':'dn--un--showPrec_Show_VMDef'(V837, V838)) end end}, V825, V635))), V839 end(V832)) end end end end; {'Prelude.Types.Nothing'} -> fun (V840) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end end), fun (V842) -> begin (V843 = (V841(V842))), case V843 of {'Prelude.Types.Left', V844} -> {'Prelude.Types.Left', V844}; {'Prelude.Types.Right', V845} -> (begin (V854 = begin (V847 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V846) -> ('un--replaceEntry'(V0, V846)) end, V487))), fun (V848) -> begin (V849 = (V847(V848))), case V849 of {'Prelude.Types.Left', V850} -> {'Prelude.Types.Left', V850}; {'Prelude.Types.Right', V851} -> (begin (V853 = fun (V852) -> {'Prelude.Types.Right', {'Compiler.Common.MkCompileData', V581, V332, V590, V612, V628, V635}} end), V853 end(V848)) end end end end), V854 end(V842)) end end end end), V855 end(V795)) end end end end), V856 end(V748)) end end end end), V857 end(V701)) end end end end), V858 end(V642)) end end end end), V859 end(V632)) end end end end), V860 end(V625)) end end end end end), V861 end(V605)) end end end end end), V862 end(V596)) end end end end end), V863 end(V587)) end end end end end), V864 end(V576)) end end end end), V865 end(V571)) end end end end), V866 end(V560)) end end end end), V867 end(V554)) end end end end), V868 end(V548)) end end end end), V869 end(V532)) end end end end), V870 end(V526)) end end end end), V871 end(V504)) end end end end end end), V872 end(V483)) end end end end), V873 end(V449)) end end end end), V874 end(V444)) end end end end), V875 end(V434)) end end end end), V876 end(V400)) end end end end), V877 end(V395)) end end end end), V878 end(V384)) end end end end), V879 end(V375)) end end end end end), V880 end(V348)) end end end end), V881 end(V329)) end end end end end), V882 end(V322)) end end end end), V883 end(V312)) end end end end end end), V884 end(V11)) end end end end), V885 end(V6)) end end end end.
'un--getCompileData'(V0, V1, V2, V3) -> ('un--getCompileDataWith'(V0, [], V1, V2, V3)).
'un--getAllDesc'(V0, V1, V2, V3) -> case V1 of [] -> fun (V4) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Core.Name.Resolved', V7} -> begin (V37 = fun (V8) -> begin (V36 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V2, V7))(V8))), {'Prelude.Types.Right', V36} end end), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V210 = begin (V42 = {'Core.Name.Resolved', V7}), case V41 of {'Prelude.Types.Nothing'} -> begin (V75 = ('Idris.Idris2.Core.Context':'un--lookupContextEntry'(V42, case V3 of {'Core.Context.MkDefs', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74} -> V43 end))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V208 = case V79 of {'Prelude.Types.Nothing'} -> begin (V86 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, (begin (V81 = fun (V80) -> V80 end), fun (V82) -> (V81(V82)) end end(<<"compile.execute"/utf8>>)), 20, fun () -> <<(begin (V84 = fun (V83) -> V83 end), fun (V85) -> (V84(V85)) end end(<<"Couldn\x{27}t find "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V42))/binary>> end))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V91 = ('un--getAllDesc'(V0, V6, V2, V3))), V91 end(V87)) end end end end; {'Prelude.Types.Just', V92} -> case V92 of {'Builtin.MkPair', V93, V94} -> begin (V95 = ('un--getMinimalDef'(V94))), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V207 = case V99 of {'Builtin.MkPair', V100, V101} -> begin (V121 = begin (V102 = ('Idris.Idris2.Core.Context':'un--addDef'(V0, V42, V100))), ((begin (V118 = fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V115, V116, V117)) end end end end end), fun (V119) -> fun (V120) -> ((((V118('erased'))('erased'))(V119))(V120)) end end end((begin (V110 = fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> {'Prelude.Types.Right', (V106(V109))} end end end end end), fun (V111) -> fun (V112) -> ((((V110('erased'))('erased'))(V111))(V112)) end end end(fun (V103) -> {'Builtin.MkUnit'} end))))(V102)) end), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V206 = case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V100 of {'Core.Context.Context.MkGlobalDef', V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147} -> V133 end, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V148) -> fun (V149) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V148, V149)) end end, 0, fun (V150) -> fun (V151) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V150, V151)) end end, 1})))) of 1 -> begin (V181 = fun (V152) -> begin (V180 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V155, V156, V157)) end end end end end, fun (V158) -> fun (V159) -> fun (V160) -> V159 end end end, fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> begin (V166 = (V163(V165))), begin (V167 = (V164(V165))), (V166(V167)) end end end end end end end}, fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> fun (V172) -> begin (V173 = (V170(V172))), ((V171(V173))(V172)) end end end end end end, fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V175(V176))), (V177(V176)) end end end end}, fun (V178) -> fun (V179) -> V179 end end}, V2, V7, {'Builtin.MkPair', V7, V101}))(V152))), {'Prelude.Types.Right', V180} end end), fun (V182) -> begin (V183 = (V181(V182))), case V183 of {'Prelude.Types.Left', V184} -> {'Prelude.Types.Left', V184}; {'Prelude.Types.Right', V185} -> (begin (V199 = begin (V186 = ('Idris.Idris2.Core.Context.Context':'un--refersToRuntime'(V100))), begin (V193 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V187) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V188) -> fun (V189) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V188, V189)) end end, fun (V190) -> fun (V191) -> fun (V192) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V190, V191, V192)) end end end}, V187)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V186)), []))), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V198 = ('un--getAllDesc'(V0, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V197, V6)), V2, V3))), V198 end(V194)) end end end end end), V199 end(V182)) end end end end; 0 -> begin (V200 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.execute"/utf8>>, 20, fun () -> <<<<"Dropping "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V42))/binary, <<" because it\x{27}s erased"/utf8>>/binary>>/binary>> end))), fun (V201) -> begin (V202 = (V200(V201))), case V202 of {'Prelude.Types.Left', V203} -> {'Prelude.Types.Left', V203}; {'Prelude.Types.Right', V204} -> (begin (V205 = ('un--getAllDesc'(V0, V6, V2, V3))), V205 end(V201)) end end end end end), V206 end(V122)) end end end end end), V207 end(V96)) end end end end end end), V208 end(V76)) end end end end; {'Prelude.Types.Just', V209} -> ('un--getAllDesc'(V0, V6, V2, V3)) end end), V210 end(V38)) end end end end; _ -> begin (V211 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.execute"/utf8>>, 20, fun () -> <<<<"Ignoring "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))/binary, <<" because it\x{27}s not a Resolved name"/utf8>>/binary>>/binary>> end))), fun (V212) -> begin (V213 = (V211(V212))), case V213 of {'Prelude.Types.Left', V214} -> {'Prelude.Types.Left', V214}; {'Prelude.Types.Right', V215} -> (begin (V216 = ('un--getAllDesc'(V0, V6, V2, V3))), V216 end(V212)) end end end end end end(E0, E1)) end.
'un--exportedName'(V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> case V2 of {'Prelude.Types.Just', V3} -> case ('un--isExported'(case V3 of {'Core.Context.Context.MkGlobalDef', V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25} -> V13 end)) of 1 -> {'Prelude.Types.Just', V1}; 0 -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--exists'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--openFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0, 0))(V1))), case V29 of {'Prelude.Types.Right', V30} -> begin (V58 = (('Idris.Idris2.Erlang.System.File':'un--closeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, fun (V56) -> fun (V57) -> V57 end end}, V30))(V1))), 1 end; {'Prelude.Types.Left', V59} -> 0 end end.
'un--dylib_suffix'() -> ('Idris.Idris2.Core.Core':'un--cond'([{'Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> V20 end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V23, V24, V25)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V28, V29)) end end}, ('Idris.Idris2.System.Info':'un--os'()), [<<"windows"/utf8>> | [<<"mingw32"/utf8>> | [<<"cygwin32"/utf8>> | []]]])) end, fun () -> <<"dll"/utf8>> end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.System.Info':'un--os'()), <<"darwin"/utf8>>)) end, fun () -> <<"dylib"/utf8>> end} | []]], <<"so"/utf8>>)).
'un--dumpIR'(V0, V1, V2) -> begin (V11 = ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('nested--12931-2367--in--un--dumpDef'(V0, V2, V1, V3)) end))(V2))), begin (V41 = fun (V12) -> begin (V40 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, fun (V38) -> fun (V39) -> V39 end end}, V1, ('Idris.Idris2.Prelude.Types':'un--fastConcat'(V11))))(V12))), {'Prelude.Types.Right', V40} end end), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V49 = fun (V46) -> case V45 of {'Prelude.Types.Right', V47} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; {'Prelude.Types.Left', V48} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V1, V48}, V46)) end end), V49 end(V42)) end end end end end.
'un--copyLib'(V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V1, V2)) of 1 -> fun (V3) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> begin (V6 = fun (V4) -> begin (V5 = ('Idris.Idris2.Libraries.Utils.Binary':'un--readFromFile'(V2, V4))), {'Prelude.Types.Right', V5} end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V25 = case V10 of {'Prelude.Types.Right', V11} -> begin (V14 = fun (V12) -> begin (V13 = ('Idris.Idris2.Libraries.Utils.Binary':'un--writeToFile'(V1, V11, V12))), {'Prelude.Types.Right', V13} end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V22 = fun (V19) -> case V18 of {'Prelude.Types.Right', V20} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; {'Prelude.Types.Left', V21} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V1, V21}, V19)) end end), V22 end(V15)) end end end end; {'Prelude.Types.Left', V23} -> fun (V24) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V25 end(V7)) end end end end end end.
'un--compileTerm'(V0, V1) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V4, V5)) end end}, V1))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V17 = begin (V11 = ('Idris.Idris2.Compiler.CompileExpr':'un--compileExp'(V0, V10))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V16 = ('Idris.Idris2.Compiler.Inline':'un--fixArityExp'([], V0, V15))), V16 end(V12)) end end end end), V17 end(V7)) end end end end.
'un--compDef'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V98 = begin (V44 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V11 of {'Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} -> V12 end))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V97 = case V48 of {'Prelude.Types.Just', V49} -> fun (V50) -> case V49 of {'Core.Context.Context.MkGlobalDef', V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} -> case V69 of {'Prelude.Types.Just', V73} -> {'Prelude.Types.Right', {'Prelude.Types.Just', {'Builtin.MkPair', V1, {'Builtin.MkPair', case V49 of {'Core.Context.Context.MkGlobalDef', V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95} -> V74 end, V73}}}}; {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end end; {'Prelude.Types.Nothing'} -> fun (V96) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V97 end(V45)) end end end end), V98 end(V8)) end end end end.
'un--cgExecuteExpr'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V21 = begin (V9 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V8))), begin (V10 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V20 = case V2 of {'Compiler.Common.MkCG', V15, V16, V17, V18, V19} -> ((((V16(V0))(V1))(V9))(V3)) end), V20 end(V11)) end end end end end), V21 end(V5)) end end end end.
'un--cgCompileLibrary'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V28 = begin (V9 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V8))), begin (V10 = ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V8))), begin (V11 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V9))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V27 = begin (V16 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V10))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V26 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 1, fun () -> <<"Code generation overall"/utf8>> end, case V1 of {'Compiler.Common.MkCG', V21, V22, V23, V24, V25} -> (((((V23(V0))(V9))(V10))(V2))(V3)) end))), V26 end(V17)) end end end end), V27 end(V12)) end end end end end end), V28 end(V5)) end end end end.
'un--cgCompileExpr'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V29 = begin (V10 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V9))), begin (V11 = ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V9))), begin (V12 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V10))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V28 = begin (V17 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V11))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V27 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, 1, fun () -> <<"Code generation overall"/utf8>> end, case V2 of {'Compiler.Common.MkCG', V22, V23, V24, V25, V26} -> ((((((V22(V0))(V1))(V10))(V11))(V3))(V4)) end))), V27 end(V18)) end end end end), V28 end(V13)) end end end end end end), V29 end(V6)) end end end end.
'un--castInt'(V0, V1, V2, V3) -> ('case--castInt-6207'(V3, V2, V1, V0, {'Builtin.MkPair', {'Builtin.MkPair', V1, ('Idris.Idris2.Core.TT':'un--intKind'(V1))}, {'Builtin.MkPair', V2, ('Idris.Idris2.Core.TT':'un--intKind'(V2))}})).
