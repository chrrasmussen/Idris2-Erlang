-module('Idris.Idris2.TTImp.ProcessRecord').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--9681-5053--in--un--removeIHoles'/18,
  'nested--9681-5057--in--un--recTy'/19,
  'nested--9681-5052--in--un--paramTelescope'/18,
  'nested--9681-5058--in--un--paramNames'/18,
  'nested--9681-5056--in--un--mkTy'/20,
  'nested--9770-5067--in--un--jname'/19,
  'nested--9681-5054--in--un--fname'/19,
  'nested--9681-5055--in--un--farg'/19,
  'nested--9681-5061--in--un--elabGetters'/25,
  'nested--9681-5059--in--un--elabAsData'/20,
  'nested--9681-5060--in--un--countExp'/19,
  'nested--9775-5253--in--un--apply'/21,
  'un--projVis'/1,
  'un--processRecord'/13,
  'un--mkDataTy'/2,
  'un--killHole'/1,
  'un--elabRecord'/18
]).
'nested--9681-5053--in--un--removeIHoles'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> (begin (V54 = fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V52, V53)) end end end end), fun (V55) -> fun (V56) -> ((((V54('erased'))('erased'))(V55))(V56)) end end end((begin (V47 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> case V44 of {'Builtin.MkPair', V45, V46} -> {'Builtin.MkPair', V45, (V43(V46))} end end end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end((begin (V38 = fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> case V35 of {'Builtin.MkPair', V36, V37} -> {'Builtin.MkPair', V36, (V34(V37))} end end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end((begin (V29 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> case V26 of {'Builtin.MkPair', V27, V28} -> {'Builtin.MkPair', V27, (V25(V28))} end end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V18) -> case V18 of {'Builtin.MkPair', V19, V20} -> {'Builtin.MkPair', ('Idris.Idris2.TTImp.TTImp.Traversals':'un--mapPiInfo'(fun (V21) -> ('un--killHole'(V21)) end, V19)), ('Idris.Idris2.TTImp.TTImp.Traversals':'un--mapTTImp'(fun (V22) -> ('un--killHole'(V22)) end, V20))} end end)))))))).
'nested--9681-5057--in--un--recTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> ('nested--9775-5253--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'TTImp.TTImp.IVar', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V11)), V18}, ((begin (V30 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V28, V29)) end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V19) -> case V19 of {'Builtin.MkPair', V20, V21} -> case V21 of {'Builtin.MkPair', V22, V23} -> case V23 of {'Builtin.MkPair', V24, V25} -> {'Builtin.MkPair', V20, {'Builtin.MkPair', {'TTImp.TTImp.IVar', {'Core.FC.EmptyFC'}, V20}, V24}} end end end end))(V3)))).
'nested--9681-5052--in--un--paramTelescope'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('nested--9770-5067--in--un--jname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18)) end))(V3)).
'nested--9681-5058--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('Idris.Idris2.Builtin':'un--fst'(V18)) end))(V3)).
'nested--9681-5056--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V18 of [] -> V19; [E0 | E1] -> (fun (V20, V21) -> case V20 of {'Builtin.MkPair', V22, V23} -> case V23 of {'Builtin.MkPair', V24, V25} -> case V25 of {'Builtin.MkPair', V26, V27} -> case V27 of {'Builtin.MkPair', V28, V29} -> {'TTImp.TTImp.IPi', V22, V26, V28, V24, V29, ('nested--9681-5056--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V21, V19))} end end end end end(E0, E1)) end.
'nested--9770-5067--in--un--jname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Builtin.MkPair', V19, V20} -> case V20 of {'Builtin.MkPair', V21, V22} -> case V22 of {'Builtin.MkPair', V23, V24} -> {'Builtin.MkPair', {'Core.FC.EmptyFC'}, {'Builtin.MkPair', {'Prelude.Types.Just', V19}, {'Builtin.MkPair', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V25, V26)) end end, 0, fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V27, V28)) end end, 1})), {'Builtin.MkPair', {'Core.TT.Implicit'}, V24}}}} end end end.
'nested--9681-5054--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'TTImp.TTImp.MkIField', V19, V20, V21, V22, V23} -> V22 end.
'nested--9681-5055--in--un--farg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'TTImp.TTImp.MkIField', V19, V20, V21, V22, V23} -> {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V19)), {'Builtin.MkPair', {'Prelude.Types.Just', V22}, {'Builtin.MkPair', V20, {'Builtin.MkPair', V21, V23}}}} end.
'nested--9681-5061--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Core.TT.Bind', V25, V26, V27, V28} -> case V27 of {'Core.TT.Pi', V29, V30, V31, V32} -> begin (V45 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V33, V34)) end end, 0, fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V35, V36)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V39, V40)) end end}}, V30)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V41) -> fun (V42) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V41, V42)) end end, 0, fun (V43) -> fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V43, V44)) end end, 1})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()) end), begin (V46 = ('un--projVis'(V6))), begin (V47 = {'Core.TT.Pi', V29, V30, V31, V32}), case case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V50, V51, V52)) end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V59)) end end, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V63, V64, V65, V66)) end end end end end end end, fun (V67) -> fun (V68) -> V68 end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V71, V72, V73)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V76, V77)) end end}, V26, ((begin (V83 = fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V81, V82)) end end end end), fun (V84) -> fun (V85) -> ((((V83('erased'))('erased'))(V84))(V85)) end end end(fun (V78) -> ('Idris.Idris2.Builtin':'un--fst'(V78)) end))(V3)))) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V88, V89, V90)) end end end end end, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V93, V94, V95)) end end end end end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V97)) end end, fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V101, V102, V103, V104)) end end end end end end end, fun (V105) -> fun (V106) -> V106 end end, fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V109, V110, V111)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V112, V113)) end end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V114, V115)) end end}, V26, V8)) end of 1 -> ('nested--9681-5061--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, [V26 | V18], V19, V20, case case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(PiInfo $t)'({'Prelude.EqOrd.MkEq', fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'(V116, V117)) end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_(Term $vars)'(V118, V119)) end end}, V31, {'Core.TT.Explicit'})) of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V122, V123, V124)) end end end end end, fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V127, V128, V129)) end end end end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V131)) end end, fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V135, V136, V137, V138)) end end end end end end end, fun (V139) -> fun (V140) -> V140 end end, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V143, V144, V145)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V146, V147)) end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V148, V149)) end end}, V26, V8)) of 1 -> 0; 0 -> 1 end; 0 -> 0 end of 1 -> (V21 + 1); 0 -> V21 end, V22, {'Core.Env.::', V47, V23}, V28)); 0 -> begin (V150 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V26))), begin (V151 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V17, {'Core.Name.UN', {'Core.Name.Field', V150}}))), fun (V152) -> begin (V153 = (V151(V152))), case V153 of {'Prelude.Types.Left', V154} -> {'Prelude.Types.Left', V154}; {'Prelude.Types.Right', V155} -> (begin (V342 = begin (V156 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V17, {'Core.Name.UN', {'Core.Name.Basic', V150}}))), fun (V157) -> begin (V158 = (V156(V157))), case V158 of {'Prelude.Types.Left', V159} -> {'Prelude.Types.Left', V159}; {'Prelude.Types.Right', V160} -> (begin (V341 = begin (V176 = ((begin (V173 = fun (V169) -> fun (V170) -> fun (V171) -> fun (V172) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V171, V172)) end end end end), fun (V174) -> fun (V175) -> ((((V173('erased'))('erased'))(V174))(V175)) end end end(fun (V162) -> case V162 of {'Builtin.MkPair', V163, V164} -> case V164 of {'Builtin.MkPair', V165, V166} -> case V166 of {'Builtin.MkPair', V167, V168} -> {'Builtin.MkPair', V163, ('Idris.Idris2.Prelude.Types.List':'un--lengthTR'(V167))} end end end end))(begin (V161 = V9), V161 end))), begin (V192 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V177) -> case V177 of {'Builtin.MkPair', V178, V179} -> begin (V185 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V17, {'Core.Context.dn--un--__mkHasNames', fun (V180) -> fun (V181) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V180, V181)) end end, fun (V182) -> fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V182, V183, V184)) end end end}, V178))), fun (V186) -> begin (V187 = (V185(V186))), case V187 of {'Prelude.Types.Left', V188} -> {'Prelude.Types.Left', V188}; {'Prelude.Types.Right', V189} -> (begin (V191 = fun (V190) -> {'Prelude.Types.Right', {'Builtin.MkPair', V189, V179}} end), V191 end(V186)) end end end end end end, V176, []))), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V340 = begin (V197 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNest'(V18, V17, V196, V23, V32))), fun (V198) -> begin (V199 = (V197(V198))), case V199 of {'Prelude.Types.Left', V200} -> {'Prelude.Types.Left', V200}; {'Prelude.Types.Right', V201} -> (begin (V339 = begin (V206 = ('Idris.Idris2.TTImp.Utils':'un--substNames'(V8, V22, ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V202) -> case V202 of {'Core.TT.MkKindedName', V203, V204, V205} -> V205 end end, V201))))), begin (V210 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.record.field"/utf8>>, 5, fun () -> <<<<"Field type: "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V207) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V207)) end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V208, V209)) end end}, V206))/binary>> end))), fun (V211) -> begin (V212 = (V210(V211))), case V212 of {'Prelude.Types.Left', V213} -> {'Prelude.Types.Left', V213}; {'Prelude.Types.Right', V214} -> (begin (V338 = begin (V215 = {'Core.Name.MN', <<"rec"/utf8>>, 0}), begin (V232 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V17, V11, [], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V221 = fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V219, V220)) end end end end), fun (V222) -> fun (V223) -> ((((V221('erased'))('erased'))(V222))(V223)) end end end(fun (V216) -> ('Idris.Idris2.Builtin':'un--fst'(V216)) end))(V3)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V229 = fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V227, V228)) end end end end), fun (V230) -> fun (V231) -> ((((V229('erased'))('erased'))(V230))(V231)) end end end(fun (V224) -> ('nested--9681-5054--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V224)) end))(V0)), V8)))), ('nested--9681-5056--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, (('nested--9681-5053--in--un--removeIHoles'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17))(('nested--9681-5052--in--un--paramTelescope'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)))), {'TTImp.TTImp.IPi', V25, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, {'Prelude.Types.Just', V215}, ('nested--9681-5057--in--un--recTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V19)), V206}))))), fun (V233) -> begin (V234 = (V232(V233))), case V234 of {'Prelude.Types.Left', V235} -> {'Prelude.Types.Left', V235}; {'Prelude.Types.Right', V236} -> (begin (V337 = begin (V239 = fun (V237) -> begin (V238 = {'TTImp.TTImp.MkImpTy', {'Core.FC.EmptyFC'}, {'Core.FC.EmptyFC'}, V237, V236}), {'TTImp.TTImp.IClaim', V25, V45, V46, [{'TTImp.TTImp.Inline'} | []], V238} end end), begin (V243 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.record.projection"/utf8>>, 5, fun () -> <<<<"Projection "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V155))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V240) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V240)) end, fun (V241) -> fun (V242) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V241, V242)) end end}, V236))/binary>>/binary>>/binary>> end))), fun (V244) -> begin (V245 = (V243(V244))), case V245 of {'Prelude.Types.Left', V246} -> {'Prelude.Types.Left', V246}; {'Prelude.Types.Right', V247} -> (begin (V336 = begin (V248 = ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V17, V16, V15, V14, V13, [], V9, V10, (V239(V155))))), fun (V249) -> begin (V250 = (V248(V249))), case V250 of {'Prelude.Types.Left', V251} -> {'Prelude.Types.Left', V251}; {'Prelude.Types.Right', V252} -> (begin (V335 = begin (V257 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'TTImp.TTImp.IVar', V25, V20}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Data.List':'un--replicateTR'([], V21, {'TTImp.TTImp.Implicit', V25, 1})), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(PiInfo $t)'({'Prelude.EqOrd.MkEq', fun (V253) -> fun (V254) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'(V253, V254)) end end, fun (V255) -> fun (V256) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_(Term $vars)'(V255, V256)) end end}, V31, {'Core.TT.Explicit'})) of 1 -> [{'TTImp.TTImp.IBindVar', {'Core.FC.EmptyFC'}, V150} | []]; 0 -> [] end, ('Idris.Idris2.Data.List':'un--replicateTR'([], ('nested--9681-5060--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V28)), {'TTImp.TTImp.Implicit', V25, 1}))))))))), begin (V262 = {'TTImp.TTImp.IApp', V25, {'TTImp.TTImp.IVar', V25, V155}, case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(PiInfo $t)'({'Prelude.EqOrd.MkEq', fun (V258) -> fun (V259) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'(V258, V259)) end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_(Term $vars)'(V260, V261)) end end}, V31, {'Core.TT.Explicit'})) of 1 -> V257; 0 -> {'TTImp.TTImp.INamedApp', V25, V257, {'Core.Name.UN', {'Core.Name.Basic', V150}}, {'TTImp.TTImp.IBindVar', V25, V150}} end}), begin (V263 = {'TTImp.TTImp.IVar', {'Core.FC.EmptyFC'}, {'Core.Name.UN', {'Core.Name.Basic', V150}}}), begin (V270 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.record.projection"/utf8>>, 5, fun () -> <<<<"Projection "/utf8>>/binary, <<('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V264) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V264)) end, fun (V265) -> fun (V266) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V265, V266)) end end}, V262))/binary, <<<<" = "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V267) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V267)) end, fun (V268) -> fun (V269) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V268, V269)) end end}, V263))/binary>>/binary>>/binary>> end))), fun (V271) -> begin (V272 = (V270(V271))), case V272 of {'Prelude.Types.Left', V273} -> {'Prelude.Types.Left', V273}; {'Prelude.Types.Right', V274} -> (begin (V334 = begin (V275 = ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V17, V16, V15, V14, V13, [], V9, V10, {'TTImp.TTImp.IDef', V25, V155, [{'TTImp.TTImp.PatClause', V25, V262, V263} | []]}))), fun (V276) -> begin (V277 = (V275(V276))), case V277 of {'Prelude.Types.Left', V278} -> {'Prelude.Types.Left', V278}; {'Prelude.Types.Right', V279} -> (begin (V333 = begin (V316 = begin (V280 = ('Idris.Idris2.Core.Context':'un--isPrefixRecordProjections'(V17))), fun (V281) -> begin (V282 = (V280(V281))), case V282 of {'Prelude.Types.Left', V283} -> {'Prelude.Types.Left', V283}; {'Prelude.Types.Right', V284} -> (begin (V315 = case V284 of 1 -> begin (V288 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.record.projection.prefix"/utf8>>, 5, fun () -> <<<<"Prefix projection "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V160))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V285) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V285)) end, fun (V286) -> fun (V287) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V286, V287)) end end}, V236))/binary>>/binary>>/binary>> end))), fun (V289) -> begin (V290 = (V288(V289))), case V290 of {'Prelude.Types.Left', V291} -> {'Prelude.Types.Left', V291}; {'Prelude.Types.Right', V292} -> (begin (V313 = begin (V293 = ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V17, V16, V15, V14, V13, [], V9, V10, (V239(V160))))), fun (V294) -> begin (V295 = (V293(V294))), case V295 of {'Prelude.Types.Left', V296} -> {'Prelude.Types.Left', V296}; {'Prelude.Types.Right', V297} -> (begin (V312 = begin (V298 = {'TTImp.TTImp.IVar', V25, V160}), begin (V299 = {'TTImp.TTImp.IVar', V25, V155}), begin (V306 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.record.projection.prefix"/utf8>>, 5, fun () -> <<<<"Prefix projection "/utf8>>/binary, <<('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V300) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V300)) end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V301, V302)) end end}, V298))/binary, <<<<" = "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Prelude.Show.MkShow', fun (V303) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V303)) end, fun (V304) -> fun (V305) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V304, V305)) end end}, V299))/binary>>/binary>>/binary>> end))), fun (V307) -> begin (V308 = (V306(V307))), case V308 of {'Prelude.Types.Left', V309} -> {'Prelude.Types.Left', V309}; {'Prelude.Types.Right', V310} -> (begin (V311 = ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V17, V16, V15, V14, V13, [], V9, V10, {'TTImp.TTImp.IDef', V25, V160, [{'TTImp.TTImp.PatClause', V25, V298, V299} | []]}))), V311 end(V307)) end end end end end end), V312 end(V294)) end end end end), V313 end(V289)) end end end end; 0 -> fun (V314) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V315 end(V281)) end end end end), fun (V317) -> begin (V318 = (V316(V317))), case V318 of {'Prelude.Types.Left', V319} -> {'Prelude.Types.Left', V319}; {'Prelude.Types.Right', V320} -> (begin (V332 = begin (V321 = ('Idris.Idris2.Core.Context':'un--isPrefixRecordProjections'(V17))), fun (V322) -> begin (V323 = (V321(V322))), case V323 of {'Prelude.Types.Left', V324} -> {'Prelude.Types.Left', V324}; {'Prelude.Types.Right', V325} -> (begin (V331 = begin (V326 = case V325 of 1 -> [{'Builtin.MkPair', V26, {'TTImp.TTImp.IApp', V25, {'TTImp.TTImp.IVar', V25, V160}, {'TTImp.TTImp.IVar', V25, V215}}} | V22]; 0 -> [{'Builtin.MkPair', V26, {'TTImp.TTImp.IApp', V25, {'TTImp.TTImp.IVar', V25, V155}, {'TTImp.TTImp.IVar', V25, V215}}} | V22] end), ('nested--9681-5061--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, [V26 | V18], V19, V20, case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(PiInfo $t)'({'Prelude.EqOrd.MkEq', fun (V327) -> fun (V328) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'(V327, V328)) end end, fun (V329) -> fun (V330) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_(Term $vars)'(V329, V330)) end end}, V31, {'Core.TT.Explicit'})) of 1 -> (V21 + 1); 0 -> V21 end, V326, {'Core.Env.::', V47, V23}, V28)) end), V331 end(V322)) end end end end), V332 end(V317)) end end end end), V333 end(V276)) end end end end), V334 end(V271)) end end end end end end end), V335 end(V249)) end end end end), V336 end(V244)) end end end end end), V337 end(V233)) end end end end end), V338 end(V211)) end end end end end), V339 end(V198)) end end end end), V340 end(V193)) end end end end end), V341 end(V157)) end end end end), V342 end(V152)) end end end end end end end end end; _ -> fun (V343) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; _ -> fun (V344) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'nested--9681-5059--in--un--elabAsData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> begin (V20 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V11))), begin (V29 = ('nested--9681-5056--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, ('nested--9681-5052--in--un--paramTelescope'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('nested--9681-5056--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('nested--9681-5055--in--un--farg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V21)) end))(V0)), ('nested--9681-5057--in--un--recTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18))))))), begin (V38 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--9681-5058--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(fun (V30) -> ('nested--9681-5054--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V30)) end))(V0)), V8))))), begin (V39 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V17, V20, [], V38, V29))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V61 = begin (V44 = {'TTImp.TTImp.MkImpTy', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V20)), {'Core.FC.EmptyFC'}, V19, V43}), begin (V45 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V17, V20, [], V38, ('un--mkDataTy'(V20, V3))))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V60 = begin (V50 = {'TTImp.TTImp.MkImpData', V20, V18, V49, V2, [V44 | []]}), begin (V54 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.record"/utf8>>, 5, fun () -> <<<<"Record data type "/utf8>>/binary, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpData\x{27} $nm)'({'Prelude.Show.MkShow', fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V51)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V52, V53)) end end}, V50))/binary>> end))), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V59 = ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V17, V16, V15, V14, V13, [], V9, V10, {'TTImp.TTImp.IData', V20, V6, V5, V50}))), V59 end(V55)) end end end end end), V60 end(V46)) end end end end end), V61 end(V40)) end end end end end end end.
'nested--9681-5060--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Core.TT.Bind', V19, V20, V21, V22} -> case V21 of {'Core.TT.Pi', V23, V24, V25, V26} -> case V25 of {'Core.TT.Explicit'} -> (('nested--9681-5060--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22)) + 1); _ -> ('nested--9681-5060--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22)) end; _ -> 0 end; _ -> 0 end.
'nested--9775-5253--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of [] -> V19; [E0 | E1] -> (fun (V21, V22) -> case V21 of {'Builtin.MkPair', V23, V24} -> case V24 of {'Builtin.MkPair', V25, V26} -> case V26 of {'Core.TT.Explicit'} -> ('nested--9775-5253--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'TTImp.TTImp.IApp', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V19)), V19, V25}, V22)); _ -> ('nested--9775-5253--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'TTImp.TTImp.INamedApp', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V19)), V19, V23, V25}, V22)) end end end end(E0, E1)) end.
'un--projVis'(V0) -> case V0 of 2 -> 2; _ -> 0 end.
'un--processRecord'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'TTImp.TTImp.MkImpRecord', V13, V14, V15, V16, V17, V18} -> ('un--elabRecord'(V0, V1, V2, V3, V4, V5, V6, V13, V8, V7, V9, V10, V11, V14, V15, V16, V17, V18)) end.
'un--mkDataTy'(V0, V1) -> case V1 of [] -> {'TTImp.TTImp.IType', V0}; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'TTImp.TTImp.IPi', V0, V6, ('Idris.Idris2.TTImp.TTImp.Traversals':'un--mapPiInfo'(fun (V10) -> ('un--killHole'(V10)) end, V8)), {'Prelude.Types.Just', V4}, ('Idris.Idris2.TTImp.TTImp.Traversals':'un--mapTTImp'(fun (V11) -> ('un--killHole'(V11)) end, V9)), ('un--mkDataTy'(V0, V3))} end end end end(E0, E1)) end.
'un--killHole'(V0) -> case V0 of {'TTImp.TTImp.IHole', V1, V2} -> {'TTImp.TTImp.Implicit', V1, 1}; _ -> V0 end.
'un--elabRecord'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V13))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V239 = begin (V23 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V16))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V238 = begin (V28 = ('nested--9681-5059--in--un--elabAsData'(V17, V16, V15, V14, V13, V12, V11, V10, V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, V22, V27))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V237 = begin (V38 = begin (V33 = V1), fun (V34) -> begin (V37 = (begin (V35 = V33), fun (V36) -> ('erlang':'get'(V35)) end end(V34))), {'Prelude.Types.Right', V37} end end end), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V236 = begin (V75 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V27, case V42 of {'Core.Context.MkDefs', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74} -> V43 end))), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V235 = case V79 of {'Prelude.Types.Just', V80} -> begin (V95 = case V12 of {'Prelude.Types.Just', V81} -> begin (V88 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, (begin (V83 = fun (V82) -> V82 end), fun (V84) -> (V83(V84)) end end(<<"declare.record"/utf8>>)), 5, fun () -> <<(begin (V86 = fun (V85) -> V85 end), fun (V87) -> (V86(V87)) end end(<<"setting totality flag for "/utf8>>))/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22))/binary>> end))), fun (V89) -> begin (V90 = (V88(V89))), case V90 of {'Prelude.Types.Left', V91} -> {'Prelude.Types.Left', V91}; {'Prelude.Types.Right', V92} -> (begin (V93 = ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V7, V22, {'Core.Context.Context.SetTotal', V81}))), V93 end(V89)) end end end end; {'Prelude.Types.Nothing'} -> fun (V94) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V96) -> begin (V97 = (V95(V96))), case V97 of {'Prelude.Types.Left', V98} -> {'Prelude.Types.Left', V98}; {'Prelude.Types.Right', V99} -> (begin (V233 = case V10 of {'Prelude.Types.Nothing'} -> ('nested--9681-5061--in--un--elabGetters'(V17, V16, V15, V14, V13, V12, V11, V10, V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, [], V22, V27, 0, [], {'Core.Env.Nil'}, V80)); {'Prelude.Types.Just', V100} -> begin (V133 = case V42 of {'Core.Context.MkDefs', V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132} -> V103 end), begin (V166 = case V42 of {'Core.Context.MkDefs', V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165} -> V137 end), begin (V167 = ('Idris.Idris2.Core.Context':'un--extendNS'(V1, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V100))))), fun (V168) -> begin (V169 = (V167(V168))), case V169 of {'Prelude.Types.Left', V170} -> {'Prelude.Types.Left', V170}; {'Prelude.Types.Right', V171} -> (begin (V232 = begin (V172 = ('Idris.Idris2.Core.Context':'un--getNS'(V1))), fun (V173) -> begin (V174 = (V172(V173))), case V174 of {'Prelude.Types.Left', V175} -> {'Prelude.Types.Left', V175}; {'Prelude.Types.Right', V176} -> (begin (V231 = begin (V177 = ('nested--9681-5061--in--un--elabGetters'(V17, V16, V15, V14, V13, V12, V11, V10, V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, [], V22, V27, 0, [], {'Core.Env.Nil'}, V80))), fun (V178) -> begin (V179 = (V177(V178))), case V179 of {'Prelude.Types.Left', V180} -> {'Prelude.Types.Left', V180}; {'Prelude.Types.Right', V181} -> (begin (V230 = begin (V187 = begin (V182 = V1), fun (V183) -> begin (V186 = (begin (V184 = V182), fun (V185) -> ('erlang':'get'(V184)) end end(V183))), {'Prelude.Types.Right', V186} end end end), fun (V188) -> begin (V189 = (V187(V188))), case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> (begin (V229 = begin (V192 = V1), fun (V193) -> begin (V228 = (begin (V194 = V192), fun (V195) -> ('erlang':'put'(V194, case V191 of {'Core.Context.MkDefs', V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227} -> {'Core.Context.MkDefs', V196, V197, V133, [V176 | V166], V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227} end)) end end(V193))), {'Prelude.Types.Right', V228} end end end), V229 end(V188)) end end end end), V230 end(V178)) end end end end), V231 end(V173)) end end end end), V232 end(V168)) end end end end end end end), V233 end(V96)) end end end end; {'Prelude.Types.Nothing'} -> fun (V234) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Adding "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22))/binary, <<"failed"/utf8>>/binary>>/binary>>}, V234)) end end), V235 end(V76)) end end end end), V236 end(V39)) end end end end), V237 end(V29)) end end end end), V238 end(V24)) end end end end), V239 end(V19)) end end end end.
