-module('Idris.Idris2.Core.Options').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--show_Show_CG'/1,
  'dn--un--showPrec_Show_CG'/2,
  'dn--un--__Impl_Show_CG'/0,
  'dn--un--__Impl_Eq_CG'/0,
  'dn--un--==_Eq_CG'/2,
  'dn--un--/=_Eq_CG'/2,
  'un--toString'/1,
  'un--setRewrite'/3,
  'un--setPair'/4,
  'un--setFromString'/2,
  'un--setFromInteger'/2,
  'un--setFromDouble'/2,
  'un--setFromChar'/2,
  'un--setExtension'/2,
  'un--primNamesToList'/1,
  'un--outputDirWithDefault'/1,
  'un--isExtension'/2,
  'un--getCG'/2,
  'un--execBuildDir'/1,
  'un--defaults'/1,
  'un--defaultSession'/0,
  'un--defaultPPrint'/0,
  'un--defaultHashFn'/0,
  'un--defaultElab'/0,
  'un--defaultDirs'/0,
  'un--clearNames'/1,
  'un--availableCGs'/1,
  'un--addCG'/2
]).
'dn--un--show_Show_CG'(V0) -> case V0 of {'Core.Options.Chez'} -> <<"chez"/utf8>>; {'Core.Options.ChezSep'} -> <<"chez-sep"/utf8>>; {'Core.Options.Racket'} -> <<"racket"/utf8>>; {'Core.Options.Gambit'} -> <<"gambit"/utf8>>; {'Core.Options.Node'} -> <<"node"/utf8>>; {'Core.Options.Javascript'} -> <<"javascript"/utf8>>; {'Core.Options.RefC'} -> <<"refc"/utf8>>; {'Core.Options.VMCodeInterp'} -> <<"vmcode-interp"/utf8>>; {'Core.Options.Other', V1} -> V1 end.
'dn--un--showPrec_Show_CG'(V0, V1) -> ('dn--un--show_Show_CG'(V1)).
'dn--un--__Impl_Show_CG'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_CG'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_CG'(V1, V2)) end end}.
'dn--un--__Impl_Eq_CG'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_CG'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_CG'(V2, V3)) end end}.
'dn--un--==_Eq_CG'(V0, V1) -> case V0 of {'Core.Options.Chez'} -> case V1 of {'Core.Options.Chez'} -> 1; _ -> 0 end; {'Core.Options.ChezSep'} -> case V1 of {'Core.Options.ChezSep'} -> 1; _ -> 0 end; {'Core.Options.Racket'} -> case V1 of {'Core.Options.Racket'} -> 1; _ -> 0 end; {'Core.Options.Gambit'} -> case V1 of {'Core.Options.Gambit'} -> 1; _ -> 0 end; {'Core.Options.Node'} -> case V1 of {'Core.Options.Node'} -> 1; _ -> 0 end; {'Core.Options.Javascript'} -> case V1 of {'Core.Options.Javascript'} -> 1; _ -> 0 end; {'Core.Options.RefC'} -> case V1 of {'Core.Options.RefC'} -> 1; _ -> 0 end; {'Core.Options.VMCodeInterp'} -> case V1 of {'Core.Options.VMCodeInterp'} -> 1; _ -> 0 end; {'Core.Options.Other', V2} -> case V1 of {'Core.Options.Other', V3} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)); _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_CG'(V0, V1) -> case ('dn--un--==_Eq_CG'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'un--toString'(V0) -> case V0 of {'Core.Options.MkDirs', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10} -> (begin (V90 = fun (V89) -> V89 end), fun (V91) -> (V90(V91)) end end(('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V11) -> fun (V12) -> <<V11/binary, V12/binary>> end end, <<""/utf8>>}, fun (V13) -> V13 end, [(begin (V15 = fun (V14) -> V14 end), fun (V16) -> (V15(V16)) end end(<<"+ Working Directory      :: "/utf8>>)) | [(begin (V18 = fun (V17) -> V17 end), fun (V19) -> (V18(V19)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V1)))) | [(begin (V21 = fun (V20) -> V20 end), fun (V22) -> (V21(V22)) end end(<<"\x{a}+ Source Directory       :: "/utf8>>)) | [(begin (V27 = fun (V26) -> V26 end), fun (V28) -> (V27(V28)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V24, V25)) end end}, V2)))) | [(begin (V30 = fun (V29) -> V29 end), fun (V31) -> (V30(V31)) end end(<<"\x{a}+ Build Directory        :: "/utf8>>)) | [(begin (V33 = fun (V32) -> V32 end), fun (V34) -> (V33(V34)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V3)))) | [(begin (V36 = fun (V35) -> V35 end), fun (V37) -> (V36(V37)) end end(<<"\x{a}+ Local Depend Directory :: "/utf8>>)) | [(begin (V39 = fun (V38) -> V38 end), fun (V40) -> (V39(V40)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V4)))) | [(begin (V42 = fun (V41) -> V41 end), fun (V43) -> (V42(V43)) end end(<<"\x{a}+ Output Directory       :: "/utf8>>)) | [(begin (V45 = fun (V44) -> V44 end), fun (V46) -> (V45(V46)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(('un--outputDirWithDefault'(V0)))))) | [(begin (V48 = fun (V47) -> V47 end), fun (V49) -> (V48(V49)) end end(<<"\x{a}+ Installation Prefix    :: "/utf8>>)) | [(begin (V51 = fun (V50) -> V50 end), fun (V52) -> (V51(V52)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V6)))) | [(begin (V54 = fun (V53) -> V53 end), fun (V55) -> (V54(V55)) end end(<<"\x{a}+ Extra Directories      :: "/utf8>>)) | [(begin (V60 = fun (V59) -> V59 end), fun (V61) -> (V60(V61)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V56) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V56)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V57, V58)) end end}, V7)))) | [(begin (V63 = fun (V62) -> V62 end), fun (V64) -> (V63(V64)) end end(<<"\x{a}+ Package Directories    :: "/utf8>>)) | [(begin (V69 = fun (V68) -> V68 end), fun (V70) -> (V69(V70)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V65)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V66, V67)) end end}, V8)))) | [(begin (V72 = fun (V71) -> V71 end), fun (V73) -> (V72(V73)) end end(<<"\x{a}+ CG Library Directories :: "/utf8>>)) | [(begin (V78 = fun (V77) -> V77 end), fun (V79) -> (V78(V79)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V74) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V75, V76)) end end}, V9)))) | [(begin (V81 = fun (V80) -> V80 end), fun (V82) -> (V81(V82)) end end(<<"\x{a}+ Data Directories       :: "/utf8>>)) | [(begin (V87 = fun (V86) -> V86 end), fun (V88) -> (V87(V88)) end end(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V83) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V84, V85)) end end}, V10)))) | []]]]]]]]]]]]]]]]]]]]])))) end.
'un--setRewrite'(V0, V1, V2) -> case V2 of {'Core.Options.MkOptions', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12} -> {'Core.Options.MkOptions', V3, V4, V5, V6, V7, {'Prelude.Types.Just', {'Core.Options.MkRewriteNs', V0, V1}}, V9, V10, V11, V12} end.
'un--setPair'(V0, V1, V2, V3) -> case V3 of {'Core.Options.MkOptions', V4, V5, V6, V7, V8, V9, V10, V11, V12, V13} -> {'Core.Options.MkOptions', V4, V5, V6, V7, {'Prelude.Types.Just', {'Core.Options.MkPairNs', V0, V1, V2}}, V9, V10, V11, V12, V13} end.
'un--setFromString'(V0, V1) -> case V1 of {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11} -> case V8 of {'Core.Options.MkPrimNs', V12, V13, V14, V15} -> {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, {'Core.Options.MkPrimNs', V12, {'Prelude.Types.Just', V0}, V14, V15}, V9, V10, V11} end end.
'un--setFromInteger'(V0, V1) -> case V1 of {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11} -> case V8 of {'Core.Options.MkPrimNs', V12, V13, V14, V15} -> {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, {'Core.Options.MkPrimNs', {'Prelude.Types.Just', V0}, V13, V14, V15}, V9, V10, V11} end end.
'un--setFromDouble'(V0, V1) -> case V1 of {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11} -> case V8 of {'Core.Options.MkPrimNs', V12, V13, V14, V15} -> {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, {'Core.Options.MkPrimNs', V12, V13, V14, {'Prelude.Types.Just', V0}}, V9, V10, V11} end end.
'un--setFromChar'(V0, V1) -> case V1 of {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11} -> case V8 of {'Core.Options.MkPrimNs', V12, V13, V14, V15} -> {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, {'Core.Options.MkPrimNs', V12, V13, {'Prelude.Types.Just', V0}, V15}, V9, V10, V11} end end.
'un--setExtension'(V0, V1) -> case V1 of {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11} -> {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, V8, [V0 | V9], V10, V11} end.
'un--primNamesToList'(V0) -> case V0 of {'Core.Options.MkPrimNs', V1, V2, V3, V4} -> ('Idris.Idris2.Data.List':'un--catMaybes'([V1 | [V2 | [V3 | [V4 | []]]]])) end.
'un--outputDirWithDefault'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V0 of {'Core.Options.MkDirs', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10} -> V3 end, <<"exec"/utf8>>)) end, case V0 of {'Core.Options.MkDirs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20} -> V15 end)).
'un--isExtension'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> V22 end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Idris.Syntax.Pragmas':'dn--un--==_Eq_LangExt'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Idris.Syntax.Pragmas':'dn--un--/=_Eq_LangExt'(V30, V31)) end end}, V0, case V1 of {'Core.Options.MkOptions', V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} -> V39 end)).
'un--getCG'(V0, V1) -> ('Idris.Idris2.Data.List':'un--lookup'({'Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V4, V5)) end end}, ('Idris.Idris2.Data.String':'un--toLower'(V1)), ('un--availableCGs'(V0)))).
'un--execBuildDir'(V0) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V0 of {'Core.Options.MkDirs', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10} -> V3 end, <<"exec"/utf8>>)).
'un--defaults'(V0) -> {'Prelude.Types.Right', {'Core.Options.MkOptions', ('un--defaultDirs'()), ('un--defaultPPrint'()), ('un--defaultSession'()), ('un--defaultElab'()), {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Core.Options.MkPrimNs', {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}}, [], [], {'Prelude.Types.Nothing'}}}.
'un--defaultSession'() -> {'Core.Options.MkSessionOpts', 0, 1, 0, 0, {'Core.Options.Chez'}, [], [], {'Prelude.Types.Nothing'}, 1000, 0, 0, ('Idris.Idris2.Core.Options.Log':'un--defaultLogLevel'()), {'Prelude.Types.Nothing'}, 0, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, 0, 1, 0, 1, 0, [], 0, 0}.
'un--defaultPPrint'() -> {'Core.Options.MkPPOpts', 0, 0, 1, 0}.
'un--defaultHashFn'() -> begin (V2 = fun (V0) -> begin (V1 = ('Idris.Idris2.Libraries.Utils.Path':'un--pathLookup'([<<"sha256sum"/utf8>> | [<<"gsha256sum"/utf8>> | []]], V0))), {'Prelude.Types.Right', V1} end end), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V29 = case V6 of {'Prelude.Types.Nothing'} -> begin (V9 = fun (V7) -> begin (V8 = ('Idris.Idris2.Libraries.Utils.Path':'un--pathLookup'([<<"sha256"/utf8>> | []], V7))), {'Prelude.Types.Right', V8} end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V26 = case V13 of {'Prelude.Types.Nothing'} -> begin (V16 = fun (V14) -> begin (V15 = ('Idris.Idris2.Libraries.Utils.Path':'un--pathLookup'([<<"openssl"/utf8>> | []], V14))), {'Prelude.Types.Right', V15} end end), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V23 = fun (V21) -> case V20 of {'Prelude.Types.Nothing'} -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}}; {'Prelude.Types.Just', V22} -> {'Prelude.Types.Right', {'Prelude.Types.Just', <<V22/binary, <<" sha256"/utf8>>/binary>>}} end end), V23 end(V17)) end end end end; {'Prelude.Types.Just', V24} -> fun (V25) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V24}} end end), V26 end(V10)) end end end end; {'Prelude.Types.Just', V27} -> fun (V28) -> {'Prelude.Types.Right', {'Prelude.Types.Just', <<V27/binary, <<" --tag"/utf8>>/binary>>}} end end), V29 end(V3)) end end end end.
'un--defaultElab'() -> {'Core.Options.MkElabDirectives', 1, 1, 1, 3, 50, 25, 1}.
'un--defaultDirs'() -> {'Core.Options.MkDirs', <<"."/utf8>>, {'Prelude.Types.Nothing'}, <<"build"/utf8>>, <<"depends"/utf8>>, {'Prelude.Types.Nothing'}, <<"/usr/local"/utf8>>, [<<"."/utf8>> | []], [], [], []}.
'un--clearNames'(V0) -> case V0 of {'Core.Options.MkOptions', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10} -> {'Core.Options.MkOptions', V1, V2, V3, V4, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Core.Options.MkPrimNs', {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}, {'Prelude.Types.Nothing'}}, [], V9, V10} end.
'un--availableCGs'(V0) -> case V0 of {'Core.Options.MkOptions', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10} -> V9 end.
'un--addCG'(V0, V1) -> case V1 of {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11} -> {'Core.Options.MkOptions', V2, V3, V4, V5, V6, V7, V8, V9, [V0 | V10], V11} end.
