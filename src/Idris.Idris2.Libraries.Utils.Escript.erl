-module('Idris.Idris2.Libraries.Utils.Escript').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in openArchive-3574'/6,
  'case--openArchive-3510'/4,
  'nested--4377-3780--in--un--zipFile'/1,
  'nested--4377-3781--in--un--row'/1,
  'un--readFile'/2,
  'un--openArchive'/2,
  'un--listFiles'/1,
  'un--getEscriptPath'/1,
  'un--closeArchive'/1
]).
'case--case block in openArchive-3574'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Prelude.Types.Right', V6} -> case V6 of {E0, E1} -> (fun (V7, V8) -> begin (V9 = ('erlang':'apply'('zip', 'zip_open', [V8 | [['memory' | []] | []]]))), case ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Erlang.Types.ETErlTerm'}, ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V10) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V10)) end)), V9)) of {'Prelude.Types.Right', V11} -> {'Prelude.Types.Just', V11}; {'Prelude.Types.Left', V12} -> {'Prelude.Types.Nothing'} end end end(E0, E1)) end; {'Prelude.Types.Left', V13} -> {'Prelude.Types.Nothing'} end.
'case--openArchive-3510'(V0, V1, V2, V3) -> case V2 of {'Prelude.Types.Right', V4} -> begin (V5 = ('erlang':'apply'('proplists', 'lookup', ['archive' | [V4 | []]]))), ('case--case block in openArchive-3574'(V0, V1, V4, V5, ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Erlang.Types.ETErlTerm'}, ('Idris.Idris2.Erlang.Decode':'un--tuple2'(fun (V6) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V6)) end, fun (V7) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V7)) end)), V5)), V3)) end; {'Prelude.Types.Left', V8} -> {'Prelude.Types.Nothing'} end.
'nested--4377-3780--in--un--zipFile'(V0) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V1) -> case V1 of {E0, E1, E2, E3, E4, E5} -> (fun (V2, V3, V4, V5, V6, V7) -> case V3 of E6 -> (fun (V8) -> V8 end((fun (V9) -> ('unicode':'characters_to_binary'(V9)) end(E6)))) end end(E0, E1, E2, E3, E4, E5)) end end, ('Idris.Idris2.Erlang.Decode':'un--tuple6'(fun (V10) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Erlang.Types.ETErlAtom'}, 'zip_file', V10)) end, ('Idris.Idris2.Erlang.Decode':'un--charlist'()), fun (V11) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V11)) end, fun (V12) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V12)) end, fun (V13) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V13)) end, fun (V14) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V14)) end)))).
'nested--4377-3781--in--un--row'(V0) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V1) -> {'Prelude.Types.Just', V1} end, ('nested--4377-3780--in--un--zipFile'(V0)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V4, V5)) end end end end, fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V7, V8)) end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V11, V12)) end end end end}, fun (V13) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V13)) end, fun (V14) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Prelude.Types.Nothing'}, V14)) end)) end)).
'un--readFile'(V0, V1) -> begin (V2 = V0), fun (V3) -> begin (V4 = ('erlang':'apply'('zip', 'zip_get', [('unicode':'characters_to_list'(V1)) | [V2 | []]]))), case ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Erlang.Types.ETErlTerm'}, ('Idris.Idris2.Erlang.Decode':'un--okTuple'(('Idris.Idris2.Erlang.Decode':'un--tuple2'(('Idris.Idris2.Erlang.Decode':'un--charlist'()), fun (V5) -> ('Idris.Idris2.Erlang.Decode':'un--string'(V5)) end)))), V4)) of {'Prelude.Types.Right', V6} -> case V6 of {E0, E1} -> (fun (V7, V8) -> {'Prelude.Types.Just', V8} end(E0, E1)) end; {'Prelude.Types.Left', V9} -> {'Prelude.Types.Nothing'} end end end end.
'un--openArchive'(V0, V1) -> begin (V2 = ('erlang':'apply'('escript', 'extract', [('unicode':'characters_to_list'(V0)) | [[] | []]]))), ('case--openArchive-3510'(V0, V2, ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Erlang.Types.ETErlTerm'}, ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V3) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V3)) end)), V2)), V1)) end.
'un--listFiles'(V0) -> begin (V1 = V0), fun (V2) -> begin (V3 = ('erlang':'apply'('zip', 'zip_list_dir', [V1 | []]))), case ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Erlang.Types.ETErlTerm'}, ('Idris.Idris2.Erlang.Decode':'un--okTuple'(('Idris.Idris2.Erlang.Decode':'un--list'(('nested--4377-3781--in--un--row'(V1)))))), V3)) of {'Prelude.Types.Right', V4} -> {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.List':'un--mapMaybeAppend'({'Prelude.Basics.Lin'}, fun (V5) -> V5 end, V4))}; {'Prelude.Types.Left', V6} -> {'Prelude.Types.Nothing'} end end end end.
'un--getEscriptPath'(V0) -> begin (V29 = (('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, fun (V28) -> ('erlang':'apply'('escript', 'script_name', [])) end))(V0))), case V29 of {'Prelude.Types.Right', V30} -> ('Idris.Idris2.Erlang.Decode':'un--erlDecodeMay'({'Erlang.Types.ETErlTerm'}, ((begin (V38 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V36, V37)) end end end end), fun (V39) -> fun (V40) -> ((((V38('erased'))('erased'))(V39))(V40)) end end end(fun (V31) -> case V31 of E0 -> (fun (V32) -> V32 end((fun (V33) -> ('unicode':'characters_to_binary'(V33)) end(E0)))) end end))(('Idris.Idris2.Erlang.Decode':'un--charlist'()))), V30)); {'Prelude.Types.Left', V41} -> {'Prelude.Types.Nothing'} end end.
'un--closeArchive'(V0) -> begin (V1 = V0), ((begin (V9 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V3) -> {'Builtin.MkUnit'} end))(fun (V2) -> ('erlang':'apply'('zip', 'zip_close', [V1 | []])) end)) end.
