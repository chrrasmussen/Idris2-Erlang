-module('Idris.Idris2.Compiler.Scheme.Common').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8530-3122--in--un--strTo'/2,
  'nested--10771-7878--in--un--showConstAlts'/8,
  'nested--10767-6001--in--un--showAlts'/7,
  'nested--10771-7760--in--un--recordCase'/8,
  'nested--7893-2500--in--un--okchar'/2,
  'nested--10771-7759--in--un--maybeCase'/8,
  'nested--10771-7758--in--un--listCase'/8,
  'nested--8530-3124--in--un--intTo'/3,
  'nested--10770-7049--in--un--getNothingCode'/7,
  'nested--10769-6571--in--un--getNilCode'/7,
  'nested--10770-7050--in--un--getJustCode'/8,
  'nested--10769-6572--in--un--getConsCode'/8,
  'nested--10768-6335--in--un--getAltCode'/9,
  'nested--8530-3123--in--un--dblTo'/2,
  'nested--8530-3121--in--un--charTo'/2,
  'nested--10770-7048--in--un--buildCase'/10,
  'nested--10769-6570--in--un--buildCase'/10,
  'nested--12049-6756--in--un--bindArgs'/15,
  'nested--10768-6334--in--un--bindArgs'/12,
  'nested--10764-5627--in--un--bindArgs'/12,
  'nested--10763-5491--in--un--bindArgs'/12,
  'nested--12553-7231--in--un--bindArg'/14,
  'dn--un--show_Show_ExtPrim'/1,
  'dn--un--showPrec_Show_ExtPrim'/2,
  'dn--un--__Impl_Show_ExtPrim'/0,
  'un--var'/1,
  'un--usedConst'/2,
  'un--usedCon'/2,
  'un--used'/2,
  'un--toPrim'/1,
  'un--sub'/3,
  'un--showTag'/4,
  'un--shl'/3,
  'un--schUserName'/1,
  'un--schString'/1,
  'un--schRecordCon'/3,
  'un--schRecordCase'/6,
  'un--schPrimType'/1,
  'un--schOp'/2,
  'un--schName'/1,
  'un--schMaybeCase'/6,
  'un--schListCase'/6,
  'un--schExtCommon'/5,
  'un--schExp'/4,
  'un--schDef'/5,
  'un--schConstructor'/4,
  'un--schConstant'/2,
  'un--schConstAlt'/5,
  'un--schConUncheckedAlt'/5,
  'un--schConAlt'/5,
  'un--schCaseTree'/6,
  'un--schCaseDef'/1,
  'un--schArgs'/4,
  'un--schArglist'/1,
  'un--op'/2,
  'un--mul'/3,
  'un--mkWorld'/1,
  'un--getScheme'/4,
  'un--firstExists'/2,
  'un--div'/3,
  'un--constPrimitives'/0,
  'un--boolop'/2,
  'un--add'/3
]).
'nested--8530-3122--in--un--strTo'(V0, V1) -> case V0 of {'Core.TT.Signed', V2} -> case V2 of {'Core.TT.Unlimited'} -> ('un--op'(<<"cast-string-int"/utf8>>, [V1 | []])); {'Core.TT.P', V3} -> ('un--op'(<<"cast-string-boundedInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V4 = (V3 - 1)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end)) | []]])) end; {'Core.TT.Unsigned', V5} -> ('un--op'(<<"cast-string-boundedUInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5)) | []]])) end.
'nested--10771-7878--in--un--showConstAlts'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> {'Prelude.Types.Right', <<""/utf8>>} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Core.CompileExpr.MkNConstAlt', V11, V12} -> case V10 of [] -> begin (V14 = ('un--schExp'(V0, V1, begin (V13 = (V5 + 1)), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end, V12))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', <<<<"(else "/utf8>>/binary, <<V18/binary, <<")"/utf8>>/binary>>/binary>>} end), V20 end(V15)) end end end end; _ -> begin (V22 = ('un--schConstAlt'(V0, V1, begin (V21 = (V5 + 1)), case ((V21 band 9223372036854775808) =/= 0) of 'true' -> (V21 bor -9223372036854775808); _ -> (V21 band 9223372036854775807) end end, V6, V9))), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V34 = begin (V27 = ('nested--10771-7878--in--un--showConstAlts'(V0, V1, V2, V3, V4, V5, V6, V10))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V33 = fun (V32) -> {'Prelude.Types.Right', <<V26/binary, <<<<" "/utf8>>/binary, V31/binary>>/binary>>} end), V33 end(V28)) end end end end), V34 end(V23)) end end end end end; _ -> begin (V36 = ('un--schConstAlt'(V0, V1, begin (V35 = (V5 + 1)), case ((V35 band 9223372036854775808) =/= 0) of 'true' -> (V35 bor -9223372036854775808); _ -> (V35 band 9223372036854775807) end end, V6, V9))), fun (V37) -> begin (V38 = (V36(V37))), case V38 of {'Prelude.Types.Left', V39} -> {'Prelude.Types.Left', V39}; {'Prelude.Types.Right', V40} -> (begin (V48 = begin (V41 = ('nested--10771-7878--in--un--showConstAlts'(V0, V1, V2, V3, V4, V5, V6, V10))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V47 = fun (V46) -> {'Prelude.Types.Right', <<V40/binary, <<<<" "/utf8>>/binary, V45/binary>>/binary>>} end), V47 end(V42)) end end end end), V48 end(V37)) end end end end end end(E0, E1)) end.
'nested--10767-6001--in--un--showAlts'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', <<""/utf8>>} end; [E0 | E1] -> (fun (V8, V9) -> case V9 of [] -> begin (V11 = ('un--schConUncheckedAlt'(V0, V1, begin (V10 = (V4 + 1)), case ((V10 band 9223372036854775808) =/= 0) of 'true' -> (V10 bor -9223372036854775808); _ -> (V10 band 9223372036854775807) end end, V5, V8))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', <<<<"(else "/utf8>>/binary, <<V15/binary, <<")"/utf8>>/binary>>/binary>>} end), V17 end(V12)) end end end end; _ -> begin (V19 = ('un--schConAlt'(V0, V1, begin (V18 = (V4 + 1)), case ((V18 band 9223372036854775808) =/= 0) of 'true' -> (V18 bor -9223372036854775808); _ -> (V18 band 9223372036854775807) end end, V5, V8))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V31 = begin (V24 = ('nested--10767-6001--in--un--showAlts'(V0, V1, V2, V3, V4, V5, V9))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V30 = fun (V29) -> {'Prelude.Types.Right', <<V23/binary, <<<<" "/utf8>>/binary, V28/binary>>/binary>>} end), V30 end(V25)) end end end end), V31 end(V20)) end end end end end end(E0, E1)) end.
'nested--10771-7760--in--un--recordCase'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.CompileExpr.MkNConAlt', V10, V11, V12, V13, V14} -> case V11 of {'Core.CompileExpr.RECORD'} -> 1; _ -> 0 end; _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--7893-2500--in--un--okchar'(V0, V1) -> case case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V1)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $_)) end of 1 -> ('unicode':'characters_to_binary'([V1 | []])); 0 -> <<<<"C-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(case V1 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end))/binary>> end.
'nested--10771-7759--in--un--maybeCase'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.CompileExpr.MkNConAlt', V10, V11, V12, V13, V14} -> case V11 of {'Core.CompileExpr.NOTHING'} -> 1; {'Core.CompileExpr.JUST'} -> 1; _ -> 0 end; _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--10771-7758--in--un--listCase'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.CompileExpr.MkNConAlt', V10, V11, V12, V13, V14} -> case V11 of {'Core.CompileExpr.NIL'} -> 1; {'Core.CompileExpr.CONS'} -> 1; _ -> 0 end; _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--8530-3124--in--un--intTo'(V0, V1, V2) -> case V1 of {'Core.TT.Signed', V3} -> case V3 of {'Core.TT.Unlimited'} -> V2; _ -> case V0 of {'Core.TT.Signed', V4} -> case V1 of {'Core.TT.Signed', V5} -> case V5 of {'Core.TT.P', V6} -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'({'Core.TT.P', V6}, V4)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toSignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V7 = (V6 - 1)), case ((V7 band 9223372036854775808) =/= 0) of 'true' -> (V7 bor -9223372036854775808); _ -> (V7 band 9223372036854775807) end end)) | []]])) end end; {'Core.TT.Unsigned', V8} -> ('un--op'(<<"blodwen-toUnsignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8)) | []]])) end; {'Core.TT.Unsigned', V9} -> case V1 of {'Core.TT.Signed', V10} -> case V10 of {'Core.TT.P', V11} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V11, V9)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toSignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V12 = (V11 - 1)), case ((V12 band 9223372036854775808) =/= 0) of 'true' -> (V12 bor -9223372036854775808); _ -> (V12 band 9223372036854775807) end end)) | []]])) end end; {'Core.TT.Unsigned', V13} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V13, V9)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toUnsignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13)) | []]])) end end end end; _ -> case V0 of {'Core.TT.Signed', V14} -> case V1 of {'Core.TT.Signed', V15} -> case V15 of {'Core.TT.P', V16} -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'({'Core.TT.P', V16}, V14)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toSignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V17 = (V16 - 1)), case ((V17 band 9223372036854775808) =/= 0) of 'true' -> (V17 bor -9223372036854775808); _ -> (V17 band 9223372036854775807) end end)) | []]])) end end; {'Core.TT.Unsigned', V18} -> ('un--op'(<<"blodwen-toUnsignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18)) | []]])) end; {'Core.TT.Unsigned', V19} -> case V1 of {'Core.TT.Signed', V20} -> case V20 of {'Core.TT.P', V21} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V21, V19)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toSignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V22 = (V21 - 1)), case ((V22 band 9223372036854775808) =/= 0) of 'true' -> (V22 bor -9223372036854775808); _ -> (V22 band 9223372036854775807) end end)) | []]])) end end; {'Core.TT.Unsigned', V23} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V23, V19)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toUnsignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V23)) | []]])) end end end end.
'nested--10770-7049--in--un--getNothingCode'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.CompileExpr.MkNConAlt', V10, V11, V12, V13, V14} -> case V11 of {'Core.CompileExpr.NOTHING'} -> begin (V16 = ('un--schExp'(V0, V1, begin (V15 = (V5 + 1)), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end, V14))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V20}} end), V22 end(V17)) end end end end; _ -> ('nested--10770-7049--in--un--getNothingCode'(V0, V1, V2, V3, V4, V5, V9)) end; _ -> ('nested--10770-7049--in--un--getNothingCode'(V0, V1, V2, V3, V4, V5, V9)) end end(E0, E1)) end.
'nested--10769-6571--in--un--getNilCode'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.CompileExpr.MkNConAlt', V10, V11, V12, V13, V14} -> case V11 of {'Core.CompileExpr.NIL'} -> begin (V16 = ('un--schExp'(V0, V1, begin (V15 = (V5 + 1)), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end, V14))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V20}} end), V22 end(V17)) end end end end; _ -> ('nested--10769-6571--in--un--getNilCode'(V0, V1, V2, V3, V4, V5, V9)) end; _ -> ('nested--10769-6571--in--un--getNilCode'(V0, V1, V2, V3, V4, V5, V9)) end end(E0, E1)) end.
'nested--10770-7050--in--un--getJustCode'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Core.CompileExpr.MkNConAlt', V11, V12, V13, V14, V15} -> case V12 of {'Core.CompileExpr.JUST'} -> case V14 of [E2 | E3] -> (fun (V16, V17) -> case V17 of [] -> begin (V19 = ('un--schExp'(V0, V1, begin (V18 = (V5 + 1)), case ((V18 band 9223372036854775808) =/= 0) of 'true' -> (V18 bor -9223372036854775808); _ -> (V18 band 9223372036854775807) end end, V15))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', {'Prelude.Types.Just', ('nested--12553-7231--in--un--bindArg'(V0, V1, V2, V3, V4, V5, V10, V11, V13, V16, V15, V6, V16, V23))}} end), V25 end(V20)) end end end end; _ -> ('nested--10770-7050--in--un--getJustCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E2, E3)); _ -> ('nested--10770-7050--in--un--getJustCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end; _ -> ('nested--10770-7050--in--un--getJustCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end; _ -> ('nested--10770-7050--in--un--getJustCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E0, E1)) end.
'nested--10769-6572--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Core.CompileExpr.MkNConAlt', V11, V12, V13, V14, V15} -> case V12 of {'Core.CompileExpr.CONS'} -> case V14 of [E2 | E3] -> (fun (V16, V17) -> case V17 of [E4 | E5] -> (fun (V18, V19) -> case V19 of [] -> begin (V21 = ('un--schExp'(V0, V1, begin (V20 = (V5 + 1)), case ((V20 band 9223372036854775808) =/= 0) of 'true' -> (V20 bor -9223372036854775808); _ -> (V20 band 9223372036854775807) end end, V15))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V27 = fun (V26) -> {'Prelude.Types.Right', {'Prelude.Types.Just', ('nested--12049-6756--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V10, V11, V13, V16, V18, V15, V6, [{'Builtin.MkPair', V16, <<"car"/utf8>>} | [{'Builtin.MkPair', V18, <<"cdr"/utf8>>} | []]], V25))}} end), V27 end(V22)) end end end end; _ -> ('nested--10769-6572--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E4, E5)); _ -> ('nested--10769-6572--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E2, E3)); _ -> ('nested--10769-6572--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end; _ -> ('nested--10769-6572--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end; _ -> ('nested--10769-6572--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E0, E1)) end.
'nested--10768-6335--in--un--getAltCode'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Core.CompileExpr.MkNConAlt', V9, V10, V11, V12, V13} -> begin (V14 = ('un--schExp'(V0, V1, V6, V13))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', ('nested--10768-6334--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, 0, V7, V12, V18, V13))} end), V20 end(V15)) end end end end end.
'nested--8530-3123--in--un--dblTo'(V0, V1) -> case V0 of {'Core.TT.Signed', V2} -> case V2 of {'Core.TT.Unlimited'} -> ('un--op'(<<"exact-truncate"/utf8>>, [V1 | []])); {'Core.TT.P', V3} -> ('un--op'(<<"exact-truncate-boundedInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V4 = (V3 - 1)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end)) | []]])) end; {'Core.TT.Unsigned', V5} -> ('un--op'(<<"exact-truncate-boundedUInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5)) | []]])) end.
'nested--8530-3121--in--un--charTo'(V0, V1) -> case V0 of {'Core.TT.Signed', V2} -> case V2 of {'Core.TT.Unlimited'} -> ('un--op'(<<"char->integer"/utf8>>, [V1 | []])); {'Core.TT.P', V3} -> ('un--op'(<<"cast-char-boundedInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V4 = (V3 - 1)), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end)) | []]])) end; {'Core.TT.Unsigned', V5} -> ('un--op'(<<"cast-char-boundedUInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5)) | []]])) end.
'nested--10770-7048--in--un--buildCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Prelude.Types.Just', V10} -> case V8 of {'Prelude.Types.Just', V11} -> <<<<"(if (null? "/utf8>>/binary, <<V6/binary, <<<<") "/utf8>>/binary, <<V10/binary, <<<<" "/utf8>>/binary, <<V11/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Prelude.Types.Nothing'} -> case V9 of {'Prelude.Types.Nothing'} -> V10; {'Prelude.Types.Just', V12} -> <<<<"(if (null? "/utf8>>/binary, <<V6/binary, <<<<") "/utf8>>/binary, <<V10/binary, <<<<" "/utf8>>/binary, <<V12/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end end; {'Prelude.Types.Nothing'} -> case V8 of {'Prelude.Types.Just', V13} -> case V9 of {'Prelude.Types.Nothing'} -> V13; {'Prelude.Types.Just', V14} -> <<<<"(if (null? "/utf8>>/binary, <<V6/binary, <<<<") "/utf8>>/binary, <<V14/binary, <<<<" "/utf8>>/binary, <<V13/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Prelude.Types.Nothing'} -> case V9 of {'Prelude.Types.Just', V15} -> V15; {'Prelude.Types.Nothing'} -> <<"#f"/utf8>> end end end.
'nested--10769-6570--in--un--buildCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Prelude.Types.Just', V10} -> case V8 of {'Prelude.Types.Just', V11} -> <<<<"(if (null? "/utf8>>/binary, <<V6/binary, <<<<") "/utf8>>/binary, <<V10/binary, <<<<" "/utf8>>/binary, <<V11/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Prelude.Types.Nothing'} -> case V9 of {'Prelude.Types.Nothing'} -> V10; {'Prelude.Types.Just', V12} -> <<<<"(if (null? "/utf8>>/binary, <<V6/binary, <<<<") "/utf8>>/binary, <<V10/binary, <<<<" "/utf8>>/binary, <<V12/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end end; {'Prelude.Types.Nothing'} -> case V8 of {'Prelude.Types.Just', V13} -> case V9 of {'Prelude.Types.Nothing'} -> V13; {'Prelude.Types.Just', V14} -> <<<<"(if (null? "/utf8>>/binary, <<V6/binary, <<<<") "/utf8>>/binary, <<V14/binary, <<<<" "/utf8>>/binary, <<V13/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Prelude.Types.Nothing'} -> case V9 of {'Prelude.Types.Just', V15} -> V15; {'Prelude.Types.Nothing'} -> <<"#f"/utf8>> end end end.
'nested--12049-6756--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of [] -> V14; [E0 | E1] -> (fun (V15, V16) -> case V15 of {'Builtin.MkPair', V17, V18} -> case ('un--used'(V17, V11)) of 1 -> <<<<"(let (("/utf8>>/binary, <<('un--schName'(V17))/binary, <<<<" "/utf8>>/binary, <<<<"("/utf8>>/binary, <<V18/binary, <<<<" "/utf8>>/binary, <<V12/binary, <<<<"))) "/utf8>>/binary, <<('nested--12049-6756--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V14))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; 0 -> ('nested--12049-6756--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V14)) end end end(E0, E1)) end.
'nested--10768-6334--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of [] -> V10; [E0 | E1] -> (fun (V12, V13) -> case ('un--used'(V12, V11)) of 1 -> <<<<"(let (("/utf8>>/binary, <<('un--schName'(V12))/binary, <<<<" "/utf8>>/binary, <<<<"(vector-ref "/utf8>>/binary, <<V8/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7))/binary, <<<<"))) "/utf8>>/binary, <<('nested--10768-6334--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, begin (V14 = (V7 + 1)), case ((V14 band 9223372036854775808) =/= 0) of 'true' -> (V14 bor -9223372036854775808); _ -> (V14 band 9223372036854775807) end end, V8, V13, V10, V11))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; 0 -> ('nested--10768-6334--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, begin (V15 = (V7 + 1)), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end, V8, V13, V10, V11)) end end(E0, E1)) end.
'nested--10764-5627--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E0 | E1] -> (fun (V12, V13) -> case ('un--used'(V12, V2)) of 1 -> <<<<"(let (("/utf8>>/binary, <<('un--schName'(V12))/binary, <<<<" "/utf8>>/binary, <<<<"(vector-ref "/utf8>>/binary, <<V7/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9))/binary, <<<<"))) "/utf8>>/binary, <<('nested--10764-5627--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, begin (V14 = (V9 + 1)), case ((V14 band 9223372036854775808) =/= 0) of 'true' -> (V14 bor -9223372036854775808); _ -> (V14 band 9223372036854775807) end end, V13, V11))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; 0 -> ('nested--10764-5627--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, begin (V15 = (V9 + 1)), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end, V13, V11)) end end(E0, E1)) end.
'nested--10763-5491--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E0 | E1] -> (fun (V12, V13) -> case ('un--used'(V12, V2)) of 1 -> <<<<"(let (("/utf8>>/binary, <<('un--schName'(V12))/binary, <<<<" "/utf8>>/binary, <<<<"(vector-ref "/utf8>>/binary, <<V7/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9))/binary, <<<<"))) "/utf8>>/binary, <<('nested--10763-5491--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, begin (V14 = (V9 + 1)), case ((V14 band 9223372036854775808) =/= 0) of 'true' -> (V14 bor -9223372036854775808); _ -> (V14 band 9223372036854775807) end end, V13, V11))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; 0 -> ('nested--10763-5491--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, begin (V15 = (V9 + 1)), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end, V13, V11)) end end(E0, E1)) end.
'nested--12553-7231--in--un--bindArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case ('un--used'(V12, V10)) of 1 -> <<<<"(let (("/utf8>>/binary, <<('un--schName'(V12))/binary, <<<<" "/utf8>>/binary, <<<<"(unbox "/utf8>>/binary, <<V11/binary, <<<<"))) "/utf8>>/binary, <<V13/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; 0 -> V13 end.
'dn--un--show_Show_ExtPrim'(V0) -> case V0 of {'Compiler.Scheme.Common.NewIORef'} -> <<"NewIORef"/utf8>>; {'Compiler.Scheme.Common.ReadIORef'} -> <<"ReadIORef"/utf8>>; {'Compiler.Scheme.Common.WriteIORef'} -> <<"WriteIORef"/utf8>>; {'Compiler.Scheme.Common.FreeIORef'} -> <<"FreeIORef"/utf8>>; {'Compiler.Scheme.Common.NewArray'} -> <<"NewArray"/utf8>>; {'Compiler.Scheme.Common.ArrayGet'} -> <<"ArrayGet"/utf8>>; {'Compiler.Scheme.Common.ArraySet'} -> <<"ArraySet"/utf8>>; {'Compiler.Scheme.Common.GetField'} -> <<"GetField"/utf8>>; {'Compiler.Scheme.Common.SetField'} -> <<"SetField"/utf8>>; {'Compiler.Scheme.Common.VoidElim'} -> <<"VoidElim"/utf8>>; {'Compiler.Scheme.Common.SysOS'} -> <<"SysOS"/utf8>>; {'Compiler.Scheme.Common.SysCodegen'} -> <<"SysCodegen"/utf8>>; {'Compiler.Scheme.Common.OnCollect'} -> <<"OnCollect"/utf8>>; {'Compiler.Scheme.Common.OnCollectAny'} -> <<"OnCollectAny"/utf8>>; {'Compiler.Scheme.Common.MakeFuture'} -> <<"MakeFuture"/utf8>>; {'Compiler.Scheme.Common.Unknown', V1} -> <<<<"Unknown "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))/binary>> end.
'dn--un--showPrec_Show_ExtPrim'(V0, V1) -> ('dn--un--show_Show_ExtPrim'(V1)).
'dn--un--__Impl_Show_ExtPrim'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ExtPrim'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ExtPrim'(V1, V2)) end end}.
'un--var'(V0) -> case V0 of {'Core.CompileExpr.NmLocal', V1, V2} -> 1; _ -> 0 end.
'un--usedConst'(V0, V1) -> case V1 of {'Core.CompileExpr.MkNConstAlt', V2, V3} -> ('un--used'(V0, V3)) end.
'un--usedCon'(V0, V1) -> case V1 of {'Core.CompileExpr.MkNConAlt', V2, V3, V4, V5, V6} -> ('un--used'(V0, V6)) end.
'un--used'(V0, V1) -> case V1 of {'Core.CompileExpr.NmLocal', V2, V3} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V3)); {'Core.CompileExpr.NmRef', V4, V5} -> 0; {'Core.CompileExpr.NmLam', V6, V7, V8} -> ('un--used'(V0, V8)); {'Core.CompileExpr.NmLet', V9, V10, V11, V12} -> case ('un--used'(V0, V11)) of 1 -> 1; 0 -> ('un--used'(V0, V12)) end; {'Core.CompileExpr.NmApp', V13, V14, V15} -> case ('un--used'(V0, V14)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V16, V17)) end end, 0}, fun (V18) -> ('un--used'(V0, V18)) end, V15)) end; {'Core.CompileExpr.NmCon', V19, V20, V21, V22, V23} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V24, V25)) end end, 0}, fun (V26) -> ('un--used'(V0, V26)) end, V23)); {'Core.CompileExpr.NmOp', V27, V28, V29, V30} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V31, V32)) end end, 0}, fun (V33) -> ('un--used'(V0, V33)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V30)))); {'Core.CompileExpr.NmExtPrim', V34, V35, V36} -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V37, V38)) end end, 0}, fun (V39) -> ('un--used'(V0, V39)) end, V36)); {'Core.CompileExpr.NmForce', V40, V41, V42} -> ('un--used'(V0, V42)); {'Core.CompileExpr.NmDelay', V43, V44, V45} -> ('un--used'(V0, V45)); {'Core.CompileExpr.NmConCase', V46, V47, V48, V49} -> case ('un--used'(V0, V47)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V50, V51)) end end, 0}, fun (V52) -> ('un--usedCon'(V0, V52)) end, V48)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V53) -> ('un--used'(V0, V53)) end end, V49)) end end; {'Core.CompileExpr.NmConstCase', V54, V55, V56, V57} -> case ('un--used'(V0, V55)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AnyBool'(V58, V59)) end end, 0}, fun (V60) -> ('un--usedConst'(V0, V60)) end, V56)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V61) -> ('un--used'(V0, V61)) end end, V57)) end end; _ -> 0 end.
'un--toPrim'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> ('Idris.Idris2.Core.Core':'un--cond'([{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V4 = fun (V3) -> V3 end), fun (V5) -> (V4(V5)) end end(<<"prim__newIORef"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.NewIORef'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V7 = fun (V6) -> V6 end), fun (V8) -> (V7(V8)) end end(<<"prim__readIORef"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.ReadIORef'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V10 = fun (V9) -> V9 end), fun (V11) -> (V10(V11)) end end(<<"prim__writeIORef"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.WriteIORef'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V13 = fun (V12) -> V12 end), fun (V14) -> (V13(V14)) end end(<<"prim__freeIORef"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.FreeIORef'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V16 = fun (V15) -> V15 end), fun (V17) -> (V16(V17)) end end(<<"prim__newArray"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.NewArray'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V19 = fun (V18) -> V18 end), fun (V20) -> (V19(V20)) end end(<<"prim__arrayGet"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.ArrayGet'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V22 = fun (V21) -> V21 end), fun (V23) -> (V22(V23)) end end(<<"prim__arraySet"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.ArraySet'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V25 = fun (V24) -> V24 end), fun (V26) -> (V25(V26)) end end(<<"prim__getField"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.GetField'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V28 = fun (V27) -> V27 end), fun (V29) -> (V28(V29)) end end(<<"prim__setField"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.SetField'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V31 = fun (V30) -> V30 end), fun (V32) -> (V31(V32)) end end(<<"prim__void"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.VoidElim'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', <<"prim__os"/utf8>>}})) end, fun () -> {'Compiler.Scheme.Common.SysOS'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V34 = fun (V33) -> V33 end), fun (V35) -> (V34(V35)) end end(<<"prim__codegen"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.SysCodegen'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V37 = fun (V36) -> V36 end), fun (V38) -> (V37(V38)) end end(<<"prim__onCollect"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.OnCollect'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V40 = fun (V39) -> V39 end), fun (V41) -> (V40(V41)) end end(<<"prim__onCollectAny"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.OnCollectAny'} end} | [{'Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Core.Name.UN', {'Core.Name.Basic', (begin (V43 = fun (V42) -> V42 end), fun (V44) -> (V43(V44)) end end(<<"prim__makeFuture"/utf8>>))}})) end, fun () -> {'Compiler.Scheme.Common.MakeFuture'} end} | []]]]]]]]]]]]]]]], {'Compiler.Scheme.Common.Unknown', V0})); _ -> {'Compiler.Scheme.Common.Unknown', V0} end.
'un--sub'(V0, V1, V2) -> case V0 of {'Prelude.Types.Just', V3} -> case V3 of {'Core.TT.Signed', V4} -> case V4 of {'Core.TT.P', V5} -> ('un--op'(<<"bs-"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V6 = (V5 - 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)) | []]]])); _ -> ('un--op'(<<"-"/utf8>>, [V1 | [V2 | []]])) end; {'Core.TT.Unsigned', V7} -> ('un--op'(<<"bu-"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)) | []]]])); _ -> ('un--op'(<<"-"/utf8>>, [V1 | [V2 | []]])) end; _ -> ('un--op'(<<"-"/utf8>>, [V1 | [V2 | []]])) end.
'un--showTag'(V0, V1, V2, V3) -> case V3 of {'Prelude.Types.Just', V4} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4)); {'Prelude.Types.Nothing'} -> (V1(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)))) end.
'un--shl'(V0, V1, V2) -> case V0 of {'Prelude.Types.Just', V3} -> case V3 of {'Core.TT.Signed', V4} -> case V4 of {'Core.TT.P', V5} -> ('un--op'(<<"blodwen-bits-shl-signed"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V6 = (V5 - 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)) | []]]])); _ -> ('un--op'(<<"blodwen-shl"/utf8>>, [V1 | [V2 | []]])) end; {'Core.TT.Unsigned', V7} -> ('un--op'(<<"blodwen-bits-shl"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)) | []]]])); _ -> ('un--op'(<<"blodwen-shl"/utf8>>, [V1 | [V2 | []]])) end; _ -> ('un--op'(<<"blodwen-shl"/utf8>>, [V1 | [V2 | []]])) end.
'un--schUserName'(V0) -> case V0 of {'Core.Name.Basic', V1} -> <<<<"u--"/utf8>>/binary, ('un--schString'(V1))/binary>>; {'Core.Name.Field', V2} -> <<<<"rf--"/utf8>>/binary, ('un--schString'(V2))/binary>>; {'Core.Name.Underscore'} -> <<"u--_"/utf8>> end.
'un--schString'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> <<V1/binary, V2/binary>> end end, <<""/utf8>>}, fun (V3) -> ('nested--7893-2500--in--un--okchar'(V0, V3)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))).
'un--schRecordCon'(V0, V1, V2) -> <<<<"(vector "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V2))/binary, <<")"/utf8>>/binary>>/binary>>.
'un--schRecordCase'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> fun (V6) -> {'Prelude.Types.Right', <<"#f"/utf8>>} end; [E0 | E1] -> (fun (V7, V8) -> begin (V10 = ('un--schExp'(V0, V1, begin (V9 = (V2 + 1)), case ((V9 band 9223372036854775808) =/= 0) of 'true' -> (V9 bor -9223372036854775808); _ -> (V9 band 9223372036854775807) end end, V3))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V23 = begin (V15 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), case ('un--var'(V3)) of 1 -> ('nested--10768-6335--in--un--getAltCode'(V0, V1, V5, V8, V7, V3, V2, V14, V7)); 0 -> begin (V16 = ('nested--10768-6335--in--un--getAltCode'(V0, V1, V5, V8, V7, V3, V2, V15, V7))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V15/binary, <<<<" "/utf8>>/binary, <<V14/binary, <<<<")) "/utf8>>/binary, <<V20/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V22 end(V17)) end end end end end end), V23 end(V11)) end end end end end(E0, E1)) end.
'un--schPrimType'(V0) -> <<"#t"/utf8>>.
'un--schOp'(V0, V1) -> case V0 of {'Core.TT.Add', V2} -> case V1 of {'Data.Vect.::', V3, V4} -> fun (V5) -> case V4 of {'Data.Vect.::', V6, V7} -> case V7 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--add'(('Idris.Idris2.Core.TT':'un--intKind'(V2)), V3, V6))} end end end end; {'Core.TT.Sub', V8} -> case V1 of {'Data.Vect.::', V9, V10} -> fun (V11) -> case V10 of {'Data.Vect.::', V12, V13} -> case V13 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--sub'(('Idris.Idris2.Core.TT':'un--intKind'(V8)), V9, V12))} end end end end; {'Core.TT.Mul', V14} -> case V1 of {'Data.Vect.::', V15, V16} -> fun (V17) -> case V16 of {'Data.Vect.::', V18, V19} -> case V19 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--mul'(('Idris.Idris2.Core.TT':'un--intKind'(V14)), V15, V18))} end end end end; {'Core.TT.Div', V20} -> case V1 of {'Data.Vect.::', V21, V22} -> fun (V23) -> case V22 of {'Data.Vect.::', V24, V25} -> case V25 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--div'(('Idris.Idris2.Core.TT':'un--intKind'(V20)), V21, V24))} end end end end; {'Core.TT.Mod', V26} -> case V1 of {'Data.Vect.::', V27, V28} -> fun (V29) -> case V28 of {'Data.Vect.::', V30, V31} -> case V31 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V33 = fun (V32) -> V32 end), fun (V34) -> (V33(V34)) end end(<<"blodwen-euclidMod"/utf8>>)), [V27 | [V30 | []]]))} end end end end; {'Core.TT.Neg', V35} -> fun (V36) -> case V1 of {'Data.Vect.::', V37, V38} -> case V38 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"-"/utf8>>, [V37 | []]))} end end end; {'Core.TT.ShiftL', V39} -> case V1 of {'Data.Vect.::', V40, V41} -> fun (V42) -> case V41 of {'Data.Vect.::', V43, V44} -> case V44 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--shl'(('Idris.Idris2.Core.TT':'un--intKind'(V39)), V40, V43))} end end end end; {'Core.TT.ShiftR', V45} -> case V1 of {'Data.Vect.::', V46, V47} -> fun (V48) -> case V47 of {'Data.Vect.::', V49, V50} -> case V50 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V52 = fun (V51) -> V51 end), fun (V53) -> (V52(V53)) end end(<<"blodwen-shr"/utf8>>)), [V46 | [V49 | []]]))} end end end end; {'Core.TT.BAnd', V54} -> case V1 of {'Data.Vect.::', V55, V56} -> fun (V57) -> case V56 of {'Data.Vect.::', V58, V59} -> case V59 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V61 = fun (V60) -> V60 end), fun (V62) -> (V61(V62)) end end(<<"blodwen-and"/utf8>>)), [V55 | [V58 | []]]))} end end end end; {'Core.TT.BOr', V63} -> case V1 of {'Data.Vect.::', V64, V65} -> fun (V66) -> case V65 of {'Data.Vect.::', V67, V68} -> case V68 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V70 = fun (V69) -> V69 end), fun (V71) -> (V70(V71)) end end(<<"blodwen-or"/utf8>>)), [V64 | [V67 | []]]))} end end end end; {'Core.TT.BXOr', V72} -> case V1 of {'Data.Vect.::', V73, V74} -> fun (V75) -> case V74 of {'Data.Vect.::', V76, V77} -> case V77 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V79 = fun (V78) -> V78 end), fun (V80) -> (V79(V80)) end end(<<"blodwen-xor"/utf8>>)), [V73 | [V76 | []]]))} end end end end; {'Core.TT.LT', V81} -> case V81 of 11 -> case V1 of {'Data.Vect.::', V82, V83} -> case V83 of {'Data.Vect.::', V84, V85} -> case V85 of {'Data.Vect.Nil'} -> fun (V86) -> {'Prelude.Types.Right', ('un--boolop'(<<"char<?"/utf8>>, [V82 | [V84 | []]]))} end; _ -> case V1 of {'Data.Vect.::', V87, V88} -> fun (V89) -> case V88 of {'Data.Vect.::', V90, V91} -> case V91 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V87 | [V90 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V92, V93} -> fun (V94) -> case V93 of {'Data.Vect.::', V95, V96} -> case V96 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V92 | [V95 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V97, V98} -> fun (V99) -> case V98 of {'Data.Vect.::', V100, V101} -> case V101 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V97 | [V100 | []]]))} end end end end end; 10 -> case V1 of {'Data.Vect.::', V102, V103} -> case V103 of {'Data.Vect.::', V104, V105} -> case V105 of {'Data.Vect.Nil'} -> fun (V106) -> {'Prelude.Types.Right', ('un--boolop'(<<"string<?"/utf8>>, [V102 | [V104 | []]]))} end; _ -> case V1 of {'Data.Vect.::', V107, V108} -> fun (V109) -> case V108 of {'Data.Vect.::', V110, V111} -> case V111 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V107 | [V110 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V112, V113} -> fun (V114) -> case V113 of {'Data.Vect.::', V115, V116} -> case V116 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V112 | [V115 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V117, V118} -> fun (V119) -> case V118 of {'Data.Vect.::', V120, V121} -> case V121 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V117 | [V120 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V122, V123} -> fun (V124) -> case V123 of {'Data.Vect.::', V125, V126} -> case V126 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V122 | [V125 | []]]))} end end end end end; {'Core.TT.LTE', V127} -> case V127 of 11 -> case V1 of {'Data.Vect.::', V128, V129} -> case V129 of {'Data.Vect.::', V130, V131} -> case V131 of {'Data.Vect.Nil'} -> fun (V132) -> {'Prelude.Types.Right', ('un--boolop'(<<"char<=?"/utf8>>, [V128 | [V130 | []]]))} end; _ -> case V1 of {'Data.Vect.::', V133, V134} -> fun (V135) -> case V134 of {'Data.Vect.::', V136, V137} -> case V137 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V133 | [V136 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V138, V139} -> fun (V140) -> case V139 of {'Data.Vect.::', V141, V142} -> case V142 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V138 | [V141 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V143, V144} -> fun (V145) -> case V144 of {'Data.Vect.::', V146, V147} -> case V147 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V143 | [V146 | []]]))} end end end end end; 10 -> case V1 of {'Data.Vect.::', V148, V149} -> case V149 of {'Data.Vect.::', V150, V151} -> case V151 of {'Data.Vect.Nil'} -> fun (V152) -> {'Prelude.Types.Right', ('un--boolop'(<<"string<=?"/utf8>>, [V148 | [V150 | []]]))} end; _ -> case V1 of {'Data.Vect.::', V153, V154} -> fun (V155) -> case V154 of {'Data.Vect.::', V156, V157} -> case V157 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V153 | [V156 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V158, V159} -> fun (V160) -> case V159 of {'Data.Vect.::', V161, V162} -> case V162 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V158 | [V161 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V163, V164} -> fun (V165) -> case V164 of {'Data.Vect.::', V166, V167} -> case V167 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V163 | [V166 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V168, V169} -> fun (V170) -> case V169 of {'Data.Vect.::', V171, V172} -> case V172 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V168 | [V171 | []]]))} end end end end end; {'Core.TT.EQ', V173} -> case V173 of 11 -> case V1 of {'Data.Vect.::', V174, V175} -> case V175 of {'Data.Vect.::', V176, V177} -> case V177 of {'Data.Vect.Nil'} -> fun (V178) -> {'Prelude.Types.Right', ('un--boolop'(<<"char=?"/utf8>>, [V174 | [V176 | []]]))} end; _ -> case V1 of {'Data.Vect.::', V179, V180} -> fun (V181) -> case V180 of {'Data.Vect.::', V182, V183} -> case V183 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V179 | [V182 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V184, V185} -> fun (V186) -> case V185 of {'Data.Vect.::', V187, V188} -> case V188 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V184 | [V187 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V189, V190} -> fun (V191) -> case V190 of {'Data.Vect.::', V192, V193} -> case V193 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V189 | [V192 | []]]))} end end end end end; 10 -> case V1 of {'Data.Vect.::', V194, V195} -> case V195 of {'Data.Vect.::', V196, V197} -> case V197 of {'Data.Vect.Nil'} -> fun (V198) -> {'Prelude.Types.Right', ('un--boolop'(<<"string=?"/utf8>>, [V194 | [V196 | []]]))} end; _ -> case V1 of {'Data.Vect.::', V199, V200} -> fun (V201) -> case V200 of {'Data.Vect.::', V202, V203} -> case V203 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V199 | [V202 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V204, V205} -> fun (V206) -> case V205 of {'Data.Vect.::', V207, V208} -> case V208 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V204 | [V207 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V209, V210} -> fun (V211) -> case V210 of {'Data.Vect.::', V212, V213} -> case V213 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V209 | [V212 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V214, V215} -> fun (V216) -> case V215 of {'Data.Vect.::', V217, V218} -> case V218 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V214 | [V217 | []]]))} end end end end end; {'Core.TT.GTE', V219} -> case V219 of 11 -> case V1 of {'Data.Vect.::', V220, V221} -> case V221 of {'Data.Vect.::', V222, V223} -> case V223 of {'Data.Vect.Nil'} -> fun (V224) -> {'Prelude.Types.Right', ('un--boolop'(<<"char>=?"/utf8>>, [V220 | [V222 | []]]))} end; _ -> case V1 of {'Data.Vect.::', V225, V226} -> fun (V227) -> case V226 of {'Data.Vect.::', V228, V229} -> case V229 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V225 | [V228 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V230, V231} -> fun (V232) -> case V231 of {'Data.Vect.::', V233, V234} -> case V234 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V230 | [V233 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V235, V236} -> fun (V237) -> case V236 of {'Data.Vect.::', V238, V239} -> case V239 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V235 | [V238 | []]]))} end end end end end; 10 -> case V1 of {'Data.Vect.::', V240, V241} -> case V241 of {'Data.Vect.::', V242, V243} -> case V243 of {'Data.Vect.Nil'} -> fun (V244) -> {'Prelude.Types.Right', ('un--boolop'(<<"string>=?"/utf8>>, [V240 | [V242 | []]]))} end; _ -> case V1 of {'Data.Vect.::', V245, V246} -> fun (V247) -> case V246 of {'Data.Vect.::', V248, V249} -> case V249 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V245 | [V248 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V250, V251} -> fun (V252) -> case V251 of {'Data.Vect.::', V253, V254} -> case V254 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V250 | [V253 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V255, V256} -> fun (V257) -> case V256 of {'Data.Vect.::', V258, V259} -> case V259 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V255 | [V258 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V260, V261} -> fun (V262) -> case V261 of {'Data.Vect.::', V263, V264} -> case V264 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V260 | [V263 | []]]))} end end end end end; {'Core.TT.GT', V265} -> case V265 of 11 -> case V1 of {'Data.Vect.::', V266, V267} -> case V267 of {'Data.Vect.::', V268, V269} -> case V269 of {'Data.Vect.Nil'} -> fun (V270) -> {'Prelude.Types.Right', ('un--boolop'(<<"char>?"/utf8>>, [V266 | [V268 | []]]))} end; _ -> case V1 of {'Data.Vect.::', V271, V272} -> fun (V273) -> case V272 of {'Data.Vect.::', V274, V275} -> case V275 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V271 | [V274 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V276, V277} -> fun (V278) -> case V277 of {'Data.Vect.::', V279, V280} -> case V280 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V276 | [V279 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V281, V282} -> fun (V283) -> case V282 of {'Data.Vect.::', V284, V285} -> case V285 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V281 | [V284 | []]]))} end end end end end; 10 -> case V1 of {'Data.Vect.::', V286, V287} -> case V287 of {'Data.Vect.::', V288, V289} -> case V289 of {'Data.Vect.Nil'} -> fun (V290) -> {'Prelude.Types.Right', ('un--boolop'(<<"string>?"/utf8>>, [V286 | [V288 | []]]))} end; _ -> case V1 of {'Data.Vect.::', V291, V292} -> fun (V293) -> case V292 of {'Data.Vect.::', V294, V295} -> case V295 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V291 | [V294 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V296, V297} -> fun (V298) -> case V297 of {'Data.Vect.::', V299, V300} -> case V300 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V296 | [V299 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V301, V302} -> fun (V303) -> case V302 of {'Data.Vect.::', V304, V305} -> case V305 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V301 | [V304 | []]]))} end end end end end; _ -> case V1 of {'Data.Vect.::', V306, V307} -> fun (V308) -> case V307 of {'Data.Vect.::', V309, V310} -> case V310 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V306 | [V309 | []]]))} end end end end end; {'Core.TT.StrLength'} -> fun (V311) -> case V1 of {'Data.Vect.::', V312, V313} -> case V313 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V315 = fun (V314) -> V314 end), fun (V316) -> (V315(V316)) end end(<<"string-length"/utf8>>)), [V312 | []]))} end end end; {'Core.TT.StrHead'} -> fun (V317) -> case V1 of {'Data.Vect.::', V318, V319} -> case V319 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V321 = fun (V320) -> V320 end), fun (V322) -> (V321(V322)) end end(<<"string-ref"/utf8>>)), [V318 | [<<"0"/utf8>> | []]]))} end end end; {'Core.TT.StrTail'} -> fun (V323) -> case V1 of {'Data.Vect.::', V324, V325} -> case V325 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"substring"/utf8>>, [V324 | [<<"1"/utf8>> | [('un--op'((begin (V327 = fun (V326) -> V326 end), fun (V328) -> (V327(V328)) end end(<<"string-length"/utf8>>)), [V324 | []])) | []]]]))} end end end; {'Core.TT.StrIndex'} -> case V1 of {'Data.Vect.::', V329, V330} -> fun (V331) -> case V330 of {'Data.Vect.::', V332, V333} -> case V333 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V335 = fun (V334) -> V334 end), fun (V336) -> (V335(V336)) end end(<<"string-ref"/utf8>>)), [V329 | [V332 | []]]))} end end end end; {'Core.TT.StrCons'} -> case V1 of {'Data.Vect.::', V337, V338} -> fun (V339) -> case V338 of {'Data.Vect.::', V340, V341} -> case V341 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V343 = fun (V342) -> V342 end), fun (V344) -> (V343(V344)) end end(<<"string-cons"/utf8>>)), [V337 | [V340 | []]]))} end end end end; {'Core.TT.StrAppend'} -> case V1 of {'Data.Vect.::', V345, V346} -> fun (V347) -> case V346 of {'Data.Vect.::', V348, V349} -> case V349 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V351 = fun (V350) -> V350 end), fun (V352) -> (V351(V352)) end end(<<"string-append"/utf8>>)), [V345 | [V348 | []]]))} end end end end; {'Core.TT.StrReverse'} -> fun (V353) -> case V1 of {'Data.Vect.::', V354, V355} -> case V355 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V357 = fun (V356) -> V356 end), fun (V358) -> (V357(V358)) end end(<<"string-reverse"/utf8>>)), [V354 | []]))} end end end; {'Core.TT.StrSubstr'} -> case V1 of {'Data.Vect.::', V359, V360} -> case V360 of {'Data.Vect.::', V361, V362} -> fun (V363) -> case V362 of {'Data.Vect.::', V364, V365} -> case V365 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'((begin (V367 = fun (V366) -> V366 end), fun (V368) -> (V367(V368)) end end(<<"string-substr"/utf8>>)), [V359 | [V361 | [V364 | []]]]))} end end end end end; {'Core.TT.DoubleExp'} -> fun (V369) -> case V1 of {'Data.Vect.::', V370, V371} -> case V371 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"flexp"/utf8>>, [V370 | []]))} end end end; {'Core.TT.DoubleLog'} -> fun (V372) -> case V1 of {'Data.Vect.::', V373, V374} -> case V374 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"fllog"/utf8>>, [V373 | []]))} end end end; {'Core.TT.DoublePow'} -> case V1 of {'Data.Vect.::', V375, V376} -> fun (V377) -> case V376 of {'Data.Vect.::', V378, V379} -> case V379 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"flexpt"/utf8>>, [V375 | [V378 | []]]))} end end end end; {'Core.TT.DoubleSin'} -> fun (V380) -> case V1 of {'Data.Vect.::', V381, V382} -> case V382 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"flsin"/utf8>>, [V381 | []]))} end end end; {'Core.TT.DoubleCos'} -> fun (V383) -> case V1 of {'Data.Vect.::', V384, V385} -> case V385 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"flcos"/utf8>>, [V384 | []]))} end end end; {'Core.TT.DoubleTan'} -> fun (V386) -> case V1 of {'Data.Vect.::', V387, V388} -> case V388 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"fltan"/utf8>>, [V387 | []]))} end end end; {'Core.TT.DoubleASin'} -> fun (V389) -> case V1 of {'Data.Vect.::', V390, V391} -> case V391 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"flasin"/utf8>>, [V390 | []]))} end end end; {'Core.TT.DoubleACos'} -> fun (V392) -> case V1 of {'Data.Vect.::', V393, V394} -> case V394 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"flacos"/utf8>>, [V393 | []]))} end end end; {'Core.TT.DoubleATan'} -> fun (V395) -> case V1 of {'Data.Vect.::', V396, V397} -> case V397 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"flatan"/utf8>>, [V396 | []]))} end end end; {'Core.TT.DoubleSqrt'} -> fun (V398) -> case V1 of {'Data.Vect.::', V399, V400} -> case V400 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"flsqrt"/utf8>>, [V399 | []]))} end end end; {'Core.TT.DoubleFloor'} -> fun (V401) -> case V1 of {'Data.Vect.::', V402, V403} -> case V403 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"flfloor"/utf8>>, [V402 | []]))} end end end; {'Core.TT.DoubleCeiling'} -> fun (V404) -> case V1 of {'Data.Vect.::', V405, V406} -> case V406 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', ('un--op'(<<"flceiling"/utf8>>, [V405 | []]))} end end end; {'Core.TT.Cast', V407, V408} -> case V407 of 12 -> case V408 of 10 -> case V1 of {'Data.Vect.::', V409, V410} -> case V410 of {'Data.Vect.Nil'} -> fun (V411) -> {'Prelude.Types.Right', ('un--op'((begin (V413 = fun (V412) -> V412 end), fun (V414) -> (V413(V414)) end end(<<"number->string"/utf8>>)), [V409 | []]))} end; _ -> case V1 of {'Data.Vect.::', V415, V416} -> case V416 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V407, V408, V415)) end end end; _ -> case V1 of {'Data.Vect.::', V417, V418} -> case V418 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V407, V408, V417)) end end end; _ -> case V1 of {'Data.Vect.::', V419, V420} -> case V420 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V407, V408, V419)) end end end; 11 -> case V408 of 10 -> case V1 of {'Data.Vect.::', V421, V422} -> case V422 of {'Data.Vect.Nil'} -> fun (V423) -> {'Prelude.Types.Right', ('un--op'(<<"string"/utf8>>, [V421 | []]))} end; _ -> case V1 of {'Data.Vect.::', V424, V425} -> case V425 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V407, V408, V424)) end end end; _ -> case V1 of {'Data.Vect.::', V426, V427} -> case V427 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V407, V408, V426)) end end end; _ -> case V1 of {'Data.Vect.::', V428, V429} -> case V429 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V407, V408, V428)) end end end; 10 -> case V408 of 12 -> case V1 of {'Data.Vect.::', V430, V431} -> case V431 of {'Data.Vect.Nil'} -> fun (V432) -> {'Prelude.Types.Right', ('un--op'((begin (V434 = fun (V433) -> V433 end), fun (V435) -> (V434(V435)) end end(<<"cast-string-double"/utf8>>)), [V430 | []]))} end; _ -> case V1 of {'Data.Vect.::', V436, V437} -> case V437 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V407, V408, V436)) end end end; _ -> case V1 of {'Data.Vect.::', V438, V439} -> case V439 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V407, V408, V438)) end end end; _ -> case V1 of {'Data.Vect.::', V440, V441} -> case V441 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V407, V408, V440)) end end end; _ -> case V1 of {'Data.Vect.::', V442, V443} -> case V443 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V407, V408, V442)) end end end; {'Core.TT.BelieveMe'} -> case V1 of {'Data.Vect.::', V444, V445} -> case V445 of {'Data.Vect.::', V446, V447} -> fun (V448) -> case V447 of {'Data.Vect.::', V449, V450} -> case V450 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', V449} end end end end end; {'Core.TT.Crash'} -> case V1 of {'Data.Vect.::', V451, V452} -> fun (V453) -> case V452 of {'Data.Vect.::', V454, V455} -> case V455 of {'Data.Vect.Nil'} -> {'Prelude.Types.Right', <<(begin (V457 = fun (V456) -> V456 end), fun (V458) -> (V457(V458)) end end(<<"(blodwen-error-quit (string-append \x{22}ERROR: \x{22} "/utf8>>))/binary, <<V454/binary, <<"))"/utf8>>/binary>>/binary>>} end end end end end.
'un--schName'(V0) -> case V0 of {'Core.Name.NS', V1, V2} -> case V2 of {'Core.Name.UN', V3} -> case V3 of {'Core.Name.Basic', V4} -> <<('un--schString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"-"/utf8>>, V1))))/binary, <<<<"-"/utf8>>/binary, ('un--schString'(V4))/binary>>/binary>>; _ -> <<('un--schString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"-"/utf8>>, V1))))/binary, <<<<"-"/utf8>>/binary, ('un--schName'(V2))/binary>>/binary>> end; _ -> <<('un--schString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"-"/utf8>>, V1))))/binary, <<<<"-"/utf8>>/binary, ('un--schName'(V2))/binary>>/binary>> end; {'Core.Name.UN', V5} -> ('un--schUserName'(V5)); {'Core.Name.MN', V6, V7} -> <<('un--schString'(V6))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7))/binary>>/binary>>; {'Core.Name.PV', V8, V9} -> <<<<"pat--"/utf8>>/binary, ('un--schName'(V8))/binary>>; {'Core.Name.DN', V10, V11} -> ('un--schName'(V11)); {'Core.Name.Nested', V12, V13} -> case V12 of {'Builtin.MkPair', V14, V15} -> <<<<"n--"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V14))/binary, <<<<"-"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15))/binary, <<<<"-"/utf8>>/binary, ('un--schName'(V13))/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Core.Name.CaseBlock', V16, V17} -> <<<<"case--"/utf8>>/binary, <<('un--schString'(V16))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V17))/binary>>/binary>>/binary>>; {'Core.Name.WithBlock', V18, V19} -> <<<<"with--"/utf8>>/binary, <<('un--schString'(V18))/binary, <<<<"-"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19))/binary>>/binary>>/binary>>; {'Core.Name.Resolved', V20} -> <<<<"fn--"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V20))/binary>> end.
'un--schMaybeCase'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('un--schExp'(V0, V1, begin (V6 = (V2 + 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end, V3))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), begin (V23 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V13) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end, fun () -> fun (V14) -> begin (V16 = ('un--schExp'(V0, V1, begin (V15 = (V2 + 1)), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end, V14))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V20}} end), V22 end(V17)) end end end end end end, V5))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V48 = begin (V28 = ('nested--10770-7049--in--un--getNothingCode'(V0, V1, V5, V4, V3, V2, V4))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V47 = case ('un--var'(V3)) of 1 -> begin (V33 = ('nested--10770-7050--in--un--getJustCode'(V0, V1, V5, V4, V3, V2, V11, V4))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', ('nested--10770-7048--in--un--buildCase'(V0, V1, V5, V4, V3, V2, V11, V32, V37, V27))} end), V39 end(V34)) end end end end; 0 -> begin (V40 = ('nested--10770-7050--in--un--getJustCode'(V0, V1, V5, V4, V3, V2, V12, V4))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V46 = fun (V45) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V12/binary, <<<<" "/utf8>>/binary, <<V11/binary, <<<<")) "/utf8>>/binary, <<('nested--10770-7048--in--un--buildCase'(V0, V1, V5, V4, V3, V2, V12, V32, V44, V27))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V46 end(V41)) end end end end end), V47 end(V29)) end end end end), V48 end(V24)) end end end end end), V49 end(V8)) end end end end.
'un--schListCase'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('un--schExp'(V0, V1, begin (V6 = (V2 + 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end, V3))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V49 = begin (V12 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), begin (V23 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V13) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end, fun () -> fun (V14) -> begin (V16 = ('un--schExp'(V0, V1, begin (V15 = (V2 + 1)), case ((V15 band 9223372036854775808) =/= 0) of 'true' -> (V15 bor -9223372036854775808); _ -> (V15 band 9223372036854775807) end end, V14))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V22 = fun (V21) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V20}} end), V22 end(V17)) end end end end end end, V5))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V48 = begin (V28 = ('nested--10769-6571--in--un--getNilCode'(V0, V1, V5, V4, V3, V2, V4))), fun (V29) -> begin (V30 = (V28(V29))), case V30 of {'Prelude.Types.Left', V31} -> {'Prelude.Types.Left', V31}; {'Prelude.Types.Right', V32} -> (begin (V47 = case ('un--var'(V3)) of 1 -> begin (V33 = ('nested--10769-6572--in--un--getConsCode'(V0, V1, V5, V4, V3, V2, V11, V4))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', ('nested--10769-6570--in--un--buildCase'(V0, V1, V5, V4, V3, V2, V11, V32, V37, V27))} end), V39 end(V34)) end end end end; 0 -> begin (V40 = ('nested--10769-6572--in--un--getConsCode'(V0, V1, V5, V4, V3, V2, V12, V4))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V46 = fun (V45) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V12/binary, <<<<" "/utf8>>/binary, <<V11/binary, <<<<")) "/utf8>>/binary, <<('nested--10769-6570--in--un--buildCase'(V0, V1, V5, V4, V3, V2, V12, V32, V44, V27))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V46 end(V41)) end end end end end), V47 end(V29)) end end end end), V48 end(V24)) end end end end end), V49 end(V8)) end end end end.
'un--schExtCommon'(V0, V1, V2, V3, V4) -> case V3 of {'Compiler.Scheme.Common.NewIORef'} -> case V4 of [E0 | E1] -> (fun (V5, V6) -> case V6 of [E2 | E3] -> (fun (V7, V8) -> case V8 of [E4 | E5] -> (fun (V9, V10) -> case V10 of [] -> begin (V11 = ('un--schExp'(V0, V1, V2, V7))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', <<<<"(box "/utf8>>/binary, <<V15/binary, <<")"/utf8>>/binary>>/binary>>} end), V17 end(V12)) end end end end; _ -> fun (V18) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V19) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V19)) end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V20, V21)) end end}, V4))/binary>>/binary>>/binary>>}, V18)) end end end(E4, E5)); _ -> fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V24, V25)) end end}, V4))/binary>>/binary>>/binary>>}, V22)) end end end(E2, E3)); _ -> fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V28, V29)) end end}, V4))/binary>>/binary>>/binary>>}, V26)) end end end(E0, E1)); _ -> fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V31) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V32, V33)) end end}, V4))/binary>>/binary>>/binary>>}, V30)) end end; {'Compiler.Scheme.Common.ReadIORef'} -> case V4 of [E6 | E7] -> (fun (V34, V35) -> case V35 of [E8 | E9] -> (fun (V36, V37) -> case V37 of [E10 | E11] -> (fun (V38, V39) -> case V39 of [] -> begin (V40 = ('un--schExp'(V0, V1, V2, V36))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V46 = fun (V45) -> {'Prelude.Types.Right', <<<<"(unbox "/utf8>>/binary, <<V44/binary, <<")"/utf8>>/binary>>/binary>>} end), V46 end(V41)) end end end end; _ -> fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V49, V50)) end end}, V4))/binary>>/binary>>/binary>>}, V47)) end end end(E10, E11)); _ -> fun (V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V52) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V53, V54)) end end}, V4))/binary>>/binary>>/binary>>}, V51)) end end end(E8, E9)); _ -> fun (V55) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V56) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V56)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V57, V58)) end end}, V4))/binary>>/binary>>/binary>>}, V55)) end end end(E6, E7)); _ -> fun (V59) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V60) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V60)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V61, V62)) end end}, V4))/binary>>/binary>>/binary>>}, V59)) end end; {'Compiler.Scheme.Common.WriteIORef'} -> case V4 of [E12 | E13] -> (fun (V63, V64) -> case V64 of [E14 | E15] -> (fun (V65, V66) -> case V66 of [E16 | E17] -> (fun (V67, V68) -> case V68 of [E18 | E19] -> (fun (V69, V70) -> case V70 of [] -> begin (V71 = ('un--schExp'(V0, V1, V2, V65))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V83 = begin (V76 = ('un--schExp'(V0, V1, V2, V67))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V82 = fun (V81) -> {'Prelude.Types.Right', <<<<"(set-box! "/utf8>>/binary, <<V75/binary, <<<<" "/utf8>>/binary, <<V80/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V82 end(V77)) end end end end), V83 end(V72)) end end end end; _ -> fun (V84) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V85) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V86, V87)) end end}, V4))/binary>>/binary>>/binary>>}, V84)) end end end(E18, E19)); _ -> fun (V88) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V89) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V89)) end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V90, V91)) end end}, V4))/binary>>/binary>>/binary>>}, V88)) end end end(E16, E17)); _ -> fun (V92) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V93) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V93)) end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V94, V95)) end end}, V4))/binary>>/binary>>/binary>>}, V92)) end end end(E14, E15)); _ -> fun (V96) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V97) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V97)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V98, V99)) end end}, V4))/binary>>/binary>>/binary>>}, V96)) end end end(E12, E13)); _ -> fun (V100) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V101) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V102, V103)) end end}, V4))/binary>>/binary>>/binary>>}, V100)) end end; {'Compiler.Scheme.Common.FreeIORef'} -> case V4 of [E20 | E21] -> (fun (V104, V105) -> case V105 of [E22 | E23] -> (fun (V106, V107) -> fun (V108) -> case V107 of [E24 | E25] -> (fun (V109, V110) -> case V110 of [] -> {'Prelude.Types.Right', <<"(void)"/utf8>>}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V111) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V111)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V112, V113)) end end}, V4))/binary>>/binary>>/binary>>}, V108)) end end(E24, E25)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V114) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V114)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V115, V116)) end end}, V4))/binary>>/binary>>/binary>>}, V108)) end end end(E22, E23)); _ -> fun (V117) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V118) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V118)) end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V119, V120)) end end}, V4))/binary>>/binary>>/binary>>}, V117)) end end end(E20, E21)); _ -> fun (V121) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V122) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V122)) end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V123, V124)) end end}, V4))/binary>>/binary>>/binary>>}, V121)) end end; {'Compiler.Scheme.Common.NewArray'} -> case V4 of [E26 | E27] -> (fun (V125, V126) -> case V126 of [E28 | E29] -> (fun (V127, V128) -> case V128 of [E30 | E31] -> (fun (V129, V130) -> case V130 of [E32 | E33] -> (fun (V131, V132) -> case V132 of [] -> begin (V133 = ('un--schExp'(V0, V1, V2, V127))), fun (V134) -> begin (V135 = (V133(V134))), case V135 of {'Prelude.Types.Left', V136} -> {'Prelude.Types.Left', V136}; {'Prelude.Types.Right', V137} -> (begin (V145 = begin (V138 = ('un--schExp'(V0, V1, V2, V129))), fun (V139) -> begin (V140 = (V138(V139))), case V140 of {'Prelude.Types.Left', V141} -> {'Prelude.Types.Left', V141}; {'Prelude.Types.Right', V142} -> (begin (V144 = fun (V143) -> {'Prelude.Types.Right', <<<<"(make-vector "/utf8>>/binary, <<V137/binary, <<<<" "/utf8>>/binary, <<V142/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V144 end(V139)) end end end end), V145 end(V134)) end end end end; _ -> fun (V146) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V147) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V147)) end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V148, V149)) end end}, V4))/binary>>/binary>>/binary>>}, V146)) end end end(E32, E33)); _ -> fun (V150) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V151) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V151)) end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V152, V153)) end end}, V4))/binary>>/binary>>/binary>>}, V150)) end end end(E30, E31)); _ -> fun (V154) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V155) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V155)) end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V156, V157)) end end}, V4))/binary>>/binary>>/binary>>}, V154)) end end end(E28, E29)); _ -> fun (V158) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V159) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V159)) end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V160, V161)) end end}, V4))/binary>>/binary>>/binary>>}, V158)) end end end(E26, E27)); _ -> fun (V162) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V163) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V163)) end, fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V164, V165)) end end}, V4))/binary>>/binary>>/binary>>}, V162)) end end; {'Compiler.Scheme.Common.ArrayGet'} -> case V4 of [E34 | E35] -> (fun (V166, V167) -> case V167 of [E36 | E37] -> (fun (V168, V169) -> case V169 of [E38 | E39] -> (fun (V170, V171) -> case V171 of [E40 | E41] -> (fun (V172, V173) -> case V173 of [] -> begin (V174 = ('un--schExp'(V0, V1, V2, V168))), fun (V175) -> begin (V176 = (V174(V175))), case V176 of {'Prelude.Types.Left', V177} -> {'Prelude.Types.Left', V177}; {'Prelude.Types.Right', V178} -> (begin (V186 = begin (V179 = ('un--schExp'(V0, V1, V2, V170))), fun (V180) -> begin (V181 = (V179(V180))), case V181 of {'Prelude.Types.Left', V182} -> {'Prelude.Types.Left', V182}; {'Prelude.Types.Right', V183} -> (begin (V185 = fun (V184) -> {'Prelude.Types.Right', <<<<"(vector-ref "/utf8>>/binary, <<V178/binary, <<<<" "/utf8>>/binary, <<V183/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V185 end(V180)) end end end end), V186 end(V175)) end end end end; _ -> fun (V187) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V188) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V188)) end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V189, V190)) end end}, V4))/binary>>/binary>>/binary>>}, V187)) end end end(E40, E41)); _ -> fun (V191) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V192) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V192)) end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V193, V194)) end end}, V4))/binary>>/binary>>/binary>>}, V191)) end end end(E38, E39)); _ -> fun (V195) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V196) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V196)) end, fun (V197) -> fun (V198) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V197, V198)) end end}, V4))/binary>>/binary>>/binary>>}, V195)) end end end(E36, E37)); _ -> fun (V199) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V200) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V200)) end, fun (V201) -> fun (V202) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V201, V202)) end end}, V4))/binary>>/binary>>/binary>>}, V199)) end end end(E34, E35)); _ -> fun (V203) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V204) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V204)) end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V205, V206)) end end}, V4))/binary>>/binary>>/binary>>}, V203)) end end; {'Compiler.Scheme.Common.ArraySet'} -> case V4 of [E42 | E43] -> (fun (V207, V208) -> case V208 of [E44 | E45] -> (fun (V209, V210) -> case V210 of [E46 | E47] -> (fun (V211, V212) -> case V212 of [E48 | E49] -> (fun (V213, V214) -> case V214 of [E50 | E51] -> (fun (V215, V216) -> case V216 of [] -> begin (V217 = ('un--schExp'(V0, V1, V2, V209))), fun (V218) -> begin (V219 = (V217(V218))), case V219 of {'Prelude.Types.Left', V220} -> {'Prelude.Types.Left', V220}; {'Prelude.Types.Right', V221} -> (begin (V235 = begin (V222 = ('un--schExp'(V0, V1, V2, V211))), fun (V223) -> begin (V224 = (V222(V223))), case V224 of {'Prelude.Types.Left', V225} -> {'Prelude.Types.Left', V225}; {'Prelude.Types.Right', V226} -> (begin (V234 = begin (V227 = ('un--schExp'(V0, V1, V2, V213))), fun (V228) -> begin (V229 = (V227(V228))), case V229 of {'Prelude.Types.Left', V230} -> {'Prelude.Types.Left', V230}; {'Prelude.Types.Right', V231} -> (begin (V233 = fun (V232) -> {'Prelude.Types.Right', <<<<"(vector-set! "/utf8>>/binary, <<V221/binary, <<<<" "/utf8>>/binary, <<V226/binary, <<<<" "/utf8>>/binary, <<V231/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V233 end(V228)) end end end end), V234 end(V223)) end end end end), V235 end(V218)) end end end end; _ -> fun (V236) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V237) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V237)) end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V238, V239)) end end}, V4))/binary>>/binary>>/binary>>}, V236)) end end end(E50, E51)); _ -> fun (V240) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V241) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V241)) end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V242, V243)) end end}, V4))/binary>>/binary>>/binary>>}, V240)) end end end(E48, E49)); _ -> fun (V244) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V245) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V245)) end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V246, V247)) end end}, V4))/binary>>/binary>>/binary>>}, V244)) end end end(E46, E47)); _ -> fun (V248) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V249) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V249)) end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V250, V251)) end end}, V4))/binary>>/binary>>/binary>>}, V248)) end end end(E44, E45)); _ -> fun (V252) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V253) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V253)) end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V254, V255)) end end}, V4))/binary>>/binary>>/binary>>}, V252)) end end end(E42, E43)); _ -> fun (V256) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V257) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V257)) end, fun (V258) -> fun (V259) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V258, V259)) end end}, V4))/binary>>/binary>>/binary>>}, V256)) end end; {'Compiler.Scheme.Common.VoidElim'} -> case V4 of [E52 | E53] -> (fun (V260, V261) -> fun (V262) -> case V261 of [E54 | E55] -> (fun (V263, V264) -> case V264 of [] -> {'Prelude.Types.Right', <<"(display \x{22}Error: Executed \x{27}void\x{27}\x{22})"/utf8>>}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V265) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V265)) end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V266, V267)) end end}, V4))/binary>>/binary>>/binary>>}, V262)) end end(E54, E55)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V268) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V268)) end, fun (V269) -> fun (V270) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V269, V270)) end end}, V4))/binary>>/binary>>/binary>>}, V262)) end end end(E52, E53)); _ -> fun (V271) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V272) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V272)) end, fun (V273) -> fun (V274) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V273, V274)) end end}, V4))/binary>>/binary>>/binary>>}, V271)) end end; {'Compiler.Scheme.Common.SysOS'} -> fun (V275) -> case V4 of [] -> {'Prelude.Types.Right', <<"(blodwen-os)"/utf8>>}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V276) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V276)) end, fun (V277) -> fun (V278) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V277, V278)) end end}, V4))/binary>>/binary>>/binary>>}, V275)) end end; {'Compiler.Scheme.Common.Unknown', V279} -> fun (V280) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Can\x{27}t compile unknown external primitive "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V279))/binary>>}, V280)) end; _ -> fun (V281) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed external primitive "/utf8>>/binary, <<('dn--un--show_Show_ExtPrim'(V3))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V282) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V282)) end, fun (V283) -> fun (V284) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V283, V284)) end end}, V4))/binary>>/binary>>/binary>>}, V281)) end end.
'un--schExp'(V0, V1, V2, V3) -> case V3 of {'Core.CompileExpr.NmLocal', V4, V5} -> fun (V6) -> {'Prelude.Types.Right', ('un--schName'(V5))} end; {'Core.CompileExpr.NmRef', V7, V8} -> fun (V9) -> {'Prelude.Types.Right', ('un--schName'(V8))} end; {'Core.CompileExpr.NmLam', V10, V11, V12} -> begin (V13 = ('un--schExp'(V0, V1, V2, V12))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V19 = fun (V18) -> {'Prelude.Types.Right', <<<<"(lambda ("/utf8>>/binary, <<('un--schName'(V11))/binary, <<<<") "/utf8>>/binary, <<V17/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V19 end(V14)) end end end end; {'Core.CompileExpr.NmLet', V20, V21, V22, V23} -> begin (V24 = ('un--schExp'(V0, V1, V2, V22))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V36 = begin (V29 = ('un--schExp'(V0, V1, V2, V23))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V35 = fun (V34) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<('un--schName'(V21))/binary, <<<<" "/utf8>>/binary, <<V28/binary, <<<<")) "/utf8>>/binary, <<V33/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V35 end(V30)) end end end end), V36 end(V25)) end end end end; {'Core.CompileExpr.NmApp', V37, V38, V39} -> case V39 of [] -> begin (V40 = ('un--schExp'(V0, V1, V2, V38))), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V46 = fun (V45) -> {'Prelude.Types.Right', <<<<"("/utf8>>/binary, <<V44/binary, <<")"/utf8>>/binary>>/binary>>} end), V46 end(V41)) end end end end; _ -> begin (V47 = ('un--schExp'(V0, V1, V2, V38))), fun (V48) -> begin (V49 = (V47(V48))), case V49 of {'Prelude.Types.Left', V50} -> {'Prelude.Types.Left', V50}; {'Prelude.Types.Right', V51} -> (begin (V60 = begin (V53 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V52) -> ('un--schExp'(V0, V1, V2, V52)) end, V39, []))), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V59 = fun (V58) -> {'Prelude.Types.Right', <<<<"("/utf8>>/binary, <<V51/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V57))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V59 end(V54)) end end end end), V60 end(V48)) end end end end end; {'Core.CompileExpr.NmCon', V61, V62, V63, V64, V65} -> case V63 of {'Core.CompileExpr.NIL'} -> fun (V66) -> case V65 of [] -> {'Prelude.Types.Right', <<"\x{27}()"/utf8>>}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Bad NIL"/utf8>>}, V66)) end end; {'Core.CompileExpr.CONS'} -> case V65 of [E0 | E1] -> (fun (V67, V68) -> case V68 of [E2 | E3] -> (fun (V69, V70) -> case V70 of [] -> begin (V71 = ('un--schExp'(V0, V1, V2, V67))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V83 = begin (V76 = ('un--schExp'(V0, V1, V2, V69))), fun (V77) -> begin (V78 = (V76(V77))), case V78 of {'Prelude.Types.Left', V79} -> {'Prelude.Types.Left', V79}; {'Prelude.Types.Right', V80} -> (begin (V82 = fun (V81) -> {'Prelude.Types.Right', <<<<"(cons "/utf8>>/binary, <<V75/binary, <<<<" "/utf8>>/binary, <<V80/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V82 end(V77)) end end end end), V83 end(V72)) end end end end; _ -> fun (V84) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Bad CONS"/utf8>>}, V84)) end end end(E2, E3)); _ -> fun (V85) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Bad CONS"/utf8>>}, V85)) end end end(E0, E1)); _ -> fun (V86) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Bad CONS"/utf8>>}, V86)) end end; {'Core.CompileExpr.NOTHING'} -> fun (V87) -> case V65 of [] -> {'Prelude.Types.Right', <<"\x{27}()"/utf8>>}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Bad NOTHING"/utf8>>}, V87)) end end; {'Core.CompileExpr.JUST'} -> case V65 of [E4 | E5] -> (fun (V88, V89) -> case V89 of [] -> begin (V90 = ('un--schExp'(V0, V1, V2, V88))), fun (V91) -> begin (V92 = (V90(V91))), case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> (begin (V96 = fun (V95) -> {'Prelude.Types.Right', <<<<"(box "/utf8>>/binary, <<V94/binary, <<")"/utf8>>/binary>>/binary>>} end), V96 end(V91)) end end end end; _ -> fun (V97) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Bad JUST"/utf8>>}, V97)) end end end(E4, E5)); _ -> fun (V98) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Bad JUST"/utf8>>}, V98)) end end; {'Core.CompileExpr.RECORD'} -> begin (V100 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V99) -> ('un--schExp'(V0, V1, V2, V99)) end, V65, []))), fun (V101) -> begin (V102 = (V100(V101))), case V102 of {'Prelude.Types.Left', V103} -> {'Prelude.Types.Left', V103}; {'Prelude.Types.Right', V104} -> (begin (V106 = fun (V105) -> {'Prelude.Types.Right', ('un--schRecordCon'(V1, V62, V104))} end), V106 end(V101)) end end end end; _ -> begin (V108 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V107) -> ('un--schExp'(V0, V1, V2, V107)) end, V65, []))), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V114 = fun (V113) -> {'Prelude.Types.Right', ('un--schConstructor'(V1, V62, V64, V112))} end), V114 end(V109)) end end end end end; {'Core.CompileExpr.NmOp', V115, V116, V117, V118} -> begin (V119 = ('un--schArgs'(V0, V1, V2, V118))), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V124 = ('un--schOp'(V117, V123))), V124 end(V120)) end end end end; {'Core.CompileExpr.NmExtPrim', V125, V126, V127} -> (((V0(V2))(('un--toPrim'(V126))))(V127)); {'Core.CompileExpr.NmForce', V128, V129, V130} -> begin (V131 = ('un--schExp'(V0, V1, V2, V130))), fun (V132) -> begin (V133 = (V131(V132))), case V133 of {'Prelude.Types.Left', V134} -> {'Prelude.Types.Left', V134}; {'Prelude.Types.Right', V135} -> (begin (V137 = fun (V136) -> {'Prelude.Types.Right', <<<<"("/utf8>>/binary, <<V135/binary, <<")"/utf8>>/binary>>/binary>>} end), V137 end(V132)) end end end end; {'Core.CompileExpr.NmDelay', V138, V139, V140} -> begin (V141 = ('un--schExp'(V0, V1, V2, V140))), fun (V142) -> begin (V143 = (V141(V142))), case V143 of {'Prelude.Types.Left', V144} -> {'Prelude.Types.Left', V144}; {'Prelude.Types.Right', V145} -> (begin (V147 = fun (V146) -> {'Prelude.Types.Right', <<<<"(lambda () "/utf8>>/binary, <<V145/binary, <<")"/utf8>>/binary>>/binary>>} end), V147 end(V142)) end end end end; {'Core.CompileExpr.NmConCase', V148, V149, V150, V151} -> ('Idris.Idris2.Core.Core':'un--cond'([{'Builtin.MkPair', fun () -> ('nested--10771-7760--in--un--recordCase'(V0, V1, V151, V150, V149, V148, V2, V150)) end, fun () -> ('un--schRecordCase'(V0, V1, V2, V149, V150, V151)) end} | [{'Builtin.MkPair', fun () -> ('nested--10771-7759--in--un--maybeCase'(V0, V1, V151, V150, V149, V148, V2, V150)) end, fun () -> ('un--schMaybeCase'(V0, V1, V2, V149, V150, V151)) end} | [{'Builtin.MkPair', fun () -> ('nested--10771-7758--in--un--listCase'(V0, V1, V151, V150, V149, V148, V2, V150)) end, fun () -> ('un--schListCase'(V0, V1, V2, V149, V150, V151)) end} | []]]], ('un--schCaseTree'(V0, V1, V2, V149, V150, V151)))); {'Core.CompileExpr.NmConstCase', V152, V153, V154, V155} -> case V155 of {'Prelude.Types.Nothing'} -> begin (V157 = ('un--schExp'(V0, V1, begin (V156 = (V2 + 1)), case ((V156 band 9223372036854775808) =/= 0) of 'true' -> (V156 bor -9223372036854775808); _ -> (V156 band 9223372036854775807) end end, V153))), fun (V158) -> begin (V159 = (V157(V158))), case V159 of {'Prelude.Types.Left', V160} -> {'Prelude.Types.Left', V160}; {'Prelude.Types.Right', V161} -> (begin (V177 = begin (V162 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), case ('un--var'(V153)) of 1 -> begin (V163 = ('nested--10771-7878--in--un--showConstAlts'(V0, V1, V154, V153, V152, V2, V161, V154))), fun (V164) -> begin (V165 = (V163(V164))), case V165 of {'Prelude.Types.Left', V166} -> {'Prelude.Types.Left', V166}; {'Prelude.Types.Right', V167} -> (begin (V169 = fun (V168) -> {'Prelude.Types.Right', <<<<"(cond "/utf8>>/binary, <<V167/binary, <<")"/utf8>>/binary>>/binary>>} end), V169 end(V164)) end end end end; 0 -> begin (V170 = ('nested--10771-7878--in--un--showConstAlts'(V0, V1, V154, V153, V152, V2, V162, V154))), fun (V171) -> begin (V172 = (V170(V171))), case V172 of {'Prelude.Types.Left', V173} -> {'Prelude.Types.Left', V173}; {'Prelude.Types.Right', V174} -> (begin (V176 = fun (V175) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V162/binary, <<<<" "/utf8>>/binary, <<V161/binary, <<<<")) (cond "/utf8>>/binary, <<V174/binary, <<"))"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V176 end(V171)) end end end end end end), V177 end(V158)) end end end end; _ -> begin (V187 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V178) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end, fun () -> fun (V179) -> begin (V180 = ('un--schExp'(V0, V1, V2, V179))), fun (V181) -> begin (V182 = (V180(V181))), case V182 of {'Prelude.Types.Left', V183} -> {'Prelude.Types.Left', V183}; {'Prelude.Types.Right', V184} -> (begin (V186 = fun (V185) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V184}} end), V186 end(V181)) end end end end end end, V155))), fun (V188) -> begin (V189 = (V187(V188))), case V189 of {'Prelude.Types.Left', V190} -> {'Prelude.Types.Left', V190}; {'Prelude.Types.Right', V191} -> (begin (V218 = begin (V193 = ('un--schExp'(V0, V1, begin (V192 = (V2 + 1)), case ((V192 band 9223372036854775808) =/= 0) of 'true' -> (V192 bor -9223372036854775808); _ -> (V192 band 9223372036854775807) end end, V153))), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V217 = begin (V198 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), case ('un--var'(V153)) of 1 -> begin (V201 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V199) -> ('un--schConstAlt'(V0, V1, begin (V200 = (V2 + 1)), case ((V200 band 9223372036854775808) =/= 0) of 'true' -> (V200 bor -9223372036854775808); _ -> (V200 band 9223372036854775807) end end, V197, V199)) end, V154, []))), fun (V202) -> begin (V203 = (V201(V202))), case V203 of {'Prelude.Types.Left', V204} -> {'Prelude.Types.Left', V204}; {'Prelude.Types.Right', V205} -> (begin (V207 = fun (V206) -> {'Prelude.Types.Right', <<<<"(cond "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V205))/binary, <<('un--schCaseDef'(V191))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>} end), V207 end(V202)) end end end end; 0 -> begin (V210 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V208) -> ('un--schConstAlt'(V0, V1, begin (V209 = (V2 + 1)), case ((V209 band 9223372036854775808) =/= 0) of 'true' -> (V209 bor -9223372036854775808); _ -> (V209 band 9223372036854775807) end end, V198, V208)) end, V154, []))), fun (V211) -> begin (V212 = (V210(V211))), case V212 of {'Prelude.Types.Left', V213} -> {'Prelude.Types.Left', V213}; {'Prelude.Types.Right', V214} -> (begin (V216 = fun (V215) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V198/binary, <<<<" "/utf8>>/binary, <<V197/binary, <<<<")) (cond "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V214))/binary, <<('un--schCaseDef'(V191))/binary, <<"))"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V216 end(V211)) end end end end end end), V217 end(V194)) end end end end), V218 end(V188)) end end end end end; {'Core.CompileExpr.NmPrimVal', V219, V220} -> fun (V221) -> {'Prelude.Types.Right', ('un--schConstant'(V1, V220))} end; {'Core.CompileExpr.NmErased', V222} -> fun (V223) -> {'Prelude.Types.Right', <<"\x{27}erased"/utf8>>} end; {'Core.CompileExpr.NmCrash', V224, V225} -> fun (V226) -> {'Prelude.Types.Right', <<<<"(blodwen-error-quit "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V225))/binary, <<")"/utf8>>/binary>>/binary>>} end end.
'un--schDef'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.MkNmFun', V5, V6} -> case V5 of [] -> begin (V7 = ('Idris.Idris2.Core.Context':'un--getFullName'(V2, V3))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V19 = begin (V12 = ('un--schExp'(V0, V1, 0, V6))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = fun (V17) -> {'Prelude.Types.Right', <<<<"(define "/utf8>>/binary, <<('un--schName'(V11))/binary, <<<<"(blodwen-lazy (lambda () "/utf8>>/binary, <<V16/binary, <<")))\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V18 end(V13)) end end end end), V19 end(V8)) end end end end; _ -> begin (V20 = ('Idris.Idris2.Core.Context':'un--getFullName'(V2, V3))), fun (V21) -> begin (V22 = (V20(V21))), case V22 of {'Prelude.Types.Left', V23} -> {'Prelude.Types.Left', V23}; {'Prelude.Types.Right', V24} -> (begin (V32 = begin (V25 = ('un--schExp'(V0, V1, 0, V6))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> {'Prelude.Types.Right', <<<<"(define "/utf8>>/binary, <<('un--schName'(V24))/binary, <<<<" (lambda ("/utf8>>/binary, <<('un--schArglist'(V5))/binary, <<<<") "/utf8>>/binary, <<V29/binary, <<"))\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V31 end(V26)) end end end end), V32 end(V21)) end end end end end; {'Core.CompileExpr.MkNmError', V33} -> begin (V34 = ('Idris.Idris2.Core.Context':'un--getFullName'(V2, V3))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V46 = begin (V39 = ('un--schExp'(V0, V1, 0, V33))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V45 = fun (V44) -> {'Prelude.Types.Right', <<<<"(define ("/utf8>>/binary, <<('un--schName'(V38))/binary, <<<<" . any-args) "/utf8>>/binary, <<V43/binary, <<")\x{a}"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V45 end(V40)) end end end end), V46 end(V35)) end end end end; {'Core.CompileExpr.MkNmForeign', V47, V48, V49} -> fun (V50) -> {'Prelude.Types.Right', <<""/utf8>>} end; {'Core.CompileExpr.MkNmCon', V51, V52, V53} -> fun (V54) -> {'Prelude.Types.Right', <<""/utf8>>} end end.
'un--schConstructor'(V0, V1, V2, V3) -> case V2 of {'Prelude.Types.Just', V4} -> <<<<"(vector "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V3))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>; {'Prelude.Types.Nothing'} -> <<<<"(vector "/utf8>>/binary, <<(V0(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V3))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end.
'un--schConstant'(V0, V1) -> case V1 of {'Core.TT.I', V2} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2)); {'Core.TT.I8', V3} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int8'(V3)); {'Core.TT.I16', V4} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int16'(V4)); {'Core.TT.I32', V5} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int32'(V5)); {'Core.TT.I64', V6} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int64'(V6)); {'Core.TT.BI', V7} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V7)); {'Core.TT.B8', V8} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits8'(V8)); {'Core.TT.B16', V9} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits16'(V9)); {'Core.TT.B32', V10} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits32'(V10)); {'Core.TT.B64', V11} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits64'(V11)); {'Core.TT.Str', V12} -> (V0(V12)); {'Core.TT.Ch', V13} -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(case V13 of E2 when ((erlang:'is_integer'(E2)) andalso (((E2 >= 0) andalso (E2 =< 55295)) orelse ((E2 >= 57344) andalso (E2 =< 1114111)))) -> E2; _ -> 65533 end, 32)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(case V13 of E1 when ((erlang:'is_integer'(E1)) andalso (((E1 >= 0) andalso (E1 =< 55295)) orelse ((E1 >= 57344) andalso (E1 =< 1114111)))) -> E1; _ -> 65533 end, begin (V14 = 127), case ((V14 band 9223372036854775808) =/= 0) of 'true' -> (V14 bor -9223372036854775808); _ -> (V14 band 9223372036854775807) end end)); 0 -> 0 end of 1 -> <<<<"#\x{5c}"/utf8>>/binary, ('unicode':'characters_to_binary'([V13 | []]))/binary>>; 0 -> <<<<"(integer->char "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(case V13 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end))/binary, <<")"/utf8>>/binary>>/binary>> end; {'Core.TT.Db', V15} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V15)); {'Core.TT.PrT', V16} -> ('un--schPrimType'(V16)); {'Core.TT.WorldVal'} -> <<"#f"/utf8>> end.
'un--schConstAlt'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.MkNConstAlt', V5, V6} -> begin (V7 = ('un--schExp'(V0, V1, V2, V6))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V13 = fun (V12) -> {'Prelude.Types.Right', <<<<"((equal? "/utf8>>/binary, <<V3/binary, <<<<" "/utf8>>/binary, <<('un--schConstant'(V1, V5))/binary, <<<<") "/utf8>>/binary, <<V11/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V13 end(V8)) end end end end end.
'un--schConUncheckedAlt'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.MkNConAlt', V5, V6, V7, V8, V9} -> begin (V10 = ('un--schExp'(V0, V1, V2, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', ('nested--10764-5627--in--un--bindArgs'(V0, V1, V9, V8, V7, V6, V5, V3, V2, 1, V8, V14))} end), V16 end(V11)) end end end end end.
'un--schConAlt'(V0, V1, V2, V3, V4) -> case V4 of {'Core.CompileExpr.MkNConAlt', V5, V6, V7, V8, V9} -> begin (V10 = ('un--schExp'(V0, V1, V2, V9))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', <<<<"(("/utf8>>/binary, <<('un--showTag'(V0, V1, V5, V7))/binary, <<<<") "/utf8>>/binary, <<('nested--10763-5491--in--un--bindArgs'(V0, V1, V9, V8, V7, V6, V5, V3, V2, 1, V8, V14))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V16 end(V11)) end end end end end.
'un--schCaseTree'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> begin (V7 = ('un--schExp'(V0, V1, begin (V6 = (V2 + 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end, V3))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V22 = begin (V14 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V12) -> {'Prelude.Types.Right', <<"\x{27}erased"/utf8>>} end end, fun () -> fun (V13) -> ('un--schExp'(V0, V1, V2, V13)) end end, V5))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V21 = begin (V19 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), fun (V20) -> case ('un--var'(V3)) of 1 -> {'Prelude.Types.Right', V18}; 0 -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V19/binary, <<<<" "/utf8>>/binary, <<V11/binary, <<<<")) "/utf8>>/binary, <<V18/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end end end), V21 end(V15)) end end end end), V22 end(V8)) end end end end; [E0 | E1] -> (fun (V23, V24) -> case V24 of [] -> case V5 of {'Prelude.Types.Nothing'} -> begin (V26 = ('un--schExp'(V0, V1, begin (V25 = (V2 + 1)), case ((V25 band 9223372036854775808) =/= 0) of 'true' -> (V25 bor -9223372036854775808); _ -> (V25 band 9223372036854775807) end end, V3))), fun (V27) -> begin (V28 = (V26(V27))), case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> (begin (V48 = begin (V31 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), case ('un--var'(V3)) of 1 -> begin (V33 = ('un--schConUncheckedAlt'(V0, V1, begin (V32 = (V2 + 1)), case ((V32 band 9223372036854775808) =/= 0) of 'true' -> (V32 bor -9223372036854775808); _ -> (V32 band 9223372036854775807) end end, V30, V23))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', V37} end), V39 end(V34)) end end end end; 0 -> begin (V41 = ('un--schConUncheckedAlt'(V0, V1, begin (V40 = (V2 + 1)), case ((V40 band 9223372036854775808) =/= 0) of 'true' -> (V40 bor -9223372036854775808); _ -> (V40 band 9223372036854775807) end end, V31, V23))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V47 = fun (V46) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V31/binary, <<<<" "/utf8>>/binary, <<V30/binary, <<<<")) "/utf8>>/binary, <<V45/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V47 end(V42)) end end end end end end), V48 end(V27)) end end end end; _ -> case V5 of {'Prelude.Types.Nothing'} -> begin (V50 = ('un--schExp'(V0, V1, begin (V49 = (V2 + 1)), case ((V49 band 9223372036854775808) =/= 0) of 'true' -> (V49 bor -9223372036854775808); _ -> (V49 band 9223372036854775807) end end, V3))), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V70 = begin (V55 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), case ('un--var'(V3)) of 1 -> begin (V56 = ('nested--10767-6001--in--un--showAlts'(V0, V1, V4, V3, V2, V54, V4))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V62 = fun (V61) -> {'Prelude.Types.Right', <<<<"(case (vector-ref "/utf8>>/binary, <<V54/binary, <<<<" 0) "/utf8>>/binary, <<V60/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V62 end(V57)) end end end end; 0 -> begin (V63 = ('nested--10767-6001--in--un--showAlts'(V0, V1, V4, V3, V2, V55, V4))), fun (V64) -> begin (V65 = (V63(V64))), case V65 of {'Prelude.Types.Left', V66} -> {'Prelude.Types.Left', V66}; {'Prelude.Types.Right', V67} -> (begin (V69 = fun (V68) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V55/binary, <<<<" "/utf8>>/binary, <<V54/binary, <<<<")) (case (vector-ref "/utf8>>/binary, <<V55/binary, <<<<" 0) "/utf8>>/binary, <<V67/binary, <<"))"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V69 end(V64)) end end end end end end), V70 end(V51)) end end end end; _ -> begin (V72 = ('un--schExp'(V0, V1, begin (V71 = (V2 + 1)), case ((V71 band 9223372036854775808) =/= 0) of 'true' -> (V71 bor -9223372036854775808); _ -> (V71 band 9223372036854775807) end end, V3))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V111 = begin (V86 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V77) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end, fun () -> fun (V78) -> begin (V79 = ('un--schExp'(V0, V1, V2, V78))), fun (V80) -> begin (V81 = (V79(V80))), case V81 of {'Prelude.Types.Left', V82} -> {'Prelude.Types.Left', V82}; {'Prelude.Types.Right', V83} -> (begin (V85 = fun (V84) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V83}} end), V85 end(V80)) end end end end end end, V5))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V110 = begin (V91 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), case ('un--var'(V3)) of 1 -> begin (V94 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V92) -> ('un--schConAlt'(V0, V1, begin (V93 = (V2 + 1)), case ((V93 band 9223372036854775808) =/= 0) of 'true' -> (V93 bor -9223372036854775808); _ -> (V93 band 9223372036854775807) end end, V76, V92)) end, V4, []))), fun (V95) -> begin (V96 = (V94(V95))), case V96 of {'Prelude.Types.Left', V97} -> {'Prelude.Types.Left', V97}; {'Prelude.Types.Right', V98} -> (begin (V100 = fun (V99) -> {'Prelude.Types.Right', <<<<"(case (vector-ref "/utf8>>/binary, <<V76/binary, <<<<" 0) "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V98))/binary, <<('un--schCaseDef'(V90))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V100 end(V95)) end end end end; 0 -> begin (V103 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V101) -> ('un--schConAlt'(V0, V1, begin (V102 = (V2 + 1)), case ((V102 band 9223372036854775808) =/= 0) of 'true' -> (V102 bor -9223372036854775808); _ -> (V102 band 9223372036854775807) end end, V91, V101)) end, V4, []))), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V109 = fun (V108) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V91/binary, <<<<" "/utf8>>/binary, <<V76/binary, <<<<")) (case (vector-ref "/utf8>>/binary, <<V91/binary, <<<<" 0) "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V107))/binary, <<('un--schCaseDef'(V90))/binary, <<"))"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V109 end(V104)) end end end end end end), V110 end(V87)) end end end end), V111 end(V73)) end end end end end end; _ -> case V5 of {'Prelude.Types.Nothing'} -> begin (V113 = ('un--schExp'(V0, V1, begin (V112 = (V2 + 1)), case ((V112 band 9223372036854775808) =/= 0) of 'true' -> (V112 bor -9223372036854775808); _ -> (V112 band 9223372036854775807) end end, V3))), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V133 = begin (V118 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), case ('un--var'(V3)) of 1 -> begin (V119 = ('nested--10767-6001--in--un--showAlts'(V0, V1, V4, V3, V2, V117, V4))), fun (V120) -> begin (V121 = (V119(V120))), case V121 of {'Prelude.Types.Left', V122} -> {'Prelude.Types.Left', V122}; {'Prelude.Types.Right', V123} -> (begin (V125 = fun (V124) -> {'Prelude.Types.Right', <<<<"(case (vector-ref "/utf8>>/binary, <<V117/binary, <<<<" 0) "/utf8>>/binary, <<V123/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V125 end(V120)) end end end end; 0 -> begin (V126 = ('nested--10767-6001--in--un--showAlts'(V0, V1, V4, V3, V2, V118, V4))), fun (V127) -> begin (V128 = (V126(V127))), case V128 of {'Prelude.Types.Left', V129} -> {'Prelude.Types.Left', V129}; {'Prelude.Types.Right', V130} -> (begin (V132 = fun (V131) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V118/binary, <<<<" "/utf8>>/binary, <<V117/binary, <<<<")) (case (vector-ref "/utf8>>/binary, <<V118/binary, <<<<" 0) "/utf8>>/binary, <<V130/binary, <<"))"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V132 end(V127)) end end end end end end), V133 end(V114)) end end end end; _ -> begin (V135 = ('un--schExp'(V0, V1, begin (V134 = (V2 + 1)), case ((V134 band 9223372036854775808) =/= 0) of 'true' -> (V134 bor -9223372036854775808); _ -> (V134 band 9223372036854775807) end end, V3))), fun (V136) -> begin (V137 = (V135(V136))), case V137 of {'Prelude.Types.Left', V138} -> {'Prelude.Types.Left', V138}; {'Prelude.Types.Right', V139} -> (begin (V174 = begin (V149 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V140) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end, fun () -> fun (V141) -> begin (V142 = ('un--schExp'(V0, V1, V2, V141))), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V148 = fun (V147) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V146}} end), V148 end(V143)) end end end end end end, V5))), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V173 = begin (V154 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), case ('un--var'(V3)) of 1 -> begin (V157 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V155) -> ('un--schConAlt'(V0, V1, begin (V156 = (V2 + 1)), case ((V156 band 9223372036854775808) =/= 0) of 'true' -> (V156 bor -9223372036854775808); _ -> (V156 band 9223372036854775807) end end, V139, V155)) end, V4, []))), fun (V158) -> begin (V159 = (V157(V158))), case V159 of {'Prelude.Types.Left', V160} -> {'Prelude.Types.Left', V160}; {'Prelude.Types.Right', V161} -> (begin (V163 = fun (V162) -> {'Prelude.Types.Right', <<<<"(case (vector-ref "/utf8>>/binary, <<V139/binary, <<<<" 0) "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V161))/binary, <<('un--schCaseDef'(V153))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V163 end(V158)) end end end end; 0 -> begin (V166 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V164) -> ('un--schConAlt'(V0, V1, begin (V165 = (V2 + 1)), case ((V165 band 9223372036854775808) =/= 0) of 'true' -> (V165 bor -9223372036854775808); _ -> (V165 band 9223372036854775807) end end, V154, V164)) end, V4, []))), fun (V167) -> begin (V168 = (V166(V167))), case V168 of {'Prelude.Types.Left', V169} -> {'Prelude.Types.Left', V169}; {'Prelude.Types.Right', V170} -> (begin (V172 = fun (V171) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V154/binary, <<<<" "/utf8>>/binary, <<V139/binary, <<<<")) (case (vector-ref "/utf8>>/binary, <<V154/binary, <<<<" 0) "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V170))/binary, <<('un--schCaseDef'(V153))/binary, <<"))"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V172 end(V167)) end end end end end end), V173 end(V150)) end end end end), V174 end(V136)) end end end end end end end(E0, E1)); _ -> case V5 of {'Prelude.Types.Nothing'} -> begin (V176 = ('un--schExp'(V0, V1, begin (V175 = (V2 + 1)), case ((V175 band 9223372036854775808) =/= 0) of 'true' -> (V175 bor -9223372036854775808); _ -> (V175 band 9223372036854775807) end end, V3))), fun (V177) -> begin (V178 = (V176(V177))), case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> (begin (V196 = begin (V181 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), case ('un--var'(V3)) of 1 -> begin (V182 = ('nested--10767-6001--in--un--showAlts'(V0, V1, V4, V3, V2, V180, V4))), fun (V183) -> begin (V184 = (V182(V183))), case V184 of {'Prelude.Types.Left', V185} -> {'Prelude.Types.Left', V185}; {'Prelude.Types.Right', V186} -> (begin (V188 = fun (V187) -> {'Prelude.Types.Right', <<<<"(case (vector-ref "/utf8>>/binary, <<V180/binary, <<<<" 0) "/utf8>>/binary, <<V186/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>} end), V188 end(V183)) end end end end; 0 -> begin (V189 = ('nested--10767-6001--in--un--showAlts'(V0, V1, V4, V3, V2, V181, V4))), fun (V190) -> begin (V191 = (V189(V190))), case V191 of {'Prelude.Types.Left', V192} -> {'Prelude.Types.Left', V192}; {'Prelude.Types.Right', V193} -> (begin (V195 = fun (V194) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V181/binary, <<<<" "/utf8>>/binary, <<V180/binary, <<<<")) (case (vector-ref "/utf8>>/binary, <<V181/binary, <<<<" 0) "/utf8>>/binary, <<V193/binary, <<"))"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V195 end(V190)) end end end end end end), V196 end(V177)) end end end end; _ -> begin (V198 = ('un--schExp'(V0, V1, begin (V197 = (V2 + 1)), case ((V197 band 9223372036854775808) =/= 0) of 'true' -> (V197 bor -9223372036854775808); _ -> (V197 band 9223372036854775807) end end, V3))), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V237 = begin (V212 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V203) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end, fun () -> fun (V204) -> begin (V205 = ('un--schExp'(V0, V1, V2, V204))), fun (V206) -> begin (V207 = (V205(V206))), case V207 of {'Prelude.Types.Left', V208} -> {'Prelude.Types.Left', V208}; {'Prelude.Types.Right', V209} -> (begin (V211 = fun (V210) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V209}} end), V211 end(V206)) end end end end end end, V5))), fun (V213) -> begin (V214 = (V212(V213))), case V214 of {'Prelude.Types.Left', V215} -> {'Prelude.Types.Left', V215}; {'Prelude.Types.Right', V216} -> (begin (V236 = begin (V217 = <<<<"sc"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>), case ('un--var'(V3)) of 1 -> begin (V220 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V218) -> ('un--schConAlt'(V0, V1, begin (V219 = (V2 + 1)), case ((V219 band 9223372036854775808) =/= 0) of 'true' -> (V219 bor -9223372036854775808); _ -> (V219 band 9223372036854775807) end end, V202, V218)) end, V4, []))), fun (V221) -> begin (V222 = (V220(V221))), case V222 of {'Prelude.Types.Left', V223} -> {'Prelude.Types.Left', V223}; {'Prelude.Types.Right', V224} -> (begin (V226 = fun (V225) -> {'Prelude.Types.Right', <<<<"(case (vector-ref "/utf8>>/binary, <<V202/binary, <<<<" 0) "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V224))/binary, <<('un--schCaseDef'(V216))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V226 end(V221)) end end end end; 0 -> begin (V229 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V227) -> ('un--schConAlt'(V0, V1, begin (V228 = (V2 + 1)), case ((V228 band 9223372036854775808) =/= 0) of 'true' -> (V228 bor -9223372036854775808); _ -> (V228 band 9223372036854775807) end end, V217, V227)) end, V4, []))), fun (V230) -> begin (V231 = (V229(V230))), case V231 of {'Prelude.Types.Left', V232} -> {'Prelude.Types.Left', V232}; {'Prelude.Types.Right', V233} -> (begin (V235 = fun (V234) -> {'Prelude.Types.Right', <<<<"(let (("/utf8>>/binary, <<V217/binary, <<<<" "/utf8>>/binary, <<V202/binary, <<<<")) (case (vector-ref "/utf8>>/binary, <<V217/binary, <<<<" 0) "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V233))/binary, <<('un--schCaseDef'(V216))/binary, <<"))"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V235 end(V230)) end end end end end end), V236 end(V213)) end end end end), V237 end(V199)) end end end end end end.
'un--schCaseDef'(V0) -> case V0 of {'Prelude.Types.Nothing'} -> <<""/utf8>>; {'Prelude.Types.Just', V1} -> <<<<"(else "/utf8>>/binary, <<V1/binary, <<")"/utf8>>/binary>>/binary>> end.
'un--schArgs'(V0, V1, V2, V3) -> case V3 of {'Data.Vect.Nil'} -> fun (V4) -> {'Prelude.Types.Right', {'Data.Vect.Nil'}} end; {'Data.Vect.::', V5, V6} -> begin (V7 = ('un--schExp'(V0, V1, V2, V5))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V19 = begin (V12 = ('un--schArgs'(V0, V1, V2, V6))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V18 = fun (V17) -> {'Prelude.Types.Right', {'Data.Vect.::', V11, V16}} end), V18 end(V13)) end end end end), V19 end(V8)) end end end end end.
'un--schArglist'(V0) -> case V0 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V1, V2) -> case V2 of [] -> ('un--schName'(V1)); _ -> <<('un--schName'(V1))/binary, <<<<" "/utf8>>/binary, ('un--schArglist'(V2))/binary>>/binary>> end end(E0, E1)) end.
'un--op'(V0, V1) -> <<<<"("/utf8>>/binary, <<V0/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V1))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>.
'un--mul'(V0, V1, V2) -> case V0 of {'Prelude.Types.Just', V3} -> case V3 of {'Core.TT.Signed', V4} -> case V4 of {'Core.TT.P', V5} -> ('un--op'(<<"bs*"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V6 = (V5 - 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)) | []]]])); _ -> ('un--op'(<<"*"/utf8>>, [V1 | [V2 | []]])) end; {'Core.TT.Unsigned', V7} -> ('un--op'(<<"bu*"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)) | []]]])); _ -> ('un--op'(<<"*"/utf8>>, [V1 | [V2 | []]])) end; _ -> ('un--op'(<<"*"/utf8>>, [V1 | [V2 | []]])) end.
'un--mkWorld'(V0) -> V0.
'un--getScheme'(V0, V1, V2, V3) -> case V3 of {'Builtin.MkPair', V4, V5} -> case V5 of {'Builtin.MkPair', V6, V7} -> ('un--schDef'(V1, V2, V0, V4, V7)) end end.
'un--firstExists'(V0, V1) -> case V0 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> begin (V4 = ('Idris.Idris2.Compiler.Common':'un--exists'(V2, V1))), case V4 of 1 -> {'Prelude.Types.Just', V2}; 0 -> ('un--firstExists'(V3, V1)) end end end(E0, E1)) end.
'un--div'(V0, V1, V2) -> case V0 of {'Prelude.Types.Just', V3} -> case V3 of {'Core.TT.Signed', V4} -> case V4 of {'Core.TT.Unlimited'} -> ('un--op'(<<"blodwen-euclidDiv"/utf8>>, [V1 | [V2 | []]])); {'Core.TT.P', V5} -> ('un--op'(<<"bs/"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V6 = (V5 - 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)) | []]]])); _ -> ('un--op'(<<"/"/utf8>>, [V1 | [V2 | []]])) end; {'Core.TT.Unsigned', V7} -> ('un--op'(<<"bu/"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)) | []]]])); _ -> ('un--op'(<<"/"/utf8>>, [V1 | [V2 | []]])) end; _ -> ('un--op'(<<"/"/utf8>>, [V1 | [V2 | []]])) end.
'un--constPrimitives'() -> {'Compiler.Common.MkConstantPrimitives', fun (V0) -> fun (V1) -> fun (V2) -> {'Prelude.Types.Right', ('nested--8530-3121--in--un--charTo'(V0, V1))} end end end, fun (V3) -> fun (V4) -> fun (V5) -> {'Prelude.Types.Right', ('un--op'(<<"cast-int-char"/utf8>>, [V4 | []]))} end end end, fun (V6) -> fun (V7) -> fun (V8) -> {'Prelude.Types.Right', ('nested--8530-3122--in--un--strTo'(V6, V7))} end end end, fun (V9) -> fun (V10) -> fun (V11) -> {'Prelude.Types.Right', ('un--op'(<<"number->string"/utf8>>, [V10 | []]))} end end end, fun (V12) -> fun (V13) -> fun (V14) -> {'Prelude.Types.Right', ('nested--8530-3123--in--un--dblTo'(V12, V13))} end end end, fun (V15) -> fun (V16) -> fun (V17) -> {'Prelude.Types.Right', ('un--op'(<<"exact->inexact"/utf8>>, [V16 | []]))} end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> {'Prelude.Types.Right', ('nested--8530-3124--in--un--intTo'(V18, V19, V20))} end end end end}.
'un--boolop'(V0, V1) -> <<<<"(or (and "/utf8>>/binary, <<('un--op'(V0, V1))/binary, <<" 1) 0)"/utf8>>/binary>>/binary>>.
'un--add'(V0, V1, V2) -> case V0 of {'Prelude.Types.Just', V3} -> case V3 of {'Core.TT.Signed', V4} -> case V4 of {'Core.TT.P', V5} -> ('un--op'(<<"bs+"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(begin (V6 = (V5 - 1)), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end)) | []]]])); _ -> ('un--op'(<<"+"/utf8>>, [V1 | [V2 | []]])) end; {'Core.TT.Unsigned', V7} -> ('un--op'(<<"bu+"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)) | []]]])); _ -> ('un--op'(<<"+"/utf8>>, [V1 | [V2 | []]])) end; _ -> ('un--op'(<<"+"/utf8>>, [V1 | [V2 | []]])) end.
