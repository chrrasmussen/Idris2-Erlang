-module('Idris.Idris2.Core.Binary.Prims').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--11239-5977--in--un--writeAll'/5,
  'nested--11260-6009--in--un--readElems'/5,
  'nested--11016-5779--in--un--readElems'/4,
  'nested--10998-5733--in--un--length_aux'/5,
  'nested--10998-5734--in--un--TailRec_length'/4,
  'dn--un--toBuf_TTC_WastefulInt'/2,
  'dn--un--toBuf_TTC_String'/2,
  'dn--un--toBuf_TTC_Nat'/2,
  'dn--un--toBuf_TTC_Integer'/2,
  'dn--un--toBuf_TTC_Int8'/2,
  'dn--un--toBuf_TTC_Int64'/2,
  'dn--un--toBuf_TTC_Int32'/2,
  'dn--un--toBuf_TTC_Int16'/2,
  'dn--un--toBuf_TTC_Int'/2,
  'dn--un--toBuf_TTC_Double'/2,
  'dn--un--toBuf_TTC_Char'/2,
  'dn--un--toBuf_TTC_Bool'/2,
  'dn--un--toBuf_TTC_Bits8'/2,
  'dn--un--toBuf_TTC_Bits64'/2,
  'dn--un--toBuf_TTC_Bits32'/2,
  'dn--un--toBuf_TTC_Bits16'/2,
  'dn--un--toBuf_TTC_Binary'/2,
  'dn--un--toBuf_TTC_(|Unit,MkUnit|)'/3,
  'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/3,
  'dn--un--toBuf_TTC_(PosMap $a)'/3,
  'dn--un--toBuf_TTC_(Maybe $a)'/3,
  'dn--un--toBuf_TTC_(List1 $a)'/3,
  'dn--un--toBuf_TTC_(List $a)'/3,
  'dn--un--toBuf_TTC_((Vect $n) $a)'/4,
  'dn--un--toBuf_TTC_((Either $a) $b)'/3,
  'dn--un--toBuf_TTC_((DPair $a) $p)'/3,
  'dn--un--fromBuf_TTC_WastefulInt'/1,
  'dn--un--fromBuf_TTC_String'/1,
  'dn--un--fromBuf_TTC_Nat'/1,
  'dn--un--fromBuf_TTC_Integer'/1,
  'dn--un--fromBuf_TTC_Int8'/1,
  'dn--un--fromBuf_TTC_Int64'/1,
  'dn--un--fromBuf_TTC_Int32'/1,
  'dn--un--fromBuf_TTC_Int16'/1,
  'dn--un--fromBuf_TTC_Int'/1,
  'dn--un--fromBuf_TTC_Double'/1,
  'dn--un--fromBuf_TTC_Char'/1,
  'dn--un--fromBuf_TTC_Bool'/1,
  'dn--un--fromBuf_TTC_Bits8'/1,
  'dn--un--fromBuf_TTC_Bits64'/1,
  'dn--un--fromBuf_TTC_Bits32'/1,
  'dn--un--fromBuf_TTC_Bits16'/1,
  'dn--un--fromBuf_TTC_Binary'/1,
  'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'/2,
  'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/2,
  'dn--un--fromBuf_TTC_(PosMap $a)'/2,
  'dn--un--fromBuf_TTC_(Maybe $a)'/2,
  'dn--un--fromBuf_TTC_(List1 $a)'/2,
  'dn--un--fromBuf_TTC_(List $a)'/2,
  'dn--un--fromBuf_TTC_((Vect $n) $a)'/3,
  'dn--un--fromBuf_TTC_((Either $a) $b)'/2,
  'dn--un--fromBuf_TTC_((DPair $a) $p)'/2,
  'dn--un--__Impl_TTC_String'/0,
  'dn--un--__Impl_TTC_Nat'/0,
  'dn--un--__Impl_TTC_Integer'/0,
  'dn--un--__Impl_TTC_Int8'/0,
  'dn--un--__Impl_TTC_Int64'/0,
  'dn--un--__Impl_TTC_Int32'/0,
  'dn--un--__Impl_TTC_Int16'/0,
  'dn--un--__Impl_TTC_Int'/0,
  'dn--un--__Impl_TTC_Double'/0,
  'dn--un--__Impl_TTC_Char'/0,
  'dn--un--__Impl_TTC_Bool'/0,
  'dn--un--__Impl_TTC_Bits8'/0,
  'dn--un--__Impl_TTC_Bits64'/0,
  'dn--un--__Impl_TTC_Bits32'/0,
  'dn--un--__Impl_TTC_Bits16'/0,
  'dn--un--__Impl_TTC_Binary'/0,
  'dn--un--__Impl_TTC_(|Unit,MkUnit|)'/0,
  'dn--un--__Impl_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/1,
  'dn--un--__Impl_TTC_(PosMap $a)'/1,
  'dn--un--__Impl_TTC_(Maybe $a)'/1,
  'dn--un--__Impl_TTC_(List1 $a)'/1,
  'dn--un--__Impl_TTC_(List $a)'/1,
  'dn--un--__Impl_TTC_((Vect $n) $a)'/2,
  'dn--un--__Impl_TTC_((Either $a) $b)'/1,
  'dn--un--__Impl_TTC_((DPair $a) $p)'/1,
  'un--toLimbs'/1,
  'un--toBuf'/3,
  'un--tag'/2,
  'un--modTime'/1,
  'un--initBinaryS'/1,
  'un--initBinary'/0,
  'un--hashFileWith'/2,
  'un--hashFile'/1,
  'un--getTag'/1,
  'un--fromLimbs'/1,
  'un--fromBuf'/2,
  'un--extendBinary'/2,
  'un--corrupt'/2,
  'un--Wasteful'/0
]).
'nested--11239-5977--in--un--writeAll'(V0, V1, V2, V3, V4) -> case V4 of {'Data.Vect.Nil'} -> fun (V5) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; {'Data.Vect.::', V6, V7} -> begin (V10 = case V1 of {'Core.Binary.Prims.dn--un--__mkTTC', V8, V9} -> ((V8(V3))(V6)) end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V15 = ('nested--11239-5977--in--un--writeAll'(V0, V1, V2, V3, V7))), V15 end(V11)) end end end end end.
'nested--11260-6009--in--un--readElems'(V0, V1, V2, V3, V4) -> case V4 of 0 -> fun (V5) -> {'Prelude.Types.Right', ('Idris.Idris2.Data.Vect':'un--reverse'(V3))} end; _ -> begin (V6 = (V4 - 1)), begin (V9 = case V0 of {'Core.Binary.Prims.dn--un--__mkTTC', V7, V8} -> (V8(V1)) end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V14 = ('nested--11260-6009--in--un--readElems'(V0, V1, V2, {'Data.Vect.::', V13, V3}, V6))), V14 end(V10)) end end end end end end.
'nested--11016-5779--in--un--readElems'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2))} end; _ -> begin (V5 = (V3 - 1)), begin (V8 = case V0 of {'Core.Binary.Prims.dn--un--__mkTTC', V6, V7} -> (V7(V1)) end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V13 = ('nested--11016-5779--in--un--readElems'(V0, V1, [V12 | V2], V5))), V13 end(V9)) end end end end end end.
'nested--10998-5733--in--un--length_aux'(V0, V1, V2, V3, V4) -> case V3 of [] -> V4; [E0 | E1] -> (fun (V5, V6) -> ('nested--10998-5733--in--un--length_aux'(V0, V1, V2, V6, begin (V7 = (V4 + 1)), case ((V7 band 9223372036854775808) =/= 0) of 'true' -> (V7 bor -9223372036854775808); _ -> (V7 band 9223372036854775807) end end)) end(E0, E1)) end.
'nested--10998-5734--in--un--TailRec_length'(V0, V1, V2, V3) -> ('nested--10998-5733--in--un--length_aux'(V0, V1, V2, V3, 0)).
'dn--un--toBuf_TTC_WastefulInt'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V116 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V11)), 8)) of 1 -> begin (V50 = fun (V12) -> begin (V49 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setInt'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, fun (V38) -> fun (V39) -> V39 end end}, case V11 of {'Libraries.Utils.Binary.MkBin', V40, V41, V42, V43} -> V40 end, begin (V48 = case V11 of {'Libraries.Utils.Binary.MkBin', V44, V45, V46, V47} -> V45 end), case ((V48 band 9223372036854775808) =/= 0) of 'true' -> (V48 bor -9223372036854775808); _ -> (V48 band 9223372036854775807) end end, V1))(V12))), {'Prelude.Types.Right', V49} end end), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V60 = begin (V55 = V0), fun (V56) -> begin (V59 = (begin (V57 = V55), fun (V58) -> ('erlang':'put'(V57, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V11)))) end end(V56))), {'Prelude.Types.Right', V59} end end end), V60 end(V51)) end end end end; 0 -> begin (V61 = ('un--extendBinary'(8, V11))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V115 = begin (V104 = fun (V66) -> begin (V103 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setInt'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V69, V70, V71)) end end end end end, fun (V72) -> fun (V73) -> fun (V74) -> V73 end end end, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V77(V79))), begin (V81 = (V78(V79))), (V80(V81)) end end end end end end end}, fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V84(V86))), ((V85(V87))(V86)) end end end end end end, fun (V88) -> fun (V89) -> fun (V90) -> begin (V91 = (V89(V90))), (V91(V90)) end end end end}, fun (V92) -> fun (V93) -> V93 end end}, case V65 of {'Libraries.Utils.Binary.MkBin', V94, V95, V96, V97} -> V94 end, begin (V102 = case V65 of {'Libraries.Utils.Binary.MkBin', V98, V99, V100, V101} -> V99 end), case ((V102 band 9223372036854775808) =/= 0) of 'true' -> (V102 bor -9223372036854775808); _ -> (V102 band 9223372036854775807) end end, V1))(V66))), {'Prelude.Types.Right', V103} end end), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V114 = begin (V109 = V0), fun (V110) -> begin (V113 = (begin (V111 = V109), fun (V112) -> ('erlang':'put'(V111, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V65)))) end end(V110))), {'Prelude.Types.Right', V113} end end end), V114 end(V105)) end end end end), V115 end(V62)) end end end end end), V116 end(V8)) end end end end.
'dn--un--toBuf_TTC_String'(V0, V1) -> begin (V2 = ('Idris.Idris2.Erlang.Data.Buffer':'un--stringByteLength'(V1))), begin (V3 = V2), begin (V4 = ('dn--un--toBuf_TTC_Int'(V0, V2))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V124 = begin (V14 = begin (V9 = V0), fun (V10) -> begin (V13 = (begin (V11 = V9), fun (V12) -> ('erlang':'get'(V11)) end end(V10))), {'Prelude.Types.Right', V13} end end end), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V123 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V18)), V3)) of 1 -> begin (V57 = fun (V19) -> begin (V56 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setString'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> V26 end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), begin (V34 = (V31(V32))), (V33(V34)) end end end end end end end}, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V37(V39))), ((V38(V40))(V39)) end end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V42(V43))), (V44(V43)) end end end end}, fun (V45) -> fun (V46) -> V46 end end}, case V18 of {'Libraries.Utils.Binary.MkBin', V47, V48, V49, V50} -> V47 end, begin (V55 = case V18 of {'Libraries.Utils.Binary.MkBin', V51, V52, V53, V54} -> V52 end), case ((V55 band 9223372036854775808) =/= 0) of 'true' -> (V55 bor -9223372036854775808); _ -> (V55 band 9223372036854775807) end end, V1))(V19))), {'Prelude.Types.Right', V56} end end), fun (V58) -> begin (V59 = (V57(V58))), case V59 of {'Prelude.Types.Left', V60} -> {'Prelude.Types.Left', V60}; {'Prelude.Types.Right', V61} -> (begin (V67 = begin (V62 = V0), fun (V63) -> begin (V66 = (begin (V64 = V62), fun (V65) -> ('erlang':'put'(V64, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(V3, V18)))) end end(V63))), {'Prelude.Types.Right', V66} end end end), V67 end(V58)) end end end end; 0 -> begin (V68 = ('un--extendBinary'(V3, V18))), fun (V69) -> begin (V70 = (V68(V69))), case V70 of {'Prelude.Types.Left', V71} -> {'Prelude.Types.Left', V71}; {'Prelude.Types.Right', V72} -> (begin (V122 = begin (V111 = fun (V73) -> begin (V110 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setString'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V76, V77, V78)) end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> V80 end end end, fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V84(V86))), begin (V88 = (V85(V86))), (V87(V88)) end end end end end end end}, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> begin (V94 = (V91(V93))), ((V92(V94))(V93)) end end end end end end, fun (V95) -> fun (V96) -> fun (V97) -> begin (V98 = (V96(V97))), (V98(V97)) end end end end}, fun (V99) -> fun (V100) -> V100 end end}, case V72 of {'Libraries.Utils.Binary.MkBin', V101, V102, V103, V104} -> V101 end, begin (V109 = case V72 of {'Libraries.Utils.Binary.MkBin', V105, V106, V107, V108} -> V106 end), case ((V109 band 9223372036854775808) =/= 0) of 'true' -> (V109 bor -9223372036854775808); _ -> (V109 band 9223372036854775807) end end, V1))(V73))), {'Prelude.Types.Right', V110} end end), fun (V112) -> begin (V113 = (V111(V112))), case V113 of {'Prelude.Types.Left', V114} -> {'Prelude.Types.Left', V114}; {'Prelude.Types.Right', V115} -> (begin (V121 = begin (V116 = V0), fun (V117) -> begin (V120 = (begin (V118 = V116), fun (V119) -> ('erlang':'put'(V118, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(V3, V72)))) end end(V117))), {'Prelude.Types.Right', V120} end end end), V121 end(V112)) end end end end), V122 end(V69)) end end end end end), V123 end(V15)) end end end end), V124 end(V5)) end end end end end end.
'dn--un--toBuf_TTC_Nat'(V0, V1) -> ('dn--un--toBuf_TTC_Integer'(V0, V1)).
'dn--un--toBuf_TTC_Integer'(V0, V1) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V1, 0)) of 1 -> begin (V2 = ('un--tag'(V0, 0))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V10 = ('dn--un--toBuf_TTC_(List $a)'({'Core.Binary.Prims.dn--un--__mkTTC', fun (V7) -> fun (V8) -> ('dn--un--toBuf_TTC_Int'(V7, V8)) end end, fun (V9) -> ('dn--un--fromBuf_TTC_Int'(V9)) end}, V0, ('un--toLimbs'((0 - V1)))))), V10 end(V3)) end end end end; 0 -> begin (V11 = ('un--tag'(V0, 1))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V19 = ('dn--un--toBuf_TTC_(List $a)'({'Core.Binary.Prims.dn--un--__mkTTC', fun (V16) -> fun (V17) -> ('dn--un--toBuf_TTC_Int'(V16, V17)) end end, fun (V18) -> ('dn--un--fromBuf_TTC_Int'(V18)) end}, V0, ('un--toLimbs'(V1))))), V19 end(V12)) end end end end end.
'dn--un--toBuf_TTC_Int8'(V0, V1) -> ('dn--un--toBuf_TTC_Int'(V0, V1)).
'dn--un--toBuf_TTC_Int64'(V0, V1) -> ('dn--un--toBuf_TTC_Integer'(V0, V1)).
'dn--un--toBuf_TTC_Int32'(V0, V1) -> ('dn--un--toBuf_TTC_Int'(V0, V1)).
'dn--un--toBuf_TTC_Int16'(V0, V1) -> ('dn--un--toBuf_TTC_Int'(V0, V1)).
'dn--un--toBuf_TTC_Int'(V0, V1) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1, begin (V2 = -127), case ((V2 band 9223372036854775808) =/= 0) of 'true' -> (V2 bor -9223372036854775808); _ -> (V2 band 9223372036854775807) end end)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1, begin (V3 = 128), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end)); 0 -> 0 end of 1 -> ('un--tag'(V0, begin (V5 = (V1 + begin (V4 = 127), case ((V4 band 9223372036854775808) =/= 0) of 'true' -> (V4 bor -9223372036854775808); _ -> (V4 band 9223372036854775807) end end)), case ((V5 band 9223372036854775808) =/= 0) of 'true' -> (V5 bor -9223372036854775808); _ -> (V5 band 9223372036854775807) end end)); 0 -> begin (V7 = ('un--tag'(V0, begin (V6 = 255), case ((V6 band 9223372036854775808) =/= 0) of 'true' -> (V6 bor -9223372036854775808); _ -> (V6 band 9223372036854775807) end end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V127 = begin (V17 = begin (V12 = V0), fun (V13) -> begin (V16 = (begin (V14 = V12), fun (V15) -> ('erlang':'get'(V14)) end end(V13))), {'Prelude.Types.Right', V16} end end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V126 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V21)), 8)) of 1 -> begin (V60 = fun (V22) -> begin (V59 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setInt'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> V29 end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), begin (V37 = (V34(V35))), (V36(V37)) end end end end end end end}, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), ((V41(V43))(V42)) end end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V45(V46))), (V47(V46)) end end end end}, fun (V48) -> fun (V49) -> V49 end end}, case V21 of {'Libraries.Utils.Binary.MkBin', V50, V51, V52, V53} -> V50 end, begin (V58 = case V21 of {'Libraries.Utils.Binary.MkBin', V54, V55, V56, V57} -> V55 end), case ((V58 band 9223372036854775808) =/= 0) of 'true' -> (V58 bor -9223372036854775808); _ -> (V58 band 9223372036854775807) end end, V1))(V22))), {'Prelude.Types.Right', V59} end end), fun (V61) -> begin (V62 = (V60(V61))), case V62 of {'Prelude.Types.Left', V63} -> {'Prelude.Types.Left', V63}; {'Prelude.Types.Right', V64} -> (begin (V70 = begin (V65 = V0), fun (V66) -> begin (V69 = (begin (V67 = V65), fun (V68) -> ('erlang':'put'(V67, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V21)))) end end(V66))), {'Prelude.Types.Right', V69} end end end), V70 end(V61)) end end end end; 0 -> begin (V71 = ('un--extendBinary'(8, V21))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V125 = begin (V114 = fun (V76) -> begin (V113 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setInt'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V79, V80, V81)) end end end end end, fun (V82) -> fun (V83) -> fun (V84) -> V83 end end end, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> begin (V90 = (V87(V89))), begin (V91 = (V88(V89))), (V90(V91)) end end end end end end end}, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V94(V96))), ((V95(V97))(V96)) end end end end end end, fun (V98) -> fun (V99) -> fun (V100) -> begin (V101 = (V99(V100))), (V101(V100)) end end end end}, fun (V102) -> fun (V103) -> V103 end end}, case V75 of {'Libraries.Utils.Binary.MkBin', V104, V105, V106, V107} -> V104 end, begin (V112 = case V75 of {'Libraries.Utils.Binary.MkBin', V108, V109, V110, V111} -> V109 end), case ((V112 band 9223372036854775808) =/= 0) of 'true' -> (V112 bor -9223372036854775808); _ -> (V112 band 9223372036854775807) end end, V1))(V76))), {'Prelude.Types.Right', V113} end end), fun (V115) -> begin (V116 = (V114(V115))), case V116 of {'Prelude.Types.Left', V117} -> {'Prelude.Types.Left', V117}; {'Prelude.Types.Right', V118} -> (begin (V124 = begin (V119 = V0), fun (V120) -> begin (V123 = (begin (V121 = V119), fun (V122) -> ('erlang':'put'(V121, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V75)))) end end(V120))), {'Prelude.Types.Right', V123} end end end), V124 end(V115)) end end end end), V125 end(V72)) end end end end end), V126 end(V18)) end end end end), V127 end(V8)) end end end end end.
'dn--un--toBuf_TTC_Double'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V116 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V11)), 8)) of 1 -> begin (V50 = fun (V12) -> begin (V49 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setDouble'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, fun (V38) -> fun (V39) -> V39 end end}, case V11 of {'Libraries.Utils.Binary.MkBin', V40, V41, V42, V43} -> V40 end, begin (V48 = case V11 of {'Libraries.Utils.Binary.MkBin', V44, V45, V46, V47} -> V45 end), case ((V48 band 9223372036854775808) =/= 0) of 'true' -> (V48 bor -9223372036854775808); _ -> (V48 band 9223372036854775807) end end, V1))(V12))), {'Prelude.Types.Right', V49} end end), fun (V51) -> begin (V52 = (V50(V51))), case V52 of {'Prelude.Types.Left', V53} -> {'Prelude.Types.Left', V53}; {'Prelude.Types.Right', V54} -> (begin (V60 = begin (V55 = V0), fun (V56) -> begin (V59 = (begin (V57 = V55), fun (V58) -> ('erlang':'put'(V57, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V11)))) end end(V56))), {'Prelude.Types.Right', V59} end end end), V60 end(V51)) end end end end; 0 -> begin (V61 = ('un--extendBinary'(8, V11))), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V115 = begin (V104 = fun (V66) -> begin (V103 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setDouble'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V69, V70, V71)) end end end end end, fun (V72) -> fun (V73) -> fun (V74) -> V73 end end end, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V77(V79))), begin (V81 = (V78(V79))), (V80(V81)) end end end end end end end}, fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V84(V86))), ((V85(V87))(V86)) end end end end end end, fun (V88) -> fun (V89) -> fun (V90) -> begin (V91 = (V89(V90))), (V91(V90)) end end end end}, fun (V92) -> fun (V93) -> V93 end end}, case V65 of {'Libraries.Utils.Binary.MkBin', V94, V95, V96, V97} -> V94 end, begin (V102 = case V65 of {'Libraries.Utils.Binary.MkBin', V98, V99, V100, V101} -> V99 end), case ((V102 band 9223372036854775808) =/= 0) of 'true' -> (V102 bor -9223372036854775808); _ -> (V102 band 9223372036854775807) end end, V1))(V66))), {'Prelude.Types.Right', V103} end end), fun (V105) -> begin (V106 = (V104(V105))), case V106 of {'Prelude.Types.Left', V107} -> {'Prelude.Types.Left', V107}; {'Prelude.Types.Right', V108} -> (begin (V114 = begin (V109 = V0), fun (V110) -> begin (V113 = (begin (V111 = V109), fun (V112) -> ('erlang':'put'(V111, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V65)))) end end(V110))), {'Prelude.Types.Right', V113} end end end), V114 end(V105)) end end end end), V115 end(V62)) end end end end end), V116 end(V8)) end end end end.
'dn--un--toBuf_TTC_Char'(V0, V1) -> ('dn--un--toBuf_TTC_Int'(V0, case V1 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end)).
'dn--un--toBuf_TTC_Bool'(V0, V1) -> case V1 of 0 -> ('un--tag'(V0, 0)); 1 -> ('un--tag'(V0, 1)) end.
'dn--un--toBuf_TTC_Bits8'(V0, V1) -> ('dn--un--toBuf_TTC_Int'(V0, V1)).
'dn--un--toBuf_TTC_Bits64'(V0, V1) -> ('dn--un--toBuf_TTC_Integer'(V0, V1)).
'dn--un--toBuf_TTC_Bits32'(V0, V1) -> ('dn--un--toBuf_TTC_Integer'(V0, V1)).
'dn--un--toBuf_TTC_Bits16'(V0, V1) -> ('dn--un--toBuf_TTC_Int'(V0, V1)).
'dn--un--toBuf_TTC_Binary'(V0, V1) -> begin (V6 = case V1 of {'Libraries.Utils.Binary.MkBin', V2, V3, V4, V5} -> V5 end), begin (V8 = begin (V7 = V6), case ((V7 band 9223372036854775808) =/= 0) of 'true' -> (V7 bor -9223372036854775808); _ -> (V7 band 9223372036854775807) end end), begin (V9 = ('dn--un--toBuf_TTC_Int'(V0, V8))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V137 = begin (V19 = begin (V14 = V0), fun (V15) -> begin (V18 = (begin (V16 = V14), fun (V17) -> ('erlang':'get'(V16)) end end(V15))), {'Prelude.Types.Right', V18} end end end), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V136 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V23)), V6)) of 1 -> begin (V66 = fun (V24) -> begin (V65 = (('Idris.Idris2.Erlang.Data.Buffer':'un--copyData'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> V31 end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V35(V37))), begin (V39 = (V36(V37))), (V38(V39)) end end end end end end end}, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), ((V43(V45))(V44)) end end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V47(V48))), (V49(V48)) end end end end}, fun (V50) -> fun (V51) -> V51 end end}, case V1 of {'Libraries.Utils.Binary.MkBin', V52, V53, V54, V55} -> V52 end, 0, V8, case V23 of {'Libraries.Utils.Binary.MkBin', V56, V57, V58, V59} -> V56 end, begin (V64 = case V23 of {'Libraries.Utils.Binary.MkBin', V60, V61, V62, V63} -> V61 end), case ((V64 band 9223372036854775808) =/= 0) of 'true' -> (V64 bor -9223372036854775808); _ -> (V64 band 9223372036854775807) end end))(V24))), {'Prelude.Types.Right', V65} end end), fun (V67) -> begin (V68 = (V66(V67))), case V68 of {'Prelude.Types.Left', V69} -> {'Prelude.Types.Left', V69}; {'Prelude.Types.Right', V70} -> (begin (V76 = begin (V71 = V0), fun (V72) -> begin (V75 = (begin (V73 = V71), fun (V74) -> ('erlang':'put'(V73, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(V6, V23)))) end end(V72))), {'Prelude.Types.Right', V75} end end end), V76 end(V67)) end end end end; 0 -> begin (V77 = ('un--extendBinary'(V6, V23))), fun (V78) -> begin (V79 = (V77(V78))), case V79 of {'Prelude.Types.Left', V80} -> {'Prelude.Types.Left', V80}; {'Prelude.Types.Right', V81} -> (begin (V135 = begin (V124 = fun (V82) -> begin (V123 = (('Idris.Idris2.Erlang.Data.Buffer':'un--copyData'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V85, V86, V87)) end end end end end, fun (V88) -> fun (V89) -> fun (V90) -> V89 end end end, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> begin (V96 = (V93(V95))), begin (V97 = (V94(V95))), (V96(V97)) end end end end end end end}, fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> begin (V103 = (V100(V102))), ((V101(V103))(V102)) end end end end end end, fun (V104) -> fun (V105) -> fun (V106) -> begin (V107 = (V105(V106))), (V107(V106)) end end end end}, fun (V108) -> fun (V109) -> V109 end end}, case V1 of {'Libraries.Utils.Binary.MkBin', V110, V111, V112, V113} -> V110 end, 0, V8, case V81 of {'Libraries.Utils.Binary.MkBin', V114, V115, V116, V117} -> V114 end, begin (V122 = case V81 of {'Libraries.Utils.Binary.MkBin', V118, V119, V120, V121} -> V119 end), case ((V122 band 9223372036854775808) =/= 0) of 'true' -> (V122 bor -9223372036854775808); _ -> (V122 band 9223372036854775807) end end))(V82))), {'Prelude.Types.Right', V123} end end), fun (V125) -> begin (V126 = (V124(V125))), case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> (begin (V134 = begin (V129 = V0), fun (V130) -> begin (V133 = (begin (V131 = V129), fun (V132) -> ('erlang':'put'(V131, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(V6, V81)))) end end(V130))), {'Prelude.Types.Right', V133} end end end), V134 end(V125)) end end end end), V135 end(V78)) end end end end end), V136 end(V20)) end end end end), V137 end(V10)) end end end end end end.
'dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V0, V1, V2) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}.
'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2) -> case V2 of {'Builtin.MkPair', V3, V4} -> begin (V7 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Core.Binary.Prims.dn--un--__mkTTC', V5, V6} -> ((V5(V1))(V3)) end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V14 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Core.Binary.Prims.dn--un--__mkTTC', V12, V13} -> ((V12(V1))(V4)) end), V14 end(V8)) end end end end end.
'dn--un--toBuf_TTC_(PosMap $a)'(V0, V1, V2) -> ('dn--un--toBuf_TTC_(List $a)'(('Idris.Idris2.Builtin':'un--fst'(V0)), V1, ('Idris.Idris2.Libraries.Data.PosMap':'dn--un--toList_Foldable_PosMap'(V2)))).
'dn--un--toBuf_TTC_(Maybe $a)'(V0, V1, V2) -> case V2 of {'Prelude.Types.Nothing'} -> ('un--tag'(V1, 0)); {'Prelude.Types.Just', V3} -> begin (V4 = ('un--tag'(V1, 1))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V11 = case V0 of {'Core.Binary.Prims.dn--un--__mkTTC', V9, V10} -> ((V9(V1))(V3)) end), V11 end(V5)) end end end end end.
'dn--un--toBuf_TTC_(List1 $a)'(V0, V1, V2) -> begin (V7 = case V0 of {'Core.Binary.Prims.dn--un--__mkTTC', V3, V4} -> ((V3(V1))(case V2 of {'Data.List1.:::', V5, V6} -> V5 end)) end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V14 = ('dn--un--toBuf_TTC_(List $a)'(V0, V1, case V2 of {'Data.List1.:::', V12, V13} -> V13 end))), V14 end(V8)) end end end end.
'dn--un--toBuf_TTC_(List $a)'(V0, V1, V2) -> begin (V3 = ('dn--un--toBuf_TTC_Int'(V1, ('nested--10998-5734--in--un--TailRec_length'(V0, V2, V1, V2))))), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V11 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V8) -> case V0 of {'Core.Binary.Prims.dn--un--__mkTTC', V9, V10} -> ((V9(V1))(V8)) end end, V2))), V11 end(V4)) end end end end.
'dn--un--toBuf_TTC_((Vect $n) $a)'(V0, V1, V2, V3) -> ('nested--11239-5977--in--un--writeAll'(V0, V1, V3, V2, V3)).
'dn--un--toBuf_TTC_((Either $a) $b)'(V0, V1, V2) -> case V2 of {'Prelude.Types.Left', V3} -> begin (V4 = ('un--tag'(V1, 0))), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V11 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Core.Binary.Prims.dn--un--__mkTTC', V9, V10} -> ((V9(V1))(V3)) end), V11 end(V5)) end end end end; {'Prelude.Types.Right', V12} -> begin (V13 = ('un--tag'(V1, 1))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V20 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Core.Binary.Prims.dn--un--__mkTTC', V18, V19} -> ((V18(V1))(V12)) end), V20 end(V14)) end end end end end.
'dn--un--toBuf_TTC_((DPair $a) $p)'(V0, V1, V2) -> case V2 of {'Builtin.DPair.MkDPair', V3, V4} -> begin (V7 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Core.Binary.Prims.dn--un--__mkTTC', V5, V6} -> ((V5(V1))(V3)) end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V14 = case (('Idris.Idris2.Builtin':'un--snd'(V0))(V3)) of {'Core.Binary.Prims.dn--un--__mkTTC', V12, V13} -> ((V12(V1))(V4)) end), V14 end(V8)) end end end end end.
'dn--un--fromBuf_TTC_WastefulInt'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V82 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V10)), 8)) of 1 -> begin (V49 = fun (V11) -> begin (V48 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getInt'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, case V10 of {'Libraries.Utils.Binary.MkBin', V39, V40, V41, V42} -> V39 end, begin (V47 = case V10 of {'Libraries.Utils.Binary.MkBin', V43, V44, V45, V46} -> V44 end), case ((V47 band 9223372036854775808) =/= 0) of 'true' -> (V47 bor -9223372036854775808); _ -> (V47 band 9223372036854775807) end end))(V11))), {'Prelude.Types.Right', V48} end end), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V66 = begin (V59 = begin (V54 = V0), fun (V55) -> begin (V58 = (begin (V56 = V54), fun (V57) -> ('erlang':'put'(V56, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(8, V10)))) end end(V55))), {'Prelude.Types.Right', V58} end end end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V65 = fun (V64) -> {'Prelude.Types.Right', V53} end), V65 end(V60)) end end end end), V66 end(V50)) end end end end; 0 -> fun (V67) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.TTCError', {'Core.Core.EndOfBuffer', <<<<"Int "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V68) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Integer'(V69, V70)) end end}, {'Prelude.Show.MkShow', fun (V71) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Integer'(V72, V73)) end end}}, {'Builtin.MkPair', case V10 of {'Libraries.Utils.Binary.MkBin', V74, V75, V76, V77} -> V75 end, case V10 of {'Libraries.Utils.Binary.MkBin', V78, V79, V80, V81} -> V80 end}))/binary>>}}, V67)) end end), V82 end(V7)) end end end end.
'dn--un--fromBuf_TTC_String'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Int'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V86 = begin (V11 = begin (V6 = V0), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V85 = begin (V16 = V5), begin (V18 = fun (V17) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V16, 0)) of 1 -> ('un--corrupt'(<<"String"/utf8>>, V17)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V84 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V15)), V16)) of 1 -> begin (V61 = fun (V23) -> begin (V60 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getString'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> V30 end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), begin (V38 = (V35(V36))), (V37(V38)) end end end end end end end}, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), ((V42(V44))(V43)) end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V46(V47))), (V48(V47)) end end end end}, fun (V49) -> fun (V50) -> V50 end end}, case V15 of {'Libraries.Utils.Binary.MkBin', V51, V52, V53, V54} -> V51 end, begin (V59 = case V15 of {'Libraries.Utils.Binary.MkBin', V55, V56, V57, V58} -> V56 end), case ((V59 band 9223372036854775808) =/= 0) of 'true' -> (V59 bor -9223372036854775808); _ -> (V59 band 9223372036854775807) end end, V5))(V23))), {'Prelude.Types.Right', V60} end end), fun (V62) -> begin (V63 = (V61(V62))), case V63 of {'Prelude.Types.Left', V64} -> {'Prelude.Types.Left', V64}; {'Prelude.Types.Right', V65} -> (begin (V78 = begin (V71 = begin (V66 = V0), fun (V67) -> begin (V70 = (begin (V68 = V66), fun (V69) -> ('erlang':'put'(V68, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(V16, V15)))) end end(V67))), {'Prelude.Types.Right', V70} end end end), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V77 = fun (V76) -> {'Prelude.Types.Right', V65} end), V77 end(V72)) end end end end), V78 end(V62)) end end end end; 0 -> fun (V79) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.TTCError', {'Core.Core.EndOfBuffer', <<<<"String length "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V16))/binary, <<<<" at "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(case V15 of {'Libraries.Utils.Binary.MkBin', V80, V81, V82, V83} -> V81 end))/binary>>/binary>>/binary>>}}, V79)) end end), V84 end(V19)) end end end end end), V85 end(V12)) end end end end), V86 end(V2)) end end end end.
'dn--un--fromBuf_TTC_Nat'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Integer'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V7 = fun (V6) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V5))} end), V7 end(V2)) end end end end.
'dn--un--fromBuf_TTC_Integer'(V0) -> begin (V1 = ('un--getTag'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V27 = case V5 of 0 -> begin (V9 = ('dn--un--fromBuf_TTC_(List $a)'({'Core.Binary.Prims.dn--un--__mkTTC', fun (V6) -> fun (V7) -> ('dn--un--toBuf_TTC_Int'(V6, V7)) end end, fun (V8) -> ('dn--un--fromBuf_TTC_Int'(V8)) end}, V0))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', (0 - ('un--fromLimbs'(V13)))} end), V15 end(V10)) end end end end; 1 -> begin (V19 = ('dn--un--fromBuf_TTC_(List $a)'({'Core.Binary.Prims.dn--un--__mkTTC', fun (V16) -> fun (V17) -> ('dn--un--toBuf_TTC_Int'(V16, V17)) end end, fun (V18) -> ('dn--un--fromBuf_TTC_Int'(V18)) end}, V0))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V25 = fun (V24) -> {'Prelude.Types.Right', ('un--fromLimbs'(V23))} end), V25 end(V20)) end end end end; _ -> fun (V26) -> ('un--corrupt'(<<"Integer"/utf8>>, V26)) end end), V27 end(V2)) end end end end.
'dn--un--fromBuf_TTC_Int8'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Int'(V0))), ((begin (V18 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end((begin (V10 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> {'Prelude.Types.Right', (V6(V9))} end end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V2) -> begin (V3 = V2), case ((V3 band 128) =/= 0) of 'true' -> (V3 bor -128); _ -> (V3 band 127) end end end))))(V1)) end.
'dn--un--fromBuf_TTC_Int64'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Integer'(V0))), ((begin (V18 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end((begin (V10 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> {'Prelude.Types.Right', (V6(V9))} end end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V2) -> begin (V3 = V2), case ((V3 band 9223372036854775808) =/= 0) of 'true' -> (V3 bor -9223372036854775808); _ -> (V3 band 9223372036854775807) end end end))))(V1)) end.
'dn--un--fromBuf_TTC_Int32'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Int'(V0))), ((begin (V18 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end((begin (V10 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> {'Prelude.Types.Right', (V6(V9))} end end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V2) -> begin (V3 = V2), case ((V3 band 2147483648) =/= 0) of 'true' -> (V3 bor -2147483648); _ -> (V3 band 2147483647) end end end))))(V1)) end.
'dn--un--fromBuf_TTC_Int16'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Int'(V0))), ((begin (V18 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end((begin (V10 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> {'Prelude.Types.Right', (V6(V9))} end end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V2) -> begin (V3 = V2), case ((V3 band 32768) =/= 0) of 'true' -> (V3 bor -32768); _ -> (V3 band 32767) end end end))))(V1)) end.
'dn--un--fromBuf_TTC_Int'(V0) -> begin (V1 = ('un--getTag'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V91 = case V5 of 255 -> begin (V11 = begin (V6 = V0), fun (V7) -> begin (V10 = (begin (V8 = V6), fun (V9) -> ('erlang':'get'(V8)) end end(V7))), {'Prelude.Types.Right', V10} end end end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V87 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V15)), 8)) of 1 -> begin (V54 = fun (V16) -> begin (V53 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getInt'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> V23 end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), begin (V31 = (V28(V29))), (V30(V31)) end end end end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), ((V35(V37))(V36)) end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V39(V40))), (V41(V40)) end end end end}, fun (V42) -> fun (V43) -> V43 end end}, case V15 of {'Libraries.Utils.Binary.MkBin', V44, V45, V46, V47} -> V44 end, begin (V52 = case V15 of {'Libraries.Utils.Binary.MkBin', V48, V49, V50, V51} -> V49 end), case ((V52 band 9223372036854775808) =/= 0) of 'true' -> (V52 bor -9223372036854775808); _ -> (V52 band 9223372036854775807) end end))(V16))), {'Prelude.Types.Right', V53} end end), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V71 = begin (V64 = begin (V59 = V0), fun (V60) -> begin (V63 = (begin (V61 = V59), fun (V62) -> ('erlang':'put'(V61, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(8, V15)))) end end(V60))), {'Prelude.Types.Right', V63} end end end), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V70 = fun (V69) -> {'Prelude.Types.Right', V58} end), V70 end(V65)) end end end end), V71 end(V55)) end end end end; 0 -> fun (V72) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.TTCError', {'Core.Core.EndOfBuffer', <<<<"Int "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V73) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V73)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Integer'(V74, V75)) end end}, {'Prelude.Show.MkShow', fun (V76) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V76)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Integer'(V77, V78)) end end}}, {'Builtin.MkPair', case V15 of {'Libraries.Utils.Binary.MkBin', V79, V80, V81, V82} -> V80 end, case V15 of {'Libraries.Utils.Binary.MkBin', V83, V84, V85, V86} -> V85 end}))/binary>>}}, V72)) end end), V87 end(V12)) end end end end; _ -> fun (V88) -> {'Prelude.Types.Right', begin (V90 = (V5 - begin (V89 = 127), case ((V89 band 9223372036854775808) =/= 0) of 'true' -> (V89 bor -9223372036854775808); _ -> (V89 band 9223372036854775807) end end)), case ((V90 band 9223372036854775808) =/= 0) of 'true' -> (V90 bor -9223372036854775808); _ -> (V90 band 9223372036854775807) end end} end end), V91 end(V2)) end end end end.
'dn--un--fromBuf_TTC_Double'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V68 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V10)), 8)) of 1 -> begin (V49 = fun (V11) -> begin (V48 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getDouble'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, case V10 of {'Libraries.Utils.Binary.MkBin', V39, V40, V41, V42} -> V39 end, begin (V47 = case V10 of {'Libraries.Utils.Binary.MkBin', V43, V44, V45, V46} -> V44 end), case ((V47 band 9223372036854775808) =/= 0) of 'true' -> (V47 bor -9223372036854775808); _ -> (V47 band 9223372036854775807) end end))(V11))), {'Prelude.Types.Right', V48} end end), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V66 = begin (V59 = begin (V54 = V0), fun (V55) -> begin (V58 = (begin (V56 = V54), fun (V57) -> ('erlang':'put'(V56, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(8, V10)))) end end(V55))), {'Prelude.Types.Right', V58} end end end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V65 = fun (V64) -> {'Prelude.Types.Right', V53} end), V65 end(V60)) end end end end), V66 end(V50)) end end end end; 0 -> fun (V67) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.TTCError', {'Core.Core.EndOfBuffer', <<"Double"/utf8>>}}, V67)) end end), V68 end(V7)) end end end end.
'dn--un--fromBuf_TTC_Char'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Int'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V7 = fun (V6) -> {'Prelude.Types.Right', case V5 of E0 when ((erlang:'is_integer'(E0)) andalso (((E0 >= 0) andalso (E0 =< 55295)) orelse ((E0 >= 57344) andalso (E0 =< 1114111)))) -> E0; _ -> 65533 end} end), V7 end(V2)) end end end end.
'dn--un--fromBuf_TTC_Bool'(V0) -> begin (V1 = ('un--getTag'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V7 = fun (V6) -> case V5 of 0 -> {'Prelude.Types.Right', 0}; 1 -> {'Prelude.Types.Right', 1}; _ -> ('un--corrupt'(<<"Bool"/utf8>>, V6)) end end), V7 end(V2)) end end end end.
'dn--un--fromBuf_TTC_Bits8'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Int'(V0))), ((begin (V20 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V12 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', (V8(V11))} end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V2) -> begin (V3 = V2), begin (V4 = 256), begin (V5 = (V3 rem V4)), case ((V5 * V4) < 0) of 'true' -> (V5 + V4); _ -> V5 end end end end end))))(V1)) end.
'dn--un--fromBuf_TTC_Bits64'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Integer'(V0))), ((begin (V20 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V12 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', (V8(V11))} end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V2) -> begin (V3 = V2), begin (V4 = 18446744073709551616), begin (V5 = (V3 rem V4)), case ((V5 * V4) < 0) of 'true' -> (V5 + V4); _ -> V5 end end end end end))))(V1)) end.
'dn--un--fromBuf_TTC_Bits32'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Integer'(V0))), ((begin (V20 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V12 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', (V8(V11))} end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V2) -> begin (V3 = V2), begin (V4 = 4294967296), begin (V5 = (V3 rem V4)), case ((V5 * V4) < 0) of 'true' -> (V5 + V4); _ -> V5 end end end end end))))(V1)) end.
'dn--un--fromBuf_TTC_Bits16'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Int'(V0))), ((begin (V20 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V12 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', (V8(V11))} end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V2) -> begin (V3 = V2), begin (V4 = 65536), begin (V5 = (V3 rem V4)), case ((V5 * V4) < 0) of 'true' -> (V5 + V4); _ -> V5 end end end end end))))(V1)) end.
'dn--un--fromBuf_TTC_Binary'(V0) -> begin (V1 = ('dn--un--fromBuf_TTC_Int'(V0))), fun (V2) -> begin (V3 = (V1(V2))), case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', V4}; {'Prelude.Types.Right', V5} -> (begin (V115 = begin (V6 = V5), begin (V12 = begin (V7 = V0), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V114 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V16)), V6)) of 1 -> begin (V46 = fun (V17) -> begin (V45 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> V24 end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), begin (V32 = (V29(V30))), (V31(V32)) end end end end end end end}, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V35(V37))), ((V36(V38))(V37)) end end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V40(V41))), (V42(V41)) end end end end}, fun (V43) -> fun (V44) -> V44 end end}, V5))(V17))), {'Prelude.Types.Right', V45} end end), fun (V47) -> begin (V48 = (V46(V47))), case V48 of {'Prelude.Types.Left', V49} -> {'Prelude.Types.Left', V49}; {'Prelude.Types.Right', V50} -> (begin (V112 = case V50 of {'Prelude.Types.Just', V51} -> begin (V93 = fun (V52) -> begin (V92 = (('Idris.Idris2.Erlang.Data.Buffer':'un--copyData'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> V59 end end end, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), begin (V67 = (V64(V65))), (V66(V67)) end end end end end end end}, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V70(V72))), ((V71(V73))(V72)) end end end end end end, fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V75(V76))), (V77(V76)) end end end end}, fun (V78) -> fun (V79) -> V79 end end}, case V16 of {'Libraries.Utils.Binary.MkBin', V80, V81, V82, V83} -> V80 end, (begin (V90 = fun (V88) -> begin (V89 = V88), case ((V89 band 9223372036854775808) =/= 0) of 'true' -> (V89 bor -9223372036854775808); _ -> (V89 band 9223372036854775807) end end end), fun (V91) -> (V90(V91)) end end(case V16 of {'Libraries.Utils.Binary.MkBin', V84, V85, V86, V87} -> V85 end)), V5, V51, 0))(V52))), {'Prelude.Types.Right', V92} end end), fun (V94) -> begin (V95 = (V93(V94))), case V95 of {'Prelude.Types.Left', V96} -> {'Prelude.Types.Left', V96}; {'Prelude.Types.Right', V97} -> (begin (V110 = begin (V103 = begin (V98 = V0), fun (V99) -> begin (V102 = (begin (V100 = V98), fun (V101) -> ('erlang':'put'(V100, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(V6, V16)))) end end(V99))), {'Prelude.Types.Right', V102} end end end), fun (V104) -> begin (V105 = (V103(V104))), case V105 of {'Prelude.Types.Left', V106} -> {'Prelude.Types.Left', V106}; {'Prelude.Types.Right', V107} -> (begin (V109 = fun (V108) -> {'Prelude.Types.Right', {'Libraries.Utils.Binary.MkBin', V51, 0, V6, V6}} end), V109 end(V104)) end end end end), V110 end(V94)) end end end end; {'Prelude.Types.Nothing'} -> fun (V111) -> ('un--corrupt'(<<"Binary"/utf8>>, V111)) end end), V112 end(V47)) end end end end; 0 -> fun (V113) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.TTCError', {'Core.Core.EndOfBuffer', <<"Binary"/utf8>>}}, V113)) end end), V114 end(V13)) end end end end end), V115 end(V2)) end end end end.
'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V0, V1) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}.
'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1) -> begin (V4 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Core.Binary.Prims.dn--un--__mkTTC', V2, V3} -> (V3(V1)) end), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V18 = begin (V11 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Core.Binary.Prims.dn--un--__mkTTC', V9, V10} -> (V10(V1)) end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Builtin.MkPair', V8, V15}} end), V17 end(V12)) end end end end), V18 end(V5)) end end end end.
'dn--un--fromBuf_TTC_(PosMap $a)'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC_(List $a)'(('Idris.Idris2.Builtin':'un--fst'(V0)), V1))), ((begin (V18 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end((begin (V10 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> {'Prelude.Types.Right', (V6(V9))} end end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V3) -> ('Idris.Idris2.Libraries.Data.PosMap':'un--fromList'(('Idris.Idris2.Builtin':'un--snd'(V0)), V3)) end))))(V2)) end.
'dn--un--fromBuf_TTC_(Maybe $a)'(V0, V1) -> begin (V2 = ('un--getTag'(V1))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V18 = case V6 of 0 -> fun (V7) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; 1 -> begin (V10 = case V0 of {'Core.Binary.Prims.dn--un--__mkTTC', V8, V9} -> (V9(V1)) end), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V14}} end), V16 end(V11)) end end end end; _ -> fun (V17) -> ('un--corrupt'(<<"Maybe"/utf8>>, V17)) end end), V18 end(V3)) end end end end.
'dn--un--fromBuf_TTC_(List1 $a)'(V0, V1) -> begin (V4 = case V0 of {'Core.Binary.Prims.dn--un--__mkTTC', V2, V3} -> (V3(V1)) end), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V16 = begin (V9 = ('dn--un--fromBuf_TTC_(List $a)'(V0, V1))), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', {'Data.List1.:::', V8, V13}} end), V15 end(V10)) end end end end), V16 end(V5)) end end end end.
'dn--un--fromBuf_TTC_(List $a)'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC_Int'(V1))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V7 = ('nested--11016-5779--in--un--readElems'(V0, V1, [], ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V6))))), V7 end(V3)) end end end end.
'dn--un--fromBuf_TTC_((Vect $n) $a)'(V0, V1, V2) -> ('nested--11260-6009--in--un--readElems'(V1, V2, V0, {'Data.Vect.Nil'}, V0)).
'dn--un--fromBuf_TTC_((Either $a) $b)'(V0, V1) -> begin (V2 = ('un--getTag'(V1))), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V26 = case V6 of 0 -> begin (V9 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Core.Binary.Prims.dn--un--__mkTTC', V7, V8} -> (V8(V1)) end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V15 = fun (V14) -> {'Prelude.Types.Right', {'Prelude.Types.Left', V13}} end), V15 end(V10)) end end end end; 1 -> begin (V18 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Core.Binary.Prims.dn--un--__mkTTC', V16, V17} -> (V17(V1)) end), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', {'Prelude.Types.Right', V22}} end), V24 end(V19)) end end end end; _ -> fun (V25) -> ('un--corrupt'(<<"Either"/utf8>>, V25)) end end), V26 end(V3)) end end end end.
'dn--un--fromBuf_TTC_((DPair $a) $p)'(V0, V1) -> begin (V4 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Core.Binary.Prims.dn--un--__mkTTC', V2, V3} -> (V3(V1)) end), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V18 = begin (V11 = case (('Idris.Idris2.Builtin':'un--snd'(V0))(V8)) of {'Core.Binary.Prims.dn--un--__mkTTC', V9, V10} -> (V10(V1)) end), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V17 = fun (V16) -> {'Prelude.Types.Right', {'Builtin.DPair.MkDPair', V8, V15}} end), V17 end(V12)) end end end end), V18 end(V5)) end end end end.
'dn--un--__Impl_TTC_String'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_String'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_String'(V2)) end}.
'dn--un--__Impl_TTC_Nat'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Nat'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Nat'(V2)) end}.
'dn--un--__Impl_TTC_Integer'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Integer'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Integer'(V2)) end}.
'dn--un--__Impl_TTC_Int8'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Int8'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Int8'(V2)) end}.
'dn--un--__Impl_TTC_Int64'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Int64'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Int64'(V2)) end}.
'dn--un--__Impl_TTC_Int32'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Int32'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Int32'(V2)) end}.
'dn--un--__Impl_TTC_Int16'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Int16'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Int16'(V2)) end}.
'dn--un--__Impl_TTC_Int'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Int'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Int'(V2)) end}.
'dn--un--__Impl_TTC_Double'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Double'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Double'(V2)) end}.
'dn--un--__Impl_TTC_Char'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Char'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Char'(V2)) end}.
'dn--un--__Impl_TTC_Bool'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Bool'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Bool'(V2)) end}.
'dn--un--__Impl_TTC_Bits8'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Bits8'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Bits8'(V2)) end}.
'dn--un--__Impl_TTC_Bits64'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Bits64'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Bits64'(V2)) end}.
'dn--un--__Impl_TTC_Bits32'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Bits32'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Bits32'(V2)) end}.
'dn--un--__Impl_TTC_Bits16'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Bits16'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Bits16'(V2)) end}.
'dn--un--__Impl_TTC_Binary'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Binary'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_Binary'(V2)) end}.
'dn--un--__Impl_TTC_(|Unit,MkUnit|)'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V3, V4)) end end}.
'dn--un--__Impl_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0) -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2)) end end, fun (V3) -> ('dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V3)) end}.
'dn--un--__Impl_TTC_(PosMap $a)'(V0) -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_(PosMap $a)'(V0, V1, V2)) end end, fun (V3) -> ('dn--un--fromBuf_TTC_(PosMap $a)'(V0, V3)) end}.
'dn--un--__Impl_TTC_(Maybe $a)'(V0) -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_(Maybe $a)'(V0, V1, V2)) end end, fun (V3) -> ('dn--un--fromBuf_TTC_(Maybe $a)'(V0, V3)) end}.
'dn--un--__Impl_TTC_(List1 $a)'(V0) -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_(List1 $a)'(V0, V1, V2)) end end, fun (V3) -> ('dn--un--fromBuf_TTC_(List1 $a)'(V0, V3)) end}.
'dn--un--__Impl_TTC_(List $a)'(V0) -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_(List $a)'(V0, V1, V2)) end end, fun (V3) -> ('dn--un--fromBuf_TTC_(List $a)'(V0, V3)) end}.
'dn--un--__Impl_TTC_((Vect $n) $a)'(V0, V1) -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_((Vect $n) $a)'(V0, V1, V2, V3)) end end, fun (V4) -> ('dn--un--fromBuf_TTC_((Vect $n) $a)'(V0, V1, V4)) end}.
'dn--un--__Impl_TTC_((Either $a) $b)'(V0) -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_((Either $a) $b)'(V0, V1, V2)) end end, fun (V3) -> ('dn--un--fromBuf_TTC_((Either $a) $b)'(V0, V3)) end}.
'dn--un--__Impl_TTC_((DPair $a) $p)'(V0) -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_((DPair $a) $p)'(V0, V1, V2)) end end, fun (V3) -> ('dn--un--fromBuf_TTC_((DPair $a) $p)'(V0, V3)) end}.
'un--toLimbs'(V0) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V0, 0)) of 1 -> []; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V0, -1)) of 1 -> [-1 | []]; 0 -> [begin (V1 = (V0 band 4294967295)), case ((V1 band 9223372036854775808) =/= 0) of 'true' -> (V1 bor -9223372036854775808); _ -> (V1 band 9223372036854775807) end end | ('un--toLimbs'((V0 bsr 32)))] end end.
'un--toBuf'(V0, V1, V2) -> case V0 of {'Core.Binary.Prims.dn--un--__mkTTC', V3, V4} -> ((V3(V1))(V2)) end.
'un--tag'(V0, V1) -> begin (V7 = begin (V2 = V0), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V122 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V11)), 1)) of 1 -> begin (V53 = fun (V12) -> begin (V52 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setBits8'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, fun (V38) -> fun (V39) -> V39 end end}, case V11 of {'Libraries.Utils.Binary.MkBin', V40, V41, V42, V43} -> V40 end, begin (V48 = case V11 of {'Libraries.Utils.Binary.MkBin', V44, V45, V46, V47} -> V45 end), case ((V48 band 9223372036854775808) =/= 0) of 'true' -> (V48 bor -9223372036854775808); _ -> (V48 band 9223372036854775807) end end, begin (V49 = V1), begin (V50 = 256), begin (V51 = (V49 rem V50)), case ((V51 * V50) < 0) of 'true' -> (V51 + V50); _ -> V51 end end end end))(V12))), {'Prelude.Types.Right', V52} end end), fun (V54) -> begin (V55 = (V53(V54))), case V55 of {'Prelude.Types.Left', V56} -> {'Prelude.Types.Left', V56}; {'Prelude.Types.Right', V57} -> (begin (V63 = begin (V58 = V0), fun (V59) -> begin (V62 = (begin (V60 = V58), fun (V61) -> ('erlang':'put'(V60, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(1, V11)))) end end(V59))), {'Prelude.Types.Right', V62} end end end), V63 end(V54)) end end end end; 0 -> begin (V64 = ('un--extendBinary'(1, V11))), fun (V65) -> begin (V66 = (V64(V65))), case V66 of {'Prelude.Types.Left', V67} -> {'Prelude.Types.Left', V67}; {'Prelude.Types.Right', V68} -> (begin (V121 = begin (V110 = fun (V69) -> begin (V109 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setBits8'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V72, V73, V74)) end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> V76 end end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), begin (V84 = (V81(V82))), (V83(V84)) end end end end end end end}, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> begin (V90 = (V87(V89))), ((V88(V90))(V89)) end end end end end end, fun (V91) -> fun (V92) -> fun (V93) -> begin (V94 = (V92(V93))), (V94(V93)) end end end end}, fun (V95) -> fun (V96) -> V96 end end}, case V68 of {'Libraries.Utils.Binary.MkBin', V97, V98, V99, V100} -> V97 end, begin (V105 = case V68 of {'Libraries.Utils.Binary.MkBin', V101, V102, V103, V104} -> V102 end), case ((V105 band 9223372036854775808) =/= 0) of 'true' -> (V105 bor -9223372036854775808); _ -> (V105 band 9223372036854775807) end end, begin (V106 = V1), begin (V107 = 256), begin (V108 = (V106 rem V107)), case ((V108 * V107) < 0) of 'true' -> (V108 + V107); _ -> V108 end end end end))(V69))), {'Prelude.Types.Right', V109} end end), fun (V111) -> begin (V112 = (V110(V111))), case V112 of {'Prelude.Types.Left', V113} -> {'Prelude.Types.Left', V113}; {'Prelude.Types.Right', V114} -> (begin (V120 = begin (V115 = V0), fun (V116) -> begin (V119 = (begin (V117 = V115), fun (V118) -> ('erlang':'put'(V117, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(1, V68)))) end end(V116))), {'Prelude.Types.Right', V119} end end end), V120 end(V111)) end end end end), V121 end(V65)) end end end end end), V122 end(V8)) end end end end.
'un--modTime'(V0) -> begin (V30 = fun (V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fileModifiedTime'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Prelude.Types.Right', V29} end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V38 = fun (V35) -> case V34 of {'Prelude.Types.Right', V36} -> {'Prelude.Types.Right', V36}; {'Prelude.Types.Left', V37} -> {'Prelude.Types.Right', 0} end end), V38 end(V31)) end end end end.
'un--initBinaryS'(V0) -> begin (V30 = fun (V1) -> begin (V29 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Prelude.Types.Right', V29} end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V43 = case V34 of {'Prelude.Types.Just', V35} -> ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Binary.Prims.Bin'}, ('Idris.Idris2.Libraries.Utils.Binary':'un--newBinary'(V35, (begin (V37 = fun (V36) -> V36 end), fun (V38) -> (V37(V38)) end end(V0)))))); {'Prelude.Types.Nothing'} -> fun (V39) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V41 = fun (V40) -> V40 end), fun (V42) -> (V41(V42)) end end(<<"Buffer creation failed"/utf8>>))}, V39)) end end), V43 end(V31)) end end end end.
'un--initBinary'() -> begin (V30 = fun (V0) -> begin (V29 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, begin (V28 = 655360), case ((V28 band 9223372036854775808) =/= 0) of 'true' -> (V28 bor -9223372036854775808); _ -> (V28 band 9223372036854775807) end end))(V0))), {'Prelude.Types.Right', V29} end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V44 = case V34 of {'Prelude.Types.Just', V35} -> ('Idris.Idris2.Core.Core':'un--newRef'({'Core.Binary.Prims.Bin'}, ('Idris.Idris2.Libraries.Utils.Binary':'un--newBinary'(V35, (begin (V38 = fun (V37) -> V37 end), fun (V39) -> (V38(V39)) end end(begin (V36 = 655360), case ((V36 band 9223372036854775808) =/= 0) of 'true' -> (V36 bor -9223372036854775808); _ -> (V36 band 9223372036854775807) end end)))))); {'Prelude.Types.Nothing'} -> fun (V40) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V42 = fun (V41) -> V41 end), fun (V43) -> (V42(V43)) end end(<<"Buffer creation failed"/utf8>>))}, V40)) end end), V44 end(V31)) end end end end.
'un--hashFileWith'(V0, V1) -> ('un--hashFile'(V1)).
'un--hashFile'(V0) -> begin (V30 = fun (V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Prelude.Types.Right', V29} end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V49 = case V34 of {'Prelude.Types.Right', V35} -> begin (V36 = ('erlang':'apply'('crypto', 'hash', ['sha256' | [V35 | []]]))), begin (V40 = ('erlang':'apply'('binary', ('erlang':'binary_to_atom'((begin (V38 = fun (V37) -> V37 end), fun (V39) -> (V38(V39)) end end(<<"decode_unsigned"/utf8>>)), 'utf8')), [V36 | []]))), fun (V41) -> case ('erlang':'apply'('io_lib', 'format', [(begin (V43 = fun (V42) -> V42 end), fun (V44) -> (V43(V44)) end end(<<"~64.16.0b"/utf8>>)) | [[V40 | []] | []]])) of E0 -> (fun (V45) -> {'Prelude.Types.Right', {'Prelude.Types.Just', V45}} end((fun (V46) -> ('unicode':'characters_to_binary'(V46)) end(E0)))) end end end end; {'Prelude.Types.Left', V47} -> fun (V48) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end end), V49 end(V31)) end end end end.
'un--getTag'(V0) -> begin (V6 = begin (V1 = V0), fun (V2) -> begin (V5 = (begin (V3 = V1), fun (V4) -> ('erlang':'get'(V3)) end end(V2))), {'Prelude.Types.Right', V5} end end end), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V68 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V10)), 1)) of 1 -> begin (V49 = fun (V11) -> begin (V48 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getBits8'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, case V10 of {'Libraries.Utils.Binary.MkBin', V39, V40, V41, V42} -> V39 end, begin (V47 = case V10 of {'Libraries.Utils.Binary.MkBin', V43, V44, V45, V46} -> V44 end), case ((V47 band 9223372036854775808) =/= 0) of 'true' -> (V47 bor -9223372036854775808); _ -> (V47 band 9223372036854775807) end end))(V11))), {'Prelude.Types.Right', V48} end end), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V66 = begin (V59 = begin (V54 = V0), fun (V55) -> begin (V58 = (begin (V56 = V54), fun (V57) -> ('erlang':'put'(V56, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(1, V10)))) end end(V55))), {'Prelude.Types.Right', V58} end end end), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V65 = fun (V64) -> {'Prelude.Types.Right', V53} end), V65 end(V60)) end end end end), V66 end(V50)) end end end end; 0 -> fun (V67) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.TTCError', {'Core.Core.EndOfBuffer', <<"Bits8"/utf8>>}}, V67)) end end), V68 end(V7)) end end end end.
'un--fromLimbs'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> (V1 + (('un--fromLimbs'(V2)) bsl 32)) end(E0, E1)) end.
'un--fromBuf'(V0, V1) -> case V0 of {'Core.Binary.Prims.dn--un--__mkTTC', V2, V3} -> (V3(V1)) end.
'un--extendBinary'(V0, V1) -> case V1 of {'Libraries.Utils.Binary.MkBin', V2, V3, V4, V5} -> begin (V6 = (V4 * 2)), begin (V7 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'((V6 - V3), V0)) of 1 -> (V6 + V0); 0 -> V6 end), begin (V38 = fun (V8) -> begin (V37 = (('Idris.Idris2.Erlang.Data.Buffer':'un--resizeBuffer'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V2, begin (V36 = V7), case ((V36 band 9223372036854775808) =/= 0) of 'true' -> (V36 bor -9223372036854775808); _ -> (V36 band 9223372036854775807) end end))(V8))), {'Prelude.Types.Right', V37} end end), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V48 = fun (V43) -> case V42 of {'Prelude.Types.Just', V44} -> {'Prelude.Types.Right', {'Libraries.Utils.Binary.MkBin', V44, V3, V7, V5}}; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', (begin (V46 = fun (V45) -> V45 end), fun (V47) -> (V46(V47)) end end(<<"Buffer expansion failed"/utf8>>))}, V43)) end end), V48 end(V39)) end end end end end end end.
'un--corrupt'(V0, V1) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.TTCError', {'Core.Core.Corrupt', V0}}, V1)).
'un--Wasteful'() -> {'Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_WastefulInt'(V0, V1)) end end, fun (V2) -> ('dn--un--fromBuf_TTC_WastefulInt'(V2)) end}.
