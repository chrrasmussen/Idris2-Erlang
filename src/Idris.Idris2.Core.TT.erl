-module('Idris.Idris2.Core.TT').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--weakenNs-13248'/3,
  'case--insertNVarNames-12645'/4,
  'case--removeVar-12404'/3,
  'case--insertNVar-12196'/3,
  'case--{Default implementation of weakenNs:0}-10775'/4,
  'nested--16262-11977--in--un--showTot'/3,
  'nested--21715-16869--in--un--showApp'/5,
  'nested--13865-9716--in--un--go'/3,
  'nested--9165-5101--in--un--go'/3,
  'nested--17942-13466--in--un--getFA'/3,
  'nested--21363-16554--in--un--addRefsArgs'/9,
  'nested--21214-16422--in--un--addMetaArgs'/8,
  'dn--un--weaken_Weaken_Var'/1,
  'dn--un--weaken_Weaken_Term'/1,
  'dn--un--weakenNs_Weaken_Var'/2,
  'dn--un--weakenNs_Weaken_Term'/2,
  'dn--un--trimNS_StripNamespace_(Term $vars)'/2,
  'dn--un--traverse_Traversable_WhyErased'/3,
  'dn--un--traverse_Traversable_PiInfo'/3,
  'dn--un--traverse_Traversable_Binder'/3,
  'dn--un--toList_Foldable_WhyErased'/1,
  'dn--un--toList_Foldable_PiInfo'/1,
  'dn--un--toList_Foldable_Binder'/1,
  'dn--un--show_Show_Visibility'/1,
  'dn--un--show_Show_Totality'/1,
  'dn--un--show_Show_TotalReq'/1,
  'dn--un--show_Show_Terminating'/1,
  'dn--un--show_Show_RawKindedName'/1,
  'dn--un--show_Show_PrimType'/1,
  'dn--un--show_Show_PartialReason'/1,
  'dn--un--show_Show_NameType'/1,
  'dn--un--show_Show_LazyReason'/1,
  'dn--un--show_Show_KindedName'/1,
  'dn--un--show_Show_Covering'/1,
  'dn--un--show_Show_Constant'/1,
  'dn--un--show_Show_(Var $ns)'/1,
  'dn--un--show_Show_(Term $vars)'/2,
  'dn--un--show_Show_(PrimFn $arity)'/1,
  'dn--un--show_Show_(PiInfo $t)'/2,
  'dn--un--showPrec_Show_Visibility'/2,
  'dn--un--showPrec_Show_Totality'/2,
  'dn--un--showPrec_Show_TotalReq'/2,
  'dn--un--showPrec_Show_Terminating'/2,
  'dn--un--showPrec_Show_RawKindedName'/2,
  'dn--un--showPrec_Show_PrimType'/2,
  'dn--un--showPrec_Show_PartialReason'/2,
  'dn--un--showPrec_Show_NameType'/2,
  'dn--un--showPrec_Show_LazyReason'/2,
  'dn--un--showPrec_Show_KindedName'/2,
  'dn--un--showPrec_Show_Covering'/2,
  'dn--un--showPrec_Show_Constant'/2,
  'dn--un--showPrec_Show_(Var $ns)'/2,
  'dn--un--showPrec_Show_(Term $vars)'/3,
  'dn--un--showPrec_Show_(PrimFn $arity)'/2,
  'dn--un--showPrec_Show_(PiInfo $t)'/3,
  'dn--un--restoreNS_StripNamespace_(Term $vars)'/2,
  'dn--un--pretty_Pretty_Void_Visibility'/1,
  'dn--un--pretty_Pretty_Void_Totality'/1,
  'dn--un--pretty_Pretty_Void_Terminating'/1,
  'dn--un--pretty_Pretty_Void_PartialReason'/1,
  'dn--un--pretty_Pretty_Void_Covering'/1,
  'dn--un--pretty_Pretty_IdrisSyntax_PrimType'/1,
  'dn--un--pretty_Pretty_IdrisSyntax_Constant'/1,
  'dn--un--prettyPrec_Pretty_Void_Visibility'/2,
  'dn--un--prettyPrec_Pretty_Void_Totality'/2,
  'dn--un--prettyPrec_Pretty_Void_Terminating'/2,
  'dn--un--prettyPrec_Pretty_Void_PartialReason'/2,
  'dn--un--prettyPrec_Pretty_Void_Covering'/2,
  'dn--un--prettyPrec_Pretty_IdrisSyntax_Constant'/2,
  'dn--un--null_Foldable_WhyErased'/1,
  'dn--un--null_Foldable_PiInfo'/1,
  'dn--un--null_Foldable_Binder'/1,
  'dn--un--min_Ord_Visibility'/2,
  'dn--un--min_Ord_TotalReq'/2,
  'dn--un--min_Ord_Precision'/2,
  'dn--un--max_Ord_Visibility'/2,
  'dn--un--max_Ord_TotalReq'/2,
  'dn--un--max_Ord_Precision'/2,
  'dn--un--map_Functor_WhyErased'/2,
  'dn--un--map_Functor_PiInfo'/2,
  'dn--un--map_Functor_Binder'/2,
  'dn--un--foldr_Foldable_WhyErased'/3,
  'dn--un--foldr_Foldable_PiInfo'/3,
  'dn--un--foldr_Foldable_Binder'/3,
  'dn--un--foldl_Foldable_WhyErased'/3,
  'dn--un--foldl_Foldable_PiInfo'/3,
  'dn--un--foldl_Foldable_Binder'/3,
  'dn--un--foldlM_Foldable_WhyErased'/4,
  'dn--un--foldlM_Foldable_PiInfo'/4,
  'dn--un--foldlM_Foldable_Binder'/4,
  'dn--un--foldMap_Foldable_WhyErased'/3,
  'dn--un--foldMap_Foldable_PiInfo'/3,
  'dn--un--foldMap_Foldable_Binder'/3,
  'dn--un--compare_Ord_Visibility'/2,
  'dn--un--compare_Ord_TotalReq'/2,
  'dn--un--compare_Ord_Precision'/2,
  'dn--un--__Impl_Weaken_Var'/0,
  'dn--un--__Impl_Weaken_Term'/0,
  'dn--un--__Impl_Traversable_WhyErased'/0,
  'dn--un--__Impl_Traversable_PiInfo'/0,
  'dn--un--__Impl_Traversable_Binder'/0,
  'dn--un--__Impl_StripNamespace_(Term $vars)'/0,
  'dn--un--__Impl_Show_Visibility'/0,
  'dn--un--__Impl_Show_Totality'/0,
  'dn--un--__Impl_Show_TotalReq'/0,
  'dn--un--__Impl_Show_Terminating'/0,
  'dn--un--__Impl_Show_PrimType'/0,
  'dn--un--__Impl_Show_PartialReason'/0,
  'dn--un--__Impl_Show_NameType'/0,
  'dn--un--__Impl_Show_LazyReason'/0,
  'dn--un--__Impl_Show_KindedName'/0,
  'dn--un--__Impl_Show_Covering'/0,
  'dn--un--__Impl_Show_Constant'/0,
  'dn--un--__Impl_Show_(Var $ns)'/0,
  'dn--un--__Impl_Show_(Term $vars)'/1,
  'dn--un--__Impl_Show_(PrimFn $arity)'/0,
  'dn--un--__Impl_Show_(PiInfo $t)'/1,
  'dn--un--__Impl_Pretty_Void_Visibility'/0,
  'dn--un--__Impl_Pretty_Void_Totality'/0,
  'dn--un--__Impl_Pretty_Void_Terminating'/0,
  'dn--un--__Impl_Pretty_Void_PartialReason'/0,
  'dn--un--__Impl_Pretty_Void_Covering'/0,
  'dn--un--__Impl_Pretty_IdrisSyntax_Constant'/0,
  'dn--un--__Impl_Ord_Visibility'/0,
  'dn--un--__Impl_Ord_TotalReq'/0,
  'dn--un--__Impl_Ord_Precision'/0,
  'dn--un--__Impl_Functor_WhyErased'/4,
  'dn--un--__Impl_Functor_PiInfo'/4,
  'dn--un--__Impl_Functor_Binder'/4,
  'dn--un--__Impl_Foldable_WhyErased'/0,
  'dn--un--__Impl_Foldable_PiInfo'/0,
  'dn--un--__Impl_Foldable_Binder'/0,
  'dn--un--__Impl_Eq_Visibility'/0,
  'dn--un--__Impl_Eq_TotalReq'/0,
  'dn--un--__Impl_Eq_PrimType'/0,
  'dn--un--__Impl_Eq_Precision'/0,
  'dn--un--__Impl_Eq_LazyReason'/0,
  'dn--un--__Impl_Eq_Constant'/0,
  'dn--un--__Impl_Eq_(WhyErased $a)'/1,
  'dn--un--__Impl_Eq_(Term $vars)'/0,
  'dn--un--__Impl_Eq_(PiInfo $t)'/1,
  'dn--un--__Impl_Eq_(Binder $a)'/1,
  'dn--un-->_Ord_Visibility'/2,
  'dn--un-->_Ord_TotalReq'/2,
  'dn--un-->_Ord_Precision'/2,
  'dn--un-->=_Ord_Visibility'/2,
  'dn--un-->=_Ord_TotalReq'/2,
  'dn--un-->=_Ord_Precision'/2,
  'dn--un--==_Eq_Visibility'/2,
  'dn--un--==_Eq_TotalReq'/2,
  'dn--un--==_Eq_PrimType'/2,
  'dn--un--==_Eq_Precision'/2,
  'dn--un--==_Eq_LazyReason'/2,
  'dn--un--==_Eq_Constant'/2,
  'dn--un--==_Eq_(WhyErased $a)'/3,
  'dn--un--==_Eq_(Term $vars)'/2,
  'dn--un--==_Eq_(PiInfo $t)'/3,
  'dn--un--==_Eq_(Binder $a)'/3,
  'dn--un--<_Ord_Visibility'/2,
  'dn--un--<_Ord_TotalReq'/2,
  'dn--un--<_Ord_Precision'/2,
  'dn--un--<=_Ord_Visibility'/2,
  'dn--un--<=_Ord_TotalReq'/2,
  'dn--un--<=_Ord_Precision'/2,
  'dn--un--/=_Eq_Visibility'/2,
  'dn--un--/=_Eq_TotalReq'/2,
  'dn--un--/=_Eq_PrimType'/2,
  'dn--un--/=_Eq_Precision'/2,
  'dn--un--/=_Eq_LazyReason'/2,
  'dn--un--/=_Eq_Constant'/2,
  'dn--un--/=_Eq_(WhyErased $a)'/3,
  'dn--un--/=_Eq_(Term $vars)'/2,
  'dn--un--/=_Eq_(PiInfo $t)'/3,
  'dn--un--/=_Eq_(Binder $a)'/3,
  'un--withPiInfo'/3,
  'un--weakenVar'/2,
  'un--weakenNs'/3,
  'un--weakenNVar'/2,
  'un--weaken'/2,
  'un--varIdx'/1,
  'un--varExtend'/1,
  'un--varEmbedSub'/2,
  'un--unchecked'/0,
  'un--trimNS'/3,
  'un--substName'/3,
  'un--subInclude'/2,
  'un--subExtend'/2,
  'un--subElem'/2,
  'un--sizedView'/1,
  'un--shrinkVar'/2,
  'un--shrinkTerm'/2,
  'un--shrinkPi'/2,
  'un--shrinkBinder'/2,
  'un--setType'/2,
  'un--setMultiplicity'/2,
  'un--sameVar'/2,
  'un--restoreNS'/3,
  'un--resolveRef'/5,
  'un--resolveNames'/2,
  'un--renameVars'/2,
  'un--renameTop'/2,
  'un--removeVar'/2,
  'un--refsToLocals'/2,
  'un--refToLocal'/3,
  'un--primTypeTag'/1,
  'un--primTypeEq'/2,
  'un--prettyOp'/2,
  'un--precision'/1,
  'un--piInfo'/1,
  'un--notCovering'/0,
  'un--nameAt'/2,
  'un--multiplicity'/1,
  'un--mkVar'/1,
  'un--mkLocals'/3,
  'un--linFnType'/4,
  'un--isVar'/2,
  'un--isTotal'/0,
  'un--isPrimType'/1,
  'un--isNVar'/2,
  'un--isLet'/1,
  'un--isImplicit'/1,
  'un--isErased'/1,
  'un--isConstantType'/1,
  'un--isCon'/1,
  'un--intKind'/1,
  'un--insertVarNames'/3,
  'un--insertVar'/2,
  'un--insertNames'/3,
  'un--insertNVarNames'/3,
  'un--insertNVar'/2,
  'un--getRefs'/2,
  'un--getMetas'/1,
  'un--getLoc'/1,
  'un--getFnArgs'/1,
  'un--getFn'/1,
  'un--getArgs'/1,
  'un--funKindedName'/1,
  'un--forgetDef'/1,
  'un--fnType'/4,
  'un--eqWhyErased'/2,
  'un--eqTerm'/2,
  'un--eqPiInfoBy'/3,
  'un--eqBinderBy'/3,
  'un--embedSub'/2,
  'un--embed'/1,
  'un--dropVar'/2,
  'un--dropLater'/1,
  'un--dropFirst'/1,
  'un--defaultKindedName'/1,
  'un--constantEq'/2,
  'un--compatible'/2,
  'un--binderType'/1,
  'un--binderLoc'/1,
  'un--areVarsCompatible'/2,
  'un--applyWithFC'/2,
  'un--apply'/3,
  'un--addVars'/3,
  'un--addRefs'/4,
  'un--addMetas'/3,
  'un--Raw'/0,
  'un--ClosedTerm'/0
]).
'case--weakenNs-13248'(V0, V1, V2) -> begin (V3 = V1), case V3 of 0 -> case V2 of {'Core.TT.SizedView.Z'} -> V0; _ -> case V2 of {'Core.TT.SizedView.S', V4} -> ('dn--un--weaken_Weaken_Var'(('dn--un--weakenNs_Weaken_Var'(V4, V0)))) end end; _ -> case V2 of {'Core.TT.SizedView.S', V5} -> ('dn--un--weaken_Weaken_Var'(('dn--un--weakenNs_Weaken_Var'(V5, V0)))) end end end.
'case--insertNVarNames-12645'(V0, V1, V2, V3) -> begin (V4 = V2), case V4 of 0 -> case V3 of {'Core.TT.SizedView.Z'} -> ('un--weakenNVar'(V1, V0)); _ -> case V3 of {'Core.TT.SizedView.S', V5} -> begin (V6 = V0), case V6 of 0 -> 0; _ -> begin (V7 = (V6 - 1)), ('Idris.Idris2.Core.TT.NVar':'un--later'(('un--insertNVarNames'(V5, V1, V7)))) end end end end end; _ -> case V3 of {'Core.TT.SizedView.S', V8} -> begin (V9 = V0), case V9 of 0 -> 0; _ -> begin (V10 = (V9 - 1)), ('Idris.Idris2.Core.TT.NVar':'un--later'(('un--insertNVarNames'(V8, V1, V10)))) end end end end end end.
'case--removeVar-12404'(V0, V1, V2) -> begin (V3 = V1), case V3 of 0 -> case V2 of {'Core.TT.SizedView.Z'} -> begin (V4 = V0), case V4 of 0 -> {'Prelude.Types.Nothing'}; _ -> begin (V5 = (V4 - 1)), {'Prelude.Types.Just', V5} end end end; _ -> case V2 of {'Core.TT.SizedView.S', V6} -> begin (V7 = V0), case V7 of 0 -> {'Prelude.Types.Just', 0}; _ -> begin (V8 = (V7 - 1)), ((begin (V14 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V12, V13)) end end end end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V9) -> ('Idris.Idris2.Core.TT.Var':'un--later'(V9)) end))(('un--removeVar'(V6, V8)))) end end end end end; _ -> case V2 of {'Core.TT.SizedView.S', V17} -> begin (V18 = V0), case V18 of 0 -> {'Prelude.Types.Just', 0}; _ -> begin (V19 = (V18 - 1)), ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V20) -> ('Idris.Idris2.Core.TT.Var':'un--later'(V20)) end))(('un--removeVar'(V17, V19)))) end end end end end end.
'case--insertNVar-12196'(V0, V1, V2) -> begin (V3 = V1), case V3 of 0 -> case V2 of {'Core.TT.SizedView.Z'} -> ('Idris.Idris2.Core.TT.NVar':'un--later'(V0)); _ -> case V2 of {'Core.TT.SizedView.S', V4} -> begin (V5 = V0), case V5 of 0 -> 0; _ -> begin (V6 = (V5 - 1)), ('Idris.Idris2.Core.TT.NVar':'un--later'(('un--insertNVar'(V4, V6)))) end end end end end; _ -> case V2 of {'Core.TT.SizedView.S', V7} -> begin (V8 = V0), case V8 of 0 -> 0; _ -> begin (V9 = (V8 - 1)), ('Idris.Idris2.Core.TT.NVar':'un--later'(('un--insertNVar'(V7, V9)))) end end end end end end.
'case--{Default implementation of weakenNs:0}-10775'(V0, V1, V2, V3) -> begin (V4 = V1), case V4 of 0 -> case V3 of {'Core.TT.SizedView.Z'} -> V0; _ -> case V3 of {'Core.TT.SizedView.S', V5} -> case V2 of {'Core.TT.dn--un--__mkWeaken', V6, V7} -> (((V6('erased'))('erased'))(case V2 of {'Core.TT.dn--un--__mkWeaken', V8, V9} -> ((((V9('erased'))('erased'))(V5))(V0)) end)) end end end; _ -> case V3 of {'Core.TT.SizedView.S', V10} -> case V2 of {'Core.TT.dn--un--__mkWeaken', V11, V12} -> (((V11('erased'))('erased'))(case V2 of {'Core.TT.dn--un--__mkWeaken', V13, V14} -> ((((V14('erased'))('erased'))(V10))(V0)) end)) end end end end.
'nested--16262-11977--in--un--showTot'(V0, V1, V2) -> case V1 of {'Core.TT.IsTerminating'} -> case V2 of {'Core.TT.IsCovering'} -> <<"total"/utf8>>; _ -> ('dn--un--show_Show_Covering'(V2)) end; _ -> case V2 of {'Core.TT.IsCovering'} -> ('dn--un--show_Show_Terminating'(V1)); _ -> <<('dn--un--show_Show_Covering'(V2))/binary, <<<<"; "/utf8>>/binary, ('dn--un--show_Show_Terminating'(V1))/binary>>/binary>> end end.
'nested--21715-16869--in--un--showApp'(V0, V1, V2, V3, V4) -> case V3 of {'Core.TT.Local', V5, V6, V7} -> case V4 of [] -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('un--nameAt'(V2, V7))))/binary, <<<<"["/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7))/binary, <<"]"/utf8>>/binary>>/binary>>/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('dn--un--show_Show_(Term $vars)'(V2, V8)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.Ref', V16, V17, V18} -> case V4 of [] -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> ('dn--un--show_Show_(Term $vars)'(V2, V19)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.Meta', V27, V28, V29, V30} -> case V4 of [] -> <<<<"?"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V28))/binary, <<<<"_"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V31) -> ('dn--un--show_Show_(Term $vars)'(V2, V31)) end, fun (V32) -> fun (V33) -> ('dn--un--showPrec_Show_(Term $vars)'(V2, V32, V33)) end end}, V30))/binary>>/binary>>/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V39 = fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V37, V38)) end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end(fun (V34) -> ('dn--un--show_Show_(Term $vars)'(V2, V34)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.Bind', V42, V43, V44, V45} -> case V44 of {'Core.TT.Lam', V46, V47, V48, V49} -> case V4 of [] -> <<<<"\x{5c}"/utf8>>/binary, <<('un--withPiInfo'({'Prelude.Show.MkShow', fun (V50) -> ('dn--un--show_Show_(Term $vars)'(V2, V50)) end, fun (V51) -> fun (V52) -> ('dn--un--showPrec_Show_(Term $vars)'(V2, V51, V52)) end end}, V48, <<('Idris.Idris2.Algebra':'un--showCount'(V47))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43))/binary, <<<<" : "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'(V2, V49))/binary>>/binary>>/binary>>))/binary, <<<<" => "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'([V43 | V2], V45))/binary>>/binary>>/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V58 = fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V56, V57)) end end end end), fun (V59) -> fun (V60) -> ((((V58('erased'))('erased'))(V59))(V60)) end end end(fun (V53) -> ('dn--un--show_Show_(Term $vars)'(V2, V53)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.Let', V61, V62, V63, V64} -> case V4 of [] -> <<<<"let "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V62))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43))/binary, <<<<" : "/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V64))/binary, <<<<" = "/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V63))/binary, <<<<" in "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'([V43 | V2], V45))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V65) -> ('dn--un--show_Show_(Term $vars)'(V2, V65)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.Pi', V73, V74, V75, V76} -> case V4 of [] -> <<('un--withPiInfo'({'Prelude.Show.MkShow', fun (V77) -> ('dn--un--show_Show_(Term $vars)'(V2, V77)) end, fun (V78) -> fun (V79) -> ('dn--un--showPrec_Show_(Term $vars)'(V2, V78, V79)) end end}, V75, <<('Idris.Idris2.Algebra':'un--showCount'(V74))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43))/binary, <<<<" : "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'(V2, V76))/binary>>/binary>>/binary>>))/binary, <<<<" -> "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'([V43 | V2], V45))/binary>>/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V85 = fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V83, V84)) end end end end), fun (V86) -> fun (V87) -> ((((V85('erased'))('erased'))(V86))(V87)) end end end(fun (V80) -> ('dn--un--show_Show_(Term $vars)'(V2, V80)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.PVar', V88, V89, V90, V91} -> case V4 of [] -> <<('un--withPiInfo'({'Prelude.Show.MkShow', fun (V92) -> ('dn--un--show_Show_(Term $vars)'(V2, V92)) end, fun (V93) -> fun (V94) -> ('dn--un--showPrec_Show_(Term $vars)'(V2, V93, V94)) end end}, V90, <<<<"pat "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V89))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43))/binary, <<<<" : "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'(V2, V91))/binary>>/binary>>/binary>>/binary>>))/binary, <<<<" => "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'([V43 | V2], V45))/binary>>/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V100 = fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V98, V99)) end end end end), fun (V101) -> fun (V102) -> ((((V100('erased'))('erased'))(V101))(V102)) end end end(fun (V95) -> ('dn--un--show_Show_(Term $vars)'(V2, V95)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.PLet', V103, V104, V105, V106} -> case V4 of [] -> <<<<"plet "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V104))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43))/binary, <<<<" : "/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V106))/binary, <<<<" = "/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V105))/binary, <<<<" in "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'([V43 | V2], V45))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V112 = fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V110, V111)) end end end end), fun (V113) -> fun (V114) -> ((((V112('erased'))('erased'))(V113))(V114)) end end end(fun (V107) -> ('dn--un--show_Show_(Term $vars)'(V2, V107)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.PVTy', V115, V116, V117} -> case V4 of [] -> <<<<"pty "/utf8>>/binary, <<('Idris.Idris2.Algebra':'un--showCount'(V116))/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43))/binary, <<<<" : "/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V117))/binary, <<<<" => "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'([V43 | V2], V45))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V123 = fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V121, V122)) end end end end), fun (V124) -> fun (V125) -> ((((V123('erased'))('erased'))(V124))(V125)) end end end(fun (V118) -> ('dn--un--show_Show_(Term $vars)'(V2, V118)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V131 = fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V129, V130)) end end end end), fun (V132) -> fun (V133) -> ((((V131('erased'))('erased'))(V132))(V133)) end end end(fun (V126) -> ('dn--un--show_Show_(Term $vars)'(V2, V126)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.App', V134, V135, V136} -> case V4 of [] -> <<"[can\x{27}t happen]"/utf8>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V142 = fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V140, V141)) end end end end), fun (V143) -> fun (V144) -> ((((V142('erased'))('erased'))(V143))(V144)) end end end(fun (V137) -> ('dn--un--show_Show_(Term $vars)'(V2, V137)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.As', V145, V146, V147, V148} -> case V4 of [] -> <<('dn--un--show_Show_(Term $vars)'(V2, V147))/binary, <<<<"@"/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'(V2, V148))/binary>>/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V154 = fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V152, V153)) end end end end), fun (V155) -> fun (V156) -> ((((V154('erased'))('erased'))(V155))(V156)) end end end(fun (V149) -> ('dn--un--show_Show_(Term $vars)'(V2, V149)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.TDelayed', V157, V158, V159} -> case V4 of [] -> <<<<"%Delayed "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'(V2, V159))/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V165 = fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V163, V164)) end end end end), fun (V166) -> fun (V167) -> ((((V165('erased'))('erased'))(V166))(V167)) end end end(fun (V160) -> ('dn--un--show_Show_(Term $vars)'(V2, V160)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.TDelay', V168, V169, V170, V171} -> case V4 of [] -> <<<<"%Delay "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'(V2, V171))/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V177 = fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V175, V176)) end end end end), fun (V178) -> fun (V179) -> ((((V177('erased'))('erased'))(V178))(V179)) end end end(fun (V172) -> ('dn--un--show_Show_(Term $vars)'(V2, V172)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.TForce', V180, V181, V182} -> case V4 of [] -> <<<<"%Force "/utf8>>/binary, ('dn--un--show_Show_(Term $vars)'(V2, V182))/binary>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V188 = fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V186, V187)) end end end end), fun (V189) -> fun (V190) -> ((((V188('erased'))('erased'))(V189))(V190)) end end end(fun (V183) -> ('dn--un--show_Show_(Term $vars)'(V2, V183)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.PrimVal', V191, V192} -> case V4 of [] -> ('dn--un--show_Show_Constant'(V192)); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V198 = fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V196, V197)) end end end end), fun (V199) -> fun (V200) -> ((((V198('erased'))('erased'))(V199))(V200)) end end end(fun (V193) -> ('dn--un--show_Show_(Term $vars)'(V2, V193)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; {'Core.TT.Erased', V201, V202} -> case V202 of {'Core.TT.Dotted', V203} -> case V4 of [] -> <<<<".("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V203))/binary, <<")"/utf8>>/binary>>/binary>>; _ -> case V4 of [] -> <<"[__]"/utf8>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V209 = fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V207, V208)) end end end end), fun (V210) -> fun (V211) -> ((((V209('erased'))('erased'))(V210))(V211)) end end end(fun (V204) -> ('dn--un--show_Show_(Term $vars)'(V2, V204)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end end; _ -> case V4 of [] -> <<"[__]"/utf8>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V217 = fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V215, V216)) end end end end), fun (V218) -> fun (V219) -> ((((V217('erased'))('erased'))(V218))(V219)) end end end(fun (V212) -> ('dn--un--show_Show_(Term $vars)'(V2, V212)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end end; {'Core.TT.TType', V220, V221} -> case V4 of [] -> <<"Type"/utf8>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V227 = fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V225, V226)) end end end end), fun (V228) -> fun (V229) -> ((((V227('erased'))('erased'))(V228))(V229)) end end end(fun (V222) -> ('dn--un--show_Show_(Term $vars)'(V2, V222)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> <<<<"("/utf8>>/binary, <<('dn--un--show_Show_(Term $vars)'(V2, V3))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ((begin (V235 = fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V233, V234)) end end end end), fun (V236) -> fun (V237) -> ((((V235('erased'))('erased'))(V236))(V237)) end end end(fun (V230) -> ('dn--un--show_Show_(Term $vars)'(V2, V230)) end))(V4))))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>> end end.
'nested--13865-9716--in--un--go'(V0, V1, V2) -> case V1 of {'Core.TT.Lam', V3, V4, V5, V6} -> case V2 of {'Core.TT.Lam', V7, V8, V9, V10} -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V4, V8)) of 1 -> case ('un--eqPiInfoBy'(V0, V5, V9)) of 1 -> ((V0(V6))(V10)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Core.TT.Let', V11, V12, V13, V14} -> case V2 of {'Core.TT.Let', V15, V16, V17, V18} -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V12, V16)) of 1 -> case ((V0(V13))(V17)) of 1 -> ((V0(V14))(V18)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Core.TT.Pi', V19, V20, V21, V22} -> case V2 of {'Core.TT.Pi', V23, V24, V25, V26} -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V24)) of 1 -> case ('un--eqPiInfoBy'(V0, V21, V25)) of 1 -> ((V0(V22))(V26)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Core.TT.PVar', V27, V28, V29, V30} -> case V2 of {'Core.TT.PVar', V31, V32, V33, V34} -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V28, V32)) of 1 -> case ('un--eqPiInfoBy'(V0, V29, V33)) of 1 -> ((V0(V30))(V34)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Core.TT.PLet', V35, V36, V37, V38} -> case V2 of {'Core.TT.PLet', V39, V40, V41, V42} -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V36, V40)) of 1 -> case ((V0(V37))(V41)) of 1 -> ((V0(V38))(V42)); 0 -> 0 end; 0 -> 0 end; _ -> 0 end; {'Core.TT.PVTy', V43, V44, V45} -> case V2 of {'Core.TT.PVTy', V46, V47, V48} -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V44, V47)) of 1 -> ((V0(V45))(V48)); 0 -> 0 end; _ -> 0 end; _ -> 0 end.
'nested--9165-5101--in--un--go'(V0, V1, V2) -> case V1 of {'Core.TT.Implicit'} -> case V2 of {'Core.TT.Implicit'} -> 1; _ -> 0 end; {'Core.TT.Explicit'} -> case V2 of {'Core.TT.Explicit'} -> 1; _ -> 0 end; {'Core.TT.AutoImplicit'} -> case V2 of {'Core.TT.AutoImplicit'} -> 1; _ -> 0 end; {'Core.TT.DefImplicit', V3} -> case V2 of {'Core.TT.DefImplicit', V4} -> ((V0(V3))(V4)); _ -> 0 end; _ -> 0 end.
'nested--17942-13466--in--un--getFA'(V0, V1, V2) -> case V2 of {'Core.TT.App', V3, V4, V5} -> ('nested--17942-13466--in--un--getFA'(V0, [V5 | V1], V4)); _ -> {'Builtin.MkPair', V2, V1} end.
'nested--21363-16554--in--un--addRefsArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> V7; [E0 | E1] -> (fun (V9, V10) -> ('nested--21363-16554--in--un--addRefsArgs'(V0, V1, V2, V3, V4, V5, V6, ('un--addRefs'(V6, V5, V7, V9)), V10)) end(E0, E1)) end.
'nested--21214-16422--in--un--addMetaArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> V6; [E0 | E1] -> (fun (V8, V9) -> ('nested--21214-16422--in--un--addMetaArgs'(V0, V1, V2, V3, V4, V5, ('un--addMetas'(V5, V6, V8)), V9)) end(E0, E1)) end.
'dn--un--weaken_Weaken_Var'(V0) -> ('Idris.Idris2.Core.TT.Var':'un--later'(V0)).
'dn--un--weaken_Weaken_Term'(V0) -> ('dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()))), V0)).
'dn--un--weakenNs_Weaken_Var'(V0, V1) -> ('case--weakenNs-13248'(V1, V0, ('un--sizedView'(V0)))).
'dn--un--weakenNs_Weaken_Term'(V0, V1) -> ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)).
'dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V1) -> case V1 of {'Core.TT.Ref', V2, V3, V4} -> case V4 of {'Core.Name.NS', V5, V6} -> begin (V7 = {'Core.TT.Ref', V2, V3, {'Core.Name.NS', V5, V6}}), case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V0, V5)) of 1 -> {'Core.TT.Ref', V2, V3, {'Core.Name.NS', [], V6}}; 0 -> V7 end end; _ -> V1 end; {'Core.TT.Meta', V8, V9, V10, V11} -> {'Core.TT.Meta', V8, V9, V10, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V12)) end))(V11))}; {'Core.TT.Bind', V20, V21, V22, V23} -> {'Core.TT.Bind', V20, V21, ('dn--un--map_Functor_Binder'(fun (V24) -> ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V24)) end, V22)), ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V23))}; {'Core.TT.App', V25, V26, V27} -> {'Core.TT.App', V25, ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V26)), ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V27))}; {'Core.TT.As', V28, V29, V30, V31} -> {'Core.TT.As', V28, V29, ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V30)), ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V31))}; {'Core.TT.TDelayed', V32, V33, V34} -> {'Core.TT.TDelayed', V32, V33, ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V34))}; {'Core.TT.TDelay', V35, V36, V37, V38} -> {'Core.TT.TDelay', V35, V36, ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V37)), ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V38))}; {'Core.TT.TForce', V39, V40, V41} -> {'Core.TT.TForce', V39, V40, ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V41))}; _ -> V1 end.
'dn--un--traverse_Traversable_WhyErased'(V0, V1, V2) -> case V2 of {'Core.TT.Placeholder'} -> case V0 of {'Prelude.Interfaces.MkApplicative', V3, V4, V5} -> ((V4('erased'))({'Core.TT.Placeholder'})) end; {'Core.TT.Impossible'} -> case V0 of {'Prelude.Interfaces.MkApplicative', V6, V7, V8} -> ((V7('erased'))({'Core.TT.Impossible'})) end; {'Core.TT.Dotted', V9} -> ((begin (V14 = case V0 of {'Prelude.Interfaces.MkApplicative', V11, V12, V13} -> V11 end), fun (V15) -> fun (V16) -> ((((V14('erased'))('erased'))(V15))(V16)) end end end(fun (V10) -> {'Core.TT.Dotted', V10} end))((V1(V9)))) end.
'dn--un--traverse_Traversable_PiInfo'(V0, V1, V2) -> case V2 of {'Core.TT.Implicit'} -> case V0 of {'Prelude.Interfaces.MkApplicative', V3, V4, V5} -> ((V4('erased'))({'Core.TT.Implicit'})) end; {'Core.TT.Explicit'} -> case V0 of {'Prelude.Interfaces.MkApplicative', V6, V7, V8} -> ((V7('erased'))({'Core.TT.Explicit'})) end; {'Core.TT.AutoImplicit'} -> case V0 of {'Prelude.Interfaces.MkApplicative', V9, V10, V11} -> ((V10('erased'))({'Core.TT.AutoImplicit'})) end; {'Core.TT.DefImplicit', V12} -> ((begin (V17 = case V0 of {'Prelude.Interfaces.MkApplicative', V14, V15, V16} -> V14 end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V13) -> {'Core.TT.DefImplicit', V13} end))((V1(V12)))) end.
'dn--un--traverse_Traversable_Binder'(V0, V1, V2) -> case V2 of {'Core.TT.Lam', V3, V4, V5, V6} -> case V0 of {'Prelude.Interfaces.MkApplicative', V7, V8, V9} -> ((((V9('erased'))('erased'))(((begin (V15 = case V0 of {'Prelude.Interfaces.MkApplicative', V12, V13, V14} -> V12 end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> fun (V11) -> {'Core.TT.Lam', V3, V4, V10, V11} end end))(('dn--un--traverse_Traversable_PiInfo'(V0, V1, V5))))))((V1(V6)))) end; {'Core.TT.Let', V18, V19, V20, V21} -> case V0 of {'Prelude.Interfaces.MkApplicative', V22, V23, V24} -> ((((V24('erased'))('erased'))(((begin (V30 = case V0 of {'Prelude.Interfaces.MkApplicative', V27, V28, V29} -> V27 end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V25) -> fun (V26) -> {'Core.TT.Let', V18, V19, V25, V26} end end))((V1(V20))))))((V1(V21)))) end; {'Core.TT.Pi', V33, V34, V35, V36} -> case V0 of {'Prelude.Interfaces.MkApplicative', V37, V38, V39} -> ((((V39('erased'))('erased'))(((begin (V45 = case V0 of {'Prelude.Interfaces.MkApplicative', V42, V43, V44} -> V42 end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V40) -> fun (V41) -> {'Core.TT.Pi', V33, V34, V40, V41} end end))(('dn--un--traverse_Traversable_PiInfo'(V0, V1, V35))))))((V1(V36)))) end; {'Core.TT.PVar', V48, V49, V50, V51} -> case V0 of {'Prelude.Interfaces.MkApplicative', V52, V53, V54} -> ((((V54('erased'))('erased'))(((begin (V60 = case V0 of {'Prelude.Interfaces.MkApplicative', V57, V58, V59} -> V57 end), fun (V61) -> fun (V62) -> ((((V60('erased'))('erased'))(V61))(V62)) end end end(fun (V55) -> fun (V56) -> {'Core.TT.PVar', V48, V49, V55, V56} end end))(('dn--un--traverse_Traversable_PiInfo'(V0, V1, V50))))))((V1(V51)))) end; {'Core.TT.PLet', V63, V64, V65, V66} -> case V0 of {'Prelude.Interfaces.MkApplicative', V67, V68, V69} -> ((((V69('erased'))('erased'))(((begin (V75 = case V0 of {'Prelude.Interfaces.MkApplicative', V72, V73, V74} -> V72 end), fun (V76) -> fun (V77) -> ((((V75('erased'))('erased'))(V76))(V77)) end end end(fun (V70) -> fun (V71) -> {'Core.TT.PLet', V63, V64, V70, V71} end end))((V1(V65))))))((V1(V66)))) end; {'Core.TT.PVTy', V78, V79, V80} -> ((begin (V85 = case V0 of {'Prelude.Interfaces.MkApplicative', V82, V83, V84} -> V82 end), fun (V86) -> fun (V87) -> ((((V85('erased'))('erased'))(V86))(V87)) end end end(fun (V81) -> {'Core.TT.PVTy', V78, V79, V81} end))((V1(V80)))) end.
'dn--un--toList_Foldable_WhyErased'(V0) -> ('dn--un--foldr_Foldable_WhyErased'(fun (V1) -> fun (V2) -> [V1 | V2] end end, [], V0)).
'dn--un--toList_Foldable_PiInfo'(V0) -> ('dn--un--foldr_Foldable_PiInfo'(fun (V1) -> fun (V2) -> [V1 | V2] end end, [], V0)).
'dn--un--toList_Foldable_Binder'(V0) -> ('dn--un--foldr_Foldable_Binder'(fun (V1) -> fun (V2) -> [V1 | V2] end end, [], V0)).
'dn--un--show_Show_Visibility'(V0) -> case V0 of 0 -> <<"private"/utf8>>; 1 -> <<"export"/utf8>>; 2 -> <<"public export"/utf8>> end.
'dn--un--show_Show_Totality'(V0) -> begin (V3 = case V0 of {'Core.TT.MkTotality', V1, V2} -> V1 end), begin (V6 = case V0 of {'Core.TT.MkTotality', V4, V5} -> V5 end), ('nested--16262-11977--in--un--showTot'(V0, V3, V6)) end end.
'dn--un--show_Show_TotalReq'(V0) -> case V0 of 0 -> <<"total"/utf8>>; 1 -> <<"covering"/utf8>>; 2 -> <<"partial"/utf8>> end.
'dn--un--show_Show_Terminating'(V0) -> case V0 of {'Core.TT.Unchecked'} -> <<"not yet checked"/utf8>>; {'Core.TT.IsTerminating'} -> <<"terminating"/utf8>>; {'Core.TT.NotTerminating', V1} -> ('dn--un--show_Show_PartialReason'(V1)) end.
'dn--un--show_Show_RawKindedName'(V0) -> ('dn--un--showPrec_Show_RawKindedName'({'Prelude.Show.Open'}, V0)).
'dn--un--show_Show_PrimType'(V0) -> case V0 of 0 -> <<"Int"/utf8>>; 1 -> <<"Int8"/utf8>>; 2 -> <<"Int16"/utf8>>; 3 -> <<"Int32"/utf8>>; 4 -> <<"Int64"/utf8>>; 5 -> <<"Integer"/utf8>>; 6 -> <<"Bits8"/utf8>>; 7 -> <<"Bits16"/utf8>>; 8 -> <<"Bits32"/utf8>>; 9 -> <<"Bits64"/utf8>>; 10 -> <<"String"/utf8>>; 11 -> <<"Char"/utf8>>; 12 -> <<"Double"/utf8>>; 13 -> <<"%World"/utf8>> end.
'dn--un--show_Show_PartialReason'(V0) -> case V0 of {'Core.TT.NotStrictlyPositive'} -> <<"not strictly positive"/utf8>>; {'Core.TT.BadCall', V1} -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> <<<<"possibly not terminating due to call to "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))/binary>>; _ -> <<<<"possibly not terminating due to calls to "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end))(V1))))/binary>> end end(E0, E1)); _ -> <<<<"possibly not terminating due to calls to "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)) end))(V1))))/binary>> end; {'Core.TT.RecPath', V20} -> <<<<"possibly not terminating due to recursive path "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" -> "/utf8>>, ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21)) end))(V20))))/binary>> end.
'dn--un--show_Show_NameType'(V0) -> ('dn--un--showPrec_Show_NameType'({'Prelude.Show.Open'}, V0)).
'dn--un--show_Show_LazyReason'(V0) -> case V0 of 0 -> <<"Inf"/utf8>>; 1 -> <<"Lazy"/utf8>>; 2 -> <<"Unkown"/utf8>> end.
'dn--un--show_Show_KindedName'(V0) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V0 of {'Core.TT.MkKindedName', V1, V2, V3} -> V3 end)).
'dn--un--show_Show_Covering'(V0) -> case V0 of {'Core.TT.IsCovering'} -> <<"covering"/utf8>>; {'Core.TT.MissingCases', V1} -> <<"not covering all cases"/utf8>>; {'Core.TT.NonCoveringCall', V2} -> case V2 of [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> <<<<"not covering due to call to function "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))/binary>>; _ -> <<<<"not covering due to calls to functions "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) end))(V2))))/binary>> end end(E0, E1)); _ -> <<<<"not covering due to calls to functions "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)) end))(V2))))/binary>> end end.
'dn--un--show_Show_Constant'(V0) -> case V0 of {'Core.TT.I', V1} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)); {'Core.TT.I8', V2} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int8'(V2)); {'Core.TT.I16', V3} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int16'(V3)); {'Core.TT.I32', V4} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int32'(V4)); {'Core.TT.I64', V5} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int64'(V5)); {'Core.TT.BI', V6} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V6)); {'Core.TT.B8', V7} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits8'(V7)); {'Core.TT.B16', V8} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits16'(V8)); {'Core.TT.B32', V9} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits32'(V9)); {'Core.TT.B64', V10} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bits64'(V10)); {'Core.TT.Str', V11} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V11)); {'Core.TT.Ch', V12} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Char'(V12)); {'Core.TT.Db', V13} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V13)); {'Core.TT.PrT', V14} -> ('dn--un--show_Show_PrimType'(V14)); {'Core.TT.WorldVal'} -> <<"%MkWorld"/utf8>> end.
'dn--un--show_Show_(Var $ns)'(V0) -> begin (V1 = V0), ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V1)) end.
'dn--un--show_Show_(Term $vars)'(V0, V1) -> case ('un--getFnArgs'(V1)) of {'Builtin.MkPair', V2, V3} -> ('nested--21715-16869--in--un--showApp'(V0, V1, V0, V2, V3)) end.
'dn--un--show_Show_(PrimFn $arity)'(V0) -> case V0 of {'Core.TT.Add', V1} -> <<<<"+"/utf8>>/binary, ('dn--un--show_Show_PrimType'(V1))/binary>>; {'Core.TT.Sub', V2} -> <<<<"-"/utf8>>/binary, ('dn--un--show_Show_PrimType'(V2))/binary>>; {'Core.TT.Mul', V3} -> <<<<"*"/utf8>>/binary, ('dn--un--show_Show_PrimType'(V3))/binary>>; {'Core.TT.Div', V4} -> <<<<"/"/utf8>>/binary, ('dn--un--show_Show_PrimType'(V4))/binary>>; {'Core.TT.Mod', V5} -> <<<<"%"/utf8>>/binary, ('dn--un--show_Show_PrimType'(V5))/binary>>; {'Core.TT.Neg', V6} -> <<<<"neg "/utf8>>/binary, ('dn--un--show_Show_PrimType'(V6))/binary>>; {'Core.TT.ShiftL', V7} -> <<<<"shl "/utf8>>/binary, ('dn--un--show_Show_PrimType'(V7))/binary>>; {'Core.TT.ShiftR', V8} -> <<<<"shr "/utf8>>/binary, ('dn--un--show_Show_PrimType'(V8))/binary>>; {'Core.TT.BAnd', V9} -> <<<<"and "/utf8>>/binary, ('dn--un--show_Show_PrimType'(V9))/binary>>; {'Core.TT.BOr', V10} -> <<<<"or "/utf8>>/binary, ('dn--un--show_Show_PrimType'(V10))/binary>>; {'Core.TT.BXOr', V11} -> <<<<"xor "/utf8>>/binary, ('dn--un--show_Show_PrimType'(V11))/binary>>; {'Core.TT.LT', V12} -> <<<<"<"/utf8>>/binary, ('dn--un--show_Show_PrimType'(V12))/binary>>; {'Core.TT.LTE', V13} -> <<<<"<="/utf8>>/binary, ('dn--un--show_Show_PrimType'(V13))/binary>>; {'Core.TT.EQ', V14} -> <<<<"=="/utf8>>/binary, ('dn--un--show_Show_PrimType'(V14))/binary>>; {'Core.TT.GTE', V15} -> <<<<">="/utf8>>/binary, ('dn--un--show_Show_PrimType'(V15))/binary>>; {'Core.TT.GT', V16} -> <<<<">"/utf8>>/binary, ('dn--un--show_Show_PrimType'(V16))/binary>>; {'Core.TT.StrLength'} -> <<"op_strlen"/utf8>>; {'Core.TT.StrHead'} -> (begin (V18 = fun (V17) -> V17 end), fun (V19) -> (V18(V19)) end end(<<"op_strhead"/utf8>>)); {'Core.TT.StrTail'} -> (begin (V21 = fun (V20) -> V20 end), fun (V22) -> (V21(V22)) end end(<<"op_strtail"/utf8>>)); {'Core.TT.StrIndex'} -> (begin (V24 = fun (V23) -> V23 end), fun (V25) -> (V24(V25)) end end(<<"op_strindex"/utf8>>)); {'Core.TT.StrCons'} -> (begin (V27 = fun (V26) -> V26 end), fun (V28) -> (V27(V28)) end end(<<"op_strcons"/utf8>>)); {'Core.TT.StrAppend'} -> <<"++"/utf8>>; {'Core.TT.StrReverse'} -> <<"op_strrev"/utf8>>; {'Core.TT.StrSubstr'} -> (begin (V30 = fun (V29) -> V29 end), fun (V31) -> (V30(V31)) end end(<<"op_strsubstr"/utf8>>)); {'Core.TT.DoubleExp'} -> (begin (V33 = fun (V32) -> V32 end), fun (V34) -> (V33(V34)) end end(<<"op_doubleExp"/utf8>>)); {'Core.TT.DoubleLog'} -> (begin (V36 = fun (V35) -> V35 end), fun (V37) -> (V36(V37)) end end(<<"op_doubleLog"/utf8>>)); {'Core.TT.DoublePow'} -> (begin (V39 = fun (V38) -> V38 end), fun (V40) -> (V39(V40)) end end(<<"op_doublePow"/utf8>>)); {'Core.TT.DoubleSin'} -> (begin (V42 = fun (V41) -> V41 end), fun (V43) -> (V42(V43)) end end(<<"op_doubleSin"/utf8>>)); {'Core.TT.DoubleCos'} -> (begin (V45 = fun (V44) -> V44 end), fun (V46) -> (V45(V46)) end end(<<"op_doubleCos"/utf8>>)); {'Core.TT.DoubleTan'} -> (begin (V48 = fun (V47) -> V47 end), fun (V49) -> (V48(V49)) end end(<<"op_doubleTan"/utf8>>)); {'Core.TT.DoubleASin'} -> (begin (V51 = fun (V50) -> V50 end), fun (V52) -> (V51(V52)) end end(<<"op_doubleASin"/utf8>>)); {'Core.TT.DoubleACos'} -> (begin (V54 = fun (V53) -> V53 end), fun (V55) -> (V54(V55)) end end(<<"op_doubleACos"/utf8>>)); {'Core.TT.DoubleATan'} -> (begin (V57 = fun (V56) -> V56 end), fun (V58) -> (V57(V58)) end end(<<"op_doubleATan"/utf8>>)); {'Core.TT.DoubleSqrt'} -> (begin (V60 = fun (V59) -> V59 end), fun (V61) -> (V60(V61)) end end(<<"op_doubleSqrt"/utf8>>)); {'Core.TT.DoubleFloor'} -> (begin (V63 = fun (V62) -> V62 end), fun (V64) -> (V63(V64)) end end(<<"op_doubleFloor"/utf8>>)); {'Core.TT.DoubleCeiling'} -> (begin (V66 = fun (V65) -> V65 end), fun (V67) -> (V66(V67)) end end(<<"op_doubleCeiling"/utf8>>)); {'Core.TT.Cast', V68, V69} -> <<<<"cast-"/utf8>>/binary, <<('dn--un--show_Show_PrimType'(V68))/binary, <<<<"-"/utf8>>/binary, ('dn--un--show_Show_PrimType'(V69))/binary>>/binary>>/binary>>; {'Core.TT.BelieveMe'} -> (begin (V71 = fun (V70) -> V70 end), fun (V72) -> (V71(V72)) end end(<<"believe_me"/utf8>>)); {'Core.TT.Crash'} -> <<"crash"/utf8>> end.
'dn--un--show_Show_(PiInfo $t)'(V0, V1) -> case V1 of {'Core.TT.Implicit'} -> <<"Implicit"/utf8>>; {'Core.TT.Explicit'} -> <<"Explicit"/utf8>>; {'Core.TT.AutoImplicit'} -> <<"AutoImplicit"/utf8>>; {'Core.TT.DefImplicit', V2} -> <<<<"DefImplicit "/utf8>>/binary, case V0 of {'Prelude.Show.MkShow', V3, V4} -> (V3(V2)) end/binary>> end.
'dn--un--showPrec_Show_Visibility'(V0, V1) -> ('dn--un--show_Show_Visibility'(V1)).
'dn--un--showPrec_Show_Totality'(V0, V1) -> ('dn--un--show_Show_Totality'(V1)).
'dn--un--showPrec_Show_TotalReq'(V0, V1) -> ('dn--un--show_Show_TotalReq'(V1)).
'dn--un--showPrec_Show_Terminating'(V0, V1) -> ('dn--un--show_Show_Terminating'(V1)).
'dn--un--showPrec_Show_RawKindedName'(V0, V1) -> case V1 of {'Core.TT.MkKindedName', V2, V3, V4} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"MkKindedName"/utf8>>, <<('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V6) -> ('dn--un--show_Show_NameType'(V6)) end, fun (V7) -> fun (V8) -> ('dn--un--showPrec_Show_NameType'(V7, V8)) end end}, V5)) end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V11) -> ('dn--un--show_Show_NameType'(V11)) end, fun (V12) -> fun (V13) -> ('dn--un--showPrec_Show_NameType'(V12, V13)) end end}, V9, V10)) end end}, V2))/binary, <<('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_RawName'(V14)) end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_RawName'(V15, V16)) end end}, V3))/binary, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_RawName'(V17)) end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_RawName'(V18, V19)) end end}, V4))/binary>>/binary>>)) end.
'dn--un--showPrec_Show_PrimType'(V0, V1) -> ('dn--un--show_Show_PrimType'(V1)).
'dn--un--showPrec_Show_PartialReason'(V0, V1) -> ('dn--un--show_Show_PartialReason'(V1)).
'dn--un--showPrec_Show_NameType'(V0, V1) -> case V1 of {'Core.TT.Bound'} -> <<"Bound"/utf8>>; {'Core.TT.Func'} -> <<"Func"/utf8>>; {'Core.TT.DataCon', V2, V3} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"DataCon"/utf8>>, <<('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4)) end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V5, V6)) end end}, V2))/binary, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V8, V9)) end end}, V3))/binary>>)); {'Core.TT.TyCon', V10, V11} -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"TyCon"/utf8>>, <<('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V13, V14)) end end}, V10))/binary, ('Idris.Idris2.Prelude.Show':'un--showArg'({'Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V16, V17)) end end}, V11))/binary>>)) end.
'dn--un--showPrec_Show_LazyReason'(V0, V1) -> ('dn--un--show_Show_LazyReason'(V1)).
'dn--un--showPrec_Show_KindedName'(V0, V1) -> ('dn--un--show_Show_KindedName'(V1)).
'dn--un--showPrec_Show_Covering'(V0, V1) -> ('dn--un--show_Show_Covering'(V1)).
'dn--un--showPrec_Show_Constant'(V0, V1) -> ('dn--un--show_Show_Constant'(V1)).
'dn--un--showPrec_Show_(Var $ns)'(V0, V1) -> ('dn--un--show_Show_(Var $ns)'(V1)).
'dn--un--showPrec_Show_(Term $vars)'(V0, V1, V2) -> ('dn--un--show_Show_(Term $vars)'(V0, V2)).
'dn--un--showPrec_Show_(PrimFn $arity)'(V0, V1) -> ('dn--un--show_Show_(PrimFn $arity)'(V1)).
'dn--un--showPrec_Show_(PiInfo $t)'(V0, V1, V2) -> ('dn--un--show_Show_(PiInfo $t)'(V0, V2)).
'dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V1) -> case V1 of {'Core.TT.Ref', V2, V3, V4} -> case V4 of {'Core.Name.NS', V5, V6} -> begin (V7 = {'Core.TT.Ref', V2, V3, {'Core.Name.NS', V5, V6}}), case ('Idris.Idris2.Data.List':'un--isNil'(('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V5)))) of 1 -> {'Core.TT.Ref', V2, V3, {'Core.Name.NS', V0, V6}}; 0 -> V7 end end; _ -> V1 end; {'Core.TT.Meta', V8, V9, V10, V11} -> {'Core.TT.Meta', V8, V9, V10, ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V12)) end))(V11))}; {'Core.TT.Bind', V20, V21, V22, V23} -> {'Core.TT.Bind', V20, V21, ('dn--un--map_Functor_Binder'(fun (V24) -> ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V24)) end, V22)), ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V23))}; {'Core.TT.App', V25, V26, V27} -> {'Core.TT.App', V25, ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V26)), ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V27))}; {'Core.TT.As', V28, V29, V30, V31} -> {'Core.TT.As', V28, V29, ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V30)), ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V31))}; {'Core.TT.TDelayed', V32, V33, V34} -> {'Core.TT.TDelayed', V32, V33, ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V34))}; {'Core.TT.TDelay', V35, V36, V37, V38} -> {'Core.TT.TDelay', V35, V36, ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V37)), ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V38))}; {'Core.TT.TForce', V39, V40, V41} -> {'Core.TT.TForce', V39, V40, ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V41))}; _ -> V1 end.
'dn--un--pretty_Pretty_Void_Visibility'(V0) -> case V0 of 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V2 = fun (V1) -> V1 end), fun (V3) -> (V2(V3)) end end(<<"private"/utf8>>)))); 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V5 = fun (V4) -> V4 end), fun (V6) -> (V5(V6)) end end(<<"export"/utf8>>)))); 2 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V8 = fun (V7) -> V7 end), fun (V9) -> (V8(V9)) end end(<<"public"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V11 = fun (V10) -> V10 end), fun (V12) -> (V11(V12)) end end(<<"export"/utf8>>)))))) end.
'dn--un--pretty_Pretty_Void_Totality'(V0) -> case V0 of {'Core.TT.MkTotality', V1, V2} -> case V1 of {'Core.TT.IsTerminating'} -> case V2 of {'Core.TT.IsCovering'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V4 = fun (V3) -> V3 end), fun (V5) -> (V4(V5)) end end(<<"total"/utf8>>)))); _ -> ('dn--un--pretty_Pretty_Void_Covering'(V2)) end; _ -> case V2 of {'Core.TT.IsCovering'} -> ('dn--un--pretty_Pretty_Void_Terminating'(V1)); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(((begin (V8 = fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V6, V7)) end end), fun (V9) -> fun (V10) -> ((V8(V9))(V10)) end end end(('dn--un--pretty_Pretty_Void_Covering'(V2))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--semi'()))), ('dn--un--pretty_Pretty_Void_Terminating'(V1)))) end end end.
'dn--un--pretty_Pretty_Void_Terminating'(V0) -> case V0 of {'Core.TT.Unchecked'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not yet checked"/utf8>>)); {'Core.TT.IsTerminating'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V2 = fun (V1) -> V1 end), fun (V3) -> (V2(V3)) end end(<<"terminating"/utf8>>)))); {'Core.TT.NotTerminating', V4} -> ('dn--un--pretty_Pretty_Void_PartialReason'(V4)) end.
'dn--un--pretty_Pretty_Void_PartialReason'(V0) -> case V0 of {'Core.TT.NotStrictlyPositive'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not strictly positive"/utf8>>)); {'Core.TT.BadCall', V1} -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"possibly not terminating due to call to"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V2)))); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"possibly not terminating due to calls to"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'(((begin (V8 = fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V6, V7)) end end), fun (V9) -> fun (V10) -> ((V8(V9))(V10)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'())))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), V4, V5)) end end, ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V11)) end))(V1)))))) end end(E0, E1)); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"possibly not terminating due to calls to"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'(((begin (V23 = fun (V21) -> fun (V22) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V21, V22)) end end), fun (V24) -> fun (V25) -> ((V23(V24))(V25)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'())))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), V19, V20)) end end, ((begin (V31 = fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V29, V30)) end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V26)) end))(V1)))))) end; {'Core.TT.RecPath', V34} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"possibly not terminating due to recursive path"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V35) -> fun (V36) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V38 = fun (V37) -> V37 end), fun (V39) -> (V38(V39)) end end(<<" -> "/utf8>>)))), V35, V36)) end end, ((begin (V45 = fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V43, V44)) end end end end), fun (V46) -> fun (V47) -> ((((V45('erased'))('erased'))(V46))(V47)) end end end(fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V40)) end))(V34)))))) end.
'dn--un--pretty_Pretty_Void_Covering'(V0) -> case V0 of {'Core.TT.IsCovering'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'((begin (V2 = fun (V1) -> V1 end), fun (V3) -> (V2(V3)) end end(<<"covering"/utf8>>)))); {'Core.TT.MissingCases', V4} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not covering all cases"/utf8>>)); {'Core.TT.NonCoveringCall', V5} -> case V5 of [E0 | E1] -> (fun (V6, V7) -> case V7 of [] -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not covering due to call to function"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V6)))); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not covering due to calls to functions"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V8) -> fun (V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'(((begin (V12 = fun (V10) -> fun (V11) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V10, V11)) end end), fun (V13) -> fun (V14) -> ((V12(V13))(V14)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'())))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), V8, V9)) end end, ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V15)) end))(V5)))))) end end(E0, E1)); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not covering due to calls to functions"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V23) -> fun (V24) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'(((begin (V27 = fun (V25) -> fun (V26) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V25, V26)) end end), fun (V28) -> fun (V29) -> ((V27(V28))(V29)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'())))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), V23, V24)) end end, ((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Void_Name'(V30)) end))(V5)))))) end end.
'dn--un--pretty_Pretty_IdrisSyntax_PrimType'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.TCon', {'Prelude.Types.Nothing'}}, case V0 of 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V2)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V3)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V4) -> fun (V5) -> case case (V4 =:= V5) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V1)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V6} -> case V6 of {'Builtin.MkPair', V7, V8} -> [V7 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V8))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V1)); 0 -> V1 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> [V10 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V11))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V12) -> fun (V13) -> case case (V12 =:= V13) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V1)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V14} -> case V14 of {'Builtin.MkPair', V15, V16} -> [V15 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V16))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V1)); 0 -> V1 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V17} -> case V17 of {'Builtin.MkPair', V18, V19} -> [V18 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V19))] end end)))))))) end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V22) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V22)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V23) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V23)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V24) -> fun (V25) -> case case (V24 =:= V25) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V21)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V26} -> case V26 of {'Builtin.MkPair', V27, V28} -> [V27 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V28))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V21)); 0 -> V21 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V29} -> case V29 of {'Builtin.MkPair', V30, V31} -> [V30 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V31))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V32) -> fun (V33) -> case case (V32 =:= V33) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V21)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V34} -> case V34 of {'Builtin.MkPair', V35, V36} -> [V35 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V36))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V21)); 0 -> V21 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V37} -> case V37 of {'Builtin.MkPair', V38, V39} -> [V38 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V39))] end end)))))))) end end}, <<"Int"/utf8>>)); 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V40) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V41) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V41)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V42) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V42)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V43) -> fun (V44) -> case case (V43 =:= V44) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V40)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V45} -> case V45 of {'Builtin.MkPair', V46, V47} -> [V46 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V47))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V40)); 0 -> V40 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V48} -> case V48 of {'Builtin.MkPair', V49, V50} -> [V49 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V50))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V51) -> fun (V52) -> case case (V51 =:= V52) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V40)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V53} -> case V53 of {'Builtin.MkPair', V54, V55} -> [V54 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V55))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V40)); 0 -> V40 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V56} -> case V56 of {'Builtin.MkPair', V57, V58} -> [V57 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V58))] end end)))))))) end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V61) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V61)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V62) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V62)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V63) -> fun (V64) -> case case (V63 =:= V64) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V60)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V65} -> case V65 of {'Builtin.MkPair', V66, V67} -> [V66 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V67))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V60)); 0 -> V60 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V68} -> case V68 of {'Builtin.MkPair', V69, V70} -> [V69 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V70))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V71) -> fun (V72) -> case case (V71 =:= V72) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V60)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V73} -> case V73 of {'Builtin.MkPair', V74, V75} -> [V74 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V75))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V60)); 0 -> V60 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V76} -> case V76 of {'Builtin.MkPair', V77, V78} -> [V77 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V78))] end end)))))))) end end}, <<"Int8"/utf8>>)); 2 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V79) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V80) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V80)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V81) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V81)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V82) -> fun (V83) -> case case (V82 =:= V83) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V79)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V84} -> case V84 of {'Builtin.MkPair', V85, V86} -> [V85 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V86))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V79)); 0 -> V79 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V87} -> case V87 of {'Builtin.MkPair', V88, V89} -> [V88 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V89))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V90) -> fun (V91) -> case case (V90 =:= V91) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V79)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V92} -> case V92 of {'Builtin.MkPair', V93, V94} -> [V93 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V94))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V79)); 0 -> V79 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V95} -> case V95 of {'Builtin.MkPair', V96, V97} -> [V96 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V97))] end end)))))))) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V100) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V100)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V101) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V101)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V102) -> fun (V103) -> case case (V102 =:= V103) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V99)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V104} -> case V104 of {'Builtin.MkPair', V105, V106} -> [V105 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V106))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V99)); 0 -> V99 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V107} -> case V107 of {'Builtin.MkPair', V108, V109} -> [V108 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V109))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V110) -> fun (V111) -> case case (V110 =:= V111) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V99)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V112} -> case V112 of {'Builtin.MkPair', V113, V114} -> [V113 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V114))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V99)); 0 -> V99 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V115} -> case V115 of {'Builtin.MkPair', V116, V117} -> [V116 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V117))] end end)))))))) end end}, <<"Int16"/utf8>>)); 3 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V118) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V119) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V119)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V120) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V120)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V121) -> fun (V122) -> case case (V121 =:= V122) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V118)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V123} -> case V123 of {'Builtin.MkPair', V124, V125} -> [V124 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V125))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V118)); 0 -> V118 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V126} -> case V126 of {'Builtin.MkPair', V127, V128} -> [V127 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V128))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V129) -> fun (V130) -> case case (V129 =:= V130) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V118)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V131} -> case V131 of {'Builtin.MkPair', V132, V133} -> [V132 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V133))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V118)); 0 -> V118 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V134} -> case V134 of {'Builtin.MkPair', V135, V136} -> [V135 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V136))] end end)))))))) end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V139) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V139)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V140) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V140)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V141) -> fun (V142) -> case case (V141 =:= V142) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V138)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V143} -> case V143 of {'Builtin.MkPair', V144, V145} -> [V144 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V145))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V138)); 0 -> V138 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V146} -> case V146 of {'Builtin.MkPair', V147, V148} -> [V147 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V148))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V149) -> fun (V150) -> case case (V149 =:= V150) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V138)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V151} -> case V151 of {'Builtin.MkPair', V152, V153} -> [V152 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V153))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V138)); 0 -> V138 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V154} -> case V154 of {'Builtin.MkPair', V155, V156} -> [V155 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V156))] end end)))))))) end end}, <<"Int32"/utf8>>)); 4 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V157) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V158) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V158)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V159) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V159)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V160) -> fun (V161) -> case case (V160 =:= V161) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V157)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V162} -> case V162 of {'Builtin.MkPair', V163, V164} -> [V163 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V164))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V157)); 0 -> V157 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V165} -> case V165 of {'Builtin.MkPair', V166, V167} -> [V166 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V167))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V168) -> fun (V169) -> case case (V168 =:= V169) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V157)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V170} -> case V170 of {'Builtin.MkPair', V171, V172} -> [V171 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V172))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V157)); 0 -> V157 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V173} -> case V173 of {'Builtin.MkPair', V174, V175} -> [V174 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V175))] end end)))))))) end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V178) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V178)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V179) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V179)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V180) -> fun (V181) -> case case (V180 =:= V181) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V177)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V182} -> case V182 of {'Builtin.MkPair', V183, V184} -> [V183 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V184))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V177)); 0 -> V177 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V185} -> case V185 of {'Builtin.MkPair', V186, V187} -> [V186 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V187))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V188) -> fun (V189) -> case case (V188 =:= V189) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V177)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V190} -> case V190 of {'Builtin.MkPair', V191, V192} -> [V191 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V192))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V177)); 0 -> V177 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V193} -> case V193 of {'Builtin.MkPair', V194, V195} -> [V194 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V195))] end end)))))))) end end}, <<"Int64"/utf8>>)); 5 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V196) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V197) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V197)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V198) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V198)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V199) -> fun (V200) -> case case (V199 =:= V200) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V196)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V201} -> case V201 of {'Builtin.MkPair', V202, V203} -> [V202 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V203))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V196)); 0 -> V196 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V204} -> case V204 of {'Builtin.MkPair', V205, V206} -> [V205 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V206))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V207) -> fun (V208) -> case case (V207 =:= V208) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V196)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V209} -> case V209 of {'Builtin.MkPair', V210, V211} -> [V210 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V211))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V196)); 0 -> V196 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V212} -> case V212 of {'Builtin.MkPair', V213, V214} -> [V213 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V214))] end end)))))))) end, fun (V215) -> fun (V216) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V217) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V217)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V218) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V218)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V219) -> fun (V220) -> case case (V219 =:= V220) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V216)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V221} -> case V221 of {'Builtin.MkPair', V222, V223} -> [V222 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V223))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V216)); 0 -> V216 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V224} -> case V224 of {'Builtin.MkPair', V225, V226} -> [V225 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V226))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V227) -> fun (V228) -> case case (V227 =:= V228) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V216)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V229} -> case V229 of {'Builtin.MkPair', V230, V231} -> [V230 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V231))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V216)); 0 -> V216 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V232} -> case V232 of {'Builtin.MkPair', V233, V234} -> [V233 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V234))] end end)))))))) end end}, <<"Integer"/utf8>>)); 6 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V235) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V236) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V236)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V237) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V237)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V238) -> fun (V239) -> case case (V238 =:= V239) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V235)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V240} -> case V240 of {'Builtin.MkPair', V241, V242} -> [V241 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V242))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V235)); 0 -> V235 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V243} -> case V243 of {'Builtin.MkPair', V244, V245} -> [V244 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V245))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V246) -> fun (V247) -> case case (V246 =:= V247) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V235)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V248} -> case V248 of {'Builtin.MkPair', V249, V250} -> [V249 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V250))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V235)); 0 -> V235 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V251} -> case V251 of {'Builtin.MkPair', V252, V253} -> [V252 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V253))] end end)))))))) end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V256) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V256)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V257) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V257)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V258) -> fun (V259) -> case case (V258 =:= V259) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V255)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V260} -> case V260 of {'Builtin.MkPair', V261, V262} -> [V261 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V262))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V255)); 0 -> V255 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V263} -> case V263 of {'Builtin.MkPair', V264, V265} -> [V264 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V265))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V266) -> fun (V267) -> case case (V266 =:= V267) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V255)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V268} -> case V268 of {'Builtin.MkPair', V269, V270} -> [V269 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V270))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V255)); 0 -> V255 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V271} -> case V271 of {'Builtin.MkPair', V272, V273} -> [V272 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V273))] end end)))))))) end end}, <<"Bits8"/utf8>>)); 7 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V274) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V275) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V275)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V276) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V276)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V277) -> fun (V278) -> case case (V277 =:= V278) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V274)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V279} -> case V279 of {'Builtin.MkPair', V280, V281} -> [V280 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V281))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V274)); 0 -> V274 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V282} -> case V282 of {'Builtin.MkPair', V283, V284} -> [V283 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V284))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V285) -> fun (V286) -> case case (V285 =:= V286) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V274)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V287} -> case V287 of {'Builtin.MkPair', V288, V289} -> [V288 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V289))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V274)); 0 -> V274 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V290} -> case V290 of {'Builtin.MkPair', V291, V292} -> [V291 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V292))] end end)))))))) end, fun (V293) -> fun (V294) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V295) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V295)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V296) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V296)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V297) -> fun (V298) -> case case (V297 =:= V298) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V294)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V299} -> case V299 of {'Builtin.MkPair', V300, V301} -> [V300 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V301))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V294)); 0 -> V294 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V302} -> case V302 of {'Builtin.MkPair', V303, V304} -> [V303 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V304))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V305) -> fun (V306) -> case case (V305 =:= V306) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V294)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V307} -> case V307 of {'Builtin.MkPair', V308, V309} -> [V308 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V309))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V294)); 0 -> V294 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V310} -> case V310 of {'Builtin.MkPair', V311, V312} -> [V311 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V312))] end end)))))))) end end}, <<"Bits16"/utf8>>)); 8 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V313) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V314) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V314)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V315) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V315)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V316) -> fun (V317) -> case case (V316 =:= V317) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V313)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V318} -> case V318 of {'Builtin.MkPair', V319, V320} -> [V319 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V320))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V313)); 0 -> V313 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V321} -> case V321 of {'Builtin.MkPair', V322, V323} -> [V322 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V323))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V324) -> fun (V325) -> case case (V324 =:= V325) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V313)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V326} -> case V326 of {'Builtin.MkPair', V327, V328} -> [V327 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V328))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V313)); 0 -> V313 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V329} -> case V329 of {'Builtin.MkPair', V330, V331} -> [V330 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V331))] end end)))))))) end, fun (V332) -> fun (V333) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V334) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V334)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V335) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V335)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V336) -> fun (V337) -> case case (V336 =:= V337) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V333)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V338} -> case V338 of {'Builtin.MkPair', V339, V340} -> [V339 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V340))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V333)); 0 -> V333 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V341} -> case V341 of {'Builtin.MkPair', V342, V343} -> [V342 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V343))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V344) -> fun (V345) -> case case (V344 =:= V345) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V333)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V346} -> case V346 of {'Builtin.MkPair', V347, V348} -> [V347 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V348))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V333)); 0 -> V333 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V349} -> case V349 of {'Builtin.MkPair', V350, V351} -> [V350 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V351))] end end)))))))) end end}, <<"Bits32"/utf8>>)); 9 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V352) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V353) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V353)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V354) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V354)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V355) -> fun (V356) -> case case (V355 =:= V356) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V352)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V357} -> case V357 of {'Builtin.MkPair', V358, V359} -> [V358 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V359))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V352)); 0 -> V352 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V360} -> case V360 of {'Builtin.MkPair', V361, V362} -> [V361 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V362))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V363) -> fun (V364) -> case case (V363 =:= V364) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V352)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V365} -> case V365 of {'Builtin.MkPair', V366, V367} -> [V366 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V367))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V352)); 0 -> V352 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V368} -> case V368 of {'Builtin.MkPair', V369, V370} -> [V369 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V370))] end end)))))))) end, fun (V371) -> fun (V372) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V373) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V373)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V374) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V374)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V375) -> fun (V376) -> case case (V375 =:= V376) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V372)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V377} -> case V377 of {'Builtin.MkPair', V378, V379} -> [V378 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V379))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V372)); 0 -> V372 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V380} -> case V380 of {'Builtin.MkPair', V381, V382} -> [V381 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V382))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V383) -> fun (V384) -> case case (V383 =:= V384) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V372)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V385} -> case V385 of {'Builtin.MkPair', V386, V387} -> [V386 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V387))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V372)); 0 -> V372 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V388} -> case V388 of {'Builtin.MkPair', V389, V390} -> [V389 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V390))] end end)))))))) end end}, <<"Bits64"/utf8>>)); 10 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V391) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V392) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V392)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V393) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V393)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V394) -> fun (V395) -> case case (V394 =:= V395) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V391)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V396} -> case V396 of {'Builtin.MkPair', V397, V398} -> [V397 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V398))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V391)); 0 -> V391 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V399} -> case V399 of {'Builtin.MkPair', V400, V401} -> [V400 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V401))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V402) -> fun (V403) -> case case (V402 =:= V403) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V391)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V404} -> case V404 of {'Builtin.MkPair', V405, V406} -> [V405 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V406))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V391)); 0 -> V391 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V407} -> case V407 of {'Builtin.MkPair', V408, V409} -> [V408 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V409))] end end)))))))) end, fun (V410) -> fun (V411) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V412) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V412)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V413) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V413)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V414) -> fun (V415) -> case case (V414 =:= V415) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V411)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V416} -> case V416 of {'Builtin.MkPair', V417, V418} -> [V417 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V418))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V411)); 0 -> V411 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V419} -> case V419 of {'Builtin.MkPair', V420, V421} -> [V420 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V421))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V422) -> fun (V423) -> case case (V422 =:= V423) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V411)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V424} -> case V424 of {'Builtin.MkPair', V425, V426} -> [V425 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V426))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V411)); 0 -> V411 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V427} -> case V427 of {'Builtin.MkPair', V428, V429} -> [V428 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V429))] end end)))))))) end end}, <<"String"/utf8>>)); 11 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V430) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V431) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V431)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V432) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V432)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V433) -> fun (V434) -> case case (V433 =:= V434) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V430)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V435} -> case V435 of {'Builtin.MkPair', V436, V437} -> [V436 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V437))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V430)); 0 -> V430 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V438} -> case V438 of {'Builtin.MkPair', V439, V440} -> [V439 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V440))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V441) -> fun (V442) -> case case (V441 =:= V442) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V430)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V443} -> case V443 of {'Builtin.MkPair', V444, V445} -> [V444 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V445))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V430)); 0 -> V430 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V446} -> case V446 of {'Builtin.MkPair', V447, V448} -> [V447 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V448))] end end)))))))) end, fun (V449) -> fun (V450) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V451) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V451)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V452) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V452)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V453) -> fun (V454) -> case case (V453 =:= V454) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V450)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V455} -> case V455 of {'Builtin.MkPair', V456, V457} -> [V456 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V457))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V450)); 0 -> V450 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V458} -> case V458 of {'Builtin.MkPair', V459, V460} -> [V459 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V460))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V461) -> fun (V462) -> case case (V461 =:= V462) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V450)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V463} -> case V463 of {'Builtin.MkPair', V464, V465} -> [V464 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V465))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V450)); 0 -> V450 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V466} -> case V466 of {'Builtin.MkPair', V467, V468} -> [V467 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V468))] end end)))))))) end end}, <<"Char"/utf8>>)); 12 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V469) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V470) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V470)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V471) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V471)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V472) -> fun (V473) -> case case (V472 =:= V473) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V469)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V474} -> case V474 of {'Builtin.MkPair', V475, V476} -> [V475 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V476))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V469)); 0 -> V469 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V477} -> case V477 of {'Builtin.MkPair', V478, V479} -> [V478 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V479))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V480) -> fun (V481) -> case case (V480 =:= V481) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V469)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V482} -> case V482 of {'Builtin.MkPair', V483, V484} -> [V483 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V484))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V469)); 0 -> V469 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V485} -> case V485 of {'Builtin.MkPair', V486, V487} -> [V486 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V487))] end end)))))))) end, fun (V488) -> fun (V489) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V490) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V490)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V491) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V491)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V492) -> fun (V493) -> case case (V492 =:= V493) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V489)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V494} -> case V494 of {'Builtin.MkPair', V495, V496} -> [V495 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V496))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V489)); 0 -> V489 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V497} -> case V497 of {'Builtin.MkPair', V498, V499} -> [V498 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V499))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V500) -> fun (V501) -> case case (V500 =:= V501) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V489)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V502} -> case V502 of {'Builtin.MkPair', V503, V504} -> [V503 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V504))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V489)); 0 -> V489 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V505} -> case V505 of {'Builtin.MkPair', V506, V507} -> [V506 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V507))] end end)))))))) end end}, <<"Double"/utf8>>)); 13 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V508) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V509) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V509)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V510) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V510)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V511) -> fun (V512) -> case case (V511 =:= V512) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V508)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V513} -> case V513 of {'Builtin.MkPair', V514, V515} -> [V514 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V515))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V508)); 0 -> V508 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V516} -> case V516 of {'Builtin.MkPair', V517, V518} -> [V517 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V518))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V519) -> fun (V520) -> case case (V519 =:= V520) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V508)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V521} -> case V521 of {'Builtin.MkPair', V522, V523} -> [V522 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V523))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V508)); 0 -> V508 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V524} -> case V524 of {'Builtin.MkPair', V525, V526} -> [V525 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V526))] end end)))))))) end, fun (V527) -> fun (V528) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V529) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V529)) end, ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, fun (V530) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V530)) end, ('Idris.Idris2.Data.String':'nested--3893-7830--in--un--linesHelp'(case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V531) -> fun (V532) -> case case (V531 =:= V532) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V528)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V533} -> case V533 of {'Builtin.MkPair', V534, V535} -> [V534 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V535))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V528)); 0 -> V528 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V536} -> case V536 of {'Builtin.MkPair', V537, V538} -> [V537 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V538))] end end, [], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(case ('Idris.Idris2.Data.List':'un--isPrefixOfBy'(fun (V539) -> fun (V540) -> case case (V539 =:= V540) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end end end, [$\x{a} | []], ('Idris.Idris2.Prelude.Types.List':'un--reverseOnto'([], case ('Idris.Idris2.Prelude.Types':'un--strUncons'(V528)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V541} -> case V541 of {'Builtin.MkPair', V542, V543} -> [V542 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V543))] end end)))) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'(1, V528)); 0 -> V528 end)) of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V544} -> case V544 of {'Builtin.MkPair', V545, V546} -> [V545 | ('Idris.Idris2.Prelude.Types':'un--unpack'(V546))] end end)))))))) end end}, <<"%World"/utf8>>)) end)).
'dn--un--pretty_Pretty_IdrisSyntax_Constant'(V0) -> case V0 of {'Core.TT.PrT', V1} -> ('dn--un--pretty_Pretty_IdrisSyntax_PrimType'(V1)); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.DCon', {'Prelude.Types.Nothing'}}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--pretty0'({'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Void_String'(V2)) end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Void_String'(V3, V4)) end end}, ('dn--un--show_Show_Constant'(V0)))))) end.
'dn--un--prettyPrec_Pretty_Void_Visibility'(V0, V1) -> ('dn--un--pretty_Pretty_Void_Visibility'(V1)).
'dn--un--prettyPrec_Pretty_Void_Totality'(V0, V1) -> ('dn--un--pretty_Pretty_Void_Totality'(V1)).
'dn--un--prettyPrec_Pretty_Void_Terminating'(V0, V1) -> ('dn--un--pretty_Pretty_Void_Terminating'(V1)).
'dn--un--prettyPrec_Pretty_Void_PartialReason'(V0, V1) -> ('dn--un--pretty_Pretty_Void_PartialReason'(V1)).
'dn--un--prettyPrec_Pretty_Void_Covering'(V0, V1) -> ('dn--un--pretty_Pretty_Void_Covering'(V1)).
'dn--un--prettyPrec_Pretty_IdrisSyntax_Constant'(V0, V1) -> ('dn--un--pretty_Pretty_IdrisSyntax_Constant'(V1)).
'dn--un--null_Foldable_WhyErased'(V0) -> (('dn--un--foldr_Foldable_WhyErased'(fun (V1) -> fun (V2) -> fun () -> 0 end end end, fun () -> 1 end, V0))()).
'dn--un--null_Foldable_PiInfo'(V0) -> (('dn--un--foldr_Foldable_PiInfo'(fun (V1) -> fun (V2) -> fun () -> 0 end end end, fun () -> 1 end, V0))()).
'dn--un--null_Foldable_Binder'(V0) -> (('dn--un--foldr_Foldable_Binder'(fun (V1) -> fun (V2) -> fun () -> 0 end end end, fun () -> 1 end, V0))()).
'dn--un--min_Ord_Visibility'(V0, V1) -> case ('dn--un--<_Ord_Visibility'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--min_Ord_TotalReq'(V0, V1) -> case ('dn--un--<_Ord_TotalReq'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--min_Ord_Precision'(V0, V1) -> case ('dn--un--<_Ord_Precision'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_Visibility'(V0, V1) -> case ('dn--un-->_Ord_Visibility'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_TotalReq'(V0, V1) -> case ('dn--un-->_Ord_TotalReq'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--max_Ord_Precision'(V0, V1) -> case ('dn--un-->_Ord_Precision'(V0, V1)) of 1 -> V0; 0 -> V1 end.
'dn--un--map_Functor_WhyErased'(V0, V1) -> case V1 of {'Core.TT.Placeholder'} -> {'Core.TT.Placeholder'}; {'Core.TT.Impossible'} -> {'Core.TT.Impossible'}; {'Core.TT.Dotted', V2} -> {'Core.TT.Dotted', (V0(V2))} end.
'dn--un--map_Functor_PiInfo'(V0, V1) -> case V1 of {'Core.TT.Explicit'} -> {'Core.TT.Explicit'}; {'Core.TT.Implicit'} -> {'Core.TT.Implicit'}; {'Core.TT.AutoImplicit'} -> {'Core.TT.AutoImplicit'}; {'Core.TT.DefImplicit', V2} -> {'Core.TT.DefImplicit', (V0(V2))} end.
'dn--un--map_Functor_Binder'(V0, V1) -> case V1 of {'Core.TT.Lam', V2, V3, V4, V5} -> {'Core.TT.Lam', V2, V3, ('dn--un--map_Functor_PiInfo'(V0, V4)), (V0(V5))}; {'Core.TT.Let', V6, V7, V8, V9} -> {'Core.TT.Let', V6, V7, (V0(V8)), (V0(V9))}; {'Core.TT.Pi', V10, V11, V12, V13} -> {'Core.TT.Pi', V10, V11, ('dn--un--map_Functor_PiInfo'(V0, V12)), (V0(V13))}; {'Core.TT.PVar', V14, V15, V16, V17} -> {'Core.TT.PVar', V14, V15, ('dn--un--map_Functor_PiInfo'(V0, V16)), (V0(V17))}; {'Core.TT.PLet', V18, V19, V20, V21} -> {'Core.TT.PLet', V18, V19, (V0(V20)), (V0(V21))}; {'Core.TT.PVTy', V22, V23, V24} -> {'Core.TT.PVTy', V22, V23, (V0(V24))} end.
'dn--un--foldr_Foldable_WhyErased'(V0, V1, V2) -> case V2 of {'Core.TT.Dotted', V3} -> ((V0(V3))(V1)); _ -> V1 end.
'dn--un--foldr_Foldable_PiInfo'(V0, V1, V2) -> case V2 of {'Core.TT.Implicit'} -> V1; {'Core.TT.Explicit'} -> V1; {'Core.TT.AutoImplicit'} -> V1; {'Core.TT.DefImplicit', V3} -> ((V0(V3))(V1)) end.
'dn--un--foldr_Foldable_Binder'(V0, V1, V2) -> case V2 of {'Core.TT.Lam', V3, V4, V5, V6} -> ('dn--un--foldr_Foldable_PiInfo'(V0, ((V0(V6))(V1)), V5)); {'Core.TT.Let', V7, V8, V9, V10} -> ((V0(V9))(((V0(V10))(V1)))); {'Core.TT.Pi', V11, V12, V13, V14} -> ('dn--un--foldr_Foldable_PiInfo'(V0, ((V0(V14))(V1)), V13)); {'Core.TT.PVar', V15, V16, V17, V18} -> ('dn--un--foldr_Foldable_PiInfo'(V0, ((V0(V18))(V1)), V17)); {'Core.TT.PLet', V19, V20, V21, V22} -> ((V0(V21))(((V0(V22))(V1)))); {'Core.TT.PVTy', V23, V24, V25} -> ((V0(V25))(V1)) end.
'dn--un--foldl_Foldable_WhyErased'(V0, V1, V2) -> (('dn--un--foldr_Foldable_WhyErased'(fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> fun (V7) -> (V5((V6(V7)))) end end end, fun (V8) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V0, V3, V8)) end, V4)) end end, fun (V9) -> V9 end, V2))(V1)).
'dn--un--foldl_Foldable_PiInfo'(V0, V1, V2) -> (('dn--un--foldr_Foldable_PiInfo'(fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> fun (V7) -> (V5((V6(V7)))) end end end, fun (V8) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V0, V3, V8)) end, V4)) end end, fun (V9) -> V9 end, V2))(V1)).
'dn--un--foldl_Foldable_Binder'(V0, V1, V2) -> (('dn--un--foldr_Foldable_Binder'(fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> fun (V7) -> (V5((V6(V7)))) end end end, fun (V8) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V0, V3, V8)) end, V4)) end end, fun (V9) -> V9 end, V2))(V1)).
'dn--un--foldlM_Foldable_WhyErased'(V0, V1, V2, V3) -> ('dn--un--foldl_Foldable_WhyErased'(fun (V4) -> fun (V5) -> case V0 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V5, V9)) end)) end end end, case V0 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> ((V14('erased'))(V2)) end end, V3)).
'dn--un--foldlM_Foldable_PiInfo'(V0, V1, V2, V3) -> ('dn--un--foldl_Foldable_PiInfo'(fun (V4) -> fun (V5) -> case V0 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V5, V9)) end)) end end end, case V0 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> ((V14('erased'))(V2)) end end, V3)).
'dn--un--foldlM_Foldable_Binder'(V0, V1, V2, V3) -> ('dn--un--foldl_Foldable_Binder'(fun (V4) -> fun (V5) -> case V0 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V5, V9)) end)) end end end, case V0 of {'Prelude.Interfaces.MkMonad', V10, V11, V12} -> case V10 of {'Prelude.Interfaces.MkApplicative', V13, V14, V15} -> ((V14('erased'))(V2)) end end, V3)).
'dn--un--foldMap_Foldable_WhyErased'(V0, V1, V2) -> ('dn--un--foldr_Foldable_WhyErased'(fun (V3) -> (begin (V6 = case V0 of {'Prelude.Interfaces.MkMonoid', V4, V5} -> V4 end), fun (V7) -> fun (V8) -> ((V6(V7))(V8)) end end end((V1(V3)))) end, case V0 of {'Prelude.Interfaces.MkMonoid', V9, V10} -> V10 end, V2)).
'dn--un--foldMap_Foldable_PiInfo'(V0, V1, V2) -> ('dn--un--foldr_Foldable_PiInfo'(fun (V3) -> (begin (V6 = case V0 of {'Prelude.Interfaces.MkMonoid', V4, V5} -> V4 end), fun (V7) -> fun (V8) -> ((V6(V7))(V8)) end end end((V1(V3)))) end, case V0 of {'Prelude.Interfaces.MkMonoid', V9, V10} -> V10 end, V2)).
'dn--un--foldMap_Foldable_Binder'(V0, V1, V2) -> ('dn--un--foldr_Foldable_Binder'(fun (V3) -> (begin (V6 = case V0 of {'Prelude.Interfaces.MkMonoid', V4, V5} -> V4 end), fun (V7) -> fun (V8) -> ((V6(V7))(V8)) end end end((V1(V3)))) end, case V0 of {'Prelude.Interfaces.MkMonoid', V9, V10} -> V10 end, V2)).
'dn--un--compare_Ord_Visibility'(V0, V1) -> case V0 of 0 -> case V1 of 1 -> 0; 2 -> 0; 0 -> 1 end; 1 -> case V1 of 2 -> 0; 1 -> 1; 0 -> 2 end; 2 -> case V1 of 2 -> 1; 0 -> 2; 1 -> 2 end end.
'dn--un--compare_Ord_TotalReq'(V0, V1) -> case ('dn--un--<_Ord_TotalReq'(V0, V1)) of 1 -> 0; 0 -> case ('dn--un--==_Eq_TotalReq'(V0, V1)) of 1 -> 1; 0 -> 2 end end.
'dn--un--compare_Ord_Precision'(V0, V1) -> case V0 of {'Core.TT.P', V2} -> case V1 of {'Core.TT.P', V3} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2, V3)); _ -> case V1 of {'Core.TT.Unlimited'} -> 0 end end; {'Core.TT.Unlimited'} -> case V1 of {'Core.TT.Unlimited'} -> 1; _ -> 2 end; _ -> case V1 of {'Core.TT.Unlimited'} -> 0 end end.
'dn--un--__Impl_Weaken_Var'() -> {'Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_Var'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_Var'(V5, V6)) end end end end}.
'dn--un--__Impl_Weaken_Term'() -> {'Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_Term'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_Term'(V5, V6)) end end end end}.
'dn--un--__Impl_Traversable_WhyErased'() -> {'Prelude.Interfaces.MkTraversable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_WhyErased'(V2, V3)) end end end end, {'Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--foldr_Foldable_WhyErased'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--foldl_Foldable_WhyErased'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('dn--un--null_Foldable_WhyErased'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--foldlM_Foldable_WhyErased'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('dn--un--toList_Foldable_WhyErased'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--foldMap_Foldable_WhyErased'(V27, V28, V29)) end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--traverse_Traversable_WhyErased'(V33, V34, V35)) end end end end end end}.
'dn--un--__Impl_Traversable_PiInfo'() -> {'Prelude.Interfaces.MkTraversable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_PiInfo'(V2, V3)) end end end end, {'Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--foldr_Foldable_PiInfo'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--foldl_Foldable_PiInfo'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('dn--un--null_Foldable_PiInfo'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--foldlM_Foldable_PiInfo'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('dn--un--toList_Foldable_PiInfo'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--foldMap_Foldable_PiInfo'(V27, V28, V29)) end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--traverse_Traversable_PiInfo'(V33, V34, V35)) end end end end end end}.
'dn--un--__Impl_Traversable_Binder'() -> {'Prelude.Interfaces.MkTraversable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_Binder'(V2, V3)) end end end end, {'Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--foldr_Foldable_Binder'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--foldl_Foldable_Binder'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('dn--un--null_Foldable_Binder'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--foldlM_Foldable_Binder'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('dn--un--toList_Foldable_Binder'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--foldMap_Foldable_Binder'(V27, V28, V29)) end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--traverse_Traversable_Binder'(V33, V34, V35)) end end end end end end}.
'dn--un--__Impl_StripNamespace_(Term $vars)'() -> {'Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Show_Visibility'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Visibility'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Visibility'(V1, V2)) end end}.
'dn--un--__Impl_Show_Totality'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Totality'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Totality'(V1, V2)) end end}.
'dn--un--__Impl_Show_TotalReq'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_TotalReq'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_TotalReq'(V1, V2)) end end}.
'dn--un--__Impl_Show_Terminating'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Terminating'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Terminating'(V1, V2)) end end}.
'dn--un--__Impl_Show_PrimType'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PrimType'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PrimType'(V1, V2)) end end}.
'dn--un--__Impl_Show_PartialReason'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PartialReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PartialReason'(V1, V2)) end end}.
'dn--un--__Impl_Show_NameType'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_NameType'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_NameType'(V1, V2)) end end}.
'dn--un--__Impl_Show_LazyReason'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_LazyReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_LazyReason'(V1, V2)) end end}.
'dn--un--__Impl_Show_KindedName'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_KindedName'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_KindedName'(V1, V2)) end end}.
'dn--un--__Impl_Show_Covering'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Covering'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Covering'(V1, V2)) end end}.
'dn--un--__Impl_Show_Constant'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Constant'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Constant'(V1, V2)) end end}.
'dn--un--__Impl_Show_(Var $ns)'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_(Var $ns)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_(Var $ns)'(V1, V2)) end end}.
'dn--un--__Impl_Show_(Term $vars)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(Term $vars)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(Term $vars)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(PrimFn $arity)'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_(PrimFn $arity)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_(PrimFn $arity)'(V1, V2)) end end}.
'dn--un--__Impl_Show_(PiInfo $t)'(V0) -> {'Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(PiInfo $t)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(PiInfo $t)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Pretty_Void_Visibility'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_Visibility'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_Visibility'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_Totality'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_Totality'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_Totality'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_Terminating'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_Terminating'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_Terminating'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_PartialReason'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_PartialReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_PartialReason'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Void_Covering'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_Void_Covering'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_Void_Covering'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_IdrisSyntax_Constant'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_IdrisSyntax_Constant'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_IdrisSyntax_Constant'(V1, V2)) end end}.
'dn--un--__Impl_Ord_Visibility'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Visibility'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Visibility'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_Visibility'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_Visibility'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_Visibility'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_Visibility'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_Visibility'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_Visibility'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_Visibility'(V16, V17)) end end}.
'dn--un--__Impl_Ord_TotalReq'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_TotalReq'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_TotalReq'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_TotalReq'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_TotalReq'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_TotalReq'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_TotalReq'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_TotalReq'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_TotalReq'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_TotalReq'(V16, V17)) end end}.
'dn--un--__Impl_Ord_Precision'() -> {'Prelude.EqOrd.MkOrd', {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Precision'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Precision'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_Precision'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_Precision'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_Precision'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_Precision'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_Precision'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_Precision'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_Precision'(V16, V17)) end end}.
'dn--un--__Impl_Functor_WhyErased'(V0, V1, V2, V3) -> ('dn--un--map_Functor_WhyErased'(V2, V3)).
'dn--un--__Impl_Functor_PiInfo'(V0, V1, V2, V3) -> ('dn--un--map_Functor_PiInfo'(V2, V3)).
'dn--un--__Impl_Functor_Binder'(V0, V1, V2, V3) -> ('dn--un--map_Functor_Binder'(V2, V3)).
'dn--un--__Impl_Foldable_WhyErased'() -> {'Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--foldr_Foldable_WhyErased'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--foldl_Foldable_WhyErased'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('dn--un--null_Foldable_WhyErased'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--foldlM_Foldable_WhyErased'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('dn--un--toList_Foldable_WhyErased'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--foldMap_Foldable_WhyErased'(V23, V24, V25)) end end end end end}.
'dn--un--__Impl_Foldable_PiInfo'() -> {'Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--foldr_Foldable_PiInfo'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--foldl_Foldable_PiInfo'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('dn--un--null_Foldable_PiInfo'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--foldlM_Foldable_PiInfo'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('dn--un--toList_Foldable_PiInfo'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--foldMap_Foldable_PiInfo'(V23, V24, V25)) end end end end end}.
'dn--un--__Impl_Foldable_Binder'() -> {'Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--foldr_Foldable_Binder'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--foldl_Foldable_Binder'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('dn--un--null_Foldable_Binder'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--foldlM_Foldable_Binder'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('dn--un--toList_Foldable_Binder'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--foldMap_Foldable_Binder'(V23, V24, V25)) end end end end end}.
'dn--un--__Impl_Eq_Visibility'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Visibility'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Visibility'(V2, V3)) end end}.
'dn--un--__Impl_Eq_TotalReq'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_TotalReq'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_TotalReq'(V2, V3)) end end}.
'dn--un--__Impl_Eq_PrimType'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PrimType'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PrimType'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Precision'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Precision'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Precision'(V2, V3)) end end}.
'dn--un--__Impl_Eq_LazyReason'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_LazyReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_LazyReason'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Constant'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Constant'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Constant'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(WhyErased $a)'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(WhyErased $a)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_(WhyErased $a)'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_(Term $vars)'() -> {'Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(Term $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(Term $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(PiInfo $t)'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(PiInfo $t)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_(PiInfo $t)'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_(Binder $a)'(V0) -> {'Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(Binder $a)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_(Binder $a)'(V0, V3, V4)) end end}.
'dn--un-->_Ord_Visibility'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Visibility'(V0, V1)), 2)).
'dn--un-->_Ord_TotalReq'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_TotalReq'(V0, V1)), 2)).
'dn--un-->_Ord_Precision'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Precision'(V0, V1)), 2)).
'dn--un-->=_Ord_Visibility'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Visibility'(V0, V1)), 0)).
'dn--un-->=_Ord_TotalReq'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_TotalReq'(V0, V1)), 0)).
'dn--un-->=_Ord_Precision'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Precision'(V0, V1)), 0)).
'dn--un--==_Eq_Visibility'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_TotalReq'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_PrimType'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; 3 -> case V1 of 3 -> 1; _ -> 0 end; 4 -> case V1 of 4 -> 1; _ -> 0 end; 5 -> case V1 of 5 -> 1; _ -> 0 end; 6 -> case V1 of 6 -> 1; _ -> 0 end; 7 -> case V1 of 7 -> 1; _ -> 0 end; 8 -> case V1 of 8 -> 1; _ -> 0 end; 9 -> case V1 of 9 -> 1; _ -> 0 end; 10 -> case V1 of 10 -> 1; _ -> 0 end; 11 -> case V1 of 11 -> 1; _ -> 0 end; 12 -> case V1 of 12 -> 1; _ -> 0 end; 13 -> case V1 of 13 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_Precision'(V0, V1) -> case V0 of {'Core.TT.P', V2} -> case V1 of {'Core.TT.P', V3} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V3)); _ -> 0 end; {'Core.TT.Unlimited'} -> case V1 of {'Core.TT.Unlimited'} -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_LazyReason'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_Constant'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V3)); _ -> 0 end; {'Core.TT.I8', V4} -> case V1 of {'Core.TT.I8', V5} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int8'(V4, V5)); _ -> 0 end; {'Core.TT.I16', V6} -> case V1 of {'Core.TT.I16', V7} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int16'(V6, V7)); _ -> 0 end; {'Core.TT.I32', V8} -> case V1 of {'Core.TT.I32', V9} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int32'(V8, V9)); _ -> 0 end; {'Core.TT.I64', V10} -> case V1 of {'Core.TT.I64', V11} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int64'(V10, V11)); _ -> 0 end; {'Core.TT.BI', V12} -> case V1 of {'Core.TT.BI', V13} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V12, V13)); _ -> 0 end; {'Core.TT.B8', V14} -> case V1 of {'Core.TT.B8', V15} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bits8'(V14, V15)); _ -> 0 end; {'Core.TT.B16', V16} -> case V1 of {'Core.TT.B16', V17} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bits16'(V16, V17)); _ -> 0 end; {'Core.TT.B32', V18} -> case V1 of {'Core.TT.B32', V19} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bits32'(V18, V19)); _ -> 0 end; {'Core.TT.B64', V20} -> case V1 of {'Core.TT.B64', V21} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bits64'(V20, V21)); _ -> 0 end; {'Core.TT.Str', V22} -> case V1 of {'Core.TT.Str', V23} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V22, V23)); _ -> 0 end; {'Core.TT.Ch', V24} -> case V1 of {'Core.TT.Ch', V25} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V24, V25)); _ -> 0 end; {'Core.TT.Db', V26} -> case V1 of {'Core.TT.Db', V27} -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Double'(V26, V27)); _ -> 0 end; {'Core.TT.PrT', V28} -> case V1 of {'Core.TT.PrT', V29} -> ('dn--un--==_Eq_PrimType'(V28, V29)); _ -> 0 end; {'Core.TT.WorldVal'} -> case V1 of {'Core.TT.WorldVal'} -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_(WhyErased $a)'(V0, V1, V2) -> case V1 of {'Core.TT.Placeholder'} -> case V2 of {'Core.TT.Placeholder'} -> 1; _ -> 0 end; {'Core.TT.Impossible'} -> case V2 of {'Core.TT.Impossible'} -> 1; _ -> 0 end; {'Core.TT.Dotted', V3} -> case V2 of {'Core.TT.Dotted', V4} -> case V0 of {'Prelude.EqOrd.MkEq', V5, V6} -> ((V5(V3))(V4)) end; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_(Term $vars)'(V0, V1) -> case V0 of {'Core.TT.Local', V2, V3, V4} -> case V1 of {'Core.TT.Local', V5, V6, V7} -> case (V4 =:= V7) of 'false' -> 0; _ -> 1 end; _ -> 0 end; {'Core.TT.Ref', V8, V9, V10} -> case V1 of {'Core.TT.Ref', V11, V12, V13} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V13)); _ -> 0 end; {'Core.TT.Meta', V14, V15, V16, V17} -> case V1 of {'Core.TT.Meta', V18, V19, V20, V21} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V16, V20)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('dn--un--==_Eq_(Term $vars)'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('dn--un--/=_Eq_(Term $vars)'(V24, V25)) end end}, V17, V21)); 0 -> 0 end; _ -> 0 end; {'Core.TT.Bind', V26, V27, V28, V29} -> case V1 of {'Core.TT.Bind', V30, V31, V32, V33} -> case ('dn--un--==_Eq_(Binder $a)'({'Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('dn--un--==_Eq_(Term $vars)'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('dn--un--/=_Eq_(Term $vars)'(V36, V37)) end end}, V28, V32)) of 1 -> ('dn--un--==_Eq_(Term $vars)'(V29, V33)); 0 -> 0 end; _ -> 0 end; {'Core.TT.App', V38, V39, V40} -> case V1 of {'Core.TT.App', V41, V42, V43} -> case ('dn--un--==_Eq_(Term $vars)'(V39, V42)) of 1 -> ('dn--un--==_Eq_(Term $vars)'(V40, V43)); 0 -> 0 end; _ -> 0 end; {'Core.TT.As', V44, V45, V46, V47} -> case V1 of {'Core.TT.As', V48, V49, V50, V51} -> case ('dn--un--==_Eq_(Term $vars)'(V46, V50)) of 1 -> ('dn--un--==_Eq_(Term $vars)'(V47, V51)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TDelayed', V52, V53, V54} -> case V1 of {'Core.TT.TDelayed', V55, V56, V57} -> ('dn--un--==_Eq_(Term $vars)'(V54, V57)); _ -> 0 end; {'Core.TT.TDelay', V58, V59, V60, V61} -> case V1 of {'Core.TT.TDelay', V62, V63, V64, V65} -> case ('dn--un--==_Eq_(Term $vars)'(V60, V64)) of 1 -> ('dn--un--==_Eq_(Term $vars)'(V61, V65)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TForce', V66, V67, V68} -> case V1 of {'Core.TT.TForce', V69, V70, V71} -> ('dn--un--==_Eq_(Term $vars)'(V68, V71)); _ -> 0 end; {'Core.TT.PrimVal', V72, V73} -> case V1 of {'Core.TT.PrimVal', V74, V75} -> ('dn--un--==_Eq_Constant'(V73, V75)); _ -> 0 end; {'Core.TT.Erased', V76, V77} -> case V1 of {'Core.TT.Erased', V78, V79} -> ('dn--un--==_Eq_(WhyErased $a)'({'Prelude.EqOrd.MkEq', fun (V80) -> fun (V81) -> ('dn--un--==_Eq_(Term $vars)'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('dn--un--/=_Eq_(Term $vars)'(V82, V83)) end end}, V77, V79)); _ -> 0 end; {'Core.TT.TType', V84, V85} -> case V1 of {'Core.TT.TType', V86, V87} -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_(PiInfo $t)'(V0, V1, V2) -> ('un--eqPiInfoBy'(fun (V3) -> fun (V4) -> case V0 of {'Prelude.EqOrd.MkEq', V5, V6} -> ((V5(V3))(V4)) end end end, V1, V2)).
'dn--un--==_Eq_(Binder $a)'(V0, V1, V2) -> ('un--eqBinderBy'(fun (V3) -> fun (V4) -> case V0 of {'Prelude.EqOrd.MkEq', V5, V6} -> ((V5(V3))(V4)) end end end, V1, V2)).
'dn--un--<_Ord_Visibility'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Visibility'(V0, V1)), 0)).
'dn--un--<_Ord_TotalReq'(V0, V1) -> case ('dn--un--<=_Ord_TotalReq'(V0, V1)) of 1 -> ('dn--un--/=_Eq_TotalReq'(V0, V1)); 0 -> 0 end.
'dn--un--<_Ord_Precision'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Precision'(V0, V1)), 0)).
'dn--un--<=_Ord_Visibility'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Visibility'(V0, V1)), 2)).
'dn--un--<=_Ord_TotalReq'(V0, V1) -> case V0 of 2 -> 1; _ -> case V1 of 0 -> 1; _ -> ('dn--un--==_Eq_TotalReq'(V0, V1)) end end.
'dn--un--<=_Ord_Precision'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Precision'(V0, V1)), 2)).
'dn--un--/=_Eq_Visibility'(V0, V1) -> case ('dn--un--==_Eq_Visibility'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_TotalReq'(V0, V1) -> case ('dn--un--==_Eq_TotalReq'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_PrimType'(V0, V1) -> case ('dn--un--==_Eq_PrimType'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_Precision'(V0, V1) -> case ('dn--un--==_Eq_Precision'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_LazyReason'(V0, V1) -> case ('dn--un--==_Eq_LazyReason'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_Constant'(V0, V1) -> case ('dn--un--==_Eq_Constant'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_(WhyErased $a)'(V0, V1, V2) -> case ('dn--un--==_Eq_(WhyErased $a)'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_(Term $vars)'(V0, V1) -> case ('dn--un--==_Eq_(Term $vars)'(V0, V1)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_(PiInfo $t)'(V0, V1, V2) -> case ('dn--un--==_Eq_(PiInfo $t)'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'dn--un--/=_Eq_(Binder $a)'(V0, V1, V2) -> case ('dn--un--==_Eq_(Binder $a)'(V0, V1, V2)) of 1 -> 0; 0 -> 1 end.
'un--withPiInfo'(V0, V1, V2) -> case V1 of {'Core.TT.Explicit'} -> <<<<"("/utf8>>/binary, <<V2/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.TT.Implicit'} -> <<<<"{"/utf8>>/binary, <<V2/binary, <<"}"/utf8>>/binary>>/binary>>; {'Core.TT.AutoImplicit'} -> <<<<"{auto "/utf8>>/binary, <<V2/binary, <<"}"/utf8>>/binary>>/binary>>; {'Core.TT.DefImplicit', V3} -> <<<<"{default "/utf8>>/binary, <<case V0 of {'Prelude.Show.MkShow', V4, V5} -> (V4(V3)) end/binary, <<<<" "/utf8>>/binary, <<V2/binary, <<"}"/utf8>>/binary>>/binary>>/binary>>/binary>> end.
'un--weakenVar'(V0, V1) -> begin (V2 = V1), begin (V3 = ('un--weakenNVar'(V0, V2))), V3 end end.
'un--weakenNs'(V0, V1, V2) -> case V0 of {'Core.TT.dn--un--__mkWeaken', V3, V4} -> ((((V4('erased'))('erased'))(V1))(V2)) end.
'un--weakenNVar'(V0, V1) -> begin (V2 = V0), begin (V3 = V1), (V2 + V3) end end.
'un--weaken'(V0, V1) -> case V0 of {'Core.TT.dn--un--__mkWeaken', V2, V3} -> (((V2('erased'))('erased'))(V1)) end.
'un--varIdx'(V0) -> begin (V1 = V0), V1 end.
'un--varExtend'(V0) -> V0.
'un--varEmbedSub'(V0, V1) -> case V0 of {'Core.TT.SubRefl'} -> V1; {'Core.TT.DropCons', V2} -> begin (V3 = ('un--varEmbedSub'(V2, V1))), (V3 + 1) end; {'Core.TT.KeepCons', V4} -> case V1 of 0 -> 0; _ -> begin (V5 = (V1 - 1)), begin (V6 = ('un--varEmbedSub'(V4, V5))), (V6 + 1) end end end end.
'un--unchecked'() -> {'Core.TT.MkTotality', {'Core.TT.Unchecked'}, {'Core.TT.IsCovering'}}.
'un--trimNS'(V0, V1, V2) -> case V0 of {'Core.TT.dn--un--__mkStripNamespace', V3, V4} -> ((V3(V1))(V2)) end.
'un--substName'(V0, V1, V2) -> case V2 of {'Core.TT.Ref', V3, V4, V5} -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V0, V5)) of {'Prelude.Types.Nothing'} -> {'Core.TT.Ref', V3, V4, V5}; {'Prelude.Types.Just', V6} -> V1 end; {'Core.TT.Meta', V7, V8, V9, V10} -> {'Core.TT.Meta', V7, V8, V9, ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> ('un--substName'(V0, V1, V11)) end))(V10))}; {'Core.TT.Bind', V19, V20, V21, V22} -> {'Core.TT.Bind', V19, V20, ('dn--un--map_Functor_Binder'(fun (V23) -> ('un--substName'(V0, V1, V23)) end, V21)), ('un--substName'(V0, ('dn--un--weaken_Weaken_Term'(V1)), V22))}; {'Core.TT.App', V24, V25, V26} -> {'Core.TT.App', V24, ('un--substName'(V0, V1, V25)), ('un--substName'(V0, V1, V26))}; {'Core.TT.As', V27, V28, V29, V30} -> {'Core.TT.As', V27, V28, V29, ('un--substName'(V0, V1, V30))}; {'Core.TT.TDelayed', V31, V32, V33} -> {'Core.TT.TDelayed', V31, V32, ('un--substName'(V0, V1, V33))}; {'Core.TT.TDelay', V34, V35, V36, V37} -> {'Core.TT.TDelay', V34, V35, ('un--substName'(V0, V1, V36)), ('un--substName'(V0, V1, V37))}; {'Core.TT.TForce', V38, V39, V40} -> {'Core.TT.TForce', V38, V39, ('un--substName'(V0, V1, V40))}; _ -> V2 end.
'un--subInclude'(V0, V1) -> V1.
'un--subExtend'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> {'Core.TT.KeepCons', ('un--subExtend'(V3, V1))} end(E0, E1)) end.
'un--subElem'(V0, V1) -> case V1 of {'Core.TT.SubRefl'} -> {'Prelude.Types.Just', V0}; _ -> case V0 of 0 -> case V1 of {'Core.TT.DropCons', V2} -> {'Prelude.Types.Nothing'}; {'Core.TT.KeepCons', V3} -> {'Prelude.Types.Just', 0} end; _ -> begin (V4 = (V0 - 1)), case V1 of {'Core.TT.DropCons', V5} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--subElem'(V4, V5)), fun (V6) -> begin (V7 = V6), {'Prelude.Types.Just', V7} end end)); {'Core.TT.KeepCons', V8} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--subElem'(V4, V8)), fun (V9) -> begin (V10 = V9), {'Prelude.Types.Just', (V10 + 1)} end end)) end end end end.
'un--sizedView'(V0) -> begin (V1 = V0), case V1 of 0 -> {'Core.TT.SizedView.Z'}; _ -> begin (V2 = (V1 - 1)), {'Core.TT.SizedView.S', V2} end end end.
'un--shrinkVar'(V0, V1) -> begin (V2 = V0), ('un--subElem'(V2, V1)) end.
'un--shrinkTerm'(V0, V1) -> case V0 of {'Core.TT.Local', V2, V3, V4} -> ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V5) -> begin (V6 = V5), {'Core.TT.Local', V2, V3, V6} end end))(('un--subElem'(V4, V1)))); {'Core.TT.Ref', V14, V15, V16} -> {'Prelude.Types.Just', {'Core.TT.Ref', V14, V15, V16}}; {'Core.TT.Meta', V17, V18, V19, V20} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Prelude.Interfaces.MkApplicative', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V23, V24)) end end end end, fun (V25) -> fun (V26) -> {'Prelude.Types.Just', V26} end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V29, V30)) end end end end}, fun (V31) -> ('un--shrinkTerm'(V31, V1)) end, V20)), fun (V32) -> {'Prelude.Types.Just', {'Core.TT.Meta', V17, V18, V19, V32}} end)); {'Core.TT.Bind', V33, V34, V35, V36} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkBinder'(V35, V1)), fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V36, {'Core.TT.KeepCons', V1})), fun (V38) -> {'Prelude.Types.Just', {'Core.TT.Bind', V33, V34, V37, V38}} end)) end)); {'Core.TT.App', V39, V40, V41} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V40, V1)), fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V41, V1)), fun (V43) -> {'Prelude.Types.Just', {'Core.TT.App', V39, V42, V43}} end)) end)); {'Core.TT.As', V44, V45, V46, V47} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V46, V1)), fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V47, V1)), fun (V49) -> {'Prelude.Types.Just', {'Core.TT.As', V44, V45, V48, V49}} end)) end)); {'Core.TT.TDelayed', V50, V51, V52} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V52, V1)), fun (V53) -> {'Prelude.Types.Just', {'Core.TT.TDelayed', V50, V51, V53}} end)); {'Core.TT.TDelay', V54, V55, V56, V57} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V56, V1)), fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V57, V1)), fun (V59) -> {'Prelude.Types.Just', {'Core.TT.TDelay', V54, V55, V58, V59}} end)) end)); {'Core.TT.TForce', V60, V61, V62} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V62, V1)), fun (V63) -> {'Prelude.Types.Just', {'Core.TT.TForce', V60, V61, V63}} end)); {'Core.TT.PrimVal', V64, V65} -> {'Prelude.Types.Just', {'Core.TT.PrimVal', V64, V65}}; {'Core.TT.Erased', V66, V67} -> case V67 of {'Core.TT.Placeholder'} -> {'Prelude.Types.Just', {'Core.TT.Erased', V66, {'Core.TT.Placeholder'}}}; {'Core.TT.Impossible'} -> {'Prelude.Types.Just', {'Core.TT.Erased', V66, {'Core.TT.Impossible'}}}; {'Core.TT.Dotted', V68} -> ((begin (V74 = fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V72, V73)) end end end end), fun (V75) -> fun (V76) -> ((((V74('erased'))('erased'))(V75))(V76)) end end end(fun (V69) -> {'Core.TT.Erased', V66, {'Core.TT.Dotted', V69}} end))(('un--shrinkTerm'(V68, V1)))) end; {'Core.TT.TType', V77, V78} -> {'Prelude.Types.Just', {'Core.TT.TType', V77, V78}} end.
'un--shrinkPi'(V0, V1) -> case V0 of {'Core.TT.Explicit'} -> {'Prelude.Types.Just', {'Core.TT.Explicit'}}; {'Core.TT.Implicit'} -> {'Prelude.Types.Just', {'Core.TT.Implicit'}}; {'Core.TT.AutoImplicit'} -> {'Prelude.Types.Just', {'Core.TT.AutoImplicit'}}; {'Core.TT.DefImplicit', V2} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V2, V1)), fun (V3) -> {'Prelude.Types.Just', {'Core.TT.DefImplicit', V3}} end)) end.
'un--shrinkBinder'(V0, V1) -> case V0 of {'Core.TT.Lam', V2, V3, V4, V5} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkPi'(V4, V1)), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V5, V1)), fun (V7) -> {'Prelude.Types.Just', {'Core.TT.Lam', V2, V3, V6, V7}} end)) end)); {'Core.TT.Let', V8, V9, V10, V11} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V10, V1)), fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V11, V1)), fun (V13) -> {'Prelude.Types.Just', {'Core.TT.Let', V8, V9, V12, V13}} end)) end)); {'Core.TT.Pi', V14, V15, V16, V17} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkPi'(V16, V1)), fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V17, V1)), fun (V19) -> {'Prelude.Types.Just', {'Core.TT.Pi', V14, V15, V18, V19}} end)) end)); {'Core.TT.PVar', V20, V21, V22, V23} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkPi'(V22, V1)), fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V23, V1)), fun (V25) -> {'Prelude.Types.Just', {'Core.TT.PVar', V20, V21, V24, V25}} end)) end)); {'Core.TT.PLet', V26, V27, V28, V29} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V28, V1)), fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V29, V1)), fun (V31) -> {'Prelude.Types.Just', {'Core.TT.PLet', V26, V27, V30, V31}} end)) end)); {'Core.TT.PVTy', V32, V33, V34} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V34, V1)), fun (V35) -> {'Prelude.Types.Just', {'Core.TT.PVTy', V32, V33, V35}} end)) end.
'un--setType'(V0, V1) -> case V0 of {'Core.TT.Lam', V2, V3, V4, V5} -> {'Core.TT.Lam', V2, V3, V4, V1}; {'Core.TT.Let', V6, V7, V8, V9} -> {'Core.TT.Let', V6, V7, V8, V1}; {'Core.TT.Pi', V10, V11, V12, V13} -> {'Core.TT.Pi', V10, V11, V12, V1}; {'Core.TT.PVar', V14, V15, V16, V17} -> {'Core.TT.PVar', V14, V15, V16, V1}; {'Core.TT.PLet', V18, V19, V20, V21} -> {'Core.TT.PLet', V18, V19, V20, V1}; {'Core.TT.PVTy', V22, V23, V24} -> {'Core.TT.PVTy', V22, V23, V1} end.
'un--setMultiplicity'(V0, V1) -> case V0 of {'Core.TT.Lam', V2, V3, V4, V5} -> {'Core.TT.Lam', V2, V1, V4, V5}; {'Core.TT.Let', V6, V7, V8, V9} -> {'Core.TT.Let', V6, V1, V8, V9}; {'Core.TT.Pi', V10, V11, V12, V13} -> {'Core.TT.Pi', V10, V1, V12, V13}; {'Core.TT.PVar', V14, V15, V16, V17} -> {'Core.TT.PVar', V14, V1, V16, V17}; {'Core.TT.PLet', V18, V19, V20, V21} -> {'Core.TT.PLet', V18, V1, V20, V21}; {'Core.TT.PVTy', V22, V23, V24} -> {'Core.TT.PVTy', V22, V1, V24} end.
'un--sameVar'(V0, V1) -> begin (V2 = V0), begin (V3 = V1), case (V2 =:= V3) of 'false' -> 0; _ -> 1 end end end.
'un--restoreNS'(V0, V1, V2) -> case V0 of {'Core.TT.dn--un--__mkStripNamespace', V3, V4} -> ((V4(V1))(V2)) end.
'un--resolveRef'(V0, V1, V2, V3, V4) -> case V2 of {'Core.TT.Bounds.None'} -> {'Prelude.Types.Nothing'}; {'Core.TT.Bounds.Add', V5, V6, V7} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V6)) of 1 -> begin (V8 = ('un--weakenNVar'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(V0, V1)), 0))), {'Prelude.Types.Just', {'Core.TT.Local', V3, {'Prelude.Types.Nothing'}, V8}} end; 0 -> ('un--resolveRef'(V0, ('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V1)), V7, V3, V4)) end end.
'un--resolveNames'(V0, V1) -> case V1 of {'Core.TT.Ref', V2, V3, V4} -> case V3 of {'Core.TT.Bound'} -> case ('un--isNVar'(V4, V0)) of {'Prelude.Types.Just', V5} -> begin (V6 = V5), {'Core.TT.Local', V2, {'Prelude.Types.Just', 0}, V6} end; _ -> {'Core.TT.Ref', V2, {'Core.TT.Bound'}, V4} end; _ -> V1 end; {'Core.TT.Meta', V7, V8, V9, V10} -> {'Core.TT.Meta', V7, V8, V9, ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> ('un--resolveNames'(V0, V11)) end))(V10))}; {'Core.TT.Bind', V19, V20, V21, V22} -> {'Core.TT.Bind', V19, V20, ('dn--un--map_Functor_Binder'(fun (V23) -> ('un--resolveNames'(V0, V23)) end, V21)), ('un--resolveNames'([V20 | V0], V22))}; {'Core.TT.App', V24, V25, V26} -> {'Core.TT.App', V24, ('un--resolveNames'(V0, V25)), ('un--resolveNames'(V0, V26))}; {'Core.TT.As', V27, V28, V29, V30} -> {'Core.TT.As', V27, V28, ('un--resolveNames'(V0, V29)), ('un--resolveNames'(V0, V30))}; {'Core.TT.TDelayed', V31, V32, V33} -> {'Core.TT.TDelayed', V31, V32, ('un--resolveNames'(V0, V33))}; {'Core.TT.TDelay', V34, V35, V36, V37} -> {'Core.TT.TDelay', V34, V35, ('un--resolveNames'(V0, V36)), ('un--resolveNames'(V0, V37))}; {'Core.TT.TForce', V38, V39, V40} -> {'Core.TT.TForce', V38, V39, ('un--resolveNames'(V0, V40))}; _ -> V1 end.
'un--renameVars'(V0, V1) -> V1.
'un--renameTop'(V0, V1) -> ('un--renameVars'(1, V1)).
'un--removeVar'(V0, V1) -> ('case--removeVar-12404'(V1, V0, ('un--sizedView'(V0)))).
'un--refsToLocals'(V0, V1) -> case V0 of {'Core.TT.Bounds.None'} -> V1; _ -> ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)) end.
'un--refToLocal'(V0, V1, V2) -> ('un--refsToLocals'({'Core.TT.Bounds.Add', V1, V0, {'Core.TT.Bounds.None'}}, V2)).
'un--primTypeTag'(V0) -> case V0 of 0 -> 3; 5 -> 4; 6 -> 5; 7 -> 6; 8 -> 7; 9 -> 8; 10 -> 9; 11 -> 10; 12 -> 11; 13 -> 12; 1 -> 13; 2 -> 14; 3 -> 15; 4 -> 16 end.
'un--primTypeEq'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; 1 -> case V1 of 1 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; 2 -> case V1 of 2 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; 3 -> case V1 of 3 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; 4 -> case V1 of 4 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; 5 -> case V1 of 5 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; 10 -> case V1 of 10 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; 11 -> case V1 of 11 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; 12 -> case V1 of 12 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; 13 -> case V1 of 13 -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--prettyOp'(V0, V1) -> case V0 of {'Core.TT.Add', V2} -> case V1 of {'Data.Vect.::', V3, V4} -> case V4 of {'Data.Vect.::', V5, V6} -> case V6 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V3, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V8 = fun (V7) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V7)) end), fun (V9) -> (V8(V9)) end end(<<"+"/utf8>>)))), V5)))) end end end; {'Core.TT.Sub', V10} -> case V1 of {'Data.Vect.::', V11, V12} -> case V12 of {'Data.Vect.::', V13, V14} -> case V14 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V11, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V16 = fun (V15) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V15)) end), fun (V17) -> (V16(V17)) end end(<<"-"/utf8>>)))), V13)))) end end end; {'Core.TT.Mul', V18} -> case V1 of {'Data.Vect.::', V19, V20} -> case V20 of {'Data.Vect.::', V21, V22} -> case V22 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V19, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V24 = fun (V23) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V23)) end), fun (V25) -> (V24(V25)) end end(<<"*"/utf8>>)))), V21)))) end end end; {'Core.TT.Div', V26} -> case V1 of {'Data.Vect.::', V27, V28} -> case V28 of {'Data.Vect.::', V29, V30} -> case V30 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V27, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V32 = fun (V31) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V31)) end), fun (V33) -> (V32(V33)) end end(<<"`div`"/utf8>>)))), V29)))) end end end; {'Core.TT.Mod', V34} -> case V1 of {'Data.Vect.::', V35, V36} -> case V36 of {'Data.Vect.::', V37, V38} -> case V38 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V35, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V40 = fun (V39) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V39)) end), fun (V41) -> (V40(V41)) end end(<<"`mod`"/utf8>>)))), V37)))) end end end; {'Core.TT.Neg', V42} -> case V1 of {'Data.Vect.::', V43, V44} -> case V44 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V46 = fun (V45) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V45)) end), fun (V47) -> (V46(V47)) end end(<<"-"/utf8>>)))), V43)) end end; {'Core.TT.ShiftL', V48} -> case V1 of {'Data.Vect.::', V49, V50} -> case V50 of {'Data.Vect.::', V51, V52} -> case V52 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V54 = fun (V53) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V53)) end), fun (V55) -> (V54(V55)) end end(<<"shiftl"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V49, V51)))) end end end; {'Core.TT.ShiftR', V56} -> case V1 of {'Data.Vect.::', V57, V58} -> case V58 of {'Data.Vect.::', V59, V60} -> case V60 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V62 = fun (V61) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V61)) end), fun (V63) -> (V62(V63)) end end(<<"shiftr"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V57, V59)))) end end end; {'Core.TT.BAnd', V64} -> case V1 of {'Data.Vect.::', V65, V66} -> case V66 of {'Data.Vect.::', V67, V68} -> case V68 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V65, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V70 = fun (V69) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V69)) end), fun (V71) -> (V70(V71)) end end(<<"&&"/utf8>>)))), V67)))) end end end; {'Core.TT.BOr', V72} -> case V1 of {'Data.Vect.::', V73, V74} -> case V74 of {'Data.Vect.::', V75, V76} -> case V76 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V73, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V78 = fun (V77) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V77)) end), fun (V79) -> (V78(V79)) end end(<<"||"/utf8>>)))), V75)))) end end end; {'Core.TT.BXOr', V80} -> case V1 of {'Data.Vect.::', V81, V82} -> case V82 of {'Data.Vect.::', V83, V84} -> case V84 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V81, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V86 = fun (V85) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V85)) end), fun (V87) -> (V86(V87)) end end(<<"`xor`"/utf8>>)))), V83)))) end end end; {'Core.TT.LT', V88} -> case V1 of {'Data.Vect.::', V89, V90} -> case V90 of {'Data.Vect.::', V91, V92} -> case V92 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V89, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V94 = fun (V93) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V93)) end), fun (V95) -> (V94(V95)) end end(<<"<"/utf8>>)))), V91)))) end end end; {'Core.TT.LTE', V96} -> case V1 of {'Data.Vect.::', V97, V98} -> case V98 of {'Data.Vect.::', V99, V100} -> case V100 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V97, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V102 = fun (V101) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V101)) end), fun (V103) -> (V102(V103)) end end(<<"<="/utf8>>)))), V99)))) end end end; {'Core.TT.EQ', V104} -> case V1 of {'Data.Vect.::', V105, V106} -> case V106 of {'Data.Vect.::', V107, V108} -> case V108 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V105, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V110 = fun (V109) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V109)) end), fun (V111) -> (V110(V111)) end end(<<"=="/utf8>>)))), V107)))) end end end; {'Core.TT.GTE', V112} -> case V1 of {'Data.Vect.::', V113, V114} -> case V114 of {'Data.Vect.::', V115, V116} -> case V116 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V113, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V118 = fun (V117) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V117)) end), fun (V119) -> (V118(V119)) end end(<<">="/utf8>>)))), V115)))) end end end; {'Core.TT.GT', V120} -> case V1 of {'Data.Vect.::', V121, V122} -> case V122 of {'Data.Vect.::', V123, V124} -> case V124 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V121, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V126 = fun (V125) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V125)) end), fun (V127) -> (V126(V127)) end end(<<">"/utf8>>)))), V123)))) end end end; {'Core.TT.StrLength'} -> case V1 of {'Data.Vect.::', V128, V129} -> case V129 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V131 = fun (V130) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V130)) end), fun (V132) -> (V131(V132)) end end(<<"length"/utf8>>)))), V128)) end end; {'Core.TT.StrHead'} -> case V1 of {'Data.Vect.::', V133, V134} -> case V134 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V136 = fun (V135) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V135)) end), fun (V137) -> (V136(V137)) end end(<<"head"/utf8>>)))), V133)) end end; {'Core.TT.StrTail'} -> case V1 of {'Data.Vect.::', V138, V139} -> case V139 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V141 = fun (V140) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V140)) end), fun (V142) -> (V141(V142)) end end(<<"tail"/utf8>>)))), V138)) end end; {'Core.TT.StrIndex'} -> case V1 of {'Data.Vect.::', V143, V144} -> case V144 of {'Data.Vect.::', V145, V146} -> case V146 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V143, ((begin (V160 = fun (V158) -> fun (V159) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V158, V159)) end end), fun (V161) -> fun (V162) -> ((V160(V161))(V162)) end end end(((begin (V155 = fun (V153) -> fun (V154) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V153, V154)) end end), fun (V156) -> fun (V157) -> ((V155(V156))(V157)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V151 = fun (V150) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V150)) end), fun (V152) -> (V151(V152)) end end(<<"["/utf8>>))))))(V145))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V148 = fun (V147) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V147)) end), fun (V149) -> (V148(V149)) end end(<<"]"/utf8>>)))))))) end end end; {'Core.TT.StrCons'} -> case V1 of {'Data.Vect.::', V163, V164} -> case V164 of {'Data.Vect.::', V165, V166} -> case V166 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V163, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V168 = fun (V167) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V167)) end), fun (V169) -> (V168(V169)) end end(<<"::"/utf8>>)))), V165)))) end end end; {'Core.TT.StrAppend'} -> case V1 of {'Data.Vect.::', V170, V171} -> case V171 of {'Data.Vect.::', V172, V173} -> case V173 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V170, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V175 = fun (V174) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V174)) end), fun (V176) -> (V175(V176)) end end(<<"++"/utf8>>)))), V172)))) end end end; {'Core.TT.StrReverse'} -> case V1 of {'Data.Vect.::', V177, V178} -> case V178 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V180 = fun (V179) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V179)) end), fun (V181) -> (V180(V181)) end end(<<"reverse"/utf8>>)))), V177)) end end; {'Core.TT.StrSubstr'} -> case V1 of {'Data.Vect.::', V182, V183} -> case V183 of {'Data.Vect.::', V184, V185} -> case V185 of {'Data.Vect.::', V186, V187} -> case V187 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V182, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(((begin (V201 = fun (V199) -> fun (V200) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V199, V200)) end end), fun (V202) -> fun (V203) -> ((V201(V202))(V203)) end end end(((begin (V196 = fun (V194) -> fun (V195) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V194, V195)) end end), fun (V197) -> fun (V198) -> ((V196(V197))(V198)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V192 = fun (V191) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V191)) end), fun (V193) -> (V192(V193)) end end(<<"["/utf8>>))))))(V184))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V189 = fun (V188) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V188)) end), fun (V190) -> (V189(V190)) end end(<<","/utf8>>)))))), ((begin (V209 = fun (V207) -> fun (V208) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V207, V208)) end end), fun (V210) -> fun (V211) -> ((V209(V210))(V211)) end end end(V186))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V205 = fun (V204) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V204)) end), fun (V206) -> (V205(V206)) end end(<<"]"/utf8>>)))))))))) end end end end; {'Core.TT.DoubleExp'} -> case V1 of {'Data.Vect.::', V212, V213} -> case V213 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V215 = fun (V214) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V214)) end), fun (V216) -> (V215(V216)) end end(<<"exp"/utf8>>)))), V212)) end end; {'Core.TT.DoubleLog'} -> case V1 of {'Data.Vect.::', V217, V218} -> case V218 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V220 = fun (V219) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V219)) end), fun (V221) -> (V220(V221)) end end(<<"log"/utf8>>)))), V217)) end end; {'Core.TT.DoublePow'} -> case V1 of {'Data.Vect.::', V222, V223} -> case V223 of {'Data.Vect.::', V224, V225} -> case V225 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V222, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V227 = fun (V226) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V226)) end), fun (V228) -> (V227(V228)) end end(<<"`pow`"/utf8>>)))), V224)))) end end end; {'Core.TT.DoubleSin'} -> case V1 of {'Data.Vect.::', V229, V230} -> case V230 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V232 = fun (V231) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V231)) end), fun (V233) -> (V232(V233)) end end(<<"sin"/utf8>>)))), V229)) end end; {'Core.TT.DoubleCos'} -> case V1 of {'Data.Vect.::', V234, V235} -> case V235 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V237 = fun (V236) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V236)) end), fun (V238) -> (V237(V238)) end end(<<"cos"/utf8>>)))), V234)) end end; {'Core.TT.DoubleTan'} -> case V1 of {'Data.Vect.::', V239, V240} -> case V240 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V242 = fun (V241) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V241)) end), fun (V243) -> (V242(V243)) end end(<<"tan"/utf8>>)))), V239)) end end; {'Core.TT.DoubleASin'} -> case V1 of {'Data.Vect.::', V244, V245} -> case V245 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V247 = fun (V246) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V246)) end), fun (V248) -> (V247(V248)) end end(<<"asin"/utf8>>)))), V244)) end end; {'Core.TT.DoubleACos'} -> case V1 of {'Data.Vect.::', V249, V250} -> case V250 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V252 = fun (V251) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V251)) end), fun (V253) -> (V252(V253)) end end(<<"acos"/utf8>>)))), V249)) end end; {'Core.TT.DoubleATan'} -> case V1 of {'Data.Vect.::', V254, V255} -> case V255 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V257 = fun (V256) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V256)) end), fun (V258) -> (V257(V258)) end end(<<"atan"/utf8>>)))), V254)) end end; {'Core.TT.DoubleSqrt'} -> case V1 of {'Data.Vect.::', V259, V260} -> case V260 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V262 = fun (V261) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V261)) end), fun (V263) -> (V262(V263)) end end(<<"sqrt"/utf8>>)))), V259)) end end; {'Core.TT.DoubleFloor'} -> case V1 of {'Data.Vect.::', V264, V265} -> case V265 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V267 = fun (V266) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V266)) end), fun (V268) -> (V267(V268)) end end(<<"floor"/utf8>>)))), V264)) end end; {'Core.TT.DoubleCeiling'} -> case V1 of {'Data.Vect.::', V269, V270} -> case V270 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V272 = fun (V271) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V271)) end), fun (V273) -> (V272(V273)) end end(<<"ceiling"/utf8>>)))), V269)) end end; {'Core.TT.Cast', V274, V275} -> case V1 of {'Data.Vect.::', V276, V277} -> case V277 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(((begin (V283 = fun (V281) -> fun (V282) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V281, V282)) end end), fun (V284) -> fun (V285) -> ((V283(V284))(V285)) end end end(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V279 = fun (V278) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V278)) end), fun (V280) -> (V279(V280)) end end(<<"["/utf8>>))))))(('dn--un--pretty_Pretty_IdrisSyntax_PrimType'(V274)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V287 = fun (V286) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V286)) end), fun (V288) -> (V287(V288)) end end(<<"->"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(((begin (V294 = fun (V292) -> fun (V293) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V292, V293)) end end), fun (V295) -> fun (V296) -> ((V294(V295))(V296)) end end end(('dn--un--pretty_Pretty_IdrisSyntax_PrimType'(V275))))(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V290 = fun (V289) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V289)) end), fun (V291) -> (V290(V291)) end end(<<"]"/utf8>>)))))), V276)))))) end end; {'Core.TT.BelieveMe'} -> case V1 of {'Data.Vect.::', V297, V298} -> case V298 of {'Data.Vect.::', V299, V300} -> case V300 of {'Data.Vect.::', V301, V302} -> case V302 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V304 = fun (V303) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V303)) end), fun (V305) -> (V304(V305)) end end(<<"believe_me"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V297, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V299, V301)))))) end end end end; {'Core.TT.Crash'} -> case V1 of {'Data.Vect.::', V306, V307} -> case V307 of {'Data.Vect.::', V308, V309} -> case V309 of {'Data.Vect.Nil'} -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Pretty.Annotations.Fun', {'Core.Name.UN', {'Core.Name.Basic', ('dn--un--show_Show_(PrimFn $arity)'(V0))}}}, (begin (V311 = fun (V310) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(V310)) end), fun (V312) -> (V311(V312)) end end(<<"crash"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(V306, V308)))) end end end end.
'un--precision'(V0) -> case V0 of {'Core.TT.Signed', V1} -> V1; {'Core.TT.Unsigned', V2} -> {'Core.TT.P', V2} end.
'un--piInfo'(V0) -> case V0 of {'Core.TT.Lam', V1, V2, V3, V4} -> V3; {'Core.TT.Let', V5, V6, V7, V8} -> {'Core.TT.Explicit'}; {'Core.TT.Pi', V9, V10, V11, V12} -> V11; {'Core.TT.PVar', V13, V14, V15, V16} -> V15; {'Core.TT.PLet', V17, V18, V19, V20} -> {'Core.TT.Explicit'}; {'Core.TT.PVTy', V21, V22, V23} -> {'Core.TT.Explicit'} end.
'un--notCovering'() -> {'Core.TT.MkTotality', {'Core.TT.Unchecked'}, {'Core.TT.MissingCases', []}}.
'un--nameAt'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> case V1 of 0 -> V2; _ -> begin (V4 = (V1 - 1)), ('un--nameAt'(V3, V4)) end end end(E0, E1)) end.
'un--multiplicity'(V0) -> case V0 of {'Core.TT.Lam', V1, V2, V3, V4} -> V2; {'Core.TT.Let', V5, V6, V7, V8} -> V6; {'Core.TT.Pi', V9, V10, V11, V12} -> V10; {'Core.TT.PVar', V13, V14, V15, V16} -> V14; {'Core.TT.PLet', V17, V18, V19, V20} -> V18; {'Core.TT.PVTy', V21, V22, V23} -> V22 end.
'un--mkVar'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> (('un--mkVar'(V2)) + 1) end(E0, E1)) end.
'un--mkLocals'(V0, V1, V2) -> case V2 of {'Core.TT.Local', V3, V4, V5} -> begin (V6 = ('un--addVars'(V0, V1, V5))), {'Core.TT.Local', V3, V4, V6} end; {'Core.TT.Ref', V7, V8, V9} -> case V8 of {'Core.TT.Bound'} -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Core.TT.Ref', V7, {'Core.TT.Bound'}, V9} end, fun () -> fun (V10) -> V10 end end, ('un--resolveRef'(V0, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V1, V7, V9)))); _ -> {'Core.TT.Ref', V7, V8, V9} end; {'Core.TT.Meta', V11, V12, V13, V14} -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Core.TT.Meta', V11, V12, V13, ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> ('un--mkLocals'(V0, V1, V15)) end))(V14))} end, fun () -> fun (V23) -> V23 end end, ('un--resolveRef'(V0, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V1, V11, V12)))); {'Core.TT.Bind', V24, V25, V26, V27} -> {'Core.TT.Bind', V24, V25, ('dn--un--map_Functor_Binder'(fun (V28) -> ('un--mkLocals'(V0, V1, V28)) end, V26)), ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V27))}; {'Core.TT.App', V29, V30, V31} -> {'Core.TT.App', V29, ('un--mkLocals'(V0, V1, V30)), ('un--mkLocals'(V0, V1, V31))}; {'Core.TT.As', V32, V33, V34, V35} -> {'Core.TT.As', V32, V33, ('un--mkLocals'(V0, V1, V34)), ('un--mkLocals'(V0, V1, V35))}; {'Core.TT.TDelayed', V36, V37, V38} -> {'Core.TT.TDelayed', V36, V37, ('un--mkLocals'(V0, V1, V38))}; {'Core.TT.TDelay', V39, V40, V41, V42} -> {'Core.TT.TDelay', V39, V40, ('un--mkLocals'(V0, V1, V41)), ('un--mkLocals'(V0, V1, V42))}; {'Core.TT.TForce', V43, V44, V45} -> {'Core.TT.TForce', V43, V44, ('un--mkLocals'(V0, V1, V45))}; {'Core.TT.PrimVal', V46, V47} -> {'Core.TT.PrimVal', V46, V47}; {'Core.TT.Erased', V48, V49} -> case V49 of {'Core.TT.Impossible'} -> {'Core.TT.Erased', V48, {'Core.TT.Impossible'}}; {'Core.TT.Placeholder'} -> {'Core.TT.Erased', V48, {'Core.TT.Placeholder'}}; {'Core.TT.Dotted', V50} -> {'Core.TT.Erased', V48, {'Core.TT.Dotted', ('un--mkLocals'(V0, V1, V50))}} end; {'Core.TT.TType', V51, V52} -> {'Core.TT.TType', V51, V52} end.
'un--linFnType'(V0, V1, V2, V3) -> {'Core.TT.Bind', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Core.Name.MN', <<"_"/utf8>>, 0}, {'Core.TT.Pi', V1, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V4, V5)) end end, 0, fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V6, V7)) end end, 1})), {'Core.TT.Explicit'}, V2}, ('dn--un--weaken_Weaken_Term'(V3))}.
'un--isVar'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--isNVar'(V0, V1)), fun (V2) -> begin (V3 = V2), {'Prelude.Types.Just', V3} end end)).
'un--isTotal'() -> {'Core.TT.MkTotality', {'Core.TT.Unchecked'}, {'Core.TT.IsCovering'}}.
'un--isPrimType'(V0) -> case V0 of {'Core.TT.PrT', V1} -> 1; _ -> 0 end.
'un--isNVar'(V0, V1) -> case V1 of [] -> {'Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V0, V2)) of {'Prelude.Types.Nothing'} -> ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> ('Idris.Idris2.Core.TT.NVar':'un--later'(V4)) end))(('un--isNVar'(V0, V3)))); {'Prelude.Types.Just', V12} -> {'Prelude.Types.Just', 0} end end(E0, E1)) end.
'un--isLet'(V0) -> case V0 of {'Core.TT.Let', V1, V2, V3, V4} -> 1; _ -> 0 end.
'un--isImplicit'(V0) -> ('Idris.Idris2.Core.TT.PiInfo':'un--isImplicit'(('un--piInfo'(V0)))).
'un--isErased'(V0) -> case V0 of {'Core.TT.Erased', V1, V2} -> 1; _ -> 0 end.
'un--isConstantType'(V0) -> case V0 of {'Core.Name.UN', V1} -> case V1 of {'Core.Name.Basic', V2} -> case V2 of <<"Int"/utf8>> -> {'Prelude.Types.Just', 0}; <<"Int8"/utf8>> -> {'Prelude.Types.Just', 1}; <<"Int16"/utf8>> -> {'Prelude.Types.Just', 2}; <<"Int32"/utf8>> -> {'Prelude.Types.Just', 3}; <<"Int64"/utf8>> -> {'Prelude.Types.Just', 4}; <<"Integer"/utf8>> -> {'Prelude.Types.Just', 5}; <<"Bits8"/utf8>> -> {'Prelude.Types.Just', 6}; <<"Bits16"/utf8>> -> {'Prelude.Types.Just', 7}; <<"Bits32"/utf8>> -> {'Prelude.Types.Just', 8}; <<"Bits64"/utf8>> -> {'Prelude.Types.Just', 9}; <<"String"/utf8>> -> {'Prelude.Types.Just', 10}; <<"Char"/utf8>> -> {'Prelude.Types.Just', 11}; <<"Double"/utf8>> -> {'Prelude.Types.Just', 12}; <<"%World"/utf8>> -> {'Prelude.Types.Just', 13}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--isCon'(V0) -> case V0 of {'Core.TT.DataCon', V1, V2} -> {'Prelude.Types.Just', {'Builtin.MkPair', V1, V2}}; {'Core.TT.TyCon', V3, V4} -> {'Prelude.Types.Just', {'Builtin.MkPair', V3, V4}}; _ -> {'Prelude.Types.Nothing'} end.
'un--intKind'(V0) -> case V0 of 5 -> {'Prelude.Types.Just', {'Core.TT.Signed', {'Core.TT.Unlimited'}}}; 1 -> {'Prelude.Types.Just', {'Core.TT.Signed', {'Core.TT.P', 8}}}; 2 -> {'Prelude.Types.Just', {'Core.TT.Signed', {'Core.TT.P', 16}}}; 3 -> {'Prelude.Types.Just', {'Core.TT.Signed', {'Core.TT.P', 32}}}; 4 -> {'Prelude.Types.Just', {'Core.TT.Signed', {'Core.TT.P', 64}}}; 0 -> {'Prelude.Types.Just', {'Core.TT.Signed', {'Core.TT.P', 64}}}; 6 -> {'Prelude.Types.Just', {'Core.TT.Unsigned', 8}}; 7 -> {'Prelude.Types.Just', {'Core.TT.Unsigned', 16}}; 8 -> {'Prelude.Types.Just', {'Core.TT.Unsigned', 32}}; 9 -> {'Prelude.Types.Just', {'Core.TT.Unsigned', 64}}; _ -> {'Prelude.Types.Nothing'} end.
'un--insertVarNames'(V0, V1, V2) -> begin (V3 = V2), begin (V4 = ('un--insertNVarNames'(V0, V1, V3))), V4 end end.
'un--insertVar'(V0, V1) -> begin (V2 = V1), begin (V3 = ('un--insertNVar'(V0, V2))), V3 end end.
'un--insertNames'(V0, V1, V2) -> case V2 of {'Core.TT.Local', V3, V4, V5} -> begin (V6 = ('un--insertNVarNames'(V0, V1, V5))), {'Core.TT.Local', V3, V4, V6} end; {'Core.TT.Ref', V7, V8, V9} -> {'Core.TT.Ref', V7, V8, V9}; {'Core.TT.Meta', V10, V11, V12, V13} -> {'Core.TT.Meta', V10, V11, V12, ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> ('un--insertNames'(V0, V1, V14)) end))(V13))}; {'Core.TT.Bind', V22, V23, V24, V25} -> {'Core.TT.Bind', V22, V23, ('dn--un--map_Functor_Binder'(fun (V26) -> ('un--insertNames'(V0, V1, V26)) end, V24)), ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V25))}; {'Core.TT.App', V27, V28, V29} -> {'Core.TT.App', V27, ('un--insertNames'(V0, V1, V28)), ('un--insertNames'(V0, V1, V29))}; {'Core.TT.As', V30, V31, V32, V33} -> {'Core.TT.As', V30, V31, ('un--insertNames'(V0, V1, V32)), ('un--insertNames'(V0, V1, V33))}; {'Core.TT.TDelayed', V34, V35, V36} -> {'Core.TT.TDelayed', V34, V35, ('un--insertNames'(V0, V1, V36))}; {'Core.TT.TDelay', V37, V38, V39, V40} -> {'Core.TT.TDelay', V37, V38, ('un--insertNames'(V0, V1, V39)), ('un--insertNames'(V0, V1, V40))}; {'Core.TT.TForce', V41, V42, V43} -> {'Core.TT.TForce', V41, V42, ('un--insertNames'(V0, V1, V43))}; {'Core.TT.PrimVal', V44, V45} -> {'Core.TT.PrimVal', V44, V45}; {'Core.TT.Erased', V46, V47} -> case V47 of {'Core.TT.Impossible'} -> {'Core.TT.Erased', V46, {'Core.TT.Impossible'}}; {'Core.TT.Placeholder'} -> {'Core.TT.Erased', V46, {'Core.TT.Placeholder'}}; {'Core.TT.Dotted', V48} -> {'Core.TT.Erased', V46, {'Core.TT.Dotted', ('un--insertNames'(V0, V1, V48))}} end; {'Core.TT.TType', V49, V50} -> {'Core.TT.TType', V49, V50} end.
'un--insertNVarNames'(V0, V1, V2) -> ('case--insertNVarNames-12645'(V2, V1, V0, ('un--sizedView'(V0)))).
'un--insertNVar'(V0, V1) -> ('case--insertNVar-12196'(V1, V0, ('un--sizedView'(V0)))).
'un--getRefs'(V0, V1) -> ('un--addRefs'(0, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V1)).
'un--getMetas'(V0) -> ('un--addMetas'(0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V0)).
'un--getLoc'(V0) -> case V0 of {'Core.TT.Local', V1, V2, V3} -> V1; {'Core.TT.Ref', V4, V5, V6} -> V4; {'Core.TT.Meta', V7, V8, V9, V10} -> V7; {'Core.TT.Bind', V11, V12, V13, V14} -> V11; {'Core.TT.App', V15, V16, V17} -> V15; {'Core.TT.As', V18, V19, V20, V21} -> V18; {'Core.TT.TDelayed', V22, V23, V24} -> V22; {'Core.TT.TDelay', V25, V26, V27, V28} -> V25; {'Core.TT.TForce', V29, V30, V31} -> V29; {'Core.TT.PrimVal', V32, V33} -> V32; {'Core.TT.Erased', V34, V35} -> V34; {'Core.TT.TType', V36, V37} -> V36 end.
'un--getFnArgs'(V0) -> ('nested--17942-13466--in--un--getFA'(V0, [], V0)).
'un--getFn'(V0) -> case V0 of {'Core.TT.App', V1, V2, V3} -> ('un--getFn'(V2)); _ -> V0 end.
'un--getArgs'(V0) -> ('Idris.Idris2.Builtin':'un--snd'(('un--getFnArgs'(V0)))).
'un--funKindedName'(V0) -> {'Core.TT.MkKindedName', {'Prelude.Types.Just', {'Core.TT.Func'}}, V0, V0}.
'un--forgetDef'(V0) -> case V0 of {'Core.TT.Explicit'} -> {'Core.TT.Explicit'}; {'Core.TT.Implicit'} -> {'Core.TT.Implicit'}; {'Core.TT.AutoImplicit'} -> {'Core.TT.AutoImplicit'}; {'Core.TT.DefImplicit', V1} -> {'Core.TT.Implicit'} end.
'un--fnType'(V0, V1, V2, V3) -> {'Core.TT.Bind', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Core.Name.MN', <<"_"/utf8>>, 0}, {'Core.TT.Pi', V1, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Core.TT.Explicit'}, V2}, ('dn--un--weaken_Weaken_Term'(V3))}.
'un--eqWhyErased'(V0, V1) -> case V0 of {'Core.TT.Impossible'} -> case V1 of {'Core.TT.Impossible'} -> 1; _ -> 0 end; {'Core.TT.Placeholder'} -> case V1 of {'Core.TT.Placeholder'} -> 1; _ -> 0 end; {'Core.TT.Dotted', V2} -> case V1 of {'Core.TT.Dotted', V3} -> ('un--eqTerm'(V2, V3)); _ -> 0 end; _ -> 0 end.
'un--eqTerm'(V0, V1) -> case V0 of {'Core.TT.Local', V2, V3, V4} -> case V1 of {'Core.TT.Local', V5, V6, V7} -> case (V4 =:= V7) of 'false' -> 0; _ -> 1 end; _ -> 0 end; {'Core.TT.Ref', V8, V9, V10} -> case V1 of {'Core.TT.Ref', V11, V12, V13} -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V13)); _ -> 0 end; {'Core.TT.Meta', V14, V15, V16, V17} -> case V1 of {'Core.TT.Meta', V18, V19, V20, V21} -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V16, V20)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'({'Prelude.Interfaces.MkMonoid', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Interfaces.Bool.Semigroup':'dn--un--<+>_Semigroup_AllBool'(V22, V23)) end end, 1}, fun (V24) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V25) -> fun (V26) -> ('un--eqTerm'(V25, V26)) end end, V24)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V17, V21)))); 0 -> 0 end; _ -> 0 end; {'Core.TT.Bind', V27, V28, V29, V30} -> case V1 of {'Core.TT.Bind', V31, V32, V33, V34} -> case ('un--eqBinderBy'(fun (V35) -> fun (V36) -> ('un--eqTerm'(V35, V36)) end end, V29, V33)) of 1 -> ('un--eqTerm'(V30, V34)); 0 -> 0 end; _ -> 0 end; {'Core.TT.App', V37, V38, V39} -> case V1 of {'Core.TT.App', V40, V41, V42} -> case ('un--eqTerm'(V38, V41)) of 1 -> ('un--eqTerm'(V39, V42)); 0 -> 0 end; _ -> 0 end; {'Core.TT.As', V43, V44, V45, V46} -> case V1 of {'Core.TT.As', V47, V48, V49, V50} -> case ('un--eqTerm'(V45, V49)) of 1 -> ('un--eqTerm'(V46, V50)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TDelayed', V51, V52, V53} -> case V1 of {'Core.TT.TDelayed', V54, V55, V56} -> ('un--eqTerm'(V53, V56)); _ -> 0 end; {'Core.TT.TDelay', V57, V58, V59, V60} -> case V1 of {'Core.TT.TDelay', V61, V62, V63, V64} -> case ('un--eqTerm'(V59, V63)) of 1 -> ('un--eqTerm'(V60, V64)); 0 -> 0 end; _ -> 0 end; {'Core.TT.TForce', V65, V66, V67} -> case V1 of {'Core.TT.TForce', V68, V69, V70} -> ('un--eqTerm'(V67, V70)); _ -> 0 end; {'Core.TT.PrimVal', V71, V72} -> case V1 of {'Core.TT.PrimVal', V73, V74} -> ('dn--un--==_Eq_Constant'(V72, V74)); _ -> 0 end; {'Core.TT.Erased', V75, V76} -> case V1 of {'Core.TT.Erased', V77, V78} -> ('un--eqWhyErased'(V76, V78)); _ -> 0 end; {'Core.TT.TType', V79, V80} -> case V1 of {'Core.TT.TType', V81, V82} -> 1; _ -> 0 end; _ -> 0 end.
'un--eqPiInfoBy'(V0, V1, V2) -> ('nested--9165-5101--in--un--go'(V0, V1, V2)).
'un--eqBinderBy'(V0, V1, V2) -> ('nested--13865-9716--in--un--go'(V0, V1, V2)).
'un--embedSub'(V0, V1) -> case V1 of {'Core.TT.Local', V2, V3, V4} -> begin (V5 = ('un--varEmbedSub'(V0, V4))), {'Core.TT.Local', V2, V3, V5} end; {'Core.TT.Ref', V6, V7, V8} -> {'Core.TT.Ref', V6, V7, V8}; {'Core.TT.Meta', V9, V10, V11, V12} -> {'Core.TT.Meta', V9, V10, V11, ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('un--embedSub'(V0, V13)) end))(V12))}; {'Core.TT.Bind', V21, V22, V23, V24} -> {'Core.TT.Bind', V21, V22, ('dn--un--map_Functor_Binder'(fun (V25) -> ('un--embedSub'(V0, V25)) end, V23)), ('un--embedSub'({'Core.TT.KeepCons', V0}, V24))}; {'Core.TT.App', V26, V27, V28} -> {'Core.TT.App', V26, ('un--embedSub'(V0, V27)), ('un--embedSub'(V0, V28))}; {'Core.TT.As', V29, V30, V31, V32} -> {'Core.TT.As', V29, V30, ('un--embedSub'(V0, V31)), ('un--embedSub'(V0, V32))}; {'Core.TT.TDelayed', V33, V34, V35} -> {'Core.TT.TDelayed', V33, V34, ('un--embedSub'(V0, V35))}; {'Core.TT.TDelay', V36, V37, V38, V39} -> {'Core.TT.TDelay', V36, V37, ('un--embedSub'(V0, V38)), ('un--embedSub'(V0, V39))}; {'Core.TT.TForce', V40, V41, V42} -> {'Core.TT.TForce', V40, V41, ('un--embedSub'(V0, V42))}; {'Core.TT.PrimVal', V43, V44} -> {'Core.TT.PrimVal', V43, V44}; {'Core.TT.Erased', V45, V46} -> case V46 of {'Core.TT.Impossible'} -> {'Core.TT.Erased', V45, {'Core.TT.Impossible'}}; {'Core.TT.Placeholder'} -> {'Core.TT.Erased', V45, {'Core.TT.Placeholder'}}; {'Core.TT.Dotted', V47} -> {'Core.TT.Erased', V45, {'Core.TT.Dotted', ('un--embedSub'(V0, V47))}} end; {'Core.TT.TType', V48, V49} -> {'Core.TT.TType', V48, V49} end.
'un--embed'(V0) -> V0.
'un--dropVar'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> case V1 of 0 -> V3; _ -> begin (V4 = (V1 - 1)), [V2 | ('un--dropVar'(V3, V4))] end end end(E0, E1)) end.
'un--dropLater'(V0) -> case V0 of 0 -> ('erlang':'throw'({'$idris_error', <<"Nat case not covered"/utf8>>})); _ -> begin (V1 = (V0 - 1)), V1 end end.
'un--dropFirst'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> begin (V3 = V1), case V3 of 0 -> ('un--dropFirst'(V2)); _ -> begin (V4 = (V3 - 1)), [V4 | ('un--dropFirst'(V2))] end end end end(E0, E1)) end.
'un--defaultKindedName'(V0) -> {'Core.TT.MkKindedName', {'Prelude.Types.Nothing'}, V0, V0}.
'un--constantEq'(V0, V1) -> case V0 of {'Core.TT.I', V2} -> case V1 of {'Core.TT.I', V3} -> case ((begin (V6 = fun (V4) -> fun (V5) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'())(V4))(V5)) end end), fun (V7) -> fun (V8) -> ((V6(V7))(V8)) end end end(V2))(V3)) of {'Prelude.Types.Yes', V9} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V10} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I8', V11} -> case V1 of {'Core.TT.I8', V12} -> case ((('Idris.Idris2.Libraries.Data.Primitives':'dn--un--decEq_DecEq_TempI8Int8'())(V11))(V12)) of {'Prelude.Types.Yes', V13} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V14} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I16', V15} -> case V1 of {'Core.TT.I16', V16} -> case ((('Idris.Idris2.Libraries.Data.Primitives':'dn--un--decEq_DecEq_TempI16Int16'())(V15))(V16)) of {'Prelude.Types.Yes', V17} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V18} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I32', V19} -> case V1 of {'Core.TT.I32', V20} -> case ((('Idris.Idris2.Libraries.Data.Primitives':'dn--un--decEq_DecEq_TempI32Int32'())(V19))(V20)) of {'Prelude.Types.Yes', V21} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V22} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.I64', V23} -> case V1 of {'Core.TT.I64', V24} -> case ((('Idris.Idris2.Libraries.Data.Primitives':'dn--un--decEq_DecEq_TempI64Int64'())(V23))(V24)) of {'Prelude.Types.Yes', V25} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V26} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B8', V27} -> case V1 of {'Core.TT.B8', V28} -> case ((('Idris.Idris2.Libraries.Data.Primitives':'dn--un--decEq_DecEq_TempB8Bits8'())(V27))(V28)) of {'Prelude.Types.Yes', V29} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V30} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B16', V31} -> case V1 of {'Core.TT.B16', V32} -> case ((('Idris.Idris2.Libraries.Data.Primitives':'dn--un--decEq_DecEq_TempB16Bits16'())(V31))(V32)) of {'Prelude.Types.Yes', V33} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V34} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B32', V35} -> case V1 of {'Core.TT.B32', V36} -> case ((('Idris.Idris2.Libraries.Data.Primitives':'dn--un--decEq_DecEq_TempB32Bits32'())(V35))(V36)) of {'Prelude.Types.Yes', V37} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V38} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.B64', V39} -> case V1 of {'Core.TT.B64', V40} -> case ((('Idris.Idris2.Libraries.Data.Primitives':'dn--un--decEq_DecEq_TempB64Bits64'())(V39))(V40)) of {'Prelude.Types.Yes', V41} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V42} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.BI', V43} -> case V1 of {'Core.TT.BI', V44} -> case ((begin (V47 = fun (V45) -> fun (V46) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Integer'())(V45))(V46)) end end), fun (V48) -> fun (V49) -> ((V47(V48))(V49)) end end end(V43))(V44)) of {'Prelude.Types.Yes', V50} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V51} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Str', V52} -> case V1 of {'Core.TT.Str', V53} -> case ((begin (V56 = fun (V54) -> fun (V55) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'())(V54))(V55)) end end), fun (V57) -> fun (V58) -> ((V56(V57))(V58)) end end end(V52))(V53)) of {'Prelude.Types.Yes', V59} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V60} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Ch', V61} -> case V1 of {'Core.TT.Ch', V62} -> case ((begin (V65 = fun (V63) -> fun (V64) -> ((('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Char'())(V63))(V64)) end end), fun (V66) -> fun (V67) -> ((V65(V66))(V67)) end end end(V61))(V62)) of {'Prelude.Types.Yes', V68} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; {'Prelude.Types.No', V69} -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.Db', V70} -> case V1 of {'Core.TT.Db', V71} -> {'Prelude.Types.Nothing'}; _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.PrT', V72} -> case V1 of {'Core.TT.PrT', V73} -> ((begin (V79 = fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V77, V78)) end end end end), fun (V80) -> fun (V81) -> ((((V79('erased'))('erased'))(V80))(V81)) end end end(fun (V74) -> {'Builtin.Refl'} end))(('un--primTypeEq'(V72, V73)))); _ -> {'Prelude.Types.Nothing'} end; {'Core.TT.WorldVal'} -> case V1 of {'Core.TT.WorldVal'} -> {'Prelude.Types.Just', {'Builtin.Refl'}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
'un--compatible'(V0, V1) -> case V0 of 2 -> 1; _ -> case V1 of 2 -> 1; _ -> ('dn--un--==_Eq_LazyReason'(V0, V1)) end end.
'un--binderType'(V0) -> case V0 of {'Core.TT.Lam', V1, V2, V3, V4} -> V4; {'Core.TT.Let', V5, V6, V7, V8} -> V8; {'Core.TT.Pi', V9, V10, V11, V12} -> V12; {'Core.TT.PVar', V13, V14, V15, V16} -> V16; {'Core.TT.PLet', V17, V18, V19, V20} -> V20; {'Core.TT.PVTy', V21, V22, V23} -> V23 end.
'un--binderLoc'(V0) -> case V0 of {'Core.TT.Lam', V1, V2, V3, V4} -> V1; {'Core.TT.Let', V5, V6, V7, V8} -> V5; {'Core.TT.Pi', V9, V10, V11, V12} -> V9; {'Core.TT.PVar', V13, V14, V15, V16} -> V13; {'Core.TT.PLet', V17, V18, V19, V20} -> V17; {'Core.TT.PVTy', V21, V22, V23} -> V21 end.
'un--areVarsCompatible'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'Prelude.Types.Just', 0}; _ -> {'Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V2, V3) -> case V1 of [E2 | E3] -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--areVarsCompatible'(V3, V5)), fun (V6) -> {'Prelude.Types.Just', (V6 + 1)} end)) end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end.
'un--applyWithFC'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Builtin.MkPair', V4, V5} -> ('un--applyWithFC'({'Core.TT.App', V4, V0, V5}, V3)) end end(E0, E1)) end.
'un--apply'(V0, V1, V2) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V3, V4) -> ('un--apply'(V0, {'Core.TT.App', V0, V1, V3}, V4)) end(E0, E1)) end.
'un--addVars'(V0, V1, V2) -> ('un--insertNVarNames'(V0, ('Idris.Idris2.Core.TT.Bounds':'un--sizeOf'(V1)), V2)).
'un--addRefs'(V0, V1, V2, V3) -> case V3 of {'Core.TT.Local', V4, V5, V6} -> V2; {'Core.TT.Ref', V7, V8, V9} -> ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V9, V0, V2)); {'Core.TT.Meta', V10, V11, V12, V13} -> ('nested--21363-16554--in--un--addRefsArgs'(V13, V12, V11, V10, V2, V1, V0, V2, V13)); {'Core.TT.Bind', V14, V15, V16, V17} -> case V16 of {'Core.TT.Let', V18, V19, V20, V21} -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, V2, V20)), V21)), V17)); _ -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, V2, ('un--binderType'(V16)))), V17)) end; {'Core.TT.App', V22, V23, V24} -> case V23 of {'Core.TT.App', V25, V26, V27} -> case V26 of {'Core.TT.Ref', V28, V29, V30} -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V30, V1)) of 1 -> ('un--addRefs'(1, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V30, 1, V2)), V24)); 0 -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V30, V0, V2)), V27)), V24)) end; _ -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, V2, V23)), V24)) end; _ -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, V2, V23)), V24)) end; {'Core.TT.As', V31, V32, V33, V34} -> ('un--addRefs'(V0, V1, V2, V34)); {'Core.TT.TDelayed', V35, V36, V37} -> ('un--addRefs'(V0, V1, V2, V37)); {'Core.TT.TDelay', V38, V39, V40, V41} -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, V2, V40)), V41)); {'Core.TT.TForce', V42, V43, V44} -> ('un--addRefs'(V0, V1, V2, V44)); {'Core.TT.PrimVal', V45, V46} -> V2; {'Core.TT.Erased', V47, V48} -> ('dn--un--foldr_Foldable_WhyErased'(fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V51) -> fun (V52) -> ('un--addRefs'(V0, V1, V51, V52)) end end, V49, V50)) end end, V2, V48)); {'Core.TT.TType', V53, V54} -> V2 end.
'un--addMetas'(V0, V1, V2) -> case V2 of {'Core.TT.Local', V3, V4, V5} -> V1; {'Core.TT.Ref', V6, V7, V8} -> V1; {'Core.TT.Meta', V9, V10, V11, V12} -> ('nested--21214-16422--in--un--addMetaArgs'(V12, V11, V10, V9, V1, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(case V0 of 1 -> {'Core.Name.Resolved', V11}; 0 -> V10 end, 0, V1)), V12)); {'Core.TT.Bind', V13, V14, V15, V16} -> case V15 of {'Core.TT.Let', V17, V18, V19, V20} -> ('un--addMetas'(V0, ('un--addMetas'(V0, ('un--addMetas'(V0, V1, V19)), V20)), V16)); _ -> ('un--addMetas'(V0, ('un--addMetas'(V0, V1, ('un--binderType'(V15)))), V16)) end; {'Core.TT.App', V21, V22, V23} -> ('un--addMetas'(V0, ('un--addMetas'(V0, V1, V22)), V23)); {'Core.TT.As', V24, V25, V26, V27} -> ('un--addMetas'(V0, V1, V27)); {'Core.TT.TDelayed', V28, V29, V30} -> ('un--addMetas'(V0, V1, V30)); {'Core.TT.TDelay', V31, V32, V33, V34} -> ('un--addMetas'(V0, ('un--addMetas'(V0, V1, V33)), V34)); {'Core.TT.TForce', V35, V36, V37} -> ('un--addMetas'(V0, V1, V37)); {'Core.TT.PrimVal', V38, V39} -> V1; {'Core.TT.Erased', V40, V41} -> ('dn--un--foldr_Foldable_WhyErased'(fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V44) -> fun (V45) -> ('un--addMetas'(V0, V44, V45)) end end, V42, V43)) end end, V1, V41)); {'Core.TT.TType', V46, V47} -> V1 end.
'un--Raw'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_RawKindedName'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_RawKindedName'(V1, V2)) end end}.
'un--ClosedTerm'() -> {'Core.TT.Term', []}.
