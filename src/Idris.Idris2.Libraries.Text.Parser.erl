-module('Idris.Idris2.Libraries.Text.Parser').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--when'/2,
  'un--unless'/2,
  'un--someTill'/3,
  'un--some'/1,
  'un--sepEndBy1'/3,
  'un--sepEndBy'/3,
  'un--sepBy1'/3,
  'un--sepBy'/3,
  'un--optional'/2,
  'un--option'/3,
  'un--match'/2,
  'un--manyTill'/3,
  'un--many'/1,
  'un--location'/0,
  'un--endLocation'/0,
  'un--endBy1'/3,
  'un--endBy'/3,
  'un--count1'/2,
  'un--count'/2,
  'un--column'/0,
  'un--choose'/4,
  'un--choiceMap'/4,
  'un--choice'/3,
  'un--between'/4,
  'un--afterSome'/3,
  'un--afterMany'/3
]).
'un--when'(V0, V1) -> case V0 of 1 -> (V1()); 0 -> {'Libraries.Text.Parser.Core.Empty', {'Builtin.MkUnit'}} end.
'un--unless'(V0, V1) -> ('un--when'(case V0 of 1 -> 0; 0 -> 1 end, V1)).
'un--someTill'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEat', case V0 of 1 -> 1; 0 -> 0 end, V2, fun () -> fun (V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, ('un--manyTill'(V0, V1, V2)), fun (V4) -> {'Libraries.Text.Parser.Core.Empty', {'Data.List1.:::', V3, V4}} end} end end}.
'un--some'(V0) -> {'Libraries.Text.Parser.Core.SeqEat', 0, V0, fun () -> fun (V1) -> {'Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--many'(V0)), fun (V2) -> {'Libraries.Text.Parser.Core.Empty', {'Data.List1.:::', V1, V2}} end} end end}.
'un--sepEndBy1'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V3) -> fun (V4) -> V3 end end))(('un--sepBy1'(V0, V1, V2)))), fun (V12) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(V12))(('un--optional'(1, V1)))) end}.
'un--sepEndBy'(V0, V1, V2) -> ('un--option'(V0, [], ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('Idris.Idris2.Data.List1':'un--forget'(V3)) end))(('un--sepEndBy1'(V0, V1, V2)))))).
'un--sepBy1'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Libraries.Text.Parser.Core.SeqEmpty', 0, V0, {'Libraries.Text.Parser.Core.Empty', fun (V3) -> fun (V4) -> {'Data.List1.:::', V3, V4} end end}, fun (V5) -> ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(V5))(V2)) end}, fun (V13) -> ((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(V13))(('un--many'({'Libraries.Text.Parser.Core.SeqEmpty', 1, V0, ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V14) -> fun (V15) -> V15 end end))(V1)), fun (V23) -> ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(V23))(V2)) end})))) end}.
'un--sepBy'(V0, V1, V2) -> ('un--option'(V0, [], ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('Idris.Idris2.Data.List1':'un--forget'(V3)) end))(('un--sepBy1'(V0, V1, V2)))))).
'un--optional'(V0, V1) -> ('un--option'(V0, {'Prelude.Types.Nothing'}, ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> {'Prelude.Types.Just', V2} end))(V1)))).
'un--option'(V0, V1, V2) -> case V0 of 0 -> {'Libraries.Text.Parser.Core.Alt', 0, 0, V2, fun () -> {'Libraries.Text.Parser.Core.Empty', V1} end}; 1 -> {'Libraries.Text.Parser.Core.Alt', 1, 0, V2, fun () -> {'Libraries.Text.Parser.Core.Empty', V1} end} end.
'un--match'(V0, V1) -> {'Libraries.Text.Parser.Core.Terminal', <<"Unrecognised input"/utf8>>, fun (V2) -> case case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.EqOrd.MkEq', V3, V4} -> ((V3(case V2 of {'Libraries.Text.Token.Tok', V5, V6} -> V5 end))(V1)) end of 1 -> {'Prelude.Types.Just', case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Libraries.Text.Token.dn--un--__mkTokenKind', V7, V8} -> ((V8(V1))(case V2 of {'Libraries.Text.Token.Tok', V9, V10} -> V10 end)) end}; 0 -> {'Prelude.Types.Nothing'} end end}.
'un--manyTill'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', V0, 1, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> [] end))(V1)), fun () -> ((begin (V16 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V14, V15)) end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V11) -> ('Idris.Idris2.Data.List1':'un--forget'(V11)) end))(('un--someTill'(V0, V1, V2)))) end}.
'un--many'(V0) -> ('un--option'(1, [], ((begin (V6 = fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end), fun (V7) -> fun (V8) -> ((((V6('erased'))('erased'))(V7))(V8)) end end end(fun (V1) -> ('Idris.Idris2.Data.List1':'un--forget'(V1)) end))(('un--some'(V0)))))).
'un--location'() -> ((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> ('Idris.Idris2.Libraries.Text.Bounded':'un--startBounds'(V0)) end))({'Libraries.Text.Parser.Core.Position'})).
'un--endLocation'() -> ((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> ('Idris.Idris2.Libraries.Text.Bounded':'un--endBounds'(V0)) end))({'Libraries.Text.Parser.Core.Position'})).
'un--endBy1'(V0, V1, V2) -> ('un--some'({'Libraries.Text.Parser.Core.SeqEmpty', V0, 1, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V3) -> fun (V4) -> V3 end end))(V2)), fun (V12) -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(V12))(V1)) end})).
'un--endBy'(V0, V1, V2) -> ('un--option'(1, [], ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('Idris.Idris2.Data.List1':'un--forget'(V3)) end))(('un--endBy1'(V0, V1, V2)))))).
'un--count1'(V0, V1) -> {'Libraries.Text.Parser.Core.SeqEat', case ('Idris.Idris2.Data.Nat':'un--isSucc'(case V0 of {'Libraries.Text.Quantity.Qty', V2, V3} -> V2 end)) of 1 -> 1; 0 -> 0 end, V1, fun () -> fun (V4) -> {'Libraries.Text.Parser.Core.SeqEmpty', ('Idris.Idris2.Data.Nat':'un--isSucc'(case V0 of {'Libraries.Text.Quantity.Qty', V5, V6} -> V5 end)), 0, ('un--count'(V0, V1)), fun (V7) -> {'Libraries.Text.Parser.Core.Empty', [V4 | V7]} end} end end}.
'un--count'(V0, V1) -> case V0 of {'Libraries.Text.Quantity.Qty', V2, V3} -> case V2 of 0 -> case V3 of {'Prelude.Types.Nothing'} -> ('un--many'(V1)); {'Prelude.Types.Just', V4} -> case V4 of 0 -> {'Libraries.Text.Parser.Core.Empty', []}; _ -> begin (V5 = (V4 - 1)), ('un--option'(1, [], ('un--count1'(('Idris.Idris2.Libraries.Text.Quantity':'un--atMost'(V5)), V1)))) end end end; _ -> begin (V6 = (V2 - 1)), case V3 of {'Prelude.Types.Nothing'} -> ('un--count1'(('Idris.Idris2.Libraries.Text.Quantity':'un--atLeast'(V6)), V1)); {'Prelude.Types.Just', V7} -> case V7 of 0 -> {'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"Quantity out of order"/utf8>>}; _ -> begin (V8 = (V7 - 1)), ('un--count1'(('Idris.Idris2.Libraries.Text.Quantity':'un--between'((V6 + 1), V8)), V1)) end end end end end end.
'un--column'() -> ((begin (V5 = fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V3, V4)) end end end end), fun (V6) -> fun (V7) -> ((((V5('erased'))('erased'))(V6))(V7)) end end end(fun (V0) -> ('Idris.Idris2.Builtin':'un--snd'(V0)) end))(('un--location'()))).
'un--choose'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.Alt', V0, V1, ((begin (V9 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V7, V8)) end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V4) -> {'Prelude.Types.Left', V4} end))(V2)), fun () -> ((begin (V17 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V1, V15, V16)) end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end(fun (V12) -> {'Prelude.Types.Right', V12} end))(V3)) end}.
'un--choiceMap'(V0, V1, V2, V3) -> case V2 of {'Prelude.Interfaces.MkFoldable', V4, V5, V6, V7, V8, V9} -> (((((V4('erased'))('erased'))(fun (V10) -> fun (V11) -> {'Libraries.Text.Parser.Core.Alt', V0, V0, (V1(V10)), fun () -> V11 end} end end))({'Libraries.Text.Parser.Core.Fail', {'Prelude.Types.Nothing'}, 0, <<"No more options"/utf8>>}))(V3)) end.
'un--choice'(V0, V1, V2) -> ('un--choiceMap'(V1, fun (V3) -> V3 end, V0, V2)).
'un--between'(V0, V1, V2, V3) -> {'Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ((begin (V27 = fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V25, V26)) end end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V21) -> fun (V22) -> V21 end end))({'Libraries.Text.Parser.Core.SeqEmpty', 1, V0, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V4) -> fun (V5) -> V5 end end))(V1)), fun (V13) -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(V13))(V3)) end})), fun (V30) -> ((begin (V35 = fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V33, V34)) end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(V30))(V2)) end}.
'un--afterSome'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.ThenEat', V0, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> {'Builtin.MkUnit'} end))(V1)), fun () -> ('un--afterMany'(V0, V1, V2)) end}.
'un--afterMany'(V0, V1, V2) -> {'Libraries.Text.Parser.Core.Alt', V0, 1, V2, fun () -> ('un--afterSome'(V0, V1, V2)) end}.
