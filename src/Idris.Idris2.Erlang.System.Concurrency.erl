-module('Idris.Idris2.Erlang.System.Concurrency').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--erlSpawnLink'/2,
  'un--erlSpawn'/2,
  'un--erlSend'/3,
  'un--erlSelf'/1,
  'un--erlReceive'/4
]).
'un--erlSpawnLink'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> case V4 of {'Prelude.Interfaces.MkApplicative', V7, V8, V9} -> ((V8('erased'))(('erlang':'apply'('erlang', 'spawn_link', [fun () -> ('Idris.Idris2.PrimIO':'un--unsafePerformIO'(((begin (V16 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V10) -> V10 end))(V1)))) end | []])))) end end end.
'un--erlSpawn'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> case V2 of {'Prelude.Interfaces.MkMonad', V4, V5, V6} -> case V4 of {'Prelude.Interfaces.MkApplicative', V7, V8, V9} -> ((V8('erased'))(('erlang':'apply'('erlang', 'spawn', [fun () -> ('Idris.Idris2.PrimIO':'un--unsafePerformIO'(((begin (V16 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V10) -> V10 end))(V1)))) end | []])))) end end end.
'un--erlSend'(V0, V1, V2) -> ((begin (V20 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.IO.MkHasIO', V12, V13} -> case V12 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> case V14 of {'Prelude.Interfaces.MkApplicative', V17, V18, V19} -> V17 end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V11) -> {'Builtin.MkUnit'} end))(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> case V5 of {'Prelude.Interfaces.MkApplicative', V8, V9, V10} -> ((V9('erased'))(('erlang':'apply'('erlang', 'send', [V1 | [V2 | []]])))) end end end)).
'un--erlSelf'(V0) -> case V0 of {'Prelude.IO.MkHasIO', V1, V2} -> case V1 of {'Prelude.Interfaces.MkMonad', V3, V4, V5} -> case V3 of {'Prelude.Interfaces.MkApplicative', V6, V7, V8} -> ((V7('erased'))(('erlang':'apply'('erlang', 'self', [])))) end end end.
'un--erlReceive'(V0, V1, V2, V3) -> case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> case V4 of {'Prelude.Interfaces.MkMonad', V6, V7, V8} -> ((((V7('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V27, V28} -> ((V28('erased'))(fun (V29) -> receive E0 -> (fun (V30) -> {'Prelude.Types.Just', V30} end(E0)) after V1 -> {'Prelude.Types.Nothing'} end end)) end))(fun (V9) -> case V9 of {'Prelude.Types.Just', V10} -> case V0 of {'Prelude.IO.MkHasIO', V11, V12} -> case V11 of {'Prelude.Interfaces.MkMonad', V13, V14, V15} -> case V13 of {'Prelude.Interfaces.MkApplicative', V16, V17, V18} -> ((V17('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Erlang.Types.ETErlTerm'}, fun () -> V2 end, V3, V10)))) end end end; {'Prelude.Types.Nothing'} -> case V0 of {'Prelude.IO.MkHasIO', V19, V20} -> case V19 of {'Prelude.Interfaces.MkMonad', V21, V22, V23} -> case V21 of {'Prelude.Interfaces.MkApplicative', V24, V25, V26} -> ((V25('erased'))(V2)) end end end end end)) end end.
