-module('Idris.Idris2.Core.Core').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8562-7403--in--un--showRig'/5,
  'nested--8562-7404--in--un--showRel'/5,
  'nested--12663-11090--in--un--goTerm'/4,
  'nested--12087-10488--in--un--go'/3,
  'dn--un--throw_Catchable_Core_Error'/2,
  'dn--un--show_Show_Warning'/1,
  'dn--un--show_Show_TTCErrorMsg'/1,
  'dn--un--show_Show_Error'/1,
  'dn--un--show_Show_DotReason'/1,
  'dn--un--showPrec_Show_Warning'/2,
  'dn--un--showPrec_Show_TTCErrorMsg'/2,
  'dn--un--showPrec_Show_Error'/2,
  'dn--un--showPrec_Show_DotReason'/2,
  'dn--un--pretty_Pretty_$ann_DotReason'/1,
  'dn--un--prettyPrec_Pretty_$ann_DotReason'/2,
  'dn--un--catch_Catchable_Core_Error'/2,
  'dn--un--breakpoint_Catchable_Core_Error'/1,
  'dn--un--__Impl_Show_Warning'/0,
  'dn--un--__Impl_Show_TTCErrorMsg'/0,
  'dn--un--__Impl_Show_Error'/0,
  'dn--un--__Impl_Show_DotReason'/0,
  'dn--un--__Impl_Pretty_$ann_DotReason'/0,
  'dn--un--__Impl_Catchable_Core_Error'/0,
  'un--writeFile'/2,
  'un--wrapRef'/4,
  'un--wrapError'/2,
  'un--whenJust'/2,
  'un--when'/2,
  'un--update'/3,
  'un--unless'/2,
  'un--traverse_'/2,
  'un--traverseVect'/2,
  'un--traversePair'/2,
  'un--traverseOpt'/2,
  'un--traverseList1_'/2,
  'un--traverseList1'/2,
  'un--traverse\x{27}'/3,
  'un--traverse'/2,
  'un--throw'/2,
  'un--sequence'/1,
  'un--readFile'/1,
  'un--put'/3,
  'un--pure'/2,
  'un--newRef'/2,
  'un--mapTermM'/3,
  'un--mapMaybeM'/2,
  'un--map'/2,
  'un--killWarningLoc'/1,
  'un--killErrorLoc'/1,
  'un--iwhenJust'/2,
  'un--iwhen'/2,
  'un--iunless'/2,
  'un--ignore'/1,
  'un--getWarningLoc'/1,
  'un--getErrorLoc'/1,
  'un--get'/2,
  'un--for_'/2,
  'un--for'/2,
  'un--foldlC'/4,
  'un--filterM'/2,
  'un--coreRun'/3,
  'un--coreLift_'/1,
  'un--coreLift'/2,
  'un--coreFail'/2,
  'un--condC'/2,
  'un--cond'/2,
  'un--catch'/3,
  'un--breakpoint'/2,
  'un--anyM'/2,
  'un--allM'/2,
  'un-->>='/2,
  'un-->>'/2,
  'un-->=>'/3,
  'un--=<<'/2,
  'un--<=<'/2,
  'un--<*>'/2,
  'un--<*'/2,
  'un--<$>'/2,
  'un--<$'/2,
  'un--*>'/2
]).
'nested--8562-7403--in--un--showRig'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V5, V6)) end end, 0, fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V8)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V11, V12)) end end}}, <<"irrelevant"/utf8>>, <<"linear"/utf8>>, fun (V13) -> <<"unrestricted"/utf8>> end, V4)).
'nested--8562-7404--in--un--showRel'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V5, V6)) end end, 0, fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V7, V8)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V11, V12)) end end}}, <<"irrelevant"/utf8>>, <<"relevant"/utf8>>, fun (V13) -> <<"non-linear"/utf8>> end, V4)).
'nested--12663-11090--in--un--goTerm'(V0, V1, V2, V3) -> case V3 of {'Core.TT.Local', V4, V5, V6} -> ((V1(V2))(V3)); {'Core.TT.Ref', V7, V8, V9} -> ((V1(V2))(V3)); {'Core.TT.Meta', V10, V11, V12, V13} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V14) -> fun (V15) -> begin (V16 = V14), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V21 = (V15(V20))), V21 end(V17)) end end end end end end, (V1(V2)), begin (V23 = ('un--traverse\x{27}'(fun (V22) -> ('nested--12663-11090--in--un--goTerm'(V0, V1, V2, V22)) end, V13, []))), ((begin (V39 = fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end), fun (V40) -> fun (V41) -> ((((V39('erased'))('erased'))(V40))(V41)) end end end((begin (V31 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V28 of {'Prelude.Types.Left', V29} -> {'Prelude.Types.Left', V29}; {'Prelude.Types.Right', V30} -> {'Prelude.Types.Right', (V27(V30))} end end end end end), fun (V32) -> fun (V33) -> ((((V31('erased'))('erased'))(V32))(V33)) end end end(fun (V24) -> {'Core.TT.Meta', V10, V11, V12, V24} end))))(V23)) end)); {'Core.TT.Bind', V42, V43, V44, V45} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V46) -> fun (V47) -> begin (V48 = V46), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V53 = (V47(V52))), V53 end(V49)) end end end end end end, (V1(V2)), ('un--<*>'(begin (V55 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V54) -> ('nested--12663-11090--in--un--goTerm'(V0, V1, V2, V54)) end, V44))), ((begin (V72 = fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V69, V70, V71)) end end end end end), fun (V73) -> fun (V74) -> ((((V72('erased'))('erased'))(V73))(V74)) end end end((begin (V64 = fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> {'Prelude.Types.Right', (V60(V63))} end end end end end), fun (V65) -> fun (V66) -> ((((V64('erased'))('erased'))(V65))(V66)) end end end(fun (V56) -> fun (V57) -> {'Core.TT.Bind', V42, V43, V56, V57} end end))))(V55)) end, ('nested--12663-11090--in--un--goTerm'(V0, V1, [V43 | V2], V45)))))); {'Core.TT.App', V75, V76, V77} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V78) -> fun (V79) -> begin (V80 = V78), fun (V81) -> begin (V82 = (V80(V81))), case V82 of {'Prelude.Types.Left', V83} -> {'Prelude.Types.Left', V83}; {'Prelude.Types.Right', V84} -> (begin (V85 = (V79(V84))), V85 end(V81)) end end end end end end, (V1(V2)), ('un--<*>'(begin (V86 = ('nested--12663-11090--in--un--goTerm'(V0, V1, V2, V76))), ((begin (V103 = fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V100, V101, V102)) end end end end end), fun (V104) -> fun (V105) -> ((((V103('erased'))('erased'))(V104))(V105)) end end end((begin (V95 = fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> case V92 of {'Prelude.Types.Left', V93} -> {'Prelude.Types.Left', V93}; {'Prelude.Types.Right', V94} -> {'Prelude.Types.Right', (V91(V94))} end end end end end), fun (V96) -> fun (V97) -> ((((V95('erased'))('erased'))(V96))(V97)) end end end(fun (V87) -> fun (V88) -> {'Core.TT.App', V75, V87, V88} end end))))(V86)) end, ('nested--12663-11090--in--un--goTerm'(V0, V1, V2, V77)))))); {'Core.TT.As', V106, V107, V108, V109} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V110) -> fun (V111) -> begin (V112 = V110), fun (V113) -> begin (V114 = (V112(V113))), case V114 of {'Prelude.Types.Left', V115} -> {'Prelude.Types.Left', V115}; {'Prelude.Types.Right', V116} -> (begin (V117 = (V111(V116))), V117 end(V113)) end end end end end end, (V1(V2)), ('un--<*>'(begin (V118 = ('nested--12663-11090--in--un--goTerm'(V0, V1, V2, V108))), ((begin (V135 = fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V132, V133, V134)) end end end end end), fun (V136) -> fun (V137) -> ((((V135('erased'))('erased'))(V136))(V137)) end end end((begin (V127 = fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> case V124 of {'Prelude.Types.Left', V125} -> {'Prelude.Types.Left', V125}; {'Prelude.Types.Right', V126} -> {'Prelude.Types.Right', (V123(V126))} end end end end end), fun (V128) -> fun (V129) -> ((((V127('erased'))('erased'))(V128))(V129)) end end end(fun (V119) -> fun (V120) -> {'Core.TT.As', V106, V107, V119, V120} end end))))(V118)) end, ('nested--12663-11090--in--un--goTerm'(V0, V1, V2, V109)))))); {'Core.TT.TDelayed', V138, V139, V140} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V141) -> fun (V142) -> begin (V143 = V141), fun (V144) -> begin (V145 = (V143(V144))), case V145 of {'Prelude.Types.Left', V146} -> {'Prelude.Types.Left', V146}; {'Prelude.Types.Right', V147} -> (begin (V148 = (V142(V147))), V148 end(V144)) end end end end end end, (V1(V2)), begin (V149 = ('nested--12663-11090--in--un--goTerm'(V0, V1, V2, V140))), ((begin (V165 = fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V162, V163, V164)) end end end end end), fun (V166) -> fun (V167) -> ((((V165('erased'))('erased'))(V166))(V167)) end end end((begin (V157 = fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> case V154 of {'Prelude.Types.Left', V155} -> {'Prelude.Types.Left', V155}; {'Prelude.Types.Right', V156} -> {'Prelude.Types.Right', (V153(V156))} end end end end end), fun (V158) -> fun (V159) -> ((((V157('erased'))('erased'))(V158))(V159)) end end end(fun (V150) -> {'Core.TT.TDelayed', V138, V139, V150} end))))(V149)) end)); {'Core.TT.TDelay', V168, V169, V170, V171} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V172) -> fun (V173) -> begin (V174 = V172), fun (V175) -> begin (V176 = (V174(V175))), case V176 of {'Prelude.Types.Left', V177} -> {'Prelude.Types.Left', V177}; {'Prelude.Types.Right', V178} -> (begin (V179 = (V173(V178))), V179 end(V175)) end end end end end end, (V1(V2)), ('un--<*>'(begin (V180 = ('nested--12663-11090--in--un--goTerm'(V0, V1, V2, V170))), ((begin (V197 = fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V194, V195, V196)) end end end end end), fun (V198) -> fun (V199) -> ((((V197('erased'))('erased'))(V198))(V199)) end end end((begin (V189 = fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> case V186 of {'Prelude.Types.Left', V187} -> {'Prelude.Types.Left', V187}; {'Prelude.Types.Right', V188} -> {'Prelude.Types.Right', (V185(V188))} end end end end end), fun (V190) -> fun (V191) -> ((((V189('erased'))('erased'))(V190))(V191)) end end end(fun (V181) -> fun (V182) -> {'Core.TT.TDelay', V168, V169, V181, V182} end end))))(V180)) end, ('nested--12663-11090--in--un--goTerm'(V0, V1, V2, V171)))))); {'Core.TT.TForce', V200, V201, V202} -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V203) -> fun (V204) -> begin (V205 = V203), fun (V206) -> begin (V207 = (V205(V206))), case V207 of {'Prelude.Types.Left', V208} -> {'Prelude.Types.Left', V208}; {'Prelude.Types.Right', V209} -> (begin (V210 = (V204(V209))), V210 end(V206)) end end end end end end, (V1(V2)), begin (V211 = ('nested--12663-11090--in--un--goTerm'(V0, V1, V2, V202))), ((begin (V227 = fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V224, V225, V226)) end end end end end), fun (V228) -> fun (V229) -> ((((V227('erased'))('erased'))(V228))(V229)) end end end((begin (V219 = fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> case V216 of {'Prelude.Types.Left', V217} -> {'Prelude.Types.Left', V217}; {'Prelude.Types.Right', V218} -> {'Prelude.Types.Right', (V215(V218))} end end end end end), fun (V220) -> fun (V221) -> ((((V219('erased'))('erased'))(V220))(V221)) end end end(fun (V212) -> {'Core.TT.TForce', V200, V201, V212} end))))(V211)) end)); {'Core.TT.PrimVal', V230, V231} -> ((V1(V2))(V3)); {'Core.TT.Erased', V232, V233} -> ((V1(V2))(V3)); {'Core.TT.TType', V234, V235} -> ((V1(V2))(V3)) end.
'nested--12087-10488--in--un--go'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.SnocList':'un--<>>'(V1, []))} end; [E0 | E1] -> (fun (V4, V5) -> begin (V6 = (V0(V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V16 = ('nested--12087-10488--in--un--go'(V0, (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V11) -> V11 end end, fun () -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V14) -> fun (V15) -> {'Prelude.Basics.:<', V14, V15} end end, V12, V13)) end end end, V10))(V1)), V5))), V16 end(V7)) end end end end end(E0, E1)) end.
'dn--un--throw_Catchable_Core_Error'(V0, V1) -> ('un--coreFail'(V0, V1)).
'dn--un--show_Show_Warning'(V0) -> case V0 of {'Core.Core.ParserWarning', V1, V2} -> V2; {'Core.Core.UnreachableClause', V3, V4, V5, V6} -> <<":Unreachable clause"/utf8>>; {'Core.Core.ShadowingGlobalDefs', V7, V8} -> <<":Shadowing names"/utf8>>; {'Core.Core.ShadowingLocalBindings', V9, V10} -> <<":Shadowing names"/utf8>>; {'Core.Core.Deprecated', V11, V12} -> <<<<":Deprecated "/utf8>>/binary, V11/binary>>; {'Core.Core.GenericWarn', V13} -> V13 end.
'dn--un--show_Show_TTCErrorMsg'(V0) -> case V0 of {'Core.Core.Format', V1, V2, V3} -> begin (V10 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, V3)) of 1 -> (begin (V5 = fun (V4) -> V4 end), fun (V6) -> (V5(V6)) end end(<<"older"/utf8>>)); 0 -> (begin (V8 = fun (V7) -> V7 end), fun (V9) -> (V8(V9)) end end(<<"newer"/utf8>>)) end), <<<<"TTC data is in an "/utf8>>/binary, <<V10/binary, <<<<" format, file: "/utf8>>/binary, <<V1/binary, <<<<", expected version: "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3))/binary, <<<<", actual version: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>> end; {'Core.Core.EndOfBuffer', V11} -> <<<<"End of buffer when reading "/utf8>>/binary, V11/binary>>; {'Core.Core.Corrupt', V12} -> <<<<"Corrupt TTC data for "/utf8>>/binary, V12/binary>> end.
'dn--un--show_Show_Error'(V0) -> case V0 of {'Core.Core.Fatal', V1} -> ('dn--un--show_Show_Error'(V1)); {'Core.Core.CantConvert', V2, V3, V4, V5, V6, V7} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V3))/binary, <<<<":Type mismatch: "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V2, V6))/binary, <<<<" and "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V2, V7))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.CantSolveEq', V8, V9, V10, V11, V12, V13} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V9))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V8, V12))/binary, <<<<" and "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V8, V13))/binary, <<" are not equal"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Core.PatternVariableUnifies', V14, V15, V16, V17, V18, V19} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V15))/binary, <<<<":Pattern variable "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18))/binary, <<<<" unifies with "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V19))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.CyclicMeta', V20, V21, V22, V23, V24} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V21))/binary, <<<<":Cycle detected in metavariable solution "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V23))/binary, <<<<" = "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V20, V24))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.WhenUnifying', V25, V26, V27, V28, V29, V30, V31} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V26))/binary, <<<<":When unifying: "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V25, V29))/binary, <<<<" and "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V25, V30))/binary, <<<<"\x{a}\x{9}"/utf8>>/binary, ('dn--un--show_Show_Error'(V31))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Core.ValidCase', V32, V33, V34, V35} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V33))/binary, <<<<":"/utf8>>/binary, case V35 of {'Prelude.Types.Left', V36} -> <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V32, V36))/binary, (begin (V38 = fun (V37) -> V37 end), fun (V39) -> (V38(V39)) end end(<<" is not a valid impossible pattern because it typechecks"/utf8>>))/binary>>; {'Prelude.Types.Right', V40} -> <<(begin (V42 = fun (V41) -> V41 end), fun (V43) -> (V42(V43)) end end(<<"Not a valid impossible pattern:\x{a}\x{9}"/utf8>>))/binary, ('dn--un--show_Show_Error'(V40))/binary>> end/binary>>/binary>>; {'Core.Core.UndefinedName', V44, V45} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V44))/binary, <<<<":Undefined name "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45))/binary>>/binary>>; {'Core.Core.InvisibleName', V46, V47, V48} -> case V48 of {'Prelude.Types.Just', V49} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V46))/binary, <<<<":Name "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V47))/binary, <<<<" is inaccessible since "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V49))/binary, <<" is not explicitly imported"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; _ -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V46))/binary, <<<<":Name "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V47))/binary, <<" is private"/utf8>>/binary>>/binary>>/binary>> end; {'Core.Core.BadTypeConType', V50, V51} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V50))/binary, <<<<":Return type of "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V51))/binary, <<" must be Type"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.BadDataConType', V52, V53, V54} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V52))/binary, <<<<":Return type of "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V53))/binary, <<<<" must be in "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V54))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.NotCovering', V55, V56, V57} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V55))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V56))/binary, <<<<" is not covering:\x{a}\x{9}"/utf8>>/binary, case V57 of {'Core.TT.IsCovering'} -> (begin (V59 = fun (V58) -> V58 end), fun (V60) -> (V59(V60)) end end(<<"Oh yes it is (Internal error!)"/utf8>>)); {'Core.TT.MissingCases', V61} -> <<(begin (V63 = fun (V62) -> V62 end), fun (V64) -> (V63(V64)) end end(<<"Missing cases:\x{a}\x{9}"/utf8>>))/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}\x{9}"/utf8>>, ((begin (V70 = fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V68, V69)) end end end end), fun (V71) -> fun (V72) -> ((((V70('erased'))('erased'))(V71))(V72)) end end end(fun (V65) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V65)) end))(V61))))/binary>>; {'Core.TT.NonCoveringCall', V73} -> <<(begin (V75 = fun (V74) -> V74 end), fun (V76) -> (V75(V76)) end end(<<"Calls non covering function"/utf8>>))/binary, case V73 of [E0 | E1] -> (fun (V77, V78) -> case V78 of [] -> <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V77))/binary>>; _ -> <<<<"s: "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V84 = fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V82, V83)) end end end end), fun (V85) -> fun (V86) -> ((((V84('erased'))('erased'))(V85))(V86)) end end end(fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V79)) end))(V73))))/binary>> end end(E0, E1)); _ -> <<<<"s: "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V92 = fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V90, V91)) end end end end), fun (V93) -> fun (V94) -> ((((V92('erased'))('erased'))(V93))(V94)) end end end(fun (V87) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V87)) end))(V73))))/binary>> end/binary>> end/binary>>/binary>>/binary>>/binary>>; {'Core.Core.NotTotal', V95, V96, V97} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V95))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V96))/binary, <<" is not total"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.LinearUsed', V98, V99, V100} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V98))/binary, <<<<":There are "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V99))/binary, <<<<" uses of linear name "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V100))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.LinearMisuse', V101, V102, V103, V104} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V101))/binary, <<<<":Trying to use "/utf8>>/binary, <<('nested--8562-7403--in--un--showRig'(V104, V103, V102, V101, V103))/binary, <<<<" name "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V102))/binary, <<<<" in "/utf8>>/binary, <<('nested--8562-7404--in--un--showRel'(V104, V103, V102, V101, V104))/binary, <<" context"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Core.BorrowPartial', V105, V106, V107, V108, V109} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V106))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V105, V108))/binary, <<<<" borrows argument "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V105, V109))/binary, <<" so must be fully applied"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Core.BorrowPartialType', V110, V111, V112, V113} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V111))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V110, V113))/binary, <<" borrows, so must return a concrete type"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.AmbiguousName', V114, V115} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V114))/binary, <<<<":Ambiguous name "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V116) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V116)) end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V117, V118)) end end}, V115))/binary>>/binary>>; {'Core.Core.AmbiguousElab', V119, V120, V121, V122} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V120))/binary, <<<<":Ambiguous elaboration "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V123) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V119, V123)) end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V119, V124, V125)) end end}, ((begin (V131 = fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V129, V130)) end end end end), fun (V132) -> fun (V133) -> ((((V131('erased'))('erased'))(V132))(V133)) end end end(fun (V126) -> ('Idris.Idris2.Builtin':'un--snd'(V126)) end))(V122))))/binary>>/binary>>; {'Core.Core.AmbiguousSearch', V134, V135, V136, V137, V138} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V135))/binary, <<<<":Ambiguous search "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V139) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V134, V139)) end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V134, V140, V141)) end end}, V138))/binary>>/binary>>; {'Core.Core.AmbiguityTooDeep', V142, V143, V144} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V142))/binary, <<<<":Ambiguity too deep in "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V143))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V145) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V145)) end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V146, V147)) end end}, V144))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.AllFailed', V148} -> <<<<"No successful elaboration: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V149) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V150) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V151) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V151)) end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V152, V153)) end end}, V150)) end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V156) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V156)) end, fun (V157) -> fun (V158) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V157, V158)) end end}, V154, V155)) end end}, {'Prelude.Show.MkShow', fun (V159) -> ('dn--un--show_Show_Error'(V159)) end, fun (V160) -> fun (V161) -> ('dn--un--showPrec_Show_Error'(V160, V161)) end end}}, V149)) end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V164) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V165) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V165)) end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V166, V167)) end end}, V164)) end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Prelude.Show.MkShow', fun (V170) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V170)) end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V171, V172)) end end}, V168, V169)) end end}, {'Prelude.Show.MkShow', fun (V173) -> ('dn--un--show_Show_Error'(V173)) end, fun (V174) -> fun (V175) -> ('dn--un--showPrec_Show_Error'(V174, V175)) end end}}, V162, V163)) end end}, V148))/binary>>; {'Core.Core.RecordTypeNeeded', V176, V177, V178} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V177))/binary, <<":Can\x{27}t infer type of record to update"/utf8>>/binary>>; {'Core.Core.DuplicatedRecordUpdatePath', V179, V180} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V179))/binary, <<<<":Duplicated record update paths: "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V181) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V182) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V182)) end, fun (V183) -> fun (V184) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V183, V184)) end end}, V181)) end, fun (V185) -> fun (V186) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Prelude.Show.MkShow', fun (V187) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V187)) end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V188, V189)) end end}, V185, V186)) end end}, V180))/binary>>/binary>>; {'Core.Core.NotRecordField', V190, V191, V192} -> case V192 of {'Prelude.Types.Nothing'} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V190))/binary, <<<<":"/utf8>>/binary, <<V191/binary, <<" is not part of a record type"/utf8>>/binary>>/binary>>/binary>>; {'Prelude.Types.Just', V193} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V190))/binary, <<<<":Record type "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V193))/binary, <<<<" has no field "/utf8>>/binary, V191/binary>>/binary>>/binary>>/binary>> end; {'Core.Core.NotRecordType', V194, V195} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V194))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V195))/binary, <<" is not a record type"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.IncompatibleFieldUpdate', V196, V197} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V196))/binary, <<<<":Field update "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"->"/utf8>>, V197))/binary, <<" not compatible with other updates"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.InvalidArgs', V198, V199, V200, V201, V202} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V199))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V203) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V203)) end, fun (V204) -> fun (V205) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V204, V205)) end end}, V201))/binary, <<<<" are not valid arguments in "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V198, V202))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.TryWithImplicits', V206, V207, V208, V209} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V207))/binary, <<<<":Need to bind implicits "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<","/utf8>>, ((begin (V215 = fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V213, V214)) end end end end), fun (V216) -> fun (V217) -> ((((V215('erased'))('erased'))(V216))(V217)) end end end(fun (V210) -> <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Builtin':'un--fst'(V210))))/binary, <<<<" : "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V206, ('Idris.Idris2.Builtin':'un--snd'(V210))))/binary>>/binary>> end))(V209))))/binary, <<"\x{a}(The front end should probably have done this for you. Please report!)"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.BadUnboundImplicit', V218, V219, V220, V221, V222} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V219))/binary, <<<<":Can\x{27}t bind name "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'un--nameRoot'(V221))/binary, <<<<" with type "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V218, V222))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.CantSolveGoal', V223, V224, V225, V226, V227, V228} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V224))/binary, <<<<":Can\x{27}t solve goal "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V223, V227))/binary>>/binary>>; {'Core.Core.DeterminingArg', V229, V230, V231, V232, V233, V234} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V230))/binary, <<<<":Can\x{27}t solve goal "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V229, V234))/binary, <<<<" since argument "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V231))/binary, <<" can\x{27}t be inferred"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Core.UnsolvedHoles', V235} -> <<<<"Unsolved holes "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V236) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V237) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V237)) end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V238, V239)) end end}, {'Prelude.Show.MkShow', fun (V240) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V240)) end, fun (V241) -> fun (V242) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V241, V242)) end end}}, V236)) end, fun (V243) -> fun (V244) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V245) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V245)) end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V246, V247)) end end}, {'Prelude.Show.MkShow', fun (V248) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V248)) end, fun (V249) -> fun (V250) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V249, V250)) end end}}, V243, V244)) end end}, V235))/binary>>; {'Core.Core.CantInferArgType', V251, V252, V253, V254, V255, V256} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V252))/binary, <<<<":Can\x{27}t infer type for "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V254))/binary, <<<<" (got "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V251, V256))/binary, <<<<" with hole "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V255))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Core.SolvedNamedHole', V257, V258, V259, V260, V261} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V258))/binary, <<<<":Named hole "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V260))/binary, <<" is solved by unification"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.VisibilityError', V262, V263, V264, V265, V266} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V262))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_Visibility'(V263))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V264))/binary, <<<<" cannot refer to "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_Visibility'(V265))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V266))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Core.NonLinearPattern', V267, V268} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V267))/binary, <<<<":Non linear pattern variable "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V268))/binary>>/binary>>; {'Core.Core.BadPattern', V269, V270} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V269))/binary, <<<<":Pattern not allowed here: "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V270))/binary>>/binary>>; {'Core.Core.NoDeclaration', V271, V272} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V271))/binary, <<<<":No type declaration for "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V272))/binary>>/binary>>; {'Core.Core.AlreadyDefined', V273, V274} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V273))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V274))/binary, <<" is already defined"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.NotFunctionType', V275, V276, V277, V278} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V276))/binary, <<<<":Not a function type: "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V275, V278))/binary>>/binary>>; {'Core.Core.RewriteNoChange', V279, V280, V281, V282, V283} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V280))/binary, <<<<":Rewriting by "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V279, V282))/binary, <<<<" did not change type "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V279, V283))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.NotRewriteRule', V284, V285, V286, V287} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V285))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V284, V287))/binary, <<" is not a rewrite rule type"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.CaseCompile', V288, V289, V290} -> case V290 of {'Core.Core.DifferingArgNumbers'} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V288))/binary, <<<<":Patterns for "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V289))/binary, <<" have different numbers of arguments"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.DifferingTypes'} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V288))/binary, <<<<":Patterns for "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V289))/binary, <<" require matching on different types"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.UnknownType'} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V288))/binary, <<<<":Can\x{27}t infer type to match in "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V289))/binary>>/binary>>; {'Core.Core.MatchErased', V291} -> case V291 of {'Builtin.DPair.MkDPair', V292, V293} -> case V293 of {'Builtin.MkPair', V294, V295} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V288))/binary, <<<<":Attempt to match on erased argument "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V292, V295))/binary, <<<<" in "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V289))/binary>>/binary>>/binary>>/binary>> end end; {'Core.Core.NotFullyApplied', V296} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V288))/binary, <<<<":Constructor "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V296))/binary, <<" is not fully applied"/utf8>>/binary>>/binary>>/binary>> end; {'Core.Core.MatchTooSpecific', V297, V298, V299, V300} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V298))/binary, <<<<":Can\x{27}t match on "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V297, V300))/binary, <<" as it is has a polymorphic type"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.BadDotPattern', V301, V302, V303, V304, V305, V306} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V302))/binary, <<<<":Can\x{27}t match on "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V301, V305))/binary, <<<<" ("/utf8>>/binary, <<('dn--un--show_Show_DotReason'(V304))/binary, <<<<")"/utf8>>/binary, <<<<" - it elaborates to "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V301, V306))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Core.BadImplicit', V307, V308} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V307))/binary, <<<<":"/utf8>>/binary, <<V308/binary, <<" can\x{27}t be bound here"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.BadRunElab', V309, V310, V311, V312, V313} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V310))/binary, <<<<":Bad elaborator script "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V309, V312))/binary, <<<<" ("/utf8>>/binary, <<V313/binary, <<")"/utf8>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Core.RunElabFail', V314} -> <<<<"Error during reflection: "/utf8>>/binary, ('dn--un--show_Show_Error'(V314))/binary>>; {'Core.Core.GenericMsg', V315, V316} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V315))/binary, <<<<":"/utf8>>/binary, V316/binary>>/binary>>; {'Core.Core.TTCError', V317} -> <<<<"Error in TTC file: "/utf8>>/binary, ('dn--un--show_Show_TTCErrorMsg'(V317))/binary>>; {'Core.Core.FileErr', V318, V319} -> <<<<"File error ("/utf8>>/binary, <<V318/binary, <<<<"): "/utf8>>/binary, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V319))/binary>>/binary>>/binary>>; {'Core.Core.CantFindPackage', V320} -> <<<<"Can\x{27}t find package "/utf8>>/binary, V320/binary>>; {'Core.Core.LitFail', V321} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V321))/binary, <<":Can\x{27}t parse literate"/utf8>>/binary>>; {'Core.Core.LexFail', V322, V323} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V322))/binary, <<<<":Lexer error ("/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V323))/binary, <<")"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.ParseFail', V324} -> <<<<"Parse errors ("/utf8>>/binary, <<('Idris.Idris2.Data.List1':'dn--un--show_Show_(List1 $a)'({'Prelude.Show.MkShow', fun (V325) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V326) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V326)) end, fun (V327) -> fun (V328) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V327, V328)) end end}, {'Prelude.Show.MkShow', fun (V329) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V329)) end, fun (V330) -> fun (V331) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V330, V331)) end end}}, V325)) end, fun (V332) -> fun (V333) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V334) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V334)) end, fun (V335) -> fun (V336) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V335, V336)) end end}, {'Prelude.Show.MkShow', fun (V337) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V337)) end, fun (V338) -> fun (V339) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V338, V339)) end end}}, V332, V333)) end end}, V324))/binary, <<")"/utf8>>/binary>>/binary>>; {'Core.Core.ModuleNotFound', V340, V341} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V340))/binary, <<<<":"/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V341))/binary, <<" not found"/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.CyclicImports', V342} -> <<<<"Module imports form a cycle: "/utf8>>/binary, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" -> "/utf8>>, ((begin (V348 = fun (V344) -> fun (V345) -> fun (V346) -> fun (V347) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V346, V347)) end end end end), fun (V349) -> fun (V350) -> ((((V348('erased'))('erased'))(V349))(V350)) end end end(fun (V343) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V343)) end))(V342))))/binary>>; {'Core.Core.ForceNeeded'} -> <<"Internal error when resolving implicit laziness"/utf8>>; {'Core.Core.InternalError', V351} -> <<<<"INTERNAL ERROR: "/utf8>>/binary, V351/binary>>; {'Core.Core.UserError', V352} -> <<<<"Error: "/utf8>>/binary, V352/binary>>; {'Core.Core.NoForeignCC', V353, V354} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V353))/binary, <<<<":The given specifier "/utf8>>/binary, <<('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V355) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V355)) end, fun (V356) -> fun (V357) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V356, V357)) end end}, V354))/binary, <<" was not accepted by any available backend."/utf8>>/binary>>/binary>>/binary>>; {'Core.Core.BadMultiline', V358, V359} -> <<<<"Invalid multiline string: "/utf8>>/binary, V359/binary>>; {'Core.Core.Timeout', V360} -> <<<<"Timeout in "/utf8>>/binary, V360/binary>>; {'Core.Core.FailingDidNotFail', V361} -> <<"Failing block did not fail"/utf8>>; {'Core.Core.FailingWrongError', V362, V363, V364} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V362))/binary, <<<<":Failing block failed with the wrong error:\x{a}"/utf8>>/binary, <<<<"Expected: "/utf8>>/binary, <<V363/binary, <<<<"\x{a}"/utf8>>/binary, <<<<"but got: "/utf8>>/binary, ('Idris.Idris2.Data.List1':'dn--un--show_Show_(List1 $a)'({'Prelude.Show.MkShow', fun (V365) -> ('dn--un--show_Show_Error'(V365)) end, fun (V366) -> fun (V367) -> ('dn--un--showPrec_Show_Error'(V366, V367)) end end}, V364))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>; {'Core.Core.InType', V368, V369, V370} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V368))/binary, <<<<":When elaborating type of "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V369))/binary, <<<<":\x{a}"/utf8>>/binary, ('dn--un--show_Show_Error'(V370))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.InCon', V371, V372, V373} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V371))/binary, <<<<":When elaborating type of constructor "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V372))/binary, <<<<":\x{a}"/utf8>>/binary, ('dn--un--show_Show_Error'(V373))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.InLHS', V374, V375, V376} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V374))/binary, <<<<":When elaborating left hand side of "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V375))/binary, <<<<":\x{a}"/utf8>>/binary, ('dn--un--show_Show_Error'(V376))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.InRHS', V377, V378, V379} -> <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V377))/binary, <<<<":When elaborating right hand side of "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V378))/binary, <<<<":\x{a}"/utf8>>/binary, ('dn--un--show_Show_Error'(V379))/binary>>/binary>>/binary>>/binary>>; {'Core.Core.MaybeMisspelling', V380, V381} -> <<('dn--un--show_Show_Error'(V380))/binary, <<<<"\x{a}Did you mean"/utf8>>/binary, case V381 of {'Data.List1.:::', V382, V383} -> case V383 of [] -> <<<<": "/utf8>>/binary, <<V382/binary, <<"?"/utf8>>/binary>>/binary>>; _ -> <<<<" any of: "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V389 = fun (V385) -> fun (V386) -> fun (V387) -> fun (V388) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V387, V388)) end end end end), fun (V390) -> fun (V391) -> ((((V389('erased'))('erased'))(V390))(V391)) end end end(fun (V384) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V384)) end))(('Idris.Idris2.Data.List1':'un--forget'(V381))))))/binary, <<"?"/utf8>>/binary>>/binary>> end; _ -> <<<<" any of: "/utf8>>/binary, <<('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ((begin (V397 = fun (V393) -> fun (V394) -> fun (V395) -> fun (V396) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V395, V396)) end end end end), fun (V398) -> fun (V399) -> ((((V397('erased'))('erased'))(V398))(V399)) end end end(fun (V392) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V392)) end))(('Idris.Idris2.Data.List1':'un--forget'(V381))))))/binary, <<"?"/utf8>>/binary>>/binary>> end/binary>>/binary>>; {'Core.Core.WarningAsError', V400} -> ('dn--un--show_Show_Warning'(V400)) end.
'dn--un--show_Show_DotReason'(V0) -> case V0 of 0 -> <<"Non linear pattern variable"/utf8>>; 1 -> <<"Variable applied to arguments"/utf8>>; 2 -> <<"Not a constructor application or primitive"/utf8>>; 3 -> <<"Erased argument"/utf8>>; 4 -> <<"User dotted"/utf8>>; 5 -> <<"Unknown reason"/utf8>>; 6 -> <<"Under-applied constructor"/utf8>> end.
'dn--un--showPrec_Show_Warning'(V0, V1) -> ('dn--un--show_Show_Warning'(V1)).
'dn--un--showPrec_Show_TTCErrorMsg'(V0, V1) -> ('dn--un--show_Show_TTCErrorMsg'(V1)).
'dn--un--showPrec_Show_Error'(V0, V1) -> ('dn--un--show_Show_Error'(V1)).
'dn--un--showPrec_Show_DotReason'(V0, V1) -> ('dn--un--show_Show_DotReason'(V1)).
'dn--un--pretty_Pretty_$ann_DotReason'(V0) -> case V0 of 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Non linear pattern variable"/utf8>>)); 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Variable applied to arguments"/utf8>>)); 2 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Not a constructor application or primitive"/utf8>>)); 3 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Erased argument"/utf8>>)); 4 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"User dotted"/utf8>>)); 5 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Unknown reason"/utf8>>)); 6 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Under-applied constructor"/utf8>>)) end.
'dn--un--prettyPrec_Pretty_$ann_DotReason'(V0, V1) -> ('dn--un--pretty_Pretty_$ann_DotReason'(V1)).
'dn--un--catch_Catchable_Core_Error'(V0, V1) -> begin (V2 = V0), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> (begin (V6 = (V1(V5))), V6 end(V3)); {'Prelude.Types.Right', V7} -> {'Prelude.Types.Right', V7} end end end end.
'dn--un--breakpoint_Catchable_Core_Error'(V0) -> begin (V1 = V0), ((begin (V8 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V2) -> {'Prelude.Types.Right', V2} end))(V1)) end.
'dn--un--__Impl_Show_Warning'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Warning'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Warning'(V1, V2)) end end}.
'dn--un--__Impl_Show_TTCErrorMsg'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_TTCErrorMsg'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_TTCErrorMsg'(V1, V2)) end end}.
'dn--un--__Impl_Show_Error'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Error'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Error'(V1, V2)) end end}.
'dn--un--__Impl_Show_DotReason'() -> {'Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_DotReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_DotReason'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_$ann_DotReason'() -> {'Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> ('dn--un--pretty_Pretty_$ann_DotReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--prettyPrec_Pretty_$ann_DotReason'(V1, V2)) end end}.
'dn--un--__Impl_Catchable_Core_Error'() -> {'Core.Core.dn--un--__mkCatchable', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--throw_Catchable_Core_Error'(V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--catch_Catchable_Core_Error'(V4, V5)) end end end, fun (V6) -> fun (V7) -> ('dn--un--breakpoint_Catchable_Core_Error'(V7)) end end}.
'un--writeFile'(V0, V1) -> begin (V31 = fun (V2) -> begin (V30 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V0, V1))(V2))), {'Prelude.Types.Right', V30} end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V39 = fun (V36) -> case V35 of {'Prelude.Types.Right', V37} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}}; {'Prelude.Types.Left', V38} -> ('dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V0, V38}, V36)) end end), V39 end(V32)) end end end end.
'un--wrapRef'(V0, V1, V2, V3) -> begin (V9 = begin (V4 = V1), fun (V5) -> begin (V8 = (begin (V6 = V4), fun (V7) -> ('erlang':'get'(V6)) end end(V5))), {'Prelude.Types.Right', V8} end end end), fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Prelude.Types.Left', V12} -> {'Prelude.Types.Left', V12}; {'Prelude.Types.Right', V13} -> (begin (V57 = begin (V33 = ('dn--un--catch_Catchable_Core_Error'(V3, fun (V14) -> begin (V15 = (V2(V13))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V32 = begin (V25 = begin (V20 = V1), fun (V21) -> begin (V24 = (begin (V22 = V20), fun (V23) -> ('erlang':'put'(V22, V13)) end end(V21))), {'Prelude.Types.Right', V24} end end end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> ('dn--un--throw_Catchable_Core_Error'(V14, V30)) end), V31 end(V26)) end end end end), V32 end(V16)) end end end end end))), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V56 = begin (V38 = (V2(V13))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V55 = begin (V48 = begin (V43 = V1), fun (V44) -> begin (V47 = (begin (V45 = V43), fun (V46) -> ('erlang':'put'(V45, V13)) end end(V44))), {'Prelude.Types.Right', V47} end end end), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V54 = fun (V53) -> {'Prelude.Types.Right', V37} end), V54 end(V49)) end end end end), V55 end(V39)) end end end end), V56 end(V34)) end end end end), V57 end(V10)) end end end end.
'un--wrapError'(V0, V1) -> begin (V2 = V1), ((begin (V11 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V3) -> case V3 of {'Prelude.Types.Left', V4} -> {'Prelude.Types.Left', (V0(V4))}; {'Prelude.Types.Right', V5} -> {'Prelude.Types.Right', V5} end end))(V2)) end.
'un--whenJust'(V0, V1) -> case V0 of {'Prelude.Types.Just', V2} -> (V1(V2)); {'Prelude.Types.Nothing'} -> fun (V3) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'un--when'(V0, V1) -> case V0 of 1 -> (V1()); 0 -> fun (V2) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'un--update'(V0, V1, V2) -> begin (V8 = begin (V3 = V1), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'get'(V5)) end end(V4))), {'Prelude.Types.Right', V7} end end end), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V18 = begin (V13 = V1), fun (V14) -> begin (V17 = (begin (V15 = V13), fun (V16) -> ('erlang':'put'(V15, (V2(V12)))) end end(V14))), {'Prelude.Types.Right', V17} end end end), V18 end(V9)) end end end end.
'un--unless'(V0, V1) -> case V0 of 1 -> fun (V2) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> (V1()) end.
'un--traverse_'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V3, V4) -> begin (V24 = begin (V5 = (V0(V3))), ((begin (V21 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end((begin (V13 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> {'Prelude.Types.Right', (V9(V12))} end end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V6) -> {'Builtin.MkUnit'} end))))(V5)) end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V29 = ('un--traverse_'(V0, V4))), V29 end(V25)) end end end end end(E0, E1)) end.
'un--traverseVect'(V0, V1) -> case V1 of {'Data.Vect.Nil'} -> fun (V2) -> {'Prelude.Types.Right', {'Data.Vect.Nil'}} end; {'Data.Vect.::', V3, V4} -> ('un--<*>'(('un--<*>'(fun (V5) -> {'Prelude.Types.Right', fun (V6) -> fun (V7) -> {'Data.Vect.::', V6, V7} end end} end, (V0(V3)))), ('un--traverseVect'(V0, V4)))) end.
'un--traversePair'(V0, V1) -> case V1 of {'Builtin.MkPair', V2, V3} -> begin (V4 = (V0(V3))), ((begin (V20 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V12 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', (V8(V11))} end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V5) -> {'Builtin.MkPair', V2, V5} end))))(V4)) end end.
'un--traverseOpt'(V0, V1) -> case V1 of {'Prelude.Types.Nothing'} -> fun (V2) -> {'Prelude.Types.Right', {'Prelude.Types.Nothing'}} end; {'Prelude.Types.Just', V3} -> begin (V4 = (V0(V3))), ((begin (V20 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end((begin (V12 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> {'Prelude.Types.Right', (V8(V11))} end end end end end), fun (V13) -> fun (V14) -> ((((V12('erased'))('erased'))(V13))(V14)) end end end(fun (V5) -> {'Prelude.Types.Just', V5} end))))(V4)) end end.
'un--traverseList1_'(V0, V1) -> begin (V4 = case V1 of {'Data.List1.:::', V2, V3} -> V2 end), begin (V7 = case V1 of {'Data.List1.:::', V5, V6} -> V6 end), begin (V27 = begin (V8 = (V0(V4))), ((begin (V24 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V21, V22, V23)) end end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end((begin (V16 = fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> {'Prelude.Types.Right', (V12(V15))} end end end end end), fun (V17) -> fun (V18) -> ((((V16('erased'))('erased'))(V17))(V18)) end end end(fun (V9) -> {'Builtin.MkUnit'} end))))(V8)) end), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V32 = ('un--traverse_'(V0, V7))), V32 end(V28)) end end end end end end.
'un--traverseList1'(V0, V1) -> begin (V4 = case V1 of {'Data.List1.:::', V2, V3} -> V2 end), begin (V7 = case V1 of {'Data.List1.:::', V5, V6} -> V6 end), ('un--<*>'(('un--<*>'(fun (V8) -> {'Prelude.Types.Right', fun (V9) -> fun (V10) -> {'Data.List1.:::', V9, V10} end end} end, (V0(V4)))), ('un--traverse\x{27}'(V0, V7, [])))) end end.
'un--traverse\x{27}'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> {'Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2))} end; [E0 | E1] -> (fun (V4, V5) -> begin (V6 = (V0(V4))), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = ('un--traverse\x{27}'(V0, V5, [V10 | V2]))), V11 end(V7)) end end end end end(E0, E1)) end.
'un--traverse'(V0, V1) -> ('un--traverse\x{27}'(V0, V1, [])).
'un--throw'(V0, V1) -> case V0 of {'Core.Core.dn--un--__mkCatchable', V2, V3, V4} -> ((V2('erased'))(V1)) end.
'un--sequence'(V0) -> case V0 of [E0 | E1] -> (fun (V1, V2) -> begin (V3 = V1), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Prelude.Types.Left', V6} -> {'Prelude.Types.Left', V6}; {'Prelude.Types.Right', V7} -> (begin (V15 = begin (V8 = ('un--sequence'(V2))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V14 = fun (V13) -> {'Prelude.Types.Right', [V7 | V12]} end), V14 end(V9)) end end end end), V15 end(V4)) end end end end end(E0, E1)); [] -> fun (V16) -> {'Prelude.Types.Right', []} end end.
'un--readFile'(V0) -> begin (V30 = fun (V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Prelude.Types.Right', V29} end end), fun (V31) -> begin (V32 = (V30(V31))), case V32 of {'Prelude.Types.Left', V33} -> {'Prelude.Types.Left', V33}; {'Prelude.Types.Right', V34} -> (begin (V38 = fun (V35) -> case V34 of {'Prelude.Types.Right', V36} -> {'Prelude.Types.Right', V36}; {'Prelude.Types.Left', V37} -> ('dn--un--throw_Catchable_Core_Error'({'Core.Core.FileErr', V0, V37}, V35)) end end), V38 end(V31)) end end end end.
'un--put'(V0, V1, V2) -> begin (V3 = V1), fun (V4) -> begin (V7 = (begin (V5 = V3), fun (V6) -> ('erlang':'put'(V5, V2)) end end(V4))), {'Prelude.Types.Right', V7} end end end.
'un--pure'(V0, V1) -> {'Prelude.Types.Right', V0}.
'un--newRef'(V0, V1) -> begin (V31 = fun (V2) -> begin (V30 = (('Idris.Idris2.Data.IORef':'un--newIORef'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Prelude.Types.Right', V30} end end), fun (V32) -> begin (V33 = (V31(V32))), case V33 of {'Prelude.Types.Left', V34} -> {'Prelude.Types.Left', V34}; {'Prelude.Types.Right', V35} -> (begin (V37 = fun (V36) -> {'Prelude.Types.Right', V35} end), V37 end(V32)) end end end end.
'un--mapTermM'(V0, V1, V2) -> ('nested--12663-11090--in--un--goTerm'(V1, V0, V1, V2)).
'un--mapMaybeM'(V0, V1) -> ('nested--12087-10488--in--un--go'(V0, {'Prelude.Basics.Lin'}, V1)).
'un--map'(V0, V1) -> begin (V2 = V1), ((begin (V17 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V14, V15, V16)) end end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end((begin (V9 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> {'Prelude.Types.Right', (V5(V8))} end end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(V0))))(V2)) end.
'un--killWarningLoc'(V0) -> case V0 of {'Core.Core.ParserWarning', V1, V2} -> {'Core.Core.ParserWarning', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V2}; {'Core.Core.UnreachableClause', V3, V4, V5, V6} -> {'Core.Core.UnreachableClause', V3, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V5, V6}; {'Core.Core.ShadowingGlobalDefs', V7, V8} -> {'Core.Core.ShadowingGlobalDefs', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V8}; {'Core.Core.ShadowingLocalBindings', V9, V10} -> {'Core.Core.ShadowingLocalBindings', ('Idris.Idris2.Core.FC':'un--emptyFC'()), ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V11) -> case V11 of {'Builtin.MkPair', V12, V13} -> case V13 of {'Builtin.MkPair', V14, V15} -> {'Builtin.MkPair', V12, {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--emptyFC'()), ('Idris.Idris2.Core.FC':'un--emptyFC'())}} end end end))(V10))}; {'Core.Core.Deprecated', V23, V24} -> {'Core.Core.Deprecated', V23, ((begin (V30 = fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V28, V29)) end end end end), fun (V31) -> fun (V32) -> ((((V30('erased'))('erased'))(V31))(V32)) end end end(fun (V25) -> {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--emptyFC'()), ('Idris.Idris2.Builtin':'un--snd'(V25))} end))(V24))}; {'Core.Core.GenericWarn', V33} -> {'Core.Core.GenericWarn', V33} end.
'un--killErrorLoc'(V0) -> case V0 of {'Core.Core.Fatal', V1} -> {'Core.Core.Fatal', ('un--killErrorLoc'(V1))}; {'Core.Core.CantConvert', V2, V3, V4, V5, V6, V7} -> {'Core.Core.CantConvert', V2, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V4, V5, V6, V7}; {'Core.Core.CantSolveEq', V8, V9, V10, V11, V12, V13} -> {'Core.Core.CantSolveEq', V8, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V10, V11, V12, V13}; {'Core.Core.PatternVariableUnifies', V14, V15, V16, V17, V18, V19} -> {'Core.Core.PatternVariableUnifies', V14, ('Idris.Idris2.Core.FC':'un--emptyFC'()), ('Idris.Idris2.Core.FC':'un--emptyFC'()), V17, V18, V19}; {'Core.Core.CyclicMeta', V20, V21, V22, V23, V24} -> {'Core.Core.CyclicMeta', V20, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V22, V23, V24}; {'Core.Core.WhenUnifying', V25, V26, V27, V28, V29, V30, V31} -> {'Core.Core.WhenUnifying', V25, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V27, V28, V29, V30, ('un--killErrorLoc'(V31))}; {'Core.Core.ValidCase', V32, V33, V34, V35} -> {'Core.Core.ValidCase', V32, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V34, V35}; {'Core.Core.UndefinedName', V36, V37} -> {'Core.Core.UndefinedName', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V37}; {'Core.Core.InvisibleName', V38, V39, V40} -> {'Core.Core.InvisibleName', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V39, V40}; {'Core.Core.BadTypeConType', V41, V42} -> {'Core.Core.BadTypeConType', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V42}; {'Core.Core.BadDataConType', V43, V44, V45} -> {'Core.Core.BadDataConType', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V44, V45}; {'Core.Core.NotCovering', V46, V47, V48} -> {'Core.Core.NotCovering', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V47, V48}; {'Core.Core.NotTotal', V49, V50, V51} -> {'Core.Core.NotTotal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V50, V51}; {'Core.Core.LinearUsed', V52, V53, V54} -> {'Core.Core.LinearUsed', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V53, V54}; {'Core.Core.LinearMisuse', V55, V56, V57, V58} -> {'Core.Core.LinearMisuse', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V56, V57, V58}; {'Core.Core.BorrowPartial', V59, V60, V61, V62, V63} -> {'Core.Core.BorrowPartial', V59, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V61, V62, V63}; {'Core.Core.BorrowPartialType', V64, V65, V66, V67} -> {'Core.Core.BorrowPartialType', V64, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V66, V67}; {'Core.Core.AmbiguousName', V68, V69} -> {'Core.Core.AmbiguousName', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V69}; {'Core.Core.AmbiguousElab', V70, V71, V72, V73} -> {'Core.Core.AmbiguousElab', V70, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V72, V73}; {'Core.Core.AmbiguousSearch', V74, V75, V76, V77, V78} -> {'Core.Core.AmbiguousSearch', V74, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V76, V77, V78}; {'Core.Core.AmbiguityTooDeep', V79, V80, V81} -> {'Core.Core.AmbiguityTooDeep', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V80, V81}; {'Core.Core.AllFailed', V82} -> {'Core.Core.AllFailed', ((begin (V97 = fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V95, V96)) end end end end), fun (V98) -> fun (V99) -> ((((V97('erased'))('erased'))(V98))(V99)) end end end((begin (V90 = fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> case V87 of {'Builtin.MkPair', V88, V89} -> {'Builtin.MkPair', V88, (V86(V89))} end end end end end), fun (V91) -> fun (V92) -> ((((V90('erased'))('erased'))(V91))(V92)) end end end(fun (V83) -> ('un--killErrorLoc'(V83)) end))))(V82))}; {'Core.Core.RecordTypeNeeded', V100, V101, V102} -> {'Core.Core.RecordTypeNeeded', V100, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V102}; {'Core.Core.DuplicatedRecordUpdatePath', V103, V104} -> {'Core.Core.DuplicatedRecordUpdatePath', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V104}; {'Core.Core.NotRecordField', V105, V106, V107} -> {'Core.Core.NotRecordField', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V106, V107}; {'Core.Core.NotRecordType', V108, V109} -> {'Core.Core.NotRecordType', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V109}; {'Core.Core.IncompatibleFieldUpdate', V110, V111} -> {'Core.Core.IncompatibleFieldUpdate', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V111}; {'Core.Core.InvalidArgs', V112, V113, V114, V115, V116} -> {'Core.Core.InvalidArgs', V112, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V114, V115, V116}; {'Core.Core.TryWithImplicits', V117, V118, V119, V120} -> {'Core.Core.TryWithImplicits', V117, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V119, V120}; {'Core.Core.BadUnboundImplicit', V121, V122, V123, V124, V125} -> {'Core.Core.BadUnboundImplicit', V121, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V123, V124, V125}; {'Core.Core.CantSolveGoal', V126, V127, V128, V129, V130, V131} -> {'Core.Core.CantSolveGoal', V126, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V128, V129, V130, V131}; {'Core.Core.DeterminingArg', V132, V133, V134, V135, V136, V137} -> {'Core.Core.DeterminingArg', V132, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V134, V135, V136, V137}; {'Core.Core.UnsolvedHoles', V138} -> {'Core.Core.UnsolvedHoles', V138}; {'Core.Core.CantInferArgType', V139, V140, V141, V142, V143, V144} -> {'Core.Core.CantInferArgType', V139, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V141, V142, V143, V144}; {'Core.Core.SolvedNamedHole', V145, V146, V147, V148, V149} -> {'Core.Core.SolvedNamedHole', V145, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V147, V148, V149}; {'Core.Core.VisibilityError', V150, V151, V152, V153, V154} -> {'Core.Core.VisibilityError', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V151, V152, V153, V154}; {'Core.Core.NonLinearPattern', V155, V156} -> {'Core.Core.NonLinearPattern', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V156}; {'Core.Core.BadPattern', V157, V158} -> {'Core.Core.BadPattern', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V158}; {'Core.Core.NoDeclaration', V159, V160} -> {'Core.Core.NoDeclaration', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V160}; {'Core.Core.AlreadyDefined', V161, V162} -> {'Core.Core.AlreadyDefined', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V162}; {'Core.Core.NotFunctionType', V163, V164, V165, V166} -> {'Core.Core.NotFunctionType', V163, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V165, V166}; {'Core.Core.RewriteNoChange', V167, V168, V169, V170, V171} -> {'Core.Core.RewriteNoChange', V167, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V169, V170, V171}; {'Core.Core.NotRewriteRule', V172, V173, V174, V175} -> {'Core.Core.NotRewriteRule', V172, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V174, V175}; {'Core.Core.CaseCompile', V176, V177, V178} -> {'Core.Core.CaseCompile', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V177, V178}; {'Core.Core.MatchTooSpecific', V179, V180, V181, V182} -> {'Core.Core.MatchTooSpecific', V179, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V181, V182}; {'Core.Core.BadDotPattern', V183, V184, V185, V186, V187, V188} -> {'Core.Core.BadDotPattern', V183, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V185, V186, V187, V188}; {'Core.Core.BadImplicit', V189, V190} -> {'Core.Core.BadImplicit', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V190}; {'Core.Core.BadRunElab', V191, V192, V193, V194, V195} -> {'Core.Core.BadRunElab', V191, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V193, V194, V195}; {'Core.Core.RunElabFail', V196} -> {'Core.Core.RunElabFail', ('un--killErrorLoc'(V196))}; {'Core.Core.GenericMsg', V197, V198} -> {'Core.Core.GenericMsg', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V198}; {'Core.Core.TTCError', V199} -> {'Core.Core.TTCError', V199}; {'Core.Core.FileErr', V200, V201} -> {'Core.Core.FileErr', V200, V201}; {'Core.Core.CantFindPackage', V202} -> {'Core.Core.CantFindPackage', V202}; {'Core.Core.LitFail', V203} -> {'Core.Core.LitFail', ('Idris.Idris2.Core.FC':'un--emptyFC'())}; {'Core.Core.LexFail', V204, V205} -> {'Core.Core.LexFail', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V205}; {'Core.Core.ParseFail', V206} -> {'Core.Core.ParseFail', ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V207) -> {'Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--emptyFC'()), ('Idris.Idris2.Builtin':'un--snd'(V207))} end, V206))}; {'Core.Core.ModuleNotFound', V208, V209} -> {'Core.Core.ModuleNotFound', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V209}; {'Core.Core.CyclicImports', V210} -> {'Core.Core.CyclicImports', V210}; {'Core.Core.ForceNeeded'} -> {'Core.Core.ForceNeeded'}; {'Core.Core.InternalError', V211} -> {'Core.Core.InternalError', V211}; {'Core.Core.UserError', V212} -> {'Core.Core.UserError', V212}; {'Core.Core.NoForeignCC', V213, V214} -> {'Core.Core.NoForeignCC', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V214}; {'Core.Core.BadMultiline', V215, V216} -> {'Core.Core.BadMultiline', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V216}; {'Core.Core.Timeout', V217} -> {'Core.Core.Timeout', V217}; {'Core.Core.FailingDidNotFail', V218} -> {'Core.Core.FailingDidNotFail', ('Idris.Idris2.Core.FC':'un--emptyFC'())}; {'Core.Core.FailingWrongError', V219, V220, V221} -> {'Core.Core.FailingWrongError', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V220, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V222) -> ('un--killErrorLoc'(V222)) end, V221))}; {'Core.Core.InType', V223, V224, V225} -> {'Core.Core.InType', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V224, ('un--killErrorLoc'(V225))}; {'Core.Core.InCon', V226, V227, V228} -> {'Core.Core.InCon', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V227, ('un--killErrorLoc'(V228))}; {'Core.Core.InLHS', V229, V230, V231} -> {'Core.Core.InLHS', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V230, ('un--killErrorLoc'(V231))}; {'Core.Core.InRHS', V232, V233, V234} -> {'Core.Core.InRHS', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V233, ('un--killErrorLoc'(V234))}; {'Core.Core.MaybeMisspelling', V235, V236} -> {'Core.Core.MaybeMisspelling', ('un--killErrorLoc'(V235)), V236}; {'Core.Core.WarningAsError', V237} -> {'Core.Core.WarningAsError', ('un--killWarningLoc'(V237))} end.
'un--iwhenJust'(V0, V1) -> case V0 of {'Libraries.Data.IMaybe.Just', V2} -> (V1(V2)); {'Libraries.Data.IMaybe.Nothing'} -> fun (V3) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end.
'un--iwhen'(V0, V1) -> case V0 of 1 -> begin (V2 = (V1())), ((begin (V18 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end((begin (V10 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> {'Prelude.Types.Right', (V6(V9))} end end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V3) -> {'Libraries.Data.IMaybe.Just', V3} end))))(V2)) end; 0 -> fun (V21) -> {'Prelude.Types.Right', {'Libraries.Data.IMaybe.Nothing'}} end end.
'un--iunless'(V0, V1) -> ('un--iwhen'(case V0 of 1 -> 0; 0 -> 1 end, V1)).
'un--ignore'(V0) -> begin (V1 = V0), ((begin (V17 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V14, V15, V16)) end end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end((begin (V9 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> {'Prelude.Types.Right', (V5(V8))} end end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(fun (V2) -> {'Builtin.MkUnit'} end))))(V1)) end.
'un--getWarningLoc'(V0) -> case V0 of {'Core.Core.ParserWarning', V1, V2} -> {'Prelude.Types.Just', V1}; {'Core.Core.UnreachableClause', V3, V4, V5, V6} -> {'Prelude.Types.Just', V4}; {'Core.Core.ShadowingGlobalDefs', V7, V8} -> {'Prelude.Types.Just', V7}; {'Core.Core.ShadowingLocalBindings', V9, V10} -> {'Prelude.Types.Just', V9}; {'Core.Core.Deprecated', V11, V12} -> ((begin (V18 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V16, V17)) end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end(fun (V13) -> ('Idris.Idris2.Builtin':'un--fst'(V13)) end))(V12)); {'Core.Core.GenericWarn', V21} -> {'Prelude.Types.Nothing'} end.
'un--getErrorLoc'(V0) -> case V0 of {'Core.Core.Fatal', V1} -> ('un--getErrorLoc'(V1)); {'Core.Core.CantConvert', V2, V3, V4, V5, V6, V7} -> {'Prelude.Types.Just', V3}; {'Core.Core.CantSolveEq', V8, V9, V10, V11, V12, V13} -> {'Prelude.Types.Just', V9}; {'Core.Core.PatternVariableUnifies', V14, V15, V16, V17, V18, V19} -> {'Prelude.Types.Just', V15}; {'Core.Core.CyclicMeta', V20, V21, V22, V23, V24} -> {'Prelude.Types.Just', V21}; {'Core.Core.WhenUnifying', V25, V26, V27, V28, V29, V30, V31} -> {'Prelude.Types.Just', V26}; {'Core.Core.ValidCase', V32, V33, V34, V35} -> {'Prelude.Types.Just', V33}; {'Core.Core.UndefinedName', V36, V37} -> {'Prelude.Types.Just', V36}; {'Core.Core.InvisibleName', V38, V39, V40} -> {'Prelude.Types.Just', V38}; {'Core.Core.BadTypeConType', V41, V42} -> {'Prelude.Types.Just', V41}; {'Core.Core.BadDataConType', V43, V44, V45} -> {'Prelude.Types.Just', V43}; {'Core.Core.NotCovering', V46, V47, V48} -> {'Prelude.Types.Just', V46}; {'Core.Core.NotTotal', V49, V50, V51} -> {'Prelude.Types.Just', V49}; {'Core.Core.LinearUsed', V52, V53, V54} -> {'Prelude.Types.Just', V52}; {'Core.Core.LinearMisuse', V55, V56, V57, V58} -> {'Prelude.Types.Just', V55}; {'Core.Core.BorrowPartial', V59, V60, V61, V62, V63} -> {'Prelude.Types.Just', V60}; {'Core.Core.BorrowPartialType', V64, V65, V66, V67} -> {'Prelude.Types.Just', V65}; {'Core.Core.AmbiguousName', V68, V69} -> {'Prelude.Types.Just', V68}; {'Core.Core.AmbiguousElab', V70, V71, V72, V73} -> {'Prelude.Types.Just', V71}; {'Core.Core.AmbiguousSearch', V74, V75, V76, V77, V78} -> {'Prelude.Types.Just', V75}; {'Core.Core.AmbiguityTooDeep', V79, V80, V81} -> {'Prelude.Types.Just', V79}; {'Core.Core.AllFailed', V82} -> case V82 of [E0 | E1] -> (fun (V83, V84) -> case V83 of {'Builtin.MkPair', V85, V86} -> ('un--getErrorLoc'(V86)) end end(E0, E1)); [] -> {'Prelude.Types.Nothing'} end; {'Core.Core.RecordTypeNeeded', V87, V88, V89} -> {'Prelude.Types.Just', V88}; {'Core.Core.DuplicatedRecordUpdatePath', V90, V91} -> {'Prelude.Types.Just', V90}; {'Core.Core.NotRecordField', V92, V93, V94} -> {'Prelude.Types.Just', V92}; {'Core.Core.NotRecordType', V95, V96} -> {'Prelude.Types.Just', V95}; {'Core.Core.IncompatibleFieldUpdate', V97, V98} -> {'Prelude.Types.Just', V97}; {'Core.Core.InvalidArgs', V99, V100, V101, V102, V103} -> {'Prelude.Types.Just', V100}; {'Core.Core.TryWithImplicits', V104, V105, V106, V107} -> {'Prelude.Types.Just', V105}; {'Core.Core.BadUnboundImplicit', V108, V109, V110, V111, V112} -> {'Prelude.Types.Just', V109}; {'Core.Core.CantSolveGoal', V113, V114, V115, V116, V117, V118} -> {'Prelude.Types.Just', V114}; {'Core.Core.DeterminingArg', V119, V120, V121, V122, V123, V124} -> {'Prelude.Types.Just', V120}; {'Core.Core.UnsolvedHoles', V125} -> case V125 of [E2 | E3] -> (fun (V126, V127) -> case V126 of {'Builtin.MkPair', V128, V129} -> {'Prelude.Types.Just', V128} end end(E2, E3)); [] -> {'Prelude.Types.Nothing'} end; {'Core.Core.CantInferArgType', V130, V131, V132, V133, V134, V135} -> {'Prelude.Types.Just', V131}; {'Core.Core.SolvedNamedHole', V136, V137, V138, V139, V140} -> {'Prelude.Types.Just', V137}; {'Core.Core.VisibilityError', V141, V142, V143, V144, V145} -> {'Prelude.Types.Just', V141}; {'Core.Core.NonLinearPattern', V146, V147} -> {'Prelude.Types.Just', V146}; {'Core.Core.BadPattern', V148, V149} -> {'Prelude.Types.Just', V148}; {'Core.Core.NoDeclaration', V150, V151} -> {'Prelude.Types.Just', V150}; {'Core.Core.AlreadyDefined', V152, V153} -> {'Prelude.Types.Just', V152}; {'Core.Core.NotFunctionType', V154, V155, V156, V157} -> {'Prelude.Types.Just', V155}; {'Core.Core.RewriteNoChange', V158, V159, V160, V161, V162} -> {'Prelude.Types.Just', V159}; {'Core.Core.NotRewriteRule', V163, V164, V165, V166} -> {'Prelude.Types.Just', V164}; {'Core.Core.CaseCompile', V167, V168, V169} -> {'Prelude.Types.Just', V167}; {'Core.Core.MatchTooSpecific', V170, V171, V172, V173} -> {'Prelude.Types.Just', V171}; {'Core.Core.BadDotPattern', V174, V175, V176, V177, V178, V179} -> {'Prelude.Types.Just', V175}; {'Core.Core.BadImplicit', V180, V181} -> {'Prelude.Types.Just', V180}; {'Core.Core.BadRunElab', V182, V183, V184, V185, V186} -> {'Prelude.Types.Just', V183}; {'Core.Core.RunElabFail', V187} -> ('un--getErrorLoc'(V187)); {'Core.Core.GenericMsg', V188, V189} -> {'Prelude.Types.Just', V188}; {'Core.Core.TTCError', V190} -> {'Prelude.Types.Nothing'}; {'Core.Core.FileErr', V191, V192} -> {'Prelude.Types.Nothing'}; {'Core.Core.CantFindPackage', V193} -> {'Prelude.Types.Nothing'}; {'Core.Core.LitFail', V194} -> {'Prelude.Types.Just', V194}; {'Core.Core.LexFail', V195, V196} -> {'Prelude.Types.Just', V195}; {'Core.Core.ParseFail', V197} -> case V197 of {'Data.List1.:::', V198, V199} -> case V198 of {'Builtin.MkPair', V200, V201} -> {'Prelude.Types.Just', V200} end end; {'Core.Core.ModuleNotFound', V202, V203} -> {'Prelude.Types.Just', V202}; {'Core.Core.CyclicImports', V204} -> {'Prelude.Types.Nothing'}; {'Core.Core.ForceNeeded'} -> {'Prelude.Types.Nothing'}; {'Core.Core.InternalError', V205} -> {'Prelude.Types.Nothing'}; {'Core.Core.UserError', V206} -> {'Prelude.Types.Nothing'}; {'Core.Core.NoForeignCC', V207, V208} -> {'Prelude.Types.Just', V207}; {'Core.Core.BadMultiline', V209, V210} -> {'Prelude.Types.Just', V209}; {'Core.Core.Timeout', V211} -> {'Prelude.Types.Nothing'}; {'Core.Core.InType', V212, V213, V214} -> ('un--getErrorLoc'(V214)); {'Core.Core.InCon', V215, V216, V217} -> ('un--getErrorLoc'(V217)); {'Core.Core.FailingDidNotFail', V218} -> {'Prelude.Types.Just', V218}; {'Core.Core.FailingWrongError', V219, V220, V221} -> {'Prelude.Types.Just', V219}; {'Core.Core.InLHS', V222, V223, V224} -> ('un--getErrorLoc'(V224)); {'Core.Core.InRHS', V225, V226, V227} -> ('un--getErrorLoc'(V227)); {'Core.Core.MaybeMisspelling', V228, V229} -> ('un--getErrorLoc'(V228)); {'Core.Core.WarningAsError', V230} -> ('un--getWarningLoc'(V230)) end.
'un--get'(V0, V1) -> begin (V2 = V1), fun (V3) -> begin (V6 = (begin (V4 = V2), fun (V5) -> ('erlang':'get'(V4)) end end(V3))), {'Prelude.Types.Right', V6} end end end.
'un--for_'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> ('un--traverse_'(V2, V3)) end end, V0, V1)).
'un--for'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> ('un--traverse\x{27}'(V2, V3, [])) end end, V0, V1)).
'un--foldlC'(V0, V1, V2, V3) -> case V0 of {'Prelude.Interfaces.MkFoldable', V4, V5, V6, V7, V8, V9} -> (((((V5('erased'))('erased'))(fun (V11) -> fun (V12) -> begin (V13 = V11), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V18 = ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V12, V17))), V18 end(V14)) end end end end end end))(fun (V10) -> {'Prelude.Types.Right', V2} end))(V3)) end.
'un--filterM'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = (V0(V3))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V17 = case V9 of 1 -> begin (V10 = ('un--filterM'(V0, V4))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V16 = fun (V15) -> {'Prelude.Types.Right', [V3 | V14]} end), V16 end(V11)) end end end end; 0 -> ('un--filterM'(V0, V4)) end), V17 end(V6)) end end end end end(E0, E1)) end.
'un--coreRun'(V0, V1, V2) -> begin (V3 = V0), fun (V4) -> begin (V5 = (V3(V4))), (('Idris.Idris2.Prelude.Types':'un--either'(fun () -> V1 end, fun () -> V2 end, V5))(V4)) end end end.
'un--coreLift_'(V0) -> begin (V3 = fun (V1) -> begin (V2 = (V0(V1))), {'Prelude.Types.Right', V2} end end), ((begin (V19 = fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V16, V17, V18)) end end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end((begin (V11 = fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> {'Prelude.Types.Right', (V7(V10))} end end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V4) -> {'Builtin.MkUnit'} end))))(V3)) end.
'un--coreLift'(V0, V1) -> begin (V2 = (V0(V1))), {'Prelude.Types.Right', V2} end.
'un--coreFail'(V0, V1) -> {'Prelude.Types.Left', V0}.
'un--condC'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Builtin.MkPair', V4, V5} -> begin (V6 = V4), fun (V7) -> begin (V8 = (V6(V7))), case V8 of {'Prelude.Types.Left', V9} -> {'Prelude.Types.Left', V9}; {'Prelude.Types.Right', V10} -> (begin (V11 = case V10 of 1 -> V5; 0 -> ('un--condC'(V3, V1)) end), V11 end(V7)) end end end end end end(E0, E1)) end.
'un--cond'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Builtin.MkPair', V4, V5} -> begin (V6 = (V4())), case V6 of 1 -> (V5()); 0 -> ('un--cond'(V3, V1)) end end end end(E0, E1)) end.
'un--catch'(V0, V1, V2) -> case V0 of {'Core.Core.dn--un--__mkCatchable', V3, V4, V5} -> (((V4('erased'))(V1))(V2)) end.
'un--breakpoint'(V0, V1) -> case V0 of {'Core.Core.dn--un--__mkCatchable', V2, V3, V4} -> ((V4('erased'))(V1)) end.
'un--anyM'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = (V0(V3))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = case V9 of 1 -> fun (V10) -> {'Prelude.Types.Right', 1} end; 0 -> ('un--anyM'(V0, V4)) end), V11 end(V6)) end end end end end(E0, E1)) end.
'un--allM'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = (V0(V3))), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V11 = case V9 of 1 -> ('un--allM'(V0, V4)); 0 -> fun (V10) -> {'Prelude.Types.Right', 0} end end), V11 end(V6)) end end end end end(E0, E1)) end.
'un-->>='(V0, V1) -> begin (V2 = V0), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V7 = (V1(V6))), V7 end(V3)) end end end end.
'un-->>'(V0, V1) -> begin (V2 = V0), fun (V3) -> begin (V4 = (V2(V3))), case V4 of {'Prelude.Types.Left', V5} -> {'Prelude.Types.Left', V5}; {'Prelude.Types.Right', V6} -> (begin (V7 = V1), V7 end(V3)) end end end end.
'un-->=>'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V3) -> fun (V4) -> begin (V5 = V3), fun (V6) -> begin (V7 = (V5(V6))), case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> (begin (V10 = (V4(V9))), V10 end(V6)) end end end end end end, V1, (V0(V2)))).
'un--=<<'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> begin (V4 = V2), fun (V5) -> begin (V6 = (V4(V5))), case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> (begin (V9 = (V3(V8))), V9 end(V5)) end end end end end end, V0, V1)).
'un--<=<'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> begin (V7 = V5), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V12 = (V6(V11))), V12 end(V8)) end end end end end end, V3, (V2(V4)))) end end end, V0, V1)).
'un--<*>'(V0, V1) -> begin (V2 = V0), begin (V3 = V1), fun (V4) -> begin (V13 = begin (V11 = fun (V5) -> fun (V6) -> case V5 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> case V6 of {'Prelude.Types.Right', V9} -> {'Prelude.Types.Right', (V8(V9))}; {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10} end end end end), begin (V12 = (V2(V4))), (V11(V12)) end end), begin (V14 = (V3(V4))), (V13(V14)) end end end end end.
'un--<*'(V0, V1) -> begin (V2 = V0), begin (V3 = V1), fun (V4) -> begin (V25 = begin (V23 = fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Interfaces':'un--<*'({'Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> {'Prelude.Types.Right', (V9(V12))} end end end end end, fun (V13) -> fun (V14) -> {'Prelude.Types.Right', V14} end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> case V17 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> case V18 of {'Prelude.Types.Right', V21} -> {'Prelude.Types.Right', (V20(V21))}; {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22} end end end end end end}, V5, V6)) end end), begin (V24 = (V2(V4))), (V23(V24)) end end), begin (V26 = (V3(V4))), (V25(V26)) end end end end end.
'un--<$>'(V0, V1) -> begin (V2 = V1), ((begin (V17 = fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V14, V15, V16)) end end end end end), fun (V18) -> fun (V19) -> ((((V17('erased'))('erased'))(V18))(V19)) end end end((begin (V9 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> case V6 of {'Prelude.Types.Left', V7} -> {'Prelude.Types.Left', V7}; {'Prelude.Types.Right', V8} -> {'Prelude.Types.Right', (V5(V8))} end end end end end), fun (V10) -> fun (V11) -> ((((V9('erased'))('erased'))(V10))(V11)) end end end(V0))))(V2)) end.
'un--<$'(V0, V1) -> begin (V2 = V1), ((begin (V18 = fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V15, V16, V17)) end end end end end), fun (V19) -> fun (V20) -> ((((V18('erased'))('erased'))(V19))(V20)) end end end((begin (V10 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> case V7 of {'Prelude.Types.Left', V8} -> {'Prelude.Types.Left', V8}; {'Prelude.Types.Right', V9} -> {'Prelude.Types.Right', (V6(V9))} end end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V3) -> V0 end))))(V2)) end.
'un--*>'(V0, V1) -> begin (V2 = V0), begin (V3 = V1), fun (V4) -> begin (V25 = begin (V23 = fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> {'Prelude.Types.Right', (V9(V12))} end end end end end, fun (V13) -> fun (V14) -> {'Prelude.Types.Right', V14} end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> case V17 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> case V18 of {'Prelude.Types.Right', V21} -> {'Prelude.Types.Right', (V20(V21))}; {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22} end end end end end end}, V5, V6)) end end), begin (V24 = (V2(V4))), (V23(V24)) end end), begin (V26 = (V3(V4))), (V25(V26)) end end end end end.
