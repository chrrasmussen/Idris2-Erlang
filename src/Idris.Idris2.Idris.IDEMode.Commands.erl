-module('Idris.Idris2.Idris.IDEMode.Commands').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--toSExp_SExpable_Name'/1,
  'dn--un--cast_Cast_(|((Builtin.Pair FileName) NonEmptyFC),((Builtin.MkPair FileName) NonEmptyFC)|)_FileContext'/1,
  'dn--un--__Impl_SExpable_Name'/1,
  'dn--un--__Impl_Cast_(|((Builtin.Pair FileName) NonEmptyFC),((Builtin.MkPair FileName) NonEmptyFC)|)_FileContext'/1,
  'un--sendStr'/2,
  'un--send'/3,
  'un--getMsg'/1
]).
'dn--un--toSExp_SExpable_Name'(V0) -> {'Protocol.SExp.SymbolAtom', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0))}.
'dn--un--cast_Cast_(|((Builtin.Pair FileName) NonEmptyFC),((Builtin.MkPair FileName) NonEmptyFC)|)_FileContext'(V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> case V2 of {'Builtin.MkPair', V3, V4} -> case V4 of {'Builtin.MkPair', V5, V6} -> case V5 of {'Builtin.MkPair', V7, V8} -> case V6 of {'Builtin.MkPair', V9, V10} -> {'Protocol.IDE.FileContext.MkFileContext', V1, {'Libraries.Text.Bounded.MkBounds', V7, V8, V9, V10}} end end end end end.
'dn--un--__Impl_SExpable_Name'(V0) -> ('dn--un--toSExp_SExpable_Name'(V0)).
'dn--un--__Impl_Cast_(|((Builtin.Pair FileName) NonEmptyFC),((Builtin.MkPair FileName) NonEmptyFC)|)_FileContext'(V0) -> ('dn--un--cast_Cast_(|((Builtin.Pair FileName) NonEmptyFC),((Builtin.MkPair FileName) NonEmptyFC)|)_FileContext'(V0)).
'un--sendStr'(V0, V1) -> ((begin (V35 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V32, V33, V34)) end end end end end), fun (V36) -> fun (V37) -> ((((V35('erased'))('erased'))(V36))(V37)) end end end(fun (V29) -> {'Builtin.MkUnit'} end))(('Idris.Idris2.Erlang.System.File':'un--fPutStr'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0, V1)))).
'un--send'(V0, V1, V2) -> begin (V6 = <<('Idris.Idris2.Protocol.SExp':'dn--un--show_Show_SExp'((begin (V4 = fun (V3) -> ('Idris.Idris2.Protocol.IDE':'dn--un--toSExp_SExpable_Reply'(V3)) end), fun (V5) -> (V4(V5)) end end(V2))))/binary, <<"\x{a}"/utf8>>/binary>>), begin (V7 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"ide-mode.send"/utf8>>, 20, fun () -> V6 end))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V60 = begin (V17 = fun (V12) -> begin (V16 = (('un--sendStr'(V1, ('Idris.Idris2.Protocol.Hex':'un--leftPad'($0, 6, ('Idris.Idris2.Protocol.Hex':'un--asHex'(begin (V13 = ('Idris.Idris2.Prelude.Types.String':'un--length'(V6))), begin (V14 = 18446744073709551616), begin (V15 = (V13 rem V14)), case ((V15 * V14) < 0) of 'true' -> (V15 + V14); _ -> V15 end end end end))))))(V12))), {'Prelude.Types.Right', V16} end end), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V59 = begin (V24 = fun (V22) -> begin (V23 = (('un--sendStr'(V1, V6))(V22))), {'Prelude.Types.Right', V23} end end), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V58 = fun (V29) -> begin (V57 = (('Idris.Idris2.Erlang.System.File':'un--fflush'({'Prelude.IO.MkHasIO', {'Prelude.Interfaces.MkMonad', {'Prelude.Interfaces.MkApplicative', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> V36 end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), begin (V44 = (V41(V42))), (V43(V44)) end end end end end end end}, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), ((V48(V50))(V49)) end end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V52(V53))), (V54(V53)) end end end end}, fun (V55) -> fun (V56) -> V56 end end}, V1))(V29))), {'Prelude.Types.Right', V57} end end), V58 end(V25)) end end end end), V59 end(V18)) end end end end), V60 end(V8)) end end end end end.
'un--getMsg'(V0) -> case V0 of {'Protocol.SExp.SExpList', V1} -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V3 of [E2 | E3] -> (fun (V4, V5) -> case V4 of {'Protocol.SExp.IntegerAtom', V6} -> case V5 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'((begin (V8 = fun (V7) -> ('Idris.Idris2.Protocol.IDE.Command':'dn--un--fromSExp_FromSExpable_IDECommand'(V7)) end), fun (V9) -> (V8(V9)) end end(V2)), fun (V10) -> {'Prelude.Types.Just', {'Builtin.MkPair', V10, V6}} end)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
