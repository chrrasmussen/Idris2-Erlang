-module('Idris.Idris2.Network.Socket.Raw').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--sockaddr_free'/2,
  'un--sock_poke'/4,
  'un--sock_peek'/3,
  'un--sock_free'/2,
  'un--sock_alloc'/2,
  'un--sendToBuf'/6,
  'un--sendBuf'/4,
  'un--recvFromBuf'/4,
  'un--recvBuf'/4,
  'un--getSockPort'/2,
  'un--getSockAddr'/2,
  'un--freeRecvfromStruct'/2,
  'un--freeRecvStruct'/2,
  'un--foreignGetRecvfromPort'/2,
  'un--foreignGetRecvfromPayload'/2,
  'un--foreignGetRecvfromAddr'/2
]).
'un--sockaddr_free'(V0, V1) -> begin (V2 = V1), ('Idris.Idris2.System.FFI':'un--free'(V0, V2)) end.
'un--sock_poke'(V0, V1, V2, V3) -> begin (V4 = V1), case V0 of {'Prelude.IO.MkHasIO', V5, V6} -> ((V6('erased'))(fun (V7) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_poke'(V4, V2, V3, V7)) end)) end end.
'un--sock_peek'(V0, V1, V2) -> begin (V3 = V1), case V0 of {'Prelude.IO.MkHasIO', V4, V5} -> ((V5('erased'))(fun (V6) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_peek'(V3, V2, V6)) end)) end end.
'un--sock_free'(V0, V1) -> begin (V2 = V1), ('Idris.Idris2.System.FFI':'un--free'(V0, V2)) end.
'un--sock_alloc'(V0, V1) -> ((begin (V11 = case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> case V5 of {'Prelude.Interfaces.MkApplicative', V8, V9, V10} -> V8 end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V2) -> V2 end))(('Idris.Idris2.System.FFI':'un--malloc'(V0, V1)))).
'un--sendToBuf'(V0, V1, V2, V3, V4, V5) -> begin (V6 = V4), case V0 of {'Prelude.IO.MkHasIO', V7, V8} -> case V7 of {'Prelude.Interfaces.MkMonad', V9, V10, V11} -> ((((V10('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V34, V35} -> ((V35('erased'))(fun (V36) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sendto_buf'(case V1 of {'Network.Socket.Data.MkSocket', V37, V38, V39, V40} -> V37 end, V6, V5, ('Idris.Idris2.Network.Socket.Data':'dn--un--show_Show_SocketAddress'(V2)), V3, ('Idris.Idris2.Network.Socket.Data':'dn--un--toCode_ToCode_SocketFamily'(case V1 of {'Network.Socket.Data.MkSocket', V41, V42, V43, V44} -> V42 end)), V36)) end)) end))(fun (V12) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V12, begin (V13 = -1), case ((V13 band 9223372036854775808) =/= 0) of 'true' -> (V13 bor -9223372036854775808); _ -> (V13 band 9223372036854775807) end end)) of 1 -> ((begin (V23 = case V0 of {'Prelude.IO.MkHasIO', V15, V16} -> case V15 of {'Prelude.Interfaces.MkMonad', V17, V18, V19} -> case V17 of {'Prelude.Interfaces.MkApplicative', V20, V21, V22} -> V20 end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V14) -> {'Prelude.Types.Left', V14} end))(('Idris.Idris2.Network.Socket.Data':'un--getErrno'(V0)))); 0 -> case V0 of {'Prelude.IO.MkHasIO', V26, V27} -> case V26 of {'Prelude.Interfaces.MkMonad', V28, V29, V30} -> case V28 of {'Prelude.Interfaces.MkApplicative', V31, V32, V33} -> ((V32('erased'))({'Prelude.Types.Right', V12})) end end end end end)) end end end.
'un--sendBuf'(V0, V1, V2, V3) -> begin (V4 = V2), case V0 of {'Prelude.IO.MkHasIO', V5, V6} -> case V5 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> ((((V8('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V32, V33} -> ((V33('erased'))(fun (V34) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_send_buf'(case V1 of {'Network.Socket.Data.MkSocket', V35, V36, V37, V38} -> V35 end, V4, V3, V34)) end)) end))(fun (V10) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V10, begin (V11 = -1), case ((V11 band 9223372036854775808) =/= 0) of 'true' -> (V11 bor -9223372036854775808); _ -> (V11 band 9223372036854775807) end end)) of 1 -> ((begin (V21 = case V0 of {'Prelude.IO.MkHasIO', V13, V14} -> case V13 of {'Prelude.Interfaces.MkMonad', V15, V16, V17} -> case V15 of {'Prelude.Interfaces.MkApplicative', V18, V19, V20} -> V18 end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V12) -> {'Prelude.Types.Left', V12} end))(('Idris.Idris2.Network.Socket.Data':'un--getErrno'(V0)))); 0 -> case V0 of {'Prelude.IO.MkHasIO', V24, V25} -> case V24 of {'Prelude.Interfaces.MkMonad', V26, V27, V28} -> case V26 of {'Prelude.Interfaces.MkApplicative', V29, V30, V31} -> ((V30('erased'))({'Prelude.Types.Right', V10})) end end end end end)) end end end.
'un--recvFromBuf'(V0, V1, V2, V3) -> begin (V4 = V2), case V0 of {'Prelude.IO.MkHasIO', V5, V6} -> case V5 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> ((((V8('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V85, V86} -> ((V86('erased'))(fun (V87) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_recvfrom_buf'(case V1 of {'Network.Socket.Data.MkSocket', V88, V89, V90, V91} -> V88 end, V4, V3, V87)) end)) end))(fun (V10) -> begin (V11 = V10), case V0 of {'Prelude.IO.MkHasIO', V12, V13} -> case V12 of {'Prelude.Interfaces.MkMonad', V14, V15, V16} -> ((((V15('erased'))('erased'))(('Idris.Idris2.Network.Socket.Data':'un--nullPtr'(V0, V10))))(fun (V17) -> case V17 of 1 -> ((begin (V27 = case V0 of {'Prelude.IO.MkHasIO', V19, V20} -> case V19 of {'Prelude.Interfaces.MkMonad', V21, V22, V23} -> case V21 of {'Prelude.Interfaces.MkApplicative', V24, V25, V26} -> V24 end end end), fun (V28) -> fun (V29) -> ((((V27('erased'))('erased'))(V28))(V29)) end end end(fun (V18) -> {'Prelude.Types.Left', V18} end))(('Idris.Idris2.Network.Socket.Data':'un--getErrno'(V0)))); 0 -> case V0 of {'Prelude.IO.MkHasIO', V30, V31} -> case V30 of {'Prelude.Interfaces.MkMonad', V32, V33, V34} -> ((((V33('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V82, V83} -> ((V83('erased'))(fun (V84) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_get_recvfrom_res'(V10, V84)) end)) end))(fun (V35) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V35, begin (V36 = -1), case ((V36 band 9223372036854775808) =/= 0) of 'true' -> (V36 bor -9223372036854775808); _ -> (V36 band 9223372036854775807) end end)) of 1 -> case V0 of {'Prelude.IO.MkHasIO', V37, V38} -> case V37 of {'Prelude.Interfaces.MkMonad', V39, V40, V41} -> ((((V40('erased'))('erased'))(('un--freeRecvfromStruct'(V0, V11))))(fun (V42) -> ((begin (V52 = case V0 of {'Prelude.IO.MkHasIO', V44, V45} -> case V44 of {'Prelude.Interfaces.MkMonad', V46, V47, V48} -> case V46 of {'Prelude.Interfaces.MkApplicative', V49, V50, V51} -> V49 end end end), fun (V53) -> fun (V54) -> ((((V52('erased'))('erased'))(V53))(V54)) end end end(fun (V43) -> {'Prelude.Types.Left', V43} end))(('Idris.Idris2.Network.Socket.Data':'un--getErrno'(V0)))) end)) end end; 0 -> case V0 of {'Prelude.IO.MkHasIO', V55, V56} -> case V55 of {'Prelude.Interfaces.MkMonad', V57, V58, V59} -> ((((V58('erased'))('erased'))(('un--foreignGetRecvfromPort'(V0, V11))))(fun (V60) -> case V0 of {'Prelude.IO.MkHasIO', V61, V62} -> case V61 of {'Prelude.Interfaces.MkMonad', V63, V64, V65} -> ((((V64('erased'))('erased'))(('un--foreignGetRecvfromAddr'(V0, V11))))(fun (V66) -> case V0 of {'Prelude.IO.MkHasIO', V67, V68} -> case V67 of {'Prelude.Interfaces.MkMonad', V69, V70, V71} -> ((((V70('erased'))('erased'))(('un--freeRecvfromStruct'(V0, V11))))(fun (V72) -> case V0 of {'Prelude.IO.MkHasIO', V73, V74} -> case V73 of {'Prelude.Interfaces.MkMonad', V75, V76, V77} -> case V75 of {'Prelude.Interfaces.MkApplicative', V78, V79, V80} -> ((V79('erased'))({'Prelude.Types.Right', {'Builtin.MkPair', {'Network.Socket.Data.MkUDPAddrInfo', V66, V60}, begin (V81 = (V35 + 1)), case ((V81 band 9223372036854775808) =/= 0) of 'true' -> (V81 bor -9223372036854775808); _ -> (V81 band 9223372036854775807) end end}})) end end end end)) end end end)) end end end)) end end end end)) end end end end)) end end end end)) end end end.
'un--recvBuf'(V0, V1, V2, V3) -> begin (V4 = V2), case V0 of {'Prelude.IO.MkHasIO', V5, V6} -> case V5 of {'Prelude.Interfaces.MkMonad', V7, V8, V9} -> ((((V8('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V32, V33} -> ((V33('erased'))(fun (V34) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_recv_buf'(case V1 of {'Network.Socket.Data.MkSocket', V35, V36, V37, V38} -> V35 end, V4, V3, V34)) end)) end))(fun (V10) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V10, begin (V11 = -1), case ((V11 band 9223372036854775808) =/= 0) of 'true' -> (V11 bor -9223372036854775808); _ -> (V11 band 9223372036854775807) end end)) of 1 -> ((begin (V21 = case V0 of {'Prelude.IO.MkHasIO', V13, V14} -> case V13 of {'Prelude.Interfaces.MkMonad', V15, V16, V17} -> case V15 of {'Prelude.Interfaces.MkApplicative', V18, V19, V20} -> V18 end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V12) -> {'Prelude.Types.Left', V12} end))(('Idris.Idris2.Network.Socket.Data':'un--getErrno'(V0)))); 0 -> case V0 of {'Prelude.IO.MkHasIO', V24, V25} -> case V24 of {'Prelude.Interfaces.MkMonad', V26, V27, V28} -> case V26 of {'Prelude.Interfaces.MkApplicative', V29, V30, V31} -> ((V30('erased'))({'Prelude.Types.Right', V10})) end end end end end)) end end end.
'un--getSockPort'(V0, V1) -> case V0 of {'Prelude.IO.MkHasIO', V2, V3} -> ((V3('erased'))(fun (V4) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sockaddr_port'(case V1 of {'Network.Socket.Data.MkSocket', V5, V6, V7, V8} -> V5 end, V4)) end)) end.
'un--getSockAddr'(V0, V1) -> begin (V2 = V1), case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V58, V59} -> ((V59('erased'))(fun (V60) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sockaddr_family'(V2, V60)) end)) end))(fun (V8) -> case ('Idris.Idris2.Network.Socket.Data':'un--getSocketFamily'(V8)) of {'Prelude.Types.Just', V9} -> case V9 of 2 -> case V0 of {'Prelude.IO.MkHasIO', V10, V11} -> case V10 of {'Prelude.Interfaces.MkMonad', V12, V13, V14} -> ((((V13('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V24, V25} -> ((V25('erased'))(fun (V26) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sockaddr_ipv4'(V2, V26)) end)) end))(fun (V15) -> case V0 of {'Prelude.IO.MkHasIO', V16, V17} -> case V16 of {'Prelude.Interfaces.MkMonad', V18, V19, V20} -> case V18 of {'Prelude.Interfaces.MkApplicative', V21, V22, V23} -> ((V22('erased'))(('Idris.Idris2.Network.Socket.Data':'un--parseIPv4'(V15)))) end end end end)) end end; 3 -> case V0 of {'Prelude.IO.MkHasIO', V27, V28} -> case V27 of {'Prelude.Interfaces.MkMonad', V29, V30, V31} -> case V29 of {'Prelude.Interfaces.MkApplicative', V32, V33, V34} -> ((V33('erased'))({'Network.Socket.Data.IPv6Addr'})) end end end; 1 -> ((begin (V47 = case V0 of {'Prelude.IO.MkHasIO', V39, V40} -> case V39 of {'Prelude.Interfaces.MkMonad', V41, V42, V43} -> case V41 of {'Prelude.Interfaces.MkApplicative', V44, V45, V46} -> V44 end end end), fun (V48) -> fun (V49) -> ((((V47('erased'))('erased'))(V48))(V49)) end end end(fun (V38) -> {'Network.Socket.Data.Hostname', V38} end))(case V0 of {'Prelude.IO.MkHasIO', V35, V36} -> ((V36('erased'))(fun (V37) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sockaddr_unix'(V2, V37)) end)) end)); 0 -> case V0 of {'Prelude.IO.MkHasIO', V50, V51} -> case V50 of {'Prelude.Interfaces.MkMonad', V52, V53, V54} -> case V52 of {'Prelude.Interfaces.MkApplicative', V55, V56, V57} -> ((V56('erased'))({'Network.Socket.Data.InvalidAddress'})) end end end; _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<"Unhandled input for Network.Socket.Raw.case block in getSockAddr at Network.Socket.Raw:64:1--75:43"/utf8>>)) end; _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<"Unhandled input for Network.Socket.Raw.case block in getSockAddr at Network.Socket.Raw:64:1--75:43"/utf8>>)) end end)) end end end.
'un--freeRecvfromStruct'(V0, V1) -> begin (V2 = V1), case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> ((V4('erased'))(fun (V5) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_free_recvfrom_struct'(V2, V5)) end)) end end.
'un--freeRecvStruct'(V0, V1) -> begin (V2 = V1), case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> ((V4('erased'))(fun (V5) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_free_recv_struct'(V2, V5)) end)) end end.
'un--foreignGetRecvfromPort'(V0, V1) -> begin (V2 = V1), case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V26, V27} -> ((V27('erased'))(fun (V28) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_get_recvfrom_sockaddr'(V2, V28)) end)) end))(fun (V8) -> case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> case V9 of {'Prelude.Interfaces.MkMonad', V11, V12, V13} -> ((((V12('erased'))('erased'))(case V0 of {'Prelude.IO.MkHasIO', V23, V24} -> ((V24('erased'))(fun (V25) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sockaddr_ipv4_port'(V8, V25)) end)) end))(fun (V14) -> case V0 of {'Prelude.IO.MkHasIO', V15, V16} -> case V15 of {'Prelude.Interfaces.MkMonad', V17, V18, V19} -> case V17 of {'Prelude.Interfaces.MkApplicative', V20, V21, V22} -> ((V21('erased'))(V14)) end end end end)) end end end)) end end end.
'un--foreignGetRecvfromPayload'(V0, V1) -> begin (V2 = V1), case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> ((V4('erased'))(fun (V5) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_get_recvfrom_payload'(V2, V5)) end)) end end.
'un--foreignGetRecvfromAddr'(V0, V1) -> begin (V2 = V1), case V0 of {'Prelude.IO.MkHasIO', V3, V4} -> case V3 of {'Prelude.Interfaces.MkMonad', V5, V6, V7} -> ((((V6('erased'))('erased'))(((begin (V21 = case V0 of {'Prelude.IO.MkHasIO', V13, V14} -> case V13 of {'Prelude.Interfaces.MkMonad', V15, V16, V17} -> case V15 of {'Prelude.Interfaces.MkApplicative', V18, V19, V20} -> V18 end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V12) -> V12 end))(case V0 of {'Prelude.IO.MkHasIO', V9, V10} -> ((V10('erased'))(fun (V11) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_get_recvfrom_sockaddr'(V2, V11)) end)) end))))(fun (V8) -> ('un--getSockAddr'(V0, V8)) end)) end end end.
