-module('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormatToErlangSource').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--genBitSegment-5675'/7,
  'nested--6342-6971--in--un--clauseToFunHead'/5,
  'un--sepBy'/2,
  'un--genTypeSpecifierList'/2,
  'un--genPattern'/1,
  'un--genMapFieldExact'/2,
  'un--genMapFieldAssoc'/2,
  'un--genLiteral'/1,
  'un--genGuardAlt'/1,
  'un--genGuard'/1,
  'un--genFunClause'/1,
  'un--genExpr'/1,
  'un--genExportFun'/1,
  'un--genDecl'/1,
  'un--genCharlist'/1,
  'un--genCatchClause'/1,
  'un--genCaseClause'/1,
  'un--genBitUnit'/1,
  'un--genBitSize'/1,
  'un--genBitSegment'/2,
  'un--genBitPattern'/1,
  'un--genAtom'/1
]).
'case--genBitSegment-5675'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> (begin (V8 = fun (V7) -> V7 end), fun (V9) -> (V8(V9)) end end(<<""/utf8>>)); _ -> <<<<"/"/utf8>>/binary, ('Idris.Idris2.Data.String':'un--joinBy'(<<"-"/utf8>>, V6))/binary>> end.
'nested--6342-6971--in--un--clauseToFunHead'(V0, V1, V2, V3, V4) -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', ('un--genAtom'(V2))} | [('un--genFunClause'(V4)) | []]]}.
'un--sepBy'(V0, V1) -> {'Compiler.Erlang.Utils.CompositeString.Nested', ('Idris.Idris2.Data.List':'un--intersperse'({'Compiler.Erlang.Utils.CompositeString.Str', V0}, V1))}.
'un--genTypeSpecifierList'(V0, V1) -> [('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormat.Helpers':'un--showBitType'(V1)) | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormat.Helpers':'un--showBitSignedness'(V2)) end))(('Idris.Idris2.Compiler.Erlang.IR.AbstractFormat':'un--getBitSignedness'(V1)))))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormat.Helpers':'un--showBitEndianness'(V10)) end))(('Idris.Idris2.Compiler.Erlang.IR.AbstractFormat':'un--getBitEndianness'(V1)))))), ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('un--genBitUnit'(V18)) end))(('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(('Idris.Idris2.Data.Maybe':'un--toMaybe'(('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormat.Helpers':'un--isAllowedToSpecifyBitUnit'(V0)), fun () -> ('Idris.Idris2.Compiler.Erlang.IR.AbstractFormat':'un--getBitUnit'(V1)) end))))))))))))].
'un--genPattern'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.APLiteral', V1} -> {'Compiler.Erlang.Utils.CompositeString.Str', ('un--genLiteral'(V1))}; {'Compiler.Erlang.IR.AbstractFormat.APBitstring', V2, V3} -> begin (V13 = ('un--sepBy'(<<", "/utf8>>, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V4) -> ('un--genBitSegment'(fun (V5) -> ('un--genBitPattern'(V5)) end, V4)) end))(V3))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"<<"/utf8>>} | [V13 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<">>"/utf8>>} | []]]]} end; {'Compiler.Erlang.IR.AbstractFormat.APCons', V14, V15, V16} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"["/utf8>>} | [('un--genPattern'(V15)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" | "/utf8>>} | [('un--genPattern'(V16)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"]"/utf8>>} | []]]]]]}; {'Compiler.Erlang.IR.AbstractFormat.APMap', V17, V18} -> begin (V28 = ('un--sepBy'(<<", "/utf8>>, ((begin (V25 = fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V23, V24)) end end end end), fun (V26) -> fun (V27) -> ((((V25('erased'))('erased'))(V26))(V27)) end end end(fun (V19) -> ('un--genMapFieldExact'(fun (V20) -> ('un--genPattern'(V20)) end, V19)) end))(V18))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"#{"/utf8>>} | [V28 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end; {'Compiler.Erlang.IR.AbstractFormat.APNil', V29} -> {'Compiler.Erlang.Utils.CompositeString.Str', <<"[]"/utf8>>}; {'Compiler.Erlang.IR.AbstractFormat.APTuple', V30, V31} -> begin (V40 = ('un--sepBy'(<<", "/utf8>>, ((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(fun (V32) -> ('un--genPattern'(V32)) end))(V31))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"{"/utf8>>} | [V40 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end; {'Compiler.Erlang.IR.AbstractFormat.APUniversal', V41} -> {'Compiler.Erlang.Utils.CompositeString.Str', <<"_"/utf8>>}; {'Compiler.Erlang.IR.AbstractFormat.APVar', V42, V43} -> {'Compiler.Erlang.Utils.CompositeString.Str', V43} end.
'un--genMapFieldExact'(V0, V1) -> case V1 of {'Compiler.Erlang.IR.AbstractFormat.MkExact', V2, V3, V4} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [(V0(V3)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" := "/utf8>>} | [(V0(V4)) | []]]]} end.
'un--genMapFieldAssoc'(V0, V1) -> case V1 of {'Compiler.Erlang.IR.AbstractFormat.MkAssoc', V2, V3, V4} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [(V0(V3)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" => "/utf8>>} | [(V0(V4)) | []]]]} end.
'un--genLiteral'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.ALAtom', V1, V2} -> ('un--genAtom'(V2)); {'Compiler.Erlang.IR.AbstractFormat.ALChar', V3, V4} -> <<<<"$"/utf8>>/binary, ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeChar'(V4, <<""/utf8>>))/binary>>; {'Compiler.Erlang.IR.AbstractFormat.ALFloat', V5, V6} -> ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showDouble'(V6)); {'Compiler.Erlang.IR.AbstractFormat.ALInteger', V7, V8} -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V8)); {'Compiler.Erlang.IR.AbstractFormat.ALCharlist', V9, V10} -> ('un--genCharlist'(V10)) end.
'un--genGuardAlt'(V0) -> begin (V1 = V0), ('un--sepBy'(<<"; "/utf8>>, ((begin (V7 = fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V5, V6)) end end end end), fun (V8) -> fun (V9) -> ((((V7('erased'))('erased'))(V8))(V9)) end end end(fun (V2) -> ('un--genGuard'(V2)) end))(('Idris.Idris2.Data.List1':'un--forget'(V1)))))) end.
'un--genGuard'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.AGLiteral', V1} -> {'Compiler.Erlang.Utils.CompositeString.Str', ('un--genLiteral'(V1))}; {'Compiler.Erlang.IR.AbstractFormat.AGCons', V2, V3, V4} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"["/utf8>>} | [('un--genGuard'(V3)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" | "/utf8>>} | [('un--genGuard'(V4)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"]"/utf8>>} | []]]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AGFunCall', V5, V6, V7} -> begin (V16 = ('un--sepBy'(<<", "/utf8>>, ((begin (V13 = fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V11, V12)) end end end end), fun (V14) -> fun (V15) -> ((((V13('erased'))('erased'))(V14))(V15)) end end end(fun (V8) -> ('un--genGuard'(V8)) end))(V7))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<<<"(erlang:"/utf8>>/binary, <<('un--genAtom'(V6))/binary, <<"("/utf8>>/binary>>/binary>>} | [V16 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"))"/utf8>>} | []]]]} end; {'Compiler.Erlang.IR.AbstractFormat.AGNil', V17} -> {'Compiler.Erlang.Utils.CompositeString.Str', <<"[]"/utf8>>}; {'Compiler.Erlang.IR.AbstractFormat.AGOp', V18, V19, V20, V21} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [('un--genGuard'(V20)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<<<" "/utf8>>/binary, <<V19/binary, <<" "/utf8>>/binary>>/binary>>} | [('un--genGuard'(V21)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | []]]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AGTuple', V22, V23} -> begin (V32 = ('un--sepBy'(<<", "/utf8>>, ((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V24) -> ('un--genGuard'(V24)) end))(V23))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"{"/utf8>>} | [V32 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end; {'Compiler.Erlang.IR.AbstractFormat.AGVar', V33, V34} -> {'Compiler.Erlang.Utils.CompositeString.Str', V34} end.
'un--genFunClause'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.MkFunClause', V1, V2, V3, V4} -> begin (V13 = ('un--sepBy'(<<", "/utf8>>, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> ('un--genPattern'(V5)) end))(('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V2))))))), begin (V22 = case V3 of [] -> {'Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ((begin (V19 = fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V17, V18)) end end end end), fun (V20) -> fun (V21) -> ((((V19('erased'))('erased'))(V20))(V21)) end end end(fun (V14) -> ('un--genGuardAlt'(V14)) end))(V3)))) | []]]} end), begin (V31 = ('un--sepBy'(<<", "/utf8>>, ((begin (V28 = fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V26, V27)) end end end end), fun (V29) -> fun (V30) -> ((((V28('erased'))('erased'))(V29))(V30)) end end end(fun (V23) -> ('un--genExpr'(V23)) end))(('Idris.Idris2.Data.List1':'un--forget'(V4))))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [V13 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | [V22 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V31 | []]]]]]]} end end end end.
'un--genExpr'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.AELiteral', V1} -> {'Compiler.Erlang.Utils.CompositeString.Str', ('un--genLiteral'(V1))}; {'Compiler.Erlang.IR.AbstractFormat.AEBitstring', V2, V3} -> begin (V13 = ('un--sepBy'(<<", "/utf8>>, ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V4) -> ('un--genBitSegment'(fun (V5) -> ('un--genExpr'(V5)) end, V4)) end))(V3))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"<<"/utf8>>} | [V13 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<">>"/utf8>>} | []]]]} end; {'Compiler.Erlang.IR.AbstractFormat.AEBlock', V14, V15} -> begin (V24 = ('un--sepBy'(<<", "/utf8>>, ((begin (V21 = fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V19, V20)) end end end end), fun (V22) -> fun (V23) -> ((((V21('erased'))('erased'))(V22))(V23)) end end end(fun (V16) -> ('un--genExpr'(V16)) end))(('Idris.Idris2.Data.List1':'un--forget'(V15))))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"begin "/utf8>>} | [V24 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]} end; {'Compiler.Erlang.IR.AbstractFormat.AECase', V25, V26, V27} -> begin (V28 = ('un--genExpr'(V26))), begin (V37 = ('un--sepBy'(<<"; "/utf8>>, ((begin (V34 = fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V32, V33)) end end end end), fun (V35) -> fun (V36) -> ((((V34('erased'))('erased'))(V35))(V36)) end end end(fun (V29) -> ('un--genCaseClause'(V29)) end))(('Idris.Idris2.Data.List1':'un--forget'(V27))))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"case "/utf8>>} | [V28 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" of "/utf8>>} | [V37 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]]]} end end; {'Compiler.Erlang.IR.AbstractFormat.AECons', V38, V39, V40} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"["/utf8>>} | [('un--genExpr'(V39)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" | "/utf8>>} | [('un--genExpr'(V40)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"]"/utf8>>} | []]]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AEFun', V41, V42, V43} -> begin (V52 = ('un--sepBy'(<<"; "/utf8>>, ((begin (V49 = fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V47, V48)) end end end end), fun (V50) -> fun (V51) -> ((((V49('erased'))('erased'))(V50))(V51)) end end end(fun (V44) -> ('un--genFunClause'(V44)) end))(('Idris.Idris2.Data.List1':'un--forget'(V43))))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"fun "/utf8>>} | [V52 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]} end; {'Compiler.Erlang.IR.AbstractFormat.AEFunCall', V53, V54, V55} -> begin (V56 = ('un--genExpr'(V54))), begin (V65 = ('un--sepBy'(<<", "/utf8>>, ((begin (V62 = fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V60, V61)) end end end end), fun (V63) -> fun (V64) -> ((((V62('erased'))('erased'))(V63))(V64)) end end end(fun (V57) -> ('un--genExpr'(V57)) end))(V55))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [V56 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [V65 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"))"/utf8>>} | []]]]]]} end end; {'Compiler.Erlang.IR.AbstractFormat.AERemoteRef', V66, V67, V68} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [('un--genExpr'(V67)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<":"/utf8>>} | [('un--genExpr'(V68)) | []]]]}; {'Compiler.Erlang.IR.AbstractFormat.AEMapNew', V69, V70} -> begin (V80 = ('un--sepBy'(<<", "/utf8>>, ((begin (V77 = fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V75, V76)) end end end end), fun (V78) -> fun (V79) -> ((((V77('erased'))('erased'))(V78))(V79)) end end end(fun (V71) -> ('un--genMapFieldAssoc'(fun (V72) -> ('un--genExpr'(V72)) end, V71)) end))(V70))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"#{"/utf8>>} | [V80 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end; {'Compiler.Erlang.IR.AbstractFormat.AEMatch', V81, V82, V83} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [('un--genPattern'(V82)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" = "/utf8>>} | [('un--genExpr'(V83)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | []]]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AENil', V84} -> {'Compiler.Erlang.Utils.CompositeString.Str', <<"[]"/utf8>>}; {'Compiler.Erlang.IR.AbstractFormat.AEOp', V85, V86, V87, V88} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [('un--genExpr'(V87)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<<<" "/utf8>>/binary, <<V86/binary, <<" "/utf8>>/binary>>/binary>>} | [('un--genExpr'(V88)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | []]]]]]}; {'Compiler.Erlang.IR.AbstractFormat.AEReceive', V89, V90, V91} -> begin (V100 = ('un--sepBy'(<<"; "/utf8>>, ((begin (V97 = fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V95, V96)) end end end end), fun (V98) -> fun (V99) -> ((((V97('erased'))('erased'))(V98))(V99)) end end end(fun (V92) -> ('un--genCaseClause'(V92)) end))(V90))))), begin (V112 = case V91 of {'Compiler.Erlang.IR.AbstractFormat.NoTimeout'} -> {'Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; {'Compiler.Erlang.IR.AbstractFormat.TimeoutAfter', V101, V102} -> begin (V111 = ('un--sepBy'(<<", "/utf8>>, ((begin (V108 = fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V106, V107)) end end end end), fun (V109) -> fun (V110) -> ((((V108('erased'))('erased'))(V109))(V110)) end end end(fun (V103) -> ('un--genExpr'(V103)) end))(('Idris.Idris2.Data.List1':'un--forget'(V102))))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<" after "/utf8>>} | [('un--genExpr'(V101)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V111 | []]]]]} end end), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"receive "/utf8>>} | [V100 | [V112 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]]} end end; {'Compiler.Erlang.IR.AbstractFormat.AETuple', V113, V114} -> begin (V123 = ('un--sepBy'(<<", "/utf8>>, ((begin (V120 = fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V118, V119)) end end end end), fun (V121) -> fun (V122) -> ((((V120('erased'))('erased'))(V121))(V122)) end end end(fun (V115) -> ('un--genExpr'(V115)) end))(V114))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"{"/utf8>>} | [V123 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end; {'Compiler.Erlang.IR.AbstractFormat.AETry', V124, V125, V126, V127, V128} -> begin (V137 = ('un--sepBy'(<<", "/utf8>>, ((begin (V134 = fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V132, V133)) end end end end), fun (V135) -> fun (V136) -> ((((V134('erased'))('erased'))(V135))(V136)) end end end(fun (V129) -> ('un--genExpr'(V129)) end))(('Idris.Idris2.Data.List1':'un--forget'(V125))))))), begin (V146 = case V126 of [] -> {'Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<" of "/utf8>>} | [('un--sepBy'(<<"; "/utf8>>, ((begin (V143 = fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V141, V142)) end end end end), fun (V144) -> fun (V145) -> ((((V143('erased'))('erased'))(V144))(V145)) end end end(fun (V138) -> ('un--genCaseClause'(V138)) end))(V126)))) | []]]} end), begin (V155 = case V127 of [] -> {'Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<" catch "/utf8>>} | [('un--sepBy'(<<"; "/utf8>>, ((begin (V152 = fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V150, V151)) end end end end), fun (V153) -> fun (V154) -> ((((V152('erased'))('erased'))(V153))(V154)) end end end(fun (V147) -> ('un--genCatchClause'(V147)) end))(V127)))) | []]]} end), begin (V164 = case V128 of [] -> {'Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<" after "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ((begin (V161 = fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V159, V160)) end end end end), fun (V162) -> fun (V163) -> ((((V161('erased'))('erased'))(V162))(V163)) end end end(fun (V156) -> ('un--genExpr'(V156)) end))(V128)))) | []]]} end), {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<"try "/utf8>>} | [V137 | [V146 | [V155 | [V164 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]]]]} end end end end; {'Compiler.Erlang.IR.AbstractFormat.AEVar', V165, V166} -> {'Compiler.Erlang.Utils.CompositeString.Str', V166} end.
'un--genExportFun'(V0) -> case V0 of {'Builtin.MkPair', V1, V2} -> <<('un--genAtom'(V1))/binary, <<<<"/"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2))/binary>>/binary>> end.
'un--genDecl'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.ADExport', V1, V2} -> {'Compiler.Erlang.Utils.CompositeString.Str', <<<<"-export([\x{a}  "/utf8>>/binary, <<('Idris.Idris2.Data.String':'un--joinBy'(<<",\x{a}  "/utf8>>, ((begin (V8 = fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V6, V7)) end end end end), fun (V9) -> fun (V10) -> ((((V8('erased'))('erased'))(V9))(V10)) end end end(fun (V3) -> ('un--genExportFun'(V3)) end))(V2))))/binary, <<"\x{a}])."/utf8>>/binary>>/binary>>}; {'Compiler.Erlang.IR.AbstractFormat.ADModule', V11, V12} -> {'Compiler.Erlang.Utils.CompositeString.Str', <<<<"-module("/utf8>>/binary, <<('un--genAtom'(V12))/binary, <<")."/utf8>>/binary>>/binary>>}; {'Compiler.Erlang.IR.AbstractFormat.ADFunDef', V13, V14, V15, V16} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [('un--sepBy'(<<";\x{a}"/utf8>>, ((begin (V22 = fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V20, V21)) end end end end), fun (V23) -> fun (V24) -> ((((V22('erased'))('erased'))(V23))(V24)) end end end(fun (V17) -> ('nested--6342-6971--in--un--clauseToFunHead'(V15, V16, V14, V13, V17)) end))(('Idris.Idris2.Data.List1':'un--forget'(V16)))))) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<"."/utf8>>} | []]]}; {'Compiler.Erlang.IR.AbstractFormat.ADAttribute', V25, V26, V27} -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<<<"-"/utf8>>/binary, <<V26/binary, <<"("/utf8>>/binary>>/binary>>} | [('Idris.Idris2.Compiler.Erlang.Utils.PrimTerm':'un--primTermToCS'(V27)) | [{'Compiler.Erlang.Utils.CompositeString.Str', <<")."/utf8>>} | []]]]} end.
'un--genCharlist'(V0) -> <<<<"\x{22}"/utf8>>/binary, <<('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), <<""/utf8>>))/binary, <<"\x{22}"/utf8>>/binary>>/binary>>.
'un--genCatchClause'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.MkCatchClause', V1, V2, V3, V4, V5, V6} -> begin (V7 = ('un--genPattern'(V2))), begin (V8 = ('un--genPattern'(V3))), begin (V9 = ('un--genPattern'(V4))), begin (V18 = case V5 of [] -> {'Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ((begin (V15 = fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V13, V14)) end end end end), fun (V16) -> fun (V17) -> ((((V15('erased'))('erased'))(V16))(V17)) end end end(fun (V10) -> ('un--genGuardAlt'(V10)) end))(V5)))) | []]]} end), begin (V27 = ('un--sepBy'(<<", "/utf8>>, ((begin (V24 = fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V22, V23)) end end end end), fun (V25) -> fun (V26) -> ((((V24('erased'))('erased'))(V25))(V26)) end end end(fun (V19) -> ('un--genExpr'(V19)) end))(('Idris.Idris2.Data.List1':'un--forget'(V6))))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [V7 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<":"/utf8>>} | [V8 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<":"/utf8>>} | [V9 | [V18 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V27 | []]]]]]]]]} end end end end end end.
'un--genCaseClause'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.MkCaseClause', V1, V2, V3, V4} -> begin (V5 = ('un--genPattern'(V2))), begin (V14 = case V3 of [] -> {'Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Compiler.Erlang.Utils.CompositeString.Nested', [{'Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ((begin (V11 = fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V9, V10)) end end end end), fun (V12) -> fun (V13) -> ((((V11('erased'))('erased'))(V12))(V13)) end end end(fun (V6) -> ('un--genGuardAlt'(V6)) end))(V3)))) | []]]} end), begin (V23 = ('un--sepBy'(<<", "/utf8>>, ((begin (V20 = fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V18, V19)) end end end end), fun (V21) -> fun (V22) -> ((((V20('erased'))('erased'))(V21))(V22)) end end end(fun (V15) -> ('un--genExpr'(V15)) end))(('Idris.Idris2.Data.List1':'un--forget'(V4))))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [V5 | [V14 | [{'Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V23 | []]]]]} end end end end.
'un--genBitUnit'(V0) -> <<<<"unit:"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Compiler.Erlang.IR.AbstractFormat':'un--bitUnitToNat'(V0))))/binary>>.
'un--genBitSize'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.ABSDefault'} -> {'Prelude.Types.Nothing'}; {'Compiler.Erlang.IR.AbstractFormat.ABSInteger', V1, V2} -> {'Prelude.Types.Just', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2))}; {'Compiler.Erlang.IR.AbstractFormat.ABSVar', V3, V4} -> {'Prelude.Types.Just', V4} end.
'un--genBitSegment'(V0, V1) -> case V1 of {'Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, V3, V4, V5} -> begin (V7 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V6) -> <<<<":"/utf8>>/binary, V6/binary>> end end, ('un--genBitSize'(V4))))), begin (V8 = ('case--genBitSegment-5675'(V3, V5, V4, V2, V0, V7, ('un--genTypeSpecifierList'(V4, V5))))), {'Compiler.Erlang.Utils.CompositeString.Nested', [(V0(V3)) | [{'Compiler.Erlang.Utils.CompositeString.Str', V7} | [{'Compiler.Erlang.Utils.CompositeString.Str', V8} | []]]]} end end end.
'un--genBitPattern'(V0) -> case V0 of {'Compiler.Erlang.IR.AbstractFormat.ABPInteger', V1, V2} -> {'Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2))}; {'Compiler.Erlang.IR.AbstractFormat.ABPFloat', V3, V4} -> {'Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showDouble'(V4))}; {'Compiler.Erlang.IR.AbstractFormat.ABPCharlist', V5, V6} -> {'Compiler.Erlang.Utils.CompositeString.Str', ('un--genCharlist'(V6))}; {'Compiler.Erlang.IR.AbstractFormat.ABPUniversal', V7} -> {'Compiler.Erlang.Utils.CompositeString.Str', <<"_"/utf8>>}; {'Compiler.Erlang.IR.AbstractFormat.ABPVar', V8, V9} -> {'Compiler.Erlang.Utils.CompositeString.Str', V9} end.
'un--genAtom'(V0) -> <<<<"\x{27}"/utf8>>/binary, <<('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), <<""/utf8>>))/binary, <<"\x{27}"/utf8>>/binary>>/binary>>.
