-module('Idris.Idris2.Protocol.IDE.Command').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--3559-7085--in--un--getMode'/5,
  'nested--2856-6521--in--un--getMode'/5,
  'dn--un--toSExp_SExpable_IDECommand'/1,
  'dn--un--toSExp_SExpable_Hints'/1,
  'dn--un--fromSExp_FromSExpable_IDECommand'/1,
  'dn--un--fromSExp_FromSExpable_Hints'/1,
  'dn--un--__Impl_SExpable_IDECommand'/1,
  'dn--un--__Impl_SExpable_Hints'/1,
  'dn--un--__Impl_FromSExpable_IDECommand'/1,
  'dn--un--__Impl_FromSExpable_Hints'/1,
  'un--putIDECommand'/1,
  'un--getIDECommand'/1
]).
'nested--3559-7085--in--un--getMode'(V0, V1, V2, V3, V4) -> case V4 of 1 -> {'Protocol.SExp.SymbolAtom', <<"all"/utf8>>}; 0 -> {'Protocol.SExp.SymbolAtom', <<"other"/utf8>>} end.
'nested--2856-6521--in--un--getMode'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, <<"all"/utf8>>)).
'dn--un--toSExp_SExpable_IDECommand'(V0) -> ('un--putIDECommand'(V0)).
'dn--un--toSExp_SExpable_Hints'(V0) -> (begin (V4 = fun (V2) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_(List $a)'(fun (V3) -> ('Idris.Idris2.Protocol.SExp':'dn--un--toSExp_SExpable_String'(V3)) end, V2)) end), fun (V5) -> (V4(V5)) end end(begin (V1 = V0), V1 end)).
'dn--un--fromSExp_FromSExpable_IDECommand'(V0) -> ('un--getIDECommand'(V0)).
'dn--un--fromSExp_FromSExpable_Hints'(V0) -> ((begin (V10 = fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V8, V9)) end end end end), fun (V11) -> fun (V12) -> ((((V10('erased'))('erased'))(V11))(V12)) end end end(fun (V5) -> V5 end))((begin (V3 = fun (V1) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_(List $a)'(fun (V2) -> ('Idris.Idris2.Protocol.SExp':'dn--un--fromSExp_FromSExpable_String'(V2)) end, V1)) end), fun (V4) -> (V3(V4)) end end(V0)))).
'dn--un--__Impl_SExpable_IDECommand'(V0) -> ('dn--un--toSExp_SExpable_IDECommand'(V0)).
'dn--un--__Impl_SExpable_Hints'(V0) -> ('dn--un--toSExp_SExpable_Hints'(V0)).
'dn--un--__Impl_FromSExpable_IDECommand'(V0) -> ('dn--un--fromSExp_FromSExpable_IDECommand'(V0)).
'dn--un--__Impl_FromSExpable_Hints'(V0) -> ('dn--un--fromSExp_FromSExpable_Hints'(V0)).
'un--putIDECommand'(V0) -> case V0 of {'Protocol.IDE.Command.Interpret', V1} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"interpret"/utf8>>} | [{'Protocol.SExp.StringAtom', V1} | []]]}; {'Protocol.IDE.Command.LoadFile', V2, V3} -> case V3 of {'Prelude.Types.Nothing'} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"load-file"/utf8>>} | [{'Protocol.SExp.StringAtom', V2} | []]]}; {'Prelude.Types.Just', V4} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"load-file"/utf8>>} | [{'Protocol.SExp.StringAtom', V2} | [{'Protocol.SExp.IntegerAtom', V4} | []]]]} end; {'Protocol.IDE.Command.TypeOf', V5, V6} -> case V6 of {'Prelude.Types.Nothing'} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"type-of"/utf8>>} | [{'Protocol.SExp.StringAtom', V5} | []]]}; {'Prelude.Types.Just', V7} -> case V7 of {'Builtin.MkPair', V8, V9} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"type-of"/utf8>>} | [{'Protocol.SExp.StringAtom', V5} | [{'Protocol.SExp.IntegerAtom', V8} | [{'Protocol.SExp.IntegerAtom', V9} | []]]]]} end end; {'Protocol.IDE.Command.NameAt', V10, V11} -> case V11 of {'Prelude.Types.Nothing'} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"name-at"/utf8>>} | [{'Protocol.SExp.StringAtom', V10} | []]]}; {'Prelude.Types.Just', V12} -> case V12 of {'Builtin.MkPair', V13, V14} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"name-at"/utf8>>} | [{'Protocol.SExp.StringAtom', V10} | [{'Protocol.SExp.IntegerAtom', V13} | [{'Protocol.SExp.IntegerAtom', V14} | []]]]]} end end; {'Protocol.IDE.Command.CaseSplit', V15, V16, V17} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"case-split"/utf8>>} | [{'Protocol.SExp.IntegerAtom', V15} | [{'Protocol.SExp.IntegerAtom', V16} | [{'Protocol.SExp.StringAtom', V17} | []]]]]}; {'Protocol.IDE.Command.AddClause', V18, V19} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"add-clause"/utf8>>} | [{'Protocol.SExp.IntegerAtom', V18} | [{'Protocol.SExp.StringAtom', V19} | []]]]}; {'Protocol.IDE.Command.AddMissing', V20, V21} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"add-missing"/utf8>>} | [{'Protocol.SExp.IntegerAtom', V20} | [{'Protocol.SExp.StringAtom', V21} | []]]]}; {'Protocol.IDE.Command.Intro', V22, V23} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"intro"/utf8>>} | [{'Protocol.SExp.IntegerAtom', V22} | [{'Protocol.SExp.StringAtom', V23} | []]]]}; {'Protocol.IDE.Command.Refine', V24, V25, V26} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"refine"/utf8>>} | [{'Protocol.SExp.IntegerAtom', V24} | [{'Protocol.SExp.StringAtom', V25} | [{'Protocol.SExp.StringAtom', V26} | []]]]]}; {'Protocol.IDE.Command.ExprSearch', V27, V28, V29, V30} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"proof-search"/utf8>>} | [{'Protocol.SExp.IntegerAtom', V27} | [{'Protocol.SExp.StringAtom', V28} | [('dn--un--toSExp_SExpable_Hints'(V29)) | [('nested--3559-7085--in--un--getMode'(V30, V29, V28, V27, V30)) | []]]]]]}; {'Protocol.IDE.Command.ExprSearchNext'} -> {'Protocol.SExp.SymbolAtom', <<"proof-search-next"/utf8>>}; {'Protocol.IDE.Command.GenerateDef', V31, V32} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"generate-def"/utf8>>} | [{'Protocol.SExp.IntegerAtom', V31} | [{'Protocol.SExp.StringAtom', V32} | []]]]}; {'Protocol.IDE.Command.GenerateDefNext'} -> {'Protocol.SExp.SymbolAtom', <<"generate-def-next"/utf8>>}; {'Protocol.IDE.Command.MakeLemma', V33, V34} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"make-lemma"/utf8>>} | [{'Protocol.SExp.IntegerAtom', V33} | [{'Protocol.SExp.StringAtom', V34} | []]]]}; {'Protocol.IDE.Command.MakeCase', V35, V36} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"make-case"/utf8>>} | [{'Protocol.SExp.IntegerAtom', V35} | [{'Protocol.SExp.StringAtom', V36} | []]]]}; {'Protocol.IDE.Command.MakeWith', V37, V38} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"make-with"/utf8>>} | [{'Protocol.SExp.IntegerAtom', V37} | [{'Protocol.SExp.StringAtom', V38} | []]]]}; {'Protocol.IDE.Command.DocsFor', V39, V40} -> begin (V42 = case V40 of {'Prelude.Types.Nothing'} -> []; {'Prelude.Types.Just', V41} -> case V41 of 0 -> [{'Protocol.SExp.SymbolAtom', <<"overview"/utf8>>} | []]; 1 -> [{'Protocol.SExp.SymbolAtom', <<"full"/utf8>>} | []] end end), {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"docs-for"/utf8>>} | [{'Protocol.SExp.StringAtom', V39} | V42]]} end; {'Protocol.IDE.Command.Apropos', V43} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"apropos"/utf8>>} | [{'Protocol.SExp.StringAtom', V43} | []]]}; {'Protocol.IDE.Command.Metavariables', V44} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"metavariables"/utf8>>} | [{'Protocol.SExp.IntegerAtom', V44} | []]]}; {'Protocol.IDE.Command.WhoCalls', V45} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"who-calls"/utf8>>} | [{'Protocol.SExp.StringAtom', V45} | []]]}; {'Protocol.IDE.Command.CallsWho', V46} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"calls-who"/utf8>>} | [{'Protocol.SExp.StringAtom', V46} | []]]}; {'Protocol.IDE.Command.BrowseNamespace', V47} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"browse-namespace"/utf8>>} | [{'Protocol.SExp.StringAtom', V47} | []]]}; {'Protocol.IDE.Command.NormaliseTerm', V48} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"normalise-term"/utf8>>} | [{'Protocol.SExp.StringAtom', V48} | []]]}; {'Protocol.IDE.Command.ShowTermImplicits', V49} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"show-term-implicits"/utf8>>} | [{'Protocol.SExp.StringAtom', V49} | []]]}; {'Protocol.IDE.Command.HideTermImplicits', V50} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"hide-term-implicits"/utf8>>} | [{'Protocol.SExp.StringAtom', V50} | []]]}; {'Protocol.IDE.Command.ElaborateTerm', V51} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"elaborate-term"/utf8>>} | [{'Protocol.SExp.StringAtom', V51} | []]]}; {'Protocol.IDE.Command.PrintDefinition', V52} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"print-definition"/utf8>>} | [{'Protocol.SExp.StringAtom', V52} | []]]}; {'Protocol.IDE.Command.ReplCompletions', V53} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"repl-completions"/utf8>>} | [{'Protocol.SExp.StringAtom', V53} | []]]}; {'Protocol.IDE.Command.Directive', V54} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"directive"/utf8>>} | [{'Protocol.SExp.StringAtom', V54} | []]]}; {'Protocol.IDE.Command.EnableSyntax', V55} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"enable-syntax"/utf8>>} | [{'Protocol.SExp.BoolAtom', V55} | []]]}; {'Protocol.IDE.Command.GetOptions'} -> {'Protocol.SExp.SExpList', [{'Protocol.SExp.SymbolAtom', <<"get-options"/utf8>>} | []]}; {'Protocol.IDE.Command.Version'} -> {'Protocol.SExp.SymbolAtom', <<"version"/utf8>>} end.
'un--getIDECommand'(V0) -> case V0 of {'Protocol.SExp.SExpList', V1} -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Protocol.SExp.SymbolAtom', V4} -> case V4 of <<"interpret"/utf8>> -> case V3 of [E2 | E3] -> (fun (V5, V6) -> case V5 of {'Protocol.SExp.StringAtom', V7} -> case V6 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.Interpret', V7}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Prelude.Types.Nothing'} end; <<"load-file"/utf8>> -> case V3 of [E4 | E5] -> (fun (V8, V9) -> case V8 of {'Protocol.SExp.StringAtom', V10} -> case V9 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.LoadFile', V10, {'Prelude.Types.Nothing'}}}; [E6 | E7] -> (fun (V11, V12) -> case V11 of {'Protocol.SExp.IntegerAtom', V13} -> case V12 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.LoadFile', V10, {'Prelude.Types.Just', V13}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E6, E7)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Prelude.Types.Nothing'} end; <<"type-of"/utf8>> -> case V3 of [E8 | E9] -> (fun (V14, V15) -> case V14 of {'Protocol.SExp.StringAtom', V16} -> case V15 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.TypeOf', V16, {'Prelude.Types.Nothing'}}}; [E10 | E11] -> (fun (V17, V18) -> case V17 of {'Protocol.SExp.IntegerAtom', V19} -> case V18 of [E12 | E13] -> (fun (V20, V21) -> case V20 of {'Protocol.SExp.IntegerAtom', V22} -> case V21 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.TypeOf', V16, {'Prelude.Types.Just', {'Builtin.MkPair', V19, V22}}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E12, E13)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E8, E9)); _ -> {'Prelude.Types.Nothing'} end; <<"name-at"/utf8>> -> case V3 of [E14 | E15] -> (fun (V23, V24) -> case V23 of {'Protocol.SExp.StringAtom', V25} -> case V24 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.NameAt', V25, {'Prelude.Types.Nothing'}}}; [E16 | E17] -> (fun (V26, V27) -> case V26 of {'Protocol.SExp.IntegerAtom', V28} -> case V27 of [E18 | E19] -> (fun (V29, V30) -> case V29 of {'Protocol.SExp.IntegerAtom', V31} -> case V30 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.NameAt', V25, {'Prelude.Types.Just', {'Builtin.MkPair', V28, V31}}}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E18, E19)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E16, E17)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E14, E15)); _ -> {'Prelude.Types.Nothing'} end; <<"case-split"/utf8>> -> case V3 of [E20 | E21] -> (fun (V32, V33) -> case V32 of {'Protocol.SExp.IntegerAtom', V34} -> case V33 of [E22 | E23] -> (fun (V35, V36) -> case V35 of {'Protocol.SExp.IntegerAtom', V37} -> case V36 of [E24 | E25] -> (fun (V38, V39) -> case V38 of {'Protocol.SExp.StringAtom', V40} -> case V39 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.CaseSplit', V34, V37, V40}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E24, E25)); _ -> {'Prelude.Types.Nothing'} end; {'Protocol.SExp.StringAtom', V41} -> case V36 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.CaseSplit', V34, 0, V41}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E22, E23)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E20, E21)); _ -> {'Prelude.Types.Nothing'} end; <<"add-clause"/utf8>> -> case V3 of [E26 | E27] -> (fun (V42, V43) -> case V42 of {'Protocol.SExp.IntegerAtom', V44} -> case V43 of [E28 | E29] -> (fun (V45, V46) -> case V45 of {'Protocol.SExp.StringAtom', V47} -> case V46 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.AddClause', V44, V47}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E28, E29)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E26, E27)); _ -> {'Prelude.Types.Nothing'} end; <<"add-missing"/utf8>> -> case V3 of [E30 | E31] -> (fun (V48, V49) -> case V48 of {'Protocol.SExp.IntegerAtom', V50} -> case V49 of [E32 | E33] -> (fun (V51, V52) -> case V51 of {'Protocol.SExp.StringAtom', V53} -> case V52 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.AddMissing', V50, V53}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E32, E33)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E30, E31)); _ -> {'Prelude.Types.Nothing'} end; <<"proof-search"/utf8>> -> case V3 of [E34 | E35] -> (fun (V54, V55) -> case V54 of {'Protocol.SExp.IntegerAtom', V56} -> case V55 of [E36 | E37] -> (fun (V57, V58) -> case V57 of {'Protocol.SExp.StringAtom', V59} -> case V58 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.ExprSearch', V56, V59, [], 0}}; [E38 | E39] -> (fun (V60, V61) -> case V61 of [] -> ((begin (V67 = fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V65, V66)) end end end end), fun (V68) -> fun (V69) -> ((((V67('erased'))('erased'))(V68))(V69)) end end end(fun (V62) -> {'Protocol.IDE.Command.ExprSearch', V56, V59, V62, 0} end))(('dn--un--fromSExp_FromSExpable_Hints'(V60)))); [E40 | E41] -> (fun (V70, V71) -> case V70 of {'Protocol.SExp.SymbolAtom', V72} -> case V71 of [] -> ((begin (V78 = fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V76, V77)) end end end end), fun (V79) -> fun (V80) -> ((((V78('erased'))('erased'))(V79))(V80)) end end end(fun (V73) -> {'Protocol.IDE.Command.ExprSearch', V56, V59, V73, ('nested--2856-6521--in--un--getMode'(V56, V59, V60, V72, V72))} end))(('dn--un--fromSExp_FromSExpable_Hints'(V60)))); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E40, E41)); _ -> {'Prelude.Types.Nothing'} end end(E38, E39)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E36, E37)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E34, E35)); _ -> {'Prelude.Types.Nothing'} end; <<"intro"/utf8>> -> case V3 of [E42 | E43] -> (fun (V81, V82) -> case V81 of {'Protocol.SExp.IntegerAtom', V83} -> case V82 of [E44 | E45] -> (fun (V84, V85) -> case V84 of {'Protocol.SExp.StringAtom', V86} -> case V85 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.Intro', V83, V86}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E44, E45)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E42, E43)); _ -> {'Prelude.Types.Nothing'} end; <<"refine"/utf8>> -> case V3 of [E46 | E47] -> (fun (V87, V88) -> case V87 of {'Protocol.SExp.IntegerAtom', V89} -> case V88 of [E48 | E49] -> (fun (V90, V91) -> case V90 of {'Protocol.SExp.StringAtom', V92} -> case V91 of [E50 | E51] -> (fun (V93, V94) -> case V93 of {'Protocol.SExp.StringAtom', V95} -> case V94 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.Refine', V89, V92, V95}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E50, E51)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E48, E49)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E46, E47)); _ -> {'Prelude.Types.Nothing'} end; <<"generate-def"/utf8>> -> case V3 of [E52 | E53] -> (fun (V96, V97) -> case V96 of {'Protocol.SExp.IntegerAtom', V98} -> case V97 of [E54 | E55] -> (fun (V99, V100) -> case V99 of {'Protocol.SExp.StringAtom', V101} -> case V100 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.GenerateDef', V98, V101}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E54, E55)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E52, E53)); _ -> {'Prelude.Types.Nothing'} end; <<"make-lemma"/utf8>> -> case V3 of [E56 | E57] -> (fun (V102, V103) -> case V102 of {'Protocol.SExp.IntegerAtom', V104} -> case V103 of [E58 | E59] -> (fun (V105, V106) -> case V105 of {'Protocol.SExp.StringAtom', V107} -> case V106 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.MakeLemma', V104, V107}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E58, E59)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E56, E57)); _ -> {'Prelude.Types.Nothing'} end; <<"make-case"/utf8>> -> case V3 of [E60 | E61] -> (fun (V108, V109) -> case V108 of {'Protocol.SExp.IntegerAtom', V110} -> case V109 of [E62 | E63] -> (fun (V111, V112) -> case V111 of {'Protocol.SExp.StringAtom', V113} -> case V112 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.MakeCase', V110, V113}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E62, E63)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E60, E61)); _ -> {'Prelude.Types.Nothing'} end; <<"make-with"/utf8>> -> case V3 of [E64 | E65] -> (fun (V114, V115) -> case V114 of {'Protocol.SExp.IntegerAtom', V116} -> case V115 of [E66 | E67] -> (fun (V117, V118) -> case V117 of {'Protocol.SExp.StringAtom', V119} -> case V118 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.MakeWith', V116, V119}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E66, E67)); _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E64, E65)); _ -> {'Prelude.Types.Nothing'} end; <<"docs-for"/utf8>> -> case V3 of [E68 | E69] -> (fun (V120, V121) -> case V120 of {'Protocol.SExp.StringAtom', V122} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(case V121 of [] -> {'Prelude.Types.Just', {'Prelude.Types.Nothing'}}; [E70 | E71] -> (fun (V123, V124) -> case V123 of {'Protocol.SExp.SymbolAtom', V125} -> case V125 of <<"overview"/utf8>> -> case V124 of [] -> {'Prelude.Types.Just', {'Prelude.Types.Just', 0}}; _ -> {'Prelude.Types.Nothing'} end; <<"full"/utf8>> -> case V124 of [] -> {'Prelude.Types.Just', {'Prelude.Types.Just', 1}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E70, E71)); _ -> {'Prelude.Types.Nothing'} end, fun (V126) -> {'Prelude.Types.Just', {'Protocol.IDE.Command.DocsFor', V122, V126}} end)); _ -> {'Prelude.Types.Nothing'} end end(E68, E69)); _ -> {'Prelude.Types.Nothing'} end; <<"apropos"/utf8>> -> case V3 of [E72 | E73] -> (fun (V127, V128) -> case V127 of {'Protocol.SExp.StringAtom', V129} -> case V128 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.Apropos', V129}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E72, E73)); _ -> {'Prelude.Types.Nothing'} end; <<"directive"/utf8>> -> case V3 of [E74 | E75] -> (fun (V130, V131) -> case V130 of {'Protocol.SExp.StringAtom', V132} -> case V131 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.Directive', V132}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E74, E75)); _ -> {'Prelude.Types.Nothing'} end; <<"metavariables"/utf8>> -> case V3 of [E76 | E77] -> (fun (V133, V134) -> case V133 of {'Protocol.SExp.IntegerAtom', V135} -> case V134 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.Metavariables', V135}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E76, E77)); _ -> {'Prelude.Types.Nothing'} end; <<"who-calls"/utf8>> -> case V3 of [E78 | E79] -> (fun (V136, V137) -> case V136 of {'Protocol.SExp.StringAtom', V138} -> case V137 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.WhoCalls', V138}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E78, E79)); _ -> {'Prelude.Types.Nothing'} end; <<"calls-who"/utf8>> -> case V3 of [E80 | E81] -> (fun (V139, V140) -> case V139 of {'Protocol.SExp.StringAtom', V141} -> case V140 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.CallsWho', V141}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E80, E81)); _ -> {'Prelude.Types.Nothing'} end; <<"browse-namespace"/utf8>> -> case V3 of [E82 | E83] -> (fun (V142, V143) -> case V142 of {'Protocol.SExp.StringAtom', V144} -> case V143 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.BrowseNamespace', V144}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E82, E83)); _ -> {'Prelude.Types.Nothing'} end; <<"normalise-term"/utf8>> -> case V3 of [E84 | E85] -> (fun (V145, V146) -> case V145 of {'Protocol.SExp.StringAtom', V147} -> case V146 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.NormaliseTerm', V147}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E84, E85)); _ -> {'Prelude.Types.Nothing'} end; <<"show-term-implicits"/utf8>> -> case V3 of [E86 | E87] -> (fun (V148, V149) -> case V148 of {'Protocol.SExp.StringAtom', V150} -> case V149 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.ShowTermImplicits', V150}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E86, E87)); _ -> {'Prelude.Types.Nothing'} end; <<"hide-term-implicits"/utf8>> -> case V3 of [E88 | E89] -> (fun (V151, V152) -> case V151 of {'Protocol.SExp.StringAtom', V153} -> case V152 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.HideTermImplicits', V153}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E88, E89)); _ -> {'Prelude.Types.Nothing'} end; <<"elaborate-term"/utf8>> -> case V3 of [E90 | E91] -> (fun (V154, V155) -> case V154 of {'Protocol.SExp.StringAtom', V156} -> case V155 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.ElaborateTerm', V156}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E90, E91)); _ -> {'Prelude.Types.Nothing'} end; <<"print-definition"/utf8>> -> case V3 of [E92 | E93] -> (fun (V157, V158) -> case V157 of {'Protocol.SExp.StringAtom', V159} -> case V158 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.PrintDefinition', V159}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E92, E93)); _ -> {'Prelude.Types.Nothing'} end; <<"repl-completions"/utf8>> -> case V3 of [E94 | E95] -> (fun (V160, V161) -> case V160 of {'Protocol.SExp.StringAtom', V162} -> case V161 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.ReplCompletions', V162}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E94, E95)); _ -> {'Prelude.Types.Nothing'} end; <<"enable-syntax"/utf8>> -> case V3 of [E96 | E97] -> (fun (V163, V164) -> case V163 of {'Protocol.SExp.BoolAtom', V165} -> case V164 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.EnableSyntax', V165}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E96, E97)); _ -> {'Prelude.Types.Nothing'} end; <<"get-options"/utf8>> -> case V3 of [] -> {'Prelude.Types.Just', {'Protocol.IDE.Command.GetOptions'}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Prelude.Types.Nothing'} end; {'Protocol.SExp.SymbolAtom', V166} -> case V166 of <<"proof-search-next"/utf8>> -> {'Prelude.Types.Just', {'Protocol.IDE.Command.ExprSearchNext'}}; <<"generate-def-next"/utf8>> -> {'Prelude.Types.Just', {'Protocol.IDE.Command.GenerateDefNext'}}; <<"version"/utf8>> -> {'Prelude.Types.Just', {'Protocol.IDE.Command.Version'}}; _ -> {'Prelude.Types.Nothing'} end; _ -> {'Prelude.Types.Nothing'} end.
