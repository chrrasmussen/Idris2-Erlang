-module('Idris.Idris2.Core.LinearCheck').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--lcheckDef-13790'/8,
  'case--updateHoleUsage-7891'/8,
  'nested--9502-8251--in--un--used'/10,
  'nested--9638-13528--in--un--updateUsage'/8,
  'nested--9502-8445--in--un--unusedHoleArgs'/12,
  'nested--9666-14095--in--un--substMeta'/19,
  'nested--7789-6465--in--un--showAll'/2,
  'nested--9638-13529--in--un--rigSafe'/8,
  'nested--9502-8250--in--un--rigSafe'/12,
  'nested--9502-9006--in--un--rig'/10,
  'nested--9608-11926--in--un--isLocArg'/8,
  'nested--9502-9007--in--un--getZeroes'/12,
  'nested--9608-11928--in--un--getPUsage'/8,
  'nested--9502-8249--in--un--getName'/11,
  'nested--9608-11924--in--un--getCaseUsage'/12,
  'nested--9502-9008--in--un--eraseLinear'/11,
  'nested--14056-11996--in--un--elseCase'/19,
  'nested--9608-11930--in--un--combineUsages'/8,
  'nested--9608-11929--in--un--combineUsage'/8,
  'nested--9608-11931--in--un--combine'/7,
  'nested--17135-14708--in--un--checkUsageOK'/14,
  'nested--9608-11925--in--un--checkUsageOK'/12,
  'nested--9502-9009--in--un--checkUsageOK'/13,
  'nested--9608-11927--in--un--checkEnvUsage'/13,
  'dn--un--show_Show_ArgUsage'/1,
  'dn--un--show_Show_(Usage $vars)'/1,
  'dn--un--showPrec_Show_ArgUsage'/2,
  'un--updateHoleUsageArgs'/7,
  'un--updateHoleUsage'/7,
  'un--updateHoleType'/8,
  'un--localPrf'/1,
  'un--linearCheck'/8,
  'un--lcheckMeta'/12,
  'un--lcheckDef'/7,
  'un--lcheckBinder'/7,
  'un--lcheck'/7,
  'un--getArgUsage'/6,
  'un--expandMeta'/10,
  'un--doneScope'/1,
  'un--discharge'/10,
  'un--count'/2,
  'un--checkEnvUsage'/9,
  'un--++'/2
]).
'case--lcheckDef-13790'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Prelude.Types.Just', V8} -> begin (V41 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', V8}, case V6 of {'Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} -> V9 end))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V343 = case V45 of {'Prelude.Types.Just', V46} -> begin (V69 = ('nested--9638-13529--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, case V46 of {'Core.Context.Context.MkGlobalDef', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68} -> V54 end, V2))), fun (V70) -> begin (V71 = (V69(V70))), case V71 of {'Prelude.Types.Left', V72} -> {'Prelude.Types.Left', V72}; {'Prelude.Types.Right', V73} -> (begin (V342 = case case V46 of {'Core.Context.Context.MkGlobalDef', V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95} -> V90 end of 1 -> fun (V96) -> {'Prelude.Types.Right', case V46 of {'Core.Context.Context.MkGlobalDef', V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118} -> V99 end} end; 0 -> case V46 of {'Core.Context.Context.MkGlobalDef', V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140} -> case V136 of {'Core.Context.Context.PMDef', V141, V142, V143, V144, V145} -> begin (V190 = ('un--getArgUsage'(V5, V4, ('Idris.Idris2.Core.TT':'un--getLoc'(case V46 of {'Core.Context.Context.MkGlobalDef', V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167} -> V148 end)), V2, case V46 of {'Core.Context.Context.MkGlobalDef', V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189} -> V170 end, V145))), fun (V191) -> begin (V192 = (V190(V191))), case V192 of {'Prelude.Types.Left', V193} -> {'Prelude.Types.Left', V193}; {'Prelude.Types.Right', V194} -> (begin (V318 = begin (V198 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"quantity"/utf8>>, 5, fun () -> <<<<"Overall arg usage "/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V195) -> ('dn--un--show_Show_ArgUsage'(V195)) end, fun (V196) -> fun (V197) -> ('dn--un--showPrec_Show_ArgUsage'(V196, V197)) end end}, V194))/binary>> end))), fun (V199) -> begin (V200 = (V198(V199))), case V200 of {'Prelude.Types.Left', V201} -> {'Prelude.Types.Left', V201}; {'Prelude.Types.Right', V202} -> (begin (V317 = begin (V225 = ('nested--9638-13528--in--un--updateUsage'(V0, V1, V2, V3, V4, V5, V194, case V46 of {'Core.Context.Context.MkGlobalDef', V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224} -> V205 end))), begin (V226 = ('Idris.Idris2.Core.Context':'un--updateTy'(V5, V8, V225))), fun (V227) -> begin (V228 = (V226(V227))), case V228 of {'Prelude.Types.Left', V229} -> {'Prelude.Types.Left', V229}; {'Prelude.Types.Right', V230} -> (begin (V316 = begin (V231 = ('Idris.Idris2.Core.Context':'un--setLinearCheck'(V5, V8, 1))), fun (V232) -> begin (V233 = (V231(V232))), case V233 of {'Prelude.Types.Left', V234} -> {'Prelude.Types.Left', V234}; {'Prelude.Types.Right', V235} -> (begin (V315 = begin (V258 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V5, <<"quantity"/utf8>>, 5, fun () -> <<<<"New type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V46 of {'Core.Context.Context.MkGlobalDef', V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257} -> V237 end))/binary>> end, V225))), fun (V259) -> begin (V260 = (V258(V259))), case V260 of {'Prelude.Types.Left', V261} -> {'Prelude.Types.Left', V261}; {'Prelude.Types.Right', V262} -> (begin (V314 = begin (V307 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V5, <<"quantity"/utf8>>, 5, fun () -> <<<<"Updated from "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V46 of {'Core.Context.Context.MkGlobalDef', V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284} -> V264 end))/binary>> end, case V46 of {'Core.Context.Context.MkGlobalDef', V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306} -> V287 end))), fun (V308) -> begin (V309 = (V307(V308))), case V309 of {'Prelude.Types.Left', V310} -> {'Prelude.Types.Left', V310}; {'Prelude.Types.Right', V311} -> (begin (V313 = fun (V312) -> {'Prelude.Types.Right', V225} end), V313 end(V308)) end end end end), V314 end(V259)) end end end end), V315 end(V232)) end end end end), V316 end(V227)) end end end end end), V317 end(V199)) end end end end), V318 end(V191)) end end end end; _ -> fun (V319) -> {'Prelude.Types.Right', case V46 of {'Core.Context.Context.MkGlobalDef', V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341} -> V322 end} end end end end), V342 end(V70)) end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V5, V3, V0)) end), V343 end(V42)) end end end end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V5, V3, V0)) end.
'case--updateHoleUsage-7891'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.MkPair', V8, V9} -> case V8 of {'Core.TT.Ref', V10, V11, V12} -> ('un--updateHoleUsageArgs'(V0, V6, V5, V4, V3, V2, V9)); _ -> case V9 of [] -> fun (V13) -> {'Prelude.Types.Right', 0} end; _ -> ('un--updateHoleUsageArgs'(V0, V6, V5, V4, V3, V2, [V8 | V9])) end end end.
'nested--9502-8251--in--un--used'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V10, V11)) end end, 0, fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V12, V13)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V16, V17)) end end}}, V9)) of 1 -> {'Core.LinearCheck.::', V0, {'Core.LinearCheck.Nil'}}; 0 -> {'Core.LinearCheck.Nil'} end.
'nested--9638-13528--in--un--updateUsage'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [E0 | E1] -> (fun (V8, V9) -> case V7 of {'Core.TT.Bind', V10, V11, V12, V13} -> case V12 of {'Core.TT.Pi', V14, V15, V16, V17} -> begin (V18 = ('nested--9638-13528--in--un--updateUsage'(V0, V1, V2, V3, V4, V5, V9, V13))), begin (V27 = case V8 of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V19, V20)) end end, 0, fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V21, V22)) end end, 1})); 2 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V23, V24)) end end, 0, fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V25, V26)) end end, 1})); 4 -> V15; 3 -> V15; 0 -> V15 end), {'Core.TT.Bind', V10, V11, {'Core.TT.Pi', V14, V27, V16, V17}, V18} end end; _ -> V7 end; _ -> V7 end end(E0, E1)); _ -> V7 end.
'nested--9502-8445--in--un--unusedHoleArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [E0 | E1] -> (fun (V12, V13) -> case V11 of {'Core.TT.Bind', V14, V15, V16, V17} -> case V16 of {'Core.TT.Pi', V18, V19, V20, V21} -> {'Core.TT.Bind', V14, V15, {'Core.TT.Pi', V18, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V22, V23)) end end, 0, fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V24, V25)) end end, 1})), V20, V21}, ('nested--9502-8445--in--un--unusedHoleArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V17))}; _ -> case V11 of {'Core.TT.Bind', V26, V27, V28, V29} -> case V28 of {'Core.TT.Let', V30, V31, V32, V33} -> {'Core.TT.Bind', V26, V27, {'Core.TT.Let', V30, V31, V32, V33}, ('nested--9502-8445--in--un--unusedHoleArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V29))}; _ -> V11 end; _ -> V11 end end; _ -> case V11 of {'Core.TT.Bind', V34, V35, V36, V37} -> case V36 of {'Core.TT.Let', V38, V39, V40, V41} -> {'Core.TT.Bind', V34, V35, {'Core.TT.Let', V38, V39, V40, V41}, ('nested--9502-8445--in--un--unusedHoleArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V37))}; _ -> V11 end; _ -> V11 end end end(E0, E1)); _ -> case V11 of {'Core.TT.Bind', V42, V43, V44, V45} -> case V44 of {'Core.TT.Let', V46, V47, V48, V49} -> {'Core.TT.Bind', V42, V43, {'Core.TT.Let', V46, V47, V48, V49}, ('nested--9502-8445--in--un--unusedHoleArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V45))}; _ -> V11 end; _ -> V11 end end.
'nested--9666-14095--in--un--substMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V16 of {'Core.TT.Bind', V19, V20, V21, V22} -> case V21 of {'Core.TT.Lam', V23, V24, V25, V26} -> case V17 of [E0 | E1] -> (fun (V27, V28) -> ('nested--9666-14095--in--un--substMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [V20 | V14], V15, V22, V28, {'Core.TT.SubstEnv.::', V27, V18})) end(E0, E1)); _ -> fun (V29) -> case V17 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT.SubstEnv':'un--substs'(V18, V16))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed metavar solution "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V5))/binary>>/binary>>/binary>>}, V29)) end end end; {'Core.TT.Let', V30, V31, V32, V33} -> ('nested--9666-14095--in--un--substMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V32, V22)), V17, V18)); _ -> fun (V34) -> case V17 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT.SubstEnv':'un--substs'(V18, V16))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed metavar solution "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V5))/binary>>/binary>>/binary>>}, V34)) end end end; _ -> fun (V35) -> case V17 of [] -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT.SubstEnv':'un--substs'(V18, V16))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed metavar solution "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V5))/binary>>/binary>>/binary>>}, V35)) end end end.
'nested--7789-6465--in--un--showAll'(V0, V1) -> case V1 of {'Core.LinearCheck.Nil'} -> <<""/utf8>>; {'Core.LinearCheck.::', V2, V3} -> case V3 of {'Core.LinearCheck.Nil'} -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V2)); _ -> <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V2))/binary, <<<<", "/utf8>>/binary, ('dn--un--show_Show_(Usage $vars)'(V3))/binary>>/binary>> end end.
'nested--9638-13529--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--getFullName'(V5, V0))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V26 = fun (V13) -> case ('Idris.Idris2.Algebra.Preorder':'un--<'({'Builtin.MkPair', {'Algebra.Preorder.dn--un--__mkPreorder', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V16)) end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V17, V18, V19, V20, V21)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V24, V25)) end end}}, V6, V7)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.LinearMisuse', V3, V12, V6, V7}, V13)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), V26 end(V9)) end end end end.
'nested--9502-8250--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case ('Idris.Idris2.Algebra.Preorder':'un--<'({'Builtin.MkPair', {'Algebra.Preorder.dn--un--__mkPreorder', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V12, V13)) end end, fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V14)) end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V15, V16, V17, V18, V19)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V22, V23)) end end}}, V9, V10)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.LinearMisuse', V3, ('nested--9502-8249--in--un--getName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V0, V1)), V9, V10}, V11)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end.
'nested--9502-9006--in--un--rig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V3 of {'Core.TT.Pi', V10, V11, V12, V13} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V14, V15)) end end, 0, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V16, V17)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, V7)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V22, V23)) end end, 0, fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V24, V25)) end end, 1})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()) end; {'Core.TT.Let', V26, V27, V28, V29} -> V7; _ -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V30, V31)) end end, 0, fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V32, V33)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V36, V37)) end end}}, V7)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V38, V39)) end end, 0, fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V40, V41)) end end, 1})); 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V42, V43)) end end, 0, fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V44, V45)) end end, 1})) end end.
'nested--9608-11926--in--un--isLocArg'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> 0; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Core.TT.Local', V10, V11, V12} -> case case (V12 =:= ('Idris.Idris2.Core.TT':'un--varIdx'(V6))) of 'false' -> 0; _ -> 1 end of 1 -> 1; 0 -> ('nested--9608-11926--in--un--isLocArg'(V0, V1, V2, V3, V4, V5, V6, V9)) end; {'Core.TT.As', V13, V14, V15, V16} -> ('nested--9608-11926--in--un--isLocArg'(V0, V1, V2, V3, V4, V5, V6, [V15 | [V16 | V9]])); _ -> ('nested--9608-11926--in--un--isLocArg'(V0, V1, V2, V3, V4, V5, V6, V9)) end end(E0, E1)) end.
'nested--9502-9007--in--un--getZeroes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> case V11 of {'Core.Env.Nil'} -> [] end; [E0 | E1] -> (fun (V12, V13) -> case V11 of {'Core.Env.::', V14, V15} -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V16, V17)) end end, 0, fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V18, V19)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V22, V23)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V14)))) of 1 -> [0 | ((begin (V29 = fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V27, V28)) end end end end), fun (V30) -> fun (V31) -> ((((V29('erased'))('erased'))(V30))(V31)) end end end(fun (V24) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V24)) end))(('nested--9502-9007--in--un--getZeroes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V15))))]; 0 -> ((begin (V37 = fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V35, V36)) end end end end), fun (V38) -> fun (V39) -> ((((V37('erased'))('erased'))(V38))(V39)) end end end(fun (V32) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V32)) end))(('nested--9502-9007--in--un--getZeroes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V15)))) end end end(E0, E1)) end.
'nested--9608-11928--in--un--getPUsage'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Builtin.DPair.MkDPair', V8, V9} -> case V9 of {'Builtin.MkPair', V10, V11} -> case V11 of {'Builtin.MkPair', V12, V13} -> begin (V14 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V8, V5, <<"quantity"/utf8>>, 10, <<"Env"/utf8>>, V10))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V85 = begin (V19 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V8, V5, <<"quantity"/utf8>>, 10, fun () -> <<"LHS"/utf8>> end, V12))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V84 = begin (V24 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V8, V5, <<"quantity"/utf8>>, 5, fun () -> <<"Linear check in case RHS"/utf8>> end, V13))), fun (V25) -> begin (V26 = (V24(V25))), case V26 of {'Prelude.Types.Left', V27} -> {'Prelude.Types.Left', V27}; {'Prelude.Types.Right', V28} -> (begin (V83 = begin (V29 = ('un--lcheck'(V8, V5, V4, V2, 0, V10, V13))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V82 = case V33 of {'Builtin.MkPair', V34, V35} -> case V35 of {'Builtin.MkPair', V36, V37} -> begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"quantity"/utf8>>, 10, fun () -> <<<<"Used: "/utf8>>/binary, ('dn--un--show_Show_(Usage $vars)'(V37))/binary>> end))), fun (V39) -> begin (V40 = (V38(V39))), case V40 of {'Prelude.Types.Left', V41} -> {'Prelude.Types.Left', V41}; {'Prelude.Types.Right', V42} -> (begin (V81 = begin (V43 = ('Idris.Idris2.Core.TT':'un--getArgs'(V12))), begin (V44 = ('nested--9608-11927--in--un--checkEnvUsage'(V0, V1, V2, V3, V4, V5, [], V8, V2, V10, V37, V43, V34))), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V80 = begin (V49 = ('nested--9608-11924--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V8, V6, V10, V43, V37, V13))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V79 = begin (V72 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"quantity"/utf8>>, 10, fun () -> <<(begin (V55 = fun (V54) -> V54 end), fun (V56) -> (V55(V56)) end end(<<"Arg usage: "/utf8>>))/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Prelude.Show.MkShow', fun (V57) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V58)) end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V59, V60)) end end}, {'Prelude.Show.MkShow', fun (V61) -> ('dn--un--show_Show_ArgUsage'(V61)) end, fun (V62) -> fun (V63) -> ('dn--un--showPrec_Show_ArgUsage'(V62, V63)) end end}}, V57)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Builtin.MkPair', {'Prelude.Show.MkShow', fun (V66) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V66)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V67, V68)) end end}, {'Prelude.Show.MkShow', fun (V69) -> ('dn--un--show_Show_ArgUsage'(V69)) end, fun (V70) -> fun (V71) -> ('dn--un--showPrec_Show_ArgUsage'(V70, V71)) end end}}, V64, V65)) end end}, V53))/binary>> end))), fun (V73) -> begin (V74 = (V72(V73))), case V74 of {'Prelude.Types.Left', V75} -> {'Prelude.Types.Left', V75}; {'Prelude.Types.Right', V76} -> (begin (V78 = fun (V77) -> {'Prelude.Types.Right', V53} end), V78 end(V73)) end end end end), V79 end(V50)) end end end end), V80 end(V45)) end end end end end), V81 end(V39)) end end end end end end), V82 end(V30)) end end end end), V83 end(V25)) end end end end), V84 end(V20)) end end end end), V85 end(V15)) end end end end end end end.
'nested--9502-8249--in--un--getName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of 0 -> case V10 of [E2 | E3] -> (fun (V11, V12) -> V11 end(E2, E3)) end; _ -> begin (V13 = (V9 - 1)), case V10 of [E0 | E1] -> (fun (V14, V15) -> ('nested--9502-8249--in--un--getName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V15)) end(E0, E1)) end end end.
'nested--9608-11924--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of [E2 | E3] -> (fun (V12, V13) -> case V12 of {'Core.TT.As', V14, V15, V16, V17} -> ('nested--9608-11924--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V17 | V13], V10, V11)); _ -> case V7 of {'Core.TT.Bind', V18, V19, V20, V21} -> case V20 of {'Core.TT.Pi', V22, V23, V24, V25} -> case V9 of [E4 | E5] -> (fun (V26, V27) -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V28, V29)) end end, 0, fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V30, V31)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V34, V35)) end end}}, V23)) of 1 -> case V26 of {'Core.TT.Local', V36, V37, V38} -> begin (V39 = ('nested--9608-11924--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V6, V21, V8, V27, V10, V11))), fun (V40) -> begin (V41 = (V39(V40))), case V41 of {'Prelude.Types.Left', V42} -> {'Prelude.Types.Left', V42}; {'Prelude.Types.Right', V43} -> (begin (V53 = begin (V44 = ('un--count'(V38, V10))), begin (V45 = ('un--updateHoleUsage'(V6, V5, V4, case (V44 =:= 0) of 'false' -> 0; _ -> 1 end, V38, [], V11))), fun (V46) -> begin (V47 = (V45(V46))), case V47 of {'Prelude.Types.Left', V48} -> {'Prelude.Types.Left', V48}; {'Prelude.Types.Right', V49} -> (begin (V52 = begin (V50 = case case V49 of 1 -> case (V44 =:= 0) of 'false' -> 0; _ -> 1 end; 0 -> 0 end of 1 -> 4; 0 -> case case (V44 =:= 0) of 'false' -> 0; _ -> 1 end of 1 -> 1; 0 -> 2 end end), fun (V51) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V19, V50} | V43]} end end), V52 end(V46)) end end end end end), V53 end(V40)) end end end end; _ -> ('nested--14056-11996--in--un--elseCase'(V0, V1, V2, V3, V4, V5, V6, V18, V22, V24, V25, V23, V19, V21, V26, V27, V11, V10, V8)) end; 0 -> ('nested--14056-11996--in--un--elseCase'(V0, V1, V2, V3, V4, V5, V6, V18, V22, V24, V25, V23, V19, V21, V26, V27, V11, V10, V8)) end end(E4, E5)); _ -> fun (V54) -> {'Prelude.Types.Right', []} end end; _ -> fun (V55) -> {'Prelude.Types.Right', []} end end; _ -> fun (V56) -> {'Prelude.Types.Right', []} end end end end(E2, E3)); _ -> case V7 of {'Core.TT.Bind', V57, V58, V59, V60} -> case V59 of {'Core.TT.Pi', V61, V62, V63, V64} -> case V9 of [E0 | E1] -> (fun (V65, V66) -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V67) -> fun (V68) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V67, V68)) end end, 0, fun (V69) -> fun (V70) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V69, V70)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V71) -> fun (V72) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V73, V74)) end end}}, V62)) of 1 -> case V65 of {'Core.TT.Local', V75, V76, V77} -> begin (V78 = ('nested--9608-11924--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V6, V60, V8, V66, V10, V11))), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V92 = begin (V83 = ('un--count'(V77, V10))), begin (V84 = ('un--updateHoleUsage'(V6, V5, V4, case (V83 =:= 0) of 'false' -> 0; _ -> 1 end, V77, [], V11))), fun (V85) -> begin (V86 = (V84(V85))), case V86 of {'Prelude.Types.Left', V87} -> {'Prelude.Types.Left', V87}; {'Prelude.Types.Right', V88} -> (begin (V91 = begin (V89 = case case V88 of 1 -> case (V83 =:= 0) of 'false' -> 0; _ -> 1 end; 0 -> 0 end of 1 -> 4; 0 -> case case (V83 =:= 0) of 'false' -> 0; _ -> 1 end of 1 -> 1; 0 -> 2 end end), fun (V90) -> {'Prelude.Types.Right', [{'Builtin.MkPair', V58, V89} | V82]} end end), V91 end(V85)) end end end end end), V92 end(V79)) end end end end; _ -> ('nested--14056-11996--in--un--elseCase'(V0, V1, V2, V3, V4, V5, V6, V57, V61, V63, V64, V62, V58, V60, V65, V66, V11, V10, V8)) end; 0 -> ('nested--14056-11996--in--un--elseCase'(V0, V1, V2, V3, V4, V5, V6, V57, V61, V63, V64, V62, V58, V60, V65, V66, V11, V10, V8)) end end(E0, E1)); _ -> fun (V93) -> {'Prelude.Types.Right', []} end end; _ -> fun (V94) -> {'Prelude.Types.Right', []} end end; _ -> fun (V95) -> {'Prelude.Types.Right', []} end end end.
'nested--9502-9008--in--un--eraseLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Core.Env.Nil'} -> {'Core.Env.Nil'}; {'Core.Env.::', V11, V12} -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V13, V14)) end end, 0, fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V15, V16)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V19, V20)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V11)))) of 1 -> {'Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V21, V22)) end end, 0, fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V23, V24)) end end, 1})))), ('nested--9502-9008--in--un--eraseLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12))}; 0 -> {'Core.Env.::', V11, ('nested--9502-9008--in--un--eraseLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12))} end end.
'nested--14056-11996--in--un--elseCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V19 = ('nested--9608-11924--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V6, V13, V18, V15, V17, V16))), fun (V20) -> begin (V21 = (V19(V20))), case V21 of {'Prelude.Types.Left', V22} -> {'Prelude.Types.Left', V22}; {'Prelude.Types.Right', V23} -> (begin (V33 = fun (V24) -> {'Prelude.Types.Right', case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V25, V26)) end end, 0, fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V27, V28)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V31, V32)) end end}}, V11)) of 1 -> [{'Builtin.MkPair', V12, 1} | V23]; 0 -> [{'Builtin.MkPair', V12, 3} | V23] end} end), V33 end(V20)) end end end end.
'nested--9608-11930--in--un--combineUsages'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> fun (V8) -> case V7 of [] -> {'Prelude.Types.Right', []}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Argument usage lists inconsistent"/utf8>>}, V8)) end end; [E0 | E1] -> (fun (V9, V10) -> case V7 of [E2 | E3] -> (fun (V11, V12) -> begin (V13 = ('nested--9608-11929--in--un--combineUsage'(V0, V1, V2, V3, V4, V5, V9, V11))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V25 = begin (V18 = ('nested--9608-11930--in--un--combineUsages'(V0, V1, V2, V3, V4, V5, V10, V12))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V24 = fun (V23) -> {'Prelude.Types.Right', [V17 | V22]} end), V24 end(V19)) end end end end), V25 end(V14)) end end end end end(E2, E3)); _ -> fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Argument usage lists inconsistent"/utf8>>}, V26)) end end end(E0, E1)); _ -> fun (V27) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<"Argument usage lists inconsistent"/utf8>>}, V27)) end end.
'nested--9608-11929--in--un--combineUsage'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Builtin.MkPair', V8, V9} -> case V9 of 1 -> case V7 of {'Builtin.MkPair', V10, V11} -> case V11 of 2 -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V3, <<<<"Inconsistent usage of "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))/binary, <<" in case branches"/utf8>>/binary>>/binary>>}, V12)) end; _ -> case V7 of {'Builtin.MkPair', V13, V14} -> case V14 of 0 -> fun (V15) -> {'Prelude.Types.Right', {'Builtin.MkPair', V13, 0}} end; _ -> case V6 of {'Builtin.MkPair', V16, V17} -> case V17 of 3 -> fun (V18) -> {'Prelude.Types.Right', {'Builtin.MkPair', V16, 3}} end; _ -> case V7 of {'Builtin.MkPair', V19, V20} -> case V20 of 3 -> fun (V21) -> {'Prelude.Types.Right', {'Builtin.MkPair', V19, 3}} end; _ -> case V6 of {'Builtin.MkPair', V22, V23} -> case V23 of 4 -> fun (V24) -> {'Prelude.Types.Right', {'Builtin.MkPair', V22, 4}} end; _ -> fun (V25) -> case V7 of {'Builtin.MkPair', V26, V27} -> case V27 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V26, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V28) -> case V7 of {'Builtin.MkPair', V29, V30} -> case V30 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V29, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V31, V32} -> case V32 of 4 -> fun (V33) -> {'Prelude.Types.Right', {'Builtin.MkPair', V31, 4}} end; _ -> fun (V34) -> case V7 of {'Builtin.MkPair', V35, V36} -> case V36 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V35, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V37) -> case V7 of {'Builtin.MkPair', V38, V39} -> case V39 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V38, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V40, V41} -> case V41 of 3 -> fun (V42) -> {'Prelude.Types.Right', {'Builtin.MkPair', V40, 3}} end; _ -> case V6 of {'Builtin.MkPair', V43, V44} -> case V44 of 4 -> fun (V45) -> {'Prelude.Types.Right', {'Builtin.MkPair', V43, 4}} end; _ -> fun (V46) -> case V7 of {'Builtin.MkPair', V47, V48} -> case V48 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V47, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V49) -> case V7 of {'Builtin.MkPair', V50, V51} -> case V51 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V50, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V52, V53} -> case V53 of 4 -> fun (V54) -> {'Prelude.Types.Right', {'Builtin.MkPair', V52, 4}} end; _ -> fun (V55) -> case V7 of {'Builtin.MkPair', V56, V57} -> case V57 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V56, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V58) -> case V7 of {'Builtin.MkPair', V59, V60} -> case V60 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V59, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end; _ -> case V6 of {'Builtin.MkPair', V61, V62} -> case V62 of 3 -> fun (V63) -> {'Prelude.Types.Right', {'Builtin.MkPair', V61, 3}} end; _ -> case V7 of {'Builtin.MkPair', V64, V65} -> case V65 of 3 -> fun (V66) -> {'Prelude.Types.Right', {'Builtin.MkPair', V64, 3}} end; _ -> case V6 of {'Builtin.MkPair', V67, V68} -> case V68 of 4 -> fun (V69) -> {'Prelude.Types.Right', {'Builtin.MkPair', V67, 4}} end; _ -> fun (V70) -> case V7 of {'Builtin.MkPair', V71, V72} -> case V72 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V71, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V73) -> case V7 of {'Builtin.MkPair', V74, V75} -> case V75 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V74, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V76, V77} -> case V77 of 4 -> fun (V78) -> {'Prelude.Types.Right', {'Builtin.MkPair', V76, 4}} end; _ -> fun (V79) -> case V7 of {'Builtin.MkPair', V80, V81} -> case V81 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V80, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V82) -> case V7 of {'Builtin.MkPair', V83, V84} -> case V84 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V83, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V85, V86} -> case V86 of 3 -> fun (V87) -> {'Prelude.Types.Right', {'Builtin.MkPair', V85, 3}} end; _ -> case V6 of {'Builtin.MkPair', V88, V89} -> case V89 of 4 -> fun (V90) -> {'Prelude.Types.Right', {'Builtin.MkPair', V88, 4}} end; _ -> fun (V91) -> case V7 of {'Builtin.MkPair', V92, V93} -> case V93 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V92, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V94) -> case V7 of {'Builtin.MkPair', V95, V96} -> case V96 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V95, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V97, V98} -> case V98 of 4 -> fun (V99) -> {'Prelude.Types.Right', {'Builtin.MkPair', V97, 4}} end; _ -> fun (V100) -> case V7 of {'Builtin.MkPair', V101, V102} -> case V102 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V101, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V103) -> case V7 of {'Builtin.MkPair', V104, V105} -> case V105 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V104, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end end; _ -> case V7 of {'Builtin.MkPair', V106, V107} -> case V107 of 0 -> fun (V108) -> {'Prelude.Types.Right', {'Builtin.MkPair', V106, 0}} end; _ -> case V6 of {'Builtin.MkPair', V109, V110} -> case V110 of 3 -> fun (V111) -> {'Prelude.Types.Right', {'Builtin.MkPair', V109, 3}} end; _ -> case V7 of {'Builtin.MkPair', V112, V113} -> case V113 of 3 -> fun (V114) -> {'Prelude.Types.Right', {'Builtin.MkPair', V112, 3}} end; _ -> case V6 of {'Builtin.MkPair', V115, V116} -> case V116 of 4 -> fun (V117) -> {'Prelude.Types.Right', {'Builtin.MkPair', V115, 4}} end; _ -> fun (V118) -> case V7 of {'Builtin.MkPair', V119, V120} -> case V120 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V119, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V121) -> case V7 of {'Builtin.MkPair', V122, V123} -> case V123 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V122, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V124, V125} -> case V125 of 4 -> fun (V126) -> {'Prelude.Types.Right', {'Builtin.MkPair', V124, 4}} end; _ -> fun (V127) -> case V7 of {'Builtin.MkPair', V128, V129} -> case V129 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V128, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V130) -> case V7 of {'Builtin.MkPair', V131, V132} -> case V132 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V131, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V133, V134} -> case V134 of 3 -> fun (V135) -> {'Prelude.Types.Right', {'Builtin.MkPair', V133, 3}} end; _ -> case V6 of {'Builtin.MkPair', V136, V137} -> case V137 of 4 -> fun (V138) -> {'Prelude.Types.Right', {'Builtin.MkPair', V136, 4}} end; _ -> fun (V139) -> case V7 of {'Builtin.MkPair', V140, V141} -> case V141 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V140, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V142) -> case V7 of {'Builtin.MkPair', V143, V144} -> case V144 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V143, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V145, V146} -> case V146 of 4 -> fun (V147) -> {'Prelude.Types.Right', {'Builtin.MkPair', V145, 4}} end; _ -> fun (V148) -> case V7 of {'Builtin.MkPair', V149, V150} -> case V150 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V149, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V151) -> case V7 of {'Builtin.MkPair', V152, V153} -> case V153 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V152, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end; _ -> case V6 of {'Builtin.MkPair', V154, V155} -> case V155 of 3 -> fun (V156) -> {'Prelude.Types.Right', {'Builtin.MkPair', V154, 3}} end; _ -> case V7 of {'Builtin.MkPair', V157, V158} -> case V158 of 3 -> fun (V159) -> {'Prelude.Types.Right', {'Builtin.MkPair', V157, 3}} end; _ -> case V6 of {'Builtin.MkPair', V160, V161} -> case V161 of 4 -> fun (V162) -> {'Prelude.Types.Right', {'Builtin.MkPair', V160, 4}} end; _ -> fun (V163) -> case V7 of {'Builtin.MkPair', V164, V165} -> case V165 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V164, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V166) -> case V7 of {'Builtin.MkPair', V167, V168} -> case V168 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V167, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V169, V170} -> case V170 of 4 -> fun (V171) -> {'Prelude.Types.Right', {'Builtin.MkPair', V169, 4}} end; _ -> fun (V172) -> case V7 of {'Builtin.MkPair', V173, V174} -> case V174 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V173, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V175) -> case V7 of {'Builtin.MkPair', V176, V177} -> case V177 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V176, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V178, V179} -> case V179 of 3 -> fun (V180) -> {'Prelude.Types.Right', {'Builtin.MkPair', V178, 3}} end; _ -> case V6 of {'Builtin.MkPair', V181, V182} -> case V182 of 4 -> fun (V183) -> {'Prelude.Types.Right', {'Builtin.MkPair', V181, 4}} end; _ -> fun (V184) -> case V7 of {'Builtin.MkPair', V185, V186} -> case V186 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V185, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V187) -> case V7 of {'Builtin.MkPair', V188, V189} -> case V189 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V188, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V190, V191} -> case V191 of 4 -> fun (V192) -> {'Prelude.Types.Right', {'Builtin.MkPair', V190, 4}} end; _ -> fun (V193) -> case V7 of {'Builtin.MkPair', V194, V195} -> case V195 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V194, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V196) -> case V7 of {'Builtin.MkPair', V197, V198} -> case V198 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V197, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end end; 2 -> case V7 of {'Builtin.MkPair', V199, V200} -> case V200 of 1 -> fun (V201) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V3, <<<<"Inconsistent usage of "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))/binary, <<" in case branches"/utf8>>/binary>>/binary>>}, V201)) end; _ -> case V7 of {'Builtin.MkPair', V202, V203} -> case V203 of 0 -> fun (V204) -> {'Prelude.Types.Right', {'Builtin.MkPair', V202, 0}} end; _ -> case V6 of {'Builtin.MkPair', V205, V206} -> case V206 of 3 -> fun (V207) -> {'Prelude.Types.Right', {'Builtin.MkPair', V205, 3}} end; _ -> case V7 of {'Builtin.MkPair', V208, V209} -> case V209 of 3 -> fun (V210) -> {'Prelude.Types.Right', {'Builtin.MkPair', V208, 3}} end; _ -> case V6 of {'Builtin.MkPair', V211, V212} -> case V212 of 4 -> fun (V213) -> {'Prelude.Types.Right', {'Builtin.MkPair', V211, 4}} end; _ -> fun (V214) -> case V7 of {'Builtin.MkPair', V215, V216} -> case V216 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V215, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V217) -> case V7 of {'Builtin.MkPair', V218, V219} -> case V219 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V218, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V220, V221} -> case V221 of 4 -> fun (V222) -> {'Prelude.Types.Right', {'Builtin.MkPair', V220, 4}} end; _ -> fun (V223) -> case V7 of {'Builtin.MkPair', V224, V225} -> case V225 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V224, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V226) -> case V7 of {'Builtin.MkPair', V227, V228} -> case V228 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V227, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V229, V230} -> case V230 of 3 -> fun (V231) -> {'Prelude.Types.Right', {'Builtin.MkPair', V229, 3}} end; _ -> case V6 of {'Builtin.MkPair', V232, V233} -> case V233 of 4 -> fun (V234) -> {'Prelude.Types.Right', {'Builtin.MkPair', V232, 4}} end; _ -> fun (V235) -> case V7 of {'Builtin.MkPair', V236, V237} -> case V237 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V236, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V238) -> case V7 of {'Builtin.MkPair', V239, V240} -> case V240 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V239, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V241, V242} -> case V242 of 4 -> fun (V243) -> {'Prelude.Types.Right', {'Builtin.MkPair', V241, 4}} end; _ -> fun (V244) -> case V7 of {'Builtin.MkPair', V245, V246} -> case V246 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V245, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V247) -> case V7 of {'Builtin.MkPair', V248, V249} -> case V249 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V248, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end; _ -> case V6 of {'Builtin.MkPair', V250, V251} -> case V251 of 3 -> fun (V252) -> {'Prelude.Types.Right', {'Builtin.MkPair', V250, 3}} end; _ -> case V7 of {'Builtin.MkPair', V253, V254} -> case V254 of 3 -> fun (V255) -> {'Prelude.Types.Right', {'Builtin.MkPair', V253, 3}} end; _ -> case V6 of {'Builtin.MkPair', V256, V257} -> case V257 of 4 -> fun (V258) -> {'Prelude.Types.Right', {'Builtin.MkPair', V256, 4}} end; _ -> fun (V259) -> case V7 of {'Builtin.MkPair', V260, V261} -> case V261 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V260, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V262) -> case V7 of {'Builtin.MkPair', V263, V264} -> case V264 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V263, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V265, V266} -> case V266 of 4 -> fun (V267) -> {'Prelude.Types.Right', {'Builtin.MkPair', V265, 4}} end; _ -> fun (V268) -> case V7 of {'Builtin.MkPair', V269, V270} -> case V270 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V269, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V271) -> case V7 of {'Builtin.MkPair', V272, V273} -> case V273 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V272, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V274, V275} -> case V275 of 3 -> fun (V276) -> {'Prelude.Types.Right', {'Builtin.MkPair', V274, 3}} end; _ -> case V6 of {'Builtin.MkPair', V277, V278} -> case V278 of 4 -> fun (V279) -> {'Prelude.Types.Right', {'Builtin.MkPair', V277, 4}} end; _ -> fun (V280) -> case V7 of {'Builtin.MkPair', V281, V282} -> case V282 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V281, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V283) -> case V7 of {'Builtin.MkPair', V284, V285} -> case V285 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V284, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V286, V287} -> case V287 of 4 -> fun (V288) -> {'Prelude.Types.Right', {'Builtin.MkPair', V286, 4}} end; _ -> fun (V289) -> case V7 of {'Builtin.MkPair', V290, V291} -> case V291 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V290, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V292) -> case V7 of {'Builtin.MkPair', V293, V294} -> case V294 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V293, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end end; _ -> case V7 of {'Builtin.MkPair', V295, V296} -> case V296 of 0 -> fun (V297) -> {'Prelude.Types.Right', {'Builtin.MkPair', V295, 0}} end; _ -> case V6 of {'Builtin.MkPair', V298, V299} -> case V299 of 3 -> fun (V300) -> {'Prelude.Types.Right', {'Builtin.MkPair', V298, 3}} end; _ -> case V7 of {'Builtin.MkPair', V301, V302} -> case V302 of 3 -> fun (V303) -> {'Prelude.Types.Right', {'Builtin.MkPair', V301, 3}} end; _ -> case V6 of {'Builtin.MkPair', V304, V305} -> case V305 of 4 -> fun (V306) -> {'Prelude.Types.Right', {'Builtin.MkPair', V304, 4}} end; _ -> fun (V307) -> case V7 of {'Builtin.MkPair', V308, V309} -> case V309 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V308, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V310) -> case V7 of {'Builtin.MkPair', V311, V312} -> case V312 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V311, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V313, V314} -> case V314 of 4 -> fun (V315) -> {'Prelude.Types.Right', {'Builtin.MkPair', V313, 4}} end; _ -> fun (V316) -> case V7 of {'Builtin.MkPair', V317, V318} -> case V318 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V317, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V319) -> case V7 of {'Builtin.MkPair', V320, V321} -> case V321 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V320, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V322, V323} -> case V323 of 3 -> fun (V324) -> {'Prelude.Types.Right', {'Builtin.MkPair', V322, 3}} end; _ -> case V6 of {'Builtin.MkPair', V325, V326} -> case V326 of 4 -> fun (V327) -> {'Prelude.Types.Right', {'Builtin.MkPair', V325, 4}} end; _ -> fun (V328) -> case V7 of {'Builtin.MkPair', V329, V330} -> case V330 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V329, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V331) -> case V7 of {'Builtin.MkPair', V332, V333} -> case V333 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V332, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V334, V335} -> case V335 of 4 -> fun (V336) -> {'Prelude.Types.Right', {'Builtin.MkPair', V334, 4}} end; _ -> fun (V337) -> case V7 of {'Builtin.MkPair', V338, V339} -> case V339 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V338, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V340) -> case V7 of {'Builtin.MkPair', V341, V342} -> case V342 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V341, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end; _ -> case V6 of {'Builtin.MkPair', V343, V344} -> case V344 of 3 -> fun (V345) -> {'Prelude.Types.Right', {'Builtin.MkPair', V343, 3}} end; _ -> case V7 of {'Builtin.MkPair', V346, V347} -> case V347 of 3 -> fun (V348) -> {'Prelude.Types.Right', {'Builtin.MkPair', V346, 3}} end; _ -> case V6 of {'Builtin.MkPair', V349, V350} -> case V350 of 4 -> fun (V351) -> {'Prelude.Types.Right', {'Builtin.MkPair', V349, 4}} end; _ -> fun (V352) -> case V7 of {'Builtin.MkPair', V353, V354} -> case V354 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V353, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V355) -> case V7 of {'Builtin.MkPair', V356, V357} -> case V357 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V356, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V358, V359} -> case V359 of 4 -> fun (V360) -> {'Prelude.Types.Right', {'Builtin.MkPair', V358, 4}} end; _ -> fun (V361) -> case V7 of {'Builtin.MkPair', V362, V363} -> case V363 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V362, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V364) -> case V7 of {'Builtin.MkPair', V365, V366} -> case V366 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V365, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V367, V368} -> case V368 of 3 -> fun (V369) -> {'Prelude.Types.Right', {'Builtin.MkPair', V367, 3}} end; _ -> case V6 of {'Builtin.MkPair', V370, V371} -> case V371 of 4 -> fun (V372) -> {'Prelude.Types.Right', {'Builtin.MkPair', V370, 4}} end; _ -> fun (V373) -> case V7 of {'Builtin.MkPair', V374, V375} -> case V375 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V374, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V376) -> case V7 of {'Builtin.MkPair', V377, V378} -> case V378 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V377, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V379, V380} -> case V380 of 4 -> fun (V381) -> {'Prelude.Types.Right', {'Builtin.MkPair', V379, 4}} end; _ -> fun (V382) -> case V7 of {'Builtin.MkPair', V383, V384} -> case V384 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V383, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V385) -> case V7 of {'Builtin.MkPair', V386, V387} -> case V387 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V386, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end end; 0 -> fun (V388) -> {'Prelude.Types.Right', {'Builtin.MkPair', V8, 0}} end; _ -> case V7 of {'Builtin.MkPair', V389, V390} -> case V390 of 0 -> fun (V391) -> {'Prelude.Types.Right', {'Builtin.MkPair', V389, 0}} end; _ -> case V6 of {'Builtin.MkPair', V392, V393} -> case V393 of 3 -> fun (V394) -> {'Prelude.Types.Right', {'Builtin.MkPair', V392, 3}} end; _ -> case V7 of {'Builtin.MkPair', V395, V396} -> case V396 of 3 -> fun (V397) -> {'Prelude.Types.Right', {'Builtin.MkPair', V395, 3}} end; _ -> case V6 of {'Builtin.MkPair', V398, V399} -> case V399 of 4 -> fun (V400) -> {'Prelude.Types.Right', {'Builtin.MkPair', V398, 4}} end; _ -> fun (V401) -> case V7 of {'Builtin.MkPair', V402, V403} -> case V403 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V402, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V404) -> case V7 of {'Builtin.MkPair', V405, V406} -> case V406 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V405, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V407, V408} -> case V408 of 4 -> fun (V409) -> {'Prelude.Types.Right', {'Builtin.MkPair', V407, 4}} end; _ -> fun (V410) -> case V7 of {'Builtin.MkPair', V411, V412} -> case V412 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V411, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V413) -> case V7 of {'Builtin.MkPair', V414, V415} -> case V415 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V414, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V416, V417} -> case V417 of 3 -> fun (V418) -> {'Prelude.Types.Right', {'Builtin.MkPair', V416, 3}} end; _ -> case V6 of {'Builtin.MkPair', V419, V420} -> case V420 of 4 -> fun (V421) -> {'Prelude.Types.Right', {'Builtin.MkPair', V419, 4}} end; _ -> fun (V422) -> case V7 of {'Builtin.MkPair', V423, V424} -> case V424 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V423, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V425) -> case V7 of {'Builtin.MkPair', V426, V427} -> case V427 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V426, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V428, V429} -> case V429 of 4 -> fun (V430) -> {'Prelude.Types.Right', {'Builtin.MkPair', V428, 4}} end; _ -> fun (V431) -> case V7 of {'Builtin.MkPair', V432, V433} -> case V433 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V432, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V434) -> case V7 of {'Builtin.MkPair', V435, V436} -> case V436 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V435, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end; _ -> case V6 of {'Builtin.MkPair', V437, V438} -> case V438 of 3 -> fun (V439) -> {'Prelude.Types.Right', {'Builtin.MkPair', V437, 3}} end; _ -> case V7 of {'Builtin.MkPair', V440, V441} -> case V441 of 3 -> fun (V442) -> {'Prelude.Types.Right', {'Builtin.MkPair', V440, 3}} end; _ -> case V6 of {'Builtin.MkPair', V443, V444} -> case V444 of 4 -> fun (V445) -> {'Prelude.Types.Right', {'Builtin.MkPair', V443, 4}} end; _ -> fun (V446) -> case V7 of {'Builtin.MkPair', V447, V448} -> case V448 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V447, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V449) -> case V7 of {'Builtin.MkPair', V450, V451} -> case V451 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V450, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V452, V453} -> case V453 of 4 -> fun (V454) -> {'Prelude.Types.Right', {'Builtin.MkPair', V452, 4}} end; _ -> fun (V455) -> case V7 of {'Builtin.MkPair', V456, V457} -> case V457 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V456, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V458) -> case V7 of {'Builtin.MkPair', V459, V460} -> case V460 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V459, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V461, V462} -> case V462 of 3 -> fun (V463) -> {'Prelude.Types.Right', {'Builtin.MkPair', V461, 3}} end; _ -> case V6 of {'Builtin.MkPair', V464, V465} -> case V465 of 4 -> fun (V466) -> {'Prelude.Types.Right', {'Builtin.MkPair', V464, 4}} end; _ -> fun (V467) -> case V7 of {'Builtin.MkPair', V468, V469} -> case V469 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V468, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V470) -> case V7 of {'Builtin.MkPair', V471, V472} -> case V472 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V471, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V473, V474} -> case V474 of 4 -> fun (V475) -> {'Prelude.Types.Right', {'Builtin.MkPair', V473, 4}} end; _ -> fun (V476) -> case V7 of {'Builtin.MkPair', V477, V478} -> case V478 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V477, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V479) -> case V7 of {'Builtin.MkPair', V480, V481} -> case V481 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V480, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end end; _ -> case V7 of {'Builtin.MkPair', V482, V483} -> case V483 of 0 -> fun (V484) -> {'Prelude.Types.Right', {'Builtin.MkPair', V482, 0}} end; _ -> case V6 of {'Builtin.MkPair', V485, V486} -> case V486 of 3 -> fun (V487) -> {'Prelude.Types.Right', {'Builtin.MkPair', V485, 3}} end; _ -> case V7 of {'Builtin.MkPair', V488, V489} -> case V489 of 3 -> fun (V490) -> {'Prelude.Types.Right', {'Builtin.MkPair', V488, 3}} end; _ -> case V6 of {'Builtin.MkPair', V491, V492} -> case V492 of 4 -> fun (V493) -> {'Prelude.Types.Right', {'Builtin.MkPair', V491, 4}} end; _ -> fun (V494) -> case V7 of {'Builtin.MkPair', V495, V496} -> case V496 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V495, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V497) -> case V7 of {'Builtin.MkPair', V498, V499} -> case V499 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V498, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V500, V501} -> case V501 of 4 -> fun (V502) -> {'Prelude.Types.Right', {'Builtin.MkPair', V500, 4}} end; _ -> fun (V503) -> case V7 of {'Builtin.MkPair', V504, V505} -> case V505 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V504, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V506) -> case V7 of {'Builtin.MkPair', V507, V508} -> case V508 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V507, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V509, V510} -> case V510 of 3 -> fun (V511) -> {'Prelude.Types.Right', {'Builtin.MkPair', V509, 3}} end; _ -> case V6 of {'Builtin.MkPair', V512, V513} -> case V513 of 4 -> fun (V514) -> {'Prelude.Types.Right', {'Builtin.MkPair', V512, 4}} end; _ -> fun (V515) -> case V7 of {'Builtin.MkPair', V516, V517} -> case V517 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V516, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V518) -> case V7 of {'Builtin.MkPair', V519, V520} -> case V520 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V519, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V521, V522} -> case V522 of 4 -> fun (V523) -> {'Prelude.Types.Right', {'Builtin.MkPair', V521, 4}} end; _ -> fun (V524) -> case V7 of {'Builtin.MkPair', V525, V526} -> case V526 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V525, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V527) -> case V7 of {'Builtin.MkPair', V528, V529} -> case V529 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V528, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end; _ -> case V6 of {'Builtin.MkPair', V530, V531} -> case V531 of 3 -> fun (V532) -> {'Prelude.Types.Right', {'Builtin.MkPair', V530, 3}} end; _ -> case V7 of {'Builtin.MkPair', V533, V534} -> case V534 of 3 -> fun (V535) -> {'Prelude.Types.Right', {'Builtin.MkPair', V533, 3}} end; _ -> case V6 of {'Builtin.MkPair', V536, V537} -> case V537 of 4 -> fun (V538) -> {'Prelude.Types.Right', {'Builtin.MkPair', V536, 4}} end; _ -> fun (V539) -> case V7 of {'Builtin.MkPair', V540, V541} -> case V541 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V540, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V542) -> case V7 of {'Builtin.MkPair', V543, V544} -> case V544 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V543, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V545, V546} -> case V546 of 4 -> fun (V547) -> {'Prelude.Types.Right', {'Builtin.MkPair', V545, 4}} end; _ -> fun (V548) -> case V7 of {'Builtin.MkPair', V549, V550} -> case V550 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V549, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V551) -> case V7 of {'Builtin.MkPair', V552, V553} -> case V553 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V552, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end; _ -> case V7 of {'Builtin.MkPair', V554, V555} -> case V555 of 3 -> fun (V556) -> {'Prelude.Types.Right', {'Builtin.MkPair', V554, 3}} end; _ -> case V6 of {'Builtin.MkPair', V557, V558} -> case V558 of 4 -> fun (V559) -> {'Prelude.Types.Right', {'Builtin.MkPair', V557, 4}} end; _ -> fun (V560) -> case V7 of {'Builtin.MkPair', V561, V562} -> case V562 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V561, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V563) -> case V7 of {'Builtin.MkPair', V564, V565} -> case V565 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V564, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end; _ -> case V6 of {'Builtin.MkPair', V566, V567} -> case V567 of 4 -> fun (V568) -> {'Prelude.Types.Right', {'Builtin.MkPair', V566, 4}} end; _ -> fun (V569) -> case V7 of {'Builtin.MkPair', V570, V571} -> case V571 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V570, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end; _ -> fun (V572) -> case V7 of {'Builtin.MkPair', V573, V574} -> case V574 of 4 -> {'Prelude.Types.Right', {'Builtin.MkPair', V573, 4}}; _ -> {'Prelude.Types.Right', V6} end; _ -> {'Prelude.Types.Right', V6} end end end end end end end.
'nested--9608-11931--in--un--combine'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V8, V9) -> case V9 of [] -> fun (V10) -> {'Prelude.Types.Right', V8} end; _ -> begin (V11 = ('nested--9608-11931--in--un--combine'(V0, V1, V2, V3, V4, V5, V9))), fun (V12) -> begin (V13 = (V11(V12))), case V13 of {'Prelude.Types.Left', V14} -> {'Prelude.Types.Left', V14}; {'Prelude.Types.Right', V15} -> (begin (V16 = ('nested--9608-11930--in--un--combineUsages'(V0, V1, V2, V3, V4, V5, V8, V15))), V16 end(V12)) end end end end end end(E0, E1)) end.
'nested--17135-14708--in--un--checkUsageOK'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V14, V15)) end end, 0, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V16, V17)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, V12)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V11, 1)); 0 -> 0 end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.LinearUsed', V8, V11, V0}, V13)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end.
'nested--9608-11925--in--un--checkUsageOK'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V12, V13)) end end, 0, fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V14, V15)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V18, V19)) end end}}, V10)) of 1 -> case case V9 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V7, 1)); 0 -> 0 end of 1 -> 1; 0 -> case V9 of 1 -> 0; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V7, 1)) end end; 0 -> 0 end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.LinearUsed', V6, V7, V8}, V11)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end.
'nested--9502-9009--in--un--checkUsageOK'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V13, V14)) end end, 0, fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V15, V16)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V19, V20)) end end}}, V11)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V10, 1)); 0 -> 0 end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.LinearUsed', V4, V10, V1}, V12)); 0 -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end.
'nested--9608-11927--in--un--checkEnvUsage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V7 of [] -> fun (V13) -> case V9 of {'Core.Env.Nil'} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; [E0 | E1] -> (fun (V14, V15) -> case V9 of {'Core.Env.::', V16, V17} -> begin (V18 = ('un--localPrf'(V6))), begin (V19 = ('un--count'(('Idris.Idris2.Core.TT':'un--varIdx'(V18)), V10))), begin (V29 = case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V20, V21)) end end, 0, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V22, V23)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V26, V27)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V16)))) of 1 -> ('un--updateHoleUsage'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, [V14 | V15])), V5, V4, case (V19 =:= 0) of 'false' -> 0; _ -> 1 end, V18, [], V12)); 0 -> fun (V28) -> {'Prelude.Types.Right', 0} end end), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V50 = begin (V42 = case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V34, V35)) end end, 0, fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V36, V37)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V40, V41)) end end}}, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(('Idris.Idris2.Core.TT':'un--multiplicity'(V16)), V8)))) of 1 -> case V33 of 1 -> case (V19 =:= 0) of 'false' -> 0; _ -> 1 end; 0 -> 0 end; 0 -> 0 end of 1 -> 1; 0 -> V19 end), begin (V44 = fun (V43) -> ('nested--9608-11925--in--un--checkUsageOK'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.TT':'un--getLoc'(('Idris.Idris2.Core.TT':'un--binderType'(V16)))), V42, V14, ('nested--9608-11926--in--un--isLocArg'(V0, V1, V2, V3, V4, V5, V18, V11)), ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(('Idris.Idris2.Core.TT':'un--multiplicity'(V16)), V8)), V43)) end), fun (V45) -> begin (V46 = (V44(V45))), case V46 of {'Prelude.Types.Left', V47} -> {'Prelude.Types.Left', V47}; {'Prelude.Types.Right', V48} -> (begin (V49 = ('nested--9608-11927--in--un--checkEnvUsage'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, [V14 | []])), V15, V8, V17, V10, V11, V12))), V49 end(V45)) end end end end end), V50 end(V30)) end end end end end end end end(E0, E1)) end.
'dn--un--show_Show_ArgUsage'(V0) -> case V0 of 0 -> <<"any"/utf8>>; 1 -> <<"0"/utf8>>; 2 -> <<"1"/utf8>>; 3 -> <<"keep"/utf8>>; 4 -> <<"unknown"/utf8>> end.
'dn--un--show_Show_(Usage $vars)'(V0) -> <<<<"["/utf8>>/binary, <<('nested--7789-6465--in--un--showAll'(V0, V0))/binary, <<"]"/utf8>>/binary>>/binary>>.
'dn--un--showPrec_Show_ArgUsage'(V0, V1) -> ('dn--un--show_Show_ArgUsage'(V1)).
'un--updateHoleUsageArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = ('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V8))), fun (V11) -> begin (V12 = (V10(V11))), case V12 of {'Prelude.Types.Left', V13} -> {'Prelude.Types.Left', V13}; {'Prelude.Types.Right', V14} -> (begin (V22 = begin (V15 = ('un--updateHoleUsageArgs'(V0, V1, V2, V3, V4, V5, V9))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V21 = fun (V20) -> {'Prelude.Types.Right', case V14 of 1 -> 1; 0 -> V19 end} end), V21 end(V16)) end end end end), V22 end(V11)) end end end end end(E0, E1)) end.
'un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = V4), case V6 of {'Core.TT.Bind', V8, V9, V10, V11} -> case V10 of {'Core.TT.Let', V12, V13, V14, V15} -> begin (V16 = ('un--updateHoleUsage'(V0, V1, V2, V3, V7, V5, V14))), fun (V17) -> begin (V18 = (V16(V17))), case V18 of {'Prelude.Types.Left', V19} -> {'Prelude.Types.Left', V19}; {'Prelude.Types.Right', V20} -> (begin (V36 = begin (V29 = ('un--updateHoleUsage'([V9 | V0], V1, V2, V3, (V7 + 1), ((begin (V26 = fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V24, V25)) end end end end), fun (V27) -> fun (V28) -> ((((V26('erased'))('erased'))(V27))(V28)) end end end(fun (V21) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V21)) end))(V5)), V11))), fun (V30) -> begin (V31 = (V29(V30))), case V31 of {'Prelude.Types.Left', V32} -> {'Prelude.Types.Left', V32}; {'Prelude.Types.Right', V33} -> (begin (V35 = fun (V34) -> {'Prelude.Types.Right', case V20 of 1 -> 1; 0 -> V33 end} end), V35 end(V30)) end end end end), V36 end(V17)) end end end end; _ -> ('un--updateHoleUsage'([V9 | V0], V1, V2, V3, (V7 + 1), ((begin (V42 = fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V40, V41)) end end end end), fun (V43) -> fun (V44) -> ((((V42('erased'))('erased'))(V43))(V44)) end end end(fun (V37) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V37)) end))(V5)), V11)) end; _ -> case V6 of {'Core.TT.Meta', V45, V46, V47, V48} -> begin (V54 = begin (V49 = V1), fun (V50) -> begin (V53 = (begin (V51 = V49), fun (V52) -> ('erlang':'get'(V51)) end end(V50))), {'Prelude.Types.Right', V53} end end end), fun (V55) -> begin (V56 = (V54(V55))), case V56 of {'Prelude.Types.Left', V57} -> {'Prelude.Types.Left', V57}; {'Prelude.Types.Right', V58} -> (begin (V236 = begin (V91 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', V47}, case V58 of {'Core.Context.MkDefs', V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90} -> V59 end))), fun (V92) -> begin (V93 = (V91(V92))), case V93 of {'Prelude.Types.Left', V94} -> {'Prelude.Types.Left', V94}; {'Prelude.Types.Right', V95} -> (begin (V235 = case V95 of {'Prelude.Types.Just', V96} -> case V96 of {'Core.Context.Context.MkGlobalDef', V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118} -> case V114 of {'Core.Context.Context.Hole', V119, V120} -> begin (V143 = case V96 of {'Core.Context.Context.MkGlobalDef', V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142} -> V123 end), begin (V144 = ('un--updateHoleType'(V0, V1, V2, V3, V4, V5, V143, V48))), fun (V145) -> begin (V146 = (V144(V145))), case V146 of {'Prelude.Types.Left', V147} -> {'Prelude.Types.Left', V147}; {'Prelude.Types.Right', V148} -> (begin (V234 = begin (V149 = ('Idris.Idris2.Core.Context':'un--updateTy'(V1, V47, V148))), fun (V150) -> begin (V151 = (V149(V150))), case V151 of {'Prelude.Types.Left', V152} -> {'Prelude.Types.Left', V152}; {'Prelude.Types.Right', V153} -> (begin (V233 = begin (V176 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, <<"quantity.hole.update"/utf8>>, 5, fun () -> <<<<"New type of "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V96 of {'Core.Context.Context.MkGlobalDef', V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175} -> V155 end))/binary>> end, V148))), fun (V177) -> begin (V178 = (V176(V177))), case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> (begin (V232 = begin (V225 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, <<"quantity.hole.update"/utf8>>, 5, fun () -> <<<<"Updated from "/utf8>>/binary, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V96 of {'Core.Context.Context.MkGlobalDef', V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202} -> V182 end))/binary>> end, case V96 of {'Core.Context.Context.MkGlobalDef', V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224} -> V205 end))), fun (V226) -> begin (V227 = (V225(V226))), case V227 of {'Prelude.Types.Left', V228} -> {'Prelude.Types.Left', V228}; {'Prelude.Types.Right', V229} -> (begin (V231 = fun (V230) -> {'Prelude.Types.Right', 1} end), V231 end(V226)) end end end end), V232 end(V177)) end end end end), V233 end(V150)) end end end end), V234 end(V145)) end end end end end; _ -> ('un--updateHoleUsageArgs'(V0, V1, V2, V3, V4, V5, V48)) end end; {'Prelude.Types.Nothing'} -> ('un--updateHoleUsageArgs'(V0, V1, V2, V3, V4, V5, V48)) end), V235 end(V92)) end end end end), V236 end(V55)) end end end end; {'Core.TT.As', V237, V238, V239, V240} -> begin (V241 = ('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V239))), fun (V242) -> begin (V243 = (V241(V242))), case V243 of {'Prelude.Types.Left', V244} -> {'Prelude.Types.Left', V244}; {'Prelude.Types.Right', V245} -> (begin (V253 = begin (V246 = ('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V239))), fun (V247) -> begin (V248 = (V246(V247))), case V248 of {'Prelude.Types.Left', V249} -> {'Prelude.Types.Left', V249}; {'Prelude.Types.Right', V250} -> (begin (V252 = fun (V251) -> {'Prelude.Types.Right', case V245 of 1 -> 1; 0 -> V250 end} end), V252 end(V247)) end end end end), V253 end(V242)) end end end end; {'Core.TT.TDelayed', V254, V255, V256} -> ('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V256)); {'Core.TT.TDelay', V257, V258, V259, V260} -> ('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V260)); {'Core.TT.TForce', V261, V262, V263} -> ('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V263)); _ -> ('case--updateHoleUsage-7891'(V0, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V6)))) end end end.
'un--updateHoleType'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Core.TT.Bind', V8, V9, V10, V11} -> case V10 of {'Core.TT.Pi', V12, V13, V14, V15} -> case V7 of [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Core.TT.Local', V18, V19, V20} -> case case (('Idris.Idris2.Core.TT':'un--varIdx'(V4)) =:= V20) of 'false' -> 0; _ -> 1 end of 1 -> begin (V21 = ('un--updateHoleType'(V0, V1, V2, 0, V4, V5, V11, V17))), fun (V22) -> begin (V23 = (V21(V22))), case V23 of {'Prelude.Types.Left', V24} -> {'Prelude.Types.Left', V24}; {'Prelude.Types.Right', V25} -> (begin (V32 = begin (V30 = case V3 of 1 -> V13; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V26, V27)) end end, 0, fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V28, V29)) end end, 1})) end), fun (V31) -> {'Prelude.Types.Right', {'Core.TT.Bind', V8, V9, {'Core.TT.Pi', V12, V30, V14, V15}, V25}} end end), V32 end(V22)) end end end end; 0 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Prelude.Interfaces.MkFoldable', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V44)) end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V48, V49, V50, V51)) end end end end end end end, fun (V52) -> fun (V53) -> V53 end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V56, V57, V58)) end end end end end}, {'Prelude.EqOrd.MkEq', fun (V59) -> fun (V60) -> case (V59 =:= V60) of 'false' -> 0; _ -> 1 end end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V61, V62)) end end}, V20, ((begin (V68 = fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V66, V67)) end end end end), fun (V69) -> fun (V70) -> ((((V68('erased'))('erased'))(V69))(V70)) end end end(fun (V63) -> ('Idris.Idris2.Core.TT':'un--varIdx'(V63)) end))(V5)))) of 1 -> begin (V71 = ('un--updateHoleType'(V0, V1, V2, V3, V4, V5, V11, V17))), fun (V72) -> begin (V73 = (V71(V72))), case V73 of {'Prelude.Types.Left', V74} -> {'Prelude.Types.Left', V74}; {'Prelude.Types.Right', V75} -> (begin (V81 = fun (V76) -> {'Prelude.Types.Right', {'Core.TT.Bind', V8, V9, {'Core.TT.Pi', V12, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V77) -> fun (V78) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V77, V78)) end end, 0, fun (V79) -> fun (V80) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V79, V80)) end end, 1})), V14, V15}, V75}} end), V81 end(V72)) end end end end; 0 -> begin (V82 = ('un--updateHoleType'(V0, V1, V2, V3, V4, V5, V11, V17))), fun (V83) -> begin (V84 = (V82(V83))), case V84 of {'Prelude.Types.Left', V85} -> {'Prelude.Types.Left', V85}; {'Prelude.Types.Right', V86} -> (begin (V88 = fun (V87) -> {'Prelude.Types.Right', {'Core.TT.Bind', V8, V9, {'Core.TT.Pi', V12, V13, V14, V15}, V86}} end), V88 end(V83)) end end end end end end; _ -> begin (V108 = begin (V89 = ('un--updateHoleUsage'(V0, V1, V2, 0, V4, V5, V16))), ((begin (V105 = fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V102, V103, V104)) end end end end end), fun (V106) -> fun (V107) -> ((((V105('erased'))('erased'))(V106))(V107)) end end end((begin (V97 = fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> case V94 of {'Prelude.Types.Left', V95} -> {'Prelude.Types.Left', V95}; {'Prelude.Types.Right', V96} -> {'Prelude.Types.Right', (V93(V96))} end end end end end), fun (V98) -> fun (V99) -> ((((V97('erased'))('erased'))(V98))(V99)) end end end(fun (V90) -> {'Builtin.MkUnit'} end))))(V89)) end), fun (V109) -> begin (V110 = (V108(V109))), case V110 of {'Prelude.Types.Left', V111} -> {'Prelude.Types.Left', V111}; {'Prelude.Types.Right', V112} -> (begin (V120 = begin (V113 = ('un--updateHoleType'(V0, V1, V2, V3, V4, V5, V11, V17))), fun (V114) -> begin (V115 = (V113(V114))), case V115 of {'Prelude.Types.Left', V116} -> {'Prelude.Types.Left', V116}; {'Prelude.Types.Right', V117} -> (begin (V119 = fun (V118) -> {'Prelude.Types.Right', {'Core.TT.Bind', V8, V9, {'Core.TT.Pi', V12, V13, V14, V15}, V117}} end), V119 end(V114)) end end end end), V120 end(V109)) end end end end end end(E0, E1)); _ -> begin (V140 = begin (V121 = ('un--updateHoleUsageArgs'(V0, V1, V2, 0, V4, V5, V7))), ((begin (V137 = fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V134, V135, V136)) end end end end end), fun (V138) -> fun (V139) -> ((((V137('erased'))('erased'))(V138))(V139)) end end end((begin (V129 = fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> case V126 of {'Prelude.Types.Left', V127} -> {'Prelude.Types.Left', V127}; {'Prelude.Types.Right', V128} -> {'Prelude.Types.Right', (V125(V128))} end end end end end), fun (V130) -> fun (V131) -> ((((V129('erased'))('erased'))(V130))(V131)) end end end(fun (V122) -> {'Builtin.MkUnit'} end))))(V121)) end), fun (V141) -> begin (V142 = (V140(V141))), case V142 of {'Prelude.Types.Left', V143} -> {'Prelude.Types.Left', V143}; {'Prelude.Types.Right', V144} -> (begin (V146 = fun (V145) -> {'Prelude.Types.Right', V6} end), V146 end(V141)) end end end end end; _ -> begin (V166 = begin (V147 = ('un--updateHoleUsageArgs'(V0, V1, V2, 0, V4, V5, V7))), ((begin (V163 = fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V160, V161, V162)) end end end end end), fun (V164) -> fun (V165) -> ((((V163('erased'))('erased'))(V164))(V165)) end end end((begin (V155 = fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> case V152 of {'Prelude.Types.Left', V153} -> {'Prelude.Types.Left', V153}; {'Prelude.Types.Right', V154} -> {'Prelude.Types.Right', (V151(V154))} end end end end end), fun (V156) -> fun (V157) -> ((((V155('erased'))('erased'))(V156))(V157)) end end end(fun (V148) -> {'Builtin.MkUnit'} end))))(V147)) end), fun (V167) -> begin (V168 = (V166(V167))), case V168 of {'Prelude.Types.Left', V169} -> {'Prelude.Types.Left', V169}; {'Prelude.Types.Right', V170} -> (begin (V172 = fun (V171) -> {'Prelude.Types.Right', V6} end), V172 end(V167)) end end end end end; _ -> begin (V192 = begin (V173 = ('un--updateHoleUsageArgs'(V0, V1, V2, 0, V4, V5, V7))), ((begin (V189 = fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V186, V187, V188)) end end end end end), fun (V190) -> fun (V191) -> ((((V189('erased'))('erased'))(V190))(V191)) end end end((begin (V181 = fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> case V178 of {'Prelude.Types.Left', V179} -> {'Prelude.Types.Left', V179}; {'Prelude.Types.Right', V180} -> {'Prelude.Types.Right', (V177(V180))} end end end end end), fun (V182) -> fun (V183) -> ((((V181('erased'))('erased'))(V182))(V183)) end end end(fun (V174) -> {'Builtin.MkUnit'} end))))(V173)) end), fun (V193) -> begin (V194 = (V192(V193))), case V194 of {'Prelude.Types.Left', V195} -> {'Prelude.Types.Left', V195}; {'Prelude.Types.Right', V196} -> (begin (V198 = fun (V197) -> {'Prelude.Types.Right', V6} end), V198 end(V193)) end end end end end.
'un--localPrf'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> begin (V3 = ('un--localPrf'(V2))), (V3 + 1) end end(E0, E1)) end.
'un--linearCheck'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"quantity"/utf8>>, 5, fun () -> <<"Linearity check on "/utf8>> end, V7))), fun (V9) -> begin (V10 = (V8(V9))), case V10 of {'Prelude.Types.Left', V11} -> {'Prelude.Types.Left', V11}; {'Prelude.Types.Right', V12} -> (begin (V43 = begin (V13 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"quantity"/utf8>>, 5, <<"In env"/utf8>>, V6))), fun (V14) -> begin (V15 = (V13(V14))), case V15 of {'Prelude.Types.Left', V16} -> {'Prelude.Types.Left', V16}; {'Prelude.Types.Right', V17} -> (begin (V42 = begin (V18 = ('un--lcheck'(V0, V1, V2, V4, V5, V6, V7))), fun (V19) -> begin (V20 = (V18(V19))), case V20 of {'Prelude.Types.Left', V21} -> {'Prelude.Types.Left', V21}; {'Prelude.Types.Right', V22} -> (begin (V41 = case V22 of {'Builtin.MkPair', V23, V24} -> case V24 of {'Builtin.MkPair', V25, V26} -> begin (V27 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"quantity"/utf8>>, 5, fun () -> <<<<"Used: "/utf8>>/binary, ('dn--un--show_Show_(Usage $vars)'(V26))/binary>> end))), fun (V28) -> begin (V29 = (V27(V28))), case V29 of {'Prelude.Types.Left', V30} -> {'Prelude.Types.Left', V30}; {'Prelude.Types.Right', V31} -> (begin (V40 = begin (V33 = case V5 of 1 -> fun (V32) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> ('un--checkEnvUsage'(V0, [], V1, V2, V3, V4, V6, V26, V23)) end), fun (V34) -> begin (V35 = (V33(V34))), case V35 of {'Prelude.Types.Left', V36} -> {'Prelude.Types.Left', V36}; {'Prelude.Types.Right', V37} -> (begin (V39 = fun (V38) -> {'Prelude.Types.Right', V23} end), V39 end(V34)) end end end end), V40 end(V28)) end end end end end end), V41 end(V19)) end end end end), V42 end(V14)) end end end end), V43 end(V9)) end end end end.
'un--lcheckMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of [E0 | E1] -> (fun (V12, V13) -> case V11 of {'Core.Value.NBind', V14, V15, V16, V17} -> case V16 of {'Core.TT.Pi', V18, V19, V20, V21} -> begin (V22 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V19, V3))), begin (V23 = ('un--lcheck'(V0, V1, V2, V22, V4, V5, V12))), fun (V24) -> begin (V25 = (V23(V24))), case V25 of {'Prelude.Types.Left', V26} -> {'Prelude.Types.Left', V26}; {'Prelude.Types.Right', V27} -> (begin (V69 = case V27 of {'Builtin.MkPair', V28, V29} -> case V29 of {'Builtin.MkPair', V30, V31} -> begin (V37 = begin (V32 = V1), fun (V33) -> begin (V36 = (begin (V34 = V32), fun (V35) -> ('erlang':'get'(V34)) end end(V33))), {'Prelude.Types.Right', V36} end end end), fun (V38) -> begin (V39 = (V37(V38))), case V39 of {'Prelude.Types.Left', V40} -> {'Prelude.Types.Left', V40}; {'Prelude.Types.Right', V41} -> (begin (V68 = begin (V42 = ((V17(V41))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V5, V28))))), fun (V43) -> begin (V44 = (V42(V43))), case V44 of {'Prelude.Types.Left', V45} -> {'Prelude.Types.Left', V45}; {'Prelude.Types.Right', V46} -> (begin (V67 = begin (V55 = case case V4 of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V47) -> fun (V48) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V47, V48)) end end, 0, fun (V49) -> fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V49, V50)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V51) -> fun (V52) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V53, V54)) end end}}, V19)); 0 -> 0 end of 1 -> {'Core.TT.Erased', V6, {'Core.TT.Placeholder'}}; 0 -> V28 end), begin (V56 = ('un--lcheckMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, [V55 | V10], V46))), fun (V57) -> begin (V58 = (V56(V57))), case V58 of {'Prelude.Types.Left', V59} -> {'Prelude.Types.Left', V59}; {'Prelude.Types.Right', V60} -> (begin (V66 = fun (V61) -> case V60 of {'Builtin.MkPair', V62, V63} -> case V63 of {'Builtin.MkPair', V64, V65} -> {'Prelude.Types.Right', {'Builtin.MkPair', V62, {'Builtin.MkPair', V64, ('un--++'(V31, V65))}}} end end end), V66 end(V57)) end end end end end), V67 end(V43)) end end end end), V68 end(V38)) end end end end end end), V69 end(V24)) end end end end end; _ -> begin (V75 = begin (V70 = V1), fun (V71) -> begin (V74 = (begin (V72 = V70), fun (V73) -> ('erlang':'get'(V72)) end end(V71))), {'Prelude.Types.Right', V74} end end end), fun (V76) -> begin (V77 = (V75(V76))), case V77 of {'Prelude.Types.Left', V78} -> {'Prelude.Types.Left', V78}; {'Prelude.Types.Right', V79} -> (begin (V115 = begin (V81 = fun (V80) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V79, V80)) end), fun (V82) -> begin (V83 = (V81(V82))), case V83 of {'Prelude.Types.Left', V84} -> {'Prelude.Types.Left', V84}; {'Prelude.Types.Right', V85} -> (begin (V114 = begin (V86 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V85, V5, V11))), fun (V87) -> begin (V88 = (V86(V87))), case V88 of {'Prelude.Types.Left', V89} -> {'Prelude.Types.Left', V89}; {'Prelude.Types.Right', V90} -> (begin (V113 = begin (V96 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V91, V92)) end end, fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V93, V94, V95)) end end end}, V7))), fun (V97) -> begin (V98 = (V96(V97))), case V98 of {'Prelude.Types.Left', V99} -> {'Prelude.Types.Left', V99}; {'Prelude.Types.Right', V100} -> (begin (V112 = begin (V105 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V103, V104)) end end}, V90))), fun (V106) -> begin (V107 = (V105(V106))), case V107 of {'Prelude.Types.Left', V108} -> {'Prelude.Types.Left', V108}; {'Prelude.Types.Right', V109} -> (begin (V111 = fun (V110) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V6, <<<<"Linearity checking failed on metavar "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V100))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V109))/binary, <<" not a function type)"/utf8>>/binary>>/binary>>/binary>>/binary>>}, V110)) end), V111 end(V106)) end end end end), V112 end(V97)) end end end end), V113 end(V87)) end end end end), V114 end(V82)) end end end end), V115 end(V76)) end end end end end; _ -> begin (V121 = begin (V116 = V1), fun (V117) -> begin (V120 = (begin (V118 = V116), fun (V119) -> ('erlang':'get'(V118)) end end(V117))), {'Prelude.Types.Right', V120} end end end), fun (V122) -> begin (V123 = (V121(V122))), case V123 of {'Prelude.Types.Left', V124} -> {'Prelude.Types.Left', V124}; {'Prelude.Types.Right', V125} -> (begin (V161 = begin (V127 = fun (V126) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V125, V126)) end), fun (V128) -> begin (V129 = (V127(V128))), case V129 of {'Prelude.Types.Left', V130} -> {'Prelude.Types.Left', V130}; {'Prelude.Types.Right', V131} -> (begin (V160 = begin (V132 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V131, V5, V11))), fun (V133) -> begin (V134 = (V132(V133))), case V134 of {'Prelude.Types.Left', V135} -> {'Prelude.Types.Left', V135}; {'Prelude.Types.Right', V136} -> (begin (V159 = begin (V142 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V137) -> fun (V138) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V137, V138)) end end, fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V139, V140, V141)) end end end}, V7))), fun (V143) -> begin (V144 = (V142(V143))), case V144 of {'Prelude.Types.Left', V145} -> {'Prelude.Types.Left', V145}; {'Prelude.Types.Right', V146} -> (begin (V158 = begin (V151 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V147) -> fun (V148) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V147, V148)) end end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V149, V150)) end end}, V136))), fun (V152) -> begin (V153 = (V151(V152))), case V153 of {'Prelude.Types.Left', V154} -> {'Prelude.Types.Left', V154}; {'Prelude.Types.Right', V155} -> (begin (V157 = fun (V156) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V6, <<<<"Linearity checking failed on metavar "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V146))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V155))/binary, <<" not a function type)"/utf8>>/binary>>/binary>>/binary>>/binary>>}, V156)) end), V157 end(V152)) end end end end), V158 end(V143)) end end end end), V159 end(V133)) end end end end), V160 end(V128)) end end end end), V161 end(V122)) end end end end end end(E0, E1)); [] -> begin (V167 = begin (V162 = V1), fun (V163) -> begin (V166 = (begin (V164 = V162), fun (V165) -> ('erlang':'get'(V164)) end end(V163))), {'Prelude.Types.Right', V166} end end end), fun (V168) -> begin (V169 = (V167(V168))), case V169 of {'Prelude.Types.Left', V170} -> {'Prelude.Types.Left', V170}; {'Prelude.Types.Right', V171} -> (begin (V173 = fun (V172) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Meta', V6, V7, V8, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V10))}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V171, V5, V11)), {'Core.LinearCheck.Nil'}}}} end), V173 end(V168)) end end end end end.
'un--lcheckDef'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of 1 -> begin (V12 = begin (V7 = V0), fun (V8) -> begin (V11 = (begin (V9 = V7), fun (V10) -> ('erlang':'get'(V9)) end end(V8))), {'Prelude.Types.Right', V11} end end end), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V79 = begin (V49 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V6, case V16 of {'Core.Context.MkDefs', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} -> V17 end))), fun (V50) -> begin (V51 = (V49(V50))), case V51 of {'Prelude.Types.Left', V52} -> {'Prelude.Types.Left', V52}; {'Prelude.Types.Right', V53} -> (begin (V78 = case V53 of {'Prelude.Types.Just', V54} -> fun (V55) -> {'Prelude.Types.Right', case V54 of {'Core.Context.Context.MkGlobalDef', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77} -> V58 end} end; {'Prelude.Types.Nothing'} -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V2, V6)) end), V78 end(V50)) end end end end), V79 end(V13)) end end end end; 0 -> begin (V85 = begin (V80 = V0), fun (V81) -> begin (V84 = (begin (V82 = V80), fun (V83) -> ('erlang':'get'(V82)) end end(V81))), {'Prelude.Types.Right', V84} end end end), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V122 = ('case--lcheckDef-13790'(V6, V5, V3, V2, V1, V0, V89, ('Idris.Idris2.Core.Context':'un--getNameID'(V6, case V89 of {'Core.Context.MkDefs', V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121} -> V90 end))))), V122 end(V86)) end end end end end.
'un--lcheckBinder'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.TT.Lam', V7, V8, V9, V10} -> begin (V15 = ('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V11, V12)) end end, 0, fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V13, V14)) end end, 1})), V4, V5, V10))), fun (V16) -> begin (V17 = (V15(V16))), case V17 of {'Prelude.Types.Left', V18} -> {'Prelude.Types.Left', V18}; {'Prelude.Types.Right', V19} -> (begin (V25 = fun (V20) -> case V19 of {'Builtin.MkPair', V21, V22} -> case V22 of {'Builtin.MkPair', V23, V24} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Lam', V7, V8, V9, V21}, {'Builtin.MkPair', V23, {'Core.LinearCheck.Nil'}}}} end end end), V25 end(V16)) end end end end; {'Core.TT.Let', V26, V27, V28, V29} -> begin (V34 = ('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V30, V31)) end end, 0, fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V32, V33)) end end, 1})), V4, V5, V29))), fun (V35) -> begin (V36 = (V34(V35))), case V36 of {'Prelude.Types.Left', V37} -> {'Prelude.Types.Left', V37}; {'Prelude.Types.Right', V38} -> (begin (V54 = case V38 of {'Builtin.MkPair', V39, V40} -> case V40 of {'Builtin.MkPair', V41, V42} -> begin (V43 = ('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V3, V27)), V4, V5, V28))), fun (V44) -> begin (V45 = (V43(V44))), case V45 of {'Prelude.Types.Left', V46} -> {'Prelude.Types.Left', V46}; {'Prelude.Types.Right', V47} -> (begin (V53 = fun (V48) -> case V47 of {'Builtin.MkPair', V49, V50} -> case V50 of {'Builtin.MkPair', V51, V52} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Let', V26, V27, V49, V39}, {'Builtin.MkPair', V41, V52}}} end end end), V53 end(V44)) end end end end end end), V54 end(V35)) end end end end; {'Core.TT.Pi', V55, V56, V57, V58} -> begin (V59 = ('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V3, V56)), V4, V5, V58))), fun (V60) -> begin (V61 = (V59(V60))), case V61 of {'Prelude.Types.Left', V62} -> {'Prelude.Types.Left', V62}; {'Prelude.Types.Right', V63} -> (begin (V69 = fun (V64) -> case V63 of {'Builtin.MkPair', V65, V66} -> case V66 of {'Builtin.MkPair', V67, V68} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Pi', V55, V56, V57, V65}, {'Builtin.MkPair', V67, {'Core.LinearCheck.Nil'}}}} end end end), V69 end(V60)) end end end end; {'Core.TT.PVar', V70, V71, V72, V73} -> begin (V78 = ('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V74) -> fun (V75) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V74, V75)) end end, 0, fun (V76) -> fun (V77) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V76, V77)) end end, 1})), V4, V5, V73))), fun (V79) -> begin (V80 = (V78(V79))), case V80 of {'Prelude.Types.Left', V81} -> {'Prelude.Types.Left', V81}; {'Prelude.Types.Right', V82} -> (begin (V88 = fun (V83) -> case V82 of {'Builtin.MkPair', V84, V85} -> case V85 of {'Builtin.MkPair', V86, V87} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.PVar', V70, V71, V72, V84}, {'Builtin.MkPair', V86, {'Core.LinearCheck.Nil'}}}} end end end), V88 end(V79)) end end end end; {'Core.TT.PLet', V89, V90, V91, V92} -> begin (V97 = ('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V93) -> fun (V94) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V93, V94)) end end, 0, fun (V95) -> fun (V96) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V95, V96)) end end, 1})), V4, V5, V92))), fun (V98) -> begin (V99 = (V97(V98))), case V99 of {'Prelude.Types.Left', V100} -> {'Prelude.Types.Left', V100}; {'Prelude.Types.Right', V101} -> (begin (V117 = case V101 of {'Builtin.MkPair', V102, V103} -> case V103 of {'Builtin.MkPair', V104, V105} -> begin (V106 = ('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V3, V90)), V4, V5, V91))), fun (V107) -> begin (V108 = (V106(V107))), case V108 of {'Prelude.Types.Left', V109} -> {'Prelude.Types.Left', V109}; {'Prelude.Types.Right', V110} -> (begin (V116 = fun (V111) -> case V110 of {'Builtin.MkPair', V112, V113} -> case V113 of {'Builtin.MkPair', V114, V115} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.PLet', V89, V90, V112, V102}, {'Builtin.MkPair', V104, V115}}} end end end), V116 end(V107)) end end end end end end), V117 end(V98)) end end end end; {'Core.TT.PVTy', V118, V119, V120} -> begin (V125 = ('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V121) -> fun (V122) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V121, V122)) end end, 0, fun (V123) -> fun (V124) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V123, V124)) end end, 1})), V4, V5, V120))), fun (V126) -> begin (V127 = (V125(V126))), case V127 of {'Prelude.Types.Left', V128} -> {'Prelude.Types.Left', V128}; {'Prelude.Types.Right', V129} -> (begin (V135 = fun (V130) -> case V129 of {'Builtin.MkPair', V131, V132} -> case V132 of {'Builtin.MkPair', V133, V134} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.PVTy', V118, V119, V131}, {'Builtin.MkPair', V133, {'Core.LinearCheck.Nil'}}}} end end end), V135 end(V126)) end end end end end.
'un--lcheck'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Core.TT.Local', V7, V8, V9} -> begin (V17 = ('Idris.Idris2.Core.Env':'un--getBinder'({'Core.TT.dn--un--__mkWeaken', fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V12)) end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V15, V16)) end end end end}, V0, V9, V5))), begin (V18 = ('Idris.Idris2.Core.TT':'un--multiplicity'(V17))), begin (V19 = ('Idris.Idris2.Core.TT':'un--binderType'(V17))), begin (V22 = case V4 of 1 -> fun (V20) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> fun (V21) -> ('nested--9502-8250--in--un--rigSafe'(V9, V0, V8, V7, V5, V4, V3, V2, V1, V18, V3, V21)) end end), fun (V23) -> begin (V24 = (V22(V23))), case V24 of {'Prelude.Types.Left', V25} -> {'Prelude.Types.Left', V25}; {'Prelude.Types.Right', V26} -> (begin (V28 = fun (V27) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Local', V7, V8, V9}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, V19)), ('nested--9502-8251--in--un--used'(V9, V0, V8, V7, V5, V4, V3, V2, V1, V3))}}} end), V28 end(V23)) end end end end end end end; {'Core.TT.Ref', V29, V30, V31} -> begin (V32 = ('un--lcheckDef'(V1, V2, V29, V3, V4, V5, V31))), fun (V33) -> begin (V34 = (V32(V33))), case V34 of {'Prelude.Types.Left', V35} -> {'Prelude.Types.Left', V35}; {'Prelude.Types.Right', V36} -> (begin (V38 = fun (V37) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Ref', V29, V30, V31}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, ('Idris.Idris2.Core.TT':'un--embed'(V36)))), {'Core.LinearCheck.Nil'}}}} end), V38 end(V33)) end end end end; {'Core.TT.Meta', V39, V40, V41, V42} -> begin (V48 = begin (V43 = V1), fun (V44) -> begin (V47 = (begin (V45 = V43), fun (V46) -> ('erlang':'get'(V45)) end end(V44))), {'Prelude.Types.Right', V47} end end end), fun (V49) -> begin (V50 = (V48(V49))), case V50 of {'Prelude.Types.Left', V51} -> {'Prelude.Types.Left', V51}; {'Prelude.Types.Right', V52} -> (begin (V304 = begin (V85 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Core.Name.Resolved', V41}, case V52 of {'Core.Context.MkDefs', V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84} -> V53 end))), fun (V86) -> begin (V87 = (V85(V86))), case V87 of {'Prelude.Types.Left', V88} -> {'Prelude.Types.Left', V88}; {'Prelude.Types.Right', V89} -> (begin (V303 = case V89 of {'Prelude.Types.Just', V90} -> begin (V150 = ('Idris.Idris2.Algebra.Semiring':'un--branchZero'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V91) -> fun (V92) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V91, V92)) end end, 0, fun (V93) -> fun (V94) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V93, V94)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V95) -> fun (V96) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V95, V96)) end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V97, V98)) end end}}, case V90 of {'Core.Context.Context.MkGlobalDef', V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120} -> case V101 of {'Core.TT.Erased', V121, V122} -> fun () -> 1 end; _ -> fun () -> 0 end end end, case V90 of {'Core.Context.Context.MkGlobalDef', V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144} -> case V140 of {'Core.Context.Context.PMDef', V145, V146, V147, V148, V149} -> fun () -> 1 end; _ -> fun () -> 0 end end end, V3))), begin (V200 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"quantity"/utf8>>, 10, begin (V193 = case V90 of {'Core.Context.Context.MkGlobalDef', V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172} -> case V168 of {'Core.Context.Context.PMDef', V173, V174, V175, V176, V177} -> case V175 of {'Core.Case.CaseTree.STerm', V178, V179} -> begin (V184 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V180) -> fun (V181) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V180, V181)) end end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V182, V183)) end end}, V179))), fun (V185) -> begin (V186 = (V184(V185))), case V186 of {'Prelude.Types.Left', V187} -> {'Prelude.Types.Left', V187}; {'Prelude.Types.Right', V188} -> (begin (V190 = fun (V189) -> {'Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V174, V188))} end), V190 end(V185)) end end end end; _ -> fun (V191) -> {'Prelude.Types.Right', <<""/utf8>>} end end; _ -> fun (V192) -> {'Prelude.Types.Right', <<""/utf8>>} end end end), fun (V194) -> begin (V195 = (V193(V194))), case V195 of {'Prelude.Types.Left', V196} -> {'Prelude.Types.Left', V196}; {'Prelude.Types.Right', V197} -> (begin (V199 = fun (V198) -> {'Prelude.Types.Right', <<('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V3))/binary, <<<<": "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V40))/binary, <<<<" "/utf8>>/binary, <<('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V39))/binary, <<<<"\x{a}"/utf8>>/binary, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V197))/binary>>/binary>>/binary>>/binary>>/binary>>/binary>>} end), V199 end(V194)) end end end end))), fun (V201) -> begin (V202 = (V200(V201))), case V202 of {'Prelude.Types.Left', V203} -> {'Prelude.Types.Left', V203}; {'Prelude.Types.Right', V204} -> (begin (V302 = case V150 of 1 -> ('un--expandMeta'(V0, V1, V2, V3, V4, V5, V40, V41, case V90 of {'Core.Context.Context.MkGlobalDef', V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226} -> V222 end, V42)); 0 -> begin (V295 = case V90 of {'Core.Context.Context.MkGlobalDef', V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248} -> case V244 of {'Core.Context.Context.Hole', V249, V250} -> ('nested--9502-8445--in--un--unusedHoleArgs'(V0, V42, V41, V40, V39, V5, V4, V3, V2, V1, V42, case V90 of {'Core.Context.Context.MkGlobalDef', V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272} -> V253 end)); _ -> case V90 of {'Core.Context.Context.MkGlobalDef', V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294} -> V275 end end end), begin (V296 = ('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V52, V5, ('Idris.Idris2.Core.TT':'un--embed'(V295))))), fun (V297) -> begin (V298 = (V296(V297))), case V298 of {'Prelude.Types.Left', V299} -> {'Prelude.Types.Left', V299}; {'Prelude.Types.Right', V300} -> (begin (V301 = ('un--lcheckMeta'(V0, V1, V2, V3, V4, V5, V39, V40, V41, V42, [], V300))), V301 end(V297)) end end end end end end), V302 end(V201)) end end end end end; _ -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V39, V40)) end), V303 end(V86)) end end end end), V304 end(V49)) end end end end; {'Core.TT.Bind', V305, V306, V307, V308} -> begin (V319 = ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V1, V2, ('un--lcheckBinder'(V0, V1, V2, ('nested--9502-9006--in--un--rig'(V0, V306, V308, V307, V305, V5, V4, V3, V2, V1)), V4, V5, V307)), fun (V309) -> case V309 of {'Core.Core.LinearMisuse', V310, V311, V312, V313} -> ('un--lcheckBinder'(V0, V1, V2, ('nested--9502-9006--in--un--rig'(V0, V306, V308, V307, V305, V5, V4, V3, V2, V1)), V4, V5, ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V307, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V314) -> fun (V315) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V314, V315)) end end, 0, fun (V316) -> fun (V317) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V316, V317)) end end, 1})))))); _ -> fun (V318) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V309, V318)) end end end))), fun (V320) -> begin (V321 = (V319(V320))), case V321 of {'Prelude.Types.Left', V322} -> {'Prelude.Types.Left', V322}; {'Prelude.Types.Right', V323} -> (begin (V395 = case V323 of {'Builtin.MkPair', V324, V325} -> case V325 of {'Builtin.MkPair', V326, V327} -> begin (V332 = case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> case V307 of {'Core.TT.Lam', V328, V329, V330, V331} -> ('nested--9502-9008--in--un--eraseLinear'(V0, V306, V308, V307, V305, V5, V4, V3, V2, V1, V5)); _ -> V5 end; 0 -> V5 end), begin (V333 = ('un--lcheck'([V306 | V0], V1, V2, ('nested--9502-9006--in--un--rig'(V0, V306, V308, V307, V305, V5, V4, V3, V2, V1)), V4, {'Core.Env.::', V324, V332}, V308))), fun (V334) -> begin (V335 = (V333(V334))), case V335 of {'Prelude.Types.Left', V336} -> {'Prelude.Types.Left', V336}; {'Prelude.Types.Right', V337} -> (begin (V394 = case V337 of {'Builtin.MkPair', V338, V339} -> case V339 of {'Builtin.MkPair', V340, V341} -> begin (V342 = ('un--count'(0, V341))), begin (V360 = case case V4 of 1 -> 0; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V343) -> fun (V344) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V343, V344)) end end, 0, fun (V345) -> fun (V346) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V345, V346)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V347) -> fun (V348) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V347, V348)) end end, fun (V349) -> fun (V350) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V349, V350)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V307)))) end of 1 -> ('un--updateHoleUsage'([V306 | V0], V1, V2, case (V342 =:= 0) of 'false' -> 0; _ -> 1 end, 0, ((begin (V356 = fun (V352) -> fun (V353) -> fun (V354) -> fun (V355) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V354, V355)) end end end end), fun (V357) -> fun (V358) -> ((((V356('erased'))('erased'))(V357))(V358)) end end end(fun (V351) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V351)) end))(('nested--9502-9007--in--un--getZeroes'(V0, V306, V308, V307, V305, V5, V4, V3, V2, V1, V0, V332)))), V338)); 0 -> fun (V359) -> {'Prelude.Types.Right', 0} end end), fun (V361) -> begin (V362 = (V360(V361))), case V362 of {'Prelude.Types.Left', V363} -> {'Prelude.Types.Left', V363}; {'Prelude.Types.Right', V364} -> (begin (V393 = begin (V373 = case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V365) -> fun (V366) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V365, V366)) end end, 0, fun (V367) -> fun (V368) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V367, V368)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V369) -> fun (V370) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V369, V370)) end end, fun (V371) -> fun (V372) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V371, V372)) end end}}, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(('Idris.Idris2.Core.TT':'un--multiplicity'(V307)), ('nested--9502-9006--in--un--rig'(V0, V306, V308, V307, V305, V5, V4, V3, V2, V1)))))) of 1 -> case V364 of 1 -> case (V342 =:= 0) of 'false' -> 0; _ -> 1 end; 0 -> 0 end; 0 -> 0 end of 1 -> 1; 0 -> V342 end), begin (V376 = case V4 of 1 -> fun (V374) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> fun (V375) -> ('nested--9502-9009--in--un--checkUsageOK'(V0, V306, V308, V307, V305, V5, V4, V3, V2, V1, V373, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(('Idris.Idris2.Core.TT':'un--multiplicity'(V307)), ('nested--9502-9006--in--un--rig'(V0, V306, V308, V307, V305, V5, V4, V3, V2, V1)))), V375)) end end), fun (V377) -> begin (V378 = (V376(V377))), case V378 of {'Prelude.Types.Left', V379} -> {'Prelude.Types.Left', V379}; {'Prelude.Types.Right', V380} -> (begin (V392 = begin (V386 = begin (V381 = V1), fun (V382) -> begin (V385 = (begin (V383 = V381), fun (V384) -> ('erlang':'get'(V383)) end end(V382))), {'Prelude.Types.Right', V385} end end end), fun (V387) -> begin (V388 = (V386(V387))), case V388 of {'Prelude.Types.Left', V389} -> {'Prelude.Types.Left', V389}; {'Prelude.Types.Right', V390} -> (begin (V391 = ('un--discharge'(V0, V390, V5, V305, V306, V324, V326, V338, V340, ('un--++'(V327, ('un--doneScope'(V341))))))), V391 end(V387)) end end end end), V392 end(V377)) end end end end end), V393 end(V361)) end end end end end end end), V394 end(V334)) end end end end end end end), V395 end(V320)) end end end end; {'Core.TT.App', V396, V397, V398} -> begin (V399 = ('un--lcheck'(V0, V1, V2, V3, V4, V5, V397))), fun (V400) -> begin (V401 = (V399(V400))), case V401 of {'Prelude.Types.Left', V402} -> {'Prelude.Types.Left', V402}; {'Prelude.Types.Right', V403} -> (begin (V721 = case V403 of {'Builtin.MkPair', V404, V405} -> case V405 of {'Builtin.MkPair', V406, V407} -> begin (V413 = begin (V408 = V1), fun (V409) -> begin (V412 = (begin (V410 = V408), fun (V411) -> ('erlang':'get'(V410)) end end(V409))), {'Prelude.Types.Right', V412} end end end), fun (V414) -> begin (V415 = (V413(V414))), case V415 of {'Prelude.Types.Left', V416} -> {'Prelude.Types.Left', V416}; {'Prelude.Types.Right', V417} -> (begin (V720 = begin (V418 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V406))), fun (V419) -> begin (V420 = (V418(V419))), case V420 of {'Prelude.Types.Left', V421} -> {'Prelude.Types.Left', V421}; {'Prelude.Types.Right', V422} -> (begin (V719 = case V422 of {'Core.Value.NBind', V423, V424, V425, V426} -> case V425 of {'Core.TT.Pi', V427, V428, V429, V430} -> begin (V431 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V428, V3))), begin (V432 = ('un--lcheck'(V0, V1, V2, V431, V4, V5, V398))), fun (V433) -> begin (V434 = (V432(V433))), case V434 of {'Prelude.Types.Left', V435} -> {'Prelude.Types.Left', V435}; {'Prelude.Types.Right', V436} -> (begin (V560 = case V436 of {'Builtin.MkPair', V437, V438} -> case V438 of {'Builtin.MkPair', V439, V440} -> begin (V441 = ((V426(V417))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V5, V437))))), fun (V442) -> begin (V443 = (V441(V442))), case V443 of {'Prelude.Types.Left', V444} -> {'Prelude.Types.Left', V444}; {'Prelude.Types.Right', V445} -> (begin (V559 = begin (V454 = case case V4 of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V446) -> fun (V447) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V446, V447)) end end, 0, fun (V448) -> fun (V449) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V448, V449)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V450) -> fun (V451) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V450, V451)) end end, fun (V452) -> fun (V453) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V452, V453)) end end}}, V428)); 0 -> 0 end of 1 -> {'Core.TT.Erased', V396, {'Core.TT.Placeholder'}}; 0 -> V437 end), begin (V455 = ('Idris.Idris2.Core.Context':'un--getSession'(V1))), fun (V456) -> begin (V457 = (V455(V456))), case V457 of {'Prelude.Types.Left', V458} -> {'Prelude.Types.Left', V458}; {'Prelude.Types.Right', V459} -> (begin (V558 = begin (V551 = case case V459 of {'Core.Options.MkSessionOpts', V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485} -> V473 end of 1 -> begin (V486 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V439))), fun (V487) -> begin (V488 = (V486(V487))), case V488 of {'Prelude.Types.Left', V489} -> {'Prelude.Types.Left', V489}; {'Prelude.Types.Right', V490} -> (begin (V549 = begin (V491 = ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V417, V430))), fun (V492) -> begin (V493 = (V491(V492))), case V493 of {'Prelude.Types.Left', V494} -> {'Prelude.Types.Left', V494}; {'Prelude.Types.Right', V495} -> (begin (V548 = begin (V496 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_NF'(V1, V0, V417, V5, V490, V495))), fun (V497) -> begin (V498 = (V496(V497))), case V498 of {'Prelude.Types.Left', V499} -> {'Prelude.Types.Left', V499}; {'Prelude.Types.Right', V500} -> (begin (V547 = case V500 of 1 -> fun (V501) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end; 0 -> begin (V502 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V417, V5, V430))), fun (V503) -> begin (V504 = (V502(V503))), case V504 of {'Prelude.Types.Left', V505} -> {'Prelude.Types.Left', V505}; {'Prelude.Types.Right', V506} -> (begin (V546 = begin (V507 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V417, V5, V490))), fun (V508) -> begin (V509 = (V507(V508))), case V509 of {'Prelude.Types.Left', V510} -> {'Prelude.Types.Left', V510}; {'Prelude.Types.Right', V511} -> (begin (V545 = fun (V512) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.CantConvert', V0, V396, case V417 of {'Core.Context.MkDefs', V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544} -> V513 end, V5, V506, V511}, V512)) end), V545 end(V508)) end end end end), V546 end(V503)) end end end end end), V547 end(V497)) end end end end), V548 end(V492)) end end end end), V549 end(V487)) end end end end; 0 -> fun (V550) -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end), fun (V552) -> begin (V553 = (V551(V552))), case V553 of {'Prelude.Types.Left', V554} -> {'Prelude.Types.Left', V554}; {'Prelude.Types.Right', V555} -> (begin (V557 = fun (V556) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.App', V396, V404, V454}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V417, V5, V445)), ('un--++'(V407, V440))}}} end), V557 end(V552)) end end end end), V558 end(V456)) end end end end end), V559 end(V442)) end end end end end end), V560 end(V433)) end end end end end; _ -> begin (V561 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V406))), fun (V562) -> begin (V563 = (V561(V562))), case V563 of {'Prelude.Types.Left', V564} -> {'Prelude.Types.Left', V564}; {'Prelude.Types.Right', V565} -> (begin (V587 = begin (V570 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V566) -> fun (V567) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V566, V567)) end end, fun (V568) -> fun (V569) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V568, V569)) end end}, V404))), fun (V571) -> begin (V572 = (V570(V571))), case V572 of {'Prelude.Types.Left', V573} -> {'Prelude.Types.Left', V573}; {'Prelude.Types.Right', V574} -> (begin (V586 = begin (V579 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V575) -> fun (V576) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V575, V576)) end end, fun (V577) -> fun (V578) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V577, V578)) end end}, V565))), fun (V580) -> begin (V581 = (V579(V580))), case V581 of {'Prelude.Types.Left', V582} -> {'Prelude.Types.Left', V582}; {'Prelude.Types.Right', V583} -> (begin (V585 = fun (V584) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V396, <<<<"Linearity checking failed on "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V574))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V583))/binary, <<" not a function type)"/utf8>>/binary>>/binary>>/binary>>/binary>>}, V584)) end), V585 end(V580)) end end end end), V586 end(V571)) end end end end), V587 end(V562)) end end end end end; {'Core.Value.NApp', V588, V589, V590} -> case V589 of {'Core.Value.NRef', V591, V592} -> begin (V625 = ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V592, case V417 of {'Core.Context.MkDefs', V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624} -> V593 end))), fun (V626) -> begin (V627 = (V625(V626))), case V627 of {'Prelude.Types.Left', V628} -> {'Prelude.Types.Left', V628}; {'Prelude.Types.Right', V629} -> (begin (V664 = case V629 of {'Prelude.Types.Just', V630} -> begin (V631 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V406))), fun (V632) -> begin (V633 = (V631(V632))), case V633 of {'Prelude.Types.Left', V634} -> {'Prelude.Types.Left', V634}; {'Prelude.Types.Right', V635} -> (begin (V663 = begin (V640 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V636) -> fun (V637) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V636, V637)) end end, fun (V638) -> fun (V639) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V638, V639)) end end}, V404))), fun (V641) -> begin (V642 = (V640(V641))), case V642 of {'Prelude.Types.Left', V643} -> {'Prelude.Types.Left', V643}; {'Prelude.Types.Right', V644} -> (begin (V662 = begin (V649 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V645) -> fun (V646) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V645, V646)) end end, fun (V647) -> fun (V648) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V647, V648)) end end}, V635))), fun (V650) -> begin (V651 = (V649(V650))), case V651 of {'Prelude.Types.Left', V652} -> {'Prelude.Types.Left', V652}; {'Prelude.Types.Right', V653} -> (begin (V661 = fun (V654) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V396, <<(begin (V656 = fun (V655) -> V655 end), fun (V657) -> (V656(V657)) end end(<<"Linearity checking failed on "/utf8>>))/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V644))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V653))/binary, (begin (V659 = fun (V658) -> V658 end), fun (V660) -> (V659(V660)) end end(<<" not a function type)"/utf8>>))/binary>>/binary>>/binary>>/binary>>}, V654)) end), V661 end(V650)) end end end end), V662 end(V641)) end end end end), V663 end(V632)) end end end end; _ -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V396, V592)) end), V664 end(V626)) end end end end; _ -> begin (V665 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V406))), fun (V666) -> begin (V667 = (V665(V666))), case V667 of {'Prelude.Types.Left', V668} -> {'Prelude.Types.Left', V668}; {'Prelude.Types.Right', V669} -> (begin (V691 = begin (V674 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V670) -> fun (V671) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V670, V671)) end end, fun (V672) -> fun (V673) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V672, V673)) end end}, V404))), fun (V675) -> begin (V676 = (V674(V675))), case V676 of {'Prelude.Types.Left', V677} -> {'Prelude.Types.Left', V677}; {'Prelude.Types.Right', V678} -> (begin (V690 = begin (V683 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V679) -> fun (V680) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V679, V680)) end end, fun (V681) -> fun (V682) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V681, V682)) end end}, V669))), fun (V684) -> begin (V685 = (V683(V684))), case V685 of {'Prelude.Types.Left', V686} -> {'Prelude.Types.Left', V686}; {'Prelude.Types.Right', V687} -> (begin (V689 = fun (V688) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V396, <<<<"Linearity checking failed on "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V678))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V687))/binary, <<" not a function type)"/utf8>>/binary>>/binary>>/binary>>/binary>>}, V688)) end), V689 end(V684)) end end end end), V690 end(V675)) end end end end), V691 end(V666)) end end end end end; _ -> begin (V692 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V406))), fun (V693) -> begin (V694 = (V692(V693))), case V694 of {'Prelude.Types.Left', V695} -> {'Prelude.Types.Left', V695}; {'Prelude.Types.Right', V696} -> (begin (V718 = begin (V701 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V697) -> fun (V698) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V697, V698)) end end, fun (V699) -> fun (V700) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V699, V700)) end end}, V404))), fun (V702) -> begin (V703 = (V701(V702))), case V703 of {'Prelude.Types.Left', V704} -> {'Prelude.Types.Left', V704}; {'Prelude.Types.Right', V705} -> (begin (V717 = begin (V710 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Core.Context.dn--un--__mkHasNames', fun (V706) -> fun (V707) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V706, V707)) end end, fun (V708) -> fun (V709) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V708, V709)) end end}, V696))), fun (V711) -> begin (V712 = (V710(V711))), case V712 of {'Prelude.Types.Left', V713} -> {'Prelude.Types.Left', V713}; {'Prelude.Types.Right', V714} -> (begin (V716 = fun (V715) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V396, <<<<"Linearity checking failed on "/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V705))/binary, <<<<" ("/utf8>>/binary, <<('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V714))/binary, <<" not a function type)"/utf8>>/binary>>/binary>>/binary>>/binary>>}, V715)) end), V716 end(V711)) end end end end), V717 end(V702)) end end end end), V718 end(V693)) end end end end end), V719 end(V419)) end end end end), V720 end(V414)) end end end end end end), V721 end(V400)) end end end end; {'Core.TT.As', V722, V723, V724, V725} -> begin (V726 = ('un--lcheck'(V0, V1, V2, V3, V4, V5, V724))), fun (V727) -> begin (V728 = (V726(V727))), case V728 of {'Prelude.Types.Left', V729} -> {'Prelude.Types.Left', V729}; {'Prelude.Types.Right', V730} -> (begin (V746 = case V730 of {'Builtin.MkPair', V731, V732} -> case V732 of {'Builtin.MkPair', V733, V734} -> begin (V735 = ('un--lcheck'(V0, V1, V2, V3, V4, V5, V725))), fun (V736) -> begin (V737 = (V735(V736))), case V737 of {'Prelude.Types.Left', V738} -> {'Prelude.Types.Left', V738}; {'Prelude.Types.Right', V739} -> (begin (V745 = fun (V740) -> case V739 of {'Builtin.MkPair', V741, V742} -> case V742 of {'Builtin.MkPair', V743, V744} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.As', V722, V723, V731, V741}, {'Builtin.MkPair', V743, V744}}} end end end), V745 end(V736)) end end end end end end), V746 end(V727)) end end end end; {'Core.TT.TDelayed', V747, V748, V749} -> begin (V750 = ('un--lcheck'(V0, V1, V2, V3, V4, V5, V749))), fun (V751) -> begin (V752 = (V750(V751))), case V752 of {'Prelude.Types.Left', V753} -> {'Prelude.Types.Left', V753}; {'Prelude.Types.Right', V754} -> (begin (V760 = fun (V755) -> case V754 of {'Builtin.MkPair', V756, V757} -> case V757 of {'Builtin.MkPair', V758, V759} -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.TDelayed', V747, V748, V756}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V747, {'Core.Name.MN', <<"top"/utf8>>, 0})), V759}}} end end end), V760 end(V751)) end end end end; {'Core.TT.TDelay', V761, V762, V763, V764} -> begin (V769 = ('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Algebra.Semiring.dn--un--__mkSemiring', fun (V765) -> fun (V766) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V765, V766)) end end, 0, fun (V767) -> fun (V768) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V767, V768)) end end, 1})), V4, V5, V763))), fun (V770) -> begin (V771 = (V769(V770))), case V771 of {'Prelude.Types.Left', V772} -> {'Prelude.Types.Left', V772}; {'Prelude.Types.Right', V773} -> (begin (V795 = case V773 of {'Builtin.MkPair', V774, V775} -> case V775 of {'Builtin.MkPair', V776, V777} -> begin (V778 = ('un--lcheck'(V0, V1, V2, V3, V4, V5, V764))), fun (V779) -> begin (V780 = (V778(V779))), case V780 of {'Prelude.Types.Left', V781} -> {'Prelude.Types.Left', V781}; {'Prelude.Types.Right', V782} -> (begin (V794 = case V782 of {'Builtin.MkPair', V783, V784} -> case V784 of {'Builtin.MkPair', V785, V786} -> begin (V787 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V785))), fun (V788) -> begin (V789 = (V787(V788))), case V789 of {'Prelude.Types.Left', V790} -> {'Prelude.Types.Left', V790}; {'Prelude.Types.Right', V791} -> (begin (V793 = fun (V792) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.TDelay', V761, V762, V774, V783}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, {'Core.TT.TDelayed', V761, V762, V791})), V786}}} end), V793 end(V788)) end end end end end end), V794 end(V779)) end end end end end end), V795 end(V770)) end end end end; {'Core.TT.TForce', V796, V797, V798} -> begin (V799 = ('un--lcheck'(V0, V1, V2, V3, V4, V5, V798))), fun (V800) -> begin (V801 = (V799(V800))), case V801 of {'Prelude.Types.Left', V802} -> {'Prelude.Types.Left', V802}; {'Prelude.Types.Right', V803} -> (begin (V830 = case V803 of {'Builtin.MkPair', V804, V805} -> case V805 of {'Builtin.MkPair', V806, V807} -> begin (V808 = ('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V806))), fun (V809) -> begin (V810 = (V808(V809))), case V810 of {'Prelude.Types.Left', V811} -> {'Prelude.Types.Left', V811}; {'Prelude.Types.Right', V812} -> (begin (V829 = case V812 of {'Core.Value.NDelayed', V813, V814, V815} -> begin (V821 = begin (V816 = V1), fun (V817) -> begin (V820 = (begin (V818 = V816), fun (V819) -> ('erlang':'get'(V818)) end end(V817))), {'Prelude.Types.Right', V820} end end end), fun (V822) -> begin (V823 = (V821(V822))), case V823 of {'Prelude.Types.Left', V824} -> {'Prelude.Types.Left', V824}; {'Prelude.Types.Right', V825} -> (begin (V827 = fun (V826) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.TForce', V796, V814, V804}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V825, V5, V815)), V807}}} end), V827 end(V822)) end end end end; _ -> fun (V828) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.GenericMsg', V796, <<"Not a delayed type"/utf8>>}, V828)) end end), V829 end(V809)) end end end end end end), V830 end(V800)) end end end end; {'Core.TT.PrimVal', V831, V832} -> fun (V833) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.PrimVal', V831, V832}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V831)), {'Core.LinearCheck.Nil'}}}} end; {'Core.TT.Erased', V834, V835} -> fun (V836) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Erased', V834, V835}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V834)), {'Core.LinearCheck.Nil'}}}} end; {'Core.TT.TType', V837, V838} -> fun (V839) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.TType', V837, V838}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V837, {'Core.Name.MN', <<"top"/utf8>>, 0})), {'Core.LinearCheck.Nil'}}}} end end.
'un--getArgUsage'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V6) -> ('nested--9608-11928--in--un--getPUsage'(V5, V4, V3, V2, V1, V0, V4, V6)) end, V5, []))), fun (V8) -> begin (V9 = (V7(V8))), case V9 of {'Prelude.Types.Left', V10} -> {'Prelude.Types.Left', V10}; {'Prelude.Types.Right', V11} -> (begin (V27 = begin (V12 = ('nested--9608-11931--in--un--combine'(V5, V4, V3, V2, V1, V0, V11))), fun (V13) -> begin (V14 = (V12(V13))), case V14 of {'Prelude.Types.Left', V15} -> {'Prelude.Types.Left', V15}; {'Prelude.Types.Right', V16} -> (begin (V26 = fun (V17) -> {'Prelude.Types.Right', ((begin (V23 = fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types.List':'un--mapAppend'({'Prelude.Basics.Lin'}, V21, V22)) end end end end), fun (V24) -> fun (V25) -> ((((V23('erased'))('erased'))(V24))(V25)) end end end(fun (V18) -> ('Idris.Idris2.Builtin':'un--snd'(V18)) end))(V16))} end), V26 end(V13)) end end end end), V27 end(V8)) end end end end.
'un--expandMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Core.Context.Context.PMDef', V10, V11, V12, V13, V14} -> case V11 of [] -> case V12 of {'Core.Case.CaseTree.STerm', V15, V16} -> begin (V17 = ('nested--9666-14095--in--un--substMeta'(V0, V10, V13, V14, V15, V16, V9, V7, V6, V5, V4, V3, V2, V1, [], V0, ('Idris.Idris2.Core.TT':'un--embed'(V16)), V9, {'Core.TT.SubstEnv.Nil'}))), fun (V18) -> begin (V19 = (V17(V18))), case V19 of {'Prelude.Types.Left', V20} -> {'Prelude.Types.Left', V20}; {'Prelude.Types.Right', V21} -> (begin (V22 = ('un--lcheck'(V0, V1, V2, V3, V4, V5, V21))), V22 end(V18)) end end end end; _ -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed metavar solution "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Def'(V8))/binary>>/binary>>/binary>>}, V23)) end end; _ -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed metavar solution "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Def'(V8))/binary>>/binary>>/binary>>}, V24)) end end; _ -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Core.Core.InternalError', <<<<"Badly formed metavar solution "/utf8>>/binary, <<('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))/binary, <<<<" "/utf8>>/binary, ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Def'(V8))/binary>>/binary>>/binary>>}, V25)) end end.
'un--doneScope'(V0) -> case V0 of {'Core.LinearCheck.Nil'} -> {'Core.LinearCheck.Nil'}; {'Core.LinearCheck.::', V1, V2} -> begin (V3 = V1), case V3 of 0 -> ('un--doneScope'(V2)); _ -> begin (V4 = (V3 - 1)), {'Core.LinearCheck.::', V4, ('un--doneScope'(V2))} end end end end.
'un--discharge'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V5 of {'Core.TT.Lam', V10, V11, V12, V13} -> begin (V14 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))), fun (V15) -> begin (V16 = (V14(V15))), case V16 of {'Prelude.Types.Left', V17} -> {'Prelude.Types.Left', V17}; {'Prelude.Types.Right', V18} -> (begin (V20 = fun (V19) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Bind', V3, V4, {'Core.TT.Lam', V10, V11, V12, V13}, V7}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, {'Core.TT.Bind', V3, V4, {'Core.TT.Pi', V10, V11, V12, V13}, V18})), V9}}} end), V20 end(V15)) end end end end; {'Core.TT.Let', V21, V22, V23, V24} -> begin (V25 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V31 = fun (V30) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Bind', V3, V4, {'Core.TT.Let', V21, V22, V23, V24}, V7}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, {'Core.TT.Bind', V3, V4, {'Core.TT.Let', V21, V22, V23, V24}, V29})), V9}}} end), V31 end(V26)) end end end end; {'Core.TT.Pi', V32, V33, V34, V35} -> fun (V36) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Bind', V3, V4, {'Core.TT.Pi', V32, V33, V34, V35}, V7}, {'Builtin.MkPair', V6, V9}}} end; {'Core.TT.PVar', V37, V38, V39, V40} -> begin (V41 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))), fun (V42) -> begin (V43 = (V41(V42))), case V43 of {'Prelude.Types.Left', V44} -> {'Prelude.Types.Left', V44}; {'Prelude.Types.Right', V45} -> (begin (V47 = fun (V46) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Bind', V3, V4, {'Core.TT.PVar', V37, V38, V39, V40}, V7}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, {'Core.TT.Bind', V3, V4, {'Core.TT.PVTy', V37, V38, V40}, V45})), V9}}} end), V47 end(V42)) end end end end; {'Core.TT.PLet', V48, V49, V50, V51} -> begin (V52 = ('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))), fun (V53) -> begin (V54 = (V52(V53))), case V54 of {'Prelude.Types.Left', V55} -> {'Prelude.Types.Left', V55}; {'Prelude.Types.Right', V56} -> (begin (V58 = fun (V57) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Bind', V3, V4, {'Core.TT.PLet', V48, V49, V50, V51}, V7}, {'Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, {'Core.TT.Bind', V3, V4, {'Core.TT.PLet', V48, V49, V50, V51}, V56})), V9}}} end), V58 end(V53)) end end end end; {'Core.TT.PVTy', V59, V60, V61} -> fun (V62) -> {'Prelude.Types.Right', {'Builtin.MkPair', {'Core.TT.Bind', V3, V4, {'Core.TT.PVTy', V59, V60, V61}, V7}, {'Builtin.MkPair', V6, V9}}} end end.
'un--count'(V0, V1) -> case V1 of {'Core.LinearCheck.Nil'} -> 0; {'Core.LinearCheck.::', V2, V3} -> case case (V0 =:= ('Idris.Idris2.Core.TT':'un--varIdx'(V2))) of 'false' -> 0; _ -> 1 end of 1 -> (('un--count'(V0, V3)) + 1); 0 -> ('un--count'(V0, V3)) end end.
'un--checkEnvUsage'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V0 of [] -> fun (V9) -> case V6 of {'Core.Env.Nil'} -> {'Prelude.Types.Right', {'Builtin.MkUnit'}} end end; [E0 | E1] -> (fun (V10, V11) -> case V6 of {'Core.Env.::', V12, V13} -> begin (V14 = ('un--localPrf'(V1))), begin (V15 = ('un--count'(('Idris.Idris2.Core.TT':'un--varIdx'(V14)), V7))), begin (V25 = case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V16, V17)) end end, 0, fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V18, V19)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V22, V23)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V12)))) of 1 -> ('un--updateHoleUsage'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1, [V10 | V11])), V2, V3, case (V15 =:= 0) of 'false' -> 0; _ -> 1 end, V14, [], V8)); 0 -> fun (V24) -> {'Prelude.Types.Right', 0} end end), fun (V26) -> begin (V27 = (V25(V26))), case V27 of {'Prelude.Types.Left', V28} -> {'Prelude.Types.Left', V28}; {'Prelude.Types.Right', V29} -> (begin (V46 = begin (V38 = case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Builtin.MkPair', {'Algebra.Semiring.dn--un--__mkSemiring', fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigPlus'(V30, V31)) end end, 0, fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V32, V33)) end end, 1}, {'Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V36, V37)) end end}}, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(('Idris.Idris2.Core.TT':'un--multiplicity'(V12)), V5)))) of 1 -> case V29 of 1 -> case (V15 =:= 0) of 'false' -> 0; _ -> 1 end; 0 -> 0 end; 0 -> 0 end of 1 -> 1; 0 -> V15 end), begin (V40 = fun (V39) -> ('nested--17135-14708--in--un--checkUsageOK'(V10, V11, V13, V12, V1, V8, V7, V5, V4, V3, V2, V38, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(('Idris.Idris2.Core.TT':'un--multiplicity'(V12)), V5)), V39)) end), fun (V41) -> begin (V42 = (V40(V41))), case V42 of {'Prelude.Types.Left', V43} -> {'Prelude.Types.Left', V43}; {'Prelude.Types.Right', V44} -> (begin (V45 = ('un--checkEnvUsage'(V11, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1, [V10 | []])), V2, V3, V4, V5, V13, V7, V8))), V45 end(V41)) end end end end end), V46 end(V26)) end end end end end end end end(E0, E1)) end.
'un--++'(V0, V1) -> case V0 of {'Core.LinearCheck.Nil'} -> V1; {'Core.LinearCheck.::', V2, V3} -> {'Core.LinearCheck.::', V2, ('un--++'(V3, V1))} end.
